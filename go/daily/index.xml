<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-07T01:33:57Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kubernetes-sigs/aws-ebs-csi-driver</title>
    <updated>2023-04-07T01:33:57Z</updated>
    <id>tag:github.com,2023-04-07:/kubernetes-sigs/aws-ebs-csi-driver</id>
    <link href="https://github.com/kubernetes-sigs/aws-ebs-csi-driver" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CSI driver for Amazon EBS https://aws.amazon.com/ebs/&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://kubernetes.io/blog/2023/03/10/image-registry-redirect/&#34;&gt;&lt;code&gt;k8s.gcr.io&lt;/code&gt; will be redirected on Monday March 20th&lt;/a&gt;, and may stop working entirely in the near future. If you are using &lt;code&gt;k8s.gcr.io&lt;/code&gt; you MUST &lt;a href=&#34;https://kubernetes.io/blog/2023/02/06/k8s-gcr-io-freeze-announcement/&#34;&gt;move to &lt;code&gt;registry.k8s.io&lt;/code&gt;&lt;/a&gt; to continue receiving support.&lt;/p&gt; &#xA; &lt;p&gt;Issues related to &lt;code&gt;k8s.gcr.io&lt;/code&gt; will no longer be accepted. &lt;code&gt;public.ecr.aws&lt;/code&gt; and &lt;code&gt;registry.k8s.io&lt;/code&gt; images are unaffected and remain supported as per &lt;a href=&#34;https://github.com/kubernetes-sigs/aws-ebs-csi-driver#support&#34;&gt;the support policy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Amazon Elastic Block Store (EBS) CSI driver&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/aws-ebs-csi-driver/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kubernetes-sigs/aws-ebs-csi-driver&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/kubernetes-sigs/aws-ebs-csi-driver?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/kubernetes-sigs/aws-ebs-csi-driver/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/kubernetes-sigs/aws-ebs-csi-driver&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/kubernetes-sigs/aws-ebs-csi-driver&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://aws.amazon.com/ebs/&#34;&gt;Amazon Elastic Block Store&lt;/a&gt; Container Storage Interface (CSI) Driver provides a &lt;a href=&#34;https://github.com/container-storage-interface/spec/raw/master/spec.md&#34;&gt;CSI&lt;/a&gt; interface used by Container Orchestrators to manage the lifecycle of Amazon EBS volumes.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static Provisioning&lt;/strong&gt; - Associate an externally-created EBS volume with a &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&#34;&gt;PersistentVolume&lt;/a&gt; (PV) for consumption within Kubernetes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Provisioning&lt;/strong&gt; - Automatically create EBS volumes and associated &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&#34;&gt;PersistentVolumes&lt;/a&gt; (PV) from &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#dynamic&#34;&gt;PersistentVolumeClaims&lt;/a&gt;) (PVC). Parameters can be passed via a &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/storage-classes/#the-storageclass-resource&#34;&gt;StorageClass&lt;/a&gt; for fine-grained control over volume creation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mount Options&lt;/strong&gt; - Mount options could be specified in the &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/&#34;&gt;PersistentVolume&lt;/a&gt; (PV) resource to define how the volume should be mounted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NVMe Volumes&lt;/strong&gt; - Consume &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html&#34;&gt;NVMe&lt;/a&gt; volumes from EC2 &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances&#34;&gt;Nitro instances&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Block Volumes&lt;/strong&gt; - Consume an EBS volume as a &lt;a href=&#34;https://kubernetes-csi.github.io/docs/raw-block.html&#34;&gt;raw block device&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Volume Snapshots&lt;/strong&gt; - Create and restore &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/volume-snapshots/&#34;&gt;snapshots&lt;/a&gt; taken from a volume in Kubernetes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Volume Resizing&lt;/strong&gt; - Expand the volume (both offline and online) by specifying a new size in the &lt;a href=&#34;https://kubernetes.io/docs/concepts/storage/persistent-volumes/#expanding-persistent-volumes-claims&#34;&gt;PersistentVolumeClaim&lt;/a&gt; (PVC).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Container Images&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Driver Version&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://kubernetes.io/blog/2022/11/28/registry-k8s-io-faster-cheaper-ga/&#34;&gt;registry.k8s.io&lt;/a&gt; Image&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://gallery.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver&#34;&gt;ECR Public&lt;/a&gt; Image&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.17.0&lt;/td&gt; &#xA;   &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.17.0&lt;/td&gt; &#xA;   &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.17.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Previous Images&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Driver Version&lt;/th&gt; &#xA;    &lt;th&gt;&lt;a href=&#34;https://kubernetes.io/blog/2022/11/28/registry-k8s-io-faster-cheaper-ga/&#34;&gt;registry.k8s.io&lt;/a&gt; Image&lt;/th&gt; &#xA;    &lt;th&gt;&lt;a href=&#34;https://gallery.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver&#34;&gt;ECR Public&lt;/a&gt; Image&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.16.1&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.16.1&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.16.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.16.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.16.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.16.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.15.1&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.15.1&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.15.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.15.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.15.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.15.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.14.1&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.14.1&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.14.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.14.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.14.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.14.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.13.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.13.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.13.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.12.1&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.12.1&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.12.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.12.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.12.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.12.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.11.5&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.11.5&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.11.5&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.11.4&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.11.4&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.11.4&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.11.3&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.11.3&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.11.3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.11.2&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.11.2&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.11.2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.10.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.10.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.10.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.9.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.9.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.9.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.8.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.8.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.8.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.7.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.7.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.7.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.6.2&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.6.2&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.6.2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.6.1&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.6.1&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.6.1&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;v1.6.0&lt;/td&gt; &#xA;    &lt;td&gt;registry.k8s.io/provider-aws/aws-ebs-csi-driver:v1.6.0&lt;/td&gt; &#xA;    &lt;td&gt;public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.6.0&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;The EBS CSI Driver publishes monthly releases. Unscheduled releases may be published for patches to security vulnerabilities and other fixes deemed urgent.&lt;/p&gt; &#xA;&lt;p&gt;The EBS CSI Driver follows &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;. The version will be bumped following the rules below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Significant breaking changes will be released as a &lt;code&gt;MAJOR&lt;/code&gt; update.&lt;/li&gt; &#xA; &lt;li&gt;New features will be released as a &lt;code&gt;MINOR&lt;/code&gt; update.&lt;/li&gt; &#xA; &lt;li&gt;Bug or vulnerability fixes will be released as a &lt;code&gt;PATCH&lt;/code&gt; update.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Monthly releases will contain at minimum a &lt;code&gt;MINOR&lt;/code&gt; version bump, even if the content would normally be treated as a &lt;code&gt;PATCH&lt;/code&gt; version.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Support will be provided for the latest version and one prior version. Bugs or vulnerabilities found in the latest version will be backported to the previous release in a new minor version.&lt;/p&gt; &#xA;&lt;p&gt;This policy is non-binding and subject to change.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The EBS CSI Driver is compatible with Kubernetes versions v1.17+ and implements the CSI Specification v1.1.0.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-ebs-csi-driver/master/docs/install.md&#34;&gt;Driver Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-ebs-csi-driver/master/docs/options.md&#34;&gt;Driver Launch Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-ebs-csi-driver/master/docs/parameters.md&#34;&gt;StorageClass Parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-ebs-csi-driver/master/docs/tagging.md&#34;&gt;Volume Tagging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-ebs-csi-driver/master/examples/kubernetes&#34;&gt;Kubernetes Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/aws-ebs-csi-driver/master/CONTRIBUTING.md&#34;&gt;Development and Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>projectdiscovery/alterx</title>
    <updated>2023-04-07T01:33:57Z</updated>
    <id>tag:github.com,2023-04-07:/projectdiscovery/alterx</id>
    <link href="https://github.com/projectdiscovery/alterx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and customizable subdomain wordlist generator using DSL&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; AlterX &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-_red.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/alterx&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/alterx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/projectdiscovery/alterx/pkg/alterx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go-reference-blue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/alterx/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/projectdiscovery/alterx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pdiscoveryio&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/alterx/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/alterx/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/alterx/main/#help-menu&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/alterx/main/#examples&#34;&gt;Running AlterX&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Join Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;pre align=&#34;center&#34;&gt;&#xA;&lt;b&gt;&#xA;   Fast and customizable subdomain wordlist generator using DSL.&#xA;&lt;/b&gt;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8293321/229380735-140d3f25-d0cb-461d-8c49-4c1eff43d1f4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast and Customizable&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic word enrichment&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pre-defined variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurable Patterns&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;STDIN / List input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install alterx, you need to have Golang 1.19 installed on your system. You can download Golang from &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;here&lt;/a&gt;. After installing Golang, you can use the following command to install alterx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/projectdiscovery/alterx/cmd/alterx@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help Menu&lt;/h2&gt; &#xA;&lt;p&gt;You can use the following command to see the available flags and options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Fast and customizable subdomain wordlist generator using DSL.&#xA;&#xA;Usage:&#xA;  ./alterx [flags]&#xA;&#xA;Flags:&#xA;INPUT:&#xA;   -l, -list string[]     subdomains to use when creating permutations (stdin, comma-separated, file)&#xA;   -p, -pattern string[]  custom permutation patterns input to generate (comma-seperated, file)&#xA;   -pp, -payload value    custom payload pattern input to replace/use in key=value format (-pp &#39;word=words.txt&#39;)&#xA;&#xA;OUTPUT:&#xA;   -es, -estimate      estimate permutation count without generating payloads&#xA;   -o, -output string  output file to write altered subdomain list&#xA;   -v, -verbose        display verbose output&#xA;   -silent             display results only&#xA;   -version            display alterx version&#xA;&#xA;CONFIG:&#xA;   -config string  alterx cli config file (default &#39;$HOME/.config/alterx/config.yaml&#39;)&#xA;   -en, -enrich    enrich wordlist by extracting words from input&#xA;   -ac string      alterx permutation config file (default &#39;$HOME/.config/alterx/permutation_v0.0.1.yaml&#39;)&#xA;   -limit int      limit the number of results to return (default 0)&#xA;&#xA;UPDATE:&#xA;   -up, -update                 update alterx to latest version&#xA;   -duc, -disable-update-check  disable automatic alterx update check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why &lt;code&gt;alterx&lt;/code&gt; ??&lt;/h2&gt; &#xA;&lt;p&gt;what makes &lt;code&gt;alterx&lt;/code&gt; different from any other subdomain permutation tools like &lt;code&gt;goaltdns&lt;/code&gt; is its &lt;code&gt;scripting&lt;/code&gt; feature . alterx takes patterns as input and generates subdomain permutation wordlist based on that pattern similar to what &lt;a href=&#34;https://github.com/projectdiscovery/nuclei&#34;&gt;nuclei&lt;/a&gt; does with &lt;a href=&#34;https://github.com/projectdiscovery/fuzzing-templates&#34;&gt;fuzzing-templates&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;What makes &lt;code&gt;Active Subdomain Enumeration&lt;/code&gt; difficult is the probability of finding a domain that actually exists. If finding possible subdomains is represented on a scale it should look something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;   Using Wordlist &amp;lt; generate permutations with subdomains (goaltdns) &amp;lt; alterx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Almost all popular subdomain permutation tools have hardcoded patterns and when such tools are run they create wordlist which contain subdomains in Millions and this decreases the feasibility of bruteforcing them with tools like dnsx . There is no actual convention to name subdomains and usually depends on person registering the subdomain. with &lt;code&gt;alterx&lt;/code&gt; it is possible to create patterns based on results from &lt;code&gt;passive subdomain enumeration&lt;/code&gt; results which increases probability of finding a subdomain and feasibility to bruteforce them.&lt;/p&gt; &#xA;&lt;h2&gt;Variables&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;alterx&lt;/code&gt; uses variable-like syntax similar to nuclei-templates. One can write their own patterns using these variables . when domains are passed as input &lt;code&gt;alterx&lt;/code&gt; evaluates input and extracts variables from it .&lt;/p&gt; &#xA;&lt;h3&gt;Basic / Common Variables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{{sub}}     :  subdomain prefix or left most part of a subdomain&#xA;{{suffix}}  :  everything except {{sub}} in subdomain name is suffix&#xA;{{tld}}     :  top level domain name (ex com,uk,in etc)&#xA;{{etld}}    :  also know as public suffix (ex co.uk , gov.in etc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;api.scanme.sh&lt;/th&gt; &#xA;   &lt;th&gt;admin.dev.scanme.sh&lt;/th&gt; &#xA;   &lt;th&gt;cloud.scanme.co.uk&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{sub}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;api&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;admin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cloud&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{suffix}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scanme.sh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dev.scanme.sh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scanme.co.uk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{tld}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;uk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{etld}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;co.uk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Advanced Variables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{{root}}  :  also known as eTLD+1 i.e only root domain (ex for api.scanme.sh =&amp;gt; {{root}} is scanme.sh)&#xA;{{subN}}  :  here N is an integer (ex {{sub1}} , {{sub2}} etc) .&#xA;&#xA;// {{subN}} is advanced variable which exists depending on input&#xA;// lets say there is a multi level domain cloud.nuclei.scanme.sh&#xA;// in this case {{sub}} = cloud and {{sub1}} = nuclei`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;api.scanme.sh&lt;/th&gt; &#xA;   &lt;th&gt;admin.dev.scanme.sh&lt;/th&gt; &#xA;   &lt;th&gt;cloud.scanme.co.uk&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{root}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scanme.sh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scanme.sh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scanme.co.uk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{sub1}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{{sub2}}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Patterns&lt;/h2&gt; &#xA;&lt;p&gt;pattern in simple terms can be considered as &lt;code&gt;template&lt;/code&gt; that describes what type of patterns should alterx generate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;// Below are some of example patterns which can be used to generate permutations&#xA;// assuming api.scanme.sh was given as input and variable {{word}} was given as input with only one value prod&#xA;// alterx generates subdomains for below patterns&#xA;&#xA;&#34;{{sub}}-{{word}}.{{suffix}}&#34; // ex: api-prod.scanme.sh&#xA;&#34;{{word}}-{{sub}}.{{suffix}}&#34; // ex: prod-api.scanme.sh&#xA;&#34;{{word}}.{{sub}}.{{suffix}}&#34; // ex: prod.api.scanme.sh&#xA;&#34;{{sub}}.{{word}}.{{suffix}}&#34; // ex: api.prod.scanme.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example pattern config file - &lt;a href=&#34;https://github.com/projectdiscovery/alterx/raw/main/permutations.yaml&#34;&gt;https://github.com/projectdiscovery/alterx/blob/main/permutations.yaml&lt;/a&gt; that can be easily customizable as per need.&lt;/p&gt; &#xA;&lt;p&gt;This configuration file generates subdomain permutations for security assessments or penetration tests using customizable patterns and dynamic payloads. Patterns include dash-based, dot-based, and others. Users can create custom payload sections, such as words, region identifiers, or numbers, to suit their specific needs.&lt;/p&gt; &#xA;&lt;p&gt;For example, a user could define a new payload section &lt;code&gt;env&lt;/code&gt; with values like &lt;code&gt;prod&lt;/code&gt; and &lt;code&gt;dev&lt;/code&gt;, then use it in patterns like &lt;code&gt;{{env}}-{{word}}.{{suffix}}&lt;/code&gt; to generate subdomains like &lt;code&gt;prod-app.example.com&lt;/code&gt; and &lt;code&gt;dev-api.example.com&lt;/code&gt;. This flexibility allows tailored subdomain list for unique testing scenarios and target environments.&lt;/p&gt; &#xA;&lt;p&gt;Default pattern config file used for generation is stored in &lt;code&gt;$HOME/.config/alterx/&lt;/code&gt; directory, and custom config file can be also used using &lt;code&gt;-ac&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;An example of running alterx on existing list of passive subdomains of &lt;code&gt;tesla.com&lt;/code&gt; yield us &lt;strong&gt;10 additional NEW&lt;/strong&gt; and &lt;strong&gt;valid subdomains&lt;/strong&gt; resolved using &lt;a href=&#34;https://github.com/projectdiscovery/dnsx&#34;&gt;dnsx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ chaos -d tesla.com | alterx | dnsx&#xA;&#xA; &#xA;&#xA;   ___   ____          _  __&#xA;  / _ | / / /____ ____| |/_/&#xA; / __ |/ / __/ -_) __/&amp;gt;  &amp;lt;  &#xA;/_/ |_/_/\__/\__/_/ /_/|_|              &#xA;&#xA;      projectdiscovery.io&#xA;&#xA;[INF] Generated 8312 permutations in 0.0740s&#xA;auth-global-stage.tesla.com&#xA;auth-stage.tesla.com&#xA;digitalassets-stage.tesla.com&#xA;errlog-stage.tesla.com&#xA;kronos-dev.tesla.com&#xA;mfa-stage.tesla.com&#xA;paymentrecon-stage.tesla.com&#xA;sso-dev.tesla.com&#xA;shop-stage.tesla.com&#xA;www-uat-dev.tesla.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly &lt;code&gt;-enrich&lt;/code&gt; option can be used to populate known subdomains as world input to generate &lt;strong&gt;target aware permutations&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ chaos -d tesla.com | alterx -enrich&#xA;&#xA;   ___   ____          _  __&#xA;  / _ | / / /____ ____| |/_/&#xA; / __ |/ / __/ -_) __/&amp;gt;  &amp;lt;  &#xA;/_/ |_/_/\__/\__/_/ /_/|_|              &#xA;&#xA;      projectdiscovery.io&#xA;&#xA;[INF] Generated 662010 permutations in 3.9989s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can alter the default patterns at run time using &lt;code&gt;-pattern&lt;/code&gt; CLI option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ chaos -d tesla.com | alterx -enrich -p &#39;{{word}}-{{suffix}}&#39;&#xA;&#xA;   ___   ____          _  __&#xA;  / _ | / / /____ ____| |/_/&#xA; / __ |/ / __/ -_) __/&amp;gt;  &amp;lt;  &#xA;/_/ |_/_/\__/\__/_/ /_/|_|              &#xA;&#xA;      projectdiscovery.io&#xA;&#xA;[INF] Generated 21523 permutations in 0.7984s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to overwrite existing variables value using &lt;code&gt;-payload&lt;/code&gt; CLI options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ alterx -list tesla.txt -enrich -p &#39;{{word}}-{{year}}.{{suffix}}&#39; -pp word=keywords.txt -pp year=2023&#xA;&#xA;   ___   ____          _  __&#xA;  / _ | / / /____ ____| |/_/&#xA; / __ |/ / __/ -_) __/&amp;gt;  &amp;lt;  &#xA;/_/ |_/_/\__/\__/_/ /_/|_|              &#xA;&#xA;      projectdiscovery.io&#xA;&#xA;[INF] Generated 21419 permutations in 1.1699s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;For more information, please checkout the release blog&lt;/strong&gt; - &lt;a href=&#34;https://blog.projectdiscovery.io/introducing-alterx-simplifying-active-subdomain-enumeration-with-patterns/&#34;&gt;https://blog.projectdiscovery.io/introducing-alterx-simplifying-active-subdomain-enumeration-with-patterns/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Do also check out the below similar open-source projects that may fit in your workflow:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/infosec-au/altdns&#34;&gt;altdns&lt;/a&gt;, &lt;a href=&#34;https://github.com/subfinder/goaltdns&#34;&gt;goaltdns&lt;/a&gt;, &lt;a href=&#34;https://github.com/Josue87/gotator&#34;&gt;gotator&lt;/a&gt;, &lt;a href=&#34;https://github.com/resyncgg/ripgen/&#34;&gt;ripgen&lt;/a&gt;, &lt;a href=&#34;https://github.com/ProjectAnte/dnsgen&#34;&gt;dnsgen&lt;/a&gt;, &lt;a href=&#34;https://github.com/bp0lr/dmut&#34;&gt;dmut&lt;/a&gt;, &lt;a href=&#34;https://github.com/hpy/permDNS&#34;&gt;permdns&lt;/a&gt;, &lt;a href=&#34;https://github.com/j3ssie/str-replace&#34;&gt;str-replace&lt;/a&gt;, &lt;a href=&#34;https://github.com/codingo/DNSCewl&#34;&gt;dnscewl&lt;/a&gt;, &lt;a href=&#34;https://github.com/cramppet/regulator&#34;&gt;regulator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;alterx&lt;/strong&gt; is made with ❤️ by the &lt;a href=&#34;https://projectdiscovery.io&#34;&gt;projectdiscovery&lt;/a&gt; team and distributed under &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/alterx/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-burp-plugin/main/static/join-discord.png&#34; width=&#34;300&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>volatiletech/sqlboiler</title>
    <updated>2023-04-07T01:33:57Z</updated>
    <id>tag:github.com,2023-04-07:/volatiletech/sqlboiler</id>
    <link href="https://github.com/volatiletech/sqlboiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate a Go ORM tailored to your database schema.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lMXUTPE.png&#34; alt=&#34;sqlboiler logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/volatiletech/sqlboiler/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/mod/github.com/volatiletech/sqlboiler/v4&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-reference-5272B4&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sqlboiler.from-the.cloud&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-%23general-lightgrey.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/volatiletech/sqlboiler/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;ActionsCI&#34;&gt; &lt;a href=&#34;http://goreportcard.com/report/volatiletech/sqlboiler&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/volatiletech/sqlboiler&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;SQLBoiler is a tool to generate a Go ORM tailored to your database schema.&lt;/p&gt; &#xA;&lt;p&gt;It is a &#34;database-first&#34; ORM as opposed to &#34;code-first&#34; (like gorm/gorp). That means you must first create your database schema. Please use something like &lt;a href=&#34;https://github.com/rubenv/sql-migrate&#34;&gt;sql-migrate&lt;/a&gt; or some other migration tool to manage this part of the database&#39;s life-cycle.&lt;/p&gt; &#xA;&lt;h1&gt;Note on versions&lt;/h1&gt; &#xA;&lt;p&gt;v1, v2, and v3 are no longer maintained.&lt;/p&gt; &#xA;&lt;p&gt;v3 is the last GOPATH-compatible version.&lt;/p&gt; &#xA;&lt;p&gt;v4 has no real breaking changes between v3 and itself other than Go modules and is the only maintained version. Note this does not work with GOPATH projects.&lt;/p&gt; &#xA;&lt;h2&gt;Why another ORM&lt;/h2&gt; &#xA;&lt;p&gt;While attempting to migrate a legacy Rails database, we realized how much ActiveRecord benefited us in terms of development velocity. Coming over to the Go &lt;code&gt;database/sql&lt;/code&gt; package after using ActiveRecord feels extremely repetitive, super long-winded and down-right boring. Being Go veterans we knew the state of ORMs was shaky, and after a quick review we found what our fears confirmed. Most packages out there are code-first, reflect-based and have a very weak story around relationships between models. So with that we set out with these goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work with existing databases: Don&#39;t be the tool to define the schema, that&#39;s better left to other tools.&lt;/li&gt; &#xA; &lt;li&gt;ActiveRecord-like productivity: Eliminate all sql boilerplate, have relationships as a first-class concept.&lt;/li&gt; &#xA; &lt;li&gt;Go-like feel: Work with normal structs, call functions, no hyper-magical struct tags, small interfaces.&lt;/li&gt; &#xA; &lt;li&gt;Go-like performance: &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#benchmarks&#34;&gt;Benchmark&lt;/a&gt; and optimize the hot-paths, perform like hand-rolled &lt;code&gt;sql.DB&lt;/code&gt; code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We believe with SQLBoiler and our database-first code-generation approach we&#39;ve been able to successfully meet all of these goals. On top of that SQLBoiler also confers the following benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The models package is type safe. This means no chance of random panics due to passing in the wrong type. No need for interface{}.&lt;/li&gt; &#xA; &lt;li&gt;Our types closely correlate to your database column types. This is expanded by our extended null package which supports nearly all Go data types.&lt;/li&gt; &#xA; &lt;li&gt;A system that is easy to debug. Your ORM is tailored to your schema, the code paths should be easy to trace since it&#39;s not all buried in reflect.&lt;/li&gt; &#xA; &lt;li&gt;Auto-completion provides work-flow efficiency gains.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#sqlboiler&#34;&gt;SQLBoiler&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#why-another-orm&#34;&gt;Why another ORM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#about-sql-boiler&#34;&gt;About SQL Boiler&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#missing-features&#34;&gt;Missing Features&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#supported-databases&#34;&gt;Supported Databases&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#a-small-taste&#34;&gt;A Small Taste&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#requirements--pro-tips&#34;&gt;Requirements &amp;amp; Pro Tips&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#pro-tips&#34;&gt;Pro Tips&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#download&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#initial-generation&#34;&gt;Initial Generation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#regeneration&#34;&gt;Regeneration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#controlling-generation&#34;&gt;Controlling Generation&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#aliases&#34;&gt;Aliases&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#types&#34;&gt;Types&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#imports&#34;&gt;Imports&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#templates&#34;&gt;Templates&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#extending-generated-models&#34;&gt;Extending Generated Models&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#diagnosing-problems&#34;&gt;Diagnosing Problems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#features--examples&#34;&gt;Features &amp;amp; Examples&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#automatic-createdatupdatedat&#34;&gt;Automatic CreatedAt/UpdatedAt&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#skipping-automatic-timestamps&#34;&gt;Skipping Automatic Timestamps&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#overriding-automatic-timestamps&#34;&gt;Overriding Automatic Timestamps&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-building&#34;&gt;Query Building&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-mod-system&#34;&gt;Query Mod System&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#function-variations&#34;&gt;Function Variations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#finishers&#34;&gt;Finishers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#raw-query&#34;&gt;Raw Query&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#binding&#34;&gt;Binding&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#relationships&#34;&gt;Relationships&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#hooks&#34;&gt;Hooks&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#skipping-hooks&#34;&gt;Skipping Hooks&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#transactions&#34;&gt;Transactions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#debug-logging&#34;&gt;Debug Logging&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#select&#34;&gt;Select&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#find&#34;&gt;Find&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#insert&#34;&gt;Insert&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#update&#34;&gt;Update&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#delete&#34;&gt;Delete&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#upsert&#34;&gt;Upsert&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#reload&#34;&gt;Reload&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#exists&#34;&gt;Exists&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#enums&#34;&gt;Enums&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#constants&#34;&gt;Constants&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#faq&#34;&gt;FAQ&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#wont-compiling-models-for-a-huge-database-be-very-slow&#34;&gt;Won&#39;t compiling models for a huge database be very slow?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#missing-imports-for-generated-package&#34;&gt;Missing imports for generated package&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#how-should-i-handle-multiple-schemas&#34;&gt;How should I handle multiple schemas&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#how-do-i-use-typesbytesarray-for-postgres-bytea-arrays&#34;&gt;How do I use the types.BytesArray for Postgres bytea arrays?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#why-arent-my-timetime-or-nulltime-fields-working-in-mysql&#34;&gt;Why aren&#39;t my time.Time or null.Time fields working in MySQL?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#where-is-the-homepage&#34;&gt;Where is the homepage?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#why-are-the-auto-generated-tests-failing&#34;&gt;Why are the auto-generated tests failing?&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About SQL Boiler&lt;/h2&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full model generation&lt;/li&gt; &#xA; &lt;li&gt;Extremely fast code generation&lt;/li&gt; &#xA; &lt;li&gt;High performance through generation &amp;amp; intelligent caching&lt;/li&gt; &#xA; &lt;li&gt;Uses boil.Executor (simple interface, sql.DB, sqlx.DB etc. compatible)&lt;/li&gt; &#xA; &lt;li&gt;Uses context.Context&lt;/li&gt; &#xA; &lt;li&gt;Easy workflow (models can always be regenerated, full auto-complete)&lt;/li&gt; &#xA; &lt;li&gt;Strongly typed querying (usually no converting or binding to pointers)&lt;/li&gt; &#xA; &lt;li&gt;Hooks (Before/After Create/Select/Update/Delete/Upsert)&lt;/li&gt; &#xA; &lt;li&gt;Automatic CreatedAt/UpdatedAt&lt;/li&gt; &#xA; &lt;li&gt;Automatic DeletedAt&lt;/li&gt; &#xA; &lt;li&gt;Table and column whitelist/blacklist&lt;/li&gt; &#xA; &lt;li&gt;Relationships/Associations&lt;/li&gt; &#xA; &lt;li&gt;Eager loading (recursive)&lt;/li&gt; &#xA; &lt;li&gt;Custom struct tags&lt;/li&gt; &#xA; &lt;li&gt;Transactions&lt;/li&gt; &#xA; &lt;li&gt;Raw SQL fallback&lt;/li&gt; &#xA; &lt;li&gt;Compatibility tests (Run against your own DB schema)&lt;/li&gt; &#xA; &lt;li&gt;Debug logging&lt;/li&gt; &#xA; &lt;li&gt;Basic multiple schema support (no cross-schema support)&lt;/li&gt; &#xA; &lt;li&gt;1d arrays, json, hstore &amp;amp; more&lt;/li&gt; &#xA; &lt;li&gt;Enum types&lt;/li&gt; &#xA; &lt;li&gt;Out of band driver support&lt;/li&gt; &#xA; &lt;li&gt;Support for database views&lt;/li&gt; &#xA; &lt;li&gt;Supports generated/computed columns&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Missing features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-column foreign key support&lt;/li&gt; &#xA; &lt;li&gt;Materialized view support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Databases&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Database&lt;/th&gt; &#xA;   &lt;th&gt;Driver Location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PostgreSQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/drivers/sqlboiler-psql&#34;&gt;https://github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-psql&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/drivers/sqlboiler-mysql&#34;&gt;https://github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-mysql&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MSSQLServer 2012+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/drivers/sqlboiler-mssql&#34;&gt;https://github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-mssql&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQLite3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/drivers/sqlboiler-sqlite3&#34;&gt;https://github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-sqlite3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CockroachDB&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/glerchundi/sqlboiler-crdb&#34;&gt;https://github.com/glerchundi/sqlboiler-crdb&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; SQLBoiler supports out of band driver support so you can make your own&lt;/p&gt; &#xA;&lt;p&gt;We are seeking contributors for other database engines.&lt;/p&gt; &#xA;&lt;h3&gt;A Small Taste&lt;/h3&gt; &#xA;&lt;p&gt;For a comprehensive list of available operations and examples please see &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#features--examples&#34;&gt;Features &amp;amp; Examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;  // Import this so we don&#39;t have to use qm.Limit etc.&#xA;  . &#34;github.com/volatiletech/sqlboiler/v4/queries/qm&#34;&#xA;)&#xA;&#xA;// Open handle to database like normal&#xA;db, err := sql.Open(&#34;postgres&#34;, &#34;dbname=fun user=abc&#34;)&#xA;if err != nil {&#xA;  return err&#xA;}&#xA;&#xA;// If you don&#39;t want to pass in db to all generated methods&#xA;// you can use boil.SetDB to set it globally, and then use&#xA;// the G variant methods like so (--add-global-variants to enable)&#xA;boil.SetDB(db)&#xA;users, err := models.Users().AllG(ctx)&#xA;&#xA;// Query all users&#xA;users, err := models.Users().All(ctx, db)&#xA;&#xA;// Panic-able if you like to code that way (--add-panic-variants to enable)&#xA;users := models.Users().AllP(db)&#xA;&#xA;// More complex query&#xA;users, err := models.Users(Where(&#34;age &amp;gt; ?&#34;, 30), Limit(5), Offset(6)).All(ctx, db)&#xA;&#xA;// Ultra complex query&#xA;users, err := models.Users(&#xA;  Select(&#34;id&#34;, &#34;name&#34;),&#xA;  InnerJoin(&#34;credit_cards c on c.user_id = users.id&#34;),&#xA;  Where(&#34;age &amp;gt; ?&#34;, 30),&#xA;  AndIn(&#34;c.kind in ?&#34;, &#34;visa&#34;, &#34;mastercard&#34;),&#xA;  Or(&#34;email like ?&#34;, `%aol.com%`),&#xA;  GroupBy(&#34;id&#34;, &#34;name&#34;),&#xA;  Having(&#34;count(c.id) &amp;gt; ?&#34;, 2),&#xA;  Limit(5),&#xA;  Offset(6),&#xA;).All(ctx, db)&#xA;&#xA;// Use any &#34;boil.Executor&#34; implementation (*sql.DB, *sql.Tx, data-dog mock db)&#xA;// for any query.&#xA;tx, err := db.BeginTx(ctx, nil)&#xA;if err != nil {&#xA;  return err&#xA;}&#xA;users, err := models.Users().All(ctx, tx)&#xA;&#xA;// Relationships&#xA;user, err := models.Users().One(ctx, db)&#xA;if err != nil {&#xA;  return err&#xA;}&#xA;movies, err := user.FavoriteMovies().All(ctx, db)&#xA;&#xA;// Eager loading&#xA;users, err := models.Users(Load(&#34;FavoriteMovies&#34;)).All(ctx, db)&#xA;if err != nil {&#xA;  return err&#xA;}&#xA;fmt.Println(len(users.R.FavoriteMovies))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements &amp;amp; Pro Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.13, older Go versions are not supported.&lt;/li&gt; &#xA; &lt;li&gt;Join tables should use a &lt;em&gt;composite primary key&lt;/em&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For join tables to be used transparently for relationships your join table must have a &lt;em&gt;composite primary key&lt;/em&gt; that encompasses both foreign table foreign keys and no other columns in the table. For example, on a join table named &lt;code&gt;user_videos&lt;/code&gt; you should have: &lt;code&gt;primary key(user_id, video_id)&lt;/code&gt;, with both &lt;code&gt;user_id&lt;/code&gt; and &lt;code&gt;video_id&lt;/code&gt; being foreign key columns to the users and videos tables respectively and there are no other columns on this table.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;MySQL 5.6.30 minimum; ssl-mode option is not supported for earlier versions.&lt;/li&gt; &#xA; &lt;li&gt;For MySQL if using the &lt;code&gt;github.com/go-sql-driver/mysql&lt;/code&gt; driver, please activate &lt;a href=&#34;https://github.com/go-sql-driver/mysql#timetime-support&#34;&gt;time.Time parsing&lt;/a&gt; when making your MySQL database connection. SQLBoiler uses &lt;code&gt;time.Time&lt;/code&gt; and &lt;code&gt;null.Time&lt;/code&gt; to represent time in it&#39;s models and without this enabled any models with &lt;code&gt;DATE&lt;/code&gt;/&lt;code&gt;DATETIME&lt;/code&gt; columns will not work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pro Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQLBoiler generates type safe identifiers for table names, table column names, a table&#39;s relationship names and type-safe where clauses. You should use these instead of strings due to the ability to catch more errors at compile time when your database schema changes. See &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#constants&#34;&gt;Constants&lt;/a&gt; for details.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s highly recommended to use transactions where sqlboiler will be doing multiple database calls (relationship setops with insertions for example) for both performance and data integrity.&lt;/li&gt; &#xA; &lt;li&gt;Foreign key column names should end with &lt;code&gt;_id&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Foreign key column names in the format &lt;code&gt;x_id&lt;/code&gt; will generate clearer method names. It is advisable to use this naming convention whenever it makes sense for your database schema.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you never plan on using the hooks functionality you can disable generation of this feature using the &lt;code&gt;--no-hooks&lt;/code&gt; flag. This will save you some binary size.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h4&gt;Videos&lt;/h4&gt; &#xA;&lt;p&gt;If you like learning via a video medium, sqlboiler has a number of screencasts available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; These videos predate modules (v4), the installation/import paths will be different though everything else should remain similar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=y5utRS9axfg&#34;&gt;SQLBoiler: Getting Started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-B-OPsYRZJA&#34;&gt;SQLBoiler: What&#39;s New in v3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iiJuM9NR8No&#34;&gt;SQLBoiler: Advanced Queries and Relationships&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fKmRemtmi0Y&#34;&gt;Old (v2): SQLBoiler Screencast #1: How to get started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Download&lt;/h4&gt; &#xA;&lt;p&gt;First you have to install the code generator binaries. There&#39;s the main binary and then a separate driver binary (select the right one for your database).&lt;/p&gt; &#xA;&lt;p&gt;Be very careful when installing, there&#39;s confusion in the Go ecosystem and knowing what are the right commands to run for which Go version can be tricky. Ensure you don&#39;t forget any /v suffixes or you&#39;ll end up on an old version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Go 1.16 and above:&#xA;go install github.com/volatiletech/sqlboiler/v4@latest&#xA;go install github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-psql@latest&#xA;&#xA;# Go 1.15 and below:&#xA;# Install sqlboiler v4 and the postgresql driver (mysql, mssql, sqlite3 also available)&#xA;# NOTE: DO NOT run this inside another Go module (like your project) as it will&#xA;# pollute your go.mod with a bunch of stuff you don&#39;t want and your binary&#xA;# will not get installed.&#xA;GO111MODULE=on go get -u -t github.com/volatiletech/sqlboiler/v4&#xA;GO111MODULE=on go get github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-psql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To install &lt;code&gt;sqlboiler&lt;/code&gt; as a dependency in your project use the commands below inside of your go module&#39;s directory tree. This will install the dependencies into your &lt;code&gt;go.mod&lt;/code&gt; file at the correct version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Do not forget the trailing /v4 and /v8 in the following commands&#xA;go get github.com/volatiletech/sqlboiler/v4&#xA;# Assuming you&#39;re going to use the null package for its additional null types&#xA;go get github.com/volatiletech/null/v8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Configuration&lt;/h4&gt; &#xA;&lt;p&gt;Create a configuration file. Because the project uses &lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;viper&lt;/a&gt;, TOML, JSON and YAML are all usable but only TOML is supported. Environment variables are also able to be used.&lt;/p&gt; &#xA;&lt;p&gt;The configuration file should be named &lt;code&gt;sqlboiler.toml&lt;/code&gt; and is searched for in the following directories in this order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/sqlboiler/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/sqlboiler/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We will assume TOML for the rest of the documentation.&lt;/p&gt; &#xA;&lt;h5&gt;Database Driver Configuration&lt;/h5&gt; &#xA;&lt;p&gt;The configuration for a specific driver (in these examples we&#39;ll use &lt;code&gt;psql&lt;/code&gt;) must all be prefixed by the driver name. You must use a configuration file or environment variables for configuring the database driver; there are no command-line options for providing driver-specific configuration.&lt;/p&gt; &#xA;&lt;p&gt;In the configuration file for postgresql for example you would do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[psql]&#xA;dbname = &#34;your_database_name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you use an environment variable it must also be prefixed by the driver name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PSQL_DBNAME=&#34;your_database_name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The values that exist for the drivers:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Required&lt;/th&gt; &#xA;   &lt;th&gt;Postgres Default&lt;/th&gt; &#xA;   &lt;th&gt;MySQL Default&lt;/th&gt; &#xA;   &lt;th&gt;MSSQL Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;schema&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;&#34;public&#34;&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;&#34;dbo&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dbname&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;host&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;port&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;5432&lt;/td&gt; &#xA;   &lt;td&gt;3306&lt;/td&gt; &#xA;   &lt;td&gt;1433&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;user&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pass&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sslmode&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;&#34;require&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;true&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;true&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;whitelist&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;blacklist&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example of whitelist/blacklist:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[psql]&#xA;# Removes migrations table, the name column from the addresses table, and&#xA;# secret_col of any table from being generated. Foreign keys that reference tables&#xA;# or columns that are no longer generated because of whitelists or blacklists may&#xA;# cause problems.&#xA;blacklist = [&#34;migrations&#34;, &#34;addresses.name&#34;, &#34;*.secret_col&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Generic config options&lt;/h5&gt; &#xA;&lt;p&gt;You can also pass in these top level configuration values if you would prefer not to pass them through the command line or environment variables:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Defaults&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkgname&lt;/td&gt; &#xA;   &lt;td&gt;&#34;models&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;output&lt;/td&gt; &#xA;   &lt;td&gt;&#34;models&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;debug&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;add-global-variants&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;add-panic-variants&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;add-enum-types&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enum-null-prefix&lt;/td&gt; &#xA;   &lt;td&gt;&#34;Null&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;no-context&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;no-hooks&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;no-tests&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;no-auto-timestamps&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;no-rows-affected&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;no-driver-templates&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag-ignore&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Full Example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;output   = &#34;my_models&#34;&#xA;wipe     = true&#xA;no-tests = true&#xA;add-enum-types = true&#xA;&#xA;[psql]&#xA;  dbname = &#34;dbname&#34;&#xA;  host   = &#34;localhost&#34;&#xA;  port   = 5432&#xA;  user   = &#34;dbusername&#34;&#xA;  pass   = &#34;dbpassword&#34;&#xA;  schema = &#34;myschema&#34;&#xA;  blacklist = [&#34;migrations&#34;, &#34;other&#34;]&#xA;&#xA;[mysql]&#xA;  dbname  = &#34;dbname&#34;&#xA;  host    = &#34;localhost&#34;&#xA;  port    = 3306&#xA;  user    = &#34;dbusername&#34;&#xA;  pass    = &#34;dbpassword&#34;&#xA;  sslmode = &#34;false&#34;&#xA;&#xA;[mssql]&#xA;  dbname  = &#34;dbname&#34;&#xA;  host    = &#34;localhost&#34;&#xA;  port    = 1433&#xA;  user    = &#34;dbusername&#34;&#xA;  pass    = &#34;dbpassword&#34;&#xA;  sslmode = &#34;disable&#34;&#xA;  schema  = &#34;notdbo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Initial Generation&lt;/h4&gt; &#xA;&lt;p&gt;After creating a configuration file that points at the database we want to generate models for, we can invoke the sqlboiler command line utility.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;SQL Boiler generates a Go ORM from template files, tailored to your database schema.&#xA;Complete documentation is available at http://github.com/volatiletech/sqlboiler&#xA;&#xA;Usage:&#xA;  sqlboiler [flags] &amp;lt;driver&amp;gt;&#xA;&#xA;Examples:&#xA;sqlboiler psql&#xA;&#xA;Flags:&#xA;      --add-global-variants        Enable generation for global variants&#xA;      --add-panic-variants         Enable generation for panic variants&#xA;      --add-soft-deletes           Enable soft deletion by updating deleted_at timestamp&#xA;      --add-enum-types             Enable generation of types for enums&#xA;      --enum-null-prefix           Name prefix of nullable enum types (default &#34;Null&#34;)&#xA;  -c, --config string              Filename of config file to override default lookup&#xA;  -d, --debug                      Debug mode prints stack traces on error&#xA;  -h, --help                       help for sqlboiler&#xA;      --no-auto-timestamps         Disable automatic timestamps for created_at/updated_at&#xA;      --no-back-referencing        Disable back referencing in the loaded relationship structs&#xA;      --no-context                 Disable context.Context usage in the generated code&#xA;      --no-driver-templates        Disable parsing of templates defined by the database driver&#xA;      --no-hooks                   Disable hooks feature for your models&#xA;      --no-rows-affected           Disable rows affected in the generated API&#xA;      --no-tests                   Disable generated go test files&#xA;  -o, --output string              The name of the folder to output to (default &#34;models&#34;)&#xA;  -p, --pkgname string             The name you wish to assign to your generated package (default &#34;models&#34;)&#xA;      --struct-tag-casing string   Decides the casing for go structure tag names. camel, title, alias or snake (default &#34;snake&#34;)&#xA;  -t, --tag strings                Struct tags to be included on your models in addition to json, yaml, toml&#xA;      --tag-ignore strings         List of column names that should have tags values set to &#39;-&#39; (ignored during parsing)&#xA;      --templates strings          A templates directory, overrides the embedded template folders in sqlboiler&#xA;      --version                    Print the version&#xA;      --wipe                       Delete the output folder (rm -rf) before generation to ensure sanity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow the steps below to do some basic model generation. Once you&#39;ve generated your models, you can run the compatibility tests which will exercise the entirety of the generated code. This way you can ensure that your database is compatible with SQLBoiler. If you find there are some failing tests, please check the &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#diagnosing-problems&#34;&gt;Diagnosing Problems&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Generate our models and exclude the migrations table&#xA;# When passing &#39;psql&#39; here, it looks for a binary called&#xA;# &#39;sqlboiler-psql&#39; in your CWD and PATH. You can also pass&#xA;# an absolute path to a driver if you desire.&#xA;sqlboiler psql&#xA;&#xA;# Run the generated tests&#xA;go test ./models&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: No &lt;code&gt;mysqldump&lt;/code&gt; or &lt;code&gt;pg_dump&lt;/code&gt; equivalent for Microsoft SQL Server, so generated tests must be supplemented by &lt;code&gt;tables_schema.sql&lt;/code&gt; with &lt;code&gt;CREATE TABLE ...&lt;/code&gt; queries&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;go generate&lt;/code&gt; for SQLBoiler if you want to to make it easy to run the command for your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//go:generate sqlboiler --flags-go-here psql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s important to not modify anything in the output folder, which brings us to the next topic: regeneration.&lt;/p&gt; &#xA;&lt;h4&gt;Regeneration&lt;/h4&gt; &#xA;&lt;p&gt;When regenerating the models it&#39;s recommended that you completely delete the generated directory in a build script or use the &lt;code&gt;--wipe&lt;/code&gt; flag in SQLBoiler. The reasons for this are that sqlboiler doesn&#39;t try to diff your files in any smart way, it simply writes the files it&#39;s going to write whether they&#39;re there or not and doesn&#39;t delete any files that were added by you or previous runs of SQLBoiler. In the best case this can cause compilation errors, in the worst case this may leave extraneous and unusable code that was generated against tables that are no longer in the database.&lt;/p&gt; &#xA;&lt;p&gt;The bottom line is that this tool should always produce the same result from the same source. And the intention is to always regenerate from a pure state. The only reason the &lt;code&gt;--wipe&lt;/code&gt; flag isn&#39;t defaulted to on is because we don&#39;t like programs that &lt;code&gt;rm -rf&lt;/code&gt; things on the filesystem without being asked to.&lt;/p&gt; &#xA;&lt;h4&gt;Controlling Generation&lt;/h4&gt; &#xA;&lt;p&gt;The templates get executed in a specific way each time. There&#39;s a variety of configuration options on the command line/config file that can control what features are turned on or off.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the command line flags there are a few features that are only available via the config file and can use some explanation.&lt;/p&gt; &#xA;&lt;h5&gt;Aliases&lt;/h5&gt; &#xA;&lt;p&gt;In sqlboiler, names are automatically generated for you. If you name your database entities properly you will likely have descriptive names generated in the end. However in the case where the names in your database are bad AND unchangeable, or sqlboiler&#39;s inference doesn&#39;t understand the names you do have (even though they are good and correct) you can use aliases to change the name of your tables, columns and relationships in the generated Go code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: It is not required to provide all parts of all names. Anything left out will be inferred as it was in the past.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Although team_names works fine without configuration, we use it here for illustrative purposes&#xA;[aliases.tables.team_names]&#xA;up_plural     = &#34;TeamNames&#34;&#xA;up_singular   = &#34;TeamName&#34;&#xA;down_plural   = &#34;teamNames&#34;&#xA;down_singular = &#34;teamName&#34;&#xA;&#xA;  # Columns can also be aliased.&#xA;  [aliases.tables.team_names.columns]&#xA;  team_name = &#34;OurTeamName&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When creating aliases for relationships, it&#39;s important to know how sqlboiler names relationships. For a given table the foreign key name is used as a unique identifier to refer to a given relationship. If you are going to be aliasing relationships it&#39;s &lt;strong&gt;highly recommended&lt;/strong&gt; that you name your foreign keys explicitly in your database or the auto-generated names could one day change/break your aliases.&lt;/p&gt; &#xA;&lt;p&gt;Each relationship has a &lt;strong&gt;local&lt;/strong&gt; and a &lt;strong&gt;foreign&lt;/strong&gt; function name. The function name will be inserted into your generated code as a function to retrieve relationship data as well as refer to the relationship in a few other places. &lt;strong&gt;local&lt;/strong&gt; means &#34;the function name that refers to the table with the foreign key on it&#34; and conversely &lt;strong&gt;foreign&lt;/strong&gt; means &#34;the function that refers to the table the foreign key points to&#34;.&lt;/p&gt; &#xA;&lt;p&gt;For example - let&#39;s have a &lt;code&gt;videos -&amp;gt; users&lt;/code&gt; many to one relationship that looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;The tables and their columns:&#xA;&#xA;| videos  | users |&#xA;|---------|-------|&#xA;| user_id | id    |&#xA;&#xA;Our foreign key:&#xA;videos_user_id_fkey: videos.user_id -&amp;gt; users.id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example &lt;code&gt;local&lt;/code&gt; (how we refer to the table with the foreign key) is going to be inferred as &lt;code&gt;Videos&lt;/code&gt;. We&#39;re going to override that below to be &lt;code&gt;AuthoredVideos&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Conversely &lt;code&gt;foreign&lt;/code&gt; (how we refer to the table the foreign key points to) is going to be inferred as &lt;code&gt;User&lt;/code&gt;, which we&#39;d like to rename to &lt;code&gt;Author&lt;/code&gt; to suit our domain language a bit better.&lt;/p&gt; &#xA;&lt;p&gt;With the configuration snippet below we can use the following relationship helper functions off of the respective models: &lt;code&gt;video.Author&lt;/code&gt; and &lt;code&gt;user.AuthoredVideos&lt;/code&gt; which make a bit more sense than the inferred names when we see it in the code for our domain. Note the use of the foreign key name to refer to the relationship in the configuration key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[aliases.tables.videos.relationships.videos_author_id_fkey]&#xA;# The local side would originally be inferred as AuthorVideos, which&#xA;# is probably good enough to not want to mess around with this feature, avoid it where possible.&#xA;local   = &#34;AuthoredVideos&#34;&#xA;# Even if left unspecified, the foreign side would have been inferred correctly&#xA;# due to the proper naming of the foreign key column.&#xA;foreign = &#34;Author&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In a many-to-many relationship it&#39;s a bit more complicated. Let&#39;s look at an example relationship between &lt;code&gt;videos &amp;lt;-&amp;gt; tags&lt;/code&gt; with a join table in the middle. Imagine if the join table didn&#39;t exist, and instead both of the id columns in the join table were slapped on to the tables themselves. You&#39;d have &lt;code&gt;videos.tag_id&lt;/code&gt; and &lt;code&gt;tags.video_id&lt;/code&gt;. Using a similar method to the above (local is the name with which we refer to the side that has the foreign key) we can rename the relationships. To change &lt;code&gt;Videos.Tags&lt;/code&gt; to &lt;code&gt;Videos.Rags&lt;/code&gt; we can use the example below.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind that naming ONE side of the many-to-many relationship is sufficient as the other side will be automatically mirrored, though you can specify both if you so choose.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[aliases.tables.video_tags.relationships.fk_video_id]&#xA;local   = &#34;Rags&#34;&#xA;foreign = &#34;Videos&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above definition will specify &lt;code&gt;Rags&lt;/code&gt; as the name of the property with which a given &lt;code&gt;Video&lt;/code&gt; entity will be able to access all of it&#39;s tags. If we look the other way around - a single &lt;code&gt;Tag&lt;/code&gt; entity will refer to all videos that have that specific tag with the &lt;code&gt;Videos&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;There is an alternative syntax available for those who are challenged by the key syntax of toml or challenged by viper lowercasing all of your keys. Instead of using a regular table in toml, use an array of tables, and add a name field to each object. The only one that changes past that is columns, which now has to have a new field called &lt;code&gt;alias&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[aliases.tables]]&#xA;name          = &#34;team_names&#34;&#xA;up_plural     = &#34;TeamNames&#34;&#xA;up_singular   = &#34;TeamName&#34;&#xA;down_plural   = &#34;teamNames&#34;&#xA;down_singular = &#34;teamName&#34;&#xA;&#xA;  [[aliases.tables.columns]]&#xA;  name  = &#34;team_name&#34;&#xA;  alias = &#34;OurTeamName&#34;&#xA;&#xA;  [[aliases.tables.relationships]]&#xA;  name    = &#34;fk_video_id&#34;&#xA;  local   = &#34;Rags&#34;&#xA;  foreign = &#34;Videos&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Inflections&lt;/h5&gt; &#xA;&lt;p&gt;With inflections, you can control the rules sqlboiler uses to generates singular/plural variants. This is useful if a certain word or suffix is used multiple times and you do not want to create aliases for every instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[inflections.plural]&#xA;# Rules to convert a suffix to its plural form&#xA;ium = &#34;ia&#34;&#xA;&#xA;[inflections.plural_exact]&#xA;# Rules to convert an exact word to its plural form&#xA;stadium = &#34;stadia&#34;&#xA;&#xA;[inflections.singular]&#xA;# Rules to convert a suffix to its singular form&#xA;ia = &#34;ium&#34;&#xA;&#xA;[inflections.singular_exact]&#xA;# Rules to convert an exact word to its singular form&#xA;stadia = &#34;stadium&#34;&#xA;&#xA;[inflections.irregular]&#xA;# The singular -&amp;gt; plural mapping of an exact word that doen&#39;t follow conventional rules&#xA;radius = &#34;radii&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Types&lt;/h5&gt; &#xA;&lt;p&gt;There exists the ability to override types that the driver has inferred. The way to accomplish this is through the config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[types]]&#xA;  # The match is a drivers.Column struct, and matches on almost all fields.&#xA;  # Notable exception for the unique bool. Matches are done&#xA;  # with &#34;logical and&#34; meaning it must match all specified matchers.&#xA;  # Boolean values are only checked if all the string specifiers match first,&#xA;  # and they must always match.&#xA;  #&#xA;  # Not shown here: db_type is the database type and a very useful matcher&#xA;  # We can also whitelist tables for this replace by adding to the types.match:&#xA;  # tables = [&#39;users&#39;, &#39;videos&#39;]&#xA;  #&#xA;  # Note there is precedence for types.match, more specific things should appear&#xA;  # further down in the config as once a matching rule is found it is executed&#xA;  # immediately.&#xA;  [types.match]&#xA;    type = &#34;null.String&#34;&#xA;    nullable = true&#xA;&#xA;  # The replace is what we replace the strings with. You cannot modify any&#xA;  # boolean values in here. But we could change the Go type (the most useful thing)&#xA;  # or the DBType or FullDBType etc. if for some reason we needed to.&#xA;  [types.replace]&#xA;    type = &#34;mynull.String&#34;&#xA;&#xA;  # These imports specified here overwrite the definition of the type&#39;s &#34;based_on_type&#34;&#xA;  # list. The type entry that is replaced is the replaced type&#39;s &#34;type&#34; field.&#xA;  # In the above example it would add an entry for mynull.String, if we did not&#xA;  # change the type in our replacement, it would overwrite the null.String entry.&#xA;  [types.imports]&#xA;    third_party = [&#39;&#34;github.com/me/mynull&#34;&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Imports&lt;/h5&gt; &#xA;&lt;p&gt;Imports are overridable by the user. This can be used in conjunction with replacing the templates for extreme cases. Typically this should be avoided.&lt;/p&gt; &#xA;&lt;p&gt;Note that specifying any section of the imports completely overwrites that section. It&#39;s also true that the driver can still specify imports and those will be merged in to what is provided here.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[imports.all]&#xA;  standard = [&#39;&#34;context&#34;&#39;]&#xA;  third_party = [&#39;&#34;github.com/my/package&#34;&#39;]&#xA;&#xA;# Changes imports for the boil_queries file&#xA;[imports.singleton.&#34;boil_queries&#34;]&#xA;  standard = [&#39;&#34;context&#34;&#39;]&#xA;  third_party = [&#39;&#34;github.com/my/package&#34;&#39;]&#xA;&#xA;# Same syntax as all&#xA;[imports.test]&#xA;&#xA;# Same syntax as singleton&#xA;[imports.test_singleton]&#xA;&#xA;# Changes imports when a model contains null.Int32&#xA;[imports.based_on_type.string]&#xA;  standard = [&#39;&#34;context&#34;&#39;]&#xA;  third_party = [&#39;&#34;github.com/my/package&#34;&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When defining maps it&#39;s possible to use an alternative syntax since viper automatically lowercases all configuration keys (same as aliases).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[imports.singleton]]&#xA;  name = &#34;boil_queries&#34;&#xA;  third_party = [&#39;&#34;github.com/my/package&#34;&#39;]&#xA;&#xA;[[imports.based_on_type]]&#xA;  name = &#34;null.Int64&#34;&#xA;  third_party = [&#39;&#34;github.com/my/int64&#34;&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Templates&lt;/h5&gt; &#xA;&lt;p&gt;In advanced scenarios it may be desirable to generate additional files that are not go code. You can accomplish this by using the &lt;code&gt;--templates&lt;/code&gt; flag to specify &lt;strong&gt;all&lt;/strong&gt; the directories you wish to generate code for. With this flag you specify root directories, that is top-level container directories.&lt;/p&gt; &#xA;&lt;p&gt;If root directories have a &lt;code&gt;_test&lt;/code&gt; suffix in the name, this folder is considered a folder full of templates for testing only and will be omitted when &lt;code&gt;--no-tests&lt;/code&gt; is specified and its templates will be generated into files with a &lt;code&gt;_test&lt;/code&gt; suffix.&lt;/p&gt; &#xA;&lt;p&gt;Each root directory is recursively walked. Each template found will be merged into table_name.ext where ext is defined by the shared extension of the templates. The directory structure is preserved with the exception of singletons.&lt;/p&gt; &#xA;&lt;p&gt;For files that should not be generated for each model, you can use a &lt;code&gt;singleton&lt;/code&gt; directory inside the directory where the singleton file should be generated. This will make sure that the file is only generated once.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;templates/&#xA;├── 00_struct.go.tpl               # Merged into output_dir/table_name.go&#xA;├── 00_struct.js.tpl               # Merged into output_dir/table_name.js&#xA;├── singleton&#xA;│   └── boil_queries.go.tpl        # Rendered as output_dir/boil_queries.go&#xA;└── js&#xA; &amp;nbsp;  ├── jsmodel.js.tpl             # Merged into output_dir/js/table_name.js&#xA; &amp;nbsp;&amp;nbsp; └── singleton&#xA; &amp;nbsp;&amp;nbsp;     └── jssingle.js.tpl        # Merged into output_dir/js/jssingle.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output files of which would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;output_dir/&#xA;├── boil_queries.go&#xA;├── table_name.go&#xA;├── table_name.js&#xA;└── js&#xA; &amp;nbsp;&amp;nbsp; ├── table_name.js&#xA; &amp;nbsp;&amp;nbsp; └── jssingle.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Because the &lt;code&gt;--templates&lt;/code&gt; flag overrides the embedded templates of &lt;code&gt;sqlboiler&lt;/code&gt;, if you still wish to generate the default templates it&#39;s recommended that you include the path to sqlboiler&#39;s templates as well.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;templates = [&#xA;  &#34;/path/to/sqlboiler/templates&#34;,&#xA;  &#34;/path/to/sqlboiler/templates_test&#34;,&#xA;  &#34;/path/to/your_project/more_templates&#34;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Extending generated models&lt;/h4&gt; &#xA;&lt;p&gt;There will probably come a time when you want to extend the generated models with some kinds of helper functions. A general guideline is to put your extension functions into a separate package so that your functions aren&#39;t accidentally deleted when regenerating. Past that there are 3 main ways to extend the models, the first way is the most desirable:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 1: Simple Functions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Package modext is for SQLBoiler helper methods&#xA;package modext&#xA;&#xA;// UserFirstTimeSetup is an extension of the user model.&#xA;func UserFirstTimeSetup(ctx context.Context, db *sql.DB, u *models.User) error { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Code organization is accomplished by using multiple files, and everything is passed as a parameter so these kinds of methods are very easy to test.&lt;/p&gt; &#xA;&lt;p&gt;Calling code is also very straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;user, err := Users().One(ctx, db)&#xA;// elided error check&#xA;&#xA;err = modext.UserFirstTimeSetup(ctx, db, user)&#xA;// elided error check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 2: Empty struct methods&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The above is the best way to code extensions for SQLBoiler, however there may be times when the number of methods grows too large and code completion is not as helpful anymore. In these cases you may consider structuring the code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Package modext is for SQLBoiler helper methods&#xA;package modext&#xA;&#xA;type users struct {}&#xA;&#xA;var Users = users{}&#xA;&#xA;// FirstTimeSetup is an extension of the user model.&#xA;func (users) FirstTimeSetup(ctx context.Context, db *sql.DB, u *models.User) error { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling code then looks a little bit different:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;user, err := Users().One(ctx, db)&#xA;// elided error check&#xA;&#xA;err = modext.Users.FirstTimeSetup(ctx, db, user)&#xA;// elided error check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is almost identical to the method above, but gives slight amounts more organization at virtually no cost at runtime. It is however not as desirable as the first method since it does have some runtime cost and doesn&#39;t offer that much benefit over it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Method 3: Embedding&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This pattern is not for the faint of heart, what it provides in benefits it more than makes up for in downsides. It&#39;s possible to embed the SQLBoiler structs inside your own to enhance them. However it&#39;s subject to easy breakages and a dependency on these additional objects. It can also introduce inconsistencies as some objects may have no extended functionality and therefore have no reason to be embedded so you either have to have a struct for each generated struct even if it&#39;s empty, or have inconsistencies, some places where you use the enhanced model, and some where you do not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;user, err := Users().One(ctx, db)&#xA;// elided error check&#xA;&#xA;enhUser := modext.User{user}&#xA;err = ehnUser.FirstTimeSetup(ctx, db)&#xA;// elided error check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I don&#39;t recommend this pattern, but included it so that people know it&#39;s an option and also know the problems with it.&lt;/p&gt; &#xA;&lt;h2&gt;Diagnosing Problems&lt;/h2&gt; &#xA;&lt;p&gt;The most common causes of problems and panics are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forgetting to exclude tables you do not want included in your generation, like migration tables.&lt;/li&gt; &#xA; &lt;li&gt;Tables without a primary key. All tables require one.&lt;/li&gt; &#xA; &lt;li&gt;Forgetting to put foreign key constraints on your columns that reference other tables.&lt;/li&gt; &#xA; &lt;li&gt;The compatibility tests require privileges to create a database for testing purposes, ensure the user supplied in your &lt;code&gt;sqlboiler.toml&lt;/code&gt; config has adequate privileges.&lt;/li&gt; &#xA; &lt;li&gt;A nil or closed database handle. Ensure your passed in &lt;code&gt;boil.Executor&lt;/code&gt; is not nil. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you decide to use the &lt;code&gt;G&lt;/code&gt; variant of functions instead, make sure you&#39;ve initialized your global database handle using &lt;code&gt;boil.SetDB()&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Naming collisions, if the code fails to compile because there are naming collisions, look at the &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#aliases&#34;&gt;aliasing&lt;/a&gt; feature.&lt;/li&gt; &#xA; &lt;li&gt;Race conditions in tests or when using global variable models and using relationship set helpers in multiple goroutines. Note that Set/Add/Remove relationship helpers modify their input parameters to maintain parity between the &lt;code&gt;.R&lt;/code&gt; struct relationships and the database foreign keys but this can produce subtle race conditions. Test for this using the &lt;code&gt;-race&lt;/code&gt; flag on the go tool.&lt;/li&gt; &#xA; &lt;li&gt;A field not being inserted (usually a default true boolean), &lt;code&gt;boil.Infer&lt;/code&gt; looks at the zero value of your Go type (it doesn&#39;t care what the default value in the database is) to determine if it should insert your field or not. In the case of a default true boolean value, when you want to set it to false; you set that in the struct but that&#39;s the zero value for the bool field in Go so sqlboiler assumes you do not want to insert that field and you want the default value from the database. Use a whitelist/greylist to add that field to the list of fields to insert.&lt;/li&gt; &#xA; &lt;li&gt;decimal library showing errors like: &lt;code&gt;pq: encode: unknown type types.NullDecimal&lt;/code&gt; is a result of a too-new and broken version of the github.com/ericlargergren/decimal package, use the following version in your go.mod: github.com/ericlagergren/decimal v0.0.0-20181231230500-73749d4874d5&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For errors with other causes, it may be simple to debug yourself by looking at the generated code. Setting &lt;code&gt;boil.DebugMode&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; can help with this. You can change the output using &lt;code&gt;boil.DebugWriter&lt;/code&gt; (defaults to &lt;code&gt;os.Stdout&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re still stuck and/or you think you&#39;ve found a bug, feel free to leave an issue and we&#39;ll do our best to help you.&lt;/p&gt; &#xA;&lt;h2&gt;Features &amp;amp; Examples&lt;/h2&gt; &#xA;&lt;p&gt;Most examples in this section will be demonstrated using the following Postgres schema, structs and variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE pilots (&#xA;  id integer NOT NULL,&#xA;  name text NOT NULL&#xA;);&#xA;&#xA;ALTER TABLE pilots ADD CONSTRAINT pilot_pkey PRIMARY KEY (id);&#xA;&#xA;CREATE TABLE jets (&#xA;  id integer NOT NULL,&#xA;  pilot_id integer NOT NULL,&#xA;  age integer NOT NULL,&#xA;  name text NOT NULL,&#xA;  color text NOT NULL&#xA;);&#xA;&#xA;ALTER TABLE jets ADD CONSTRAINT jet_pkey PRIMARY KEY (id);&#xA;ALTER TABLE jets ADD CONSTRAINT jet_pilots_fkey FOREIGN KEY (pilot_id) REFERENCES pilots(id);&#xA;&#xA;CREATE TABLE languages (&#xA;  id integer NOT NULL,&#xA;  language text NOT NULL&#xA;);&#xA;&#xA;ALTER TABLE languages ADD CONSTRAINT language_pkey PRIMARY KEY (id);&#xA;&#xA;-- Join table&#xA;CREATE TABLE pilot_languages (&#xA;  pilot_id integer NOT NULL,&#xA;  language_id integer NOT NULL&#xA;);&#xA;&#xA;-- Composite primary key&#xA;ALTER TABLE pilot_languages ADD CONSTRAINT pilot_language_pkey PRIMARY KEY (pilot_id, language_id);&#xA;ALTER TABLE pilot_languages ADD CONSTRAINT pilot_language_pilots_fkey FOREIGN KEY (pilot_id) REFERENCES pilots(id);&#xA;ALTER TABLE pilot_languages ADD CONSTRAINT pilot_language_languages_fkey FOREIGN KEY (language_id) REFERENCES languages(id);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated model structs for this schema look like the following. Note that we&#39;ve included the relationship structs as well so you can see how it all pieces together:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Pilot struct {&#xA;  ID   int    `boil:&#34;id&#34; json:&#34;id&#34; toml:&#34;id&#34; yaml:&#34;id&#34;`&#xA;  Name string `boil:&#34;name&#34; json:&#34;name&#34; toml:&#34;name&#34; yaml:&#34;name&#34;`&#xA;&#xA;  R *pilotR `boil:&#34;-&#34; json:&#34;-&#34; toml:&#34;-&#34; yaml:&#34;-&#34;`&#xA;  L pilotR  `boil:&#34;-&#34; json:&#34;-&#34; toml:&#34;-&#34; yaml:&#34;-&#34;`&#xA;}&#xA;&#xA;type pilotR struct {&#xA;  Languages LanguageSlice&#xA;  Jets      JetSlice&#xA;}&#xA;&#xA;type Jet struct {&#xA;  ID      int    `boil:&#34;id&#34; json:&#34;id&#34; toml:&#34;id&#34; yaml:&#34;id&#34;`&#xA;  PilotID int    `boil:&#34;pilot_id&#34; json:&#34;pilot_id&#34; toml:&#34;pilot_id&#34; yaml:&#34;pilot_id&#34;`&#xA;  Age     int    `boil:&#34;age&#34; json:&#34;age&#34; toml:&#34;age&#34; yaml:&#34;age&#34;`&#xA;  Name    string `boil:&#34;name&#34; json:&#34;name&#34; toml:&#34;name&#34; yaml:&#34;name&#34;`&#xA;  Color   string `boil:&#34;color&#34; json:&#34;color&#34; toml:&#34;color&#34; yaml:&#34;color&#34;`&#xA;&#xA;  R *jetR `boil:&#34;-&#34; json:&#34;-&#34; toml:&#34;-&#34; yaml:&#34;-&#34;`&#xA;  L jetR  `boil:&#34;-&#34; json:&#34;-&#34; toml:&#34;-&#34; yaml:&#34;-&#34;`&#xA;}&#xA;&#xA;type jetR struct {&#xA;  Pilot *Pilot&#xA;}&#xA;&#xA;type Language struct {&#xA;  ID       int    `boil:&#34;id&#34; json:&#34;id&#34; toml:&#34;id&#34; yaml:&#34;id&#34;`&#xA;  Language string `boil:&#34;language&#34; json:&#34;language&#34; toml:&#34;language&#34; yaml:&#34;language&#34;`&#xA;&#xA;  R *languageR `boil:&#34;-&#34; json:&#34;-&#34; toml:&#34;-&#34; yaml:&#34;-&#34;`&#xA;  L languageR  `boil:&#34;-&#34; json:&#34;-&#34; toml:&#34;-&#34; yaml:&#34;-&#34;`&#xA;}&#xA;&#xA;type languageR struct {&#xA;  Pilots PilotSlice&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Open handle to database like normal&#xA;db, err := sql.Open(&#34;postgres&#34;, &#34;dbname=fun user=abc&#34;)&#xA;if err != nil {&#xA;  return err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatic CreatedAt/UpdatedAt&lt;/h3&gt; &#xA;&lt;p&gt;If your generated SQLBoiler models package can find columns with the names &lt;code&gt;created_at&lt;/code&gt; or &lt;code&gt;updated_at&lt;/code&gt; it will automatically set them to &lt;code&gt;time.Now()&lt;/code&gt; in your database, and update your object appropriately. To disable this feature use &lt;code&gt;--no-auto-timestamps&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note: You can set the timezone for this feature by calling &lt;code&gt;boil.SetLocation()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Customizing the timestamp columns&lt;/h4&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;auto-columns&lt;/code&gt; map in your configuration file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[auto-columns]&#xA;    created = &#34;createdAt&#34;&#xA;    updated = &#34;updatedAt&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Skipping Automatic Timestamps&lt;/h4&gt; &#xA;&lt;p&gt;If for a given query you do not want timestamp columns to be re-computed prior to an insert or update then you can use &lt;code&gt;boil.SkipTimestamps&lt;/code&gt; on the context you pass in to the query to prevent them from being updated.&lt;/p&gt; &#xA;&lt;p&gt;Keep in mind this has no effect on whether or not the column is included in the insert/update, it simply stops them from being set to &lt;code&gt;time.Now()&lt;/code&gt; in the struct before being sent to the database (if they were going to be sent).&lt;/p&gt; &#xA;&lt;h4&gt;Overriding Automatic Timestamps&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Insert&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Timestamps for both &lt;code&gt;updated_at&lt;/code&gt; and &lt;code&gt;created_at&lt;/code&gt; that are zero values will be set automatically.&lt;/li&gt; &#xA;   &lt;li&gt;To set the timestamp to null, set &lt;code&gt;Valid&lt;/code&gt; to false and &lt;code&gt;Time&lt;/code&gt; to a non-zero value. This is somewhat of a work around until we can devise a better solution in a later version.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;updated_at&lt;/code&gt; column will always be set to &lt;code&gt;time.Now()&lt;/code&gt;. If you need to override this value you will need to fall back to another method in the meantime: &lt;code&gt;queries.Raw()&lt;/code&gt;, overriding &lt;code&gt;updated_at&lt;/code&gt; in all of your objects using a hook, or create your own wrapper.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Upsert&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;created_at&lt;/code&gt; will be set automatically if it is a zero value, otherwise your supplied value will be used. To set &lt;code&gt;created_at&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;, set &lt;code&gt;Valid&lt;/code&gt; to false and &lt;code&gt;Time&lt;/code&gt; to a non-zero value.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;updated_at&lt;/code&gt; column will always be set to &lt;code&gt;time.Now()&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automatic DeletedAt (Soft Delete)&lt;/h3&gt; &#xA;&lt;p&gt;Soft deletes are a way of deleting records in a database for the average query without actually removing the data. This type of thing is important in certain scenarios where data retention is important. It is typically done by adding a &lt;code&gt;deleted&lt;/code&gt; bool or a &lt;code&gt;deleted_at&lt;/code&gt; timestamp to each table in the database that can be soft deleted and subsequent queries on that table should always make sure that &lt;code&gt;deleted != true&lt;/code&gt; or &lt;code&gt;deleted_at is null&lt;/code&gt; to prevent showing &#34;deleted&#34; data.&lt;/p&gt; &#xA;&lt;p&gt;SQLBoiler uses the &lt;code&gt;deleted_at&lt;/code&gt; variant to provide this functionality. If your table has a nullable timestamp field named &lt;code&gt;deleted_at&lt;/code&gt; it will be a candidate for soft-deletion.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: As of writing soft-delete is opt-in via &lt;code&gt;--add-soft-deletes&lt;/code&gt; and is liable to change in future versions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: There is a query mod to bypass soft delete for a specific query by using &lt;code&gt;qm.WithDeleted&lt;/code&gt;, note that there is no way to do this for Exists/Find helpers yet.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: The &lt;code&gt;Delete&lt;/code&gt; helpers will &lt;em&gt;not&lt;/em&gt; set &lt;code&gt;updated_at&lt;/code&gt; currently. The current philosophy is that deleting the object is simply metadata and since it returns in no queries (other than raw ones) the updated_at will no longer be relevant. This could change in future versions if people disagree with this but it is the current behavior.&lt;/p&gt; &#xA;&lt;h3&gt;Query Building&lt;/h3&gt; &#xA;&lt;p&gt;We generate &#34;Starter&#34; methods for you. These methods are named as the plural versions of your model, for example: &lt;code&gt;models.Jets()&lt;/code&gt;. Starter methods are used to build queries using our &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-mod-system&#34;&gt;Query Mod System&lt;/a&gt;. They take a slice of &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-mod-system&#34;&gt;Query Mods&lt;/a&gt; as parameters, and end with a call to a &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#finishers&#34;&gt;Finisher&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;Here are a few examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// SELECT COUNT(*) FROM pilots;&#xA;count, err := models.Pilots().Count(ctx, db)&#xA;&#xA;// SELECT * FROM &#34;pilots&#34; LIMIT 5;&#xA;pilots, err := models.Pilots(qm.Limit(5)).All(ctx, db)&#xA;&#xA;// DELETE FROM &#34;pilots&#34; WHERE &#34;id&#34;=$1;&#xA;err := models.Pilots(qm.Where(&#34;id=?&#34;, 1)).DeleteAll(ctx, db)&#xA;// type safe version of above&#xA;err := models.Pilots(models.PilotWhere.ID.EQ(1)).DeleteAll(ctx, db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the event that you would like to build a query and specify the table yourself, you can do so using &lt;code&gt;models.NewQuery()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Select all rows from the pilots table by using the From query mod.&#xA;err := models.NewQuery(db, qm.From(&#34;pilots&#34;)).All(ctx, db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-mod-system&#34;&gt;Query Mods&lt;/a&gt; allow you to modify your queries, and &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#finishers&#34;&gt;Finishers&lt;/a&gt; allow you to execute the final action.&lt;/p&gt; &#xA;&lt;p&gt;We also generate query building helper methods for your relationships as well. Take a look at our &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#relationships&#34;&gt;Relationships Query Building&lt;/a&gt; section for some additional query building information.&lt;/p&gt; &#xA;&lt;h3&gt;Query Mod System&lt;/h3&gt; &#xA;&lt;p&gt;The query mod system allows you to modify queries created with &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-building&#34;&gt;Starter&lt;/a&gt; methods when performing query building. See examples below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; SQLBoiler generates type-safe identifiers based on your database tables, columns and relationships. Using these is a bit more verbose, but is especially safe since when the names change in the database the generated code will be different causing compilation failures instead of runtime errors. It is highly recommended you use these instead of regular strings. See &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#constants&#34;&gt;Constants&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You will notice that there is printf used below mixed with SQL statements. This is normally NOT OK if the user is able to supply any of the sql string, but here we always use a &lt;code&gt;?&lt;/code&gt; placeholder and pass arguments so that the only thing that&#39;s being printf&#39;d are constants which makes it safe, but be careful!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Dot import so we can access query mods directly instead of prefixing with &#34;qm.&#34;&#xA;import . &#34;github.com/volatiletech/sqlboiler/v4/queries/qm&#34;&#xA;&#xA;// Use a raw query against a generated struct (Pilot in this example)&#xA;// If this query mod exists in your call, it will override the others.&#xA;// &#34;?&#34; placeholders are not supported here, use &#34;$1, $2&#34; etc.&#xA;SQL(&#34;select * from pilots where id=$1&#34;, 10)&#xA;models.Pilots(SQL(&#34;select * from pilots where id=$1&#34;, 10)).All()&#xA;&#xA;Select(&#34;id&#34;, &#34;name&#34;) // Select specific columns.&#xA;Select(models.PilotColumns.ID, models.PilotColumns.Name)&#xA;From(&#34;pilots as p&#34;) // Specify the FROM table manually, can be useful for doing complex queries.&#xA;From(models.TableNames.Pilots + &#34; as p&#34;)&#xA;&#xA;// WHERE clause building&#xA;Where(&#34;name=?&#34;, &#34;John&#34;)&#xA;models.PilotWhere.Name.EQ(&#34;John&#34;)&#xA;And(&#34;age=?&#34;, 24)&#xA;// No equivalent type safe query yet&#xA;Or(&#34;height=?&#34;, 183)&#xA;// No equivalent type safe query yet&#xA;&#xA;Where(&#34;(name=? and age=?) or (age=?)&#34;, &#34;John&#34;, 5, 6)&#xA;// Expr allows manual grouping of statements&#xA;Where(&#xA;  Expr(&#xA;    models.PilotWhere.Name.EQ(&#34;John&#34;),&#xA;    Or2(models.PilotWhere.Age.EQ(5)),&#xA;  ),&#xA;  Or2(models.PilotAge),&#xA;)&#xA;&#xA;// WHERE IN clause building&#xA;WhereIn(&#34;(name, age) in ?&#34;, &#34;John&#34;, 24, &#34;Tim&#34;, 33) // Generates: WHERE (&#34;name&#34;,&#34;age&#34;) IN (($1,$2),($3,$4))&#xA;WhereIn(fmt.Sprintf(&#34;(%s, %s) in ?&#34;, models.PilotColumns.Name, models.PilotColumns.Age), &#34;John&#34;, 24, &#34;Tim&#34;, 33)&#xA;AndIn(&#34;weight in ?&#34;, 84)&#xA;AndIn(models.PilotColumns.Weight + &#34; in ?&#34;, 84)&#xA;OrIn(&#34;height in ?&#34;, 183, 177, 204)&#xA;OrIn(models.PilotColumns.Height + &#34; in ?&#34;, 183, 177, 204)&#xA;&#xA;InnerJoin(&#34;pilots p on jets.pilot_id=?&#34;, 10)&#xA;InnerJoin(models.TableNames.Pilots + &#34; p on &#34; + models.TableNames.Jets + &#34;.&#34; + models.JetColumns.PilotID + &#34;=?&#34;, 10)&#xA;&#xA;GroupBy(&#34;name&#34;)&#xA;GroupBy(&#34;name like ? DESC, name&#34;, &#34;John&#34;)&#xA;GroupBy(models.PilotColumns.Name)&#xA;OrderBy(&#34;age, height&#34;)&#xA;OrderBy(models.PilotColumns.Age, models.PilotColumns.Height)&#xA;&#xA;Having(&#34;count(jets) &amp;gt; 2&#34;)&#xA;Having(fmt.Sprintf(&#34;count(%s) &amp;gt; 2&#34;, models.TableNames.Jets)&#xA;&#xA;Limit(15)&#xA;Offset(5)&#xA;&#xA;// Explicit locking&#xA;For(&#34;update nowait&#34;)&#xA;&#xA;// Common Table Expressions&#xA;With(&#34;cte_0 AS (SELECT * FROM table_0 WHERE thing=$1 AND stuff=$2)&#34;)&#xA;&#xA;// Eager Loading -- Load takes the relationship name, ie the struct field name of the&#xA;// Relationship struct field you want to load. Optionally also takes query mods to filter on that query.&#xA;Load(&#34;Languages&#34;, Where(...)) // If it&#39;s a ToOne relationship it&#39;s in singular form, ToMany is plural.&#xA;Load(models.PilotRels.Languages, Where(...))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: We don&#39;t force you to break queries apart like this if you don&#39;t want to, the following is also valid and supported by query mods that take a clause:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;Where(&#34;(name=? OR age=?) AND height=?&#34;, &#34;John&#34;, 24, 183)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Function Variations&lt;/h3&gt; &#xA;&lt;p&gt;Functions can have variations generated for them by using the flags &lt;code&gt;--add-global-variants&lt;/code&gt; and &lt;code&gt;--add-panic-variants&lt;/code&gt;. Once you&#39;ve used these flags or set the appropriate values in your configuration file extra method overloads will be generated. We&#39;ve used the &lt;code&gt;Delete&lt;/code&gt; method to demonstrate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Set the global db handle for G method variants.&#xA;boil.SetDB(db)&#xA;&#xA;pilot, _ := models.FindPilot(ctx, db, 1)&#xA;&#xA;err := pilot.Delete(ctx, db) // Regular variant, takes a db handle (boil.Executor interface).&#xA;pilot.DeleteP(ctx, db)       // Panic variant, takes a db handle and panics on error.&#xA;err := pilot.DeleteG(ctx)    // Global variant, uses the globally set db handle (boil.SetDB()).&#xA;pilot.DeleteGP(ctx)          // Global&amp;amp;Panic variant, combines the global db handle and panic on error.&#xA;&#xA;db.Begin()                   // Normal sql package way of creating a transaction&#xA;boil.BeginTx(ctx, nil)       // Uses the global database handle set by boil.SetDB() (doesn&#39;t require flag)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it&#39;s slightly different for query building.&lt;/p&gt; &#xA;&lt;h3&gt;Finishers&lt;/h3&gt; &#xA;&lt;p&gt;Here are a list of all of the finishers that can be used in combination with &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-building&#34;&gt;Query Building&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finishers all have &lt;code&gt;P&lt;/code&gt; (panic) &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#function-variations&#34;&gt;method variations&lt;/a&gt;. To specify your db handle use the &lt;code&gt;G&lt;/code&gt; or regular variation of the &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-building&#34;&gt;Starter&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// These are called like the following:&#xA;models.Pilots().All(ctx, db)&#xA;&#xA;One() // Retrieve one row as object (same as LIMIT(1))&#xA;All() // Retrieve all rows as objects (same as SELECT * FROM)&#xA;Count() // Number of rows (same as COUNT(*))&#xA;UpdateAll(models.M{&#34;name&#34;: &#34;John&#34;, &#34;age&#34;: 23}) // Update all rows matching the built query.&#xA;DeleteAll() // Delete all rows matching the built query.&#xA;Exists() // Returns a bool indicating whether the row(s) for the built query exists.&#xA;Bind(&amp;amp;myObj) // Bind the results of a query to your own struct object.&#xA;Exec() // Execute an SQL query that does not require any rows returned.&#xA;QueryRow() // Execute an SQL query expected to return only a single row.&#xA;Query() // Execute an SQL query expected to return multiple rows.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Raw Query&lt;/h3&gt; &#xA;&lt;p&gt;We provide &lt;code&gt;queries.Raw()&lt;/code&gt; for executing raw queries. Generally you will want to use &lt;code&gt;Bind()&lt;/code&gt; with this, like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := queries.Raw(&#34;select * from pilots where id=$1&#34;, 5).Bind(ctx, db, &amp;amp;obj)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use your own structs or a generated struct as a parameter to Bind. Bind supports both a single object for single row queries and a slice of objects for multiple row queries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;queries.Raw()&lt;/code&gt; also has a method that can execute a query without binding to an object, if required.&lt;/p&gt; &#xA;&lt;p&gt;You also have &lt;code&gt;models.NewQuery()&lt;/code&gt; at your disposal if you would still like to use &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-building&#34;&gt;Query Building&lt;/a&gt; in combination with your own custom, non-generated model.&lt;/p&gt; &#xA;&lt;h3&gt;Binding&lt;/h3&gt; &#xA;&lt;p&gt;For a comprehensive ruleset for &lt;code&gt;Bind()&lt;/code&gt; you can refer to our &lt;a href=&#34;https://pkg.go.dev/github.com/volatiletech/sqlboiler/v4/queries#Bind&#34;&gt;pkg.go.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Bind()&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#finisher&#34;&gt;Finisher&lt;/a&gt; allows the results of a query built with the &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#raw-query&#34;&gt;Raw SQL&lt;/a&gt; method or the &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-building&#34;&gt;Query Builder&lt;/a&gt; methods to be bound to your generated struct objects, or your own custom struct objects.&lt;/p&gt; &#xA;&lt;p&gt;This can be useful for complex queries, queries that only require a small subset of data and have no need for the rest of the object variables, or custom join struct objects like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Custom struct using two generated structs&#xA;type PilotAndJet struct {&#xA;  models.Pilot `boil:&#34;,bind&#34;`&#xA;  models.Jet   `boil:&#34;,bind&#34;`&#xA;}&#xA;&#xA;var paj PilotAndJet&#xA;// Use a raw query&#xA;err := queries.Raw(`&#xA;  select pilots.id as &#34;pilots.id&#34;, pilots.name as &#34;pilots.name&#34;,&#xA;  jets.id as &#34;jets.id&#34;, jets.pilot_id as &#34;jets.pilot_id&#34;,&#xA;  jets.age as &#34;jets.age&#34;, jets.name as &#34;jets.name&#34;, jets.color as &#34;jets.color&#34;&#xA;  from pilots inner join jets on jets.pilot_id=?`, 23,&#xA;).Bind(ctx, db, &amp;amp;paj)&#xA;&#xA;// Use query building&#xA;err := models.NewQuery(&#xA;  Select(&#34;pilots.id&#34;, &#34;pilots.name&#34;, &#34;jets.id&#34;, &#34;jets.pilot_id&#34;, &#34;jets.age&#34;, &#34;jets.name&#34;, &#34;jets.color&#34;),&#xA;  From(&#34;pilots&#34;),&#xA;  InnerJoin(&#34;jets on jets.pilot_id = pilots.id&#34;),&#xA;).Bind(ctx, db, &amp;amp;paj)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Custom struct for selecting a subset of data&#xA;type JetInfo struct {&#xA;  AgeSum int `boil:&#34;age_sum&#34;`&#xA;  Count int `boil:&#34;juicy_count&#34;`&#xA;}&#xA;&#xA;var info JetInfo&#xA;&#xA;// Use query building&#xA;err := models.NewQuery(Select(&#34;sum(age) as age_sum&#34;, &#34;count(*) as juicy_count&#34;, From(&#34;jets&#34;))).Bind(ctx, db, &amp;amp;info)&#xA;&#xA;// Use a raw query&#xA;err := queries.Raw(`select sum(age) as &#34;age_sum&#34;, count(*) as &#34;juicy_count&#34; from jets`).Bind(ctx, db, &amp;amp;info)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We support the following struct tag modes for &lt;code&gt;Bind()&lt;/code&gt; control:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type CoolObject struct {&#xA;  // Don&#39;t specify a name, Bind will TitleCase the column&#xA;  // name, and try to match against this.&#xA;  Frog int&#xA;&#xA;  // Specify an alternative name for the column, it will&#xA;  // be titlecased for matching, can be whatever you like.&#xA;  Cat int  `boil:&#34;kitten&#34;`&#xA;&#xA;  // Ignore this struct field, do not attempt to bind it.&#xA;  Pig int  `boil:&#34;-&#34;`&#xA;&#xA;  // Instead of binding to this as a regular struct field&#xA;  // (like other sql-able structs eg. time.Time)&#xA;  // Recursively search inside the Dog struct for field names from the query.&#xA;  Dog      `boil:&#34;,bind&#34;`&#xA;&#xA;  // Same as the above, except specify a different table name&#xA;  Mouse    `boil:&#34;rodent,bind&#34;`&#xA;&#xA;  // Ignore this struct field, do not attempt to bind it.&#xA;  Bird     `boil:&#34;-&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Relationships&lt;/h3&gt; &#xA;&lt;p&gt;Helper methods will be generated for every to one and to many relationship structure you have defined in your database by using foreign keys.&lt;/p&gt; &#xA;&lt;p&gt;We attach these helpers directly to your model struct, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;jet, _ := models.FindJet(ctx, db, 1)&#xA;&#xA;// &#34;to one&#34; relationship helper method.&#xA;// This will retrieve the pilot for the jet.&#xA;pilot, err := jet.Pilot().One(ctx, db)&#xA;&#xA;// &#34;to many&#34; relationship helper method.&#xA;// This will retrieve all languages for the pilot.&#xA;languages, err := pilot.Languages().All(ctx, db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your relationship involves a join table SQLBoiler will figure it out for you transparently.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that you should use &lt;code&gt;Eager Loading&lt;/code&gt; if you plan on loading large collections of rows, to avoid N+1 performance problems.&lt;/p&gt; &#xA;&lt;p&gt;For example, take the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Avoid this loop query pattern, it is slow.&#xA;jets, _ := models.Jets().All(ctx, db)&#xA;pilots := make([]models.Pilot, len(jets))&#xA;for i := 0; i &amp;lt; len(jets); i++ {&#xA;  pilots[i] = jets[i].Pilot().OneP(ctx, db)&#xA;}&#xA;&#xA;// Instead, use Eager Loading!&#xA;jets, _ := models.Jets(Load(&#34;Pilot&#34;)).All(ctx, db)&#xA;// Type safe relationship names exist too:&#xA;jets, _ := models.Jets(Load(models.JetRels.Pilot)).All(ctx, db)&#xA;&#xA;// Then access the loaded structs using the special Relation field&#xA;for _, j := range jets {&#xA;  _ = j.R.Pilot&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Eager loading can be combined with other query mods, and it can also eager load recursively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Example of a nested load.&#xA;// Each jet will have its pilot loaded, and each pilot will have its languages loaded.&#xA;jets, _ := models.Jets(Load(&#34;Pilot.Languages&#34;)).All(ctx, db)&#xA;// Note that each level of a nested Load call will be loaded. No need to call Load() multiple times.&#xA;&#xA;// Type safe queries exist for this too!&#xA;jets, _ := models.Jets(Load(Rels(models.JetRels.Pilot, models.PilotRels.Languages))).All(ctx, db)&#xA;&#xA;// A larger example. In the below scenario, Pets will only be queried one time, despite&#xA;// showing up twice because they&#39;re the same query (the user&#39;s pets)&#xA;users, _ := models.Users(&#xA;  Load(&#34;Pets.Vets&#34;),&#xA;  // the query mods passed in below only affect the query for Toys&#xA;  // to use query mods against Pets itself, you must declare it separately&#xA;  Load(&#34;Pets.Toys&#34;, Where(&#34;toys.deleted = ?&#34;, isDeleted)),&#xA;  Load(&#34;Property&#34;),&#xA;  Where(&#34;age &amp;gt; ?&#34;, 23),&#xA;).All(ctx, db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We provide the following methods for managing relationships on objects:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To One&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SetX()&lt;/code&gt;: Set the foreign key to point to something else: jet.SetPilot(...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RemoveX()&lt;/code&gt;: Null out the foreign key, effectively removing the relationship between these two objects: jet.RemovePilot(...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;To Many&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AddX()&lt;/code&gt;: Add more relationships to the existing set of related Xs: pilot.AddLanguages(...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetX()&lt;/code&gt;: Remove all existing relationships, and replace them with the provided set: pilot.SetLanguages(...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RemoveX()&lt;/code&gt;: Remove all provided relationships: pilot.RemoveLanguages(...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: Remember to use transactions around these set helpers for performance and data integrity. SQLBoiler does not do this automatically due to it&#39;s transparent API which allows you to batch any number of calls in a transaction without spawning subtransactions you don&#39;t know about or are not supported by your database.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To One&lt;/strong&gt; code examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  jet, _ := models.FindJet(ctx, db, 1)&#xA;  pilot, _ := models.FindPilot(ctx, db, 1)&#xA;&#xA;  // Set the pilot to an existing jet&#xA;  err := jet.SetPilot(ctx, db, false, &amp;amp;pilot)&#xA;&#xA;  pilot = models.Pilot{&#xA;    Name: &#34;Erlich&#34;,&#xA;  }&#xA;&#xA;  // Insert the pilot into the database and assign it to a jet&#xA;  err := jet.SetPilot(ctx, db, true, &amp;amp;pilot)&#xA;&#xA;  // Remove a relationship. This method only exists for foreign keys that can be NULL.&#xA;  err := jet.RemovePilot(ctx, db, &amp;amp;pilot)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;To Many&lt;/strong&gt; code examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  pilots, _ := models.Pilots().All(ctx, db)&#xA;  languages, _ := models.Languages().All(ctx, db)&#xA;&#xA;  // Set a group of language relationships&#xA;  err := pilots.SetLanguages(db, false, &amp;amp;languages)&#xA;&#xA;  languages := []*models.Language{&#xA;    {Language: &#34;Strayan&#34;},&#xA;    {Language: &#34;Yupik&#34;},&#xA;    {Language: &#34;Pawnee&#34;},&#xA;  }&#xA;&#xA;  // Insert new a group of languages and assign them to a pilot&#xA;  err := pilots.SetLanguages(ctx, db, true, languages...)&#xA;&#xA;  // Add another language relationship to the existing set of relationships&#xA;  err := pilots.AddLanguages(ctx, db, false, &amp;amp;someOtherLanguage)&#xA;&#xA;  anotherLanguage := models.Language{Language: &#34;Archi&#34;}&#xA;&#xA;  // Insert and then add another language relationship&#xA;  err := pilots.AddLanguages(ctx, db, true, &amp;amp;anotherLanguage)&#xA;&#xA;  // Remove a group of relationships&#xA;  err := pilots.RemoveLanguages(ctx, db, languages...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hooks&lt;/h3&gt; &#xA;&lt;p&gt;Before and After hooks are available for most operations. If you don&#39;t need them you can shrink the size of the generated code by disabling them with the &lt;code&gt;--no-hooks&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Every generated package that includes hooks has the following &lt;code&gt;HookPoints&lt;/code&gt; defined:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (&#xA;  BeforeInsertHook HookPoint = iota + 1&#xA;  BeforeUpdateHook&#xA;  BeforeDeleteHook&#xA;  BeforeUpsertHook&#xA;  AfterInsertHook&#xA;  AfterSelectHook&#xA;  AfterUpdateHook&#xA;  AfterDeleteHook&#xA;  AfterUpsertHook&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To register a hook for your model you will need to create the hook function, and attach it with the &lt;code&gt;AddModelHook&lt;/code&gt; method. Here is an example of a before insert hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Define my hook function&#xA;func myHook(ctx context.Context, exec boil.ContextExecutor, p *Pilot) error {&#xA;  // Do stuff&#xA;  return nil&#xA;}&#xA;&#xA;// Register my before insert hook for pilots&#xA;models.AddPilotHook(boil.BeforeInsertHook, myHook)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your &lt;code&gt;ModelHook&lt;/code&gt; will always be defined as &lt;code&gt;func(context.Context, boil.ContextExecutor, *Model) error&lt;/code&gt; if context is not turned off.&lt;/p&gt; &#xA;&lt;h4&gt;Skipping Hooks&lt;/h4&gt; &#xA;&lt;p&gt;You can skip hooks by using the &lt;code&gt;boil.SkipHooks&lt;/code&gt; on the context you pass in to a given query.&lt;/p&gt; &#xA;&lt;h3&gt;Transactions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;boil.Executor&lt;/code&gt; and &lt;code&gt;boil.ContextExecutor&lt;/code&gt; interface powers all of SQLBoiler. This means anything that conforms to the three &lt;code&gt;Exec/Query/QueryRow&lt;/code&gt; methods (and their context-aware variants) can be used to execute queries. &lt;code&gt;sql.DB&lt;/code&gt;, &lt;code&gt;sql.Tx&lt;/code&gt; as well as other libraries (&lt;code&gt;sqlx&lt;/code&gt;) conform to this interface, and therefore any of these things may be used as an executor for any query in the system. This makes using transactions very simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx, err := db.BeginTx(ctx, nil)&#xA;if err != nil {&#xA;  return err&#xA;}&#xA;&#xA;users, _ := models.Pilots().All(ctx, tx)&#xA;users.DeleteAll(ctx, tx)&#xA;&#xA;// Rollback or commit&#xA;tx.Commit()&#xA;tx.Rollback()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also worth noting that there&#39;s a way to take advantage of &lt;code&gt;boil.SetDB()&lt;/code&gt; by using the &lt;a href=&#34;https://pkg.go.dev/github.com/volatiletech/sqlboiler/v4/boil#BeginTx&#34;&gt;boil.BeginTx()&lt;/a&gt; function. This opens a transaction using the globally stored database.&lt;/p&gt; &#xA;&lt;h3&gt;Debug Logging&lt;/h3&gt; &#xA;&lt;p&gt;Debug logging will print your generated SQL statement and the arguments it is using. Debug logging can be toggled on globally by setting the following global variable to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;boil.DebugMode = true&#xA;&#xA;// Optionally set the writer as well. Defaults to os.Stdout&#xA;fh, _ := os.Open(&#34;debug.txt&#34;)&#xA;boil.DebugWriter = fh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Debug output is messy at the moment. This is something we would like addressed.&lt;/p&gt; &#xA;&lt;h3&gt;Select&lt;/h3&gt; &#xA;&lt;p&gt;Select is done through &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-building&#34;&gt;Query Building&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#find&#34;&gt;Find&lt;/a&gt;. Here&#39;s a short example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Select one pilot&#xA;pilot, err := models.Pilots(qm.Where(&#34;name=?&#34;, &#34;Tim&#34;)).One(ctx, db)&#xA;// Type safe variant&#xA;pilot, err := models.Pilots(models.PilotWhere.Name.EQ(&#34;Tim&#34;)).One(ctx, db)&#xA;&#xA;// Select specific columns of many jets&#xA;jets, err := models.Jets(qm.Select(&#34;age&#34;, &#34;name&#34;)).All(ctx, db)&#xA;// Type safe variant&#xA;jets, err := models.Jets(qm.Select(models.JetColumns.Age, models.JetColumns.Name)).All(ctx, db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Find&lt;/h3&gt; &#xA;&lt;p&gt;Find is used to find a single row by primary key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Retrieve pilot with all columns filled&#xA;pilot, err := models.FindPilot(ctx, db, 1)&#xA;&#xA;// Retrieve a subset of column values&#xA;jet, err := models.FindJet(ctx, db, 1, &#34;name&#34;, &#34;color&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert&lt;/h3&gt; &#xA;&lt;p&gt;The main thing to be aware of with &lt;code&gt;Insert&lt;/code&gt; is how the &lt;code&gt;columns&lt;/code&gt; argument operates. You can supply one of the following column lists: &lt;code&gt;boil.Infer&lt;/code&gt;, &lt;code&gt;boil.Whitelist&lt;/code&gt;, &lt;code&gt;boil.Blacklist&lt;/code&gt;, or &lt;code&gt;boil.Greylist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These lists control what fields are inserted into the database, and what values are returned to your struct from the database (default, auto incrementing, trigger-based columns are candidates for this). Your struct will have those values after the insert is complete.&lt;/p&gt; &#xA;&lt;p&gt;When you use inference &lt;code&gt;sqlboiler&lt;/code&gt; looks at your Go struct field values and if the field value is the Go zero value and that field has a default value in the database it will not insert that field, instead it will get the value from the database. Keep in mind &lt;code&gt;sqlboiler&lt;/code&gt; cannot read or understand your default values set in the database, so the Go zero value is what&#39;s important here (this can be especially troubling for default true bool fields). Use a whitelist or greylist in cases where you want to insert a Go zero value.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column List&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Infer&lt;/td&gt; &#xA;   &lt;td&gt;Infer the column list using &#34;smart&#34; rules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Whitelist&lt;/td&gt; &#xA;   &lt;td&gt;Insert only the columns specified in this list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blacklist&lt;/td&gt; &#xA;   &lt;td&gt;Infer the column list, but ensure these columns are not inserted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greylist&lt;/td&gt; &#xA;   &lt;td&gt;Infer the column list, but ensure these columns are inserted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; CreatedAt/UpdatedAt are not included in &lt;code&gt;Whitelist&lt;/code&gt; automatically.&lt;/p&gt; &#xA;&lt;p&gt;See the documentation for &lt;a href=&#34;https://pkg.go.dev/github.com/volatiletech/sqlboiler/v4/boil/#Columns.InsertColumnSet&#34;&gt;boil.Columns.InsertColumnSet&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var p1 models.Pilot&#xA;p1.Name = &#34;Larry&#34;&#xA;err := p1.Insert(ctx, db, boil.Infer()) // Insert the first pilot with name &#34;Larry&#34;&#xA;// p1 now has an ID field set to 1&#xA;&#xA;var p2 models.Pilot&#xA;p2.Name = &#34;Boris&#34;&#xA;err := p2.Insert(ctx, db, boil.Infer()) // Insert the second pilot with name &#34;Boris&#34;&#xA;// p2 now has an ID field set to 2&#xA;&#xA;var p3 models.Pilot&#xA;p3.ID = 25&#xA;p3.Name = &#34;Rupert&#34;&#xA;err := p3.Insert(ctx, db, boil.Infer()) // Insert the third pilot with a specific ID&#xA;// The id for this row was inserted as 25 in the database.&#xA;&#xA;var p4 models.Pilot&#xA;p4.ID = 0&#xA;p4.Name = &#34;Nigel&#34;&#xA;err := p4.Insert(ctx, db, boil.Whitelist(&#34;id&#34;, &#34;name&#34;)) // Insert the fourth pilot with a zero value ID&#xA;// The id for this row was inserted as 0 in the database.&#xA;// Note: We had to use the whitelist for this, otherwise&#xA;// SQLBoiler would presume you wanted to auto-increment&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Update&lt;/code&gt; can be performed on a single object, a slice of objects or as a &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#finishers&#34;&gt;Finisher&lt;/a&gt; for a collection of rows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Update&lt;/code&gt; on a single object optionally takes a &lt;code&gt;whitelist&lt;/code&gt;. The purpose of the whitelist is to specify which columns in your object should be updated in the database.&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;Insert&lt;/code&gt;, this method also takes a &lt;code&gt;Columns&lt;/code&gt; type, but the behavior is slightly different. Although the descriptions below look similar the full documentation reveals the differences. Note that all inference is based on the Go types zero value and not the database default value, read the &lt;code&gt;Insert&lt;/code&gt; documentation above for more details.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Column List&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Infer&lt;/td&gt; &#xA;   &lt;td&gt;Infer the column list using &#34;smart&#34; rules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Whitelist&lt;/td&gt; &#xA;   &lt;td&gt;Update only the columns specified in this list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blacklist&lt;/td&gt; &#xA;   &lt;td&gt;Infer the column list for updating, but ensure these columns are not updated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Greylist&lt;/td&gt; &#xA;   &lt;td&gt;Infer the column list, but ensure these columns are updated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; CreatedAt/UpdatedAt are not included in &lt;code&gt;Whitelist&lt;/code&gt; automatically.&lt;/p&gt; &#xA;&lt;p&gt;See the documentation for &lt;a href=&#34;https://pkg.go.dev/github.com/volatiletech/sqlboiler/v4/boil/#Columns.UpdateColumnSet&#34;&gt;boil.Columns.UpdateColumnSet&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Find a pilot and update his name&#xA;pilot, _ := models.FindPilot(ctx, db, 1)&#xA;pilot.Name = &#34;Neo&#34;&#xA;rowsAff, err := pilot.Update(ctx, db, boil.Infer())&#xA;&#xA;// Update a slice of pilots to have the name &#34;Smith&#34;&#xA;pilots, _ := models.Pilots().All(ctx, db)&#xA;rowsAff, err := pilots.UpdateAll(ctx, db, models.M{&#34;name&#34;: &#34;Smith&#34;})&#xA;&#xA;// Update all pilots in the database to to have the name &#34;Smith&#34;&#xA;rowsAff, err := models.Pilots().UpdateAll(ctx, db, models.M{&#34;name&#34;: &#34;Smith&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delete&lt;/h3&gt; &#xA;&lt;p&gt;Delete a single object, a slice of objects or specific objects through &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#query-building&#34;&gt;Query Building&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;pilot, _ := models.FindPilot(db, 1)&#xA;// Delete the pilot from the database&#xA;rowsAff, err := pilot.Delete(ctx, db)&#xA;&#xA;// Delete all pilots from the database&#xA;rowsAff, err := models.Pilots().DeleteAll(ctx, db)&#xA;&#xA;// Delete a slice of pilots from the database&#xA;pilots, _ := models.Pilots().All(ctx, db)&#xA;rowsAff, err := pilots.DeleteAll(ctx, db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Upsert&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.postgresql.org/docs/9.5/static/sql-insert.html&#34;&gt;Upsert&lt;/a&gt; allows you to perform an insert that optionally performs an update when a conflict is found against existing row values.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;updateColumns&lt;/code&gt; and &lt;code&gt;insertColumns&lt;/code&gt; operates in the same fashion that it does for &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#update&#34;&gt;Update&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#insert&#34;&gt;Insert&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If an insert is performed, your object will be updated with any missing default values from the database, such as auto-incrementing column values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var p1 models.Pilot&#xA;p1.ID = 5&#xA;p1.Name = &#34;Gaben&#34;&#xA;&#xA;// INSERT INTO pilots (&#34;id&#34;, &#34;name&#34;) VALUES($1, $2)&#xA;// ON CONFLICT DO NOTHING&#xA;err := p1.Upsert(ctx, db, false, nil, boil.Infer())&#xA;&#xA;// INSERT INTO pilots (&#34;id&#34;, &#34;name&#34;) VALUES ($1, $2)&#xA;// ON CONFLICT (&#34;id&#34;) DO UPDATE SET &#34;name&#34; = EXCLUDED.&#34;name&#34;&#xA;err := p1.Upsert(ctx, db, true, []string{&#34;id&#34;}, boil.Whitelist(&#34;name&#34;), boil.Infer())&#xA;&#xA;// Set p1.ID to a zero value. We will have to use the whitelist now.&#xA;p1.ID = 0&#xA;p1.Name = &#34;Hogan&#34;&#xA;&#xA;// INSERT INTO pilots (&#34;id&#34;, &#34;name&#34;) VALUES ($1, $2)&#xA;// ON CONFLICT (&#34;id&#34;) DO UPDATE SET &#34;name&#34; = EXCLUDED.&#34;name&#34;&#xA;err := p1.Upsert(ctx, db, true, []string{&#34;id&#34;}, boil.Whitelist(&#34;name&#34;), boil.Whitelist(&#34;id&#34;, &#34;name&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Postgres&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;code&gt;updateOnConflict&lt;/code&gt; argument allows you to specify whether you would like Postgres to perform a &lt;code&gt;DO NOTHING&lt;/code&gt; on conflict, opposed to a &lt;code&gt;DO UPDATE&lt;/code&gt;. For MySQL and MSSQL, this param will not be generated.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;conflictColumns&lt;/code&gt; argument allows you to specify the &lt;code&gt;ON CONFLICT&lt;/code&gt; columns for Postgres. For MySQL and MSSQL, this param will not be generated.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MySQL and MSSQL&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Passing &lt;code&gt;boil.None()&lt;/code&gt; for &lt;code&gt;updateColumns&lt;/code&gt; allows to perform a &lt;code&gt;DO NOTHING&lt;/code&gt; on conflict similar to Postgres.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: Passing a different set of column values to the update component is not currently supported.&lt;/p&gt; &#xA;&lt;p&gt;Note: Upsert is now not guaranteed to be provided by SQLBoiler and it&#39;s now up to each driver individually to support it since it&#39;s a bit outside of the reach of the sql standard.&lt;/p&gt; &#xA;&lt;h3&gt;Reload&lt;/h3&gt; &#xA;&lt;p&gt;In the event that your objects get out of sync with the database for whatever reason, you can use &lt;code&gt;Reload&lt;/code&gt; and &lt;code&gt;ReloadAll&lt;/code&gt; to reload the objects using the primary key values attached to the objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;pilot, _ := models.FindPilot(ctx, db, 1)&#xA;&#xA;// &amp;gt; Object becomes out of sync for some reason, perhaps async processing&#xA;&#xA;// Refresh the object with the latest data from the db&#xA;err := pilot.Reload(ctx, db)&#xA;&#xA;// Reload all objects in a slice&#xA;pilots, _ := models.Pilots().All(ctx, db)&#xA;err := pilots.ReloadAll(ctx, db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;Reload&lt;/code&gt; and &lt;code&gt;ReloadAll&lt;/code&gt; are not recursive, if you need your relationships reloaded you will need to call the &lt;code&gt;Reload&lt;/code&gt; methods on those yourself.&lt;/p&gt; &#xA;&lt;h3&gt;Exists&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;jet, err := models.FindJet(ctx, db, 1)&#xA;&#xA;// Check if the pilot assigned to this jet exists.&#xA;exists, err := jet.Pilot().Exists(ctx, db)&#xA;&#xA;// Check if the pilot with ID 5 exists&#xA;exists, err := models.Pilots(Where(&#34;id=?&#34;, 5)).Exists(ctx, db)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enums&lt;/h3&gt; &#xA;&lt;p&gt;If your MySQL or Postgres tables use enums we will generate constants that hold their values that you can use in your queries. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TYPE workday AS ENUM(&#39;monday&#39;, &#39;tuesday&#39;, &#39;wednesday&#39;, &#39;thursday&#39;, &#39;friday&#39;);&#xA;&#xA;CREATE TABLE event_one (&#xA;  id     serial PRIMARY KEY NOT NULL,&#xA;  name   VARCHAR(255),&#xA;  day    workday NOT NULL&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An enum type defined like the above, being used by a table, will generate the following enums:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (&#xA;  WorkdayMonday    = &#34;monday&#34;&#xA;  WorkdayTuesday   = &#34;tuesday&#34;&#xA;  WorkdayWednesday = &#34;wednesday&#34;&#xA;  WorkdayThursday  = &#34;thursday&#34;&#xA;  WorkdayFriday    = &#34;friday&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For Postgres we use &lt;code&gt;enum type name + title cased&lt;/code&gt; value to generate the const variable name. For MySQL we use &lt;code&gt;table name + column name + title cased value&lt;/code&gt; to generate the const variable name.&lt;/p&gt; &#xA;&lt;p&gt;Note: If your enum holds a value we cannot parse correctly due, to non-alphabet characters for example, it may not be generated. In this event, you will receive errors in your generated tests because the value randomizer in the test suite does not know how to generate valid enum values. You will still be able to use your generated library, and it will still work as expected, but the only way to get the tests to pass in this event is to either use a parsable enum value or use a regular column instead of an enum.&lt;/p&gt; &#xA;&lt;h3&gt;Constants&lt;/h3&gt; &#xA;&lt;p&gt;The models package will also contain some structs that contain all table, column, relationship names harvested from the database at generation time. Type safe where query mods are also generated.&lt;/p&gt; &#xA;&lt;p&gt;There are type safe identifiers at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;models.TableNames.TableName&lt;/li&gt; &#xA; &lt;li&gt;models.ModelColumns.ColumnName&lt;/li&gt; &#xA; &lt;li&gt;models.ModelWhere.ColumnName.Operator&lt;/li&gt; &#xA; &lt;li&gt;models.ModelRels.ForeignTableName&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For table names they&#39;re generated under &lt;code&gt;models.TableNames&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Generated code from models package&#xA;var TableNames = struct {&#xA;  Messages  string&#xA;  Purchases string&#xA;}{&#xA;  Messages:  &#34;messages&#34;,&#xA;  Purchases: &#34;purchases&#34;,&#xA;}&#xA;&#xA;// Usage example:&#xA;fmt.Println(models.TableNames.Messages)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For column names they&#39;re generated under &lt;code&gt;models.{Model}Columns&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Generated code from models package&#xA;var MessageColumns = struct {&#xA;  ID         string&#xA;  PurchaseID string&#xA;}{&#xA;  ID:         &#34;id&#34;,&#xA;  PurchaseID: &#34;purchase_id&#34;,&#xA;}&#xA;&#xA;// Usage example:&#xA;fmt.Println(models.MessageColumns.ID)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For where clauses they&#39;re generated under &lt;code&gt;models.{Model}Where.{Column}.{Operator}&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var MessageWhere = struct {&#xA;  ID       whereHelperint&#xA;  Text     whereHelperstring&#xA;}{&#xA;  ID:         whereHelperint{field: `id`},&#xA;  PurchaseID: whereHelperstring{field: `purchase_id`},&#xA;}&#xA;&#xA;// Usage example:&#xA;models.Messages(models.MessageWhere.PurchaseID.EQ(&#34;hello&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For eager loading relationships ther&#39;re generated under &lt;code&gt;models.{Model}Rels&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Generated code from models package&#xA;var MessageRels = struct {&#xA;  Purchase string&#xA;}{&#xA;  Purchase: &#34;Purchase&#34;,&#xA;}&#xA;&#xA;// Usage example:&#xA;fmt.Println(models.MessageRels.Purchase)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can also assign the ModelWhere or ColumnNames to a variable and although you probably pay some performance penalty with it sometimes the readability increase is worth it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cols := &amp;amp;models.UserColumns&#xA;where := &amp;amp;models.UserWhere&#xA;&#xA;u, err := models.Users(where.Name.EQ(&#34;hello&#34;), qm.Or(cols.Age + &#34;=?&#34;, 5))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Won&#39;t compiling models for a huge database be very slow?&lt;/h4&gt; &#xA;&lt;p&gt;No, because Go&#39;s toolchain - unlike traditional toolchains - makes the compiler do most of the work instead of the linker. This means that when the first &lt;code&gt;go install&lt;/code&gt; is done it can take a little bit of time because there is a lot of code that is generated. However, because of this work balance between the compiler and linker in Go, linking to that code afterwards in the subsequent compiles is extremely fast.&lt;/p&gt; &#xA;&lt;h4&gt;Missing imports for generated package&lt;/h4&gt; &#xA;&lt;p&gt;The generated models might import a couple of packages that are not on your system already, so &lt;code&gt;cd&lt;/code&gt; into your generated models directory and type &lt;code&gt;go get -u -t&lt;/code&gt; to fetch them. You will only need to run this command once, not per generation.&lt;/p&gt; &#xA;&lt;h4&gt;How should I handle multiple schemas?&lt;/h4&gt; &#xA;&lt;p&gt;If your database uses multiple schemas you should generate a new package for each of your schemas. Note that this only applies to databases that use real, SQL standard schemas (like PostgreSQL), not fake schemas (like MySQL).&lt;/p&gt; &#xA;&lt;h4&gt;How do I use types.BytesArray for Postgres bytea arrays?&lt;/h4&gt; &#xA;&lt;p&gt;Only &#34;escaped format&#34; is supported for types.BytesArray. This means that your byte slice needs to have a format of &#34;\x00&#34; (4 bytes per byte) opposed to &#34;\x00&#34; (1 byte per byte). This is to maintain compatibility with all Postgres drivers. Example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;x := types.BytesArray{0: []byte(&#34;\\x68\\x69&#34;)}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please note that multi-dimensional Postgres ARRAY types are not supported at this time.&lt;/p&gt; &#xA;&lt;h4&gt;Why aren&#39;t my time.Time or null.Time fields working in MySQL?&lt;/h4&gt; &#xA;&lt;p&gt;You &lt;em&gt;must&lt;/em&gt; use a DSN flag in MySQL connections, see: &lt;a href=&#34;https://raw.githubusercontent.com/volatiletech/sqlboiler/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Where is the homepage?&lt;/h4&gt; &#xA;&lt;p&gt;The homepage for the &lt;a href=&#34;https://github.com/volatiletech/sqlboiler&#34;&gt;SQLBoiler&lt;/a&gt; &lt;a href=&#34;https://github.com/volatiletech/sqlboiler&#34;&gt;Golang ORM&lt;/a&gt; generator is located at: &lt;a href=&#34;https://github.com/volatiletech/sqlboiler&#34;&gt;https://github.com/volatiletech/sqlboiler&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Why are the auto-generated tests failing?&lt;/h4&gt; &#xA;&lt;p&gt;The tests generated for your models package with sqlboiler are fairly error-prone. They are usually broken by constraints in the database that sqlboiler can&#39;t hope to understand.&lt;/p&gt; &#xA;&lt;p&gt;During regular run-time this isn&#39;t an issue because your code will throw errors and you will fix it however the auto-generated tests can only report those errors and it seems like something is wrong when in reality the only issue is that the auto generated tests can&#39;t understand that your &lt;code&gt;text&lt;/code&gt; column is validated by a regex that says it must be composed solely of the &#39;b&#39; character repeated 342 times.&lt;/p&gt; &#xA;&lt;p&gt;These tests are broken especially by foreign key constraints because of the parallelism we use. There&#39;s also no understanding in the tests of dependencies based on these foreign keys. As such there is a process that removes the foreign keys from your schema when they are run, if this process messes up you will get errors relating to foreign key constraints.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to run the benchmarks yourself check out our &lt;a href=&#34;https://github.com/volatiletech/boilbench&#34;&gt;boilbench&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go test -bench . -benchmem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Results (lower is better)&lt;/h3&gt; &#xA;&lt;p&gt;Test machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;OS:  Ubuntu 16.04&#xA;CPU: Intel(R) Core(TM) i7-4771 CPU @ 3.50GHz&#xA;Mem: 16GB&#xA;Go:  go version go1.8.1 linux/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The graphs below have many runs like this as input to calculate errors. Here is a sample run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;BenchmarkGORMSelectAll/gorm-8         20000   66500 ns/op   28998 B/op    455 allocs/op&#xA;BenchmarkGORPSelectAll/gorp-8         50000   31305 ns/op    9141 B/op    318 allocs/op&#xA;BenchmarkXORMSelectAll/xorm-8         20000   66074 ns/op   16317 B/op    417 allocs/op&#xA;BenchmarkKallaxSelectAll/kallax-8    100000   18278 ns/op    7428 B/op    145 allocs/op&#xA;BenchmarkBoilSelectAll/boil-8        100000   12759 ns/op    3145 B/op     67 allocs/op&#xA;&#xA;BenchmarkGORMSelectSubset/gorm-8      20000    69469 ns/op   30008 B/op   462 allocs/op&#xA;BenchmarkGORPSelectSubset/gorp-8      50000    31102 ns/op    9141 B/op   318 allocs/op&#xA;BenchmarkXORMSelectSubset/xorm-8      20000    64151 ns/op   15933 B/op   414 allocs/op&#xA;BenchmarkKallaxSelectSubset/kallax-8 100000    16996 ns/op    6499 B/op   132 allocs/op&#xA;BenchmarkBoilSelectSubset/boil-8     100000    13579 ns/op    3281 B/op    71 allocs/op&#xA;&#xA;BenchmarkGORMSelectComplex/gorm-8     20000    76284 ns/op   34566 B/op   521 allocs/op&#xA;BenchmarkGORPSelectComplex/gorp-8     50000    31886 ns/op    9501 B/op   328 allocs/op&#xA;BenchmarkXORMSelectComplex/xorm-8     20000    68430 ns/op   17694 B/op   464 allocs/op&#xA;BenchmarkKallaxSelectComplex/kallax-8 50000    26095 ns/op   10293 B/op   212 allocs/op&#xA;BenchmarkBoilSelectComplex/boil-8    100000    16403 ns/op    4205 B/op   102 allocs/op&#xA;&#xA;BenchmarkGORMDelete/gorm-8           200000    10356 ns/op    5059 B/op    98 allocs/op&#xA;BenchmarkGORPDelete/gorp-8          1000000     1335 ns/op     352 B/op    13 allocs/op&#xA;BenchmarkXORMDelete/xorm-8           200000    10796 ns/op    4146 B/op   122 allocs/op&#xA;BenchmarkKallaxDelete/kallax-8       300000     5141 ns/op    2241 B/op    48 allocs/op&#xA;BenchmarkBoilDelete/boil-8          2000000      796 ns/op     168 B/op     8 allocs/op&#xA;&#xA;BenchmarkGORMInsert/gorm-8           100000    15238 ns/op    8278 B/op   150 allocs/op&#xA;BenchmarkGORPInsert/gorp-8           300000     4648 ns/op    1616 B/op    38 allocs/op&#xA;BenchmarkXORMInsert/xorm-8           100000    12600 ns/op    6092 B/op   138 allocs/op&#xA;BenchmarkKallaxInsert/kallax-8       100000    15115 ns/op    6003 B/op   126 allocs/op&#xA;BenchmarkBoilInsert/boil-8          1000000     2249 ns/op     984 B/op    23 allocs/op&#xA;&#xA;BenchmarkGORMUpdate/gorm-8           100000    18609 ns/op    9389 B/op   174 allocs/op&#xA;BenchmarkGORPUpdate/gorp-8           500000     3180 ns/op    1536 B/op    35 allocs/op&#xA;BenchmarkXORMUpdate/xorm-8           100000    13149 ns/op    5098 B/op   149 allocs/op&#xA;BenchmarkKallaxUpdate/kallax-8       100000    22880 ns/op   11366 B/op   219 allocs/op&#xA;BenchmarkBoilUpdate/boil-8          1000000     1810 ns/op     936 B/op    18 allocs/op&#xA;&#xA;BenchmarkGORMRawBind/gorm-8           20000    65821 ns/op   30502 B/op   444 allocs/op&#xA;BenchmarkGORPRawBind/gorp-8           50000    31300 ns/op    9141 B/op   318 allocs/op&#xA;BenchmarkXORMRawBind/xorm-8           20000    62024 ns/op   15588 B/op   403 allocs/op&#xA;BenchmarkKallaxRawBind/kallax-8      200000     7843 ns/op    4380 B/op    46 allocs/op&#xA;BenchmarkSQLXRawBind/sqlx-8          100000    13056 ns/op    4572 B/op    55 allocs/op&#xA;BenchmarkBoilRawBind/boil-8          200000    11519 ns/op    4638 B/op    55 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/SltE8UQ.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/lzvM5jJ.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/SS0zNd2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/Kk0IM0J.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/1IFtpdP.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/t6Usecx.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/98DOzcr.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/NSp5r4Q.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/dEGlOgI.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/W0zhuGb.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/YIvDuFv.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/sKwuMaU.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/ZUMYVmw.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/T61rH3K.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/lDr0xhY.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/LWo10M9.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/Td15owT.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/45XXw4K.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/lpP8qds.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/hLyH3jQ.png&#34;&gt;&lt;img src=&#34;http://i.imgur.com/C2v10t3.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>