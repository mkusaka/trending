<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-24T01:31:21Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bbernhard/signal-cli-rest-api</title>
    <updated>2024-12-24T01:31:21Z</updated>
    <id>tag:github.com,2024-12-24:/bbernhard/signal-cli-rest-api</id>
    <link href="https://github.com/bbernhard/signal-cli-rest-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerized Signal Messenger REST API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dockerized Signal Messenger REST API&lt;/h1&gt; &#xA;&lt;p&gt;This project creates a small dockerized REST API around &lt;a href=&#34;https://github.com/AsamK/signal-cli&#34;&gt;signal-cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;At the moment, the following functionality is exposed via REST:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register a number&lt;/li&gt; &#xA; &lt;li&gt;Verify the number using the code received via SMS&lt;/li&gt; &#xA; &lt;li&gt;Send message (+ attachments) to multiple recipients (or a group)&lt;/li&gt; &#xA; &lt;li&gt;Receive messages&lt;/li&gt; &#xA; &lt;li&gt;Link devices&lt;/li&gt; &#xA; &lt;li&gt;Create/List/Remove groups&lt;/li&gt; &#xA; &lt;li&gt;List/Serve/Delete attachments&lt;/li&gt; &#xA; &lt;li&gt;Update profile&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and &lt;a href=&#34;https://bbernhard.github.io/signal-cli-rest-api/&#34;&gt;many more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a directory for the configuration This allows you to update &lt;code&gt;signal-cli-rest-api&lt;/code&gt; by just deleting and recreating the container without the need to re-register your signal number&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir -p $HOME/.local/share/signal-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Start a container&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker run -d --name signal-api --restart=always -p 8080:8080 \&#xA;      -v $HOME/.local/share/signal-api:/home/.local/share/signal-cli \&#xA;      -e &#39;MODE=native&#39; bbernhard/signal-cli-rest-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Register or Link your Signal Number&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In this case we&#39;ll register our container as secondary device, assuming that you already have your primary number running / assigned to your mobile.&lt;/p&gt; &#xA;&lt;p&gt;Therefore open &lt;a href=&#34;http://localhost:8080/v1/qrcodelink?device_name=signal-api&#34;&gt;http://localhost:8080/v1/qrcodelink?device_name=signal-api&lt;/a&gt; in your browser, open Signal on your mobile phone, go to &lt;em&gt;Settings &amp;gt; Linked devices&lt;/em&gt; and scan the QR code using the &lt;em&gt;+&lt;/em&gt; button.&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Test your new REST API&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Call the REST API endpoint and send a test message: Replace &lt;code&gt;+4412345&lt;/code&gt; with your signal number in international number format, and &lt;code&gt;+44987654&lt;/code&gt; with the recipients number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -X POST -H &#34;Content-Type: application/json&#34; &#39;http://localhost:8080/v2/send&#39; \&#xA;     -d &#39;{&#34;message&#34;: &#34;Test via Signal API!&#34;, &#34;number&#34;: &#34;+4412345&#34;, &#34;recipients&#34;: [ &#34;+44987654&#34; ]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now have send a message to &lt;code&gt;+44987654&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Execution Modes&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;signal-cli-rest-api&lt;/code&gt; supports three different modes of execution, which can be controlled by setting the &lt;code&gt;MODE&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;normal&lt;/code&gt; Mode: (Default)&lt;/strong&gt; The &lt;code&gt;signal-cli&lt;/code&gt; executable is invoked for every REST API request. Being a Java application, each REST call requires a new startup of the JVM (Java Virtual Machine), increasing the latency and hence leading to the slowest mode of operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;native&lt;/code&gt; Mode:&lt;/strong&gt; A precompiled binary &lt;code&gt;signal-cli-native&lt;/code&gt; (using GraalVM) is used for every REST API request. This results in a much lower latency &amp;amp; memory usage on each call. On the &lt;code&gt;armv7&lt;/code&gt; platform this mode is not available and falls back to &lt;code&gt;normal&lt;/code&gt;. The native mode may also be less stable, due to the experimental state of GraalVM compiler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;json-rpc&lt;/code&gt; Mode: A single, JVM-based &lt;code&gt;signal-cli&lt;/code&gt; instance is spawned as daemon process. This mode is usually the fastest, but requires more memory as the JVM keeps running.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;mode&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;speed&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;resident memory usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;normal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;normal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;native&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt; &lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;normal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;code&gt;json-rpc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;✔&lt;/span&gt; &lt;span&gt;✔&lt;/span&gt; &lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;increased&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example of running &lt;code&gt;signal-cli-rest&lt;/code&gt; in &lt;code&gt;native&lt;/code&gt; mode&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker run -d --name signal-api --restart=always -p 9922:8080 \&#xA;              -v /home/user/signal-api:/home/.local/share/signal-cli \&#xA;              -e &#39;MODE=native&#39; bbernhard/signal-cli-rest-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This launches a instance of the REST service accessible under &lt;a href=&#34;http://localhost:9922/v2/send&#34;&gt;http://localhost:9922/v2/send&lt;/a&gt;. To preserve the Signal number registration, i.e. for updates, the storage location for the &lt;code&gt;signal-cli&lt;/code&gt; configuration is mapped as Docker Volume into a local &lt;code&gt;/home/user/signal-api&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Auto Receive Schedule&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This setting is only needed in normal/native mode!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AsamK/signal-cli&#34;&gt;signal-cli&lt;/a&gt;, which this REST API wrapper is based on, recommends to call &lt;code&gt;receive&lt;/code&gt; on a regular basis. So, if you are not already calling the &lt;code&gt;receive&lt;/code&gt; endpoint regularly, it is recommended to set the &lt;code&gt;AUTO_RECEIVE_SCHEDULE&lt;/code&gt; parameter in the docker-compose.yml file. The &lt;code&gt;AUTO_RECEIVE_SCHEDULE&lt;/code&gt; accepts cron schedule expressions and automatically calls the &lt;code&gt;receive&lt;/code&gt; endpoint at the given time. e.g: &lt;code&gt;0 22 * * *&lt;/code&gt; calls &lt;code&gt;receive&lt;/code&gt; daily at 10pm. If you are not familiar with cron schedule expressions, you can use this &lt;a href=&#34;https://crontab.guru&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING&lt;/strong&gt; Calling &lt;code&gt;receive&lt;/code&gt; will fetch all the messages for the registered Signal number from the Signal Server! So, if you are using the REST API for receiving messages, it&#39;s &lt;em&gt;not&lt;/em&gt; a good idea to use the &lt;code&gt;AUTO_RECEIVE_SCHEDULE&lt;/code&gt; parameter, as you might lose some messages that way.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Sample &lt;code&gt;docker-compose.yml&lt;/code&gt;file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;3&#34;&#xA;services:&#xA;  signal-cli-rest-api:&#xA;    image: bbernhard/signal-cli-rest-api:latest&#xA;    environment:&#xA;      - MODE=normal #supported modes: json-rpc, native, normal&#xA;      #- AUTO_RECEIVE_SCHEDULE=0 22 * * * #enable this parameter on demand (see description below)&#xA;    ports:&#xA;      - &#34;8080:8080&#34; #map docker port 8080 to host port 8080.&#xA;    volumes:&#xA;      - &#34;./signal-cli-config:/home/.local/share/signal-cli&#34; #map &#34;signal-cli-config&#34; folder on host system into docker container. the folder contains the password and cryptographic keys when a new number is registered&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;h3&gt;API Reference&lt;/h3&gt; &#xA;&lt;p&gt;The Swagger API documentation can be found &lt;a href=&#34;https://bbernhard.github.io/signal-cli-rest-api/&#34;&gt;here&lt;/a&gt;. If you prefer a simple text file based API documentation have a look &lt;a href=&#34;https://github.com/bbernhard/signal-cli-rest-api/raw/master/doc/EXAMPLES.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Blog Posts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stefanstranger.github.io/2021/06/01/RunningSignalRESTAPIinAppService/&#34;&gt;Running Signal Messenger REST API in Azure Web App for Containers&lt;/a&gt; by &lt;a href=&#34;https://github.com/stefanstranger&#34;&gt;@stefanstranger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.aawadia.dev/2023/04/24/signal-api/&#34;&gt;Sending Signal Messages&lt;/a&gt; by &lt;a href=&#34;https://github.com/asad-awadia&#34;&gt;@asad-awadia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Clients, Libraries and Scripts&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Maintainer&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/pysignalclirestapi/&#34;&gt;pysignalclirestapi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Library&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;Small python library&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/bbernhard&#34;&gt;@bbernhard&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pypi.org/project/signalbot/&#34;&gt;signalbot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Library&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;Framework to build Signal bots&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/filipre&#34;&gt;@filipre&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jneidel/signal-cli-to-file&#34;&gt;signal-cli-to-file&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Script&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;Save incoming signal messages as files&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jneidel&#34;&gt;@jneidel&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In case you need more functionality, please &lt;strong&gt;file a ticket&lt;/strong&gt; or &lt;strong&gt;create a PR&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Settings&lt;/h2&gt; &#xA;&lt;p&gt;There are a bunch of environmental variables that can be set inside the docker container in order to change some technical details. This settings are meant for developers and advanced users. Usually you do &lt;em&gt;not&lt;/em&gt; need to change anything here - the default values are perfectly fine!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SIGNAL_CLI_CONFIG_DIR&lt;/code&gt;: Specifies the path to the &lt;code&gt;signal-cli&lt;/code&gt; config directory inside the docker container. Defaults to &lt;code&gt;/home/.local/share/signal-cli/&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SIGNAL_CLI_UID&lt;/code&gt;: Specifies the uid of the &lt;code&gt;signal-api&lt;/code&gt; user inside the docker container. Defaults to &lt;code&gt;1000&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SIGNAL_CLI_GID&lt;/code&gt;: Specifies the gid of the &lt;code&gt;signal-api&lt;/code&gt; group inside the docker container. Defaults to &lt;code&gt;1000&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SWAGGER_HOST&lt;/code&gt;: The host that&#39;s used in the Swagger UI for the interactive examples (and useful when this runs behind a reverse proxy). Defaults to SWAGGER_IP:PORT.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;SWAGGER_IP&lt;/code&gt;: The IP that&#39;s used in the Swagger UI for the interactive examples. Defaults to the container ip.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PORT&lt;/code&gt;: Defaults to port &lt;code&gt;8080&lt;/code&gt; unless this env var is set to tell it otherwise.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>