<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-19T01:31:04Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GreenmaskIO/greenmask</title>
    <updated>2024-10-19T01:31:04Z</updated>
    <id>tag:github.com,2024-10-19:/GreenmaskIO/greenmask</id>
    <link href="https://github.com/GreenmaskIO/greenmask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PostgreSQL database anonymization and synthetic data generation tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://greenmask.io&#34;&gt;Greenmask&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Dump anonymization and synthetic data generation tool&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Greenmask&lt;/strong&gt; is a powerful open-source utility that is designed for logical database backup dumping, anonymization, synthetic data generation and restoration. It has ported PostgreSQL libraries, making it reliable. It is stateless and does not require any changes to your database schema. It is designed to be highly customizable and backward-compatible with existing PostgreSQL utilities, fast and reliable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/rKBKvDECfd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1179422525294399488?label=Discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/greenmask_community&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-Join%20Chat-blue.svg?logo=telegram&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GreenmaskIO&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/GreenmaskIO&#34; alt=&#34;X (formerly Twitter) Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GreenmaskIO/greenmask/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/greenmaskio/greenmask/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.greenmask.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-blue&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greenmaskio/greenmask/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/greenmaskio/greenmask&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/greenmaskio/greenmask/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/greenmaskio/greenmask&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://somsubhra.github.io/github-release-stats/?username=greenmaskio&amp;amp;repository=greenmask&amp;amp;page=1&amp;amp;per_page=5&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/greenmaskio/greenmask/total&#34; alt=&#34;GitHub Downloads (all assets, all releases)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/greenmask/greenmask&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/greenmask/greenmask&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/greenmaskio/greenmask&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/greenmaskio/greenmask&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/GreenmaskIO/greenmask/main/docs/assets/schema.png&#34; alt=&#34;schema.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Greenmask has a &lt;a href=&#34;https://docs.greenmask.io/latest/playground/&#34;&gt;Playground&lt;/a&gt; - it is a sandbox environment in Docker with sample databases included to help you try Greenmask without any additional actions&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the &lt;code&gt;greenmask&lt;/code&gt; repository and navigate to its directory by running the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:GreenmaskIO/greenmask.git &amp;amp;&amp;amp; cd greenmask&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once you have cloned the repository, start the environment by running Docker Compose:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker-compose run greenmask&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.greenmask.io/latest/built_in_transformers/transformation_engines/#hash-engine&#34;&gt;Deterministic transformers&lt;/a&gt;&lt;/strong&gt; — deterministic approach to data transformation based on the hash functions. This ensures that the same input data will always produce the same output data. Almost each transformer supports either &lt;code&gt;random&lt;/code&gt; or &lt;code&gt;hash&lt;/code&gt; engine making it universal for any use case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.greenmask.io/latest/built_in_transformers/dynamic_parameters/&#34;&gt;Dynamic parameters&lt;/a&gt;&lt;/strong&gt; — almost each transformer supports dynamic parameters, allowing to parametrize the transformer dynamically from the table column value. This is helpful for resolving the functional dependencies between columns and satisfying the constraints.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.greenmask.io/latest/commands/validate/&#34;&gt;Transformation validation and easy maintainable&lt;/a&gt;&lt;/strong&gt; - During configuration process, Greenmask provides validation warnings, data transformation diff and schema diff features, allowing you to monitor and maintain transformations effectively throughout the software lifecycle. Schema diff helps to avoid data leakage when schema changed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.greenmask.io/latest/configuration/?h=partition#dump-section&#34;&gt;Partitioned tables transformation inheritance&lt;/a&gt;&lt;/strong&gt; — Define transformation configurations once and apply them to all partitions within partitioned tables (using &lt;code&gt;apply_for_inherited&lt;/code&gt; parameter), simplifying the anonymization process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stateless&lt;/strong&gt; - Greenmask operates as a logical dump and does not impact your existing database schema.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt; - Can be easily built and executed on any platform, thanks to its Go-based architecture, which eliminates platform dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database type safe&lt;/strong&gt; - Ensures data integrity by validating data and utilizing the database driver for encoding and decoding operations. This approach guarantees the preservation of data formats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backward compatible&lt;/strong&gt; - It fully supports the same features and protocols as existing vanilla PostgreSQL utilities. Dumps created by Greenmask can be successfully restored using the pg_restore utility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt; - Users have the flexibility to &lt;a href=&#34;https://docs.greenmask.io/latest/built_in_transformers/standard_transformers/cmd/&#34;&gt;implement domain-based transformations&lt;/a&gt; in any programming language or use &lt;a href=&#34;https://docs.greenmask.io/latest/built_in_transformers/advanced_transformers/&#34;&gt;predefined templates&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integrable&lt;/strong&gt; - Integrate seamlessly into your CI/CD system for automated database anonymization and restoration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel execution&lt;/strong&gt; - Take advantage of parallel dumping and restoration, significantly reducing the time required to deliver results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Provide variety of storages&lt;/strong&gt; - offers a variety of storage options for local and remote data storage, including directories and S3-like storage solutions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.greenmask.io/latest/commands/dump/?h=pgzip#pgzip-compression&#34;&gt;Pgzip support for faster compression&lt;/a&gt;&lt;/strong&gt; — by setting &lt;code&gt;--pgzip&lt;/code&gt;, it can speeds up the dump and restoration processes through parallel compression.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;Greenmask is ideal for various scenarios, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backup and Restoration&lt;/strong&gt;. Use Greenmask for your daily routines involving logical backup dumping and restoration. It seamlessly handles tasks like table restoration after truncation. Its functionality closely mirrors that of pg_dump and pg_restore, making it a straightforward replacement.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Anonymization, Transformation, and Data Masking&lt;/strong&gt;. Employ Greenmask for anonymizing, transforming, and masking backups, especially when setting up a staging environment or for analytical purposes. It simplifies the deployment of a pre-production environment with consistently anonymized data, facilitating faster time-to-market in the development lifecycle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;General Information&lt;/h3&gt; &#xA;&lt;p&gt;It is evident that the most appropriate approach for executing logical backup dumping and restoration is by leveraging the core PostgreSQL utilities, specifically pg_dump and pg_restore. &lt;strong&gt;Greenmask&lt;/strong&gt; has been purposefully designed to align with PostgreSQL&#39;s native utilities, ensuring compatibility. Greenmask primarily handles data dumping operations independently and delegates the responsibilities of schema dumping and restoration to pg_dump and pg_restore, maintaining seamless integration with PostgreSQL&#39;s standard tools.&lt;/p&gt; &#xA;&lt;h4&gt;Backup and Process&lt;/h4&gt; &#xA;&lt;p&gt;Greenmask uses the &lt;strong&gt;directory format&lt;/strong&gt; of &lt;em&gt;pg_dump&lt;/em&gt; and &lt;em&gt;pg_restore&lt;/em&gt;. This format is particularly suitable for parallel execution and partial restoration, and it includes clear metadata files that aid in determining the backup and restoration steps. Greenmask has been optimized to work seamlessly with remote storage systems and anonymization procedures.&lt;/p&gt; &#xA;&lt;h4&gt;Storage Options&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;s3&lt;/strong&gt; - This option supports any S3-like storage system, including AWS S3, making it versatile and adaptable to various cloud-based storage solutions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;directory&lt;/strong&gt; - This is the standard choice, representing the ordinary filesystem directory for local storage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Data Anonymization and Validation&lt;/h4&gt; &#xA;&lt;p&gt;Greenmask works with &lt;strong&gt;COPY lines&lt;/strong&gt;, collects schema metadata using the Golang driver, and employs this driver in the encoding and decoding process. The &lt;strong&gt;validate command&lt;/strong&gt; offers a way to assess the impact on both schema (&lt;strong&gt;validation warnings&lt;/strong&gt;) and data (&lt;strong&gt;transformation and displaying differences&lt;/strong&gt;). This command allows you to validate the schema and data transformations, ensuring the desired outcomes during the Anonymization process.&lt;/p&gt; &#xA;&lt;h4&gt;Customization&lt;/h4&gt; &#xA;&lt;p&gt;If your table schema relies on functional dependencies between columns, you can address this challenge using the &lt;a href=&#34;https://docs.greenmask.io/latest/built_in_transformers/dynamic_parameters/&#34;&gt;Dynamic parameters&lt;/a&gt;. By setting dynamic parameters, you can resolve such as created_at and updated_at cases, where the updated_at must be greater or equal than the created_at.&lt;/p&gt; &#xA;&lt;p&gt;If you need to implement custom logic imperatively use &lt;a href=&#34;https://docs.greenmask.io/latest/built_in_transformers/advanced_transformers/template_record/&#34;&gt;TemplateRecord&lt;/a&gt; or &lt;a href=&#34;https://docs.greenmask.io/latest/built_in_transformers/advanced_transformers/template/&#34;&gt;Template&lt;/a&gt; transformers.&lt;/p&gt; &#xA;&lt;p&gt;Greenmask provides a framework for creating your custom transformers, which can be reused efficiently. These transformers can be seamlessly integrated without requiring recompilation, thanks to the PIPE (stdin/stdout) interaction.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, Greenmask&#39;s architecture is designed to be highly extensible, making it possible to introduce other interaction protocols, such as HTTP or Socket, for conducting anonymization procedures.&lt;/p&gt; &#xA;&lt;h4&gt;PostgreSQL Version Compatibility&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Greenmask&lt;/strong&gt; is compatible with PostgreSQL versions &lt;strong&gt;11 and higher&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.greenmask.io&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email: &lt;strong&gt;&lt;a href=&#34;mailto:support@greenmask.io&#34;&gt;support@greenmask.io&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/GreenmaskIO&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/greenmask_community&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/invite/rKBKvDECfd&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/greenmask/greenmask&#34;&gt;DockerHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Utilized the &lt;a href=&#34;https://postgrespro.com/community/demodb&#34;&gt;Demo database&lt;/a&gt;, provided by PostgresPro, for integration testing purposes.&lt;/li&gt; &#xA; &lt;li&gt;Employed the &lt;a href=&#34;https://github.com/morenoh149/postgresDBSamples&#34;&gt;adventureworks database&lt;/a&gt; created by &lt;code&gt;morenoh149/postgresDBSamples&lt;/code&gt;, in the Docker Compose playground.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>