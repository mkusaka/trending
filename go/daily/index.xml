<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-26T01:34:39Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>avast/retry-go</title>
    <updated>2022-10-26T01:34:39Z</updated>
    <id>tag:github.com,2022-10-26:/avast/retry-go</id>
    <link href="https://github.com/avast/retry-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple golang library for retry mechanism&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;retry&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/avast/retry-go/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/avast/retry-go.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/avast/retry-go/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/avast/retry-go/actions/workflows/workflow.yaml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/avast/retry-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/avast/retry-go?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/avast/retry-go&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/avast/retry-go?status.svg&amp;amp;style=flat-square&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/avast/retry-go?branch=master&#34;&gt;&lt;img src=&#34;https://codecov.io/github/avast/retry-go/coverage.svg?branch=master&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/avast/retry-go?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/avast/retry-go/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple library for retry mechanism&lt;/p&gt; &#xA;&lt;p&gt;slightly inspired by &lt;a href=&#34;https://metacpan.org/pod/Try::Tiny::Retry&#34;&gt;Try::Tiny::Retry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;p&gt;http get with retry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;url := &#34;http://example.com&#34;&#xA;var body []byte&#xA;&#xA;err := retry.Do(&#xA;&#x9;func() error {&#xA;&#x9;&#x9;resp, err := http.Get(url)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return err&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;defer resp.Body.Close()&#xA;&#x9;&#x9;body, err = ioutil.ReadAll(resp.Body)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return err&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return nil&#xA;&#x9;},&#xA;)&#xA;&#xA;fmt.Println(body)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/avast/retry-go/tree/master/examples&#34;&gt;next examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/giantswarm/retry-go&#34;&gt;giantswarm/retry-go&lt;/a&gt; - slightly complicated interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/sethgrid/pester&#34;&gt;sethgrid/pester&lt;/a&gt; - only http retry for http calls with retries and backoff&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/cenkalti/backoff&#34;&gt;cenkalti/backoff&lt;/a&gt; - Go port of the exponential backoff algorithm from Google&#39;s HTTP Client Library for Java. Really complicated interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rafaeljesus/retry-go&#34;&gt;rafaeljesus/retry-go&lt;/a&gt; - looks good, slightly similar as this package, don&#39;t have &#39;simple&#39; &lt;code&gt;Retry&lt;/code&gt; method&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/matryer/try&#34;&gt;matryer/try&lt;/a&gt; - very popular package, nonintuitive interface (for me)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;BREAKING CHANGES&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;4.0.0&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;infinity retry is possible by set &lt;code&gt;Attempts(0)&lt;/code&gt; by PR &lt;a href=&#34;https://github.com/avast/retry-go/pull/49&#34;&gt;#49&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;3.0.0&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;DelayTypeFunc&lt;/code&gt; accepts a new parameter &lt;code&gt;err&lt;/code&gt; - this breaking change affects only your custom Delay Functions. This change allow &lt;a href=&#34;https://raw.githubusercontent.com/avast/retry-go/master/examples/delay_based_on_error_test.go&#34;&gt;make delay functions based on error&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;1.0.2 -&amp;gt; 2.0.0&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;argument of &lt;code&gt;retry.Delay&lt;/code&gt; is final delay (no multiplication by &lt;code&gt;retry.Units&lt;/code&gt; anymore)&lt;/li&gt; &#xA;   &lt;li&gt;function &lt;code&gt;retry.Units&lt;/code&gt; are removed&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/avast/retry-go/issues/7&#34;&gt;more about this breaking change&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;0.3.0 -&amp;gt; 1.0.0&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;retry.Retry&lt;/code&gt; function are changed to &lt;code&gt;retry.Do&lt;/code&gt; function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;retry.RetryCustom&lt;/code&gt; (OnRetry) and &lt;code&gt;retry.RetryCustomWithOpts&lt;/code&gt; functions are now implement via functions produces Options (aka &lt;code&gt;retry.OnRetry&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h4&gt;func BackOffDelay&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func BackOffDelay(n uint, _ error, config *Config) time.Duration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;BackOffDelay is a DelayType which increases delay between consecutive retries&lt;/p&gt; &#xA;&lt;h4&gt;func Do&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Do(retryableFunc RetryableFunc, opts ...Option) error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;func FixedDelay&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func FixedDelay(_ uint, _ error, config *Config) time.Duration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;FixedDelay is a DelayType which keeps delay the same through all iterations&lt;/p&gt; &#xA;&lt;h4&gt;func IsRecoverable&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func IsRecoverable(err error) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;IsRecoverable checks if error is an instance of &lt;code&gt;unrecoverableError&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;func RandomDelay&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func RandomDelay(_ uint, _ error, config *Config) time.Duration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RandomDelay is a DelayType which picks a random delay up to config.maxJitter&lt;/p&gt; &#xA;&lt;h4&gt;func Unrecoverable&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Unrecoverable(err error) error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unrecoverable wraps an error in &lt;code&gt;unrecoverableError&lt;/code&gt; struct&lt;/p&gt; &#xA;&lt;h4&gt;type Config&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Config struct {&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;type DelayTypeFunc&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DelayTypeFunc func(n uint, err error, config *Config) time.Duration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DelayTypeFunc is called to return the next delay to wait after the retriable function fails on &lt;code&gt;err&lt;/code&gt; after &lt;code&gt;n&lt;/code&gt; attempts.&lt;/p&gt; &#xA;&lt;h4&gt;func CombineDelay&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func CombineDelay(delays ...DelayTypeFunc) DelayTypeFunc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;CombineDelay is a DelayType the combines all of the specified delays into a new DelayTypeFunc&lt;/p&gt; &#xA;&lt;h4&gt;type Error&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Error []error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Error type represents list of errors in retry&lt;/p&gt; &#xA;&lt;h4&gt;func (Error) As&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (e Error) As(target interface{}) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;func (Error) Error&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (e Error) Error() string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Error method return string representation of Error It is an implementation of error interface&lt;/p&gt; &#xA;&lt;h4&gt;func (Error) Is&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (e Error) Is(target error) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;func (Error) Unwrap&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (e Error) Unwrap() error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unwrap the last error for compatible with the &lt;code&gt;errors.Unwrap()&lt;/code&gt; when you need unwrap all erros, you should use &lt;code&gt;WrappedErrors()&lt;/code&gt; instead&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;err := Do(&#xA;&#x9;func() error {&#xA;&#x9;&#x9;return errors.New(&#34;original error&#34;)&#xA;&#x9;},&#xA;&#x9;Attempts(1),&#xA;)&#xA;&#xA;fmt.Println(errors.Unwrap(err)) # &#34;original error&#34; is printed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;added in version 4.2.0&lt;/p&gt; &#xA;&lt;h4&gt;func (Error) WrappedErrors&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (e Error) WrappedErrors() []error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WrappedErrors returns the list of errors that this Error is wrapping. It is an implementation of the &lt;code&gt;errwrap.Wrapper&lt;/code&gt; interface in package &lt;a href=&#34;https://github.com/hashicorp/errwrap&#34;&gt;errwrap&lt;/a&gt; so that &lt;code&gt;retry.Error&lt;/code&gt; can be used with that library.&lt;/p&gt; &#xA;&lt;h4&gt;type OnRetryFunc&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type OnRetryFunc func(n uint, err error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Function signature of OnRetry function n = count of attempts&lt;/p&gt; &#xA;&lt;h4&gt;type Option&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Option func(*Config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Option represents an option for retry.&lt;/p&gt; &#xA;&lt;h4&gt;func Attempts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Attempts(attempts uint) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attempts set count of retry. Setting to 0 will retry until the retried function succeeds. default is 10&lt;/p&gt; &#xA;&lt;h4&gt;func AttemptsForError&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func AttemptsForError(attempts uint, err error) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AttemptsForError sets count of retry in case execution results in given &lt;code&gt;err&lt;/code&gt; Retries for the given &lt;code&gt;err&lt;/code&gt; are also counted against total retries. The retry will stop if any of given retries is exhausted.&lt;/p&gt; &#xA;&lt;p&gt;added in 4.3.0&lt;/p&gt; &#xA;&lt;h4&gt;func Context&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Context(ctx context.Context) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Context allow to set context of retry default are Background context&lt;/p&gt; &#xA;&lt;p&gt;example of immediately cancellation (maybe it isn&#39;t the best example, but it describes behavior enough; I hope)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ctx, cancel := context.WithCancel(context.Background())&#xA;cancel()&#xA;&#xA;retry.Do(&#xA;&#x9;func() error {&#xA;&#x9;&#x9;...&#xA;&#x9;},&#xA;&#x9;retry.Context(ctx),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;func Delay&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Delay(delay time.Duration) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Delay set delay between retry default is 100ms&lt;/p&gt; &#xA;&lt;h4&gt;func DelayType&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func DelayType(delayType DelayTypeFunc) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;DelayType set type of the delay between retries default is BackOff&lt;/p&gt; &#xA;&lt;h4&gt;func LastErrorOnly&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func LastErrorOnly(lastErrorOnly bool) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;return the direct last error that came from the retried function default is false (return wrapped errors with everything)&lt;/p&gt; &#xA;&lt;h4&gt;func MaxDelay&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MaxDelay(maxDelay time.Duration) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MaxDelay set maximum delay between retry does not apply by default&lt;/p&gt; &#xA;&lt;h4&gt;func MaxJitter&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func MaxJitter(maxJitter time.Duration) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;MaxJitter sets the maximum random Jitter between retries for RandomDelay&lt;/p&gt; &#xA;&lt;h4&gt;func OnRetry&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func OnRetry(onRetry OnRetryFunc) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OnRetry function callback are called each retry&lt;/p&gt; &#xA;&lt;p&gt;log each retry example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;retry.Do(&#xA;&#x9;func() error {&#xA;&#x9;&#x9;return errors.New(&#34;some error&#34;)&#xA;&#x9;},&#xA;&#x9;retry.OnRetry(func(n uint, err error) {&#xA;&#x9;&#x9;log.Printf(&#34;#%d: %s\n&#34;, n, err)&#xA;&#x9;}),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;func RetryIf&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func RetryIf(retryIf RetryIfFunc) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;RetryIf controls whether a retry should be attempted after an error (assuming there are any retry attempts remaining)&lt;/p&gt; &#xA;&lt;p&gt;skip retry if special error example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;retry.Do(&#xA;&#x9;func() error {&#xA;&#x9;&#x9;return errors.New(&#34;special error&#34;)&#xA;&#x9;},&#xA;&#x9;retry.RetryIf(func(err error) bool {&#xA;&#x9;&#x9;if err.Error() == &#34;special error&#34; {&#xA;&#x9;&#x9;&#x9;return false&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return true&#xA;&#x9;})&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default RetryIf stops execution if the error is wrapped using &lt;code&gt;retry.Unrecoverable&lt;/code&gt;, so above example may also be shortened to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;retry.Do(&#xA;&#x9;func() error {&#xA;&#x9;&#x9;return retry.Unrecoverable(errors.New(&#34;special error&#34;))&#xA;&#x9;}&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;func WithTimer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func WithTimer(t Timer) Option&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WithTimer provides a way to swap out timer module implementations. This primarily is useful for mocking/testing, where you may not want to explicitly wait for a set duration for retries.&lt;/p&gt; &#xA;&lt;p&gt;example of augmenting time.After with a print statement&lt;/p&gt; &#xA;&lt;p&gt;type struct MyTimer {}&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;func (t *MyTimer) After(d time.Duration) &amp;lt;- chan time.Time {&#xA;    fmt.Print(&#34;Timer called!&#34;)&#xA;    return time.After(d)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;retry.Do(&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    func() error { ... },&#xA;&#x9;   retry.WithTimer(&amp;amp;MyTimer{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;type RetryIfFunc&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type RetryIfFunc func(error) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Function signature of retry if function&lt;/p&gt; &#xA;&lt;h4&gt;type RetryableFunc&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type RetryableFunc func() error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Function signature of retryable function&lt;/p&gt; &#xA;&lt;h4&gt;type Timer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Timer interface {&#xA;&#x9;After(time.Duration) &amp;lt;-chan time.Time&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Timer represents the timer used to track time for a retry.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very much welcome.&lt;/p&gt; &#xA;&lt;h3&gt;Makefile&lt;/h3&gt; &#xA;&lt;p&gt;Makefile provides several handy rules, like README.md &lt;code&gt;generator&lt;/code&gt; , &lt;code&gt;setup&lt;/code&gt; for prepare build/dev environment, &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;cover&lt;/code&gt;, etc...&lt;/p&gt; &#xA;&lt;p&gt;Try &lt;code&gt;make help&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Before pull request&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;maybe you need &lt;code&gt;make setup&lt;/code&gt; in order to setup environment&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;please try:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run tests (&lt;code&gt;make test&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;run linter (&lt;code&gt;make lint&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;if your IDE don&#39;t automaticaly do &lt;code&gt;go fmt&lt;/code&gt;, run &lt;code&gt;go fmt&lt;/code&gt; (&lt;code&gt;make fmt&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;README&lt;/h3&gt; &#xA;&lt;p&gt;README.md are generate from template &lt;a href=&#34;https://raw.githubusercontent.com/avast/retry-go/master/.godocdown.tmpl&#34;&gt;.godocdown.tmpl&lt;/a&gt; and code documentation via &lt;a href=&#34;https://github.com/robertkrimen/godocdown&#34;&gt;godocdown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Never edit README.md direct, because your change will be lost.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>drud/ddev</title>
    <updated>2022-10-26T01:34:39Z</updated>
    <id>tag:github.com,2022-10-26:/drud/ddev</id>
    <link href="https://github.com/drud/ddev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DDEV: a local web development environment system for PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DDEV&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/drud/ddev&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/drud/ddev.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/maintenance/yes/2022.svg?sanitize=true&#34; alt=&#34;project is maintained&#34;&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/drud/ddev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/ddev-logo.svg?sanitize=true&#34; alt=&#34;DDEV Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;DDEV is an open source tool for running local PHP development environments in minutes. Its powerful, flexible per-project environment configurations can be extended, version controlled, and shared. DDEV allows development teams to adopt a consistent Docker workflow without the complexities of bespoke configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Check &lt;a href=&#34;https://ddev.readthedocs.io/&#34;&gt;System Requirements&lt;/a&gt;:&lt;/strong&gt; macOS (Intel and Apple Silicon), Windows 10/11, WSL2, Linux, and &lt;a href=&#34;https://www.gitpod.io&#34;&gt;Gitpod&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/install/&#34;&gt;Docker/Colima and DDEV&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Try a &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/quickstart/&#34;&gt;CMS Quick Start Guide&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you need help, our friendly community provides &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/support&#34;&gt;great support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Partial Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickly create local web development environments based on code repositories, with minimal configuration.&lt;/li&gt; &#xA; &lt;li&gt;Import a database to any of your local environments.&lt;/li&gt; &#xA; &lt;li&gt;Import upload files to match the project (e.g. Drupal sites/default/files or WordPress &lt;code&gt;wp-content/uploads&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Customizable integration with hosting platforms like &lt;a href=&#34;https://platform.sh&#34;&gt;Platform.sh&lt;/a&gt;, &lt;a href=&#34;https://pantheon.io&#34;&gt;Pantheon&lt;/a&gt;, &lt;a href=&#34;https://www.acquia.com&#34;&gt;Acquia&lt;/a&gt; and others.&lt;/li&gt; &#xA; &lt;li&gt;Run commands within the Docker environment using &lt;code&gt;ddev exec&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;View logs from the web and database containers.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;ddev ssh&lt;/code&gt; to explore the Linux environment inside the container.&lt;/li&gt; &#xA; &lt;li&gt;List running projects with &lt;code&gt;ddev list&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Snapshot databases with &lt;code&gt;ddev snapshot&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Temporarily share your development website with others using &lt;code&gt;ddev share&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create custom commands as simple shell scripts.&lt;/li&gt; &#xA; &lt;li&gt;Enjoy effortless, trusted HTTPS support.&lt;/li&gt; &#xA; &lt;li&gt;Extend and customize environments as much (or as little!) as you need to.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run &lt;code&gt;ddev&lt;/code&gt; to see all the &lt;a href=&#34;https://ddev.readthedocs.io/en/stable/users/basics/cli-usage/&#34;&gt;commands&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See “How can I contribute to DDEV?” in the &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/basics/faq/&#34;&gt;FAQ&lt;/a&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/drud/ddev/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Wonderful Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.sh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/Platformsh_Logo_DDEV.jpg&#34; alt=&#34;Platform.sh&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tag1.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/tag1-logo.svg?sanitize=true&#34; alt=&#34;Tag1&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://agaric.coop/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/agaric-logo-stacked.svg?sanitize=true&#34; alt=&#34;Agaric&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://b13.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/b13-logo.png&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gizra.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/gizra-logo.png&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wandoliver&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/oliver-wand.jpeg&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.centarro.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/centarro-logo.png&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.drupaleasy.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/drupaleasy-logo.png&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://redfinsolutions.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/redfin-logo.png&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.macstadium.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/macstadium-logo.png&#34; alt=&#34;MacStadium&#34; width=&#34;100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.lullabot.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/lullabot-lockup-logo.svg?sanitize=true&#34; alt=&#34;Lullabot&#34; width=&#34;150&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://craftcms.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/craft-cms-logo.svg?sanitize=true&#34; alt=&#34;Craft CMS&#34; width=&#34;150&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://undpaul.de&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/undpaul_logo.svg?sanitize=true&#34; alt=&#34;undpaul&#34; width=&#34;150/&#34;&gt;&lt;/a&gt; &lt;a href=&#34;httpsZ://1xinternet.de&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/drud/ddev/master/images/1X_Logo_RGB_Red_4.png&#34; alt=&#34;1XInternet&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tenable/terrascan</title>
    <updated>2022-10-26T01:34:39Z</updated>
    <id>tag:github.com,2022-10-26:/tenable/terrascan</id>
    <link href="https://github.com/tenable/terrascan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Detect compliance and security violations across Infrastructure as Code to mitigate risk before provisioning cloud native infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tenable/runterrascan.io/main/static/images/TerrascanTM_BY_Logo.png&#34; alt=&#34;Terrascan&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tenable/terrascan/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/tenable/terrascan&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tenable/terrascan/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-blue&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tenable/terrascan/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/tenable/terrascan/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=tenable_terrascan&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=tenable_terrascan&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/terrascan/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/aur/terrascan.svg?sanitize=true&#34; alt=&#34;AUR package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/tenable/terrascan&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/tenable/terrascan/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://runterrascan.io/&#34;&gt;&lt;img src=&#34;https://readthedocs.com/projects/tenable-terrascan/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/code_of_conduct.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/tenable/terrascan/total&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Terrascan is a static code analyzer for Infrastructure as Code. Terrascan allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Seamlessly scan infrastructure as code for misconfigurations.&lt;/li&gt; &#xA; &lt;li&gt;Monitor provisioned cloud infrastructure for configuration changes that introduce posture drift, and enables reverting to a secure posture.&lt;/li&gt; &#xA; &lt;li&gt;Detect security vulnerabilities and compliance violations.&lt;/li&gt; &#xA; &lt;li&gt;Mitigate risks before provisioning cloud native infrastructure.&lt;/li&gt; &#xA; &lt;li&gt;Offers flexibility to run locally or integrate with your CI\CD.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To try Terrascan in your browser, see the Terrascan Sandbox &lt;a href=&#34;https://www.tenable.com/terrascan&#34;&gt;https://www.tenable.com/terrascan&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To learn more about Terrascan&#39;s features and capabilities, see the documentation portal: &lt;a href=&#34;https://runterrascan.io&#34;&gt;https://runterrascan.io&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Join Tenable community 👇 &lt;br&gt; &lt;a href=&#34;https://discord.gg/ScUPMzyG3n&#34;&gt; &lt;img src=&#34;http://fig.io/icons/discord-logo-square.png&#34; width=&#34;80px&#34; height=&#34;80px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;500+ Policies for security best practices&lt;/li&gt; &#xA; &lt;li&gt;Scanning of &lt;a href=&#34;https://runterrascan.io/docs/usage/command_line_mode/#scanning-current-directory-containing-terraform-files-for-aws-resources&#34;&gt;Terraform&lt;/a&gt; (HCL2)&lt;/li&gt; &#xA; &lt;li&gt;Scanning of AWS CloudFormation Templates (CFT)&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Scanning of Azure Resource Manager (ARM)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Scanning of &lt;a href=&#34;https://runterrascan.io/docs/usage/command_line_mode/#scanning-for-a-specific-iac-provider&#34;&gt;Kubernetes&lt;/a&gt; (JSON/YAML), &lt;a href=&#34;https://runterrascan.io/docs/usage/command_line_mode/#scanning-a-helm-chart&#34;&gt;Helm&lt;/a&gt; v3, and &lt;a href=&#34;https://runterrascan.io/docs/usage/command_line_mode/#scanning-a-kustomize-chart&#34;&gt;Kustomize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scanning of &lt;a href=&#34;https://runterrascan.io/docs/usage/command_line_mode/#scanning-a-dockerfile&#34;&gt;Dockerfiles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://runterrascan.io/docs/policies/aws/&#34;&gt;AWS&lt;/a&gt;, &lt;a href=&#34;https://runterrascan.io/docs/policies/azure/&#34;&gt;Azure&lt;/a&gt;, &lt;a href=&#34;https://runterrascan.io/docs/policies/gcp/&#34;&gt;GCP&lt;/a&gt;, &lt;a href=&#34;https://runterrascan.io/docs/policies/k8s/&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&#34;https://runterrascan.io/docs/policies/docker/&#34;&gt;Dockerfile&lt;/a&gt;, and &lt;a href=&#34;https://runterrascan.io/docs/policies/github/&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integrates with docker image vulnerability scanning for AWS, Azure, GCP, Harbor container registries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/#scan&#34;&gt;Scan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/#integrate&#34;&gt;Integrate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Step 1: Install&lt;/h3&gt; &#xA;&lt;p&gt;Terrascan supports multiple ways to install and is also available as a Docker image. See Terrascan&#39;s &lt;a href=&#34;https://github.com/tenable/terrascan/releases&#34;&gt;releases&lt;/a&gt; page for the latest version of builds in all supported platforms. Select the correct binary for your platform.&lt;/p&gt; &#xA;&lt;h4&gt;Install as a native executable&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -L &#34;$(curl -s https://api.github.com/repos/tenable/terrascan/releases/latest | grep -o -E &#34;https://.+?_Darwin_x86_64.tar.gz&#34;)&#34; &amp;gt; terrascan.tar.gz&#xA;$ tar -xf terrascan.tar.gz terrascan &amp;amp;&amp;amp; rm terrascan.tar.gz&#xA;$ install terrascan /usr/local/bin &amp;amp;&amp;amp; rm terrascan&#xA;$ terrascan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install on ArchLinux / Manjaro via &lt;code&gt;AUR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;ArchLinux and Manjaro users can install by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yay -S terrascan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install via &lt;code&gt;brew&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; users can install by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install terrascan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker image&lt;/h4&gt; &#xA;&lt;p&gt;Terrascan is also available as a Docker image and can be used as follows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run tenable/terrascan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://runterrascan.io/docs/getting-started/&#34;&gt;documentation&lt;/a&gt; for information.&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: Scan&lt;/h3&gt; &#xA;&lt;p&gt;To scan your code for security issues you can run the following (defaults to scanning Terraform).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ terrascan scan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Terrascan will exit with an error code if any errors or violations are found during a scan.&lt;/p&gt; &#xA;&lt;h4&gt;List of possible Exit Codes&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Scenario&lt;/th&gt; &#xA;   &lt;th&gt;Exit Code&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scan summary has errors and violations&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scan summary has errors but no violations&lt;/td&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scan summary has violations but no errors&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scan summary has no violations or errors&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scan command errors out due to invalid inputs&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Step 3: Integrate with CI\CD&lt;/h3&gt; &#xA;&lt;p&gt;Terrascan can be integrated into CI/CD pipelines to enforce security best practices. Please refer to our &lt;a href=&#34;https://runterrascan.io/docs/integrations/&#34;&gt;documentation to integrate with your pipeline&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Terrascan Commands&lt;/h2&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;terrascan&lt;/code&gt; command with the following options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ terrascan&#xA;Terrascan&#xA;&#xA;Usage:&#xA;  terrascan [command]&#xA;&#xA;Available Commands:&#xA;  help        Help about any command&#xA;  init        Initialize Terrascan&#xA;  scan        Detect compliance and security violations across Infrastructure as Code.&#xA;  server      Run Terrascan as an API server&#xA;  version     Terrascan version&#xA;&#xA;Flags:&#xA;  -c, --config-path string   config file path&#xA;  -h, --help                 help for terrascan&#xA;  -l, --log-level string     log level (debug, info, warn, error, panic, fatal) (default &#34;info&#34;)&#xA;  -x, --log-type string      log output type (console, json) (default &#34;console&#34;)&#xA;  -o, --output string        output type (human, json, yaml, xml) (default &#34;human&#34;)&#xA;&#xA;Use &#34;terrascan [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Policies&lt;/h2&gt; &#xA;&lt;p&gt;Terrascan policies are written using the &lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/policy-language/&#34;&gt;Rego policy language&lt;/a&gt;. Every rego includes a JSON &#34;rule&#34; file which defines metadata for the policy. By default, Terrascan downloads policies from Terrascan repositories while scanning for the first time. However, if you want to download the latest policies, you need to run the Initialization process. See &lt;a href=&#34;https://runterrascan.io/docs/usage/command_line_mode/&#34;&gt;Usage&lt;/a&gt; for information about the Initialization process.&lt;/p&gt; &#xA;&lt;p&gt;Note: The scan command will implicitly run the initialization process if there are no policies found.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Image Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;--find-vuln&lt;/code&gt; flag to collect vulnerabilities as reported in its registry as part of Terrascan&#39;s output. Currently Terrascan supports Elastic Container Registry (ECR), Azure Container Registry, Google Container Registry, and Google Artifact Registry.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--find-vuln&lt;/code&gt; flag can be used when scanning IaC files as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ terrascan scan -i &amp;lt;IaC provider&amp;gt; --find-vuln&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information and explanation of how to setup your environment to authenticate with the registrie&#39;s APIs see the &lt;a href=&#34;https://runterrascan.io/docs/usage/command_line_mode/&#34;&gt;usage&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Customizing scans&lt;/h2&gt; &#xA;&lt;p&gt;By default, Terrascan scans your entire configuration against all policies. However, Terrascan supports granular configuration of policies and resources.&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://runterrascan.io/docs/usage/in-file_instrumentation/&#34;&gt;in-file instrumentation&lt;/a&gt; and &lt;a href=&#34;https://runterrascan.io/docs/usage/config_options/&#34;&gt;the config file&lt;/a&gt; on our documentation site.&lt;/p&gt; &#xA;&lt;p&gt;For now, some quick tips:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/#How_to_exclude_a_policy_while_scanning_a_resource&#34;&gt;Exclude a particular policy for a specific resource.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/#_How_to_include_or_exclude_specific_policies_or_resources_from_being_scanned&#34;&gt;Manually configure policies to be suppressed or applied globally from a scan across all resources or, for just a particular resource.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to exclude a policy while scanning a resource&lt;/h3&gt; &#xA;&lt;p&gt;You can configure Terrascan to skip a particular policy (rule) while scanning a resource. Follow these steps depending on your platform:&lt;/p&gt; &#xA;&lt;h4&gt;Terraform&lt;/h4&gt; &#xA;&lt;p&gt;Use Terraform scripts to configure Terrascan to skip rules by inserting a comment with the phrase &lt;code&gt;&#34;ts:skip=&amp;lt;RULENAME&amp;gt;&amp;lt;SKIP_REASON&amp;gt;&#34;&lt;/code&gt;. The comment should be included inside the resource as shown in the example below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/docs/img/tf_skip_rule.png&#34; alt=&#34;tf&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Kubernetes&lt;/h4&gt; &#xA;&lt;p&gt;In Kubernetes yamls, you can configure Terrascan to skip policies by adding an annotation as seen in the snippet below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/docs/img/skiprules.png&#34; alt=&#34;k8s&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to include or exclude specific policies or resources from being scanned&lt;/h3&gt; &#xA;&lt;p&gt;Use the Terrascan config file to manually select the policies which should be included or excluded from the entire scan. This is suitable for edge use cases. Use the &#34;in-file&#34; suppression option to specify resources that should be excluded from being tested against selected policies. This ensures that the policies are skipped only for particular resources, rather than all of the resources.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/74685902/105115887-83e2f380-5a7e-11eb-82b8-a1d18c83a405.png&#34; alt=&#34;config&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sample scan output&lt;/h3&gt; &#xA;&lt;p&gt;Terrascan&#39;s default output is a list of violations present in the scanned IaC. A sample output:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/74685902/105115731-32d2ff80-5a7e-11eb-93b0-2f0620eb1295.png&#34; alt=&#34;Screenshot 2021-01-19 at 10 52 47 PM&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building Terrascan&lt;/h2&gt; &#xA;&lt;p&gt;Terrascan can be built locally. This is helpful if you want to be on the latest version or when developing Terrascan. &lt;a href=&#34;https://gcc.gnu.org/install/&#34;&gt;gcc&lt;/a&gt; and &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go&lt;/a&gt; 1.19 or above are required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone git@github.com:tenable/terrascan.git&#xA;$ cd terrascan&#xA;$ make build&#xA;$ ./bin/terrascan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To build your own docker, refer to this example (Alpine Linux):&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;FROM golang:alpine AS build-env&#xA;&#xA;RUN apk add --update git&#xA;&#xA;RUN git clone https://github.com/tenable/terrascan &amp;amp;&amp;amp; cd terrascan \&#xA;  &amp;amp;&amp;amp; CGO_ENABLED=0 GO111MODULE=on go build -o /go/bin/terrascan cmd/terrascan/main.go&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Developing Terrascan&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about developing and contributing to Terrascan, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;We believe having an open and inclusive community benefits all of us. Please note that this project is released with a &lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/code_of_conduct.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt;. By participating in this project you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Terrascan is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/tenable/terrascan/master/LICENSE&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Stargazers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tenable/terrascan/stargazers&#34;&gt;&lt;img src=&#34;https://reporoster.com/stars/tenable/terrascan&#34; alt=&#34;Stargazers @tenable/terrascan&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Forkers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tenable/terrascan/network/members&#34;&gt;&lt;img src=&#34;https://reporoster.com/forks/tenable/terrascan&#34; alt=&#34;Forkers @tenable/terrascan&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>