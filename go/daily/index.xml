<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:36:58Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>writefreely/writefreely</title>
    <updated>2022-11-13T01:36:58Z</updated>
    <id>tag:github.com,2022-11-13:/writefreely/writefreely</id>
    <link href="https://github.com/writefreely/writefreely" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A clean, Markdown-based publishing platform made for writers. Write together and build a community.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://writefreely.org&#34;&gt;&lt;img src=&#34;https://writefreely.org/img/writefreely.svg?sanitize=true&#34; width=&#34;350px&#34; alt=&#34;WriteFreely&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/writefreely/writefreely/releases/&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/writefreely/writefreely.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/writeas/writefreely&#34;&gt; &lt;img src=&#34;https://travis-ci.org/writefreely/writefreely.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/writefreely/writefreely/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/writefreely/writefreely/total.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/writefreely/writefreely&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/writefreely/writefreely&#34; alt=&#34;Go Report Card&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/writeas/writefreely/&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/writeas/writefreely.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &amp;nbsp; &#xA;&lt;p&gt;WriteFreely is a clean, minimalist publishing platform made for writers. Start a blog, share knowledge within your organization, or build a community around the shared act of writing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://writefreely.org/img/screens/pencil-reader.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://write.as/new&#34;&gt;Try the writing experience&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://writefreely.org/instances&#34;&gt;Find an instance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Made for writing&lt;/h3&gt; &#xA;&lt;p&gt;Built on a plain, auto-saving editor, WriteFreely gives you a distraction-free writing environment. Once published, your words are front and center, and easy to read.&lt;/p&gt; &#xA;&lt;h3&gt;A connected community&lt;/h3&gt; &#xA;&lt;p&gt;Start writing together, publicly or privately. Connect with other communities, whether running WriteFreely, &lt;a href=&#34;https://joinplu.me/&#34;&gt;Plume&lt;/a&gt;, or other ActivityPub-powered software. And bring members on board from your existing platforms, thanks to our OAuth 2.0 support.&lt;/p&gt; &#xA;&lt;h3&gt;Intuitive organization&lt;/h3&gt; &#xA;&lt;p&gt;Categorize articles &lt;a href=&#34;https://writefreely.org/docs/latest/writer/hashtags&#34;&gt;with hashtags&lt;/a&gt;, and create static pages from normal posts by &lt;a href=&#34;https://writefreely.org/docs/latest/writer/static&#34;&gt;&lt;em&gt;pinning&lt;/em&gt; them&lt;/a&gt; to your blog. Create draft posts and publish to multiple blogs from one account.&lt;/p&gt; &#xA;&lt;h3&gt;International&lt;/h3&gt; &#xA;&lt;p&gt;Blog elements are localized in 20+ languages, and WriteFreely includes first-class support for non-Latin and right-to-left (RTL) script languages.&lt;/p&gt; &#xA;&lt;h3&gt;Private by default&lt;/h3&gt; &#xA;&lt;p&gt;WriteFreely collects minimal data, and never publicizes more than a writer consents to. Writers can seamlessly create multiple blogs from a single account for different pen names or purposes without publicly revealing their association.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://write.as/writefreely&#34;&gt;&lt;img src=&#34;https://writefreely.org/img/writeas-readme.png&#34; height=&#34;32px&#34; alt=&#34;Write.as&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The quickest way to deploy WriteFreely is with &lt;a href=&#34;https://write.as/writefreely&#34;&gt;Write.as&lt;/a&gt;, a hosted service from the team behind WriteFreely. You&#39;ll get fully-managed installation, backup, upgrades, and maintenance ‚Äî and directly fund our free software work ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://write.as/writefreely&#34;&gt;&lt;strong&gt;Learn more on Write.as&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;WriteFreely deploys as a static binary on any platform and architecture that Go supports. Just use our built-in SQLite support, or add a MySQL database, and you&#39;ll be up and running!&lt;/p&gt; &#xA;&lt;p&gt;For common platforms, start with our &lt;a href=&#34;https://github.com/writefreely/writefreely/releases/&#34;&gt;pre-built binaries&lt;/a&gt; and head over to our &lt;a href=&#34;https://writefreely.org/start&#34;&gt;installation guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Packages&lt;/h3&gt; &#xA;&lt;p&gt;You can also find WriteFreely in these package repositories, thanks to our wonderful community!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/writefreely/&#34;&gt;Arch User Repository&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read our full &lt;a href=&#34;https://writefreely.org/docs&#34;&gt;documentation on WriteFreely.org&lt;/a&gt; ‚ÄîÔ∏è and help us improve by contributing to the &lt;a href=&#34;https://github.com/writefreely/documentation&#34;&gt;writefreely/documentation&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Start hacking on WriteFreely with our &lt;a href=&#34;https://writefreely.org/docs/latest/developer/setup&#34;&gt;developer setup guide&lt;/a&gt;. For Docker support, see our &lt;a href=&#34;https://writefreely.org/docs/latest/admin/docker&#34;&gt;Docker guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We gladly welcome contributions to WriteFreely, whether in the form of &lt;a href=&#34;https://github.com/writefreely/writefreely/raw/master/CONTRIBUTING.md#contributing-to-writefreely&#34;&gt;code&lt;/a&gt;, &lt;a href=&#34;https://github.com/writefreely/writefreely/issues/new?template=bug_report.md&#34;&gt;bug reports&lt;/a&gt;, &lt;a href=&#34;https://discuss.write.as/c/feedback/feature-requests&#34;&gt;feature requests&lt;/a&gt;, &lt;a href=&#34;https://poeditor.com/join/project/TIZ6HFRFdE&#34;&gt;translations&lt;/a&gt;, or &lt;a href=&#34;https://github.com/writefreely/documentation&#34;&gt;documentation&lt;/a&gt; improvements.&lt;/p&gt; &#xA;&lt;p&gt;Before contributing anything, please read our &lt;a href=&#34;https://github.com/writefreely/writefreely/raw/master/CONTRIBUTING.md#contributing-to-writefreely&#34;&gt;Contributing Guide&lt;/a&gt;. It describes the correct channels for submitting contributions and any potential requirements.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright ¬© 2018-2022 &lt;a href=&#34;https://musing.studio&#34;&gt;Musing Studio LLC&lt;/a&gt; and contributing authors. Licensed under the &lt;a href=&#34;https://github.com/writefreely/writefreely/raw/develop/LICENSE&#34;&gt;AGPL&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-sonic/sonic</title>
    <updated>2022-11-13T01:36:58Z</updated>
    <id>tag:github.com,2022-11-13:/go-sonic/sonic</id>
    <link href="https://github.com/go-sonic/sonic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Sonic is a blogging platform developed by Go. Simple and powerful&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/go-sonic/resources/master/logo/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;Sonic &lt;/b&gt; [Ààs…ín…™k] ,Sonic is a Go Blogging Platform. Simple and Powerful.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/go-sonic/sonic/releases&#34;&gt;&lt;img alt=&#34;GitHub release&#34; src=&#34;https://img.shields.io/github/release/go-sonic/sonic.svg?style=flat-square&amp;amp;include_prereleases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-sonic/sonic/releases&#34;&gt;&lt;img alt=&#34;GitHub All Releases&#34; src=&#34;https://img.shields.io/github/downloads/go-sonic/sonic/total.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/go-sonic/sonic&#34;&gt;&lt;img alt=&#34;Docker pulls&#34; src=&#34;https://img.shields.io/docker/pulls/go-sonic/sonic?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-sonic/sonic/commits&#34;&gt;&lt;img alt=&#34;GitHub last commit&#34; src=&#34;https://img.shields.io/github/last-commit/go-sonic/sonic.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-sonic/sonic/actions&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/workflow/status/go-sonic/sonic/Sonic%20CI?style=flat-square&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://t.me/go_sonic&#34;&gt;Telegram Channel&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/go-sonic/sonic/master/doc/README_ZH.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Sonic means as fast as sound speed. Like its name, sonic is a high-performance blog system developed using golang&lt;/p&gt; &#xA;&lt;p&gt;Thanks &lt;a href=&#34;https://github.com/halo-dev&#34;&gt;Halo&lt;/a&gt; project team,this project is inspired by Halo. Front end project fork from Halo&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support multiple types of databases: SQLite„ÄÅMySQL(TODO: PostgreSQL)&lt;/li&gt; &#xA; &lt;li&gt;Small: The installation file is only 10mb size&lt;/li&gt; &#xA; &lt;li&gt;High-performance: Post details page can withstand 900qps(Enviroment: Intel Xeon Platinum 8260 4C 8G ,SQLite3)&lt;/li&gt; &#xA; &lt;li&gt;Support changing theme&lt;/li&gt; &#xA; &lt;li&gt;Support Linux„ÄÅWindows„ÄÅMac OS. And Support x86„ÄÅx64„ÄÅArm„ÄÅArm64„ÄÅMIPS&lt;/li&gt; &#xA; &lt;li&gt;Object storage(MINIO„ÄÅGoogle Cloud„ÄÅAWS„ÄÅAliYun)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üéä Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/go-sonic/default-theme-anatole/raw/master/screenshot.png&#34; alt=&#34;Default Theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/go-sonic/resources/raw/master/console-screenshot.png&#34; alt=&#34;Console&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üß∞ How to install&lt;/h2&gt; &#xA;&lt;h3&gt;Download the latest installation package&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please pay attention to the operating system and instruction set&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/go-sonic/sonic/releases/download/v1.0.0/sonic-linux-64.zip -O sonic.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Decompression&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;unzip sonic.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Launch&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd sonic&#xA;./sonic -config conf/config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Initialization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;The default port is 8080&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://ip:port/admin#install&#34;&gt;http://ip:port/admin#install&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, you can access sonic through the browser.&lt;/p&gt; &#xA;&lt;p&gt;The URL of the admin console is &lt;a href=&#34;http://ip:port/admin&#34;&gt;http://ip:port/admin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; i18n&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; PostgreSQL&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better error handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Plugin(base on Wasm)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Use new web framework(&lt;a href=&#34;https://github.com/cloudwego/hertz&#34;&gt;Hertz&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìÑ License&lt;/h2&gt; &#xA;&lt;p&gt;Source code in &lt;code&gt;sonic&lt;/code&gt; is available under the &lt;a href=&#34;https://raw.githubusercontent.com/go-sonic/sonic/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/hcl</title>
    <updated>2022-11-13T01:36:58Z</updated>
    <id>tag:github.com,2022-11-13:/hashicorp/hcl</id>
    <link href="https://github.com/hashicorp/hcl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HCL is the HashiCorp configuration language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HCL&lt;/h1&gt; &#xA;&lt;p&gt;HCL is a toolkit for creating structured configuration languages that are both human- and machine-friendly, for use with command-line tools. Although intended to be generally useful, it is primarily targeted towards devops tools, servers, etc.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is major version 2 of HCL, whose Go API is incompatible with major version 1. Both versions are available for selection in Go Modules projects. HCL 2 &lt;em&gt;cannot&lt;/em&gt; be imported from Go projects that are not using Go Modules. For more information, see &lt;a href=&#34;https://github.com/hashicorp/hcl/wiki/Version-Selection&#34;&gt;our version selection guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;HCL has both a &lt;em&gt;native syntax&lt;/em&gt;, intended to be pleasant to read and write for humans, and a JSON-based variant that is easier for machines to generate and parse.&lt;/p&gt; &#xA;&lt;p&gt;The HCL native syntax is inspired by &lt;a href=&#34;https://github.com/vstakhov/libucl&#34;&gt;libucl&lt;/a&gt;, &lt;a href=&#34;http://nginx.org/en/docs/beginners_guide.html#conf_structure&#34;&gt;nginx configuration&lt;/a&gt;, and others.&lt;/p&gt; &#xA;&lt;p&gt;It includes an expression syntax that allows basic inline computation and, with support from the calling application, use of variables and functions for more dynamic configuration languages.&lt;/p&gt; &#xA;&lt;p&gt;HCL provides a set of constructs that can be used by a calling application to construct a configuration language. The application defines which attribute names and nested block types are expected, and HCL parses the configuration file, verifies that it conforms to the expected structure, and returns high-level objects that the application can use for further processing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/hashicorp/hcl/v2/hclsimple&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;IOMode  string        `hcl:&#34;io_mode&#34;`&#xA;&#x9;Service ServiceConfig `hcl:&#34;service,block&#34;`&#xA;}&#xA;&#xA;type ServiceConfig struct {&#xA;&#x9;Protocol   string          `hcl:&#34;protocol,label&#34;`&#xA;&#x9;Type       string          `hcl:&#34;type,label&#34;`&#xA;&#x9;ListenAddr string          `hcl:&#34;listen_addr&#34;`&#xA;&#x9;Processes  []ProcessConfig `hcl:&#34;process,block&#34;`&#xA;}&#xA;&#xA;type ProcessConfig struct {&#xA;&#x9;Type    string   `hcl:&#34;type,label&#34;`&#xA;&#x9;Command []string `hcl:&#34;command&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;var config Config&#xA;&#x9;err := hclsimple.DecodeFile(&#34;config.hcl&#34;, nil, &amp;amp;config)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;Failed to load configuration: %s&#34;, err)&#xA;&#x9;}&#xA;&#x9;log.Printf(&#34;Configuration is %#v&#34;, config)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A lower-level API is available for applications that need more control over the parsing, decoding, and evaluation of configuration. For more information, see &lt;a href=&#34;https://pkg.go.dev/github.com/hashicorp/hcl/v2&#34;&gt;the package documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Newcomers to HCL often ask: why not JSON, YAML, etc?&lt;/p&gt; &#xA;&lt;p&gt;Whereas JSON and YAML are formats for serializing data structures, HCL is a syntax and API specifically designed for building structured configuration formats.&lt;/p&gt; &#xA;&lt;p&gt;HCL attempts to strike a compromise between generic serialization formats such as JSON and configuration formats built around full programming languages such as Ruby. HCL syntax is designed to be easily read and written by humans, and allows &lt;em&gt;declarative&lt;/em&gt; logic to permit its use in more complex applications.&lt;/p&gt; &#xA;&lt;p&gt;HCL is intended as a base syntax for configuration formats built around key-value pairs and hierarchical blocks whose structure is well-defined by the calling application, and this definition of the configuration structure allows for better error messages and more convenient definition within the calling application.&lt;/p&gt; &#xA;&lt;p&gt;It can&#39;t be denied that JSON is very convenient as a &lt;em&gt;lingua franca&lt;/em&gt; for interoperability between different pieces of software. Because of this, HCL defines a common configuration model that can be parsed from either its native syntax or from a well-defined equivalent JSON structure. This allows configuration to be provided as a mixture of human-authored configuration files in the native syntax and machine-generated files in JSON.&lt;/p&gt; &#xA;&lt;h2&gt;Information Model and Syntax&lt;/h2&gt; &#xA;&lt;p&gt;HCL is built around two primary concepts: &lt;em&gt;attributes&lt;/em&gt; and &lt;em&gt;blocks&lt;/em&gt;. In native syntax, a configuration file for a hypothetical application might look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;io_mode = &#34;async&#34;&#xA;&#xA;service &#34;http&#34; &#34;web_proxy&#34; {&#xA;  listen_addr = &#34;127.0.0.1:8080&#34;&#xA;  &#xA;  process &#34;main&#34; {&#xA;    command = [&#34;/usr/local/bin/awesome-app&#34;, &#34;server&#34;]&#xA;  }&#xA;&#xA;  process &#34;mgmt&#34; {&#xA;    command = [&#34;/usr/local/bin/awesome-app&#34;, &#34;mgmt&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JSON equivalent of this configuration is the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;io_mode&#34;: &#34;async&#34;,&#xA;  &#34;service&#34;: {&#xA;    &#34;http&#34;: {&#xA;      &#34;web_proxy&#34;: {&#xA;        &#34;listen_addr&#34;: &#34;127.0.0.1:8080&#34;,&#xA;        &#34;process&#34;: {&#xA;          &#34;main&#34;: {&#xA;            &#34;command&#34;: [&#34;/usr/local/bin/awesome-app&#34;, &#34;server&#34;]&#xA;          },&#xA;          &#34;mgmt&#34;: {&#xA;            &#34;command&#34;: [&#34;/usr/local/bin/awesome-app&#34;, &#34;mgmt&#34;]&#xA;          },&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Regardless of which syntax is used, the API within the calling application is the same. It can either work directly with the low-level attributes and blocks, for more advanced use-cases, or it can use one of the &lt;em&gt;decoder&lt;/em&gt; packages to declaratively extract into either Go structs or dynamic value structures.&lt;/p&gt; &#xA;&lt;p&gt;Attribute values can be expressions as well as just literal values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hcl&#34;&gt;# Arithmetic with literals and application-provided variables&#xA;sum = 1 + addend&#xA;&#xA;# String interpolation and templates&#xA;message = &#34;Hello, ${name}!&#34;&#xA;&#xA;# Application-provided functions&#xA;shouty_message = upper(message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although JSON syntax doesn&#39;t permit direct use of expressions, the interpolation syntax allows use of arbitrary expressions within JSON strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;sum&#34;: &#34;${1 + addend}&#34;,&#xA;  &#34;message&#34;: &#34;Hello, ${name}!&#34;,&#xA;  &#34;shouty_message&#34;: &#34;${upper(message)}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see the detailed specifications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/hcl/main/spec.md&#34;&gt;Syntax-agnostic Information Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/hcl/main/hclsyntax/spec.md&#34;&gt;HCL Native Syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/hcl/main/json/spec.md&#34;&gt;JSON Representation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changes in 2.0&lt;/h2&gt; &#xA;&lt;p&gt;Version 2.0 of HCL combines the features of HCL 1.0 with those of the interpolation language HIL to produce a single configuration language that supports arbitrary expressions.&lt;/p&gt; &#xA;&lt;p&gt;This new version has a completely new parser and Go API, with no direct migration path. Although the syntax is similar, the implementation takes some very different approaches to improve on some &#34;rough edges&#34; that existed with the original implementation and to allow for more robust error handling.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s possible to import both HCL 1 and HCL 2 into the same program using Go&#39;s &lt;em&gt;semantic import versioning&lt;/em&gt; mechanism:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    hcl1 &#34;github.com/hashicorp/hcl&#34;&#xA;    hcl2 &#34;github.com/hashicorp/hcl/v2&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;HCL was heavily inspired by &lt;a href=&#34;https://github.com/vstakhov/libucl&#34;&gt;libucl&lt;/a&gt;, by &lt;a href=&#34;https://github.com/vstakhov&#34;&gt;Vsevolod Stakhov&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;HCL and HIL originate in &lt;a href=&#34;https://terraform.io/&#34;&gt;HashiCorp Terraform&lt;/a&gt;, with the original parsers for each written by &lt;a href=&#34;https://github.com/mitchellh&#34;&gt;Mitchell Hashimoto&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The original HCL parser was ported to pure Go (from yacc) by &lt;a href=&#34;https://github.com/fatih&#34;&gt;Fatih Arslan&lt;/a&gt;. The structure-related portions of the new native syntax parser build on that work.&lt;/p&gt; &#xA;&lt;p&gt;The original HIL parser was ported to pure Go (from yacc) by &lt;a href=&#34;https://github.com/apparentlymart&#34;&gt;Martin Atkins&lt;/a&gt;. The expression-related portions of the new native syntax parser build on that work.&lt;/p&gt; &#xA;&lt;p&gt;HCL 2, which merged the original HCL and HIL languages into this single new language, builds on design and prototyping work by &lt;a href=&#34;https://github.com/apparentlymart&#34;&gt;Martin Atkins&lt;/a&gt; in &lt;a href=&#34;https://github.com/zclconf/go-zcl&#34;&gt;zcl&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>