<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-03T01:31:17Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eclipse/paho.mqtt.golang</title>
    <updated>2023-09-03T01:31:17Z</updated>
    <id>tag:github.com,2023-09-03:/eclipse/paho.mqtt.golang</id>
    <link href="https://github.com/eclipse/paho.mqtt.golang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/eclipse/paho.mqtt.golang&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/eclipse/paho.mqtt.golang&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/eclipse/paho.mqtt.golang&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/eclipse/paho.mqtt.golang&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Eclipse Paho MQTT Go client&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the source code for the &lt;a href=&#34;https://eclipse.org/paho&#34;&gt;Eclipse Paho&lt;/a&gt; MQTT 3.1/3.11 Go client library.&lt;/p&gt; &#xA;&lt;p&gt;This code builds a library which enable applications to connect to an &lt;a href=&#34;https://mqtt.org&#34;&gt;MQTT&lt;/a&gt; broker to publish messages, and to subscribe to topics and receive published messages.&lt;/p&gt; &#xA;&lt;p&gt;This library supports a fully asynchronous mode of operation.&lt;/p&gt; &#xA;&lt;p&gt;A client supporting MQTT V5 is &lt;a href=&#34;https://github.com/eclipse/paho.golang&#34;&gt;also available&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and Build&lt;/h2&gt; &#xA;&lt;p&gt;The process depends upon whether you are using &lt;a href=&#34;https://golang.org/ref/mod&#34;&gt;modules&lt;/a&gt; (recommended) or &lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Modules&lt;/h4&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;modules&lt;/a&gt; then &lt;code&gt;import &#34;github.com/eclipse/paho.mqtt.golang&#34;&lt;/code&gt; and start using it. The necessary packages will be download automatically when you run &lt;code&gt;go build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the latest release will be downloaded and changes may have been made since the release. If you have encountered an issue, or wish to try the latest code for another reason, then run &lt;code&gt;go get github.com/eclipse/paho.mqtt.golang@master&lt;/code&gt; to get the latest commit.&lt;/p&gt; &#xA;&lt;h4&gt;GOPATH&lt;/h4&gt; &#xA;&lt;p&gt;Installation is as easy as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/eclipse/paho.mqtt.golang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The client depends on Google&#39;s &lt;a href=&#34;https://godoc.org/golang.org/x/net/proxy&#34;&gt;proxy&lt;/a&gt; package and the &lt;a href=&#34;https://godoc.org/github.com/gorilla/websocket&#34;&gt;websockets&lt;/a&gt; package, also easily installed with the commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/gorilla/websocket&#xA;go get golang.org/x/net/proxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage and API&lt;/h2&gt; &#xA;&lt;p&gt;Detailed API documentation is available by using to godoc tool, or can be browsed online using the &lt;a href=&#34;https://pkg.go.dev/github.com/eclipse/paho.mqtt.golang&#34;&gt;pkg.go.dev&lt;/a&gt; service.&lt;/p&gt; &#xA;&lt;p&gt;Samples are available in the &lt;code&gt;cmd&lt;/code&gt; directory for reference.&lt;/p&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;p&gt;The library also supports using MQTT over websockets by using the &lt;code&gt;ws://&lt;/code&gt; (unsecure) or &lt;code&gt;wss://&lt;/code&gt; (secure) prefix in the URI. If the client is running behind a corporate http/https proxy then the following environment variables &lt;code&gt;HTTP_PROXY&lt;/code&gt;, &lt;code&gt;HTTPS_PROXY&lt;/code&gt; and &lt;code&gt;NO_PROXY&lt;/code&gt; are taken into account when establishing the connection.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you are new to MQTT and your application is not working as expected reviewing the &lt;a href=&#34;https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html&#34;&gt;MQTT specification&lt;/a&gt;, which this library implements, is a good first step. &lt;a href=&#34;https://mqtt.org&#34;&gt;MQTT.org&lt;/a&gt; has some &lt;a href=&#34;https://mqtt.org/getting-started/&#34;&gt;good resources&lt;/a&gt; that answer many common questions.&lt;/p&gt; &#xA;&lt;h3&gt;Error Handling&lt;/h3&gt; &#xA;&lt;p&gt;The asynchronous nature of this library makes it easy to forget to check for errors. Consider using a go routine to log these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;t := client.Publish(&#34;topic&#34;, qos, retained, msg)&#xA;go func() {&#xA;    _ = t.Wait() // Can also use &#39;&amp;lt;-t.Done()&#39; in releases &amp;gt; 1.2.0&#xA;    if t.Error() != nil {&#xA;        log.Error(t.Error()) // Use your preferred logging technique (or just fmt.Printf)&#xA;    }&#xA;}()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;If you are encountering issues then enabling logging, both within this library and on your broker, is a good way to begin troubleshooting. This library can produce various levels of log by assigning the logging endpoints, ERROR, CRITICAL, WARN and DEBUG. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;mqtt.ERROR = log.New(os.Stdout, &#34;[ERROR] &#34;, 0)&#xA;&#x9;mqtt.CRITICAL = log.New(os.Stdout, &#34;[CRIT] &#34;, 0)&#xA;&#x9;mqtt.WARN = log.New(os.Stdout, &#34;[WARN]  &#34;, 0)&#xA;&#x9;mqtt.DEBUG = log.New(os.Stdout, &#34;[DEBUG] &#34;, 0)&#xA;&#xA;&#x9;// Connect, Subscribe, Publish etc..&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common Problems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Seemingly random disconnections may be caused by another client connecting to the broker with the same client identifier; this is as per the &lt;a href=&#34;https://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc384800405&#34;&gt;spec&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unless ordered delivery of messages is essential (and you have configured your broker to support this e.g. &lt;code&gt;max_inflight_messages=1&lt;/code&gt; in mosquitto) then set &lt;code&gt;ClientOptions.SetOrderMatters(false)&lt;/code&gt;. Doing so will avoid the below issue (deadlocks due to blocking message handlers).&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;MessageHandler&lt;/code&gt; (called when a new message is received) must not block (unless &lt;code&gt;ClientOptions.SetOrderMatters(false)&lt;/code&gt; set). If you wish to perform a long-running task, or publish a message, then please use a go routine (blocking in the handler is a common cause of unexpected &lt;code&gt;pingresp not received, disconnecting&lt;/code&gt; errors).&lt;/li&gt; &#xA; &lt;li&gt;When QOS1+ subscriptions have been created previously and you connect with &lt;code&gt;CleanSession&lt;/code&gt; set to false it is possible that the broker will deliver retained messages before &lt;code&gt;Subscribe&lt;/code&gt; can be called. To process these messages either configure a handler with &lt;code&gt;AddRoute&lt;/code&gt; or set a &lt;code&gt;DefaultPublishHandler&lt;/code&gt;. If there is no handler (or &lt;code&gt;DefaultPublishHandler&lt;/code&gt;) then inbound messages will not be acknowledged. Adding a handler (even if it&#39;s &lt;code&gt;opts.SetDefaultPublishHandler(func(mqtt.Client, mqtt.Message) {})&lt;/code&gt;) is highly recommended to avoid inadvertently hitting inflight message limits.&lt;/li&gt; &#xA; &lt;li&gt;Loss of network connectivity may not be detected immediately. If this is an issue then consider setting &lt;code&gt;ClientOptions.KeepAlive&lt;/code&gt; (sends regular messages to check the link is active).&lt;/li&gt; &#xA; &lt;li&gt;Reusing a &lt;code&gt;Client&lt;/code&gt; is not completely safe. After calling &lt;code&gt;Disconnect&lt;/code&gt; please create a new Client (&lt;code&gt;NewClient()&lt;/code&gt;) rather than attempting to reuse the existing one (note that features such as &lt;code&gt;SetAutoReconnect&lt;/code&gt; mean this is rarely necessary).&lt;/li&gt; &#xA; &lt;li&gt;Brokers offer many configuration options; some settings may lead to unexpected results.&lt;/li&gt; &#xA; &lt;li&gt;Publish tokens will complete if the connection is lost and re-established using the default options.SetAutoReconnect(true) functionality (token.Error() will return nil). Attempts will be made to re-deliver the message but there is currently no easy way know when such messages are delivered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If using Mosquitto then there are a range of fairly common issues:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;listener&lt;/code&gt; - By default &lt;a href=&#34;https://mosquitto.org/documentation/migrating-to-2-0/&#34;&gt;Mosquitto v2+&lt;/a&gt; listens on loopback interfaces only (meaning it will only accept connections made from the computer its running on).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_inflight_messages&lt;/code&gt; - Unless this is set to 1 mosquitto does not guarantee ordered delivery of messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_queued_messages&lt;/code&gt; / &lt;code&gt;max_queued_bytes&lt;/code&gt; - These impose limits on the number/size of queued messages. The defaults may lead to messages being silently dropped.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;persistence&lt;/code&gt; - Defaults to false (messages will not survive a broker restart)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;max_keepalive&lt;/code&gt; - defaults to 65535 and, from version 2.0.12, &lt;code&gt;SetKeepAlive(0)&lt;/code&gt; will result in a rejected connection by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please report bugs by raising issues for this project in github &lt;a href=&#34;https://github.com/eclipse/paho.mqtt.golang/issues&#34;&gt;https://github.com/eclipse/paho.mqtt.golang/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A limited number of contributors monitor the issues section so if you have a general question please see the resources in the &lt;a href=&#34;https://raw.githubusercontent.com/eclipse/paho.mqtt.golang/master/#more-information&#34;&gt;more information&lt;/a&gt; section for help.&lt;/p&gt; &#xA;&lt;p&gt;We welcome bug reports, but it is important they are actionable. A significant percentage of issues reported are not resolved due to a lack of information. If we cannot replicate the problem then it is unlikely we will be able to fix it. The information required will vary from issue to issue but almost all bug reports would be expected to include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Which version of the package you are using (tag or commit - this should be in your &lt;code&gt;go.mod&lt;/code&gt; file)&lt;/li&gt; &#xA; &lt;li&gt;A full, clear, description of the problem (detail what you are expecting vs what actually happens).&lt;/li&gt; &#xA; &lt;li&gt;Configuration information (code showing how you connect, please include all references to &lt;code&gt;ClientOption&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Broker details (name and version).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If at all possible please also include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Details of your attempts to resolve the issue (what have you tried, what worked, what did not).&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://stackoverflow.com/help/minimal-reproducible-example&#34;&gt;Minimal, Reproducible Example&lt;/a&gt;. Providing an example is the best way to demonstrate the issue you are facing; it is important this includes all relevant information (including broker configuration). Docker (see &lt;code&gt;cmd/docker&lt;/code&gt;) makes it relatively simple to provide a working end-to-end example.&lt;/li&gt; &#xA; &lt;li&gt;Broker logs covering the period the issue occurred.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eclipse/paho.mqtt.golang/master/#logging&#34;&gt;Application Logs&lt;/a&gt; covering the period the issue occurred. Unless you have isolated the root cause of the issue please include a link to a full log (including data from well before the problem arose).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is important to remember that this library does not stand alone; it communicates with a broker and any issues you are seeing may be due to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bugs in your code.&lt;/li&gt; &#xA; &lt;li&gt;Bugs in this library.&lt;/li&gt; &#xA; &lt;li&gt;The broker configuration.&lt;/li&gt; &#xA; &lt;li&gt;Bugs in the broker.&lt;/li&gt; &#xA; &lt;li&gt;Issues with whatever you are communicating with.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When submitting an issue, please ensure that you provide sufficient details to enable us to eliminate causes outside of this library.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome pull requests but before your contribution can be accepted by the project, you need to create and electronically sign the Eclipse Contributor Agreement (ECA) and sign off on the Eclipse Foundation Certificate of Origin.&lt;/p&gt; &#xA;&lt;p&gt;More information is available in the &lt;a href=&#34;http://wiki.eclipse.org/Development_Resources/Contributing_via_Git&#34;&gt;Eclipse Development Resources&lt;/a&gt;; please take special note of the requirement that the commit record contain a &#34;Signed-off-by&#34; entry.&lt;/p&gt; &#xA;&lt;h2&gt;More information&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/mqtt+go&#34;&gt;Stack Overflow&lt;/a&gt; has a range questions/answers covering a range of common issues (both relating to use of this library and MQTT in general). This is the best place to ask general questions (including those relating to the use of this library).&lt;/p&gt; &#xA;&lt;p&gt;Discussion of the Paho clients takes place on the &lt;a href=&#34;https://dev.eclipse.org/mailman/listinfo/paho-dev&#34;&gt;Eclipse paho-dev mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;General questions about the MQTT protocol are discussed in the &lt;a href=&#34;https://groups.google.com/forum/?hl=en-US&amp;amp;fromgroups#!forum/mqtt&#34;&gt;MQTT Google Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is much more information available via the &lt;a href=&#34;http://mqtt.org&#34;&gt;MQTT community site&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nickvourd/Supernova</title>
    <updated>2023-09-03T01:31:17Z</updated>
    <id>tag:github.com,2023-09-03:/nickvourd/Supernova</id>
    <link href="https://github.com/nickvourd/Supernova" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Real fucking shellcode encryption tool.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Supernova&lt;/h1&gt; &#xA;&lt;p&gt;Real fucking shellcode encryptor (Beta Version)&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;350&#34; height=&#34;350&#34; src=&#34;https://github.com/nickvourd/Supernova/raw/main/Pictures/supernova_logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Supernova is an open-source Golang tool that empowers users to securely encrypt their raw shellcodes. Additionally, it offers automatic conversion of the encrypted shellcode into formats compatible with various programming languages, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C&lt;/li&gt; &#xA; &lt;li&gt;C#&lt;/li&gt; &#xA; &lt;li&gt;Rust&lt;/li&gt; &#xA; &lt;li&gt;Nim&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It supports a variety of different ciphers, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ROT&lt;/li&gt; &#xA; &lt;li&gt;XOR&lt;/li&gt; &#xA; &lt;li&gt;RC4&lt;/li&gt; &#xA; &lt;li&gt;AES&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supernova is written in Golang, a cross-platform language, enabling its use on both Windows and Linux systems.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to my brothers &lt;a href=&#34;https://twitter.com/S1ckB0y1337&#34;&gt;@S1ckB0y1337&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/0xvm&#34;&gt;@0xvm&lt;/a&gt;, who provided invaluable assistance during the beta testing phase of the tool.&lt;/p&gt; &#xA;&lt;p&gt;Supernova was created with &lt;span&gt;❤️&lt;/span&gt; by &lt;a href=&#34;https://twitter.com/nickvourd&#34;&gt;@nickvourd&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/IAMCOMPROMISED&#34;&gt;@IAMCOMPROMISED&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/Papadope9&#34;&gt;@Papadope9&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This tool is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/MIT-License-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#supernova&#34;&gt;Supernova&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#background&#34;&gt;Background&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#command-line-usage&#34;&gt;Command Line Usage&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#about-dynamic-variable-name&#34;&gt;About Dynamic Variable Name&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#dynamic-variable-name-example&#34;&gt;Dynamic Variable Name Example&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#about-debug&#34;&gt;About Debug&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#debug-example&#34;&gt;Debug Example&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#about-output-file&#34;&gt;About Output File&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#output-file-example&#34;&gt;Output File Example&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#rot-encryption&#34;&gt;ROT Encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#xor-encryption&#34;&gt;XOR Encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#rc4-encryption&#34;&gt;RC4 Encryption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#aes-encryption&#34;&gt;AES Encryption&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#aes-256-cbc&#34;&gt;AES-256-CBC&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Supernova, run the following command, or use the &lt;a href=&#34;https://github.com/nickvourd/Supernova/releases&#34;&gt;compiled binary&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build Supernova.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; Supernova works without the necessity of installing any additional dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;h3&gt;Command Line Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;███████╗██╗   ██╗██████╗ ███████╗██████╗ ███╗   ██╗ ██████╗ ██╗   ██╗ █████╗&#xA;██╔════╝██║   ██║██╔══██╗██╔════╝██╔══██╗████╗  ██║██╔═══██╗██║   ██║██╔══██╗&#xA;███████╗██║   ██║██████╔╝█████╗  ██████╔╝██╔██╗ ██║██║   ██║██║   ██║███████║&#xA;╚════██║██║   ██║██╔═══╝ ██╔══╝  ██╔══██╗██║╚██╗██║██║   ██║╚██╗ ██╔╝██╔══██║&#xA;███████║╚██████╔╝██║     ███████╗██║  ██║██║ ╚████║╚██████╔╝ ╚████╔╝ ██║  ██║&#xA;╚══════╝ ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝ ╚═════╝   ╚═══╝  ╚═╝  ╚═╝&#xA;&#xA;Supernova v1.0.0 - Real fucking shellcode encryptor.&#xA;Supernova is an open source tool licensed under MIT.&#xA;Written with &amp;lt;3 by @nickvourd, @IAMCOMPROMISED and @Papadope9...&#xA;Please visit https://github.com/nickvourd/Supernova for more...&#xA;&#xA;Usage of Supernova.exe:&#xA;  -d    Enable Debug mode&#xA;  -enc string&#xA;        Shellcode encryption (i.e., ROT, XOR, RC4, AES)&#xA;  -i string&#xA;        Path to the raw 64-bit shellcode&#xA;  -k int&#xA;        Key lenght size for encryption (default 1)&#xA;  -lang string&#xA;        Programming language to translate the shellcode (i.e., Nim, Rust, C, CSharp)&#xA;  -o string&#xA;        Name of the output file&#xA;  -v string&#xA;        Name of dynamic variable (default &#34;shellcode&#34;)&#xA;  -version&#xA;        Show Supernova current version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;About Dynamic Variable Name&lt;/h3&gt; &#xA;&lt;p&gt;Dynamic variable name is employed to insert the desired variable name for the shellcode payload. This approach imparts dynamism to the output code by incorporating variables, thereby enhancing the code&#39;s copy-and-paste utility.&lt;/p&gt; &#xA;&lt;p&gt;Use dynamic variable name with &lt;code&gt;-v&lt;/code&gt; switch and provide your preferred value.&lt;/p&gt; &#xA;&lt;p&gt;The default value of dynamic variable name is &lt;code&gt;shellcode&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Dynamic Variable Name Example&lt;/h4&gt; &#xA;&lt;p&gt;Here is a simple example demonstrating how the dynamic variable name operates.&lt;/p&gt; &#xA;&lt;p&gt;An attacker uses XOR encryption and utilizes the C# language option in conjunction with the variable setting as value &lt;code&gt;nickvourd&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Supernova.exe -i C:\Users\User\Desktop\shellcode.bin -enc xor -lang csharp -k 2 -v nickvourd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outcome:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/Pictures/XOR-Csharp-Variable.png&#34; alt=&#34;Variable-Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;About Debug&lt;/h3&gt; &#xA;&lt;p&gt;The debug mode is useful if you want to observe the original payload in a selected programming language. To activate this functionality, you need to include the &lt;code&gt;-d&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;Debug Example&lt;/h4&gt; &#xA;&lt;p&gt;Here is a simple example illustrating the functioning of the debug option.&lt;/p&gt; &#xA;&lt;p&gt;An adversary uses ROT encryption and utilizes the C# language option in conjunction with the debug option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Supernova.exe -i C:\Users\User\Desktop\shellcode.bin -enc rot -lang csharp -k 2 -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outcome:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/Pictures/Caesar-Csharp-Debug-Mode.png&#34; alt=&#34;Debug-Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;About Output File&lt;/h3&gt; &#xA;&lt;p&gt;The output option is indicated by the &lt;code&gt;-o&lt;/code&gt; switch, followed by the desired value, allowing you to save the encrypted payload into a file.&lt;/p&gt; &#xA;&lt;h4&gt;Output File Example&lt;/h4&gt; &#xA;&lt;p&gt;Here is a simple example illustrating the functioning of the output option.&lt;/p&gt; &#xA;&lt;p&gt;An attacker uses RC4 encryption and utilizes the C language option in conjunction with the output option and a desired filename:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Supernova.exe -i C:\Users\User\Desktop\shellcode.bin -enc rc4 -lang c -k 3 -o shellcode.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outcome:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/Pictures/RC4-C-Output-Option.png&#34; alt=&#34;Output-Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ROT Encryption&lt;/h2&gt; &#xA;&lt;p&gt;The ROT cipher, also known as the rotation cipher, is a family of simple substitution ciphers in which the letters of the alphabet are shifted by a fixed number of positions. The term &#34;ROT&#34; is often followed by a number that indicates the amount of rotation applied to the letters. Each variant of the ROT cipher corresponds to a specific shift value.&lt;/p&gt; &#xA;&lt;p&gt;Each letter in the plaintext message is replaced with the letter that appears a certain number of positions ahead in the alphabet, based on the key. The shifting is performed circularly, wrapping around from &#34;Z&#34; to &#34;A&#34;.&lt;/p&gt; &#xA;&lt;p&gt;As an example, using the Swift key 13:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;A&#34; becomes &#34;N&#34;&#xA;&#34;B&#34; becomes &#34;O&#34;&#xA;...&#xA;&#34;N&#34; becomes &#34;A&#34;&#xA;&#34;O&#34; becomes &#34;B&#34;&#xA;...&#xA;&#34;Z&#34; becomes &#34;M&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To employ Supernova with the ROT cipher, you must select a key that signifies the shift key, a preferred programming language, and provide a raw shellcode:&lt;/p&gt; &#xA;&lt;p&gt;In the provided example, the preferred language is Rust, and the chosen Swift key is 7:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Supernova.exe -i C:\Users\User\Desktop\shellcode.bin -enc rot -lang rust -k 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outcome:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/Pictures/Caesar-Rust.png&#34; alt=&#34;ROT-Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;XOR Encryption&lt;/h2&gt; &#xA;&lt;p&gt;The XOR cipher, also known as the exclusive OR cipher, is a basic encryption technique that operates by applying the XOR (exclusive OR) operation between each bit of the plaintext and a corresponding bit of a secret key. This results in ciphertext that appears random and can only be decrypted by performing the XOR operation again with the same secret key.&lt;/p&gt; &#xA;&lt;p&gt;The XOR operation is performed between each bit of the plaintext message and the corresponding bit of the key. If the bits are the same (both 0 or both 1), the result is 0; if the bits are different, the result is 1.&lt;/p&gt; &#xA;&lt;p&gt;For example, given a key of &#34;10110&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plaintext &#34;01001&#34; XOR Key &#34;10110&#34; = Ciphertext &#34;11111&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To employ Supernova with the XOR cipher, you must select a key that generates random XOR byte keys, a preferred programming language, and provide a raw shellcode:&lt;/p&gt; &#xA;&lt;p&gt;In the given illustration, the preferred programming language is Nim, and the selected key is 4. This key will be utilized to generate four-byte sequences for encryption purposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Supernova.exe -i C:\Users\User\Desktop\shellcode.bin -enc xor -lang nim -k 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outcome:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/Pictures/XOR-Nim.png&#34; alt=&#34;XOR-Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;RC4 Encryption&lt;/h2&gt; &#xA;&lt;p&gt;The RC4 cipher, also known as the Rivest Cipher 4 or ARC4, is a symmetric stream cipher that was designed by Ron Rivest in 1987. It gained popularity due to its simplicity and efficiency in generating a pseudorandom stream of bits, which can be used for encryption and decryption. The RC4 cipher was initially a trade secret, but it later became widely known and used in various applications.&lt;/p&gt; &#xA;&lt;p&gt;The RC4 algorithm starts by initializing two arrays, S (state) and T (temporary). The key is used to initialize these arrays based on a process called key scheduling. The key can be of variable length, which influences the strength of the cipher.&lt;/p&gt; &#xA;&lt;p&gt;The PRGA (Pseudorandom Generation Algorithm) generates a pseudorandom stream of bytes that are used to encrypt or decrypt the plaintext. The PRGA operates as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The arrays S and T are mixed based on the key to create the initial state.&lt;/li&gt; &#xA; &lt;li&gt;For each byte of the output stream, the values in arrays S and T are further mixed and used to generate a pseudorandom byte.&lt;/li&gt; &#xA; &lt;li&gt;This pseudorandom byte is XORed with the plaintext byte to produce the ciphertext byte (or vice versa for decryption).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The pseudorandom stream generated by the PRGA is called the keystream. This keystream is combined with the plaintext using the XOR operation to produce the ciphertext.&lt;/p&gt; &#xA;&lt;p&gt;To employ Supernova with the RC4 cipher, you must select a key that generates a random Passphrase, a preferred programming language, and provide a raw shellcode. Additionally, the numerical value provided in the &#34;key&#34; argument specifies the desired length of the generated random passphrase:&lt;/p&gt; &#xA;&lt;p&gt;In the given illustration, the preferred programming language is CSharp, and the selected key is 9:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Supernova.exe -i C:\Users\User\Desktop\shellcode.bin -enc rc4 -lang csharp -k 9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outcome:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/Pictures/RC4-Csharp.png&#34; alt=&#34;RC4-Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AES Encryption&lt;/h2&gt; &#xA;&lt;p&gt;The Advanced Encryption Standard (AES) is a widely adopted symmetric encryption algorithm that provides strong security for various applications. It was established as a standard encryption algorithm by the U.S. National Institute of Standards and Technology (NIST) in 2001, following a competition to find a replacement for the aging Data Encryption Standard (DES). AES is known for its efficiency and robust security features, making it a cornerstone of modern cryptography.&lt;/p&gt; &#xA;&lt;p&gt;Supernova uses AES-256-CBC cipher.&lt;/p&gt; &#xA;&lt;h3&gt;AES-256-CBC&lt;/h3&gt; &#xA;&lt;p&gt;The &#34;AES-256&#34; in the name refers to the key length used in the algorithm. AES-256 employs a 256-bit encryption key, which means there are 2^256 possible key combinations, making it incredibly difficult and time-consuming for attackers to brute-force the key and decrypt the encrypted data without the proper key.&lt;/p&gt; &#xA;&lt;p&gt;The &#34;CBC&#34; part of the name stands for Cipher Block Chaining. This mode of operation enhances the security of the encryption by chaining together the blocks of plaintext before encryption. Each block of plaintext is XORed (exclusive OR) with the previous ciphertext block before encryption, which introduces an element of randomness and dependency among blocks. This helps to prevent patterns in the plaintext from being apparent in the ciphertext, adding an extra layer of confidentiality.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a breakdown of how AES-256-CBC works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialization Vector (IV): An IV is a random value used to initialize the encryption process. It ensures that even if the same plaintext is encrypted multiple times with the same key, the resulting ciphertext will be different due to the randomization introduced by the IV.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Dividing Data into Blocks: The plaintext message is divided into fixed-size blocks (usually 128 bits or 16 bytes) before encryption.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Chaining Blocks: Each plaintext block is XORed with the previous ciphertext block (or the IV for the first block) before encryption. This chaining helps prevent patterns from appearing in the ciphertext.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Encryption: The XORed block is then encrypted using the AES-256 encryption algorithm with the provided encryption key.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To employ Supernova with the AES-256-CBC cipher, you must select a preferred programming language and provide a raw shellcode. Additionally, the generated key is a random 32-byte value, and the generated IV is a random 16-byte value.&lt;/p&gt; &#xA;&lt;p&gt;In the given illustration, the preferred programming language is Csharp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\Supernova.exe -i C:\Users\User\Desktop\shellcode.bin -enc aes -lang csharp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outcome:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nickvourd/Supernova/main/Pictures/AES-Csharp.png&#34; alt=&#34;AES-Example&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Caesar_cipher&#34;&gt;Caesar Cipher Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/XOR_cipher&#34;&gt;XOR Cipher Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/RC4&#34;&gt;RC4 Cipher Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34;&gt;AES Cipher Wikipedia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Nim_(programming_language)&#34;&gt;Nim (programming language)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Rust_(programming_language)&#34;&gt;Rust (programming language)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C_Sharp_(programming_language)&#34;&gt;C Sharp (programming language)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/C_(programming_language)&#34;&gt;C (programming language)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://institute.sektor7.net/&#34;&gt;Sector7 Institute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://maldevacademy.com/&#34;&gt;MalDev Academy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/go-plugin</title>
    <updated>2023-09-03T01:31:17Z</updated>
    <id>tag:github.com,2023-09-03:/hashicorp/go-plugin</id>
    <link href="https://github.com/hashicorp/go-plugin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golang plugin system over RPC.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Plugin System over RPC&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;go-plugin&lt;/code&gt; is a Go (golang) plugin system over RPC. It is the plugin system that has been in use by HashiCorp tooling for over 4 years. While initially created for &lt;a href=&#34;https://www.packer.io&#34;&gt;Packer&lt;/a&gt;, it is additionally in use by &lt;a href=&#34;https://www.terraform.io&#34;&gt;Terraform&lt;/a&gt;, &lt;a href=&#34;https://www.nomadproject.io&#34;&gt;Nomad&lt;/a&gt;, &lt;a href=&#34;https://www.vaultproject.io&#34;&gt;Vault&lt;/a&gt;, &lt;a href=&#34;https://www.boundaryproject.io&#34;&gt;Boundary&lt;/a&gt;, and &lt;a href=&#34;https://www.waypointproject.io&#34;&gt;Waypoint&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While the plugin system is over RPC, it is currently only designed to work over a local [reliable] network. Plugins over a real network are not supported and will lead to unexpected behavior.&lt;/p&gt; &#xA;&lt;p&gt;This plugin system has been used on millions of machines across many different projects and has proven to be battle hardened and ready for production use.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;The HashiCorp plugin system supports a number of features:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Plugins are Go interface implementations.&lt;/strong&gt; This makes writing and consuming plugins feel very natural. To a plugin author: you just implement an interface as if it were going to run in the same process. For a plugin user: you just use and call functions on an interface as if it were in the same process. This plugin system handles the communication in between.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cross-language support.&lt;/strong&gt; Plugins can be written (and consumed) by almost every major language. This library supports serving plugins via &lt;a href=&#34;http://www.grpc.io&#34;&gt;gRPC&lt;/a&gt;. gRPC-based plugins enable plugins to be written in any language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Complex arguments and return values are supported.&lt;/strong&gt; This library provides APIs for handling complex arguments and return values such as interfaces, &lt;code&gt;io.Reader/Writer&lt;/code&gt;, etc. We do this by giving you a library (&lt;code&gt;MuxBroker&lt;/code&gt;) for creating new connections between the client/server to serve additional interfaces or transfer raw data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bidirectional communication.&lt;/strong&gt; Because the plugin system supports complex arguments, the host process can send it interface implementations and the plugin can call back into the host process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Built-in Logging.&lt;/strong&gt; Any plugins that use the &lt;code&gt;log&lt;/code&gt; standard library will have log data automatically sent to the host process. The host process will mirror this output prefixed with the path to the plugin binary. This makes debugging with plugins simple. If the host system uses &lt;a href=&#34;https://github.com/hashicorp/go-hclog&#34;&gt;hclog&lt;/a&gt; then the log data will be structured. If the plugin also uses hclog, logs from the plugin will be sent to the host hclog and be structured.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Protocol Versioning.&lt;/strong&gt; A very basic &#34;protocol version&#34; is supported that can be incremented to invalidate any previous plugins. This is useful when interface signatures are changing, protocol level changes are necessary, etc. When a protocol version is incompatible, a human friendly error message is shown to the end user.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stdout/Stderr Syncing.&lt;/strong&gt; While plugins are subprocesses, they can continue to use stdout/stderr as usual and the output will get mirrored back to the host process. The host process can control what &lt;code&gt;io.Writer&lt;/code&gt; these streams go to to prevent this from happening.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TTY Preservation.&lt;/strong&gt; Plugin subprocesses are connected to the identical stdin file descriptor as the host process, allowing software that requires a TTY to work. For example, a plugin can execute &lt;code&gt;ssh&lt;/code&gt; and even though there are multiple subprocesses and RPC happening, it will look and act perfectly to the end user.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Host upgrade while a plugin is running.&lt;/strong&gt; Plugins can be &#34;reattached&#34; so that the host process can be upgraded while the plugin is still running. This requires the host/plugin to know this is possible and daemonize properly. &lt;code&gt;NewClient&lt;/code&gt; takes a &lt;code&gt;ReattachConfig&lt;/code&gt; to determine if and how to reattach.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cryptographically Secure Plugins.&lt;/strong&gt; Plugins can be verified with an expected checksum and RPC communications can be configured to use TLS. The host process must be properly secured to protect this configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The HashiCorp plugin system works by launching subprocesses and communicating over RPC (using standard &lt;code&gt;net/rpc&lt;/code&gt; or &lt;a href=&#34;http://www.grpc.io&#34;&gt;gRPC&lt;/a&gt;). A single connection is made between any plugin and the host process. For net/rpc-based plugins, we use a &lt;a href=&#34;https://github.com/hashicorp/yamux&#34;&gt;connection multiplexing&lt;/a&gt; library to multiplex any other connections on top. For gRPC-based plugins, the HTTP2 protocol handles multiplexing.&lt;/p&gt; &#xA;&lt;p&gt;This architecture has a number of benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugins can&#39;t crash your host process: A panic in a plugin doesn&#39;t panic the plugin user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugins are very easy to write: just write a Go application and &lt;code&gt;go build&lt;/code&gt;. Or use any other language to write a gRPC server with a tiny amount of boilerplate to support go-plugin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugins are very easy to install: just put the binary in a location where the host will find it (depends on the host but this library also provides helpers), and the plugin host handles the rest.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugins can be relatively secure: The plugin only has access to the interfaces and args given to it, not to the entire memory space of the process. Additionally, go-plugin can communicate with the plugin over TLS.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use the plugin system, you must take the following steps. These are high-level steps that must be done. Examples are available in the &lt;code&gt;examples/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose the interface(s) you want to expose for plugins.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For each interface, implement an implementation of that interface that communicates over a &lt;code&gt;net/rpc&lt;/code&gt; connection or over a &lt;a href=&#34;http://www.grpc.io&#34;&gt;gRPC&lt;/a&gt; connection or both. You&#39;ll have to implement both a client and server implementation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;Plugin&lt;/code&gt; implementation that knows how to create the RPC client/server for a given plugin type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugin authors call &lt;code&gt;plugin.Serve&lt;/code&gt; to serve a plugin from the &lt;code&gt;main&lt;/code&gt; function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Plugin users use &lt;code&gt;plugin.Client&lt;/code&gt; to launch a subprocess and request an interface implementation over RPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That&#39;s it! In practice, step 2 is the most tedious and time consuming step. Even so, it isn&#39;t very difficult and you can see examples in the &lt;code&gt;examples/&lt;/code&gt; directory as well as throughout our various open source projects.&lt;/p&gt; &#xA;&lt;p&gt;For complete API documentation, see &lt;a href=&#34;https://godoc.org/github.com/hashicorp/go-plugin&#34;&gt;GoDoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Our plugin system is constantly evolving. As we use the plugin system for new projects or for new features in existing projects, we constantly find improvements we can make.&lt;/p&gt; &#xA;&lt;p&gt;At this point in time, the roadmap for the plugin system is:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Semantic Versioning.&lt;/strong&gt; Plugins will be able to implement a semantic version. This plugin system will give host processes a system for constraining versions. This is in addition to the protocol versioning already present which is more for larger underlying changes.&lt;/p&gt; &#xA;&lt;h2&gt;What About Shared Libraries?&lt;/h2&gt; &#xA;&lt;p&gt;When we started using plugins (late 2012, early 2013), plugins over RPC were the only option since Go didn&#39;t support dynamic library loading. Today, Go supports the &lt;a href=&#34;https://golang.org/pkg/plugin/&#34;&gt;plugin&lt;/a&gt; standard library with a number of limitations. Since 2012, our plugin system has stabilized from tens of millions of users using it, and has many benefits we&#39;ve come to value greatly.&lt;/p&gt; &#xA;&lt;p&gt;For example, we use this plugin system in &lt;a href=&#34;https://www.vaultproject.io&#34;&gt;Vault&lt;/a&gt; where dynamic library loading is not acceptable for security reasons. That is an extreme example, but we believe our library system has more upsides than downsides over dynamic library loading and since we&#39;ve had it built and tested for years, we&#39;ll continue to use it.&lt;/p&gt; &#xA;&lt;p&gt;Shared libraries have one major advantage over our system which is much higher performance. In real world scenarios across our various tools, we&#39;ve never required any more performance out of our plugin system and it has seen very high throughput, so this isn&#39;t a concern for us at the moment.&lt;/p&gt;</summary>
  </entry>
</feed>