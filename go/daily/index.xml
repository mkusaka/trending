<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-27T01:35:36Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>viettranx/micro-clean-architecture-service-demo</title>
    <updated>2023-03-27T01:35:36Z</updated>
    <id>tag:github.com,2023-03-27:/viettranx/micro-clean-architecture-service-demo</id>
    <link href="https://github.com/viettranx/micro-clean-architecture-service-demo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A demo microservice with Clean Architecture in practice&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clean Architecture in Microservices Demo&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you&#39;re very new to Clean Architecture, I recommend you check &lt;a href=&#34;https://github.com/viettranx/simple-clean-architecture-demo&#34;&gt;more simple demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This repo was built up with three services: &lt;strong&gt;Task&lt;/strong&gt;, &lt;strong&gt;User&lt;/strong&gt; and &lt;strong&gt;Auth&lt;/strong&gt;. Each of them conforms &lt;strong&gt;Clean Architecture&lt;/strong&gt; (just idea, not perfectly).&lt;/p&gt; &#xA;&lt;p&gt;The different is my &lt;strong&gt;Storage Layer&lt;/strong&gt;. You might not see anything like this before.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/viettranx/micro-clean-architecture-service-demo/main/statics/img/overview-clean-architecture.png&#34; alt=&#34;Clean Architecture Overview&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/viettranx/micro-clean-architecture-service-demo/main/statics/img/clean-architecture-flow.png&#34; alt=&#34;Clean Architecture Flow&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In Microservices environment, service usually needs to aggregate data from the other services. That&#39;s why Storage Layer come to play its role.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can use &lt;strong&gt;Domain-Driven Design (DDD)&lt;/strong&gt; to solve this problem, of-course. But it&#39;s not my focus in this demo.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Microservices in this demo&lt;/h2&gt; &#xA;&lt;p&gt;Instead of separating to 3 repos on GitHub, I merged them to a single repo to give more transparent and convenience to build up the demo. But service is isolated with each others.&lt;/p&gt; &#xA;&lt;p&gt;Service stacks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GIN (for HTTP service)&lt;/li&gt; &#xA; &lt;li&gt;gRPC (internal rpc)&lt;/li&gt; &#xA; &lt;li&gt;MySQL (with GORM)&lt;/li&gt; &#xA; &lt;li&gt;JWT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Task Service&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;REST API: CRUD Task (require authorization for all apis)&lt;/li&gt; &#xA; &lt;li&gt;gRPC: None&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;User Service&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;REST API: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get user profile (require authorization)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;gRPC: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get public user info by ID&lt;/li&gt; &#xA;   &lt;li&gt;Get many public user infos by IDs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Auth Service&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;REST API: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Register new user account&lt;/li&gt; &#xA;   &lt;li&gt;Login (issue JWT)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;gRPC: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Introspect Access Token&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The Diagrams&lt;/h2&gt; &#xA;&lt;p&gt;Some of main diagrams to demonstration how they work together:&lt;/p&gt; &#xA;&lt;h3&gt;Create Task&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/viettranx/micro-clean-architecture-service-demo/main/statics/img/create-tasks-diagram.png&#34; alt=&#34;Create Task Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fetch Tasks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/viettranx/micro-clean-architecture-service-demo/main/statics/img/get-tasks-diagram.png&#34; alt=&#34;Fetch Task Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Folder structure&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s focus on &lt;a href=&#34;https://raw.githubusercontent.com/viettranx/micro-clean-architecture-service-demo/main/services&#34;&gt;&lt;code&gt;services&lt;/code&gt; folder&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── auth&#xA;│&amp;nbsp;&amp;nbsp; ├── business&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── business.go&#xA;│&amp;nbsp;&amp;nbsp; ├── entity&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── auth.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── auth_vars.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── error.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── validate.go&#xA;│&amp;nbsp;&amp;nbsp; ├── storage&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── mysql&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── store.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── rpc&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── rpc_client.go&#xA;│&amp;nbsp;&amp;nbsp; └── transport&#xA;│&amp;nbsp;&amp;nbsp;     ├── api&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── api.go&#xA;│&amp;nbsp;&amp;nbsp;     └── rpc&#xA;│&amp;nbsp;&amp;nbsp;         └── auth_rpc.go&#xA;├── task&#xA;│&amp;nbsp;&amp;nbsp; ├── business&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── business.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── create_new_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── delete_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── get_task_details.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── list_tasks.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── update_task.go&#xA;│&amp;nbsp;&amp;nbsp; ├── entity&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── error.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── task_vars.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── validate.go&#xA;│&amp;nbsp;&amp;nbsp; ├── repository&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── delete_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── get_task_by_id.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── insert_new_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── list_tasks.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── repo.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── update_task.go&#xA;│&amp;nbsp;&amp;nbsp; ├── storage&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── mysql&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── delete_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── get_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── insert_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── list_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── store.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── update_task.go&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── rpc&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp;     └── rpc_client.go&#xA;│&amp;nbsp;&amp;nbsp; └── transport&#xA;│&amp;nbsp;&amp;nbsp;     └── api&#xA;│&amp;nbsp;&amp;nbsp;         ├── api.go&#xA;│&amp;nbsp;&amp;nbsp;         ├── create_task_hdl.go&#xA;│&amp;nbsp;&amp;nbsp;         ├── delete_task_hdl.go&#xA;│&amp;nbsp;&amp;nbsp;         ├── get_task_hdl.go&#xA;│&amp;nbsp;&amp;nbsp;         ├── list_tasks_hdl.go&#xA;│&amp;nbsp;&amp;nbsp;         └── update_task_hdl.go&#xA;└── user&#xA;    ├── business&#xA;    │&amp;nbsp;&amp;nbsp; └── business.go&#xA;    ├── entity&#xA;    │&amp;nbsp;&amp;nbsp; ├── error.go&#xA;    │&amp;nbsp;&amp;nbsp; ├── user.go&#xA;    │&amp;nbsp;&amp;nbsp; ├── user_vars.go&#xA;    │&amp;nbsp;&amp;nbsp; └── validate.go&#xA;    ├── storage&#xA;    │&amp;nbsp;&amp;nbsp; └── mysql&#xA;    │&amp;nbsp;&amp;nbsp;     ├── get_user.go&#xA;    │&amp;nbsp;&amp;nbsp;     ├── insert_user.go&#xA;    │&amp;nbsp;&amp;nbsp;     └── store.go&#xA;    └── transport&#xA;        ├── api&#xA;        │&amp;nbsp;&amp;nbsp; └── api.go&#xA;        └── rpc&#xA;            └── user_rpc.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You may wonder why User and Auth Service have no &lt;code&gt;repository&lt;/code&gt; folder. Because User and Auth are &lt;code&gt;self-service&lt;/code&gt;, mean they do not need to aggregate data from other services. So, &lt;code&gt;repository&lt;/code&gt; is omitted.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Protobuf and generated files at &lt;a href=&#34;https://raw.githubusercontent.com/viettranx/micro-clean-architecture-service-demo/main/proto&#34;&gt;proto folder&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── auth.proto&#xA;├── pb&#xA;│&amp;nbsp;&amp;nbsp; ├── auth.pb.go&#xA;│&amp;nbsp;&amp;nbsp; ├── auth_grpc.pb.go&#xA;│&amp;nbsp;&amp;nbsp; ├── user.pb.go&#xA;│&amp;nbsp;&amp;nbsp; └── user_grpc.pb.go&#xA;└── user.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to run this demo&lt;/h2&gt; &#xA;&lt;h3&gt;1. Clone and start the service with Docker-Compose&lt;/h3&gt; &#xA;&lt;p&gt;Open your terminal/console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/viettranx/microservices-clean-architecture-demo&#xA;cd microservices-clean-architecture-demo&#xA;&#xA;docker compose up --force-recreate --detach --build app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything is ok, the service will be running at on &lt;code&gt;localhost:3000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Print all ENV variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose exec app ./demo_app outenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Make some requests&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register new account&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --location &#39;http://localhost:3000/v1/register&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;    &#34;email&#34;: &#34;demo@demo.com&#34;,&#xA;    &#34;password&#34;: &#34;12345678&#34;,&#xA;    &#34;last_name&#34;: &#34;Microservices&#34;,&#xA;    &#34;first_name&#34;: &#34;Demo &#34;&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;{&#34;data&#34;: true}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Login&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --location &#39;http://localhost:3000/v1/authenticate&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;    &#34;email&#34;: &#34;demo@demo.com&#34;,&#xA;    &#34;password&#34;: &#34;12345678&#34;&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The access token will return like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;access_token&#34;: {&#xA;      &#34;token&#34;: &#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlNTMycW9zOGpqTTIiLCJleHAiOjE2ODAyNTI0MDgsIm5iZiI6MTY3OTY0NzYwOCwiaWF0IjoxNjc5NjQ3NjA4LCJqdGkiOiI3OTEzYzhjYy05NmI0LTQ3ZmUtOWIzZi01MTUwZTk5NTM3MGUifQ.51d6zVuGtcAbw2poEWV4TffhEqJG8uxMOcGq7Mt8sZA&#34;,&#xA;      &#34;expire_in&#34;: 604800&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new task&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --location &#39;http://localhost:3000/v1/tasks&#39; \&#xA;--header &#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlNTMycW9zOGpqTTIiLCJleHAiOjE2ODAyNTI0MDgsIm5iZiI6MTY3OTY0NzYwOCwiaWF0IjoxNjc5NjQ3NjA4LCJqdGkiOiI3OTEzYzhjYy05NmI0LTQ3ZmUtOWIzZi01MTUwZTk5NTM3MGUifQ.51d6zVuGtcAbw2poEWV4TffhEqJG8uxMOcGq7Mt8sZA&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data &#39;{&#xA;    &#34;title&#34;: &#34;This is a new task&#34;,&#xA;    &#34;description&#34;: &#34;Build a simple demo clean architecture&#34;&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;New Task id will be returned&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;{&#34;data&#34;:&#34;e532sJ4XpCi8&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetch list tasks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl --location &#39;http://localhost:3000/v1/tasks&#39; \&#xA;--header &#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJnR3pUQlVScWhhakciLCJleHAiOjE2ODAwNjQzNzcsIm5iZiI6MTY3OTQ1OTU3NywiaWF0IjoxNjc5NDU5NTc3LCJqdGkiOiI5Y2U4ZjUwMC1hYTczLTQ1MTYtYmJhYy04OTBiNDBjNDVkMDAifQ.VsqU8_Gn_EMwKAYW-En3BG58nWTREG6s3zCVXu7sZgQ&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: [&#xA;    {&#xA;      &#34;id&#34;: &#34;e532sJ4XpCi8&#34;,&#xA;      &#34;created_at&#34;: &#34;2023-03-24T08:50:07Z&#34;,&#xA;      &#34;updated_at&#34;: &#34;2023-03-24T08:50:07Z&#34;,&#xA;      &#34;title&#34;: &#34;This is a new task&#34;,&#xA;      &#34;description&#34;: &#34;Build a simple demo clean architecture&#34;,&#xA;      &#34;status&#34;: &#34;doing&#34;,&#xA;      &#34;user&#34;: {&#xA;        &#34;id&#34;: &#34;e532qos8jjM2&#34;,&#xA;        &#34;last_name&#34;: &#34;Microservices&#34;,&#xA;        &#34;first_name&#34;: &#34;Demo&#34;,&#xA;        &#34;avatar&#34;: null&#xA;      }&#xA;    }&#xA;  ],&#xA;  &#34;paging&#34;: {&#xA;    &#34;page&#34;: 1,&#xA;    &#34;limit&#34;: 10,&#xA;    &#34;total&#34;: 1,&#xA;    &#34;cursor&#34;: &#34;&#34;,&#xA;    &#34;next_cursor&#34;: &#34;&#34;&#xA;  },&#xA;  &#34;extra&#34;: {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;Building services with Clean Architecture is difficult, especially in Microservices. I hope this repo help you. Enjoy it and feel free to create PRs or Issues.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>indeedeng/iwf</title>
    <updated>2023-03-27T01:35:36Z</updated>
    <id>tag:github.com,2023-03-27:/indeedeng/iwf</id>
    <link href="https://github.com/indeedeng/iwf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iWF is an all-in-one platform for developing long-running business processes. It offers a convenient abstraction layer for utilizing databases, ElasticSearch, message queues, durable timers, and more, with a clean, simple, and user-friendly interface.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iWF project - main &amp;amp; server repo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/indeedeng/iwf&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/indeedeng/iwf.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/indeedeng/iwf&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/indeedeng/iwf&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/indeedeng/iwf/branch/main&#34;&gt;&lt;img src=&#34;https://codecov.io/github/indeedeng/iwf/coverage.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf/actions/workflows/ci-cadence-integ-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/indeedeng/iwf/actions/workflows/ci-cadence-integ-test.yml/badge.svg?branch=main&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/indeedeng/iwf/actions/workflows/ci-temporal-integ-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/indeedeng/iwf/actions/workflows/ci-temporal-integ-test.yml/badge.svg?branch=main&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;iWF will make you a 10x developer!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;iWF is an all-in-one platform for developing long-running business processes. It offers a convenient abstraction layer for utilizing databases, ElasticSearch, message queues, durable timers, and more, with a clean, simple, and user-friendly interface.&lt;/p&gt; &#xA;&lt;p&gt;iWF is a versatile WorkflowAsCode engine that is both simple and powerful. By utilizing &lt;a href=&#34;https://github.com/uber/cadence&#34;&gt;Cadence&lt;/a&gt;/&lt;a href=&#34;https://github.com/temporalio/temporal&#34;&gt;Temporal&lt;/a&gt; as an interpreter on the backend, iWF preserves all the capabilities of Cadence/Temporal, while maintaining the same level of scalability and reliability.&lt;/p&gt; &#xA;&lt;p&gt;Related projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf-idl&#34;&gt;OpenAPI definition between SDKs and server&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf-java-sdk&#34;&gt;iWF Java SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf-java-samples&#34;&gt;iWF Java Samples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf-java-samples/tree/main/src/main/java/io/iworkflow/workflow/subscription&#34;&gt;Product use case example: subscription&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iworkflowio/iwf-golang-sdk&#34;&gt;iWF Golang SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iworkflowio/iwf-golang-samples&#34;&gt;iWF Golang Samples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf-golang-samples/tree/main/workflows/subscription&#34;&gt;Product use case example: subscription&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Table of contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#community--help&#34;&gt;Community &amp;amp; Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#what-is-iwf&#34;&gt;What is iWF&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#basic-concepts&#34;&gt;Basic Concepts&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#workflow-and-workflowstate-definition&#34;&gt;Workflow and WorkflowState definition&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#workflow-execution-and-workflowstate-execution&#34;&gt;Workflow execution and WorkflowState execution&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#persistence&#34;&gt;Persistence&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#communication&#34;&gt;Communication&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#iwf-workflow-design-diagram&#34;&gt;Workflow Diagram&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#client-apis&#34;&gt;Client APIs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#advanced-concepts&#34;&gt;Advanced Concepts&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#why-iwf&#34;&gt;Why iWF&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#if-you-are-familiar-with-cadencetemporalaws-swfazure-durable-functions&#34;&gt;If you are familiar with Cadence/Temporal/AWS SWF/Azure Durable Functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#if-you-are-not&#34;&gt;If you are not&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#how-to-run-this-server&#34;&gt;How to run this server&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#using-docker-image--docker-compose&#34;&gt;Using docker image &amp;amp; docker-compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#how-to-build--run-locally&#34;&gt;How to build &amp;amp; run locally&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#how-to-use-in-production&#34;&gt;How to use in production&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#monitoring-and-operations&#34;&gt;Monitoring and Operations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#iwf-server&#34;&gt;iWF server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#iwf-application&#34;&gt;iWF application&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#troubleshooting&#34;&gt;Debug &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#operation&#34;&gt;Operation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#development-plan&#34;&gt;Development Plan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#how-to-migrate-from-cadencetemporal&#34;&gt;How to migrate from Cadence/Temporal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#some-history&#34;&gt;Some history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/CONTRIBUTING.md&#34;&gt;Contribution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#posts--articles--reference&#34;&gt;Posts &amp;amp; Articles&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Community &amp;amp; Help&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/iwfglobal/shared_invite/zt-1mgi9q6gw-aog6KBuTHFu1KolBerBaLA&#34;&gt;Slack Channels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf/discussions&#34;&gt;Github Discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/iwf&#34;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf/issues&#34;&gt;Github Issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What is iWF&lt;/h1&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;An iWF application is composed of several iWF workflow workers. These workers host two REST APIs for WorkflowState &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;decide&lt;/code&gt;. The application utilizes the iWF SDKs to communicate with an iWF server and perform actions on workflow executions, such as starting, stopping, signaling, and retrieving results&lt;/p&gt; &#xA;&lt;p&gt;The iWF server provides the APIs, which are also RESTful, as a iWF API service. Internally, this API service communicates with the Cadence/Temporal service as its backend.&lt;/p&gt; &#xA;&lt;p&gt;In addition to hosting the iWF API service, the iWF server includes Cadence/Temporal workers that host &lt;a href=&#34;https://github.com/indeedeng/iwf/raw/main/service/interpreter/workflowImpl.go&#34;&gt;an interpreter workflow&lt;/a&gt;. This interpreter workflow interprets any iWF workflows into the Cadence/Temporal workflow. It then invokes the two application worker APIs (WorkflowState &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;decide&lt;/code&gt;) through Cadence/Temporal activities. As a result, all REST API requests and responses are recorded as history events, which can be useful for debugging and troubleshooting purposes. This means that there&#39;s no need to replay the application workflow code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4523955/207514928-56fea636-c711-4f20-9e90-94ddd1c9844d.png&#34; alt=&#34;architecture diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://docs.google.com/document/d/1BpJuHf67ibaOWmN_uWw_pbrBVyb6U1PILXyzohxA5Ms/edit&#34;&gt;Design doc&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;Workflow and WorkflowState definition&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;em&gt;long-running process&lt;/em&gt; is called &lt;strong&gt;&lt;code&gt;Workflow&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;iWF enables the building of long-running applications by implementing the Workflow interface in either &lt;a href=&#34;https://github.com/iworkflowio/iwf-golang-sdk/raw/main/iwf/workflow.go&#34;&gt;Golang&lt;/a&gt; or &lt;a href=&#34;https://github.com/indeedeng/iwf-java-sdk/raw/main/src/main/java/io/iworkflow/core/Workflow.java&#34;&gt;Java&lt;/a&gt;. An implementation of the interface is referred to as a &lt;code&gt;WorkflowDefinition&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A WorkflowDefinition consists of multiple WorkflowStates, which can be implemented using either the &lt;a href=&#34;https://github.com/indeedeng/iwf-java-sdk/raw/main/src/main/java/io/iworkflow/core/WorkflowState.java&#34;&gt;Java WorkflowState interface&lt;/a&gt; or &lt;a href=&#34;https://github.com/iworkflowio/iwf-golang-sdk/raw/main/iwf/workflow_state.go&#34;&gt;Golang WorkflowState interface&lt;/a&gt;. A WorkflowState is implemented using two APIs: the &lt;code&gt;start&lt;/code&gt; API and the &lt;code&gt;decide&lt;/code&gt; API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;start&lt;/code&gt; API is invoked as soon as a WorkflowState is started. It returns a set of Commands to the server, and once these commands are completed, the &lt;code&gt;decide&lt;/code&gt; API is triggered. The number of commands can range from zero to multiple.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;decide&lt;/code&gt; API determines the next set of states to be executed. The next states can range from zero to multiple.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The same WorkflowState can be re-executed as different stateExecutions.&lt;/p&gt; &#xA;&lt;p&gt;The start/decide APIs can call any external APIs as part of the implementations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4523955/218195868-17818b58-0d00-4523-8cc6-df4c04526c0d.png&#34; alt=&#34;workflow diagram example&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Workflow execution and WorkflowState execution&lt;/h3&gt; &#xA;&lt;p&gt;An application can initiate a workflow instance for any WorkflowDefinition using a &lt;code&gt;workflowId&lt;/code&gt;. The instance of a workflow is referred to as a &lt;code&gt;WorkflowExecution&lt;/code&gt;. The iWF server returns a &lt;code&gt;runId&lt;/code&gt;, which is a universally unique identifier (UUID), as the identifier for the WorkflowExecution. The runId is guaranteed to be globally unique.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Note:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Depending on the context, the term &#34;workflow&#34; may refer to a WorkflowExecution (most commonly), a WorkflowDefinition, or both.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;For a running WorkflowExecution, there must be at least one WorkflowState being executed, and if there are none, the WorkflowExecution will be marked as completed. An instance of a WorkflowState&#39;s execution is referred to as a &lt;code&gt;StateExecution&lt;/code&gt; and is identified by a &lt;code&gt;StateExecutionId&lt;/code&gt;. The StateExecutionId is formatted as &lt;code&gt;&amp;lt;StateId&amp;gt;-&amp;lt;Number&amp;gt;&lt;/code&gt;, where the &lt;code&gt;StateId&lt;/code&gt; is defined by the WorkflowState definition and the &lt;code&gt;Number&lt;/code&gt; represents the number of times the StateId has been started. The StateExecutionId is unique only within the context of a specific WorkflowExecution.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;iWF provides three types of commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SignalCommand&lt;/code&gt;: will wait for a signal to be published to the workflow signal channel. External application can use SignalWorkflow API to signal a workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TimerCommand&lt;/code&gt;: will wait for a &lt;strong&gt;durable timer&lt;/strong&gt; to fire.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;InterStateChannelCommand&lt;/code&gt;: see &lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#advanced-commands&#34;&gt;InterStateChannelCommand&lt;/a&gt; as an advanced concept&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The start API can return multiple commands along with a DeciderTriggerType for how to trigger the decide API. The available options for the DeciderTriggerType are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AllCommandCompleted&lt;/code&gt;: This option waits for all commands to be completed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AnyCommandCompleted&lt;/code&gt;: This option waits for any of the commands to be completed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;AnyCommandCombinationCompleted&lt;/code&gt;: This option waits for any combination of the commands in a specified list to be completed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Persistence&lt;/h3&gt; &#xA;&lt;p&gt;iWF offers a highly simplified persistence abstraction, which eliminates the need for developers to interact with any database systems to register or maintain schemas. The only schema that needs to be defined is in the workflow code.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DataObject&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;are used for sharing data values across the workflow.&lt;/li&gt; &#xA;   &lt;li&gt;can be retrieved by external application using GetDataObjects API&lt;/li&gt; &#xA;   &lt;li&gt;can be viewed in Cadence/Temporal WebUI in QueryHandler tab&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SearchAttribute&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;are used for sharing data values across the workflow similarly to DataObjects&lt;/li&gt; &#xA;   &lt;li&gt;can be retrieved by external application using GetSearchAttributes API&lt;/li&gt; &#xA;   &lt;li&gt;are used for searching for workflows by external application using &lt;code&gt;SearchWorkflow&lt;/code&gt; API&lt;/li&gt; &#xA;   &lt;li&gt;are used for searching for workflows in Cadence/Temporal WebUI in Advanced tab&lt;/li&gt; &#xA;   &lt;li&gt;any search attribute type must be registered in Cadence/Temporal server before using for searching because it is backed up ElasticSearch&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://docs.temporal.io/concepts/what-is-a-search-attribute&#34;&gt;Temporal doc&lt;/a&gt; and &lt;a href=&#34;https://cadenceworkflow.io/docs/concepts/search-workflows/&#34;&gt;Cadence doc&lt;/a&gt; to understand more about SearchAttribute&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StateLocals&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;are used for passing data values from the &lt;code&gt;start&lt;/code&gt; API to the &lt;code&gt;decide&lt;/code&gt; API within the same StateExecution, thereby reducing the need to use DataObjects&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RecordEvents&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;are used to record events within the state execution and are useful for debugging using the Workflow history. They can be used to record the input and output of dependency RPC calls, for example&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Logically, each workflow type will have a persistence schema like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;+-------------+-------+-----------------+-----------------+----------------------+----------------------+-----+&#xA;| workflowId  | runId | dataObject key1 | dataObject key2 | searchAttribute key1 | searchAttribute key2 | ... |&#xA;+-------------+-------+-----------------+-----------------+----------------------+----------------------+-----+&#xA;| your-wf-id1 | uuid1 | valu1           | value2          | keyword-value1       | 123(integer)         | ... |&#xA;+-------------+-------+-----------------+-----------------+----------------------+----------------------+-----+&#xA;| your-wf-id1 | uuid2 | value3          | value4          | keyword-value2       | 456(integer)         | ... |&#xA;+-------------+-------+-----------------+-----------------+----------------------+----------------------+-----+&#xA;| your-wf-id2 | uuid3 | value5          | value5          | keyword-value3       | 789(integer)         | ... |&#xA;+-------------+-------+-----------------+-----------------+----------------------+----------------------+-----+&#xA;| ...         | ...   | ...             | ...             | ...                  | ...                  | ... |&#xA;+-------------+-------+-----------------+-----------------+----------------------+----------------------+-----+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Communication&lt;/h3&gt; &#xA;&lt;p&gt;iWF has two primary communication mechanisms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SignalChannel&lt;/code&gt;: is used for receiving input from external sources asynchronously. It is employed with the SignalCommand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;InterStateChannel&lt;/code&gt;: is used for communication between state executions. It is employed with the InterStateChannelCommand. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/#advanced-commands&#34;&gt;InterStateChannelCommand&lt;/a&gt; as an advanced concept&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;iWF workflow design diagram&lt;/h3&gt; &#xA;&lt;p&gt;When creating an iWF workflow, utilizing state diagrams similar to this template can be beneficial for visualizing the process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4523955/218195877-9c99f3ff-bba9-41db-86c6-e7352ed8b0f1.png&#34; alt=&#34;state diagram template&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example, the subscription workflow diagram:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf-java-samples/tree/main/src/main/java/io/iworkflow/workflow/subscription&#34;&gt;Java sample&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/indeedeng/iwf-golang-samples/tree/main/workflows/subscription&#34;&gt;Golang sample&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4523955/218195883-6d8c23ea-130a-481b-bb80-3e5bb3354176.png&#34; alt=&#34;subscription state diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Client APIs&lt;/h2&gt; &#xA;&lt;p&gt;Client APIs are hosted by iWF server for user workflow application to interact with their workflow executions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start workflow: start a new workflow execution&lt;/li&gt; &#xA; &lt;li&gt;Stop workflow: stop a workflow execution&lt;/li&gt; &#xA; &lt;li&gt;Signal workflow: send a signal to a workflow execution&lt;/li&gt; &#xA; &lt;li&gt;Search workflow: search for workflows using a query language like SQL with search attributes&lt;/li&gt; &#xA; &lt;li&gt;Get workflow: get basic information about a workflow like status and results(if completed or waiting for completed)&lt;/li&gt; &#xA; &lt;li&gt;Get workflow data objects: get the dataObjects of a workflow execution&lt;/li&gt; &#xA; &lt;li&gt;Get workflow search attributes: get the search attributes of a workflow execution&lt;/li&gt; &#xA; &lt;li&gt;Reset workflow: reset a workflow to previous states&lt;/li&gt; &#xA; &lt;li&gt;Skip timer: skip a timer of a workflow (usually for testing or operation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Concepts&lt;/h2&gt; &#xA;&lt;h3&gt;WorkflowOptions&lt;/h3&gt; &#xA;&lt;p&gt;iWF let you deeply customize the workflow behaviors with the below options.&lt;/p&gt; &#xA;&lt;h4&gt;IdReusePolicy for WorkflowId&lt;/h4&gt; &#xA;&lt;p&gt;At any given time, there can be only one WorkflowExecution running for a specific workflowId. A new WorkflowExecution can be initiated using the same workflowId by setting the appropriate &lt;code&gt;IdReusePolicy&lt;/code&gt; in WorkflowOptions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ALLOW_IF_NO_RUNNING&lt;/code&gt; or &lt;code&gt;ALLOW_DUPLICATE&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allow starting workflow if there is no execution running with the workflowId&lt;/li&gt; &#xA;   &lt;li&gt;This is the &lt;strong&gt;default policy&lt;/strong&gt; if not specified in WorkflowOptions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALLOW_IF_PREVIOUS_EXISTS_ABNORMALLY&lt;/code&gt; or &lt;code&gt;ALLOW_DUPLICATE_FAILED_ONLY&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allow starting workflow if a previous Workflow Execution with the same Workflow Id does not have a Completed status. Use this policy when there is a need to re-execute a Failed, Timed Out, Terminated or Cancelled workflow execution.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DISALLOW_REUSE&lt;/code&gt; or &lt;code&gt;REJECT_DUPLICATE&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Not allow to start a new workflow execution with the same workflowId.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TERMINATE_IF_RUNNING&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Always allow starting workflow no matter what -- iWF server will terminate the current running one if it exists.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: the names &lt;code&gt;ALLOW_DUPLICATE&lt;/code&gt;/&lt;code&gt;ALLOW_DUPLICATE_FAILED_ONLY&lt;/code&gt;/&lt;code&gt;REJECT_DUPLICATE&lt;/code&gt; are inherited from Cadence/Temporal but iWF provides more accurate names as alternatives.&lt;/p&gt; &#xA;&lt;h4&gt;CRON Schedule&lt;/h4&gt; &#xA;&lt;p&gt;iWF allows you to start a workflow with a fixed cron schedule like below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;// CronSchedule - Optional cron schedule for workflow. If a cron schedule is specified, the workflow will run&#xA;// as a cron based on the schedule. The scheduling will be based on UTC time. The schedule for the next run only happens&#xA;// after the current run is completed/failed/timeout. If a RetryPolicy is also supplied, and the workflow failed&#xA;// or timed out, the workflow will be retried based on the retry policy. While the workflow is retrying, it won&#39;t&#xA;// schedule its next run. If the next schedule is due while the workflow is running (or retrying), then it will skip&#xA;that&#xA;// schedule. Cron workflow will not stop until it is terminated or cancelled (by returning cadence.CanceledError).&#xA;// The cron spec is as follows:&#xA;// ┌───────────── minute (0 - 59)&#xA;// │ ┌───────────── hour (0 - 23)&#xA;// │ │ ┌───────────── day of the month (1 - 31)&#xA;// │ │ │ ┌───────────── month (1 - 12)&#xA;// │ │ │ │ ┌───────────── day of the week (0 - 6) (Sunday to Saturday)&#xA;// │ │ │ │ │&#xA;// │ │ │ │ │&#xA;// * * * * *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iWF also supports &lt;a href=&#34;https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format&#34;&gt;more advanced cron expressions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://crontab.guru/&#34;&gt;crontab guru&lt;/a&gt; site is useful for testing your cron expressions.&lt;/li&gt; &#xA; &lt;li&gt;To cancel a cron schedule, use terminate of cancel type to stop the workflow execution.&lt;/li&gt; &#xA; &lt;li&gt;By default, there is no cron schedule.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;RetryPolicy for workflow&lt;/h4&gt; &#xA;&lt;p&gt;Workflow execution can have a backoff retry policy which will retry on failed or timeout.&lt;/p&gt; &#xA;&lt;p&gt;By default, there is no retry policy.&lt;/p&gt; &#xA;&lt;h4&gt;Initial Search Attributes&lt;/h4&gt; &#xA;&lt;p&gt;Client can specify some initial search attributes when starting the workflow.&lt;/p&gt; &#xA;&lt;p&gt;By default, there is no initial search attributes.&lt;/p&gt; &#xA;&lt;h3&gt;WorkflowStateOptions&lt;/h3&gt; &#xA;&lt;p&gt;Similarly, users can customize the WorkflowState&lt;/p&gt; &#xA;&lt;h4&gt;Start/Decide API timeout and retry policy&lt;/h4&gt; &#xA;&lt;p&gt;Users can customize the API timeout and retry policy for WorkflowState Start and Decide API.&lt;/p&gt; &#xA;&lt;p&gt;By default, the API timeout is 30s with infinite backoff retry:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;InitialIntervalSeconds: 1&lt;/li&gt; &#xA; &lt;li&gt;MaxInternalSeconds:100&lt;/li&gt; &#xA; &lt;li&gt;MaximumAttempts: 0&lt;/li&gt; &#xA; &lt;li&gt;MaximumAttemptsDurationSeconds: 0&lt;/li&gt; &#xA; &lt;li&gt;BackoffCoefficient: 2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Where zero means infinite attempts.&lt;/p&gt; &#xA;&lt;p&gt;Both MaximumAttempts and MaximumAttemptsDurationSeconds are used for controlling the maximum attempts for the retry policy. MaximumAttempts is directly by number of attempts, where MaximumAttemptsDurationSeconds is by the total time duration of all attempts including retries. It will be capped to the minimum if both are provided.&lt;/p&gt; &#xA;&lt;h4&gt;Persistence loading policy&lt;/h4&gt; &#xA;&lt;p&gt;When a state API loads DataObjects/SearchAttributes, by default it will load everything which could cause size limit error for Cadence/Temporal activity input/output limit(2MB by default). User can use other loading policy &lt;code&gt;LOAD_PARTIAL_WITHOUT_LOCKING&lt;/code&gt; to specify certain DataObjects/SearchAttributes only to load for this WorkflowState.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WITHOUT_LOCKING&lt;/code&gt; here means if multiple StateExecutions try to upsert the same DataObject/SearchAttribute, they can be done in parallel without locking. iWF will provide more advanced policy to allow loading with &#34;locking&#34; in the future.&lt;/p&gt; &#xA;&lt;h4&gt;Start API failure policy&lt;/h4&gt; &#xA;&lt;p&gt;By default, the workflow execution will fail when Start/Decide API max out the retry attempts. In some cases that workflow want to ignore the errors.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;PROCEED_TO_DECIDE_ON_START_API_FAILURE&lt;/code&gt; for &lt;code&gt;StartApiFailurePolicy&lt;/code&gt; will let workflow continue to execute decide API when start API fails with maxing out all the retry attempts (therefore, you should override the default infinite retry attempts to a different number).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, WorkflowState can utilize &lt;code&gt;attempts&lt;/code&gt; or &lt;code&gt;firstAttemptTime&lt;/code&gt; from the context to decide ignore the exception/error.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Commands&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;InterStateChannelCommand&lt;/code&gt; is a command to wait for a value to be published from another state in the same workflow execution. It&#39;s for synchronizing the logic among multiple threads in a workflow. It&#39;s used with &lt;code&gt;InterStateChannel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, it can be used to let thread A to wait for thread B before thread A to continue.&lt;/p&gt; &#xA;&lt;h1&gt;Why iWF&lt;/h1&gt; &#xA;&lt;h2&gt;If you are familiar with Cadence/Temporal/AWS SWF/Azure Durable Functions&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://medium.com/@qlong/iwf-vs-cadence-temporal-1e11b35960fe&#34;&gt;iWF vs Cadence/Temporal&lt;/a&gt; for comparison with Cadence/Temporal.&lt;/p&gt; &#xA;&lt;p&gt;The article should still apply to AWS SWF and Azure Durable Functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AWS SWF is the predecessor of Cadence/Temporal and shares the same API, but its capabilities and features are more limited when compared. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For a comparison between SWF and Cadence, refer to &lt;a href=&#34;https://news.ycombinator.com/item?id=19733880.&#34;&gt;this post&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Azure Durable Functions shared the same programming model(replay based workflow execution engine) but also with limited features compared to Cadence/Temporal. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Additionally, it is recommended to read this &lt;a href=&#34;https://medium.com/@cgillum/common-pitfalls-with-durable-execution-frameworks-like-durable-functions-or-temporal-eaf635d4a8bb&#34;&gt;article&lt;/a&gt; about the pitfall about the programming model&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;If you are not&lt;/h2&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://medium.com/@qlong/iwf-vs-other-general-purposed-workflow-engines-f8f3e3d8993d&#34;&gt;article&lt;/a&gt; to understand difference between iWF and other workflow engines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WorkflowAsCode for highly flexible/customizable business logic, highly testable and easy to maintain&lt;/li&gt; &#xA; &lt;li&gt;Parallel execution of multiple threads of business&lt;/li&gt; &#xA; &lt;li&gt;Persistence storage for intermediate states stored as &#34;dataObjects&#34;&lt;/li&gt; &#xA; &lt;li&gt;Persistence searchable attributes that can be used for flexible searching, even full text searching, backed by ElasticSearch&lt;/li&gt; &#xA; &lt;li&gt;Receiving data from external system by Signal&lt;/li&gt; &#xA; &lt;li&gt;Durable timer, and cron job scheduling&lt;/li&gt; &#xA; &lt;li&gt;Reset workflow to let you recover the workflows from bad states easily&lt;/li&gt; &#xA; &lt;li&gt;Troubleshooting/debugging is easy&lt;/li&gt; &#xA; &lt;li&gt;Scalability/reliability&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to run this server&lt;/h1&gt; &#xA;&lt;h2&gt;Using docker image &amp;amp; docker-compose&lt;/h2&gt; &#xA;&lt;p&gt;Checkout this repo, go to the docker-compose folder and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd docker-compose &amp;amp;&amp;amp; docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This by default will run Temporal server with it. And it will also register a &lt;code&gt;default&lt;/code&gt; Temporal namespace and required search attributes by iWF. Link to the Temporal WebUI: &lt;a href=&#34;http://localhost:8233/namespaces/default/workflows&#34;&gt;http://localhost:8233/namespaces/default/workflows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, iWF server is serving port &lt;strong&gt;8801&lt;/strong&gt;, server URL is &lt;a href=&#34;http://localhost:8801/&#34;&gt;http://localhost:8801/&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;docker pull iworkflowio/iwf-server:latest&lt;/code&gt; to update the latest image.Or update the docker-compose file to specify the version tag.&lt;/p&gt; &#xA;&lt;h2&gt;How to build &amp;amp; run locally&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make bins&lt;/code&gt; to build the binary &lt;code&gt;iwf-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have registered the system search attributes required by iWF server: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Keyword: IwfWorkflowType&lt;/li&gt; &#xA;   &lt;li&gt;Int: IwfGlobalWorkflowVersion&lt;/li&gt; &#xA;   &lt;li&gt;Keyword: IwfExecutingStateIds&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/CONTRIBUTING.md&#34;&gt;Contribution&lt;/a&gt; for more detailed commands.&lt;/li&gt; &#xA;   &lt;li&gt;For Cadence without advancedVisibility enabled, set &lt;a href=&#34;https://github.com/indeedeng/iwf/raw/main/config/development_cadence.yaml#L8&#34;&gt;disableSystemSearchAttributes&lt;/a&gt; to true&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Then run &lt;code&gt;./iwf-server start&lt;/code&gt; to run the service . This defaults to serve workflows APIs with Temporal interpreter implementation. It requires to have local Temporal setup. See Run with local Temporal.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, run &lt;code&gt;./iwf-server --config config/development_cadence.yaml start&lt;/code&gt; to run with local Cadence. See below instructions for setting up local Cadence.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use in production&lt;/h2&gt; &#xA;&lt;p&gt;You can customize the docker image, or just use the &lt;a href=&#34;https://github.com/indeedeng/iwf/tree/main/service/api&#34;&gt;api&lt;/a&gt; and &lt;a href=&#34;https://github.com/indeedeng/iwf/tree/main/service/interpreter&#34;&gt;interpreter&lt;/a&gt; that are exposed as the api service and workflow service.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Also make sure you have registered the system search attributes required by iWF server: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Keyword: IwfWorkflowType&lt;/li&gt; &#xA;   &lt;li&gt;Int: IwfGlobalWorkflowVersion&lt;/li&gt; &#xA;   &lt;li&gt;Keyword: IwfExecutingStateIds&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/CONTRIBUTING.md&#34;&gt;Contribution&lt;/a&gt; for more detailed commands.&lt;/li&gt; &#xA;   &lt;li&gt;For Cadence without advancedVisibility enabled, set &lt;a href=&#34;https://github.com/indeedeng/iwf/raw/main/config/development_cadence.yaml#L8&#34;&gt;disableSystemSearchAttributes&lt;/a&gt; to true&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more info, contact &lt;a href=&#34;mailto:qlong.seattle@gmail.com&#34;&gt;qlong.seattle@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Monitoring and Operations&lt;/h1&gt; &#xA;&lt;h2&gt;iWF server&lt;/h2&gt; &#xA;&lt;p&gt;There are two components for iWF server: API service and interpreter worker service.&lt;/p&gt; &#xA;&lt;p&gt;For API service, set up monitors/dashboards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API availability&lt;/li&gt; &#xA; &lt;li&gt;API latency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The interpreter worker service is just a standard Cadence/Temporal workflow application. Follow the developer guides.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;a href=&#34;https://cadenceworkflow.io/docs/operation-guide/monitor/#cadence-application-monitoring&#34;&gt;Cadence to set up monitor/dashboards &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;a href=&#34;https://github.com/temporalio/dashboards&#34;&gt;Temporal to set up monitor/dashboards&lt;/a&gt; and &lt;a href=&#34;https://docs.temporal.io/references/sdk-metrics&#34;&gt;metrics definition&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;iWF application&lt;/h2&gt; &#xA;&lt;p&gt;As you may realize, iWF application is a typical REST microservice. You just need the standard ways to operate it.&lt;/p&gt; &#xA;&lt;p&gt;Usually, you need to set up monitors/dashboards:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;API availability&lt;/li&gt; &#xA; &lt;li&gt;API latency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to the workflow failure monitors. You can get it from Cadence/Temporal, or you need to emit it within the iWF workflow (since workflow failure is from a Decide API decision)&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;When something goes wrong in your applications, here are the tips:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use query handlers like (&lt;code&gt;DumpAllInternal&lt;/code&gt; or &lt;code&gt;GetCurrentTimerInfos&lt;/code&gt;) in Cadence/Temporal WebUI to quickly understand the current status of the workflows. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DumpAllInternal will return all the internal status or the pending states&lt;/li&gt; &#xA;   &lt;li&gt;GetCurrentTimerInfos will return all the timers of the pending states&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Let your worker service return error stacktrace as the response body to iWF server. E.g. like &lt;a href=&#34;https://github.com/indeedeng/iwf-java-samples/raw/2d500093e2aaecf2d728f78366fee776a73efd29/src/main/java/io/iworkflow/controller/IwfWorkerApiController.java#L51&#34;&gt;this example of Spring Boot using ExceptionHandler&lt;/a&gt; .&lt;/li&gt; &#xA; &lt;li&gt;If you return the full stacktrace in response body, the pending activity view will show it to you! Then use Cadence/Temporal WebUI to debug your application.&lt;/li&gt; &#xA; &lt;li&gt;All the input/output to your workflow are stored in the activity input/output of history event. The input is in &lt;code&gt;ActivityTaskScheduledEvent&lt;/code&gt;, output is in &lt;code&gt;ActivityTaskCompletedEvent&lt;/code&gt; or in pending activity view if having errors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operation&lt;/h2&gt; &#xA;&lt;p&gt;In additional of using Cadence/Temporal CLI, you can just use &lt;a href=&#34;https://raw.githubusercontent.com/indeedeng/iwf/main/script/http/local/home.http&#34;&gt;some HTTP script like this&lt;/a&gt; to operate on workflows to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start a workflow&lt;/li&gt; &#xA; &lt;li&gt;Stop a workflow&lt;/li&gt; &#xA; &lt;li&gt;Reset a workflow&lt;/li&gt; &#xA; &lt;li&gt;Skip a timer&lt;/li&gt; &#xA; &lt;li&gt;etc, any APIs supported by the &lt;a href=&#34;https://github.com/indeedeng/iwf-idl/raw/main/iwf.yaml&#34;&gt;iWF server API schema&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;How to migrate from Cadence/Temporal&lt;/h1&gt; &#xA;&lt;p&gt;Check this &lt;a href=&#34;https://github.com/indeedeng/iwf/wiki/How-to-migrate-from-Cadence-Temporal&#34;&gt;wiki&lt;/a&gt; for how to migrate from Cadence/Temporal.&lt;/p&gt; &#xA;&lt;h1&gt;Development Plan&lt;/h1&gt; &#xA;&lt;h3&gt;1.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Start workflow API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Executing start/decide APIs and completing workflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Parallel execution of multiple states&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Timer command&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Signal command&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SearchAttributeRW&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DataObjectRW&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; StateLocal&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Signal workflow API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get DataObjects/SearchAttributes API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get workflow info API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search workflow API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stop workflow API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reset workflow API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Command type(s) for inter-state communications (e.g. internal channel)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AnyCommandCompleted Decider trigger type&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More workflow start options: IdReusePolicy, cron schedule, retry&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; StateOption: Start/Decide API timeout and retry policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reset workflow by stateId or stateExecutionId&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; StateOption.PersistenceLoadingPolicy: LOAD_PARTIAL_WITHOUT_LOCKING&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.1&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More Search attribute types: Datetime, double, bool, keyword array, text&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More workflow start options: initial search attributes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.2&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Skip timer API for testing/operation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Decider trigger type: any command combination&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.3&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support failing workflow with results&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support differentiate different uncompleted workflow closed status for GetWorkflow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;1.4&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support PROCEED_TO_DECIDE_ON_START_API_FAILURE for StartApiFailurePolicy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Future&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Auto continueAsNew(&lt;a href=&#34;https://github.com/indeedeng/iwf/issues/107&#34;&gt;WIP&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; WaitForMoreResults in StateDecision&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; LongRunningActivityCommand&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More Decider trigger type&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Failing workflow details&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; StateOption.PersistenceLoadingPolicy: LOAD_ALL_WITH_EXCLUSIVE_LOCK and LOAD_PARTIAL_WITH_EXCLUSIVE_LOCK&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Some history&lt;/h1&gt; &#xA;&lt;p&gt;AWS introduced SWF in 2012, but later switched to Step Functions in 2016 because they found it difficult to support. Cadence and Temporal picked up where SWF left off and extend with more features and more robust, but keeping the same programming models. Programming with SWF/Cadence/Temporal is challenging because it exposes too many internal details. iWF was created to offer the same level of power as Cadence and Temporal, but with a clean and simple API that hides all the underlying complexity.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see the &lt;a href=&#34;https://docs.google.com/document/d/1zyCKvy4S2l7XBVJzZuS65OIsqV9CRPPYJY3OBbuWrPE&#34;&gt;document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img width=&#34;916&#34; alt=&#34;history diagram&#34; src=&#34;https://user-images.githubusercontent.com/4523955/201188875-32e1d070-ab53-4ac5-92fd-bb8ed16dd7dc.png&#34;&gt; &#xA;&lt;h1&gt;Posts &amp;amp; Articles &amp;amp; Reference&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Temporal adopted as &lt;a href=&#34;https://github.com/temporalio/awesome-temporal&#34;&gt;the first community drive DSL framework/abstraction&lt;/a&gt; of Temporal&lt;/li&gt; &#xA; &lt;li&gt;Cadence adopted in its &lt;a href=&#34;https://github.com/uber/cadence#cadence&#34;&gt;README&lt;/a&gt; , &lt;a href=&#34;https://cadenceworkflow.io/docs/get-started/#what-s-next&#34;&gt;official documentation&lt;/a&gt; and &lt;a href=&#34;https://cadenceworkflow.io/blog/2023/01/31/community-spotlight-january-2023/&#34;&gt;Cadence community spotlight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@qlong/a-letter-to-cadence-temporal-and-workflow-tech-community-b32e9fa97a0c&#34;&gt;A Letter to Cadence/Temporal, and Workflow Tech Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@qlong/iwf-vs-cadence-temporal-1e11b35960fe&#34;&gt;iWF vs Cadence/Temporal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@qlong/iwf-vs-other-general-purposed-workflow-engines-f8f3e3d8993d&#34;&gt;iWF vs other general purposed workflow Engines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.instaclustr.com/blog/cadence-iwf/?utm_content=1669999382&amp;amp;utm_medium=linkedin&amp;amp;utm_source=organicsocial&#34;&gt;Cadence® iWF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>pterm/pterm</title>
    <updated>2023-03-27T01:35:36Z</updated>
    <id>tag:github.com,2023-03-27:/pterm/pterm</id>
    <link href="https://github.com/pterm/pterm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;✨ #PTerm is a modern Go module to easily beautify console output. Featuring charts, progressbars, tables, trees, text input, select menus and much more 🚀 It&#39;s completely configurable and 100% cross-platform compatible.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;💻 PTerm | Pretty Terminal Printer&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A modern Go framework to make beautiful CLIs&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pterm/pterm/releases&#34; style=&#34;text-decoration: none&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/pterm/pterm?style=flat-square&#34; alt=&#34;Latest Release&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/pterm/pterm/stargazers&#34; style=&#34;text-decoration: none&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/pterm/pterm.svg?style=flat-square&#34; alt=&#34;Stars&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/pterm/pterm/fork&#34; style=&#34;text-decoration: none&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/pterm/pterm.svg?style=flat-square&#34; alt=&#34;Forks&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34; style=&#34;text-decoration: none&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?style=flat-square&#34; alt=&#34;License: MIT&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/pterm/pterm&#34; style=&#34;text-decoration: none&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/gh/pterm/pterm?color=magenta&amp;amp;logo=codecov&amp;amp;style=flat-square&#34; alt=&#34;Downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/pterm/pterm&#34; style=&#34;text-decoration: none&#34;&gt; &#xA;  &lt;!-- unittestcount:start --&gt;&lt;img src=&#34;https://img.shields.io/badge/Unit_Tests-28774-magenta?style=flat-square&#34; alt=&#34;Forks&#34;&gt;&#xA;  &lt;!-- unittestcount:end --&gt; &lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/pterm/pterm/releases&#34; style=&#34;text-decoration: none&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-windows%20%7C%20macos%20%7C%20linux-informational?style=for-the-badge&#34; alt=&#34;Downloads&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/demo/demo&#34; style=&#34;text-decoration: none&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/demo/demo/animation.svg?sanitize=true&#34; alt=&#34;PTerm&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/demo/demo&#34; style=&#34;text-decoration: none&#34;&gt;Show Demo Code&lt;/a&gt;&lt;/p&gt;&#xA;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/demo/demo&#34; style=&#34;text-decoration: none&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://pterm.sh&#34;&gt;PTerm.sh&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pterm/pterm/master/#-installation&#34;&gt;Installation&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://docs.pterm.sh/getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://docs.pterm.sh/&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples&#34;&gt;Examples&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://github.com/pterm/pterm/discussions?discussions_q=category%3AQ%26A&#34;&gt;Q&amp;amp;A&lt;/a&gt;&lt;/strong&gt; | &lt;strong&gt;&lt;a href=&#34;https://discord.gg/vE2dNkfAmF&#34;&gt;Discord&lt;/a&gt;&lt;/strong&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;To make PTerm available in your project, you can run the following command.&lt;br&gt; Make sure to run this command inside your project, when you&#39;re using go modules 😉&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/pterm/pterm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to create a CLI tool, make sure to check out our &lt;a href=&#34;https://github.com/pterm/cli-template&#34;&gt;cli-template&lt;/a&gt;, which features automatic website generation, automatic deployments, a custom CI-System and much more!&lt;/p&gt; &#xA;&lt;h2&gt;⭐ Main Features&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🪀 Easy to use&lt;/td&gt; &#xA;   &lt;td&gt;Our first priority is to keep PTerm as easy to use as possible.&lt;br&gt; With many &lt;a href=&#34;https://raw.githubusercontent.com/pterm/pterm/master/#-examples&#34;&gt;examples&lt;/a&gt; for each individual component, getting started with PTerm is extremely easy.&lt;br&gt; All components are similar in design and implement interfaces to simplify mixing individual components together.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🤹‍♀️ Cross-Platform&lt;/td&gt; &#xA;   &lt;td&gt;We take special precautions to ensure that PTerm works on as many operating systems and terminals as possible.&lt;br&gt; Whether it&#39;s &lt;code&gt;Windows CMD&lt;/code&gt;, &lt;code&gt;macOS iTerm2&lt;/code&gt; or in the backend (for example inside a &lt;code&gt;GitHub Action&lt;/code&gt; or other CI systems), PTerm &lt;strong&gt;guarantees&lt;/strong&gt; beautiful output!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🧪 Well tested&lt;/td&gt; &#xA;   &lt;td&gt;PTerm has a 100% test coverage, which means that every line of code inside PTerm gets tested automatically&lt;br&gt;We test PTerm continuously. However, since a human cannot test everything all the time, we have our own test system with which we currently run &#xA;    &lt;!-- unittestcount2:start --&gt;&lt;strong&gt;&lt;code&gt;28774&lt;/code&gt;&lt;/strong&gt;&#xA;    &lt;!-- unittestcount2:end --&gt;automated tests to ensure that PTerm has no bugs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✨ Consistent Colors&lt;/td&gt; &#xA;   &lt;td&gt;PTerm uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/ANSI_escape_code#3/4_bit&#34;&gt;ANSI color scheme&lt;/a&gt; which is widely used by terminals to ensure consistent colors in different terminal themes.&lt;br&gt;If that&#39;s not enough, PTerm can be used to access the full RGB color scheme (16 million colors) in terminals that support &lt;code&gt;TrueColor&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📚 Component system&lt;/td&gt; &#xA;   &lt;td&gt;PTerm consists of many components, called &lt;code&gt;Printers&lt;/code&gt;, which can be used individually or together to generate pretty console output.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🛠 Configurable&lt;/td&gt; &#xA;   &lt;td&gt;PTerm can be used by without any configuration. However, you can easily configure each component with little code, so everyone has the freedom to design their own terminal output.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✏ Documentation&lt;/td&gt; &#xA;   &lt;td&gt;To view the official documentation of the latest release, you can go to the automatically generated page of &lt;a href=&#34;https://pkg.go.dev/github.com/pterm/pterm#section-documentation&#34;&gt;pkg.go.dev&lt;/a&gt; This documentation is very technical and includes every method that can be used in PTerm.&lt;br&gt;&lt;strong&gt;For an easy start we recommend that you take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/pterm/pterm/master/#-examples&#34;&gt;examples section&lt;/a&gt;.&lt;/strong&gt; Here you can see pretty much every feature of PTerm with example code. The animations of the examples are automatically updated as soon as something changes in PTerm.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Printers (Components)&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Feature&lt;/th&gt; &#xA;    &lt;th&gt;Examples&lt;/th&gt; &#xA;    &lt;th&gt;-&lt;/th&gt; &#xA;    &lt;th&gt;Feature&lt;/th&gt; &#xA;    &lt;th&gt;Examples&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Bar Charts&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/barchart&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;RGB&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/coloring&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;BigText&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/bigtext&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;Sections&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/section&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Box&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/box&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;Spinners&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/spinner&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Bullet Lists&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/bulletlist&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;Trees&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/tree&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Centered&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/center&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;Theming&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/theme&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Colors&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/coloring&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;Tables&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/table&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Headers&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/header&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;Styles&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/style&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Panels&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/panel&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;Area&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/area&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Paragraphs&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/paragraph&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Prefixes&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/prefix&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Progress Bars&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples/progressbar&#34;&gt;Examples&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;-&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;🦸‍♂️ Supporters&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;-&lt;/th&gt; &#xA;    &lt;th&gt;User&lt;/th&gt; &#xA;    &lt;th&gt;💸&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1292368?s=25&#34; alt=&#34;Jens Lauterbach&#34;&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/jenslauterbach&#34;&gt;@jenslauterbach&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;25$&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;🧪 Examples&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34;&gt; &lt;img width=&#34;2000&#34; height=&#34;0&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/pterm/pterm/tree/master/_examples&#34;&gt;‼️ You can find all the examples, in a much better structure and their source code, in &#34;_examples&#34; ‼️&lt;/a&gt;&lt;br&gt; &lt;sub&gt;Click on the link above to show the examples folder.&lt;/sub&gt; &lt;img width=&#34;2000&#34; height=&#34;0&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;!-- examples:start --&gt; &#xA;&lt;h3&gt;area/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/area/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;pterm.Info.Println(&#34;The previous text will stay in place, while the area updates.&#34;)&#xA;&#x9;pterm.Print(&#34;\n\n&#34;) // Add two new lines as spacer.&#xA;&#xA;&#x9;area, _ := pterm.DefaultArea.WithCenter().Start() // Start the Area printer, with the Center option.&#xA;&#x9;for i := 0; i &amp;lt; 10; i++ {&#xA;&#x9;&#x9;str, _ := pterm.DefaultBigText.WithLetters(pterm.NewLettersFromString(time.Now().Format(&#34;15:04:05&#34;))).Srender() // Save current time in str.&#xA;&#x9;&#x9;area.Update(str)                                                                                                // Update Area contents.&#xA;&#x9;&#x9;time.Sleep(time.Second)&#xA;&#x9;}&#xA;&#x9;area.Stop()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;barchart/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/barchart/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;positiveBars := pterm.Bars{&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Bar 1&#34;,&#xA;&#x9;&#x9;&#x9;Value: 5,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Bar 2&#34;,&#xA;&#x9;&#x9;&#x9;Value: 3,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Longer Label&#34;,&#xA;&#x9;&#x9;&#x9;Value: 7,&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#xA;&#x9;pterm.Info.Println(&#34;Chart example with positive only values (bars use 100% of chart area)&#34;)&#xA;&#x9;_ = pterm.DefaultBarChart.WithBars(positiveBars).Render()&#xA;&#x9;_ = pterm.DefaultBarChart.WithHorizontal().WithBars(positiveBars).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;barchart/mixed-values&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/barchart/mixed-values/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;mixedBars := pterm.Bars{&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Bar 1&#34;,&#xA;&#x9;&#x9;&#x9;Value: 2,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Bar 2&#34;,&#xA;&#x9;&#x9;&#x9;Value: -3,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Bar 3&#34;,&#xA;&#x9;&#x9;&#x9;Value: -2,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Bar 4&#34;,&#xA;&#x9;&#x9;&#x9;Value: 5,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Longer Label&#34;,&#xA;&#x9;&#x9;&#x9;Value: 7,&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#xA;&#x9;pterm.DefaultSection.Println(&#34;Chart example with mixed values (note screen space usage in case when ABSOLUTE values of negative and positive parts are differ too much)&#34;)&#xA;&#x9;_ = pterm.DefaultBarChart.WithBars(mixedBars).WithShowValue().Render()&#xA;&#x9;_ = pterm.DefaultBarChart.WithHorizontal().WithBars(mixedBars).WithShowValue().Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;barchart/negative-values&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/barchart/negative-values/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;negativeBars := pterm.Bars{&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Bar 1&#34;,&#xA;&#x9;&#x9;&#x9;Value: -5,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Bar 2&#34;,&#xA;&#x9;&#x9;&#x9;Value: -3,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;pterm.Bar{&#xA;&#x9;&#x9;&#x9;Label: &#34;Longer Label&#34;,&#xA;&#x9;&#x9;&#x9;Value: -7,&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#xA;&#x9;pterm.Info.Println(&#34;Chart example with negative only values (bars use 100% of chart area)&#34;)&#xA;&#x9;_ = pterm.DefaultBarChart.WithBars(negativeBars).WithShowValue().Render()&#xA;&#x9;_ = pterm.DefaultBarChart.WithHorizontal().WithBars(negativeBars).WithShowValue().Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;basictext/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/basictext/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// A BasicText printer is used to print text, without special formatting.&#xA;&#x9;// As it implements the TextPrinter interface, you can use it in combination with other printers.&#xA;&#x9;pterm.DefaultBasicText.Println(&#34;Default basic text printer.&#34;)&#xA;&#x9;pterm.DefaultBasicText.Println(&#34;Can be used in any&#34; + pterm.LightMagenta(&#34; TextPrinter &#34;) + &#34;context.&#34;)&#xA;&#x9;pterm.DefaultBasicText.Println(&#34;For example to resolve progressbars and spinners.&#34;)&#xA;&#x9;// If you just want to print text, you should use this instead:&#xA;&#x9;// &#x9;pterm.Println(&#34;Hello, World!&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;bigtext/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/bigtext/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;&#x9;&#34;github.com/pterm/pterm/putils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Print a large text with the LetterStyle from the standard theme.&#xA;&#x9;// Useful for title screens.&#xA;&#x9;pterm.DefaultBigText.WithLetters(putils.LettersFromString(&#34;PTerm&#34;)).Render()&#xA;&#xA;&#x9;// Print a large text with differently colored letters.&#xA;&#x9;pterm.DefaultBigText.WithLetters(&#xA;&#x9;&#x9;putils.LettersFromStringWithStyle(&#34;P&#34;, pterm.NewStyle(pterm.FgCyan)),&#xA;&#x9;&#x9;putils.LettersFromStringWithStyle(&#34;Term&#34;, pterm.NewStyle(pterm.FgLightMagenta))).&#xA;&#x9;&#x9;Render()&#xA;&#xA;&#x9;// LettersFromStringWithRGB can be used to create a large text with a specific RGB color.&#xA;&#x9;pterm.DefaultBigText.WithLetters(&#xA;&#x9;&#x9;putils.LettersFromStringWithRGB(&#34;PTerm&#34;, pterm.NewRGB(255, 215, 0))).&#xA;&#x9;&#x9;Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;box/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/box/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;pterm.Info.Println(&#34;This might not be rendered correctly on GitHub,\nbut it will work in a real terminal.\nThis is because GitHub does not use a monospaced font by default for SVGs&#34;)&#xA;&#xA;&#x9;panel1 := pterm.DefaultBox.Sprint(&#34;Lorem ipsum dolor sit amet,\nconsectetur adipiscing elit,\nsed do eiusmod tempor incididunt\nut labore et dolore\nmagna aliqua.&#34;)&#xA;&#x9;panel2 := pterm.DefaultBox.WithTitle(&#34;title&#34;).Sprint(&#34;Ut enim ad minim veniam,\nquis nostrud exercitation\nullamco laboris\nnisi ut aliquip\nex ea commodo\nconsequat.&#34;)&#xA;&#x9;panel3 := pterm.DefaultBox.WithTitle(&#34;bottom center title&#34;).WithTitleBottomCenter().Sprint(&#34;Duis aute irure\ndolor in reprehenderit\nin voluptate velit esse cillum\ndolore eu fugiat\nnulla pariatur.&#34;)&#xA;&#xA;&#x9;panels, _ := pterm.DefaultPanel.WithPanels(pterm.Panels{&#xA;&#x9;&#x9;{{Data: panel1}, {Data: panel2}},&#xA;&#x9;&#x9;{{Data: panel3}},&#xA;&#x9;}).Srender()&#xA;&#xA;&#x9;pterm.DefaultBox.WithTitle(&#34;Lorem Ipsum&#34;).WithTitleBottomRight().WithRightPadding(0).WithBottomPadding(0).Println(panels)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;bulletlist/customized&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/bulletlist/customized/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Print a customized list with different styles and levels.&#xA;&#x9;pterm.DefaultBulletList.WithItems([]pterm.BulletListItem{&#xA;&#x9;&#x9;{Level: 0, Text: &#34;Blue&#34;, TextStyle: pterm.NewStyle(pterm.FgBlue), BulletStyle: pterm.NewStyle(pterm.FgRed)},&#xA;&#x9;&#x9;{Level: 1, Text: &#34;Green&#34;, TextStyle: pterm.NewStyle(pterm.FgGreen), Bullet: &#34;-&#34;, BulletStyle: pterm.NewStyle(pterm.FgLightWhite)},&#xA;&#x9;&#x9;{Level: 2, Text: &#34;Cyan&#34;, TextStyle: pterm.NewStyle(pterm.FgCyan), Bullet: &#34;&amp;gt;&#34;, BulletStyle: pterm.NewStyle(pterm.FgYellow)},&#xA;&#x9;}).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;bulletlist/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/bulletlist/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;&#x9;&#34;github.com/pterm/pterm/putils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Print a list with different levels.&#xA;&#x9;// Useful to generate lists automatically from data.&#xA;&#x9;pterm.DefaultBulletList.WithItems([]pterm.BulletListItem{&#xA;&#x9;&#x9;{Level: 0, Text: &#34;Level 0&#34;},&#xA;&#x9;&#x9;{Level: 1, Text: &#34;Level 1&#34;},&#xA;&#x9;&#x9;{Level: 2, Text: &#34;Level 2&#34;},&#xA;&#x9;}).Render()&#xA;&#xA;&#x9;// Convert a text to a list and print it.&#xA;&#x9;putils.BulletListFromString(`0&#xA; 1&#xA;  2&#xA;   3`, &#34; &#34;).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;center/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/center/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;pterm.DefaultCenter.Println(&#34;This text is centered!\nIt centeres the whole block by default.\nIn that way you can do stuff like this:&#34;)&#xA;&#xA;&#x9;// Generate BigLetters&#xA;&#x9;s, _ := pterm.DefaultBigText.WithLetters(pterm.NewLettersFromString(&#34;PTerm&#34;)).Srender()&#xA;&#x9;pterm.DefaultCenter.Println(s) // Print BigLetters with the default CenterPrinter&#xA;&#xA;&#x9;pterm.DefaultCenter.WithCenterEachLineSeparately().Println(&#34;This text is centered!\nBut each line is\ncentered\nseparately&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;coloring/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/coloring/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Print all colors&#xA;&#xA;&#x9;pterm.DefaultTable.WithData([][]string{&#xA;&#x9;&#x9;{pterm.FgBlack.Sprint(&#34;Black&#34;), pterm.FgRed.Sprint(&#34;Red&#34;), pterm.FgGreen.Sprint(&#34;Green&#34;), pterm.FgYellow.Sprint(&#34;Yellow&#34;)},&#xA;&#x9;&#x9;{&#34;&#34;, pterm.FgLightRed.Sprint(&#34;Light Red&#34;), pterm.FgLightGreen.Sprint(&#34;Light Green&#34;), pterm.FgLightYellow.Sprint(&#34;Light Yellow&#34;)},&#xA;&#x9;&#x9;{pterm.BgBlack.Sprint(&#34;Black&#34;), pterm.BgRed.Sprint(&#34;Red&#34;), pterm.BgGreen.Sprint(&#34;Green&#34;), pterm.BgYellow.Sprint(&#34;Yellow&#34;)},&#xA;&#x9;&#x9;{&#34;&#34;, pterm.BgLightRed.Sprint(&#34;Light Red&#34;), pterm.BgLightGreen.Sprint(&#34;Light Green&#34;), pterm.BgLightYellow.Sprint(&#34;Light Yellow&#34;)},&#xA;&#x9;&#x9;{pterm.FgBlue.Sprint(&#34;Blue&#34;), pterm.FgMagenta.Sprint(&#34;Magenta&#34;), pterm.FgCyan.Sprint(&#34;Cyan&#34;), pterm.FgWhite.Sprint(&#34;White&#34;)},&#xA;&#x9;&#x9;{pterm.FgLightBlue.Sprint(&#34;Light Blue&#34;), pterm.FgLightMagenta.Sprint(&#34;Light Magenta&#34;), pterm.FgLightCyan.Sprint(&#34;Light Cyan&#34;), pterm.FgLightWhite.Sprint(&#34;Light White&#34;)},&#xA;&#x9;&#x9;{pterm.BgBlue.Sprint(&#34;Blue&#34;), pterm.BgMagenta.Sprint(&#34;Magenta&#34;), pterm.BgCyan.Sprint(&#34;Cyan&#34;), pterm.BgWhite.Sprint(&#34;White&#34;)},&#xA;&#x9;&#x9;{pterm.BgLightBlue.Sprint(&#34;Light Blue&#34;), pterm.BgLightMagenta.Sprint(&#34;Light Magenta&#34;), pterm.BgLightCyan.Sprint(&#34;Light Cyan&#34;), pterm.BgLightWhite.Sprint(&#34;Light White&#34;)},&#xA;&#x9;}).Render()&#xA;&#xA;&#x9;pterm.Println()&#xA;&#xA;&#x9;// Print different colored words.&#xA;&#x9;pterm.Println(pterm.Red(&#34;Hello, &#34;) + pterm.Green(&#34;World&#34;) + pterm.Cyan(&#34;!&#34;))&#xA;&#x9;pterm.Println(pterm.Red(&#34;Even &#34; + pterm.Cyan(&#34;nested &#34;) + pterm.Green(&#34;colors &#34;) + &#34;are supported!&#34;))&#xA;&#xA;&#x9;pterm.Println()&#xA;&#xA;&#x9;// Or print colors as a style&#xA;&#x9;style := pterm.NewStyle(pterm.BgRed, pterm.FgLightGreen, pterm.Bold)&#xA;&#x9;style.Println(&#34;This text uses a style and is bold and light green with a red background!&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;coloring/disable-output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/coloring/disable-output/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;for i := 0; i &amp;lt; 15; i++ {&#xA;&#x9;&#x9;switch i {&#xA;&#x9;&#x9;case 5:&#xA;&#x9;&#x9;&#x9;pterm.Info.Println(&#34;Disabled Output!&#34;)&#xA;&#x9;&#x9;&#x9;pterm.DisableOutput()&#xA;&#x9;&#x9;case 10:&#xA;&#x9;&#x9;&#x9;pterm.EnableOutput()&#xA;&#x9;&#x9;&#x9;pterm.Info.Println(&#34;Enabled Output!&#34;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;pterm.Printf(&#34;Printing something... [%d/%d]\n&#34;, i, 15)&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;coloring/fade-colors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/coloring/fade-colors/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Print info.&#xA;&#x9;pterm.Info.Println(&#34;RGB colors only work in Terminals which support TrueColor.&#34;)&#xA;&#xA;&#x9;from := pterm.NewRGB(0, 255, 255) // This RGB value is used as the gradients start point.&#xA;&#x9;to := pterm.NewRGB(255, 0, 255)   // This RGB value is used as the gradients end point.&#xA;&#xA;&#x9;// For loop over the range of the terminal height.&#xA;&#x9;for i := 0; i &amp;lt; pterm.GetTerminalHeight()-2; i++ {&#xA;&#x9;&#x9;// Print string which is colored with the faded RGB value.&#xA;&#x9;&#x9;from.Fade(0, float32(pterm.GetTerminalHeight()-2), float32(i), to).Println(&#34;Hello, World!&#34;)&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;coloring/fade-multiple-colors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/coloring/fade-multiple-colors/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;strings&#34;&#xA;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;from := pterm.NewRGB(0, 255, 255)  // This RGB value is used as the gradients start point.&#xA;&#x9;to := pterm.NewRGB(255, 0, 255)    // This RGB value is used as the gradients first point.&#xA;&#x9;to2 := pterm.NewRGB(255, 0, 0)     // This RGB value is used as the gradients second point.&#xA;&#x9;to3 := pterm.NewRGB(0, 255, 0)     // This RGB value is used as the gradients third point.&#xA;&#x9;to4 := pterm.NewRGB(255, 255, 255) // This RGB value is used as the gradients end point.&#xA;&#xA;&#x9;str := &#34;RGB colors only work in Terminals which support TrueColor.&#34;&#xA;&#x9;strs := strings.Split(str, &#34;&#34;)&#xA;&#x9;var fadeInfo string // String which will be used to print info.&#xA;&#x9;// For loop over the range of the string length.&#xA;&#x9;for i := 0; i &amp;lt; len(str); i++ {&#xA;&#x9;&#x9;// Append faded letter to info string.&#xA;&#x9;&#x9;fadeInfo += from.Fade(0, float32(len(str)), float32(i), to).Sprint(strs[i])&#xA;&#x9;}&#xA;&#xA;&#x9;// Print info.&#xA;&#x9;pterm.Info.Println(fadeInfo)&#xA;&#xA;&#x9;// For loop over the range of the terminal height.&#xA;&#x9;for i := 0; i &amp;lt; pterm.GetTerminalHeight()-2; i++ {&#xA;&#x9;&#x9;// Print string which is colored with the faded RGB value.&#xA;&#x9;&#x9;from.Fade(0, float32(pterm.GetTerminalHeight()-2), float32(i), to, to2, to3, to4).Println(&#34;Hello, World!&#34;)&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;coloring/override-default-printers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/coloring/override-default-printers/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Print default error.&#xA;&#x9;pterm.Error.Println(&#34;This is the default Error&#34;)&#xA;&#xA;&#x9;// Customize default error.&#xA;&#x9;pterm.Error.Prefix = pterm.Prefix{&#xA;&#x9;&#x9;Text:  &#34;OVERRIDE&#34;,&#xA;&#x9;&#x9;Style: pterm.NewStyle(pterm.BgCyan, pterm.FgRed),&#xA;&#x9;}&#xA;&#xA;&#x9;// Print new default error.&#xA;&#x9;pterm.Error.Println(&#34;This is the default Error after the prefix was overridden&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;coloring/print-color-rgb&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/coloring/print-color-rgb/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Print strings with a custom RGB color.&#xA;&#x9;// NOTICE: This only works with terminals which support TrueColor.&#xA;&#x9;pterm.NewRGB(178, 44, 199).Println(&#34;This text is printed with a custom RGB!&#34;)&#xA;&#x9;pterm.NewRGB(15, 199, 209).Println(&#34;This text is printed with a custom RGB!&#34;)&#xA;&#x9;pterm.NewRGB(201, 144, 30).Println(&#34;This text is printed with a custom RGB!&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;demo/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/demo/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;flag&#34;&#xA;&#x9;&#34;math/rand&#34;&#xA;&#x9;&#34;reflect&#34;&#xA;&#x9;&#34;strconv&#34;&#xA;&#x9;&#34;strings&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;&#x9;&#34;github.com/pterm/pterm/putils&#34;&#xA;)&#xA;&#xA;// Speed the demo up, by setting this flag.&#xA;// Usefull for debugging.&#xA;// Example:&#xA;//   go run main.go -speedup&#xA;var speedup = flag.Bool(&#34;speedup&#34;, false, &#34;Speed up the demo&#34;)&#xA;var skipIntro = flag.Bool(&#34;skip-intro&#34;, false, &#34;Skips the intro&#34;)&#xA;var second = time.Second&#xA;&#xA;var pseudoProgramList = strings.Split(&#34;pseudo-excel pseudo-photoshop pseudo-chrome pseudo-outlook pseudo-explorer &#34;+&#xA;&#x9;&#34;pseudo-git pseudo-vsc pseudo-intellij pseudo-minecraft pseudo-scoop pseudo-chocolatey&#34;, &#34; &#34;)&#xA;&#xA;func main() {&#xA;&#x9;setup() // Setup the demo (flags etc.)&#xA;&#xA;&#x9;// Show intro&#xA;&#x9;if !*skipIntro {&#xA;&#x9;&#x9;introScreen()&#xA;&#x9;&#x9;clear()&#xA;&#x9;}&#xA;&#xA;&#x9;showcase(&#34;Progress bar&#34;, 2, func() {&#xA;&#x9;&#x9;pb, _ := pterm.DefaultProgressbar.WithTotal(len(pseudoProgramList)).WithTitle(&#34;Installing stuff&#34;).Start()&#xA;&#x9;&#x9;for i := 0; i &amp;lt; pb.Total; i++ {&#xA;&#x9;&#x9;&#x9;pb.UpdateTitle(&#34;Installing &#34; + pseudoProgramList[i])&#xA;&#x9;&#x9;&#x9;if pseudoProgramList[i] == &#34;pseudo-minecraft&#34; {&#xA;&#x9;&#x9;&#x9;&#x9;pterm.Warning.Println(&#34;Could not install pseudo-minecraft\nThe company policy forbids games.&#34;)&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;pterm.Success.Println(&#34;Installing &#34; + pseudoProgramList[i])&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;pb.Increment()&#xA;&#x9;&#x9;&#x9;time.Sleep(second / 2)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;pb.Stop()&#xA;&#x9;})&#xA;&#xA;&#x9;showcase(&#34;Spinner&#34;, 2, func() {&#xA;&#x9;&#x9;list := pseudoProgramList[7:]&#xA;&#x9;&#x9;spinner, _ := pterm.DefaultSpinner.Start(&#34;Installing stuff&#34;)&#xA;&#x9;&#x9;for i := 0; i &amp;lt; len(list); i++ {&#xA;&#x9;&#x9;&#x9;spinner.UpdateText(&#34;Installing &#34; + list[i])&#xA;&#x9;&#x9;&#x9;if list[i] == &#34;pseudo-minecraft&#34; {&#xA;&#x9;&#x9;&#x9;&#x9;pterm.Warning.Println(&#34;Could not install pseudo-minecraft\nThe company policy forbids games.&#34;)&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;pterm.Success.Println(&#34;Installing &#34; + list[i])&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;time.Sleep(second)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;spinner.Success()&#xA;&#x9;})&#xA;&#xA;&#x9;showcase(&#34;Live Output&#34;, 2, func() {&#xA;&#x9;&#x9;pterm.Info.Println(&#34;You can use an Area to display changing output:&#34;)&#xA;&#x9;&#x9;pterm.Println()&#xA;&#x9;&#x9;area, _ := pterm.DefaultArea.WithCenter().Start() // Start the Area printer, with the Center option.&#xA;&#x9;&#x9;for i := 0; i &amp;lt; 10; i++ {&#xA;&#x9;&#x9;&#x9;str, _ := pterm.DefaultBigText.WithLetters(putils.LettersFromString(time.Now().Format(&#34;15:04:05&#34;))).Srender() // Save current time in str.&#xA;&#x9;&#x9;&#x9;area.Update(str)                                                                                              // Update Area contents.&#xA;&#x9;&#x9;&#x9;time.Sleep(time.Second)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;area.Stop()&#xA;&#x9;})&#xA;&#xA;&#x9;showcase(&#34;Tables&#34;, 4, func() {&#xA;&#x9;&#x9;for i := 0; i &amp;lt; 3; i++ {&#xA;&#x9;&#x9;&#x9;pterm.Println()&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;td := [][]string{&#xA;&#x9;&#x9;&#x9;{&#34;Library&#34;, &#34;Description&#34;},&#xA;&#x9;&#x9;&#x9;{&#34;PTerm&#34;, &#34;Make beautiful CLIs&#34;},&#xA;&#x9;&#x9;&#x9;{&#34;Testza&#34;, &#34;Programmer friendly test framework&#34;},&#xA;&#x9;&#x9;&#x9;{&#34;Cursor&#34;, &#34;Move the cursor around the terminal&#34;},&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;table, _ := pterm.DefaultTable.WithHasHeader().WithData(td).Srender()&#xA;&#x9;&#x9;boxedTable, _ := pterm.DefaultTable.WithHasHeader().WithData(td).WithBoxed().Srender()&#xA;&#x9;&#x9;pterm.DefaultCenter.Println(table)&#xA;&#x9;&#x9;pterm.DefaultCenter.Println(boxedTable)&#xA;&#x9;})&#xA;&#xA;&#x9;showcase(&#34;Default Prefix Printers&#34;, 5, func() {&#xA;&#x9;&#x9;// Enable debug messages.&#xA;&#x9;&#x9;pterm.EnableDebugMessages() // Temporarily set debug output to true, to display the debug printer.&#xA;&#xA;&#x9;&#x9;pterm.Debug.Println(&#34;Hello, World!&#34;) // Print Debug.&#xA;&#x9;&#x9;time.Sleep(second / 2)&#xA;&#x9;&#x9;pterm.Info.Println(&#34;Hello, World!&#34;) // Print Info.&#xA;&#x9;&#x9;time.Sleep(second / 2)&#xA;&#x9;&#x9;pterm.Success.Println(&#34;Hello, World!&#34;) // Print Success.&#xA;&#x9;&#x9;time.Sleep(second / 2)&#xA;&#x9;&#x9;pterm.Warning.Println(&#34;Hello, World!&#34;) // Print Warning.&#xA;&#x9;&#x9;time.Sleep(second / 2)&#xA;&#x9;&#x9;pterm.Error.Println(&#34;Errors show the filename and linenumber inside the terminal!&#34;) // Print Error.&#xA;&#x9;&#x9;time.Sleep(second / 2)&#xA;&#x9;&#x9;pterm.Info.WithShowLineNumber().Println(&#34;Other PrefixPrinters can do that too!&#34;) // Print Error.&#xA;&#x9;&#x9;time.Sleep(second / 2)&#xA;&#x9;&#x9;// Temporarily set Fatal to false, so that the CI won&#39;t panic.&#xA;&#x9;&#x9;pterm.Fatal.WithFatal(false).Println(&#34;Hello, World!&#34;) // Print Fatal.&#xA;&#xA;&#x9;&#x9;pterm.DisableDebugMessages() // Disable debug output again.&#xA;&#x9;})&#xA;&#xA;&#x9;showcase(&#34;TrueColor Support&#34;, 7, func() {&#xA;&#x9;&#x9;from := pterm.NewRGB(0, 255, 255) // This RGB value is used as the gradients start point.&#xA;&#x9;&#x9;to := pterm.NewRGB(255, 0, 255)   // This RGB value is used as the gradients first point.&#xA;&#xA;&#x9;&#x9;str := &#34;If your terminal has TrueColor support, you can use RGB colors!\nYou can even fade them :)\n\nLorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.&#34;&#xA;&#x9;&#x9;strs := strings.Split(str, &#34;&#34;)&#xA;&#x9;&#x9;var fadeInfo string // String which will be used to print info.&#xA;&#x9;&#x9;// For loop over the range of the string length.&#xA;&#x9;&#x9;for i := 0; i &amp;lt; len(str); i++ {&#xA;&#x9;&#x9;&#x9;// Append faded letter to info string.&#xA;&#x9;&#x9;&#x9;fadeInfo += from.Fade(0, float32(len(str)), float32(i), to).Sprint(strs[i])&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;pterm.DefaultCenter.WithCenterEachLineSeparately().Println(fadeInfo)&#xA;&#x9;})&#xA;&#xA;&#x9;showcase(&#34;Themes&#34;, 2, func() {&#xA;&#x9;&#x9;pterm.Info.Println(&#34;You can change the color theme of PTerm easily to fit your needs!\nThis is the default one:&#34;)&#xA;&#x9;&#x9;time.Sleep(second / 2)&#xA;&#x9;&#x9;// Print every value of the default theme with its own style.&#xA;&#x9;&#x9;v := reflect.ValueOf(pterm.ThemeDefault)&#xA;&#x9;&#x9;typeOfS := v.Type()&#xA;&#xA;&#x9;&#x9;if typeOfS == reflect.TypeOf(pterm.Theme{}) {&#xA;&#x9;&#x9;&#x9;for i := 0; i &amp;lt; v.NumField(); i++ {&#xA;&#x9;&#x9;&#x9;&#x9;field, ok := v.Field(i).Interface().(pterm.Style)&#xA;&#x9;&#x9;&#x9;&#x9;if ok {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;field.Println(typeOfS.Field(i).Name)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;time.Sleep(time.Millisecond * 250)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;})&#xA;&#xA;&#x9;showcase(&#34;Fully Customizale&#34;, 2, func() {&#xA;&#x9;&#x9;for i := 0; i &amp;lt; 4; i++ {&#xA;&#x9;&#x9;&#x9;pterm.Println()&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;text := &#34;All printers are fully customizable!&#34;&#xA;&#x9;&#x9;area := pterm.DefaultArea.WithCenter()&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithTitle(&#34;Some title!&#34;).WithTitleTopLeft().Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithTitle(&#34;Some title!&#34;).WithTitleTopCenter().Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithTitle(&#34;Some title!&#34;).WithTitleTopRight().Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithTitle(&#34;Some title!&#34;).WithTitleBottomRight().Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithTitle(&#34;Some title!&#34;).WithTitleBottomCenter().Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithTitle(&#34;Some title!&#34;).WithTitleBottomLeft().Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 3)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithBoxStyle(pterm.NewStyle(pterm.FgCyan)).Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 5)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithBoxStyle(pterm.NewStyle(pterm.FgRed)).Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 5)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).WithBottomPadding(1).WithLeftPadding(1).WithRightPadding(1).WithBoxStyle(pterm.NewStyle(pterm.FgGreen)).Sprintln(text))&#xA;&#x9;&#x9;time.Sleep(second / 5)&#xA;&#x9;&#x9;area.Update(pterm.DefaultBox.WithTopPadding(1).&#xA;&#x9;&#x9;&#x9;WithBottomPadding(1).&#xA;&#x9;&#x9;&#x9;WithLeftPadding(1).&#xA;&#x9;&#x9;&#x9;WithRightPadding(1).&#xA;&#x9;&#x9;&#x9;WithHorizontalString(&#34;═&#34;).&#xA;&#x9;&#x9;&#x9;WithVerticalString(&#34;║&#34;).&#xA;&#x9;&#x9;&#x9;WithBottomLeftCornerString(&#34;╗&#34;).&#xA;&#x9;&#x9;&#x9;WithBottomRightCornerString(&#34;╔&#34;).&#xA;&#x9;&#x9;&#x9;WithTopLeftCornerString(&#34;╝&#34;).&#xA;&#x9;&#x9;&#x9;WithTopRightCornerString(&#34;╚&#34;).&#xA;&#x9;&#x9;&#x9;Sprintln(text))&#xA;&#x9;&#x9;area.Stop()&#xA;&#x9;})&#xA;&#xA;&#x9;showcase(&#34;And much more!&#34;, 3, func() {&#xA;&#x9;&#x9;for i := 0; i &amp;lt; 4; i++ {&#xA;&#x9;&#x9;&#x9;pterm.Println()&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;box := pterm.DefaultBox.&#xA;&#x9;&#x9;&#x9;WithBottomPadding(1).&#xA;&#x9;&#x9;&#x9;WithTopPadding(1).&#xA;&#x9;&#x9;&#x9;WithLeftPadding(3).&#xA;&#x9;&#x9;&#x9;WithRightPadding(3).&#xA;&#x9;&#x9;&#x9;Sprintf(&#34;Have fun exploring %s!&#34;, pterm.Cyan(&#34;PTerm&#34;))&#xA;&#x9;&#x9;pterm.DefaultCenter.Println(box)&#xA;&#x9;})&#xA;}&#xA;&#xA;func setup() {&#xA;&#x9;flag.Parse()&#xA;&#x9;if *speedup {&#xA;&#x9;&#x9;second = time.Millisecond * 200&#xA;&#x9;}&#xA;}&#xA;&#xA;func introScreen() {&#xA;&#x9;ptermLogo, _ := pterm.DefaultBigText.WithLetters(&#xA;&#x9;&#x9;putils.LettersFromStringWithStyle(&#34;P&#34;, pterm.NewStyle(pterm.FgLightCyan)),&#xA;&#x9;&#x9;putils.LettersFromStringWithStyle(&#34;Term&#34;, pterm.NewStyle(pterm.FgLightMagenta))).&#xA;&#x9;&#x9;Srender()&#xA;&#xA;&#x9;pterm.DefaultCenter.Print(ptermLogo)&#xA;&#xA;&#x9;pterm.DefaultCenter.Print(pterm.DefaultHeader.WithFullWidth().WithBackgroundStyle(pterm.NewStyle(pterm.BgLightBlue)).WithMargin(10).Sprint(&#34;PTDP - PTerm Demo Program&#34;))&#xA;&#xA;&#x9;pterm.Info.Println(&#34;This animation was generated with the latest version of PTerm!&#34; +&#xA;&#x9;&#x9;&#34;\nPTerm works on nearly every terminal and operating system.&#34; +&#xA;&#x9;&#x9;&#34;\nIt&#39;s super easy to use!&#34; +&#xA;&#x9;&#x9;&#34;\nIf you want, you can customize everything :)&#34; +&#xA;&#x9;&#x9;&#34;\nYou can see the code of this demo in the &#34; + pterm.LightMagenta(&#34;./_examples/demo&#34;) + &#34; directory.&#34; +&#xA;&#x9;&#x9;&#34;\n&#34; +&#xA;&#x9;&#x9;&#34;\nThis demo was updated at: &#34; + pterm.Green(time.Now().Format(&#34;02 Jan 2006 - 15:04:05 MST&#34;)))&#xA;&#x9;pterm.Println()&#xA;&#x9;introSpinner, _ := pterm.DefaultSpinner.WithShowTimer(false).WithRemoveWhenDone(true).Start(&#34;Waiting for 15 seconds...&#34;)&#xA;&#x9;time.Sleep(second)&#xA;&#x9;for i := 14; i &amp;gt; 0; i-- {&#xA;&#x9;&#x9;if i &amp;gt; 1 {&#xA;&#x9;&#x9;&#x9;introSpinner.UpdateText(&#34;Waiting for &#34; + strconv.Itoa(i) + &#34; seconds...&#34;)&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;introSpinner.UpdateText(&#34;Waiting for &#34; + strconv.Itoa(i) + &#34; second...&#34;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;time.Sleep(second)&#xA;&#x9;}&#xA;&#x9;introSpinner.Stop()&#xA;}&#xA;&#xA;func clear() {&#xA;&#x9;print(&#34;\033[H\033[2J&#34;)&#xA;}&#xA;&#xA;func showcase(title string, seconds int, content func()) {&#xA;&#x9;pterm.DefaultHeader.WithBackgroundStyle(pterm.NewStyle(pterm.BgLightBlue)).WithFullWidth().Println(title)&#xA;&#x9;pterm.Println()&#xA;&#x9;time.Sleep(second / 2)&#xA;&#x9;content()&#xA;&#x9;time.Sleep(second * time.Duration(seconds))&#xA;&#x9;print(&#34;\033[H\033[2J&#34;)&#xA;}&#xA;&#xA;func randomInt(min, max int) int {&#xA;&#x9;rand.Seed(time.Now().UnixNano())&#xA;&#x9;return rand.Intn(max-min+1) + min&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;header/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/header/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Print a default header.&#xA;&#x9;pterm.DefaultHeader.Println(&#34;This is the default header!&#34;)&#xA;&#x9;pterm.Println() // spacer&#xA;&#x9;pterm.DefaultHeader.WithFullWidth().Println(&#34;This is a full-width header.&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;header-custom/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/header-custom/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// All available options: https://pkg.go.dev/github.com/pterm/pterm#HeaderPrinter&#xA;&#xA;&#x9;// Build on top of DefaultHeader&#xA;&#x9;pterm.DefaultHeader. // Use DefaultHeader as base&#xA;&#x9;&#x9;&#x9;&#x9;WithMargin(15).&#xA;&#x9;&#x9;&#x9;&#x9;WithBackgroundStyle(pterm.NewStyle(pterm.BgCyan)).&#xA;&#x9;&#x9;&#x9;&#x9;WithTextStyle(pterm.NewStyle(pterm.FgBlack)).&#xA;&#x9;&#x9;&#x9;&#x9;Println(&#34;This is a custom header!&#34;)&#xA;&#x9;// Instead of printing the header you can set it to a variable.&#xA;&#x9;// You can then reuse your custom header.&#xA;&#xA;&#x9;// Making a completely new HeaderPrinter&#xA;&#x9;newHeader := pterm.HeaderPrinter{&#xA;&#x9;&#x9;TextStyle:       pterm.NewStyle(pterm.FgBlack),&#xA;&#x9;&#x9;BackgroundStyle: pterm.NewStyle(pterm.BgRed),&#xA;&#x9;&#x9;Margin:          20,&#xA;&#x9;}&#xA;&#xA;&#x9;// Print header.&#xA;&#x9;newHeader.Println(&#34;This is a custom header!&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;interactive_confirm/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/interactive_confirm/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;result, _ := pterm.DefaultInteractiveConfirm.Show()&#xA;&#x9;pterm.Println() // Blank line&#xA;&#x9;pterm.Info.Printfln(&#34;You answered: %s&#34;, boolToText(result))&#xA;}&#xA;&#xA;func boolToText(b bool) string {&#xA;&#x9;if b {&#xA;&#x9;&#x9;return pterm.Green(&#34;Yes&#34;)&#xA;&#x9;}&#xA;&#x9;return pterm.Red(&#34;No&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;interactive_continue/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/interactive_continue/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;result, _ := pterm.DefaultInteractiveContinue.Show()&#xA;&#x9;pterm.Println() // Blank line&#xA;&#x9;pterm.Info.Printfln(&#34;You answered: %s&#34;, result)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;interactive_multiselect/custom-checkmarks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/interactive_multiselect/custom-checkmarks/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;atomicgo.dev/keyboard/keys&#34;&#xA;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;var options []string&#xA;&#xA;&#x9;for i := 0; i &amp;lt; 5; i++ {&#xA;&#x9;&#x9;options = append(options, fmt.Sprintf(&#34;Option %d&#34;, i))&#xA;&#x9;}&#xA;&#xA;&#x9;printer := pterm.DefaultInteractiveMultiselect.WithOptions(options)&#xA;&#x9;printer.Filter = false&#xA;&#x9;printer.KeyConfirm = keys.Enter&#xA;&#x9;printer.KeySelect = keys.Space&#xA;&#x9;printer.Checkmark = &amp;amp;pterm.Checkmark{Checked: pterm.Green(&#34;+&#34;), Unchecked: pterm.Red(&#34;-&#34;)}&#xA;&#x9;selectedOptions, _ := printer.Show()&#xA;&#x9;pterm.Info.Printfln(&#34;Selected options: %s&#34;, pterm.Green(selectedOptions))&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;interactive_multiselect/custom-keys&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/interactive_multiselect/custom-keys/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;atomicgo.dev/keyboard/keys&#34;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;var options []string&#xA;&#xA;&#x9;for i := 0; i &amp;lt; 5; i++ {&#xA;&#x9;&#x9;options = append(options, fmt.Sprintf(&#34;Option %d&#34;, i))&#xA;&#x9;}&#xA;&#xA;&#x9;printer := pterm.DefaultInteractiveMultiselect.WithOptions(options)&#xA;&#x9;printer.Filter = false&#xA;&#x9;printer.KeyConfirm = keys.Enter&#xA;&#x9;printer.KeySelect = keys.Space&#xA;&#x9;selectedOptions, _ := printer.Show()&#xA;&#x9;pterm.Info.Printfln(&#34;Selected options: %s&#34;, pterm.Green(selectedOptions))&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;interactive_multiselect/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/interactive_multiselect/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;var options []string&#xA;&#xA;&#x9;for i := 0; i &amp;lt; 100; i++ {&#xA;&#x9;&#x9;options = append(options, fmt.Sprintf(&#34;Option %d&#34;, i))&#xA;&#x9;}&#xA;&#xA;&#x9;for i := 0; i &amp;lt; 5; i++ {&#xA;&#x9;&#x9;options = append(options, fmt.Sprintf(&#34;You can use fuzzy searching (%d)&#34;, i))&#xA;&#x9;}&#xA;&#xA;&#x9;selectedOptions, _ := pterm.DefaultInteractiveMultiselect.WithOptions(options).Show()&#xA;&#x9;pterm.Info.Printfln(&#34;Selected options: %s&#34;, pterm.Green(selectedOptions))&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;interactive_select/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/interactive_select/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;var options []string&#xA;&#xA;&#x9;for i := 0; i &amp;lt; 100; i++ {&#xA;&#x9;&#x9;options = append(options, fmt.Sprintf(&#34;Option %d&#34;, i))&#xA;&#x9;}&#xA;&#xA;&#x9;for i := 0; i &amp;lt; 5; i++ {&#xA;&#x9;&#x9;options = append(options, fmt.Sprintf(&#34;You can use fuzzy searching (%d)&#34;, i))&#xA;&#x9;}&#xA;&#xA;&#x9;selectedOption, _ := pterm.DefaultInteractiveSelect.WithOptions(options).Show()&#xA;&#x9;pterm.Info.Printfln(&#34;Selected option: %s&#34;, pterm.Green(selectedOption))&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;interactive_textinput/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/interactive_textinput/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;result, _ := pterm.DefaultInteractiveTextInput.WithMultiLine(false).Show()&#xA;&#x9;pterm.Println() // Blank line&#xA;&#x9;pterm.Info.Printfln(&#34;You answered: %s&#34;, result)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;interactive_textinput/multi-line&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/interactive_textinput/multi-line/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;result, _ := pterm.DefaultInteractiveTextInput.WithMultiLine().Show() // Text input with multi line enabled&#xA;&#x9;pterm.Println()                                                       // Blank line&#xA;&#x9;pterm.Info.Printfln(&#34;You answered: %s&#34;, result)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;panel/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/panel/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Declare panels in a two dimensional grid system.&#xA;&#x9;panels := pterm.Panels{&#xA;&#x9;&#x9;{{Data: &#34;This is the first panel&#34;}, {Data: pterm.DefaultHeader.Sprint(&#34;Hello, World!&#34;)}, {Data: &#34;This\npanel\ncontains\nmultiple\nlines&#34;}},&#xA;&#x9;&#x9;{{Data: pterm.Red(&#34;This is another\npanel line&#34;)}, {Data: &#34;This is the second panel\nwith a new line&#34;}},&#xA;&#x9;}&#xA;&#xA;&#x9;// Print panels.&#xA;&#x9;_ = pterm.DefaultPanel.WithPanels(panels).WithPadding(5).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;paragraph/customized&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/paragraph/customized/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Print a paragraph with a custom maximal width.&#xA;&#x9;pterm.DefaultParagraph.WithMaxWidth(60).Println(&#34;This is a custom paragraph printer. As you can see, no words are separated, &#34; +&#xA;&#x9;&#x9;&#34;but the text is split at the spaces. This is useful for continuous text of all kinds. You can manually change the line width if you want to.&#34; +&#xA;&#x9;&#x9;&#34;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam&#34;)&#xA;&#xA;&#x9;// Print one line space.&#xA;&#x9;pterm.Println()&#xA;&#xA;&#x9;// Print text without a paragraph printer.&#xA;&#x9;pterm.Println(&#34;This text is written with the default Println() function. No intelligent splitting here.&#34; +&#xA;&#x9;&#x9;&#34;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;paragraph/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/paragraph/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Print long text with default paragraph printer.&#xA;&#x9;pterm.DefaultParagraph.Println(&#34;This is the default paragraph printer. As you can see, no words are separated, &#34; +&#xA;&#x9;&#x9;&#34;but the text is split at the spaces. This is useful for continuous text of all kinds. You can manually change the line width if you want to.&#34; +&#xA;&#x9;&#x9;&#34;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam&#34;)&#xA;&#xA;&#x9;// Print one line space.&#xA;&#x9;pterm.Println()&#xA;&#xA;&#x9;// Print long text without paragraph printer.&#xA;&#x9;pterm.Println(&#34;This text is written with the default Println() function. No intelligent splitting here.&#34; +&#xA;&#x9;&#x9;&#34;Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;prefix/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/prefix/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Enable debug messages.&#xA;&#x9;pterm.EnableDebugMessages()&#xA;&#xA;&#x9;pterm.Debug.Println(&#34;Hello, World!&#34;)                                                // Print Debug.&#xA;&#x9;pterm.Info.Println(&#34;Hello, World!&#34;)                                                 // Print Info.&#xA;&#x9;pterm.Success.Println(&#34;Hello, World!&#34;)                                              // Print Success.&#xA;&#x9;pterm.Warning.Println(&#34;Hello, World!&#34;)                                              // Print Warning.&#xA;&#x9;pterm.Error.Println(&#34;Errors show the filename and linenumber inside the terminal!&#34;) // Print Error.&#xA;&#x9;pterm.Info.WithShowLineNumber().Println(&#34;Other PrefixPrinters can do that too!&#34;)    // Print Error.&#xA;&#x9;// Temporarily set Fatal to false, so that the CI won&#39;t crash.&#xA;&#x9;pterm.Fatal.WithFatal(false).Println(&#34;Hello, World!&#34;) // Print Fatal.&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;progressbar/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/progressbar/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;strings&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;// Slice of strings with placeholder text.&#xA;var fakeInstallList = strings.Split(&#34;pseudo-excel pseudo-photoshop pseudo-chrome pseudo-outlook pseudo-explorer &#34;+&#xA;&#x9;&#34;pseudo-dops pseudo-git pseudo-vsc pseudo-intellij pseudo-minecraft pseudo-scoop pseudo-chocolatey&#34;, &#34; &#34;)&#xA;&#xA;func main() {&#xA;&#x9;// Create progressbar as fork from the default progressbar.&#xA;&#x9;p, _ := pterm.DefaultProgressbar.WithTotal(len(fakeInstallList)).WithTitle(&#34;Downloading stuff&#34;).Start()&#xA;&#xA;&#x9;for i := 0; i &amp;lt; p.Total; i++ {&#xA;&#x9;&#x9;p.UpdateTitle(&#34;Downloading &#34; + fakeInstallList[i])         // Update the title of the progressbar.&#xA;&#x9;&#x9;pterm.Success.Println(&#34;Downloading &#34; + fakeInstallList[i]) // If a progressbar is running, each print will be printed above the progressbar.&#xA;&#x9;&#x9;p.Increment()                                              // Increment the progressbar by one. Use Add(x int) to increment by a custom amount.&#xA;&#x9;&#x9;time.Sleep(time.Millisecond * 350)                         // Sleep 350 milliseconds.&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;section/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/section/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Print a section with level one.&#xA;&#x9;pterm.DefaultSection.Println(&#34;This is a section!&#34;)&#xA;&#x9;// Print placeholder.&#xA;&#x9;pterm.Info.Println(&#34;And here is some text.\nThis text could be anything.\nBasically it&#39;s just a placeholder&#34;)&#xA;&#xA;&#x9;// Print a section with level two.&#xA;&#x9;pterm.DefaultSection.WithLevel(2).Println(&#34;This is another section!&#34;)&#xA;&#x9;// Print placeholder.&#xA;&#x9;pterm.Info.Println(&#34;And this is\nmore placeholder text&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;spinner/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/spinner/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Create and start a fork of the default spinner.&#xA;&#x9;spinnerInfo, _ := pterm.DefaultSpinner.Start(&#34;Some informational action...&#34;)&#xA;&#x9;time.Sleep(time.Second * 2) // Simulate 3 seconds of processing something.&#xA;&#x9;spinnerInfo.Info()          // Resolve spinner with error message.&#xA;&#xA;&#x9;// Create and start a fork of the default spinner.&#xA;&#x9;spinnerSuccess, _ := pterm.DefaultSpinner.Start(&#34;Doing something important... (will succeed)&#34;)&#xA;&#x9;time.Sleep(time.Second * 2) // Simulate 3 seconds of processing something.&#xA;&#x9;spinnerSuccess.Success()    // Resolve spinner with success message.&#xA;&#xA;&#x9;// Create and start a fork of the default spinner.&#xA;&#x9;spinnerWarning, _ := pterm.DefaultSpinner.Start(&#34;Doing something important... (will warn)&#34;)&#xA;&#x9;time.Sleep(time.Second * 2) // Simulate 3 seconds of processing something.&#xA;&#x9;spinnerWarning.Warning()    // Resolve spinner with warning message.&#xA;&#xA;&#x9;// Create and start a fork of the default spinner.&#xA;&#x9;spinnerFail, _ := pterm.DefaultSpinner.Start(&#34;Doing something important... (will fail)&#34;)&#xA;&#x9;time.Sleep(time.Second * 2) // Simulate 3 seconds of processing something.&#xA;&#x9;spinnerFail.Fail()          // Resolve spinner with error message.&#xA;&#xA;&#x9;// Create and start a fork of the default spinner.&#xA;&#x9;spinnerNochange, _ := pterm.DefaultSpinner.Start(&#34;Checking something important... (will result in no change)&#34;)&#xA;&#x9;// Replace the InfoPrinter with a custom &#34;NOCHG&#34; one&#xA;&#x9;spinnerNochange.InfoPrinter = &amp;amp;pterm.PrefixPrinter{&#xA;&#x9;&#x9;MessageStyle: &amp;amp;pterm.Style{pterm.FgLightBlue},&#xA;&#x9;&#x9;Prefix: pterm.Prefix{&#xA;&#x9;&#x9;&#x9;Style: &amp;amp;pterm.Style{pterm.FgBlack, pterm.BgLightBlue},&#xA;&#x9;&#x9;&#x9;Text:  &#34; NOCHG &#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#x9;time.Sleep(time.Second * 2)                     // Simulate 3 seconds of processing something.&#xA;&#x9;spinnerNochange.Info(&#34;No change were required&#34;) // Resolve spinner with error message.&#xA;&#xA;&#x9;// Create and start a fork of the default spinner.&#xA;&#x9;spinnerLiveText, _ := pterm.DefaultSpinner.Start(&#34;Doing a lot of stuff...&#34;)&#xA;&#x9;time.Sleep(time.Second)                          // Simulate 2 seconds of processing something.&#xA;&#x9;spinnerLiveText.UpdateText(&#34;It&#39;s really much&#34;)   // Update spinner text.&#xA;&#x9;time.Sleep(time.Second)                          // Simulate 2 seconds of processing something.&#xA;&#x9;spinnerLiveText.UpdateText(&#34;We&#39;re nearly done!&#34;) // Update spinner text.&#xA;&#x9;time.Sleep(time.Second)                          // Simulate 2 seconds of processing something.&#xA;&#x9;spinnerLiveText.Success(&#34;Finally!&#34;)              // Resolve spinner with success message.&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;style/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/style/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Create styles as new variables&#xA;&#x9;primary := pterm.NewStyle(pterm.FgLightCyan, pterm.BgGray, pterm.Bold)&#xA;&#x9;secondary := pterm.NewStyle(pterm.FgLightGreen, pterm.BgWhite, pterm.Italic)&#xA;&#xA;&#x9;// Use created styles&#xA;&#x9;primary.Println(&#34;Hello, World!&#34;)&#xA;&#x9;secondary.Println(&#34;Hello, World!&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;table/boxed&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/table/boxed/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Create a fork of the default table, fill it with data and print it.&#xA;&#x9;// Data can also be generated and inserted later.&#xA;&#x9;pterm.DefaultTable.WithHasHeader().WithBoxed().WithData(pterm.TableData{&#xA;&#x9;&#x9;{&#34;Firstname&#34;, &#34;Lastname&#34;, &#34;Email&#34;, &#34;Note&#34;},&#xA;&#x9;&#x9;{&#34;Paul&#34;, &#34;Dean&#34;, &#34;nisi.dictum.augue@velitAliquam.co.uk&#34;, &#34;&#34;},&#xA;&#x9;&#x9;{&#34;Callie&#34;, &#34;Mckay&#34;, &#34;egestas.nunc.sed@est.com&#34;, &#34;这是一个测试, haha!&#34;},&#xA;&#x9;&#x9;{&#34;Libby&#34;, &#34;Camacho&#34;, &#34;aliquet.lobortis@semper.com&#34;, &#34;just a test, hey!&#34;},&#xA;&#x9;}).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;table/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/table/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Create a fork of the default table, fill it with data and print it.&#xA;&#x9;// Data can also be generated and inserted later.&#xA;&#x9;pterm.DefaultTable.WithHasHeader().WithData(pterm.TableData{&#xA;&#x9;&#x9;{&#34;Firstname&#34;, &#34;Lastname&#34;, &#34;Email&#34;, &#34;Note&#34;},&#xA;&#x9;&#x9;{&#34;Paul&#34;, &#34;Dean&#34;, &#34;nisi.dictum.augue@velitAliquam.co.uk&#34;, &#34;&#34;},&#xA;&#x9;&#x9;{&#34;Callie&#34;, &#34;Mckay&#34;, &#34;egestas.nunc.sed@est.com&#34;, &#34;这是一个测试, haha!&#34;},&#xA;&#x9;&#x9;{&#34;Libby&#34;, &#34;Camacho&#34;, &#34;aliquet.lobortis@semper.com&#34;, &#34;just a test, hey!&#34;},&#xA;&#x9;}).Render()&#xA;&#xA;&#x9;pterm.Println() // Blank line&#xA;&#xA;&#x9;// Create a table with multiple lines in a row.&#xA;&#x9;pterm.DefaultTable.WithHasHeader().WithData(pterm.TableData{&#xA;&#x9;&#x9;{&#34;Firstname&#34;, &#34;Lastname&#34;, &#34;Email&#34;},&#xA;&#x9;&#x9;{&#34;Paul\n\nNewline&#34;, &#34;Dean&#34;, &#34;nisi.dictum.augue@velitAliquam.co.uk&#34;},&#xA;&#x9;&#x9;{&#34;Callie&#34;, &#34;Mckay&#34;, &#34;egestas.nunc.sed@est.com\nNewline&#34;},&#xA;&#x9;&#x9;{&#34;Libby&#34;, &#34;Camacho&#34;, &#34;aliquet.lobortis@semper.com&#34;},&#xA;&#x9;&#x9;{&#34;张&#34;, &#34;小宝&#34;, &#34;zhang@example.com&#34;},&#xA;&#x9;}).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;table/multiple-lines&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/table/multiple-lines/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Create a table with multiple lines in a row and set a row separator.&#xA;&#x9;pterm.DefaultTable.WithHasHeader().WithRowSeparator(&#34;-&#34;).WithHeaderRowSeparator(&#34;-&#34;).WithData(pterm.TableData{&#xA;&#x9;&#x9;{&#34;Firstname&#34;, &#34;Lastname&#34;, &#34;Email&#34;},&#xA;&#x9;&#x9;{&#34;Paul\n\nNewline&#34;, &#34;Dean&#34;, &#34;nisi.dictum.augue@velitAliquam.co.uk&#34;},&#xA;&#x9;&#x9;{&#34;Callie&#34;, &#34;Mckay&#34;, &#34;egestas.nunc.sed@est.com\nNewline&#34;},&#xA;&#x9;&#x9;{&#34;Libby&#34;, &#34;Camacho&#34;, &#34;aliquet.lobortis@semper.com&#34;},&#xA;&#x9;&#x9;{&#34;张&#34;, &#34;小宝&#34;, &#34;zhang@example.com&#34;},&#xA;&#x9;}).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;table/right-alignment&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/table/right-alignment/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/pterm/pterm&#34;&#xA;&#xA;func main() {&#xA;&#x9;// Create a fork of the default table, fill it with data and print it.&#xA;&#x9;// Data can also be generated and inserted later.&#xA;&#x9;pterm.DefaultTable.WithHasHeader().WithRightAlignment().WithData(pterm.TableData{&#xA;&#x9;&#x9;{&#34;Firstname&#34;, &#34;Lastname&#34;, &#34;Email&#34;, &#34;Note&#34;},&#xA;&#x9;&#x9;{&#34;Paul&#34;, &#34;Dean&#34;, &#34;nisi.dictum.augue@velitAliquam.co.uk&#34;, &#34;&#34;},&#xA;&#x9;&#x9;{&#34;Callie&#34;, &#34;Mckay&#34;, &#34;egestas.nunc.sed@est.com&#34;, &#34;这是一个测试, haha!&#34;},&#xA;&#x9;&#x9;{&#34;Libby&#34;, &#34;Camacho&#34;, &#34;aliquet.lobortis@semper.com&#34;, &#34;just a test, hey!&#34;},&#xA;&#x9;}).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;theme/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/theme/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;&#x9;&#34;reflect&#34;&#xA;&#x9;&#34;time&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Print info.&#xA;&#x9;pterm.Info.Println(&#34;These are the default theme styles.\n&#34; +&#xA;&#x9;&#x9;&#34;You can modify them easily to your personal preference,\n&#34; +&#xA;&#x9;&#x9;&#34;or create new themes from scratch :)&#34;)&#xA;&#xA;&#x9;pterm.Println() // Print one line space.&#xA;&#xA;&#x9;// Print every value of the default theme with its own style.&#xA;&#x9;v := reflect.ValueOf(pterm.ThemeDefault)&#xA;&#x9;typeOfS := v.Type()&#xA;&#xA;&#x9;if typeOfS == reflect.TypeOf(pterm.Theme{}) {&#xA;&#x9;&#x9;for i := 0; i &amp;lt; v.NumField(); i++ {&#xA;&#x9;&#x9;&#x9;field, ok := v.Field(i).Interface().(pterm.Style)&#xA;&#x9;&#x9;&#x9;if ok {&#xA;&#x9;&#x9;&#x9;&#x9;field.Println(typeOfS.Field(i).Name)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;time.Sleep(time.Millisecond * 250)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;tree/demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/tree/demo/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;tree := pterm.TreeNode{&#xA;&#x9;&#x9;Text: &#34;Top node&#34;,&#xA;&#x9;&#x9;Children: []pterm.TreeNode{{&#xA;&#x9;&#x9;&#x9;Text: &#34;Child node&#34;,&#xA;&#x9;&#x9;&#x9;Children: []pterm.TreeNode{&#xA;&#x9;&#x9;&#x9;&#x9;{Text: &#34;Grandchild node&#34;},&#xA;&#x9;&#x9;&#x9;&#x9;{Text: &#34;Grandchild node&#34;},&#xA;&#x9;&#x9;&#x9;&#x9;{Text: &#34;Grandchild node&#34;},&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;}},&#xA;&#x9;}&#xA;&#xA;&#x9;pterm.DefaultTree.WithRoot(tree).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;tree/from-leveled-list&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pterm/pterm/master/_examples/tree/from-leveled-list/animation.svg?sanitize=true&#34; alt=&#34;Animation&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;SHOW SOURCE&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pterm/pterm&#34;&#xA;&#x9;&#34;github.com/pterm/pterm/putils&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// You can use a LeveledList here, for easy generation.&#xA;&#x9;leveledList := pterm.LeveledList{&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 0, Text: &#34;C:&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;Users&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;Windows&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;Programs&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;Programs(x86)&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;dev&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 0, Text: &#34;D:&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 0, Text: &#34;E:&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;Movies&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;Music&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 2, Text: &#34;LinkinPark&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;Games&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 2, Text: &#34;Shooter&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 3, Text: &#34;CallOfDuty&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 3, Text: &#34;CS:GO&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 3, Text: &#34;Battlefield&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 4, Text: &#34;Battlefield 1&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 4, Text: &#34;Battlefield 2&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 0, Text: &#34;F:&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 1, Text: &#34;dev&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 2, Text: &#34;dops&#34;},&#xA;&#x9;&#x9;pterm.LeveledListItem{Level: 2, Text: &#34;PTerm&#34;},&#xA;&#x9;}&#xA;&#xA;&#x9;// Generate tree from LeveledList.&#xA;&#x9;root := putils.TreeFromLeveledList(leveledList)&#xA;&#x9;root.Text = &#34;Computer&#34;&#xA;&#xA;&#x9;// Render TreePrinter&#xA;&#x9;pterm.DefaultTree.WithRoot(root).Render()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- examples:end --&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;GitHub &lt;a href=&#34;https://github.com/pterm&#34;&gt;@pterm&lt;/a&gt; &amp;nbsp;·&amp;nbsp; Author &lt;a href=&#34;https://github.com/MarvinJWendt&#34;&gt;@MarvinJWendt&lt;/a&gt; | &lt;a href=&#34;https://pterm.sh&#34;&gt;PTerm.sh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>