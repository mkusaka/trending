<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-03T01:34:48Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>base-org/withdrawer</title>
    <updated>2023-08-03T01:34:48Z</updated>
    <id>tag:github.com,2023-08-03:/base-org/withdrawer</id>
    <link href="https://github.com/base-org/withdrawer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golang utility for proving and finalizing withdrawals from op-stack chains.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;withdrawer&lt;/h1&gt; &#xA;&lt;p&gt;Golang utility for proving and finalizing ETH withdrawals from op-stack chains.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/base-org/withdrawer@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;p&gt;Initiate a withdrawal on L2 by sending ETH to the &lt;code&gt;L2StandardBridge&lt;/code&gt; contract at &lt;code&gt;0x4200000000000000000000000000000000000010&lt;/code&gt;, and note the tx hash. Example on Base Goerli: &lt;a href=&#34;https://goerli.basescan.org/tx/0xc4055dcb2e4647c37166caba8c7392625c2b62f9117a8bc4d96270da24b38f13&#34;&gt;0xc4055dcb2e4647c37166caba8c7392625c2b62f9117a8bc4d96270da24b38f13&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: Do not send ERC-20 or other tokens to this address, only native ETH is supported.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note: Users are required to wait for a period of seven days when moving assets out of Base mainnet into the Ethereum mainnet. This period of time is called the Challenge Period and serves to help secure the assets stored on Base mainnet.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Step 2&lt;/h4&gt; &#xA;&lt;p&gt;Prove your withdrawal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;withdrawer --network base-mainnet --withdrawal &amp;lt;withdrawal tx hash&amp;gt; --rpc &amp;lt;L1 RPC URL&amp;gt; --private-key &amp;lt;L1 private key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use a ledger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;withdrawer --network base-mainnet --withdrawal &amp;lt;withdrawal tx hash&amp;gt; --rpc &amp;lt;L1 RPC URL&amp;gt; --ledger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Proved withdrawal for 0xc4055dcb2e4647c37166caba8c7392625c2b62f9117a8bc4d96270da24b38f13: 0x6b6d1cc45b6601a30646847f638847feb629221ee71bbe6a3de7e6d0fbfe8fad&#xA;waiting for tx confirmation&#xA;0x6b6d1cc45b6601a30646847f638847feb629221ee71bbe6a3de7e6d0fbfe8fad confirmed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 3&lt;/h4&gt; &#xA;&lt;p&gt;After the finalization period, finalize your withdrawal (same command as above):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;withdrawer --network base-mainnet --withdrawal &amp;lt;withdrawal tx hash&amp;gt; --rpc &amp;lt;L1 RPC URL&amp;gt; --private-key &amp;lt;L1 private key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Completed withdrawal for 0xc4055dcb2e4647c37166caba8c7392625c2b62f9117a8bc4d96270da24b38f13: 0x1c457f1992f48f1f959ceaee5b3c7e699a26f6f05d93997d49dafe703fd66dea&#xA;waiting for tx confirmation&#xA;0x1c457f1992f48f1f959ceaee5b3c7e699a26f6f05d93997d49dafe703fd66dea confirmed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flags&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage of withdrawer:&#xA;    -rpc string&#xA;        Ethereum L1 RPC url&#xA;    -network string&#xA;        op-stack network to withdraw.go from (one of: base-mainnet, base-goerli, op-mainnet, op-goerli) (default &#34;base-mainnet&#34;)&#xA;    -withdrawal string&#xA;        TX hash of the L2 withdrawal transaction&#xA;    -private-key string&#xA;        Private key to use for signing transactions&#xA;    -mnemonic string&#xA;        Mnemonic to use for signing transactions&#xA;    -ledger&#xA;        Use ledger device for signing transactions&#xA;    -hd-path string&#xA;        Hierarchical deterministic derivation path for mnemonic or ledger (default &#34;m/44&#39;/60&#39;/0&#39;/0/0&#34;)&#xA;    -l2-rpc string&#xA;        Custom network L2 RPC url&#xA;    -l2oo-address string&#xA;        Custom network L2OutputOracle address&#xA;    -portal-address string&#xA;        Custom network OptimismPortal address&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Masterminds/squirrel</title>
    <updated>2023-08-03T01:34:48Z</updated>
    <id>tag:github.com,2023-08-03:/Masterminds/squirrel</id>
    <link href="https://github.com/Masterminds/squirrel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fluent SQL generation for golang&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://masterminds.github.io/stability/maintenance.html&#34;&gt;&lt;img src=&#34;https://masterminds.github.io/stability/maintenance.svg?sanitize=true&#34; alt=&#34;Stability: Maintenance&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Squirrel is &#34;complete&#34;.&lt;/h3&gt; &#xA;&lt;p&gt;Bug fixes will still be merged (slowly). Bug reports are welcome, but I will not necessarily respond to them. If another fork (or substantially similar project) actively improves on what Squirrel does, let me know and I may link to it here.&lt;/p&gt; &#xA;&lt;h1&gt;Squirrel - fluent SQL generator for Go&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/Masterminds/squirrel&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/Masterminds/squirrel&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/Masterminds/squirrel?status.png&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/Masterminds/squirrel&#34;&gt;&lt;img src=&#34;https://api.travis-ci.org/Masterminds/squirrel.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Squirrel is not an ORM.&lt;/strong&gt; For an application of Squirrel, check out &lt;a href=&#34;https://github.com/Masterminds/structable&#34;&gt;structable, a table-struct mapper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Squirrel helps you build SQL queries from composable parts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import sq &#34;github.com/Masterminds/squirrel&#34;&#xA;&#xA;users := sq.Select(&#34;*&#34;).From(&#34;users&#34;).Join(&#34;emails USING (email_id)&#34;)&#xA;&#xA;active := users.Where(sq.Eq{&#34;deleted_at&#34;: nil})&#xA;&#xA;sql, args, err := active.ToSql()&#xA;&#xA;sql == &#34;SELECT * FROM users JOIN emails USING (email_id) WHERE deleted_at IS NULL&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sql, args, err := sq.&#xA;    Insert(&#34;users&#34;).Columns(&#34;name&#34;, &#34;age&#34;).&#xA;    Values(&#34;moe&#34;, 13).Values(&#34;larry&#34;, sq.Expr(&#34;? + 5&#34;, 12)).&#xA;    ToSql()&#xA;&#xA;sql == &#34;INSERT INTO users (name,age) VALUES (?,?),(?,? + 5)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Squirrel can also execute queries directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;stooges := users.Where(sq.Eq{&#34;username&#34;: []string{&#34;moe&#34;, &#34;larry&#34;, &#34;curly&#34;, &#34;shemp&#34;}})&#xA;three_stooges := stooges.Limit(3)&#xA;rows, err := three_stooges.RunWith(db).Query()&#xA;&#xA;// Behaves like:&#xA;rows, err := db.Query(&#34;SELECT * FROM users WHERE username IN (?,?,?,?) LIMIT 3&#34;,&#xA;                      &#34;moe&#34;, &#34;larry&#34;, &#34;curly&#34;, &#34;shemp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Squirrel makes conditional query building a breeze:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if len(q) &amp;gt; 0 {&#xA;    users = users.Where(&#34;name LIKE ?&#34;, fmt.Sprint(&#34;%&#34;, q, &#34;%&#34;))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Squirrel wants to make your life easier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// StmtCache caches Prepared Stmts for you&#xA;dbCache := sq.NewStmtCache(db)&#xA;&#xA;// StatementBuilder keeps your syntax neat&#xA;mydb := sq.StatementBuilder.RunWith(dbCache)&#xA;select_users := mydb.Select(&#34;*&#34;).From(&#34;users&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Squirrel loves PostgreSQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;psql := sq.StatementBuilder.PlaceholderFormat(sq.Dollar)&#xA;&#xA;// You use question marks for placeholders...&#xA;sql, _, _ := psql.Select(&#34;*&#34;).From(&#34;elephants&#34;).Where(&#34;name IN (?,?)&#34;, &#34;Dumbo&#34;, &#34;Verna&#34;).ToSql()&#xA;&#xA;/// ...squirrel replaces them using PlaceholderFormat.&#xA;sql == &#34;SELECT * FROM elephants WHERE name IN ($1,$2)&#34;&#xA;&#xA;&#xA;/// You can retrieve id ...&#xA;query := sq.Insert(&#34;nodes&#34;).&#xA;    Columns(&#34;uuid&#34;, &#34;type&#34;, &#34;data&#34;).&#xA;    Values(node.Uuid, node.Type, node.Data).&#xA;    Suffix(&#34;RETURNING \&#34;id\&#34;&#34;).&#xA;    RunWith(m.db).&#xA;    PlaceholderFormat(sq.Dollar)&#xA;&#xA;query.QueryRow().Scan(&amp;amp;node.id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can escape question marks by inserting two question marks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM nodes WHERE meta-&amp;gt;&#39;format&#39; ??| array[?,?]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will generate with the Dollar Placeholder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT * FROM nodes WHERE meta-&amp;gt;&#39;format&#39; ?| array[$1,$2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;How can I build an IN query on composite keys / tuples, e.g. &lt;code&gt;WHERE (col1, col2) IN ((1,2),(3,4))&lt;/code&gt;? (&lt;a href=&#34;https://github.com/Masterminds/squirrel/issues/104&#34;&gt;#104&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Squirrel does not explicitly support tuples, but you can get the same effect with e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sq.Or{&#xA;  sq.Eq{&#34;col1&#34;: 1, &#34;col2&#34;: 2},&#xA;  sq.Eq{&#34;col1&#34;: 3, &#34;col2&#34;: 4}}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;WHERE (col1 = 1 AND col2 = 2) OR (col1 = 3 AND col2 = 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(which should produce the same query plan as the tuple version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Why doesn&#39;t &lt;code&gt;Eq{&#34;mynumber&#34;: []uint8{1,2,3}}&lt;/code&gt; turn into an &lt;code&gt;IN&lt;/code&gt; query? (&lt;a href=&#34;https://github.com/Masterminds/squirrel/issues/114&#34;&gt;#114&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Values of type &lt;code&gt;[]byte&lt;/code&gt; are handled specially by &lt;code&gt;database/sql&lt;/code&gt;. In Go, &lt;a href=&#34;https://golang.org/pkg/builtin/#byte&#34;&gt;&lt;code&gt;byte&lt;/code&gt; is just an alias of &lt;code&gt;uint8&lt;/code&gt;&lt;/a&gt;, so there is no way to distinguish &lt;code&gt;[]uint8&lt;/code&gt; from &lt;code&gt;[]byte&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Some features are poorly documented!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This isn&#39;t a frequent complaints section!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Some features are poorly documented?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yes. The tests should be considered a part of the documentation; take a look at those for ideas on how to express more complex queries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Squirrel is released under the &lt;a href=&#34;http://www.opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>