<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-30T01:33:21Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wader/fq</title>
    <updated>2022-11-30T01:33:21Z</updated>
    <id>tag:github.com,2022-11-30:/wader/fq</id>
    <link href="https://github.com/wader/fq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;jq for binary formats&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fq&lt;/h1&gt; &#xA;&lt;p&gt;Tool, language and decoders for working with binary data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/demo.svg?sanitize=true&#34; alt=&#34;fq demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Basic usage is &lt;code&gt;fq . file&lt;/code&gt; or &lt;code&gt;fq d file&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For details see &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/usage.md&#34;&gt;usage.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Background&lt;/h3&gt; &#xA;&lt;p&gt;fq is inspired by the well known jq tool and language and allows you to work with binary formats the same way you would using jq. In addition it can present data like a hex viewer, transform, slice and concatenate binary data. It also supports nested formats and has an interactive REPL with auto-completion.&lt;/p&gt; &#xA;&lt;p&gt;It was originally designed to query, inspect and debug media codecs and containers like mp4, flac, mp3, jpeg. But has since then been extended to support a variety of formats like executables, packet captures (with TCP reassembly) and serialization formats like JSON, YAML, XML, ASN1 BER, Avro, CBOR, protobuf. In addition it also has functions to work with URL:s, convert to/from hex, number bases, search for things etc.&lt;/p&gt; &#xA;&lt;p&gt;In summary it aims to be jq, hexdump, dd and gdb for files combined into one.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; fq is still early in development so things might change, be broken or do not make sense. That also means that there is a great opportunity to help out!&lt;/p&gt; &#xA;&lt;h3&gt;Goals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make binaries accessible, queryable and sliceable.&lt;/li&gt; &#xA; &lt;li&gt;Nested formats and bit-oriented decoding.&lt;/li&gt; &#xA; &lt;li&gt;Quick and comfortable CLI tool.&lt;/li&gt; &#xA; &lt;li&gt;Bits and bytes transformations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hopes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make it useful enough that people want to help improve it.&lt;/li&gt; &#xA; &lt;li&gt;Inspire people to create similar tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported formats&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#aac_frame&#34;&gt;aac_frame&lt;/a&gt;, adts, adts_frame, amf0, apev2, ar, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#asn1_ber&#34;&gt;asn1_ber&lt;/a&gt;, av1_ccr, av1_frame, av1_obu, avc_annexb, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#avc_au&#34;&gt;avc_au&lt;/a&gt;, avc_dcr, avc_nalu, avc_pps, avc_sei, avc_sps, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#avi&#34;&gt;avi&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#avro_ocf&#34;&gt;avro_ocf&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#bencode&#34;&gt;bencode&lt;/a&gt;, bitcoin_blkdat, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#bitcoin_block&#34;&gt;bitcoin_block&lt;/a&gt;, bitcoin_script, bitcoin_transaction, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#bits&#34;&gt;bits&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#bplist&#34;&gt;bplist&lt;/a&gt;, bsd_loopback_frame, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#bson&#34;&gt;bson&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#bytes&#34;&gt;bytes&lt;/a&gt;, bzip2, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#cbor&#34;&gt;cbor&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#csv&#34;&gt;csv&lt;/a&gt;, dns, dns_tcp, elf, ether8023_frame, exif, fairplay_spc, flac, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#flac_frame&#34;&gt;flac_frame&lt;/a&gt;, flac_metadatablock, flac_metadatablocks, flac_picture, flac_streaminfo, gif, gzip, hevc_annexb, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#hevc_au&#34;&gt;hevc_au&lt;/a&gt;, hevc_dcr, hevc_nalu, hevc_pps, hevc_sps, hevc_vps, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#html&#34;&gt;html&lt;/a&gt;, icc_profile, icmp, icmpv6, id3v1, id3v11, id3v2, ipv4_packet, ipv6_packet, jpeg, json, jsonl, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#macho&#34;&gt;macho&lt;/a&gt;, macho_fat, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#markdown&#34;&gt;markdown&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#matroska&#34;&gt;matroska&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#mp3&#34;&gt;mp3&lt;/a&gt;, mp3_frame, mp3_frame_tags, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#mp4&#34;&gt;mp4&lt;/a&gt;, mpeg_asc, mpeg_es, mpeg_pes, mpeg_pes_packet, mpeg_spu, mpeg_ts, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#msgpack&#34;&gt;msgpack&lt;/a&gt;, ogg, ogg_page, opus_packet, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#pcap&#34;&gt;pcap&lt;/a&gt;, pcapng, png, prores_frame, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#protobuf&#34;&gt;protobuf&lt;/a&gt;, protobuf_widevine, pssh_playready, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#rtmp&#34;&gt;rtmp&lt;/a&gt;, sll2_packet, sll_packet, tar, tcp_segment, tiff, toml, udp_datagram, vorbis_comment, vorbis_packet, vp8_frame, vp9_cfm, vp9_frame, vpx_ccr, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#wasm&#34;&gt;wasm&lt;/a&gt;, wav, webp, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#xml&#34;&gt;xml&lt;/a&gt;, yaml, &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md#zip&#34;&gt;zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It can also work with some common text formats like URL:s, hex, base64, PEM etc and for some serialization formats like XML, YAML etc it can transform both from and to jq values.&lt;/p&gt; &#xA;&lt;p&gt;For details see &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/formats.md&#34;&gt;formats.md&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/usage.md&#34;&gt;usage.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Presentations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;fq - jq for binary formats&#34; at &lt;a href=&#34;https://mediaarea.net/NoTimeToWait6&#34;&gt;No time to wait 6&lt;/a&gt; - &lt;a href=&#34;https://www.youtube.com/watch?v=-Pwt5KL-xRs&amp;amp;t=1450s&#34;&gt;video&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/presentations/nttw6/fq-nttw6-slides.pdf&#34;&gt;slides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;fq - jq for binary formats&#34; at &lt;a href=&#34;https://binary-tools.net/summit.html&#34;&gt;Binary Tools Summit 2022&lt;/a&gt; - &lt;a href=&#34;https://www.youtube.com/watch?v=GJOq_b0eb-s&amp;amp;list=PLTj8twuHdQz-JcX7k6eOwyVPDB8CyfZc8&amp;amp;index=1&#34;&gt;video&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/presentations/bts2022/fq-bts2022-v1.pdf&#34;&gt;slides&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use one of the methods listed below or download a pre-built &lt;a href=&#34;https://github.com/wader/fq/releases&#34;&gt;release&lt;/a&gt; for macOS, Linux or Windows. Unarchive it and move the executable to &lt;code&gt;PATH&lt;/code&gt; etc.&lt;/p&gt; &#xA;&lt;p&gt;On macOS if you don&#39;t install using a method below you might have to manually allow the binary to run. This can be done by trying to run the binary, ignore the warning and then go into security preference and allow it. Same can be done with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xattr -d com.apple.quarantine fq &amp;amp;&amp;amp; spctl --add fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew (macOS)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install wader/tap/fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacPorts&lt;/h3&gt; &#xA;&lt;p&gt;On macOS, &lt;code&gt;fq&lt;/code&gt; can also be installed via &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;. More details &lt;a href=&#34;https://ports.macports.org/port/fq/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo port install fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fq&lt;/code&gt; can be installed via &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;scoop install fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;fq&lt;/code&gt; can be installed from the &lt;a href=&#34;https://archlinux.org/packages/community/x86_64/fq/&#34;&gt;community repository&lt;/a&gt; using &lt;a href=&#34;https://wiki.archlinux.org/title/Pacman&#34;&gt;pacman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build and install the development (VCS) package using an &lt;a href=&#34;https://wiki.archlinux.org/index.php/AUR_helpers&#34;&gt;AUR helper&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S fq-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-shell -p fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FreeBSD&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://cgit.freebsd.org/ports/tree/misc/fq&#34;&gt;fq&lt;/a&gt; port.&lt;/p&gt; &#xA;&lt;h3&gt;Alpine&lt;/h3&gt; &#xA;&lt;p&gt;Currently in edge testing but should work fine in stable also.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apk add -X http://dl-cdn.alpinelinux.org/alpine/edge/testing fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have &lt;a href=&#34;https://go.dev&#34;&gt;go&lt;/a&gt; 1.18 or later installed.&lt;/p&gt; &#xA;&lt;p&gt;To install directly from git repository (no clone needed) do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# build and install latest release&#xA;go install github.com/wader/fq@latest&#xA;&#xA;# build and install latest master&#xA;go install github.com/wader/fq@master&#xA;&#xA;# copy binary to $PATH if needed&#xA;cp &#34;$(go env GOPATH)/bin/fq&#34; /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build, run and test from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# build an run&#xA;go run fq.go&#xA;# or&#xA;go run .&#xA;# just build&#xA;go build -o fq .&#xA;# run all tests and build binary&#xA;make test fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO and ideas&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/TODO.md&#34;&gt;TODO.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development and adding a new decoder&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/doc/dev.md&#34;&gt;dev.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks and related projects&lt;/h2&gt; &#xA;&lt;p&gt;This project would not have been possible without &lt;a href=&#34;https://github.com/itchyny&#34;&gt;itchyny&lt;/a&gt;&#39;s jq implementation &lt;a href=&#34;https://github.com/itchyny/gojq&#34;&gt;gojq&lt;/a&gt;. I also want to thank &lt;a href=&#34;https://github.com/HexFiend/HexFiend&#34;&gt;HexFiend&lt;/a&gt; for inspiration and ideas and &lt;a href=&#34;https://github.com/stedolan&#34;&gt;stedolan&lt;/a&gt; for inventing the &lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;jq&lt;/a&gt; language.&lt;/p&gt; &#xA;&lt;h3&gt;Similar or related projects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HexFiend/HexFiend&#34;&gt;HexFiend&lt;/a&gt; Hex editor for macOS with format template support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binspector/binspector&#34;&gt;binspector&lt;/a&gt; Binary format analysis tool with query langauge and REPL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kaitai.io&#34;&gt;kaitai&lt;/a&gt; Declarative binary format parsing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wireshark.org&#34;&gt;Wireshark&lt;/a&gt; Decodes network traffic (tip: &lt;code&gt;tshark -T json&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mediaarea.net/en/MediaInfo&#34;&gt;MediaInfo&lt;/a&gt; Analyze media files (tip &lt;code&gt;mediainfo --Output=JSON&lt;/code&gt; and &lt;code&gt;mediainfo --Details=1&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jemarch.net/poke&#34;&gt;GNU poke&lt;/a&gt; The extensible editor for structured binary data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org&#34;&gt;ffmpeg/ffprobe&lt;/a&gt; Powerful media libraries and tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.kernel.org/pub/scm/utils/util-linux/util-linux.git/tree/text-utils/hexdump.c&#34;&gt;hexdump&lt;/a&gt; Hex viewer tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.janouch.name/p/hex&#34;&gt;hex&lt;/a&gt; Interactive hex viewer with format support via lua.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vstinner/hachoir&#34;&gt;hachoir&lt;/a&gt; General python library for working binary data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://scapy.net&#34;&gt;scapy&lt;/a&gt; Decode/Encode formats, focus on network protocols.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fq&lt;/code&gt; is distributed under the terms of the MIT License.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/wader/fq/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for license details.&lt;/p&gt; &#xA;&lt;p&gt;Licenses of direct dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forked version of gojq &lt;a href=&#34;https://github.com/itchyny/gojq/raw/main/LICENSE&#34;&gt;https://github.com/itchyny/gojq/blob/main/LICENSE&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;Forked version of readline &lt;a href=&#34;https://github.com/chzyer/readline/raw/master/LICENSE&#34;&gt;https://github.com/chzyer/readline/blob/master/LICENSE&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;github.com/BurntSushi/toml &lt;a href=&#34;https://github.com/BurntSushi/toml/raw/master/COPYING&#34;&gt;https://github.com/BurntSushi/toml/blob/master/COPYING&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;github.com/creasty/defaults &lt;a href=&#34;https://github.com/creasty/defaults/raw/master/LICENSE&#34;&gt;https://github.com/creasty/defaults/blob/master/LICENSE&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;github.com/gomarkdown/markdown &lt;a href=&#34;https://github.com/gomarkdown/markdown/raw/master/LICENSE.txt&#34;&gt;https://github.com/gomarkdown/markdown/blob/master/LICENSE.txt&lt;/a&gt; (BSD)&lt;/li&gt; &#xA; &lt;li&gt;github.com/gopacket/gopacket &lt;a href=&#34;https://github.com/gopacket/gopacket/raw/master/LICENSE&#34;&gt;https://github.com/gopacket/gopacket/blob/master/LICENSE&lt;/a&gt; (BSD)&lt;/li&gt; &#xA; &lt;li&gt;github.com/mitchellh/copystructure &lt;a href=&#34;https://github.com/mitchellh/copystructure/raw/master/LICENSE&#34;&gt;https://github.com/mitchellh/copystructure/blob/master/LICENSE&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;github.com/mitchellh/mapstructure &lt;a href=&#34;https://github.com/mitchellh/mapstructure/raw/master/LICENSE&#34;&gt;https://github.com/mitchellh/mapstructure/blob/master/LICENSE&lt;/a&gt; (MIT)&lt;/li&gt; &#xA; &lt;li&gt;github.com/pmezard/go-difflib &lt;a href=&#34;https://github.com/pmezard/go-difflib/raw/master/LICENSE&#34;&gt;https://github.com/pmezard/go-difflib/blob/master/LICENSE&lt;/a&gt; (BSD)&lt;/li&gt; &#xA; &lt;li&gt;golang/snappy &lt;a href=&#34;https://github.com/golang/snappy/raw/master/LICENSE&#34;&gt;https://github.com/golang/snappy/blob/master/LICENSE&lt;/a&gt; (BSD)&lt;/li&gt; &#xA; &lt;li&gt;golang/x/* &lt;a href=&#34;https://github.com/golang/text/raw/master/LICENSE&#34;&gt;https://github.com/golang/text/blob/master/LICENSE&lt;/a&gt; (BSD)&lt;/li&gt; &#xA; &lt;li&gt;gopkg.in/yaml.v3 &lt;a href=&#34;https://github.com/go-yaml/yaml/raw/v3/LICENSE&#34;&gt;https://github.com/go-yaml/yaml/blob/v3/LICENSE&lt;/a&gt; (MIT)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>beringresearch/macpine</title>
    <updated>2022-11-30T01:33:21Z</updated>
    <id>tag:github.com,2022-11-30:/beringresearch/macpine</id>
    <link href="https://github.com/beringresearch/macpine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight Linux VMs on MacOS&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/beringresearch/macpine&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/beringresearch/macpine&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Lightweight Alpine VMs on MacOS&lt;/h1&gt; &#xA;&lt;p&gt;Create and manage lightweight Alpine VMs on MacOS with:&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🔁&lt;/span&gt; Seamless port forwarding&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🗂&lt;/span&gt; Automatic file sharing&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🎢&lt;/span&gt; Bridged networking&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🚀&lt;/span&gt; aarch64 and x86_64 emulation&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this project is to enable MacOS users to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Easily spin up and manage lightweight Alpine Linux environments.&lt;/li&gt; &#xA; &lt;li&gt;Use tiny VMs to take advantage of containerisation technologies, including &lt;a href=&#34;https://linuxcontainers.org/lxd/introduction/&#34;&gt;LXD&lt;/a&gt; and Docker.&lt;/li&gt; &#xA; &lt;li&gt;Build and test software on x86_64 and aarch64 systems.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Macpine depends on QEMU &amp;gt;= 6.2.0_1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#brew update&#xA;#brew upgrade&#xA;brew install qemu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install the latest binary&lt;/h2&gt; &#xA;&lt;p&gt;Download the &lt;a href=&#34;https://github.com/beringresearch/macpine/releases&#34;&gt;latest binary release&lt;/a&gt; for your system and add it to your path by placing to e.g. &lt;code&gt;/usr/local/bin/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/beringresearch/macpine/releases/download/v.07/alpine_darwin_arm64&#xA;mv alpine_darwin_arm64 alpine&#xA;sudo chmod +x alpine&#xA;sudo mv alpine /usr/local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install from Homebrew&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install macpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install from MacPorts&lt;/h2&gt; &#xA;&lt;p&gt;On macOS, you can install via &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo port install macpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more information &lt;a href=&#34;https://ports.macports.org/port/macpine/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install from source&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/beringresearch/macpine&#xA;cd macpine&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;To launch a brand new VM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alpine launch #launches with default parameters&#xA;alpine launch -a aarch64 #create an aarch64 instance&#xA;alpine launch -d 10G -c 4 -m 2048 #create a machine with a 10GB disk, 4 cpus and 2GB of RAM&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Access VM via ssh:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alpine launch -s 22 #launch a VM and expose SSH port to host port 22&#xA;ssh root@localhost -p 22 #password: root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expose additional VM ports to host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alpine launch -s 23 -p 8888,5432 #launch a VM, expose SSH to host port 23 and forward VM ports 8888 and 5432 to host ports 8888 and 5432&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;VMs can be easily packaged for export and re-use as tar.gz files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alpine list&#xA;&#xA;NAME                STATUS      SSH    PORTS ARCH        PID &#xA;forthright-hook     Running     23           aarch64     91598&#xA;hot-cow             Running     22           x86_64      82361&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alpine publish hot-cow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a file hot-cow.tar.gz which can be imported as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alpine import hot-cow.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Reference&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Create, control and connect to Alpine instances.&#xA;&#xA;Usage:&#xA;  alpine [command]&#xA;&#xA;Available Commands:&#xA;  delete      Delete an instance.&#xA;  edit        Edit instance configuration using Vim.&#xA;  exec        execute COMMAND over ssh.&#xA;  help        Help about any command&#xA;  import      Imports an instance.&#xA;  info        Display information about instances.&#xA;  launch      Launch an Alpine instance.&#xA;  list        List all available instances.&#xA;  publish     Publish an instance.&#xA;  ssh         Attach an interactive shell to an instance.&#xA;  start       Start an instance.&#xA;  stop        Stop an instance.&#xA;&#xA;Flags:&#xA;  -h, --help   help for alpine&#xA;&#xA;Use &#34;alpine [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>jesseduffield/lazydocker</title>
    <updated>2022-11-30T01:33:21Z</updated>
    <id>tag:github.com,2022-11-30:/jesseduffield/lazydocker</id>
    <link href="https://github.com/jesseduffield/lazydocker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The lazier way to manage everything docker&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8456633/59972109-8e9c8480-95cc-11e9-8350-38f7f86ba76d.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;A simple terminal UI for both docker and docker-compose, written in Go with the &lt;a href=&#34;https://github.com/jroimartin/gocui&#34; title=&#34;gocui&#34;&gt;gocui&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/jesseduffield/lazygit/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/jesseduffield/lazydocker&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/jesseduffield/lazydocker&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://golangci.com&#34;&gt;&lt;img src=&#34;https://golangci.com/badges/github.com/jesseduffield/lazydocker.svg?sanitize=true&#34; alt=&#34;GolangCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/jesseduffield/lazydocker&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/jesseduffield/lazydocker?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/jesseduffield/lazydocker&#34; alt=&#34;GitHub repo size&#34;&gt; &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/jesseduffield/lazydocker/total&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/jesseduffield/lazydocker.svg?sanitize=true&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Homebrew/homebrew-core/raw/master/Formula/lazydocker.rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/lazydocker&#34; alt=&#34;homebrew&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/demo3.gif&#34; alt=&#34;Gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/NICqQPxwJWw&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Maintainence of this project is made possible by all the &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/graphs/contributors&#34;&gt;contributors&lt;/a&gt; and &lt;a href=&#34;https://github.com/sponsors/jesseduffield&#34;&gt;sponsors&lt;/a&gt;. If you&#39;d like to sponsor this project and have your avatar or company logo appear below &lt;a href=&#34;https://github.com/sponsors/jesseduffield&#34;&gt;click here&lt;/a&gt;. 💙 &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- sponsors --&gt;&lt;a href=&#34;https://github.com/atecce&#34;&gt;&lt;img src=&#34;https://github.com/atecce.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/intabulas&#34;&gt;&lt;img src=&#34;https://github.com/intabulas.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/peppy&#34;&gt;&lt;img src=&#34;https://github.com/peppy.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/piot&#34;&gt;&lt;img src=&#34;https://github.com/piot.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/blacky14&#34;&gt;&lt;img src=&#34;https://github.com/blacky14.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/rgwood&#34;&gt;&lt;img src=&#34;https://github.com/rgwood.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/oliverguenther&#34;&gt;&lt;img src=&#34;https://github.com/oliverguenther.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/pawanjay176&#34;&gt;&lt;img src=&#34;https://github.com/pawanjay176.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/bdach&#34;&gt;&lt;img src=&#34;https://github.com/bdach.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/naoey&#34;&gt;&lt;img src=&#34;https://github.com/naoey.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/jryom&#34;&gt;&lt;img src=&#34;https://github.com/jryom.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/carstengehling&#34;&gt;&lt;img src=&#34;https://github.com/carstengehling.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/ceuk&#34;&gt;&lt;img src=&#34;https://github.com/ceuk.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/akospwc&#34;&gt;&lt;img src=&#34;https://github.com/akospwc.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/peterdieleman&#34;&gt;&lt;img src=&#34;https://github.com/peterdieleman.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Xetera&#34;&gt;&lt;img src=&#34;https://github.com/Xetera.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/HoldenLucas&#34;&gt;&lt;img src=&#34;https://github.com/HoldenLucas.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/barbados-clemens&#34;&gt;&lt;img src=&#34;https://github.com/barbados-clemens.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/nartc&#34;&gt;&lt;img src=&#34;https://github.com/nartc.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/&#34;&gt;&lt;img src=&#34;https://github.com/.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/matejcik&#34;&gt;&lt;img src=&#34;https://github.com/matejcik.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/lucatume&#34;&gt;&lt;img src=&#34;https://github.com/lucatume.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/dbabiak&#34;&gt;&lt;img src=&#34;https://github.com/dbabiak.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/davidlattimore&#34;&gt;&lt;img src=&#34;https://github.com/davidlattimore.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/zach-fuller&#34;&gt;&lt;img src=&#34;https://github.com/zach-fuller.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/escrafford&#34;&gt;&lt;img src=&#34;https://github.com/escrafford.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/davdroman&#34;&gt;&lt;img src=&#34;https://github.com/davdroman.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/KowalskiPiotr98&#34;&gt;&lt;img src=&#34;https://github.com/KowalskiPiotr98.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/IvanZuy&#34;&gt;&lt;img src=&#34;https://github.com/IvanZuy.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/nicholascloud&#34;&gt;&lt;img src=&#34;https://github.com/nicholascloud.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/topher200&#34;&gt;&lt;img src=&#34;https://github.com/topher200.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/PhotonQuantum&#34;&gt;&lt;img src=&#34;https://github.com/PhotonQuantum.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/GitSquared&#34;&gt;&lt;img src=&#34;https://github.com/GitSquared.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/ava1ar&#34;&gt;&lt;img src=&#34;https://github.com/ava1ar.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/alqh&#34;&gt;&lt;img src=&#34;https://github.com/alqh.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/pedropombeiro&#34;&gt;&lt;img src=&#34;https://github.com/pedropombeiro.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/minidfx&#34;&gt;&lt;img src=&#34;https://github.com/minidfx.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/JoeKlemmer&#34;&gt;&lt;img src=&#34;https://github.com/JoeKlemmer.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/MikaelElkiaer&#34;&gt;&lt;img src=&#34;https://github.com/MikaelElkiaer.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/smoogipoo&#34;&gt;&lt;img src=&#34;https://github.com/smoogipoo.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/ColonelBucket8&#34;&gt;&lt;img src=&#34;https://github.com/ColonelBucket8.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/mutewinter&#34;&gt;&lt;img src=&#34;https://github.com/mutewinter.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/tobi&#34;&gt;&lt;img src=&#34;https://github.com/tobi.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/benmacleod&#34;&gt;&lt;img src=&#34;https://github.com/benmacleod.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/benbfortis&#34;&gt;&lt;img src=&#34;https://github.com/benbfortis.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/jakewarren&#34;&gt;&lt;img src=&#34;https://github.com/jakewarren.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/huettern&#34;&gt;&lt;img src=&#34;https://github.com/huettern.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/tgpholly&#34;&gt;&lt;img src=&#34;https://github.com/tgpholly.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Fuzznimp&#34;&gt;&lt;img src=&#34;https://github.com/Fuzznimp.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/crab-apple&#34;&gt;&lt;img src=&#34;https://github.com/crab-apple.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/Tommylans&#34;&gt;&lt;img src=&#34;https://github.com/Tommylans.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/jacktrusler&#34;&gt;&lt;img src=&#34;https://github.com/jacktrusler.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/lubosm&#34;&gt;&lt;img src=&#34;https://github.com/lubosm.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/xdice86&#34;&gt;&lt;img src=&#34;https://github.com/xdice86.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/pablosproject&#34;&gt;&lt;img src=&#34;https://github.com/pablosproject.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/bossqone&#34;&gt;&lt;img src=&#34;https://github.com/bossqone.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/benfrain&#34;&gt;&lt;img src=&#34;https://github.com/benfrain.png&#34; width=&#34;60px&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- sponsors --&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Elevator Pitch&lt;/h2&gt; &#xA;&lt;p&gt;Minor rant incoming: Something&#39;s not working? Maybe a service is down. &lt;code&gt;docker-compose ps&lt;/code&gt;. Yep, it&#39;s that microservice that&#39;s still buggy. No issue, I&#39;ll just restart it: &lt;code&gt;docker-compose restart&lt;/code&gt;. Okay now let&#39;s try again. Oh wait the issue is still there. Hmm. &lt;code&gt;docker-compose ps&lt;/code&gt;. Right so the service must have just stopped immediately after starting. I probably would have known that if I was reading the log stream, but there is a lot of clutter in there from other services. I could get the logs for just that one service with &lt;code&gt;docker compose logs --follow myservice&lt;/code&gt; but that dies everytime the service dies so I&#39;d need to run that command every time I restart the service. I could alternatively run &lt;code&gt;docker-compose up myservice&lt;/code&gt; and in that terminal window if the service is down I could just &lt;code&gt;up&lt;/code&gt; it again, but now I&#39;ve got one service hogging a terminal window even after I no longer care about its logs. I guess when I want to reclaim the terminal realestate I can do &lt;code&gt;ctrl+P,Q&lt;/code&gt;, but... wait, that&#39;s not working for some reason. Should I use ctrl+C instead? I can&#39;t remember if that closes the foreground process or kills the actual service.&lt;/p&gt; &#xA;&lt;p&gt;What a headache!&lt;/p&gt; &#xA;&lt;p&gt;Memorising docker commands is hard. Memorising aliases is slightly less hard. Keeping track of your containers across multiple terminal windows is near impossible. What if you had all the information you needed in one terminal window with every common command living one keypress away (and the ability to add custom commands as well). Lazydocker&#39;s goal is to make that dream a reality.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#cool-features&#34;&gt;Cool Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/NICqQPxwJWw&#34;&gt;Video Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md&#34;&gt;Config Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/jesseduffield&#34;&gt;Twitch Stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesseduffield/lazydocker#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker &amp;gt;= &lt;strong&gt;1.13&lt;/strong&gt; (API &amp;gt;= &lt;strong&gt;1.25&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Docker-Compose &amp;gt;= &lt;strong&gt;1.23.2&lt;/strong&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;Normally &lt;code&gt;lazydocker&lt;/code&gt; formula can be found in the Homebrew core but we suggest you to tap our formula to get frequently updated one. It works with Linux, too.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tap&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install jesseduffield/lazydocker/lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Core&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scoop (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop install lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chocolatey (Windows)&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;lazydocker&lt;/code&gt; using &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;choco install lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;asdf-vm&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;a href=&#34;https://github.com/comdotlinux/asdf-lazydocker&#34;&gt;asdf-lazydocker plugin&lt;/a&gt; using &lt;a href=&#34;https://asdf-vm.com/&#34;&gt;asdf-vm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;h4&gt;Setup (Once)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;asdf plugin add lazydocker https://github.com/comdotlinux/asdf-lazydocker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For Install / Upgrade&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;asdf list all lazydocker&#xA;asdf install lazydocker 0.12&#xA;asdf global lazydocker 0.12&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary Release (Linux/OSX/Windows)&lt;/h3&gt; &#xA;&lt;p&gt;You can manually download a binary release from &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/releases&#34;&gt;the release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Automated install/update, don&#39;t forget to always verify what you&#39;re piping into bash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl https://raw.githubusercontent.com/jesseduffield/lazydocker/master/scripts/install_update_linux.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script installs downloaded binary to &lt;code&gt;$HOME/.local/bin&lt;/code&gt; directory by default, but it can be changed by setting &lt;code&gt;DIR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h3&gt;Go&lt;/h3&gt; &#xA;&lt;p&gt;Required Go Version &amp;gt;= &lt;strong&gt;1.16&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/jesseduffield/lazydocker@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Required Go version &amp;gt;= &lt;strong&gt;1.8&lt;/strong&gt;, &amp;lt;= &lt;strong&gt;1.17&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/jesseduffield/lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch Linux AUR&lt;/h3&gt; &#xA;&lt;p&gt;You can install lazydocker using the &lt;a href=&#34;https://aur.archlinux.org/packages/lazydocker&#34;&gt;AUR&lt;/a&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -S lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/lazyteam/lazydocker&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/lazyteam/lazydocker.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lazyteam/lazydocker&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/lazyteam/lazydocker.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/lazyteam/lazydocker&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/automated/lazyteam/lazydocker.svg?sanitize=true&#34; alt=&#34;Docker Automated&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Click if you have an ARM device&lt;/summary&gt;&#xA;   &lt;p&gt; &lt;/p&gt;&#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v6 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t lazyteam/lazydocker \&#xA;--build-arg BASE_IMAGE_BUILDER=arm32v6/golang \&#xA;--build-arg GOARCH=arm \&#xA;--build-arg GOARM=6 \&#xA;https://github.com/jesseduffield/lazydocker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you have a ARM 32 bit v7 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t lazyteam/lazydocker \&#xA;--build-arg BASE_IMAGE_BUILDER=arm32v7/golang \&#xA;--build-arg GOARCH=arm \&#xA;--build-arg GOARM=7 \&#xA;https://github.com/jesseduffield/lazydocker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;If you have a ARM 64 bit v8 architecture&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker build -t lazyteam/lazydocker \&#xA;--build-arg BASE_IMAGE_BUILDER=arm64v8/golang \&#xA;--build-arg GOARCH=arm64 \&#xA;https://github.com/jesseduffield/lazydocker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;p&gt;&lt;/p&gt;&#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the container&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -it -v \&#xA;/var/run/docker.sock:/var/run/docker.sock \&#xA;-v /yourpath:/.config/jesseduffield/lazydocker \&#xA;lazyteam/lazydocker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t forget to change &lt;code&gt;/yourpath&lt;/code&gt; to an actual path you created to store lazydocker&#39;s config&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can also use this &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/raw/master/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You might want to create an alias, for example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#34;alias lzd=&#39;docker run --rm -it -v /var/run/docker.sock:/var/run/docker.sock -v /yourpath/config:/.config/jesseduffield/lazydocker lazyteam/lazydocker&#39;&#34; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For development, you can build the image using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/jesseduffield/lazydocker.git&#xA;cd lazydocker&#xA;docker build -t lazyteam/lazydocker \&#xA;    --build-arg BUILD_DATE=`date -u +&#34;%Y-%m-%dT%H:%M:%SZ&#34;` \&#xA;    --build-arg VCS_REF=`git rev-parse --short HEAD` \&#xA;    --build-arg VERSION=`git describe --abbrev=0 --tag` \&#xA;    .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you encounter a compatibility issue with Docker bundled binary, try rebuilding the image with the build argument &lt;code&gt;--build-arg DOCKER_VERSION=&#34;v$(docker -v | cut -d&#34; &#34; -f3 | rev | cut -c 2- | rev)&#34;&lt;/code&gt; so that the bundled docker binary matches your host docker binary version.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Call &lt;code&gt;lazydocker&lt;/code&gt; in your terminal. I personally use this a lot so I&#39;ve made an alias for it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;alias lzd=&#39;lazydocker&#39;&#34; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(you can substitute .zshrc for whatever rc file you&#39;re using)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic video tutorial &lt;a href=&#34;https://youtu.be/NICqQPxwJWw&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;List of keybindings &lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/keybindings&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cool features&lt;/h2&gt; &#xA;&lt;p&gt;everything is one keypress away (or one click away! Mouse support FTW):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;viewing the state of your docker or docker-compose container environment at a glance&lt;/li&gt; &#xA; &lt;li&gt;viewing logs for a container/service&lt;/li&gt; &#xA; &lt;li&gt;viewing ascii graphs of your containers&#39; metrics so that you can not only feel but also look like a developer&lt;/li&gt; &#xA; &lt;li&gt;customising those graphs to measure nearly any metric you want&lt;/li&gt; &#xA; &lt;li&gt;attaching to a container/service&lt;/li&gt; &#xA; &lt;li&gt;restarting/removing/rebuilding containers/services&lt;/li&gt; &#xA; &lt;li&gt;viewing the ancestor layers of a given image&lt;/li&gt; &#xA; &lt;li&gt;pruning containers, images, or volumes that are hogging up disk space&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There is still a lot of work to go! Please check out the &lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;. For contributor discussion about things not better discussed here in the repo, join the discord channel&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/ehwFt2t4wt&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/resources/discord.png&#34; width=&#34;75&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to support the development of lazydocker, consider &lt;a href=&#34;https://github.com/sponsors/jesseduffield&#34;&gt;sponsoring me&lt;/a&gt; (github is matching all donations dollar-for-dollar for 12 months)&lt;/p&gt; &#xA;&lt;h2&gt;Social&lt;/h2&gt; &#xA;&lt;p&gt;If you want to see what I (Jesse) am up to in terms of development, follow me on &lt;a href=&#34;https://twitter.com/DuffieldJesse&#34;&gt;twitter&lt;/a&gt; or watch me program on &lt;a href=&#34;https://www.twitch.tv/jesseduffield&#34;&gt;twitch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How do I edit my config?&lt;/h3&gt; &#xA;&lt;p&gt;By opening lazydocker, clicking on the &#39;project&#39; panel in the top left, and pressing &#39;o&#39; (or &#39;e&#39; if your editor is vim). See &lt;a href=&#34;https://raw.githubusercontent.com/jesseduffield/lazydocker/master/docs/Config.md&#34;&gt;Config Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How do I get text to wrap in my main panel?&lt;/h3&gt; &#xA;&lt;p&gt;In the future I want to make this the default, but for now there are some CPU issues that arise with wrapping. If you want to enable wrapping, use &lt;code&gt;gui.wrapMainPanel: true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How do you select text?&lt;/h3&gt; &#xA;&lt;p&gt;Because we support mouse events, you will need to hold option while dragging the mouse to indicate you&#39;re trying to select text rather than click on something. Alternatively you can disable mouse events via the &lt;code&gt;gui.ignoreMouseEvents&lt;/code&gt; config value.&lt;/p&gt; &#xA;&lt;p&gt;Mac Users: See &lt;a href=&#34;https://github.com/jesseduffield/lazydocker/issues/190&#34;&gt;Issue #190&lt;/a&gt; for other options.&lt;/p&gt; &#xA;&lt;h3&gt;Why can&#39;t I see my container&#39;s logs?&lt;/h3&gt; &#xA;&lt;p&gt;By default we only show logs from the last hour, so that we&#39;re not putting too much strain on the machine. This may be why you can&#39;t see logs when you first start lazydocker. This can be overwritten in the config&#39;s &lt;code&gt;commandTemplates&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are running lazydocker in Docker container, it is a know bug, that you can&#39;t see logs or CPU usage.&lt;/p&gt; &#xA;&lt;h3&gt;Why isn&#39;t my docker-compose environment being used?&lt;/h3&gt; &#xA;&lt;p&gt;By default Compose V1 (&lt;code&gt;docker-compose&lt;/code&gt; with the hyphen) is used as the docker-compose command. You will need to make sure you have the &lt;code&gt;docker-compose&lt;/code&gt; command available for lazydocker to be able to use.&lt;/p&gt; &#xA;&lt;p&gt;If you use Compose V2 (&lt;code&gt;docker compose&lt;/code&gt; without the hyphen), alternatively, you can change the docker-compose command used via the &lt;code&gt;commandTemplates.dockerCompose&lt;/code&gt; config value.&lt;/p&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skanehira/docui&#34;&gt;docui&lt;/a&gt; - Skanehira beat me to the punch on making a docker terminal UI, so definitely check out that repo as well! I think the two repos can live in harmony though: lazydocker is more about managing existing containers/services, and docui is more about creating and configuring them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/portainer/portainer&#34;&gt;Portainer&lt;/a&gt; - Portainer tries to solve the same problem but it&#39;s accessed via your browser rather than your terminal. It also supports docker swarm.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/veggiemonk/awesome-docker/raw/master/README.md#terminal&#34;&gt;Awesome Docker list&lt;/a&gt; for similar tools to work with Docker.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>