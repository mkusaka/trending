<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-08T01:36:48Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ddev/ddev</title>
    <updated>2023-03-08T01:36:48Z</updated>
    <id>tag:github.com,2023-03-08:/ddev/ddev</id>
    <link href="https://github.com/ddev/ddev" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker-based local PHP+Node.js web development environments&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/ddev-logo.svg?sanitize=true&#34; alt=&#34;DDEV Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/ddev/ddev&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ddev/ddev.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/maintenance/yes/2023.svg?sanitize=true&#34; alt=&#34;project is maintained&#34;&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/ddev/ddev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/codespaces/new?hide_repo_select=true&amp;amp;ref=20221220_codespaces&amp;amp;repo=80669528&amp;amp;machine=basicLinux32gb&amp;amp;location=WestUs2&#34;&gt;&lt;img src=&#34;https://github.com/codespaces/badge.svg?sanitize=true&#34; alt=&#34;Open in GitHub Codespaces&#34; style=&#34;max-width: 100%; height: 20px;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DDEV is an open source tool for running local PHP development environments in minutes. Its powerful, flexible per-project environment configurations can be extended, version controlled, and shared. DDEV allows development teams to adopt a consistent Docker workflow without the complexities of bespoke configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Check &lt;a href=&#34;https://ddev.readthedocs.io/&#34;&gt;System Requirements&lt;/a&gt;:&lt;/strong&gt; macOS (Intel and Apple Silicon), Windows 10/11, WSL2, Linux, and &lt;a href=&#34;https://www.gitpod.io&#34;&gt;Gitpod&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/install/&#34;&gt;Docker/Colima and DDEV&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Try a &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/quickstart/&#34;&gt;CMS Quick Start Guide&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you need help, our friendly community provides &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/support&#34;&gt;great support&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Partial Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quickly create local web development environments based on code repositories, with minimal configuration.&lt;/li&gt; &#xA; &lt;li&gt;Import a database to any of your local environments.&lt;/li&gt; &#xA; &lt;li&gt;Import upload files to match the project (e.g. Drupal sites/default/files or WordPress &lt;code&gt;wp-content/uploads&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Customizable integration with hosting platforms like &lt;a href=&#34;https://platform.sh&#34;&gt;Platform.sh&lt;/a&gt;, &lt;a href=&#34;https://pantheon.io&#34;&gt;Pantheon&lt;/a&gt;, &lt;a href=&#34;https://www.acquia.com&#34;&gt;Acquia&lt;/a&gt; and others.&lt;/li&gt; &#xA; &lt;li&gt;Run commands within the Docker environment using &lt;code&gt;ddev exec&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;View logs from the web and database containers.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;ddev ssh&lt;/code&gt; to explore the Linux environment inside the container.&lt;/li&gt; &#xA; &lt;li&gt;List running projects with &lt;code&gt;ddev list&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Snapshot databases with &lt;code&gt;ddev snapshot&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Temporarily share your development website with others using &lt;code&gt;ddev share&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create custom commands as simple shell scripts.&lt;/li&gt; &#xA; &lt;li&gt;Enjoy effortless, trusted HTTPS support.&lt;/li&gt; &#xA; &lt;li&gt;Extend and customize environments as much (or as little!) as you need to.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run &lt;code&gt;ddev&lt;/code&gt; to see all the &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/usage/cli/&#34;&gt;commands&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See ‚ÄúHow can I contribute to DDEV?‚Äù in the &lt;a href=&#34;https://ddev.readthedocs.io/en/latest/users/usage/faq/&#34;&gt;FAQ&lt;/a&gt;, and the &lt;a href=&#34;https://raw.githubusercontent.com/ddev/ddev/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Wonderful Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://platform.sh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/Platformsh_Logo_DDEV.jpg&#34; alt=&#34;Platform.sh&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tag1.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/tag1-logo.svg?sanitize=true&#34; alt=&#34;Tag1&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://agaric.coop/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/agaric-logo-stacked.svg?sanitize=true&#34; alt=&#34;Agaric&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://b13.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/b13-logo.png&#34; alt=&#34;b13&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gizra.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/gizra-logo.png&#34; alt=&#34;Gizra&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wandoliver&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/oliver-wand.jpeg&#34; alt=&#34;Oliver Wand&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.centarro.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/centarro-logo.png&#34; alt=&#34;Centarro&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.drupaleasy.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/drupaleasy-logo.png&#34; alt=&#34;DrupalEasy&#34; width=&#34;180&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://redfinsolutions.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/redfin-logo.png&#34; alt=&#34;Redfin Solutions&#34; width=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.macstadium.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/macstadium-logo.png&#34; alt=&#34;MacStadium&#34; width=&#34;100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.lullabot.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/lullabot-lockup-logo.svg?sanitize=true&#34; alt=&#34;Lullabot&#34; width=&#34;150&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://craftcms.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/craft-cms-logo.svg?sanitize=true&#34; alt=&#34;Craft CMS&#34; width=&#34;150&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://undpaul.de&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/undpaul_logo.svg?sanitize=true&#34; alt=&#34;undpaul&#34; width=&#34;150&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://1xinternet.de&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddev/ddev/master/images/1X_Logo_RGB_Red_4.png&#34; alt=&#34;1xINTERNET&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gitleaks/gitleaks</title>
    <updated>2023-03-08T01:36:48Z</updated>
    <id>tag:github.com,2023-03-08:/gitleaks/gitleaks</id>
    <link href="https://github.com/gitleaks/gitleaks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protect and discover secrets using Gitleaks üîë&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gitleaks&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚îå‚îÄ‚óã‚îÄ‚îÄ‚îÄ‚îê&#xA;‚îÇ ‚îÇ‚ï≤  ‚îÇ&#xA;‚îÇ ‚îÇ ‚óã ‚îÇ&#xA;‚îÇ ‚óã ‚ñë ‚îÇ&#xA;‚îî‚îÄ‚ñë‚îÄ‚îÄ‚îÄ‚îò&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://github.com/zricethezav/gitleaks/actions/workflows/test.yml&#34;&gt; &lt;img alt=&#34;Github Test&#34; src=&#34;https://github.com/zricethezav/gitleaks/actions/workflows/test.yml/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/zricethezav/gitleaks&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/zricethezav/gitleaks.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.jit.io/jit-open-source-gitleaks?utm_source=github&amp;amp;utm_medium=badge&amp;amp;utm_campaign=GitleaksReadme&amp;amp;utm_id=oss&amp;amp;items=item-secret-detection&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Secured%20by-Jit-B8287F?style=?style=plastic&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/zricethezav/gitleaks-action&#34;&gt; &lt;img alt=&#34;gitleaks badge&#34; src=&#34;https://img.shields.io/badge/protected%20by-gitleaks-blue&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=zricethezav&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/zricethezav?label=Follow%20zricethezav&amp;amp;style=social&amp;amp;color=blue&#34; alt=&#34;Follow @zricethezav&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gitleaks is a SAST tool for &lt;strong&gt;detecting&lt;/strong&gt; and &lt;strong&gt;preventing&lt;/strong&gt; hardcoded secrets like passwords, api keys, and tokens in git repos. Gitleaks is an &lt;strong&gt;easy-to-use, all-in-one solution&lt;/strong&gt; for detecting secrets, past or present, in your code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚ûú  ~/code(master) gitleaks detect --source . -v&#xA;&#xA;    ‚óã&#xA;    ‚îÇ‚ï≤&#xA;    ‚îÇ ‚óã&#xA;    ‚óã ‚ñë&#xA;    ‚ñë    gitleaks&#xA;&#xA;&#xA;Finding:     &#34;export BUNDLE_ENTERPRISE__CONTRIBSYS__COM=cafebabe:deadbeef&#34;,&#xA;Secret:      cafebabe:deadbeef&#xA;RuleID:      sidekiq-secret&#xA;Entropy:     2.609850&#xA;File:        cmd/generate/config/rules/sidekiq.go&#xA;Line:        23&#xA;Commit:      cd5226711335c68be1e720b318b7bc3135a30eb2&#xA;Author:      John&#xA;Email:       john@users.noreply.github.com&#xA;Date:        2022-08-03T12:31:40Z&#xA;Fingerprint: cd5226711335c68be1e720b318b7bc3135a30eb2:cmd/generate/config/rules/sidekiq.go:sidekiq-secret:23&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Gitleaks can be installed using Homebrew, Docker, or Go. Gitleaks is also available in binary form for many popular platforms and OS types on the &lt;a href=&#34;https://github.com/zricethezav/gitleaks/releases&#34;&gt;releases page&lt;/a&gt;. In addition, Gitleaks can be implemented as a pre-commit hook directly in your repo or as a GitHub action using &lt;a href=&#34;https://github.com/gitleaks/gitleaks-action&#34;&gt;Gitleaks-Action&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# MacOS&#xA;brew install gitleaks&#xA;&#xA;# Docker (DockerHub)&#xA;docker pull zricethezav/gitleaks:latest&#xA;docker run -v ${path_to_host_folder_to_scan}:/path zricethezav/gitleaks:latest [COMMAND] --source=&#34;/path&#34; [OPTIONS]&#xA;&#xA;# Docker (ghcr.io)&#xA;docker pull ghcr.io/zricethezav/gitleaks:latest&#xA;docker run -v ${path_to_host_folder_to_scan}:/path zricethezav/gitleaks:latest [COMMAND] --source=&#34;/path&#34; [OPTIONS]&#xA;&#xA;# From Source&#xA;git clone https://github.com/zricethezav/gitleaks.git&#xA;cd gitleaks&#xA;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Action&lt;/h3&gt; &#xA;&lt;p&gt;Check out the official &lt;a href=&#34;https://github.com/gitleaks/gitleaks-action&#34;&gt;Gitleaks GitHub Action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;name: gitleaks&#xA;on: [pull_request, push, workflow_dispatch]&#xA;jobs:&#xA;  scan:&#xA;    name: gitleaks&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3&#xA;        with:&#xA;          fetch-depth: 0&#xA;      - uses: gitleaks/gitleaks-action@v2&#xA;        env:&#xA;          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}} # Only required for Organizations, not personal accounts.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-Commit&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install pre-commit from &lt;a href=&#34;https://pre-commit.com/#install&#34;&gt;https://pre-commit.com/#install&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file at the root of your repository with the following content:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;repos:&#xA;  - repo: https://github.com/zricethezav/gitleaks&#xA;    rev: v8.16.0&#xA;    hooks:&#xA;      - id: gitleaks&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;for a &lt;a href=&#34;https://github.com/zricethezav/gitleaks/releases&#34;&gt;native execution of GitLeaks&lt;/a&gt; or use the &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/.pre-commit-hooks.yaml&#34;&gt;&lt;code&gt;gitleaks-docker&lt;/code&gt; pre-commit ID&lt;/a&gt; for executing GitLeaks using the &lt;a href=&#34;https://raw.githubusercontent.com/gitleaks/gitleaks/master/#docker&#34;&gt;official Docker images&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Auto-update the config to the latest repos&#39; versions by executing &lt;code&gt;pre-commit autoupdate&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install with &lt;code&gt;pre-commit install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you&#39;re all set!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚ûú git commit -m &#34;this commit contains a secret&#34;&#xA;Detect hardcoded secrets.................................................Failed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: to disable the gitleaks pre-commit hook you can prepend &lt;code&gt;SKIP=gitleaks&lt;/code&gt; to the commit command and it will skip running gitleaks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚ûú SKIP=gitleaks git commit -m &#34;skip gitleaks check&#34;&#xA;Detect hardcoded secrets................................................Skipped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;  gitleaks [command]&#xA;&#xA;Available Commands:&#xA;  completion  generate the autocompletion script for the specified shell&#xA;  detect      detect secrets in code&#xA;  help        Help about any command&#xA;  protect     protect secrets in code&#xA;  version     display gitleaks version&#xA;&#xA;Flags:&#xA;  -b, --baseline-path string       path to baseline with issues that can be ignored&#xA;  -c, --config string              config file path&#xA;                                   order of precedence:&#xA;                                   1. --config/-c&#xA;                                   2. env var GITLEAKS_CONFIG&#xA;                                   3. (--source/-s)/.gitleaks.toml&#xA;                                   If none of the three options are used, then gitleaks will use the default config&#xA;      --exit-code int              exit code when leaks have been encountered (default 1)&#xA;  -h, --help                       help for gitleaks&#xA;  -l, --log-level string           log level (trace, debug, info, warn, error, fatal) (default &#34;info&#34;)&#xA;      --max-target-megabytes int   files larger than this will be skipped&#xA;      --no-banner                  suppress banner&#xA;      --redact                     redact secrets from logs and stdout&#xA;  -f, --report-format string       output format (json, csv, sarif) (default &#34;json&#34;)&#xA;  -r, --report-path string         report file&#xA;  -s, --source string              path to source (default: $PWD) (default &#34;.&#34;)&#xA;  -v, --verbose                    show verbose output from scan&#xA;&#xA;Use &#34;gitleaks [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;There are two commands you will use to detect secrets; &lt;code&gt;detect&lt;/code&gt; and &lt;code&gt;protect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Detect&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;detect&lt;/code&gt; command is used to scan repos, directories, and files. This command can be used on developer machines and in CI environments.&lt;/p&gt; &#xA;&lt;p&gt;When running &lt;code&gt;detect&lt;/code&gt; on a git repository, gitleaks will parse the output of a &lt;code&gt;git log -p&lt;/code&gt; command (you can see how this executed &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/7240e16769b92d2a1b137c17d6bf9d55a8562899/git/git.go#L17-L25&#34;&gt;here&lt;/a&gt;). &lt;a href=&#34;https://git-scm.com/docs/git-log#_generating_patch_text_with_p&#34;&gt;&lt;code&gt;git log -p&lt;/code&gt; generates patches&lt;/a&gt; which gitleaks will use to detect secrets. You can configure what commits &lt;code&gt;git log&lt;/code&gt; will range over by using the &lt;code&gt;--log-opts&lt;/code&gt; flag. &lt;code&gt;--log-opts&lt;/code&gt; accepts any option for &lt;code&gt;git log -p&lt;/code&gt;. For example, if you wanted to run gitleaks on a range of commits you could use the following command: &lt;code&gt;gitleaks detect --source . --log-opts=&#34;--all commitA..commitB&#34;&lt;/code&gt;. See the &lt;code&gt;git log&lt;/code&gt; &lt;a href=&#34;https://git-scm.com/docs/git-log&#34;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;You can scan files and directories by using the &lt;code&gt;--no-git&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;Protect&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;protect&lt;/code&gt; command is used to uncommitted changes in a git repo. This command should be used on developer machines in accordance with &lt;a href=&#34;https://cloud.google.com/architecture/devops/devops-tech-shifting-left-on-security&#34;&gt;shifting left on security&lt;/a&gt;. When running &lt;code&gt;protect&lt;/code&gt; on a git repository, gitleaks will parse the output of a &lt;code&gt;git diff&lt;/code&gt; command (you can see how this executed &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/7240e16769b92d2a1b137c17d6bf9d55a8562899/git/git.go#L48-L49&#34;&gt;here&lt;/a&gt;). You can set the &lt;code&gt;--staged&lt;/code&gt; flag to check for changes in commits that have been &lt;code&gt;git add&lt;/code&gt;ed. The &lt;code&gt;--staged&lt;/code&gt; flag should be used when running Gitleaks as a pre-commit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: the &lt;code&gt;protect&lt;/code&gt; command can only be used on git repos, running &lt;code&gt;protect&lt;/code&gt; on files or directories will result in an error message.&lt;/p&gt; &#xA;&lt;h3&gt;Creating a baseline&lt;/h3&gt; &#xA;&lt;p&gt;When scanning large repositories or repositories with a long history, it can be convenient to use a baseline. When using a baseline, gitleaks will ignore any old findings that are present in the baseline. A baseline can be any gitleaks report. To create a gitleaks report, run gitleaks with the &lt;code&gt;--report-path&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gitleaks detect --report-path gitleaks-report.json # This will save the report in a file called gitleaks-report.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once as baseline is created it can be applied when running the detect command again:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gitleaks detect --baseline-path gitleaks-report.json --report-path findings.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the detect command with the --baseline-path parameter, report output (findings.json) will only contain new issues.&lt;/p&gt; &#xA;&lt;h3&gt;Verify Findings&lt;/h3&gt; &#xA;&lt;p&gt;You can verify a finding found by gitleaks using a &lt;code&gt;git log&lt;/code&gt; command. Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Finding:     aws_secret=&#34;AKIAIMNOJVGFDXXXE4OA&#34;&#xA;RuleID:      aws-access-token&#xA;Secret       AKIAIMNOJVGFDXXXE4OA&#xA;Entropy:     3.65&#xA;File:        checks_test.go&#xA;Line:        37&#xA;Commit:      ec2fc9d6cb0954fb3b57201cf6133c48d8ca0d29&#xA;Author:      Zachary Rice&#xA;Email:       z@email.com&#xA;Date:        2018-01-28T17:39:00Z&#xA;Fingerprint: ec2fc9d6cb0954fb3b57201cf6133c48d8ca0d29:checks_test.go:aws-access-token:37&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can use the following format to verify the leak:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git log -L {StartLine,EndLine}:{File} {Commit}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So in this example it would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git log -L 37,37:checks_test.go ec2fc9d6cb0954fb3b57201cf6133c48d8ca0d29&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which gives us:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;commit ec2fc9d6cb0954fb3b57201cf6133c48d8ca0d29&#xA;Author: zricethezav &amp;lt;thisispublicanyways@gmail.com&amp;gt;&#xA;Date:   Sun Jan 28 17:39:00 2018 -0500&#xA;&#xA;    [update] entropy check&#xA;&#xA;diff --git a/checks_test.go b/checks_test.go&#xA;--- a/checks_test.go&#xA;+++ b/checks_test.go&#xA;@@ -28,0 +37,1 @@&#xA;+               &#34;aws_secret= \&#34;AKIAIMNOJVGFDXXXE4OA\&#34;&#34;:          true,&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pre-Commit hook&lt;/h2&gt; &#xA;&lt;p&gt;You can run Gitleaks as a pre-commit hook by copying the example &lt;code&gt;pre-commit.py&lt;/code&gt; script into your &lt;code&gt;.git/hooks/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Gitleaks offers a configuration format you can follow to write your own secret detection rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Title for the gitleaks configuration file.&#xA;title = &#34;Gitleaks title&#34;&#xA;&#xA;# Extend the base (this) configuration. When you extend a configuration&#xA;# the base rules take precendence over the extended rules. I.e, if there are&#xA;# duplicate rules in both the base configuration and the extended configuration&#xA;# the base rules will override the extended rules.&#xA;# Another thing to know with extending configurations is you can chain together&#xA;# multiple configuration files to a depth of 2. Allowlist arrays are appended&#xA;# and can contain duplicates.&#xA;# useDefault and path can NOT be used at the same time. Choose one.&#xA;[extend]&#xA;# useDefault will extend the base configuration with the default gitleaks config:&#xA;# https://github.com/zricethezav/gitleaks/blob/master/config/gitleaks.toml&#xA;useDefault = true&#xA;# or you can supply a path to a configuration. Path is relative to where gitleaks&#xA;# was invoked, not the location of the base config.&#xA;path = &#34;common_config.toml&#34;&#xA;&#xA;# An array of tables that contain information that define instructions&#xA;# on how to detect secrets&#xA;[[rules]]&#xA;&#xA;# Unique identifier for this rule&#xA;id = &#34;awesome-rule-1&#34;&#xA;&#xA;# Short human readable description of the rule.&#xA;description = &#34;awesome rule 1&#34;&#xA;&#xA;# Golang regular expression used to detect secrets. Note Golang&#39;s regex engine&#xA;# does not support lookaheads.&#xA;regex = &#39;&#39;&#39;one-go-style-regex-for-this-rule&#39;&#39;&#39;&#xA;&#xA;# Golang regular expression used to match paths. This can be used as a standalone rule or it can be used&#xA;# in conjunction with a valid `regex` entry.&#xA;path = &#39;&#39;&#39;a-file-path-regex&#39;&#39;&#39;&#xA;&#xA;# Array of strings used for metadata and reporting purposes.&#xA;tags = [&#34;tag&#34;,&#34;another tag&#34;]&#xA;&#xA;# Int used to extract secret from regex match and used as the group that will have&#xA;# its entropy checked if `entropy` is set.&#xA;secretGroup = 3&#xA;&#xA;# Float representing the minimum shannon entropy a regex group must have to be considered a secret.&#xA;entropy = 3.5&#xA;&#xA;# Keywords are used for pre-regex check filtering. Rules that contain&#xA;# keywords will perform a quick string compare check to make sure the&#xA;# keyword(s) are in the content being scanned. Ideally these values should&#xA;# either be part of the idenitifer or unique strings specific to the rule&#39;s regex&#xA;# (introduced in v8.6.0)&#xA;keywords = [&#xA;  &#34;auth&#34;,&#xA;  &#34;password&#34;,&#xA;  &#34;token&#34;,&#xA;]&#xA;&#xA;# You can include an allowlist table for a single rule to reduce false positives or ignore commits&#xA;# with known/rotated secrets&#xA;[rules.allowlist]&#xA;description = &#34;ignore commit A&#34;&#xA;commits = [ &#34;commit-A&#34;, &#34;commit-B&#34;]&#xA;paths = [&#xA;  &#39;&#39;&#39;go\.mod&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;go\.sum&#39;&#39;&#39;&#xA;]&#xA;# note: (rule) regexTarget defaults to check the _Secret_ in the finding.&#xA;# if regexTarget is not specified then _Secret_ will be used.&#xA;# Acceptable values for regexTarget are &#34;match&#34; and &#34;line&#34;&#xA;regexTarget = &#34;match&#34;&#xA;regexes = [&#xA;  &#39;&#39;&#39;process&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;getenv&#39;&#39;&#39;,&#xA;]&#xA;# note: stopwords targets the extracted secret, not the entire regex match&#xA;# like &#39;regexes&#39; does. (stopwords introduced in 8.8.0)&#xA;stopwords = [&#xA;  &#39;&#39;&#39;client&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;endpoint&#39;&#39;&#39;,&#xA;]&#xA;&#xA;&#xA;# This is a global allowlist which has a higher order of precedence than rule-specific allowlists.&#xA;# If a commit listed in the `commits` field below is encountered then that commit will be skipped and no&#xA;# secrets will be detected for said commit. The same logic applies for regexes and paths.&#xA;[allowlist]&#xA;description = &#34;global allow list&#34;&#xA;commits = [ &#34;commit-A&#34;, &#34;commit-B&#34;, &#34;commit-C&#34;]&#xA;paths = [&#xA;  &#39;&#39;&#39;gitleaks\.toml&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;(.*?)(jpg|gif|doc)&#39;&#39;&#39;&#xA;]&#xA;&#xA;# note: (global) regexTarget defaults to check the _Secret_ in the finding.&#xA;# if regexTarget is not specified then _Secret_ will be used.&#xA;# Acceptable values for regexTarget are &#34;match&#34; and &#34;line&#34;&#xA;regexTarget = &#34;match&#34;&#xA;&#xA;regexes = [&#xA;  &#39;&#39;&#39;219-09-9999&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;078-05-1120&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;(9[0-9]{2}|666)-\d{2}-\d{4}&#39;&#39;&#39;,&#xA;]&#xA;# note: stopwords targets the extracted secret, not the entire regex match&#xA;# like &#39;regexes&#39; does. (stopwords introduced in 8.8.0)&#xA;stopwords = [&#xA;  &#39;&#39;&#39;client&#39;&#39;&#39;,&#xA;  &#39;&#39;&#39;endpoint&#39;&#39;&#39;,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the default &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/config/gitleaks.toml&#34;&gt;gitleaks config&lt;/a&gt; for examples or follow the &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/README.md&#34;&gt;contributing guidelines&lt;/a&gt; if you would like to contribute to the default configuration. Additionally, you can check out &lt;a href=&#34;https://blog.gitleaks.io/stop-leaking-secrets-configuration-2-3-aeed293b1fbf&#34;&gt;this gitleaks blog post&lt;/a&gt; which covers advanced configuration setups.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;gitleaks:allow&lt;/h4&gt; &#xA;&lt;p&gt;If you are knowingly committing a test secret that gitleaks will catch you can add a &lt;code&gt;gitleaks:allow&lt;/code&gt; comment to that line which will instruct gitleaks to ignore that secret. Ex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class CustomClass:&#xA;    discord_client_secret = &#39;8dyfuiRyq=vVc3RRr_edRk-fK__JItpZ&#39;  #gitleaks:allow&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;.gitleaksignore&lt;/h4&gt; &#xA;&lt;p&gt;You can ignore specific findings by creating a &lt;code&gt;.gitleaksignore&lt;/code&gt; file at the root of your repo. In release v8.10.0 Gitleaks added a &lt;code&gt;Fingerprint&lt;/code&gt; value to the Gitleaks report. Each leak, or finding, has a Fingerprint that uniquely identifies a secret. Add this fingerprint to the &lt;code&gt;.gitleaksignore&lt;/code&gt; file to ignore that specific secret. See Gitleaks&#39; &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/.gitleaksignore&#34;&gt;.gitleaksignore&lt;/a&gt; for an example. Note: this feature is experimental and is subject to change in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Secured by Jit&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://www.jit.io/jit-open-source-gitleaks?utm_source=github&amp;amp;utm_medium=readme&amp;amp;utm_campaign=GitleaksReadme&amp;amp;utm_id=oss&amp;amp;items=item-secret-detection&#34;&gt;Jit&lt;/a&gt; to secure our codebase, to achieve fully automated, full-stack continuous security using the world&#39;s best OSS security tools.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsorships&lt;/h2&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://www.tines.com/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=gitleaks&#34;&gt; &lt;img alt=&#34;Tines Sponsorship&#34; src=&#34;https://user-images.githubusercontent.com/15034943/146411864-4878f936-b4f7-49a0-b625-f9f40c704bfa.png&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Exit Codes&lt;/h2&gt; &#xA;&lt;p&gt;You can always set the exit code when leaks are encountered with the --exit-code flag. Default exit codes below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0 - no leaks present&#xA;1 - leaks or error encountered&#xA;126 - unknown flag&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>