<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-19T01:24:50Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ankitpokhrel/jira-cli</title>
    <updated>2023-08-19T01:24:50Z</updated>
    <id>tag:github.com,2023-08-19:/ankitpokhrel/jira-cli</id>
    <link href="https://github.com/ankitpokhrel/jira-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔥 Feature-rich interactive Jira command line.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#&#34;&gt; &lt;img alt=&#34;stargazers over time&#34; src=&#34;https://stars.medv.io/ankitpokhrel/jira-cli.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;JiraCLI&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/actions?query=workflow%3Abuild+branch%3Amaster&#34;&gt; &lt;img alt=&#34;Build&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/ankitpokhrel/jira-cli/ci.yml?branch=main&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/ankitpokhrel/jira-cli&#34;&gt; &lt;img alt=&#34;GO Report-card&#34; src=&#34;https://goreportcard.com/badge/github.com/ankitpokhrel/jira-cli?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/raw/master/LICENSE&#34;&gt; &lt;img alt=&#34;Software License&#34; src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opencollective.com/jira-cli#backers&#34;&gt; &lt;img alt=&#34;Financial Contributors&#34; src=&#34;https://img.shields.io/opencollective/backers/jira-cli?style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;i&gt;Feature-rich Interactive Jira Command Line&lt;/i&gt; &lt;/p&gt; &#xA; &lt;img align=&#34;center&#34; alt=&#34;JiraCLI Demo&#34; src=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/.github/assets/demo.gif&#34;&gt;&#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;sub&gt; Financial support from private and corporate sponsors ensures the tool&#39;s continued development.&lt;br&gt; Please &lt;a href=&#34;https://opencollective.com/jira-cli#backers&#34;&gt;consider sponsoring the project&lt;/a&gt; if you or your company rely on JiraCLI. &lt;/sub&gt;&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://opencollective.com/jira-cli#backers&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://opencollective.com/jira-cli/backers.svg?sanitize=true&#34; alt=&#34;jira-cli open collective badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;JiraCLI is an interactive command line tool for Atlassian Jira that will help you avoid Jira UI to some extent. This tool may not be able to do everything, but it has all the essential features required to improve your day-to-day workflow with Jira.&lt;/p&gt; &#xA;&lt;p&gt;The tool started with the idea of making issue search and navigation as straightforward as possible. However, with the help of &lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#support-the-project&#34;&gt;outstanding supporters like you&lt;/a&gt;, we evolved, and the tool now includes all necessary features like issue creation, cloning, linking, ticket transition, and much more.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This tool is heavily inspired by the &lt;a href=&#34;https://github.com/cli/cli&#34;&gt;GitHub CLI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;p&gt;Note that some features might work slightly differently in cloud installation versus on-premise installation due to the nature of the data. Yet, we&#39;ve attempted to make the experience as similar as possible.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#&#34;&gt;&lt;img alt=&#34;Linux&#34; src=&#34;https://img.shields.io/badge/Linux-%E2%9C%93-dark--green?logo=linux&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#&#34;&gt;&lt;img alt=&#34;macOS&#34; src=&#34;https://img.shields.io/badge/macOS-%E2%9C%93-dark--green?logo=apple&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#&#34;&gt;&lt;img alt=&#34;FreeBSD&#34; src=&#34;https://img.shields.io/badge/FreeBSD-%E2%9C%93-dark--green?logo=freebsd&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#&#34;&gt;&lt;img alt=&#34;NetBSD&#34; src=&#34;https://img.shields.io/badge/NetBSD-%E2%9C%93-dark--green?logo=netbsd&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#&#34;&gt;&lt;img alt=&#34;Windows&#34; src=&#34;https://img.shields.io/badge/Windows-partial-yellow?logo=windows&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;strong&gt;Jira&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#&#34;&gt;&lt;img alt=&#34;Jira Cloud&#34; src=&#34;https://img.shields.io/badge/Jira Cloud-%E2%9C%93-dark--green?logo=jira&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#&#34;&gt;&lt;img alt=&#34;Jira Server&#34; src=&#34;https://img.shields.io/badge/Jira Server-%E2%9C%93-dark--green?logo=jira&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;jira-cli&lt;/code&gt; is available as a downloadable packaged binary for Linux, macOS, and Windows from the &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can use Docker to quickly try out &lt;code&gt;jira-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it --rm ghcr.io/ankitpokhrel/jira-cli:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/wiki/Installation&#34;&gt;installation guide&lt;/a&gt; for other installation methods like &lt;code&gt;Homebrew&lt;/code&gt;, &lt;code&gt;Nix&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h4&gt;Cloud server&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://id.atlassian.com/manage-profile/security/api-tokens&#34;&gt;Get a Jira API token&lt;/a&gt; and export it to your shell as a &lt;code&gt;JIRA_API_TOKEN&lt;/code&gt; variable. Add it to your shell configuration file, for instance, &lt;code&gt;$HOME/.bashrc&lt;/code&gt;, so that the variable is always available. Alternatively, you can also use &lt;code&gt;.netrc&lt;/code&gt; file or &lt;code&gt;keychain&lt;/code&gt; to set the token. Learn more &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions/356&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;jira init&lt;/code&gt;, select installation type as &lt;code&gt;Cloud&lt;/code&gt;, and provide required details to generate a config file required for the tool.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;On-premise installation&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Export required environment variables:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you are using basic auth, export the &lt;code&gt;password&lt;/code&gt; you use to login to Jira as a &lt;code&gt;JIRA_API_TOKEN&lt;/code&gt; variable.&lt;/li&gt; &#xA;   &lt;li&gt;If you are using personal access token (PAT), get the &lt;code&gt;token&lt;/code&gt; from your jira profile and export it as a &lt;code&gt;JIRA_API_TOKEN&lt;/code&gt; variable. In addition to this, set &lt;code&gt;JIRA_AUTH_TYPE&lt;/code&gt; env to &lt;code&gt;bearer&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Add these ENVs to your shell configuration file, for instance, &lt;code&gt;$HOME/.bashrc&lt;/code&gt;, so that they are always available.&lt;/li&gt; &#xA;   &lt;li&gt;Alternatively, you can also use &lt;code&gt;.netrc&lt;/code&gt; file or &lt;code&gt;keychain&lt;/code&gt; to set the token. Learn more &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions/356&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;jira init&lt;/code&gt;, select installation type as &lt;code&gt;Local&lt;/code&gt;, and provide the required details to generate a config file required for the tool.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If your on-premise Jira installation is using a language other than &lt;code&gt;English&lt;/code&gt;, then the issue/epic creation may not work because the older version of Jira API doesn&#39;t return the untranslated name for &lt;code&gt;issuetypes&lt;/code&gt;. In that case, you will have to fill in &lt;code&gt;epic.name&lt;/code&gt;, &lt;code&gt;epic.link&lt;/code&gt; and &lt;code&gt;issue.types.*.handle&lt;/code&gt; fields manually in the generated config to get the expected behavior.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions/categories/faqs&#34;&gt;FAQs&lt;/a&gt; for frequently asked questions.&lt;/p&gt; &#xA;&lt;h4&gt;Authentication types&lt;/h4&gt; &#xA;&lt;p&gt;The tool supports &lt;code&gt;basic&lt;/code&gt; and &lt;code&gt;bearer&lt;/code&gt; (Personal Access Token) authentication types at the moment. Basic auth is used by default. If you want to use PAT, you need to set &lt;code&gt;JIRA_AUTH_TYPE&lt;/code&gt; as &lt;code&gt;bearer&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Shell completion&lt;/h4&gt; &#xA;&lt;p&gt;Check &lt;code&gt;jira completion --help&lt;/code&gt; for more info on setting up a bash/zsh shell completion.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The tool currently comes with an issue, epic, and sprint explorer. The flags are &lt;a href=&#34;https://www.gnu.org/software/libc/manual/html_node/Argument-Syntax.html&#34;&gt;POSIX-compliant&lt;/a&gt;. You can combine available flags in any order to create a unique query. For example, the command below will give you high priority issues created this month with status &lt;code&gt;To Do&lt;/code&gt; that are assigned to you and has the label &lt;code&gt;backend&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -yHigh -s&#34;To Do&#34; --created month -lbackend -a$(jira me)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Navigation&lt;/h3&gt; &#xA;&lt;p&gt;The lists are displayed in an interactive UI by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use arrow keys or &lt;code&gt;j, k, h, l&lt;/code&gt; characters to navigate through the list.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt; to quickly navigate to the top and bottom respectively.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;CTRL + f&lt;/code&gt; to scroll through a page downwards direction.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;CTRL + b&lt;/code&gt; to scroll through a page in upwards direction.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;v&lt;/code&gt; to view selected issue details.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;m&lt;/code&gt; to transition the selected issue.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;CTRL + r&lt;/code&gt; or &lt;code&gt;F5&lt;/code&gt; to refresh the issues list.&lt;/li&gt; &#xA; &lt;li&gt;Hit &lt;code&gt;ENTER&lt;/code&gt; to open the selected issue in the browser.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;c&lt;/code&gt; to copy issue URL to the system clipboard. This requires &lt;code&gt;xclip&lt;/code&gt; / &lt;code&gt;xsel&lt;/code&gt; in linux.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;CTRL + k&lt;/code&gt; to copy issue key to the system clipboard.&lt;/li&gt; &#xA; &lt;li&gt;In an explorer view, press &lt;code&gt;w&lt;/code&gt; or &lt;code&gt;TAB&lt;/code&gt; to toggle focus between the sidebar and the contents screen.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;q&lt;/code&gt; / &lt;code&gt;ESC&lt;/code&gt; / &lt;code&gt;CTRL + c&lt;/code&gt; to quit.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;?&lt;/code&gt; to open the help window.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions/categories/faqs&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@ankitpokhrel/introducing-jira-cli-the-missing-command-line-tool-for-atlassian-jira-fe44982cc1de&#34;&gt;Introduction and Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mslinn.com/blog/2022/08/12/jiracli.html&#34;&gt;Getting Started with JiraCLI&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Issue&lt;/h3&gt; &#xA;&lt;p&gt;Issues are displayed in an interactive table view by default. You can output the results in a plain view using the &lt;code&gt;--plain&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h4&gt;List&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;list&lt;/code&gt; command lets you search and navigate the issues. The issues are sorted by &lt;code&gt;created&lt;/code&gt; field in descending order by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# List recent issues&#xA;$ jira issue list&#xA;&#xA;# List issues created in last 7 days&#xA;$ jira issue list --created -7d&#xA;&#xA;# List issues in status &#34;To Do&#34;&#xA;$ jira issue list -s&#34;To Do&#34;&#xA;&#xA;# List recent issues in plain mode&#xA;$ jira issue list --plain&#xA;&#xA;# List issue in the same order as you see in the UI&#xA;$ jira issue list --order-by rank --reverse&#xA;&#xA;# You can execute raw JQL within a given project context using `--jql/-q` option.&#xA;# For instance, the following command will list issues in the current project whose&#xA;# summary has a word cli.&#xA;$ jira issue list -q &#34;summary ~ cli&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check some more examples/use-cases below.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List issues that I am watching&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -w&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List issues assigned to me&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -a$(jira me)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List issues assigned to a user and are reported by another user&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -a&#34;User A&#34; -r&#34;User B&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List issues assigned to me, is of high priority and is open&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -a$(jira me) -yHigh -sopen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List issues assigned to no one and are created this week&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -ax --created week&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List issues with resolution won&#39;t do&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -R&#34;Won&#39;t do&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List issues whose status is not done and is created before 6 months and is assigned to someone&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Tilde (~) acts as a not operator&#xA;jira issue list -s~Done --created-before -24w -a~x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List issues created within an hour and updated in the last 30 minutes &lt;span&gt;⏱&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list --created -1h --updated -30m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Give me issues that are of high priority, are in progress, were created this month, and have given labels &lt;span&gt;🔥&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -yHigh -s&#34;In Progress&#34; --created month -lbackend -l&#34;high-prio&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Wait, what was that ticket I opened earlier today? &lt;span&gt;😫&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list --history&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;What was the first issue I ever reported on the current board? &lt;span&gt;🤔&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -r$(jira me) --reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;What was the first bug I ever fixed in the current board? &lt;span&gt;🪲&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -a$(jira me) -tBug sDone -rFixed --reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;What issues did I report this week? &lt;span&gt;🤷♂&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -r$(jira me) --created week&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Am I watching any tickets in project XYZ? &lt;span&gt;🧐&lt;/span&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue list -w -pXYZ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Create&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;create&lt;/code&gt; command lets you create an issue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create an issue using an interactive prompt&#xA;$ jira issue create&#xA;&#xA;# Pass required parameters and use --no-input option to skip prompt&#xA;$ jira issue create -tBug -s&#34;New Bug&#34; -yHigh -lbug -lurgent -b&#34;Bug description&#34; --fix-version v2.0 --no-input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To attach epic to an issue on creation, you can use &lt;code&gt;-P/--parent&lt;/code&gt; field. We call it parent because the semantics of epic has been changed in &lt;code&gt;next-gen&lt;/code&gt; project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create an issue of type Story and attach it to epic with key EPIC-42&#xA;$  jira issue create -tStory -s&#34;Epic during creation&#34; -PEPIC-42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/.github/assets/create.gif&#34; alt=&#34;Create an issue&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use a &lt;code&gt;--custom&lt;/code&gt; flag to set custom fields while creating the issue. See &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions/346&#34;&gt;this post&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;The command supports both &lt;a href=&#34;https://github.github.com/gfm/&#34;&gt;Github-flavored&lt;/a&gt; and &lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira-flavored&lt;/a&gt; markdown for writing description. You can load pre-defined templates using &lt;code&gt;--template&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Load description from template file&#xA;$ jira issue create --template /path/to/template.tmpl&#xA;&#xA;# Get description from standard input&#xA;$ jira issue create --template -&#xA;&#xA;# Or, use pipe to read input directly from standard input&#xA;$ echo &#34;Description from stdin&#34; | jira issue create -s&#34;Summary&#34; -tTask&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/.github/assets/markdown.jpg&#34; alt=&#34;Markdown render preview&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The preview above shows markdown template passed in Jira CLI and how it is rendered in the Jira UI.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Edit&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;edit&lt;/code&gt; command lets you edit an issue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ jira issue edit ISSUE-1&#xA;&#xA;# Edit issue in the configured project&#xA;$ jira issue edit ISSUE-1 -s&#34;New Bug&#34; -yHigh -lbug -lurgent -CBackend -b&#34;Bug description&#34;&#xA;&#xA;# Use --no-input option to disable interactive prompt&#xA;$ jira issue edit ISSUE-1 -s&#34;New updated summary&#34; --no-input&#xA;&#xA;# Use minus (-) to remove label, component or fixVersion&#xA;# For instance, to edit issue to &#xA;#   - remove label p2, component FE, fixVersion v1.0 &#xA;#   - add label p1, component BE, fixVersion v2.0&#xA;$ jira issue edit ISSUE-1 --label -p2 --label p1 --component -FE --component BE --fix-version -v1.0 --fix-version v2.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Assign&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;assign&lt;/code&gt; command lets you assign a user to an issue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Assign user to an issue using an interactive prompt&#xA;$ jira issue assign&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira issue assign ISSUE-1 &#34;Jon Doe&#34;&#xA;&#xA;# Assign to self&#xA;$ jira issue assign ISSUE-1 $(jira me)&#xA;&#xA;# Will prompt for selection if keyword suffix returns multiple entries&#xA;$ jira issue assign ISSUE-1 suffix&#xA;&#xA;# Assign to default assignee&#xA;$ jira issue assign ISSUE-1 default&#xA;&#xA;# Unassign&#xA;$ jira issue assign ISSUE-1 x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/.github/assets/assign.gif&#34; alt=&#34;Assign issue to a user&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Move/Transition&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;move&lt;/code&gt; command lets you transition an issue from one state to another.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Move an issue using an interactive prompt&#xA;$ jira issue move&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira issue move ISSUE-1 &#34;In Progress&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/.github/assets/move.gif&#34; alt=&#34;Move an issue&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your workflow allows to add comment, resolution or assignee while moving an issue, you can do so as shown below. See &lt;a href=&#34;https://confluence.atlassian.com/jirakb/how-to-add-a-comment-during-a-transition-779160682.html&#34;&gt;this documentation&lt;/a&gt; on how to setup your workflow to allow these fields.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Move an issue and add comment&#xA;$ jira issue move ISSUE-1 &#34;In Progress&#34; --comment &#34;Started working on it&#34;&#xA;&#xA;# Set resolution to fixed and assign to self while moving the issue&#xA;$ jira issue move ISSUE-1 Done -RFixed -a$(jira me)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To transition the selected issue from the TUI, press &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;View&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;view&lt;/code&gt; command lets you see issue details in a terminal. Atlassian document is roughly converted to a markdown and is nicely displayed in the terminal.&lt;/p&gt; &#xA;&lt;p&gt;The command uses &lt;code&gt;less&lt;/code&gt; as a pager by default. To set your own pager, see &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions/569&#34;&gt;https://github.com/ankitpokhrel/jira-cli/discussions/569&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ jira issue view ISSUE-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/.github/assets/view.gif&#34; alt=&#34;View an issue&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The view screen will display linked issues and the latest comment after the description. Note that the displayed comment may not be the latest one if you for some reason have more than 5k comments in a ticket.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Show 5 recent comments when viewing the issue&#xA;$ jira issue view ISSUE-1 --comments 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Link&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;link&lt;/code&gt; command lets you link two issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Link an issue using an interactive prompt&#xA;$ jira issue link&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira issue link ISSUE-1 ISSUE-2 Blocks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Remote&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;remote&lt;/code&gt; command lets you add a remote web link to an issue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Adds a remote web link using an interactive prompt&#xA;$ jira issue link remote&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira issue link remote ISSUE-1 https://example.com &#34;Example text&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unlink&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;unlink&lt;/code&gt; command lets you unlink two linked issues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Unlink issues using interactive prompt&#xA;$ jira issue unlink&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira issue unlink ISSUE-1 ISSUE-2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Clone&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;clone&lt;/code&gt; command lets you clone an issue. You can update fields like summary, priority, assignee, labels, and components when cloning the issue. The command also allows you to replace a part of the string (case-sensitive) in summary and description using &lt;code&gt;--replace/-H&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Clone an issue&#xA;$ jira issue clone ISSUE-1&#xA;&#xA;# Clone issue and modify the summary, priority and assignee&#xA;$ jira issue clone ISSUE-1 -s&#34;Modified summary&#34; -yHigh -a$(jira me)&#xA;&#xA;# Clone issue and replace text from summary and description&#xA;$ jira issue clone ISSUE-1 -H&#34;find me:replace with me&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Delete&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;delete&lt;/code&gt; command lets you delete an issue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Delete an issue using an interactive prompt&#xA;$ jira issue delete&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira issue delete ISSUE-1&#xA;&#xA;# Delete task along with all of its subtasks&#xA;$ jira issue delete ISSUE-1 --cascade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Comment&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;comment&lt;/code&gt; command provides a list of sub-commands to manage issue comments.&lt;/p&gt; &#xA;&lt;h5&gt;Add&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; command lets you add a comment to an issue. The command supports both &lt;a href=&#34;https://github.github.com/gfm/&#34;&gt;Github-flavored&lt;/a&gt; and &lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira-flavored&lt;/a&gt; markdown for writing comment. You can load pre-defined templates using &lt;code&gt;--template&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Add a comment using an interactive prompt&#xA;$ jira issue comment add&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira issue comment add ISSUE-1 &#34;My comment body&#34;&#xA;&#xA;# Load comment from template file&#xA;$ jira issue comment add ISSUE-1 --template /path/to/template.tmpl&#xA;&#xA;# Get comment from standard input&#xA;$ jira issue comment add ISSUE-1 --template -&#xA;&#xA;# Or, use pipe to read input directly from standard input&#xA;$ echo &#34;Comment from stdin&#34; | jira issue comment add ISSUE-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: For the comment body, the positional argument always takes precedence over the &lt;code&gt;--template&lt;/code&gt; flag if both of them are passed. In the example below, the body will be picked from positional argument instead of the template.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira issue comment add ISSUE-42 &#34;comment body positional&#34; --template - &amp;lt;&amp;lt;&#39;EOF&#39;&#xA;comment body template&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Worklog&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;worklog&lt;/code&gt; command provides a list of sub-commands to manage issue worklog (timelog).&lt;/p&gt; &#xA;&lt;h5&gt;Add&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; command lets you add a worklog to an issue. The command supports markdown for worklog comments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Add a worklog using an interactive prompt&#xA;$ jira issue worklog add&#xA;&#xA;# Pass required parameters and use --no-input to skip prompt&#xA;$ jira issue worklog add ISSUE-1 &#34;2d 3h 30m&#34; --no-input&#xA;&#xA;# You can add a comment using --comment flag when adding a worklog&#xA;$ jira issue worklog add ISSUE-1 &#34;10m&#34; --comment &#34;This is a comment&#34; --no-input&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Epic&lt;/h3&gt; &#xA;&lt;p&gt;Epics are displayed in an explorer view by default. You can output the results in a table view using the &lt;code&gt;--table&lt;/code&gt; flag. When viewing epic issues, you can use all filters available for the issue command.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#navigation&#34;&gt;usage&lt;/a&gt; to learn more about UI interaction.&lt;/p&gt; &#xA;&lt;h4&gt;List&lt;/h4&gt; &#xA;&lt;p&gt;You can use all flags supported by &lt;code&gt;issue list&lt;/code&gt; command here except for the issue type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# List epics&#xA;$ jira epic list&#xA;&#xA;# List epics in a table view&#xA;$ jira epic list --table&#xA;&#xA;# List epics reported by me and are open&#xA;$ jira epic list -r$(jira me) -sOpen&#xA;&#xA;# List issues in an epic&#xA;$ jira epic list KEY-1&#xA;&#xA;# List all issue in an epic KEY-1 that is unassigned and has a high priority&#xA;$ jira epic list KEY-1 -ax -yHigh&#xA;&#xA;# List high priority epics&#xA;$ jira epic list KEY-1 -yHigh&#xA;&#xA;# List epic issues order by the rank in ASC order&#xA;$ jira epic list KEY-1 --order-by rank --reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create&lt;/h4&gt; &#xA;&lt;p&gt;Creating an epic is the same as creating the issue except you also need to provide an epic name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Create an issue using an interactive prompt&#xA;$ jira epic create&#xA;&#xA;# Pass required parameters to skip prompt or use --no-input flag to skip prompt for non-mandatory params&#xA;$ jira epic create -n&#34;Epic epic&#34; -s&#34;Everything&#34; -yHigh -lbug -lurgent -b&#34;Epic description&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; command allows you to add issues to the epic. You can add up to 50 issues to the epic at once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Add issues to the epic using an interactive prompt&#xA;$ jira epic add&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira epic add EPIC-KEY ISSUE-1 ISSUE-2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Remove&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;remove&lt;/code&gt; command allows you to remove issues from the epic. You can remove up to 50 issues from the epic at once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Remove issues to the epic using an interactive prompt&#xA;$ jira epic remove&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira epic remove ISSUE-1 ISSUE-2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sprint&lt;/h3&gt; &#xA;&lt;p&gt;Sprints are displayed in an explorer view by default. You can output the results in a table view using the &lt;code&gt;--table&lt;/code&gt; flag. When viewing sprint issues, you can use all filters available for the issue command. The tool only shows 25 recent sprints.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/ankitpokhrel/jira-cli/main/#navigation&#34;&gt;usage&lt;/a&gt; to learn more about UI interaction.&lt;/p&gt; &#xA;&lt;h4&gt;List&lt;/h4&gt; &#xA;&lt;p&gt;You can use all flags supported by &lt;code&gt;issue list&lt;/code&gt; command to filter issues in the sprint.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# List sprints in an explorer view&#xA;$ jira sprint list&#xA;&#xA;# List sprints in a table view&#xA;$ jira sprint list --table&#xA;&#xA;# List issues in the current active sprint&#xA;$ jira sprint list --current&#xA;&#xA;# List issues in the current active sprint that are assigned to me&#xA;$ jira sprint list --current -a$(jira me)&#xA;&#xA;# List issues in the previous sprint&#xA;$ jira sprint list --prev&#xA;&#xA;# List issues in next planned sprint&#xA;$ jira sprint list --next&#xA;&#xA;# List future and active sprints&#xA;$ jira sprint list --state future,active&#xA;&#xA;# List issues in a particular sprint. You can use all flags supported by issue list command here.&#xA;# To get sprint id use `jira sprint list` or `jira sprint list --table`&#xA;$ jira sprint list SPRINT_ID&#xA;&#xA;# List high priority issues in a sprint are assigned to me&#xA;$ jira sprint list SPRINT_ID -yHigh -a$(jira me)&#xA;&#xA;# List sprint issues order by the rank in ASC order&#xA;$ jira sprint list SPRINT_ID --order-by rank --reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; command allows you to add issues to the sprint. You can add up to 50 issues to the sprint at once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Add issues to the sprint using interactive prompt&#xA;$ jira sprint add&#xA;&#xA;# Pass required parameters to skip prompt&#xA;$ jira sprint add SPRINT_ID ISSUE-1 ISSUE-2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other commands&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Navigate to the project&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Navigate to the issue&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira open KEY-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List all projects you have access to&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira project list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List all boards in a project&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jira board list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Often times, you may want to use the output of the command to do something cool. However, the default interactive UI might not allow you to do that. The tool comes with the &lt;code&gt;--plain&lt;/code&gt; flag that displays results in a simple layout that can then be manipulated from the shell script.&lt;/p&gt; &#xA;&lt;p&gt;Some example scripts are listed below.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Tickets created per day this month&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash&#xA;&#xA;tickets=$(jira issue list --created month --plain --columns created --no-headers | awk &#39;{print $2}&#39; | awk -F&#39;-&#39; &#39;{print $3}&#39; | sort -n | uniq -c)&#xA;&#xA;echo &#34;${tickets}&#34; | while IFS=$&#39;\t&#39; read -r line; do&#xA;  day=$(echo &#34;${line}&#34; | awk &#39;{print $2}&#39;)&#xA;  count=$(echo &#34;${line}&#34; | awk &#39;{print $1}&#39;)&#xA;&#xA;  printf &#34;Day #%s: %s\n&#34; &#34;${day}&#34; &#34;${count}&#34;&#xA;done&#xA;&#xA;# Output&#xA;Day #01: 19&#xA;Day #02: 10&#xA;Day #03: 21&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Number of tickets per sprint&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash&#xA;&#xA;sprints=$(jira sprint list --table --plain --columns id,name --no-headers)&#xA;&#xA;echo &#34;${sprints}&#34; | while IFS=$&#39;\t&#39; read -r id name; do&#xA;  count=$(jira sprint list &#34;${id}&#34; --plain --no-headers 2&amp;gt;/dev/null | wc -l)&#xA;&#xA;  printf &#34;%10s: %3d\n&#34; &#34;${name}&#34; $((count))&#xA;done&#xA;&#xA;# Output&#xA;Sprint 3:   55&#xA;Sprint 2:   40&#xA;Sprint 1:   30&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Number of unique assignee per sprint&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env bash&#xA;&#xA;sprints=$(jira sprint list --table --plain --columns id,name --no-headers)&#xA;&#xA;echo &#34;${sprints}&#34; | while IFS=$&#39;\t&#39; read -r id name; do&#xA;  count=$(jira sprint list &#34;${id}&#34; --plain --columns assignee --no-headers 2&amp;gt;/dev/null | awk &#39;{print $2}&#39; | awk NF | sort -n | uniq | wc -l)&#xA;&#xA;  printf &#34;%10s: %3d\n&#34; &#34;${name}&#34; $((count))&#xA;done&#xA;&#xA;# Output&#xA;Sprint 3:   5&#xA;Sprint 2:   4&#xA;Sprint 1:   3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Not all &lt;a href=&#34;https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/#nodes&#34;&gt;Atlassian nodes&lt;/a&gt; are translated properly at the moment which can cause formatting issues sometimes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Feature requests&lt;/h2&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions/categories/ideas&#34;&gt;open a discussion&lt;/a&gt; in &lt;code&gt;ideas&lt;/code&gt; category for the proposed feature.&lt;/p&gt; &#xA;&lt;h5&gt;How these requests are usually prioritized?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The feature that is straightforward to implement, doesn&#39;t require too much mental power, and can be done even I am lazy will be picked first.&lt;/li&gt; &#xA; &lt;li&gt;If the feature is something that I am missing in my day-to-day work, it might be done first.&lt;/li&gt; &#xA; &lt;li&gt;Rest of the features will be picked based on the &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions/categories/ideas&#34;&gt;number of votes&lt;/a&gt; on the particular feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone git@github.com:ankitpokhrel/jira-cli.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optional: If you want to run a Jira instance locally, you can use the following make recipe. The trial license key can be generated from the &#34;Licenses&#34; section in the &lt;a href=&#34;https://my.atlassian.com&#34;&gt;atlassian admin&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make jira.server&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make changes, build the binary, and test your changes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make deps install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run CI steps locally before submitting a PR.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make ci&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Support the project&lt;/h2&gt; &#xA;&lt;p&gt;Your suggestions and feedbacks are highly appreciated. Please feel free to &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/discussions&#34;&gt;start a discussion&lt;/a&gt; or &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/issues/new&#34;&gt;create an issue&lt;/a&gt; to share your experience with the tool or to discuss a feature/issue.&lt;/p&gt; &#xA;&lt;p&gt;If you think this tool is useful, saves you a lot of work, and lets you sleep much better, then consider supporting the project by any of the following means:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/stargazers&#34;&gt;Star the repo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Spread the word by sharing the project on social media or with friends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/issues/new/choose&#34;&gt;Report bugs&lt;/a&gt; or &lt;a href=&#34;https://github.com/ankitpokhrel/jira-cli/issues&#34;&gt;propose solutions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/jira-cli#backers&#34;&gt;Donate a small amount&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div&gt; &#xA; &lt;br&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;sub&gt;Made with 💚&lt;/sub&gt; &lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>wasmerio/wasmer-go</title>
    <updated>2023-08-19T01:24:50Z</updated>
    <id>tag:github.com,2023-08-19:/wasmerio/wasmer-go</id>
    <link href="https://github.com/wasmerio/wasmer-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🐹🕸️ WebAssembly runtime for Go&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://wasmer.io&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/wasmerio/wasmer/master/assets/logo.png&#34; alt=&#34;Wasmer logo&#34;&gt; &lt;/a&gt; &#xA; &lt;h1&gt;Wasmer Go&lt;/h1&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/wasmerio/wasmer-go/actions?query=workflow%3A%22Build+and+Test%22&#34;&gt; &lt;img src=&#34;https://github.com/wasmerio/wasmer-go/workflows/Build%20and%20Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/wasmerio/wasmer-go/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/wasmerio/wasmer-go.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/go.dev-package-f06&#34; alt=&#34;Go Package&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer?tab=doc&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/documentation-API-f06&#34; alt=&#34;API Documentation&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA; &lt;h3&gt; &lt;a href=&#34;https://wasmer.io/&#34;&gt;Website&lt;/a&gt; &lt;span&gt; • &lt;/span&gt; &lt;a href=&#34;https://docs.wasmer.io&#34;&gt;Docs&lt;/a&gt; &lt;span&gt; • &lt;/span&gt; &lt;a href=&#34;https://slack.wasmer.io/&#34;&gt;Slack Channel&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A complete and mature WebAssembly runtime for Go based on &lt;a href=&#34;https://github.com/wasmerio/wasmer&#34;&gt;Wasmer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Features&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy to use&lt;/strong&gt;: The &lt;code&gt;wasmer&lt;/code&gt; API mimics the standard WebAssembly API,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt;: &lt;code&gt;wasmer&lt;/code&gt; executes the WebAssembly modules as fast as possible, close to &lt;strong&gt;native speed&lt;/strong&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Safe&lt;/strong&gt;: All calls to WebAssembly will be fast, but more importantly, completely safe and sandboxed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href=&#34;https://pkg.go.dev/github.com/wasmerio/wasmer-go/wasmer&#34;&gt;browse the detailed API documentation&lt;/a&gt; full of examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples&lt;/strong&gt; as tutorials: &lt;a href=&#34;https://github.com/wasmerio/wasmer-go/tree/master/examples&#34;&gt;browse the &lt;code&gt;examples/&lt;/code&gt; directory&lt;/a&gt;, it&#39;s the best place for a complete introduction!&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;To install the library, follow the classical:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/wasmerio/wasmer-go/wasmer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you&#39;re ready to get fun!&lt;/p&gt; &#xA;&lt;h2&gt;Supported platforms&lt;/h2&gt; &#xA;&lt;p&gt;This library embeds the Wasmer runtime compiled as shared library objects, and so uses &lt;a href=&#34;https://golang.org/cmd/cgo/&#34;&gt;&lt;code&gt;cgo&lt;/code&gt;&lt;/a&gt; to consume it. A set of precompiled shared library objects are provided. Thus this library works (and is tested) on the following platforms:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;Triple&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x86_64-unknown-linux-gnu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aarch64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;aarch64-unknown-linux-gnu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td rowspan=&#34;2&#34;&gt;Darwin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x86_64-apple-darwin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aarch64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;aarch64-apple-darwin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⏳&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;x86_64-pc-windows-msvc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⏳&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What to do if your platform is missing?&lt;/summary&gt; &#xA; &lt;p&gt;Up to now, there is no script to automate that process. &lt;a href=&#34;https://github.com/wasmerio/wasmer-go/issues/191&#34;&gt;We are working on it&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Here are the steps to do that manually:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ # Build the new Wasmer C API shared object library.&#xA;$ cargo build --release&#xA;$&#xA;$ # Configure cgo.&#xA;$ export CGO_CFLAGS=&#34;-I$(pwd)/wasmer/packaged/include/&#34;&#xA;$ export CGO_LDFLAGS=&#34;-Wl,-rpath,$(pwd)/target/release/ -L$(pwd)/target/release/ -lwasmer_go&#34;&#xA;$&#xA;$ # Run the tests.&#xA;$ just test -tags custom_wasmer_runtime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;We highly recommend to read the &lt;a href=&#34;https://github.com/wasmerio/wasmer-go/tree/master/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory, which contains a sequence of examples/tutorials. It&#39;s the best place to learn by reading examples.&lt;/p&gt; &#xA;&lt;p&gt;But for the most eager of you, there is a quick toy program in &lt;code&gt;examples/appendices/simple.go&lt;/code&gt;, written in Rust:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;#[no_mangle]&#xA;pub extern &#34;C&#34; fn sum(x: i32, y: i32) -&amp;gt; i32 {&#xA;    x + y&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A compiled WebAssembly binary is included in &lt;a href=&#34;https://raw.githubusercontent.com/wasmerio/wasmer-go/master/(https://github.com/wasmerio/wasmer-go/raw/master/examples/appendices/simple.wasm)&#34;&gt;&lt;code&gt;examples/appendices/simple.wasm&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, we can execute it in Go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;io/ioutil&#34;&#xA;&#x9;wasmer &#34;github.com/wasmerio/wasmer-go/wasmer&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    wasmBytes, _ := ioutil.ReadFile(&#34;simple.wasm&#34;)&#xA;&#xA;    engine := wasmer.NewEngine()&#xA;    store := wasmer.NewStore(engine)&#xA;&#xA;    // Compiles the module&#xA;    module, _ := wasmer.NewModule(store, wasmBytes)&#xA;&#xA;    // Instantiates the module&#xA;    importObject := wasmer.NewImportObject()&#xA;    instance, _ := wasmer.NewInstance(module, importObject)&#xA;&#xA;    // Gets the `sum` exported function from the WebAssembly instance.&#xA;    sum, _ := instance.Exports.GetFunction(&#34;sum&#34;)&#xA;&#xA;    // Calls that exported function with Go standard values. The WebAssembly&#xA;    // types are inferred and values are casted automatically.&#xA;    result, _ := sum(5, 37)&#xA;&#xA;    fmt.Println(result) // 42!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then, finally, enjoy by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd examples/appendices/&#xA;$ go run simple.go&#xA;42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;Run the tests with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ just test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;What is WebAssembly?&lt;/h1&gt; &#xA;&lt;p&gt;Quoting &lt;a href=&#34;https://webassembly.org/&#34;&gt;the WebAssembly site&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable target for compilation of high-level languages like C/C++/Rust, enabling deployment on the web for client and server applications.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;About speed:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;WebAssembly aims to execute at native speed by taking advantage of &lt;a href=&#34;https://webassembly.org/docs/portability/#assumptions-for-efficient-execution&#34;&gt;common hardware capabilities&lt;/a&gt; available on a wide range of platforms.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;About safety:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;WebAssembly describes a memory-safe, sandboxed &lt;a href=&#34;https://webassembly.org/docs/semantics/#linear-memory&#34;&gt;execution environment&lt;/a&gt; […].&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;The entire project is under the MIT License. Please read &lt;a href=&#34;https://github.com/wasmerio/wasmer/raw/master/LICENSE&#34;&gt;the &lt;code&gt;LICENSE&lt;/code&gt; file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;How to run Go programs compiled to WebAssembly modules with &lt;code&gt;wasmer-go&lt;/code&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s start by emphasing that &lt;code&gt;wasmer-go&lt;/code&gt; is a WebAssembly runtime. It allows to &lt;em&gt;run&lt;/em&gt; WebAssembly inside Go. It&#39;s not a tool to &lt;em&gt;compile&lt;/em&gt; a Go program into WebAssembly. Nonetheless, many people are reporting issues when compiling Go programs to WebAssembly, and then trying to run them with &lt;code&gt;wasmer-go&lt;/code&gt; (or in another hosts, like &lt;a href=&#34;https://github.com/wasmerio/wasmer-python&#34;&gt;Python&lt;/a&gt;, &lt;a href=&#34;https://github.com/wasmerio/wasmer/tree/master/lib/c-api&#34;&gt;C&lt;/a&gt;, &lt;a href=&#34;https://github.com/wasmerio/wasmer-php&#34;&gt;PHP&lt;/a&gt;, &lt;a href=&#34;https://github.com/wasmerio/wasmer-ruby&#34;&gt;Ruby&lt;/a&gt;, &lt;a href=&#34;https://github.com/wasmerio/wasmer&#34;&gt;Rust&lt;/a&gt;…).&lt;/p&gt; &#xA;&lt;p&gt;The major problem is that, whilst the Go compiler supports WebAssembly, &lt;a href=&#34;https://github.com/golang/go/issues/31105&#34;&gt;it does not support WASI&lt;/a&gt; (WebAssembly System Interface). It generates an ABI that is deeply tied to JavaScript, and one needs to use the &lt;code&gt;wasm_exec.js&lt;/code&gt; file provided by the Go toolchain, which doesn&#39;t work outside a JavaScript host.&lt;/p&gt; &#xA;&lt;p&gt;Fortunately, there are two solutions to this problem:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;a href=&#34;https://tinygo.org&#34;&gt;TinyGo&lt;/a&gt; to compile your Go program to WebAssembly with the &lt;code&gt;-target wasi&lt;/code&gt; option, e.g.:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tinygo build -o module.wasm -target wasi .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The generated WebAssembly module will be portable across all WebAssembly runtimes that support WASI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the Go compiler with adapters. Let&#39;s see how to compile:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ GOOS=js GOARCH=wasm go build -o module.wasm .&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(the &lt;code&gt;GOOS=js&lt;/code&gt; is the sign that JavaScript is targeted, not a surprise).&lt;/p&gt; &lt;p&gt;Then pick one adapter (they are written by the community):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/gowasmer/&#34;&gt;&lt;code&gt;mattn/gowasmer&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/go-wasm-adapter/go-wasm/&#34;&gt;&lt;code&gt;go-wasm-adapter/go-wasm&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;and follow their documentation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We highly recommend the first solution (with TinyGo) if it works for you as the WebAssembly module will be portable across all WebAssembly runtimes. It&#39;s not a hacky solution based on adapters; it&#39;s the right way to… go.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>doitintl/kube-no-trouble</title>
    <updated>2023-08-19T01:24:50Z</updated>
    <id>tag:github.com,2023-08-19:/doitintl/kube-no-trouble</id>
    <link href="https://github.com/doitintl/kube-no-trouble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily check your clusters for use of deprecated APIs&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/doitintl/kube-no-trouble/master/docs/imgs/kubent-logo.svg?sanitize=true&#34; alt=&#34;Kubent (Kube-No-Trouble) logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Easily check your clusters for use of deprecated APIs&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kubernetes 1.16 is slowly starting to roll out, not only across various managed Kubernetes offerings, and with that come a lot of API deprecations&lt;a href=&#34;https://kubernetes.io/blog/2019/07/18/api-deprecations-in-1-16/&#34;&gt;1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Kube No Trouble (&lt;strong&gt;&lt;code&gt;kubent&lt;/code&gt;&lt;/strong&gt;)&lt;/em&gt; is a simple tool to check whether you&#39;re using any of these API versions in your cluster and therefore should upgrade your workloads first, before upgrading your Kubernetes cluster.&lt;/p&gt; &#xA;&lt;p&gt;This tool will be able to detect deprecated APIs depending on how you deploy your resources, as we need the original manifest to be stored somewhere. In particular following tools are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;file&lt;/strong&gt; - local manifests in YAML or JSON&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kubectl&lt;/strong&gt; - uses the &lt;code&gt;kubectl.kubernetes.io/last-applied-configuration&lt;/code&gt; annotation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Helm v3&lt;/strong&gt; - uses Helm manifests stored as Secrets or ConfigMaps directly in individual namespaces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Additional resources:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blog post on K8s deprecated APIs and introduction of kubent: &lt;a href=&#34;https://stepan.wtf/kubernetes-deprecated-apis-introducing-kubent/&#34;&gt;Kubernetes: Deprecated APIs aka Introducing Kube-No-Trouble&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command in your terminal to install &lt;code&gt;kubent&lt;/code&gt; using a shell script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh -c &#34;$(curl -sSL https://git.io/install-kubent)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(The script will download latest version and unpack to &lt;code&gt;/usr/local/bin&lt;/code&gt;).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can download the &lt;a href=&#34;https://github.com/doitintl/kube-no-trouble/releases/latest&#34;&gt;latest release&lt;/a&gt; for your platform and unpack manually.&lt;/p&gt; &#xA;&lt;h3&gt;Third-Party Installation&lt;/h3&gt; &#xA;&lt;p&gt;Please note that third-party installation methods are maintained by the community. The packages may not always be up-to-date with the latest releases of &lt;code&gt;kubent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;kubent&lt;/code&gt; is available as a &lt;a href=&#34;https://formulae.brew.sh/formula/kubent&#34;&gt;formula&lt;/a&gt; on &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. If you&#39;re using macOS or Linux, you can run the following command to install &lt;code&gt;kubent&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install kubent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Configure Kubectl&#39;s current context to point to your cluster, &lt;code&gt;kubent&lt;/code&gt; will look for the kube &lt;code&gt;.config&lt;/code&gt; file in standard locations (you can point it to custom location using the &lt;code&gt;-k&lt;/code&gt; switch).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;kubent&lt;/code&gt;&lt;/strong&gt; will collect resources from your cluster and report on found issues.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that you need to have sufficient permissions to read Secrets in the cluster in order to use &lt;code&gt;Helm*&lt;/code&gt; collectors.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$./kubent&#xA;6:25PM INF &amp;gt;&amp;gt;&amp;gt; Kube No Trouble `kubent` &amp;lt;&amp;lt;&amp;lt;&#xA;6:25PM INF Initializing collectors and retrieving data&#xA;6:25PM INF Retrieved 103 resources from collector name=Cluster&#xA;6:25PM INF Retrieved 0 resources from collector name=&#34;Helm v3&#34;&#xA;6:25PM INF Loaded ruleset name=deprecated-1-16.rego&#xA;6:25PM INF Loaded ruleset name=deprecated-1-20.rego&#xA;__________________________________________________________________________________________&#xA;&amp;gt;&amp;gt;&amp;gt; 1.16 Deprecated APIs &amp;lt;&amp;lt;&amp;lt;&#xA;------------------------------------------------------------------------------------------&#xA;KIND         NAMESPACE     NAME                    API_VERSION&#xA;Deployment   default       nginx-deployment-old    apps/v1beta1&#xA;Deployment   kube-system   event-exporter-v0.2.5   apps/v1beta1&#xA;Deployment   kube-system   k8s-snapshots           extensions/v1beta1&#xA;Deployment   kube-system   kube-dns                extensions/v1beta1&#xA;__________________________________________________________________________________________&#xA;&amp;gt;&amp;gt;&amp;gt; 1.20 Deprecated APIs &amp;lt;&amp;lt;&amp;lt;&#xA;------------------------------------------------------------------------------------------&#xA;KIND      NAMESPACE   NAME           API_VERSION&#xA;Ingress   default     test-ingress   extensions/v1beta1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arguments&lt;/h3&gt; &#xA;&lt;p&gt;You can list all the configuration options available using &lt;code&gt;--help&lt;/code&gt; switch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$./kubent -h&#xA;Usage of ./kubent:&#xA;  -A, --additional-annotation strings   additional annotations that should be checked to determine the last applied config&#xA;  -a, --additional-kind strings         additional kinds of resources to report in Kind.version.group.com format&#xA;  -c, --cluster                         enable Cluster collector (default true)&#xA;  -x, --context string                  kubeconfig context&#xA;  -e, --exit-error                      exit with non-zero code when issues are found&#xA;  -f, --filename strings                manifests to check, use - for stdin&#xA;      --helm3                           enable Helm v3 collector (default true)&#xA;  -k, --kubeconfig string               path to the kubeconfig file&#xA;  -l, --log-level string                set log level (trace, debug, info, warn, error, fatal, panic, disabled) (default &#34;info&#34;)&#xA;  -o, --output string                   output format - [text|json|csv] (default &#34;text&#34;)&#xA;  -O, --output-file string        output file, use - for stdout (default &#34;-&#34;)&#xA;  -t, --target-version string           target K8s version in SemVer format (autodetected by default)&#xA;  -v, --version                         prints the version of kubent and exits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;--additional-annotation&lt;/code&gt;&lt;/em&gt; Check additional annotations for the last applied configuration. This can be useful if a resource was applied with a tool other than kubectl. The flag can be used multiple times.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;-a, --additional-kind&lt;/code&gt;&lt;/em&gt; Tells &lt;code&gt;kubent&lt;/code&gt; to flag additional custom resources when found in the specified version. The flag can be used multiple times. The expected format is full &lt;em&gt;Kind.version.group.com&lt;/em&gt; form - e.g. &lt;code&gt;-a ManagedCertificate.v1.networking.gke.io&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;-x, --context&lt;/code&gt;&lt;/em&gt; Select context from kubeconfig file (&lt;code&gt;current-context&lt;/code&gt; from the file is used by default).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;k, --kubeconfig&lt;/code&gt;&lt;/em&gt; Path to kubeconfig file to use. This takes precedence over &lt;code&gt;KUBECONFIG&lt;/code&gt; environment variable, which is also supported and can contain multiple paths, and default &lt;code&gt;~.kube/config&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;-t, --target-version&lt;/code&gt;&lt;/em&gt; &lt;code&gt;Kubent&lt;/code&gt; will try to detect K8S cluster version and display only relevant findings. This flag allows to override this version for scenarios like use in CI with the file collector only, when detection from an actual cluster is not possible. Expected format is &lt;code&gt;major.minor[.patch]&lt;/code&gt;, e.g. &lt;code&gt;1.16&lt;/code&gt; or &lt;code&gt;1.16.3&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Image&lt;/h3&gt; &#xA;&lt;p&gt;We also publish official container image, which can be found at: &lt;code&gt;ghcr.io/doitintl/kube-no-trouble:latest&lt;/code&gt; (also available tagged with each individual release version).&lt;/p&gt; &#xA;&lt;p&gt;To run locally, you&#39;ll need to provide credentials, e.g. by sharing your kubectl config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -it --rm \&#xA;    -v &#34;${HOME}/.kube/config:/.kubeconfig&#34; \&#xA;    ghcr.io/doitintl/kube-no-trouble:latest \&#xA;    -k /.kubeconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;kubectl run&lt;/code&gt; to run inside a K8S cluster, as a one-off. In that case the credentials will be picked up via the pod&#39;s service account from the environment, but you&#39;ll want to grant relevant permissions first (see &lt;a href=&#34;https://raw.githubusercontent.com/doitintl/kube-no-trouble/master/docs/k8s-sa-and-role-example.yaml&#34;&gt;docs/k8s-sa-and-role-example.yaml&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ kubectl run kubent --restart=Never --rm -i --tty \&#xA;    --image ghcr.io/doitintl/kube-no-trouble:latest \&#xA;    --overrides=&#39;{&#34;spec&#34;: {&#34;serviceAccount&#34;: &#34;kubent&#34;}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use in CI&lt;/h3&gt; &#xA;&lt;h4&gt;Exit codes&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;kubent&lt;/code&gt; will by default return &lt;code&gt;0&lt;/code&gt; exit code if the program succeeds, even if it finds deprecated resources, and non-zero exit code if there is an error during runtime. Because all info output goes to stderr, it&#39;s easy to check in shell if any issues were found:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;test -z &#34;$(kubent)&#34;                 # if stdout output is empty, means no issues were found&#xA;                                    # equivalent to [ -z &#34;$(kubent)&#34; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s actually better so split this into two steps, in order to differentiate between runtime error and found issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;if ! OUTPUT=&#34;$(kubent)&#34;; then       # check for non-zero return code first&#xA;  echo &#34;kubent failed to run!&#34;&#xA;elif [ -n &#34;${OUTPUT}&#34; ]; then       # check for empty stdout&#xA;  echo &#34;Deprecated resources found&#34;&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;--exit-error&lt;/code&gt; (&lt;code&gt;-e&lt;/code&gt;) flag, which will make kubent to exit with non-zero return code (&lt;code&gt;200&lt;/code&gt;) in case any issues are found.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, use the json output and smth. like &lt;code&gt;jq&lt;/code&gt; to check if the result is empty:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubent -o json | jq -e &#39;length == 0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scanning all files in directory&lt;/h4&gt; &#xA;&lt;p&gt;If you want to scan all files in a given directory, you can use the following shell snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;FILES=($(ls *.yaml)); kubent ${FILES[@]/#/-f} --helm3=false -c=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The simplest way to build &lt;code&gt;kubent&lt;/code&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Clone the repository&#xA;git clone https://github.com/doitintl/kube-no-trouble.git&#xA;cd kube-no-trouble/&#xA;# Build&#xA;go build -o bin/kubent cmd/kubent/main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise there&#39;s &lt;code&gt;Makefile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make&#xA;make&#xA;all                            Cean, build and pack&#xA;help                           Prints list of tasks&#xA;build                          Build binary&#xA;generate                       Go generate&#xA;release-artifacts              Create release artifacts&#xA;clean                          Clean build artifacts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commit messages&lt;/h3&gt; &#xA;&lt;p&gt;We enforce simple version of &lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;Conventional Commits&lt;/a&gt; in the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;type&amp;gt;: &amp;lt;summary&amp;gt;&#xA;&#xA;[optional body]&#xA;&#xA;[optional footer(s)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where type is one of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;build&lt;/strong&gt; - Affects build and/or build system&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;chore&lt;/strong&gt; - Other non-functional changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ci&lt;/strong&gt; - Affects CI (e.g. GitHub actions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dep&lt;/strong&gt; - Dependency update&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;docs&lt;/strong&gt; - Documentation only change&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;feat&lt;/strong&gt; - A new feature&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;fix&lt;/strong&gt; - A bug fix&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ref&lt;/strong&gt; - Code refactoring without functionality change&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;style&lt;/strong&gt; - Formatting changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;test&lt;/strong&gt; - Adding/changing tests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use imperative, present tense (Add, not &lt;del&gt;Added&lt;/del&gt;), capitalize first letter of summary, no dot at the and. The body and footer are optional. Relevant GitHub issues should be referenced in the footer in the form &lt;code&gt;Fixes #123, fixes #456&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Changelog&lt;/h3&gt; &#xA;&lt;p&gt;Changelog is generated automatically based on merged PRs using &lt;a href=&#34;https://github.com/paultyng/changelog-gen&#34;&gt;changelog-gen&lt;/a&gt;. Template can be found in &lt;code&gt;scripts/changelog.tmpl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;PRs are categorized based on their labels, into following sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Announcements - &lt;code&gt;announcement&lt;/code&gt; label&lt;/li&gt; &#xA; &lt;li&gt;Breaking Changes - &lt;code&gt;breaking-change&lt;/code&gt; label&lt;/li&gt; &#xA; &lt;li&gt;Features - &lt;code&gt;feature&lt;/code&gt; label&lt;/li&gt; &#xA; &lt;li&gt;Changes - &lt;code&gt;change&lt;/code&gt; label&lt;/li&gt; &#xA; &lt;li&gt;Fixes - &lt;code&gt;fix&lt;/code&gt; label&lt;/li&gt; &#xA; &lt;li&gt;Internal/Other - everything else&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PR can be excluded from changelog with &lt;code&gt;no-release-note&lt;/code&gt; label. PR title is used by default, however, the copy can be customized by including following block in the PR body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;```release-note&#xA;This is an example release note!&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Issues and Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Please open any issues and/or PRs against github.com/doitintl/kube-no-trouble repository.&lt;/p&gt; &#xA;&lt;p&gt;Please ensure any contributions are signed with a valid gpg key. We use this to validate that you have committed this and no one else. You can learn how to create a GPG key &lt;a href=&#34;https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feedback and contributions are always welcome!&lt;/p&gt;</summary>
  </entry>
</feed>