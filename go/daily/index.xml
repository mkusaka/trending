<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-03T01:31:28Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gagliardetto/solana-go</title>
    <updated>2025-03-03T01:31:28Z</updated>
    <id>tag:github.com,2025-03-03:/gagliardetto/solana-go</id>
    <link href="https://github.com/gagliardetto/solana-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go SDK library and RPC client for the Solana Blockchain&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Solana SDK library for Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/gagliardetto/solana-go@v1.12.0?tab=doc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/gagliardetto/solana-go?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gagliardetto/solana-go/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/gagliardetto/solana-go?include_prereleases&amp;amp;label=release-tag&#34; alt=&#34;GitHub tag (latest SemVer pre-release)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gagliardetto/solana-go/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/gagliardetto/solana-go/workflows/tests/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.tickgit.com/browse?repo=github.com/gagliardetto/solana-go&amp;amp;branch=main&#34;&gt;&lt;img src=&#34;https://badgen.net/https/api.tickgit.com/badgen/github.com/gagliardetto/solana-go/main&#34; alt=&#34;TODOs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gagliardetto/solana-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gagliardetto/solana-go&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go library to interface with Solana JSON RPC and WebSocket interfaces.&lt;/p&gt; &#xA;&lt;p&gt;More contracts to come.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re using/developing Solana programs written in &lt;a href=&#34;https://github.com/project-serum/anchor&#34;&gt;Anchor Framework&lt;/a&gt;, you can use &lt;a href=&#34;https://github.com/gagliardetto/anchor-go&#34;&gt;anchor-go&lt;/a&gt; to generate Golang clients&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you&#39;re looking for a SERUM library, you can check out &lt;a href=&#34;https://github.com/gagliardetto/serum-go&#34;&gt;gagliardetto/serum-go&lt;/a&gt; (&lt;a href=&#34;https://github.com/gagliardetto/solana-go/tree/main/programs/serum&#34;&gt;./programs/serum&lt;/a&gt; is deprecated.&lt;/strong&gt;)&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/15271561/128235229-1d2d9116-23bb-464e-b2cc-8fb6355e3b55.png&#34; margin=&#34;auto&#34; height=&#34;175&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Future Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;solana-go&lt;/code&gt; is exclusively supported by my own time (which is money).&lt;/p&gt; &#xA;&lt;p&gt;If my work has been useful in building your for-profit services/infra/bots/etc., consider donating at 8tTwBazKr2ST1b2kNrM7JMXwixRTvZicn7eRBihThymm (solana) to support future development.&lt;/p&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#solana-sdk-library-for-go&#34;&gt;Solana SDK library for Go&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;Contents&#39; Index&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#current-development-status&#34;&gt;Current development status&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#pretty-print-transactionsinstructions&#34;&gt;Pretty-Print transactions/instructions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#sendandconfirmtransaction&#34;&gt;SendAndConfirmTransaction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#address-lookup-tables&#34;&gt;Address Lookup Tables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#parsedecode-an-instruction-from-a-transaction&#34;&gt;Decode an instruction data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#borsh-encodingdecoding&#34;&gt;Borsh encoding/decoding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#zstd-account-data-encoding&#34;&gt;ZSTD account data encoding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#custom-headers-for-authenticating-with-rpc-providers&#34;&gt;Custom Headers for authenticating with RPC providers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#working-with-rate-limited-rpc-providers&#34;&gt;Working with rate-limited RPC providers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#timeouts-and-custom-http-clients&#34;&gt;Timeouts and Custom HTTP Clients&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#create-account-wallet&#34;&gt;Create Account/Wallet&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#loadparse-private-and-public-keys&#34;&gt;Load/parse keys&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#transfer-sol-from-one-wallet-to-another-wallet&#34;&gt;Transfer SOL from a wallet to another&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-usage-examples&#34;&gt;RPC (index)&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC examples&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;Websocket Subscription examples&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-usage-examples&#34;&gt;Full JSON RPC API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Full WebSocket JSON streaming API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Wallet, account, and keys management&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Clients for native programs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/programs/system&#34;&gt;system&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; config&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; stake&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; vote&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BPF Loader&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Secp256k1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Clients for Solana Program Library (SPL) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/programs/token&#34;&gt;SPL token&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/programs/associated-token-account&#34;&gt;associated-token-account&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; memo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; name-service&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; ...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Client for Serum&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/gagliardetto/metaplex-go&#34;&gt;Metaplex&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; auction&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; metaplex&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; token-metadata&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; token-vault&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; nft-candy-machine&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; More programs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Current development status&lt;/h2&gt; &#xA;&lt;p&gt;There is currently &lt;strong&gt;no stable release&lt;/strong&gt;. The SDK is actively developed and latest is &lt;code&gt;v1.12.0&lt;/code&gt; which is an &lt;code&gt;alpha&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;The RPC and WS client implementation is based on &lt;a href=&#34;https://github.com/solana-labs/solana/raw/c2435363f39723cef59b91322f3b6a815008af29/docs/src/developing/clients/jsonrpc-api.md&#34;&gt;this RPC spec&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;solana-go is in active development, so all APIs are subject to change.&lt;/li&gt; &#xA; &lt;li&gt;This code is unaudited. Use at your own risk.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.19 or later&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd my-project&#xA;$ go get github.com/gagliardetto/solana-go@v1.12.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pretty-Print transactions/instructions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/15271561/136708519-399c9498-3d20-48d6-89fa-bdf43aac6d83.png&#34; alt=&#34;pretty-printed&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Instructions can be pretty-printed with the &lt;code&gt;String()&lt;/code&gt; method on a &lt;code&gt;Transaction&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx, err := solana.NewTransaction(&#xA;  []solana.Instruction{&#xA;    system.NewTransferInstruction(&#xA;      amount,&#xA;      accountFrom.PublicKey(),&#xA;      accountTo,&#xA;    ).Build(),&#xA;  },&#xA;  recent.Value.Blockhash,&#xA;  solana.TransactionPayer(accountFrom.PublicKey()),&#xA;)&#xA;&#xA;...&#xA;&#xA;// Pretty print the transaction:&#xA;fmt.Println(tx.String())&#xA;// OR you can choose a destination and a title:&#xA;// tx.EncodeTree(text.NewTreeEncoder(os.Stdout, &#34;Transfer SOL&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SendAndConfirmTransaction&lt;/h2&gt; &#xA;&lt;p&gt;You can wait for a transaction confirmation using the &lt;code&gt;github.com/gagliardetto/solana-go/rpc/sendAndConfirmTransaction&lt;/code&gt; package tools (for a complete example: &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#transfer-sol-from-one-wallet-to-another-wallet&#34;&gt;see here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Send transaction, and wait for confirmation:&#xA;sig, err := confirm.SendAndConfirmTransaction(&#xA;  context.TODO(),&#xA;  rpcClient,&#xA;  wsClient,&#xA;  tx,&#xA;)&#xA;if err != nil {&#xA;  panic(err)&#xA;}&#xA;spew.Dump(sig)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command will send the transaction, and wait for its confirmation.&lt;/p&gt; &#xA;&lt;h2&gt;Address Lookup Tables&lt;/h2&gt; &#xA;&lt;p&gt;Resolve lookups for a transaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/davecgh/go-spew/spew&#34;&#xA;&#x9;&#34;github.com/gagliardetto/solana-go&#34;&#xA;&#x9;lookup &#34;github.com/gagliardetto/solana-go/programs/address-lookup-table&#34;&#xA;&#x9;&#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;&#x9;&#34;golang.org/x/time/rate&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;cluster := rpc.MainNetBeta&#xA;&#xA;&#x9;rpcClient := rpc.NewWithCustomRPCClient(rpc.NewWithLimiter(&#xA;&#x9;&#x9;cluster.RPC,&#xA;&#x9;&#x9;rate.Every(time.Second), // time frame&#xA;&#x9;&#x9;5,                       // limit of requests per time frame&#xA;&#x9;))&#xA;&#xA;&#x9;version := uint64(0)&#xA;&#x9;tx, err := rpcClient.GetTransaction(&#xA;&#x9;&#x9;context.Background(),&#xA;&#x9;&#x9;solana.MustSignatureFromBase58(&#34;24jRjMP3medE9iMqVSPRbkwfe9GdPmLfeftKPuwRHZdYTZJ6UyzNMGGKo4BHrTu2zVj4CgFF3CEuzS79QXUo2CMC&#34;),&#xA;&#x9;&#x9;&amp;amp;rpc.GetTransactionOpts{&#xA;&#x9;&#x9;&#x9;MaxSupportedTransactionVersion: &amp;amp;version,&#xA;&#x9;&#x9;&#x9;Encoding:                       solana.EncodingBase64,&#xA;&#x9;&#x9;},&#xA;&#x9;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;parsed, err := tx.Transaction.GetTransaction()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;processTransactionWithAddressLookups(parsed, rpcClient)&#xA;}&#xA;&#xA;func processTransactionWithAddressLookups(txx *solana.Transaction, rpcClient *rpc.Client) {&#xA;&#x9;if !txx.Message.IsVersioned() {&#xA;&#x9;&#x9;fmt.Println(&#34;tx is not versioned; only versioned transactions can contain lookups&#34;)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;tblKeys := txx.Message.GetAddressTableLookups().GetTableIDs()&#xA;&#x9;if len(tblKeys) == 0 {&#xA;&#x9;&#x9;fmt.Println(&#34;no lookup tables in versioned transaction&#34;)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;numLookups := txx.Message.GetAddressTableLookups().NumLookups()&#xA;&#x9;if numLookups == 0 {&#xA;&#x9;&#x9;fmt.Println(&#34;no lookups in versioned transaction&#34;)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;fmt.Println(&#34;num lookups:&#34;, numLookups)&#xA;&#x9;fmt.Println(&#34;num tbl keys:&#34;, len(tblKeys))&#xA;&#x9;resolutions := make(map[solana.PublicKey]solana.PublicKeySlice)&#xA;&#x9;for _, key := range tblKeys {&#xA;&#x9;&#x9;fmt.Println(&#34;Getting table&#34;, key)&#xA;&#xA;&#x9;&#x9;info, err := rpcClient.GetAccountInfo(&#xA;&#x9;&#x9;&#x9;context.Background(),&#xA;&#x9;&#x9;&#x9;key,&#xA;&#x9;&#x9;)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;fmt.Println(&#34;got table &#34;+key.String())&#xA;&#xA;&#x9;&#x9;tableContent, err := lookup.DecodeAddressLookupTableState(info.GetBinary())&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;fmt.Println(&#34;table content:&#34;, spew.Sdump(tableContent))&#xA;&#x9;&#x9;fmt.Println(&#34;isActive&#34;, tableContent.IsActive())&#xA;&#xA;&#x9;&#x9;resolutions[key] = tableContent.Addresses&#xA;&#x9;}&#xA;&#xA;&#x9;err := txx.Message.SetAddressTables(resolutions)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;err = txx.Message.ResolveLookups()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(txx.String())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Parse/decode an instruction from a transaction&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;encoding/base64&#34;&#xA;  &#34;os&#34;&#xA;  &#34;reflect&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  bin &#34;github.com/gagliardetto/binary&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/programs/system&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/text&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  exampleFromGetTransaction()&#xA;}&#xA;&#xA;func exampleFromBase64() {&#xA;  encoded := &#34;AfjEs3XhTc3hrxEvlnMPkm/cocvAUbFNbCl00qKnrFue6J53AhEqIFmcJJlJW3EDP5RmcMz+cNTTcZHW/WJYwAcBAAEDO8hh4VddzfcO5jbCt95jryl6y8ff65UcgukHNLWH+UQGgxCGGpgyfQVQV02EQYqm4QwzUt2qf9f1gVLM7rI4hwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6ANIF55zOZWROWRkeh+lExxZBnKFqbvIxZDLE7EijjoBAgIAAQwCAAAAOTAAAAAAAAA=&#34;&#xA;&#xA;  data, err := base64.StdEncoding.DecodeString(encoded)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  // parse transaction:&#xA;  tx, err := solana.TransactionFromDecoder(bin.NewBinDecoder(data))&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  decodeSystemTransfer(tx)&#xA;}&#xA;&#xA;func exampleFromGetTransaction() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  txSig := solana.MustSignatureFromBase58(&#34;3hZorctJtD3QLCRV3zF6JM6FDbFR5kAvsuKEG1RH9rWdz8YgnDzAvMWZFjdJgoL8KSNzZnx7aiExm1JEMC8KHfyy&#34;)&#xA;  {&#xA;    out, err := client.GetTransaction(&#xA;      context.TODO(),&#xA;      txSig,&#xA;      &amp;amp;rpc.GetTransactionOpts{&#xA;        Encoding: solana.EncodingBase64,&#xA;      },&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;&#xA;    tx, err := solana.TransactionFromDecoder(bin.NewBinDecoder(out.Transaction.GetBinary()))&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;&#xA;    decodeSystemTransfer(tx)&#xA;  }&#xA;}&#xA;&#xA;func decodeSystemTransfer(tx *solana.Transaction) {&#xA;  spew.Dump(tx)&#xA;&#xA;  // Get (for example) the first instruction of this transaction&#xA;  // which we know is a `system` program instruction:&#xA;  i0 := tx.Message.Instructions[0]&#xA;&#xA;  // Find the program address of this instruction:&#xA;  progKey, err := tx.ResolveProgramIDIndex(i0.ProgramIDIndex)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  // Find the accounts of this instruction:&#xA;  accounts, err := i0.ResolveInstructionAccounts(&amp;amp;tx.Message)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  // Feed the accounts and data to the system program parser&#xA;  // OR see below for alternative parsing when you DON&#39;T know&#xA;  // what program the instruction is for / you don&#39;t have a parser.&#xA;  inst, err := system.DecodeInstruction(accounts, i0.Data)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  // inst.Impl contains the specific instruction type (in this case, `inst.Impl` is a `*system.Transfer`)&#xA;  spew.Dump(inst)&#xA;  if _, ok := inst.Impl.(*system.Transfer); !ok {&#xA;    panic(&#34;the instruction is not a *system.Transfer&#34;)&#xA;  }&#xA;&#xA;  // OR&#xA;  {&#xA;    // There is a more general instruction decoder: `solana.DecodeInstruction`.&#xA;    // But before you can use `solana.DecodeInstruction`,&#xA;    // you must register a decoder for each program ID beforehand&#xA;    // by using `solana.RegisterInstructionDecoder` (all solana-go program clients do it automatically with the default program IDs).&#xA;    decodedInstruction, err := solana.DecodeInstruction(&#xA;      progKey,&#xA;      accounts,&#xA;      i0.Data,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    // The returned `decodedInstruction` is the decoded instruction.&#xA;    spew.Dump(decodedInstruction)&#xA;&#xA;    // decodedInstruction == inst&#xA;    if !reflect.DeepEqual(inst, decodedInstruction) {&#xA;      panic(&#34;they are NOT equal (this would never happen)&#34;)&#xA;    }&#xA;&#xA;    // To register other (not yet registered decoders), you can add them with&#xA;    // `solana.RegisterInstructionDecoder` function.&#xA;  }&#xA;&#xA;  {&#xA;    // pretty-print whole transaction:&#xA;    _, err := tx.EncodeTree(text.NewTreeEncoder(os.Stdout, text.Bold(&#34;TEST TRANSACTION&#34;)))&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Borsh encoding/decoding&lt;/h2&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;github.com/gagliardetto/binary&lt;/code&gt; package for encoding/decoding borsh-encoded data:&lt;/p&gt; &#xA;&lt;p&gt;Decoder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  resp, err := client.GetAccountInfo(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  borshDec := bin.NewBorshDecoder(resp.GetBinary())&#xA;  var meta token_metadata.Metadata&#xA;  err = borshDec.Decode(&amp;amp;meta)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encoder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;buf := new(bytes.Buffer)&#xA;borshEncoder := bin.NewBorshEncoder(buf)&#xA;err := borshEncoder.Encode(meta)&#xA;if err != nil {&#xA;  panic(err)&#xA;}&#xA;// fmt.Print(buf.Bytes())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ZSTD account data encoding&lt;/h2&gt; &#xA;&lt;p&gt;You can request account data to be encoded with base64+zstd in the &lt;code&gt;Encoding&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;resp, err := client.GetAccountInfoWithOpts(&#xA;  context.TODO(),&#xA;  pubKey,&#xA;  &amp;amp;rpc.GetAccountInfoOpts{&#xA;    Encoding:   solana.EncodingBase64Zstd,&#xA;    Commitment: rpc.CommitmentFinalized,&#xA;  },&#xA;)&#xA;if err != nil {&#xA;  panic(err)&#xA;}&#xA;spew.Dump(resp)&#xA;&#xA;var mint token.Mint&#xA;err = bin.NewDecoder(resp.GetBinary()).Decode(&amp;amp;mint)&#xA;if err != nil {&#xA;  panic(err)&#xA;}&#xA;spew.Dump(mint)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working with rate-limited RPC providers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;golang.org/x/time/rate&#34;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  cluster := rpc.MainNetBeta&#xA;  client := rpc.NewWithCustomRPCClient(rpc.NewWithLimiter(&#xA;&#x9;&#x9;cluster.RPC,&#xA;&#x9;&#x9;rate.Every(time.Second), // time frame&#xA;&#x9;&#x9;5,                       // limit of requests per time frame&#xA;&#x9;))&#xA;&#xA;  out, err := client.GetVersion(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Headers for authenticating with RPC providers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;golang.org/x/time/rate&#34;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  cluster := rpc.MainNetBeta&#xA;  client := rpc.NewWithHeaders(&#xA;    cluster.RPC,&#xA;    map[string]string{&#xA;      &#34;x-api-key&#34;: &#34;...&#34;,&#xA;    },&#xA;  )&#xA;&#xA;  out, err := client.GetVersion(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The data will &lt;strong&gt;AUTOMATICALLY get decoded&lt;/strong&gt; and returned (&lt;strong&gt;the right decoder will be used&lt;/strong&gt;) when you call the &lt;code&gt;resp.GetBinary()&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h2&gt;Timeouts and Custom HTTP Clients&lt;/h2&gt; &#xA;&lt;p&gt;You can use a timeout context:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ctx, cancel := context.WithTimeout(context.Background(), time.Second*3)&#xA;defer cancel()&#xA;acc, err := rpcClient.GetAccountInfoWithOpts(&#xA;  ctx,&#xA;  accountID,&#xA;  &amp;amp;rpc.GetAccountInfoOpts{&#xA;    Commitment: rpc.CommitmentProcessed,&#xA;  },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can initialize the RPC client using a custom HTTP client using &lt;code&gt;rpc.NewWithCustomRPCClient&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;  &#34;net&#34;&#xA;  &#34;net/http&#34;&#xA;  &#34;time&#34;&#xA;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/jsonrpc&#34;&#xA;)&#xA;&#xA;func NewHTTPTransport(&#xA;  timeout time.Duration,&#xA;  maxIdleConnsPerHost int,&#xA;  keepAlive time.Duration,&#xA;) *http.Transport {&#xA;  return &amp;amp;http.Transport{&#xA;    IdleConnTimeout:     timeout,&#xA;    MaxIdleConnsPerHost: maxIdleConnsPerHost,&#xA;    Proxy:               http.ProxyFromEnvironment,&#xA;    Dial: (&amp;amp;net.Dialer{&#xA;      Timeout:   timeout,&#xA;      KeepAlive: keepAlive,&#xA;    }).Dial,&#xA;  }&#xA;}&#xA;&#xA;// NewHTTP returns a new Client from the provided config.&#xA;func NewHTTP(&#xA;  timeout time.Duration,&#xA;  maxIdleConnsPerHost int,&#xA;  keepAlive time.Duration,&#xA;) *http.Client {&#xA;  tr := NewHTTPTransport(&#xA;    timeout,&#xA;    maxIdleConnsPerHost,&#xA;    keepAlive,&#xA;  )&#xA;&#xA;  return &amp;amp;http.Client{&#xA;    Timeout:   timeout,&#xA;    Transport: tr,&#xA;  }&#xA;}&#xA;&#xA;// NewRPC creates a new Solana JSON RPC client.&#xA;func NewRPC(rpcEndpoint string) *rpc.Client {&#xA;  var (&#xA;    defaultMaxIdleConnsPerHost = 10&#xA;    defaultTimeout             = 25 * time.Second&#xA;    defaultKeepAlive           = 180 * time.Second&#xA;  )&#xA;  opts := &amp;amp;jsonrpc.RPCClientOpts{&#xA;    HTTPClient: NewHTTP(&#xA;      defaultTimeout,&#xA;      defaultMaxIdleConnsPerHost,&#xA;      defaultKeepAlive,&#xA;    ),&#xA;  }&#xA;  rpcClient := jsonrpc.NewClientWithOpts(rpcEndpoint, opts)&#xA;  return rpc.NewWithCustomRPCClient(rpcClient)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Create account (wallet)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;fmt&#34;&#xA;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  // Create a new account:&#xA;  account := solana.NewWallet()&#xA;  fmt.Println(&#34;account private key:&#34;, account.PrivateKey)&#xA;  fmt.Println(&#34;account public key:&#34;, account.PublicKey())&#xA;&#xA;  // Create a new RPC client:&#xA;  client := rpc.New(rpc.TestNet_RPC)&#xA;&#xA;  // Airdrop 1 SOL to the new account:&#xA;  out, err := client.RequestAirdrop(&#xA;    context.TODO(),&#xA;    account.PublicKey(),&#xA;    solana.LAMPORTS_PER_SOL*1,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  fmt.Println(&#34;airdrop transaction signature:&#34;, out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load/parse private and public keys&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;{&#xA;  // Load private key from a json file generated with&#xA;  // $ solana-keygen new --outfile=standard.solana-keygen.json&#xA;  privateKey, err := solana.PrivateKeyFromSolanaKeygenFile(&#34;/path/to/standard.solana-keygen.json&#34;)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  fmt.Println(&#34;private key:&#34;, privateKey.String())&#xA;  // To get the public key, you need to call the `PublicKey()` method:&#xA;  publicKey := privateKey.PublicKey()&#xA;  // To get the base58 string of a public key, you can call the `String()` method:&#xA;  fmt.Println(&#34;public key:&#34;, publicKey.String())&#xA;}&#xA;&#xA;{&#xA;  // Load private key from base58:&#xA;  {&#xA;    privateKey, err := solana.PrivateKeyFromBase58(&#34;66cDvko73yAf8LYvFMM3r8vF5vJtkk7JKMgEKwkmBC86oHdq41C7i1a2vS3zE1yCcdLLk6VUatUb32ZzVjSBXtRs&#34;)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    fmt.Println(&#34;private key:&#34;, privateKey.String())&#xA;    fmt.Println(&#34;public key:&#34;, privateKey.PublicKey().String())&#xA;  }&#xA;  // OR:&#xA;  {&#xA;    privateKey := solana.MustPrivateKeyFromBase58(&#34;66cDvko73yAf8LYvFMM3r8vF5vJtkk7JKMgEKwkmBC86oHdq41C7i1a2vS3zE1yCcdLLk6VUatUb32ZzVjSBXtRs&#34;)&#xA;    _ = privateKey&#xA;  }&#xA;}&#xA;&#xA;{&#xA;  // Generate a new key pair:&#xA;  {&#xA;    privateKey, err := solana.NewRandomPrivateKey()&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    _ = privateKey&#xA;  }&#xA;  {&#xA;    { // Generate a new private key (a Wallet struct is just a wrapper around a private key)&#xA;      account := solana.NewWallet()&#xA;      _ = account&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;{&#xA;  // Parse a public key from a base58 string:&#xA;  {&#xA;    publicKey, err := solana.PublicKeyFromBase58(&#34;F8UvVsKnzWyp2nF8aDcqvQ2GVcRpqT91WDsAtvBKCMt9&#34;)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    _ = publicKey&#xA;  }&#xA;  // OR:&#xA;  {&#xA;    publicKey := solana.MustPublicKeyFromBase58(&#34;F8UvVsKnzWyp2nF8aDcqvQ2GVcRpqT91WDsAtvBKCMt9&#34;)&#xA;    _ = publicKey&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transfer Sol from one wallet to another wallet&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;fmt&#34;&#xA;  &#34;os&#34;&#xA;  &#34;time&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/programs/system&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  confirm &#34;github.com/gagliardetto/solana-go/rpc/sendAndConfirmTransaction&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/jsonrpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/ws&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/text&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  // Create a new RPC client:&#xA;  rpcClient := rpc.New(rpc.DevNet_RPC)&#xA;&#xA;  // Create a new WS client (used for confirming transactions)&#xA;  wsClient, err := ws.Connect(context.Background(), rpc.DevNet_WS)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  // Load the account that you will send funds FROM:&#xA;  accountFrom, err := solana.PrivateKeyFromSolanaKeygenFile(&#34;/path/to/.config/solana/id.json&#34;)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  fmt.Println(&#34;accountFrom private key:&#34;, accountFrom)&#xA;  fmt.Println(&#34;accountFrom public key:&#34;, accountFrom.PublicKey())&#xA;&#xA;  // The public key of the account that you will send sol TO:&#xA;  accountTo := solana.MustPublicKeyFromBase58(&#34;TODO&#34;)&#xA;  // The amount to send (in lamports);&#xA;  // 1 sol = 1000000000 lamports&#xA;  amount := uint64(3333)&#xA;&#xA;  if true {&#xA;    // Airdrop 1 sol to the account so it will have something to transfer:&#xA;    out, err := rpcClient.RequestAirdrop(&#xA;      context.TODO(),&#xA;      accountFrom.PublicKey(),&#xA;      solana.LAMPORTS_PER_SOL*1,&#xA;      rpc.CommitmentFinalized,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    fmt.Println(&#34;airdrop transaction signature:&#34;, out)&#xA;    time.Sleep(time.Second * 5)&#xA;  }&#xA;  //---------------&#xA;&#xA;  recent, err := rpcClient.GetLatestBlockhash(context.TODO(), rpc.CommitmentFinalized)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  tx, err := solana.NewTransaction(&#xA;    []solana.Instruction{&#xA;      system.NewTransferInstruction(&#xA;        amount,&#xA;        accountFrom.PublicKey(),&#xA;        accountTo,&#xA;      ).Build(),&#xA;    },&#xA;    recent.Value.Blockhash,&#xA;    solana.TransactionPayer(accountFrom.PublicKey()),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  _, err = tx.Sign(&#xA;    func(key solana.PublicKey) *solana.PrivateKey {&#xA;      if accountFrom.PublicKey().Equals(key) {&#xA;        return &amp;amp;accountFrom&#xA;      }&#xA;      return nil&#xA;    },&#xA;  )&#xA;  if err != nil {&#xA;    panic(fmt.Errorf(&#34;unable to sign transaction: %w&#34;, err))&#xA;  }&#xA;  spew.Dump(tx)&#xA;  // Pretty print the transaction:&#xA;  tx.EncodeTree(text.NewTreeEncoder(os.Stdout, &#34;Transfer SOL&#34;))&#xA;&#xA;  // Send transaction, and wait for confirmation:&#xA;  sig, err := confirm.SendAndConfirmTransaction(&#xA;    context.TODO(),&#xA;    rpcClient,&#xA;    wsClient,&#xA;    tx,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(sig)&#xA;&#xA;  // Or just send the transaction WITHOUT waiting for confirmation:&#xA;  // sig, err := rpcClient.SendTransactionWithOpts(&#xA;  //   context.TODO(),&#xA;  //   tx,&#xA;  //   false,&#xA;  //   rpc.CommitmentFinalized,&#xA;  // )&#xA;  // if err != nil {&#xA;  //   panic(err)&#xA;  // }&#xA;  // spew.Dump(sig)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RPC usage examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC Methods&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getaccountinfo&#34;&gt;GetAccountInfo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getbalance&#34;&gt;GetBalance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblock&#34;&gt;GetBlock&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblockcommitment&#34;&gt;GetBlockCommitment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblockheight&#34;&gt;GetBlockHeight&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblockproduction&#34;&gt;GetBlockProduction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblocktime&#34;&gt;GetBlockTime&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblocks&#34;&gt;GetBlocks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblockswithlimit&#34;&gt;GetBlocksWithLimit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getclusternodes&#34;&gt;GetClusterNodes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getconfirmedblock&#34;&gt;GetConfirmedBlock&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblock&#34;&gt;GetBlock&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getconfirmedblocks&#34;&gt;GetConfirmedBlocks&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblocks&#34;&gt;GetBlocks&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getconfirmedblockswithlimit&#34;&gt;GetConfirmedBlocksWithLimit&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getblockswithlimit&#34;&gt;GetBlocksWithLimit&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getconfirmedsignaturesforaddress2&#34;&gt;GetConfirmedSignaturesForAddress2&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getsignaturesforaddress&#34;&gt;GetSignaturesForAddress&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getconfirmedtransaction&#34;&gt;GetConfirmedTransaction&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gettransaction&#34;&gt;GetTransaction&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getepochinfo&#34;&gt;GetEpochInfo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getepochschedule&#34;&gt;GetEpochSchedule&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getfeecalculatorforblockhash&#34;&gt;GetFeeCalculatorForBlockhash&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--isblockhashvalid&#34;&gt;IsBlockhashValid&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getfeeformessage&#34;&gt;GetFeeForMessage&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getfeerategovernor&#34;&gt;GetFeeRateGovernor&lt;/a&gt; &lt;strong&gt;DEPRECATED&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getfees&#34;&gt;GetFees&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getfeeformessage&#34;&gt;GetFeeForMessage&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getfeeformessage&#34;&gt;GetFeeForMessage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getfirstavailableblock&#34;&gt;GetFirstAvailableBlock&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getgenesishash&#34;&gt;GetGenesisHash&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gethealth&#34;&gt;GetHealth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gethighestsnapshotslot&#34;&gt;GetHighestSnapshotSlot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getlatestblockhash&#34;&gt;GetLatestBlockhash&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getidentity&#34;&gt;GetIdentity&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getinflationgovernor&#34;&gt;GetInflationGovernor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getinflationrate&#34;&gt;GetInflationRate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getinflationreward&#34;&gt;GetInflationReward&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getlargestaccounts&#34;&gt;GetLargestAccounts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getleaderschedule&#34;&gt;GetLeaderSchedule&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getmaxretransmitslot&#34;&gt;GetMaxRetransmitSlot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getmaxshredinsertslot&#34;&gt;GetMaxShredInsertSlot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getminimumbalanceforrentexemption&#34;&gt;GetMinimumBalanceForRentExemption&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getmultipleaccounts&#34;&gt;GetMultipleAccounts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getprogramaccounts&#34;&gt;GetProgramAccounts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getrecentblockhash&#34;&gt;GetRecentBlockhash&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;To be used with &lt;strong&gt;solana v1.8&lt;/strong&gt;&lt;/li&gt; &#xA;     &lt;li&gt;For solana v1.9 or newer: &lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getlatestblockhash&#34;&gt;GetLatestBlockhash&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getrecentperformancesamples&#34;&gt;GetRecentPerformanceSamples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getrecentprioritizationfees&#34;&gt;GetRecentPrioritizationFees&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getsignaturestatuses&#34;&gt;GetSignatureStatuses&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getsignaturesforaddress&#34;&gt;GetSignaturesForAddress&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getslot&#34;&gt;GetSlot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getslotleader&#34;&gt;GetSlotLeader&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getslotleaders&#34;&gt;GetSlotLeaders&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getsnapshotslot&#34;&gt;GetSnapshotSlot&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;DEPRECATED: Please use &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gethighestsnapshotslot&#34;&gt;GetHighestSnapshotSlot&lt;/a&gt; instead&lt;/strong&gt; (This method is expected to be removed in &lt;strong&gt;solana-core v2.0&lt;/strong&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getstakeactivation&#34;&gt;GetStakeActivation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getsupply&#34;&gt;GetSupply&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gettokenaccountbalance&#34;&gt;GetTokenAccountBalance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gettokenaccountsbydelegate&#34;&gt;GetTokenAccountsByDelegate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gettokenaccountsbyowner&#34;&gt;GetTokenAccountsByOwner&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gettokenlargestaccounts&#34;&gt;GetTokenLargestAccounts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gettokensupply&#34;&gt;GetTokenSupply&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gettransaction&#34;&gt;GetTransaction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--gettransactioncount&#34;&gt;GetTransactionCount&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getversion&#34;&gt;GetVersion&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--getvoteaccounts&#34;&gt;GetVoteAccounts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--isblockhashvalid&#34;&gt;IsBlockhashValid&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--minimumledgerslot&#34;&gt;MinimumLedgerSlot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--requestairdrop&#34;&gt;RequestAirdrop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--sendtransaction&#34;&gt;SendTransaction&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--rpc--simulatetransaction&#34;&gt;SimulateTransaction&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;Websocket Subscriptions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--ws-subscriptions--accountsubscribe&#34;&gt;AccountSubscribe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--ws-subscriptions--logssubscribe&#34;&gt;LogsSubscribe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--ws-subscriptions--programsubscribe&#34;&gt;ProgramSubscribe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--ws-subscriptions--rootsubscribe&#34;&gt;RootSubscribe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--ws-subscriptions--signaturesubscribe&#34;&gt;SignatureSubscribe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--ws-subscriptions--slotsubscribe&#34;&gt;SlotSubscribe&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#index--ws-subscriptions--votesubscribe&#34;&gt;VoteSubscribe&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RPC Methods&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetAccountInfo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  bin &#34;github.com/gagliardetto/binary&#34;&#xA;  solana &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/programs/token&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.MainNetBeta_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  {&#xA;    pubKey := solana.MustPublicKeyFromBase58(&#34;SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&#34;) // serum token&#xA;    // basic usage&#xA;    resp, err := client.GetAccountInfo(&#xA;      context.TODO(),&#xA;      pubKey,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(resp)&#xA;&#xA;    var mint token.Mint&#xA;    // Account{}.Data.GetBinary() returns the *decoded* binary data&#xA;    // regardless the original encoding (it can handle them all).&#xA;    err = bin.NewDecoder(resp.GetBinary()).Decode(&amp;amp;mint)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(mint)&#xA;    // NOTE: The supply is mint.Supply, with the mint.Decimals:&#xA;    // mint.Supply = 9998022451607088&#xA;    // mint.Decimals = 6&#xA;    // ... which means that the supply is 9998022451.607088&#xA;  }&#xA;  {&#xA;    // Or you can use `GetAccountDataInto` which does all of the above in one call:&#xA;    pubKey := solana.MustPublicKeyFromBase58(&#34;SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&#34;) // serum token&#xA;    var mint token.Mint&#xA;    // Get the account, and decode its data into the provided mint object:&#xA;    err := client.GetAccountDataInto(&#xA;      context.TODO(),&#xA;      pubKey,&#xA;      &amp;amp;mint,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(mint)&#xA;  }&#xA;  {&#xA;    // // Or you can use `GetAccountDataBorshInto` which does all of the above in one call but for borsh-encoded data:&#xA;    // var metadata token_metadata.Metadata&#xA;    // // Get the account, and decode its data into the provided metadata object:&#xA;    // err := client.GetAccountDataBorshInto(&#xA;    //   context.TODO(),&#xA;    //   pubKey,&#xA;    //   &amp;amp;metadata,&#xA;    // )&#xA;    // if err != nil {&#xA;    //   panic(err)&#xA;    // }&#xA;    // spew.Dump(metadata)&#xA;  }&#xA;  {&#xA;    pubKey := solana.MustPublicKeyFromBase58(&#34;4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R&#34;) // raydium token&#xA;    // advanced usage&#xA;    resp, err := client.GetAccountInfoWithOpts(&#xA;      context.TODO(),&#xA;      pubKey,&#xA;      // You can specify more options here:&#xA;      &amp;amp;rpc.GetAccountInfoOpts{&#xA;        Encoding:   solana.EncodingBase64Zstd,&#xA;        Commitment: rpc.CommitmentFinalized,&#xA;        // You can get just a part of the account data by specify a DataSlice:&#xA;        // DataSlice: &amp;amp;rpc.DataSlice{&#xA;        //  Offset: pointer.ToUint64(0),&#xA;        //  Length: pointer.ToUint64(1024),&#xA;        // },&#xA;      },&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(resp)&#xA;&#xA;    var mint token.Mint&#xA;    err = bin.NewDecoder(resp.GetBinary()).Decode(&amp;amp;mint)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(mint)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetBalance&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;fmt&#34;&#xA;  &#34;math/big&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.MainNetBeta_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;7xLk17EQQ5KLDLDe44wCmupJKJjTGd8hs3eSVVhCx932&#34;)&#xA;  out, err := client.GetBalance(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;  spew.Dump(out.Value) // total lamports on the account; 1 sol = 1000000000 lamports&#xA;&#xA;  var lamportsOnAccount = new(big.Float).SetUint64(uint64(out.Value))&#xA;  // Convert lamports to sol:&#xA;  var solBalance = new(big.Float).Quo(lamportsOnAccount, new(big.Float).SetUint64(solana.LAMPORTS_PER_SOL))&#xA;&#xA;  // WARNING: this is not a precise conversion.&#xA;  fmt.Println(&#34;◎&#34;, solBalance.Text(&#39;f&#39;, 10))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetBlock&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(context.TODO(), rpc.CommitmentFinalized)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  {&#xA;    out, err := client.GetBlock(context.TODO(), uint64(example.Context.Slot))&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    // spew.Dump(out) // NOTE: This generates a lot of output.&#xA;    spew.Dump(len(out.Transactions))&#xA;  }&#xA;&#xA;  {&#xA;    includeRewards := false&#xA;    out, err := client.GetBlockWithOpts(&#xA;      context.TODO(),&#xA;      uint64(example.Context.Slot),&#xA;      // You can specify more options here:&#xA;      &amp;amp;rpc.GetBlockOpts{&#xA;        Encoding:   solana.EncodingBase64,&#xA;        Commitment: rpc.CommitmentFinalized,&#xA;        // Get only signatures:&#xA;        TransactionDetails: rpc.TransactionDetailsSignatures,&#xA;        // Exclude rewards:&#xA;        Rewards: &amp;amp;includeRewards,&#xA;      },&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetBlockCommitment&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(context.TODO(), rpc.CommitmentFinalized)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  out, err := client.GetBlockCommitment(&#xA;    context.TODO(),&#xA;    uint64(example.Context.Slot),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetBlockHeight&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetBlockHeight(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetBlockProduction&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  {&#xA;    out, err := client.GetBlockProduction(context.TODO())&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;  {&#xA;    out, err := client.GetBlockProductionWithOpts(&#xA;      context.TODO(),&#xA;      &amp;amp;rpc.GetBlockProductionOpts{&#xA;        Commitment: rpc.CommitmentFinalized,&#xA;        // Range: &amp;amp;rpc.SlotRangeRequest{&#xA;        //  FirstSlot: XXXXXX,&#xA;        //  Identity:  solana.MustPublicKeyFromBase58(&#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;),&#xA;        // },&#xA;      },&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetBlockTime&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;time&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  out, err := client.GetBlockTime(&#xA;    context.TODO(),&#xA;    uint64(example.Context.Slot),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;  spew.Dump(out.Time().Format(time.RFC1123))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetBlocks&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  endSlot := uint64(example.Context.Slot)&#xA;  out, err := client.GetBlocks(&#xA;    context.TODO(),&#xA;    uint64(example.Context.Slot-3),&#xA;    &amp;amp;endSlot,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetBlocksWithLimit&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  limit := uint64(4)&#xA;  out, err := client.GetBlocksWithLimit(&#xA;    context.TODO(),&#xA;    uint64(example.Context.Slot-10),&#xA;    limit,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetClusterNodes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetClusterNodes(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetConfirmedBlock&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/AlekSi/pointer&#34;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  { // deprecated and is going to be removed in solana-core v1.8&#xA;    out, err := client.GetConfirmedBlock(&#xA;      context.TODO(),&#xA;      uint64(example.Context.Slot),&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;  {&#xA;    slot := uint64(example.Context.Slot)&#xA;    out, err := client.GetConfirmedBlockWithOpts(&#xA;      context.TODO(),&#xA;      slot,&#xA;      // You can specify more options here:&#xA;      &amp;amp;rpc.GetConfirmedBlockOpts{&#xA;        Encoding:   solana.EncodingBase64,&#xA;        Commitment: rpc.CommitmentFinalized,&#xA;        // Get only signatures:&#xA;        TransactionDetails: rpc.TransactionDetailsSignatures,&#xA;        // Exclude rewards:&#xA;        Rewards: pointer.ToBool(false),&#xA;      },&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetConfirmedBlocks&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  {&#xA;    endSlot := uint64(example.Context.Slot)&#xA;    // deprecated and is going to be removed in solana-core v1.8&#xA;    out, err := client.GetConfirmedBlocks(&#xA;      context.TODO(),&#xA;      uint64(example.Context.Slot-3),&#xA;      &amp;amp;endSlot,&#xA;      rpc.CommitmentFinalized,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetConfirmedBlocksWithLimit&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  limit := uint64(3)&#xA;  { // deprecated and is going to be removed in solana-core v1.8&#xA;    out, err := client.GetConfirmedBlocksWithLimit(&#xA;      context.TODO(),&#xA;      uint64(example.Context.Slot-10),&#xA;      limit,&#xA;      rpc.CommitmentFinalized,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetConfirmedSignaturesForAddress2&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&#34;) // serum token&#xA;  {&#xA;    // deprecated and is going to be removed in solana-core v1.8&#xA;    out, err := client.GetConfirmedSignaturesForAddress2(&#xA;      context.TODO(),&#xA;      pubKey,&#xA;      // TODO:&#xA;      nil,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetConfirmedTransaction&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&#34;) // serum token&#xA;  // Let&#39;s get a valid transaction to use in the example:&#xA;  example, err := client.GetConfirmedSignaturesForAddress2(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    nil,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  out, err := client.GetConfirmedTransaction(&#xA;    context.TODO(),&#xA;    example[0].Signature,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetEpochInfo&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetEpochInfo(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetEpochSchedule&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetEpochSchedule(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetFeeCalculatorForBlockhash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  out, err := client.GetFeeCalculatorForBlockhash(&#xA;    context.TODO(),&#xA;    example.Value.Blockhash,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetFeeRateGovernor&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetFeeRateGovernor(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetFees&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetFees(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetFeeForMessage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetFeeForMessage(&#xA;    context.Background(),&#xA;    &#34;AQABAgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQAA&#34;,&#xA;    rpc.CommitmentProcessed,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(example)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetFirstAvailableBlock&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetFirstAvailableBlock(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetGenesisHash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetGenesisHash(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetHealth&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetHealth(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;  spew.Dump(out == rpc.HealthOk)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetHighestSnapshotSlot&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetHighestSnapshotSlot(&#xA;    context.Background(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(example)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetLatestBlockhash&lt;/h4&gt; &#xA;&lt;p&gt;NEW: This method is only available in solana-core v1.9 or newer. Please use getRecentBlockhash for solana-core v1.8&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  example, err := client.GetLatestBlockhash(&#xA;    context.Background(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(example)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetIdentity&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetIdentity(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetInflationGovernor&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetInflationGovernor(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetInflationRate&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetInflationRate(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetInflationReward&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;6dmNQ5jwLeLk5REvio1JcMshcbvkYMwy26sJ8pbkvStu&#34;)&#xA;&#xA;  out, err := client.GetInflationReward(&#xA;    context.TODO(),&#xA;    []solana.PublicKey{&#xA;      pubKey,&#xA;    },&#xA;    &amp;amp;rpc.GetInflationRewardOpts{&#xA;      Commitment: rpc.CommitmentFinalized,&#xA;    },&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetLargestAccounts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetLargestAccounts(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;    rpc.LargestAccountsFilterCirculating,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetLeaderSchedule&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetLeaderSchedule(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out) // NOTE: this creates a lot of output&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetMaxRetransmitSlot&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetMaxRetransmitSlot(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetMaxShredInsertSlot&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetMaxShredInsertSlot(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetMinimumBalanceForRentExemption&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  dataSize := uint64(1024 * 9)&#xA;  out, err := client.GetMinimumBalanceForRentExemption(&#xA;    context.TODO(),&#xA;    dataSize,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetMultipleAccounts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.MainNetBeta_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  {&#xA;    out, err := client.GetMultipleAccounts(&#xA;      context.TODO(),&#xA;      solana.MustPublicKeyFromBase58(&#34;SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&#34;),  // serum token&#xA;      solana.MustPublicKeyFromBase58(&#34;4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R&#34;), // raydium token&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;  {&#xA;    out, err := client.GetMultipleAccountsWithOpts(&#xA;      context.TODO(),&#xA;      []solana.PublicKey{solana.MustPublicKeyFromBase58(&#34;SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&#34;), // serum token&#xA;        solana.MustPublicKeyFromBase58(&#34;4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R&#34;), // raydium token&#xA;      },&#xA;      &amp;amp;rpc.GetMultipleAccountsOpts{&#xA;        Encoding:   solana.EncodingBase64Zstd,&#xA;        Commitment: rpc.CommitmentFinalized,&#xA;        // You can get just a part of the account data by specify a DataSlice:&#xA;        // DataSlice: &amp;amp;rpc.DataSlice{&#xA;        //  Offset: pointer.ToUint64(0),&#xA;        //  Length: pointer.ToUint64(1024),&#xA;        // },&#xA;      },&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetProgramAccounts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetProgramAccounts(&#xA;    context.TODO(),&#xA;    solana.MustPublicKeyFromBase58(&#34;metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s&#34;),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(len(out))&#xA;  spew.Dump(out) // NOTE: this can generate a lot of output&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetRecentBlockhash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  // DEPRECATED: This method is only available in solana-core v1.8 or older. Please use getLatestBlockhash for solana-core v1.9 or newer.&#xA;  recent, err := client.GetRecentBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(recent)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetRecentPerformanceSamples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  limit := uint(3)&#xA;  out, err := client.GetRecentPerformanceSamples(&#xA;    context.TODO(),&#xA;    &amp;amp;limit,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetRecentPrioritizationFees&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetRecentPrioritizationFees(&#xA;    context.TODO(),&#xA;    []solana.PublicKey{&#xA;      solana.MustPublicKeyFromBase58(&#34;q5BgreVhTyBH1QCeriVb7kQYEPneanFXPLjvyjdf8M3&#34;),&#xA;    },&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetSignatureStatuses&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetSignatureStatuses(&#xA;    context.TODO(),&#xA;    true,&#xA;    // All the transactions you want the get the status for:&#xA;    solana.MustSignatureFromBase58(&#34;2CwH8SqVZWFa1EvsH7vJXGFors1NdCuWJ7Z85F8YqjCLQ2RuSHQyeGKkfo1Tj9HitSTeLoMWnxpjxF2WsCH8nGWh&#34;),&#xA;    solana.MustSignatureFromBase58(&#34;5YJHZPeHZuZjhunBc1CCB1NDRNf2tTJNpdb3azGsR7PfyEncCDhr95wG8EWrvjNXBc4wCKixkheSbCxoC2NCG3X7&#34;),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetSignaturesForAddress&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetSignaturesForAddress(&#xA;    context.TODO(),&#xA;    solana.MustPublicKeyFromBase58(&#34;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&#34;),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetSlot&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetSlot(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetSlotLeader&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetSlotLeader(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetSlotLeaders&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  recent, err := client.GetLatestBlockhash(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  out, err := client.GetSlotLeaders(&#xA;    context.TODO(),&#xA;    uint64(recent.Context.Slot),&#xA;    10,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetSnapshotSlot&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetSnapshotSlot(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetStakeActivation&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;EW2p7QCJNHMVj5nQCcW7Q2BDETtNBXn68FyucU4RCjvb&#34;)&#xA;  out, err := client.GetStakeActivation(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    rpc.CommitmentFinalized,&#xA;    nil,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetSupply&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetSupply(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetTokenAccountBalance&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;EzK5qLWhftu8Z2znVa5fozVtobbjhd8Gdu9hQHpC8bec&#34;)&#xA;  out, err := client.GetTokenAccountBalance(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetTokenAccountsByDelegate&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;AfkALUPjQp8R1rUwE6KhT38NuTYWCncwwHwcJu7UtAfV&#34;)&#xA;  out, err := client.GetTokenAccountsByDelegate(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    &amp;amp;rpc.GetTokenAccountsConfig{&#xA;      Mint: solana.MustPublicKeyFromBase58(&#34;So11111111111111111111111111111111111111112&#34;),&#xA;    },&#xA;    nil,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetTokenAccountsByOwner&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  bin &#34;github.com/gagliardetto/binary&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/programs/token&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;7HZaCWazgTuuFuajxaaxGYbGnyVKwxvsJKue1W4Nvyro&#34;)&#xA;  out, err := client.GetTokenAccountsByOwner(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    &amp;amp;rpc.GetTokenAccountsConfig{&#xA;      Mint: solana.WrappedSol.ToPointer(),&#xA;    },&#xA;    &amp;amp;rpc.GetTokenAccountsOpts{&#xA;      Encoding: solana.EncodingBase64Zstd,&#xA;    },&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;&#xA;  {&#xA;    tokenAccounts := make([]token.Account, 0)&#xA;    for _, rawAccount := range out.Value {&#xA;      var tokAcc token.Account&#xA;&#xA;      data := rawAccount.Account.Data.GetBinary()&#xA;      dec := bin.NewBinDecoder(data)&#xA;      err := dec.Decode(&amp;amp;tokAcc)&#xA;      if err != nil {&#xA;        panic(err)&#xA;      }&#xA;      tokenAccounts = append(tokenAccounts, tokAcc)&#xA;    }&#xA;    spew.Dump(tokenAccounts)&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetTokenLargestAccounts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.MainNetBeta_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&#34;) // serum token&#xA;  out, err := client.GetTokenLargestAccounts(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetTokenSupply&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.MainNetBeta_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt&#34;) // serum token&#xA;  out, err := client.GetTokenSupply(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetTransaction&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  txSig := solana.MustSignatureFromBase58(&#34;4bjVLV1g9SAfv7BSAdNnuSPRbSscADHFe4HegL6YVcuEBMY83edLEvtfjE4jfr6rwdLwKBQbaFiGgoLGtVicDzHq&#34;)&#xA;  {&#xA;    out, err := client.GetTransaction(&#xA;      context.TODO(),&#xA;      txSig,&#xA;      &amp;amp;rpc.GetTransactionOpts{&#xA;        Encoding: solana.EncodingBase64,&#xA;      },&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;    spew.Dump(out.Transaction.GetBinary())&#xA;&#xA;    decodedTx, err := solana.TransactionFromDecoder(bin.NewBinDecoder(out.Transaction.GetBinary()))&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(decodedTx)&#xA;  }&#xA;  {&#xA;    out, err := client.GetTransaction(&#xA;      context.TODO(),&#xA;      txSig,&#xA;      nil,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(out)&#xA;    spew.Dump(out.Transaction.GetParsedTransaction())&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetTransactionCount&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetTransactionCount(&#xA;    context.TODO(),&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetVersion&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetVersion(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; GetVoteAccounts&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.GetVoteAccounts(&#xA;    context.TODO(),&#xA;    &amp;amp;rpc.GetVoteAccountsOpts{&#xA;      VotePubkey: solana.MustPublicKeyFromBase58(&#34;vot33MHDqT6nSwubGzqtc6m16ChcUywxV7tNULF19Vu&#34;),&#xA;    },&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; IsBlockhashValid&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;  &#34;fmt&#34;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.MainNetBeta_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  blockHash := solana.MustHashFromBase58(&#34;J7rBdM6AecPDEZp8aPq5iPSNKVkU5Q76F3oAV4eW5wsW&#34;)&#xA;  out, err := client.IsBlockhashValid(&#xA;    context.TODO(),&#xA;    blockHash,&#xA;    rpc.CommitmentFinalized,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;  spew.Dump(out.Value) // true or false&#xA;&#xA;  fmt.Println(&#34;is blockhash valid:&#34;, out.Value)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; MinimumLedgerSlot&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  out, err := client.MinimumLedgerSlot(&#xA;    context.TODO(),&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; RequestAirdrop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  endpoint := rpc.TestNet_RPC&#xA;  client := rpc.New(endpoint)&#xA;&#xA;  amount := solana.LAMPORTS_PER_SOL // 1 sol&#xA;  pubKey := solana.MustPublicKeyFromBase58(&#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;)&#xA;  out, err := client.RequestAirdrop(&#xA;    context.TODO(),&#xA;    pubKey,&#xA;    amount,&#xA;    &#34;&#34;,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  spew.Dump(out)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; SendTransaction&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;func main() {&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#rpc-methods&#34;&gt;RPC&lt;/a&gt; &amp;gt; SimulateTransaction&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;func main() {&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Websocket Subscriptions&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;WS Subscriptions&lt;/a&gt; &amp;gt; AccountSubscribe&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/ws&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  ctx := context.Background()&#x9;&#xA;  client, err := ws.Connect(context.Background(), rpc.MainNetBeta_WS)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  program := solana.MustPublicKeyFromBase58(&#34;9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin&#34;) // serum&#xA;&#xA;  {&#xA;    sub, err := client.AccountSubscribe(&#xA;      program,&#xA;      &#34;&#34;,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    defer sub.Unsubscribe()&#xA;&#xA;    for {&#xA;      got, err := sub.Recv(ctx)&#xA;      if err != nil {&#xA;        panic(err)&#xA;      }&#xA;      spew.Dump(got)&#xA;    }&#xA;  }&#xA;  if false {&#xA;    sub, err := client.AccountSubscribeWithOpts(&#xA;      program,&#xA;      &#34;&#34;,&#xA;      // You can specify the data encoding of the returned accounts:&#xA;      solana.EncodingBase64,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    defer sub.Unsubscribe()&#xA;&#xA;    for {&#xA;      got, err := sub.Recv(ctx)&#xA;      if err != nil {&#xA;        panic(err)&#xA;      }&#xA;      spew.Dump(got)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;WS Subscriptions&lt;/a&gt; &amp;gt; LogsSubscribe&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/ws&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  ctx := context.Background()&#x9;&#xA;  client, err := ws.Connect(context.Background(), rpc.MainNetBeta_WS)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  program := solana.MustPublicKeyFromBase58(&#34;9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin&#34;) // serum&#xA;&#xA;  {&#xA;    // Subscribe to log events that mention the provided pubkey:&#xA;    sub, err := client.LogsSubscribeMentions(&#xA;      program,&#xA;      rpc.CommitmentRecent,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    defer sub.Unsubscribe()&#xA;&#xA;    for {&#xA;      got, err := sub.Recv(ctx)&#xA;      if err != nil {&#xA;        panic(err)&#xA;      }&#xA;      spew.Dump(got)&#xA;    }&#xA;  }&#xA;  if false {&#xA;    // Subscribe to all log events:&#xA;    sub, err := client.LogsSubscribe(&#xA;      ws.LogsSubscribeFilterAll,&#xA;      rpc.CommitmentRecent,&#xA;    )&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    defer sub.Unsubscribe()&#xA;&#xA;    for {&#xA;      got, err := sub.Recv(ctx)&#xA;      if err != nil {&#xA;        panic(err)&#xA;      }&#xA;      spew.Dump(got)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;WS Subscriptions&lt;/a&gt; &amp;gt; ProgramSubscribe&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/ws&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  ctx := context.Background()&#x9;&#xA;  client, err := ws.Connect(context.Background(), rpc.MainNetBeta_WS)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  program := solana.MustPublicKeyFromBase58(&#34;TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA&#34;) // token&#xA;&#xA;  sub, err := client.ProgramSubscribeWithOpts(&#xA;    program,&#xA;    rpc.CommitmentRecent,&#xA;    solana.EncodingBase64Zstd,&#xA;    nil,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  defer sub.Unsubscribe()&#xA;&#xA;  for {&#xA;    got, err := sub.Recv(ctx)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(got)&#xA;&#xA;    decodedBinary := got.Value.Account.Data.GetBinary()&#xA;    if decodedBinary != nil {&#xA;      // spew.Dump(decodedBinary)&#xA;    }&#xA;&#xA;    // or if you requested solana.EncodingJSONParsed and it is supported:&#xA;    rawJSON := got.Value.Account.Data.GetRawJSON()&#xA;    if rawJSON != nil {&#xA;      // spew.Dump(rawJSON)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;WS Subscriptions&lt;/a&gt; &amp;gt; RootSubscribe&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/ws&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  ctx := context.Background()&#xA;  client, err := ws.Connect(context.Background(), rpc.TestNet_WS)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  sub, err := client.RootSubscribe()&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  for {&#xA;    got, err := sub.Recv(ctx)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(got)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;WS Subscriptions&lt;/a&gt; &amp;gt; SignatureSubscribe&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/ws&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  ctx := context.Background()&#xA;  client, err := ws.Connect(context.Background(), rpc.TestNet_WS)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  txSig := solana.MustSignatureFromBase58(&#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#34;)&#xA;&#xA;  sub, err := client.SignatureSubscribe(&#xA;    txSig,&#xA;    &#34;&#34;,&#xA;  )&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  defer sub.Unsubscribe()&#xA;&#xA;  for {&#xA;    got, err := sub.Recv(ctx)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(got)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;WS Subscriptions&lt;/a&gt; &amp;gt; SlotSubscribe&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/ws&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  ctx := context.Background()&#xA;  client, err := ws.Connect(context.Background(), rpc.TestNet_WS)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  sub, err := client.SlotSubscribe()&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  defer sub.Unsubscribe()&#xA;&#xA;  for {&#xA;    got, err := sub.Recv(ctx)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(got)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#contents&#34;&gt;index&lt;/a&gt; &amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/#websocket-subscriptions&#34;&gt;WS Subscriptions&lt;/a&gt; &amp;gt; VoteSubscribe&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;context&#34;&#xA;&#xA;  &#34;github.com/davecgh/go-spew/spew&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc&#34;&#xA;  &#34;github.com/gagliardetto/solana-go/rpc/ws&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  ctx := context.Background()&#xA;  client, err := ws.Connect(context.Background(), rpc.MainNetBeta_WS)&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;&#xA;  // NOTE: this subscription must be enabled by the node you&#39;re connecting to.&#xA;  // This subscription is disabled by default.&#xA;  sub, err := client.VoteSubscribe()&#xA;  if err != nil {&#xA;    panic(err)&#xA;  }&#xA;  defer sub.Unsubscribe()&#xA;&#xA;  for {&#xA;    got, err := sub.Recv(ctx)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    spew.Dump(got)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We encourage everyone to contribute, submit issues, PRs, discuss. Every kind of help is welcome.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gagliardetto/solana-go/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Gopher logo was originally created by Takuya Ueda (&lt;a href=&#34;https://twitter.com/tenntenn&#34;&gt;https://twitter.com/tenntenn&lt;/a&gt;). Licensed under the Creative Commons 3.0 Attributions license.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DeepSourceCorp/globstar</title>
    <updated>2025-03-03T01:31:28Z</updated>
    <id>tag:github.com,2025-03-03:/DeepSourceCorp/globstar</id>
    <link href="https://github.com/DeepSourceCorp/globstar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Globstar is a fast, feature-rich, and open-source static analysis toolkit for writing and running code checkers. Based on tree-sitter.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;./docs/public/img/globstar-promo-dark.png&#34;&gt; &#xA;  &lt;img alt=&#34;Globstar&#34; src=&#34;https://raw.githubusercontent.com/DeepSourceCorp/globstar/master/docs/public/img/globstar-promo-light.png&#34; height=&#34;250&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Globstar&lt;/strong&gt; is an open-source static analysis toolkit that enables developers and security engineers to write code analysis checkers and run them using a single, portable binary. Built with performance in mind, Globstar leverages &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;tree-sitter&lt;/a&gt; for powerful AST-based analysis while providing a simple, intuitive interface for writing checkers using the tree-sitter query language. You can start with the YAML interface for somple checkers, and graduate to the Go interface for sophisticated ones, which provides access to the tree-sitter AST, import and scope resolutionm, and complex logic.&lt;/p&gt; &#xA;&lt;p&gt;Write all your checker checkers in the &lt;code&gt;.globstar&lt;/code&gt; directory for your repository and use the &lt;code&gt;globstar check&lt;/code&gt; command to run them all across your codebase. It&#39;s that simple!&lt;/p&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Lightning-fast&lt;/strong&gt;: Written in Go, Globstar is designed to be fast and efficient, making it suitable for large codebases. It&#39;s distributed as a single binary, so you don&#39;t need to worry about dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Natively uses tree-sitter&lt;/strong&gt;: Write checkers using tree-sitter&#39;s &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/using-parsers/queries/1-syntax.html&#34;&gt;S-expressions&lt;/a&gt; instead of learning a custom DSL. For more sophisticated checkers, you can write them in Go using tree-sitter&#39;s Go bindings — with multi-file support, import and scope resolution, and more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;CI-friendly&lt;/strong&gt;: Run Globstar in any CI/CD pipeline by downloading the binary. There are no dependencies to install. It&#39;ll automatically detect the &lt;code&gt;.globstar&lt;/code&gt; directory and run all the checkers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Truly open-source&lt;/strong&gt;: The Globstar CLI and all its built-in checkers are distributed under the MIT license, so you can use it in your commercial projects without any restrictions. We&#39;re committed to ensuring that the project remains available long-term and actively involves the community in its development. No license gotchas!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSL https://get.globstar.dev | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will download the latest version of Globstar to &lt;code&gt;./bin/globstar&lt;/code&gt; in your current directory. You can also specify a different installation directory by setting the &lt;code&gt;BINDIR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSL https://get.globstar.dev | BINDIR=$HOME/.local/bin sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing it globally&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;d like to install Globstar globally, you can move the binary to a directory in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv ./bin/globstar /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once installed, you can run &lt;code&gt;globstar check&lt;/code&gt; in any repository to run all the checkers in the builtin checkers that come with Globstar along with all checkers defined in the repository&#39;s &lt;code&gt;.globstar&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Writing a checker&lt;/h3&gt; &#xA;&lt;p&gt;Create a new folder named &lt;code&gt;.globstar&lt;/code&gt; in your repository&#39;s root. This is where you&#39;ll write all your custom checkers. Each checker is defined in a separate YAML file, with the filename being the checker&#39;s identifier and tree-sitter&#39;s S-expression query defining the pattern to match.&lt;/p&gt; &#xA;&lt;p&gt;For example, here&#39;s a checker that detects potentially dangerous use of the &lt;code&gt;eval()&lt;/code&gt; function in Python:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# .globstar/dangerous_eval.yml&#xA;&#xA;language: python&#xA;name: dangerous_eval&#xA;message: &#34;Dangerous use of eval() detected. Use ast.literal_eval() or proper serialization instead.&#34;&#xA;category: security&#xA;severity: critical&#xA;&#xA;pattern: &amp;gt;&#xA;    (call&#xA;      function: (identifier) @func&#xA;      (#eq? @func &#34;eval&#34;)&#xA;      arguments: (argument_list&#xA;        [&#xA;          (identifier)&#xA;          (binary_operator)&#xA;        ]&#xA;      )&#xA;    ) @dangerous_eval&#xA;&#xA;filters:&#xA;  - pattern-inside: (function_definition)&#xA;&#xA;exclude:&#xA;  - &#34;test/**&#34;&#xA;  - &#34;**/*_test.py&#34;&#xA;&#xA;description: |&#xA;  Using eval() with untrusted input can lead to remote code execution vulnerabilities.&#xA;  Attackers can inject malicious Python code that will be executed by eval().&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://globstar.dev/guides/writing-yaml-checker&#34;&gt;this guide&lt;/a&gt; for a step-by-step explanation.&lt;/p&gt; &#xA;&lt;p&gt;A guide to writing tree-sitter queries can be found &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/using-parsers/queries/index.html&#34;&gt;here&lt;/a&gt;, along with &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/7-playground.html&#34;&gt;this interactive playground&lt;/a&gt;. Refer to the &lt;a href=&#34;https://globstar.dev/reference/checker-yaml&#34;&gt;Checker YAML Interface&lt;/a&gt; to learn about all the fields you can use in a checker definition.&lt;/p&gt; &#xA;&lt;h3&gt;Running in CI&lt;/h3&gt; &#xA;&lt;p&gt;To run Globstar in your CI/CD pipeline, simply download the binary and run the &lt;code&gt;globstar check&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example using GitHub Actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Run Globstar Analysis&#xA;&#xA;on:&#xA;  pull_request:&#xA;  push:&#xA;    branches: [ main ]&#xA;&#xA;jobs:&#xA;  analyze:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - uses: actions/checkout@v3&#xA;&#xA;      - name: Install Globstar&#xA;        run: curl -sSL https://get.globstar.dev | sh&#xA;&#xA;      - name: Run Globstar checks&#xA;        run: ./bin/globstar check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run all the checkers in the &lt;code&gt;.globstar&lt;/code&gt; directory and the built-in checkers that come with Globstar, and fail the workflow if any issues are found.&lt;/p&gt; &#xA;&lt;h2&gt;Why Globstar?&lt;/h2&gt; &#xA;&lt;p&gt;AppSec and DevOps teams have a ton of acquired knowledge about their codebases — from security vulnerabilities to performance bottlenecks. Systematically enforcing these learned patterns across the codebase is crucial to maintaining code quality and preventing security incidents.&lt;/p&gt; &#xA;&lt;p&gt;But creating custom checkers has always been hard — either you compromise with generic checkers or invest heavily in building custom tooling. At DeepSource, we&#39;ve spent 5+ years building and perfecting static analyzers that process millions of lines of code daily. This experience taught us exactly what teams need in a custom checkers engine — it has to be fast, easy to write, and not require a PhD in compilers.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s why we built Globstar. Instead of learning a new domain-specific language, you can write checkers using tree-sitter&#39;s familiar query syntax. If you need more power, write checkers in Go with full access to the AST.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve also made Globstar truly open source under the MIT license. Your tools shouldn&#39;t come with strings attached. You can use Globstar freely, modify it to your needs, and trust that it&#39;ll remain available. No license gotchas.&lt;/p&gt; &#xA;&lt;p&gt;And if you&#39;re using &lt;a href=&#34;https://deepsource.com&#34;&gt;DeepSource&lt;/a&gt;, Globstar will integrate seamlessly in the future — letting you run your custom checkers alongside our proprietary analyzers. But that&#39;s optional. Globstar stands on its own as a powerful, open-source tool for teams that need to enforce custom standards.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the full documentation for Globstar on the &lt;a href=&#34;https://globstar.dev&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>langgenius/dify-plugin-daemon</title>
    <updated>2025-03-03T01:31:28Z</updated>
    <id>tag:github.com,2025-03-03:/langgenius/dify-plugin-daemon</id>
    <link href="https://github.com/langgenius/dify-plugin-daemon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dify Plugin Daemon&lt;/h1&gt;</summary>
  </entry>
</feed>