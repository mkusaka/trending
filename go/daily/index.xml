<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-30T01:32:00Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>blampe/rreading-glasses</title>
    <updated>2025-06-30T01:32:00Z</updated>
    <id>tag:github.com,2025-06-30:/blampe/rreading-glasses</id>
    <link href="https://github.com/blampe/rreading-glasses" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Corrective lenses for curmudgeonly readars in your life&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] 👋 Hello and welcome to all the new users! Expect things to take a little longer than normal to load while the server is busy catching up to all the new libraries.&lt;/p&gt; &#xA; &lt;p&gt;I&#39;ve offered to take over maintenance of R——&amp;nbsp;and am still in communication with the team. Stay tuned.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;🤓 rreading-glasses &lt;a href=&#34;https://discord.gg/Xykjv87yYs&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1367649771237675078?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Corrective lenses for curmudgeonly readars in your life.&lt;/p&gt; &#xA;&lt;p&gt;tl;dr: &lt;a href=&#34;https://raw.githubusercontent.com/blampe/rreading-glasses/main/#usage&#34;&gt;follow these instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a drop-in replacement for R——&#39;s metadata service. It works with your existing R—— installation, it&#39;s backwards-compatible with your library, and it takes only seconds to enable or disable. You can use it permanently, or temporarily to help you add books the R—— service doesn&#39;t have yet.&lt;/p&gt; &#xA;&lt;p&gt;Unlike R——&#39;s proprietary service, this is much faster, handles large authors, has full coverage of G——R—— (or Hardcover!), and doesn&#39;t take months to load new books. A hosted instance is available at &lt;code&gt;https://api.bookinfo.pro&lt;/code&gt; but it can also be self-hosted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR;&#xA;    R[R——]-.-&amp;gt;M[official metadata];&#xA;    R--&amp;gt; api.bookinfo.pro;&#xA;&#xA;    classDef dotted stroke-dasharray:2,text-decoration:line-through;&#xA;    class M dotted;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This is not an official project and is still in progress. Reach out to me directly if you have questions or need help, please don&#39;t bother the R—— team.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;As of June 2025 there are ~1400 users of the shared instance. Here&#39;s what some of them have said so far:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Man this is wayyyyyy better than the inhouse metadata, thank you!!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is fucking awesome, thank you!!!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I just added this, and omg it fixed so many issues i&#39;ve been having! Thank you!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Holy shit can I just say this is so much better.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is fucking fantastic. Came across your link, thought hmm I bet this&#39;ll be crap. Reinstalled R, added your site, instantly found the 5 upcoming books that I couldn&#39;t. thank you!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Already had it pull in an extra book from an author that came out in September that wasn&#39;t originally found! Will definitely be a rreading glasses evangalist! haha&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;My arr instance has been switched over since yesterday, and it really has cleaned up that instance. I&#39;ve been getting a lot of use out of it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;it worked! thanks my man, my wife will be happy with this&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Thanks so much for putting this together again, I can&#39;t tell you how much I appreciate it!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] This &lt;strong&gt;will&lt;/strong&gt; modify your library&#39;s metadata, but it won&#39;t modify files on disk. In any case, &lt;strong&gt;please&lt;/strong&gt; back up your database &lt;em&gt;and confirm you know how to restore it&lt;/em&gt; before experimenting with this.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;http(s)://&amp;lt;your instance&amp;gt;/settings/development&lt;/code&gt;. This page isn&#39;t shown in the UI, so you&#39;ll need to manually enter the URL.&lt;/p&gt; &#xA;&lt;p&gt;Update &lt;code&gt;Metadata Provider Source&lt;/code&gt; with &lt;code&gt;https://api.bookinfo.pro&lt;/code&gt; if you&#39;d like to use the public instance. If you&#39;re self-hosting use your own address.&lt;/p&gt; &#xA;&lt;p&gt;Click &lt;code&gt;Save&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blampe/rreading-glasses/main/.github/config.png&#34; alt=&#34;/settings/development&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can now search and add authors or works not available on the official service.&lt;/p&gt; &#xA;&lt;p&gt;If at any point you want to revert to the official service, simply delete the &lt;code&gt;Metadata Provider Source&lt;/code&gt; and save your configuration again. Any works you added should be preserved.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Metadata is periodically refreshed and in some cases existing files may become unmapped (see note above about subtitles). You can correct this from &lt;code&gt;Library &amp;gt; Unmapped Files&lt;/code&gt;, or do a &lt;code&gt;Manual Import&lt;/code&gt; from an author&#39;s page.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Before / After&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blampe/rreading-glasses/main/.github/before.png&#34; alt=&#34;before&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/blampe/rreading-glasses/main/.github/after.png&#34; alt=&#34;after&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Self-hosting&lt;/h2&gt; &#xA;&lt;p&gt;An image is available at &lt;a href=&#34;https://hub.docker.com/r/blampe/rreading-glasses&#34;&gt;&lt;code&gt;blampe/rreading-glasses&lt;/code&gt;&lt;/a&gt;. It requires a Postgres backend (any version), and its flags currently look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: rreading-glasses serve --upstream=STRING --hardcover-auth=STRING [flags]&#xA;&#xA;Run an HTTP server.&#xA;&#xA;Flags:&#xA;  -h, --help                                             Show context-sensitive help.&#xA;&#xA;      --postgres-host=&#34;localhost&#34;                        Postgres host ($POSTGRES_HOST).&#xA;      --postgres-user=&#34;postgres&#34;                         Postgres user ($POSTGRES_USER).&#xA;      --postgres-password=STRING                         Postgres password ($POSTGRES_PASSWORD).&#xA;      --postgres-password-file=POSTGRES-PASSWORD-FILE    File with the Postgres password ($POSTGRES_PASSWORD_FILE).&#xA;      --postgres-port=5432                               Postgres port ($POSTGRES_PORT).&#xA;      --postgres-database=&#34;rreading-glasses&#34;             Postgres database to use ($POSTGRES_DATABASE).&#xA;      --verbose                                          increase log verbosity ($VERBOSE)&#xA;      --port=8788                                        Port to serve traffic on ($PORT).&#xA;      --rpm=60                                           Maximum upstream requests per minute ($RPM).&#xA;      --cookie=STRING                                    Cookie to use for upstream HTTP requests ($COOKIE).&#xA;      --cookie-file=COOKIE-FILE                          File with the Cookie to use for upstream HTTP requests ($COOKIE_FILE).&#xA;      --proxy=&#34;&#34;                                         HTTP proxy URL to use for upstream requests ($PROXY).&#xA;      --upstream=STRING                                  Upstream host (e.g. www.example.com) ($UPSTREAM).&#xA;      --hardcover-auth=STRING                            Hardcover Authorization header, e.g. &#39;Bearer ...&#39; ($HARDCOVER_AUTH)&#xA;      --hardcover-auth-file=HARDCOVER-AUTH-FILE          File containing the Hardcover Authorization header, e.g. &#39;Bearer ...&#39; ($HARDCOVER_AUTH_FILE)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Two docker compose example files are included as a reference: &lt;code&gt;docker-compose-gr.yml&lt;/code&gt; and &lt;code&gt;docker-compose-hardcover.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;G——R—— Cookie&lt;/h3&gt; &#xA;&lt;p&gt;When using the G——R—— image (&#34;latest&#34; tag) it&#39;s highly recommended that you set the &lt;code&gt;cookie&lt;/code&gt; flag for better performance, otherwise new author lookups will be throttled to 1 per minute. (These requests don&#39;t scrape metadata – they simply resolve canonical IDs. They are only needed the first time an author or book is fetched.)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a Private/Incognito window in your browser.&lt;/li&gt; &#xA; &lt;li&gt;Go to G——R——.&lt;/li&gt; &#xA; &lt;li&gt;Create an account or login to your existing account, checking the box to &lt;code&gt;Keep me signed in&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open Developer Tools (usually with &lt;code&gt;F12&lt;/code&gt;) and go to the &lt;code&gt;Network&lt;/code&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Refresh the page.&lt;/li&gt; &#xA; &lt;li&gt;Right click on the first row of &lt;code&gt;g——r——.com&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Copy&lt;/code&gt;/&lt;code&gt;Copy Value&lt;/code&gt; &amp;gt; &lt;code&gt;Copy as cURL&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Paste it into a plain text editor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl &#39;https://www.g——r——.com/&#39;&#xA;    ...&#xA;    -H &#39;Cookie: &amp;lt;you want everything in here&amp;gt;&#39;&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Grab everything after &lt;code&gt;Cookie:&lt;/code&gt; up to, but not including, the trailing &lt;code&gt;&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If the last character of the string is a semi-colon (&lt;code&gt;;&lt;/code&gt;), remove this as well.&lt;/li&gt; &#xA; &lt;li&gt;Use this as the &lt;code&gt;--cookie&lt;/code&gt; flag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example G——R—— Docker Compose Snippet&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;- --cookie=ccsid=foo; ...; lc-main=en_US&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Hardcover Auth&lt;/h3&gt; &#xA;&lt;p&gt;When using Hardcover you must set the &lt;code&gt;hardcover-auth&lt;/code&gt; parameter (this is optional with G——R——).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an account or login to &lt;a href=&#34;https://hardcover.app&#34;&gt;Hardcover&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click on User Icon and Settings.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;code&gt;Hardcover API&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy the entire token &lt;strong&gt;including&lt;/strong&gt; &lt;code&gt;Bearer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use this as the &lt;code&gt;--hardcover-auth&lt;/code&gt; flag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example Hardcover Docker Compose Snippet&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;- --hardcover-auth=Bearer Q123AbC...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Resource Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Resource requirements are minimal; a Raspberry Pi should suffice. Storage requirements will vary depending on the size of your library, but in most cases shouldn&#39;t exceed a few gigabytes for personal use. (The published image doesn&#39;t require any large data dumps and will gradually grow your database as it&#39;s queried over time.)&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;When in doubt, make sure you have the latest image pulled: &lt;code&gt;docker pull blampe/rreading-glasses:latest&lt;/code&gt; or &lt;code&gt;blampe/rreading-glasses:hardcover&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you suspect data inconsistencies, try removing R——&#39;s &lt;code&gt;cache.db&lt;/code&gt; file and then restart the app.&lt;/p&gt; &#xA;&lt;p&gt;You can also try deleting your Postgres database to ensure you don&#39;t have any bad data cached.&lt;/p&gt; &#xA;&lt;p&gt;If these steps don&#39;t resolve the problem, please create an issue!&lt;/p&gt; &#xA;&lt;h2&gt;Key differences&lt;/h2&gt; &#xA;&lt;p&gt;I have deviated slightly from the official service&#39;s behavior to make a couple of, in my opinion, quality of life improvements. These aren&#39;t due to technical limitations and can be changed, so I&#39;m eager to hear if people think these are an improvement or if it would be better to match the official behavior more exactly.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Titles no longer automatically include subtitles &lt;em&gt;unless&lt;/em&gt; it&#39;s part of a series, or if multiple books have the same primary title. This de-clutters the UI, cleans up the directory layout, and improves import matching but &lt;strong&gt;you may need to re-import some works with long subtitles&lt;/strong&gt;. I think the trade-off is worth it but others might disagree — let me know!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#34;best&#34; (original) edition is always preferred to make cover art more consistently high-quality. Additionally, books are no longer returned with every edition ever released, because that makes manual edition selection difficult to impossible. Instead, an alternative edition (e.g. translation) is only included once at least one user has searched for it. (This might change in the future to include all editions but de-duplicated by title.)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Details&lt;/h2&gt; &#xA;&lt;p&gt;This project implements an API-compatible, coalescing read-through cache for consumption by the R—— metadata client. It is not a fork of any prior work.&lt;/p&gt; &#xA;&lt;p&gt;The service is pluggable and can serve metadata from any number of sources: API clients, data dumps, OpenLibrary proxies, scrapers, or other means. The interface to implement is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Getter interface {&#xA;    GetWork(ctx context.Context, workID int64) (*WorkResource, error)&#xA;    GetAuthor(ctx context.Context, authorID int64) (*AuthorResource, error)&#xA;    GetBook(ctx context.Context, bookID int64) (*WorkResource, error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In other words, anything that understands how to map a G——R—— ID to a Resource can serve as a source of truth. This project then provides caching and API routes to make that source compatible with R——.&lt;/p&gt; &#xA;&lt;p&gt;There are currently two sources available: &lt;a href=&#34;https://hardcover.app&#34;&gt;Hardcover&lt;/a&gt; and G——R——. A summary of their differences is below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;G——R——&lt;/th&gt; &#xA;   &lt;th&gt;Hardcover&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Summary&lt;/td&gt; &#xA;   &lt;td&gt;A slightly faster provider which makes all of G——R—— available, including large authors and books not available by default in R——.&lt;/td&gt; &#xA;   &lt;td&gt;Slightly slower and makes &lt;em&gt;most&lt;/em&gt; of Hardcover&#39;s library available, as long as their metadata includes a G——R—— ID. This is a smaller data set, but it might be preferable due to having fewer &#34;junk&#34; books.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;New releases?&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Large authors?&lt;/td&gt; &#xA;   &lt;td&gt;Supported&lt;/td&gt; &#xA;   &lt;td&gt;Supported, but authors include only 20 (max) books by default for now. New books can be added by manually searching.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Source code&lt;/td&gt; &#xA;   &lt;td&gt;Public&lt;/td&gt; &#xA;   &lt;td&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Performance&lt;/td&gt; &#xA;   &lt;td&gt;3RPS (with query batching)&lt;/td&gt; &#xA;   &lt;td&gt;1RPS (with query batching)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stability&lt;/td&gt; &#xA;   &lt;td&gt;Stable. Nearly identical behavior to official R—— metadata.&lt;/td&gt; &#xA;   &lt;td&gt;Experimental and probably more appropriate for new libraries. ID mappings are likely to not exactly match with existing libraries. Series data likely to be incomplete&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hosted instance&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://api.bookinfo.pro&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Coming soon!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Self-hosted image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;blampe/rreading-glasses:latest&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;blampe/rreading-glasses:hardcover&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please consider &lt;a href=&#34;https://hardcover.app/supporter&#34;&gt;supporting&lt;/a&gt; Hardcover if you use them as your source. It&#39;s $5/month (or $50/year) and the work they are doing to break down the G——R—— monopoly is commendable.&lt;/p&gt; &#xA;&lt;p&gt;Postgres is used as a backend but only as a key-value store, unlike the official server which performs expensive joins in the request path. Additionally large authors (and books with many editions) are populated asynchronously. This allows the server to support arbitrarily large resources without issue.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This is primarily a personal project that fixes my own workflows. There are almost certainly edge cases I haven&#39;t accounted for, so contributions are very welcome!&lt;/p&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; (Prod) Add Cloudflare client for CDN invalidation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; (QOL) Ignore works/editions without publisher to cut down on self-published ebook slop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; (QOL) Update R—— client to send &lt;code&gt;Accept-Encoding: gzip&lt;/code&gt; headers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This software is provided &#34;as is&#34;, without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement.&lt;/p&gt; &#xA;&lt;p&gt;In no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.&lt;/p&gt; &#xA;&lt;p&gt;This software is intended for educational and informational purposes only. It is not intended to, and does not, constitute legal, financial, or professional advice of any kind. The user of this software assumes all responsibility for its use or misuse.&lt;/p&gt; &#xA;&lt;p&gt;The user is free to use, modify, and distribute the software for any purpose, subject to the above disclaimers and conditions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Dyneteq/reconya</title>
    <updated>2025-06-30T01:32:00Z</updated>
    <id>tag:github.com,2025-06-30:/Dyneteq/reconya</id>
    <link href="https://github.com/Dyneteq/reconya" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Network reconnaissance and asset discovery tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reconya&lt;/h1&gt; &#xA;&lt;p&gt;Network reconnaissance and asset discovery tool built with Go and React.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Dyneteq/reconya/master/screenshots/dashboard.png&#34; alt=&#34;Dashboard Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Reconya discovers and monitors devices on your network with real-time updates. Suitable for network administrators, security professionals, and home users.&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Network scanning with nmap integration&lt;/li&gt; &#xA; &lt;li&gt;Device identification (MAC addresses, vendor detection, hostnames)&lt;/li&gt; &#xA; &lt;li&gt;Real-time monitoring and event logging&lt;/li&gt; &#xA; &lt;li&gt;Web-based dashboard&lt;/li&gt; &#xA; &lt;li&gt;Device fingerprinting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Important Notice: Docker Implementation Status&lt;/h2&gt; &#xA;&lt;p&gt;⚠️ &lt;strong&gt;Docker networking has been moved to experimental status due to fundamental limitations.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The fundamental limitation is Docker&#39;s network architecture. Even with comprehensive MAC discovery methods, privileged mode, and enhanced capabilities, Docker containers cannot reliably access Layer 2 (MAC address) information across different network segments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For full functionality, including complete MAC address discovery, please use the local installation method below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker files have been moved to the &lt;code&gt;experimental/&lt;/code&gt; directory for those who want to experiment with containerized deployment, but local installation is the recommended approach.&lt;/p&gt; &#xA;&lt;h2&gt;Local Installation (Recommended)&lt;/h2&gt; &#xA;&lt;h3&gt;One-Command Installation&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to install RecoNya with all dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Dyneteq/reconya.git&#xA;cd reconya&#xA;npm run install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Detect your operating system (macOS, Windows, Debian, or Red Hat-based)&lt;/li&gt; &#xA; &lt;li&gt;Install all required dependencies (Go, Node.js, nmap)&lt;/li&gt; &#xA; &lt;li&gt;Configure nmap permissions for MAC address detection&lt;/li&gt; &#xA; &lt;li&gt;Set up the RecoNya application&lt;/li&gt; &#xA; &lt;li&gt;Install all Node.js dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;After installation, use these commands:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run start    # Start RecoNya&#xA;npm run stop     # Stop RecoNya  &#xA;npm run status   # Check service status&#xA;npm run uninstall # Uninstall RecoNya&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open your browser to: &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;br&gt; Default login: &lt;code&gt;admin&lt;/code&gt; / &lt;code&gt;password&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to install manually or the script doesn&#39;t work on your system:&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install Go&lt;/strong&gt; (1.21 or later): &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install Node.js&lt;/strong&gt; (18 or later): &lt;a href=&#34;https://nodejs.org/&#34;&gt;https://nodejs.org/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install nmap&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# macOS&#xA;brew install nmap&#xA;&#xA;# Ubuntu/Debian&#xA;sudo apt-get install nmap&#xA;&#xA;# RHEL/CentOS/Fedora&#xA;sudo yum install nmap  # or dnf install nmap&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grant nmap privileges&lt;/strong&gt; (for MAC address detection):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo chown root:admin $(which nmap)&#xA;sudo chmod u+s $(which nmap)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Setup &amp;amp; Run&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Dyneteq/reconya.git&#xA;cd reconya&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Setup backend:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd backend&#xA;cp .env.example .env&#xA;# Edit .env file to set your network range and credentials&#xA;go mod download&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Setup frontend:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ../frontend&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Start the application:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Terminal 1 - Backend:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd backend&#xA;go run ./cmd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Terminal 2 - Frontend:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd frontend&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Access the application:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open your browser to: &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default login: &lt;code&gt;admin&lt;/code&gt; / &lt;code&gt;password&lt;/code&gt; (check your &lt;code&gt;.env&lt;/code&gt; file for custom credentials)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Login with your credentials (default: &lt;code&gt;admin&lt;/code&gt; / &lt;code&gt;password&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Devices will automatically appear as they&#39;re discovered on your network&lt;/li&gt; &#xA; &lt;li&gt;Click on devices to see details including: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MAC addresses and vendor information&lt;/li&gt; &#xA;   &lt;li&gt;Open ports and running services&lt;/li&gt; &#xA;   &lt;li&gt;Operating system fingerprints&lt;/li&gt; &#xA;   &lt;li&gt;Device screenshots (for web services)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use the network map to visualize device locations&lt;/li&gt; &#xA; &lt;li&gt;Monitor the event log for network activity&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Edit the &lt;code&gt;backend/.env&lt;/code&gt; file to customize:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;LOGIN_USERNAME=admin&#xA;LOGIN_PASSWORD=your_secure_password&#xA;NETWORK_RANGE=&#34;192.168.1.0/24&#34;  # Set to your actual network range&#xA;DATABASE_NAME=&#34;reconya-dev&#34;&#xA;JWT_SECRET_KEY=&#34;your_jwt_secret&#34;&#xA;SQLITE_PATH=&#34;data/reconya-dev.db&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backend&lt;/strong&gt;: Go API with SQLite database (Port 3008)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Frontend&lt;/strong&gt;: React/TypeScript with Bootstrap (Port 3000)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scanning&lt;/strong&gt;: Multi-strategy network discovery with nmap integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database&lt;/strong&gt;: SQLite for device storage and event logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scanning Algorithm&lt;/h2&gt; &#xA;&lt;h3&gt;Discovery Process&lt;/h3&gt; &#xA;&lt;p&gt;Reconya uses a multi-layered scanning approach that combines nmap integration with native Go implementations:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Network Discovery (Every 30 seconds)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple nmap strategies with automatic fallback&lt;/li&gt; &#xA; &lt;li&gt;ICMP ping sweeps (privileged mode)&lt;/li&gt; &#xA; &lt;li&gt;TCP connect probes to common ports (fallback)&lt;/li&gt; &#xA; &lt;li&gt;ARP table lookups for MAC address resolution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Device Identification&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IEEE OUI database for vendor identification&lt;/li&gt; &#xA; &lt;li&gt;Multi-method hostname resolution (DNS, NetBIOS, mDNS)&lt;/li&gt; &#xA; &lt;li&gt;Operating system fingerprinting via nmap&lt;/li&gt; &#xA; &lt;li&gt;Device type classification based on ports and vendors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Port Scanning (Background workers)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Top 100 ports scan for active services&lt;/li&gt; &#xA; &lt;li&gt;Service detection and banner grabbing&lt;/li&gt; &#xA; &lt;li&gt;Concurrent scanning with worker pool pattern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Web Service Detection&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic discovery of HTTP/HTTPS services&lt;/li&gt; &#xA; &lt;li&gt;Screenshot capture using headless Chrome&lt;/li&gt; &#xA; &lt;li&gt;Service metadata extraction (titles, server headers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Common Issues&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation problems&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run status&lt;/code&gt; to check what&#39;s missing&lt;/li&gt; &#xA; &lt;li&gt;Ensure you have Node.js 14+ installed&lt;/li&gt; &#xA; &lt;li&gt;Try running &lt;code&gt;npm run install&lt;/code&gt; again&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;No devices found&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Verify your network range is correct in &lt;code&gt;backend/.env&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run status&lt;/code&gt; to check if nmap is installed and configured&lt;/li&gt; &#xA; &lt;li&gt;Check that you&#39;re on the same network segment as target devices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Services won&#39;t start&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run stop&lt;/code&gt; to kill any stuck processes&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;code&gt;npm run status&lt;/code&gt; for dependency issues&lt;/li&gt; &#xA; &lt;li&gt;Ensure ports 3000 and 3008 are available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Missing MAC addresses&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run status&lt;/code&gt; to verify nmap permissions&lt;/li&gt; &#xA; &lt;li&gt;MAC addresses only visible on same network segment&lt;/li&gt; &#xA; &lt;li&gt;Some devices may not respond to ARP requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Permission denied errors&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The installer should handle nmap permissions automatically&lt;/li&gt; &#xA; &lt;li&gt;If issues persist, manually run: &lt;code&gt;sudo chmod u+s $(which nmap)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Services keep crashing&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check if dependencies are properly installed with &lt;code&gt;npm run status&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Verify your &lt;code&gt;.env&lt;/code&gt; configuration is correct&lt;/li&gt; &#xA; &lt;li&gt;Try stopping and restarting: &lt;code&gt;npm run stop &amp;amp;&amp;amp; npm run start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Uninstalling RecoNya&lt;/h2&gt; &#xA;&lt;p&gt;To completely remove RecoNya and optionally its dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The uninstall process will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stop any running RecoNya processes&lt;/li&gt; &#xA; &lt;li&gt;Remove application files and data&lt;/li&gt; &#xA; &lt;li&gt;Remove nmap setuid permissions&lt;/li&gt; &#xA; &lt;li&gt;Optionally remove system dependencies (Go, Node.js, nmap)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You&#39;ll be asked for confirmation before removing system dependencies since they might be used by other applications.&lt;/p&gt; &#xA;&lt;h2&gt;Experimental Docker Support&lt;/h2&gt; &#xA;&lt;p&gt;Docker files are available in the &lt;code&gt;experimental/&lt;/code&gt; directory but are not recommended due to network isolation limitations that prevent proper MAC address discovery. Use local installation for full functionality.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Create feature branch&lt;/li&gt; &#xA; &lt;li&gt;Make changes and test&lt;/li&gt; &#xA; &lt;li&gt;Submit pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Creative Commons Attribution-NonCommercial 4.0 International License. Commercial use requires permission.&lt;/p&gt; &#xA;&lt;h2&gt;🌟 Please check my other projects!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://tududi.com&#34;&gt;Tududi&lt;/a&gt;&lt;/strong&gt; - Self-hosted task management with hierarchical organization, multi-language support, and Telegram integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://breachharbor.com&#34;&gt;BreachHarbor&lt;/a&gt;&lt;/strong&gt; - Cybersecurity suite for digital asset protection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://hevetra.com&#34;&gt;Hevetra&lt;/a&gt;&lt;/strong&gt; - Digital tracking for child health milestones&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>