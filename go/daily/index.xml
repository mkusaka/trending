<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-06T01:30:58Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grafana/mcp-grafana</title>
    <updated>2025-04-06T01:30:58Z</updated>
    <id>tag:github.com,2025-04-06:/grafana/mcp-grafana</id>
    <link href="https://github.com/grafana/mcp-grafana" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP server for Grafana&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Grafana MCP server&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://modelcontextprotocol.io/&#34;&gt;Model Context Protocol&lt;/a&gt; (MCP) server for Grafana.&lt;/p&gt; &#xA;&lt;p&gt;This provides access to your Grafana instance and the surrounding ecosystem.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search for dashboards&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get dashboard by UID&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List and fetch datasource information&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Query datasources &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prometheus&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Loki &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Log queries&lt;/li&gt; &#xA;     &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Metric queries&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Tempo&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pyroscope&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Query Prometheus metadata &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Metric metadata&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Metric names&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Label names&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Label values&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Query Loki metadata &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Label names&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Label values&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stats&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search, create, update and close incidents&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Start Sift investigations and view the results&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Alerting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List and fetch alert rule information&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Get alert rule statuses (firing/normal/error/etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create and change alert rules&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; List contact points&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Create and change contact points&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Access Grafana OnCall functionality &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List and manage schedules&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get shift details&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get current on-call users&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List teams and users&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; List alert groups&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The list of tools is configurable, so you can choose which tools you want to make available to the MCP client. This is useful if you don&#39;t use certain functionality or if you don&#39;t want to take up too much of the context window.&lt;/p&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;search_dashboards&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search&lt;/td&gt; &#xA;   &lt;td&gt;Search for dashboards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_dashboard_by_uid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dashboard&lt;/td&gt; &#xA;   &lt;td&gt;Get a dashboard by uid&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_datasources&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Datasources&lt;/td&gt; &#xA;   &lt;td&gt;List datasources&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_datasource_by_uid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Datasources&lt;/td&gt; &#xA;   &lt;td&gt;Get a datasource by uid&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_datasource_by_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Datasources&lt;/td&gt; &#xA;   &lt;td&gt;Get a datasource by name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;query_prometheus&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prometheus&lt;/td&gt; &#xA;   &lt;td&gt;Execute a query against a Prometheus datasource&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_prometheus_metric_metadata&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prometheus&lt;/td&gt; &#xA;   &lt;td&gt;List metric metadata&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_prometheus_metric_names&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prometheus&lt;/td&gt; &#xA;   &lt;td&gt;List available metric names&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_prometheus_label_names&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prometheus&lt;/td&gt; &#xA;   &lt;td&gt;List label names matching a selector&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_prometheus_label_values&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prometheus&lt;/td&gt; &#xA;   &lt;td&gt;List values for a specific label&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_incidents&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incident&lt;/td&gt; &#xA;   &lt;td&gt;List incidents in Grafana Incident&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;create_incident&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incident&lt;/td&gt; &#xA;   &lt;td&gt;Create an incident in Grafana Incident&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;add_activity_to_incident&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incident&lt;/td&gt; &#xA;   &lt;td&gt;Add an activity item to an incident in Grafana Incident&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resolve_incident&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Incident&lt;/td&gt; &#xA;   &lt;td&gt;Resolve an incident in Grafana Incident&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;query_loki_logs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Loki&lt;/td&gt; &#xA;   &lt;td&gt;Query and retrieve logs using LogQL (either log or metric queries)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_loki_label_names&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Loki&lt;/td&gt; &#xA;   &lt;td&gt;List all available label names in logs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_loki_label_values&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Loki&lt;/td&gt; &#xA;   &lt;td&gt;List values for a specific log label&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;query_loki_stats&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Loki&lt;/td&gt; &#xA;   &lt;td&gt;Get statistics about log streams&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_alert_rules&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Alerting&lt;/td&gt; &#xA;   &lt;td&gt;List alert rules&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_alert_rule_by_uid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Alerting&lt;/td&gt; &#xA;   &lt;td&gt;Get alert rule by UID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_oncall_schedules&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OnCall&lt;/td&gt; &#xA;   &lt;td&gt;List schedules from Grafana OnCall&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_oncall_shift&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OnCall&lt;/td&gt; &#xA;   &lt;td&gt;Get details for a specific OnCall shift&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_current_oncall_users&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OnCall&lt;/td&gt; &#xA;   &lt;td&gt;Get users currently on-call for a specific schedule&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_oncall_teams&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OnCall&lt;/td&gt; &#xA;   &lt;td&gt;List teams from Grafana OnCall&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;list_oncall_users&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OnCall&lt;/td&gt; &#xA;   &lt;td&gt;List users from Grafana OnCall&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a service account in Grafana with enough permissions to use the tools you want to use, generate a service account token, and copy it to the clipboard for use in the configuration file. Follow the &lt;a href=&#34;https://grafana.com/docs/grafana/latest/administration/service-accounts/&#34;&gt;Grafana documentation&lt;/a&gt; for details.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the latest release of &lt;code&gt;mcp-grafana&lt;/code&gt; from the &lt;a href=&#34;https://github.com/grafana/mcp-grafana/releases&#34;&gt;releases page&lt;/a&gt; and place it in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you have a Go toolchain installed you can also build and install it from source, using the &lt;code&gt;GOBIN&lt;/code&gt; environment variable to specify the directory where the binary should be installed. This should also be in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GOBIN=&#34;$HOME/go/bin&#34; go install github.com/grafana/mcp-grafana/cmd/mcp-grafana@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the server configuration to your client configuration file. For example, for Claude Desktop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;grafana&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-grafana&#34;,&#xA;      &#34;args&#34;: [],&#xA;      &#34;env&#34;: {&#xA;        &#34;GRAFANA_URL&#34;: &#34;http://localhost:3000&#34;,&#xA;        &#34;GRAFANA_API_KEY&#34;: &#34;&amp;lt;your service account token&amp;gt;&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: if you see &lt;code&gt;Error: spawn mcp-grafana ENOENT&lt;/code&gt; in Claude Desktop, you need to specify the full path to &lt;code&gt;mcp-grafana&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please open an issue or submit a pull request if you have any suggestions or improvements.&lt;/p&gt; &#xA;&lt;p&gt;This project is written in Go. Install Go following the instructions for your platform.&lt;/p&gt; &#xA;&lt;p&gt;To run the server, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run the server using the SSE transport inside Docker. To build the image, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make build-image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to run the image, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm -p 8000:8000 mcp-grafana:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;There are three types of tests available:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unit Tests (no external dependencies required):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test-unit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run unit tests with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Integration Tests (requires docker containers to be up and running):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test-integration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Cloud Tests (requires cloud Grafana instance and credentials):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test-cloud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Cloud tests are automatically configured in CI. For local development, you&#39;ll need to set up your own Grafana Cloud instance and credentials.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;More comprehensive integration tests will require a Grafana instance to be running locally on port 3000; you can start one with Docker Compose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The integration tests can be run with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re adding more tools, please add integration tests for them. The existing tests should be a good starting point.&lt;/p&gt; &#xA;&lt;h3&gt;Linting&lt;/h3&gt; &#xA;&lt;p&gt;To lint the code, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/grafana/mcp-grafana/main/LICENSE&#34;&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>