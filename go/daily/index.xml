<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-03T01:35:50Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fatih/color</title>
    <updated>2022-09-03T01:35:50Z</updated>
    <id>tag:github.com,2022-09-03:/fatih/color</id>
    <link href="https://github.com/fatih/color" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Color package for Go (golang)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;color &lt;a href=&#34;https://github.com/fatih/color/actions&#34;&gt;&lt;img src=&#34;https://github.com/fatih/color/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/fatih/color&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/fatih/color&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Color lets you use colorized outputs in terms of &lt;a href=&#34;http://en.wikipedia.org/wiki/ANSI_escape_code#Colors&#34;&gt;ANSI Escape Codes&lt;/a&gt; in Go (Golang). It has support for Windows too! The API can be used in several ways, pick one that suits you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/438920/96832689-03b3e000-13f4-11eb-9803-46f4c4de3406.jpg&#34; alt=&#34;Color&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/fatih/color&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Standard colors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Print with default helper functions&#xA;color.Cyan(&#34;Prints text in cyan.&#34;)&#xA;&#xA;// A newline will be appended automatically&#xA;color.Blue(&#34;Prints %s in blue.&#34;, &#34;text&#34;)&#xA;&#xA;// These are using the default foreground colors&#xA;color.Red(&#34;We have red&#34;)&#xA;color.Magenta(&#34;And many others ..&#34;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mix and reuse colors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a new color object&#xA;c := color.New(color.FgCyan).Add(color.Underline)&#xA;c.Println(&#34;Prints cyan text with an underline.&#34;)&#xA;&#xA;// Or just add them to New()&#xA;d := color.New(color.FgCyan, color.Bold)&#xA;d.Printf(&#34;This prints bold cyan %s\n&#34;, &#34;too!.&#34;)&#xA;&#xA;// Mix up foreground and background colors, create new mixes!&#xA;red := color.New(color.FgRed)&#xA;&#xA;boldRed := red.Add(color.Bold)&#xA;boldRed.Println(&#34;This will print text in bold red.&#34;)&#xA;&#xA;whiteBackground := red.Add(color.BgWhite)&#xA;whiteBackground.Println(&#34;Red text with white background.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use your own output (io.Writer)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Use your own io.Writer output&#xA;color.New(color.FgBlue).Fprintln(myWriter, &#34;blue color!&#34;)&#xA;&#xA;blue := color.New(color.FgBlue)&#xA;blue.Fprint(writer, &#34;This will print text in blue.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom print functions (PrintFunc)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a custom print function for convenience&#xA;red := color.New(color.FgRed).PrintfFunc()&#xA;red(&#34;Warning&#34;)&#xA;red(&#34;Error: %s&#34;, err)&#xA;&#xA;// Mix up multiple attributes&#xA;notice := color.New(color.Bold, color.FgGreen).PrintlnFunc()&#xA;notice(&#34;Don&#39;t forget this...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom fprint functions (FprintFunc)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;blue := color.New(color.FgBlue).FprintfFunc()&#xA;blue(myWriter, &#34;important notice: %s&#34;, stars)&#xA;&#xA;// Mix up with multiple attributes&#xA;success := color.New(color.Bold, color.FgGreen).FprintlnFunc()&#xA;success(myWriter, &#34;Don&#39;t forget this...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Insert into noncolor strings (SprintFunc)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create SprintXxx functions to mix strings with other non-colorized strings:&#xA;yellow := color.New(color.FgYellow).SprintFunc()&#xA;red := color.New(color.FgRed).SprintFunc()&#xA;fmt.Printf(&#34;This is a %s and this is %s.\n&#34;, yellow(&#34;warning&#34;), red(&#34;error&#34;))&#xA;&#xA;info := color.New(color.FgWhite, color.BgGreen).SprintFunc()&#xA;fmt.Printf(&#34;This %s rocks!\n&#34;, info(&#34;package&#34;))&#xA;&#xA;// Use helper functions&#xA;fmt.Println(&#34;This&#34;, color.RedString(&#34;warning&#34;), &#34;should be not neglected.&#34;)&#xA;fmt.Printf(&#34;%v %v\n&#34;, color.GreenString(&#34;Info:&#34;), &#34;an important message.&#34;)&#xA;&#xA;// Windows supported too! Just don&#39;t forget to change the output to color.Output&#xA;fmt.Fprintf(color.Output, &#34;Windows support: %s&#34;, color.GreenString(&#34;PASS&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plug into existing code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Use handy standard colors&#xA;color.Set(color.FgYellow)&#xA;&#xA;fmt.Println(&#34;Existing text will now be in yellow&#34;)&#xA;fmt.Printf(&#34;This one %s\n&#34;, &#34;too&#34;)&#xA;&#xA;color.Unset() // Don&#39;t forget to unset&#xA;&#xA;// You can mix up parameters&#xA;color.Set(color.FgMagenta, color.Bold)&#xA;defer color.Unset() // Use it in your function&#xA;&#xA;fmt.Println(&#34;All text will now be bold magenta.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disable/Enable color&lt;/h3&gt; &#xA;&lt;p&gt;There might be a case where you want to explicitly disable/enable color output. the &lt;code&gt;go-isatty&lt;/code&gt; package will automatically disable color output for non-tty output streams (for example if the output were piped directly to &lt;code&gt;less&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;color&lt;/code&gt; package also disables color output if the &lt;a href=&#34;https://no-color.org&#34;&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/a&gt; environment variable is set (regardless of its value).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Color&lt;/code&gt; has support to disable/enable colors programatically both globally and for single color definitions. For example suppose you have a CLI app and a &lt;code&gt;--no-color&lt;/code&gt; bool flag. You can easily disable the color output with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var flagNoColor = flag.Bool(&#34;no-color&#34;, false, &#34;Disable color output&#34;)&#xA;&#xA;if *flagNoColor {&#xA;&#x9;color.NoColor = true // disables colorized output&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also has support for single color definitions (local). You can disable/enable color output on the fly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;c := color.New(color.FgCyan)&#xA;c.Println(&#34;Prints cyan text&#34;)&#xA;&#xA;c.DisableColor()&#xA;c.Println(&#34;This is printed without any color&#34;)&#xA;&#xA;c.EnableColor()&#xA;c.Println(&#34;This prints again cyan...&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;GitHub Actions&lt;/h2&gt; &#xA;&lt;p&gt;To output color in GitHub Actions (or other CI systems that support ANSI colors), make sure to set &lt;code&gt;color.NoColor = false&lt;/code&gt; so that it bypasses the check for non-tty output streams.&lt;/p&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save/Return previous values&lt;/li&gt; &#xA; &lt;li&gt;Evaluate fmt.Formatter interface&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fatih&#34;&gt;Fatih Arslan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows support via @mattn: &lt;a href=&#34;https://github.com/mattn/go-colorable&#34;&gt;colorable&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT) - see &lt;a href=&#34;https://github.com/fatih/color/raw/master/LICENSE.md&#34;&gt;&lt;code&gt;LICENSE.md&lt;/code&gt;&lt;/a&gt; for more details&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zeromicro/go-zero</title>
    <updated>2022-09-03T01:35:50Z</updated>
    <id>tag:github.com,2022-09-03:/zeromicro/go-zero</id>
    <link href="https://github.com/zeromicro/go-zero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cloud-native Go microservices framework with cli tool for productivity.&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;right&#34; width=&#34;150px&#34; src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/go-zero.png&#34;&gt; &#xA;&lt;h1&gt;go-zero&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/zeromicro/go-zero/master/readme-cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/zeromicro/go-zero/actions&#34;&gt;&lt;img src=&#34;https://github.com/zeromicro/go-zero/workflows/Go/badge.svg?branch=master&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/zeromicro/go-zero&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/zeromicro/go-zero/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/zeromicro/go-zero&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/zeromicro/go-zero&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zeromicro/go-zero&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/zeromicro/go-zero.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/zeromicro/go-zero&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/zeromicro/go-zero.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;Awesome Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/4JQvC5A4Fe&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/794530774463414292?label=chat&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.producthunt.com/posts/go-zero?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-go-zero&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=334030&amp;amp;theme=light&#34; alt=&#34;go-zero - A web &amp;amp; rpc framework written in Go. | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Important!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;To upgrade from versions eariler than v1.3.0, run the following commands.&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;go install github.com/zeromicro/go-zero/tools/goctl@latest&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;goctl migrate —verbose —version v1.4.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;0. what is go-zero&lt;/h2&gt; &#xA;&lt;p&gt;go-zero (listed in CNCF Landscape: &lt;a href=&#34;https://landscape.cncf.io/?selected=go-zero&#34;&gt;https://landscape.cncf.io/?selected=go-zero&lt;/a&gt;) is a web and rpc framework with lots of builtin engineering practices. It’s born to ensure the stability of the busy services with resilience design and has been serving sites with tens of millions of users for years.&lt;/p&gt; &#xA;&lt;p&gt;go-zero contains simple API description syntax and code generation tool called &lt;code&gt;goctl&lt;/code&gt;. You can generate Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript from .api files with &lt;code&gt;goctl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Advantages of go-zero:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;improve the stability of the services with tens of millions of daily active users&lt;/li&gt; &#xA; &lt;li&gt;builtin chained timeout control, concurrency control, rate limit, adaptive circuit breaker, adaptive load shedding, even no configuration needed&lt;/li&gt; &#xA; &lt;li&gt;builtin middlewares also can be integrated into your frameworks&lt;/li&gt; &#xA; &lt;li&gt;simple API syntax, one command to generate a couple of different languages&lt;/li&gt; &#xA; &lt;li&gt;auto validate the request parameters from clients&lt;/li&gt; &#xA; &lt;li&gt;plenty of builtin microservice management and concurrent toolkits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/architecture-en.png&#34; alt=&#34;Architecture&#34; width=&#34;1500&#34;&gt; &#xA;&lt;h2&gt;1. Backgrounds of go-zero&lt;/h2&gt; &#xA;&lt;p&gt;At the beginning of 2018, we decided to re-design our system, from monolithic architecture with Java+MongoDB to microservice architecture. After research and comparison, we chose to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Golang based &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;great performance&lt;/li&gt; &#xA;   &lt;li&gt;simple syntax&lt;/li&gt; &#xA;   &lt;li&gt;proven engineering efficiency&lt;/li&gt; &#xA;   &lt;li&gt;extreme deployment experience&lt;/li&gt; &#xA;   &lt;li&gt;less server resource consumption&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Self-designed microservice architecture &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I have rich experience in designing microservice architectures&lt;/li&gt; &#xA;   &lt;li&gt;easy to locate the problems&lt;/li&gt; &#xA;   &lt;li&gt;easy to extend the features&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2. Design considerations on go-zero&lt;/h2&gt; &#xA;&lt;p&gt;By designing the microservice architecture, we expected to ensure stability, as well as productivity. And from just the beginning, we have the following design principles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keep it simple&lt;/li&gt; &#xA; &lt;li&gt;high availability&lt;/li&gt; &#xA; &lt;li&gt;stable on high concurrency&lt;/li&gt; &#xA; &lt;li&gt;easy to extend&lt;/li&gt; &#xA; &lt;li&gt;resilience design, failure-oriented programming&lt;/li&gt; &#xA; &lt;li&gt;try best to be friendly to the business logic development, encapsulate the complexity&lt;/li&gt; &#xA; &lt;li&gt;one thing, one way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After almost half a year, we finished the transfer from a monolithic system to microservice system and deployed on August 2018. The new system guaranteed business growth and system stability.&lt;/p&gt; &#xA;&lt;h2&gt;3. The implementation and features of go-zero&lt;/h2&gt; &#xA;&lt;p&gt;go-zero is a web and rpc framework that integrates lots of engineering practices. The features are mainly listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;powerful tool included, less code to write&lt;/li&gt; &#xA; &lt;li&gt;simple interfaces&lt;/li&gt; &#xA; &lt;li&gt;fully compatible with net/http&lt;/li&gt; &#xA; &lt;li&gt;middlewares are supported, easy to extend&lt;/li&gt; &#xA; &lt;li&gt;high performance&lt;/li&gt; &#xA; &lt;li&gt;failure-oriented programming, resilience design&lt;/li&gt; &#xA; &lt;li&gt;builtin service discovery, load balancing&lt;/li&gt; &#xA; &lt;li&gt;builtin concurrency control, adaptive circuit breaker, adaptive load shedding, auto-trigger, auto recover&lt;/li&gt; &#xA; &lt;li&gt;auto validation of API request parameters&lt;/li&gt; &#xA; &lt;li&gt;chained timeout control&lt;/li&gt; &#xA; &lt;li&gt;auto management of data caching&lt;/li&gt; &#xA; &lt;li&gt;call tracing, metrics, and monitoring&lt;/li&gt; &#xA; &lt;li&gt;high concurrency protected&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As below, go-zero protects the system with a couple of layers and mechanisms:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/resilience-en.png&#34; alt=&#34;Resilience&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. The simplified architecture that we use with go-zero&lt;/h2&gt; &#xA;&lt;img width=&#34;1067&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1918356/171880372-5010d846-e8b1-4942-8fe2-e2bbb584f762.png&#34;&gt; &#xA;&lt;h2&gt;5. Installation&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command under your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get -u github.com/zeromicro/go-zero&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;6. Quick Start&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;full examples can be checked out from below:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-doc/raw/main/doc/shorturl-en.md&#34;&gt;Rapid development of microservice systems&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-doc/raw/main/docs/zero/bookstore-en.md&#34;&gt;Rapid development of microservice systems - multiple RPCs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install goctl&lt;/p&gt; &lt;p&gt;&lt;code&gt;goctl&lt;/code&gt;can be read as &lt;code&gt;go control&lt;/code&gt;. &lt;code&gt;goctl&lt;/code&gt; means not to be controlled by code, instead, we control it. The inside &lt;code&gt;go&lt;/code&gt; is not &lt;code&gt;golang&lt;/code&gt;. At the very beginning, I was expecting it to help us improve productivity, and make our lives easier.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# for Go 1.15 and earlier&#xA;GO111MODULE=on go get -u github.com/zeromicro/go-zero/tools/goctl@latest&#xA;&#xA;# for Go 1.16 and later&#xA;go install github.com/zeromicro/go-zero/tools/goctl@latest&#xA;&#xA;# For Mac&#xA;brew install goctl&#xA;&#xA;# docker for amd64 architecture&#xA;docker pull kevinwan/goctl&#xA;# run goctl like&#xA;docker run --rm -it -v `pwd`:/app kevinwan/goctl goctl --help&#xA;&#xA;# docker for arm64 (M1) architecture&#xA;docker pull kevinwan/goctl:latest-arm64&#xA;# run goctl like&#xA;docker run --rm -it -v `pwd`:/app kevinwan/goctl:latest-arm64 goctl --help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;make sure goctl is executable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;create the API file, like greet.api, you can install the plugin of goctl in vs code, api syntax is supported.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type (&#xA;  Request {&#xA;    Name string `path:&#34;name,options=you|me&#34;` // parameters are auto validated&#xA;  }&#xA;&#xA;  Response {&#xA;    Message string `json:&#34;message&#34;`&#xA;  }&#xA;)&#xA;&#xA;service greet-api {&#xA;  @handler GreetHandler&#xA;  get /greet/from/:name(Request) returns (Response)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the .api files also can be generated by goctl, like below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;goctl api -o greet.api&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;generate the go server-side code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;goctl api go -api greet.api -dir greet&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the generated files look like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Plain&#34;&gt;├── greet&#xA;│&amp;nbsp;&amp;nbsp; ├── etc&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── greet-api.yaml        // configuration file&#xA;│&amp;nbsp;&amp;nbsp; ├── greet.go                  // main file&#xA;│&amp;nbsp;&amp;nbsp; └── internal&#xA;│&amp;nbsp;&amp;nbsp;     ├── config&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── config.go         // configuration definition&#xA;│&amp;nbsp;&amp;nbsp;     ├── handler&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; ├── greethandler.go   // get/put/post/delete routes are defined here&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── routes.go         // routes list&#xA;│&amp;nbsp;&amp;nbsp;     ├── logic&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── greetlogic.go     // request logic can be written here&#xA;│&amp;nbsp;&amp;nbsp;     ├── svc&#xA;│&amp;nbsp;&amp;nbsp;     │&amp;nbsp;&amp;nbsp; └── servicecontext.go // service context, mysql/redis can be passed in here&#xA;│&amp;nbsp;&amp;nbsp;     └── types&#xA;│&amp;nbsp;&amp;nbsp;         └── types.go          // request/response defined here&#xA;└── greet.api                     // api description file&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the generated code can be run directly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd greet&#xA;go mod init&#xA;go mod tidy&#xA;go run greet.go -f etc/greet-api.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;by default, it’s listening on port 8888, while it can be changed in the configuration file.&lt;/p&gt; &lt;p&gt;you can check it by curl:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -i http://localhost:8888/greet/from/you&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;the response looks like below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-http&#34;&gt;HTTP/1.1 200 OK&#xA;Date: Sun, 30 Aug 2020 15:32:35 GMT&#xA;Content-Length: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write the business logic code&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;the dependencies can be passed into the logic within servicecontext.go, like mysql, reds, etc.&lt;/li&gt; &#xA;   &lt;li&gt;add the logic code in a logic package according to .api file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate code like Java, TypeScript, Dart, JavaScript, etc. just from the api file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;goctl api java -api greet.api -dir greet&#xA;goctl api dart -api greet.api -dir greet&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;7. Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zeromicro/zero-doc/main/doc/images/benchmark.png&#34; alt=&#34;benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smallnest/go-web-framework-benchmark&#34;&gt;Checkout the test code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;8. Documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go-zero.dev/&#34;&gt;Documents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-doc/raw/main/doc/shorturl-en.md&#34;&gt;Rapid development of microservice systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-doc/raw/main/docs/zero/bookstore-en.md&#34;&gt;Rapid development of microservice systems - multiple RPCs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zeromicro/zero-examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;9. Chat group&lt;/h2&gt; &#xA;&lt;p&gt;Join the chat via &lt;a href=&#34;https://discord.gg/4JQvC5A4Fe&#34;&gt;https://discord.gg/4JQvC5A4Fe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;10. Cloud Native Landscape&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://landscape.cncf.io/images/left-logo.svg?sanitize=true&#34; width=&#34;150&#34;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://landscape.cncf.io/images/right-logo.svg?sanitize=true&#34; width=&#34;200&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;go-zero enlisted in the &lt;a href=&#34;https://landscape.cncf.io/?selected=go-zero&#34;&gt;CNCF Cloud Native Landscape&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Give a Star! ⭐&lt;/h2&gt; &#xA;&lt;p&gt;If you like or are using this project to learn or start your solution, please give it a star. Thanks!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zeromicro/go-zero/master/#go-zero&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=zeromicro/go-zero&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Buy me a coffee&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/kevwan&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zalando/postgres-operator</title>
    <updated>2022-09-03T01:35:50Z</updated>
    <id>tag:github.com,2022-09-03:/zalando/postgres-operator</id>
    <link href="https://github.com/zalando/postgres-operator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Postgres operator creates and manages PostgreSQL clusters running in Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Postgres Operator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/zalando/postgres-operator/workflows/operator-tests/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt; &lt;img src=&#34;https://github.com/zalando/postgres-operator/workflows/operator-e2e-tests/badge.svg?sanitize=true&#34; alt=&#34;E2E Tests&#34;&gt; &lt;a href=&#34;https://coveralls.io/github/zalando/postgres-operator?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/zalando/postgres-operator/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/diagrams/logo.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;The Postgres Operator delivers an easy to run highly-available &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; clusters on Kubernetes (K8s) powered by &lt;a href=&#34;https://github.com/zalando/patroni&#34;&gt;Patroni&lt;/a&gt;. It is configured only through Postgres manifests (CRDs) to ease integration into automated CI/CD pipelines with no access to Kubernetes API directly, promoting infrastructure as code vs manual operations.&lt;/p&gt; &#xA;&lt;h3&gt;Operator features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rolling updates on Postgres cluster changes, incl. quick minor version updates&lt;/li&gt; &#xA; &lt;li&gt;Live volume resize without pod restarts (AWS EBS, PVC)&lt;/li&gt; &#xA; &lt;li&gt;Database connection pooling with PGBouncer&lt;/li&gt; &#xA; &lt;li&gt;Support fast in place major version upgrade. Supports global upgrade of all clusters.&lt;/li&gt; &#xA; &lt;li&gt;Restore and cloning Postgres clusters on AWS, GCS and Azure&lt;/li&gt; &#xA; &lt;li&gt;Additionally logical backups to S3 or GCS bucket can be configured&lt;/li&gt; &#xA; &lt;li&gt;Standby cluster from S3 or GCS WAL archive&lt;/li&gt; &#xA; &lt;li&gt;Configurable for non-cloud environments&lt;/li&gt; &#xA; &lt;li&gt;Basic credential and user management on K8s, eases application deployments&lt;/li&gt; &#xA; &lt;li&gt;Support for custom TLS certificates&lt;/li&gt; &#xA; &lt;li&gt;UI to create and edit Postgres cluster manifests&lt;/li&gt; &#xA; &lt;li&gt;Support for AWS EBS gp2 to gp3 migration, supporting iops and throughput configuration&lt;/li&gt; &#xA; &lt;li&gt;Compatible with OpenShift&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PostgreSQL features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports PostgreSQL 14, starting from 9.6+&lt;/li&gt; &#xA; &lt;li&gt;Streaming replication cluster via Patroni&lt;/li&gt; &#xA; &lt;li&gt;Point-In-Time-Recovery with &lt;a href=&#34;https://www.postgresql.org/docs/11/app-pgbasebackup.html&#34;&gt;pg_basebackup&lt;/a&gt; / &lt;a href=&#34;https://github.com/wal-e/wal-e&#34;&gt;WAL-E&lt;/a&gt; via &lt;a href=&#34;https://github.com/zalando/spilo&#34;&gt;Spilo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Preload libraries: &lt;a href=&#34;https://github.com/CyberDem0n/bg_mon&#34;&gt;bg_mon&lt;/a&gt;, &lt;a href=&#34;https://www.postgresql.org/docs/14/pgstatstatements.html&#34;&gt;pg_stat_statements&lt;/a&gt;, &lt;a href=&#34;https://github.com/dimitri/pgextwlist&#34;&gt;pgextwlist&lt;/a&gt;, &lt;a href=&#34;https://github.com/RafiaSabih/pg_auth_mon&#34;&gt;pg_auth_mon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Incl. popular Postgres extensions such as &lt;a href=&#34;https://github.com/debezium/postgres-decoderbufs&#34;&gt;decoderbufs&lt;/a&gt;, &lt;a href=&#34;https://github.com/HypoPG/hypopg&#34;&gt;hypopg&lt;/a&gt;, &lt;a href=&#34;https://github.com/citusdata/pg_cron&#34;&gt;pg_cron&lt;/a&gt;, &lt;a href=&#34;https://github.com/pgpartman/pg_partman&#34;&gt;pg_partman&lt;/a&gt;, &lt;a href=&#34;https://github.com/powa-team/pg_stat_kcache&#34;&gt;pg_stat_kcache&lt;/a&gt;, &lt;a href=&#34;https://github.com/pgq/pgq&#34;&gt;pgq&lt;/a&gt;, &lt;a href=&#34;https://github.com/okbob/plpgsql_check&#34;&gt;plpgsql_check&lt;/a&gt;, &lt;a href=&#34;https://postgis.net/&#34;&gt;postgis&lt;/a&gt;, &lt;a href=&#34;https://github.com/pgaudit/set_user&#34;&gt;set_user&lt;/a&gt; and &lt;a href=&#34;https://github.com/timescale/timescaledb&#34;&gt;timescaledb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Postgres Operator has been developed at Zalando and is being used in production for over three years.&lt;/p&gt; &#xA;&lt;h2&gt;Using Spilo 12 images or lower&lt;/h2&gt; &#xA;&lt;p&gt;If you are already using the Postgres operator in older version with a Spilo 12 Docker image you need to be aware of the changes for the backup path. We introduce the major version into the backup path to smoothen the &lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/administrator.md#minor-and-major-version-upgrade&#34;&gt;major version upgrade&lt;/a&gt; that is now supported.&lt;/p&gt; &#xA;&lt;p&gt;The new operator configuration can set a compatibility flag &lt;em&gt;enable_spilo_wal_path_compat&lt;/em&gt; to make Spilo look for wal segments in the current path but also old format paths. This comes at potential performance costs and should be disabled after a few days.&lt;/p&gt; &#xA;&lt;p&gt;The newest Spilo image is: &lt;code&gt;registry.opensource.zalan.do/acid/spilo-14:2.1-p6&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The last Spilo 12 image is: &lt;code&gt;registry.opensource.zalan.do/acid/spilo-12:1.6-p5&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;For a quick first impression follow the instructions of this &lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/quickstart.md&#34;&gt;tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported setups of Postgres and Applications&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/diagrams/neutral_operator.png&#34; alt=&#34;Features&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;There is a browser-friendly version of this documentation at &lt;a href=&#34;https://postgres-operator.readthedocs.io&#34;&gt;postgres-operator.readthedocs.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/index.md&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/quickstart.md#deployment-options&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/user.md&#34;&gt;The Postgres experience on K8s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/operator-ui.md&#34;&gt;The Postgres Operator UI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/administrator.md&#34;&gt;DBA options - from RBAC to backup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/developer.md&#34;&gt;Build, debug and extend the operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/reference/operator_parameters.md&#34;&gt;Configuration options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/reference/cluster_manifest.md&#34;&gt;Postgres manifest reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zalando/postgres-operator/master/docs/reference/command_line_and_environment.md&#34;&gt;Command-line options and environment variables&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;There are two places to get in touch with the community:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/zalando/postgres-operator/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;#postgres-operator&lt;/strong&gt; &lt;a href=&#34;https://postgres-slack.herokuapp.com&#34;&gt;slack channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>