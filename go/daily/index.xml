<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-01T01:36:49Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gotenberg/gotenberg</title>
    <updated>2023-07-01T01:36:49Z</updated>
    <id>tag:github.com,2023-07-01:/gotenberg/gotenberg</id>
    <link href="https://github.com/gotenberg/gotenberg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Docker-powered stateless API for PDF files.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8983173/130322857-185831e2-f041-46eb-a17f-0a69d066c4e5.png&#34; alt=&#34;Gotenberg Logo&#34; width=&#34;150&#34; height=&#34;150&#34;&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;Gotenberg&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A Docker-powered stateless API for PDF files&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://gotenberg.dev/docs/about&#34;&gt;Documentation&lt;/a&gt; Â· ðŸ”¥ &lt;a href=&#34;https://gotenberg.dev/docs/get-started/live-demo&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Gotenberg provides a developer-friendly API to interact with powerful tools like Chromium and LibreOffice for converting numerous document formats (HTML, Markdown, Word, Excel, etc.) into PDF files, and more!&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Open a terminal and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -p 3000:3000 gotenberg/gotenberg:7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, using the historic Docker repository from our sponsor &lt;a href=&#34;https://www.thecodingmachine.com&#34;&gt;TheCodingMachine&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -p 3000:3000 thecodingmachine/gotenberg:7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The API is now available on your host at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Head to the &lt;a href=&#34;https://gotenberg.dev/docs/about&#34;&gt;documentation&lt;/a&gt; to learn how to interact with it ðŸš€&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://thecodingmachine.com&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8983173/130324668-9d6e7b35-53a3-49c7-a574-38190d2bd6b0.png&#34; alt=&#34;TheCodingMachine Logo&#34; width=&#34;429&#34; height=&#34;210&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Badges&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/gotenberg/gotenberg&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/gotenberg/gotenberg&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/thecodingmachine/gotenberg&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/thecodingmachine/gotenberg&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gotenberg/gotenberg/actions/workflows/continuous_integration.yml&#34;&gt;&lt;img src=&#34;https://github.com/gotenberg/gotenberg/actions/workflows/continuous_integration.yml/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/gotenberg/gotenberg/v7&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/gotenberg/gotenberg.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/gotenberg/gotenberg&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/gotenberg/gotenberg/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>getsops/sops</title>
    <updated>2023-07-01T01:36:49Z</updated>
    <id>tag:github.com,2023-07-01:/getsops/sops</id>
    <link href="https://github.com/getsops/sops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple and flexible tool for managing secrets&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SOPS: Secrets OPerationS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;sops&lt;/strong&gt; is an editor of encrypted files that supports YAML, JSON, ENV, INI and BINARY formats and encrypts with AWS KMS, GCP KMS, Azure Key Vault, age, and PGP. (&lt;code&gt;demo &amp;lt;https://www.youtube.com/watch?v=YTEVyLXFiq0&amp;gt;&lt;/code&gt;_)&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://i.imgur.com/X0TM5NI.gif&#34;&gt;https://i.imgur.com/X0TM5NI.gif&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://pkg.go.dev/badge/go.mozilla.org/sops/v3.svg&#34;&gt;https://pkg.go.dev/badge/go.mozilla.org/sops/v3.svg&lt;/a&gt; :target: &lt;a href=&#34;https://pkg.go.dev/go.mozilla.org/sops/v3&#34;&gt;https://pkg.go.dev/go.mozilla.org/sops/v3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Stable release&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Binaries and packages of the latest stable release are available at `https://github.com/mozilla/sops/releases &amp;lt;https://github.com/mozilla/sops/releases&amp;gt;`_.&#xA;&#xA;Development branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the adventurous, unstable features are available in the &lt;code&gt;develop&lt;/code&gt; branch, which you can install from source:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir -p $GOPATH/src/go.mozilla.org/sops/&#xA;    $ git clone https://github.com/mozilla/sops.git $GOPATH/src/go.mozilla.org/sops/&#xA;    $ cd $GOPATH/src/go.mozilla.org/sops/&#xA;    $ git checkout develop&#xA;    $ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(requires Go &amp;gt;= 1.17)&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have Go installed, set it up with:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ {apt,yum,brew} install golang&#xA;$ echo &#39;export GOPATH=~/go&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;$ source ~/.bashrc&#xA;$ mkdir $GOPATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or whatever variation of the above fits your system and shell.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;strong&gt;sops&lt;/strong&gt; as a library, take a look at the &lt;code&gt;decrypt package &amp;lt;https://pkg.go.dev/go.mozilla.org/sops/v3/decrypt&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. sectnum:: .. contents:: Table of Contents&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For a quick presentation of Sops, check out this Youtube tutorial:&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://img.youtube.com/vi/V2PRhxphH2w/0.jpg&#34;&gt;https://img.youtube.com/vi/V2PRhxphH2w/0.jpg&lt;/a&gt; :target: &lt;a href=&#34;https://www.youtube.com/watch?v=V2PRhxphH2w&#34;&gt;https://www.youtube.com/watch?v=V2PRhxphH2w&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using AWS KMS, create one or multiple master keys in the IAM console and export them, comma separated, in the &lt;strong&gt;SOPS_KMS_ARN&lt;/strong&gt; env variable. It is recommended to use at least two master keys in different regions.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export SOPS_KMS_ARN=&#34;arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e,arn:aws:kms:ap-southeast-1:656532927350:key/9006a8aa-0fa6-4c14-930e-a2dfb916de1d&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your AWS credentials must be present in &lt;code&gt;~/.aws/credentials&lt;/code&gt;. sops uses aws-sdk-go.&lt;/p&gt; &#xA;&lt;p&gt;.. code::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat ~/.aws/credentials&#xA;[default]&#xA;aws_access_key_id = AKI.....&#xA;aws_secret_access_key = mw......&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use PGP, export the fingerprints of the public keys, comma separated, in the &lt;strong&gt;SOPS_PGP_FP&lt;/strong&gt; env variable.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export SOPS_PGP_FP=&#34;85D77543B3D624B63CEA9E6DBC17301B491B3F21,E60892BB9BD89A69F759A1A0A3D652173B763E8F&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: you can use both PGP and KMS simultaneously.&lt;/p&gt; &#xA;&lt;p&gt;Then simply call &lt;code&gt;sops&lt;/code&gt; with a file path as argument. It will handle the encryption/decryption transparently and open the cleartext file in an editor&lt;/p&gt; &#xA;&lt;p&gt;.. code:: shell&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops mynewtestfile.yaml&#xA;mynewtestfile.yaml doesn&#39;t exist, creating it.&#xA;please wait while an encryption key is being generated and stored in a secure fashion&#xA;file written to mynewtestfile.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Editing will happen in whatever &lt;code&gt;$EDITOR&lt;/code&gt; is set to, or, if it&#39;s not set, in vim. Keep in mind that sops will wait for the editor to exit, and then try to reencrypt the file. Some GUI editors (atom, sublime) spawn a child process and then exit immediately. They usually have an option to wait for the main editor window to be closed before exiting. See &lt;code&gt;#127 &amp;lt;https://github.com/mozilla/sops/issues/127&amp;gt;&lt;/code&gt;_ for more information.&lt;/p&gt; &#xA;&lt;p&gt;The resulting encrypted file looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;myapp1: ENC[AES256_GCM,data:Tr7o=,iv:1=,aad:No=,tag:k=]&#xA;app2:&#xA;    db:&#xA;        user: ENC[AES256_GCM,data:CwE4O1s=,iv:2k=,aad:o=,tag:w==]&#xA;        password: ENC[AES256_GCM,data:p673w==,iv:YY=,aad:UQ=,tag:A=]&#xA;    # private key for secret operations in app2&#xA;    key: |-&#xA;        ENC[AES256_GCM,data:Ea3kL5O5U8=,iv:DM=,aad:FKA=,tag:EA==]&#xA;an_array:&#xA;- ENC[AES256_GCM,data:v8jQ=,iv:HBE=,aad:21c=,tag:gA==]&#xA;- ENC[AES256_GCM,data:X10=,iv:o8=,aad:CQ=,tag:Hw==]&#xA;- ENC[AES256_GCM,data:KN=,iv:160=,aad:fI4=,tag:tNw==]&#xA;sops:&#xA;    kms:&#xA;    -   created_at: 1441570389.775376&#xA;        enc: CiC....Pm1Hm&#xA;        arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e&#xA;    -   created_at: 1441570391.925734&#xA;        enc: Ci...awNx&#xA;        arn: arn:aws:kms:ap-southeast-1:656532927350:key/9006a8aa-0fa6-4c14-930e-a2dfb916de1d&#xA;    pgp:&#xA;    -   fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21&#xA;        created_at: 1441570391.930042&#xA;        enc: |&#xA;            -----BEGIN PGP MESSAGE-----&#xA;            hQIMA0t4uZHfl9qgAQ//UvGAwGePyHuf2/zayWcloGaDs0MzI+zw6CmXvMRNPUsA&#xA;&#x9;&#x9;&#x9;...=oJgS&#xA;            -----END PGP MESSAGE-----&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A copy of the encryption/decryption key is stored securely in each KMS and PGP block. As long as one of the KMS or PGP method is still usable, you will be able to access your data.&lt;/p&gt; &#xA;&lt;p&gt;To decrypt a file in a &lt;code&gt;cat&lt;/code&gt; fashion, use the &lt;code&gt;-d&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops -d mynewtestfile.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sops&lt;/code&gt; encrypted files contain the necessary information to decrypt their content. All a user of &lt;code&gt;sops&lt;/code&gt; needs is valid AWS credentials and the necessary permissions on KMS keys.&lt;/p&gt; &#xA;&lt;p&gt;Given that, the only command a &lt;code&gt;sops&lt;/code&gt; user needs is:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops &amp;lt;file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; will be opened, decrypted, passed to a text editor (vim by default), encrypted if modified, and saved back to its original location. All of these steps, apart from the actual editing, are transparent to the user.&lt;/p&gt; &#xA;&lt;p&gt;Test with the dev PGP key&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;If you want to test **sops** without having to do a bunch of setup, you can use&#xA;the example files and pgp key provided with the repository::&#xA;&#xA;&#x9;$ git clone https://github.com/mozilla/sops.git&#xA;&#x9;$ cd sops&#xA;&#x9;$ gpg --import pgp/sops_functional_tests_key.asc&#xA;&#x9;$ sops example.yaml&#xA;&#xA;This last step will decrypt ``example.yaml`` using the test private key.&#xA;&#xA;&#xA;Encrypting using age&#xA;~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;`age &amp;lt;https://age-encryption.org/&amp;gt;`_ is a simple, modern, and secure tool for&#xA;encrypting files. It&#39;s recommended to use age over PGP, if possible.&#xA;&#xA;You can encrypt a file for one or more age recipients (comma separated) using&#xA;the ``--age`` option or the **SOPS_AGE_RECIPIENTS** environment variable:&#xA;&#xA;.. code:: bash&#xA;&#xA;   $ sops --encrypt --age age1yt3tfqlfrwdwx0z0ynwplcr6qxcxfaqycuprpmy89nr83ltx74tqdpszlw test.yaml &amp;gt; test.enc.yaml&#xA;&#xA;When decrypting a file with the corresponding identity, sops will look for a&#xA;text file name ``keys.txt`` located in a ``sops`` subdirectory of your user&#xA;configuration directory. On Linux, this would be ``$XDG_CONFIG_HOME/sops/age/keys.txt``.&#xA;On macOS, this would be ``$HOME/Library/Application Support/sops/age/keys.txt``. On&#xA;Windows, this would be ``%AppData%\sops\age\keys.txt``. You can specify the location&#xA;of this file manually by setting the environment variable **SOPS_AGE_KEY_FILE**.&#xA;Alternatively you can provide the the key(s) directly by setting the **SOPS_AGE_KEY**&#xA;environment variable.&#xA;&#xA;The contents of this key file should be a list of age X25519 identities, one&#xA;per line. Lines beginning with ``#`` are considered comments and ignored. Each&#xA;identity will be tried in sequence until one is able to decrypt the data.&#xA;&#xA;Encrypting with SSH keys via age is not yet supported by sops.&#xA;&#xA;&#xA;Encrypting using GCP KMS&#xA;~~~~~~~~~~~~~~~~~~~~~~~~&#xA;GCP KMS uses `Application Default Credentials&#xA;&amp;lt;https://developers.google.com/identity/protocols/application-default-credentials&amp;gt;`_.&#xA;If you already logged in using&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ gcloud auth login&#xA;&#xA;you can enable application default credentials using the sdk::&#xA;&#xA;&#x9;$ gcloud auth application-default login&#xA;&#xA;Encrypting/decrypting with GCP KMS requires a KMS ResourceID. You can use the&#xA;cloud console the get the ResourceID or you can create one using the gcloud&#xA;sdk:&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ gcloud kms keyrings create sops --location global&#xA;&#x9;$ gcloud kms keys create sops-key --location global --keyring sops --purpose encryption&#xA;&#x9;$ gcloud kms keys list --location global --keyring sops&#xA;&#xA;&#x9;# you should see&#xA;&#x9;NAME                                                                   PURPOSE          PRIMARY_STATE&#xA;&#x9;projects/my-project/locations/global/keyRings/sops/cryptoKeys/sops-key ENCRYPT_DECRYPT  ENABLED&#xA;&#xA;Now you can encrypt a file using::&#xA;&#xA;&#x9;$ sops --encrypt --gcp-kms projects/my-project/locations/global/keyRings/sops/cryptoKeys/sops-key test.yaml &amp;gt; test.enc.yaml&#xA;&#xA;And decrypt it using::&#xA;&#xA;&#x9; $ sops --decrypt test.enc.yaml&#xA;&#xA;Encrypting using Azure Key Vault&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Azure Key Vault integration tries several authentication methods, in this order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Client credentials&lt;/li&gt; &#xA; &lt;li&gt;Client Certificate&lt;/li&gt; &#xA; &lt;li&gt;Username Password&lt;/li&gt; &#xA; &lt;li&gt;MSI&lt;/li&gt; &#xA; &lt;li&gt;Azure CLI auth&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can force a specific authentication method through the AZURE_AUTH_METHOD environment variable, which may be one of: clientcredentials, clientcertificate, usernamepassword, msi, or cli (default).&lt;/p&gt; &#xA;&lt;p&gt;For example, you can use service principals with the following environment variables:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AZURE_TENANT_ID&#xA;AZURE_CLIENT_ID&#xA;AZURE_CLIENT_SECRET&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can create a service principal using the cli like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ az ad sp create-for-rbac -n my-keyvault-sp&#xA;&#xA;{&#xA;&#x9;&#34;appId&#34;: &#34;&amp;lt;some-uuid&amp;gt;&#34;,&#xA;&#x9;&#34;displayName&#34;: &#34;my-keyvault-sp&#34;,&#xA;&#x9;&#34;name&#34;: &#34;http://my-keyvault-sp&#34;,&#xA;&#x9;&#34;password&#34;: &#34;&amp;lt;some-uuid&amp;gt;&#34;,&#xA;&#x9;&#34;tenant&#34;: &#34;&amp;lt;tenant-id&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The appId is the client id, and the password is the client secret.&lt;/p&gt; &#xA;&lt;p&gt;Encrypting/decrypting with Azure Key Vault requires the resource identifier for a key. This has the following form::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://${VAULT_URL}/keys/${KEY_NAME}/${KEY_VERSION}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a Key Vault and assign your service principal permissions on it from the commandline:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Create a resource group if you do not have one:&#xA;$ az group create --name sops-rg --location westeurope&#xA;# Key Vault names are globally unique, so generate one:&#xA;$ keyvault_name=sops-$(uuidgen | tr -d - | head -c 16)&#xA;# Create a Vault, a key, and give the service principal access:&#xA;$ az keyvault create --name $keyvault_name --resource-group sops-rg --location westeurope&#xA;$ az keyvault key create --name sops-key --vault-name $keyvault_name --protection software --ops encrypt decrypt&#xA;$ az keyvault set-policy --name $keyvault_name --resource-group sops-rg --spn $AZURE_CLIENT_ID \&#xA;&#x9;--key-permissions encrypt decrypt&#xA;# Read the key id:&#xA;$ az keyvault key show --name sops-key --vault-name $keyvault_name --query key.kid&#xA;&#xA;https://sops.vault.azure.net/keys/sops-key/some-string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can encrypt a file using::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops --encrypt --azure-kv https://sops.vault.azure.net/keys/sops-key/some-string test.yaml &amp;gt; test.enc.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And decrypt it using::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; $ sops --decrypt test.enc.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encrypting using Hashicorp Vault&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;We assume you have an instance (or more) of Vault running and you have privileged access to it. For instructions on how to deploy a secure instance of Vault, refer to Hashicorp&#39;s official documentation.&#xA;&#xA;To easily deploy Vault locally: (DO NOT DO THIS FOR PRODUCTION!!!) &#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ docker run -d -p8200:8200 vault:1.2.0 server -dev -dev-root-token-id=toor&#xA;&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ # Substitute this with the address Vault is running on&#xA;&#x9;$ export VAULT_ADDR=http://127.0.0.1:8200 &#xA;&#xA;&#x9;$ # this may not be necessary in case you previously used `vault login` for production use&#xA;&#x9;$ export VAULT_TOKEN=toor &#xA;&#x9;&#xA;&#x9;$ # to check if Vault started and is configured correctly&#xA;&#x9;$ vault status&#xA;&#x9;Key             Value&#xA;&#x9;---             -----&#xA;&#x9;Seal Type       shamir&#xA;&#x9;Initialized     true&#xA;&#x9;Sealed          false&#xA;&#x9;Total Shares    1&#xA;&#x9;Threshold       1&#xA;&#x9;Version         1.2.0&#xA;&#x9;Cluster Name    vault-cluster-618cc902&#xA;&#x9;Cluster ID      e532e461-e8f0-1352-8a41-fc7c11096908&#xA;&#x9;HA Enabled      false&#xA;&#xA;&#x9;$ # It is required to enable a transit engine if not already done (It is suggested to create a transit engine specifically for sops, in which it is possible to have multiple keys with various permission levels)&#xA;&#x9;$ vault secrets enable -path=sops transit&#xA;&#x9;Success! Enabled the transit secrets engine at: sops/&#xA;&#xA;&#x9;$ # Then create one or more keys&#xA;&#x9;$ vault write sops/keys/firstkey type=rsa-4096&#xA;&#x9;Success! Data written to: sops/keys/firstkey&#xA;&#xA;&#x9;$ vault write sops/keys/secondkey type=rsa-2048&#xA;&#x9;Success! Data written to: sops/keys/secondkey&#xA;&#xA;&#x9;$ vault write sops/keys/thirdkey type=chacha20-poly1305&#xA;&#x9;Success! Data written to: sops/keys/thirdkey&#xA;&#xA;&#x9;$ sops --hc-vault-transit $VAULT_ADDR/v1/sops/keys/firstkey vault_example.yml&#xA;&#xA;&#x9;$ cat &amp;lt;&amp;lt;EOF &amp;gt; .sops.yaml&#xA;&#x9;creation_rules:&#xA;&#x9;&#x9;- path_regex: \.dev\.yaml$&#xA;&#x9;&#x9;  hc_vault_transit_uri: &#34;$VAULT_ADDR/v1/sops/keys/secondkey&#34;&#xA;&#x9;&#x9;- path_regex: \.prod\.yaml$&#xA;&#x9;&#x9;  hc_vault_transit_uri: &#34;$VAULT_ADDR/v1/sops/keys/thirdkey&#34;&#xA;&#x9;EOF&#xA;&#xA;&#x9;$ sops --verbose -e prod/raw.yaml &amp;gt; prod/encrypted.yaml&#xA;&#xA;Adding and removing keys&#xA;~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;When creating new files, ``sops`` uses the PGP, KMS and GCP KMS defined in the&#xA;command line arguments ``--kms``, ``--pgp``, ``--gcp-kms`` or ``--azure-kv``, or from&#xA;the environment variables ``SOPS_KMS_ARN``, ``SOPS_PGP_FP``, ``SOPS_GCP_KMS_IDS``,&#xA;``SOPS_AZURE_KEYVAULT_URLS``. That information is stored in the file under the&#xA;``sops`` section, such that decrypting files does not require providing those&#xA;parameters again.&#xA;&#xA;Master PGP and KMS keys can be added and removed from a ``sops`` file in one of&#xA;three ways::&#xA;&#xA;1. By using a .sops.yaml file and the ``updatekeys`` command.&#xA;&#xA;2. By using command line flags.&#xA;&#xA;3. By editing the file directly.&#xA;&#xA;The sops team recommends the ``updatekeys`` approach.&#xA;&#xA;&#xA;``updatekeys`` command&#xA;**********************&#xA;&#xA;The ``updatekeys`` command uses the `.sops.yaml &amp;lt;#using-sops-yaml-conf-to-select-kms-pgp-for-new-files&amp;gt;`_&#xA;configuration file to update (add or remove) the corresponding secrets in the&#xA;encrypted file. Note that the example below uses the&#xA;`Block Scalar yaml construct &amp;lt;https://yaml-multiline.info/&amp;gt;`_ to build a space&#xA;separated list.&#xA;&#xA;.. code:: yaml&#xA;&#xA;    creation_rules:&#xA;        - pgp: &amp;gt;-&#xA;            85D77543B3D624B63CEA9E6DBC17301B491B3F21,&#xA;            FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops updatekeys test.enc.yaml&#xA;&#xA;Sops will prompt you with the changes to be made. This interactivity can be&#xA;disabled by supplying the ``-y`` flag.&#xA;&#xA;Command Line&#xA;************&#xA;&#xA;Command line flag ``--add-kms``, ``--add-pgp``, ``--add-gcp-kms``, ``--add-azure-kv``,&#xA;``--rm-kms``, ``--rm-pgp``, ``--rm-gcp-kms`` and ``--rm-azure-kv`` can be used to add&#xA;and remove keys from a file.&#xA;These flags use the comma separated syntax as the ``--kms``, ``--pgp``, ``--gcp-kms``&#xA;and ``--azure-kv`` arguments when creating new files.&#xA;&#xA;Note that ``-r`` or ``--rotate`` is mandatory in this mode. Not specifying&#xA;rotate will ignore the ``--add-*`` options. Use ``updatekeys`` if you want to&#xA;add a key without rotating the data key.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;# add a new pgp key to the file and rotate the data key&#xA;&#x9;$ sops -r -i --add-pgp 85D77543B3D624B63CEA9E6DBC17301B491B3F21 example.yaml&#xA;&#xA;&#x9;# remove a pgp key from the file and rotate the data key&#xA;&#x9;$ sops -r -i --rm-pgp 85D77543B3D624B63CEA9E6DBC17301B491B3F21 example.yaml&#xA;&#xA;&#xA;Direct Editing&#xA;**************&#xA;&#xA;Alternatively, invoking ``sops`` with the flag **-s** will display the master keys&#xA;while editing. This method can be used to add or remove kms or pgp keys under the&#xA;sops section. Invoking ``sops`` with the **-i** flag will perform an in-place edit&#xA;instead of redirecting output to ``stdout``.&#xA;&#xA;For example, to add a KMS master key to a file, add the following entry while&#xA;editing:&#xA;&#xA;.. code:: yaml&#xA;&#xA;&#x9;sops:&#xA;&#x9;    kms:&#xA;&#x9;    - arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e&#xA;&#xA;And, similarly, to add a PGP master key, we add its fingerprint:&#xA;&#xA;.. code:: yaml&#xA;&#xA;&#x9;sops:&#xA;&#x9;    pgp:&#xA;&#x9;    - fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21&#xA;&#xA;When the file is saved, ``sops`` will update its metadata and encrypt the data key&#xA;with the freshly added master keys. The removed entries are simply deleted from&#xA;the file.&#xA;&#xA;When removing keys, it is recommended to rotate the data key using ``-r``,&#xA;otherwise owners of the removed key may have add access to the data key in the&#xA;past.&#xA;&#xA;KMS AWS Profiles&#xA;~~~~~~~~~~~~~~~~&#xA;&#xA;If you want to use a specific profile, you can do so with `aws_profile`:&#xA;&#xA;.. code:: yaml&#xA;&#xA;&#x9;sops:&#xA;&#x9;    kms:&#xA;&#x9;    -&#x9;arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e&#xA;&#x9;        aws_profile: foo&#xA;&#xA;If no AWS profile is set, default credentials will be used.&#xA;&#xA;Similarly the `--aws-profile` flag can be set with the command line with any of the KMS commands.&#xA;&#xA;&#xA;Assuming roles and using KMS in various AWS accounts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SOPS has the ability to use KMS in multiple AWS accounts by assuming roles in each account. Being able to assume roles is a nice feature of AWS that allows administrators to establish trust relationships between accounts, typically from the most secure account to the least secure one. In our use-case, we use roles to indicate that a user of the Master AWS account is allowed to make use of KMS master keys in development and staging AWS accounts. Using roles, a single file can be encrypted with KMS keys in multiple accounts, thus increasing reliability and ease of use.&lt;/p&gt; &#xA;&lt;p&gt;You can use keys in various accounts by tying each KMS master key to a role that the user is allowed to assume in each account. The &lt;code&gt;IAM roles &amp;lt;http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html&amp;gt;&lt;/code&gt;_ documentation has full details on how this needs to be configured on AWS&#39;s side.&lt;/p&gt; &#xA;&lt;p&gt;From the point of view of &lt;code&gt;sops&lt;/code&gt;, you only need to specify the role a KMS key must assume alongside its ARN, as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sops:&#xA;    kms:&#xA;    -&#x9;arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e&#xA;        role: arn:aws:iam::927034868273:role/sops-dev-xyz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The role must have permission to call Encrypt and Decrypt using KMS. An example policy is shown below.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;Sid&#34;: &#34;Allow use of the key&#34;,&#xA;  &#34;Effect&#34;: &#34;Allow&#34;,&#xA;  &#34;Action&#34;: [&#xA;&#x9;&#34;kms:Encrypt&#34;,&#xA;&#x9;&#34;kms:Decrypt&#34;,&#xA;&#x9;&#34;kms:ReEncrypt*&#34;,&#xA;&#x9;&#34;kms:GenerateDataKey*&#34;,&#xA;&#x9;&#34;kms:DescribeKey&#34;&#xA;  ],&#xA;  &#34;Resource&#34;: &#34;*&#34;,&#xA;  &#34;Principal&#34;: {&#xA;&#x9;&#34;AWS&#34;: [&#xA;&#x9;  &#34;arn:aws:iam::927034868273:role/sops-dev-xyz&#34;&#xA;&#x9;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify a role in the &lt;code&gt;--kms&lt;/code&gt; flag and &lt;code&gt;SOPS_KMS_ARN&lt;/code&gt; variable by appending it to the ARN of the master key, separated by a &lt;strong&gt;+&lt;/strong&gt; sign::&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;KMS ARN&amp;gt;+&amp;lt;ROLE ARN&amp;gt;&#xA;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500+arn:aws:iam::927034868273:role/sops-dev-xyz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;AWS KMS Encryption Context&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;SOPS has the ability to use `AWS KMS key policy and encryption context&#xA;&amp;lt;http://docs.aws.amazon.com/kms/latest/developerguide/encryption-context.html&amp;gt;`_&#xA;to refine the access control of a given KMS master key.&#xA;&#xA;When creating a new file, you can specify encryption context in the&#xA;``--encryption-context`` flag by comma separated list of key-value pairs:&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops --encryption-context Environment:production,Role:web-server test.dev.yaml&#xA;&#xA;The format of the Encrypt Context string is ``&amp;lt;EncryptionContext Key&amp;gt;:&amp;lt;EncryptionContext Value&amp;gt;,&amp;lt;EncryptionContext Key&amp;gt;:&amp;lt;EncryptionContext Value&amp;gt;,...``&#xA;&#xA;The encryption context will be stored in the file metadata and does&#xA;not need to be provided at decryption.&#xA;&#xA;Encryption contexts can be used in conjunction with KMS Key Policies to define&#xA;roles that can only access a given context. An example policy is shown below:&#xA;&#xA;.. code:: json&#xA;&#xA;    {&#xA;      &#34;Effect&#34;: &#34;Allow&#34;,&#xA;      &#34;Principal&#34;: {&#xA;        &#34;AWS&#34;: &#34;arn:aws:iam::111122223333:role/RoleForExampleApp&#34;&#xA;      },&#xA;      &#34;Action&#34;: &#34;kms:Decrypt&#34;,&#xA;      &#34;Resource&#34;: &#34;*&#34;,&#xA;      &#34;Condition&#34;: {&#xA;        &#34;StringEquals&#34;: {&#xA;          &#34;kms:EncryptionContext:AppName&#34;: &#34;ExampleApp&#34;,&#xA;          &#34;kms:EncryptionContext:FilePath&#34;: &#34;/var/opt/secrets/&#34;&#xA;        }&#xA;      }&#xA;    }&#xA;&#xA;Key Rotation&#xA;~~~~~~~~~~~~&#xA;&#xA;It is recommended to renew the data key on a regular basis. ``sops`` supports key&#xA;rotation via the ``-r`` flag. Invoking it on an existing file causes sops to&#xA;reencrypt the file with a new data key, which is then encrypted with the various&#xA;KMS and PGP master keys defined in the file.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;sops -r example.yaml&#xA;&#xA;Using .sops.yaml conf to select KMS/PGP for new files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is often tedious to specify the &lt;code&gt;--kms&lt;/code&gt; &lt;code&gt;--gcp-kms&lt;/code&gt; and &lt;code&gt;--pgp&lt;/code&gt; parameters for creation of all new files. If your secrets are stored under a specific directory, like a &lt;code&gt;git&lt;/code&gt; repository, you can create a &lt;code&gt;.sops.yaml&lt;/code&gt; configuration file at the root directory to define which keys are used for which filename.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s take an example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;file named &lt;strong&gt;something.dev.yaml&lt;/strong&gt; should use one set of KMS A&lt;/li&gt; &#xA; &lt;li&gt;file named &lt;strong&gt;something.prod.yaml&lt;/strong&gt; should use another set of KMS B&lt;/li&gt; &#xA; &lt;li&gt;other files use a third set of KMS C&lt;/li&gt; &#xA; &lt;li&gt;all live under &lt;strong&gt;mysecretrepo/something.{dev,prod,gcp}.yaml&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Under those circumstances, a file placed at &lt;strong&gt;mysecretrepo/.sops.yaml&lt;/strong&gt; can manage the three sets of configurations for the three types of files:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# creation rules are evaluated sequentially, the first match wins&#xA;creation_rules:&#xA;&#x9;# upon creation of a file that matches the pattern *.dev.yaml,&#xA;&#x9;# KMS set A is used&#xA;&#x9;- path_regex: \.dev\.yaml$&#xA;&#x9;  kms: &#39;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod&#39;&#xA;&#x9;  pgp: &#39;FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4&#39;&#xA;&#xA;&#x9;# prod files use KMS set B in the PROD IAM&#xA;&#x9;- path_regex: \.prod\.yaml$&#xA;&#x9;  kms: &#39;arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod,arn:aws:kms:eu-central-1:361527076523:key/cb1fab90-8d17-42a1-a9d8-334968904f94+arn:aws:iam::361527076523:role/hiera-sops-prod&#39;&#xA;&#x9;  pgp: &#39;FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4&#39;&#xA;&#x9;  hc_vault_uris: &#34;http://localhost:8200/v1/sops/keys/thirdkey&#34;&#xA;&#xA;&#x9;# gcp files using GCP KMS&#xA;&#x9;- path_regex: \.gcp\.yaml$&#xA;&#x9;  gcp_kms: projects/mygcproject/locations/global/keyRings/mykeyring/cryptoKeys/thekey&#xA;&#xA;&#x9;# Finally, if the rules above have not matched, this one is a&#xA;&#x9;# catchall that will encrypt the file using KMS set C&#xA;&#x9;# The absence of a path_regex means it will match everything&#xA;&#x9;- kms: &#39;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:142069644989:key/846cfb17-373d-49b9-8baf-f36b04512e47,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e&#39;&#xA;&#x9;  pgp: &#39;FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When creating any file under &lt;strong&gt;mysecretrepo&lt;/strong&gt;, whether at the root or under a subdirectory, sops will recursively look for a &lt;code&gt;.sops.yaml&lt;/code&gt; file. If one is found, the filename of the file being created is compared with the filename regexes of the configuration file. The first regex that matches is selected, and its KMS and PGP keys are used to encrypt the file. It should be noted that the looking up of &lt;code&gt;.sops.yaml&lt;/code&gt; is from the working directory (CWD) instead of the directory of the encrypting file (see &lt;code&gt;Issue 242 &amp;lt;https://github.com/mozilla/sops/issues/242&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &#xA;&lt;p&gt;The path_regex checks the path of the encrypting file relative to the .sops.yaml config file. Here is another example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;files located under directory &lt;strong&gt;development&lt;/strong&gt; should use one set of KMS A&lt;/li&gt; &#xA; &lt;li&gt;files located under directory &lt;strong&gt;production&lt;/strong&gt; should use another set of KMS B&lt;/li&gt; &#xA; &lt;li&gt;other files use a third set of KMS C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. code:: yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;creation_rules:&#xA;    # upon creation of a file under development,&#xA;    # KMS set A is used&#xA;    - path_regex: .*/development/.*&#xA;      kms: &#39;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod&#39;&#xA;      pgp: &#39;FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4&#39;&#xA;&#xA;    # prod files use KMS set B in the PROD IAM&#xA;    - path_regex: .*/production/.*&#xA;      kms: &#39;arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e+arn:aws:iam::361527076523:role/hiera-sops-prod,arn:aws:kms:eu-central-1:361527076523:key/cb1fab90-8d17-42a1-a9d8-334968904f94+arn:aws:iam::361527076523:role/hiera-sops-prod&#39;&#xA;      pgp: &#39;FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4&#39;&#xA;&#xA;    # other files use KMS set C&#xA;    - kms: &#39;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500,arn:aws:kms:us-west-2:142069644989:key/846cfb17-373d-49b9-8baf-f36b04512e47,arn:aws:kms:us-west-2:361527076523:key/5052f06a-5d3f-489e-b86c-57201e06f31e&#39;&#xA;      pgp: &#39;FBC7B9E2A4F9289AC0C1D4843D16CEE4A27381B4&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Creating a new file with the right keys is now as simple as&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops &amp;lt;newfile&amp;gt;.prod.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the configuration file is ignored when KMS or PGP parameters are passed on the sops command line or in environment variables.&lt;/p&gt; &#xA;&lt;p&gt;Specify a different GPG executable&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;``sops`` checks for the ``SOPS_GPG_EXEC`` environment variable. If specified,&#xA;it will attempt to use the executable set there instead of the default&#xA;of ``gpg``.&#xA;&#xA;Example: place the following in your ``~/.bashrc``&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;SOPS_GPG_EXEC = &#39;your_gpg_client_wrapper&#39;&#xA;&#xA;&#xA;Specify a different GPG key server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;sops&lt;/code&gt; uses the key server &lt;code&gt;keys.openpgp.org&lt;/code&gt; to retrieve the GPG keys that are not present in the local keyring. This is no longer configurable. You can learn more about why from this write-up: &lt;code&gt;SKS Keyserver Network Under Attack &amp;lt;https://gist.github.com/rjhansen/67ab921ffb4084c865b3618d6955275f&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Key groups&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;By default, ``sops`` encrypts the data key for a file with each of the master keys,&#xA;such that if any of the master keys is available, the file can be decrypted.&#xA;However, it is sometimes desirable to require access to multiple master keys&#xA;in order to decrypt files. This can be achieved with key groups.&#xA;&#xA;When using key groups in sops, data keys are split into parts such that keys from&#xA;multiple groups are required to decrypt a file. ``sops`` uses Shamir&#39;s Secret Sharing&#xA;to split the data key such that each key group has a fragment, each key in the&#xA;key group can decrypt that fragment, and a configurable number of fragments (threshold)&#xA;are needed to decrypt and piece together the complete data key. When decrypting a&#xA;file using multiple key groups, ``sops`` goes through key groups in order, and in&#xA;each group, tries to recover the fragment of the data key using a master key from&#xA;that group. Once the fragment is recovered, ``sops`` moves on to the next group,&#xA;until enough fragments have been recovered to obtain the complete data key.&#xA;&#xA;By default, the threshold is set to the number of key groups. For example, if&#xA;you have three key groups configured in your SOPS file and you don&#39;t override&#xA;the default threshold, then one master key from each of the three groups will&#xA;be required to decrypt the file.&#xA;&#xA;Management of key groups is done with the ``sops groups`` command.&#xA;&#xA;For example, you can add a new key group with 3 PGP keys and 3 KMS keys to the&#xA;file ``my_file.yaml``:&#xA;&#xA;.. code:: bash&#xA;&#xA;    $ sops groups add --file my_file.yaml --pgp fingerprint1 --pgp fingerprint2 --pgp fingerprint3 --kms arn1 --kms arn2 --kms arn3&#xA;&#xA;Or you can delete the 1st group (group number 0, as groups are zero-indexed)&#xA;from ``my_file.yaml``:&#xA;&#xA;.. code:: bash&#xA;&#xA;    $ sops groups delete --file my_file.yaml 0&#xA;&#xA;Key groups can also be specified in the ``.sops.yaml`` config file,&#xA;like so:&#xA;&#xA;.. code:: yaml&#xA;&#xA;    creation_rules:&#xA;        - path_regex: .*keygroups.*&#xA;          key_groups:&#xA;          # First key group&#xA;          - pgp:&#xA;            - fingerprint1&#xA;            - fingerprint2&#xA;            kms:&#xA;            - arn: arn1&#xA;              role: role1&#xA;              context:&#xA;                foo: bar&#xA;            - arn: arn2&#xA;          # Second key group&#xA;          - pgp:&#xA;            - fingerprint3&#xA;            - fingerprint4&#xA;            kms:&#xA;            - arn: arn3&#xA;            - arn: arn4&#xA;          # Third key group&#xA;          - pgp:&#xA;            - fingerprint5&#xA;&#xA;Given this configuration, we can create a new encrypted file like we normally&#xA;would, and optionally provide the ``--shamir-secret-sharing-threshold`` command line&#xA;flag if we want to override the default threshold. ``sops`` will then split the data&#xA;key into three parts (from the number of key groups) and encrypt each fragment with&#xA;the master keys found in each group.&#xA;&#xA;For example:&#xA;&#xA;.. code:: bash&#xA;&#xA;    $ sops --shamir-secret-sharing-threshold 2 example.json&#xA;&#xA;Alternatively, you can configure the Shamir threshold for each creation rule in the ``.sops.yaml`` config&#xA;with ``shamir_threshold``:&#xA;&#xA;.. code:: yaml&#xA;&#xA;    creation_rules:&#xA;        - path_regex: .*keygroups.*&#xA;          shamir_threshold: 2&#xA;          key_groups:&#xA;          # First key group&#xA;          - pgp:&#xA;            - fingerprint1&#xA;            - fingerprint2&#xA;            kms:&#xA;            - arn: arn1&#xA;              role: role1&#xA;              context:&#xA;                foo: bar&#xA;            - arn: arn2&#xA;          # Second key group&#xA;          - pgp:&#xA;            - fingerprint3&#xA;            - fingerprint4&#xA;            kms:&#xA;            - arn: arn3&#xA;            - arn: arn4&#xA;          # Third key group&#xA;          - pgp:&#xA;            - fingerprint5&#xA;&#xA;And then run ``sops example.json``.&#xA;&#xA;The threshold (``shamir_threshold``) is set to 2, so this configuration will require&#xA;master keys from two of the three different key groups in order to decrypt the file.&#xA;You can then decrypt the file the same way as with any other SOPS file:&#xA;&#xA;.. code:: bash&#xA;&#xA;    $ sops -d example.json&#xA;&#xA;Key service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are situations where you might want to run &lt;code&gt;sops&lt;/code&gt; on a machine that doesn&#39;t have direct access to encryption keys such as PGP keys. The &lt;code&gt;sops&lt;/code&gt; key service allows you to forward a socket so that &lt;code&gt;sops&lt;/code&gt; can access encryption keys stored on a remote machine. This is similar to GPG Agent, but more portable.&lt;/p&gt; &#xA;&lt;p&gt;SOPS uses a client-server approach to encrypting and decrypting the data key. By default, SOPS runs a local key service in-process. SOPS uses a key service client to send an encrypt or decrypt request to a key service, which then performs the operation. The requests are sent using gRPC and Protocol Buffers. The requests contain an identifier for the key they should perform the operation with, and the plaintext or encrypted data key. The requests do not contain any cryptographic keys, public or private.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING: the key service connection currently does not use any sort of authentication or encryption. Therefore, it is recommended that you make sure the connection is authenticated and encrypted in some other way, for example through an SSH tunnel.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whenever we try to encrypt or decrypt a data key, SOPS will try to do so first with the local key service (unless it&#39;s disabled), and if that fails, it will try all other remote key services until one succeeds.&lt;/p&gt; &#xA;&lt;p&gt;You can start a key service server by running &lt;code&gt;sops keyservice&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can specify the key services the &lt;code&gt;sops&lt;/code&gt; binary uses with &lt;code&gt;--keyservice&lt;/code&gt;. This flag can be specified more than once, so you can use multiple key services. The local key service can be disabled with &lt;code&gt;enable-local-keyservice=false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, to decrypt a file using both the local key service and the key service exposed on the unix socket located in &lt;code&gt;/tmp/sops.sock&lt;/code&gt;, you can run:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops --keyservice unix:///tmp/sops.sock -d file.yaml`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you only want to use the key service exposed on the unix socket located in &lt;code&gt;/tmp/sops.sock&lt;/code&gt; and not the local key service, you can run:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops --enable-local-keyservice=false --keyservice unix:///tmp/sops.sock -d file.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Auditing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Sometimes, users want to be able to tell what files were accessed by whom in an&#xA;environment they control. For this reason, SOPS can generate audit logs to&#xA;record activity on encrypted files. When enabled, SOPS will write a log entry&#xA;into a pre-configured PostgreSQL database when a file is decrypted. The log&#xA;includes a timestamp, the username SOPS is running as, and the file that was&#xA;decrypted.&#xA;&#xA;In order to enable auditing, you must first create the database and credentials&#xA;using the schema found in ``audit/schema.sql``. This schema defines the&#xA;tables that store the audit events and a role named ``sops`` that only has&#xA;permission to add entries to the audit event tables. The default password for&#xA;the role ``sops`` is ``sops``. You should change this password.&#xA;&#xA;Once you have created the database, you have to tell SOPS how to connect to it.&#xA;Because we don&#39;t want users of SOPS to be able to control auditing, the audit&#xA;configuration file location is not configurable, and must be at&#xA;``/etc/sops/audit.yaml``. This file should have strict permissions such&#xA;that only the root user can modify it.&#xA;&#xA;For example, to enable auditing to a PostgreSQL database named ``sops`` running&#xA;on localhost, using the user ``sops`` and the password ``sops``,&#xA;``/etc/sops/audit.yaml`` should have the following contents:&#xA;&#xA;.. code:: yaml&#xA;&#xA;    backends:&#xA;        postgres:&#xA;            - connection_string: &#34;postgres://sops:sops@localhost/sops?sslmode=verify-full&#34;&#xA;&#xA;&#xA;You can find more information on the ``connection_string`` format in the&#xA;`PostgreSQL docs &amp;lt;https://www.postgresql.org/docs/current/static/libpq-connect.html#libpq-connstring&amp;gt;`_.&#xA;&#xA;Under the ``postgres`` map entry in the above YAML is a list, so one can&#xA;provide more than one backend, and SOPS will log to all of them:&#xA;&#xA;.. code:: yaml&#xA;&#xA;    backends:&#xA;        postgres:&#xA;            - connection_string: &#34;postgres://sops:sops@localhost/sops?sslmode=verify-full&#34;&#xA;            - connection_string: &#34;postgres://sops:sops@remotehost/sops?sslmode=verify-full&#34;&#xA;&#xA;Saving Output to a File&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;code&gt;sops&lt;/code&gt; just dumps all the output to the standard output. We can use the &lt;code&gt;--output&lt;/code&gt; flag followed by a filename to save the output to the file specified. Beware using both &lt;code&gt;--in-place&lt;/code&gt; and &lt;code&gt;--output&lt;/code&gt; flags will result in an error.&lt;/p&gt; &#xA;&lt;p&gt;Passing Secrets to Other Processes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;In addition to writing secrets to standard output and to files on disk, ``sops``&#xA;has two commands for passing decrypted secrets to a new process: ``exec-env``&#xA;and ``exec-file``. These commands will place all output into the environment of&#xA;a child process and into a temporary file, respectively. For example, if a&#xA;program looks for credentials in its environment, ``exec-env`` can be used to&#xA;ensure that the decrypted contents are available only to this process and never&#xA;written to disk.&#xA;&#xA;.. code:: bash&#xA;&#xA;   # print secrets to stdout to confirm values&#xA;   $ sops -d out.json&#xA;   {&#xA;           &#34;database_password&#34;: &#34;jf48t9wfw094gf4nhdf023r&#34;,&#xA;           &#34;AWS_ACCESS_KEY_ID&#34;: &#34;AKIAIOSFODNN7EXAMPLE&#34;,&#xA;           &#34;AWS_SECRET_KEY&#34;: &#34;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&#34;&#xA;   }&#xA;&#xA;   # decrypt out.json and run a command&#xA;   # the command prints the environment variable and runs a script that uses it&#xA;   $ sops exec-env out.json &#39;echo secret: $database_password; ./database-import&#39;&#xA;   secret: jf48t9wfw094gf4nhdf023r&#xA;&#xA;   # launch a shell with the secrets available in its environment&#xA;   $ sops exec-env out.json &#39;sh&#39;&#xA;   sh-3.2# echo $database_password&#xA;   jf48t9wfw094gf4nhdf023r&#xA;&#xA;   # the secret is not accessible anywhere else&#xA;   sh-3.2$ exit&#xA;   $ echo your password: $database_password&#xA;   your password:&#xA;&#xA;&#xA;If the command you want to run only operates on files, you can use ``exec-file``&#xA;instead. By default ``sops`` will use a FIFO to pass the contents of the&#xA;decrypted file to the new program. Using a FIFO, secrets are only passed in&#xA;memory which has two benefits: the plaintext secrets never touch the disk, and&#xA;the child process can only read the secrets once. In contexts where this won&#39;t&#xA;work, eg platforms like Windows where FIFOs unavailable or secret files that need&#xA;to be available to the child process longer term, the ``--no-fifo`` flag can be&#xA;used to instruct ``sops`` to use a traditional temporary file that will get cleaned&#xA;up once the process is finished executing. ``exec-file`` behaves similar to&#xA;``find(1)`` in that ``{}`` is used as a placeholder in the command which will be&#xA;substituted with the temporary file path (whether a FIFO or an actual file).&#xA;&#xA;.. code:: bash&#xA;&#xA;   # operating on the same file as before, but as a file this time&#xA;   $ sops exec-file out.json &#39;echo your temporary file: {}; cat {}&#39;&#xA;   your temporary file: /tmp/.sops894650499/tmp-file&#xA;   {&#xA;           &#34;database_password&#34;: &#34;jf48t9wfw094gf4nhdf023r&#34;,&#xA;           &#34;AWS_ACCESS_KEY_ID&#34;: &#34;AKIAIOSFODNN7EXAMPLE&#34;,&#xA;           &#34;AWS_SECRET_KEY&#34;: &#34;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&#34;&#xA;   }&#xA;&#xA;   # launch a shell with a variable TMPFILE pointing to the temporary file&#xA;   $ sops exec-file --no-fifo out.json &#39;TMPFILE={} sh&#39;&#xA;   sh-3.2$ echo $TMPFILE&#xA;   /tmp/.sops506055069/tmp-file291138648&#xA;   sh-3.2$ cat $TMPFILE&#xA;   {&#xA;           &#34;database_password&#34;: &#34;jf48t9wfw094gf4nhdf023r&#34;,&#xA;           &#34;AWS_ACCESS_KEY_ID&#34;: &#34;AKIAIOSFODNN7EXAMPLE&#34;,&#xA;           &#34;AWS_SECRET_KEY&#34;: &#34;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&#34;&#xA;   }&#xA;   sh-3.2$ ./program --config $TMPFILE&#xA;   sh-3.2$ exit&#xA;&#xA;   # try to open the temporary file from earlier&#xA;   $ cat /tmp/.sops506055069/tmp-file291138648&#xA;   cat: /tmp/.sops506055069/tmp-file291138648: No such file or directory&#xA;&#xA;Additionally, on unix-like platforms, both ``exec-env`` and ``exec-file``&#xA;support dropping privileges before executing the new program via the&#xA;``--user &amp;lt;username&amp;gt;`` flag. This is particularly useful in cases where the&#xA;encrypted file is only readable by root, but the target program does not&#xA;need root privileges to function. This flag should be used where possible&#xA;for added security.&#xA;&#xA;To overwrite the default file name (``tmp-file``) in ``exec-file`` use the&#xA;``--filename &amp;lt;filename&amp;gt;`` parameter.&#xA;&#xA;.. code:: bash&#xA;&#xA;   # the encrypted file can&#39;t be read by the current user&#xA;   $ cat out.json&#xA;   cat: out.json: Permission denied&#xA;&#xA;   # execute sops as root, decrypt secrets, then drop privileges&#xA;   $ sudo sops exec-env --user nobody out.json &#39;sh&#39;&#xA;   sh-3.2$ echo $database_password&#xA;   jf48t9wfw094gf4nhdf023r&#xA;&#xA;   # dropped privileges, still can&#39;t load the original file&#xA;   sh-3.2$ id&#xA;   uid=4294967294(nobody) gid=4294967294(nobody) groups=4294967294(nobody)&#xA;   sh-3.2$ cat out.json&#xA;   cat: out.json: Permission denied&#xA;&#xA;Using the publish command&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;``sops publish $file`` publishes a file to a pre-configured destination (this lives in the sops&#xA;config file). Additionally, support re-encryption rules that work just like the creation rules.&#xA;&#xA;This command requires a ``.sops.yaml`` configuration file. Below is an example:&#xA;&#xA;.. code:: yaml&#xA;&#xA;   destination_rules:&#xA;      - s3_bucket: &#34;sops-secrets&#34;&#xA;        path_regex: s3/*&#xA;        recreation_rule:&#xA;           pgp: F69E4901EDBAD2D1753F8C67A64535C4163FB307&#xA;      - gcs_bucket: &#34;sops-secrets&#34;&#xA;        path_regex: gcs/*&#xA;        recreation_rule:&#xA;           pgp: F69E4901EDBAD2D1753F8C67A64535C4163FB307&#xA;      - vault_path: &#34;sops/&#34;&#xA;        vault_kv_mount_name: &#34;secret/&#34; # default&#xA;        vault_kv_version: 2 # default&#xA;        path_regex: vault/*&#xA;        omit_extensions: true&#xA;&#xA;The above configuration will place all files under ``s3/*`` into the S3 bucket ``sops-secrets``,&#xA;all files under ``gcs/*`` into the GCS bucket ``sops-secrets``, and the contents of all files under&#xA;``vault/*`` into Vault&#39;s KV store under the path ``secrets/sops/``. For the files that will be&#xA;published to S3 and GCS, it will decrypt them and re-encrypt them using the&#xA;``F69E4901EDBAD2D1753F8C67A64535C4163FB307`` pgp key.&#xA;&#xA;You would deploy a file to S3 with a command like: ``sops publish s3/app.yaml``&#xA;&#xA;To publish all files in selected directory recursively, you need to specify ``--recursive`` flag.&#xA;&#xA;If you don&#39;t want file extension to appear in destination secret path, use ``--omit-extensions``&#xA;flag or ``omit_extensions: true`` in the destination rule in ``.sops.yaml``.&#xA;&#xA;Publishing to Vault&#xA;*******************&#xA;&#xA;There are a few settings for Vault that you can place in your destination rules. The first&#xA;is ``vault_path``, which is required. The others are optional, and they are&#xA;``vault_address``, ``vault_kv_mount_name``, ``vault_kv_version``.&#xA;&#xA;``sops`` uses the official Vault API provided by Hashicorp, which makes use of `environment&#xA;variables &amp;lt;https://www.vaultproject.io/docs/commands/#environment-variables&amp;gt;`_ for&#xA;configuring the client.&#xA;&#xA;``vault_kv_mount_name`` is used if your Vault KV is mounted somewhere other than ``secret/``.&#xA;``vault_kv_version`` supports ``1`` and ``2``, with ``2`` being the default.&#xA;&#xA;If destination secret path already exists in Vault and contains same data as the source file, it&#xA;will be skipped.&#xA;&#xA;Below is an example of publishing to Vault (using token auth with a local dev instance of Vault).&#xA;&#xA;.. code:: bash&#xA;&#xA;   $ export VAULT_TOKEN=...&#xA;   $ export VAULT_ADDR=&#39;http://127.0.0.1:8200&#39;&#xA;   $ sops -d vault/test.yaml&#xA;   example_string: bar&#xA;   example_number: 42&#xA;   example_map:&#xA;       key: value&#xA;   $ sops publish vault/test.yaml&#xA;   uploading /home/user/sops_directory/vault/test.yaml to http://127.0.0.1:8200/v1/secret/data/sops/test.yaml ? (y/n): y&#xA;   $ vault kv get secret/sops/test.yaml&#xA;   ====== Metadata ======&#xA;   Key              Value&#xA;   ---              -----&#xA;   created_time     2019-07-11T03:32:17.074792017Z&#xA;   deletion_time    n/a&#xA;   destroyed        false&#xA;   version          3&#xA;&#xA;   ========= Data =========&#xA;   Key               Value&#xA;   ---               -----&#xA;   example_map       map[key:value]&#xA;   example_number    42&#xA;   example_string    bar&#xA;&#xA;&#xA;Important information on types&#xA;------------------------------&#xA;&#xA;YAML and JSON type extensions&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;``sops`` uses the file extension to decide which encryption method to use on the file&#xA;content. ``YAML``, ``JSON``, ``ENV``, and ``INI`` files are treated as trees of data, and key/values are&#xA;extracted from the files to only encrypt the leaf values. The tree structure is also&#xA;used to check the integrity of the file.&#xA;&#xA;Therefore, if a file is encrypted using a specific format, it need to be decrypted&#xA;in the same format. The easiest way to achieve this is to conserve the original file&#xA;extension after encrypting a file. For example:&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops -e -i myfile.json&#xA;&#x9;$ sops -d myfile.json&#xA;&#xA;If you want to change the extension of the file once encrypted, you need to provide&#xA;sops with the ``--input-type`` flag upon decryption. For example:&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops -e myfile.json &amp;gt; myfile.json.enc&#xA;&#xA;&#x9;$ sops -d --input-type json myfile.json.enc&#xA;&#xA;When operating on stdin, use the ``--input-type`` and ``--output-type`` flags as follows:&#xA;&#xA;.. code:: bash&#xA;&#xA;    $ cat myfile.json | sops --input-type json --output-type json -d /dev/stdin&#xA;&#xA;YAML anchors&#xA;~~~~~~~~~~~~&#xA;``sops`` only supports a subset of ``YAML``&#39;s many types. Encrypting YAML files that&#xA;contain strings, numbers and booleans will work fine, but files that contain anchors&#xA;will not work, because the anchors redefine the structure of the file at load time.&#xA;&#xA;This file will not work in ``sops``:&#xA;&#xA;.. code:: yaml&#xA;&#xA;&#x9;bill-to:  &amp;amp;id001&#xA;&#x9;    street: |&#xA;&#x9;        123 Tornado Alley&#xA;&#x9;        Suite 16&#xA;&#x9;    city:   East Centerville&#xA;&#x9;    state:  KS&#xA;&#xA;&#x9;ship-to:  *id001&#xA;&#xA;``sops`` uses the path to a value as additional data in the AEAD encryption, and thus&#xA;dynamic paths generated by anchors break the authentication step.&#xA;&#xA;JSON and TEXT file types do not support anchors and thus have no such limitation.&#xA;&#xA;YAML Streams&#xA;~~~~~~~~~~~~&#xA;&#xA;``YAML`` supports having more than one &#34;document&#34; in a single file, while&#xA;formats like ``JSON`` do not. ``sops`` is able to handle both. This means the&#xA;following multi-document will be encrypted as expected:&#xA;&#xA;.. code:: yaml&#xA;&#xA;&#x9;---&#xA;&#x9;data: foo&#xA;&#x9;---&#xA;&#x9;data: bar&#xA;&#xA;Note that the ``sops`` metadata, i.e. the hash, etc, is computed for the physical&#xA;file rather than each internal &#34;document&#34;.&#xA;&#xA;Top-level arrays&#xA;~~~~~~~~~~~~~~~~&#xA;``YAML`` and ``JSON`` top-level arrays are not supported, because ``sops``&#xA;needs a top-level ``sops`` key to store its metadata.&#xA;&#xA;This file will not work in sops:&#xA;&#xA;.. code:: yaml&#xA;&#xA;&#x9;---&#xA;&#x9;  - some&#xA;&#x9;  - array&#xA;&#x9;  - elements&#xA;&#xA;But this one will work because the ``sops`` key can be added at the same level as the&#xA;``data`` key.&#xA;&#xA;.. code:: yaml&#xA;&#xA;&#x9;data:&#xA;&#x9;  - some&#xA;&#x9;  - array&#xA;&#x9;  - elements&#xA;&#xA;Similarly, with ``JSON`` arrays, this document will not work:&#xA;&#xA;.. code:: json&#xA;&#xA;&#x9;[&#xA;&#x9;  &#34;some&#34;,&#xA;&#x9;  &#34;array&#34;,&#xA;&#x9;  &#34;elements&#34;&#xA;&#x9;]&#xA;&#xA;&#xA;But this one will work just fine:&#xA;&#xA;.. code:: json&#xA;&#xA;&#x9;{&#xA;&#x9;  &#34;data&#34;: [&#xA;&#x9;    &#34;some&#34;,&#xA;&#x9;    &#34;array&#34;,&#xA;&#x9;    &#34;elements&#34;&#xA;&#x9;  ]&#xA;&#x9;}&#xA;&#xA;&#xA;Examples&#xA;--------&#xA;&#xA;Take a look into the `examples &amp;lt;https://github.com/mozilla/sops/tree/master/examples&amp;gt;`_ folder for detailed use cases of sops in a CI environment. The section below describes specific tips for common use cases.&#xA;&#xA;Creating a new file&#xA;~~~~~~~~~~~~~~~~~~~&#xA;&#xA;The command below creates a new file with a data key encrypted by KMS and PGP.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops --kms &#34;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500&#34; --pgp C9CAB0AF1165060DB58D6D6B2653B624D620786D /path/to/new/file.yaml&#xA;&#xA;Encrypting an existing file&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;Similar to the previous command, we tell sops to use one KMS and one PGP key.&#xA;The path points to an existing cleartext file, so we give sops flag ``-e`` to&#xA;encrypt the file, and redirect the output to a destination file.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ export SOPS_KMS_ARN=&#34;arn:aws:kms:us-west-2:927034868273:key/fe86dd69-4132-404c-ab86-4269956b4500&#34;&#xA;&#x9;$ export SOPS_PGP_FP=&#34;C9CAB0AF1165060DB58D6D6B2653B624D620786D&#34;&#xA;&#x9;$ sops -e /path/to/existing/file.yaml &amp;gt; /path/to/new/encrypted/file.yaml&#xA;&#xA;Decrypt the file with ``-d``.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops -d /path/to/new/encrypted/file.yaml&#xA;&#xA;Encrypt or decrypt a file in place&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rather than redirecting the output of &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;-d&lt;/code&gt;, sops can replace the original file after encrypting or decrypting it.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# file.yaml is in cleartext&#xA;$ sops -e -i /path/to/existing/file.yaml&#xA;# file.yaml is now encrypted&#xA;$ sops -d -i /path/to/existing/file.yaml&#xA;# file.yaml is back in cleartext&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encrypting binary files&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;``sops`` primary use case is encrypting YAML and JSON configuration files, but it&#xA;also has the ability to manage binary files. When encrypting a binary, sops will&#xA;read the data as bytes, encrypt it, store the encrypted base64 under&#xA;``tree[&#39;data&#39;]`` and write the result as JSON.&#xA;&#xA;Note that the base64 encoding of encrypted data can actually make the encrypted&#xA;file larger than the cleartext one.&#xA;&#xA;In-place encryption/decryption also works on binary files.&#xA;&#xA;.. code::&#xA;&#xA;&#x9;$ dd if=/dev/urandom of=/tmp/somerandom bs=1024&#xA;&#x9;count=512&#xA;&#x9;512+0 records in&#xA;&#x9;512+0 records out&#xA;&#x9;524288 bytes (524 kB) copied, 0.0466158 s, 11.2 MB/s&#xA;&#xA;&#x9;$ sha512sum /tmp/somerandom&#xA;&#x9;9589bb20280e9d381f7a192000498c994e921b3cdb11d2ef5a986578dc2239a340b25ef30691bac72bdb14028270828dad7e8bd31e274af9828c40d216e60cbe /tmp/somerandom&#xA;&#xA;&#x9;$ sops -e -i /tmp/somerandom&#xA;&#x9;please wait while a data encryption key is being generated and stored securely&#xA;&#xA;&#x9;$ sops -d -i /tmp/somerandom&#xA;&#xA;&#x9;$ sha512sum /tmp/somerandom&#xA;&#x9;9589bb20280e9d381f7a192000498c994e921b3cdb11d2ef5a986578dc2239a340b25ef30691bac72bdb14028270828dad7e8bd31e274af9828c40d216e60cbe /tmp/somerandom&#xA;&#xA;Extract a sub-part of a document tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sops&lt;/code&gt; can extract a specific part of a YAML or JSON document, by provided the path in the &lt;code&gt;--extract&lt;/code&gt; command line flag. This is useful to extract specific values, like keys, without needing an extra parser.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops -d --extract &#39;[&#34;app2&#34;][&#34;key&#34;]&#39; ~/git/svc/sops/example.yaml&#xA;-----BEGIN RSA PRIVATE KEY-----&#xA;MIIBPAIBAAJBAPTMNIyHuZtpLYc7VsHQtwOkWYobkUblmHWRmbXzlAX6K8tMf3Wf&#xA;ImcbNkqAKnELzFAPSBeEMhrBN0PyOC9lYlMCAwEAAQJBALXD4sjuBn1E7Y9aGiMz&#xA;bJEBuZJ4wbhYxomVoQKfaCu+kH80uLFZKoSz85/ySauWE8LgZcMLIBoiXNhDKfQL&#xA;vHECIQD6tCG9NMFWor69kgbX8vK5Y+QL+kRq+9HK6yZ9a+hsLQIhAPn4Ie6HGTjw&#xA;fHSTXWZpGSan7NwTkIu4U5q2SlLjcZh/AiEA78NYRRBwGwAYNUqzutGBqyXKUl4u&#xA;Erb0xAEyVV7e8J0CIQC8VBY8f8yg+Y7Kxbw4zDYGyb3KkXL10YorpeuZR4LuQQIg&#xA;bKGPkMM4w5blyE1tqGN0T7sJwEx+EUOgacRNqM2ljVA=&#xA;-----END RSA PRIVATE KEY-----&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tree path syntax uses regular python dictionary syntax, without the variable name. Extract keys by naming them, and array elements by numbering them.&lt;/p&gt; &#xA;&lt;p&gt;.. code:: bash&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sops -d --extract &#39;[&#34;an_array&#34;][1]&#39; ~/git/svc/sops/example.yaml&#xA;secretuser2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a sub-part in a document tree&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;``sops`` can set a specific part of a YAML or JSON document, by providing&#xA;the path and value in the ``--set`` command line flag. This is useful to&#xA;set specific values, like keys, without needing an editor.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops --set &#39;[&#34;app2&#34;][&#34;key&#34;] &#34;app2keystringvalue&#34;&#39;  ~/git/svc/sops/example.yaml&#xA;&#xA;The tree path syntax uses regular python dictionary syntax, without the&#xA;variable name. Set to keys by naming them, and array elements by&#xA;numbering them.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops --set &#39;[&#34;an_array&#34;][1] &#34;secretuser2&#34;&#39; ~/git/svc/sops/example.yaml&#xA;&#xA;The value must be formatted as json.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops --set &#39;[&#34;an_array&#34;][1] {&#34;uid1&#34;:null,&#34;uid2&#34;:1000,&#34;uid3&#34;:[&#34;bob&#34;]}&#39; ~/git/svc/sops/example.yaml&#xA;&#xA;Showing diffs in cleartext in git&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;You most likely want to store encrypted files in a version controlled repository.&#xA;Sops can be used with git to decrypt files when showing diffs between versions.&#xA;This is very handy for reviewing changes or visualizing history.&#xA;&#xA;To configure sops to decrypt files during diff, create a ``.gitattributes`` file&#xA;at the root of your repository that contains a filter and a command.&#xA;&#xA;.. code::&#xA;&#xA;&#x9;*.yaml diff=sopsdiffer&#xA;&#xA;Here we only care about YAML files. ``sopsdiffer`` is an arbitrary name that we map&#xA;to a sops command in the git configuration file of the repository.&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ git config diff.sopsdiffer.textconv &#34;sops -d&#34;&#xA;&#xA;&#x9;$ grep -A 1 sopsdiffer .git/config&#xA;&#x9;[diff &#34;sopsdiffer&#34;]&#xA;&#x9;&#x9;textconv = &#34;sops -d&#34;&#xA;&#xA;With this in place, calls to ``git diff`` will decrypt both previous and current&#xA;versions of the target file prior to displaying the diff. And it even works with&#xA;git client interfaces, because they call git diff under the hood!&#xA;&#xA;Encrypting only parts of a file&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;Note: this only works on YAML and JSON files, not on BINARY files.&#xA;&#xA;By default, ``sops`` encrypts all the values of a YAML or JSON file and leaves the&#xA;keys in cleartext. In some instances, you may want to exclude some values from&#xA;being encrypted. This can be accomplished by adding the suffix **_unencrypted**&#xA;to any key of a file. When set, all values underneath the key that set the&#xA;**_unencrypted** suffix will be left in cleartext.&#xA;&#xA;Note that, while in cleartext, unencrypted content is still added to the&#xA;checksum of the file, and thus cannot be modified outside of sops without&#xA;breaking the file integrity check.&#xA;&#xA;The unencrypted suffix can be set to a different value using the&#xA;``--unencrypted-suffix`` option.&#xA;&#xA;Conversely, you can opt in to only encrypt some values in a YAML or JSON file,&#xA;by adding a chosen suffix to those keys and passing it to the ``--encrypted-suffix`` option.&#xA;&#xA;A third method is to use the ``--encrypted-regex`` which will only encrypt values under&#xA;keys that match the supplied regular expression.  For example, this command:&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops --encrypt --encrypted-regex &#39;^(data|stringData)$&#39; k8s-secrets.yaml&#xA;&#xA;will encrypt the values under the ``data`` and ``stringData`` keys in a YAML file&#xA;containing kubernetes secrets.  It will not encrypt other values that help you to&#xA;navigate the file, like ``metadata`` which contains the secrets&#39; names.&#xA;&#xA;Conversely, you can opt in to only left certain keys without encrypting by using the &#xA;``--unencrypted-regex`` option, which will leave the values unencrypted of those keys &#xA;that match the supplied regular expression. For example, this command:&#xA;&#xA;.. code:: bash&#xA;&#xA;  $ sops --encrypt --unencrypted-regex &#39;^(description|metadata)$&#39; k8s-secrets.yaml&#xA;&#xA;will not encrypt the values under the ``description`` and ``metadata`` keys in a YAML file&#xA;containing kubernetes secrets, while encrypting everything else.&#xA;&#xA;You can also specify these options in the ``.sops.yaml`` config file.&#xA;&#xA;Note: these four options ``--unencrypted-suffix``, ``--encrypted-suffix``, ``--encrypted-regex`` and ``--unencrypted-regex`` are&#xA;mutually exclusive and cannot all be used in the same file.&#xA;&#xA;Encryption Protocol&#xA;-------------------&#xA;&#xA;When sops creates a file, it generates a random 256 bit data key and asks each&#xA;KMS and PGP master key to encrypt the data key. The encrypted version of the data&#xA;key is stored in the ``sops`` metadata under ``sops.kms`` and ``sops.pgp``.&#xA;&#xA;For KMS:&#xA;&#xA;.. code:: yaml&#xA;&#xA;    sops:&#xA;        kms:&#xA;        -   enc: CiC6yCOtzsnFhkfdIslYZ0bAf//gYLYCmIu87B3sy/5yYxKnAQEBAQB4usgjrc7JxYZH3SLJWGdGwH//4GC2ApiLvOwd7Mv+cmMAAAB+MHwGCSqGSIb3DQEHBqBvMG0CAQAwaAYJKoZIhvcNAQcBMB4GCWCGSAFlAwQBLjARBAyGdRODuYMHbA8Ozj8CARCAO7opMolPJUmBXd39Zlp0L2H9fzMKidHm1vvaF6nNFq0ClRY7FlIZmTm4JfnOebPseffiXFn9tG8cq7oi&#xA;            enc_ts: 1439568549.245995&#xA;            arn: arn:aws:kms:us-east-1:656532927350:key/920aff2e-c5f1-4040-943a-047fa387b27e&#xA;&#xA;For PGP:&#xA;&#xA;.. code:: yaml&#xA;&#xA;    sops:&#xA;        pgp:&#xA;        -   fp: 85D77543B3D624B63CEA9E6DBC17301B491B3F21&#xA;            created_at: 1441570391.930042&#xA;            enc: |&#xA;                -----BEGIN PGP MESSAGE-----&#xA;                Version: GnuPG v1&#xA;&#xA;                hQIMA0t4uZHfl9qgAQ//UvGAwGePyHuf2/zayWcloGaDs0MzI+zw6CmXvMRNPUsA&#xA;                pAgRKczJmDu4+XzN+cxX5Iq9xEWIbny9B5rOjwTXT3qcUYZ4Gkzbq4MWkjuPp/Iv&#xA;                qO4MJaYzoH5YxC4YORQ2LvzhA2YGsCzYnljmatGEUNg01yJ6r5mwFwDxl4Nc80Cn&#xA;                RwnHuGExK8j1jYJZu/juK1qRbuBOAuruIPPWVdFB845PA7waacG1IdUW3ZtBkOy3&#xA;                O0BIfG2ekRg0Nik6sTOhDUA+l2bewCcECI8FYCEjwHm9Sg5cxmP2V5m1mby+uKAm&#xA;                kewaoOyjbmV1Mh3iI1b/AQMr+/6ZE9MT2KnsoWosYamFyjxV5r1ZZM7cWKnOT+tu&#xA;                KOvGhTV1TeOfVpajNTNwtV/Oyh3mMLQ0F0HgCTqomQVqw5+sj7OWAASuD3CU/dyo&#xA;                pcmY5Qe0TNL1JsMNEH8LJDqSh+E0hsUxdY1ouVsg3ysf6mdM8ciWb3WRGxih1Vmf&#xA;                unfLy8Ly3V7ZIC8EHV8aLJqh32jIZV4i2zXIoO4ZBKrudKcECY1C2+zb/TziVAL8&#xA;                qyPe47q8gi1rIyEv5uirLZjgpP+JkDUgoMnzlX334FZ9pWtQMYW4Y67urAI4xUq6&#xA;                /q1zBAeHoeeeQK+YKDB7Ak/Y22YsiqQbNp2n4CKSKAE4erZLWVtDvSp+49SWmS/S&#xA;                XgGi+13MaXIp0ecPKyNTBjF+NOw/I3muyKr8EbDHrd2XgIT06QXqjYLsCb1TZ0zm&#xA;                xgXsOTY3b+ONQ2zjhcovanDp7/k77B+gFitLYKg4BLZsl7gJB12T8MQnpfSmRT4=&#xA;                =oJgS&#xA;                -----END PGP MESSAGE-----&#xA;&#xA;``sops`` then opens a text editor on the newly created file. The user adds data to the&#xA;file and saves it when done.&#xA;&#xA;Upon save, sops browses the entire file as a key/value tree. Every time sops&#xA;encounters a leaf value (a value that does not have children), it encrypts the&#xA;value with AES256_GCM using the data key and a 256 bit random initialization&#xA;vector.&#xA;&#xA;Each file uses a single data key to encrypt all values of a document, but each&#xA;value receives a unique initialization vector and has unique authentication data.&#xA;&#xA;Additional data is used to guarantee the integrity of the encrypted data&#xA;and of the tree structure: when encrypting the tree, key names are concatenated&#xA;into a byte string that is used as AEAD additional data (aad) when encrypting&#xA;values. We expect that keys do not carry sensitive information, and&#xA;keeping them in cleartext allows for better diff and overall readability.&#xA;&#xA;Any valid KMS or PGP master key can later decrypt the data key and access the&#xA;data.&#xA;&#xA;Multiple master keys allow for sharing encrypted files without sharing master&#xA;keys, and provide a disaster recovery solution. The recommended way to use sops&#xA;is to have two KMS master keys in different regions and one PGP public key with&#xA;the private key stored offline. If, by any chance, both KMS master keys are&#xA;lost, you can always recover the encrypted data using the PGP private key.&#xA;&#xA;Message Authentication Code&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;In addition to authenticating branches of the tree using keys as additional&#xA;data, sops computes a MAC on all the values to ensure that no value has been&#xA;added or removed fraudulently. The MAC is stored encrypted with AES_GCM and&#xA;the data key under tree-&amp;gt;`sops`-&amp;gt;`mac`.&#xA;&#xA;Motivation&#xA;----------&#xA;&#xA;Automating the distribution of secrets and credentials to components of an&#xA;infrastructure is a hard problem. We know how to encrypt secrets and share them&#xA;between humans, but extending that trust to systems is difficult. Particularly&#xA;when these systems follow devops principles and are created and destroyed&#xA;without human intervention. The issue boils down to establishing the initial&#xA;trust of a system that just joined the infrastructure, and providing it access&#xA;to the secrets it needs to configure itself.&#xA;&#xA;The initial trust&#xA;~~~~~~~~~~~~~~~~~&#xA;&#xA;In many infrastructures, even highly dynamic ones, the initial trust is&#xA;established by a human. An example is seen in Puppet by the way certificates are&#xA;issued: when a new system attempts to join a Puppetmaster, an administrator&#xA;must, by default, manually approve the issuance of the certificate the system&#xA;needs. This is cumbersome, and many puppetmasters are configured to auto-sign&#xA;new certificates to work around that issue. This is obviously not recommended&#xA;and far from ideal.&#xA;&#xA;AWS provides a more flexible approach to trusting new systems. It uses a&#xA;powerful mechanism of roles and identities. In AWS, it is possible to verify&#xA;that a new system has been granted a specific role at creation, and it is&#xA;possible to map that role to specific resources. Instead of trusting new systems&#xA;directly, the administrator trusts the AWS permission model and its automation&#xA;infrastructure. As long as AWS keys are safe, and the AWS API is secure, we can&#xA;assume that trust is maintained and systems are who they say they are.&#xA;&#xA;KMS, Trust and secrets distribution&#xA;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;Using the AWS trust model, we can create fine grained access controls to&#xA;Amazon&#39;s Key Management Service (KMS). KMS is a service that encrypts and&#xA;decrypts data with AES_GCM, using keys that are never visible to users of the&#xA;service. Each KMS master key has a set of role-based access controls, and&#xA;individual roles are permitted to encrypt or decrypt using the master key. KMS&#xA;helps solve the problem of distributing keys, by shifting it into an access&#xA;control problem that can be solved using AWS&#39;s trust model.&#xA;&#xA;Operational requirements&#xA;~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;When Mozilla&#39;s Services Operations team started revisiting the issue of&#xA;distributing secrets to EC2 instances, we set a goal to store these secrets&#xA;encrypted until the very last moment, when they need to be decrypted on target&#xA;systems. Not unlike many other organizations that operate sufficiently complex&#xA;automation, we found this to be a hard problem with a number of prerequisites:&#xA;&#xA;1. Secrets must be stored in YAML files for easy integration into hiera&#xA;&#xA;2. Secrets must be stored in GIT, and when a new CloudFormation stack is&#xA;   built, the current HEAD is pinned to the stack. (This allows secrets to&#xA;   be changed in GIT without impacting the current stack that may&#xA;   autoscale).&#xA;&#xA;3. Entries must be encrypted separately. Encrypting entire files as blobs makes&#xA;   git conflict resolution almost impossible. Encrypting each entry&#xA;   separately is much easier to manage.&#xA;&#xA;4. Secrets must always be encrypted on disk (admin laptop, upstream&#xA;   git repo, jenkins and S3) and only be decrypted on the target&#xA;   systems&#xA;&#xA;SOPS can be used to encrypt YAML, JSON and BINARY files. In BINARY mode, the&#xA;content of the file is treated as a blob, the same way PGP would encrypt an&#xA;entire file. In YAML and JSON modes, however, the content of the file is&#xA;manipulated as a tree where keys are stored in cleartext, and values are&#xA;encrypted. hiera-eyaml does something similar, and over the years we learned&#xA;to appreciate its benefits, namely:&#xA;&#xA;* diffs are meaningful. If a single value of a file is modified, only that&#xA;  value will show up in the diff. The diff is still limited to only showing&#xA;  encrypted data, but that information is already more granular that&#xA;  indicating that an entire file has changed.&#xA;&#xA;* conflicts are easier to resolve. If multiple users are working on the&#xA;  same encrypted files, as long as they don&#39;t modify the same values,&#xA;  changes are easy to merge. This is an improvement over the PGP&#xA;  encryption approach where unsolvable conflicts often happen when&#xA;  multiple users work on the same file.&#xA;&#xA;OpenPGP integration&#xA;~~~~~~~~~~~~~~~~~~~&#xA;&#xA;OpenPGP gets a lot of bad press for being an outdated crypto protocol, and while&#xA;true, what really made us look for alternatives is the difficulty of managing and&#xA;distributing keys to systems. With KMS, we manage permissions to an API, not keys,&#xA;and that&#39;s a lot easier to do.&#xA;&#xA;But PGP is not dead yet, and we still rely on it heavily as a backup solution:&#xA;all our files are encrypted with KMS and with one PGP public key, with its&#xA;private key stored securely for emergency decryption in the event that we lose&#xA;all our KMS master keys.&#xA;&#xA;SOPS can be used without KMS entirely, the same way you would use an encrypted&#xA;PGP file: by referencing the pubkeys of each individual who has access to the file.&#xA;It can easily be done by providing sops with a comma-separated list of public keys&#xA;when creating a new file:&#xA;&#xA;.. code:: bash&#xA;&#xA;&#x9;$ sops --pgp &#34;E60892BB9BD89A69F759A1A0A3D652173B763E8F,84050F1D61AF7C230A12217687DF65059EF093D3,85D77543B3D624B63CEA9E6DBC17301B491B3F21&#34; mynewfile.yaml&#xA;&#xA;Threat Model&#xA;------------&#xA;&#xA;The security of the data stored using sops is as strong as the weakest&#xA;cryptographic mechanism. Values are encrypted using AES256_GCM which is the&#xA;strongest symmetric encryption algorithm known today. Data keys are encrypted&#xA;in either KMS, which also uses AES256_GCM, or PGP which uses either RSA or&#xA;ECDSA keys.&#xA;&#xA;Going from the most likely to the least likely, the threats are as follows:&#xA;&#xA;Compromised AWS credentials grant access to KMS master key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An attacker with access to an AWS console can grant itself access to one of the KMS master keys used to encrypt a sops data key. This threat should be mitigated by protecting AWS accesses with strong controls, such as multi-factor authentication, and also by performing regular audits of permissions granted to AWS users.&lt;/p&gt; &#xA;&lt;p&gt;Compromised PGP key&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;PGP keys are routinely mishandled, either because owners copy them from&#xA;machine to machine, or because the key is left forgotten on an unused machine&#xA;an attacker gains access to. When using PGP encryption, sops users should take&#xA;special care of PGP private keys, and store them on smart cards or offline&#xA;as often as possible.&#xA;&#xA;Factorized RSA key&#xA;~~~~~~~~~~~~~~~~~~&#xA;&#xA;sops doesn&#39;t apply any restriction on the size or type of PGP keys. A weak PGP&#xA;keys, for example 512 bits RSA, could be factorized by an attacker to gain&#xA;access to the private key and decrypt the data key. Users of sops should rely&#xA;on strong keys, such as 2048+ bits RSA keys, or 256+ bits ECDSA keys.&#xA;&#xA;Weak AES cryptography&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A vulnerability in AES256_GCM could potentially leak the data key or the KMS master key used by a sops encrypted file. While no such vulnerability exists today, we recommend that users keep their encrypted files reasonably private.&lt;/p&gt; &#xA;&lt;h2&gt;Backward compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;sops&lt;/code&gt; will remain backward compatible on the major version, meaning that all improvements brought to the 1.X and 2.X branches (current) will maintain the file format introduced in &lt;strong&gt;1.0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Please report security issues to security at mozilla dot org, or by using one of the contact method available here: &lt;code&gt;https://www.mozilla.org/en-US/security/#For_Developers &amp;lt;https://www.mozilla.org/en-US/security/#For_Developers&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Mozilla Public License Version 2.0&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;The core team is composed of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AJ Banhken @ajvb&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The original authors were:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adrian Utrilla @autrilla&lt;/li&gt; &#xA; &lt;li&gt;Julien Vehent @jvehent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And a whole bunch of &lt;code&gt;contributors &amp;lt;https://github.com/mozilla/sops/graphs/contributors&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;sops&lt;/code&gt; was inspired by &lt;code&gt;hiera-eyaml &amp;lt;https://github.com/TomPoulton/hiera-eyaml&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;credstash &amp;lt;https://github.com/LuminalOSS/credstash&amp;gt;&lt;/code&gt;&lt;/em&gt; , &lt;code&gt;sneaker &amp;lt;https://github.com/codahale/sneaker&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;password store &amp;lt;http://www.passwordstore.org/&amp;gt;&lt;/code&gt;&lt;/em&gt; and too many years managing PGP encrypted files by hand...&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prebid/prebid-server</title>
    <updated>2023-07-01T01:36:49Z</updated>
    <id>tag:github.com,2023-07-01:/prebid/prebid-server</id>
    <link href="https://github.com/prebid/prebid-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Server side component to offload prebid processing to the cloud&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/prebid/prebid-server/actions/workflows/validate.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/prebid/prebid-server/validate.yml?branch=master&amp;amp;style=flat-square&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/prebid/prebid-server&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/prebid/prebid-server?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/prebid/prebid-server?style=flat-square&#34; alt=&#34;Go Version&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Prebid Server&lt;/h1&gt; &#xA;&lt;p&gt;Prebid Server is an open source implementation of Server-Side Header Bidding. It is managed by &lt;a href=&#34;http://prebid.org/overview/what-is-prebid-org.html&#34;&gt;Prebid.org&lt;/a&gt;, and upholds the principles from the &lt;a href=&#34;http://prebid.org/wrapper_code_of_conduct.html&#34;&gt;Prebid Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project does not support the same set of Bidders as Prebid.js, although there is overlap. The current set can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/prebid/prebid-server/master/adapters&#34;&gt;adapters&lt;/a&gt; package. If you don&#39;t see the one you want, feel free to &lt;a href=&#34;https://docs.prebid.org/prebid-server/developers/add-new-bidder-go.html&#34;&gt;contribute it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prebid.org/overview/intro.html&#34;&gt;What is Prebid?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.prebid.org/prebid-server/overview/prebid-server-overview.html&#34;&gt;Prebid Server Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://prebid.org/dev-docs/pbs-bidders.html&#34;&gt;Current Bidders&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please consider &lt;a href=&#34;https://docs.prebid.org/prebid-server/hosting/pbs-hosting.html#optional-registration&#34;&gt;registering your Prebid Server&lt;/a&gt; to get on the mailing list for updates, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First install &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go&lt;/a&gt; version 1.18 or newer.&lt;/p&gt; &#xA;&lt;p&gt;Note that prebid-server is using &lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;Go modules&lt;/a&gt;. We officially support the most recent two major versions of the Go runtime. However, if you&#39;d like to use a version &amp;lt;1.13 and are inside GOPATH &lt;code&gt;GO111MODULE&lt;/code&gt; needs to be set to &lt;code&gt;GO111MODULE=on&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Download and prepare Prebid Server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd YOUR_DIRECTORY&#xA;git clone https://github.com/prebid/prebid-server src/github.com/prebid/prebid-server&#xA;cd src/github.com/prebid/prebid-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the automated tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./validate.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or just run the server locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build .&#xA;./prebid-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Load the landing page in your browser at &lt;code&gt;http://localhost:8000/&lt;/code&gt;. For the full API reference, see &lt;a href=&#34;https://docs.prebid.org/prebid-server/endpoints/pbs-endpoint-overview.html&#34;&gt;the endpoint documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Go Modules&lt;/h2&gt; &#xA;&lt;p&gt;The packages within this repository are intended to be used as part of the Prebid Server compiled binary. If you choose to import Prebid Server packages in other projects, please understand we make no promises on the stability of exported types.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to &lt;a href=&#34;https://docs.prebid.org/prebid-server/developers/add-new-bidder-go.html&#34;&gt;add an adapter&lt;/a&gt;? Found a bug? Great!&lt;/p&gt; &#xA;&lt;p&gt;Report bugs, request features, and suggest improvements &lt;a href=&#34;https://github.com/prebid/prebid-server/issues&#34;&gt;on Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or better yet, &lt;a href=&#34;https://github.com/prebid/prebid-server/compare&#34;&gt;open a pull request&lt;/a&gt; with the changes you&#39;d like to see.&lt;/p&gt; &#xA;&lt;h2&gt;IDE Recommendations&lt;/h2&gt; &#xA;&lt;p&gt;The quickest way to start developing Prebid Server in a reproducible environment isolated from your host OS is by using Visual Studio Code with &lt;a href=&#34;https://raw.githubusercontent.com/prebid/prebid-server/master/devcontainer.md&#34;&gt;Remote Container Setup&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>