<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-03T01:31:51Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dagu-org/dagu</title>
    <updated>2025-06-03T01:31:51Z</updated>
    <id>tag:github.com,2025-06-03:/dagu-org/dagu</id>
    <link href="https://github.com/dagu-org/dagu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A compact, portable, and language-agnostic workflow engine. It aims to solve greater problems.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/assets/images/dagu-logo.webp&#34; width=&#34;960&#34; alt=&#34;dagu-logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/dagu-org/dagu&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/dagu-org/dagu&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/dagu-org/dagu&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/dagu-org/dagu/branch/main/graph/badge.svg?token=CODZQP61J2&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/dagu-org/dagu/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/dagu-org/dagu.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/dagu-org/dagu&#34;&gt; &lt;img src=&#34;https://godoc.org/github.com/dagu-org/dagu?status.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://github.com/dagu-org/dagu/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://dagu.readthedocs.io/en/latest/installation.html&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://discord.gg/gpahPUjGRk&#34;&gt;Community&lt;/a&gt; | &lt;a href=&#34;https://dagu.readthedocs.io/en/latest/quickstart.html&#34;&gt;Quick Start&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;&lt;b&gt;Dagu&lt;/b&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🚀 Version 1.17.0-beta Available - Significant Improvements &amp;amp; New Features&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re excited to announce the beta release of Dagu 1.17.0! This release brings many improvements and new features while maintaining the core stability you rely on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key Features in 1.17.0:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎯 &lt;strong&gt;Improved Performance&lt;/strong&gt;: Refactored execution history data for more performant history lookup&lt;/li&gt; &#xA; &lt;li&gt;🔄 &lt;strong&gt;Hierarchical Execution&lt;/strong&gt;: Added capability for nested DAG execution&lt;/li&gt; &#xA; &lt;li&gt;🎨 &lt;strong&gt;Enhanced Web UI&lt;/strong&gt;: Overall UI improvements with better user experience&lt;/li&gt; &#xA; &lt;li&gt;📊 &lt;strong&gt;Advanced History Search&lt;/strong&gt;: New execution history page with date-range and status filters (&lt;a href=&#34;https://github.com/dagu-org/dagu/issues/933&#34;&gt;#933&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;🐛 &lt;strong&gt;Better Debugging&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Display actual results of precondition evaluations (&lt;a href=&#34;https://github.com/dagu-org/dagu/issues/918&#34;&gt;#918&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Show output variable values in the UI (&lt;a href=&#34;https://github.com/dagu-org/dagu/issues/916&#34;&gt;#916&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Separate logs for stdout and stderr by default (&lt;a href=&#34;https://github.com/dagu-org/dagu/issues/687&#34;&gt;#687&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;📋 &lt;strong&gt;Queue Management&lt;/strong&gt;: Added enqueue functionality for API and UI (&lt;a href=&#34;https://github.com/dagu-org/dagu/issues/938&#34;&gt;#938&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;🏗️ &lt;strong&gt;API v2&lt;/strong&gt;: New &lt;code&gt;/api/v2&lt;/code&gt; endpoints with refactored schema and better abstractions (&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/api/v2/api.yaml&#34;&gt;OpenAPI spec&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;🔧 &lt;strong&gt;Various Enhancements&lt;/strong&gt;: Including &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/925&#34;&gt;#925&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/898&#34;&gt;#898&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/895&#34;&gt;#895&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/868&#34;&gt;#868&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/903&#34;&gt;#903&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/911&#34;&gt;#911&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/913&#34;&gt;#913&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/921&#34;&gt;#921&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/923&#34;&gt;#923&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/887&#34;&gt;#887&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/922&#34;&gt;#922&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/932&#34;&gt;#932&lt;/a&gt;, &lt;a href=&#34;https://github.com/dagu-org/dagu/issues/962&#34;&gt;#962&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠️ Note on History Data&lt;/strong&gt;: Due to internal improvements, history data from 1.16.x requires migration to work with 1.17.0. You can migrate your historical data using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Migrate history data&#xA;dagu migrate history&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After successful migration, legacy history directories are moved to &lt;code&gt;&amp;lt;DAGU_DATA_DIR&amp;gt;/history_migrated_&amp;lt;timestamp&amp;gt;&lt;/code&gt; for safekeeping. Most other functionality remains stable and compatible except for a few changes. We&#39;re committed to maintaining backward compatibility as much as possible in future releases.&lt;/p&gt; &#xA;&lt;h3&gt;❤️ Huge Thanks to Our Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This release wouldn’t exist without the community’s time, sweat, and ideas. In particular:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Contribution&lt;/th&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Optimized Docker image size &lt;strong&gt;and&lt;/strong&gt; split into three baseline images&lt;/td&gt; &#xA;   &lt;td&gt;@jerry-yuan&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Allow specifying container name &amp;amp; image platform ([#898])&lt;/td&gt; &#xA;   &lt;td&gt;@vnghia&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enhanced repeat-policy – conditions, expected output, and exit codes&lt;/td&gt; &#xA;   &lt;td&gt;@thefishhat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Implemented queue functionality&lt;/td&gt; &#xA;   &lt;td&gt;@kriyanshii&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Countless insightful reviews &amp;amp; feedback&lt;/td&gt; &#xA;   &lt;td&gt;@ghansham&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;Thank you all for pushing Dagu forward! 💙&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Your feedback is valuable!&lt;/strong&gt; Please test the beta and share your experience:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💬 &lt;a href=&#34;https://discord.gg/gpahPUjGRk&#34;&gt;Join our Discord&lt;/a&gt; for discussions&lt;/li&gt; &#xA; &lt;li&gt;🐛 &lt;a href=&#34;https://github.com/dagu-org/dagu/issues&#34;&gt;Report issues on GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To try the beta: &lt;code&gt;docker run --rm -p 8080:8080 ghcr.io/dagu-org/dagu:latest dagu start-all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Dagu is a compact, portable workflow engine implemented in Go. It provides a declarative model for orchestrating command execution across diverse environments, including shell scripts, Python commands, containerized operations, or remote commands.&lt;/p&gt; &#xA;&lt;p&gt;Dagu’s design emphasizes minimal external dependencies: it operates solely as a single binary without requiring an external database. A browser-based graphical interface (UI) is provided for real-time monitoring, rendering the status and logs of workflows. This zero-dependency structure makes the system easy to install and well-suited to various infrastructures, including local or air-gapped systems. This local-first architecture also ensures that sensitive data or proprietary workflows remain secure.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;b&gt;Table of Contents&lt;/b&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#key-attributes&#34;&gt;Key Attributes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#use-cases&#34;&gt;Use Cases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#via-bash-script&#34;&gt;Via Bash script&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#via-github-releases-page&#34;&gt;Via GitHub Releases Page&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#via-homebrew-macos&#34;&gt;Via Homebrew (macOS)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#via-docker-stable&#34;&gt;Via Docker (stable)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#via-docker-next-preview&#34;&gt;Via Docker (next preview)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#building-from-source&#34;&gt;Building from Source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#steps-to-build-locally&#34;&gt;Steps to Build Locally&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#1-clone-the-repository&#34;&gt;1. Clone the repository&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#2-build-the-ui&#34;&gt;2. Build the UI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#3-build-the-binary&#34;&gt;3. Build the Binary&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#run-locally-from-source&#34;&gt;Run Locally from Source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#quick-start-guide&#34;&gt;Quick Start Guide&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#1-launch-the-web-ui&#34;&gt;1. Launch the Web UI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#2-create-a-new-dag&#34;&gt;2. Create a New DAG&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#3-edit-the-dag&#34;&gt;3. Edit the DAG&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#4-execute-the-dag&#34;&gt;4. Execute the DAG&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#usage--command-line-interface&#34;&gt;Usage / Command Line Interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#example-dag&#34;&gt;Example DAG&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#minimal-examples&#34;&gt;Minimal Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#named-parameters&#34;&gt;Named Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#positional-parameters&#34;&gt;Positional Parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#conditional-dag&#34;&gt;Conditional DAG&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#script-execution&#34;&gt;Script Execution&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#variable-passing&#34;&gt;Variable Passing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#scheduling&#34;&gt;Scheduling&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#nested-dags&#34;&gt;Nested DAGs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#running-a-docker-image&#34;&gt;Running a docker image&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#notifications-on-failure-or-success&#34;&gt;Notifications on Failure or Success&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#http-request-and-notifications&#34;&gt;HTTP Request and Notifications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#execute-commands-over-ssh&#34;&gt;Execute commands over SSH&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#advanced-preconditions&#34;&gt;Advanced Preconditions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#handling-various-execution-results&#34;&gt;Handling Various Execution Results&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#json-processing-examples&#34;&gt;JSON Processing Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#web-ui&#34;&gt;Web UI&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#dag-details&#34;&gt;DAG Details&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#dags&#34;&gt;DAGs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#search&#34;&gt;Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#execution-history&#34;&gt;Execution History&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#log-viewer&#34;&gt;Log Viewer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Attributes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Small Footprint&lt;/strong&gt; Dagu is distributed as a single binary with minimal resource overhead. It does not require additional components such as external databases, message brokers, or other services.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Language Agnostic&lt;/strong&gt;: Workflows in Dagu are defined by specifying tasks (called “steps”) and their dependencies in YAML. A step can execute any command whether Python, Bash, Node.js, or other executables. This flexibility allows easy integration with existing scripts or tools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Local-First Architecture&lt;/strong&gt;: Dagu was designed to run on a single developer workstation or server. By default, all tasks, logs, and scheduling run locally, allowing run offline or in air-gapped environments. This architecture ensures that sensitive data or proprietary workflows remain secure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Declarative Configuration&lt;/strong&gt;: The workflow definition is contained in a YAML file. Dependencies, schedules, and execution details are declaratively expressed, making the workflow easy to comprehend and maintain.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Complex Setup&lt;/strong&gt;: Unlike other orchestration platforms (e.g., &lt;code&gt;Airflow&lt;/code&gt;) that often require substantial infrastructure, Dagu can be installed in minutes. Just &lt;code&gt;dagu start-all&lt;/code&gt; command spins up both the scheduler and web UI, ready to run tasks immediately.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Data ingestion pipelines&lt;/li&gt; &#xA; &lt;li&gt;Data processing on small-scale/embedded systems&lt;/li&gt; &#xA; &lt;li&gt;Media file conversion tasks&lt;/li&gt; &#xA; &lt;li&gt;Automated workflows for employee onboarding and offboarding&lt;/li&gt; &#xA; &lt;li&gt;CI/CD automation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Issues: &lt;a href=&#34;https://github.com/dagu-org/dagu/issues&#34;&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat: &lt;a href=&#34;https://discord.gg/gpahPUjGRk&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Dagu can be installed in multiple ways, such as using Homebrew or downloading a single binary from GitHub releases.&lt;/p&gt; &#xA;&lt;h3&gt;Via Bash script&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install the latest version:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://raw.githubusercontent.com/dagu-org/dagu/main/scripts/installer.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install a specific version:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://raw.githubusercontent.com/dagu-org/dagu/main/scripts/installer.sh | bash -s -- --version &amp;lt;version&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; can be a specific version (e.g. &lt;code&gt;v1.16.10&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install to a custom directory:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L https://raw.githubusercontent.com/dagu-org/dagu/main/scripts/installer.sh | bash -s -- --install-dir &amp;lt;path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Via GitHub Releases Page&lt;/h3&gt; &#xA;&lt;p&gt;Download the latest binary from the &lt;a href=&#34;https://github.com/dagu-org/dagu/releases&#34;&gt;Releases page&lt;/a&gt; and place it in your &lt;code&gt;$PATH&lt;/code&gt; (e.g. &lt;code&gt;/usr/local/bin&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Via Homebrew (macOS)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install dagu-org/brew/dagu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upgrade to the latest version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew upgrade dagu-org/brew/dagu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Via Docker (stable)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run \&#xA;--rm \&#xA;-p 8080:8080 \&#xA;-v ~/.config/dagu:/config \&#xA;-e DAGU_TZ=`ls -l /etc/localtime | awk -F&#39;/zoneinfo/&#39; &#39;{print $2}&#39;` \&#xA;ghcr.io/dagu-org/dagu:latest dagu start-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The environment variable &lt;code&gt;DAGU_TZ&lt;/code&gt; is the timezone for the scheduler and server. You can set it to your local timezone (e.g. &lt;code&gt;America/New_York&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://dagu.readthedocs.io/en/latest/config.html#environment-variables&#34;&gt;Environment variables&lt;/a&gt; to configure those default directories.&lt;/p&gt; &#xA;&lt;h3&gt;Via Docker (next preview)&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;next&lt;/code&gt; branch is published continuously as a preview image. Use this to test the upcoming version without waiting for a formal release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run \&#xA;--rm \&#xA;-p 8080:8080 \&#xA;-v ~/.config/dagu:/config \&#xA;-e DAGU_TZ=`ls -l /etc/localtime | awk -F&#39;/zoneinfo/&#39; &#39;{print $2}&#39;` \&#xA;ghcr.io/dagu-org/dagu:next dagu start-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Two tags are pushed on every commit to &lt;code&gt;next&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;next&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Moving pointer to the latest commit on the &lt;code&gt;next&lt;/code&gt; branch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;next-&amp;lt;sha&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Immutable image for the specific commit (first 7 chars of SHA)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Heads‑up&lt;/strong&gt;: preview images may contain breaking changes and are &lt;strong&gt;not&lt;/strong&gt; guaranteed to be backward‑compatible. Pin to &lt;code&gt;next-&amp;lt;sha&amp;gt;&lt;/code&gt; if you need a reproducible environment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#quick-start-guide&#34;&gt;Quick Start Guide&lt;/a&gt; to create and execute your first DAG!&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;p&gt;Dagu can be built and run locally from source.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have the following installed on your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go 1.23 or later&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js (Latest LTS or Current)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/installation&#34;&gt;pnpm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Steps to Build Locally&lt;/h3&gt; &#xA;&lt;h4&gt;1. Clone the repository&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository to your local machine using Git. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/dagu-org/dagu.git&#xA;cd dagu&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;2. Build the UI&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build the UI assets. This step is necessary to generate frontend files and copy them to the &lt;code&gt;internal/frontend/assets&lt;/code&gt; directory. &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make ui&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3. Build the Binary&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build the binary &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make bin&#xA;&lt;/code&gt;&lt;/pre&gt; This produces the &lt;code&gt;dagu&lt;/code&gt; binary in the &lt;code&gt;.local/bin&lt;/code&gt; directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run Locally from Source&lt;/h3&gt; &#xA;&lt;p&gt;For a quick test of both server, scheduler, and UI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Runs &#34;dagu start-all&#34; with the `go run` command&#xA;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the server is running, visit &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; to see the Web UI.&lt;/p&gt; &#xA;&lt;p&gt;Continue with the &lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/#quick-start-guide&#34;&gt;Quick Start Guide&lt;/a&gt; to create and execute your first DAG!&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start Guide&lt;/h2&gt; &#xA;&lt;h3&gt;1. Launch the Web UI&lt;/h3&gt; &#xA;&lt;p&gt;Start the server and scheduler with the command &lt;code&gt;dagu start-all&lt;/code&gt; and browse to &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; to explore the Web UI.&lt;/p&gt; &#xA;&lt;h3&gt;2. Create a New DAG&lt;/h3&gt; &#xA;&lt;p&gt;Navigate to the DAG List page by clicking the menu in the left panel of the Web UI. Then create a DAG by clicking the &lt;code&gt;NEW&lt;/code&gt; button at the top of the page. Enter &lt;code&gt;example&lt;/code&gt; in the dialog.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: DAG (YAML) files will be placed in &lt;code&gt;~/.config/dagu/dags&lt;/code&gt; by default. See &lt;a href=&#34;https://dagu.readthedocs.io/en/latest/config.html&#34;&gt;Configuration Options&lt;/a&gt; for more details.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Edit the DAG&lt;/h3&gt; &#xA;&lt;p&gt;Go to the &lt;code&gt;SPEC&lt;/code&gt; Tab and hit the &lt;code&gt;Edit&lt;/code&gt; button. Copy &amp;amp; Paste the following example and click the &lt;code&gt;Save&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schedule: &#34;* * * * *&#34; # Run the DAG every minute&#xA;params:&#xA;  - NAME: &#34;Dagu&#34;&#xA;steps:&#xA;  - name: hello_world&#xA;    command: echo Hello $NAME&#xA;&#xA;  - name: simulate_unclean_command_output&#xA;    command: |&#xA;      cat &amp;lt;&amp;lt;EOF&#xA;      INFO: Starting process...&#xA;      DEBUG: Initializing variables...&#xA;      DATA: User count is 42&#xA;      INFO: Process completed successfully.&#xA;      EOF&#xA;    output: raw_output&#xA;&#xA;  - name: extract_data&#xA;    command: |&#xA;      echo &#34;$raw_output&#34; | grep &#39;^DATA:&#39; | sed &#39;s/^DATA: //&#39;&#xA;    output: cleaned_data&#xA;    depends:&#xA;      - simulate_unclean_command_output&#xA;&#xA;  - name: Done&#xA;    command: echo Done!&#xA;    depends:&#xA;      - hello_world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Execute the DAG&lt;/h3&gt; &#xA;&lt;p&gt;You can execute the example by pressing the &lt;code&gt;Start&lt;/code&gt; button. You can see &#34;Hello Dagu&#34; in the log page in the Web UI.&lt;/p&gt; &#xA;&lt;h2&gt;Usage / Command Line Interface&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Runs the DAG&#xA;dagu start &amp;lt;file or DAG name&amp;gt;&#xA;&#xA;# Runs the DAG with named parameters&#xA;dagu start &amp;lt;file or DAG name&amp;gt; [-- &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...]&#xA;&#xA;# Runs the DAG with positional parameters&#xA;dagu start &amp;lt;file or DAG name&amp;gt; [-- value1 value2 ...]&#xA;&#xA;# Displays the current status of the DAG&#xA;dagu status &amp;lt;file or DAG name&amp;gt;&#xA;&#xA;# Re-runs the specified dag-run&#xA;dagu retry --run-id=&amp;lt;run-id&amp;gt; &amp;lt;file or DAG name&amp;gt;&#xA;&#xA;# Stops the current running DAG&#xA;dagu stop &amp;lt;file or DAG name&amp;gt;&#xA;&#xA;# Restarts the current running DAG&#xA;dagu restart &amp;lt;file or DAG name&amp;gt;&#xA;&#xA;# Dry-runs the DAG&#xA;dagu dry &amp;lt;file or DAG name&amp;gt; [-- &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...]&#xA;&#xA;# Launches both the web UI server and scheduler process&#xA;dagu start-all [--host=&amp;lt;host&amp;gt;] [--port=&amp;lt;port&amp;gt;] [--dags=&amp;lt;path to directory&amp;gt;]&#xA;&#xA;# Launches the Dagu web UI server&#xA;dagu server [--host=&amp;lt;host&amp;gt;] [--port=&amp;lt;port&amp;gt;] [--dags=&amp;lt;path to directory&amp;gt;]&#xA;&#xA;# Starts the scheduler process&#xA;dagu scheduler [--dags=&amp;lt;path to directory&amp;gt;]&#xA;&#xA;# Shows the current binary version&#xA;dagu version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example DAG&lt;/h2&gt; &#xA;&lt;h3&gt;Minimal Examples&lt;/h3&gt; &#xA;&lt;p&gt;A simple example with a named parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:&#xA;  - NAME: &#34;Dagu&#34;&#xA;&#xA;steps:&#xA;  - name: Hello world&#xA;    command: echo Hello $NAME&#xA;  - name: Done&#xA;    command: echo Done!&#xA;    depends:&#xA;      - Hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a pipe:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - name: step 1&#xA;    command: echo hello world | xargs echo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specifying a shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - name: step 1&#xA;    command: echo hello world | xargs echo&#xA;    shell: bash # The default shell is `$SHELL` or `sh`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Named Parameters&lt;/h3&gt; &#xA;&lt;p&gt;You can define named parameters in the DAG file and override them when running the DAG.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Default named parameters&#xA;params:&#xA;  NAME: &#34;Dagu&#34;&#xA;  AGE: 30&#xA;&#xA;steps:&#xA;  - name: Hello world&#xA;    command: echo Hello $NAME&#xA;  - name: Done&#xA;    command: echo Done!&#xA;    depends: Hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the DAG with custom parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dagu start my_dag -- NAME=John AGE=40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Positional Parameters&lt;/h3&gt; &#xA;&lt;p&gt;You can define positional parameters in the DAG file and override them when running the DAG.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Default positional parameters&#xA;params: input.csv output.csv 60 # Default values for $1, $2, and $3&#xA;&#xA;steps:&#xA;  # Using positional parameters&#xA;  - name: Installation&#xA;    command: pipx install pandas --include-deps&#xA;&#xA;  - name: Data processing&#xA;    command: pipx run&#xA;    script: |&#xA;      import sys&#xA;      import pandas as pd&#xA;&#xA;      input_file = &#34;$1&#34;    # First parameter&#xA;      output_file = &#34;$2&#34;   # Second parameter&#xA;      timeout = &#34;$3&#34;       # Third parameter&#xA;&#xA;      print(f&#34;Processing {input_file} -&amp;gt; {output_file} with timeout {timeout}s&#34;)&#xA;      # Add your processing logic here&#xA;    depends:&#xA;      - Installation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the DAG with custom parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dagu start my_dag -- input.csv output.csv 120&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional DAG&lt;/h3&gt; &#xA;&lt;p&gt;You can define conditions to run a step based on the output of a command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - name: monthly task&#xA;    command: monthly.sh&#xA;    preconditions:&#xA;      - condition: &#34;`date &#39;+%d&#39;`&#34;&#xA;        expected: &#34;re:0[1-9]&#34; # Run only if the day is between 01 and 09&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Script Execution&lt;/h3&gt; &#xA;&lt;p&gt;You can run a script using the &lt;code&gt;script&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  # Python script example&#xA;  - name: data analysis&#xA;    command: python&#xA;    script: |&#xA;      import json&#xA;      import sys&#xA;      &#xA;      data = {&#39;count&#39;: 100, &#39;status&#39;: &#39;ok&#39;}&#xA;      print(json.dumps(data))&#xA;      sys.stderr.write(&#39;Processing complete\n&#39;)&#xA;    output: RESULT&#xA;    stdout: /tmp/analysis.log&#xA;    stderr: /tmp/analysis.error&#xA;&#xA;  # Shell script with multiple commands&#xA;  - name: cleanup&#xA;    command: bash&#xA;    script: |&#xA;      #!/bin/bash&#xA;      echo &#34;Starting cleanup...&#34;&#xA;      &#xA;      # Remove old files&#xA;      find /tmp -name &#34;*.tmp&#34; -mtime +7 -exec rm {} \;&#xA;      &#xA;      # Archive logs&#xA;      cd /var/log&#xA;      tar -czf archive.tar.gz *.log&#xA;      &#xA;      echo &#34;Cleanup complete&#34;&#xA;    depends: data analysis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Variable Passing&lt;/h3&gt; &#xA;&lt;p&gt;You can pass the output of one step to another step using the &lt;code&gt;output&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  # Basic output capture&#xA;  - name: generate id&#xA;    command: echo &#34;ABC123&#34;&#xA;    output: REQUEST_ID&#xA;&#xA;  - name: use id&#xA;    command: echo &#34;Processing request ${REQUEST_ID}&#34;&#xA;    depends: generate id&#xA;&#xA;# Capture JSON output&#xA;steps:&#xA;  - name: get config&#xA;    command: |&#xA;      echo &#39;{&#34;port&#34;: 8080, &#34;host&#34;: &#34;localhost&#34;}&#39;&#xA;    output: CONFIG&#xA;&#xA;  - name: start server&#xA;    command: echo &#34;Starting server at ${CONFIG.host}:${CONFIG.port}&#34;&#xA;    depends: get config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scheduling&lt;/h3&gt; &#xA;&lt;p&gt;You can specify flexible schedules using the cron format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schedule: &#34;5 4 * * *&#34; # Run at 04:05.&#xA;&#xA;steps:&#xA;  - name: scheduled job&#xA;    command: job.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can set multiple schedules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schedule:&#xA;  - &#34;30 7 * * *&#34; # Run at 7:30&#xA;  - &#34;0 20 * * *&#34; # Also run at 20:00&#xA;&#xA;steps:&#xA;  - name: scheduled job&#xA;    command: job.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to start and stop a long-running process on a fixed schedule, you can define &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; times:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;schedule:&#xA;  start: &#34;0 8 * * *&#34; # starts at 8:00&#xA;  stop: &#34;0 13 * * *&#34; # stops at 13:00&#xA;steps:&#xA;  - name: scheduled job&#xA;    command: job.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nested DAGs&lt;/h3&gt; &#xA;&lt;p&gt;You can specifies another DAG as a step in the parent DAG. This allows you to create reusable components or sub-DAGs. Sub DAGs can be multiple levels deep.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a parent DAG that calls a sub-DAG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - name: run_sub-dag&#xA;    run: sub-dag&#xA;    output: OUT&#xA;  - name: use output&#xA;    command: echo ${OUT.outputs.result}&#xA;    depends: run_sub-dag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here is the sub-DAG:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - name: sub-dag&#xA;    command: echo &#34;Hello from sub-dag&#34;&#xA;    output: result&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;THe parent DAG will call the sub-DAG and write the output to the log (stdout). The output will be &lt;code&gt;Hello from sub-dag&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running a docker image&lt;/h3&gt; &#xA;&lt;p&gt;You can run a docker image as a step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - name: hello&#xA;    executor:&#xA;      type: docker&#xA;      config:&#xA;        image: alpine&#xA;        autoRemove: true&#xA;    command: echo &#34;hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;You can define environment variables and use them in the DAG.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  - DATA_DIR: ${HOME}/data&#xA;  - PROCESS_DATE: &#34;`date &#39;+%Y-%m-%d&#39;`&#34;&#xA;&#xA;steps:&#xA;  - name: process logs&#xA;    command: python process.py&#xA;    dir: ${DATA_DIR}&#xA;    preconditions:&#xA;      - &#34;test -f ${DATA_DIR}/logs_${PROCESS_DATE}.txt&#34; # Check if the file exists&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notifications on Failure or Success&lt;/h3&gt; &#xA;&lt;p&gt;You can send notifications on failure in various ways.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  - SLACK_WEBHOOK_URL: &#34;https://hooks.slack.com/services/XXXXX/YYYYY/ZZZZZ&#34;&#xA;&#xA;dotenv:&#xA;  - .env&#xA;&#xA;smtp:&#xA;  host: $SMTP_HOST&#xA;  port: &#34;587&#34;&#xA;  username: $SMTP_USERNAME&#xA;  password: $SMTP_PASSWORD&#xA;&#xA;handlerOn:&#xA;  failure:&#xA;    command: |&#xA;      curl -X POST -H &#39;Content-type: application/json&#39; \&#xA;      --data &#39;{ &#34;text&#34;: &#34;DAG Failure (&#39;${DAG_NAME}&#39;)&#34; }&#39; \&#xA;      ${SLACK_WEBHOOK_URL} &#xA;&#xA;steps:&#xA;  - name: critical process&#xA;    command: important_job.sh&#xA;    retryPolicy:&#xA;      limit: 3&#xA;      intervalSec: 60&#xA;    mailOn:&#xA;      failure: true # Send an email on failure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to set it globally, you can create &lt;code&gt;~/.config/dagu/base.yaml&lt;/code&gt; and define the common configurations across all DAGs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;smtp:&#xA;  host: $SMTP_HOST&#xA;  port: &#34;587&#34;&#xA;  username: $SMTP_USERNAME&#xA;  password: $SMTP_PASSWORD&#xA;&#xA;mailOn:&#xA;  failure: true                      &#xA;  success: true                      &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use mail executor to send notifications.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:&#xA;  - RECIPIENT_NAME: XXX&#xA;  - RECIPIENT_EMAIL: example@company.com&#xA;  - MESSAGE: &#34;Hello [RECIPIENT_NAME]&#34;&#xA;&#xA;steps:&#xA;  - name: step1&#xA;    executor:&#xA;      type: mail&#xA;      config:&#xA;        to: $RECIPIENT_EMAIL&#xA;        from: dagu@dagu.com&#xA;        subject: &#34;Hello [RECIPIENT_NAME]&#34;&#xA;        message: $MESSAGE&#xA;          &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Request and Notifications&lt;/h3&gt; &#xA;&lt;p&gt;You can make HTTP requests and send notifications.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dotenv:&#xA;  - .env&#xA;&#xA;smtp:&#xA;  host: $SMTP_HOST&#xA;  port: &#34;587&#34;&#xA;  username: $SMTP_USERNAME&#xA;  password: $SMTP_PASSWORD&#xA;&#xA;steps:&#xA;  - name: fetch data&#xA;    executor:&#xA;      type: http&#xA;      config:&#xA;        timeout: 10&#xA;    command: GET https://api.example.com/data&#xA;    output: API_RESPONSE&#xA;&#xA;  - name: send notification&#xA;    executor:&#xA;      type: mail&#xA;      config:&#xA;        to: team@company.com&#xA;        from: team@company.com&#xA;        subject: &#34;Data Processing Complete&#34;&#xA;        message: |&#xA;          Process completed successfully.&#xA;          Response: ${API_RESPONSE}&#xA;&#xA;    depends: fetch data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execute commands over SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can execute commands over SSH.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  - name: backup&#xA;    executor:&#xA;      type: ssh&#xA;      config:&#xA;        user: admin&#xA;        ip: 192.168.1.100&#xA;        key: ~/.ssh/id_rsa&#xA;    command: tar -czf /backup/data.tar.gz /data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced Preconditions&lt;/h3&gt; &#xA;&lt;p&gt;You can define complex conditions to run a step based on the output of a command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  # Check multiple conditions&#xA;  - name: daily task&#xA;    command: process_data.sh&#xA;    preconditions:&#xA;      # Run only on weekdays&#xA;      - condition: &#34;`date &#39;+%u&#39;`&#34;&#xA;        expected: &#34;re:[1-5]&#34;&#xA;      # Run only if disk space &amp;gt; 20%&#xA;      - condition: &#34;`df -h / | awk &#39;NR==2 {print $5}&#39; | sed &#39;s/%//&#39;`&#34;&#xA;        expected: &#34;re:^[0-7][0-9]$|^[1-9]$&#34;  # 0-79% used (meaning at least 20% free)&#xA;      # Check if input file exists&#xA;      - condition: &#34;test -f input.csv&#34;&#xA;&#xA;  # Complex file check&#xA;  - name: process files&#xA;    command: batch_process.sh&#xA;    preconditions:&#xA;      - condition: &#34;`find data/ -name &#39;*.csv&#39; | wc -l`&#34;&#xA;        expected: &#34;re:[1-9][0-9]*&#34;  # At least one CSV file exists&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling Various Execution Results&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;continueOn&lt;/code&gt; to control when to fail or continue based on the exit code, output, or other conditions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;  # Basic error handling&#xA;  - name: process data&#xA;    command: python process.py&#xA;    continueOn:&#xA;      failure: true  # Continue on any failure&#xA;      skipped: true  # Continue if preconditions aren&#39;t met&#xA;&#xA;  # Handle specific exit codes&#xA;  - name: data validation&#xA;    command: validate.sh&#xA;    continueOn:&#xA;      exitCode: [1, 2, 3]  # 1:No data, 2:Partial data, 3:Invalid format&#xA;      markSuccess: true    # Mark as success even with these codes&#xA;&#xA;  # Output pattern matching&#xA;  - name: api request&#xA;    command: curl -s https://api.example.com/data&#xA;    continueOn:&#xA;      output:&#xA;        - &#34;no records found&#34;      # Exact match&#xA;        - &#34;re:^Error: [45][0-9]&#34;  # Regex match for HTTP errors&#xA;        - &#34;rate limit exceeded&#34;    # Another exact match&#xA;&#xA;  # Complex pattern&#xA;  - name: database backup&#xA;    command: pg_dump database &amp;gt; backup.sql&#xA;    continueOn:&#xA;      exitCode: [0, 1]     # Accept specific exit codes&#xA;      output:              # Accept specific outputs&#xA;        - &#34;re:0 rows affected&#34;&#xA;        - &#34;already exists&#34;&#xA;      failure: false       # Don&#39;t continue on other failures&#xA;      markSuccess: true    # Mark as success if conditions match&#xA;&#xA;  # Multiple conditions combined&#xA;  - name: data sync&#xA;    command: sync_data.sh&#xA;    continueOn:&#xA;      exitCode: [1]        # Exit code 1 is acceptable&#xA;      output:              # These outputs are acceptable&#xA;        - &#34;no changes detected&#34;&#xA;        - &#34;re:synchronized [0-9]+ files&#34;&#xA;      skipped: true       # OK if skipped due to preconditions&#xA;      markSuccess: true   # Mark as success in these cases&#xA;&#xA;  # Error output handling&#xA;  - name: log processing&#xA;    command: process_logs.sh&#xA;    stderr: /tmp/process.err&#xA;    continueOn:&#xA;      output: &#xA;        - &#34;re:WARNING:.*&#34;   # Continue on warnings&#xA;        - &#34;no logs found&#34;   # Continue if no logs&#xA;      exitCode: [0, 1, 2]   # Multiple acceptable exit codes&#xA;      failure: true         # Continue on other failures too&#xA;&#xA;  # Application-specific status&#xA;  - name: app health check&#xA;    command: check_status.sh&#xA;    continueOn:&#xA;      output:&#xA;        - &#34;re:STATUS:(DEGRADED|MAINTENANCE)&#34;  # Accept specific statuses&#xA;        - &#34;re:PERF:[0-9]{2,3}ms&#34;             # Accept performance in range&#xA;      markSuccess: true                       # Mark these as success&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON Processing Examples&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;jq&lt;/code&gt; executor to process JSON data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Simple data extraction&#xA;steps:&#xA;  - name: extract value&#xA;    executor: jq&#xA;    command: .user.name    # Get user name from JSON&#xA;    script: |&#xA;      {&#xA;        &#34;user&#34;: {&#xA;          &#34;name&#34;: &#34;John&#34;,&#xA;          &#34;age&#34;: 30&#xA;        }&#xA;      }&#xA;&#xA;# Output: &#34;John&#34;&#xA;&#xA;# Transform array data&#xA;steps:&#xA;  - name: get users&#xA;    executor: jq&#xA;    command: &#39;.users[] | {name: .name}&#39;    # Extract name from each user&#xA;    script: |&#xA;      {&#xA;        &#34;users&#34;: [&#xA;          {&#34;name&#34;: &#34;Alice&#34;, &#34;age&#34;: 25},&#xA;          {&#34;name&#34;: &#34;Bob&#34;, &#34;age&#34;: 30}&#xA;        ]&#xA;      }&#xA;&#xA;# Output:&#xA;# {&#34;name&#34;: &#34;Alice&#34;}&#xA;# {&#34;name&#34;: &#34;Bob&#34;}&#xA;&#xA;# Calculate and format&#xA;steps:&#xA;  - name: sum ages&#xA;    executor: jq&#xA;    command: &#39;{total_age: ([.users[].age] | add)}&#39;    # Sum all ages&#xA;    script: |&#xA;      {&#xA;        &#34;users&#34;: [&#xA;          {&#34;name&#34;: &#34;Alice&#34;, &#34;age&#34;: 25},&#xA;          {&#34;name&#34;: &#34;Bob&#34;, &#34;age&#34;: 30}&#xA;        ]&#xA;      }&#xA;&#xA;# Output: {&#34;total_age&#34;: 55}&#xA;&#xA;# Filter and count&#xA;steps:&#xA;  - name: count active&#xA;    executor: jq&#xA;    command: &#39;[.users[] | select(.active == true)] | length&#39;&#xA;    script: |&#xA;      {&#xA;        &#34;users&#34;: [&#xA;          {&#34;name&#34;: &#34;Alice&#34;, &#34;active&#34;: true},&#xA;          {&#34;name&#34;: &#34;Bob&#34;, &#34;active&#34;: false},&#xA;          {&#34;name&#34;: &#34;Charlie&#34;, &#34;active&#34;: true}&#xA;        ]&#xA;      }&#xA;&#xA;# Output: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found in the &lt;a href=&#34;https://dagu.readthedocs.io/en/latest/yaml_format.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Web UI&lt;/h2&gt; &#xA;&lt;h3&gt;DAG Details&lt;/h3&gt; &#xA;&lt;p&gt;Real-time status, logs, and configuration for each DAG. Toggle graph orientation from the top-right corner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/assets/images/demo.gif?raw=true&#34; alt=&#34;example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/assets/images/ui-details2.webp?raw=true&#34; alt=&#34;Details-TD&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;DAGs&lt;/h3&gt; &#xA;&lt;p&gt;View all DAGs in one place with live status updates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/assets/images/ui-dags.webp?raw=true&#34; alt=&#34;DAGs&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Search&lt;/h3&gt; &#xA;&lt;p&gt;Search across all DAG definitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/assets/images/ui-search.webp?raw=true&#34; alt=&#34;History&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Execution History&lt;/h3&gt; &#xA;&lt;p&gt;Review past workflows and logs at a glance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/assets/images/ui-history.webp?raw=true&#34; alt=&#34;History&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Log Viewer&lt;/h3&gt; &#xA;&lt;p&gt;Examine detailed step-level logs and outputs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/assets/images/ui-logoutput.webp?raw=true&#34; alt=&#34;DAG Log&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Dagu are welcome. Refer to the &lt;a href=&#34;https://dagu.readthedocs.io/en/latest/contrib.html&#34;&gt;Contribution Guide&lt;/a&gt; for details on how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/dagu-org/dagu/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=dagu-org/dagu&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Dagu is distributed under the &lt;a href=&#34;https://raw.githubusercontent.com/dagu-org/dagu/main/LICENSE.md&#34;&gt;GNU GPLv3&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>