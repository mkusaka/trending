<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-11T01:30:15Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>josephburnett/jd</title>
    <updated>2024-09-11T01:30:15Z</updated>
    <id>tag:github.com,2024-09-11:/josephburnett/jd</id>
    <link href="https://github.com/josephburnett/jd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JSON diff and patch&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/josephburnett/jd&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/josephburnett/jd&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;JSON diff and patch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;jd&lt;/code&gt; is a commandline utility and Go library for diffing and patching JSON and YAML values. It supports a native &lt;code&gt;jd&lt;/code&gt; format (similar to unified format) as well as JSON Merge Patch (&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc7386&#34;&gt;RFC 7386&lt;/a&gt;) and a subset of JSON Patch (&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6902&#34;&gt;RFC 6902&lt;/a&gt;). Try it out at &lt;a href=&#34;http://play.jd-tool.io/&#34;&gt;http://play.jd-tool.io/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/josephburnett/jd/master/logo_small.png&#34; alt=&#34;jd logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To get the &lt;code&gt;jd&lt;/code&gt; commandline utility:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run &lt;code&gt;brew install jd&lt;/code&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;go install github.com/josephburnett/jd@latest&lt;/code&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;visit &lt;a href=&#34;https://github.com/josephburnett/jd/releases/latest&#34;&gt;https://github.com/josephburnett/jd/releases/latest&lt;/a&gt; and download the pre-built binary for your architecture/os, or&lt;/li&gt; &#xA; &lt;li&gt;run in a Docker image &lt;code&gt;jd(){ docker run --rm -i -v $PWD:$PWD -w $PWD josephburnett/jd &#34;$@&#34;; }&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;jd&lt;/code&gt; web UI:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;visit &lt;a href=&#34;http://play.jd-tool.io/&#34;&gt;http://play.jd-tool.io/&lt;/a&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;jd -port 8080&lt;/code&gt; and visit &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Command line usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: jd [OPTION]... FILE1 [FILE2]&#xA;Diff and patch JSON files.&#xA;&#xA;Prints the diff of FILE1 and FILE2 to STDOUT.&#xA;When FILE2 is omitted the second input is read from STDIN.&#xA;When patching (-p) FILE1 is a diff.&#xA;&#xA;Options:&#xA;  -color     Print color diff.&#xA;  -p         Apply patch FILE1 to FILE2 or STDIN.&#xA;  -o=FILE3   Write to FILE3 instead of STDOUT.&#xA;  -set       Treat arrays as sets.&#xA;  -mset      Treat arrays as multisets (bags).&#xA;  -setkeys   Keys to identify set objects&#xA;  -yaml      Read and write YAML instead of JSON.&#xA;  -port=N    Serve web UI on port N&#xA;  -f=FORMAT  Produce diff in FORMAT &#34;jd&#34; (default), &#34;patch&#34; (RFC 6902) or&#xA;             &#34;merge&#34; (RFC 7386)&#xA;  -t=FORMATS Translate FILE1 between FORMATS. Supported formats are &#34;jd&#34;,&#xA;             &#34;patch&#34; (RFC 6902), &#34;merge&#34; (RFC 7386), &#34;json&#34; and &#34;yaml&#34;.&#xA;             FORMATS are provided as a pair separated by &#34;2&#34;. E.g.&#xA;             &#34;yaml2json&#34; or &#34;jd2patch&#34;.&#xA;&#xA;Examples:&#xA;  jd a.json b.json&#xA;  cat b.json | jd a.json&#xA;  jd -o patch a.json b.json; jd patch a.json&#xA;  jd -set a.json b.json&#xA;  jd -f patch a.json b.json&#xA;  jd -f merge a.json b.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Command Line Option Details&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;setkeys&lt;/code&gt; This option determines what keys are used to decide if two objects &#39;match&#39;. Then the matched objects are compared, which will return a diff if there are differences in the objects themselves, their keys and/or values. You shouldn&#39;t expect this option to mask or ignore non-specified keys, it is not intended as a way to &#39;ignore&#39; some differences between objects.&lt;/p&gt; &#xA;&lt;h2&gt;Library usage&lt;/h2&gt; &#xA;&lt;p&gt;Note: import only release commits (&lt;code&gt;v1.Y.Z&lt;/code&gt;) because &lt;code&gt;master&lt;/code&gt; can be unstable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;jd &#34;github.com/josephburnett/jd/lib&#34;&#xA;)&#xA;&#xA;func ExampleJsonNode_Diff() {&#xA;&#x9;a, _ := jd.ReadJsonString(`{&#34;foo&#34;:&#34;bar&#34;}`)&#xA;&#x9;b, _ := jd.ReadJsonString(`{&#34;foo&#34;:&#34;baz&#34;}`)&#xA;&#x9;fmt.Print(a.Diff(b).Render())&#xA;&#x9;// Output:&#xA;&#x9;// @ [&#34;foo&#34;]&#xA;&#x9;// - &#34;bar&#34;&#xA;&#x9;// + &#34;baz&#34;&#xA;}&#xA;&#xA;func ExampleJsonNode_Patch() {&#xA;&#x9;a, _ := jd.ReadJsonString(`[&#34;foo&#34;]`)&#xA;&#x9;diff, _ := jd.ReadDiffString(`` +&#xA;&#x9;&#x9;`@ [1]` + &#34;\n&#34; +&#xA;&#x9;&#x9;`+ &#34;bar&#34;` + &#34;\n&#34;)&#xA;&#x9;b, _ := a.Patch(diff)&#xA;&#x9;fmt.Print(b.Json())&#xA;&#x9;// Output:&#xA;&#x9;// [&#34;foo&#34;,&#34;bar&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Diff language&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/josephburnett/jd/master/ebnf.png&#34; alt=&#34;Railroad diagram of EBNF&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A diff is zero or more sections&lt;/li&gt; &#xA; &lt;li&gt;Sections start with a &lt;code&gt;@&lt;/code&gt; header and the path to a node&lt;/li&gt; &#xA; &lt;li&gt;A path is a JSON list of zero or more elements accessing collections&lt;/li&gt; &#xA; &lt;li&gt;A JSON number element (e.g. &lt;code&gt;0&lt;/code&gt;) accesses an array&lt;/li&gt; &#xA; &lt;li&gt;A JSON string element (e.g. &lt;code&gt;&#34;foo&#34;&lt;/code&gt;) accesses an object&lt;/li&gt; &#xA; &lt;li&gt;An empty JSON object element (&lt;code&gt;{}&lt;/code&gt;) accesses an array as a set or multiset&lt;/li&gt; &#xA; &lt;li&gt;After the path is one or more removals or additions, removals first&lt;/li&gt; &#xA; &lt;li&gt;Removals start with &lt;code&gt;-&lt;/code&gt; and then the JSON value to be removed&lt;/li&gt; &#xA; &lt;li&gt;Additions start with &lt;code&gt;+&lt;/code&gt; and then the JSON value to added&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;EBNF&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-EBNF&#34;&gt;Diff ::= ( &#39;@&#39; &#39;[&#39; ( &#39;JSON String&#39; | &#39;JSON Number&#39; | &#39;Empty JSON Object&#39; )* &#39;]&#39; &#39;\n&#39; ( ( &#39;-&#39; &#39;JSON Value&#39; &#39;\n&#39; )+ | &#39;+&#39; &#39;JSON Value&#39; &#39;\n&#39; ) ( &#39;+&#39; &#39;JSON Value&#39; &#39;\n&#39; )* )*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-DIFF&#34;&gt;@ [&#34;a&#34;]&#xA;- 1&#xA;+ 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-DIFF&#34;&gt;@ [2]&#xA;+ {&#34;foo&#34;:&#34;bar&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-DIFF&#34;&gt;@ [&#34;Movies&#34;,67,&#34;Title&#34;]&#xA;- &#34;Dr. Strangelove&#34;&#xA;+ &#34;Dr. Evil Love&#34;&#xA;@ [&#34;Movies&#34;,67,&#34;Actors&#34;,&#34;Dr. Strangelove&#34;]&#xA;- &#34;Peter Sellers&#34;&#xA;+ &#34;Mike Myers&#34;&#xA;@ [&#34;Movies&#34;,102]&#xA;+ {&#34;Title&#34;:&#34;Austin Powers&#34;,&#34;Actors&#34;:{&#34;Austin Powers&#34;:&#34;Mike Myers&#34;}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-DIFF&#34;&gt;@ [&#34;Movies&#34;,67,&#34;Tags&#34;,{}]&#xA;- &#34;Romance&#34;&#xA;+ &#34;Action&#34;&#xA;+ &#34;Comedy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cookbook&lt;/h2&gt; &#xA;&lt;h3&gt;Use git diff to produce a structural diff:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;git difftool -yx jd @ -- foo.json&#xA;@ [&#34;foo&#34;]&#xA;- &#34;bar&#34;&#xA;+ &#34;baz&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;See what changes in a Kubernetes Deployment:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl get deployment example -oyaml &amp;gt; a.yaml&#xA;kubectl edit deployment example&#xA;# change cpu resource from 100m to 200m&#xA;kubectl get deployment example -oyaml | jd -yaml a.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;@ [&#34;metadata&#34;,&#34;annotations&#34;,&#34;deployment.kubernetes.io/revision&#34;]&#xA;- &#34;2&#34;&#xA;+ &#34;3&#34;&#xA;@ [&#34;metadata&#34;,&#34;generation&#34;]&#xA;- 2&#xA;+ 3&#xA;@ [&#34;metadata&#34;,&#34;resourceVersion&#34;]&#xA;- &#34;4661&#34;&#xA;+ &#34;5179&#34;&#xA;@ [&#34;spec&#34;,&#34;template&#34;,&#34;spec&#34;,&#34;containers&#34;,0,&#34;resources&#34;,&#34;requests&#34;,&#34;cpu&#34;]&#xA;- &#34;100m&#34;&#xA;+ &#34;200m&#34;&#xA;@ [&#34;status&#34;,&#34;conditions&#34;,1,&#34;lastUpdateTime&#34;]&#xA;- &#34;2021-12-23T09:40:39Z&#34;&#xA;+ &#34;2021-12-23T09:41:49Z&#34;&#xA;@ [&#34;status&#34;,&#34;conditions&#34;,1,&#34;message&#34;]&#xA;- &#34;ReplicaSet \&#34;nginx-deployment-787d795676\&#34; has successfully progressed.&#34;&#xA;+ &#34;ReplicaSet \&#34;nginx-deployment-795c7f5bb\&#34; has successfully progressed.&#34;&#xA;@ [&#34;status&#34;,&#34;observedGeneration&#34;]&#xA;- 2&#xA;+ 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;apply these change to another deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# edit file &#34;patch&#34; to contain only the hunk updating cpu request&#xA;kubectl patch deployment example2 --type json --patch &#34;$(jd -t jd2patch ~/patch)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>