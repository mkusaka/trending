<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-13T01:39:23Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>diggerhq/digger</title>
    <updated>2023-06-13T01:39:23Z</updated>
    <id>tag:github.com,2023-06-13:/diggerhq/digger</id>
    <link href="https://github.com/diggerhq/digger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Digger is an open source GitOps tool for Terraform. Digger allows you to run Terraform plan/apply in your CI ‚ö°Ô∏è&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;1470&#34; alt=&#34;digger-opensource-gitops-banner&#34; src=&#34;https://github.com/diggerhq/digger/assets/1280498/7fb44db3-38ca-4021-8714-87a2f1a14982&#34;&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; &lt;a href=&#34;https://join.slack.com/t/diggertalk/shared_invite/zt-1tocl4w0x-E3RkpPiK7zQkehl8O78g8Q&#34;&gt;Slack&lt;/a&gt; | &lt;a href=&#34;https://docs.digger.dev/&#34;&gt;Docs&lt;/a&gt; &lt;/h2&gt; &#xA;&lt;p&gt;CI/CD for Terraform is &lt;a href=&#34;https://itnext.io/pains-in-terraform-collaboration-249a56b4534e&#34;&gt;tricky&lt;/a&gt;. To make life easier, specialised CI systems aka &lt;a href=&#34;https://itnext.io/spice-up-your-infrastructure-as-code-with-tacos-1a9c179e0783&#34;&gt;TACOS&lt;/a&gt; exist - Terraform Cloud, Spacelift, Atlantis, etc.&lt;/p&gt; &#xA;&lt;p&gt;But why have 2 CI systems? Why not reuse the async jobs infrastructure with compute, orchestration, logs, etc of your existing CI?&lt;/p&gt; &#xA;&lt;p&gt;Digger runs terraform natively in your CI and takes care of the other bits - locks, plan artifacts and so on. &lt;a href=&#34;https://www.loom.com/share/e201e639a73941e0b5508710377a6106&#34;&gt;Demo video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üëü Runner-less. Terraform runs in the compute environment of your existing CI such as Github Actions, Gitlab, Argo etc.&lt;/li&gt; &#xA; &lt;li&gt;ü™∂ Minimal / no backend. Digger&#39;s own backend is a serverless function; it is only needed for certain CI environments (eg Gitlab)&lt;/li&gt; &#xA; &lt;li&gt;üîí Code-level locks. Avoid race conditions across multiple PRs. Similar to Atlantis workflow.&lt;/li&gt; &#xA; &lt;li&gt;‚òÅÔ∏è Multi-cloud. At the moment Digger supports AWS and GCP; Azure support coming in April 2023 (yes, in a few weeks).&lt;/li&gt; &#xA; &lt;li&gt;üí• Projects. Allow to isolate terraform runs and locks to a specific directory&lt;/li&gt; &#xA; &lt;li&gt;üí• Terragrunt support&lt;/li&gt; &#xA; &lt;li&gt;üí• Workspaces support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Need a feature that&#39;s not listed? Book a &lt;a href=&#34;https://calendly.com/diggerdev/community-feedback&#34;&gt;community feedback call&lt;/a&gt; - we ship fast ‚úÖ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚úÖ GCP support. Store PR locks in GCP storage buckets. Shipped in &lt;a href=&#34;https://github.com/diggerhq/digger/pull/50&#34;&gt;#50&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Workspaces support. Allow usage of Terraform CLI Workspaces. Shipped in &lt;a href=&#34;https://github.com/diggerhq/digger/pull/72&#34;&gt;#72&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Terragrunt support. Config option to run terragrunt wrapper. Shipped in &lt;a href=&#34;https://github.com/diggerhq/digger/pull/76&#34;&gt;#76&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Azure support using Storage Account Tables WIP: &lt;a href=&#34;https://github.com/diggerhq/digger/pull/122&#34;&gt;#122&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;‚åö AWS CodeBuild support&lt;/li&gt; &#xA; &lt;li&gt;‚åõ Gitlab Support&lt;/li&gt; &#xA; &lt;li&gt;‚åõ Configurable workflows. In addition to Atlantis-style (apply, then merge) also support &#34;apply-only&#34; and &#34;no-lock&#34;&lt;/li&gt; &#xA; &lt;li&gt;‚åõ Bitbucket Support&lt;/li&gt; &#xA; &lt;li&gt;‚åõ Jenkins Support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;This is demo flow with a sample repo using local state - for real world scenario you&#39;ll need to configure remote backend (S3 + DynamoDB) and add a &lt;a href=&#34;https://github.com/diggerhq/digger_demo/raw/main/.github/workflows/plan.yml&#34;&gt;workflow file&lt;/a&gt; to the root of the repo.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the &lt;a href=&#34;https://github.com/diggerhq/digger_demo_multienv&#34;&gt;demo repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enable Actions (by default workflows won&#39;t trigger in a fork)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;1441&#34; alt=&#34;Screenshot 2023-02-24 at 20 24 08&#34; src=&#34;https://user-images.githubusercontent.com/1280498/221291130-6831d45a-008f-452f-91d3-37ba133d7cbb.png&#34;&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;In your repository settings &amp;gt; Actions ensure that the Workflow Read and Write permissions are assigned - This will allow the workflow to post comments on your PRs&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;1017&#34; alt=&#34;Screen Shot 2023-03-01 at 12 02 59 PM&#34; src=&#34;https://user-images.githubusercontent.com/1627972/222136385-c7cb8f2c-1731-475d-b3a4-78b0d79a3874.png&#34;&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add environment variables into your Github Action Secrets (NOTE: This step is optional if you just want to test out the Action with &lt;code&gt;null_resource&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AWS_ACCESS_KEY_ID&lt;/li&gt; &#xA; &lt;li&gt;AWS_SECRET_ACCESS_KEY&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;make a change and create a PR - this will create a lock&lt;/li&gt; &#xA; &lt;li&gt;comment &lt;code&gt;digger plan&lt;/code&gt; - terraform plan output will be added as comment. If you don&#39;t see a comment (bug) - check out job output&lt;/li&gt; &#xA; &lt;li&gt;create another PR - plan or apply won‚Äôt work in this PR until the first lock is released&lt;/li&gt; &#xA; &lt;li&gt;you should see &lt;code&gt;Locked by PR #1&lt;/code&gt; comment. The action logs will display &#34;Project locked&#34; error message.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Remote backend and state-level locks&lt;/h2&gt; &#xA;&lt;p&gt;Digger does not interfere with your remote backend setup. You could be using &lt;a href=&#34;https://developer.hashicorp.com/terraform/language/settings/backends/s3&#34;&gt;S3 backend&lt;/a&gt; or TF cloud&#39;s &lt;a href=&#34;https://developer.hashicorp.com/terraform/language/settings/backends/remote&#34;&gt;remote backend&lt;/a&gt; or &lt;a href=&#34;https://developer.hashicorp.com/terraform/language/settings/backends/configuration&#34;&gt;some other way&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Digger also doesn&#39;t differentiate locks based on statefiles - if a PR is locked, it&#39;s locked for all &#34;instances&#34; of state (aka &lt;a href=&#34;https://developer.hashicorp.com/terraform/cloud-docs/workspaces#terraform-cloud-vs-terraform-cli-workspaces&#34;&gt;Terraform CLI Workspaces&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;state-level locks will keep working normally because are handled by terraform itself (&lt;a href=&#34;https://www.runatlantis.io/docs/locking.html#relationship-to-terraform-state-locking&#34;&gt;same as in Atlantis&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We perform anonymous usage tracking. No sensitive or personal / identifyable data is logged. You can see what is tracked in &lt;a href=&#34;https://github.com/diggerhq/digger/raw/main/pkg/utils/usage.go&#34;&gt;&lt;code&gt;pkg/utils/usage.go&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are considering using digger within your organisation please &lt;a href=&#34;https://join.slack.com/t/diggertalk/shared_invite/zt-1q6npg7ib-9dwRbJp8sQpSr2fvWzt9aA&#34;&gt;reach out to us&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To contribute to Digger please follow our &lt;a href=&#34;https://raw.githubusercontent.com/diggerhq/digger/develop/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;Q) &lt;strong&gt;Since you&#39;re FOSS I assume you plan to monetize by selling support? Or...?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A) We are a vc-backed startup fully focused on this tool; in terms of monetization - we are currently in the process of launching Digger Pro. Check out the features &lt;a href=&#34;https://digger.dev/#plans&#34;&gt;here&lt;/a&gt; and feel free to book a &lt;a href=&#34;https://bit.ly/diggerpro&#34;&gt;demo&lt;/a&gt; if interested.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@DiggerHQ/the-case-for-headless-terraform-idp-5bc5a873805f&#34;&gt;The case for a &#39;Headless Terraform IDP&#39; for terraform self service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@DiggerHQ/can-github-actions-be-used-as-a-ci-cd-for-terraform-e4ac59a38b0&#34;&gt;Can GitHub actions be used as a CI/CD for Terraform?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/Terraform/comments/1132qf3/why_are_people_using_terraform_cloud_i_may_be/&#34;&gt;Why are people using Terraform Cloud?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itnext.io/pains-in-terraform-collaboration-249a56b4534e&#34;&gt;The Pains of Terraform Collaboration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@elliotgraebert/four-great-alternatives-to-hashicorps-terraform-cloud-6e0a3a0a5482&#34;&gt;Four Great Alternatives to HashiCorp‚Äôs Terraform Cloud&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>STRRL/cloudflare-tunnel-ingress-controller</title>
    <updated>2023-06-13T01:39:23Z</updated>
    <id>tag:github.com,2023-06-13:/STRRL/cloudflare-tunnel-ingress-controller</id>
    <link href="https://github.com/STRRL/cloudflare-tunnel-ingress-controller" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cloudflare Tunnel Ingress Controller&lt;/h1&gt; &#xA;&lt;p&gt;TLDR; This project simplifies exposing Kubernetes services to the internet easily and securely using Cloudflare Tunnel.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You should have a Cloudflare account and a domain configured on Cloudflare.&lt;/li&gt; &#xA; &lt;li&gt;Create a Cloudflare API token with the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Zone:Zone:Read&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Zone:DNS:Edit&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Account:Cloudflare Tunnel:Edit&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fetch the Account ID from the Cloudflare dashboard, follow the instructions &lt;a href=&#34;https://developers.cloudflare.com/fundamentals/get-started/basic-tasks/find-account-and-zone-ids/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Bootstrap a minikube cluster&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;minikube start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this project:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/STRRL/cloudflare-tunnel-ingress-controller &amp;amp;&amp;amp; \&#xA;  cd cloudflare-tunnel-ingress-controller&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install with Helm:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;helm upgrade --install --wait \&#xA;  -n cloudflare-tunnel-ingress-controller --create-namespace \&#xA;  cloudflare-tunnel-ingress-controller \&#xA;  ./helm/cloudflare-tunnel-ingress-controller \&#xA;  --set=cloudflare.apiToken=&#34;&amp;lt;cloudflare-api-token&amp;gt;&#34;,cloudflare.accountId=&#34;&amp;lt;cloudflare-account-id&amp;gt;&#34;,cloudflare.tunnelName=&#34;&amp;lt;your-favorite-tunnel-name&amp;gt;&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;if the tunnel does not exist, controller will create it for you.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then enable some awesome features in minikube, like kubernetes-dashboard:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;minikube addons enable dashboard&#xA;minikube addons enable metrics-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Then expose the dashboard to the internet by creating an &lt;code&gt;Ingress&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl -n kubernetes-dashboard \&#xA;  create ingress dashboard-via-cf-tunnel \&#xA;  --rule=&#34;&amp;lt;your-favorite-domain&amp;gt;/*=kubernetes-dashboard:80&#34;\&#xA;  --class cloudflare-tunnel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;for example, I would use &lt;code&gt;dash.strrl.cloud&lt;/code&gt; as my favorite domain here.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At last, access the dashboard via the domain you just created:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/STRRL/cloudflare-tunnel-ingress-controller/master/static/dash.strrl.cloud.png&#34; alt=&#34;dash.strrl.cloud&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Done! Enjoy! üéâ&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>