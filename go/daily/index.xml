<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-25T01:34:29Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shopify/toxiproxy</title>
    <updated>2023-03-25T01:34:29Z</updated>
    <id>tag:github.com,2023-03-25:/Shopify/toxiproxy</id>
    <link href="https://github.com/Shopify/toxiproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚è∞ üî• A TCP proxy to simulate network and system conditions for chaos and resiliency testing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Toxiproxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shopify/toxiproxy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/Shopify/toxiproxy.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/Shopify/toxiproxy/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/sOaNw0o.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Toxiproxy is a framework for simulating network conditions. It&#39;s made specifically to work in testing, CI and development environments, supporting deterministic tampering with connections, but with support for randomized chaos and customization. &lt;strong&gt;Toxiproxy is the tool you need to prove with tests that your application doesn&#39;t have single points of failure.&lt;/strong&gt; We&#39;ve been successfully using it in all development and test environments at Shopify since October, 2014. See our &lt;a href=&#34;https://shopify.engineering/building-and-testing-resilient-ruby-on-rails-applications&#34;&gt;blog post&lt;/a&gt; on resiliency for more information.&lt;/p&gt; &#xA;&lt;p&gt;Toxiproxy usage consists of two parts. A TCP proxy written in Go (what this repository contains) and a client communicating with the proxy over HTTP. You configure your application to make all test connections go through Toxiproxy and can then manipulate their health via HTTP. See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#usage&#34;&gt;Usage&lt;/a&gt; below on how to set up your project.&lt;/p&gt; &#xA;&lt;p&gt;For example, to add 1000ms of latency to the response of MySQL from the &lt;a href=&#34;https://github.com/Shopify/toxiproxy-ruby&#34;&gt;Ruby client&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Toxiproxy[:mysql_master].downstream(:latency, latency: 1000).apply do&#xA;  Shop.first # this takes at least 1s&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To take down all Redis instances:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;Toxiproxy[/redis/].down do&#xA;  Shop.first # this will throw an exception&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While the examples in this README are currently in Ruby, there&#39;s nothing stopping you from creating a client in any other language (see &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#clients&#34;&gt;Clients&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#toxiproxy&#34;&gt;Toxiproxy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#why-yet-another-chaotic-tcp-proxy&#34;&gt;Why yet another chaotic TCP proxy?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#clients&#34;&gt;Clients&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#1-installing-toxiproxy&#34;&gt;1. Installing Toxiproxy&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#upgrading-from-toxiproxy-1x&#34;&gt;Upgrading from Toxiproxy 1.x&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#2-populating-toxiproxy&#34;&gt;2. Populating Toxiproxy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#3-using-toxiproxy&#34;&gt;3. Using Toxiproxy&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#4-logging&#34;&gt;4. Logging&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#toxics&#34;&gt;Toxics&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#latency&#34;&gt;latency&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#down&#34;&gt;down&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#bandwidth&#34;&gt;bandwidth&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#slow_close&#34;&gt;slow_close&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#timeout&#34;&gt;timeout&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#reset_peer&#34;&gt;reset_peer&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#slicer&#34;&gt;slicer&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#limit_data&#34;&gt;limit_data&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#http-api&#34;&gt;HTTP API&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#proxy-fields&#34;&gt;Proxy fields:&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#toxic-fields&#34;&gt;Toxic fields:&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#endpoints&#34;&gt;Endpoints&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#populating-proxies&#34;&gt;Populating Proxies&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#cli-example&#34;&gt;CLI Example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#metrics&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#release&#34;&gt;Release&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why yet another chaotic TCP proxy?&lt;/h2&gt; &#xA;&lt;p&gt;The existing ones we found didn&#39;t provide the kind of dynamic API we needed for integration and unit testing. Linux tools like &lt;code&gt;nc&lt;/code&gt; and so on are not cross-platform and require root, which makes them problematic in test, development and CI environments.&lt;/p&gt; &#xA;&lt;h2&gt;Clients&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/toxiproxy-ruby&#34;&gt;toxiproxy-ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shopify/toxiproxy/tree/master/client&#34;&gt;toxiproxy-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/douglas/toxiproxy-python&#34;&gt;toxiproxy-python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mdevilliers/Toxiproxy.Net&#34;&gt;toxiproxy.net&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ihsw/toxiproxy-php-client&#34;&gt;toxiproxy-php-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ihsw/toxiproxy-node-client&#34;&gt;toxiproxy-node-client&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trekawek/toxiproxy-java&#34;&gt;toxiproxy-java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpittis/toxiproxy-haskell&#34;&gt;toxiproxy-haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/itarato/toxiproxy_rust&#34;&gt;toxiproxy-rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jcambass/toxiproxy_ex&#34;&gt;toxiproxy-elixir&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s walk through an example with a Rails application. Note that Toxiproxy is in no way tied to Ruby, it&#39;s just been our first use case. You can see the full example at &lt;a href=&#34;https://github.com/sirupsen/toxiproxy-rails-example&#34;&gt;sirupsen/toxiproxy-rails-example&lt;/a&gt;. To get started right away, jump down to &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#usage&#34;&gt;Usage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For our popular blog, for some reason we&#39;re storing the tags for our posts in Redis and the posts themselves in MySQL. We might have a &lt;code&gt;Post&lt;/code&gt; class that includes some methods to manipulate tags in a &lt;a href=&#34;http://redis.io/commands#set&#34;&gt;Redis set&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;class Post &amp;lt; ActiveRecord::Base&#xA;  # Return an Array of all the tags.&#xA;  def tags&#xA;    TagRedis.smembers(tag_key)&#xA;  end&#xA;&#xA;  # Add a tag to the post.&#xA;  def add_tag(tag)&#xA;    TagRedis.sadd(tag_key, tag)&#xA;  end&#xA;&#xA;  # Remove a tag from the post.&#xA;  def remove_tag(tag)&#xA;    TagRedis.srem(tag_key, tag)&#xA;  end&#xA;&#xA;  # Return the key in Redis for the set of tags for the post.&#xA;  def tag_key&#xA;    &#34;post:tags:#{self.id}&#34;&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ve decided that erroring while writing to the tag data store (adding/removing) is OK. However, if the tag data store is down, we should be able to see the post with no tags. We could simply rescue the &lt;code&gt;Redis::CannotConnectError&lt;/code&gt; around the &lt;code&gt;SMEMBERS&lt;/code&gt; Redis call in the &lt;code&gt;tags&lt;/code&gt; method. Let&#39;s use Toxiproxy to test that.&lt;/p&gt; &#xA;&lt;p&gt;Since we&#39;ve already installed Toxiproxy and it&#39;s running on our machine, we can skip to step 2. This is where we need to make sure Toxiproxy has a mapping for Redis tags. To &lt;code&gt;config/boot.rb&lt;/code&gt; (before any connection is made) we add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;require &#39;toxiproxy&#39;&#xA;&#xA;Toxiproxy.populate([&#xA;  {&#xA;    name: &#34;toxiproxy_test_redis_tags&#34;,&#xA;    listen: &#34;127.0.0.1:22222&#34;,&#xA;    upstream: &#34;127.0.0.1:6379&#34;&#xA;  }&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in &lt;code&gt;config/environments/test.rb&lt;/code&gt; we set the &lt;code&gt;TagRedis&lt;/code&gt; to be a Redis client that connects to Redis through Toxiproxy by adding this line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;TagRedis = Redis.new(port: 22222)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All calls in the test environment now go through Toxiproxy. That means we can add a unit test where we simulate a failure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;test &#34;should return empty array when tag redis is down when listing tags&#34; do&#xA;  @post.add_tag &#34;mammals&#34;&#xA;&#xA;  # Take down all Redises in Toxiproxy&#xA;  Toxiproxy[/redis/].down do&#xA;    assert_equal [], @post.tags&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test fails with &lt;code&gt;Redis::CannotConnectError&lt;/code&gt;. Perfect! Toxiproxy took down the Redis successfully for the duration of the closure. Let&#39;s fix the &lt;code&gt;tags&lt;/code&gt; method to be resilient:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;def tags&#xA;  TagRedis.smembers(tag_key)&#xA;rescue Redis::CannotConnectError&#xA;  []&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tests pass! We now have a unit test that proves fetching the tags when Redis is down returns an empty array, instead of throwing an exception. For full coverage you should also write an integration test that wraps fetching the entire blog post page when Redis is down.&lt;/p&gt; &#xA;&lt;p&gt;Full example application is at &lt;a href=&#34;https://github.com/sirupsen/toxiproxy-rails-example&#34;&gt;sirupsen/toxiproxy-rails-example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Configuring a project to use Toxiproxy consists of three steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Installing Toxiproxy&lt;/li&gt; &#xA; &lt;li&gt;Populating Toxiproxy&lt;/li&gt; &#xA; &lt;li&gt;Using Toxiproxy&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;1. Installing Toxiproxy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Shopify/toxiproxy/releases&#34;&gt;&lt;code&gt;Releases&lt;/code&gt;&lt;/a&gt; for the latest binaries and system packages for your architecture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ubuntu&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget -O toxiproxy-2.1.4.deb https://github.com/Shopify/toxiproxy/releases/download/v2.1.4/toxiproxy_2.1.4_amd64.deb&#xA;$ sudo dpkg -i toxiproxy-2.1.4.deb&#xA;$ sudo service toxiproxy start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;OS X&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew tap shopify/shopify&#xA;$ brew install toxiproxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with &lt;a href=&#34;https://www.macports.org/&#34;&gt;MacPorts&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ port install toxiproxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Toxiproxy for Windows is available for download at &lt;a href=&#34;https://github.com/Shopify/toxiproxy/releases/download/v2.1.4/toxiproxy-server-windows-amd64.exe&#34;&gt;https://github.com/Shopify/toxiproxy/releases/download/v2.1.4/toxiproxy-server-windows-amd64.exe&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Toxiproxy is available on &lt;a href=&#34;https://github.com/Shopify/toxiproxy/pkgs/container/toxiproxy&#34;&gt;Github container registry&lt;/a&gt;. Old versions &lt;code&gt;&amp;lt;= 2.1.4&lt;/code&gt; are available on on &lt;a href=&#34;https://hub.docker.com/r/shopify/toxiproxy/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker pull ghcr.io/shopify/toxiproxy&#xA;$ docker run --rm -it ghcr.io/shopify/toxiproxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using Toxiproxy from the host rather than other containers, enable host networking with &lt;code&gt;--net=host&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm --entrypoint=&#34;/toxiproxy-cli&#34; -it ghcr.io/shopify/toxiproxy list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Source&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have Go installed, you can build Toxiproxy from source using the make file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make build&#xA;$ ./toxiproxy-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Upgrading from Toxiproxy 1.x&lt;/h4&gt; &#xA;&lt;p&gt;In Toxiproxy 2.0 several changes were made to the API that make it incompatible with version 1.x. In order to use version 2.x of the Toxiproxy server, you will need to make sure your client library supports the same version. You can check which version of Toxiproxy you are running by looking at the &lt;code&gt;/version&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;p&gt;See the documentation for your client library for specific library changes. Detailed changes for the Toxiproxy server can been found in &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2. Populating Toxiproxy&lt;/h3&gt; &#xA;&lt;p&gt;When your application boots, it needs to make sure that Toxiproxy knows which endpoints to proxy where. The main parameters are: name, address for Toxiproxy to &lt;strong&gt;listen&lt;/strong&gt; on and the address of the upstream.&lt;/p&gt; &#xA;&lt;p&gt;Some client libraries have helpers for this task, which is essentially just making sure each proxy in a list is created. Example from the Ruby client:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# Make sure `shopify_test_redis_master` and `shopify_test_mysql_master` are&#xA;# present in Toxiproxy&#xA;Toxiproxy.populate([&#xA;  {&#xA;    name: &#34;shopify_test_redis_master&#34;,&#xA;    listen: &#34;127.0.0.1:22220&#34;,&#xA;    upstream: &#34;127.0.0.1:6379&#34;&#xA;  },&#xA;  {&#xA;    name: &#34;shopify_test_mysql_master&#34;,&#xA;    listen: &#34;127.0.0.1:24220&#34;,&#xA;    upstream: &#34;127.0.0.1:3306&#34;&#xA;  }&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code needs to run as early in boot as possible, before any code establishes a connection through Toxiproxy. Please check your client library for documentation on the population helpers.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively use the CLI to create proxies, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;toxiproxy-cli create -l localhost:26379 -u localhost:6379 shopify_test_redis_master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recommend a naming such as the above: &lt;code&gt;&amp;lt;app&amp;gt;_&amp;lt;env&amp;gt;_&amp;lt;data store&amp;gt;_&amp;lt;shard&amp;gt;&lt;/code&gt;. This makes sure there are no clashes between applications using the same Toxiproxy.&lt;/p&gt; &#xA;&lt;p&gt;For large application we recommend storing the Toxiproxy configurations in a separate configuration file. We use &lt;code&gt;config/toxiproxy.json&lt;/code&gt;. This file can be passed to the server using the &lt;code&gt;-config&lt;/code&gt; option, or loaded by the application to use with the &lt;code&gt;populate&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;An example &lt;code&gt;config/toxiproxy.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;name&#34;: &#34;web_dev_frontend_1&#34;,&#xA;    &#34;listen&#34;: &#34;[::]:18080&#34;,&#xA;    &#34;upstream&#34;: &#34;webapp.domain:8080&#34;,&#xA;    &#34;enabled&#34;: true&#xA;  },&#xA;  {&#xA;    &#34;name&#34;: &#34;web_dev_mysql_1&#34;,&#xA;    &#34;listen&#34;: &#34;[::]:13306&#34;,&#xA;    &#34;upstream&#34;: &#34;database.domain:3306&#34;,&#xA;    &#34;enabled&#34;: true&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use ports outside the ephemeral port range to avoid random port conflicts. It&#39;s &lt;code&gt;32,768&lt;/code&gt; to &lt;code&gt;61,000&lt;/code&gt; on Linux by default, see &lt;code&gt;/proc/sys/net/ipv4/ip_local_port_range&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3. Using Toxiproxy&lt;/h3&gt; &#xA;&lt;p&gt;To use Toxiproxy, you now need to configure your application to connect through Toxiproxy. Continuing with our example from step two, we can configure our Redis client to connect through Toxiproxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# old straight to redis&#xA;redis = Redis.new(port: 6380)&#xA;&#xA;# new through toxiproxy&#xA;redis = Redis.new(port: 22220)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can tamper with it through the Toxiproxy API. In Ruby:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;redis = Redis.new(port: 22220)&#xA;&#xA;Toxiproxy[:shopify_test_redis_master].downstream(:latency, latency: 1000).apply do&#xA;  redis.get(&#34;test&#34;) # will take 1s&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via the CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;toxiproxy-cli toxic add -t latency -a latency=1000 shopify_test_redis_master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please consult your respective client library on usage.&lt;/p&gt; &#xA;&lt;h3&gt;4. Logging&lt;/h3&gt; &#xA;&lt;p&gt;There are the following log levels: panic, fatal, error, warn or warning, info, debug and trace. The level could be updated via environment variable &lt;code&gt;LOG_LEVEL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Toxics&lt;/h3&gt; &#xA;&lt;p&gt;Toxics manipulate the pipe between the client and upstream. They can be added and removed from proxies using the &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#http-api&#34;&gt;HTTP api&lt;/a&gt;. Each toxic has its own parameters to change how it affects the proxy links.&lt;/p&gt; &#xA;&lt;p&gt;For documentation on implementing custom toxics, see &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/CREATING_TOXICS.md&#34;&gt;CREATING_TOXICS.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;latency&lt;/h4&gt; &#xA;&lt;p&gt;Add a delay to all data going through the proxy. The delay is equal to &lt;code&gt;latency&lt;/code&gt; +/- &lt;code&gt;jitter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;latency&lt;/code&gt;: time in milliseconds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jitter&lt;/code&gt;: time in milliseconds&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;down&lt;/h4&gt; &#xA;&lt;p&gt;Bringing a service down is not technically a toxic in the implementation of Toxiproxy. This is done by &lt;code&gt;POST&lt;/code&gt;ing to &lt;code&gt;/proxies/{proxy}&lt;/code&gt; and setting the &lt;code&gt;enabled&lt;/code&gt; field to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;bandwidth&lt;/h4&gt; &#xA;&lt;p&gt;Limit a connection to a maximum number of kilobytes per second.&lt;/p&gt; &#xA;&lt;p&gt;Attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rate&lt;/code&gt;: rate in KB/s&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;slow_close&lt;/h4&gt; &#xA;&lt;p&gt;Delay the TCP socket from closing until &lt;code&gt;delay&lt;/code&gt; has elapsed.&lt;/p&gt; &#xA;&lt;p&gt;Attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;delay&lt;/code&gt;: time in milliseconds&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;timeout&lt;/h4&gt; &#xA;&lt;p&gt;Stops all data from getting through, and closes the connection after &lt;code&gt;timeout&lt;/code&gt;. If &lt;code&gt;timeout&lt;/code&gt; is 0, the connection won&#39;t close, and data will be delayed until the toxic is removed.&lt;/p&gt; &#xA;&lt;p&gt;Attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: time in milliseconds&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;reset_peer&lt;/h4&gt; &#xA;&lt;p&gt;Simulate TCP RESET (Connection reset by peer) on the connections by closing the stub Input immediately or after a &lt;code&gt;timeout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: time in milliseconds&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;slicer&lt;/h4&gt; &#xA;&lt;p&gt;Slices TCP data up into small bits, optionally adding a delay between each sliced &#34;packet&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Attributes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;average_size&lt;/code&gt;: size in bytes of an average packet&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;size_variation&lt;/code&gt;: variation in bytes of an average packet (should be smaller than average_size)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delay&lt;/code&gt;: time in microseconds to delay each packet by&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;limit_data&lt;/h4&gt; &#xA;&lt;p&gt;Closes connection when transmitted data exceeded limit.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;bytes&lt;/code&gt;: number of bytes it should transmit before connection is closed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;HTTP API&lt;/h3&gt; &#xA;&lt;p&gt;All communication with the Toxiproxy daemon from the client happens through the HTTP interface, which is described here.&lt;/p&gt; &#xA;&lt;p&gt;Toxiproxy listens for HTTP on port &lt;strong&gt;8474&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Proxy fields:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: proxy name (string)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;listen&lt;/code&gt;: listen address (string)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;upstream&lt;/code&gt;: proxy upstream address (string)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enabled&lt;/code&gt;: true/false (defaults to true on creation)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To change a proxy&#39;s name, it must be deleted and recreated.&lt;/p&gt; &#xA;&lt;p&gt;Changing the &lt;code&gt;listen&lt;/code&gt; or &lt;code&gt;upstream&lt;/code&gt; fields will restart the proxy and drop any active connections.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;listen&lt;/code&gt; is specified with a port of 0, toxiproxy will pick an ephemeral port. The &lt;code&gt;listen&lt;/code&gt; field in the response will be updated with the actual port.&lt;/p&gt; &#xA;&lt;p&gt;If you change &lt;code&gt;enabled&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, it will take down the proxy. You can switch it back to &lt;code&gt;true&lt;/code&gt; to reenable it.&lt;/p&gt; &#xA;&lt;h4&gt;Toxic fields:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt;: toxic name (string, defaults to &lt;code&gt;&amp;lt;type&amp;gt;_&amp;lt;stream&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt;: toxic type (string)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stream&lt;/code&gt;: link direction to affect (defaults to &lt;code&gt;downstream&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toxicity&lt;/code&gt;: probability of the toxic being applied to a link (defaults to 1.0, 100%)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;attributes&lt;/code&gt;: a map of toxic-specific attributes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/#toxics&#34;&gt;Toxics&lt;/a&gt; for toxic-specific attributes.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;stream&lt;/code&gt; direction must be either &lt;code&gt;upstream&lt;/code&gt; or &lt;code&gt;downstream&lt;/code&gt;. &lt;code&gt;upstream&lt;/code&gt; applies the toxic on the &lt;code&gt;client -&amp;gt; server&lt;/code&gt; connection, while &lt;code&gt;downstream&lt;/code&gt; applies the toxic on the &lt;code&gt;server -&amp;gt; client&lt;/code&gt; connection. This can be used to modify requests and responses separately.&lt;/p&gt; &#xA;&lt;h4&gt;Endpoints&lt;/h4&gt; &#xA;&lt;p&gt;All endpoints are JSON.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET /proxies&lt;/strong&gt; - List existing proxies and their toxics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POST /proxies&lt;/strong&gt; - Create a new proxy&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POST /populate&lt;/strong&gt; - Create or replace a list of proxies&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET /proxies/{proxy}&lt;/strong&gt; - Show the proxy with all its active toxics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POST /proxies/{proxy}&lt;/strong&gt; - Update a proxy&#39;s fields&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DELETE /proxies/{proxy}&lt;/strong&gt; - Delete an existing proxy&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET /proxies/{proxy}/toxics&lt;/strong&gt; - List active toxics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POST /proxies/{proxy}/toxics&lt;/strong&gt; - Create a new toxic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET /proxies/{proxy}/toxics/{toxic}&lt;/strong&gt; - Get an active toxic&#39;s fields&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POST /proxies/{proxy}/toxics/{toxic}&lt;/strong&gt; - Update an active toxic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DELETE /proxies/{proxy}/toxics/{toxic}&lt;/strong&gt; - Remove an active toxic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;POST /reset&lt;/strong&gt; - Enable all proxies and remove all active toxics&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET /version&lt;/strong&gt; - Returns the server version number&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET /metrics&lt;/strong&gt; - Returns Prometheus-compatible metrics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Populating Proxies&lt;/h4&gt; &#xA;&lt;p&gt;Proxies can be added and configured in bulk using the &lt;code&gt;/populate&lt;/code&gt; endpoint. This is done by passing a json array of proxies to toxiproxy. If a proxy with the same name already exists, it will be compared to the new proxy and replaced if the &lt;code&gt;upstream&lt;/code&gt; and &lt;code&gt;listen&lt;/code&gt; address don&#39;t match.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;/populate&lt;/code&gt; call can be included for example at application start to ensure all required proxies exist. It is safe to make this call several times, since proxies will be untouched as long as their fields are consistent with the new data.&lt;/p&gt; &#xA;&lt;h3&gt;CLI Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ toxiproxy-cli create -l localhost:26379 -u localhost:6379 redis&#xA;Created new proxy redis&#xA;$ toxiproxy-cli list&#xA;Listen          Upstream        Name  Enabled Toxics&#xA;======================================================================&#xA;127.0.0.1:26379 localhost:6379  redis true    None&#xA;&#xA;Hint: inspect toxics with `toxiproxy-client inspect &amp;lt;proxyName&amp;gt;`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ redis-cli -p 26379&#xA;127.0.0.1:26379&amp;gt; SET omg pandas&#xA;OK&#xA;127.0.0.1:26379&amp;gt; GET omg&#xA;&#34;pandas&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ toxiproxy-cli toxic add -t latency -a latency=1000 redis&#xA;Added downstream latency toxic &#39;latency_downstream&#39; on proxy &#39;redis&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ redis-cli -p 26379&#xA;127.0.0.1:26379&amp;gt; GET omg&#xA;&#34;pandas&#34;&#xA;(1.00s)&#xA;127.0.0.1:26379&amp;gt; DEL omg&#xA;(integer) 1&#xA;(1.00s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ toxiproxy-cli toxic remove -n latency_downstream redis&#xA;Removed toxic &#39;latency_downstream&#39; on proxy &#39;redis&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ redis-cli -p 26379&#xA;127.0.0.1:26379&amp;gt; GET omg&#xA;(nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ toxiproxy-cli delete redis&#xA;Deleted proxy redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ redis-cli -p 26379&#xA;Could not connect to Redis at 127.0.0.1:26379: Connection refused&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Metrics&lt;/h3&gt; &#xA;&lt;p&gt;Toxiproxy exposes Prometheus-compatible metrics via its HTTP API at /metrics. See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/METRICS.md&#34;&gt;METRICS.md&lt;/a&gt; for full descriptions&lt;/p&gt; &#xA;&lt;h3&gt;Frequently Asked Questions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;How fast is Toxiproxy?&lt;/strong&gt; The speed of Toxiproxy depends largely on your hardware, but you can expect a latency of &lt;em&gt;&amp;lt; 100¬µs&lt;/em&gt; when no toxics are enabled. When running with &lt;code&gt;GOMAXPROCS=4&lt;/code&gt; on a Macbook Pro we achieved &lt;em&gt;~1000MB/s&lt;/em&gt; throughput, and as high as &lt;em&gt;2400MB/s&lt;/em&gt; on a higher end desktop. Basically, you can expect Toxiproxy to move data around at least as fast the app you&#39;re testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can Toxiproxy do randomized testing?&lt;/strong&gt; Many of the available toxics can be configured to have randomness, such as &lt;code&gt;jitter&lt;/code&gt; in the &lt;code&gt;latency&lt;/code&gt; toxic. There is also a global &lt;code&gt;toxicity&lt;/code&gt; parameter that specifies the percentage of connections a toxic will affect. This is most useful for things like the &lt;code&gt;timeout&lt;/code&gt; toxic, which would allow X% of connections to timeout.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;I am not seeing my Toxiproxy actions reflected for MySQL&lt;/strong&gt;. MySQL will prefer the local Unix domain socket for some clients, no matter which port you pass it if the host is set to &lt;code&gt;localhost&lt;/code&gt;. Configure your MySQL server to not create a socket, and use &lt;code&gt;127.0.0.1&lt;/code&gt; as the host. Remember to remove the old socket after you restart the server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Toxiproxy causes intermittent connection failures&lt;/strong&gt;. Use ports outside the ephemeral port range to avoid random port conflicts. It&#39;s &lt;code&gt;32,768&lt;/code&gt; to &lt;code&gt;61,000&lt;/code&gt; on Linux by default, see &lt;code&gt;/proc/sys/net/ipv4/ip_local_port_range&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Should I run a Toxiproxy for each application?&lt;/strong&gt; No, we recommend using the same Toxiproxy for all applications. To distinguish between services we recommend naming your proxies with the scheme: &lt;code&gt;&amp;lt;app&amp;gt;_&amp;lt;env&amp;gt;_&amp;lt;data store&amp;gt;_&amp;lt;shard&amp;gt;&lt;/code&gt;. For example, &lt;code&gt;shopify_test_redis_master&lt;/code&gt; or &lt;code&gt;shopify_development_mysql_1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt;. Build a toxiproxy development binary for the current platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make all&lt;/code&gt;. Build Toxiproxy binaries and packages for all platforms. Requires to have Go compiled with cross compilation enabled on Linux and Darwin (amd64) as well as &lt;a href=&#34;https://goreleaser.com/&#34;&gt;&lt;code&gt;goreleaser&lt;/code&gt;&lt;/a&gt; in your &lt;code&gt;$PATH&lt;/code&gt; to build binaries the Linux package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make test&lt;/code&gt;. Run the Toxiproxy tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Release&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Shopify/toxiproxy/master/RELEASE.md&#34;&gt;RELEASE.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prometheus-community/postgres_exporter</title>
    <updated>2023-03-25T01:34:29Z</updated>
    <id>tag:github.com,2023-03-25:/prometheus-community/postgres_exporter</id>
    <link href="https://github.com/prometheus-community/postgres_exporter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A PostgreSQL metric exporter for Prometheus&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/prometheus-community/postgres_exporter&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/prometheus-community/postgres_exporter.svg?style=svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/prometheus-community/postgres_exporter?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/prometheus-community/postgres_exporter/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/prometheus-community/postgres_exporter&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/prometheus-community/postgres_exporter&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/prometheuscommunity/postgres-exporter/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/prometheuscommunity/postgres-exporter.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;PostgreSQL Server Exporter&lt;/h1&gt; &#xA;&lt;p&gt;Prometheus exporter for PostgreSQL server metrics.&lt;/p&gt; &#xA;&lt;p&gt;CI Tested PostgreSQL versions: &lt;code&gt;9.4&lt;/code&gt;, &lt;code&gt;9.5&lt;/code&gt;, &lt;code&gt;9.6&lt;/code&gt;, &lt;code&gt;10&lt;/code&gt;, &lt;code&gt;11&lt;/code&gt;, &lt;code&gt;12&lt;/code&gt;, &lt;code&gt;13&lt;/code&gt;, &lt;code&gt;14&lt;/code&gt;, &lt;code&gt;15&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;This package is available for Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Start an example database&#xA;docker run --net=host -it --rm -e POSTGRES_PASSWORD=password postgres&#xA;# Connect to it&#xA;docker run \&#xA;  --net=host \&#xA;  -e DATA_SOURCE_NAME=&#34;postgresql://postgres:password@localhost:5432/postgres?sslmode=disable&#34; \&#xA;  quay.io/prometheuscommunity/postgres-exporter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multi-Target Support (BETA)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This Feature is in beta and may require changes in future releases. Feedback is welcome.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This exporter supports the &lt;a href=&#34;https://prometheus.io/docs/guides/multi-target-exporter/&#34;&gt;multi-target pattern&lt;/a&gt;. This allows running a single instance of this exporter for multiple postgres targets. Using the multi-target functionality of this exporter is &lt;strong&gt;optional&lt;/strong&gt; and meant for cases where it is impossible to install the exporter as a sidecar, for example SaaS-managed services.&lt;/p&gt; &#xA;&lt;p&gt;To use the multi-target functionality, send an http request to the endpoint &lt;code&gt;/probe?target=foo:5432&lt;/code&gt; where target is set to the DSN of the postgres instance to scrape metrics from.&lt;/p&gt; &#xA;&lt;p&gt;To avoid putting sensitive information like username and password in the URL, preconfigured auth modules are supported via the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-community/postgres_exporter/master/#auth_modules&#34;&gt;auth_modules&lt;/a&gt; section of the config file. auth_modules for DSNs can be used with the &lt;code&gt;/probe&lt;/code&gt; endpoint by specifying the &lt;code&gt;?auth_module=foo&lt;/code&gt; http parameter.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration File&lt;/h2&gt; &#xA;&lt;p&gt;The configuration file controls the behavior of the exporter. It can be set using the &lt;code&gt;--config.file&lt;/code&gt; command line flag and defaults to &lt;code&gt;postgres_exporter.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;auth_modules&lt;/h3&gt; &#xA;&lt;p&gt;This section defines preset authentication and connection parameters for use in the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-community/postgres_exporter/master/#multi-target-support-beta&#34;&gt;multi-target endpoint&lt;/a&gt;. &lt;code&gt;auth_modules&lt;/code&gt; is a map of modules with the key being the identifier which can be used in the &lt;code&gt;/probe&lt;/code&gt; endpoint. Currently only the &lt;code&gt;userpass&lt;/code&gt; type is supported.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;auth_modules:&#xA;  foo1: # Set this to any name you want&#xA;    type: userpass&#xA;    userpass:&#xA;      username: first&#xA;      password: firstpass&#xA;    options:&#xA;      # options become key=value parameters of the DSN&#xA;      sslmode: disable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building and running&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/prometheus-community/postgres_exporter.git&#xA;cd postgres_exporter&#xA;make build&#xA;./postgres_exporter &amp;lt;flags&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the Docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make promu&#xA;promu crossbuild -p linux/amd64 -p linux/armv7 -p linux/amd64 -p linux/ppc64le&#xA;make docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the docker image as &lt;code&gt;prometheuscommunity/postgres_exporter:${branch}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Flags&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;help&lt;/code&gt; Show context-sensitive help (also try --help-long and --help-man).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;collector.database&lt;/code&gt; Enable the pg_database collector. Default is &lt;code&gt;enabled&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;collector.bgwriter&lt;/code&gt; Enable the pg_stat_bgwriter collector. Default is &lt;code&gt;enabled&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;web.listen-address&lt;/code&gt; Address to listen on for web interface and telemetry. Default is &lt;code&gt;:9187&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;web.telemetry-path&lt;/code&gt; Path under which to expose metrics. Default is &lt;code&gt;/metrics&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;disable-default-metrics&lt;/code&gt; Use only metrics supplied from &lt;code&gt;queries.yaml&lt;/code&gt; via &lt;code&gt;--extend.query-path&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;disable-settings-metrics&lt;/code&gt; Use the flag if you don&#39;t want to scrape &lt;code&gt;pg_settings&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;auto-discover-databases&lt;/code&gt; Whether to discover the databases on a server dynamically. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;extend.query-path&lt;/code&gt; Path to a YAML file containing custom queries to run. Check out &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-community/postgres_exporter/master/queries.yaml&#34;&gt;&lt;code&gt;queries.yaml&lt;/code&gt;&lt;/a&gt; for examples of the format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dumpmaps&lt;/code&gt; Do not run - print the internal representation of the metric maps. Useful when debugging a custom queries file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;constantLabels&lt;/code&gt; Labels to set in all metrics. A list of &lt;code&gt;label=value&lt;/code&gt; pairs, separated by commas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;version&lt;/code&gt; Show application version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;exclude-databases&lt;/code&gt; A list of databases to remove when autoDiscoverDatabases is enabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;include-databases&lt;/code&gt; A list of databases to only include when autoDiscoverDatabases is enabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;log.level&lt;/code&gt; Set logging level: one of &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;log.format&lt;/code&gt; Set the log format: one of &lt;code&gt;logfmt&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;web.config.file&lt;/code&gt; Configuration file to use TLS and/or basic authentication. The format of the file is described &lt;a href=&#34;https://github.com/prometheus/exporter-toolkit/raw/master/docs/web-configuration.md&#34;&gt;in the exporter-toolkit repository&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;The following environment variables configure the exporter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DATA_SOURCE_NAME&lt;/code&gt; the default legacy format. Accepts URI form and key=value form arguments. The URI may contain the username and password to connect with.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DATA_SOURCE_URI&lt;/code&gt; an alternative to &lt;code&gt;DATA_SOURCE_NAME&lt;/code&gt; which exclusively accepts the hostname without a username and password component. For example, &lt;code&gt;my_pg_hostname&lt;/code&gt; or &lt;code&gt;my_pg_hostname?sslmode=disable&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DATA_SOURCE_URI_FILE&lt;/code&gt; The same as above but reads the URI from a file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DATA_SOURCE_USER&lt;/code&gt; When using &lt;code&gt;DATA_SOURCE_URI&lt;/code&gt;, this environment variable is used to specify the username.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DATA_SOURCE_USER_FILE&lt;/code&gt; The same, but reads the username from a file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DATA_SOURCE_PASS&lt;/code&gt; When using &lt;code&gt;DATA_SOURCE_URI&lt;/code&gt;, this environment variable is used to specify the password to connect with.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DATA_SOURCE_PASS_FILE&lt;/code&gt; The same as above but reads the password from a file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_WEB_TELEMETRY_PATH&lt;/code&gt; Path under which to expose metrics. Default is &lt;code&gt;/metrics&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_DISABLE_DEFAULT_METRICS&lt;/code&gt; Use only metrics supplied from &lt;code&gt;queries.yaml&lt;/code&gt;. Value can be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_DISABLE_SETTINGS_METRICS&lt;/code&gt; Use the flag if you don&#39;t want to scrape &lt;code&gt;pg_settings&lt;/code&gt;. Value can be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_AUTO_DISCOVER_DATABASES&lt;/code&gt; Whether to discover the databases on a server dynamically. Value can be &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_EXTEND_QUERY_PATH&lt;/code&gt; Path to a YAML file containing custom queries to run. Check out &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-community/postgres_exporter/master/queries.yaml&#34;&gt;&lt;code&gt;queries.yaml&lt;/code&gt;&lt;/a&gt; for examples of the format.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_CONSTANT_LABELS&lt;/code&gt; Labels to set in all metrics. A list of &lt;code&gt;label=value&lt;/code&gt; pairs, separated by commas.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_EXCLUDE_DATABASES&lt;/code&gt; A comma-separated list of databases to remove when autoDiscoverDatabases is enabled. Default is empty string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_INCLUDE_DATABASES&lt;/code&gt; A comma-separated list of databases to only include when autoDiscoverDatabases is enabled. Default is empty string, means allow all.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PG_EXPORTER_METRIC_PREFIX&lt;/code&gt; A prefix to use for each of the default metrics exported by postgres-exporter. Default is &lt;code&gt;pg&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Settings set by environment variables starting with &lt;code&gt;PG_&lt;/code&gt; will be overwritten by the corresponding CLI flag if given.&lt;/p&gt; &#xA;&lt;h3&gt;Setting the Postgres server&#39;s data source name&lt;/h3&gt; &#xA;&lt;p&gt;The PostgreSQL server&#39;s &lt;a href=&#34;http://en.wikipedia.org/wiki/Data_source_name&#34;&gt;data source name&lt;/a&gt; must be set via the &lt;code&gt;DATA_SOURCE_NAME&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;For running it locally on a default Debian/Ubuntu install, this will work (transpose to init script as appropriate):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo -u postgres DATA_SOURCE_NAME=&#34;user=postgres host=/var/run/postgresql/ sslmode=disable&#34; postgres_exporter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can set a list of sources to scrape different instances from the one exporter setup. Just define a comma separated string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo -u postgres DATA_SOURCE_NAME=&#34;port=5432,port=6432&#34; postgres_exporter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://github.com/lib/pq&#34;&gt;github.com/lib/pq&lt;/a&gt; module for other ways to format the connection string.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new metrics&lt;/h3&gt; &#xA;&lt;p&gt;The exporter will attempt to dynamically export additional metrics if they are added in the future, but they will be marked as &#34;untyped&#34;. Additional metric maps can be easily created from Postgres documentation by copying the tables and using the following Python snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;x = &#34;&#34;&#34;tab separated raw text of a documentation table&#34;&#34;&#34;&#xA;for l in StringIO(x):&#xA;    column, ctype, description = l.split(&#39;\t&#39;)&#xA;    print &#34;&#34;&#34;&#34;{0}&#34; : {{ prometheus.CounterValue, prometheus.NewDesc(&#34;pg_stat_database_{0}&#34;, &#34;{2}&#34;, nil, nil) }}, &#34;&#34;&#34;.format(column.strip(), ctype, description.strip())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Adjust the value of the resultant prometheus value type appropriately. This helps build rich self-documenting metrics for the exporter.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new metrics via a config file&lt;/h3&gt; &#xA;&lt;p&gt;The -extend.query-path command-line argument specifies a YAML file containing additional queries to run. Some examples are provided in &lt;a href=&#34;https://raw.githubusercontent.com/prometheus-community/postgres_exporter/master/queries.yaml&#34;&gt;queries.yaml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Disabling default metrics&lt;/h3&gt; &#xA;&lt;p&gt;To work with non-officially-supported postgres versions (e.g. 8.2.15), or variants of postgres (e.g. Greenplum), you can disable the default metrics with the &lt;code&gt;--disable-default-metrics&lt;/code&gt; flag. This removes all built-in metrics, and uses only metrics defined by queries in the &lt;code&gt;queries.yaml&lt;/code&gt; file you supply (so you must supply one, otherwise the exporter will return nothing but internal statuses and not your database).&lt;/p&gt; &#xA;&lt;h3&gt;Automatically discover databases&lt;/h3&gt; &#xA;&lt;p&gt;To scrape metrics from all databases on a database server, the database DSN&#39;s can be dynamically discovered via the &lt;code&gt;--auto-discover-databases&lt;/code&gt; flag. When true, &lt;code&gt;SELECT datname FROM pg_database WHERE datallowconn = true AND datistemplate = false and datname != current_database()&lt;/code&gt; is run for all configured DSN&#39;s. From the result a new set of DSN&#39;s is created for which the metrics are scraped.&lt;/p&gt; &#xA;&lt;p&gt;In addition, the option &lt;code&gt;--exclude-databases&lt;/code&gt; adds the possibily to filter the result from the auto discovery to discard databases you do not need.&lt;/p&gt; &#xA;&lt;p&gt;If you want to include only subset of databases, you can use option &lt;code&gt;--include-databases&lt;/code&gt;. Exporter still makes request to &lt;code&gt;pg_database&lt;/code&gt; table, but do scrape from only if database is in include list.&lt;/p&gt; &#xA;&lt;h3&gt;Running as non-superuser&lt;/h3&gt; &#xA;&lt;p&gt;To be able to collect metrics from &lt;code&gt;pg_stat*&lt;/code&gt; views as non-superuser in PostgreSQL server versions &amp;gt;= 10 you can grant the &lt;code&gt;pg_monitor&lt;/code&gt; or &lt;code&gt;pg_read_all_stats&lt;/code&gt; &lt;a href=&#34;https://www.postgresql.org/docs/current/predefined-roles.html&#34;&gt;built-in roles&lt;/a&gt; to the user. If you need to monitor older PostgreSQL servers, you will have to create functions and views as a superuser, and assign permissions separately to those.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- To use IF statements, hence to be able to check if the user exists before&#xA;-- attempting creation, we need to switch to procedural SQL (PL/pgSQL)&#xA;-- instead of standard SQL.&#xA;-- More: https://www.postgresql.org/docs/9.3/plpgsql-overview.html&#xA;-- To preserve compatibility with &amp;lt;9.0, DO blocks are not used; instead,&#xA;-- a function is created and dropped.&#xA;CREATE OR REPLACE FUNCTION __tmp_create_user() returns void as $$&#xA;BEGIN&#xA;  IF NOT EXISTS (&#xA;          SELECT                       -- SELECT list can stay empty for this&#xA;          FROM   pg_catalog.pg_user&#xA;          WHERE  usename = &#39;postgres_exporter&#39;) THEN&#xA;    CREATE USER postgres_exporter;&#xA;  END IF;&#xA;END;&#xA;$$ language plpgsql;&#xA;&#xA;SELECT __tmp_create_user();&#xA;DROP FUNCTION __tmp_create_user();&#xA;&#xA;ALTER USER postgres_exporter WITH PASSWORD &#39;password&#39;;&#xA;ALTER USER postgres_exporter SET SEARCH_PATH TO postgres_exporter,pg_catalog;&#xA;&#xA;-- If deploying as non-superuser (for example in AWS RDS), uncomment the GRANT&#xA;-- line below and replace &amp;lt;MASTER_USER&amp;gt; with your root user.&#xA;-- GRANT postgres_exporter TO &amp;lt;MASTER_USER&amp;gt;;&#xA;&#xA;GRANT CONNECT ON DATABASE postgres TO postgres_exporter;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run following command if you use PostgreSQL versions &amp;gt;= 10&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;GRANT pg_monitor to postgres_exporter;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run following SQL commands only if you use PostgreSQL versions older than 10. In PostgreSQL, views run with the permissions of the user that created them so they can act as security barriers. Functions need to be created to share this data with the non-superuser. Only creating the views will leave out the most important bits of data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE SCHEMA IF NOT EXISTS postgres_exporter;&#xA;GRANT USAGE ON SCHEMA postgres_exporter TO postgres_exporter;&#xA;&#xA;CREATE OR REPLACE FUNCTION get_pg_stat_activity() RETURNS SETOF pg_stat_activity AS&#xA;$$ SELECT * FROM pg_catalog.pg_stat_activity; $$&#xA;LANGUAGE sql&#xA;VOLATILE&#xA;SECURITY DEFINER;&#xA;&#xA;CREATE OR REPLACE VIEW postgres_exporter.pg_stat_activity&#xA;AS&#xA;  SELECT * from get_pg_stat_activity();&#xA;&#xA;GRANT SELECT ON postgres_exporter.pg_stat_activity TO postgres_exporter;&#xA;&#xA;CREATE OR REPLACE FUNCTION get_pg_stat_replication() RETURNS SETOF pg_stat_replication AS&#xA;$$ SELECT * FROM pg_catalog.pg_stat_replication; $$&#xA;LANGUAGE sql&#xA;VOLATILE&#xA;SECURITY DEFINER;&#xA;&#xA;CREATE OR REPLACE VIEW postgres_exporter.pg_stat_replication&#xA;AS&#xA;  SELECT * FROM get_pg_stat_replication();&#xA;&#xA;GRANT SELECT ON postgres_exporter.pg_stat_replication TO postgres_exporter;&#xA;&#xA;CREATE EXTENSION IF NOT EXISTS pg_stat_statements;&#xA;CREATE OR REPLACE FUNCTION get_pg_stat_statements() RETURNS SETOF pg_stat_statements AS&#xA;$$ SELECT * FROM public.pg_stat_statements; $$&#xA;LANGUAGE sql&#xA;VOLATILE&#xA;SECURITY DEFINER;&#xA;&#xA;CREATE OR REPLACE VIEW postgres_exporter.pg_stat_statements&#xA;AS&#xA;  SELECT * FROM get_pg_stat_statements();&#xA;&#xA;GRANT SELECT ON postgres_exporter.pg_stat_statements TO postgres_exporter;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; &lt;br&gt;Remember to use &lt;code&gt;postgres&lt;/code&gt; database name in the connection string:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;DATA_SOURCE_NAME=postgresql://postgres_exporter:password@localhost:5432/postgres?sslmode=disable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Running the tests&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Run the unit tests&#xA;make test&#xA;# Start the test database with docker&#xA;docker run -p 5432:5432 -e POSTGRES_DB=circle_test -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=test -d postgres&#xA;# Run the integration tests&#xA;DATA_SOURCE_NAME=&#39;postgresql://postgres:test@localhost:5432/circle_test?sslmode=disable&#39; GOOPTS=&#39;-v -tags integration&#39; make test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>eolinker/apinto</title>
    <updated>2023-03-25T01:34:29Z</updated>
    <id>tag:github.com,2023-03-25:/eolinker/apinto</id>
    <link href="https://github.com/eolinker/apinto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Âü∫‰∫égolangÂºÄÂèëÁöÑÁΩëÂÖ≥„ÄÇÂÖ∑ÊúâÂêÑÁßçÊèí‰ª∂ÔºåÂèØ‰ª•Ëá™Ë°åÊâ©Â±ïÔºåÂç≥ÊèíÂç≥Áî®„ÄÇÊ≠§Â§ñÔºåÂÆÉÂèØ‰ª•Âø´ÈÄüÂ∏ÆÂä©‰ºÅ‰∏öÁÆ°ÁêÜAPIÊúçÂä°ÔºåÊèêÈ´òAPIÊúçÂä°ÁöÑÁ®≥ÂÆöÊÄßÂíåÂÆâÂÖ®ÊÄß„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Apinto&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/eolinker/apinto&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/eolinker/apinto&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eolinker/apinto/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/eolinker/apinto/all.svg?style=flat-square&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eolinker/apinto/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/eolinker/apinto.svg?style=flat-square&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt;&lt;img src=&#34;https://shields.io/github/downloads/eolinker/apinto/total&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/eolinker/apinto/main/CODE_OF_CONDUCT_CN.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://data.eolinker.com/course/eaC48Js3400ffd03c21e36b3eea434dce22d7877a3194f6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ApintoÊòØ‰∏ÄÊ¨æÈ´òÊÄßËÉΩ„ÄÅÂèØÊâ©Â±ï„ÄÅÊòìÁª¥Êä§ÁöÑ‰∫ëÂéüÁîüAPIÁΩëÂÖ≥„ÄÇ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;ApintoÁΩëÂÖ≥Âü∫‰∫éGOËØ≠Ë®ÄÊ®°ÂùóÂåñÂºÄÂèëÔºå5ÂàÜÈíüÊûÅÈÄüÈÉ®ÁΩ≤ÔºåÈÖçÁΩÆÁÆÄÂçï„ÄÅÊòì‰∫éÁª¥Êä§ÔºåÊîØÊåÅÈõÜÁæ§‰∏éÂä®ÊÄÅÊâ©ÂÆπÔºåÂπ∂‰∏îÊèê‰æõÂá†ÂçÅÊ¨æÁΩëÂÖ≥Êèí‰ª∂ÂíåÂÆûÁî®ÁöÑ‰ºÅ‰∏öÁ∫ßÊèí‰ª∂ÔºåËÆ©Áî®Êà∑ÂºÄÁÆ±Âç≥Áî®„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;‰ΩìÈ™åÂú∞ÂùÄÔºö&lt;a href=&#34;https://demo-dashboard.apinto.com/&#34;&gt;demo-dashboard.apinto.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Âø´ÈÄüÂÖ•Èó®Ôºö&lt;a href=&#34;https://help.apinto.com/docs/dashboard-v2/quick/quick_start.html&#34;&gt;https://help.apinto.com/docs/dashboard-v2/quick/quick_start.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apinto Dashboard githubÂú∞ÂùÄÔºö &lt;a href=&#34;https://github.com/eolinker/apinto-dashboard&#34;&gt;https://github.com/eolinker/apinto-dashboard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ApintoÂäüËÉΩÊû∂ÊûÑÂõæÔºö&lt;/h2&gt; &#xA;&lt;img width=&#34;1664&#34; alt=&#34;img_v2_9852992b-7925-4aae-ab1c-1ed4eb6db20g&#34; src=&#34;https://user-images.githubusercontent.com/18322454/226785006-b59717b5-7ea2-48ce-9a4b-17f6d8e61305.png&#34;&gt; &#xA;&lt;h2&gt;Apinto‰∫ÆÁÇπÁâπÊÄß&lt;/h2&gt; &#xA;&lt;p&gt;Apinto API ÁΩëÂÖ≥‰ª•Âá∫Ëâ≤ÁöÑÁî®Êà∑‰ΩìÈ™åÂíåÈÄÇÁî®‰∫éÂêÑÁßç‰ºÅ‰∏öÁ∫ß‰∏öÂä°Âú∫ÊôØÁöÑÊéßÂà∂Âè∞‰∏∫ÁâπËâ≤„ÄÇÊéßÂà∂Âè∞ÂÖ∑ÊúâÂõõÂ§ß‰∫ÆÁÇπÂäüËÉΩÔºöÈõÜÁæ§ÁÆ°ÁêÜ„ÄÅÂ∫îÁî®ÁÆ°ÁêÜ„ÄÅÁ≤æÁªÜÊúçÂä°Ê≤ªÁêÜÂíå‰ºÅ‰∏öÊèí‰ª∂ÔºåËÉΩÂ§üÊª°Ë∂≥‰ºÅ‰∏öÂØπ API ÁΩëÂÖ≥Êõ¥È´òÁ∫ßÂú∫ÊôØÂåñÈúÄÊ±ÇÁöÑË¶ÅÊ±Ç„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;ÈõÜÁæ§ÁÆ°ÁêÜ&lt;/h3&gt; &#xA;&lt;p&gt;Apinto Êèê‰æõÈõÜÁæ§ÁÆ°ÁêÜÂäüËÉΩÔºåÂèØ‰ª•‰∏ÄÊ¨°ÊÄßÈÖçÁΩÆ‰∏öÂä°Âπ∂Â∞ÜÂÖ∂ÂèëÂ∏ÉÂà∞Áõ∏Â∫îÁöÑÈõÜÁæ§„ÄÇËøôËß£ÂÜ≥‰∫ÜÂ§öÈõÜÁæ§Áª¥Êä§Â§öÂ•ó‰∏öÂä°ÈÖçÁΩÆÁöÑÈóÆÈ¢òÔºåÊòæËëóÊèêÈ´ò‰∫ÜËøêÁª¥ÊïàÁéáÔºåÂπ∂Èôç‰Ωé‰∫ÜÁπÅÊùÇÈÖçÁΩÆÊó∂ÁöÑ‰∫ãÊïÖÁéá„ÄÇ &lt;img src=&#34;http://data.eolinker.com/course/Cdkvdtkdcc50a65d3e5b068bae658c343d7b6a188730218.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Â∫îÁî®ÁÆ°ÁêÜ&lt;/h3&gt; &#xA;&lt;p&gt;Apinto ÁΩëÂÖ≥Êé®Âá∫Â∫îÁî®ÁÆ°ÁêÜÊ¶ÇÂøµÔºåÁªü‰∏ÄÁÆ°ÁêÜÂ∫îÁî®ÂèäÂÖ∂ÁîüÂëΩÂë®Êúü„ÄÇ‰Ωú‰∏∫‰∏öÂä°ÈÄöËÆØÁöÑÂèëËµ∑ËÄÖÔºåÂ∫îÁî®Ë¥ØÁ©øÊï¥‰∏™Ë∞ÉÁî®Èìæ„ÄÇApinto ÁΩëÂÖ≥ÂØπÂ∫îÁî®ËØ∑Ê±ÇÁöÑÊµÅÈáèËøõË°åÈâ¥ÊùÉËÆ§ËØÅÂíåÊúçÂä°Ê≤ªÁêÜÔºåÂπ∂ÂØπËØ∑Ê±ÇÁöÑÊµÅÈáèËøõË°åÁõëÊéßÂëäË≠¶ÔºåÁªüËÆ°Â∫îÁî®Ë∞ÉÁî®ÊÉÖÂÜµ„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;Á≤æÁªÜÂåñÊúçÂä°Ê≤ªÁêÜ&lt;/h3&gt; &#xA;&lt;p&gt;ApintoÊèêÂá∫Á≤æÁªÜÂåñÊµÅÈáèÁÆ°ÁêÜÊñπÊ°àÔºåÂç≥ÊâÄÊúâË∞ÉÁî®ÊñπÁöÑËØ∑Ê±ÇÊµÅÈáèÈÉΩÁªèËøáÁΩëÂÖ≥ÔºåÈÄöËøáÂØπÂ∫îÁî®„ÄÅAPI„ÄÅ‰∏äÊ∏∏ÊúçÂä°„ÄÅËØ∑Ê±ÇÊñπÂºè„ÄÅIP„ÄÅËØ∑Ê±ÇË∑ØÂæÑ„ÄÅÂ∫îÁî®Ëá™ÂÆö‰πâÊ†áÁ≠æÁ≠âÁªÑÂêàÊù°‰ª∂Á≠õÈÄâËØ∑Ê±ÇÊµÅÈáèÔºåÊâßË°åÈôêÈáè„ÄÅËÆøÈóÆ„ÄÅÁÜîÊñ≠„ÄÅÁÅ∞Â∫¶„ÄÅÁºìÂ≠òÁ≠âÁ≠ñÁï•ËßÑÂàôÔºåÂ∏ÆÂä©‰ºÅ‰∏öÂø´ÈÄü„ÄÅÁÅµÊ¥ªÂú∞Âà∂ÂÆöÁ≠ñÁï•Ôºå‰ª•Êª°Ë∂≥‰∏çÂêå‰∏öÂä°Âú∫ÊôØÁöÑÈúÄÊ±ÇÔºåÂπ∂ÂÖ®Êñπ‰ΩçÊ≤ªÁêÜÂ•ΩÊúçÂä°„ÄÇ &lt;img src=&#34;http://data.eolinker.com/course/zqIaYaa0ac1273511504a4bad96e0e78de56e8e12850677.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;‰ºÅ‰∏öÊèí‰ª∂&lt;/h3&gt; &#xA;&lt;p&gt;ApintoÁΩëÂÖ≥Âç≥Â∞ÜÊé®Âá∫‰ºÅ‰∏öÊèí‰ª∂Ê®°ÂùóÔºåÂπ∂‰∏îÈôÜÁª≠Êèê‰æõ‰∏öÂä°Âûã‰ºÅ‰∏öÊèí‰ª∂Â¶ÇÔºöÁî®Êà∑ËßíËâ≤ÊùÉÈôê„ÄÅÁõëÊéßÂëäË≠¶„ÄÅÊó•Âøó„ÄÅAPIÊñáÊ°£„ÄÅÂºÄÊîæÂπ≥Âè∞„ÄÅÂÆâÂÖ®Èò≤Êä§„ÄÅÊï∞ÊçÆÂàÜÊûê„ÄÅË∞ÉÁî®Èìæ„ÄÅmock„ÄÅÂú®Á∫øË∞ÉÊµã„ÄÅÂÆâÂÖ®ÊµãËØï„ÄÅÂõΩÂØÜ„ÄÅÂ§öÂçèËÆÆÁ≠â„ÄÇÊîØÊåÅÁî®Êà∑Ëá™ÂÆö‰πâ‰ºÅ‰∏öÊèí‰ª∂ÔºåÊîØÊåÅÁã¨Á´ãÈÉ®ÁΩ≤„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ApintoÂäüËÉΩ&lt;/h2&gt; &#xA;&lt;p&gt;ApintoÁΩëÂÖ≥ÂèØ‰ª•‰Ωú‰∏∫‰∏öÂä°ÊµÅÈáèÁöÑÂÖ•Âè£ÔºåÂèØ‰ª•ÂØπ‰∏öÂä°ÊµÅÈáèËøõË°åÂ§ÑÁêÜÔºåÂ¶ÇÂä®ÊÄÅË∑ØÁî±„ÄÅË¥üËΩΩÂùáË°°„ÄÅÊúçÂä°ÂèëÁé∞„ÄÅÁÜîÊñ≠ÈôçÁ∫ß„ÄÅË∫´‰ªΩËÆ§ËØÅ„ÄÅÁõëÊéß‰∏éÂëäË≠¶Á≠â„ÄÇ ApintoÁΩëÂÖ≥‰∏çÂèó‰∫ëÂπ≥Âè∞ÈôêÂà∂Ôºå‰πüËÉΩÂú®KubernetesËøêË°å„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;‰∫ßÂìÅÁâπÊÄß&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ÂäüËÉΩ&lt;/th&gt; &#xA;   &lt;th&gt;ÊèèËø∞&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÈõÜÁæ§&lt;/td&gt; &#xA;   &lt;td&gt;ÈõÜÁæ§‰∏çÈôêÂà∂ÁΩëÂÖ≥ËäÇÁÇπÔºåËá™Áî±ÂâîÈô§ÊàñÂä†ÂÖ•ÁΩëÂÖ≥ËäÇÁÇπÔºå‰∏ª‰ªéÁΩëÂÖ≥ËäÇÁÇπÂÖ∑Â§áÊó†ÁºùÂàáÊç¢ÂäüËÉΩÔºåÊèêÂçáÁΩëÂÖ≥È´òÂèØÁî®ÊÄß&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Âä®ÊÄÅË∑ØÁî±&lt;/td&gt; &#xA;   &lt;td&gt;ÂèØÈÄöËøáËÆæÁΩÆlocation„ÄÅquery„ÄÅheader„ÄÅhost„ÄÅmethodÁ≠âÂèÇÊï∞ÂåπÈÖçÂØπÂ∫îÁöÑÊúçÂä°&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊúçÂä°ÂèëÁé∞&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂØπÊé•Eureka„ÄÅNacos„ÄÅConsul&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ë¥üËΩΩÂùáË°°&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅËΩÆËØ¢ÊùÉÈáçÁÆóÊ≥ï&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Áî®Êà∑Èâ¥ÊùÉ&lt;/td&gt; &#xA;   &lt;td&gt;ÂåøÂêç„ÄÅBasic„ÄÅApikey„ÄÅJWT„ÄÅAK/SKËÆ§ËØÅ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SSLËØÅ‰π¶&lt;/td&gt; &#xA;   &lt;td&gt;ÁÆ°ÁêÜÂ§ö‰∏™ËØÅ‰π¶&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ËÆøÈóÆÂüüÂêç&lt;/td&gt; &#xA;   &lt;td&gt;ÂèØ‰∏∫ÁΩëÂÖ≥ËÆæÁΩÆËÆøÈóÆÂüüÂêç&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÂÅ•Â∫∑Ê£ÄÊü•&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂØπË¥üËΩΩÁöÑËäÇÁÇπËøõË°åÂÅ•Â∫∑Ê£ÄÊü•ÔºåÁ°Æ‰øùÊúçÂä°ÂÅ•Â£ÆÊÄß&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÂçèËÆÆ&lt;/td&gt; &#xA;   &lt;td&gt;HTTP/HTTPS„ÄÅWebservice„ÄÅRestful„ÄÅgRPC„ÄÅDubbo2„ÄÅSOAP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Êèí‰ª∂Âåñ&lt;/td&gt; &#xA;   &lt;td&gt;ÊµÅÁ®ãÊèí‰ª∂ÂåñÔºåÊåâÈúÄÂä†ËΩΩÊâÄÈúÄÊ®°Âùó&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OPEN API&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅ‰ΩøÁî®open apiÈÖçÁΩÆÁΩëÂÖ≥&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Êó•Âøó&lt;/td&gt; &#xA;   &lt;td&gt;Êèê‰æõËäÇÁÇπÁöÑËøêË°åÊó•ÂøóÔºåÂèØÊ†πÊçÆÊó•ÂøóËÆæÁΩÆÁöÑÁ≠âÁ∫ßËæìÂá∫&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Â§öÁßçÊó•ÂøóËæìÂá∫&lt;/td&gt; &#xA;   &lt;td&gt;ÂèØÂ∞ÜËäÇÁÇπÁöÑËØ∑Ê±ÇÊó•ÂøóËæìÂá∫Âà∞‰∏çÂêåÁöÑÊó•ÂøóÊé•Êî∂Âô®ÔºåÂ¶Çfile„ÄÅnsq„ÄÅkafkaÁ≠â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CliÂëΩ‰ª§ÊîØÊåÅ&lt;/td&gt; &#xA;   &lt;td&gt;ÈÄöËøáCliÂëΩ‰ª§ÊìçÊéßÁΩëÂÖ≥ÔºåÊèí‰ª∂ÂÆâË£Ö„ÄÅ‰∏ãËΩΩÂíåÁΩëÂÖ≥ÁöÑÂºÄÂêØ„ÄÅÂÖ≥Èó≠Á≠âÊìç‰ΩúÂùáÂèØ‰ΩøÁî®‰∏ÄÈîÆÂëΩ‰ª§ÊìçÊéß&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÈªëÁôΩÂêçÂçï&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂ§öÁª¥Â∫¶Á≠õÈÄâÊµÅÈáèÔºåËÆæÁΩÆÈªëÁôΩÂêçÂçïIPÔºåÊã¶Êà™ÈùûÊ≥ïIP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ËÆøÈóÆÁ≠ñÁï•&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂ§öÁª¥Â∫¶Á≠õÈÄâÊµÅÈáèÔºåÂèØÈíàÂØπÂ∫îÁî®„ÄÅIP„ÄÅÂ∫îÁî®‰∏éIP„ÄÅÂ∫îÁî®‰∏éAPI„ÄÅÂ∫îÁî®‰∏é‰∏äÊ∏∏Á≠âÂ§öÁª¥ÁªÑÂêàËÆæÁΩÆÈªëÁôΩÂêçÂçï&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊµÅÈáèÁ≠ñÁï•&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂ§öÁª¥Â∫¶Á≠õÈÄâÊµÅÈáèÔºåÊéßÂà∂Â∫îÁî®„ÄÅÂ∫îÁî®‰∏éAPI„ÄÅÂ∫îÁî®‰∏é‰∏äÊ∏∏‰πãÈó¥ÁöÑËØ∑Ê±ÇÊ¨°Êï∞ÂíåËØ∑Ê±ÇÊä•ÊñáÂ§ßÂ∞èÈôêÂà∂&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÁÜîÊñ≠Á≠ñÁï•&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂ§öÁª¥Â∫¶Á≠õÈÄâÊµÅÈáèÔºåÁÜîÊñ≠‰∏äÊ∏∏ÊàñAPI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÁÅ∞Â∫¶Á≠ñÁï•&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂ§öÁª¥Â∫¶Á≠õÈÄâÊµÅÈáèÔºåÊåâÁôæÂàÜÊØîÊàñÈ´òÁ∫ßËßÑÂàôÁÅ∞Â∫¶ÊµÅÈáèÂà∞ÁõÆÊ†áËäÇÁÇπ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÁºìÂ≠òÁ≠ñÁï•&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂ§öÁª¥Â∫¶Á≠õÈÄâÊµÅÈáèÔºåÁºìÂ≠òAPIÂìçÂ∫îÂÜÖÂÆπ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÂèÇÊï∞Êò†Â∞Ñ&lt;/td&gt; &#xA;   &lt;td&gt;Â∞ÜÂÆ¢Êà∑Á´ØÁöÑËØ∑Ê±ÇÂèÇÊï∞Êò†Â∞ÑÂà∞ËΩ¨ÂèëËØ∑Ê±Ç‰∏≠ÔºåÂèØÊåâÈúÄÊîπÂèòÂèÇÊï∞ÁöÑ‰ΩçÁΩÆÂèäÂêçÁß∞&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;È¢ùÂ§ñÂèÇÊï∞&lt;/td&gt; &#xA;   &lt;td&gt;ËΩ¨ÂèëËØ∑Ê±ÇÊó∂ÔºåÈ¢ùÂ§ñÂä†‰∏äÂêéÁ´ØÈ™åËØÅÂèÇÊï∞ÔºåÂ¶ÇapikeyÁ≠â&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ËΩ¨ÂèëÈáçÂÜô&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅÂØπ &lt;code&gt;scheme&lt;/code&gt;„ÄÅ&lt;code&gt;uri&lt;/code&gt;„ÄÅ&lt;code&gt;host&lt;/code&gt; ÁöÑÈáçÂÜôÔºåÂêåÊó∂ÊîØÊåÅÂØπËΩ¨ÂèëËØ∑Ê±ÇÁöÑËØ∑Ê±ÇÂ§¥ÈÉ®headerÁöÑÂÄºËøõË°åÊñ∞Â¢ûÊàñËÄÖÂà†Èô§&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÊµÅÈáèÈïúÂÉè&lt;/td&gt; &#xA;   &lt;td&gt;Á∫ø‰∏äÊµÅÈáèÊàñËØ∑Ê±ÇÂÜÖÂÆπËøõË°åÊã∑Ë¥ùÂà∞ÈïúÂÉèÊúçÂä°‰∏≠&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MOCK&lt;/td&gt; &#xA;   &lt;td&gt;Ê®°ÊãüwebÊúçÂä°Âô®Á´ØAPIÁöÑÂìçÂ∫î&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CORS&lt;/td&gt; &#xA;   &lt;td&gt;ÊîØÊåÅapiËØ∑Ê±ÇË∑®Âüü&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ÂêåÊ≠•API&lt;/td&gt; &#xA;   &lt;td&gt;Êèê‰æõOpenAPIÂêåÊ≠•APIÊñáÊ°£ÔºåÊîØÊåÅswagger3.0 jsonÊàñyamlÊ†ºÂºèÊñá‰ª∂&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Ëø≠‰ª£ËÆ°Âàí&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/18322454/226301243-d69a1a5e-22eb-48d4-8fd1-52ec1cf8237b.png&#34; alt=&#34;image&#34;&gt; Â¶ÇÊûúÊÇ®ÊòØ‰∏™‰∫∫ÂºÄÂèëËÄÖÔºåÂèØÂü∫‰∫éAPIÁΩëÂÖ≥Áõ∏ÂÖ≥ÁöÑ‰∏öÂä°Âú∫ÊôØÂºÄÂèëÊúâ‰ª∑ÂÄºÁöÑÁΩëÂÖ≥Êèí‰ª∂Êàñ‰ºÅ‰∏öÁ∫ßÊèí‰ª∂ÔºåÂπ∂‰∏îÊÑøÊÑèÂàÜ‰∫´ÁªôApintoÔºåÊÇ®Â∞Ü‰ºöÊàê‰∏∫ApintoÁöÑÊù∞Âá∫Ë¥°ÁåÆËÄÖÊàñÂæóÂà∞‰∏ÄÂÆöÁöÑÊî∂Áõä„ÄÇ Â¶ÇÊûúÊÇ®ÊòØ‰ºÅ‰∏öÔºåÂèØÂü∫‰∫éApintoÁΩëÂÖ≥ÂºÄÂèë‰ºÅ‰∏öÁ∫ßÊèí‰ª∂ÔºåÊàê‰∏∫ApintoÁöÑÂêà‰Ωú‰ºô‰º¥„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;StarÂéÜÂè≤&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#eolinker/apinto&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=eolinker/apinto&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Âü∫ÂáÜÊµãËØï&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/25589530/149748340-dc544f79-a8f9-46f5-903d-a3af4fb8b16e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÈÉ®ÁΩ≤&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Áõ¥Êé•ÈÉ®ÁΩ≤Ôºö&lt;a href=&#34;https://help.apinto.com/docs/apinto/quick/arrange&#34;&gt;ÈÉ®ÁΩ≤ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.apinto.com/docs/dashboard-v2/quick/quick_start.html&#34;&gt;Âø´ÈÄüÂÖ•Èó®ÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.apinto.com/docs/apinto/quick/arrange&#34;&gt;Ê∫êÁ†ÅÁºñËØëÊïôÁ®ã&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/eolinker/apinto-gateway&#34;&gt;DockerÈÉ®ÁΩ≤&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;KubernetesÈÉ®ÁΩ≤ÔºöÂêéÁª≠ÊîØÊåÅ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ÂêØÂä®&lt;/h2&gt; &#xA;&lt;p&gt;1.‰∏ãËΩΩÂÆâË£ÖÂåÖÂπ∂Ëß£ÂéãÔºàÊ≠§Â§Ñ‰ª•v0.12.1ÁâàÊú¨ÁöÑÂÆâË£ÖÂåÖÁ§∫‰æãÔºâ&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://github.com/eolinker/apinto/releases/download/v0.12.1/apinto_v0.12.1_linux_amd64.tar.gz &amp;amp;&amp;amp; tar -zxvf apinto_v0.12.1_linux_amd64.tar.gz &amp;amp;&amp;amp; cd apinto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ApintoÊîØÊåÅÂú®arm64„ÄÅamd64Êû∂ÊûÑ‰∏äËøêË°å„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ËØ∑Ê†πÊçÆÈúÄË¶Å‰∏ãËΩΩÂØπÂ∫îÊû∂ÊûÑÂèäÁ≥ªÁªüÁöÑÂÆâË£ÖÂåÖÔºåÂÆâË£ÖÂåÖ‰∏ãËΩΩËØ∑&lt;a href=&#34;https://github.com/eolinker/apinto/releases/&#34;&gt;ÁÇπÂáª&lt;/a&gt;Ë∑≥ËΩ¨&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;ÂÆâË£ÖÁΩëÂÖ≥Ôºö&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./install.sh install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÊâßË°åËØ•Ê≠•È™§Â∞Ü‰ºöÁîüÊàêÈÖçÁΩÆÊñá‰ª∂&lt;code&gt;/etc/apinto/apinto.yml&lt;/code&gt;Âíå&lt;code&gt;/etc/apinto/config.yml&lt;/code&gt;ÔºåÂèØÊ†πÊçÆÈúÄË¶Å‰øÆÊîπ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;3.ÂêØÂä®ÁΩëÂÖ≥Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apinto start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bug ÂíåÈúÄÊ±ÇÂèçÈ¶à&lt;/h3&gt; &#xA;&lt;p&gt;Â¶ÇÊûúÊÉ≥Ë¶ÅÂèçÈ¶à Bug„ÄÅÊèê‰æõ‰∫ßÂìÅÊÑèËßÅÔºåÂèØ‰ª•ÂàõÂª∫‰∏Ä‰∏™ Github issue ËÅîÁ≥ªÊàë‰ª¨ÔºåÂçÅÂàÜÊÑüË∞¢ÔºÅ&lt;/p&gt; &#xA;&lt;p&gt;Â¶ÇÊûú‰Ω†Â∏åÊúõÂíå Apinto Âõ¢ÈòüËøëË∑ùÁ¶ª‰∫§ÊµÅÔºåËÆ®ËÆ∫‰∫ßÂìÅ‰ΩøÁî®ÊäÄÂ∑ß‰ª•Âèä‰∫ÜËß£Êõ¥Â§ö‰∫ßÂìÅÊúÄÊñ∞ËøõÂ±ïÔºåÊ¨¢ËøéÂä†ÂÖ•‰ª•‰∏ãÊ∏†ÈÅì„ÄÇ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h2&gt;&lt;strong&gt;ËÅîÁ≥ªÊàë‰ª¨&lt;/strong&gt;&lt;/h2&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Â∏ÆÂä©ÊñáÊ°£&lt;/strong&gt;Ôºö&lt;a href=&#34;https://help.apinto.com/docs&#34;&gt;https://help.apinto.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;QQÁæ§&lt;/strong&gt;: 725853895&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Slack&lt;/strong&gt;Ôºö&lt;a href=&#34;https://join.slack.com/t/slack-zer6755/shared_invite/zt-u7wzqp1u-aNA0XK9Bdb3kOpN03jRmYQ&#34;&gt;Âä†ÂÖ•Êàë‰ª¨&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ÂÆòÁΩë&lt;/strong&gt;Ôºö&lt;a href=&#34;https://www.apinto.com/&#34;&gt;https://www.apinto.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ËÆ∫Âùõ&lt;/strong&gt;Ôºö&lt;a href=&#34;https://community.apinto.com/&#34;&gt;https://community.apinto.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ÂæÆ‰ø°Áæ§&lt;/strong&gt;Ôºö&lt;img src=&#34;https://user-images.githubusercontent.com/25589530/149860447-5879437b-3cda-4833-aee3-69a2e538e85d.png&#34; style=&#34;width:150px&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>