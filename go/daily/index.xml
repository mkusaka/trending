<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-21T01:35:57Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flashbots/builder</title>
    <updated>2022-11-21T01:35:57Z</updated>
    <id>tag:github.com,2022-11-21:/flashbots/builder</id>
    <link href="https://github.com/flashbots/builder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Flashbots mev-boost block builder&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flashbots/builder/main/README.original.md&#34;&gt;geth readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Builder API&lt;/h1&gt; &#xA;&lt;p&gt;Builder API implementing &lt;a href=&#34;https://github.com/ethereum/builder-specs&#34;&gt;builder spec&lt;/a&gt;, making geth into a standalone block builder.&lt;/p&gt; &#xA;&lt;p&gt;Run on your favorite network, including Mainnet, Goerli, Sepolia and local devnet.&lt;/p&gt; &#xA;&lt;p&gt;Requires forkchoice update to be sent for block building, on public testnets run beacon node modified to send forkchoice update on every slot &lt;a href=&#34;https://github.com/flashbots/lighthouse&#34;&gt;example modified beacon client (lighthouse)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Test with &lt;a href=&#34;https://github.com/flashbots/mev-boost&#34;&gt;mev-boost&lt;/a&gt; and &lt;a href=&#34;https://github.com/flashbots/mev-boost/tree/main/cmd/test-cli&#34;&gt;mev-boost test cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Provides summary page at the listening address&#39; root (&lt;a href=&#34;http://localhost:28545&#34;&gt;http://localhost:28545&lt;/a&gt; by default).&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Builder polls relay for the proposer registrations for the next epoch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Builder has two hooks into geth:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On forkchoice update, changing the payload attributes feeRecipient to the one registered for next slot&#39;s validator&lt;/li&gt; &#xA; &lt;li&gt;On new sealed block, consuming the block as the next slot&#39;s proposed payload and submits it to the relay&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Local relay is enabled by default and overwrites remote relay data. This is only meant for the testnets!&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Blocks are only built on forkchoice update call from beacon node&lt;/li&gt; &#xA; &lt;li&gt;Does not accept external blocks&lt;/li&gt; &#xA; &lt;li&gt;Does not have payload cache, only the latest block is available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Configure geth for your network, it will become the block builder.&lt;/p&gt; &#xA;&lt;p&gt;Builder-related options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ geth --help&#xA;BUILDER API OPTIONS:&#xA;    --builder                      (default: false)&#xA;          Enable the builder&#xA;    --builder.beacon_endpoint value (default: &#34;http://127.0.0.1:5052&#34;)&#xA;    --builder.bellatrix_fork_version value (default: &#34;0x02000000&#34;)&#xA;    --builder.dry-run              (default: false)&#xA;    --builder.genesis_fork_version value (default: &#34;0x00000000&#34;)&#xA;    --builder.genesis_validators_root value (default: &#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;)&#xA;    --builder.listen_addr value    (default: &#34;:28545&#34;)&#xA;          Listening address for builder endpoint [$BUILDER_LISTEN_ADDR]&#xA;    --builder.local_relay          (default: false)&#xA;    --builder.no_bundle_fetcher    (default: false)&#xA;    --builder.relay_secret_key value (default: &#34;0x2fc12ae741f29701f8e30f5de6350766c020cb80768a0ff01e6838ffd2431e11&#34;)&#xA;    --builder.remote_relay_endpoint value&#xA;    --builder.secret_key value     (default: &#34;0x2fc12ae741f29701f8e30f5de6350766c020cb80768a0ff01e6838ffd2431e11&#34;)&#xA;    --builder.validator_checks     (default: false)&#xA;    --builder.validation_blacklist value&#xA;    --miner.algotype value         (default: &#34;mev-geth&#34;)&#xA;    --miner.blocklist value&#xA;    --miner.extradata value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BUILDER_TX_SIGNING_KEY - private key of the builder used to sign payment transaction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Details of the implementation&lt;/h2&gt; &#xA;&lt;p&gt;There are two parts of the builder.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;./builder&lt;/code&gt; responsible for communicating with the relay&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./miner&lt;/code&gt; responsible for producing blocks&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;code&gt;builder&lt;/code&gt; module&lt;/h3&gt; &#xA;&lt;p&gt;Main logic of the builder is in the &lt;code&gt;builder.go&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Builder is driven by the modified consensus client that calls &lt;code&gt;OnPayloadAttribute&lt;/code&gt; indicating that block should be produced. After requesting additional validator data from the relay builder starts building job with &lt;code&gt;runBuildingJob&lt;/code&gt;. Building job continuously makes a request to the &lt;code&gt;miner&lt;/code&gt; with the correct parameters and submits produced block.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Builder retries build block requests every second on average.&lt;/li&gt; &#xA; &lt;li&gt;If the job is running but a new one is submitted for a different slot we cancel previous job.&lt;/li&gt; &#xA; &lt;li&gt;All jobs have 12s deadline.&lt;/li&gt; &#xA; &lt;li&gt;If new request is submitted for the same slot as before but with different parameters, we run these jobs in parallel. It is possible to receive multiple requests from CL for the same slot but for different parent blocks if there is a possibility of a missed block.&lt;/li&gt; &#xA; &lt;li&gt;All submissions to the relay are rate limited at 2 req/s&lt;/li&gt; &#xA; &lt;li&gt;Only blocks that have more profit than the previous best submissions for the particular job are submitted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional features of the builder:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Builder can submit data about build blocks to the database. It stores block data, included bundles, and all considered bundles. Implemented in &lt;code&gt;flashbotsextra.IDatabaseService&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s possible to run local relay in the same process&lt;/li&gt; &#xA; &lt;li&gt;It can validate blocks instead of submitting them to the relay. (see &lt;code&gt;--builder.dry-run&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;miner&lt;/code&gt; module&lt;/h3&gt; &#xA;&lt;p&gt;Miner is responsible for block creation. Request from the &lt;code&gt;builder&lt;/code&gt; is routed to the &lt;code&gt;worker.go&lt;/code&gt; where &lt;code&gt;generateWork&lt;/code&gt; does the job of creating a block.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Coinbase of the block is set to the address of the block proposer, fee recipient of the validator receives its eth in the last tx in the block.&lt;/li&gt; &#xA; &lt;li&gt;We reserve gas for the proposer payment using &lt;code&gt;proposerTxPrepare&lt;/code&gt; and commit proposer payment after txs are added with &lt;code&gt;proposerTxCommit&lt;/code&gt;. We do it in a way so all fees received by the block builder are sent to the fee recipient.&lt;/li&gt; &#xA; &lt;li&gt;Transaction insertion is done in &lt;code&gt;fillTransactionsAlgoWorker&lt;/code&gt; \ &lt;code&gt;fillTransactions&lt;/code&gt;. Depending on the algorithm selected. Algo worker (greedy) inserts bundles whenever they belong in the block by effective gas price but default method inserts bundles on top of the block. (see &lt;code&gt;--miner.algo&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Worker is also responsible for simulating bundles. Bundles are simulated in parallel and results are cached for the particular parent block.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;algo_greedy.go&lt;/code&gt; implements logic of the block building. Bundles and transactions are sorted in the order of effective gas price then we try to insert everything into to block until gas limit is reached. Failing bundles are reverted during the insertion but txs are not.&lt;/li&gt; &#xA; &lt;li&gt;Builder can filter transactions touching a particular set of addresses. If a bundle or transaction touches one of the addresses it is skipped. (see &lt;code&gt;--miner.blocklist&lt;/code&gt; flag)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bundle Movement&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways bundles are moved to builders&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;via API -&lt;code&gt;sendBundle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;via Data Base - &lt;code&gt;flashbotsextra.IDatabaseService&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;code&gt;fetcher&lt;/code&gt; service&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fetcher service is part of &lt;code&gt;flashbotsextra.IDatabaseService&lt;/code&gt; which is responsible for fetching the bundles from db and pushing into mev bundles queue which will be processed by builder.&lt;/li&gt; &#xA; &lt;li&gt;Fetcher is a background process which fetches high priority and low priority bundles from db.&lt;/li&gt; &#xA; &lt;li&gt;Fetcher fetches &lt;code&gt;500&lt;/code&gt; high priority bundles on every head change, and &lt;code&gt;100&lt;/code&gt; low priority bundles in the interval of every &lt;code&gt;2 seconds&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Block builder diagram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flashbots/builder/main/docs/builder/builder-diagram.png&#34; alt=&#34;block builder diagram&#34; title=&#34;Block builder diagram&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pingc0y/go_proxy_pool</title>
    <updated>2022-11-21T01:35:57Z</updated>
    <id>tag:github.com,2022-11-21:/pingc0y/go_proxy_pool</id>
    <link href="https://github.com/pingc0y/go_proxy_pool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;无环境依赖开箱即用的代理IP池&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;goProxyPool&lt;/h1&gt; &#xA;&lt;p&gt;一款无环境依赖开箱即用的免费代理IP池&lt;/p&gt; &#xA;&lt;p&gt;内置14个免费代理源，均使用内置的简单正则获取&lt;/p&gt; &#xA;&lt;p&gt;支持调用插件扩展代理源，返回的数据符合格式即可，无开发语言限制&lt;/p&gt; &#xA;&lt;p&gt;支持webApi获取、删除、更新等代理池内的IP&lt;/p&gt; &#xA;&lt;p&gt;支持 http，socket5 隧道代理模式，无需手动更换IP&lt;/p&gt; &#xA;&lt;p&gt;遇到bug或有好的建议，欢迎提issue&lt;/p&gt; &#xA;&lt;h2&gt;隧道代理&lt;/h2&gt; &#xA;&lt;p&gt;隧道代理是代理IP存在的一种方式。&lt;br&gt; 相对于传统固定代理IP，它的特点是自动地在代理服务器上改变IP，这样每个请求都使用一个不同的IP。&lt;/p&gt; &#xA;&lt;h2&gt;代理IP特征&lt;/h2&gt; &#xA;&lt;p&gt;这里提供一些代理IP的特征，师傅们可通过特征自己写代理源，api获取的话内置的正则方式就能写&lt;br&gt; 360网络空间测绘_socket5：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;protocol:&#34;socks5&#34; AND &#34;Accepted Auth Method: 0x0&#34; AND &#34;connection: close&#34; AND country: &#34;China&#34;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;fofa_http:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#34;HTTP/1.1 403 Forbidden Server: nginx/1.12.1&#34; &amp;amp;&amp;amp; port=&#34;9091&#34;   &#xA;&#xA;port=&#34;3128&#34; &amp;amp;&amp;amp; title=&#34;ERROR: The requested URL could not be retrieved&#34;  &#xA;&#xA;&#34;X-Cache: &#39;MISS from VideoCacheBox/CE8265A63696DECD7F0D17858B1BDADC37771805&#39;&#34; &amp;amp;&amp;amp; &#34;X-Squid-Error: ERR_ACCESS_DENIED 0&#34;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;hunter_http：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;header.server=&#34;nginx/2.2.200603d&#34;&amp;amp;&amp;amp;web.title=&#34;502 Bad Gateway&#34; &amp;amp;&amp;amp; ip.port=&#34;8085&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;截图&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://s1.ax1x.com/2022/11/19/zuz6TU.png&#34;&gt;&lt;img src=&#34;https://s1.ax1x.com/2022/11/19/zuz6TU.png&#34; alt=&#34;zuz6TU.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;使用说明&lt;/h1&gt; &#xA;&lt;p&gt;下载&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:pingc0y/goProxyPool.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译（直接使用成品，就无需编译）&lt;br&gt; 以下是在windows环境下，编译出各平台可执行文件的命令&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;SET CGO_ENABLED=0&#xA;SET GOOS=windows&#xA;SET GOARCH=amd64&#xA;go build -ldflags &#34;-s -w&#34; -o ../goProxyPool-windows-amd64.exe&#xA;&#xA;SET CGO_ENABLED=0&#xA;SET GOOS=windows&#xA;SET GOARCH=386&#xA;go build -ldflags &#34;-s -w&#34;  -o ../goProxyPool-windows-386.exe&#xA;&#xA;SET CGO_ENABLED=0&#xA;SET GOOS=linux&#xA;SET GOARCH=amd64&#xA;go build -ldflags &#34;-s -w&#34; -o ../goProxyPool-linux-amd64&#xA;&#xA;SET CGO_ENABLED=0&#xA;SET GOOS=linux&#xA;SET GOARCH=arm64&#xA;go build -ldflags &#34;-s -w&#34; -o ../goProxyPool-linux-arm64&#xA;&#xA;SET CGO_ENABLED=0&#xA;SET GOOS=linux&#xA;SET GOARCH=386&#xA;go build -ldflags &#34;-s -w&#34; -o ../goProxyPool-linux-386&#xA;&#xA;SET CGO_ENABLED=0&#xA;SET GOOS=darwin&#xA;SET GOARCH=amd64&#xA;go build -ldflags &#34;-s -w&#34; -o ../goProxyPool-macos-amd64&#xA;&#xA;SET CGO_ENABLED=0&#xA;SET GOOS=darwin&#xA;SET GOARCH=arm64&#xA;go build -ldflags &#34;-s -w&#34; -o ../goProxyPool-macos-arm64&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行&lt;br&gt; 需要与config.yml在同一目录&lt;br&gt; 注意：抓取代理会进行类型地区等验证会比较缓慢，存活验证会快很多&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.\goProxyPool.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;代理源中有部分需要翻墙才能访问，有条件就设置下config.yml的代理配置&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;proxy:&#xA;  host: 127.0.0.1&#xA;  port: 10809&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;webAPi说明&lt;/h2&gt; &#xA;&lt;p&gt;查看代理池情况&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8080/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;获取代理&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8080/get?type=HTTP&amp;amp;count=10&amp;amp;anonymity=all&#xA;可选参数：&#xA;type        代理类型&#xA;anonymity   匿名度&#xA;region      地区&#xA;source      代理源&#xA;count       代理数量&#xA;获取所有：all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;删除代理&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8080/delete?ip=127.0.0.1&amp;amp;port=8888&#xA;必须传参：&#xA;ip      代理ip&#xA;port    代理端口&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;验证代理&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8080/verify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更换隧道代理IP&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8080/tunnelUpdate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;抓取代理&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://127.0.0.1:8080/spider&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;代理字段解读&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type ProxyIp struct {&#xA;&#x9;Ip         string       //IP地址&#xA;&#x9;Port       string       //代理端口&#xA;&#x9;Info1      string       //代理地区信息1&#xA;&#x9;Info2      string       //代理地区信息2&#xA;&#x9;Info3      string       //代理地区信息3&#xA;&#x9;Isp        string       //IP提供商&#xA;&#x9;Type       string       //代理类型&#xA;&#x9;Anonymity  string       //代理匿名度, 透明：显示真实IP, 普匿：显示假的IP, 高匿：无代理IP特征&#xA;&#x9;Time       string       //最近一次代理验证时间 &#xA;&#x9;Speed      string       //代理响应速度 &#xA;&#x9;SuccessNum int          //验证请求成功的次数&#xA;&#x9;RequestNum int          //验证请求的次数&#xA;&#x9;Source     string       //代理源&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置文件&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;#使用代理去获取代理IP&#xA;proxy:&#xA;  host: 127.0.0.1&#xA;  port: 10809&#xA;&#xA;# 配置信息&#xA;config:&#xA;  #监听IP&#xA;  ip: 0.0.0.0&#xA;  #web监听端口&#xA;  port: 8080&#xA;  #http隧道代理端口&#xA;  httpTunnelPort: 8111&#xA;  #socket隧道代理端口&#xA;  socketTunnelPort: 8112&#xA;  #隧道代理更换时间秒&#xA;  tunnelTime: 60&#xA;  #可用IP数量小于‘proxyNum’时就去抓取&#xA;  proxyNum: 50&#xA;  #代理IP验证间隔秒&#xA;  verifyTime: 1800&#xA;  #抓取/检测状态线程数&#xA;  threadNum: 200&#xA;&#xA;#ip源&#xA;spider:&#xA;    #代理获取源1&#xA;  - name: &#39;齐云代理&#39;&#xA;    #请求方式&#xA;    method: &#39;GET&#39;&#xA;    #POST传参用的请求体&#xA;    body: &#39;&#39;&#xA;    #urls请求间隔/秒，防止频率过快被限制&#xA;    interval: 0&#xA;    #使用的请求头&#xA;    Headers:&#xA;      User-Agent: &#39;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&#39;&#xA;    #获取的地址&#xA;    urls: &#39;https://proxy.ip3366.net/free/?action=china&amp;amp;page=1,https://proxy.ip3366.net/free/?action=china&amp;amp;page=2,https://proxy.ip3366.net/free/?action=china&amp;amp;page=3&#39;&#xA;    #获取IP的正则表达式，&#xA;    ip: &#39;\&#34;IP\&#34;&amp;gt;(\d+?\.\d+?.\d+?\.\d+?)&amp;lt;/td&amp;gt;&#39;&#xA;    #获取端口的正则表达式&#xA;    port: &#39;\&#34;PORT\&#34;&amp;gt;(\d+?)&amp;lt;/td&amp;gt;&#39;&#xA;    #是否使用代理去请求&#xA;    proxy: false&#xA;      &#xA;#通过插件，扩展ip源&#xA;spiderPlugin:&#xA;  #插件名&#xA;  - name: test&#xA;    #运行命令，返回的结果要符合格式&#xA;    run: &#39;.\test1.exe&#39;&#xA;    &#xA;#通过文件，导入IP&#xA;spiderFile:&#xA;  #文件名&#xA;  - name: test1&#xA;    #文件路径&#xA;    path: &#39;ip.txt&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;扩展返回格式&lt;/h3&gt; &#xA;&lt;p&gt;通过,分割&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;110.179.64.89:1080,111.2.155.180:1090,111.172.3.212:1090,111.196.186.95:6669&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;文件导入格式&lt;/h3&gt; &#xA;&lt;p&gt;通过换行分割&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;110.179.64.89:1080&#xA;111.2.155.180:1090&#xA;111.172.3.212:1090&#xA;111.196.186.95:6669&#xA;111.201.103.29:1080&#xA;113.12.200.66:1080&#xA;113.67.96.67:1090&#xA;113.104.217.45:1080&#xA;113.110.246.76:1080&#xA;113.116.9.18:1080&#xA;113.119.193.183:1090&#xA;113.119.193.187:1090&#xA;113.249.93.219:1080&#xA;114.95.200.164:1080&#xA;115.193.161.177:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;更新说明&lt;/h2&gt; &#xA;&lt;p&gt;2022/11/19&lt;br&gt; 新增 socket5代理&lt;br&gt; 新增 文件导入代理&lt;br&gt; 新增 显示验证进度&lt;br&gt; 新增 验证webApi&lt;br&gt; 修改 扩展导入格式&lt;br&gt; 优化 代理验证方式&lt;br&gt; 优化 匿名度改为自动识别&lt;br&gt; 修复 若干bug&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>j3ssie/osmedeus</title>
    <updated>2022-11-21T01:35:57Z</updated>
    <id>tag:github.com,2022-11-21:/j3ssie/osmedeus</id>
    <link href="https://github.com/j3ssie/osmedeus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Workflow Engine for Offensive Security&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Osmedeus Core Engine&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.osmedeus.org&#34;&gt;&lt;img alt=&#34;Osmedeus&#34; src=&#34;https://raw.githubusercontent.com/osmedeus/assets/main/logo-transparent.png&#34; height=&#34;140&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;strong&gt;Osmedeus - A Workflow Engine for Offensive Security&lt;/strong&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.osmedeus.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-0078D4?style=for-the-badge&amp;amp;logo=GitBook&amp;amp;logoColor=39ff14&amp;amp;labelColor=black&amp;amp;color=black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.osmedeus.org/donation/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Sponsors-0078D4?style=for-the-badge&amp;amp;logo=GitHub-Sponsors&amp;amp;logoColor=39ff14&amp;amp;labelColor=black&amp;amp;color=black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/OsmedeusEngine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%40OsmedeusEngine-0078D4?style=for-the-badge&amp;amp;logo=Twitter&amp;amp;logoColor=39ff14&amp;amp;labelColor=black&amp;amp;color=black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/gy4SWhpaPU&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord%20Server-0078D4?style=for-the-badge&amp;amp;logo=Discord&amp;amp;logoColor=39ff14&amp;amp;labelColor=black&amp;amp;color=black&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/gy4SWhpaPU&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/j3ssie/osmedeus?style=for-the-badge&amp;amp;labelColor=black&amp;amp;color=2fc414&amp;amp;logo=Github&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🔥 What is Osmedeus?&lt;/h2&gt; &#xA;&lt;p&gt;Osmedeus is a Workflow Engine for Offensive Security. It was designed to build a foundation with the capability and flexibility that allows you to build your own reconnaissance system and run it on a large number of targets.&lt;/p&gt; &#xA;&lt;h2&gt;📖 Documentation &amp;amp; FAQ&lt;/h2&gt; &#xA;&lt;p&gt;You can check out the documentation at &lt;a href=&#34;https://docs.osmedeus.org&#34;&gt;&lt;strong&gt;docs.osmedeus.org&lt;/strong&gt;&lt;/a&gt; and the Frequently Asked Questions at &lt;a href=&#34;https://docs.osmedeus.org/faq&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE that you need some essential tools like &lt;code&gt;curl, wget, git, zip&lt;/code&gt; and login as &lt;strong&gt;root&lt;/strong&gt; to start&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -fsSL https://raw.githubusercontent.com/osmedeus/osmedeus-base/master/install.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build the engine from the source&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you installed &lt;code&gt;golang &amp;gt;= v1.17&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install -v github.com/j3ssie/osmedeus@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://docs.osmedeus.org/installation/&#34;&gt;&lt;strong&gt;this page&lt;/strong&gt;&lt;/a&gt; for more the install on other platforms&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Key Features of Osmedeus&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Significantly speed up your recon process&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Organize your scan results&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Efficiently to customize and optimize your recon process&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Seamlessly integrate with new public and private tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Easy to scale across large number of targets&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Easy to synchronize the results across many places&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💡 Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Scan Usage:&#xA;  osmedeus scan -f [flowName] -t [target]&#xA;  osmedeus scan -m [modulePath] -T [targetsFile]&#xA;  osmedeus scan -f /path/to/flow.yaml -t [target]&#xA;  osmedeus scan -m /path/to/module.yaml -t [target] --params &#39;port=9200&#39;&#xA;  osmedeus scan -m /path/to/module.yaml -t [target] -l /tmp/log.log&#xA;  cat targets | osmedeus scan -f sample&#xA;&#xA;# Practical Scan Usage:&#xA;  osmedeus scan -T list_of_targets.txt -W custom_workspaces&#xA;  osmedeus scan -t target.com -w workspace_name --debug&#xA;  osmedeus scan -f general -t www.sample.com&#xA;  osmedeus scan -f gdirb -T list_of_target.txt&#xA;  osmedeus scan -m ~/.osmedeus/core/workflow/test/dirbscan.yaml -t list_of_urls.txt&#xA;  osmedeus scan --wfFolder ~/custom-workflow/ -f your-custom-workflow -t list_of_urls.txt&#xA;&#xA;# Queue Usage:&#xA;  osmedeus queue -Q /tmp/queue-file.txt -c 2&#xA;  osmedeus queue --add -t example.com -Q /tmp/queue-file.txt&#xA;&#xA;# Provider Usage:&#xA;  osmedeus provider build&#xA;  osmedeus provider build --token xxx --rebuild --ic&#xA;  osmedeus provider create --name &#39;sample&#39;&#xA;  osmedeus provider health --debug&#xA;&#xA;# Cloud Usage:&#xA;  osmedeus cloud -f [flowName] -t [target]&#xA;  osmedeus cloud -m [modulePath] -t [target]&#xA;  osmedeus cloud -c 10 -f [flowName] -T [targetsFile]&#xA;  osmedeus cloud --token xxx -G -c 10 -f [flowName] -T [targetsFile]&#xA;  osmedeus cloud --chunk -c 10 -f [flowName] -t [targetsFile]&#xA;&#xA;# Utilities Usage:&#xA;  osmedeus health&#xA;  osmedeus health git&#xA;  osmedeus health cloud&#xA;  osmedeus version --json&#xA;  osmedeus update&#xA;  osmedeus update --vuln&#xA;  osmedeus update --force --clean&#xA;  osmedeus utils tmux ls&#xA;  osmedeus utils tmux logs -A -l 10&#xA;  osmedeus utils ps&#xA;  osmedeus utils ps --proc &#39;jaeles&#39;&#xA;  osmedeus utils cron --cmd &#39;osmdeus scan -t example.com&#39; --sch 60&#xA;  osmedeus utils cron --for --cmd &#39;osmedeus scan -t example.com&#39;&#xA;  osmedeus utils workflow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://docs.osmedeus.org/installation/usage/&#34;&gt;&lt;strong&gt;this page&lt;/strong&gt;&lt;/a&gt; for full usage and the &lt;a href=&#34;https://docs.osmedeus.org/installation/practical-usage/&#34;&gt;&lt;strong&gt;Practical Usage&lt;/strong&gt;&lt;/a&gt; to see how to use Osmedeus in a practical way.&lt;/p&gt; &#xA;&lt;h2&gt;💬 Community &amp;amp; Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Join Our Discord server &lt;a href=&#34;https://discord.gg/mtQG2FQsYA&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;💎 Donation &amp;amp; Sponsor&lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;img alt=&#34;Osmedeus&#34; src=&#34;https://raw.githubusercontent.com/osmedeus/assets/main/premium-package.gif&#34;&gt; &lt;p align=&#34;center&#34;&gt; Check out for a couple of &lt;strong&gt;&lt;a href=&#34;https://docs.osmedeus.org/donation/&#34;&gt;donation methods here&lt;/a&gt;&lt;/strong&gt; to get a &lt;strong&gt;&lt;a href=&#34;https://docs.osmedeus.org/premium/&#34;&gt;premium package&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;p&gt; &lt;/p&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Osmedeus&lt;/code&gt; is made with ♥ by &lt;a href=&#34;https://twitter.com/j3ssiejjj&#34;&gt;@j3ssiejjj&lt;/a&gt; and it is released under the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>