<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-03T01:34:14Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>diemus/azure-openai-proxy</title>
    <updated>2023-04-03T01:34:14Z</updated>
    <id>tag:github.com,2023-04-03:/diemus/azure-openai-proxy</id>
    <link href="https://github.com/diemus/azure-openai-proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A proxy for Azure OpenAI API that can convert an OpenAI request into an Azure OpenAI request.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Azure OpenAI Proxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/diemus/azure-openai-proxy&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/diemus/azure-openai-proxy&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/diemus/azure-openai-proxy/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/license/MIT/cyan&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/diemus/azure-openai-proxy&#34;&gt;&lt;img src=&#34;https://badgen.net/github/release/diemus/azure-openai-proxy/latest&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/diemus/azure-openai-proxy&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/Azure?icon=azure&amp;amp;label&#34; alt=&#34;Azure&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/diemus/azure-openai-proxy&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/OpenAI?icon=azure&amp;amp;label&#34; alt=&#34;Azure&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/diemus/azure-openai-proxy&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/icon/docker?icon=docker&amp;amp;label&#34; alt=&#34;Azure&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/diemus/azure-openai-proxy/main/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/diemus/azure-openai-proxy/main/README.zh-cn.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Azure OpenAI Proxy is a proxy for Azure OpenAI API that can convert an OpenAI request to an Azure OpenAI request. It is designed to use as a backend for various open source ChatGPT web project. It also supports being used as a simple OpenAI API proxy to solve the problem of OpenAI API being restricted in some regions.&lt;/p&gt; &#xA;&lt;p&gt;Highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üåê Supports proxying all Azure OpenAI APIs&lt;/li&gt; &#xA; &lt;li&gt;üß† Supports proxying all Azure OpenAI models and custom fine-tuned models&lt;/li&gt; &#xA; &lt;li&gt;üó∫Ô∏è Supports custom mapping between Azure deployment names and OpenAI models&lt;/li&gt; &#xA; &lt;li&gt;üîÑ Supports both reverse proxy and forward proxy usage&lt;/li&gt; &#xA; &lt;li&gt;üëç Support mocking of OpenAI APIs that are not supported by Azure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported APIs&lt;/h2&gt; &#xA;&lt;p&gt;The latest version of the Azure OpenAI service currently supports the following 3 APIs:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Path&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/v1/chat/completions&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/v1/completions&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;/v1/embeddings&lt;/td&gt; &#xA;   &lt;td&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Other APIs not supported by Azure will be returned in a mock format (such as OPTIONS requests initiated by browsers). If you find your project need additional OpenAI-supported APIs, feel free to submit a PR.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1. Used as reverse proxy (i.e. an OpenAI API gateway)&lt;/h3&gt; &#xA;&lt;p&gt;Environment Variables&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Parameters&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AZURE_OPENAI_PROXY_ADDRESS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Service listening address&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;0.0.0.0:8080&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AZURE_OPENAI_PROXY_MODE&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Proxy mode, can be either &#34;azure&#34; or &#34;openai&#34;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;azure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AZURE_OPENAI_ENDPOINT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Azure OpenAI Endpoint, usually looks like https://{custom}.openai.azure.com. Required.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AZURE_OPENAI_APIVERSION&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Azure OpenAI API version. Default is 2023-03-15-preview.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;2023-03-15-preview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AZURE_OPENAI_MODEL_MAPPER&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A comma-separated list of model=deployment pairs. Maps model names to deployment names. For example, &lt;code&gt;gpt-3.5-turbo=gpt-35-turbo&lt;/code&gt;, &lt;code&gt;gpt-3.5-turbo-0301=gpt-35-turbo-0301&lt;/code&gt;. If there is no match, the proxy will pass model as deployment name directly (in fact, most Azure model names are same with OpenAI).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;gpt-3.5-turbo=gpt-35-turbo&lt;/code&gt;&lt;br&gt;&lt;code&gt;gpt-3.5-turbo-0301=gpt-35-turbo-0301&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AZURE_OPENAI_TOKEN&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Azure OpenAI API Token. If this environment variable is set, the token in the request header will be ignored.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&#34;&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Use in command line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl https://{your-custom-domain}/v1/chat/completions \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -H &#34;Authorization: Bearer {your azure api key}&#34; \&#xA;  -d &#39;{&#xA;    &#34;model&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;    &#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]&#xA;  }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Used as forward proxy (i.e. an HTTP proxy)&lt;/h3&gt; &#xA;&lt;p&gt;When accessing Azure OpenAI API through HTTP, it can be used directly as a proxy, but this tool does not have built-in HTTPS support, so you need an HTTPS proxy such as Nginx to support accessing HTTPS version of OpenAI API.&lt;/p&gt; &#xA;&lt;p&gt;Assuming that the proxy domain you configured is &lt;code&gt;https://{your-domain}.com&lt;/code&gt;, you can execute the following commands in the terminal to use the https proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export https_proxy=https://{your-domain}.com&#xA;&#xA;curl https://api.openai.com/v1/chat/completions \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -H &#34;Authorization: Bearer {your azure api key}&#34; \&#xA;  -d &#39;{&#xA;    &#34;model&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;    &#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]&#xA;  }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or configure it as an HTTP proxy in other open source Web ChatGPT projects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export HTTPS_PROXY=https://{your-domain}.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;p&gt;Deploying through Docker&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull ishadows/azure-openai-proxy:latest&#xA;docker run -d -p 8080:8080 --name=azure-openai-proxy \&#xA;  --env AZURE_OPENAI_ENDPOINT={your azure endpoint} \&#xA;  --env AZURE_OPENAI_MODEL_MAPPER={your custom model mapper ,like: gpt-3.5-turbo=gpt-35-turbo,gpt-3.5-turbo-0301=gpt-35-turbo-0301} \&#xA;  ishadows/azure-openai-proxy:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl https://localhost:8080/v1/chat/completions \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -H &#34;Authorization: Bearer {your azure api key}&#34; \&#xA;  -d &#39;{&#xA;    &#34;model&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;    &#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Hello!&#34;}]&#xA;  }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Model Mapping Mechanism&lt;/h2&gt; &#xA;&lt;p&gt;There are a series of rules for model mapping pre-defined in &lt;code&gt;AZURE_OPENAI_MODEL_MAPPER&lt;/code&gt;, and the default configuration basically satisfies the mapping of all Azure models. The rules include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gpt-3.5-turbo&lt;/code&gt; -&amp;gt; &lt;code&gt;gpt-35-turbo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gpt-3.5-turbo-0301&lt;/code&gt; -&amp;gt; &lt;code&gt;gpt-35-turbo-0301&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A mapping mechanism that pass model name directly as fallback.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For custom fine-tuned models, the model name can be passed directly. For models with deployment names different from the model names, custom mapping relationships can be defined, such as:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Model Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Deployment Name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gpt-3.5-turbo&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gpt-35-turbo-upgrade&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gpt-3.5-turbo-0301&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;gpt-35-turbo-0301-fine-tuned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#diemus/azure-openai-proxy&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=diemus/azure-openai-proxy&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stefanprodan/timoni</title>
    <updated>2023-04-03T01:34:14Z</updated>
    <id>tag:github.com,2023-04-03:/stefanprodan/timoni</id>
    <link href="https://github.com/stefanprodan/timoni" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Timoni is a package manager for Kubernetes, powered by CUE and inspired by Helm.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;timoni&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stefanprodan/timoni/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/stefanprodan/timoni/all.svg?sanitize=true&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stefanprodan/timoni/actions&#34;&gt;&lt;img src=&#34;https://github.com/stefanprodan/timoni/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stefanprodan/timoni/actions&#34;&gt;&lt;img src=&#34;https://github.com/stefanprodan/timoni/workflows/e2e/badge.svg?sanitize=true&#34; alt=&#34;e2e&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/stefanprodan/timoni/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/stefanprodan/timoni.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://timoni.sh&#34;&gt;Timoni&lt;/a&gt; is a package manager for Kubernetes, powered by &lt;a href=&#34;https://cuelang.org/&#34;&gt;CUE&lt;/a&gt; and inspired by &lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Timoni project strives to improve the UX of authoring Kubernetes configs. Instead of mingling Go templates with YAML like Helm, or layering YAML on top of each-other like Kustomize, Timoni relies on cuelang&#39;s type safety, code generation and data validation features to offer a better experience of creating, packaging and delivering apps to Kubernetes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Note that Timoni in under active development and is still in its infancy. The APIs and command-line interface may change in a backwards incompatible manner.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Timoni please visit the documentation website at &lt;a href=&#34;https://timoni.sh/&#34;&gt;timoni.sh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Concepts&lt;/h2&gt; &#xA;&lt;p&gt;If you are familiar with Helm, a Timoni &lt;strong&gt;module&lt;/strong&gt; is the equivalent of a &lt;strong&gt;chart&lt;/strong&gt;, and a Timoni &lt;strong&gt;instance&lt;/strong&gt; is the equivalent of a Helm &lt;strong&gt;release&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Timoni Modules&lt;/h3&gt; &#xA;&lt;p&gt;A Timoni module contains a set of CUE definitions and constraints organised into a &lt;a href=&#34;https://cuelang.org/docs/concepts/packages/&#34;&gt;CUE module&lt;/a&gt; with an opinionated structure. A module accepts a set of values supplied by the user as &lt;code&gt;values.cue&lt;/code&gt; files, and outputs a set of Kubernetes objects that Timoni deploys on Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;Module structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;‚îú‚îÄ‚îÄ cue.mod&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ gen # Kubernetes types&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ module.cue # Module metadata&#xA;‚îú‚îÄ‚îÄ templates&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ config.cue # Config schema and default values&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îú‚îÄ‚îÄ deployment.cue # Kubernetes Deployment template&#xA;‚îÇ&amp;nbsp;&amp;nbsp; ‚îî‚îÄ‚îÄ service.cue # Kubernetes Service template&#xA;‚îú‚îÄ‚îÄ timoni.cue # Timoni entry point&#xA;‚îî‚îÄ‚îÄ values.cue # Timoni values placeholder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Module examples can be found at &lt;a href=&#34;https://raw.githubusercontent.com/stefanprodan/timoni/main/examples/podinfo&#34;&gt;examples/podinfo&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/stefanprodan/timoni/main/examples/redis&#34;&gt;examples/redis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Commands for working with local modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni mod init &amp;lt;module-name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni mod lint &amp;lt;path/to/module&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni build &amp;lt;name&amp;gt; &amp;lt;path/to/module&amp;gt; -n &amp;lt;namespace&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni apply &amp;lt;name&amp;gt; &amp;lt;path/to/module&amp;gt; -f &amp;lt;path/to/values.cue&amp;gt; --dry-run --diff&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Timoni modules are distributed as OCI artifacts and can be stored in container registries.&lt;/p&gt; &#xA;&lt;p&gt;Commands for working with remote modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni mod push &amp;lt;path/to/module&amp;gt; oci://&amp;lt;module-url&amp;gt; -v &amp;lt;semver&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni mod pull oci://&amp;lt;module-url&amp;gt; -v &amp;lt;semver&amp;gt; -o &amp;lt;path/to/module&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about modules, please read the &lt;a href=&#34;https://timoni.sh/#timoni-modules&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Timoni Instances&lt;/h3&gt; &#xA;&lt;p&gt;A Timoni instance represent a module instantiation on a Kubernetes cluster. A module can be installed multiple times on a cluster by giving its instances unique names per namespace.&lt;/p&gt; &#xA;&lt;p&gt;When instantiating a module, users can supply their own &lt;code&gt;values.cue&lt;/code&gt; that gets merged with the defaults included in the module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cue&#34;&gt;values: {&#xA;&#x9;ingress: {&#xA;&#x9;&#x9;enabled:   true&#xA;&#x9;&#x9;className: &#34;nginx&#34;&#xA;&#x9;&#x9;host:      &#34;app.example.com&#34;&#xA;&#x9;}&#xA;&#x9;autoscaling: enabled: true&#xA;&#x9;monitoring: enabled:  true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Commands for working with instances:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni apply &amp;lt;name&amp;gt; oci://&amp;lt;module-url&amp;gt; -v &amp;lt;semver&amp;gt; -f &amp;lt;path/to/values.cue&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni delete &amp;lt;name&amp;gt; -n &amp;lt;namespace&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni list -n &amp;lt;namespace&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni inspect [module|values|resources] &amp;lt;name&amp;gt; -n &amp;lt;namespace&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni status &amp;lt;name&amp;gt; -n &amp;lt;namespace&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more about instances, please read the &lt;a href=&#34;https://timoni.sh/#timoni-instances&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Timoni Bundles&lt;/h3&gt; &#xA;&lt;p&gt;Timoni bundles offer a declarative way of managing the lifecycle of applications and their infra dependencies.&lt;/p&gt; &#xA;&lt;p&gt;A Timoni bundle is a CUE file for defining a group of instances together with their values and module references:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cue&#34;&gt;bundle: {&#xA;&#x9;apiVersion: &#34;v1alpha1&#34;&#xA;&#x9;instances: {&#xA;&#x9;&#x9;redis: {&#xA;&#x9;&#x9;&#x9;module: {&#xA;&#x9;&#x9;&#x9;&#x9;url:     &#34;oci://ghcr.io/stefanprodan/modules/redis&#34;&#xA;&#x9;&#x9;&#x9;&#x9;version: &#34;7.0.9&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;namespace: &#34;podinfo&#34;&#xA;&#x9;&#x9;&#x9;values: maxmemory: 256&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;podinfo: {&#xA;&#x9;&#x9;&#x9;module: url:     &#34;oci://ghcr.io/stefanprodan/modules/podinfo&#34;&#xA;&#x9;&#x9;&#x9;module: version: &#34;6.3.4&#34;&#xA;&#x9;&#x9;&#x9;namespace: &#34;podinfo&#34;&#xA;&#x9;&#x9;&#x9;values: caching: {&#xA;&#x9;&#x9;&#x9;&#x9;enabled:  true&#xA;&#x9;&#x9;&#x9;&#x9;redisURL: &#34;tcp://redis:6379&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the bundle files you can use arithmetic operations, string interpolation and everything else that CUE std lib supports.&lt;/p&gt; &#xA;&lt;p&gt;Commands for working with bundles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni bundle lint -f bundle.cue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timoni bundle apply -f bundle.cue -f bundle_extras.cue --dry-run --diff&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Timoni is &lt;a href=&#34;https://raw.githubusercontent.com/stefanprodan/timoni/main/LICENSE&#34;&gt;Apache 2.0 licensed&lt;/a&gt; and accepts contributions via GitHub pull requests. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/stefanprodan/timoni/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>traefik/yaegi</title>
    <updated>2023-04-03T01:34:14Z</updated>
    <id>tag:github.com,2023-04-03:/traefik/yaegi</id>
    <link href="https://github.com/traefik/yaegi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yaegi is Another Elegant Go Interpreter&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/traefik/yaegi/master/doc/images/yaegi.png&#34; alt=&#34;Yaegi&#34; title=&#34;Yaegi&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/traefik/yaegi/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag-date/traefik/yaegi.svg?label=alpha&#34; alt=&#34;release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/traefik/yaegi/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/traefik/yaegi/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/mod/github.com/traefik/yaegi&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/traefik/yaegi?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.traefik.io/c/yaegi&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/community.traefik.io/status?label=Community&amp;amp;style=social&#34; alt=&#34;Discourse status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yaegi is Another Elegant Go Interpreter. It powers executable Go scripts and plugins, in embedded interpreters or interactive shells, on top of the Go runtime.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete support of &lt;a href=&#34;https://golang.org/ref/spec&#34;&gt;Go specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in pure Go, using only the standard library&lt;/li&gt; &#xA; &lt;li&gt;Simple interpreter API: &lt;code&gt;New()&lt;/code&gt;, &lt;code&gt;Eval()&lt;/code&gt;, &lt;code&gt;Use()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Works everywhere Go works&lt;/li&gt; &#xA; &lt;li&gt;All Go &amp;amp; runtime resources accessible from script (with control)&lt;/li&gt; &#xA; &lt;li&gt;Security: &lt;code&gt;unsafe&lt;/code&gt; and &lt;code&gt;syscall&lt;/code&gt; packages neither used nor exported by default&lt;/li&gt; &#xA; &lt;li&gt;Support Go 1.18 and Go 1.19 (the latest 2 major releases)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Go package&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/traefik/yaegi/interp&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command-line executable&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/traefik/yaegi/cmd/yaegi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that you can use &lt;a href=&#34;https://github.com/hanslub42/rlwrap&#34;&gt;rlwrap&lt;/a&gt; (install with your favorite package manager), and alias the &lt;code&gt;yaegi&lt;/code&gt; command in &lt;code&gt;alias yaegi=&#39;rlwrap yaegi&#39;&lt;/code&gt; in your &lt;code&gt;~/.bashrc&lt;/code&gt;, to have history and command line edition.&lt;/p&gt; &#xA;&lt;h3&gt;CI Integration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sfL https://raw.githubusercontent.com/traefik/yaegi/master/install.sh | bash -s -- -b $GOPATH/bin v0.9.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;As an embedded interpreter&lt;/h3&gt; &#xA;&lt;p&gt;Create an interpreter with &lt;code&gt;New()&lt;/code&gt;, run Go code with &lt;code&gt;Eval()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/traefik/yaegi/interp&#34;&#xA;&#x9;&#34;github.com/traefik/yaegi/stdlib&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;i := interp.New(interp.Options{})&#xA;&#xA;&#x9;i.Use(stdlib.Symbols)&#xA;&#xA;&#x9;_, err := i.Eval(`import &#34;fmt&#34;`)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;_, err = i.Eval(`fmt.Println(&#34;Hello Yaegi&#34;)`)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/2n-EpZbMYI9&#34;&gt;Go Playground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;As a dynamic extension framework&lt;/h3&gt; &#xA;&lt;p&gt;The following program is compiled ahead of time, except &lt;code&gt;bar()&lt;/code&gt; which is interpreted, with the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;use of &lt;code&gt;i.Eval(src)&lt;/code&gt; to evaluate the script in the context of interpreter&lt;/li&gt; &#xA; &lt;li&gt;use of &lt;code&gt;v, err := i.Eval(&#34;foo.Bar&#34;)&lt;/code&gt; to get the symbol from the interpreter context, as a &lt;code&gt;reflect.Value&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;application of &lt;code&gt;Interface()&lt;/code&gt; method and type assertion to convert &lt;code&gt;v&lt;/code&gt; into &lt;code&gt;bar&lt;/code&gt;, as if it was compiled&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/traefik/yaegi/interp&#34;&#xA;&#xA;const src = `package foo&#xA;func Bar(s string) string { return s + &#34;-Foo&#34; }`&#xA;&#xA;func main() {&#xA;&#x9;i := interp.New(interp.Options{})&#xA;&#xA;&#x9;_, err := i.Eval(src)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;v, err := i.Eval(&#34;foo.Bar&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;bar := v.Interface().(func(string) string)&#xA;&#xA;&#x9;r := bar(&#34;Kung&#34;)&#xA;&#x9;println(r)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/WvwH4JqrU-p&#34;&gt;Go Playground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;As a command-line interpreter&lt;/h3&gt; &#xA;&lt;p&gt;The Yaegi command can run an interactive Read-Eval-Print-Loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ yaegi&#xA;&amp;gt; 1 + 2&#xA;3&#xA;&amp;gt; import &#34;fmt&#34;&#xA;&amp;gt; fmt.Println(&#34;Hello World&#34;)&#xA;Hello World&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in interactive mode, all stdlib package are pre-imported, you can use them directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ yaegi&#xA;&amp;gt; reflect.TypeOf(time.Date)&#xA;: func(int, time.Month, int, int, int, int, int, *time.Location) time.Time&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or interpret Go packages, directories or files, including itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ yaegi -syscall -unsafe -unrestricted github.com/traefik/yaegi/cmd/yaegi&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or for Go scripting in the shebang line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cat /tmp/test&#xA;#!/usr/bin/env yaegi&#xA;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;fmt.Println(&#34;test&#34;)&#xA;}&#xA;$ ls -la /tmp/test&#xA;-rwxr-xr-x 1 dow184 dow184 93 Jan  6 13:38 /tmp/test&#xA;$ /tmp/test&#xA;test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation about Yaegi commands and libraries can be found at usual &lt;a href=&#34;https://pkg.go.dev/github.com/traefik/yaegi&#34;&gt;godoc.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Beside the known &lt;a href=&#34;https://github.com/traefik/yaegi/issues?q=is%3Aissue+is%3Aopen+label%3Abug&#34;&gt;bugs&lt;/a&gt; which are supposed to be fixed in the short term, there are some limitations not planned to be addressed soon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assembly files (&lt;code&gt;.s&lt;/code&gt;) are not supported.&lt;/li&gt; &#xA; &lt;li&gt;Calling C code is not supported (no virtual &#34;C&#34; package).&lt;/li&gt; &#xA; &lt;li&gt;Interfaces to be used from the pre-compiled code can not be added dynamically, as it is required to pre-compile interface wrappers.&lt;/li&gt; &#xA; &lt;li&gt;Representation of types by &lt;code&gt;reflect&lt;/code&gt; and printing values using %T may give different results between compiled mode and interpreted mode.&lt;/li&gt; &#xA; &lt;li&gt;Interpreting computation intensive code is likely to remain significantly slower than in compiled mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Go modules are not supported yet. Until that, it is necessary to install the source into &lt;code&gt;$GOPATH/src/github.com/traefik/yaegi&lt;/code&gt; to pass all the tests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/traefik/yaegi/master/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/traefik/yaegi/raw/master/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>