<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-12T01:36:15Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>reviewdog/reviewdog</title>
    <updated>2023-01-12T01:36:15Z</updated>
    <id>tag:github.com,2023-01-12:/reviewdog/reviewdog</id>
    <link href="https://github.com/reviewdog/reviewdog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üê∂ Automated code review tool integrated with any code analysis tools regardless of programming language&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/reviewdog/reviewdog&#34;&gt; &lt;img alt=&#34;reviewdog&#34; src=&#34;https://raw.githubusercontent.com/haya14busa/i/d598ed7dc49fefb0018e422e4c43e5ab8f207a6b/reviewdog/reviewdog.logo.png&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; reviewdog - A code review dog who keeps your codebase healthy. &lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/LICENSE&#34;&gt; &lt;img alt=&#34;LICENSE&#34; src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?maxAge=43200&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://godoc.org/github.com/reviewdog/reviewdog&#34;&gt; &lt;img alt=&#34;GoDoc&#34; src=&#34;https://img.shields.io/badge/godoc-reference-4F73B3.svg?label=godoc.org&amp;amp;maxAge=43200&amp;amp;logo=go&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/CHANGELOG.md&#34;&gt; &lt;img alt=&#34;releases&#34; src=&#34;https://img.shields.io/github/release/reviewdog/reviewdog.svg?logo=github&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/reviewdog/nightly&#34;&gt; &lt;img alt=&#34;nightly releases&#34; src=&#34;https://img.shields.io/github/v/release/reviewdog/nightly.svg?logo=github&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/reviewdog/reviewdog/actions?query=workflow%3AGo+event%3Apush+branch%3Amaster&#34;&gt; &lt;img alt=&#34;GitHub Actions&#34; src=&#34;https://github.com/reviewdog/reviewdog/workflows/Go/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/reviewdog/reviewdog/actions?query=workflow%3Areviewdog+event%3Apush+branch%3Amaster&#34;&gt; &lt;img alt=&#34;reviewdog&#34; src=&#34;https://github.com/reviewdog/reviewdog/workflows/reviewdog/badge.svg?branch=master&amp;amp;event=push&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/reviewdog/reviewdog/actions?query=workflow%3Arelease&#34;&gt; &lt;img alt=&#34;release&#34; src=&#34;https://github.com/reviewdog/reviewdog/workflows/release/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://travis-ci.org/reviewdog/reviewdog&#34;&gt;&lt;img alt=&#34;Travis Status&#34; src=&#34;https://img.shields.io/travis/reviewdog/reviewdog/master.svg?label=Travis&amp;amp;logo=travis&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://circleci.com/gh/reviewdog/reviewdog&#34;&gt;&lt;img alt=&#34;CircleCI Status&#34; src=&#34;http://img.shields.io/circleci/build/github/reviewdog/reviewdog/master.svg?label=CircleCI&amp;amp;logo=circleci&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://codecov.io/github/reviewdog/reviewdog&#34;&gt;&lt;img alt=&#34;Coverage Status&#34; src=&#34;https://img.shields.io/codecov/c/github/reviewdog/reviewdog/master.svg?logo=codecov&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://gitlab.com/reviewdog/reviewdog/pipelines&#34;&gt; &lt;img alt=&#34;GitLab Supported&#34; src=&#34;https://img.shields.io/badge/GitLab%20-Supported-fc6d26?logo=gitlab&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/haya14busa/action-bumpr&#34;&gt; &lt;img alt=&#34;action-bumpr supported&#34; src=&#34;https://img.shields.io/badge/bumpr-supported-ff69b4?logo=github&amp;amp;link=https://github.com/haya14busa/action-bumpr&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/reviewdog/.github/raw/master/CODE_OF_CONDUCT.md&#34;&gt; &lt;img alt=&#34;Contributor Covenant&#34; src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://somsubhra.github.io/github-release-stats/?username=reviewdog&amp;amp;repository=reviewdog&amp;amp;per_page=30&#34;&gt; &lt;img alt=&#34;Github Releases Stats&#34; src=&#34;https://img.shields.io/github/downloads/reviewdog/reviewdog/total.svg?logo=github&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://starchart.cc/reviewdog/reviewdog&#34;&gt;&lt;img alt=&#34;Stars&#34; src=&#34;https://img.shields.io/github/stars/reviewdog/reviewdog.svg?style=social&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;reviewdog provides a way to post review comments to code hosting service, such as GitHub, automatically by integrating with any linter tools with ease. It uses an output of lint tools and posts them as a comment if findings are in diff of patches to review.&lt;/p&gt; &#xA;&lt;p&gt;reviewdog also supports run in the local environment to filter an output of lint tools by diff.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.google.com/document/d/1mGOX19SSqRowWGbXieBfGPtLnM0BdTkIc9JelTiu6wA/edit?usp=sharing&#34;&gt;design doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#input-format&#34;&gt;Input Format&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#errorformat&#34;&gt;&#39;errorformat&#39;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#available-pre-defined-errorformat&#34;&gt;Available pre-defined &#39;errorformat&#39;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reviewdog-diagnostic-format-rdformat&#34;&gt;Reviewdog Diagnostic Format (RDFormat)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#diff&#34;&gt;Diff&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#checkstyle-format&#34;&gt;checkstyle format&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#code-suggestions&#34;&gt;Code Suggestions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reviewdog-config-file&#34;&gt;reviewdog config file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporters&#34;&gt;Reporters&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-local--reporterlocal-default&#34;&gt;Reporter: Local (-reporter=local) [default]&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-github-checks--reportergithub-pr-check&#34;&gt;Reporter: GitHub Checks (-reporter=github-pr-check)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-github-checks--reportergithub-check&#34;&gt;Reporter: GitHub Checks (-reporter=github-check)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-github-pullrequest-review-comment--reportergithub-pr-review&#34;&gt;Reporter: GitHub PullRequest review comment (-reporter=github-pr-review)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-gitlab-mergerequest-discussions--reportergitlab-mr-discussion&#34;&gt;Reporter: GitLab MergeRequest discussions (-reporter=gitlab-mr-discussion)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-gitlab-mergerequest-commit--reportergitlab-mr-commit&#34;&gt;Reporter: GitLab MergeRequest commit (-reporter=gitlab-mr-commit)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-bitbucket-code-insights-reports--reporterbitbucket-code-report&#34;&gt;Reporter: Bitbucket Code Insights Reports (-reporter=bitbucket-code-report)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#supported-ci-services&#34;&gt;Supported CI services&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#github-actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#travis-ci&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#circle-ci&#34;&gt;Circle CI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#gitlab-ci&#34;&gt;GitLab CI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#bitbucket-pipelines&#34;&gt;Bitbucket Pipelines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#common-jenkins-local-etc&#34;&gt;Common (Jenkins, local, etc...)&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#jenkins-with-github-pull-request-builder-plugin&#34;&gt;Jenkins with Github pull request builder plugin&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#exit-codes&#34;&gt;Exit codes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#filter-mode&#34;&gt;Filter mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#articles&#34;&gt;Articles&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/reviewdog/reviewdog/pull/131/checks&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/40884858-6efd82a0-6756-11e8-9f1a-c6af4f920fb0.png&#34; alt=&#34;github-pr-check sample&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3797062/40941822-1d775064-6887-11e8-98e9-4775d37d47f8.png&#34; alt=&#34;comment in pull-request&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3797062/40941738-d62acb0a-6886-11e8-858d-7b97aded2a42.png&#34; alt=&#34;commit status&#34;&gt; &lt;a href=&#34;https://github.com/reviewdog/reviewdog/pull/24#discussion_r84599728&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haya14busa/i/dc0ccb1e110515ea407c146d99b749018db05c45/reviewdog/sample-comment.png&#34; alt=&#34;sample-comment.png&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://raw.githubusercontent.com/haya14busa/i/dc0ccb1e110515ea407c146d99b749018db05c45/reviewdog/reviewdog-local-demo.gif&#34; alt=&#34;reviewdog-local-demo.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Install the latest version. (Install it into ./bin/ by default).&#xA;$ curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s&#xA;&#xA;# Specify installation directory ($(go env GOPATH)/bin/) and version.&#xA;$ curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b $(go env GOPATH)/bin [vX.Y.Z]&#xA;&#xA;# In alpine linux (as it does not come with curl by default)&#xA;$ wget -O - -q https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s [vX.Y.Z]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nightly releases&lt;/h3&gt; &#xA;&lt;p&gt;You can also use &lt;a href=&#34;https://github.com/reviewdog/nightly&#34;&gt;nightly reviewdog release&lt;/a&gt; to try the latest reviewdog improvements every day!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -sfL https://raw.githubusercontent.com/reviewdog/nightly/master/install.sh | sh -s -- -b $(go env GOPATH)/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitHub Action: &lt;a href=&#34;https://github.com/reviewdog/action-setup&#34;&gt;reviewdog/action-setup&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;steps:&#xA;- uses: reviewdog/action-setup@v1&#xA;  with:&#xA;    reviewdog_version: latest # Optional. [latest,nightly,v.X.Y.Z]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;homebrew / linuxbrew&lt;/h3&gt; &#xA;&lt;p&gt;You can also install reviewdog using brew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew install reviewdog/tap/reviewdog&#xA;$ brew upgrade reviewdog/tap/reviewdog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt; on Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; scoop install reviewdog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build with go install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go install github.com/reviewdog/reviewdog/cmd/reviewdog@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Input Format&lt;/h2&gt; &#xA;&lt;h3&gt;&#39;errorformat&#39;&lt;/h3&gt; &#xA;&lt;p&gt;reviewdog accepts any compiler or linter result from stdin and parses it with scan-f like &lt;a href=&#34;https://github.com/reviewdog/errorformat&#34;&gt;&lt;strong&gt;&#39;errorformat&#39;&lt;/strong&gt;&lt;/a&gt;, which is the port of Vim&#39;s &lt;a href=&#34;https://vim-jp.org/vimdoc-en/quickfix.html#error-file-format&#34;&gt;errorformat&lt;/a&gt; feature.&lt;/p&gt; &#xA;&lt;p&gt;For example, if the result format is &lt;code&gt;{file}:{line number}:{column number}: {message}&lt;/code&gt;, errorformat should be &lt;code&gt;%f:%l:%c: %m&lt;/code&gt; and you can pass it as &lt;code&gt;-efm&lt;/code&gt; arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ golint ./...&#xA;comment_iowriter.go:11:6: exported type CommentWriter should have comment or be unexported&#xA;$ golint ./... | reviewdog -efm=&#34;%f:%l:%c: %m&#34; -diff=&#34;git diff FETCH_HEAD&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;%f&lt;/td&gt; &#xA;   &lt;td&gt;file name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;%l&lt;/td&gt; &#xA;   &lt;td&gt;line number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;%c&lt;/td&gt; &#xA;   &lt;td&gt;column number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;%m&lt;/td&gt; &#xA;   &lt;td&gt;error message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;%%&lt;/td&gt; &#xA;   &lt;td&gt;the single &#39;%&#39; character&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;   &lt;td&gt;...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/reviewdog/errorformat&#34;&gt;reviewdog/errorformat&lt;/a&gt; and &lt;a href=&#34;https://vim-jp.org/vimdoc-en/quickfix.html#error-file-format&#34;&gt;:h errorformat&lt;/a&gt; if you want to deal with a more complex output. &#39;errorformat&#39; can handle more complex output like a multi-line error message.&lt;/p&gt; &#xA;&lt;p&gt;You can also try errorformat on &lt;a href=&#34;https://reviewdog.github.io/errorformat-playground/&#34;&gt;the Playground&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;By this &#39;errorformat&#39; feature, reviewdog can support any tools output with ease.&lt;/p&gt; &#xA;&lt;h3&gt;Available pre-defined &#39;errorformat&#39;&lt;/h3&gt; &#xA;&lt;p&gt;But, you don&#39;t have to write &#39;errorformat&#39; in many cases. reviewdog supports pre-defined errorformat for major tools.&lt;/p&gt; &#xA;&lt;p&gt;You can find available errorformat name by &lt;code&gt;reviewdog -list&lt;/code&gt; and you can use it with &lt;code&gt;-f={name}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ reviewdog -list&#xA;golint          linter for Go source code                                       - https://github.com/golang/lint&#xA;govet           Vet examines Go source code and reports suspicious problems     - https://golang.org/cmd/vet/&#xA;sbt             the interactive build tool                                      - http://www.scala-sbt.org/&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ golint ./... | reviewdog -f=golint -diff=&#34;git diff FETCH_HEAD&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add supported pre-defined &#39;errorformat&#39; by contributing to &lt;a href=&#34;https://github.com/reviewdog/errorformat&#34;&gt;reviewdog/errorformat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Reviewdog Diagnostic Format (RDFormat)&lt;/h3&gt; &#xA;&lt;p&gt;reviewdog supports &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/proto/rdf/&#34;&gt;Reviewdog Diagnostic Format (RDFormat)&lt;/a&gt; as a generic diagnostic format and it supports both &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/proto/rdf/#rdjson&#34;&gt;rdjson&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/proto/rdf/#rdjsonl&#34;&gt;rdjsonl&lt;/a&gt; formats.&lt;/p&gt; &#xA;&lt;p&gt;This rdformat supports rich feature like multiline ranged comments, severity, rule code with URL, and &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#code-suggestions&#34;&gt;code suggestions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ &amp;lt;linter&amp;gt; | &amp;lt;convert-to-rdjson&amp;gt; | reviewdog -f=rdjson -reporter=github-pr-review&#xA;# or&#xA;$ &amp;lt;linter&amp;gt; | &amp;lt;convert-to-rdjsonl&amp;gt; | reviewdog -f=rdjsonl -reporter=github-pr-review&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example: ESLint with RDFormat&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/97085944-87233a80-165b-11eb-94a8-0a47d5e24905.png&#34; alt=&#34;eslint reviewdog rdjson demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://www.npmjs.com/package/eslint-formatter-rdjson&#34;&gt;eslint-formatter-rdjson&lt;/a&gt; to output &lt;code&gt;rdjson&lt;/code&gt; as eslint output format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npm install --save-dev eslint-formatter-rdjson&#xA;$ eslint -f rdjson . | reviewdog -f=rdjson -reporter=github-pr-review&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can also use &lt;a href=&#34;https://github.com/reviewdog/action-eslint&#34;&gt;reviewdog/action-eslint&lt;/a&gt; for GitHub Actions.&lt;/p&gt; &#xA;&lt;h3&gt;Diff&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/89168305-a3ad5a80-d5b7-11ea-8939-be7ac1976d30.png&#34; alt=&#34;reviewdog with gofmt example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;reviewdog supports diff (unified format) as an input format especially useful for &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#code-suggestions&#34;&gt;code suggestions&lt;/a&gt;. reviewdog can integrate with any code suggestions tools or formatters to report suggestions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-f.diff.strip&lt;/code&gt;: option for &lt;code&gt;-f=diff&lt;/code&gt;: strip NUM leading components from diff file names (equivalent to &#39;patch -p&#39;) (default is 1 for git diff) (default 1)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ &amp;lt;any-code-fixer/formatter&amp;gt; # e.g. eslint --fix, gofmt&#xA;$ TMPFILE=$(mktemp)&#xA;$ git diff &amp;gt;&#34;${TMPFILE}&#34;&#xA;$ git stash -u &amp;amp;&amp;amp; git stash drop&#xA;$ reviewdog -f=diff -f.diff.strip=1 -reporter=github-pr-review &amp;lt; &#34;${TMPFILE}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can also use &lt;a href=&#34;https://github.com/reviewdog/action-suggester&#34;&gt;reviewdog/action-suggester&lt;/a&gt; for GitHub Actions.&lt;/p&gt; &#xA;&lt;p&gt;If diagnostic tools support diff output format, you can pipe the diff directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ gofmt -s -d . | reviewdog -name=&#34;gofmt&#34; -f=diff -f.diff.strip=0 -reporter=github-pr-review&#xA;$ shellcheck -f diff $(shfmt -f .) | reviewdog -f=diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;checkstyle format&lt;/h3&gt; &#xA;&lt;p&gt;reviewdog also accepts &lt;a href=&#34;http://checkstyle.sourceforge.net/&#34;&gt;checkstyle XML format&lt;/a&gt; as well. If the linter supports checkstyle format as a report format, you can use -f=checkstyle instead of using &#39;errorformat&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Local&#xA;$ eslint -f checkstyle . | reviewdog -f=checkstyle -diff=&#34;git diff&#34;&#xA;&#xA;# CI (overwrite tool name which is shown in review comment by -name arg)&#xA;$ eslint -f checkstyle . | reviewdog -f=checkstyle -name=&#34;eslint&#34; -reporter=github-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, if you want to pass other Json/XML/etc... format to reviewdog, you can write a converter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ &amp;lt;linter&amp;gt; | &amp;lt;convert-to-checkstyle&amp;gt; | reviewdog -f=checkstyle -name=&#34;&amp;lt;linter&amp;gt;&#34; -reporter=github-pr-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Suggestions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/97085944-87233a80-165b-11eb-94a8-0a47d5e24905.png&#34; alt=&#34;eslint reviewdog suggestion demo&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3797062/89168305-a3ad5a80-d5b7-11ea-8939-be7ac1976d30.png&#34; alt=&#34;reviewdog with gofmt example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;reviewdog supports &lt;em&gt;code suggestions&lt;/em&gt; feature with &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reviewdog-diagnostic-format-rdformat&#34;&gt;rdformat&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#diff&#34;&gt;diff&lt;/a&gt; input. You can also use &lt;a href=&#34;https://github.com/reviewdog/action-suggester&#34;&gt;reviewdog/action-suggester&lt;/a&gt; for GitHub Actions.&lt;/p&gt; &#xA;&lt;p&gt;reviewdog can suggest code changes along with diagnostic results if a diagnostic tools supports code suggestions data. You can integrate reviewdog with any code fixing tools and any code formatter with &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#diff&#34;&gt;diff&lt;/a&gt; input as well.&lt;/p&gt; &#xA;&lt;h3&gt;Code Suggestions Support Table&lt;/h3&gt; &#xA;&lt;p&gt;Note that not all reporters provide support of code suggestion.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;-reporter&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Suggestion support&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;local&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO [1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;github-check&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO [2]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;github-pr-check&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO [2]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;github-pr-review&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;gitlab-mr-discussion&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO [1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;gitlab-mr-commit&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO [2]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;gerrit-change-review&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO [1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;bitbucket-code-report&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO [2]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1] The reporter service support code suggestion feature, but reviewdog does not support it yet. See &lt;a href=&#34;https://github.com/reviewdog/reviewdog/issues/678&#34;&gt;#678&lt;/a&gt; for the status.&lt;/li&gt; &#xA; &lt;li&gt;[2] The reporter service itself doesn&#39;t support code suggestion feature.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;reviewdog config file&lt;/h2&gt; &#xA;&lt;p&gt;reviewdog can also be controlled via the .reviewdog.yml configuration file instead of &#34;-f&#34; or &#34;-efm&#34; arguments.&lt;/p&gt; &#xA;&lt;p&gt;With .reviewdog.yml, you can run the same commands both CI service and local environment including editor integration with ease.&lt;/p&gt; &#xA;&lt;h4&gt;.reviewdog.yml&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;runner:&#xA;  &amp;lt;tool-name&amp;gt;:&#xA;    cmd: &amp;lt;command&amp;gt; # (required)&#xA;    errorformat: # (optional if you use `format`)&#xA;      - &amp;lt;list of errorformat&amp;gt;&#xA;    format: &amp;lt;format-name&amp;gt; # (optional if you use `errorformat`. e.g. golint,rdjson,rdjsonl)&#xA;    name: &amp;lt;tool-name&amp;gt; # (optional. you can overwrite &amp;lt;tool-name&amp;gt; defined by runner key)&#xA;    level: &amp;lt;level&amp;gt; # (optional. same as -level flag. [info,warning,error])&#xA;&#xA;  # examples&#xA;  golint:&#xA;    cmd: golint ./...&#xA;    errorformat:&#xA;      - &#34;%f:%l:%c: %m&#34;&#xA;    level: warning&#xA;  govet:&#xA;    cmd: go vet -all .&#xA;    format: govet&#xA;  your-awesome-linter:&#xA;    cmd: awesome-linter run&#xA;    format: rdjson&#xA;    name: AwesomeLinter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ reviewdog -diff=&#34;git diff FETCH_HEAD&#34;&#xA;project/run_test.go:61:28: [golint] error strings should not end with punctuation&#xA;project/run.go:57:18: [errcheck]        defer os.Setenv(name, os.Getenv(name))&#xA;project/run.go:58:12: [errcheck]        os.Setenv(name, &#34;&#34;)&#xA;# You can use -runners to run only specified runners.&#xA;$ reviewdog -diff=&#34;git diff FETCH_HEAD&#34; -runners=golint,govet&#xA;project/run_test.go:61:28: [golint] error strings should not end with punctuation&#xA;# You can use -conf to specify config file path.&#xA;$ reviewdog -conf=./.reviewdog.yml -reporter=github-pr-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output format for project config based run is one of the following formats.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;file&amp;gt;: [&amp;lt;tool name&amp;gt;] &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;file&amp;gt;:&amp;lt;lnum&amp;gt;: [&amp;lt;tool name&amp;gt;] &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;file&amp;gt;:&amp;lt;lnum&amp;gt;:&amp;lt;col&amp;gt;: [&amp;lt;tool name&amp;gt;] &amp;lt;message&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporters&lt;/h2&gt; &#xA;&lt;p&gt;reviewdog can report results both in local environment and review services as continuous integration.&lt;/p&gt; &#xA;&lt;h3&gt;Reporter: Local (-reporter=local) [default]&lt;/h3&gt; &#xA;&lt;p&gt;reviewdog can find newly introduced findings by filtering linter results using diff. You can pass diff command as &lt;code&gt;-diff&lt;/code&gt; arg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ golint ./... | reviewdog -f=golint -diff=&#34;git diff FETCH_HEAD&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reporter: GitHub Checks (-reporter=github-pr-check)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/reviewdog/reviewdog/pull/275/files#annotation_6177941961779419&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/64875597-65016f80-d688-11e9-843f-4679fb666f0d.png&#34; alt=&#34;github-pr-check sample annotation with option 1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/reviewdog/reviewdog/pull/131/checks&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/40884858-6efd82a0-6756-11e8-9f1a-c6af4f920fb0.png&#34; alt=&#34;github-pr-check sample&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;github-pr-check reporter reports results to &lt;a href=&#34;https://help.github.com/articles/about-status-checks/&#34;&gt;GitHub Checks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can change report level for this reporter by &lt;code&gt;level&lt;/code&gt; field in &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reviewdog-config-file&#34;&gt;config file&lt;/a&gt; or &lt;code&gt;-level&lt;/code&gt; flag. You can control GitHub status check result with this feature. (default: error)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Level&lt;/th&gt; &#xA;   &lt;th&gt;GitHub Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;info&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;neutral&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;warning&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;neutral&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;error&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;failure&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There are two options to use this reporter.&lt;/p&gt; &#xA;&lt;h4&gt;Option 1) Run reviewdog from GitHub Actions w/ secrets.GITHUB_TOKEN&lt;/h4&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/.github/workflows/reviewdog.yml&#34;&gt;.github/workflows/reviewdog.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: Run reviewdog&#xA;  env:&#xA;    REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;  run: |&#xA;    golint ./... | reviewdog -f=golint -reporter=github-pr-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#github-actions&#34;&gt;GitHub Actions&lt;/a&gt; section too. You can also use public reviewdog GitHub Actions.&lt;/p&gt; &#xA;&lt;h4&gt;Option 2) Install reviewdog GitHub Apps&lt;/h4&gt; &#xA;&lt;p&gt;reviewdog CLI send a request to reviewdog GitHub App server and the server post results as GitHub Checks, because Check API only supported for GitHub App and GitHub Actions.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install reviewdog Apps. &lt;a href=&#34;https://github.com/apps/reviewdog&#34;&gt;https://github.com/apps/reviewdog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;REVIEWDOG_TOKEN&lt;/code&gt; or run reviewdog CLI in trusted CI providers.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get token from &lt;code&gt;https://reviewdog.app/gh/{owner}/{repo-name}&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export REVIEWDOG_TOKEN=&#34;&amp;lt;token&amp;gt;&#34;&#xA;$ reviewdog -reporter=github-pr-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Token is not required if you run reviewdog in Travis or AppVeyor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Caution&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;As described above, github-pr-check reporter with Option 2 depends on reviewdog GitHub App server. The server is running with haya14busa&#39;s pocket money for now and I may break things, so I cannot ensure that the server is running 24h and 365 days.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Started getting support by &lt;a href=&#34;https://opencollective.com/reviewdog&#34;&gt;opencollective&lt;/a&gt; and GitHub sponsor. See &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#supporting-reviewdog&#34;&gt;Supporting reviewdog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use github-pr-review reporter or use run reviewdog under GitHub Actions if you don&#39;t want to depend on reviewdog server.&lt;/p&gt; &#xA;&lt;h3&gt;Reporter: GitHub Checks (-reporter=github-check)&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s basically same as &lt;code&gt;-reporter=github-pr-check&lt;/code&gt; except it works not only for Pull Request but also for commit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/reviewdog/reviewdog/pull/364/files&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/69917921-e0680580-14ae-11ea-9a56-de9e3cbac005.png&#34; alt=&#34;sample comment outside diff&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can create &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reviewdog-badge-&#34;&gt;reviewdog badge&lt;/a&gt; for this reporter.&lt;/p&gt; &#xA;&lt;h3&gt;Reporter: GitHub PullRequest review comment (-reporter=github-pr-review)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/reviewdog/reviewdog/pull/24#discussion_r84599728&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haya14busa/i/dc0ccb1e110515ea407c146d99b749018db05c45/reviewdog/sample-comment.png&#34; alt=&#34;sample-comment.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;github-pr-review reporter reports results to GitHub PullRequest review comments using GitHub Personal API Access Token. &lt;a href=&#34;https://enterprise.github.com/home&#34;&gt;GitHub Enterprise&lt;/a&gt; is supported too.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;https://github.com/settings/tokens&lt;/a&gt; and generate new API token.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;code&gt;repo&lt;/code&gt; for private repositories or &lt;code&gt;public_repo&lt;/code&gt; for public repositories.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export REVIEWDOG_GITHUB_API_TOKEN=&#34;&amp;lt;token&amp;gt;&#34;&#xA;$ reviewdog -reporter=github-pr-review&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For GitHub Enterprise, set API endpoint by environment variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export GITHUB_API=&#34;https://example.githubenterprise.com/api/v3/&#34;&#xA;$ export REVIEWDOG_INSECURE_SKIP_VERIFY=true # set this as you need to skip verifying SSL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#github-actions&#34;&gt;GitHub Actions&lt;/a&gt; section too if you can use GitHub Actions. You can also use public reviewdog GitHub Actions.&lt;/p&gt; &#xA;&lt;h3&gt;Reporter: GitLab MergeRequest discussions (-reporter=gitlab-mr-discussion)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.com/haya14busa/reviewdog/merge_requests/113#note_83411103&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/41810718-f91bc540-773d-11e8-8598-fbc09ce9b1c7.png&#34; alt=&#34;gitlab-mr-discussion sample&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Required GitLab version: &amp;gt;= v10.8.0&lt;/p&gt; &#xA;&lt;p&gt;gitlab-mr-discussion reporter reports results to GitLab MergeRequest discussions using GitLab Personal API Access token. Get the token with &lt;code&gt;api&lt;/code&gt; scope from &lt;a href=&#34;https://gitlab.com/profile/personal_access_tokens&#34;&gt;https://gitlab.com/profile/personal_access_tokens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export REVIEWDOG_GITLAB_API_TOKEN=&#34;&amp;lt;token&amp;gt;&#34;&#xA;$ reviewdog -reporter=gitlab-mr-discussion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;CI_API_V4_URL&lt;/code&gt; environment variable, defined automatically by Gitlab CI (v11.7 onwards), will be used to find out the Gitlab API URL.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;GITLAB_API&lt;/code&gt; can also be defined, in which case it will take precedence over &lt;code&gt;CI_API_V4_URL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export GITLAB_API=&#34;https://example.gitlab.com/api/v4&#34;&#xA;$ export REVIEWDOG_INSECURE_SKIP_VERIFY=true # set this as you need to skip verifying SSL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reporter: GitLab MergeRequest commit (-reporter=gitlab-mr-commit)&lt;/h3&gt; &#xA;&lt;p&gt;gitlab-mr-commit is similar to &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-gitlab-mergerequest-discussions--reportergitlab-mr-discussion&#34;&gt;gitlab-mr-discussion&lt;/a&gt; reporter but reports results to each commit in GitLab MergeRequest.&lt;/p&gt; &#xA;&lt;p&gt;gitlab-mr-discussion is recommended, but you can use gitlab-mr-commit reporter if your GitLab version is under v10.8.0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export REVIEWDOG_GITLAB_API_TOKEN=&#34;&amp;lt;token&amp;gt;&#34;&#xA;$ reviewdog -reporter=gitlab-mr-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reporter: Gerrit Change review (-reporter=gerrit-change-review)&lt;/h3&gt; &#xA;&lt;p&gt;gerrit-change-review reporter reports result to Gerrit Change using Gerrit Rest APIs.&lt;/p&gt; &#xA;&lt;p&gt;The reporter supports Basic Authentication and Git-cookie based authentication for reporting results.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;GERRIT_USERNAME&lt;/code&gt; and &lt;code&gt;GERRIT_PASSWORD&lt;/code&gt; environment variables for basic authentication, and put &lt;code&gt;GIT_GITCOOKIE_PATH&lt;/code&gt; for git cookie based authentication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export GERRIT_CHANGE_ID=changeID&#xA;$ export GERRIT_REVISION_ID=revisionID&#xA;$ export GERRIT_BRANCH=master&#xA;$ export GERRIT_ADDRESS=http://&amp;lt;gerrit-host&amp;gt;:&amp;lt;gerrit-port&amp;gt;&#xA;$ reviewdog -reporter=gerrit-change-review&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reporter: Bitbucket Code Insights Reports (-reporter=bitbucket-code-report)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/Trane9991/reviewdog-example/pull-requests/1&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9948629/96770123-c138d600-13e8-11eb-8e46-250b4bb393bd.png&#34; alt=&#34;bitbucket-code-report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bitbucket.org/Trane9991/reviewdog-example/pull-requests/1&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9948629/97054896-5e813f00-158e-11eb-9ad7-f8d75489b8ba.png&#34; alt=&#34;bitbucket-code-annotations&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;bitbucket-code-report generates the annotated &lt;a href=&#34;https://support.atlassian.com/bitbucket-cloud/docs/code-insights/&#34;&gt;Bitbucket Code Insights&lt;/a&gt; report.&lt;/p&gt; &#xA;&lt;p&gt;For now, only the &lt;code&gt;no-filter&lt;/code&gt; mode supported, so the whole project is scanned on every run. Reports are stored per commit and can be viewed per commit from Bitbucket Pipelines UI or in Pull Request. In the Pull Request UI affected code lines will be annotated in the diff, as well as you will be able to filter the annotations by &lt;strong&gt;This pull request&lt;/strong&gt; or &lt;strong&gt;All&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If running from &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#bitbucket-pipelines&#34;&gt;Bitbucket Pipelines&lt;/a&gt;, no additional configuration is needed (even credentials). If running locally or from some other CI system you would need to provide Bitbucket API credentials:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Basic Auth you need to set following env variables: &lt;code&gt;BITBUCKET_USER&lt;/code&gt; and &lt;code&gt;BITBUCKET_PASSWORD&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For AccessToken Auth you need to set &lt;code&gt;BITBUCKET_ACCESS_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export BITBUCKET_USER=&#34;my_user&#34;&#xA;$ export BITBUCKET_PASSWORD=&#34;my_password&#34;&#xA;$ reviewdog -reporter=bitbucket-code-report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To post report to Bitbucket Server use &lt;code&gt;BITBUCKET_SERVER_URL&lt;/code&gt; variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export BITBUCKET_USER=&#34;my_user&#34;&#xA;$ export BITBUCKET_PASSWORD=&#34;my_password&#34;&#xA;$ export BITBUCKET_SERVER_URL=&#34;https://bitbucket.my-company.com&#34;&#xA;$ reviewdog -reporter=bitbucket-code-report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported CI services&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/.github/workflows/reviewdog.yml&#34;&gt;.github/workflows/reviewdog.yml&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: reviewdog&#xA;on: [pull_request]&#xA;jobs:&#xA;  reviewdog:&#xA;    name: reviewdog&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      # ...&#xA;      - uses: reviewdog/action-setup@v1&#xA;        with:&#xA;          reviewdog_version: latest # Optional. [latest,nightly,v.X.Y.Z]&#xA;      - name: Run reviewdog&#xA;        env:&#xA;          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;        run: |&#xA;          reviewdog -reporter=github-pr-check -runners=golint,govet&#xA;          # or&#xA;          reviewdog -reporter=github-pr-review -runners=golint,govet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Example (github-check reporter):&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/.github/workflows/reviewdog.yml&#34;&gt;.github/workflows/reviewdog&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Only &lt;code&gt;github-check&lt;/code&gt; reporter can run on push event too.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: reviewdog (github-check)&#xA;on:&#xA;  push:&#xA;    branches:&#xA;      - master&#xA;  pull_request:&#xA;&#xA;jobs:&#xA;  reviewdog:&#xA;    name: reviewdog&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      # ...&#xA;      - name: Run reviewdog&#xA;        env:&#xA;          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}&#xA;        run: |&#xA;          reviewdog -reporter=github-check -runners=golint,govet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Public Reviewdog GitHub Actions&lt;/h4&gt; &#xA;&lt;p&gt;You can use public GitHub Actions to start using reviewdog with ease! &lt;span&gt;üéâ&lt;/span&gt; &lt;span&gt;‚ñ∂&lt;/span&gt; &lt;span&gt;üéâ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Common &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-misspell&#34;&gt;reviewdog/action-misspell&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/client9/misspell&#34;&gt;misspell&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/EPMatt/reviewdog-action-prettier&#34;&gt;EPMatt/reviewdog-action-prettier&lt;/a&gt; - Run &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Text &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-alex&#34;&gt;reviewdog/action-alex&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/get-alex/alex&#34;&gt;alex&lt;/a&gt; which catches insensitive, inconsiderate writing. (e.g. master/slave)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-languagetool&#34;&gt;reviewdog/action-languagetool&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/languagetool-org/languagetool&#34;&gt;languagetool&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tsuyoshicho/action-textlint&#34;&gt;tsuyoshicho/action-textlint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/textlint/textlint&#34;&gt;textlint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tsuyoshicho/action-redpen&#34;&gt;tsuyoshicho/action-redpen&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/redpen-cc/redpen&#34;&gt;redpen&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Markdown &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-markdownlint&#34;&gt;reviewdog/action-markdownlint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/DavidAnson/markdownlint&#34;&gt;markdownlint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Docker &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-hadolint&#34;&gt;reviewdog/action-hadolint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;hadolint&lt;/a&gt; to lint &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Env &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dotenv-linter/action-dotenv-linter&#34;&gt;dotenv-linter/action-dotenv-linter&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/dotenv-linter/dotenv-linter&#34;&gt;dotenv-linter&lt;/a&gt; to lint &lt;code&gt;.env&lt;/code&gt; files.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Shell script &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-shellcheck&#34;&gt;reviewdog/action-shellcheck&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-shfmt&#34;&gt;reviewdog/action-shfmt&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-staticcheck&#34;&gt;reviewdog/action-staticcheck&lt;/a&gt; - Run &lt;a href=&#34;https://staticcheck.io/&#34;&gt;staticcheck&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-golangci-lint&#34;&gt;reviewdog/action-golangci-lint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;&gt;golangci-lint&lt;/a&gt; and supported linters individually by golangci-lint.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;JavaScript &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-eslint&#34;&gt;reviewdog/action-eslint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;eslint&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;TypeScript &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/EPMatt/reviewdog-action-tsc&#34;&gt;EPMatt/reviewdog-action-tsc&lt;/a&gt; - Run &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/compiler-options.html&#34;&gt;tsc&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CSS &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-stylelint&#34;&gt;reviewdog/action-stylelint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;stylelint&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vim script &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-vint&#34;&gt;reviewdog/action-vint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/Kuniwak/vint&#34;&gt;vint&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tsuyoshicho/action-vimlint&#34;&gt;tsuyoshicho/action-vimlint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/syngan/vim-vimlint&#34;&gt;vim-vimlint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Terraform &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-tflint&#34;&gt;reviewdog/action-tflint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/wata727/tflint&#34;&gt;tflint&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;YAML &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-yamllint&#34;&gt;reviewdog/action-yamllint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;yamllint&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ruby &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-brakeman&#34;&gt;reviewdog/action-brakeman&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/presidentbeef/brakeman&#34;&gt;brakeman&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-reek&#34;&gt;reviewdog/action-reek&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/troessner/reek&#34;&gt;reek&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-rubocop&#34;&gt;reviewdog/action-rubocop&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/rubocop-hq/rubocop&#34;&gt;rubocop&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/vk26/action-fasterer&#34;&gt;vk26/action-fasterer&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/DamirSvrtan/fasterer&#34;&gt;fasterer&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/SennaLabs/action-standardrb&#34;&gt;SennaLabs/action-standardrb&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;standardrb&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tk0miya/action-erblint&#34;&gt;tk0miya/action-erblint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/Shopify/erb-lint&#34;&gt;erb-lint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/blooper05/action-rails_best_practices&#34;&gt;blooper05/action-rails_best_practices&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/flyerhzm/rails_best_practices&#34;&gt;rails_best_practices&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tomferreira/action-bundler-audit&#34;&gt;tomferreira/action-bundler-audit&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/rubysec/bundler-audit&#34;&gt;bundler-audit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Python &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/wemake-services/wemake-python-styleguide&#34;&gt;wemake-python-styleguide&lt;/a&gt; - Run wemake-python-styleguide&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tsuyoshicho/action-mypy&#34;&gt;tsuyoshicho/action-mypy&lt;/a&gt; - Run &lt;a href=&#34;https://pypi.org/project/mypy/&#34;&gt;mypy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/jordemort/action-pyright&#34;&gt;jordemort/action-pyright&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/Microsoft/pyright&#34;&gt;pyright&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/dciborow/action-pylint&#34;&gt;dciborow/action-pylint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/PyCQA/pylint&#34;&gt;pylint&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-black&#34;&gt;reviewdog/action-black&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/psf/black&#34;&gt;black&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Kotlin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ScaCap/action-ktlint&#34;&gt;ScaCap/action-ktlint&lt;/a&gt; - Run &lt;a href=&#34;https://ktlint.github.io/&#34;&gt;ktlint&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Android Lint &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/DVDAndroid/action-android-lint&#34;&gt;dvdandroid/action-android-lint&lt;/a&gt; - Run &lt;a href=&#34;https://developer.android.com/studio/write/lint&#34;&gt;Android Lint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ansible &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-ansiblelint&#34;&gt;reviewdog/action-ansiblelint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/ansible/ansible-lint&#34;&gt;ansible-lint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;GitHub Actions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/action-actionlint&#34;&gt;reviewdog/action-actionlint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/rhysd/actionlint&#34;&gt;actionlint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Protocol Buffers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/yoheimuta/action-protolint&#34;&gt;yoheimuta/action-protolint&lt;/a&gt; - Run &lt;a href=&#34;https://github.com/yoheimuta/protolint&#34;&gt;protolint&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;... and more on &lt;a href=&#34;https://github.com/marketplace?utf8=%E2%9C%93&amp;amp;type=actions&amp;amp;query=reviewdog&#34;&gt;GitHub Marketplace&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Missing actions? Check out &lt;a href=&#34;https://github.com/reviewdog/action-template&#34;&gt;reviewdog/action-template&lt;/a&gt; and create a new reviewdog action!&lt;/p&gt; &#xA;&lt;p&gt;Please open a Pull Request to add your created reviewdog actions here &lt;span&gt;‚ú®&lt;/span&gt;. I can also put your repositories under reviewdog org and co-maintain the actions. Example: &lt;a href=&#34;https://github.com/reviewdog/reviewdog/issues/322&#34;&gt;action-tflint&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Graceful Degradation for Pull Requests from forked repositories&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3797062/71781334-e2266b00-3010-11ea-8a38-dee6e30c8162.png&#34; alt=&#34;Graceful Degradation example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;GITHUB_TOKEN&lt;/code&gt; for Pull Requests from forked repository doesn&#39;t have write access to Check API nor Review API due to &lt;a href=&#34;https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token#permissions-for-the-github_token&#34;&gt;GitHub Actions restriction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Instead, reviewdog uses &lt;a href=&#34;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/development-tools-for-github-actions#set-an-error-message-error&#34;&gt;Logging commands of GitHub Actions&lt;/a&gt; to post results as &lt;a href=&#34;https://developer.github.com/v3/checks/runs/#annotations-object&#34;&gt;annotations&lt;/a&gt; similar to &lt;code&gt;github-pr-check&lt;/code&gt; reporter.&lt;/p&gt; &#xA;&lt;p&gt;Note that there is a limitation for annotations created by logging commands, such as &lt;a href=&#34;https://github.com/reviewdog/reviewdog/issues/411#issuecomment-570893427&#34;&gt;max # of annotations per run&lt;/a&gt;. You can check GitHub Actions log to see full results in such cases.&lt;/p&gt; &#xA;&lt;h4&gt;reviewdog badge &lt;a href=&#34;https://github.com/reviewdog/reviewdog/actions?query=workflow%3Areviewdog+event%3Apush+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/reviewdog/reviewdog/workflows/reviewdog/badge.svg?branch=master&amp;amp;event=push&#34; alt=&#34;reviewdog&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;As &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-github-checks--reportergithub-pr-check&#34;&gt;&lt;code&gt;github-check&lt;/code&gt; reporter&lt;/a&gt; support running on commit, we can create reviewdog &lt;a href=&#34;https://help.github.com/en/actions/automating-your-workflow-with-github-actions/configuring-a-workflow#adding-a-workflow-status-badge-to-your-repository&#34;&gt;GitHub Action badge&lt;/a&gt; to check the result against master commit for example. &lt;span&gt;üéâ&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;!-- Replace &amp;lt;OWNER&amp;gt; and &amp;lt;REPOSITORY&amp;gt;. It assumes workflow name is &#34;reviewdog&#34; --&amp;gt;&#xA;[![reviewdog](https://github.com/&amp;lt;OWNER&amp;gt;/&amp;lt;REPOSITORY&amp;gt;/workflows/reviewdog/badge.svg?branch=master&amp;amp;event=push)](https://github.com/&amp;lt;OWNER&amp;gt;/&amp;lt;REPOSITORY&amp;gt;/actions?query=workflow%3Areviewdog+event%3Apush+branch%3Amaster)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;h4&gt;Travis CI (-reporter=github-pr-check)&lt;/h4&gt; &#xA;&lt;p&gt;If you use -reporter=github-pr-check in Travis CI, you don&#39;t need to set &lt;code&gt;REVIEWDOG_TOKEN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;install:&#xA;  - mkdir -p ~/bin/ &amp;amp;&amp;amp; export PATH=&#34;~/bin/:$PATH&#34;&#xA;  - curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh| sh -s -- -b ~/bin&#xA;&#xA;script:&#xA;  - reviewdog -conf=.reviewdog.yml -reporter=github-pr-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Travis CI (-reporter=github-pr-review)&lt;/h4&gt; &#xA;&lt;p&gt;Store GitHub API token by &lt;a href=&#34;https://docs.travis-ci.com/user/encryption-keys/&#34;&gt;travis encryption keys&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ gem install travis&#xA;$ travis encrypt REVIEWDOG_GITHUB_API_TOKEN=&amp;lt;token&amp;gt; --add env.global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  global:&#xA;    - secure: &amp;lt;token&amp;gt;&#xA;&#xA;install:&#xA;  - mkdir -p ~/bin/ &amp;amp;&amp;amp; export PATH=&#34;~/bin/:$PATH&#34;&#xA;  - curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh| sh -s -- -b ~/bin&#xA;&#xA;script:&#xA;  - &amp;gt;-&#xA;    golint ./... | reviewdog -f=golint -reporter=github-pr-review&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/azu/textlint-reviewdog-example&#34;&gt;https://github.com/azu/textlint-reviewdog-example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Circle CI&lt;/h3&gt; &#xA;&lt;p&gt;Store &lt;code&gt;REVIEWDOG_GITHUB_API_TOKEN&lt;/code&gt; (or &lt;code&gt;REVIEWDOG_TOKEN&lt;/code&gt; for github-pr-check) in &lt;a href=&#34;https://circleci.com/docs/environment-variables/#setting-environment-variables-for-all-commands-without-adding-them-to-git&#34;&gt;Environment variables - CircleCI&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;.circleci/config.yml sample&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 2&#xA;jobs:&#xA;  build:&#xA;    docker:&#xA;      - image: golang:latest&#xA;    steps:&#xA;      - checkout&#xA;      - run: curl -sfL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh| sh -s -- -b ./bin&#xA;      - run: go vet ./... 2&amp;gt;&amp;amp;1 | ./bin/reviewdog -f=govet -reporter=github-pr-review&#xA;&#xA;      # Deprecated: prefer GitHub Actions to use github-pr-check reporter.&#xA;      - run: go vet ./... 2&amp;gt;&amp;amp;1 | ./bin/reviewdog -f=govet -reporter=github-pr-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GitLab CI&lt;/h3&gt; &#xA;&lt;p&gt;Store &lt;code&gt;REVIEWDOG_GITLAB_API_TOKEN&lt;/code&gt; in &lt;a href=&#34;https://docs.gitlab.com/ee/ci/variables/#variables&#34;&gt;GitLab CI variable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;.gitlab-ci.yml sample&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;reviewdog:&#xA;  script:&#xA;    - reviewdog -reporter=gitlab-mr-discussion&#xA;    # Or&#xA;    - reviewdog -reporter=gitlab-mr-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bitbucket Pipelines&lt;/h3&gt; &#xA;&lt;p&gt;No additional configuration is needed.&lt;/p&gt; &#xA;&lt;h4&gt;bitbucket-pipelines.yml sample&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;pipelines:&#xA;  default:&#xA;    - step:&#xA;        name: Reviewdog&#xA;        image: golangci/golangci-lint:v1.31-alpine&#xA;        script:&#xA;          - wget -O - -q https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | &#xA;              sh -s -- -b $(go env GOPATH)/bin&#xA;          - golangci-lint run --out-format=line-number ./... | reviewdog -f=golangci-lint -reporter=bitbucket-code-report&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common (Jenkins, local, etc...)&lt;/h3&gt; &#xA;&lt;p&gt;You can use reviewdog to post review comments from anywhere with following environment variables.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CI_PULL_REQUEST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pull Request number (e.g. 14)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CI_COMMIT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SHA1 for the current build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CI_REPO_OWNER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;repository owner (e.g. &#34;haya14busa&#34; for &lt;a href=&#34;https://github.com/haya14busa/reviewdog&#34;&gt;https://github.com/haya14busa/reviewdog&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CI_REPO_NAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;repository name (e.g. &#34;reviewdog&#34; for &lt;a href=&#34;https://github.com/haya14busa/reviewdog&#34;&gt;https://github.com/haya14busa/reviewdog&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CI_BRANCH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;[optional] branch of the commit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export CI_PULL_REQUEST=14&#xA;$ export CI_REPO_OWNER=haya14busa&#xA;$ export CI_REPO_NAME=reviewdog&#xA;$ export CI_COMMIT=$(git rev-parse HEAD)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and set a token if required.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ REVIEWDOG_TOKEN=&#34;&amp;lt;token&amp;gt;&#34;&#xA;$ REVIEWDOG_GITHUB_API_TOKEN=&#34;&amp;lt;token&amp;gt;&#34;&#xA;$ REVIEWDOG_GITLAB_API_TOKEN=&#34;&amp;lt;token&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a CI service doesn&#39;t provide information such as Pull Request ID - reviewdog can guess it by branch name and commit SHA. Just pass the flag &lt;code&gt;guess&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ reviewdog -conf=.reviewdog.yml -reporter=github-pr-check -guess&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Jenkins with Github pull request builder plugin&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin&#34;&gt;GitHub pull request builder plugin - Jenkins - Jenkins Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth&#34;&gt;Configuring a GitHub app account - Jenkins - CloudBees&lt;/a&gt; - required to use github-pr-check formatter without reviewdog server or GitHub actions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export CI_PULL_REQUEST=${ghprbPullId}&#xA;$ export CI_REPO_OWNER=haya14busa&#xA;$ export CI_REPO_NAME=reviewdog&#xA;$ export CI_COMMIT=${ghprbActualCommit}&#xA;$ export REVIEWDOG_INSECURE_SKIP_VERIFY=true # set this as you need&#xA;&#xA;# To submit via reviewdog server using github-pr-check reporter&#xA;$ REVIEWDOG_TOKEN=&#34;&amp;lt;token&amp;gt;&#34; reviewdog -reporter=github-pr-check&#xA;# Or, to submit directly via API using github-pr-review reporter&#xA;$ REVIEWDOG_GITHUB_API_TOKEN=&#34;&amp;lt;token&amp;gt;&#34; reviewdog -reporter=github-pr-review&#xA;# Or, to submit directly via API using github-pr-check reporter (requires GitHub App Account configured)&#xA;$ REVIEWDOG_SKIP_DOGHOUSE=true REVIEWDOG_GITHUB_API_TOKEN=&#34;&amp;lt;token&amp;gt;&#34; reviewdog -reporter=github-pr-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exit codes&lt;/h2&gt; &#xA;&lt;p&gt;By default reviewdog will return &lt;code&gt;0&lt;/code&gt; as exit code even if it finds errors. If &lt;code&gt;-fail-on-error&lt;/code&gt; flag is passed, reviewdog exits with &lt;code&gt;1&lt;/code&gt; when at least one error was found/reported. This can be helpful when you are using it as a step in your CI pipeline and want to mark the step failed if any error found by linter.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;code&gt;-level&lt;/code&gt; flag for &lt;a href=&#34;https://raw.githubusercontent.com/reviewdog/reviewdog/master/#reporter-github-checks--reportergithub-pr-check&#34;&gt;github-pr-check/github-check&lt;/a&gt; reporters. reviewdog will exit with &lt;code&gt;1&lt;/code&gt; if reported check status is &lt;code&gt;failure&lt;/code&gt; as well if &lt;code&gt;-fail-on-error=true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Filter mode&lt;/h2&gt; &#xA;&lt;p&gt;reviewdog filter results by diff and you can control how reviewdog filter results by &lt;code&gt;-filter-mode&lt;/code&gt; flag. Available filter modes are as below.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;added&lt;/code&gt; (default)&lt;/h3&gt; &#xA;&lt;p&gt;Filter results by added/modified lines.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;diff_context&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Filter results by diff context. i.e. changed lines +-N lines (N=3 for example).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;file&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Filter results by added/modified file. i.e. reviewdog will report results as long as they are in added/modified file even if the results are not in actual diff.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;nofilter&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Do not filter any results. Useful for posting results as comments as much as possible and check other results in console at the same time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;-fail-on-error&lt;/code&gt; also works with any filter-mode and can catch all results from any linters with &lt;code&gt;nofilter&lt;/code&gt; mode.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ reviewdog -reporter=github-pr-review -filter-mode=nofilter -fail-on-error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filter Mode Support Table&lt;/h3&gt; &#xA;&lt;p&gt;Note that not all reporters provide full support of filter mode due to API limitation. e.g. &lt;code&gt;github-pr-review&lt;/code&gt; reporter uses &lt;a href=&#34;https://developer.github.com/v3/pulls/reviews/&#34;&gt;GitHub Review API&lt;/a&gt; but it doesn&#39;t support posting comment outside diff (&lt;code&gt;diff_context&lt;/code&gt;), so reviewdog will use &lt;a href=&#34;https://developer.github.com/v3/checks/runs/&#34;&gt;Check annotation&lt;/a&gt; as fallback to post those comments [1].&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;-reporter&lt;/code&gt; \ &lt;code&gt;-filter-mode&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;added&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;diff_context&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;file&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;nofilter&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;local&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;github-check&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;github-pr-check&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;github-pr-review&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;Partially Supported [1]&lt;/td&gt; &#xA;   &lt;td&gt;Partially Supported [1]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;gitlab-mr-discussion&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;Partially Supported [2]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;gitlab-mr-commit&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;Partially Supported [2]&lt;/td&gt; &#xA;   &lt;td&gt;Partially Supported [2]&lt;/td&gt; &#xA;   &lt;td&gt;Partially Supported [2]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;gerrit-change-review&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;   &lt;td&gt;OK? [3]&lt;/td&gt; &#xA;   &lt;td&gt;OK? [3]&lt;/td&gt; &#xA;   &lt;td&gt;Partially Supported? [2][3]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;bitbucket-code-report&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NO [4]&lt;/td&gt; &#xA;   &lt;td&gt;NO [4]&lt;/td&gt; &#xA;   &lt;td&gt;NO [4]&lt;/td&gt; &#xA;   &lt;td&gt;OK&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1] Report results which is outside diff context with Check annotation as fallback if it&#39;s running in GitHub actions instead of Review API (comments). All results will be reported to console as well.&lt;/li&gt; &#xA; &lt;li&gt;[2] Report results which is outside diff file to console.&lt;/li&gt; &#xA; &lt;li&gt;[3] It should work, but not verified yet.&lt;/li&gt; &#xA; &lt;li&gt;[4] Not implemented at the moment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;-tee&lt;/code&gt; flag to show debug info.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;reviewdog -filter-mode=nofilter -tee&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@haya14busa/reviewdog-a-code-review-dog-who-keeps-your-codebase-healthy-d957c471938b&#34;&gt;reviewdog ‚Äî A code review dog who keeps your codebase healthy &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@haya14busa/reviewdog-github-check-improved-automated-review-experience-58f89e0c95f3&#34;&gt;reviewdog ‚ô° GitHub Check ‚Äî improved automated review experience&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@haya14busa/automated-code-review-on-github-actions-with-reviewdog-for-any-languages-tools-20285e04448e&#34;&gt;Automated Code Review on GitHub Actions with reviewdog for any languages/tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://evrone.com/github-actions&#34;&gt;GitHub Actions to guard your workflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üê¶&lt;/span&gt; Author&lt;/h2&gt; &#xA;&lt;p&gt;haya14busa &lt;a href=&#34;https://github.com/haya14busa&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/followers/haya14busa.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;GitHub followers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/reviewdog/reviewdog/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/reviewdog/contributors.svg?width=890&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supporting reviewdog&lt;/h3&gt; &#xA;&lt;p&gt;Become GitHub Sponsor for &lt;a href=&#34;https://github.com/reviewdog/reviewdog/graphs/contributors&#34;&gt;each contributor&lt;/a&gt; or become a backer or sponsor from &lt;a href=&#34;https://opencollective.com/reviewdog&#34;&gt;opencollective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/reviewdog#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/reviewdog/tiers/backer.svg?avatarHeight=64&#34; alt=&#34;Become a backer&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>amitshekhariitbhu/go-backend-clean-architecture</title>
    <updated>2023-01-12T01:36:15Z</updated>
    <id>tag:github.com,2023-01-12:/amitshekhariitbhu/go-backend-clean-architecture</id>
    <link href="https://github.com/amitshekhariitbhu/go-backend-clean-architecture" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Go (Golang) Backend Clean Architecture project with Gin, MongoDB, JWT Authentication Middleware, Test, and Docker.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Backend Clean Architecture&lt;/h1&gt; &#xA;&lt;p&gt;A Go (Golang) Backend Clean Architecture project with Gin, MongoDB, JWT Authentication Middleware, Test, and Docker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/go-backend-clean-architecture.png?raw=true&#34; alt=&#34;Go Backend Clean Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can use this project as a template to build your Backend project in the Go language on top of this project.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before creating this project, I have gone through more than 20 projects related to the Go(Golang) Clean Architecture on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all those projects, I learned a lot from all of those. As I keep saying:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The best way to learn to code is to code. But, to write good code, you will also have to read good code. Make a habit of reading good code. You can find many open-source projects on GitHub and start reading.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then for the implementation part, I combined all of my ideas, experiences, and learnings from those projects to create this project.&lt;/p&gt; &#xA;&lt;p&gt;And as always I would love to get feedback on my project. This helps everyone and most importantly me.&lt;/p&gt; &#xA;&lt;p&gt;Learn about this project architecture in detail from the blogs mentioned below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amitshekhar.me/blog/go-backend-clean-architecture&#34;&gt;Go Backend Clean Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://amitshekhar.me/blog/go-jwt-authentication-middleware&#34;&gt;Go JWT Authentication Middleware&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture Layers of the project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Router&lt;/li&gt; &#xA; &lt;li&gt;Controller&lt;/li&gt; &#xA; &lt;li&gt;Usecase&lt;/li&gt; &#xA; &lt;li&gt;Repository&lt;/li&gt; &#xA; &lt;li&gt;Domain&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/go-backend-arch-diagram.png?raw=true&#34; alt=&#34;Go Backend Clean Architecture Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About me&lt;/h2&gt; &#xA;&lt;p&gt;Hi, I am &lt;a href=&#34;https://amitshekhar.me&#34;&gt;&lt;strong&gt;Amit Shekhar&lt;/strong&gt;&lt;/a&gt;, I have mentored many developers, and their efforts landed them high-paying tech jobs, helped many tech companies in solving their unique problems, and created many open-source libraries being used by top companies. I am passionate about sharing knowledge through open-source, blogs, and videos.&lt;/p&gt; &#xA;&lt;p&gt;You can connect with me on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/amitiitbhu&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@amitshekhar&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/amit-shekhar-iitbhu&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amitshekhariitbhu&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Major Packages used in this project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;gin&lt;/strong&gt;: Gin is an HTTP web framework written in Go (Golang). It features a Martini-like API with much better performance -- up to 40 times faster. If you need a smashing performance, get yourself some Gin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mongo go driver&lt;/strong&gt;: The Official Golang driver for MongoDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;jwt&lt;/strong&gt;: JSON Web Tokens are an open, industry-standard RFC 7519 method for representing claims securely between two parties. Used for Access Token and Refresh Token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;viper&lt;/strong&gt;: For loading configuration from the &lt;code&gt;.env&lt;/code&gt; file. Go configuration with fangs. Find, load, and unmarshal a configuration file in JSON, TOML, YAML, HCL, INI, envfile, or Java properties formats.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bcrypt&lt;/strong&gt;: Package bcrypt implements Provos and Mazi√®res&#39;s bcrypt adaptive hashing algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;testify&lt;/strong&gt;: A toolkit with common assertions and mocks that plays nicely with the standard library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mockery&lt;/strong&gt;: A mock code autogenerator for Golang used in testing.&lt;/li&gt; &#xA; &lt;li&gt;Check more packages in &lt;code&gt;go.mod&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Public API Request Flow without JWT Authentication Middleware&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/go-arch-public-api-request-flow.png?raw=true&#34; alt=&#34;Public API Request Flow&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Private API Request Flow with JWT Authentication Middleware&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;JWT Authentication Middleware for Access Token Validation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/go-arch-private-api-request-flow.png?raw=true&#34; alt=&#34;Private API Request Flow&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to run this project?&lt;/h3&gt; &#xA;&lt;p&gt;We can run this Go Backend Clean Architecture project with or without Docker. Here, I am providing both ways to run this project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone this project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Move to your workspace&#xA;$ cd your-workspace&#xA;&#xA;# Clone this project into your workspace&#xA;$ git clone https://github.com/amitshekhariitbhu/go-backend-clean-architecture.git&#xA;&#xA;# Move to the project root directory&#xA;$ cd go-backend-clean-architecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Run without Docker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;.env&lt;/code&gt; similar to &lt;code&gt;.env.example&lt;/code&gt; at the root directory with your configuration.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;go&lt;/code&gt; if not installed on your machine.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;code&gt;MongoDB&lt;/code&gt; if not installed on your machine.&lt;/li&gt; &#xA; &lt;li&gt;Important: Change the &lt;code&gt;DB_HOST&lt;/code&gt; to &lt;code&gt;localhost&lt;/code&gt; (&lt;code&gt;DB_HOST=localhost&lt;/code&gt;) in &lt;code&gt;.env&lt;/code&gt; configuration file. &lt;code&gt;DB_HOST=mongodb&lt;/code&gt; is needed only when you run with Docker.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;go run cmd/main.go&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access API using &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Run with Docker&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a file &lt;code&gt;.env&lt;/code&gt; similar to &lt;code&gt;.env.example&lt;/code&gt; at the root directory with your configuration.&lt;/li&gt; &#xA; &lt;li&gt;Install Docker and Docker Compose.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker-compose up -d&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Access API using &lt;code&gt;http://localhost:8080&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to run the test?&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run all tests&#xA;go test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to generate the mock code?&lt;/h3&gt; &#xA;&lt;p&gt;In this project, to test, we need to generate mock code for the use-case, repository, and database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Generate mock code for the usecase and repository&#xA;mockery --dir=domain --output=domain/mocks --outpkg=mocks --all&#xA;&#xA;# Generate mock code for the database&#xA;mockery --dir=mongo --output=mongo/mocks --outpkg=mocks --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Whenever you make changes in the interfaces of these use-cases, repositories, or databases, you need to run the corresponding command to regenerate the mock code for testing.&lt;/p&gt; &#xA;&lt;h3&gt;The Complete Project Folder Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;‚îú‚îÄ‚îÄ Dockerfile&#xA;‚îú‚îÄ‚îÄ api&#xA;‚îÇ   ‚îú‚îÄ‚îÄ controller&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login_controller.go&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile_controller.go&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ profile_controller_test.go&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ refresh_token_controller.go&#xA;‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ signup_controller.go&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ task_controller.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ middleware&#xA;‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ jwt_auth_middleware.go&#xA;‚îÇ   ‚îî‚îÄ‚îÄ route&#xA;‚îÇ       ‚îî‚îÄ‚îÄ v1&#xA;‚îÇ           ‚îú‚îÄ‚îÄ login_route.go&#xA;‚îÇ           ‚îú‚îÄ‚îÄ profile_route.go&#xA;‚îÇ           ‚îú‚îÄ‚îÄ refresh_token_route.go&#xA;‚îÇ           ‚îú‚îÄ‚îÄ route.go&#xA;‚îÇ           ‚îú‚îÄ‚îÄ signup_route.go&#xA;‚îÇ           ‚îî‚îÄ‚îÄ task_route.go&#xA;‚îú‚îÄ‚îÄ bootstrap&#xA;‚îÇ   ‚îú‚îÄ‚îÄ app.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ database.go&#xA;‚îÇ   ‚îî‚îÄ‚îÄ env.go&#xA;‚îú‚îÄ‚îÄ cmd&#xA;‚îÇ   ‚îî‚îÄ‚îÄ main.go&#xA;‚îú‚îÄ‚îÄ docker-compose.yaml&#xA;‚îú‚îÄ‚îÄ domain&#xA;‚îÇ   ‚îú‚îÄ‚îÄ error_response.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ jwt_custom.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ login.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ profile.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ refresh_token.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ signup.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ success_response.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ task.go&#xA;‚îÇ   ‚îî‚îÄ‚îÄ user.go&#xA;‚îú‚îÄ‚îÄ go.mod&#xA;‚îú‚îÄ‚îÄ go.sum&#xA;‚îú‚îÄ‚îÄ internal&#xA;‚îÇ   ‚îî‚îÄ‚îÄ tokenutil&#xA;‚îÇ       ‚îî‚îÄ‚îÄ tokenutil.go&#xA;‚îú‚îÄ‚îÄ mongo&#xA;‚îÇ   ‚îî‚îÄ‚îÄ mongo.go&#xA;‚îú‚îÄ‚îÄ repository&#xA;‚îÇ   ‚îú‚îÄ‚îÄ task_repository.go&#xA;‚îÇ   ‚îú‚îÄ‚îÄ user_repository.go&#xA;‚îÇ   ‚îî‚îÄ‚îÄ user_repository_test.go&#xA;‚îî‚îÄ‚îÄ usecase&#xA;    ‚îú‚îÄ‚îÄ login_usecase.go&#xA;    ‚îú‚îÄ‚îÄ profile_usecase.go&#xA;    ‚îú‚îÄ‚îÄ refresh_token_usecase.go&#xA;    ‚îú‚îÄ‚îÄ signup_usecase.go&#xA;    ‚îú‚îÄ‚îÄ task_usecase.go&#xA;    ‚îî‚îÄ‚îÄ task_usecase_test.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API documentation of Go Backend Clean Architecture&lt;/h3&gt; &#xA;&lt;a href=&#34;https://documenter.getpostman.com/view/391588/2s8Z75S9xy&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;View API Doc Button&#34; src=&#34;https://github.com/amitshekhariitbhu/go-backend-clean-architecture/raw/main/assets/button-view-api-docs.png?raw=true&#34; width=&#34;200&#34; height=&#34;60&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Example API Request and Response&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;signup&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request POST &#39;http://localhost:8080/v1/signup&#39; \&#xA;--data-urlencode &#39;email=test@gmail.com&#39; \&#xA;--data-urlencode &#39;password=test&#39; \&#xA;--data-urlencode &#39;name=Test Name&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;accessToken&#34;: &#34;access_token&#34;,&#xA;  &#34;refreshToken&#34;: &#34;refresh_token&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;login&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request POST &#39;http://localhost:8080/v1/login&#39; \&#xA;--data-urlencode &#39;email=test@gmail.com&#39; \&#xA;--data-urlencode &#39;password=test&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;accessToken&#34;: &#34;access_token&#34;,&#xA;  &#34;refreshToken&#34;: &#34;refresh_token&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;profile&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request GET &#39;http://localhost:8080/v1/profile&#39; \&#xA;--header &#39;Authorization: Bearer access_token&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;Test Name&#34;,&#xA;  &#34;email&#34;: &#34;test@gmail.com&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;task create&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request POST &#39;http://localhost:8080/v1/task&#39; \&#xA;--header &#39;Authorization: Bearer access_token&#39; \&#xA;--header &#39;Content-Type: application/x-www-form-urlencoded&#39; \&#xA;--data-urlencode &#39;title=Test Task&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;message&#34;: &#34;Task created successfully&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;task fetch&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request GET &#39;http://localhost:8080/v1/task&#39; \&#xA;--header &#39;Authorization: Bearer access_token&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;[&#xA;  {&#xA;    &#34;title&#34;: &#34;Test Task&#34;&#xA;  },&#xA;  {&#xA;    &#34;title&#34;: &#34;Test Another Task&#34;&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;refresh token&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code&gt;curl --location --request POST &#39;http://localhost:8080/v1/refresh&#39; \&#xA;--header &#39;Content-Type: application/x-www-form-urlencoded&#39; \&#xA;--data-urlencode &#39;refreshToken=refresh_token&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;accessToken&#34;: &#34;access_token&#34;,&#xA;  &#34;refreshToken&#34;: &#34;refresh_token&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improvement based on feedback.&lt;/li&gt; &#xA; &lt;li&gt;Add more test cases.&lt;/li&gt; &#xA; &lt;li&gt;Always try to update with the latest version of the packages used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;If this project helps you in anyway, show your love &lt;span&gt;‚ù§Ô∏è&lt;/span&gt; by putting a &lt;span&gt;‚≠ê&lt;/span&gt; on this project &lt;span&gt;‚úå&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;   Copyright (C) 2023 Amit Shekhar&#xA;&#xA;   Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;   you may not use this file except in compliance with the License.&#xA;   You may obtain a copy of the License at&#xA;&#xA;       http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;   Unless required by applicable law or agreed to in writing, software&#xA;   distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;   See the License for the specific language governing permissions and&#xA;   limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributing to Go Backend Clean Architecture&lt;/h3&gt; &#xA;&lt;p&gt;All pull requests are welcome.&lt;/p&gt;</summary>
  </entry>
</feed>