<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-24T01:37:48Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aquasecurity/tfsec</title>
    <updated>2022-08-24T01:37:48Z</updated>
    <id>tag:github.com,2022-08-24:/aquasecurity/tfsec</id>
    <link href="https://github.com/aquasecurity/tfsec" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Security scanner for your Terraform code&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;354&#34; src=&#34;https://raw.githubusercontent.com/aquasecurity/tfsec/master/.github/images/tfsec_worded.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/aquasecurity/tfsec&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/aquasecurity/tfsec&#34; alt=&#34;GoReportCard&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.aquasec.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Join-green&#34; alt=&#34;Join Our Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/tfsec/tfsec&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/tfsec/tfsec?label=docker&#34; alt=&#34;Docker Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/tfsec&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json.svg?url=https://formulae.brew.sh/api/formula/tfsec.json&amp;amp;query=$.versions.stable&amp;amp;label=homebrew&#34; alt=&#34;Homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chocolatey.org/packages/tfsec&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/v/tfsec&#34; alt=&#34;Chocolatey&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/tfsec-bin&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/tfsec-bin&#34; alt=&#34;AUR version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=tfsec.tfsec&#34;&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/v/tfsec.tfsec?label=vscode&#34; alt=&#34;VScode Extension&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;tfsec uses static analysis of your terraform code to spot potential misconfigurations.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;‚òÅ&lt;/span&gt; Checks for misconfigurations across all major (and some minor) cloud providers&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚õî&lt;/span&gt; Hundreds of built-in rules&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;ü™Ü&lt;/span&gt; Scans modules (local and remote)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚ûï&lt;/span&gt; Evaluates HCL expressions as well as literal values&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚Ü™&lt;/span&gt; Evaluates Terraform functions e.g. &lt;code&gt;concat()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üîó&lt;/span&gt; Evaluates relationships between Terraform resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üß∞&lt;/span&gt; Compatible with the Terraform CDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üôÖ&lt;/span&gt; Applies (and embellishes) user-defined Rego policies&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üìÉ&lt;/span&gt; Supports multiple output formats: lovely (default), JSON, SARIF, CSV, CheckStyle, JUnit, text, Gif.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üõ†&lt;/span&gt; Configurable (via CLI flags and/or config file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;‚ö°&lt;/span&gt; Very fast, capable of quickly scanning huge repositories&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üîå&lt;/span&gt; Plugins for popular IDEs available (&lt;a href=&#34;https://plugins.jetbrains.com/plugin/18687-tfsec-findings-explorer&#34;&gt;JetBrains&lt;/a&gt;, &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=tfsec.tfsec&#34;&gt;VSCode&lt;/a&gt; and &lt;a href=&#34;https://github.com/aquasecurity/vim-tfsec&#34;&gt;Vim&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;üè°&lt;/span&gt; Community-driven - come and chat with us &lt;a href=&#34;https://slack.aquasec.com/&#34;&gt;on Slack&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recommended by Thoughtworks&lt;/h2&gt; &#xA;&lt;p&gt;Rated &lt;em&gt;Adopt&lt;/em&gt; by the &lt;a href=&#34;https://www.thoughtworks.com/en-gb/radar/tools/tfsec&#34;&gt;Thoughtworks Tech Radar&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For our projects using Terraform, tfsec has quickly become a default static analysis tool to detect potential security risks. It&#39;s easy to integrate into a CI pipeline and has a growing library of checks against all of the major cloud providers and platforms like Kubernetes. Given its ease of use, we believe tfsec could be a good addition to any Terraform project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Example Output&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aquasecurity/tfsec/master/screenshot.png&#34; alt=&#34;Example screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://brew.sh&#34;&gt;brew/linuxbrew&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install tfsec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;choco install tfsec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;scoop install tfsec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bash script (Linux):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also grab the binary for your system from the &lt;a href=&#34;https://github.com/aquasecurity/tfsec/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, install with Go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/aquasecurity/tfsec/cmd/tfsec@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that using &lt;code&gt;go install&lt;/code&gt; will install directly from the &lt;code&gt;master&lt;/code&gt; branch and version numbers will not be reported via &lt;code&gt;tfsec --version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Signing&lt;/h3&gt; &#xA;&lt;p&gt;The binaries on the &lt;a href=&#34;https://github.com/aquasecurity/tfsec/releases&#34;&gt;releases page&lt;/a&gt; are signed with the tfsec signing key &lt;code&gt;D66B222A3EA4C25D5D1A097FC34ACEFB46EC39CE&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Form more information check the &lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/tfsec/master/SIGNING.md&#34;&gt;signing page&lt;/a&gt; for instructions on verification.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;tfsec will scan the specified directory. If no directory is specified, the current working directory will be used.&lt;/p&gt; &#xA;&lt;p&gt;The exit status will be non-zero if tfsec finds problems, otherwise the exit status will be zero.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tfsec .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use with Docker&lt;/h2&gt; &#xA;&lt;p&gt;As an alternative to installing and running tfsec on your system, you may run tfsec in a Docker container.&lt;/p&gt; &#xA;&lt;p&gt;There are a number of Docker options available&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Image Name&lt;/th&gt; &#xA;   &lt;th&gt;Base&lt;/th&gt; &#xA;   &lt;th&gt;Comment&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/aquasec/tfsec&#34;&gt;aquasec/tfsec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine&lt;/td&gt; &#xA;   &lt;td&gt;Normal tfsec image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/aquasec/tfsec-alpine&#34;&gt;aquasec/tfsec-alpine&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine&lt;/td&gt; &#xA;   &lt;td&gt;Exactly the same as aquasec/tfsec, but for those whole like to be explicit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/aquasec/tfsec-ci&#34;&gt;aquasec/tfsec-ci&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;alpine&lt;/td&gt; &#xA;   &lt;td&gt;tfsec with no entrypoint - useful for CI builds where you want to override the command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hub.docker.com/r/aquasec/tfsec-scratch&#34;&gt;aquasec/tfsec-scratch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;scratch&lt;/td&gt; &#xA;   &lt;td&gt;An image built on scratch - nothing frilly, just runs tfsec&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -v &#34;$(pwd):/src&#34; aquasec/tfsec /src&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use with Visual Studio Code&lt;/h2&gt; &#xA;&lt;p&gt;A Visual Studio Code extension is being developed to integrate with tfsec results. More information can be found on the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=tfsec.tfsec&#34;&gt;tfsec Marketplace page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use as GitHub Action&lt;/h2&gt; &#xA;&lt;p&gt;If you want to run tfsec on your repository as a GitHub Action, you can use &lt;a href=&#34;https://github.com/aquasecurity/tfsec-pr-commenter-action&#34;&gt;https://github.com/aquasecurity/tfsec-pr-commenter-action&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Use as an Azure DevOps Pipelines Task&lt;/h2&gt; &#xA;&lt;p&gt;You can now install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=AquaSecurityOfficial.tfsec-official&#34;&gt;official tfsec task&lt;/a&gt;. Please raise any issues/feature requests on the &lt;a href=&#34;https://github.com/aquasecurity/tfsec-azure-pipelines-task&#34;&gt;task repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring Warnings&lt;/h2&gt; &#xA;&lt;p&gt;You may wish to ignore some warnings. If you&#39;d like to do so, you can simply add a comment containing &lt;code&gt;tfsec:ignore:&amp;lt;rule&amp;gt;&lt;/code&gt; to the offending line in your templates. Alternatively, you can add the comment to the line above the block containing the issue, or to the module block to ignore all occurrences of an issue inside the module.&lt;/p&gt; &#xA;&lt;p&gt;For example, to ignore an open security group rule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terraform&#34;&gt;resource &#34;aws_security_group_rule&#34; &#34;my-rule&#34; {&#xA;    type = &#34;ingress&#34;&#xA;    cidr_blocks = [&#34;0.0.0.0/0&#34;] #tfsec:ignore:aws-vpc-no-public-ingress-sgr&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terraform&#34;&gt;resource &#34;aws_security_group_rule&#34; &#34;my-rule&#34; {&#xA;    type = &#34;ingress&#34;&#xA;    #tfsec:ignore:aws-vpc-no-public-ingress-sgr&#xA;    cidr_blocks = [&#34;0.0.0.0/0&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not sure which line to add the comment on, just check the tfsec output for the line number of the discovered problem.&lt;/p&gt; &#xA;&lt;p&gt;You can ignore multiple rules by concatenating the rules on a single line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-terraform&#34;&gt;#tfsec:ignore:aws-s3-enable-bucket-encryption tfsec:ignore:aws-s3-enable-bucket-logging&#xA;resource &#34;aws_s3_bucket&#34; &#34;my-bucket&#34; {&#xA;  bucket = &#34;foobar&#34;&#xA;  acl    = &#34;private&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expiration Date&lt;/h3&gt; &#xA;&lt;p&gt;You can set expiration date for &lt;code&gt;ignore&lt;/code&gt; with &lt;code&gt;yyyy-mm-dd&lt;/code&gt; format. This is a useful feature when you want to ensure ignored issue won&#39;t be forgotten and should be revisited in the future.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#tfsec:ignore:aws-s3-enable-bucket-encryption:exp:2025-01-02&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ignore like this will be active only till &lt;code&gt;2025-01-02&lt;/code&gt;, after this date it will be deactivated.&lt;/p&gt; &#xA;&lt;h2&gt;Disable checks&lt;/h2&gt; &#xA;&lt;p&gt;You may wish to exclude some checks from running. If you&#39;d like to do so, you can simply add new argument &lt;code&gt;-e check1,check2,etc&lt;/code&gt; to your cmd command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tfsec . -e general-secrets-sensitive-in-variable,google-compute-disk-encryption-customer-keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Including values from .tfvars&lt;/h2&gt; &#xA;&lt;p&gt;You can include values from a tfvars file in the scan, using, for example: &lt;code&gt;--tfvars-file terraform.tfvars&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Included Checks&lt;/h2&gt; &#xA;&lt;p&gt;tfsec supports many popular cloud and platform providers&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Checks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/aws/&#34;&gt;AWS Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/azure/&#34;&gt;Azure Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/google/&#34;&gt;GCP Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/cloudstack/&#34;&gt;CloudStack Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/digitalocean/&#34;&gt;DigitalOcean Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/github/&#34;&gt;GitHub Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/kubernetes/&#34;&gt;Kubernetes Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/openstack/&#34;&gt;OpenStack Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://aquasecurity.github.io/tfsec/latest/checks/oracle/&#34;&gt;Oracle Checks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Running in CI&lt;/h2&gt; &#xA;&lt;p&gt;tfsec is designed for running in a CI pipeline. You may wish to run tfsec as part of your build without coloured output. You can do this using &lt;code&gt;--no-colour&lt;/code&gt; (or &lt;code&gt;--no-color&lt;/code&gt; for our American friends).&lt;/p&gt; &#xA;&lt;h2&gt;Output options&lt;/h2&gt; &#xA;&lt;p&gt;You can output tfsec results as JSON, CSV, Checkstyle, Sarif, JUnit or just plain old human-readable format. Use the &lt;code&gt;--format&lt;/code&gt; flag to specify your desired format.&lt;/p&gt; &#xA;&lt;h2&gt;GitHub Security Alerts&lt;/h2&gt; &#xA;&lt;p&gt;If you want to integrate with Github Security alerts and include the output of your tfsec checks you can use the &lt;a href=&#34;https://github.com/marketplace/actions/run-tfsec-with-sarif-upload&#34;&gt;tfsec-sarif-action&lt;/a&gt; Github action to run the static analysis then upload the results to the security alerts tab.&lt;/p&gt; &#xA;&lt;p&gt;The alerts generated for &lt;a href=&#34;https://github.com/tfsec/tfsec-example-project&#34;&gt;tfsec-example-project&lt;/a&gt; look like this.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aquasecurity/tfsec/master/codescanning.png&#34; alt=&#34;github security alerts&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you click through the alerts for the branch, you get more information about the actual issue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aquasecurity/tfsec/master/scanningalert.png&#34; alt=&#34;github security alerts&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information about adding security alerts, check &lt;a href=&#34;https://docs.github.com/en/code-security/repository-security-advisories/about-github-security-advisories-for-repositories&#34;&gt;the GitHub documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support for older terraform versions&lt;/h2&gt; &#xA;&lt;p&gt;If you need to support versions of terraform which use HCL v1 (terraform &amp;lt;0.12), you can use &lt;code&gt;v0.1.3&lt;/code&gt; of tfsec, though support is very limited and has fewer checks.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We always welcome contributions; big or small, it can be documentation updates, adding new checks or something bigger. Please check the &lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/tfsec/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; for details on how to help out.&lt;/p&gt; &#xA;&lt;h3&gt;Some People who have contributed&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/aquasecurity/tfsec/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=aquasecurity/tfsec&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contributors-img&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;tfsec&lt;/code&gt; is an &lt;a href=&#34;https://aquasec.com&#34;&gt;Aqua Security&lt;/a&gt; open source project. Learn about our open source work and portfolio &lt;a href=&#34;https://www.aquasec.com/products/open-source-projects/&#34;&gt;here&lt;/a&gt;. Join the community, and talk to us about any matter in &lt;a href=&#34;https://github.com/aquasecurity/tfsec/discussions&#34;&gt;GitHub Discussion&lt;/a&gt; or &lt;a href=&#34;https://slack.aquasec.com&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>imroc/req</title>
    <updated>2022-08-24T01:37:48Z</updated>
    <id>tag:github.com,2022-08-24:/imroc/req</id>
    <link href="https://github.com/imroc/req" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Go HTTP client with Black Magic&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;req&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://req.cool/images/req.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;Simple Go HTTP client with Black Magic&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/imroc/req/actions/workflows/ci.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/imroc/req/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/imroc/req/v3&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/imroc/req/v3&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/imroc/req/v3&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/imroc/req/v3.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/imroc/req/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/imroc/req.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/imroc/req/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/imroc/req?display_name=tag&amp;amp;sort=semver&#34; alt=&#34;GitHub Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Go&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation is available on the official website: &lt;a href=&#34;https://req.cool&#34;&gt;https://req.cool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;Features&#34;&gt;Features&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple and Powerful&lt;/strong&gt;: Simple and easy to use, providing rich client-level and request-level settings, all of which are intuitive and chainable methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy Debugging&lt;/strong&gt;: Powerful and convenient debug utilities, including debug logs, performance traces, and even dump the complete request and response content (see &lt;a href=&#34;https://req.cool/docs/tutorial/debugging/&#34;&gt;Debugging&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy API Testing&lt;/strong&gt;: API testing can be done with minimal code, no need to explicitly create any Request or Client, or even to handle errors (See &lt;a href=&#34;https://req.cool/docs/tutorial/quick-test/&#34;&gt;Quick HTTP Test&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Smart by Default&lt;/strong&gt;: Detect and decode to utf-8 automatically if possible to avoid garbled characters (See &lt;a href=&#34;https://req.cool/docs/tutorial/auto-decode/&#34;&gt;Auto Decode&lt;/a&gt;), marshal request body and unmarshal response body automatically according to the Content-Type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support Multiple HTTP Versions&lt;/strong&gt;: Support &lt;code&gt;HTTP/1.1&lt;/code&gt;, &lt;code&gt;HTTP/2&lt;/code&gt;, and &lt;code&gt;HTTP/3&lt;/code&gt;, and can automatically detect the server side and select the optimal HTTP version for requests, you can also force the protocol if you want (See &lt;a href=&#34;https://req.cool/docs/tutorial/force-http-version/&#34;&gt;Force HTTP version&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support Retry&lt;/strong&gt;: Support automatic request retry and is fully customizable (See &lt;a href=&#34;https://req.cool/docs/tutorial/retry/&#34;&gt;Retry&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy Download and Upload&lt;/strong&gt;: You can download and upload files with simple request settings, and even set a callback to show real-time progress (See &lt;a href=&#34;https://req.cool/docs/tutorial/download/&#34;&gt;Download&lt;/a&gt; and &lt;a href=&#34;https://req.cool/docs/tutorial/upload/&#34;&gt;Upload&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exportable&lt;/strong&gt;: &lt;code&gt;req.Transport&lt;/code&gt; is exportable. Compared with &lt;code&gt;http.Transport&lt;/code&gt;, it also supports HTTP3, dump content, middleware, etc. It can directly replace the Transport of &lt;code&gt;http.Client&lt;/code&gt; in existing projects, and obtain more powerful functions with minimal code change.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt;: Support Middleware for Request, Response, Client and Transport (See &lt;a href=&#34;https://req.cool/docs/tutorial/middleware-for-request-and-response/&#34;&gt;Request and Response Middleware&lt;/a&gt;) and &lt;a href=&#34;https://req.cool/docs/tutorial/middleware-for-client-and-transport/&#34;&gt;Client and Transport Middleware&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;Get-Started&#34;&gt;Get Started&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You first need &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; installed (version 1.16+ is required), then you can use the below Go command to install req:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/imroc/req/v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Import&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Import req to your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/imroc/req/v3&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Basic Usage&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// For testing, you can create and send a request with the global wrapper methods&#xA;// that use the default client behind the scenes to initiate the request (you can&#xA;// just treat package name `req` as a Client or Request, no need to create any client&#xA;// or Request explicitly).&#xA;req.DevMode() //  Use Client.DevMode to see all details, try and surprise :)&#xA;req.Get(&#34;https://httpbin.org/get&#34;) // Use Request.Get to send a GET request.&#xA;&#xA;// In production, create a client explicitly and reuse it to send all requests&#xA;client := req.C(). // Use C() to create a client and set with chainable client settings.&#xA;    SetUserAgent(&#34;my-custom-client&#34;).&#xA;    SetTimeout(5 * time.Second).&#xA;    DevMode()&#xA;resp, err := client.R(). // Use R() to create a request and set with chainable request settings.&#xA;    SetHeader(&#34;Accept&#34;, &#34;application/vnd.github.v3+json&#34;).&#xA;    SetPathParam(&#34;username&#34;, &#34;imroc&#34;).&#xA;    SetQueryParam(&#34;page&#34;, &#34;1&#34;).&#xA;    SetResult(&amp;amp;result). // Unmarshal response into struct automatically if status code &amp;gt;= 200 and &amp;lt;= 299.&#xA;    SetError(&amp;amp;errMsg). // Unmarshal response into struct automatically if status code &amp;gt;= 400.&#xA;    EnableDump(). // Enable dump at request level to help troubleshoot, log content only when an unexpected exception occurs.&#xA;    Get(&#34;https://api.github.com/users/{username}/repos&#34;)&#xA;if err != nil {&#xA;    // Handle error.&#xA;    // ...&#xA;    return&#xA;}&#xA;if resp.IsSuccess() {&#xA;    // Handle result.&#xA;    // ...&#xA;    return&#xA;}&#xA;if resp.IsError() {&#xA;    // Handle errMsg.&#x9;&#xA;    // ...&#xA;    return&#xA;}&#xA;// Handle unexpected response (corner case).&#xA;err = fmt.Errorf(&#34;got unexpected response, raw dump:\n%s&#34;, resp.Dump())&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use another style if you want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;resp := client.Get(&#34;https://api.github.com/users/{username}/repos&#34;). // Create a GET request with specified URL.&#xA;    SetHeader(&#34;Accept&#34;, &#34;application/vnd.github.v3+json&#34;).&#xA;    SetPathParam(&#34;username&#34;, &#34;imroc&#34;).&#xA;    SetQueryParam(&#34;page&#34;, &#34;1&#34;).&#xA;    SetResult(&amp;amp;result).&#xA;    SetError(&amp;amp;errMsg).&#xA;    EnableDump().&#xA;    Do() // Send request with Do.&#xA;&#xA;if resp.Err != nil {&#xA;    // ...&#xA;}&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Videos&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following is a series of video tutorials for req:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Dy8iph8JWw0&amp;amp;list=PLnW6i9cc0XqlhUgOJJp5Yf1FHXlANYMhF&amp;amp;index=2&#34;&gt;Youtube Play List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV14t4y1J7cm&#34;&gt;BiliBili Êí≠ÊîæÂàóË°®&lt;/a&gt; (Chinese)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;More&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check more introduction, tutorials, examples, best practices and API references on the &lt;a href=&#34;https://req.cool/&#34;&gt;official website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have a bug report or feature request, you can &lt;a href=&#34;https://github.com/imroc/req/issues/new&#34;&gt;open an issue&lt;/a&gt;, and &lt;a href=&#34;https://github.com/imroc/req/pulls&#34;&gt;pull requests&lt;/a&gt; are also welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions, feel free to reach out to us in the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imroc/req/discussions&#34;&gt;Github Discussion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://imroc-req.slack.com/archives/C03UFPGSNC8&#34;&gt;Slack&lt;/a&gt; | &lt;a href=&#34;https://slack.req.cool/&#34;&gt;Join&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;QQ Group (Chinese): 621411351 - &lt;a href=&#34;https://qm.qq.com/cgi-bin/qm/qr?k=P8vOMuNytG-hhtPlgijwW6orJV765OAO&amp;amp;jump_from=webapi&#34;&gt;&lt;img src=&#34;https://pub.idqqimg.com/wpa/images/group.png&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;License&#34;&gt;License&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Req&lt;/code&gt; released under MIT license, refer &lt;a href=&#34;https://raw.githubusercontent.com/imroc/req/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elastic/go-elasticsearch</title>
    <updated>2022-08-24T01:37:48Z</updated>
    <id>tag:github.com,2022-08-24:/elastic/go-elasticsearch</id>
    <link href="https://github.com/elastic/go-elasticsearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official Go client for Elasticsearch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go-elasticsearch&lt;/h1&gt; &#xA;&lt;p&gt;The official Go client for &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/elastic/go-elasticsearch/v8&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/elastic/go-elasticsearch?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/elastic/go-elasticsearch&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/elastic/go-elasticsearch&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/elastic/go-elasticsearch?branch=main&#34;&gt;&lt;img src=&#34;https://codecov.io/github/elastic/go-elasticsearch/coverage.svg?branch=main&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elastic/go-elasticsearch/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/elastic/go-elasticsearch/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elastic/go-elasticsearch/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/elastic/go-elasticsearch/workflows/Unit/badge.svg?sanitize=true&#34; alt=&#34;Unit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elastic/go-elasticsearch/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/elastic/go-elasticsearch/workflows/Integration/badge.svg?sanitize=true&#34; alt=&#34;Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elastic/go-elasticsearch/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/elastic/go-elasticsearch/workflows/API/badge.svg?sanitize=true&#34; alt=&#34;API&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Language clients are forward compatible; meaning that clients support communicating with greater or equal minor versions of Elasticsearch. Elasticsearch language clients are only backwards compatible with default distributions and without guarantees made.&lt;/p&gt; &#xA;&lt;p&gt;When using Go modules, include the version in the import path, and specify either an explicit version or a branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require github.com/elastic/go-elasticsearch/v8 v8.0.0&#xA;require github.com/elastic/go-elasticsearch/v7 7.17&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s possible to use multiple versions of the client in a single project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// go.mod&#xA;github.com/elastic/go-elasticsearch/v7 v7.17.0&#xA;github.com/elastic/go-elasticsearch/v8 v8.0.0&#xA;&#xA;// main.go&#xA;import (&#xA;  elasticsearch7 &#34;github.com/elastic/go-elasticsearch/v7&#34;&#xA;  elasticsearch8 &#34;github.com/elastic/go-elasticsearch/v8&#34;&#xA;)&#xA;// ...&#xA;es7, _ := elasticsearch7.NewDefaultClient()&#xA;es8, _ := elasticsearch8.NewDefaultClient()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;main&lt;/code&gt; branch of the client is compatible with the current &lt;code&gt;master&lt;/code&gt; branch of Elasticsearch.&lt;/p&gt; &#xA;&lt;!-- ----------------------------------------------------------------------------------------------- --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add the package to your &lt;code&gt;go.mod&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require github.com/elastic/go-elasticsearch/v8 main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --branch main https://github.com/elastic/go-elasticsearch.git $GOPATH/src/github.com/elastic/go-elasticsearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A complete example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir my-elasticsearch-app &amp;amp;&amp;amp; cd my-elasticsearch-app&#xA;&#xA;cat &amp;gt; go.mod &amp;lt;&amp;lt;-END&#xA;  module my-elasticsearch-app&#xA;&#xA;  require github.com/elastic/go-elasticsearch/v8 main&#xA;END&#xA;&#xA;cat &amp;gt; main.go &amp;lt;&amp;lt;-END&#xA;  package main&#xA;&#xA;  import (&#xA;    &#34;log&#34;&#xA;&#xA;    &#34;github.com/elastic/go-elasticsearch/v8&#34;&#xA;  )&#xA;&#xA;  func main() {&#xA;    es, _ := elasticsearch.NewDefaultClient()&#xA;    log.Println(elasticsearch.Version)&#xA;    log.Println(es.Info())&#xA;  }&#xA;END&#xA;&#xA;go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- ----------------------------------------------------------------------------------------------- --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;elasticsearch&lt;/code&gt; package ties together two separate packages for calling the Elasticsearch APIs and transferring data over HTTP: &lt;code&gt;esapi&lt;/code&gt; and &lt;code&gt;elastictransport&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;elasticsearch.NewDefaultClient()&lt;/code&gt; function to create the client with the default settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;es, err := elasticsearch.NewDefaultClient()&#xA;if err != nil {&#xA;  log.Fatalf(&#34;Error creating the client: %s&#34;, err)&#xA;}&#xA;&#xA;res, err := es.Info()&#xA;if err != nil {&#xA;  log.Fatalf(&#34;Error getting response: %s&#34;, err)&#xA;}&#xA;&#xA;defer res.Body.Close()&#xA;log.Println(res)&#xA;&#xA;// [200 OK] {&#xA;//   &#34;name&#34; : &#34;node-1&#34;,&#xA;//   &#34;cluster_name&#34; : &#34;go-elasticsearch&#34;&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: It is &lt;em&gt;critical&lt;/em&gt; to both close the response body &lt;em&gt;and&lt;/em&gt; to consume it, in order to re-use persistent TCP connections in the default HTTP transport. If you&#39;re not interested in the response body, call &lt;code&gt;io.Copy(ioutil.Discard, res.Body)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;When you export the &lt;code&gt;ELASTICSEARCH_URL&lt;/code&gt; environment variable, it will be used to set the cluster endpoint(s). Separate multiple addresses by a comma.&lt;/p&gt; &#xA;&lt;p&gt;To set the cluster endpoint(s) programmatically, pass a configuration object to the &lt;code&gt;elasticsearch.NewClient()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;cfg := elasticsearch.Config{&#xA;  Addresses: []string{&#xA;    &#34;https://localhost:9200&#34;,&#xA;    &#34;https://localhost:9201&#34;,&#xA;  },&#xA;  // ...&#xA;}&#xA;es, err := elasticsearch.NewClient(cfg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set the username and password, include them in the endpoint URL, or use the corresponding configuration options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;cfg := elasticsearch.Config{&#xA;  // ...&#xA;  Username: &#34;foo&#34;,&#xA;  Password: &#34;bar&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set a custom certificate authority used to sign the certificates of cluster nodes, use the &lt;code&gt;CACert&lt;/code&gt; configuration option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;cert, _ := ioutil.ReadFile(*cacert)&#xA;&#xA;cfg := elasticsearch.Config{&#xA;  // ...&#xA;  CACert: cert,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set a fingerprint to validate the HTTPS connectionm use the &lt;code&gt;CertificateFingerprint&lt;/code&gt; configuration option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;cfg := elasticsearch.Config{&#xA;&#x9;// ...&#xA;    CertificateFingerprint: fingerPrint,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To configure other HTTP settings, pass an &lt;a href=&#34;https://golang.org/pkg/net/http/#Transport&#34;&gt;&lt;code&gt;http.Transport&lt;/code&gt;&lt;/a&gt; object in the configuration object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;cfg := elasticsearch.Config{&#xA;  Transport: &amp;amp;http.Transport{&#xA;    MaxIdleConnsPerHost:   10,&#xA;    ResponseHeaderTimeout: time.Second,&#xA;    TLSClientConfig: &amp;amp;tls.Config{&#xA;      MinVersion: tls.VersionTLS12,&#xA;      // ...&#xA;    },&#xA;    // ...&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/go-elasticsearch/main/_examples/configuration.go&#34;&gt;&lt;code&gt;_examples/configuration.go&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/elastic/go-elasticsearch/main/_examples/customization.go&#34;&gt;&lt;code&gt;_examples/customization.go&lt;/code&gt;&lt;/a&gt; files for more examples of configuration and customization of the client. See the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/go-elasticsearch/main/_examples/security&#34;&gt;&lt;code&gt;_examples/security&lt;/code&gt;&lt;/a&gt; for an example of a security configuration.&lt;/p&gt; &#xA;&lt;p&gt;The following example demonstrates a more complex usage. It fetches the Elasticsearch version from the cluster, indexes a couple of documents concurrently, and prints the search results, using a lightweight wrapper around the response body.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;// $ go run _examples/main.go&#xA;&#xA;package main&#xA;&#xA;import (&#xA;  &#34;bytes&#34;&#xA;  &#34;context&#34;&#xA;  &#34;encoding/json&#34;&#xA;  &#34;log&#34;&#xA;  &#34;strconv&#34;&#xA;  &#34;strings&#34;&#xA;  &#34;sync&#34;&#xA;&#xA;  &#34;github.com/elastic/go-elasticsearch/v8&#34;&#xA;  &#34;github.com/elastic/go-elasticsearch/v8/esapi&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  log.SetFlags(0)&#xA;&#xA;  var (&#xA;    r  map[string]interface{}&#xA;    wg sync.WaitGroup&#xA;  )&#xA;&#xA;  // Initialize a client with the default settings.&#xA;  //&#xA;  // An `ELASTICSEARCH_URL` environment variable will be used when exported.&#xA;  //&#xA;  es, err := elasticsearch.NewDefaultClient()&#xA;  if err != nil {&#xA;    log.Fatalf(&#34;Error creating the client: %s&#34;, err)&#xA;  }&#xA;&#xA;  // 1. Get cluster info&#xA;  //&#xA;  res, err := es.Info()&#xA;  if err != nil {&#xA;    log.Fatalf(&#34;Error getting response: %s&#34;, err)&#xA;  }&#xA;  defer res.Body.Close()&#xA;  // Check response status&#xA;  if res.IsError() {&#xA;    log.Fatalf(&#34;Error: %s&#34;, res.String())&#xA;  }&#xA;  // Deserialize the response into a map.&#xA;  if err := json.NewDecoder(res.Body).Decode(&amp;amp;r); err != nil {&#xA;    log.Fatalf(&#34;Error parsing the response body: %s&#34;, err)&#xA;  }&#xA;  // Print client and server version numbers.&#xA;  log.Printf(&#34;Client: %s&#34;, elasticsearch.Version)&#xA;  log.Printf(&#34;Server: %s&#34;, r[&#34;version&#34;].(map[string]interface{})[&#34;number&#34;])&#xA;  log.Println(strings.Repeat(&#34;~&#34;, 37))&#xA;&#xA;  // 2. Index documents concurrently&#xA;  //&#xA;  for i, title := range []string{&#34;Test One&#34;, &#34;Test Two&#34;} {&#xA;    wg.Add(1)&#xA;&#xA;    go func(i int, title string) {&#xA;      defer wg.Done()&#xA;&#xA;      // Build the request body.      &#xA;      data, err := json.Marshal(struct{ Title string }{Title: title})&#xA;      if err != nil {&#xA;        log.Fatalf(&#34;Error marshaling document: %s&#34;, err)&#xA;      }&#xA;&#xA;      // Set up the request object.&#xA;      req := esapi.IndexRequest{&#xA;        Index:      &#34;test&#34;,&#xA;        DocumentID: strconv.Itoa(i + 1),&#xA;        Body:       bytes.NewReader(data),&#xA;        Refresh:    &#34;true&#34;,&#xA;      }&#xA;&#xA;      // Perform the request with the client.&#xA;      res, err := req.Do(context.Background(), es)&#xA;      if err != nil {&#xA;        log.Fatalf(&#34;Error getting response: %s&#34;, err)&#xA;      }&#xA;      defer res.Body.Close()&#xA;&#xA;      if res.IsError() {&#xA;        log.Printf(&#34;[%s] Error indexing document ID=%d&#34;, res.Status(), i+1)&#xA;      } else {&#xA;        // Deserialize the response into a map.&#xA;        var r map[string]interface{}&#xA;        if err := json.NewDecoder(res.Body).Decode(&amp;amp;r); err != nil {&#xA;          log.Printf(&#34;Error parsing the response body: %s&#34;, err)&#xA;        } else {&#xA;          // Print the response status and indexed document version.&#xA;          log.Printf(&#34;[%s] %s; version=%d&#34;, res.Status(), r[&#34;result&#34;], int(r[&#34;_version&#34;].(float64)))&#xA;        }&#xA;      }&#xA;    }(i, title)&#xA;  }&#xA;  wg.Wait()&#xA;&#xA;  log.Println(strings.Repeat(&#34;-&#34;, 37))&#xA;&#xA;  // 3. Search for the indexed documents&#xA;  //&#xA;  // Build the request body.&#xA;  var buf bytes.Buffer&#xA;  query := map[string]interface{}{&#xA;    &#34;query&#34;: map[string]interface{}{&#xA;      &#34;match&#34;: map[string]interface{}{&#xA;        &#34;title&#34;: &#34;test&#34;,&#xA;      },&#xA;    },&#xA;  }&#xA;  if err := json.NewEncoder(&amp;amp;buf).Encode(query); err != nil {&#xA;    log.Fatalf(&#34;Error encoding query: %s&#34;, err)&#xA;  }&#xA;&#xA;  // Perform the search request.&#xA;  res, err = es.Search(&#xA;    es.Search.WithContext(context.Background()),&#xA;    es.Search.WithIndex(&#34;test&#34;),&#xA;    es.Search.WithBody(&amp;amp;buf),&#xA;    es.Search.WithTrackTotalHits(true),&#xA;    es.Search.WithPretty(),&#xA;  )&#xA;  if err != nil {&#xA;    log.Fatalf(&#34;Error getting response: %s&#34;, err)&#xA;  }&#xA;  defer res.Body.Close()&#xA;&#xA;  if res.IsError() {&#xA;    var e map[string]interface{}&#xA;    if err := json.NewDecoder(res.Body).Decode(&amp;amp;e); err != nil {&#xA;      log.Fatalf(&#34;Error parsing the response body: %s&#34;, err)&#xA;    } else {&#xA;      // Print the response status and error information.&#xA;      log.Fatalf(&#34;[%s] %s: %s&#34;,&#xA;        res.Status(),&#xA;        e[&#34;error&#34;].(map[string]interface{})[&#34;type&#34;],&#xA;        e[&#34;error&#34;].(map[string]interface{})[&#34;reason&#34;],&#xA;      )&#xA;    }&#xA;  }&#xA;&#xA;  if err := json.NewDecoder(res.Body).Decode(&amp;amp;r); err != nil {&#xA;    log.Fatalf(&#34;Error parsing the response body: %s&#34;, err)&#xA;  }&#xA;  // Print the response status, number of results, and request duration.&#xA;  log.Printf(&#xA;    &#34;[%s] %d hits; took: %dms&#34;,&#xA;    res.Status(),&#xA;    int(r[&#34;hits&#34;].(map[string]interface{})[&#34;total&#34;].(map[string]interface{})[&#34;value&#34;].(float64)),&#xA;    int(r[&#34;took&#34;].(float64)),&#xA;  )&#xA;  // Print the ID and document source for each hit.&#xA;  for _, hit := range r[&#34;hits&#34;].(map[string]interface{})[&#34;hits&#34;].([]interface{}) {&#xA;    log.Printf(&#34; * ID=%s, %s&#34;, hit.(map[string]interface{})[&#34;_id&#34;], hit.(map[string]interface{})[&#34;_source&#34;])&#xA;  }&#xA;&#xA;  log.Println(strings.Repeat(&#34;=&#34;, 37))&#xA;}&#xA;&#xA;// Client: 8.0.0-SNAPSHOT&#xA;// Server: 8.0.0-SNAPSHOT&#xA;// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;// [201 Created] updated; version=1&#xA;// [201 Created] updated; version=1&#xA;// -------------------------------------&#xA;// [200 OK] 2 hits; took: 5ms&#xA;//  * ID=1, map[title:Test One]&#xA;//  * ID=2, map[title:Test Two]&#xA;// =====================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you see in the example above, the &lt;code&gt;esapi&lt;/code&gt; package allows to call the Elasticsearch APIs in two distinct ways: either by creating a struct, such as &lt;code&gt;IndexRequest&lt;/code&gt;, and calling its &lt;code&gt;Do()&lt;/code&gt; method by passing it a context and the client, or by calling the &lt;code&gt;Search()&lt;/code&gt; function on the client directly, using the option functions such as &lt;code&gt;WithIndex()&lt;/code&gt;. See more information and examples in the &lt;a href=&#34;https://godoc.org/github.com/elastic/go-elasticsearch/esapi&#34;&gt;package documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;elastictransport&lt;/code&gt; package handles the transfer of data to and from Elasticsearch, including retrying failed requests, keeping a connection pool, discovering cluster nodes and logging.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the client internals and usage in the following blog posts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/the-go-client-for-elasticsearch-introduction&#34;&gt;https://www.elastic.co/blog/the-go-client-for-elasticsearch-introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/the-go-client-for-elasticsearch-configuration-and-customization&#34;&gt;https://www.elastic.co/blog/the-go-client-for-elasticsearch-configuration-and-customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/blog/the-go-client-for-elasticsearch-working-with-data&#34;&gt;https://www.elastic.co/blog/the-go-client-for-elasticsearch-working-with-data&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ----------------------------------------------------------------------------------------------- --&gt; &#xA;&lt;h2&gt;Helpers&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;esutil&lt;/code&gt; package provides convenience helpers for working with the client. At the moment, it provides the &lt;code&gt;esutil.JSONReader()&lt;/code&gt; and the &lt;code&gt;esutil.BulkIndexer&lt;/code&gt; helpers.&lt;/p&gt; &#xA;&lt;!-- ----------------------------------------------------------------------------------------------- --&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elastic/go-elasticsearch/main/_examples&#34;&gt;&lt;code&gt;_examples&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt; folder contains a number of recipes and comprehensive examples to get you started with the client, including configuration and customization of the client, using a custom certificate authority (CA) for security (TLS), mocking the transport for unit tests, embedding the client in a custom type, building queries, performing requests individually and in bulk, and parsing the responses.&lt;/p&gt; &#xA;&lt;!-- ----------------------------------------------------------------------------------------------- --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/go-elasticsearch/main/LICENSE&#34;&gt;Apache 2 license&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/elastic/go-elasticsearch/main/NOTICE&#34;&gt;NOTICE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>