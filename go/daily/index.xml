<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-15T01:31:04Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uber-go/mock</title>
    <updated>2023-11-15T01:31:04Z</updated>
    <id>tag:github.com,2023-11-15:/uber-go/mock</id>
    <link href="https://github.com/uber-go/mock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GoMock is a mocking framework for the Go programming language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gomock&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uber-go/mock/actions&#34;&gt;&lt;img src=&#34;https://github.com/uber-go/mock/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/go.uber.org/mock&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/go.uber.org/mock.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;gomock is a mocking framework for the &lt;a href=&#34;http://go.dev/&#34;&gt;Go programming language&lt;/a&gt;. It integrates well with Go&#39;s built-in &lt;code&gt;testing&lt;/code&gt; package, but can be used in other contexts too.&lt;/p&gt; &#xA;&lt;p&gt;This project originates from Google&#39;s &lt;code&gt;golang/mock&lt;/code&gt; repo. Unfortunately, Google no longer maintains this project, and given the heavy usage of gomock project within Uber, we&#39;ve decided to fork and maintain this going forward at Uber.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uber-go/mock/main/CONTRIBUTING.md&#34;&gt;Contributions&lt;/a&gt; are welcome in the form of GitHub issue or PR!&lt;/p&gt; &#xA;&lt;h2&gt;Supported Go Versions&lt;/h2&gt; &#xA;&lt;p&gt;go.uber.org/mock supports all Go versions supported by the official &lt;a href=&#34;https://go.dev/doc/devel/release#policy&#34;&gt;Go Release Policy&lt;/a&gt;. That is, the two most recent releases of Go.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the &lt;code&gt;mockgen&lt;/code&gt; tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install go.uber.org/mock/mockgen@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running mockgen&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mockgen&lt;/code&gt; has two modes of operation: source and reflect.&lt;/p&gt; &#xA;&lt;h3&gt;Source mode&lt;/h3&gt; &#xA;&lt;p&gt;Source mode generates mock interfaces from a source file. It is enabled by using the -source flag. Other flags that may be useful in this mode are -imports and -aux_files.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mockgen -source=foo.go [other options]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reflect mode&lt;/h3&gt; &#xA;&lt;p&gt;Reflect mode generates mock interfaces by building a program that uses reflection to understand interfaces. It is enabled by passing two non-flag arguments: an import path, and a comma-separated list of symbols.&lt;/p&gt; &#xA;&lt;p&gt;You can use &#34;.&#34; to refer to the current path&#39;s package.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mockgen database/sql/driver Conn,Driver&#xA;&#xA;# Convenient for `go:generate`.&#xA;mockgen . Conn,Driver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Flags&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;mockgen&lt;/code&gt; command is used to generate source code for a mock class given a Go source file containing interfaces to be mocked. It supports the following flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-source&lt;/code&gt;: A file containing interfaces to be mocked.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-destination&lt;/code&gt;: A file to which to write the resulting source code. If you don&#39;t set this, the code is printed to standard output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-package&lt;/code&gt;: The package to use for the resulting mock class source code. If you don&#39;t set this, the package name is &lt;code&gt;mock_&lt;/code&gt; concatenated with the package of the input file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-imports&lt;/code&gt;: A list of explicit imports that should be used in the resulting source code, specified as a comma-separated list of elements of the form &lt;code&gt;foo=bar/baz&lt;/code&gt;, where &lt;code&gt;bar/baz&lt;/code&gt; is the package being imported and &lt;code&gt;foo&lt;/code&gt; is the identifier to use for the package in the generated source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-aux_files&lt;/code&gt;: A list of additional files that should be consulted to resolve e.g. embedded interfaces defined in a different file. This is specified as a comma-separated list of elements of the form &lt;code&gt;foo=bar/baz.go&lt;/code&gt;, where &lt;code&gt;bar/baz.go&lt;/code&gt; is the source file and &lt;code&gt;foo&lt;/code&gt; is the package name of that file used by the -source file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-build_flags&lt;/code&gt;: (reflect mode only) Flags passed verbatim to &lt;code&gt;go build&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-mock_names&lt;/code&gt;: A list of custom names for generated mocks. This is specified as a comma-separated list of elements of the form &lt;code&gt;Repository=MockSensorRepository,Endpoint=MockSensorEndpoint&lt;/code&gt;, where &lt;code&gt;Repository&lt;/code&gt; is the interface name and &lt;code&gt;MockSensorRepository&lt;/code&gt; is the desired mock name (mock factory method and mock recorder will be named after the mock). If one of the interfaces has no custom name specified, then default naming convention will be used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-self_package&lt;/code&gt;: The full package import path for the generated code. The purpose of this flag is to prevent import cycles in the generated code by trying to include its own package. This can happen if the mock&#39;s package is set to one of its inputs (usually the main one) and the output is stdio so mockgen cannot detect the final output package. Setting this flag will then tell mockgen which import to exclude.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-copyright_file&lt;/code&gt;: Copyright file used to add copyright header to the resulting source code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-debug_parser&lt;/code&gt;: Print out parser results only.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-exec_only&lt;/code&gt;: (reflect mode) If set, execute this reflection program.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-prog_only&lt;/code&gt;: (reflect mode) Only generate the reflection program; write it to stdout and exit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-write_package_comment&lt;/code&gt;: Writes package documentation comment (godoc) if true. (default true)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-write_generate_directive&lt;/code&gt;: Add //go:generate directive to regenerate the mock. (default false)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-write_source_comment&lt;/code&gt;: Writes original file (source mode) or interface names (reflect mode) comment if true. (default true)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-typed&lt;/code&gt;: Generate Type-safe &#39;Return&#39;, &#39;Do&#39;, &#39;DoAndReturn&#39; function. (default false)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For an example of the use of &lt;code&gt;mockgen&lt;/code&gt;, see the &lt;code&gt;sample/&lt;/code&gt; directory. In simple cases, you will need only the &lt;code&gt;-source&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h2&gt;Building Mocks&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Foo interface {&#xA;  Bar(x int) int&#xA;}&#xA;&#xA;func SUT(f Foo) {&#xA; // ...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TestFoo(t *testing.T) {&#xA;  ctrl := gomock.NewController(t)&#xA;&#xA;  m := NewMockFoo(ctrl)&#xA;&#xA;  // Asserts that the first and only call to Bar() is passed 99.&#xA;  // Anything else will fail.&#xA;  m.&#xA;    EXPECT().&#xA;    Bar(gomock.Eq(99)).&#xA;    Return(101)&#xA;&#xA;  SUT(m)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Stubs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Foo interface {&#xA;  Bar(x int) int&#xA;}&#xA;&#xA;func SUT(f Foo) {&#xA; // ...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TestFoo(t *testing.T) {&#xA;  ctrl := gomock.NewController(t)&#xA;&#xA;  m := NewMockFoo(ctrl)&#xA;&#xA;  // Does not make any assertions. Executes the anonymous functions and returns&#xA;  // its result when Bar is invoked with 99.&#xA;  m.&#xA;    EXPECT().&#xA;    Bar(gomock.Eq(99)).&#xA;    DoAndReturn(func(_ int) int {&#xA;      time.Sleep(1*time.Second)&#xA;      return 101&#xA;    }).&#xA;    AnyTimes()&#xA;&#xA;  // Does not make any assertions. Returns 103 when Bar is invoked with 101.&#xA;  m.&#xA;    EXPECT().&#xA;    Bar(gomock.Eq(101)).&#xA;    Return(103).&#xA;    AnyTimes()&#xA;&#xA;  SUT(m)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modifying Failure Messages&lt;/h2&gt; &#xA;&lt;p&gt;When a matcher reports a failure, it prints the received (&lt;code&gt;Got&lt;/code&gt;) vs the expected (&lt;code&gt;Want&lt;/code&gt;) value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Got: [3]&#xA;Want: is equal to 2&#xA;Expected call at user_test.go:33 doesn&#39;t match the argument at index 1.&#xA;Got: [0 1 1 2 3]&#xA;Want: is equal to 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modifying &lt;code&gt;Want&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Want&lt;/code&gt; value comes from the matcher&#39;s &lt;code&gt;String()&lt;/code&gt; method. If the matcher&#39;s default output doesn&#39;t meet your needs, then it can be modified as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;gomock.WantFormatter(&#xA;  gomock.StringerFunc(func() string { return &#34;is equal to fifteen&#34; }),&#xA;  gomock.Eq(15),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This modifies the &lt;code&gt;gomock.Eq(15)&lt;/code&gt; matcher&#39;s output for &lt;code&gt;Want:&lt;/code&gt; from &lt;code&gt;is equal to 15&lt;/code&gt; to &lt;code&gt;is equal to fifteen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Modifying &lt;code&gt;Got&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Got&lt;/code&gt; value comes from the object&#39;s &lt;code&gt;String()&lt;/code&gt; method if it is available. In some cases the output of an object is difficult to read (e.g., &lt;code&gt;[]byte&lt;/code&gt;) and it would be helpful for the test to print it differently. The following modifies how the &lt;code&gt;Got&lt;/code&gt; value is formatted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;gomock.GotFormatterAdapter(&#xA;  gomock.GotFormatterFunc(func(i any) string {&#xA;    // Leading 0s&#xA;    return fmt.Sprintf(&#34;%02d&#34;, i)&#xA;  }),&#xA;  gomock.Eq(15),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the received value is &lt;code&gt;3&lt;/code&gt;, then it will be printed as &lt;code&gt;03&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>casbin/casdoor</title>
    <updated>2023-11-15T01:31:04Z</updated>
    <id>tag:github.com,2023-11-15:/casbin/casdoor</id>
    <link href="https://github.com/casbin/casdoor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source UI-first Identity and Access Management (IAM) / Single-Sign-On (SSO) platform with web UI supporting OAuth 2.0, OIDC, SAML, CAS, LDAP, SCIM, WebAuthn, TOTP, MFA and RADIUS&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34; style=&#34;border-bottom: none;&#34;&gt;📦⚡️ Casdoor&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;An open-source UI-first Identity and Access Management (IAM) / Single-Sign-On (SSO) platform with web UI supporting OAuth 2.0, OIDC, SAML, CAS, LDAP, SCIM, WebAuthn, TOTP, MFA and RADIUS&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/casbin/casdoor/master/#badge&#34;&gt; &lt;img alt=&#34;semantic-release&#34; src=&#34;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/casbin/casdoor&#34;&gt; &lt;img alt=&#34;docker pull casbin/casdoor&#34; src=&#34;https://img.shields.io/docker/pulls/casbin/casdoor.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casdoor/casdoor/actions/workflows/build.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://github.com/casdoor/casdoor/workflows/Build/badge.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casdoor/casdoor/releases/latest&#34;&gt; &lt;img alt=&#34;GitHub Release&#34; src=&#34;https://img.shields.io/github/v/release/casdoor/casdoor.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/casbin/casdoor&#34;&gt; &lt;img alt=&#34;Docker Image Version (latest semver)&#34; src=&#34;https://img.shields.io/badge/Docker%20Hub-latest-brightgreen&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/casdoor/casdoor&#34;&gt; &lt;img alt=&#34;Go Report Card&#34; src=&#34;https://goreportcard.com/badge/github.com/casdoor/casdoor?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casdoor/casdoor/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/casdoor/casdoor?style=flat-square&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casdoor/casdoor/issues&#34;&gt; &lt;img alt=&#34;GitHub issues&#34; src=&#34;https://img.shields.io/github/issues/casdoor/casdoor?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/casbin/casdoor/master/#&#34;&gt; &lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/casdoor/casdoor?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casdoor/casdoor/network&#34;&gt; &lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/casdoor/casdoor?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/casdoor-site&#34;&gt; &lt;img alt=&#34;Crowdin&#34; src=&#34;https://badges.crowdin.net/casdoor-site/localized.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/5rPsrAzK7S&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1022748306096537660?style=flat-square&amp;amp;logo=discord&amp;amp;label=discord&amp;amp;color=5865F2&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Online demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read-only site: &lt;a href=&#34;https://door.casdoor.com&#34;&gt;https://door.casdoor.com&lt;/a&gt; (any modification operation will fail)&lt;/li&gt; &#xA; &lt;li&gt;Writable site: &lt;a href=&#34;https://demo.casdoor.com&#34;&gt;https://demo.casdoor.com&lt;/a&gt; (original data will be restored for every 5 minutes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://casdoor.org&#34;&gt;https://casdoor.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By source code: &lt;a href=&#34;https://casdoor.org/docs/basic/server-installation&#34;&gt;https://casdoor.org/docs/basic/server-installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;By Docker: &lt;a href=&#34;https://casdoor.org/docs/basic/try-with-docker&#34;&gt;https://casdoor.org/docs/basic/try-with-docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to connect to Casdoor?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://casdoor.org/docs/how-to-connect/overview&#34;&gt;https://casdoor.org/docs/how-to-connect/overview&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Casdoor Public API&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docs: &lt;a href=&#34;https://casdoor.org/docs/basic/public-api&#34;&gt;https://casdoor.org/docs/basic/public-api&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swagger: &lt;a href=&#34;https://door.casdoor.com/swagger&#34;&gt;https://door.casdoor.com/swagger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://casdoor.org/docs/category/integrations&#34;&gt;https://casdoor.org/docs/category/integrations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to contact?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/5rPsrAzK7S&#34;&gt;https://discord.gg/5rPsrAzK7S&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://forum.casbin.com&#34;&gt;https://forum.casbin.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Contact: &lt;a href=&#34;https://tawk.to/chat/623352fea34c2456412b8c51/1fuc7od6e&#34;&gt;https://tawk.to/chat/623352fea34c2456412b8c51/1fuc7od6e&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;For casdoor, if you have any questions, you can give Issues, or you can also directly start Pull Requests(but we recommend giving issues first to communicate with the community).&lt;/p&gt; &#xA;&lt;h3&gt;I18n translation&lt;/h3&gt; &#xA;&lt;p&gt;If you are contributing to casdoor, please note that we use &lt;a href=&#34;https://crowdin.com/project/casdoor-site&#34;&gt;Crowdin&lt;/a&gt; as translating platform and i18next as translating tool. When you add some words using i18next in the &lt;code&gt;web/&lt;/code&gt; directory, please remember to add what you have added to the &lt;code&gt;web/src/locales/en/data.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/casdoor/casdoor/raw/master/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rhysd/actionlint</title>
    <updated>2023-11-15T01:31:04Z</updated>
    <id>tag:github.com,2023-11-15:/rhysd/actionlint</id>
    <link href="https://github.com/rhysd/actionlint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static checker for GitHub Actions workflow files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;actionlint&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rhysd/actionlint/actions?query=workflow%3ACI+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/rhysd/actionlint/workflows/CI/badge.svg?branch=main&amp;amp;event=push&#34; alt=&#34;CI Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/rhysd/actionlint&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/rhysd/actionlint.svg?sanitize=true&#34; alt=&#34;API Document&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rhysd/actionlint&#34;&gt;actionlint&lt;/a&gt; is a static checker for GitHub Actions workflow files. &lt;a href=&#34;https://rhysd.github.io/actionlint/&#34;&gt;Try it online!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Syntax check for workflow files&lt;/strong&gt; to check unexpected or missing keys following &lt;a href=&#34;https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions&#34;&gt;workflow syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strong type check for &lt;code&gt;${{ }}&lt;/code&gt; expressions&lt;/strong&gt; to catch several semantic errors like access to not existing property, type mismatches, ...&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Actions usage check&lt;/strong&gt; to check that inputs at &lt;code&gt;with:&lt;/code&gt; and outputs in &lt;code&gt;steps.{id}.outputs&lt;/code&gt; are correct&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reusable workflow check&lt;/strong&gt; to check inputs/outputs/secrets of reusable workflows and workflow calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt; and &lt;a href=&#34;https://github.com/PyCQA/pyflakes&#34;&gt;pyflakes&lt;/a&gt; integrations&lt;/strong&gt; for scripts at &lt;code&gt;run:&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security checks&lt;/strong&gt;; &lt;a href=&#34;https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#understanding-the-risk-of-script-injections&#34;&gt;script injection&lt;/a&gt; by untrusted inputs, hard-coded credentials&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Other several useful checks&lt;/strong&gt;; &lt;a href=&#34;https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet&#34;&gt;glob syntax&lt;/a&gt; validation, dependencies check for &lt;code&gt;needs:&lt;/code&gt;, runner label validation, cron syntax validation, ...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/checks.md&#34;&gt;the full list&lt;/a&gt; of checks done by actionlint.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/rhysd/ss/raw/master/actionlint/main.gif?raw=true&#34; alt=&#34;actionlint reports 7 errors&#34; width=&#34;806&#34; height=&#34;492&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example of broken workflow:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;on:&#xA;  push:&#xA;    branch: main&#xA;    tags:&#xA;      - &#39;v\d+&#39;&#xA;jobs:&#xA;  test:&#xA;    strategy:&#xA;      matrix:&#xA;        os: [macos-latest, linux-latest]&#xA;    runs-on: ${{ matrix.os }}&#xA;    steps:&#xA;      - run: echo &#34;Checking commit &#39;${{ github.event.head_commit.message }}&#39;&#34;&#xA;      - uses: actions/checkout@v3&#xA;      - uses: actions/setup-node@v3&#xA;        with:&#xA;          node_version: 16.x&#xA;      - uses: actions/cache@v3&#xA;        with:&#xA;          path: ~/.npm&#xA;          key: ${{ matrix.platform }}-node-${{ hashFiles(&#39;**/package-lock.json&#39;) }}&#xA;        if: ${{ github.repository.permissions.admin == true }}&#xA;      - run: npm install &amp;amp;&amp;amp; npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;actionlint reports 7 errors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;test.yaml:3:5: unexpected key &#34;branch&#34; for &#34;push&#34; section. expected one of &#34;branches&#34;, &#34;branches-ignore&#34;, &#34;paths&#34;, &#34;paths-ignore&#34;, &#34;tags&#34;, &#34;tags-ignore&#34;, &#34;types&#34;, &#34;workflows&#34; [syntax-check]&#xA;  |&#xA;3 |     branch: main&#xA;  |     ^~~~~~~&#xA;test.yaml:5:11: character &#39;\&#39; is invalid for branch and tag names. only special characters [, ?, +, *, \ ! can be escaped with \. see `man git-check-ref-format` for more details. note that regular expression is unavailable. note: filter pattern syntax is explained at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet [glob]&#xA;  |&#xA;5 |       - &#39;v\d+&#39;&#xA;  |           ^~~~&#xA;test.yaml:10:28: label &#34;linux-latest&#34; is unknown. available labels are &#34;windows-latest&#34;, &#34;windows-2022&#34;, &#34;windows-2019&#34;, &#34;windows-2016&#34;, &#34;ubuntu-latest&#34;, &#34;ubuntu-22.04&#34;, &#34;ubuntu-20.04&#34;, &#34;ubuntu-18.04&#34;, &#34;macos-latest&#34;, &#34;macos-12&#34;, &#34;macos-12.0&#34;, &#34;macos-11&#34;, &#34;macos-11.0&#34;, &#34;macos-10.15&#34;, &#34;self-hosted&#34;, &#34;x64&#34;, &#34;arm&#34;, &#34;arm64&#34;, &#34;linux&#34;, &#34;macos&#34;, &#34;windows&#34;. if it is a custom label for self-hosted runner, set list of labels in actionlint.yaml config file [runner-label]&#xA;   |&#xA;10 |         os: [macos-latest, linux-latest]&#xA;   |                            ^~~~~~~~~~~~~&#xA;test.yaml:13:41: &#34;github.event.head_commit.message&#34; is potentially untrusted. avoid using it directly in inline scripts. instead, pass it through an environment variable. see https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions for more details [expression]&#xA;   |&#xA;13 |       - run: echo &#34;Checking commit &#39;${{ github.event.head_commit.message }}&#39;&#34;&#xA;   |                                         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;test.yaml:17:11: input &#34;node_version&#34; is not defined in action &#34;actions/setup-node@v3&#34;. available inputs are &#34;always-auth&#34;, &#34;architecture&#34;, &#34;cache&#34;, &#34;cache-dependency-path&#34;, &#34;check-latest&#34;, &#34;node-version&#34;, &#34;node-version-file&#34;, &#34;registry-url&#34;, &#34;scope&#34;, &#34;token&#34; [action]&#xA;   |&#xA;17 |           node_version: 16.x&#xA;   |           ^~~~~~~~~~~~~&#xA;test.yaml:21:20: property &#34;platform&#34; is not defined in object type {os: string} [expression]&#xA;   |&#xA;21 |           key: ${{ matrix.platform }}-node-${{ hashFiles(&#39;**/package-lock.json&#39;) }}&#xA;   |                    ^~~~~~~~~~~~~~~&#xA;test.yaml:22:17: receiver of object dereference &#34;permissions&#34; must be type of object but got &#34;string&#34; [expression]&#xA;   |&#xA;22 |         if: ${{ github.repository.permissions.admin == true }}&#xA;   |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Running a workflow is time consuming.&lt;/strong&gt; You need to push the changes and wait until the workflow runs on GitHub even if it contains some trivial mistakes. &lt;a href=&#34;https://github.com/nektos/act&#34;&gt;act&lt;/a&gt; is useful to debug the workflow locally. But it is not suitable for CI and still time consuming when your workflow gets larger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Checks of workflow files by GitHub are very loose.&lt;/strong&gt; It reports no error even if unexpected keys are in mappings (meant that some typos in keys). And also it reports no error when accessing to property which is actually not existing. For example &lt;code&gt;matrix.foo&lt;/code&gt; when no &lt;code&gt;foo&lt;/code&gt; is defined in &lt;code&gt;matrix:&lt;/code&gt; section, it is evaluated to &lt;code&gt;null&lt;/code&gt; and causes no error.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Some mistakes silently break a workflow.&lt;/strong&gt; Most common case I saw is specifying missing property to cache key. In the case cache silently does not work properly but a workflow itself runs without error. So you might not notice the mistake forever.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;actionlint&lt;/code&gt; command by downloading &lt;a href=&#34;https://github.com/rhysd/actionlint/releases&#34;&gt;the released binary&lt;/a&gt; or by Homebrew or by &lt;code&gt;go install&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/install.md&#34;&gt;the installation document&lt;/a&gt; for more details like how to manage the command with several package managers or run via Docker container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/rhysd/actionlint/cmd/actionlint@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Basically all you need to do is run the &lt;code&gt;actionlint&lt;/code&gt; command in your repository. actionlint automatically detects workflows and checks errors. actionlint focuses on finding out mistakes. It tries to catch errors as much as possible and make false positives as minimal as possible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;actionlint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another option to try actionlint is &lt;a href=&#34;https://rhysd.github.io/actionlint/&#34;&gt;the online playground&lt;/a&gt;. Your browser can run actionlint through WebAssembly.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/usage.md&#34;&gt;the usage document&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/checks.md&#34;&gt;Checks&lt;/a&gt;: Full list of all checks done by actionlint with example inputs, outputs, and playground links.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/install.md&#34;&gt;Installation&lt;/a&gt;: Installation instructions. Prebuilt binaries, Homebrew package, a Docker image, building from source, a download script (for CI) are available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/usage.md&#34;&gt;Usage&lt;/a&gt;: How to use &lt;code&gt;actionlint&lt;/code&gt; command locally or on GitHub Actions, the online playground, an official Docker image, and integrations with reviewdog, Problem Matchers, super-linter, pre-commit, VS Code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/config.md&#34;&gt;Configuration&lt;/a&gt;: How to configure actionlint behavior. Currently only labels of self-hosted runners can be configured.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/api.md&#34;&gt;Go API&lt;/a&gt;: How to use actionlint as Go library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/docs/reference.md&#34;&gt;References&lt;/a&gt;: Links to resources.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bug reporting&lt;/h2&gt; &#xA;&lt;p&gt;When you see some bugs or false positives, it is helpful to &lt;a href=&#34;https://github.com/rhysd/actionlint/issues/new&#34;&gt;file a new issue&lt;/a&gt; with a minimal example of input. Giving me some feedbacks like feature requests or ideas of additional checks is also welcome.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;actionlint is distributed under &lt;a href=&#34;https://raw.githubusercontent.com/rhysd/actionlint/main/LICENSE.txt&#34;&gt;the MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>