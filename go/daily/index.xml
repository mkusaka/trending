<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T01:42:46Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nsqio/nsq</title>
    <updated>2022-08-01T01:42:46Z</updated>
    <id>tag:github.com,2022-08-01:/nsqio/nsq</id>
    <link href="https://github.com/nsqio/nsq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A realtime distributed messaging platform&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img align=&#34;left&#34; width=&#34;175&#34; src=&#34;https://nsq.io/static/img/nsq_blue.png&#34;&gt; &lt;/p&gt;&#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Source&lt;/strong&gt;: https://github.com/nsqio/nsq &lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Issues&lt;/strong&gt;: https://github.com/nsqio/nsq/issues &lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Mailing List&lt;/strong&gt;: &lt;a href=&#34;https://groups.google.com/d/forum/nsq-users&#34;&gt;nsq-users@googlegroups.com&lt;/a&gt; &lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;IRC&lt;/strong&gt;: #nsq on freenode &lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Docs&lt;/strong&gt;: https://nsq.io &lt;/li&gt;&#xA; &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: &lt;a href=&#34;https://twitter.com/nsqio&#34;&gt;@nsqio&lt;/a&gt; &lt;/li&gt;&#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nsqio/nsq/actions&#34;&gt;&lt;img src=&#34;https://github.com/nsqio/nsq/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nsqio/nsq/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/nsqio/nsq.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/nsqio/nsq?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/nsqio/nsq/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NSQ&lt;/strong&gt; is a realtime distributed messaging platform designed to operate at scale, handling billions of messages per day.&lt;/p&gt; &#xA;&lt;p&gt;It promotes &lt;em&gt;distributed&lt;/em&gt; and &lt;em&gt;decentralized&lt;/em&gt; topologies without single points of failure, enabling fault tolerance and high availability coupled with a reliable message delivery guarantee. See &lt;a href=&#34;https://nsq.io/overview/features_and_guarantees.html&#34;&gt;features &amp;amp; guarantees&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Operationally, &lt;strong&gt;NSQ&lt;/strong&gt; is easy to configure and deploy (all parameters are specified on the command line and compiled binaries have no runtime dependencies). For maximum flexibility, it is agnostic to data format (messages can be JSON, MsgPack, Protocol Buffers, or anything else). Official Go and Python libraries are available out of the box (as well as many other &lt;a href=&#34;https://nsq.io/clients/client_libraries.html&#34;&gt;client libraries&lt;/a&gt;) and, if you&#39;re interested in building your own, there&#39;s a &lt;a href=&#34;https://nsq.io/clients/tcp_protocol_spec.html&#34;&gt;protocol spec&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We publish &lt;a href=&#34;https://nsq.io/deployment/installing.html&#34;&gt;binary releases&lt;/a&gt; for linux, darwin, freebsd and windows as well as an official &lt;a href=&#34;https://nsq.io/deployment/docker.html&#34;&gt;Docker image&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: master is our &lt;em&gt;development&lt;/em&gt; branch and may not be stable at all times.&lt;/p&gt; &#xA;&lt;h2&gt;In Production&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bitly.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/bitly_logo.png&#34; width=&#34;84&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.life360.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/life360_logo.png&#34; width=&#34;100&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.simplereach.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/simplereach_logo.png&#34; width=&#34;136&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://moz.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/moz_logo.png&#34; width=&#34;108&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://segment.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/segment_logo.png&#34; width=&#34;70&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://eventful.com/events&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/eventful_logo.png&#34; width=&#34;95&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.energyhub.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/energyhub_logo.png&#34; width=&#34;99&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://project-fifo.net/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/project_fifo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://trendrr.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/trendrr_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://reonomy.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/reonomy_logo.png&#34; width=&#34;100&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://hw-ops.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/heavy_water.png&#34; width=&#34;50&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.getlytics.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/lytics.png&#34; width=&#34;100&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mediaforge.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/rakuten.png&#34; width=&#34;100&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://wistia.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/wistia_logo.png&#34; width=&#34;140&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://stripe.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/stripe_logo.png&#34; width=&#34;96&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.shipwire.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/shipwire_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://digg.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/digg_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.scalabull.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/scalabull_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.soundest.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/soundest_logo.png&#34; width=&#34;96&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.docker.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/docker_logo.png&#34; width=&#34;100&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.getweave.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/weave_logo.png&#34; width=&#34;94&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.augury.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/augury_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.buzzfeed.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/buzzfeed_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://eztable.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/eztable_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.dotabuff.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/dotabuff_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.fastly.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/fastly_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://talky.io/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/talky_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://groupme.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/groupme_logo.png&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://wiredcraft.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/wiredcraft_logo.jpg&#34; width=&#34;97&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://sproutsocial.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/sproutsocial_logo.png&#34; width=&#34;90&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fandom.wikia.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/fandom_logo.svg?sanitize=true&#34; width=&#34;100&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://gitee.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/gitee_logo.svg?sanitize=true&#34; width=&#34;140&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://bytedance.com/&#34;&gt;&lt;img src=&#34;https://nsq.io/static/img/bytedance_logo.png&#34; width=&#34;140&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Help us keep NSQ open and inclusive. Please read and follow our &lt;a href=&#34;https://raw.githubusercontent.com/nsqio/nsq/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;NSQ was designed and developed by Matt Reiferson (&lt;a href=&#34;https://twitter.com/imsnakes&#34;&gt;@imsnakes&lt;/a&gt;) and Jehiah Czebotar (&lt;a href=&#34;https://twitter.com/jehiah&#34;&gt;@jehiah&lt;/a&gt;) but wouldn&#39;t have been possible without the support of &lt;a href=&#34;https://bitly.com&#34;&gt;Bitly&lt;/a&gt;, maintainers (&lt;a href=&#34;https://github.com/ploxiln&#34;&gt;Pierce Lopez&lt;/a&gt;), and all our &lt;a href=&#34;https://github.com/nsqio/nsq/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Logo created by Wolasi Konu (&lt;a href=&#34;https://twitter.com/kisalow&#34;&gt;@kisalow&lt;/a&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>quii/learn-go-with-tests</title>
    <updated>2022-08-01T01:42:46Z</updated>
    <id>tag:github.com,2022-08-01:/quii/learn-go-with-tests</id>
    <link href="https://github.com/quii/learn-go-with-tests" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Learn Go with test-driven development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Learn Go with Tests&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/red-green-blue-gophers-smaller.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/deniseyu21&#34;&gt;Art by Denise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/quii/learn-go-with-tests&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/quii/learn-go-with-tests&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Formats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quii.gitbook.io/learn-go-with-tests&#34;&gt;Gitbook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/quii/learn-go-with-tests/releases&#34;&gt;EPUB or PDF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://studygolang.gitbook.io/learn-go-with-tests&#34;&gt;中文&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://larien.gitbook.io/aprenda-go-com-testes/&#34;&gt;Português&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://andmorefine.gitbook.io/learn-go-with-tests/&#34;&gt;日本語&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://miryang.gitbook.io/learn-go-with-tests/&#34;&gt;한국어&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://halilkocaoz.gitbook.io/go-programlama-dilini-ogren/&#34;&gt;Türkçe&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support me&lt;/h2&gt; &#xA;&lt;p&gt;I am proud to offer this resource for free, but if you wish to give some appreciation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/quii&#34;&gt;Tweet me @quii&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.buymeacoffee.com/quii&#34;&gt;Buy me a coffee &lt;span&gt;☕&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/quii&#34;&gt;Sponsor me on GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explore the Go language by writing tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Get a grounding with TDD&lt;/strong&gt;. Go is a good language for learning TDD because it is a simple language to learn and testing is built-in&lt;/li&gt; &#xA; &lt;li&gt;Be confident that you&#39;ll be able to start writing robust, well-tested systems in Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/why.md&#34;&gt;Watch a video, or read about why unit testing and TDD is important&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;h3&gt;Go fundamentals&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/install-go.md&#34;&gt;Install Go&lt;/a&gt; - Set up environment for productivity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/hello-world.md&#34;&gt;Hello, world&lt;/a&gt; - Declaring variables, constants, if/else statements, switch, write your first go program and write your first test. Sub-test syntax and closures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/integers.md&#34;&gt;Integers&lt;/a&gt; - Further Explore function declaration syntax and learn new ways to improve the documentation of your code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/iteration.md&#34;&gt;Iteration&lt;/a&gt; - Learn about &lt;code&gt;for&lt;/code&gt; and benchmarking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/arrays-and-slices.md&#34;&gt;Arrays and slices&lt;/a&gt; - Learn about arrays, slices, &lt;code&gt;len&lt;/code&gt;, varargs, &lt;code&gt;range&lt;/code&gt; and test coverage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/structs-methods-and-interfaces.md&#34;&gt;Structs, methods &amp;amp; interfaces&lt;/a&gt; - Learn about &lt;code&gt;struct&lt;/code&gt;, methods, &lt;code&gt;interface&lt;/code&gt; and table driven tests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/pointers-and-errors.md&#34;&gt;Pointers &amp;amp; errors&lt;/a&gt; - Learn about pointers and errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/maps.md&#34;&gt;Maps&lt;/a&gt; - Learn about storing values in the map data structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/dependency-injection.md&#34;&gt;Dependency Injection&lt;/a&gt; - Learn about dependency injection, how it relates to using interfaces and a primer on io.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/mocking.md&#34;&gt;Mocking&lt;/a&gt; - Take some existing untested code and use DI with mocking to test it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/concurrency.md&#34;&gt;Concurrency&lt;/a&gt; - Learn how to write concurrent code to make your software faster.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/select.md&#34;&gt;Select&lt;/a&gt; - Learn how to synchronise asynchronous processes elegantly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/reflection.md&#34;&gt;Reflection&lt;/a&gt; - Learn about reflection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/sync.md&#34;&gt;Sync&lt;/a&gt; - Learn some functionality from the sync package including &lt;code&gt;WaitGroup&lt;/code&gt; and &lt;code&gt;Mutex&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/context.md&#34;&gt;Context&lt;/a&gt; - Use the context package to manage and cancel long-running processes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/roman-numerals.md&#34;&gt;Intro to property based tests&lt;/a&gt; - Practice some TDD with the Roman Numerals kata and get a brief intro to property based tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/math.md&#34;&gt;Maths&lt;/a&gt; - Use the &lt;code&gt;math&lt;/code&gt; package to draw an SVG clock&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/reading-files.md&#34;&gt;Reading files&lt;/a&gt; - Read files and process them&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/html-templates.md&#34;&gt;Templating&lt;/a&gt; - Use Go&#39;s html/template package to render html from data, and also learn about approval testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/generics.md&#34;&gt;Generics&lt;/a&gt; - Learn how to write functions that take generic arguments and make your own generic data-structure&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/revisiting-arrays-and-slices-with-generics.md&#34;&gt;Revisiting arrays and slices with generics&lt;/a&gt; - Generics are very useful when working with collections. Learn how to write your own &lt;code&gt;Reduce&lt;/code&gt; function and tidy up some common patterns.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build an application&lt;/h3&gt; &#xA;&lt;p&gt;Now that you have hopefully digested the &lt;em&gt;Go Fundamentals&lt;/em&gt; section you have a solid grounding of a majority of Go&#39;s language features and how to do TDD.&lt;/p&gt; &#xA;&lt;p&gt;This next section will involve building an application.&lt;/p&gt; &#xA;&lt;p&gt;Each chapter will iterate on the previous one, expanding the application&#39;s functionality as our product owner dictates.&lt;/p&gt; &#xA;&lt;p&gt;New concepts will be introduced to help facilitate writing great code but most of the new material will be learning what can be accomplished from Go&#39;s standard library.&lt;/p&gt; &#xA;&lt;p&gt;By the end of this, you should have a strong grasp as to how to iteratively write an application in Go, backed by tests.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/http-server.md&#34;&gt;HTTP server&lt;/a&gt; - We will create an application which listens to HTTP requests and responds to them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/json.md&#34;&gt;JSON, routing and embedding&lt;/a&gt; - We will make our endpoints return JSON and explore how to do routing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/io.md&#34;&gt;IO and sorting&lt;/a&gt; - We will persist and read our data from disk and we&#39;ll cover sorting data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/command-line.md&#34;&gt;Command line &amp;amp; project structure&lt;/a&gt; - Support multiple applications from one code base and read input from command line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/time.md&#34;&gt;Time&lt;/a&gt; - using the &lt;code&gt;time&lt;/code&gt; package to schedule activities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/websockets.md&#34;&gt;WebSockets&lt;/a&gt; - learn how to write and test a server that uses WebSockets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Questions and answers&lt;/h3&gt; &#xA;&lt;p&gt;I often run in to questions on the internets like&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;How do I test my amazing function that does x, y and z&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you have such a question raise it as an issue on github and I&#39;ll try and find time to write a short chapter to tackle the issue. I feel like content like this is valuable as it is tackling people&#39;s &lt;em&gt;real&lt;/em&gt; questions around testing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/os-exec.md&#34;&gt;OS exec&lt;/a&gt; - An example of how we can reach out to the OS to execute commands to fetch data and keep our business logic testable/&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/error-types.md&#34;&gt;Error types&lt;/a&gt; - Example of creating your own error types to improve your tests and make your code easier to work with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/context-aware-reader.md&#34;&gt;Context-aware Reader&lt;/a&gt; - Learn how to TDD augmenting &lt;code&gt;io.Reader&lt;/code&gt; with cancellation. Based on &lt;a href=&#34;https://pace.dev/blog/2020/02/03/context-aware-ioreader-for-golang-by-mat-ryer&#34;&gt;Context-aware io.Reader for Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/http-handlers-revisited.md&#34;&gt;Revisiting HTTP Handlers&lt;/a&gt; - Testing HTTP handlers seems to be the bane of many a developer&#39;s existence. This chapter explores the issues around designing handlers correctly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Meta / Discussion&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/why.md&#34;&gt;Why&lt;/a&gt; - Watch a video, or read about why unit testing and TDD is important&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/anti-patterns.md&#34;&gt;Anti-patterns&lt;/a&gt; - A short chapter on TDD and unit testing anti-patterns&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;This project is work in progress&lt;/em&gt; If you would like to contribute, please do get in touch.&lt;/li&gt; &#xA; &lt;li&gt;Read &lt;a href=&#34;https://github.com/quii/learn-go-with-tests/tree/842f4f24d1f1c20ba3bb23cbc376c7ca6f7ca79a/contributing.md&#34;&gt;contributing.md&lt;/a&gt; for guidelines&lt;/li&gt; &#xA; &lt;li&gt;Any ideas? Create an issue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;I have some experience introducing Go to development teams and have tried different approaches as to how to grow a team from some people curious about Go into highly effective writers of Go systems.&lt;/p&gt; &#xA;&lt;h3&gt;What didn&#39;t work&lt;/h3&gt; &#xA;&lt;h4&gt;Read &lt;em&gt;the&lt;/em&gt; book&lt;/h4&gt; &#xA;&lt;p&gt;An approach we tried was to take &lt;a href=&#34;https://www.amazon.co.uk/Programming-Language-Addison-Wesley-Professional-Computing/dp/0134190440&#34;&gt;the blue book&lt;/a&gt; and every week discuss the next chapter along with the exercises.&lt;/p&gt; &#xA;&lt;p&gt;I love this book but it requires a high level of commitment. The book is very detailed in explaining concepts, which is obviously great but it means that the progress is slow and steady - this is not for everyone.&lt;/p&gt; &#xA;&lt;p&gt;I found that whilst a small number of people would read chapter X and do the exercises, many people didn&#39;t.&lt;/p&gt; &#xA;&lt;h4&gt;Solve some problems&lt;/h4&gt; &#xA;&lt;p&gt;Katas are fun but they are usually limited in their scope for learning a language; you&#39;re unlikely to use goroutines to solve a kata.&lt;/p&gt; &#xA;&lt;p&gt;Another problem is when you have varying levels of enthusiasm. Some people just learn way more of the language than others and when demonstrating what they have done end up confusing people with features the others are not familiar with.&lt;/p&gt; &#xA;&lt;p&gt;This ends up making the learning feel quite &lt;em&gt;unstructured&lt;/em&gt; and &lt;em&gt;ad hoc&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What did work&lt;/h3&gt; &#xA;&lt;p&gt;By far the most effective way was by slowly introducing the fundamentals of the language by reading through &lt;a href=&#34;https://gobyexample.com/&#34;&gt;go by example&lt;/a&gt;, exploring them with examples and discussing them as a group. This was a more interactive approach than &#34;read chapter x for homework&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Over time the team gained a solid foundation of the &lt;em&gt;grammar&lt;/em&gt; of the language so we could then start to build systems.&lt;/p&gt; &#xA;&lt;p&gt;This to me seems analogous to practicing scales when trying to learn guitar.&lt;/p&gt; &#xA;&lt;p&gt;It doesn&#39;t matter how artistic you think you are, you are unlikely to write good music without understanding the fundamentals and practicing the mechanics.&lt;/p&gt; &#xA;&lt;h3&gt;What works for me&lt;/h3&gt; &#xA;&lt;p&gt;When &lt;em&gt;I&lt;/em&gt; learn a new programming language I usually start by messing around in a REPL but eventually, I need more structure.&lt;/p&gt; &#xA;&lt;p&gt;What I like to do is explore concepts and then solidify the ideas with tests. Tests verify the code I write is correct and documents the feature I have learned.&lt;/p&gt; &#xA;&lt;p&gt;Taking my experience of learning with a group and my own personal way I am going to try and create something that hopefully proves useful to other teams. Learning the fundamentals by writing small tests so that you can then take your existing software design skills and ship some great systems.&lt;/p&gt; &#xA;&lt;h2&gt;Who this is for&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;People who are interested in picking up Go.&lt;/li&gt; &#xA; &lt;li&gt;People who already know some Go, but want to explore testing with TDD.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What you&#39;ll need&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A computer!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Installed Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A text editor&lt;/li&gt; &#xA; &lt;li&gt;Some experience with programming. Understanding of concepts like &lt;code&gt;if&lt;/code&gt;, variables, functions etc.&lt;/li&gt; &#xA; &lt;li&gt;Comfortable with using the terminal&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add issues/submit PRs &lt;a href=&#34;https://github.com/quii/learn-go-with-tests&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/quii&#34;&gt;tweet me @quii&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/quii/learn-go-with-tests/main/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/egonelbre&#34;&gt;Logo is by egonelbre&lt;/a&gt; What a star!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>slackhq/nebula</title>
    <updated>2022-08-01T01:42:46Z</updated>
    <id>tag:github.com,2022-08-01:/slackhq/nebula</id>
    <link href="https://github.com/slackhq/nebula" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A scalable overlay networking tool with a focus on performance, simplicity and security&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;What is Nebula?&lt;/h2&gt; &#xA;&lt;p&gt;Nebula is a scalable overlay networking tool with a focus on performance, simplicity and security. It lets you seamlessly connect computers anywhere in the world. Nebula is portable, and runs on Linux, OSX, Windows, iOS, and Android. It can be used to connect a small number of computers, but is also able to connect tens of thousands of computers.&lt;/p&gt; &#xA;&lt;p&gt;Nebula incorporates a number of existing concepts like encryption, security groups, certificates, and tunneling, and each of those individual pieces existed before Nebula in various forms. What makes Nebula different to existing offerings is that it brings all of these ideas together, resulting in a sum that is greater than its individual parts.&lt;/p&gt; &#xA;&lt;p&gt;Further documentation can be found &lt;a href=&#34;https://www.defined.net/nebula/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about Nebula &lt;a href=&#34;https://medium.com/p/884110a5579&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also join the NebulaOSS Slack group &lt;a href=&#34;https://join.slack.com/t/nebulaoss/shared_invite/enQtOTA5MDI4NDg3MTg4LTkwY2EwNTI4NzQyMzc0M2ZlODBjNWI3NTY1MzhiOThiMmZlZjVkMTI0NGY4YTMyNjUwMWEyNzNkZTJmYzQxOGU&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Platforms&lt;/h2&gt; &#xA;&lt;h4&gt;Desktop and Server&lt;/h4&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/slackhq/nebula/releases/latest&#34;&gt;releases&lt;/a&gt; page for downloads or see the &lt;a href=&#34;https://github.com/slackhq/nebula#distribution-packages&#34;&gt;Distribution Packages&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux - 64 and 32 bit, arm, and others&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA; &lt;li&gt;MacOS&lt;/li&gt; &#xA; &lt;li&gt;Freebsd&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Distribution Packages&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://archlinux.org/packages/community/x86_64/nebula/&#34;&gt;Arch Linux&lt;/a&gt; &lt;pre&gt;&lt;code&gt;$ sudo pacman -S nebula&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://copr.fedorainfracloud.org/coprs/jdoss/nebula/&#34;&gt;Fedora Linux&lt;/a&gt; &lt;pre&gt;&lt;code&gt;$ sudo dnf copr enable jdoss/nebula&#xA;$ sudo dnf install nebula&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mobile&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/mobile-nebula/id1509587936?itsct=apps_box&amp;amp;itscg=30200&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=net.defined.mobile_nebula&amp;amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technical Overview&lt;/h2&gt; &#xA;&lt;p&gt;Nebula is a mutually authenticated peer-to-peer software defined network based on the &lt;a href=&#34;https://noiseprotocol.org/&#34;&gt;Noise Protocol Framework&lt;/a&gt;. Nebula uses certificates to assert a node&#39;s IP address, name, and membership within user-defined groups. Nebula&#39;s user-defined groups allow for provider agnostic traffic filtering between nodes. Discovery nodes allow individual peers to find each other and optionally use UDP hole punching to establish connections from behind most firewalls or NATs. Users can move data between nodes in any number of cloud service providers, datacenters, and endpoints, without needing to maintain a particular addressing scheme.&lt;/p&gt; &#xA;&lt;p&gt;Nebula uses Elliptic-curve Diffie-Hellman (&lt;code&gt;ECDH&lt;/code&gt;) key exchange and &lt;code&gt;AES-256-GCM&lt;/code&gt; in its default configuration.&lt;/p&gt; &#xA;&lt;p&gt;Nebula was created to provide a mechanism for groups of hosts to communicate securely, even across the internet, while enabling expressive firewall definitions similar in style to cloud security groups.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started (quickly)&lt;/h2&gt; &#xA;&lt;p&gt;To set up a Nebula network, you&#39;ll need:&lt;/p&gt; &#xA;&lt;h4&gt;1. The &lt;a href=&#34;https://github.com/slackhq/nebula/releases&#34;&gt;Nebula binaries&lt;/a&gt; or &lt;a href=&#34;https://github.com/slackhq/nebula#distribution-packages&#34;&gt;Distribution Packages&lt;/a&gt; for your specific platform. Specifically you&#39;ll need &lt;code&gt;nebula-cert&lt;/code&gt; and the specific nebula binary for each platform you use.&lt;/h4&gt; &#xA;&lt;h4&gt;2. (Optional, but you really should..) At least one discovery node with a routable IP address, which we call a lighthouse.&lt;/h4&gt; &#xA;&lt;p&gt;Nebula lighthouses allow nodes to find each other, anywhere in the world. A lighthouse is the only node in a Nebula network whose IP should not change. Running a lighthouse requires very few compute resources, and you can easily use the least expensive option from a cloud hosting provider. If you&#39;re not sure which provider to use, a number of us have used $5/mo &lt;a href=&#34;https://digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt; droplets as lighthouses.&lt;/p&gt; &#xA;&lt;p&gt;Once you have launched an instance, ensure that Nebula udp traffic (default port udp/4242) can reach it over the internet.&lt;/p&gt; &#xA;&lt;h4&gt;3. A Nebula certificate authority, which will be the root of trust for a particular Nebula network.&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./nebula-cert ca -name &#34;Myorganization, Inc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create files named &lt;code&gt;ca.key&lt;/code&gt; and &lt;code&gt;ca.cert&lt;/code&gt; in the current directory. The &lt;code&gt;ca.key&lt;/code&gt; file is the most sensitive file you&#39;ll create, because it is the key used to sign the certificates for individual nebula nodes/hosts. Please store this file somewhere safe, preferably with strong encryption.&lt;/p&gt; &#xA;&lt;h4&gt;4. Nebula host keys and certificates generated from that certificate authority&lt;/h4&gt; &#xA;&lt;p&gt;This assumes you have four nodes, named lighthouse1, laptop, server1, host3. You can name the nodes any way you&#39;d like, including FQDN. You&#39;ll also need to choose IP addresses and the associated subnet. In this example, we are creating a nebula network that will use 192.168.100.x/24 as its network range. This example also demonstrates nebula groups, which can later be used to define traffic rules in a nebula network.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./nebula-cert sign -name &#34;lighthouse1&#34; -ip &#34;192.168.100.1/24&#34;&#xA;./nebula-cert sign -name &#34;laptop&#34; -ip &#34;192.168.100.2/24&#34; -groups &#34;laptop,home,ssh&#34;&#xA;./nebula-cert sign -name &#34;server1&#34; -ip &#34;192.168.100.9/24&#34; -groups &#34;servers&#34;&#xA;./nebula-cert sign -name &#34;host3&#34; -ip &#34;192.168.100.10/24&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;5. Configuration files for each host&lt;/h4&gt; &#xA;&lt;p&gt;Download a copy of the nebula &lt;a href=&#34;https://github.com/slackhq/nebula/raw/master/examples/config.yml&#34;&gt;example configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;On the lighthouse node, you&#39;ll need to ensure &lt;code&gt;am_lighthouse: true&lt;/code&gt; is set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On the individual hosts, ensure the lighthouse is defined properly in the &lt;code&gt;static_host_map&lt;/code&gt; section, and is added to the lighthouse &lt;code&gt;hosts&lt;/code&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;6. Copy nebula credentials, configuration, and binaries to each host&lt;/h4&gt; &#xA;&lt;p&gt;For each host, copy the nebula binary to the host, along with &lt;code&gt;config.yaml&lt;/code&gt; from step 5, and the files &lt;code&gt;ca.crt&lt;/code&gt;, &lt;code&gt;{host}.crt&lt;/code&gt;, and &lt;code&gt;{host}.key&lt;/code&gt; from step 4.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;DO NOT COPY &lt;code&gt;ca.key&lt;/code&gt; TO INDIVIDUAL NODES.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h4&gt;7. Run nebula on each host&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./nebula -config /path/to/config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Nebula from source&lt;/h2&gt; &#xA;&lt;p&gt;Download go and clone this repo. Change to the nebula directory.&lt;/p&gt; &#xA;&lt;p&gt;To build nebula for all platforms: &lt;code&gt;make all&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To build nebula for a specific platform (ex, Windows): &lt;code&gt;make bin-windows&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/slackhq/nebula/master/Makefile&#34;&gt;Makefile&lt;/a&gt; for more details on build targets&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Nebula was created at Slack Technologies, Inc by Nate Brown and Ryan Huber, with contributions from Oliver Fross, Alan Lam, Wade Simmons, and Lining Wang.&lt;/p&gt;</summary>
  </entry>
</feed>