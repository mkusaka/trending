<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-16T01:35:52Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-playground/validator</title>
    <updated>2022-09-16T01:35:52Z</updated>
    <id>tag:github.com,2022-09-16:/go-playground/validator</id>
    <link href="https://github.com/go-playground/validator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ’¯Go Struct and Field validation, including Cross Field, Cross Struct, Map, Slice and Array diving&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Package validator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/go-playground/validator/v9/logo.png&#34;&gt;&lt;a href=&#34;https://gitter.im/go-playground/validator?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/go-playground/validator&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/version-10.11.0-green.svg?sanitize=true&#34; alt=&#34;Project status&#34;&gt; &lt;a href=&#34;https://travis-ci.org/go-playground/validator&#34;&gt;&lt;img src=&#34;https://travis-ci.org/go-playground/validator.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/go-playground/validator?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/go-playground/validator/badge.svg?branch=master&amp;amp;service=github&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/go-playground/validator&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/go-playground/validator&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/go-playground/validator/v10&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-playground/validator?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/dub/l/vibe-d.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Package validator implements value validations for structs and individual fields based on tags.&lt;/p&gt; &#xA;&lt;p&gt;It has the following &lt;strong&gt;unique&lt;/strong&gt; features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Cross Field and Cross Struct validations by using validation tags or custom validators.&lt;/li&gt; &#xA; &lt;li&gt;Slice, Array and Map diving, which allows any or all levels of a multidimensional field to be validated.&lt;/li&gt; &#xA; &lt;li&gt;Ability to dive into both map keys and values for validation&lt;/li&gt; &#xA; &lt;li&gt;Handles type interface by determining it&#39;s underlying type prior to validation.&lt;/li&gt; &#xA; &lt;li&gt;Handles custom field types such as sql driver Valuer see &lt;a href=&#34;https://golang.org/src/database/sql/driver/types.go?s=1210:1293#L29&#34;&gt;Valuer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Alias validation tags, which allows for mapping of several validations to a single tag for easier defining of validations on structs&lt;/li&gt; &#xA; &lt;li&gt;Extraction of custom defined Field Name e.g. can specify to extract the JSON name while validating and have it available in the resulting FieldError&lt;/li&gt; &#xA; &lt;li&gt;Customizable i18n aware error messages.&lt;/li&gt; &#xA; &lt;li&gt;Default validator for the &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;gin&lt;/a&gt; web framework; upgrading from v8 to v9 in gin see &lt;a href=&#34;https://github.com/go-playground/validator/tree/master/_examples/gin-upgrading-overriding&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use go get.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/go-playground/validator/v10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import the validator package into your own code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;import &#34;github.com/go-playground/validator/v10&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error Return Value&lt;/h2&gt; &#xA;&lt;p&gt;Validation functions return type error&lt;/p&gt; &#xA;&lt;p&gt;They return type error to avoid the issue discussed in the following, where err is always != nil:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/29138676/3158232&#34;&gt;http://stackoverflow.com/a/29138676/3158232&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/validator/issues/134&#34;&gt;https://github.com/go-playground/validator/issues/134&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Validator returns only InvalidValidationError for bad validation input, nil or ValidationErrors as type error; so, in your code all you need to do is check if the error returned is not nil, and if it&#39;s not check if error is InvalidValidationError ( if necessary, most of the time it isn&#39;t ) type cast it to type ValidationErrors like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := validate.Struct(mystruct)&#xA;validationErrors := err.(validator.ValidationErrors)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage and documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://pkg.go.dev/github.com/go-playground/validator/v10&#34;&gt;https://pkg.go.dev/github.com/go-playground/validator/v10&lt;/a&gt; for detailed usage docs.&lt;/p&gt; &#xA;&lt;h5&gt;Examples:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/validator/raw/master/_examples/simple/main.go&#34;&gt;Simple&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/validator/raw/master/_examples/custom/main.go&#34;&gt;Custom Field Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/validator/raw/master/_examples/struct-level/main.go&#34;&gt;Struct Level&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/validator/raw/master/_examples/translations/main.go&#34;&gt;Translations &amp;amp; Custom Errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/validator/tree/v9/_examples/gin-upgrading-overriding&#34;&gt;Gin upgrade and/or override validator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bluesuncorp/wash&#34;&gt;wash - an example application putting it all together&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Baked-in Validations&lt;/h2&gt; &#xA;&lt;h3&gt;Fields:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eqcsfield&lt;/td&gt; &#xA;   &lt;td&gt;Field Equals Another Field (relative)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eqfield&lt;/td&gt; &#xA;   &lt;td&gt;Field Equals Another Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fieldcontains&lt;/td&gt; &#xA;   &lt;td&gt;NOT DOCUMENTED IN doc.go&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fieldexcludes&lt;/td&gt; &#xA;   &lt;td&gt;NOT DOCUMENTED IN doc.go&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gtcsfield&lt;/td&gt; &#xA;   &lt;td&gt;Field Greater Than Another Relative Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gtecsfield&lt;/td&gt; &#xA;   &lt;td&gt;Field Greater Than or Equal To Another Relative Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gtefield&lt;/td&gt; &#xA;   &lt;td&gt;Field Greater Than or Equal To Another Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gtfield&lt;/td&gt; &#xA;   &lt;td&gt;Field Greater Than Another Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ltcsfield&lt;/td&gt; &#xA;   &lt;td&gt;Less Than Another Relative Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ltecsfield&lt;/td&gt; &#xA;   &lt;td&gt;Less Than or Equal To Another Relative Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ltefield&lt;/td&gt; &#xA;   &lt;td&gt;Less Than or Equal To Another Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ltfield&lt;/td&gt; &#xA;   &lt;td&gt;Less Than Another Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;necsfield&lt;/td&gt; &#xA;   &lt;td&gt;Field Does Not Equal Another Field (relative)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nefield&lt;/td&gt; &#xA;   &lt;td&gt;Field Does Not Equal Another Field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Network:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cidr&lt;/td&gt; &#xA;   &lt;td&gt;Classless Inter-Domain Routing CIDR&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cidrv4&lt;/td&gt; &#xA;   &lt;td&gt;Classless Inter-Domain Routing CIDRv4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cidrv6&lt;/td&gt; &#xA;   &lt;td&gt;Classless Inter-Domain Routing CIDRv6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;datauri&lt;/td&gt; &#xA;   &lt;td&gt;Data URL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fqdn&lt;/td&gt; &#xA;   &lt;td&gt;Full Qualified Domain Name (FQDN)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hostname&lt;/td&gt; &#xA;   &lt;td&gt;Hostname RFC 952&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hostname_port&lt;/td&gt; &#xA;   &lt;td&gt;HostPort&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hostname_rfc1123&lt;/td&gt; &#xA;   &lt;td&gt;Hostname RFC 1123&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ip&lt;/td&gt; &#xA;   &lt;td&gt;Internet Protocol Address IP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ip4_addr&lt;/td&gt; &#xA;   &lt;td&gt;Internet Protocol Address IPv4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ip6_addr&lt;/td&gt; &#xA;   &lt;td&gt;Internet Protocol Address IPv6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ip_addr&lt;/td&gt; &#xA;   &lt;td&gt;Internet Protocol Address IP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ipv4&lt;/td&gt; &#xA;   &lt;td&gt;Internet Protocol Address IPv4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ipv6&lt;/td&gt; &#xA;   &lt;td&gt;Internet Protocol Address IPv6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mac&lt;/td&gt; &#xA;   &lt;td&gt;Media Access Control Address MAC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tcp4_addr&lt;/td&gt; &#xA;   &lt;td&gt;Transmission Control Protocol Address TCPv4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tcp6_addr&lt;/td&gt; &#xA;   &lt;td&gt;Transmission Control Protocol Address TCPv6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tcp_addr&lt;/td&gt; &#xA;   &lt;td&gt;Transmission Control Protocol Address TCP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;udp4_addr&lt;/td&gt; &#xA;   &lt;td&gt;User Datagram Protocol Address UDPv4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;udp6_addr&lt;/td&gt; &#xA;   &lt;td&gt;User Datagram Protocol Address UDPv6&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;udp_addr&lt;/td&gt; &#xA;   &lt;td&gt;User Datagram Protocol Address UDP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unix_addr&lt;/td&gt; &#xA;   &lt;td&gt;Unix domain socket end point Address&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uri&lt;/td&gt; &#xA;   &lt;td&gt;URI String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;url&lt;/td&gt; &#xA;   &lt;td&gt;URL String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;url_encoded&lt;/td&gt; &#xA;   &lt;td&gt;URL Encoded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;urn_rfc2141&lt;/td&gt; &#xA;   &lt;td&gt;Urn RFC 2141 String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Strings:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alpha&lt;/td&gt; &#xA;   &lt;td&gt;Alpha Only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alphanum&lt;/td&gt; &#xA;   &lt;td&gt;Alphanumeric&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alphanumunicode&lt;/td&gt; &#xA;   &lt;td&gt;Alphanumeric Unicode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;alphaunicode&lt;/td&gt; &#xA;   &lt;td&gt;Alpha Unicode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ascii&lt;/td&gt; &#xA;   &lt;td&gt;ASCII&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Boolean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contains&lt;/td&gt; &#xA;   &lt;td&gt;Contains&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;containsany&lt;/td&gt; &#xA;   &lt;td&gt;Contains Any&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;containsrune&lt;/td&gt; &#xA;   &lt;td&gt;Contains Rune&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;endsnotwith&lt;/td&gt; &#xA;   &lt;td&gt;Ends Not With&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;endswith&lt;/td&gt; &#xA;   &lt;td&gt;Ends With&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excludes&lt;/td&gt; &#xA;   &lt;td&gt;Excludes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excludesall&lt;/td&gt; &#xA;   &lt;td&gt;Excludes All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excludesrune&lt;/td&gt; &#xA;   &lt;td&gt;Excludes Rune&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lowercase&lt;/td&gt; &#xA;   &lt;td&gt;Lowercase&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;multibyte&lt;/td&gt; &#xA;   &lt;td&gt;Multi-Byte Characters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;NOT DOCUMENTED IN doc.go&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;numeric&lt;/td&gt; &#xA;   &lt;td&gt;Numeric&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;printascii&lt;/td&gt; &#xA;   &lt;td&gt;Printable ASCII&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;startsnotwith&lt;/td&gt; &#xA;   &lt;td&gt;Starts Not With&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;startswith&lt;/td&gt; &#xA;   &lt;td&gt;Starts With&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uppercase&lt;/td&gt; &#xA;   &lt;td&gt;Uppercase&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Format:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base64&lt;/td&gt; &#xA;   &lt;td&gt;Base64 String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;base64url&lt;/td&gt; &#xA;   &lt;td&gt;Base64URL String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bic&lt;/td&gt; &#xA;   &lt;td&gt;Business Identifier Code (ISO 9362)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bcp47_language_tag&lt;/td&gt; &#xA;   &lt;td&gt;Language tag (BCP 47)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;btc_addr&lt;/td&gt; &#xA;   &lt;td&gt;Bitcoin Address&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;btc_addr_bech32&lt;/td&gt; &#xA;   &lt;td&gt;Bitcoin Bech32 Address (segwit)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;credit_card&lt;/td&gt; &#xA;   &lt;td&gt;Credit Card Number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;datetime&lt;/td&gt; &#xA;   &lt;td&gt;Datetime&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;e164&lt;/td&gt; &#xA;   &lt;td&gt;e164 formatted phone number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;email&lt;/td&gt; &#xA;   &lt;td&gt;E-mail String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eth_addr&lt;/td&gt; &#xA;   &lt;td&gt;Ethereum Address&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hexadecimal&lt;/td&gt; &#xA;   &lt;td&gt;Hexadecimal String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hexcolor&lt;/td&gt; &#xA;   &lt;td&gt;Hexcolor String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hsl&lt;/td&gt; &#xA;   &lt;td&gt;HSL String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hsla&lt;/td&gt; &#xA;   &lt;td&gt;HSLA String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;html&lt;/td&gt; &#xA;   &lt;td&gt;HTML Tags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;html_encoded&lt;/td&gt; &#xA;   &lt;td&gt;HTML Encoded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isbn&lt;/td&gt; &#xA;   &lt;td&gt;International Standard Book Number&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isbn10&lt;/td&gt; &#xA;   &lt;td&gt;International Standard Book Number 10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isbn13&lt;/td&gt; &#xA;   &lt;td&gt;International Standard Book Number 13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iso3166_1_alpha2&lt;/td&gt; &#xA;   &lt;td&gt;Two-letter country code (ISO 3166-1 alpha-2)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iso3166_1_alpha3&lt;/td&gt; &#xA;   &lt;td&gt;Three-letter country code (ISO 3166-1 alpha-3)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iso3166_1_alpha_numeric&lt;/td&gt; &#xA;   &lt;td&gt;Numeric country code (ISO 3166-1 numeric)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iso3166_2&lt;/td&gt; &#xA;   &lt;td&gt;Country subdivision code (ISO 3166-2)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iso4217&lt;/td&gt; &#xA;   &lt;td&gt;Currency code (ISO 4217)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jwt&lt;/td&gt; &#xA;   &lt;td&gt;JSON Web Token (JWT)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latitude&lt;/td&gt; &#xA;   &lt;td&gt;Latitude&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;longitude&lt;/td&gt; &#xA;   &lt;td&gt;Longitude&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;postcode_iso3166_alpha2&lt;/td&gt; &#xA;   &lt;td&gt;Postcode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;postcode_iso3166_alpha2_field&lt;/td&gt; &#xA;   &lt;td&gt;Postcode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rgb&lt;/td&gt; &#xA;   &lt;td&gt;RGB String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rgba&lt;/td&gt; &#xA;   &lt;td&gt;RGBA String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ssn&lt;/td&gt; &#xA;   &lt;td&gt;Social Security Number SSN&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timezone&lt;/td&gt; &#xA;   &lt;td&gt;Timezone&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Identifier UUID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid3&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Identifier UUID v3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid3_rfc4122&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Identifier UUID v3 RFC4122&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid4&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Identifier UUID v4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid4_rfc4122&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Identifier UUID v4 RFC4122&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid5&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Identifier UUID v5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid5_rfc4122&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Identifier UUID v5 RFC4122&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid_rfc4122&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Identifier UUID RFC4122&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;md4&lt;/td&gt; &#xA;   &lt;td&gt;MD4 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;md5&lt;/td&gt; &#xA;   &lt;td&gt;MD5 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sha256&lt;/td&gt; &#xA;   &lt;td&gt;SHA256 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sha384&lt;/td&gt; &#xA;   &lt;td&gt;SHA384 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sha512&lt;/td&gt; &#xA;   &lt;td&gt;SHA512 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ripemd128&lt;/td&gt; &#xA;   &lt;td&gt;RIPEMD-128 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ripemd128&lt;/td&gt; &#xA;   &lt;td&gt;RIPEMD-160 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tiger128&lt;/td&gt; &#xA;   &lt;td&gt;TIGER128 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tiger160&lt;/td&gt; &#xA;   &lt;td&gt;TIGER160 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tiger192&lt;/td&gt; &#xA;   &lt;td&gt;TIGER192 hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;semver&lt;/td&gt; &#xA;   &lt;td&gt;Semantic Versioning 2.0.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ulid&lt;/td&gt; &#xA;   &lt;td&gt;Universally Unique Lexicographically Sortable Identifier ULID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Comparisons:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;eq&lt;/td&gt; &#xA;   &lt;td&gt;Equals&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gt&lt;/td&gt; &#xA;   &lt;td&gt;Greater than&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gte&lt;/td&gt; &#xA;   &lt;td&gt;Greater than or equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lt&lt;/td&gt; &#xA;   &lt;td&gt;Less Than&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lte&lt;/td&gt; &#xA;   &lt;td&gt;Less Than or Equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ne&lt;/td&gt; &#xA;   &lt;td&gt;Not Equal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dir&lt;/td&gt; &#xA;   &lt;td&gt;Directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;file&lt;/td&gt; &#xA;   &lt;td&gt;File path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isdefault&lt;/td&gt; &#xA;   &lt;td&gt;Is Default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;len&lt;/td&gt; &#xA;   &lt;td&gt;Length&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;max&lt;/td&gt; &#xA;   &lt;td&gt;Maximum&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;min&lt;/td&gt; &#xA;   &lt;td&gt;Minimum&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;oneof&lt;/td&gt; &#xA;   &lt;td&gt;One Of&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;required&lt;/td&gt; &#xA;   &lt;td&gt;Required&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;required_if&lt;/td&gt; &#xA;   &lt;td&gt;Required If&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;required_unless&lt;/td&gt; &#xA;   &lt;td&gt;Required Unless&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;required_with&lt;/td&gt; &#xA;   &lt;td&gt;Required With&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;required_with_all&lt;/td&gt; &#xA;   &lt;td&gt;Required With All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;required_without&lt;/td&gt; &#xA;   &lt;td&gt;Required Without&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;required_without_all&lt;/td&gt; &#xA;   &lt;td&gt;Required Without All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excluded_if&lt;/td&gt; &#xA;   &lt;td&gt;Excluded If&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excluded_unless&lt;/td&gt; &#xA;   &lt;td&gt;Excluded Unless&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excluded_with&lt;/td&gt; &#xA;   &lt;td&gt;Excluded With&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excluded_with_all&lt;/td&gt; &#xA;   &lt;td&gt;Excluded With All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excluded_without&lt;/td&gt; &#xA;   &lt;td&gt;Excluded Without&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;excluded_without_all&lt;/td&gt; &#xA;   &lt;td&gt;Excluded Without All&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;unique&lt;/td&gt; &#xA;   &lt;td&gt;Unique&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Aliases:&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iscolor&lt;/td&gt; &#xA;   &lt;td&gt;hexcolor|rgb|rgba|hsl|hsla&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;country_code&lt;/td&gt; &#xA;   &lt;td&gt;iso3166_1_alpha2|iso3166_1_alpha3|iso3166_1_alpha_numeric&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;h6&gt;Run on MacBook Pro (15-inch, 2017) go version go1.10.2 darwin/amd64&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;goos: darwin&#xA;goarch: amd64&#xA;pkg: github.com/go-playground/validator&#xA;BenchmarkFieldSuccess-8                                         20000000                83.6 ns/op             0 B/op          0 allocs/op&#xA;BenchmarkFieldSuccessParallel-8                                 50000000                26.8 ns/op             0 B/op          0 allocs/op&#xA;BenchmarkFieldFailure-8                                          5000000               291 ns/op             208 B/op          4 allocs/op&#xA;BenchmarkFieldFailureParallel-8                                 20000000               107 ns/op             208 B/op          4 allocs/op&#xA;BenchmarkFieldArrayDiveSuccess-8                                 2000000               623 ns/op             201 B/op         11 allocs/op&#xA;BenchmarkFieldArrayDiveSuccessParallel-8                        10000000               237 ns/op             201 B/op         11 allocs/op&#xA;BenchmarkFieldArrayDiveFailure-8                                 2000000               859 ns/op             412 B/op         16 allocs/op&#xA;BenchmarkFieldArrayDiveFailureParallel-8                         5000000               335 ns/op             413 B/op         16 allocs/op&#xA;BenchmarkFieldMapDiveSuccess-8                                   1000000              1292 ns/op             432 B/op         18 allocs/op&#xA;BenchmarkFieldMapDiveSuccessParallel-8                           3000000               467 ns/op             432 B/op         18 allocs/op&#xA;BenchmarkFieldMapDiveFailure-8                                   1000000              1082 ns/op             512 B/op         16 allocs/op&#xA;BenchmarkFieldMapDiveFailureParallel-8                           5000000               425 ns/op             512 B/op         16 allocs/op&#xA;BenchmarkFieldMapDiveWithKeysSuccess-8                           1000000              1539 ns/op             480 B/op         21 allocs/op&#xA;BenchmarkFieldMapDiveWithKeysSuccessParallel-8                   3000000               613 ns/op             480 B/op         21 allocs/op&#xA;BenchmarkFieldMapDiveWithKeysFailure-8                           1000000              1413 ns/op             721 B/op         21 allocs/op&#xA;BenchmarkFieldMapDiveWithKeysFailureParallel-8                   3000000               575 ns/op             721 B/op         21 allocs/op&#xA;BenchmarkFieldCustomTypeSuccess-8                               10000000               216 ns/op              32 B/op          2 allocs/op&#xA;BenchmarkFieldCustomTypeSuccessParallel-8                       20000000                82.2 ns/op            32 B/op          2 allocs/op&#xA;BenchmarkFieldCustomTypeFailure-8                                5000000               274 ns/op             208 B/op          4 allocs/op&#xA;BenchmarkFieldCustomTypeFailureParallel-8                       20000000               116 ns/op             208 B/op          4 allocs/op&#xA;BenchmarkFieldOrTagSuccess-8                                     2000000               740 ns/op              16 B/op          1 allocs/op&#xA;BenchmarkFieldOrTagSuccessParallel-8                             3000000               474 ns/op              16 B/op          1 allocs/op&#xA;BenchmarkFieldOrTagFailure-8                                     3000000               471 ns/op             224 B/op          5 allocs/op&#xA;BenchmarkFieldOrTagFailureParallel-8                             3000000               414 ns/op             224 B/op          5 allocs/op&#xA;BenchmarkStructLevelValidationSuccess-8                         10000000               213 ns/op              32 B/op          2 allocs/op&#xA;BenchmarkStructLevelValidationSuccessParallel-8                 20000000                91.8 ns/op            32 B/op          2 allocs/op&#xA;BenchmarkStructLevelValidationFailure-8                          3000000               473 ns/op             304 B/op          8 allocs/op&#xA;BenchmarkStructLevelValidationFailureParallel-8                 10000000               234 ns/op             304 B/op          8 allocs/op&#xA;BenchmarkStructSimpleCustomTypeSuccess-8                         5000000               385 ns/op              32 B/op          2 allocs/op&#xA;BenchmarkStructSimpleCustomTypeSuccessParallel-8                10000000               161 ns/op              32 B/op          2 allocs/op&#xA;BenchmarkStructSimpleCustomTypeFailure-8                         2000000               640 ns/op             424 B/op          9 allocs/op&#xA;BenchmarkStructSimpleCustomTypeFailureParallel-8                 5000000               318 ns/op             440 B/op         10 allocs/op&#xA;BenchmarkStructFilteredSuccess-8                                 2000000               597 ns/op             288 B/op          9 allocs/op&#xA;BenchmarkStructFilteredSuccessParallel-8                        10000000               266 ns/op             288 B/op          9 allocs/op&#xA;BenchmarkStructFilteredFailure-8                                 3000000               454 ns/op             256 B/op          7 allocs/op&#xA;BenchmarkStructFilteredFailureParallel-8                        10000000               214 ns/op             256 B/op          7 allocs/op&#xA;BenchmarkStructPartialSuccess-8                                  3000000               502 ns/op             256 B/op          6 allocs/op&#xA;BenchmarkStructPartialSuccessParallel-8                         10000000               225 ns/op             256 B/op          6 allocs/op&#xA;BenchmarkStructPartialFailure-8                                  2000000               702 ns/op             480 B/op         11 allocs/op&#xA;BenchmarkStructPartialFailureParallel-8                          5000000               329 ns/op             480 B/op         11 allocs/op&#xA;BenchmarkStructExceptSuccess-8                                   2000000               793 ns/op             496 B/op         12 allocs/op&#xA;BenchmarkStructExceptSuccessParallel-8                          10000000               193 ns/op             240 B/op          5 allocs/op&#xA;BenchmarkStructExceptFailure-8                                   2000000               639 ns/op             464 B/op         10 allocs/op&#xA;BenchmarkStructExceptFailureParallel-8                           5000000               300 ns/op             464 B/op         10 allocs/op&#xA;BenchmarkStructSimpleCrossFieldSuccess-8                         3000000               417 ns/op              72 B/op          3 allocs/op&#xA;BenchmarkStructSimpleCrossFieldSuccessParallel-8                10000000               163 ns/op              72 B/op          3 allocs/op&#xA;BenchmarkStructSimpleCrossFieldFailure-8                         2000000               645 ns/op             304 B/op          8 allocs/op&#xA;BenchmarkStructSimpleCrossFieldFailureParallel-8                 5000000               285 ns/op             304 B/op          8 allocs/op&#xA;BenchmarkStructSimpleCrossStructCrossFieldSuccess-8              3000000               588 ns/op              80 B/op          4 allocs/op&#xA;BenchmarkStructSimpleCrossStructCrossFieldSuccessParallel-8     10000000               221 ns/op              80 B/op          4 allocs/op&#xA;BenchmarkStructSimpleCrossStructCrossFieldFailure-8              2000000               868 ns/op             320 B/op          9 allocs/op&#xA;BenchmarkStructSimpleCrossStructCrossFieldFailureParallel-8      5000000               337 ns/op             320 B/op          9 allocs/op&#xA;BenchmarkStructSimpleSuccess-8                                   5000000               260 ns/op               0 B/op          0 allocs/op&#xA;BenchmarkStructSimpleSuccessParallel-8                          20000000                90.6 ns/op             0 B/op          0 allocs/op&#xA;BenchmarkStructSimpleFailure-8                                   2000000               619 ns/op             424 B/op          9 allocs/op&#xA;BenchmarkStructSimpleFailureParallel-8                           5000000               296 ns/op             424 B/op          9 allocs/op&#xA;BenchmarkStructComplexSuccess-8                                  1000000              1454 ns/op             128 B/op          8 allocs/op&#xA;BenchmarkStructComplexSuccessParallel-8                          3000000               579 ns/op             128 B/op          8 allocs/op&#xA;BenchmarkStructComplexFailure-8                                   300000              4140 ns/op            3041 B/op         53 allocs/op&#xA;BenchmarkStructComplexFailureParallel-8                          1000000              2127 ns/op            3041 B/op         53 allocs/op&#xA;BenchmarkOneof-8                                                10000000               140 ns/op               0 B/op          0 allocs/op&#xA;BenchmarkOneofParallel-8                                        20000000                70.1 ns/op             0 B/op          0 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Complementary Software&lt;/h2&gt; &#xA;&lt;p&gt;Here is a list of software that complements using this library either pre or post validation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/form&#34;&gt;form&lt;/a&gt; - Decodes url.Values into Go value(s) and Encodes Go value(s) into url.Values. Dual Array and Full map support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/mold&#34;&gt;mold&lt;/a&gt; - A general library to help modify or set data within data structures and other objects&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Make a pull request...&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under MIT License, please see license file within the code for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;This project has grown large enough that more than one person is required to properly support the community. If you are interested in becoming a maintainer please reach out to me &lt;a href=&#34;https://github.com/deankarn&#34;&gt;https://github.com/deankarn&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kubernetes/ingress-nginx</title>
    <updated>2022-09-16T01:35:52Z</updated>
    <id>tag:github.com,2022-09-16:/kubernetes/ingress-nginx</id>
    <link href="https://github.com/kubernetes/ingress-nginx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ingress-NGINX Controller for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ingress NGINX Controller&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5691&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/5691/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/kubernetes/ingress-nginx&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/kubernetes/ingress-nginx&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kubernetes/ingress-nginx.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/kubernetes/ingress-nginx.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/raw/main/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-orange.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fkubernetes%2Fingress-nginx?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fkubernetes%2Fingress-nginx.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please fill out our 2022 Ingress-Nginx User Survey and let us know what you want to see in future releases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.surveymonkey.com/r/ingressngx2022&#34;&gt;https://www.surveymonkey.com/r/ingressngx2022&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;ingress-nginx is an Ingress controller for Kubernetes using &lt;a href=&#34;https://www.nginx.org/&#34;&gt;NGINX&lt;/a&gt; as a reverse proxy and load balancer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/&#34;&gt;Learn more about Ingress on the main Kubernetes documentation site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://kubernetes.github.io/ingress-nginx/deploy/&#34;&gt;Getting Started&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter issues, review the &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/docs/troubleshooting.md&#34;&gt;troubleshooting docs&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/issues&#34;&gt;file an issue&lt;/a&gt;, or talk to us on the &lt;a href=&#34;https://kubernetes.slack.com/messages/ingress-nginx&#34;&gt;#ingress-nginx channel&lt;/a&gt; on the Kubernetes Slack server.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/releases&#34;&gt;the list of releases&lt;/a&gt; to find out about feature changes. For detailed changes for each release; please check the &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/Changelog.md&#34;&gt;Changelog.md&lt;/a&gt; file. For detailed changes on the &lt;code&gt;ingress-nginx&lt;/code&gt; helm chart, please check the following &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/charts/ingress-nginx/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Support Versions table&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Ingress-NGINX version&lt;/th&gt; &#xA;   &lt;th&gt;k8s supported version&lt;/th&gt; &#xA;   &lt;th&gt;Alpine Version&lt;/th&gt; &#xA;   &lt;th&gt;Nginx Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.3.1&lt;/td&gt; &#xA;   &lt;td&gt;1.24, 1.23, 1.22, 1.21, 1.20&lt;/td&gt; &#xA;   &lt;td&gt;3.16.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.10â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.3.0&lt;/td&gt; &#xA;   &lt;td&gt;1.24, 1.23, 1.22, 1.21, 1.20&lt;/td&gt; &#xA;   &lt;td&gt;3.16.0&lt;/td&gt; &#xA;   &lt;td&gt;1.19.10â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.2.1&lt;/td&gt; &#xA;   &lt;td&gt;1.23, 1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.6&lt;/td&gt; &#xA;   &lt;td&gt;1.19.10â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.1.3&lt;/td&gt; &#xA;   &lt;td&gt;1.23, 1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.4&lt;/td&gt; &#xA;   &lt;td&gt;1.19.10â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.1.2&lt;/td&gt; &#xA;   &lt;td&gt;1.23, 1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.9â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.1.1&lt;/td&gt; &#xA;   &lt;td&gt;1.23, 1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.9â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.1.0&lt;/td&gt; &#xA;   &lt;td&gt;1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.9â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.0.5&lt;/td&gt; &#xA;   &lt;td&gt;1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.9â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.0.4&lt;/td&gt; &#xA;   &lt;td&gt;1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.9â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.0.3&lt;/td&gt; &#xA;   &lt;td&gt;1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.9â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.0.2&lt;/td&gt; &#xA;   &lt;td&gt;1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.9â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.0.1&lt;/td&gt; &#xA;   &lt;td&gt;1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.14.2&lt;/td&gt; &#xA;   &lt;td&gt;1.19.9â€ &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.0.0&lt;/td&gt; &#xA;   &lt;td&gt;1.22, 1.21, 1.20, 1.19&lt;/td&gt; &#xA;   &lt;td&gt;3.13.5&lt;/td&gt; &#xA;   &lt;td&gt;1.20.1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;â€  &lt;em&gt;This build is &lt;a href=&#34;https://github.com/openresty/openresty/commit/4b5ec7edd78616f544abc194308e0cf4b788725b#diff-42ef841dc27fe0b5aa2d06bd31308bb63a59cdcddcbcddd917248349d22020a3&#34;&gt;patched against CVE-2021-23017&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://kubernetes.io/blog/2021/07/26/update-with-ingress-nginx/&#34;&gt;this article&lt;/a&gt; if you want upgrade to the stable Ingress API.&lt;/p&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for taking the time to join our community and start contributing!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This project adheres to the &lt;a href=&#34;https://git.k8s.io/community/code-of-conduct.md&#34;&gt;Kubernetes Community Code of Conduct&lt;/a&gt;. By participating in this project, you agree to abide by its terms.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Contributing&lt;/strong&gt;: Contributions of all kind are welcome!&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for information about setting up your environment, the workflow that we expect, and instructions on the developer certificate of origin that we require.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Join our Kubernetes Slack channel for developer discussion : &lt;a href=&#34;https://kubernetes.slack.com/archives/C021E147ZA4&#34;&gt;#ingress-nginx-dev&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Submit github issues for any feature enhancements, bugs or documentation problems. Please make sure to read the &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/raw/main/CONTRIBUTING.md#issue-reporting-guidelines&#34;&gt;Issue Reporting Checklist&lt;/a&gt; before opening an issue. Issues not conforming to the guidelines &lt;strong&gt;may be closed immediately&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Support&lt;/strong&gt;: Join the &lt;a href=&#34;https://kubernetes.slack.com/messages/CANQGM8BA/&#34;&gt;#ingress-nginx-users&lt;/a&gt; channel inside the &lt;a href=&#34;http://slack.kubernetes.io/&#34;&gt;Kubernetes Slack&lt;/a&gt; to ask questions or get support from the maintainers and other users.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The &lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/issues&#34;&gt;GitHub issues&lt;/a&gt; in the repository are &lt;strong&gt;exclusively&lt;/strong&gt; for bug reports and feature requests.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Discuss&lt;/strong&gt;: Tweet using the &lt;code&gt;#IngressNginx&lt;/code&gt; hashtag.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/ingress-nginx/raw/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-gorm/gen</title>
    <updated>2022-09-16T01:35:52Z</updated>
    <id>tag:github.com,2022-09-16:/go-gorm/gen</id>
    <link href="https://github.com/go-gorm/gen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gen: Friendly &amp; Safer GORM powered by Code Generation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GORM/GEN&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-gorm/gen/raw/master/go.mod&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/go-gorm/gen&#34; alt=&#34;GoVersion&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-gorm/gen/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/go-gorm/gen&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/gorm.io/gen?tab=doc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-blue?logo=go&amp;amp;logoColor=white&#34; alt=&#34;Go.Dev reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/go-gorm/gen&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/go-gorm/gen&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;MIT license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-gorm/gen/issues?q=is%3Aopen+is%3Aissue&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/go-gorm/gen&#34; alt=&#34;OpenIssue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-gorm/gen/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed/go-gorm/gen&#34; alt=&#34;ClosedIssue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.tickgit.com/browse?repo=github.com/go-gorm/gen&#34;&gt;&lt;img src=&#34;https://badgen.net/https/api.tickgit.com/badgen/github.com/go-gorm/gen&#34; alt=&#34;TODOs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gen: Friendly &amp;amp; Safer &lt;a href=&#34;https://github.com/go-gorm/gorm&#34;&gt;GORM&lt;/a&gt; powered by Code Generation.&lt;/p&gt; &#xA;&lt;h2&gt;Multilingual README&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/README.md&#34;&gt;English Version&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/README.ZH_CN.md&#34;&gt;ä¸­æ–‡ç‰ˆæœ¬&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CRUD or DIY query method code generation&lt;/li&gt; &#xA; &lt;li&gt;Auto migration from database to code&lt;/li&gt; &#xA; &lt;li&gt;Transactions, Nested Transactions, Save Point, RollbackTo to Saved Point&lt;/li&gt; &#xA; &lt;li&gt;Competely compatible with GORM&lt;/li&gt; &#xA; &lt;li&gt;Developer Friendly&lt;/li&gt; &#xA; &lt;li&gt;Multiple Generate modes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#gormgen&#34;&gt;GORM/GEN&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#multilingual-readme&#34;&gt;Multilingual README&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#contents&#34;&gt;Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#quick-start&#34;&gt;Quick start&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#project-directory&#34;&gt;Project Directory&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#api-examples&#34;&gt;API Examples&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#generate&#34;&gt;Generate&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#generate-mode&#34;&gt;Generate Mode&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#generate-model&#34;&gt;Generate Model&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#data-mapping&#34;&gt;Data Mapping&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#field-expression&#34;&gt;Field Expression&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#create-field&#34;&gt;Create Field&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#crud-api&#34;&gt;CRUD API&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#create&#34;&gt;Create&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#create-record&#34;&gt;Create record&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#create-record-with-selected-fields&#34;&gt;Create record with selected fields&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#batch-insert&#34;&gt;Batch Insert&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#query&#34;&gt;Query&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#retrieving-a-single-object&#34;&gt;Retrieving a single object&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#retrieving-objects-with-primary-key&#34;&gt;Retrieving objects with primary key&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#retrieving-all-objects&#34;&gt;Retrieving all objects&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#conditions&#34;&gt;Conditions&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#string-conditions&#34;&gt;String Conditions&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#inline-condition&#34;&gt;Inline Condition&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#not-conditions&#34;&gt;Not Conditions&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#or-conditions&#34;&gt;Or Conditions&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#group-conditions&#34;&gt;Group Conditions&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#selecting-specific-fields&#34;&gt;Selecting Specific Fields&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#tuple-query&#34;&gt;Tuple Query&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#json-query&#34;&gt;JSON Query&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#order&#34;&gt;Order&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#limit--offset&#34;&gt;Limit &amp;amp; Offset&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#group-by--having&#34;&gt;Group By &amp;amp; Having&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#distinct&#34;&gt;Distinct&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#joins&#34;&gt;Joins&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#subquery&#34;&gt;SubQuery&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#from-subquery&#34;&gt;From SubQuery&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#update-from-subquery&#34;&gt;Update from SubQuery&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#update-multiple-columns-from-subquery&#34;&gt;Update multiple columns from SubQuery&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#transaction&#34;&gt;Transaction&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#nested-transactions&#34;&gt;Nested Transactions&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#transactions-by-manual&#34;&gt;Transactions by manual&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#savepointrollbackto&#34;&gt;SavePoint/RollbackTo&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#advanced-query&#34;&gt;Advanced Query&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#iteration&#34;&gt;Iteration&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#findinbatches&#34;&gt;FindInBatches&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#pluck&#34;&gt;Pluck&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#scopes&#34;&gt;Scopes&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#count&#34;&gt;Count&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#firstorinit&#34;&gt;FirstOrInit&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#firstorcreate&#34;&gt;FirstOrCreate&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#association&#34;&gt;Association&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#relation&#34;&gt;Relation&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#relate-to-exist-model&#34;&gt;Relate to exist model&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#relate-to-table-in-database&#34;&gt;Relate to table in database&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#relate-config&#34;&gt;Relate Config&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#operation&#34;&gt;Operation&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#skip-auto-createupdate&#34;&gt;Skip Auto Create/Update&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#find-associations&#34;&gt;Find Associations&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#append-associations&#34;&gt;Append Associations&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#replace-associations&#34;&gt;Replace Associations&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#delete-associations&#34;&gt;Delete Associations&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#clear-associations&#34;&gt;Clear Associations&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#count-associations&#34;&gt;Count Associations&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#delete-with-select&#34;&gt;Delete with Select&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#preloading&#34;&gt;Preloading&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#preload&#34;&gt;Preload&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#preload-all&#34;&gt;Preload All&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#preload-with-select&#34;&gt;Preload with select&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#preload-with-conditions&#34;&gt;Preload with conditions&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#nested-preloading&#34;&gt;Nested Preloading&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#update&#34;&gt;Update&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#update-single-column&#34;&gt;Update single column&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#updates-multiple-columns&#34;&gt;Updates multiple columns&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#update-selected-fields&#34;&gt;Update selected fields&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#delete&#34;&gt;Delete&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#delete-record&#34;&gt;Delete record&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#delete-with-primary-key&#34;&gt;Delete with primary key&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#batch-delete&#34;&gt;Batch Delete&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#soft-delete&#34;&gt;Soft Delete&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#find-soft-deleted-records&#34;&gt;Find soft deleted records&lt;/a&gt;&lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#delete-permanently&#34;&gt;Delete permanently&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#diy-method&#34;&gt;DIY method&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#method-interface&#34;&gt;Method interface&lt;/a&gt; &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#syntax-of-template&#34;&gt;Syntax of template&lt;/a&gt; &#xA;          &lt;ul&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#placeholder&#34;&gt;placeholder&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#template&#34;&gt;template&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#if-clause&#34;&gt;&lt;code&gt;If&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#where-clause&#34;&gt;&lt;code&gt;Where&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#set-clause&#34;&gt;&lt;code&gt;Set&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;           &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#for-clause&#34;&gt;&lt;code&gt;For&lt;/code&gt; clause&lt;/a&gt;&lt;/li&gt; &#xA;          &lt;/ul&gt; &lt;/li&gt; &#xA;         &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#method-interface-example&#34;&gt;Method interface example&lt;/a&gt;&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#unit-test&#34;&gt;Unit Test&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#smart-select-fields&#34;&gt;Smart select fields&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#advanced-topics&#34;&gt;Advanced Topics&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#hints&#34;&gt;Hints&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#binary&#34;&gt;Binary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#maintainers&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Gen package, you need to install Go and set your Go workspace first.&lt;/p&gt; &#xA;&lt;p&gt;1.The first need Go installed(version 1.14 or higher is required), then you can use the below Go command to install Gen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u gorm.io/gen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.Import it in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;gorm.io/gen&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Emphasis&lt;/strong&gt;: All use cases in this doc are generated under &lt;code&gt;WithContext&lt;/code&gt; mode. And if you generate code under &lt;code&gt;WithoutContext&lt;/code&gt; mode, please remove &lt;code&gt;WithContext(ctx)&lt;/code&gt; before you call any query method, it helps you make code more concise.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# assume the following code in generate.go file&#xA;$ cat generate.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;gorm.io/gen&#34;&#xA;&#xA;// generate code&#xA;func main() {&#xA;    // specify the output directory (default: &#34;./query&#34;)&#xA;    // ### if you want to query without context constrain, set mode gen.WithoutContext ###&#xA;    g := gen.NewGenerator(gen.Config{&#xA;        OutPath: &#34;../dal/query&#34;,&#xA;        /* Mode: gen.WithoutContext|gen.WithDefaultQuery*/&#xA;        //if you want the nullable field generation property to be pointer type, set FieldNullable true&#xA;        /* FieldNullable: true,*/&#xA;        //if you want to assign field which has default value in `Create` API, set FieldCoverable true, reference: https://gorm.io/docs/create.html#Default-Values&#xA;        /* FieldCoverable: true,*/&#xA;        // if you want generate field with unsigned integer type, set FieldSignable true&#xA;        /* FieldSignable: true,*/&#xA;        //if you want to generate index tags from database, set FieldWithIndexTag true&#xA;        /* FieldWithIndexTag: true,*/&#xA;        //if you want to generate type tags from database, set FieldWithTypeTag true&#xA;        /* FieldWithTypeTag: true,*/&#xA;        //if you need unit tests for query code, set WithUnitTest true&#xA;        /* WithUnitTest: true, */&#xA;    })&#xA;  &#xA;    // reuse the database connection in Project or create a connection here&#xA;    // if you want to use GenerateModel/GenerateModelAs, UseDB is necessary or it will panic&#xA;    // db, _ := gorm.Open(mysql.Open(&#34;root:@(127.0.0.1:3306)/demo?charset=utf8mb4&amp;amp;parseTime=True&amp;amp;loc=Local&#34;))&#xA;    g.UseDB(db)&#xA;  &#xA;    // apply basic crud api on structs or table models which is specified by table name with function&#xA;    // GenerateModel/GenerateModelAs. And generator will generate table models&#39; code when calling Excute.&#xA;    g.ApplyBasic(model.User{}, g.GenerateModel(&#34;company&#34;), g.GenerateModelAs(&#34;people&#34;, &#34;Person&#34;, gen.FieldIgnore(&#34;address&#34;)))&#xA;    &#xA;    // apply diy interfaces on structs or table models&#xA;    g.ApplyInterface(func(method model.Method) {}, model.User{}, g.GenerateModel(&#34;company&#34;))&#xA;&#xA;    // execute the action of code generation&#xA;    g.Execute()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate Mode:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gen.WithoutContext&lt;/code&gt; generate code without &lt;code&gt;WithContext&lt;/code&gt; constraint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gen.WithDefaultQuery&lt;/code&gt; generate code with a default global variable &lt;code&gt;Q&lt;/code&gt; as a singleton&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Project Directory&lt;/h3&gt; &#xA;&lt;p&gt;Here is a template for best practices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;demo&#xA;â”œâ”€â”€ cmd&#xA;â”‚   â””â”€â”€ generate&#xA;â”‚       â””â”€â”€ generate.go # execute it will generate codes&#xA;â”œâ”€â”€ dal&#xA;â”‚   â”œâ”€â”€ dal.go # create connections with database server here&#xA;â”‚   â”œâ”€â”€ model&#xA;â”‚   â”‚   â”œâ”€â”€ method.go # DIY method interfaces&#xA;â”‚   â”‚   â””â”€â”€ model.go  # store struct which corresponding to the database table&#xA;â”‚   â””â”€â”€ query  # generated code&#39;s directory&#xA;|       â”œâ”€â”€ user.gen.go # generated code for user&#xA;â”‚       â””â”€â”€ gen.go # generated code&#xA;|       â””â”€â”€ user.gen_test.go # generated unit test&#xA;â”œâ”€â”€ biz&#xA;â”‚   â””â”€â”€ query.go # call function in dal/gorm_generated.go and query databases&#xA;â”œâ”€â”€ config&#xA;â”‚   â””â”€â”€ config.go # DSN for database server&#xA;â”œâ”€â”€ generate.sh # a shell to execute cmd/generate&#xA;â”œâ”€â”€ go.mod&#xA;â”œâ”€â”€ go.sum&#xA;â””â”€â”€ main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Generate&lt;/h3&gt; &#xA;&lt;h4&gt;Generate Mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt; g := gen.NewGenerator(gen.Config{&#xA;        ...&#xA;        Mode: gen.WithoutContext|gen.WithDefaultQuery|gen.WithQueryInterface,&#xA;        ...&#xA; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WithDefaultQuery&lt;/code&gt; generate default query struct&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithoutContext&lt;/code&gt; generate code without context constrain&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithQueryInterface&lt;/code&gt; generate interface instead of struct for querying&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Generate Model&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// generate a model struct map to table `people` in database&#xA;g.GenerateModel(&#34;people&#34;)&#xA;&#xA;// generate a struct and specify struct&#39;s name&#xA;g.GenerateModelAs(&#34;people&#34;, &#34;People&#34;)&#xA;&#xA;// add option to ignore field&#xA;g.GenerateModel(&#34;people&#34;, gen.FieldIgnore(&#34;address&#34;), gen.FieldType(&#34;id&#34;, &#34;int64&#34;))&#xA;&#xA;// generate all tables, ex: g.ApplyBasic(g.GenerateAllTable()...)&#xA;g.GenerateAllTable()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Field Generate &lt;strong&gt;Options&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;FieldNew           // create new field&#xA;FieldIgnore        // ignore field&#xA;FieldIgnoreReg     // ignore field (match with regexp)&#xA;FieldRename        // rename field in struct&#xA;FieldComment       // specify field comment in generated struct&#xA;FieldType          // specify field type&#xA;FieldTypeReg       // specify field type (match with regexp)&#xA;FieldGenType       // specify field gen type&#xA;FieldGenTypeReg    // specify field gen type (match with regexp)&#xA;FieldTag           // specify gorm and json tag&#xA;FieldJSONTag       // specify json tag&#xA;FieldJSONTagWithNS // specify new tag with name strategy&#xA;FieldGORMTag       // specify gorm tag&#xA;FieldNewTag        // append new tag&#xA;FieldNewTagWithNS  // specify new tag with name strategy&#xA;FieldTrimPrefix    // trim column prefix&#xA;FieldTrimSuffix    // trim column suffix&#xA;FieldAddPrefix     // add prefix to struct field&#39;s name&#xA;FieldAddSuffix     // add suffix to struct field&#39;s name&#xA;FieldRelate        // specify relationship with other tables&#xA;FieldRelateModel   // specify relationship with exist models&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate model bind custom method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;type User struct{&#xA;&#x9;ID int32&#xA;}&#xA;func (u *User)IsEmpty()bool{&#xA;    if u == nil {&#xA;    return true&#xA;    }&#xA;    return u.ID == 0&#xA;}&#xA;user := User{}&#xA;// add custom method to generated model struct&#xA;g.GenerateModel(&#34;people&#34;, gen.WithMethod(user.IsEmpty))&#xA;// also you can input a struct,will bind all method&#xA;g.GenerateModel(&#34;people&#34;, gen.WithMethod(user))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate model with custom gen type&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;//package model&#xA;type ITime struct {&#xA;    time.Time&#xA;}&#xA;&#xA;// custom field type and gen type for table&#xA;g.ApplyBasic(g.GenerateModel(&#34;people&#34;, gen.FieldType(&#34;create_time&#34;,&#34;model.ITime&#34;), gen.FieldGenType(&#34;create_time&#34;,&#34;Time&#34;)))&#xA;&#xA;//package model&#xA;type User struct {&#xA;  ID int64&#xA;  Name string&#xA;  CreateTime ITime&#xA;}&#xA;&#xA;func (u User) GetFieldGenType(f *schema.Field) string {&#xA;  if f.Name == &#34;CreateTime&#34; {&#xA;    return &#34;Time&#34;&#xA;  }&#xA;  return &#34;&#34;&#xA;}&#xA;// custom field gen type for struct&#xA;g.ApplyBasic(model.User{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Data Mapping&lt;/h4&gt; &#xA;&lt;p&gt;Specify data mapping relationship to be whatever you want.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;dataMap := map[string]func(detailType string) (dataType string){&#xA;  &#34;int&#34;: func(detailType string) (dataType string) { return &#34;int64&#34; },&#xA;  // bool mapping&#xA;  &#34;tinyint&#34;: func(detailType string) (dataType string) {&#xA;    if strings.HasPrefix(detailType, &#34;tinyint(1)&#34;) {&#xA;      return &#34;bool&#34;&#xA;    }&#xA;    return &#34;int8&#34;&#xA;  },&#xA;}&#xA;&#xA;g.WithDataTypeMap(dataMap)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Field Expression&lt;/h3&gt; &#xA;&lt;h4&gt;Create Field&lt;/h4&gt; &#xA;&lt;p&gt;Actually, you&#39;re not supposed to create a new field variable, cause it will be accomplished in generated code.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field Type&lt;/th&gt; &#xA;   &lt;th&gt;Detail Type&lt;/th&gt; &#xA;   &lt;th&gt;Create Function&lt;/th&gt; &#xA;   &lt;th&gt;Supported Query Method&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;generic&lt;/td&gt; &#xA;   &lt;td&gt;field&lt;/td&gt; &#xA;   &lt;td&gt;NewField&lt;/td&gt; &#xA;   &lt;td&gt;IsNull/IsNotNull/Count/Eq/Neq/Gt/Gte/Lt/Lte/Like&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;int/int8/.../int64&lt;/td&gt; &#xA;   &lt;td&gt;NewInt/NewInt8/.../NewInt64&lt;/td&gt; &#xA;   &lt;td&gt;Eq/Neq/Gt/Gte/Lt/Lte/In/NotIn/Between/NotBetween/Like/NotLike/Add/Sub/Mul/Div/Mod/FloorDiv/RightShift/LeftShift/BitXor/BitAnd/BitOr/BitFlip&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uint&lt;/td&gt; &#xA;   &lt;td&gt;uint/uint8/.../uint64&lt;/td&gt; &#xA;   &lt;td&gt;NewUint/NewUint8/.../NewUint64&lt;/td&gt; &#xA;   &lt;td&gt;same with int&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;float32/float64&lt;/td&gt; &#xA;   &lt;td&gt;NewFloat32/NewFloat64&lt;/td&gt; &#xA;   &lt;td&gt;Eq/Neq/Gt/Gte/Lt/Lte/In/NotIn/Between/NotBetween/Like/NotLike/Add/Sub/Mul/Div/FloorDiv&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;string/[]byte&lt;/td&gt; &#xA;   &lt;td&gt;NewString/NewBytes&lt;/td&gt; &#xA;   &lt;td&gt;Eq/Neq/Gt/Gte/Lt/Lte/Between/NotBetween/In(val/NotIn(val/Like/NotLike/Regexp/NotRegxp/FindInSet/FindInSetWith&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;NewBool&lt;/td&gt; &#xA;   &lt;td&gt;Not/Is/And/Or/Xor/BitXor/BitAnd/BitOr&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;time&lt;/td&gt; &#xA;   &lt;td&gt;time.Time&lt;/td&gt; &#xA;   &lt;td&gt;NewTime&lt;/td&gt; &#xA;   &lt;td&gt;Eq/Neq/Gt/Gte/Lt/Lte/Between/NotBetween/In/NotIn/Add/Sub&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Create field examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;gorm.io/gen/field&#34;&#xA;&#xA;// create a new generic field map to `generic_a`&#xA;a := field.NewField(&#34;table_name&#34;, &#34;generic_a&#34;)&#xA;&#xA;// create a field map to `id`&#xA;i := field.NewInt(&#34;user&#34;, &#34;id&#34;)&#xA;&#xA;// create a field map to `address`&#xA;s := field.NewString(&#34;user&#34;, &#34;address&#34;)&#xA;&#xA;// create a field map to `create_time`&#xA;t := field.NewTime(&#34;user&#34;, &#34;create_time&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CRUD API&lt;/h3&gt; &#xA;&lt;p&gt;Here is a basic struct &lt;code&gt;user&lt;/code&gt; and struct &lt;code&gt;DB&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// generated code&#xA;// generated code&#xA;// generated code&#xA;package query&#xA;&#xA;import &#34;gorm.io/gen&#34;&#xA;&#xA;// struct map to table `users` &#xA;type user struct {&#xA;    gen.DO&#xA;    ID       field.Uint&#xA;    Name     field.String&#xA;    Age      field.Int&#xA;    Address  field.Field&#xA;    Birthday field.Time&#xA;}&#xA;&#xA;// struct collection&#xA;type DB struct {&#xA;    db       *gorm.DB&#xA;    User     *user&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Create&lt;/h4&gt; &#xA;&lt;h5&gt;Create record&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// u refer to query.user&#xA;user := model.User{Name: &#34;Modi&#34;, Age: 18, Birthday: time.Now()}&#xA;&#xA;u := query.Use(db).User&#xA;err := u.WithContext(ctx).Create(&amp;amp;user) // pass pointer of data to Create&#xA;&#xA;err // returns error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create record with selected fields&lt;/h5&gt; &#xA;&lt;p&gt;Create a record and assign a value to the fields specified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;u.WithContext(ctx).Select(u.Name, u.Age).Create(&amp;amp;user)&#xA;// INSERT INTO `users` (`name`,`age`) VALUES (&#34;modi&#34;, 18)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a record and ignore the values for fields passed to omit&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;u.WithContext(ctx).Omit(u.Name, u.Age).Create(&amp;amp;user)&#xA;// INSERT INTO `users` (`Address`, `Birthday`) VALUES (&#34;2021-08-17 20:54:12.000&#34;, 18)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Batch Insert&lt;/h5&gt; &#xA;&lt;p&gt;To efficiently insert large number of records, pass a slice to the &lt;code&gt;Create&lt;/code&gt; method. GORM will generate a single SQL statement to insert all the data and backfill primary key values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var users = []*model.User{{Name: &#34;modi&#34;}, {Name: &#34;zhangqiang&#34;}, {Name: &#34;songyuan&#34;}}&#xA;query.Use(db).User.WithContext(ctx).Create(users...)&#xA;&#xA;for _, user := range users {&#xA;    user.ID // 1,2,3&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify batch size when creating with &lt;code&gt;CreateInBatches&lt;/code&gt;, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var users = []*User{{Name: &#34;modi_1&#34;}, ...., {Name: &#34;modi_10000&#34;}}&#xA;&#xA;// batch size 100&#xA;query.Use(db).User.WithContext(ctx).CreateInBatches(users, 100)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will works if you set &lt;code&gt;CreateBatchSize&lt;/code&gt; in &lt;code&gt;gorm.Config&lt;/code&gt; / &lt;code&gt;gorm.Session&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db, err := gorm.Open(sqlite.Open(&#34;gorm.db&#34;), &amp;amp;gorm.Config{&#xA;    CreateBatchSize: 1000,&#xA;})&#xA;// OR&#xA;db = db.Session(&amp;amp;gorm.Session{CreateBatchSize: 1000})&#xA;&#xA;u := query.NewUser(db)&#xA;&#xA;var users = []User{{Name: &#34;modi_1&#34;}, ...., {Name: &#34;modi_5000&#34;}}&#xA;&#xA;u.WithContext(ctx).Create(&amp;amp;users)&#xA;// INSERT INTO users xxx (5 batches)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Query&lt;/h4&gt; &#xA;&lt;h5&gt;Retrieving a single object&lt;/h5&gt; &#xA;&lt;p&gt;Generated code provides &lt;code&gt;First&lt;/code&gt;, &lt;code&gt;Take&lt;/code&gt;, &lt;code&gt;Last&lt;/code&gt; methods to retrieve a single object from the database, it adds &lt;code&gt;LIMIT 1&lt;/code&gt; condition when querying the database, and it will return the error &lt;code&gt;ErrRecordNotFound&lt;/code&gt; if no record is found.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// Get the first record ordered by primary key&#xA;user, err := u.WithContext(ctx).First()&#xA;// SELECT * FROM users ORDER BY id LIMIT 1;&#xA;&#xA;// Get one record, no specified order&#xA;user, err := u.WithContext(ctx).Take()&#xA;// SELECT * FROM users LIMIT 1;&#xA;&#xA;// Get last record, ordered by primary key desc&#xA;user, err := u.WithContext(ctx).Last()&#xA;// SELECT * FROM users ORDER BY id DESC LIMIT 1;&#xA;&#xA;// check error ErrRecordNotFound&#xA;errors.Is(err, gorm.ErrRecordNotFound)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Retrieving objects with primary key&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;user, err := u.WithContext(ctx).Where(u.ID.Eq(10)).First()&#xA;// SELECT * FROM users WHERE id = 10;&#xA;&#xA;users, err := u.WithContext(ctx).Where(u.ID.In(1,2,3)).Find()&#xA;// SELECT * FROM users WHERE id IN (1,2,3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the primary key is a string (for example, like a uuid), the query will be written as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;user, err := u.WithContext(ctx).Where(u.ID.Eq(&#34;1b74413f-f3b8-409f-ac47-e8c062e3472a&#34;)).First()&#xA;// SELECT * FROM users WHERE id = &#34;1b74413f-f3b8-409f-ac47-e8c062e3472a&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Retrieving all objects&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// Get all records&#xA;users, err := u.WithContext(ctx).Find()&#xA;// SELECT * FROM users;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Conditions&lt;/h5&gt; &#xA;&lt;h6&gt;String Conditions&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// Get first matched record&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).First()&#xA;// SELECT * FROM users WHERE name = &#39;modi&#39; ORDER BY id LIMIT 1;&#xA;&#xA;// Get all matched records&#xA;users, err := u.WithContext(ctx).Where(u.Name.Neq(&#34;modi&#34;)).Find()&#xA;// SELECT * FROM users WHERE name &amp;lt;&amp;gt; &#39;modi&#39;;&#xA;&#xA;// IN&#xA;users, err := u.WithContext(ctx).Where(u.Name.In(&#34;modi&#34;, &#34;zhangqiang&#34;)).Find()&#xA;// SELECT * FROM users WHERE name IN (&#39;modi&#39;,&#39;zhangqiang&#39;);&#xA;&#xA;// LIKE&#xA;users, err := u.WithContext(ctx).Where(u.Name.Like(&#34;%modi%&#34;)).Find()&#xA;// SELECT * FROM users WHERE name LIKE &#39;%modi%&#39;;&#xA;&#xA;// AND&#xA;users, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;), u.Age.Gte(17)).Find()&#xA;// SELECT * FROM users WHERE name = &#39;modi&#39; AND age &amp;gt;= 17;&#xA;&#xA;// Time&#xA;users, err := u.WithContext(ctx).Where(u.Birthday.Gt(birthTime).Find()&#xA;// SELECT * FROM users WHERE birthday &amp;gt; &#39;2000-01-01 00:00:00&#39;;&#xA;&#xA;// BETWEEN&#xA;users, err := u.WithContext(ctx).Where(u.Birthday.Between(lastWeek, today)).Find()&#xA;// SELECT * FROM users WHERE birthday BETWEEN &#39;2000-01-01 00:00:00&#39; AND &#39;2000-01-08 00:00:00&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Inline Condition&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// Get by primary key if it were a non-integer type&#xA;user, err := u.WithContext(ctx).Where(u.ID.Eq(&#34;string_primary_key&#34;)).First()&#xA;// SELECT * FROM users WHERE id = &#39;string_primary_key&#39;;&#xA;&#xA;// Plain SQL&#xA;users, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).Find()&#xA;// SELECT * FROM users WHERE name = &#34;modi&#34;;&#xA;&#xA;users, err := u.WithContext(ctx).Where(u.Name.Neq(&#34;modi&#34;), u.Age.Gt(17)).Find()&#xA;// SELECT * FROM users WHERE name &amp;lt;&amp;gt; &#34;modi&#34; AND age &amp;gt; 17;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Not Conditions&lt;/h6&gt; &#xA;&lt;p&gt;Build NOT conditions, works similar to &lt;code&gt;Where&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;user, err := u.WithContext(ctx).Not(u.Name.Eq(&#34;modi&#34;)).First()&#xA;// SELECT * FROM users WHERE NOT name = &#34;modi&#34; ORDER BY id LIMIT 1;&#xA;&#xA;// Not In&#xA;users, err := u.WithContext(ctx).Not(u.Name.In(&#34;modi&#34;, &#34;zhangqiang&#34;)).Find()&#xA;// SELECT * FROM users WHERE name NOT IN (&#34;modi&#34;, &#34;zhangqiang&#34;);&#xA;&#xA;// Not In slice of primary keys&#xA;user, err := u.WithContext(ctx).Not(u.ID.In(1,2,3)).First()&#xA;// SELECT * FROM users WHERE id NOT IN (1,2,3) ORDER BY id LIMIT 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Or Conditions&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;users, err := u.WithContext(ctx).Where(u.Role.Eq(&#34;admin&#34;)).Or(u.Role.Eq(&#34;super_admin&#34;)).Find()&#xA;// SELECT * FROM users WHERE role = &#39;admin&#39; OR role = &#39;super_admin&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Group Conditions&lt;/h6&gt; &#xA;&lt;p&gt;Easier to write complicated SQL query with Group Conditions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;p := query.Use(db).Pizza&#xA;pd := p.WithContext(ctx)&#xA;&#xA;pizzas, err := pd.Where(&#xA;    pd.Where(p.Pizza.Eq(&#34;pepperoni&#34;)).&#xA;        Where(pd.Where(p.Size.Eq(&#34;small&#34;)).Or(p.Size.Eq(&#34;medium&#34;))),&#xA;).Or(&#xA;    pd.Where(p.Pizza.Eq(&#34;hawaiian&#34;)).Where(p.Size.Eq(&#34;xlarge&#34;)),&#xA;).Find()&#xA;&#xA;// SELECT * FROM `pizzas` WHERE (pizza = &#34;pepperoni&#34; AND (size = &#34;small&#34; OR size = &#34;medium&#34;)) OR (pizza = &#34;hawaiian&#34; AND size = &#34;xlarge&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Selecting Specific Fields&lt;/h6&gt; &#xA;&lt;p&gt;&lt;code&gt;Select&lt;/code&gt; allows you to specify the fields that you want to retrieve from database. Otherwise, GORM will select all fields by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;users, err := u.WithContext(ctx).Select(u.Name, u.Age).Find()&#xA;// SELECT name, age FROM users;&#xA;&#xA;u.WithContext(ctx).Select(u.Age.Avg()).Rows()&#xA;// SELECT Avg(age) FROM users;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Tuple Query&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;users, err := u.WithContext(ctx).Where(u.WithContext(ctx).Columns(u.ID, u.Name).In(field.Values([][]interface{}{{1, &#34;modi&#34;}, {2, &#34;zhangqiang&#34;}}))).Find()&#xA;// SELECT * FROM `users` WHERE (`id`, `name`) IN ((1,&#39;humodi&#39;),(2,&#39;tom&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;JSON Query&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;users, err := u.WithContext(ctx).Where(gen.Cond(datatypes.JSONQuery(&#34;attributes&#34;).HasKey(&#34;role&#34;))...).Find()&#xA;// SELECT * FROM `users` WHERE JSON_EXTRACT(`attributes`,&#39;$.role&#39;) IS NOT NULL;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Order&lt;/h6&gt; &#xA;&lt;p&gt;Specify order when retrieving records from the database&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;users, err := u.WithContext(ctx).Order(u.Age.Desc(), u.Name).Find()&#xA;// SELECT * FROM users ORDER BY age DESC, name;&#xA;&#xA;// Multiple orders&#xA;users, err := u.WithContext(ctx).Order(u.Age.Desc()).Order(u.Name).Find()&#xA;// SELECT * FROM users ORDER BY age DESC, name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get field by string&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;orderCol, ok := u.GetFieldByName(orderColStr) // maybe orderColStr == &#34;id&#34;&#xA;if !ok {&#xA;  // User doesn&#39;t contains orderColStr&#xA;}&#xA;&#xA;users, err := u.WithContext(ctx).Order(orderCol).Find()&#xA;// SELECT * FROM users ORDER BY age;&#xA;&#xA;// OR Desc&#xA;users, err := u.WithContext(ctx).Order(orderCol.Desc()).Find()&#xA;// SELECT * FROM users ORDER BY age DESC;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Limit &amp;amp; Offset&lt;/h6&gt; &#xA;&lt;p&gt;&lt;code&gt;Limit&lt;/code&gt; specify the max number of records to retrieve &lt;code&gt;Offset&lt;/code&gt; specify the number of records to skip before starting to return the records&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;urers, err := u.WithContext(ctx).Limit(3).Find()&#xA;// SELECT * FROM users LIMIT 3;&#xA;&#xA;// Cancel limit condition with -1&#xA;users, err := u.WithContext(ctx).Limit(10).Limit(-1).Find()&#xA;// SELECT * FROM users;&#xA;&#xA;users, err := u.WithContext(ctx).Offset(3).Find()&#xA;// SELECT * FROM users OFFSET 3;&#xA;&#xA;users, err := u.WithContext(ctx).Limit(10).Offset(5).Find()&#xA;// SELECT * FROM users OFFSET 5 LIMIT 10;&#xA;&#xA;// Cancel offset condition with -1&#xA;users, err := u.WithContext(ctx).Offset(10).Offset(-1).Find()&#xA;// SELECT * FROM users;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Group By &amp;amp; Having&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;var users []struct {&#xA;    Name  string&#xA;    Total int&#xA;}&#xA;err := u.WithContext(ctx).Select(u.Name, u.ID.Count().As(&#34;total&#34;)).Group(u.Name).Scan(&amp;amp;users)&#xA;// SELECT name, count(id) as total FROM `users` GROUP BY `name`&#xA;&#xA;err := u.WithContext(ctx).Select(u.Name, u.Age.Sum().As(&#34;total&#34;)).Where(u.Name.Like(&#34;%modi%&#34;)).Group(u.Name).Scan(&amp;amp;users)&#xA;// SELECT name, sum(age) as total FROM `users` WHERE name LIKE &#34;%modi%&#34; GROUP BY `name`&#xA;&#xA;err := u.WithContext(ctx).Select(u.Name, u.Age.Sum().As(&#34;total&#34;)).Group(u.Name).Having(u.Name.Eq(&#34;group&#34;)).Scan(&amp;amp;users)&#xA;// SELECT name, sum(age) as total FROM `users` GROUP BY `name` HAVING name = &#34;group&#34;&#xA;&#xA;rows, err := u.WithContext(ctx).Select(u.Birthday.As(&#34;date&#34;), u.Age.Sum().As(&#34;total&#34;)).Group(u.Birthday).Rows()&#xA;for rows.Next() {&#xA;  ...&#xA;}&#xA;&#xA;o := query.Use(db).Order&#xA;&#xA;rows, err := o.WithContext(ctx).Select(o.CreateAt.Date().As(&#34;date&#34;), o.Amount.Sum().As(&#34;total&#34;)).Group(o.CreateAt.Date()).Having(u.Amount.Sum().Gt(100)).Rows()&#xA;for rows.Next() {&#xA;  ...&#xA;}&#xA;&#xA;var results []struct {&#xA;    Date  time.Time&#xA;    Total int&#xA;}&#xA;&#xA;o.WithContext(ctx).Select(o.CreateAt.Date().As(&#34;date&#34;), o.WithContext(ctx).Amount.Sum().As(&#34;total&#34;)).Group(o.CreateAt.Date()).Having(u.Amount.Sum().Gt(100)).Scan(&amp;amp;results)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Distinct&lt;/h6&gt; &#xA;&lt;p&gt;Selecting distinct values from the model&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;users, err := u.WithContext(ctx).Distinct(u.Name, u.Age).Order(u.Name, u.Age.Desc()).Find()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Distinct&lt;/code&gt; works with &lt;code&gt;Pluck&lt;/code&gt; and &lt;code&gt;Count&lt;/code&gt; too&lt;/p&gt; &#xA;&lt;h6&gt;Joins&lt;/h6&gt; &#xA;&lt;p&gt;Specify Joins conditions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;q := query.Use(db)&#xA;u := q.User&#xA;e := q.Email&#xA;c := q.CreditCard&#xA;&#xA;type Result struct {&#xA;    Name  string&#xA;    Email string&#xA;    ID    int64&#xA;}&#xA;&#xA;var result Result&#xA;&#xA;err := u.WithContext(ctx).Select(u.Name, e.Email).LeftJoin(e, e.UserID.EqCol(u.ID)).Scan(&amp;amp;result)&#xA;// SELECT users.name, emails.email FROM `users` left join emails on emails.user_id = users.id&#xA;&#xA;// self join&#xA;var result Result&#xA;u2 := u.As(&#34;u2&#34;)&#xA;err := u.WithContext(ctx).Select(u.Name, u2.ID).LeftJoin(u2, u2.ID.EqCol(u.ID)).Scan(&amp;amp;result)&#xA;// SELECT users.name, u2.id FROM `users` left join `users` u2 on u2.id = users.id&#xA;&#xA;//join with sub query&#xA;var result Result&#xA;e2 := e.As(&#34;e2&#34;)&#xA;err := u.WithContext(ctx).Select(u.Name, e2.Email).LeftJoin(e.WithContext(ctx).Select(e.Email, e.UserID).Where(e.UserID.Gt(100)).As(&#34;e2&#34;), e2.UserID.EqCol(u.ID)).Scan(&amp;amp;result)&#xA;// SELECT users.name, e2.email FROM `users` left join (select email,user_id from emails  where user_id &amp;gt; 100) as e2 on e2.user_id = users.id&#xA;&#xA;rows, err := u.WithContext(ctx).Select(u.Name, e.Email).LeftJoin(e, e.UserID.EqCol(u.ID)).Rows()&#xA;for rows.Next() {&#xA;  ...&#xA;}&#xA;&#xA;var results []Result&#xA;&#xA;err := u.WithContext(ctx).Select(u.Name, e.Email).LeftJoin(e, e.UserID.EqCol(u.ID)).Scan(&amp;amp;results)&#xA;&#xA;// multiple joins with parameter&#xA;users := u.WithContext(ctx).Join(e, e.UserID.EqCol(u.id), e.Email.Eq(&#34;modi@example.org&#34;)).Join(c, c.UserID.EqCol(u.ID)).Where(c.Number.Eq(&#34;411111111111&#34;)).Find()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;SubQuery&lt;/h5&gt; &#xA;&lt;p&gt;A subquery can be nested within a query, GEN can generate subquery when using a &lt;code&gt;Dao&lt;/code&gt; object as param&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;o := query.Use(db).Order&#xA;u := query.Use(db).User&#xA;&#xA;orders, err := o.WithContext(ctx).Where(o.WithContext(ctx).Columns(o.Amount).Gt(o.WithContext(ctx).Select(o.Amount.Avg())).Find()&#xA;// SELECT * FROM &#34;orders&#34; WHERE amount &amp;gt; (SELECT AVG(amount) FROM &#34;orders&#34;);&#xA;&#xA;subQuery := u.WithContext(ctx).Select(u.Age.Avg()).Where(u.Name.Like(&#34;name%&#34;))&#xA;users, err := u.WithContext(ctx).Select(u.Age.Avg().As(&#34;avgage&#34;)).Group(u.Name).Having(u.WithContext(ctx).Columns(u.Age.Avg()).Gt(subQuery).Find()&#xA;// SELECT AVG(age) as avgage FROM `users` GROUP BY `name` HAVING AVG(age) &amp;gt; (SELECT AVG(age) FROM `users` WHERE name LIKE &#34;name%&#34;)&#xA;&#xA;// Select users with orders between 100 and 200&#xA;subQuery1 := o.WithContext(ctx).Select(o.ID).Where(o.UserID.EqCol(u.ID), o.Amount.Gt(100))&#xA;subQuery2 := o.WithContext(ctx).Select(o.ID).Where(o.UserID.EqCol(u.ID), o.Amount.Gt(200))&#xA;u.WithContext(ctx).Exists(subQuery1).Not(u.WithContext(ctx).Exists(subQuery2)).Find()&#xA;// SELECT * FROM `users` WHERE EXISTS (SELECT `orders`.`id` FROM `orders` WHERE `orders`.`user_id` = `users`.`id` AND `orders`.`amount` &amp;gt; 100 AND `orders`.`deleted_at` IS NULL) AND NOT EXISTS (SELECT `orders`.`id` FROM `orders` WHERE `orders`.`user_id` = `users`.`id` AND `orders`.`amount` &amp;gt; 200 AND `orders`.`deleted_at` IS NULL) AND `users`.`deleted_at` IS NULL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;From SubQuery&lt;/h6&gt; &#xA;&lt;p&gt;GORM allows you using subquery in FROM clause with method &lt;code&gt;Table&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;p := query.Use(db).Pet&#xA;&#xA;users, err := gen.Table(u.WithContext(ctx).Select(u.Name, u.Age).As(&#34;u&#34;)).Where(u.Age.Eq(18)).Find()&#xA;// SELECT * FROM (SELECT `name`,`age` FROM `users`) as u WHERE `age` = 18&#xA;&#xA;subQuery1 := u.WithContext(ctx).Select(u.Name)&#xA;subQuery2 := p.WithContext(ctx).Select(p.Name)&#xA;users, err := gen.Table(subQuery1.As(&#34;u&#34;), subQuery2.As(&#34;p&#34;)).Find()&#xA;db.Table(&#34;(?) as u, (?) as p&#34;, subQuery1, subQuery2).Find(&amp;amp;User{})&#xA;// SELECT * FROM (SELECT `name` FROM `users`) as u, (SELECT `name` FROM `pets`) as p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Update from SubQuery&lt;/h6&gt; &#xA;&lt;p&gt;Update a table by using SubQuery&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;c := query.Use(db).Company&#xA;&#xA;u.WithContext(ctx).Update(u.CompanyName, c.Select(c.Name).Where(c.ID.EqCol(u.CompanyID)))&#xA;// UPDATE &#34;users&#34; SET &#34;company_name&#34; = (SELECT name FROM companies WHERE companies.id = users.company_id);&#xA;&#xA;u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).Update(u.CompanyName, c.Select(c.Name).Where(c.ID.EqCol(u.CompanyID)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Update multiple columns from SubQuery&lt;/h6&gt; &#xA;&lt;p&gt;Update multiple columns by using SubQuery (for MySQL):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;c := query.Use(db).Company&#xA;&#xA;ua := u.As(&#34;u&#34;)&#xA;ca := u.As(&#34;c&#34;)&#xA;&#xA;ua.WithContext(ctx).UpdateFrom(ca.WithContext(ctx).Select(c.ID, c.Address, c.Phone).Where(c.ID.Gt(100))).&#xA;Where(ua.CompanyID.EqCol(ca.ID)).&#xA;UpdateSimple(&#xA;  ua.Address.SetCol(ca.Address),&#xA;  ua.Phone.SetCol(ca.Phone),&#xA;)&#xA;// UPDATE `users` AS `u`,(&#xA;//   SELECT `company`.`id`,`company`.`address`,`company`.`phone` &#xA;//   FROM `company` WHERE `company`.`id` &amp;gt; 100 AND `company`.`deleted_at` IS NULL&#xA;// ) AS `c` &#xA;// SET `u`.`address`=`c`.`address`,`c`.`phone`=`c`.`phone`,`updated_at`=&#39;2021-11-11 11:11:11.111&#39;&#xA;// WHERE `u`.`company_id` = `c`.`id`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Transaction&lt;/h5&gt; &#xA;&lt;p&gt;To perform a set of operations within a transaction, the general flow is as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;q := query.Use(db)&#xA;&#xA;q.Transaction(func(tx *query.Query) error {&#xA;  if _, err := tx.User.WithContext(ctx).Where(tx.User.ID.Eq(100)).Delete(); err != nil {&#xA;    return err&#xA;  }&#xA;  if _, err := tx.Article.WithContext(ctx).Create(&amp;amp;model.User{Name:&#34;modi&#34;}); err != nil {&#xA;    return err&#xA;  }&#xA;  return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Nested Transactions&lt;/h6&gt; &#xA;&lt;p&gt;GEN supports nested transactions, you can rollback a subset of operations performed within the scope of a larger transaction, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;q := query.Use(db)&#xA;&#xA;q.Transaction(func(tx *query.Query) error {&#xA;  tx.User.WithContext(ctx).Create(&amp;amp;user1)&#xA;&#xA;  tx.Transaction(func(tx2 *query.Query) error {&#xA;    tx2.User.WithContext(ctx).Create(&amp;amp;user2)&#xA;    return errors.New(&#34;rollback user2&#34;) // Rollback user2&#xA;  })&#xA;&#xA;  tx.Transaction(func(tx2 *query.Query) error {&#xA;    tx2.User.WithContext(ctx).Create(&amp;amp;user3)&#xA;    return nil&#xA;  })&#xA;&#xA;  return nil&#xA;})&#xA;&#xA;// Commit user1, user3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Transactions by manual&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;q := query.Use(db)&#xA;&#xA;// begin a transaction&#xA;tx := q.Begin()&#xA;&#xA;// do some database operations in the transaction (use &#39;tx&#39; from this point, not &#39;db&#39;)&#xA;tx.User.WithContext(ctx).Create(...)&#xA;&#xA;// ...&#xA;&#xA;// rollback the transaction in case of error&#xA;tx.Rollback()&#xA;&#xA;// Or commit the transaction&#xA;tx.Commit()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;q := query.Use(db)&#xA;&#xA;func doSomething(ctx context.Context, users ...*model.User) (err error) {&#xA;    tx := q.Begin()&#xA;    defer func() {&#xA;        if recover() != nil || err != nil {&#xA;            _ = tx.Rollback()&#xA;        }&#xA;    }()&#xA;&#xA;    err = tx.User.WithContext(ctx).Create(users...)&#xA;    if err != nil {&#xA;        return&#xA;    }&#xA;    return tx.Commit()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;SavePoint/RollbackTo&lt;/h6&gt; &#xA;&lt;p&gt;GEN provides &lt;code&gt;SavePoint&lt;/code&gt;, &lt;code&gt;RollbackTo&lt;/code&gt; to save points and roll back to a savepoint, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx := q.Begin()&#xA;txCtx = tx.WithContext(ctx)&#xA;&#xA;txCtx.User.Create(&amp;amp;user1)&#xA;&#xA;tx.SavePoint(&#34;sp1&#34;)&#xA;txCtx.Create(&amp;amp;user2)&#xA;tx.RollbackTo(&#34;sp1&#34;) // Rollback user2&#xA;&#xA;tx.Commit() // Commit user1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Advanced Query&lt;/h5&gt; &#xA;&lt;h6&gt;Iteration&lt;/h6&gt; &#xA;&lt;p&gt;GEN supports iterating through Rows&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;do := u.WithContext(ctx)&#xA;rows, err := do.Where(u.Name.Eq(&#34;modi&#34;)).Rows()&#xA;defer rows.Close()&#xA;&#xA;for rows.Next() {&#xA;    var user User&#xA;    // ScanRows is a method of `gorm.DB`, it can be used to scan a row into a struct&#xA;    do.ScanRows(rows, &amp;amp;user)&#xA;&#xA;    // do something&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;FindInBatches&lt;/h6&gt; &#xA;&lt;p&gt;Query and process records in batch&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// batch size 100&#xA;err := u.WithContext(ctx).Where(u.ID.Gt(9)).FindInBatches(&amp;amp;results, 100, func(tx gen.Dao, batch int) error {&#xA;    for _, result := range results {&#xA;      // batch processing found records&#xA;    }&#xA;  &#xA;    // build a new `u` to use it&#39;s api&#xA;    // queryUsery := query.NewUser(tx.UnderlyingDB())&#xA;&#xA;    tx.Save(&amp;amp;results)&#xA;&#xA;    batch // Batch 1, 2, 3&#xA;&#xA;    // returns error will stop future batches&#xA;    return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Pluck&lt;/h6&gt; &#xA;&lt;p&gt;Query single column from database and scan into a slice, if you want to query multiple columns, use &lt;code&gt;Select&lt;/code&gt; with &lt;code&gt;Scan&lt;/code&gt; instead&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;var ages []int64&#xA;u.WithContext(ctx).Pluck(u.Age, &amp;amp;ages)&#xA;&#xA;var names []string&#xA;u.WithContext(ctx).Pluck(u.Name, &amp;amp;names)&#xA;&#xA;// Distinct Pluck&#xA;u.WithContext(ctx).Distinct().Pluck(u.Name, &amp;amp;names)&#xA;// SELECT DISTINCT `name` FROM `users`&#xA;&#xA;// Requesting more than one column, use `Scan` or `Find` like this:&#xA;db.WithContext(ctx).Select(u.Name, u.Age).Scan(&amp;amp;users)&#xA;users, err := db.Select(u.Name, u.Age).Find()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Scopes&lt;/h6&gt; &#xA;&lt;p&gt;&lt;code&gt;Scopes&lt;/code&gt; allows you to specify commonly-used queries which can be referenced as method calls&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;o := query.Use(db).Order&#xA;&#xA;func AmountGreaterThan1000(tx gen.Dao) gen.Dao {&#xA;    return tx.Where(o.Amount.Gt(1000))&#xA;}&#xA;&#xA;func PaidWithCreditCard(tx gen.Dao) gen.Dao {&#xA;    return tx.Where(o.PayModeSign.Eq(&#34;C&#34;))&#xA;}&#xA;&#xA;func PaidWithCod(tx gen.Dao) gen.Dao {&#xA;    return tx.Where(o.PayModeSign.Eq(&#34;C&#34;))&#xA;}&#xA;&#xA;func OrderStatus(status []string) func (tx gen.Dao) gen.Dao {&#xA;    return func (tx gen.Dao) gen.Dao {&#xA;      return tx.Where(o.Status.In(status...))&#xA;    }&#xA;}&#xA;&#xA;orders, err := o.WithContext(ctx).Scopes(AmountGreaterThan1000, PaidWithCreditCard).Find()&#xA;// Find all credit card orders and amount greater than 1000&#xA;&#xA;orders, err := o.WithContext(ctx).Scopes(AmountGreaterThan1000, PaidWithCod).Find()&#xA;// Find all COD orders and amount greater than 1000&#xA;&#xA;orders, err := o.WithContext(ctx).Scopes(AmountGreaterThan1000, OrderStatus([]string{&#34;paid&#34;, &#34;shipped&#34;})).Find()&#xA;// Find all paid, shipped orders that amount greater than 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Count&lt;/h6&gt; &#xA;&lt;p&gt;Get matched records count&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;count, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).Or(u.Name.Eq(&#34;zhangqiang&#34;)).Count()&#xA;// SELECT count(1) FROM users WHERE name = &#39;modi&#39; OR name = &#39;zhangqiang&#39;&#xA;&#xA;count, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).Count()&#xA;// SELECT count(1) FROM users WHERE name = &#39;modi&#39;; (count)&#xA;&#xA;// Count with Distinct&#xA;u.WithContext(ctx).Distinct(u.Name).Count()&#xA;// SELECT COUNT(DISTINCT(`name`)) FROM `users`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;FirstOrInit&lt;/h6&gt; &#xA;&lt;p&gt;Get first matched record or initialize a new instance with given conditions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// User not found, initialize it with give conditions&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;non_existing&#34;)).FirstOrInit()&#xA;// user -&amp;gt; User{Name: &#34;non_existing&#34;}&#xA;&#xA;// Found user with `name` = `modi`&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).FirstOrInit()&#xA;// user -&amp;gt; User{ID: 1, Name: &#34;modi&#34;, Age: 17}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;initialize struct with more attributes if record not found, those &lt;code&gt;Attrs&lt;/code&gt; wonâ€™t be used to build SQL query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// User not found, initialize it with give conditions and Attrs&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;non_existing&#34;)).Attrs(u.Age.Value(20)).FirstOrInit()&#xA;// SELECT * FROM USERS WHERE name = &#39;non_existing&#39; ORDER BY id LIMIT 1;&#xA;// user -&amp;gt; User{Name: &#34;non_existing&#34;, Age: 20}&#xA;&#xA;// User not found, initialize it with give conditions and Attrs&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;non_existing&#34;)).Attrs(u.Age.Value(20)).FirstOrInit()&#xA;// SELECT * FROM USERS WHERE name = &#39;non_existing&#39; ORDER BY id LIMIT 1;&#xA;// user -&amp;gt; User{Name: &#34;non_existing&#34;, Age: 20}&#xA;&#xA;// Found user with `name` = `modi`, attributes will be ignored&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).Attrs(u.Age.Value(20)).FirstOrInit()&#xA;// SELECT * FROM USERS WHERE name = modi&#39; ORDER BY id LIMIT 1;&#xA;// user -&amp;gt; User{ID: 1, Name: &#34;modi&#34;, Age: 17}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Assign&lt;/code&gt; attributes to struct regardless it is found or not, those attributes wonâ€™t be used to build SQL query and the final data wonâ€™t be saved into database&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// User not found, initialize it with give conditions and Assign attributes&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;non_existing&#34;)).Assign(u.Age.Value(20)).FirstOrInit()&#xA;// user -&amp;gt; User{Name: &#34;non_existing&#34;, Age: 20}&#xA;&#xA;// Found user with `name` = `modi`, update it with Assign attributes&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).Assign(u.Age.Value(20)).FirstOrInit()&#xA;// SELECT * FROM USERS WHERE name = modi&#39; ORDER BY id LIMIT 1;&#xA;// user -&amp;gt; User{ID: 111, Name: &#34;modi&#34;, Age: 20}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;FirstOrCreate&lt;/h6&gt; &#xA;&lt;p&gt;Get first matched record or create a new one with given conditions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// User not found, create a new record with give conditions&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;non_existing&#34;)).FirstOrCreate()&#xA;// INSERT INTO &#34;users&#34; (name) VALUES (&#34;non_existing&#34;);&#xA;// user -&amp;gt; User{ID: 112, Name: &#34;non_existing&#34;}&#xA;&#xA;// Found user with `name` = `modi`&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).FirstOrCreate()&#xA;// user -&amp;gt; User{ID: 111, Name: &#34;modi&#34;, &#34;Age&#34;: 18}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create struct with more attributes if record not found, those &lt;code&gt;Attrs&lt;/code&gt; wonâ€™t be used to build SQL query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// User not found, create it with give conditions and Attrs&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;non_existing&#34;)).Attrs(u.Age.Value(20)).FirstOrCreate()&#xA;// SELECT * FROM users WHERE name = &#39;non_existing&#39; ORDER BY id LIMIT 1;&#xA;// INSERT INTO &#34;users&#34; (name, age) VALUES (&#34;non_existing&#34;, 20);&#xA;// user -&amp;gt; User{ID: 112, Name: &#34;non_existing&#34;, Age: 20}&#xA;&#xA;// Found user with `name` = `modi`, attributes will be ignored&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).Attrs(u.Age.Value(20)).FirstOrCreate()&#xA;// SELECT * FROM users WHERE name = &#39;modi&#39; ORDER BY id LIMIT 1;&#xA;// user -&amp;gt; User{ID: 111, Name: &#34;modi&#34;, Age: 18}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Assign&lt;/code&gt; attributes to the record regardless it is found or not and save them back to the database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// User not found, initialize it with give conditions and Assign attributes&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;non_existing&#34;)).Assign(u.Age.Value(20)).FirstOrCreate()&#xA;// SELECT * FROM users WHERE name = &#39;non_existing&#39; ORDER BY id LIMIT 1;&#xA;// INSERT INTO &#34;users&#34; (name, age) VALUES (&#34;non_existing&#34;, 20);&#xA;// user -&amp;gt; User{ID: 112, Name: &#34;non_existing&#34;, Age: 20}&#xA;&#xA;// Found user with `name` = `modi`, update it with Assign attributes&#xA;user, err := u.WithContext(ctx).Where(u.Name.Eq(&#34;modi&#34;)).Assign(u.Age.Value(20)).FirstOrCreate()&#xA;// SELECT * FROM users WHERE name = &#39;modi&#39; ORDER BY id LIMIT 1;&#xA;// UPDATE users SET age=20 WHERE id = 111;&#xA;// user -&amp;gt; User{ID: 111, Name: &#34;modi&#34;, Age: 20}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Association&lt;/h4&gt; &#xA;&lt;p&gt;GEN will auto-save associations as GORM do. The relationships (BelongsTo/HasOne/HasMany/Many2Many) reuse GORM&#39;s tag. This feature only support exist model for now.&lt;/p&gt; &#xA;&lt;h5&gt;Relation&lt;/h5&gt; &#xA;&lt;p&gt;There are 4 kind of relationship.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;const (&#xA;    HasOne    RelationshipType = RelationshipType(schema.HasOne)    // HasOneRel has one relationship&#xA;    HasMany   RelationshipType = RelationshipType(schema.HasMany)   // HasManyRel has many relationships&#xA;    BelongsTo RelationshipType = RelationshipType(schema.BelongsTo) // BelongsToRel belongs to relationship&#xA;    Many2Many RelationshipType = RelationshipType(schema.Many2Many) // Many2ManyRel many to many relationship&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Relate to exist model&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package model&#xA;&#xA;// exist model&#xA;type Customer struct {&#xA;    gorm.Model&#xA;    CreditCards []CreditCard `gorm:&#34;foreignKey:CustomerRefer&#34;`&#xA;}&#xA;&#xA;type CreditCard struct {&#xA;    gorm.Model&#xA;    Number        string&#xA;    CustomerRefer uint&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GEN will detect model&#39;s associations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// specify model&#xA;g.ApplyBasic(model.Customer{}, model.CreditCard{})&#xA;&#xA;// assoications will be detected and converted to code &#xA;package query&#xA;&#xA;type customer struct {&#xA;    ...&#xA;    CreditCards customerHasManyCreditCards&#xA;}&#xA;&#xA;type creditCard struct{&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Relate to table in database&lt;/h6&gt; &#xA;&lt;p&gt;The association have to be speified by &lt;code&gt;gen.FieldRelate&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;card := g.GenerateModel(&#34;credit_cards&#34;)&#xA;customer := g.GenerateModel(&#34;customers&#34;, gen.FieldRelate(field.HasMany, &#34;CreditCards&#34;, b, &#xA;    &amp;amp;field.RelateConfig{&#xA;        // RelateSlice: true,&#xA;        GORMTag: &#34;foreignKey:CustomerRefer&#34;,&#xA;    }),&#xA;)&#xA;&#xA;g.ApplyBasic(card, custormer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GEN will generate models with associated field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// customers&#xA;type Customer struct {&#xA;    ID          int64          `gorm:&#34;column:id;type:bigint(20) unsigned;primaryKey&#34; json:&#34;id&#34;`&#xA;    CreatedAt   time.Time      `gorm:&#34;column:created_at;type:datetime(3)&#34; json:&#34;created_at&#34;`&#xA;    UpdatedAt   time.Time      `gorm:&#34;column:updated_at;type:datetime(3)&#34; json:&#34;updated_at&#34;`&#xA;    DeletedAt   gorm.DeletedAt `gorm:&#34;column:deleted_at;type:datetime(3)&#34; json:&#34;deleted_at&#34;`&#xA;    CreditCards []CreditCard   `gorm:&#34;foreignKey:CustomerRefer&#34; json:&#34;credit_cards&#34;`&#xA;}&#xA;&#xA;&#xA;// credit_cards&#xA;type CreditCard struct {&#xA;    ID            int64          `gorm:&#34;column:id;type:bigint(20) unsigned;primaryKey&#34; json:&#34;id&#34;`&#xA;    CreatedAt     time.Time      `gorm:&#34;column:created_at;type:datetime(3)&#34; json:&#34;created_at&#34;`&#xA;    UpdatedAt     time.Time      `gorm:&#34;column:updated_at;type:datetime(3)&#34; json:&#34;updated_at&#34;`&#xA;    DeletedAt     gorm.DeletedAt `gorm:&#34;column:deleted_at;type:datetime(3)&#34; json:&#34;deleted_at&#34;`&#xA;    CustomerRefer int64          `gorm:&#34;column:customer_refer;type:bigint(20) unsigned&#34; json:&#34;customer_refer&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If associated model already exists, &lt;code&gt;gen.FieldRelateModel&lt;/code&gt; can help you build associations between them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;customer := g.GenerateModel(&#34;customers&#34;, gen.FieldRelateModel(field.HasMany, &#34;CreditCards&#34;, model.CreditCard{}, &#xA;    &amp;amp;field.RelateConfig{&#xA;        // RelateSlice: true,&#xA;        GORMTag: &#34;foreignKey:CustomerRefer&#34;,&#xA;    }),&#xA;)&#xA;&#xA;g.ApplyBasic(custormer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Relate Config&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type RelateConfig struct {&#xA;    // specify field&#39;s type&#xA;    RelatePointer      bool // ex: CreditCard  *CreditCard&#xA;    RelateSlice        bool // ex: CreditCards []CreditCard&#xA;    RelateSlicePointer bool // ex: CreditCards []*CreditCard&#xA;&#xA;    JSONTag      string // related field&#39;s JSON tag&#xA;    GORMTag      string // related field&#39;s GORM tag&#xA;    NewTag       string // related field&#39;s new tag&#xA;    OverwriteTag string // related field&#39;s tag&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Operation&lt;/h5&gt; &#xA;&lt;h6&gt;Skip Auto Create/Update&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;user := model.User{&#xA;  Name:            &#34;modi&#34;,&#xA;  BillingAddress:  Address{Address1: &#34;Billing Address - Address 1&#34;},&#xA;  ShippingAddress: Address{Address1: &#34;Shipping Address - Address 1&#34;},&#xA;  Emails:          []Email{&#xA;    {Email: &#34;modi@example.com&#34;},&#xA;    {Email: &#34;modi-2@example.com&#34;},&#xA;  },&#xA;  Languages:       []Language{&#xA;    {Name: &#34;ZH&#34;},&#xA;    {Name: &#34;EN&#34;},&#xA;  },&#xA;}&#xA;&#xA;u := query.Use(db).User&#xA;&#xA;u.WithContext(ctx).Select(u.Name).Create(&amp;amp;user)&#xA;// INSERT INTO &#34;users&#34; (name) VALUES (&#34;jinzhu&#34;, 1, 2);&#xA;&#xA;u.WithContext(ctx).Omit(u.BillingAddress.Field()).Create(&amp;amp;user)&#xA;// Skip create BillingAddress when creating a user&#xA;&#xA;u.WithContext(ctx).Omit(u.BillingAddress.Field(&#34;Address1&#34;)).Create(&amp;amp;user)&#xA;// Skip create BillingAddress.Address1 when creating a user&#xA;&#xA;u.WithContext(ctx).Omit(field.AssociationFields).Create(&amp;amp;user)&#xA;// Skip all associations when creating a user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Method &lt;code&gt;Field&lt;/code&gt; will join a serious field name with &#39;&#39;.&#34;, for example: &lt;code&gt;u.BillingAddress.Field(&#34;Address1&#34;, &#34;Street&#34;)&lt;/code&gt; equals to &lt;code&gt;BillingAddress.Address1.Street&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h6&gt;Find Associations&lt;/h6&gt; &#xA;&lt;p&gt;Find matched associations&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;languages, err = u.Languages.Model(&amp;amp;user).Find()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Find associations with conditions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;q := query.Use(db)&#xA;u := q.User&#xA;&#xA;languages, err = u.Languages.Where(q.Language.Name.In([]string{&#34;ZH&#34;,&#34;EN&#34;})).Model(&amp;amp;user).Find()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Append Associations&lt;/h6&gt; &#xA;&lt;p&gt;Append new associations for &lt;code&gt;many to many&lt;/code&gt;, &lt;code&gt;has many&lt;/code&gt;, replace current association for &lt;code&gt;has one&lt;/code&gt;, &lt;code&gt;belongs to&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;u.Languages.Model(&amp;amp;user).Append(&amp;amp;languageZH, &amp;amp;languageEN)&#xA;&#xA;u.Languages.Model(&amp;amp;user).Append(&amp;amp;Language{Name: &#34;DE&#34;})&#xA;&#xA;u.CreditCards.Model(&amp;amp;user).Append(&amp;amp;CreditCard{Number: &#34;411111111111&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Replace Associations&lt;/h6&gt; &#xA;&lt;p&gt;Replace current associations with new ones&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u.Languages.Model(&amp;amp;user).Replace(&amp;amp;languageZH, &amp;amp;languageEN)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Delete Associations&lt;/h6&gt; &#xA;&lt;p&gt;Remove the relationship between source &amp;amp; arguments if exists, only delete the reference, wonâ€™t delete those objects from DB.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;u.Languages.Model(&amp;amp;user).Delete(&amp;amp;languageZH, &amp;amp;languageEN)&#xA;&#xA;u.Languages.Model(&amp;amp;user).Delete([]*Language{&amp;amp;languageZH, &amp;amp;languageEN}...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Clear Associations&lt;/h6&gt; &#xA;&lt;p&gt;Remove all reference between source &amp;amp; association, wonâ€™t delete those associations&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u.Languages.Model(&amp;amp;user).Clear()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Count Associations&lt;/h6&gt; &#xA;&lt;p&gt;Return the count of current associations&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u.Languages.Model(&amp;amp;user).Count()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Delete with Select&lt;/h6&gt; &#xA;&lt;p&gt;You are allowed to delete selected has one/has many/many2many relations with &lt;code&gt;Select&lt;/code&gt; when deleting records, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// delete user&#39;s account when deleting user&#xA;u.Select(u.Account).Delete(&amp;amp;user)&#xA;&#xA;// delete user&#39;s Orders, CreditCards relations when deleting user&#xA;db.Select(u.Orders.Field(), u.CreditCards.Field()).Delete(&amp;amp;user)&#xA;&#xA;// delete user&#39;s has one/many/many2many relations when deleting user&#xA;db.Select(field.AssociationFields).Delete(&amp;amp;user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Preloading&lt;/h5&gt; &#xA;&lt;p&gt;This feature only support exist model for now.&lt;/p&gt; &#xA;&lt;h6&gt;Preload&lt;/h6&gt; &#xA;&lt;p&gt;GEN allows eager loading relations in other SQL with &lt;code&gt;Preload&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {&#xA;  gorm.Model&#xA;  Username string&#xA;  Orders   []Order&#xA;}&#xA;&#xA;type Order struct {&#xA;  gorm.Model&#xA;  UserID uint&#xA;  Price  float64&#xA;}&#xA;&#xA;q := query.Use(db)&#xA;u := q.User&#xA;o := q.Order&#xA;&#xA;// Preload Orders when find users&#xA;users, err := u.WithContext(ctx).Preload(u.Orders).Find()&#xA;// SELECT * FROM users;&#xA;// SELECT * FROM orders WHERE user_id IN (1,2,3,4);&#xA;&#xA;users, err := u.WithContext(ctx).Preload(u.Orders).Preload(u.Profile).Preload(u.Role).Find()&#xA;// SELECT * FROM users;&#xA;// SELECT * FROM orders WHERE user_id IN (1,2,3,4); // has many&#xA;// SELECT * FROM profiles WHERE user_id IN (1,2,3,4); // has one&#xA;// SELECT * FROM roles WHERE id IN (4,5,6); // belongs to&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Preload All&lt;/h6&gt; &#xA;&lt;p&gt;&lt;code&gt;clause.Associations&lt;/code&gt; can work with &lt;code&gt;Preload&lt;/code&gt; similar like &lt;code&gt;Select&lt;/code&gt; when creating/updating, you can use it to &lt;code&gt;Preload&lt;/code&gt; all associations, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {&#xA;  gorm.Model&#xA;  Name       string&#xA;  CompanyID  uint&#xA;  Company    Company&#xA;  Role       Role&#xA;  Orders     []Order&#xA;}&#xA;&#xA;users, err := u.WithContext(ctx).Preload(field.Associations).Find()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;clause.Associations&lt;/code&gt; wonâ€™t preload nested associations, but you can use it with &lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#nested-preloading&#34;&gt;Nested Preloading&lt;/a&gt; together, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;users, err := u.WithContext(ctx).Preload(u.Orders.OrderItems.Product).Find()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Preload with select&lt;/h6&gt; &#xA;&lt;p&gt;Specify selected columns with method &lt;code&gt;Select&lt;/code&gt;. Foregin key must be selected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {&#xA;  gorm.Model&#xA;  CreditCards []CreditCard `gorm:&#34;foreignKey:UserRefer&#34;`&#xA;}&#xA;&#xA;type CreditCard struct {&#xA;  gorm.Model&#xA;  Number    string&#xA;  UserRefer uint&#xA;}&#xA;&#xA;u := q.User&#xA;cc := q.CreditCard&#xA;&#xA;// !!! Foregin key &#34;cc.UserRefer&#34; must be selected&#xA;users, err := u.WithContext(ctx).Where(c.ID.Eq(1)).Preload(u.CreditCards.Select(cc.Number, cc.UserRefer)).Find()&#xA;// SELECT * FROM `credit_cards` WHERE `credit_cards`.`customer_refer` = 1 AND `credit_cards`.`deleted_at` IS NULL&#xA;// SELECT * FROM `customers` WHERE `customers`.`id` = 1 AND `customers`.`deleted_at` IS NULL LIMIT 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Preload with conditions&lt;/h6&gt; &#xA;&lt;p&gt;GEN allows Preload associations with conditions, it works similar to Inline Conditions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;q := query.Use(db)&#xA;u := q.User&#xA;o := q.Order&#xA;&#xA;// Preload Orders with conditions&#xA;users, err := u.WithContext(ctx).Preload(u.Orders.On(o.State.NotIn(&#34;cancelled&#34;)).Find()&#xA;// SELECT * FROM users;&#xA;// SELECT * FROM orders WHERE user_id IN (1,2,3,4) AND state NOT IN (&#39;cancelled&#39;);&#xA;&#xA;users, err := u.WithContext(ctx).Where(u.State.Eq(&#34;active&#34;)).Preload(u.Orders.On(o.State.NotIn(&#34;cancelled&#34;)).Find()&#xA;// SELECT * FROM users WHERE state = &#39;active&#39;;&#xA;// SELECT * FROM orders WHERE user_id IN (1,2) AND state NOT IN (&#39;cancelled&#39;);&#xA;&#xA;users, err := u.WithContext(ctx).Preload(u.Orders.Order(o.ID.Desc(), o.CreateTime).Find()&#xA;// SELECT * FROM users;&#xA;// SELECT * FROM orders WHERE user_id IN (1,2) Order By id DESC, create_time;&#xA;&#xA;users, err := u.WithContext(ctx).Preload(u.Orders.On(o.State.Eq(&#34;on&#34;)).Order(o.ID.Desc()).Find()&#xA;// SELECT * FROM users;&#xA;// SELECT * FROM orders WHERE user_id IN (1,2) AND state = &#34;on&#34; Order By id DESC;&#xA;&#xA;users, err := u.WithContext(ctx).Preload(u.Orders.Clauses(hints.UseIndex(&#34;idx_order_id&#34;))).Find()&#xA;// SELECT * FROM users;&#xA;// SELECT * FROM orders WHERE user_id IN (1,2) USE INDEX (`idx_order_id`);&#xA;&#xA;user, err := u.WithContext(ctx).Where(u.ID.Eq(1)).Preload(u.Orders.Offset(100).Limit(20)).Take()&#xA;// SELECT * FROM users WHERE `user_id` = 1 LIMIT 20 OFFSET 100;&#xA;// SELECT * FROM `users` WHERE `users`.`id` = 1 LIMIT 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Nested Preloading&lt;/h6&gt; &#xA;&lt;p&gt;GEN supports nested preloading, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db.Preload(u.Orders.OrderItems.Product).Preload(u.CreditCard).Find(&amp;amp;users)&#xA;&#xA;// Customize Preload conditions for `Orders`&#xA;// And GEN won&#39;t preload unmatched order&#39;s OrderItems then&#xA;db.Preload(u.Orders.On(o.State.Eq(&#34;paid&#34;))).Preload(u.Orders.OrderItems).Find(&amp;amp;users)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Update&lt;/h4&gt; &#xA;&lt;h5&gt;Update single column&lt;/h5&gt; &#xA;&lt;p&gt;When updating a single column with &lt;code&gt;Update&lt;/code&gt;, it needs to have any conditions or it will raise error &lt;code&gt;ErrMissingWhereClause&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// Update with conditions&#xA;u.WithContext(ctx).Where(u.Activate.Is(true)).Update(u.Name, &#34;hello&#34;)&#xA;// UPDATE users SET name=&#39;hello&#39;, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE active=true;&#xA;&#xA;// Update with conditions&#xA;u.WithContext(ctx).Where(u.Activate.Is(true)).Update(u.Age, u.Age.Add(1))&#xA;// or&#xA;u.WithContext(ctx).Where(u.Activate.Is(true)).UpdateSimple(u.Age.Add(1))&#xA;// UPDATE users SET age=age+1, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE active=true;&#xA;&#xA;u.WithContext(ctx).Where(u.Activate.Is(true)).UpdateSimple(u.Age.Zero())&#xA;// UPDATE users SET age=0, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE active=true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Updates multiple columns&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;Updates&lt;/code&gt; supports update with &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;map[string]interface{}&lt;/code&gt;, when updating with &lt;code&gt;struct&lt;/code&gt; it will only update non-zero fields by default&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// Update attributes with `map`&#xA;u.WithContext(ctx).Where(u.ID.Eq(111)).Updates(map[string]interface{}{&#34;name&#34;: &#34;hello&#34;, &#34;age&#34;: 18, &#34;active&#34;: false})&#xA;// UPDATE users SET name=&#39;hello&#39;, age=18, active=false, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE id=111;&#xA;&#xA;// Update attributes with `struct`&#xA;u.WithContext(ctx).Where(u.ID.Eq(111)).Updates(model.User{Name: &#34;hello&#34;, Age: 18, Active: false})&#xA;// UPDATE users SET name=&#39;hello&#39;, age=18, active=false, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE id=111;&#xA;&#xA;// Update with expression&#xA;u.WithContext(ctx).Where(u.ID.Eq(111)).UpdateSimple(u.Age.Add(1), u.Number.Add(1))&#xA;// UPDATE users SET age=age+1,number=number+1, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE id=111;&#xA;&#xA;u.WithContext(ctx).Where(u.Activate.Is(true)).UpdateSimple(u.Age.Value(17), u.Number.Zero(), u.Birthday.Null())&#xA;// UPDATE users SET age=17, number=0, birthday=NULL, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE active=true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; When update with struct, GEN will only update non-zero fields, you might want to use &lt;code&gt;map&lt;/code&gt; to update attributes or use &lt;code&gt;Select&lt;/code&gt; to specify fields to update&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Update selected fields&lt;/h5&gt; &#xA;&lt;p&gt;If you want to update selected fields or ignore some fields when updating, you can use &lt;code&gt;Select&lt;/code&gt;, &lt;code&gt;Omit&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u := query.Use(db).User&#xA;&#xA;// Select with Map&#xA;// User&#39;s ID is `111`:&#xA;u.WithContext(ctx).Select(u.Name).Where(u.ID.Eq(111)).Updates(map[string]interface{}{&#34;name&#34;: &#34;hello&#34;, &#34;age&#34;: 18, &#34;active&#34;: false})&#xA;// UPDATE users SET name=&#39;hello&#39; WHERE id=111;&#xA;&#xA;u.WithContext(ctx).Omit(u.Name).Where(u.ID.Eq(111)).Updates(map[string]interface{}{&#34;name&#34;: &#34;hello&#34;, &#34;age&#34;: 18, &#34;active&#34;: false})&#xA;// UPDATE users SET age=18, active=false, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE id=111;&#xA;&#xA;result, err := u.WithContext(ctx).Where(u.ID.Eq(111)).Updates(map[string]interface{}{&#34;name&#34;: &#34;hello&#34;, &#34;age&#34;: 18, &#34;active&#34;: false})&#xA;&#xA;result.RowsAffected // affect rows number&#xA;err                 // error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Delete&lt;/h4&gt; &#xA;&lt;h5&gt;Delete record&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := query.Use(db).Email&#xA;&#xA;// Email&#39;s ID is `10`&#xA;e.WithContext(ctx).Where(e.ID.Eq(10)).Delete()&#xA;// DELETE from emails where id = 10;&#xA;&#xA;// Delete with additional conditions&#xA;e.WithContext(ctx).Where(e.ID.Eq(10), e.Name.Eq(&#34;modi&#34;)).Delete()&#xA;// DELETE from emails where id = 10 AND name = &#34;modi&#34;;&#xA;&#xA;result, err := e.WithContext(ctx).Where(e.ID.Eq(10), e.Name.Eq(&#34;modi&#34;)).Delete()&#xA;&#xA;result.RowsAffected // affect rows number&#xA;err                 // error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete with primary key&lt;/h5&gt; &#xA;&lt;p&gt;GEN allows to delete objects using primary key(s) with inline condition, it works with numbers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;u.WithContext(ctx).Where(u.ID.In(1,2,3)).Delete()&#xA;// DELETE FROM users WHERE id IN (1,2,3);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Batch Delete&lt;/h5&gt; &#xA;&lt;p&gt;The specified value has no primary value, GEN will perform a batch delete, it will delete all matched records&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;e := query.Use(db).Email&#xA;&#xA;e.WithContext(ctx).Where(e.Name.Like(&#34;%modi%&#34;)).Delete()&#xA;// DELETE from emails where email LIKE &#34;%modi%&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Soft Delete&lt;/h5&gt; &#xA;&lt;p&gt;If your model includes a &lt;code&gt;gorm.DeletedAt&lt;/code&gt; field (which is included in &lt;code&gt;gorm.Model&lt;/code&gt;), it will get soft delete ability automatically!&lt;/p&gt; &#xA;&lt;p&gt;When calling &lt;code&gt;Delete&lt;/code&gt;, the record WONâ€™T be removed from the database, but GORM will set the &lt;code&gt;DeletedAt&lt;/code&gt;â€˜s value to the current time, and the data is not findable with normal Query methods anymore.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Batch Delete&#xA;u.WithContext(ctx).Where(u.Age.Eq(20)).Delete()&#xA;// UPDATE users SET deleted_at=&#34;2013-10-29 10:23&#34; WHERE age = 20;&#xA;&#xA;// Soft deleted records will be ignored when querying&#xA;users, err := u.WithContext(ctx).Where(u.Age.Eq(20)).Find()&#xA;// SELECT * FROM users WHERE age = 20 AND deleted_at IS NULL;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you donâ€™t want to include &lt;code&gt;gorm.Model&lt;/code&gt;, you can enable the soft delete feature like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {&#xA;    ID      int&#xA;    Deleted gorm.DeletedAt&#xA;    Name    string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Find soft deleted records&lt;/h5&gt; &#xA;&lt;p&gt;You can find soft deleted records with &lt;code&gt;Unscoped&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;users, err := db.WithContext(ctx).Unscoped().Where(u.Age.Eq(20)).Find()&#xA;// SELECT * FROM users WHERE age = 20;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Delete permanently&lt;/h5&gt; &#xA;&lt;p&gt;You can delete matched records permanently with &lt;code&gt;Unscoped&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;o.WithContext(ctx).Unscoped().Where(o.ID.Eq(10)).Delete()&#xA;// DELETE FROM orders WHERE id=10;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;DIY method&lt;/h3&gt; &#xA;&lt;h4&gt;Method interface&lt;/h4&gt; &#xA;&lt;p&gt;The DIY method needs to be defined through the interface. In the method, the specific SQL query logic is described in the way of comments. Simple WHERE queries can be wrapped in &lt;code&gt;where()&lt;/code&gt;. When using complex queries, you need to write complete SQL. You can directly wrap them in &lt;code&gt;sql()&lt;/code&gt; or write SQL directly. If there are some comments on the method, just add a blank line comment in the middle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Method interface {&#xA;    // where(&#34;name=@name and age=@age&#34;)&#xA;    SimpleFindByNameAndAge(name string, age int) (gen.T, error)&#xA;&#xA;    // FindUserToMap query by id and return id-&amp;gt;instance&#xA;    // &#xA;    // sql(select * from users where id=@id)&#xA;    FindUserToMap(id int) (gen.M, error)&#xA;    &#xA;    // InsertValue create user&#xA;&#x9;//&#xA;&#x9;//insert into users (name,age) values (@name,@age)&#xA;    InsertValue(age int, name string) error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Method input parameters and return values support basic types (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;...), struct and placeholders (&lt;code&gt;gen.T&lt;/code&gt;/&lt;code&gt;gen.M&lt;/code&gt;/&lt;code&gt;gen.RowsAffected&lt;/code&gt;), and types support pointers and arrays. The return value is at most a value and an error.&lt;/p&gt; &#xA;&lt;p&gt;Usage(complete case on &lt;a href=&#34;https://raw.githubusercontent.com/go-gorm/gen/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// implement model.Method on table &#34;user&#34; and &#34;comany&#34;&#xA;g.ApplyInterface(func(method model.Method) {}, model.User{}, g.GenerateModel(&#34;company&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Syntax of template&lt;/h5&gt; &#xA;&lt;h6&gt;placeholder&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gen.T&lt;/code&gt; represents specified &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;table&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gen.M&lt;/code&gt; represents &lt;code&gt;map[string]interface&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gen.RowsAffected&lt;/code&gt; represents SQL executed &lt;code&gt;rowsAffected&lt;/code&gt; (type:int64)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@@table&lt;/code&gt; represents table&#39;s name (if method&#39;s parameter doesn&#39;t contains variable &lt;code&gt;table&lt;/code&gt;, GEN will generate &lt;code&gt;table&lt;/code&gt; from model struct)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@@&amp;lt;columnName&amp;gt;&lt;/code&gt; represents column&#39;s name or table&#39;s name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@&amp;lt;name&amp;gt;&lt;/code&gt; represents normal query variable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;template&lt;/h6&gt; &#xA;&lt;p&gt;Dynamic template logical operations must be wrapped in &lt;code&gt;{{}}&lt;/code&gt;,and end must used &lt;code&gt;{{end}}&lt;/code&gt;, All templates support nesting&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;if&lt;/code&gt; clause&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;where&lt;/code&gt; clause&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set&lt;/code&gt; clause&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;for&lt;/code&gt; clause&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;...&lt;/code&gt; coming soon&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;&lt;code&gt;If&lt;/code&gt; clause&lt;/h6&gt; &#xA;&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; clause support &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt;,the condition accept a bool parameter or operation expression which conforms to Golang syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{if cond1}}&#xA;    // do something here&#xA;{{else if cond2}}&#xA;    // do something here&#xA;{{else}}&#xA;    // do something here&#xA;{{end}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use case in raw SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// select * from users where&#xA;//  {{if name !=&#34;&#34;}} &#xA;//      username=@name and&#xA;//  {{end}}&#xA;//  role=&#34;admin&#34;&#xA;Method(name string) (gen.T,error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use case in SQL with complex logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// select * from users  &#xA;//  {{if user != nil}}&#xA;//      {{if user.ID &amp;gt; 0}}&#xA;//          where  id=@user.ID&#xA;//      {{else if user.Name != &#34;&#34;}}&#xA;//          where username=@user.Name&#xA;//      {{end}}&#xA;//  {{end}}&#xA;Method(user *gen.T) (gen.T, error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;&lt;code&gt;Where&lt;/code&gt; clause&lt;/h6&gt; &#xA;&lt;p&gt;The &lt;code&gt;where&lt;/code&gt; clause will be inserted only if the child elements return something. The key word &lt;code&gt;and&lt;/code&gt; or &lt;code&gt;or&lt;/code&gt; on both sides of clause will be removed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{where}}&#xA;    // do something here&#xA;{{end}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use case in raw SQL&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// select * from @@table&#xA;//  {{where}}&#xA;//      id=@id&#xA;//  {{end}}&#xA;Method(id int) gen.T&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use case in SQL with complex logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// select * from @@table&#xA;//  {{where}}&#xA;//      {{if !start.IsZero()}}&#xA;//          created_time &amp;gt; start&#xA;//      {{end}}&#xA;//      {{if !end.IsZero()}}&#xA;//         and created_time &amp;lt; end&#xA;//      {{end}} &#xA;//  {{end}}&#xA;Method(start,end time.Time) ([]gen.T, error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;&lt;code&gt;Set&lt;/code&gt; clause&lt;/h6&gt; &#xA;&lt;p&gt;The &lt;code&gt;Set&lt;/code&gt; clause is used to dynamically update data,it will be inserted only if the child elements return something. The &lt;code&gt;,&lt;/code&gt; on both sides of columns array will be removed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{set}}&#xA;    // sepecify update expression here&#xA;{{end}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use case in raw SQL&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// update users &#xA;//  {{set}}&#xA;//      name=@name&#xA;//  {{end}}&#xA;// where id=@id&#xA;method(name string,id int) error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use case in SQL with complex logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// update @@table &#xA;//  {{set}}&#xA;//      {{if user.Name != &#34;&#34;}} username=@user.Name, {{end}}&#xA;//      {{if user.Age &amp;gt; 0}} age=@user.Age, {{end}}&#xA;//      {{if user.Age &amp;gt;= 18}} is_adult=1 {{else}} is_adult=0 {{end}}&#xA;//  {{end}}&#xA;// where id=@id&#xA;method(user gen.T,id int) (gen.RowsAffected, error)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;&lt;code&gt;For&lt;/code&gt; clause&lt;/h6&gt; &#xA;&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; clause traverses an array according to golang syntax and inserts its contents into SQL,supports array of struct.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{for _,name:=range names}}&#xA;    // do something here&#xA;{{end}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use case in raw SQL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//select * from @@table&#xA;//{{where}}&#xA;//&#x9;{{for _,name:=range names}}&#xA;//&#x9;&#x9;name like concat(&#34;%&#34;,@name,&#34;%&#34;) or&#xA;//&#x9;{{end}}&#xA;//{{end}}&#xA;method(names []string) ([]gen.T, error) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use case in SQL with complex logic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// select * from @@table &#xA;// {{where}}&#xA;//      {{for _,user:=range user}} &#xA;//          {{if user.Name !=&#34;&#34; &amp;amp;&amp;amp; user.Age &amp;gt;0}}&#xA;//              (username = @user.Name AND age=@user.Age) OR&#xA;//          {{end}}&#xA;//      {{end}}&#xA;//  {{end}}&#xA;method(users []model.User) ([]gen.T, error) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Method interface example&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Method interface {&#xA;    // Where(&#34;name=@name and age=@age&#34;)&#xA;    SimpleFindByNameAndAge(name string, age int) (gen.T, error)&#xA;    &#xA;    // select * from users where id=@id&#xA;    FindUserToMap(id int) (gen.M, error)&#xA;    &#xA;    // sql(insert into @@table (name,age) values (@name,@age) )&#xA;    InsertValue(age int, name string) error&#xA;    &#xA;    // select name from @@table where id=@id&#xA;    FindNameByID(id int) string&#xA;    &#xA;    // select * from @@table&#xA;    //  {{where}}&#xA;    //      id&amp;gt;0&#xA;    //      {{if cond}}id=@id {{end}}&#xA;    //      {{if key!=&#34;&#34; &amp;amp;&amp;amp; value != &#34;&#34;}} or @@key=@value{{end}}&#xA;    //  {{end}}&#xA;    FindByIDOrCustom(cond bool, id int, key, value string) ([]gen.T, error)&#xA;    &#xA;    // update @@table&#xA;    //  {{set}}&#xA;    //      update_time=now()&#xA;    //      {{if name != &#34;&#34;}}&#xA;    //          name=@name&#xA;    //      {{end}}&#xA;    //  {{end}}&#xA;    //  {{where}}&#xA;    //      id=@id&#xA;    //  {{end}}&#xA;    UpdateName(name string, id int) (gen.RowsAffected,error)&#xA;&#xA;    // select * from @@table&#xA;    //  {{where}}&#xA;    //      {{for _,user:=range users}}&#xA;    //          {{if user.Age &amp;gt;18}&#xA;    //              OR name=@user.Name &#xA;    //         {{end}}&#xA;    //      {{end}}&#xA;    //  {{end}}&#xA;    FindByOrList(users []gen.T) ([]gen.T, error)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unit Test&lt;/h4&gt; &#xA;&lt;p&gt;Unit test file will be generated if &lt;code&gt;WithUnitTest&lt;/code&gt; is set, which will generate unit test for general query function.&lt;/p&gt; &#xA;&lt;p&gt;Unit test for DIY method need diy testcase, which should place in the same package with test file.&lt;/p&gt; &#xA;&lt;p&gt;A testcase contains input and expectation result, input should match the method arguments, expectation should match method return values, which will be asserted &lt;strong&gt;Equal&lt;/strong&gt; in test.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package query&#xA;&#xA;type Input struct {&#xA;  Args []interface{}&#xA;}&#xA;&#xA;type Expectation struct {&#xA;  Ret []interface{}&#xA;}&#xA;&#xA;type TestCase struct {&#xA;  Input&#xA;  Expectation&#xA;}&#xA;&#xA;/* Table student */&#xA;&#xA;var StudentFindByIdTestCase = []TestCase {&#xA;  {&#xA;    Input{[]interface{}{1}},&#xA;    Expectation{[]interface{}{nil, nil}},&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Corresponding test&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//FindById select * from @@table where id = @id&#xA;func (s studentDo) FindById(id int64) (result *model.Student, err error) {&#xA;    ///&#xA;}&#xA;&#xA;func Test_student_FindById(t *testing.T) {&#xA;    student := newStudent(db)&#xA;    do := student.WithContext(context.Background()).Debug()&#xA;&#xA;    for i, tt := range StudentFindByIdTestCase {&#xA;        t.Run(&#34;FindById_&#34;+strconv.Itoa(i), func(t *testing.T) {&#xA;            res1, res2 := do.FindById(tt.Input.Args[0].(int64))&#xA;            assert(t, &#34;FindById&#34;, res1, tt.Expectation.Ret[0])&#xA;            assert(t, &#34;FindById&#34;, res2, tt.Expectation.Ret[1])&#xA;        })&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Smart select fields&lt;/h4&gt; &#xA;&lt;p&gt;GEN allows select specific fields with &lt;code&gt;Select&lt;/code&gt;, if you often use this in your application, maybe you want to define a smaller struct for API usage which can select specific fields automatically, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {&#xA;  ID     uint&#xA;  Name   string&#xA;  Age    int&#xA;  Gender string&#xA;  // hundreds of fields&#xA;}&#xA;&#xA;type APIUser struct {&#xA;  ID   uint&#xA;  Name string&#xA;}&#xA;&#xA;type Method interface{&#xA;    // select * from user&#xA;    FindSome() ([]APIUser, error)&#xA;}&#xA;&#xA;apiusers, err := u.WithContext(ctx).Limit(10).FindSome()&#xA;// SELECT `id`, `name` FROM `users` LIMIT 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced Topics&lt;/h3&gt; &#xA;&lt;h4&gt;Hints&lt;/h4&gt; &#xA;&lt;p&gt;Optimizer hints allow to control the query optimizer to choose a certain query execution plan, GORM supports it with &lt;code&gt;gorm.io/hints&lt;/code&gt;, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;gorm.io/hints&#34;&#xA;&#xA;u := query.Use(db).User&#xA;&#xA;users, err := u.WithContext(ctx).Clauses(hints.New(&#34;MAX_EXECUTION_TIME(10000)&#34;)).Find()&#xA;// SELECT * /*+ MAX_EXECUTION_TIME(10000) */ FROM `users`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Index hints allow passing index hints to the database in case the query planner gets confused.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;gorm.io/hints&#34;&#xA;&#xA;u := query.Use(db).User&#xA;&#xA;users, err := u.WithContext(ctx).Clauses(hints.UseIndex(&#34;idx_user_name&#34;)).Find()&#xA;// SELECT * FROM `users` USE INDEX (`idx_user_name`)&#xA;&#xA;users, err := u.WithContext(ctx).Clauses(hints.ForceIndex(&#34;idx_user_name&#34;, &#34;idx_user_id&#34;).ForJoin()).Find()&#xA;// SELECT * FROM `users` FORCE INDEX FOR JOIN (`idx_user_name`,`idx_user_id`)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Binary&lt;/h2&gt; &#xA;&lt;p&gt;Install GEN as a binary tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install gorm.io/gen/tools/gentool@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ gentool -h&#xA;Usage of gentool:&#xA;  -c string&#xA;      is path for gen.yml&#xA;  -db string&#xA;      input mysql or postgres or sqlite or sqlserver. consult[https://gorm.io/docs/connecting_to_the_database.html] (default &#34;mysql&#34;)&#xA;  -dsn string&#xA;      consult[https://gorm.io/docs/connecting_to_the_database.html]&#xA;  -fieldNullable&#xA;      generate with pointer when field is nullable&#xA;  -fieldWithIndexTag&#xA;      generate field with gorm index tag&#xA;  -fieldWithTypeTag&#xA;      generate field with gorm column type tag&#xA;  -modelPkgName string&#xA;      generated model code&#39;s package name&#xA;  -outFile string&#xA;      query code file name, default: gen.go&#xA;  -outPath string&#xA;      specify a directory for output (default &#34;./dao/query&#34;)&#xA;  -tables string&#xA;      enter the required data table or leave it blank&#xA;  -onlyModel&#xA;      only generate models (without query file)&#xA;  -withUnitTest&#xA;      generate unit test for query code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gentool -dsn &#34;user:pwd@tcp(127.0.0.1:3306)/database?charset=utf8mb4&amp;amp;parseTime=True&amp;amp;loc=Local&#34; -tables &#34;orders,doctor&#34;&#xA;gentool -c &#34;./gen.yml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;config example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;0.1&#34;&#xA;database:&#xA;  # consult[https://gorm.io/docs/connecting_to_the_database.html]&#34;&#xA;  dsn : &#34;username:password@tcp(address:port)/db?charset=utf8mb4&amp;amp;parseTime=true&amp;amp;loc=Local&#34;&#xA;  # input mysql or postgres or sqlite or sqlserver. consult[https://gorm.io/docs/connecting_to_the_database.html]&#xA;  db  : &#34;mysql&#34;&#xA;  # enter the required data table or leave it blank.You can input : orders,users,goods&#xA;  tables  : &#34;user&#34;&#xA;  # specify a directory for output&#xA;  outPath :  &#34;./dao/query&#34;&#xA;  # query code file name, default: gen.go&#xA;  outFile :  &#34;&#34;&#xA;  # generate unit test for query code&#xA;  withUnitTest  : false&#xA;  # generated model code&#39;s package name&#xA;  modelPkgName  : &#34;&#34;&#xA;  # generate with pointer when field is nullable&#xA;  fieldNullable : false&#xA;  # generate field with gorm index tag&#xA;  fieldWithIndexTag : false&#xA;  # generate field with gorm column type tag&#xA;  fieldWithTypeTag  : false&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/riverchu&#34;&gt;@riverchu&lt;/a&gt; &lt;a href=&#34;https://github.com/idersec&#34;&gt;@iDer&lt;/a&gt; &lt;a href=&#34;https://github.com/qqxhb&#34;&gt;@qqxhb&lt;/a&gt; &lt;a href=&#34;https://github.com/dino-ma&#34;&gt;@dino-ma&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jinzhu&#34;&gt;@jinzhu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You can help to deliver a better GORM/GEN&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/go-gorm/gen/raw/master/License&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>