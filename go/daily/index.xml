<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-17T01:34:46Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antonmedv/expr</title>
    <updated>2023-06-17T01:34:46Z</updated>
    <id>tag:github.com,2023-06-17:/antonmedv/expr</id>
    <link href="https://github.com/antonmedv/expr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Expression language and expression evaluation for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Expr&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/antonmedv/expr/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/antonmedv/expr/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/antonmedv/expr&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/antonmedv/expr&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/antonmedv/expr&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/antonmedv/expr?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://expr.medv.io/img/logo-small.png&#34; width=&#34;150&#34; alt=&#34;expr logo&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Expr&lt;/strong&gt; package provides an engine that can compile and evaluate expressions. An expression is a one-liner that returns a value (mostly, but not limited to, booleans). It is designed for simplicity, speed and safety.&lt;/p&gt; &#xA;&lt;p&gt;The purpose of the package is to allow users to use expressions inside configuration for more complex logic. It is a perfect candidate for the foundation of a &lt;em&gt;business rule engine&lt;/em&gt;. The idea is to let configure things in a dynamic way without recompile of a program:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;# Get the special price if&#xA;user.Group in [&#34;good_customers&#34;, &#34;collaborator&#34;]&#xA;&#xA;# Promote article to the homepage when&#xA;len(article.Comments) &amp;gt; 100 and article.Category not in [&#34;misc&#34;]&#xA;&#xA;# Send an alert when&#xA;product.Stock &amp;lt; 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Seamless integration with Go (no need to redefine types)&lt;/li&gt; &#xA; &lt;li&gt;Static typing (&lt;a href=&#34;https://godoc.org/github.com/antonmedv/expr#example-Env&#34;&gt;example&lt;/a&gt;). &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;out, err := expr.Compile(`name + age`)&#xA;// err: invalid operation + (mismatched types string and int)&#xA;// | name + age&#xA;// | .....^&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;User-friendly error messages.&lt;/li&gt; &#xA; &lt;li&gt;Reasonable set of basic operators.&lt;/li&gt; &#xA; &lt;li&gt;Builtins &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;. &lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34;&gt;all(Tweets, {.Size &amp;lt;= 280})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Fast (&lt;a href=&#34;https://github.com/antonmedv/golang-expression-evaluation-comparison#readme&#34;&gt;benchmarks&lt;/a&gt;): uses bytecode virtual machine and optimizing compiler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/antonmedv/expr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://expr.medv.io/docs/Getting-Started&#34;&gt;Getting Started&lt;/a&gt; page for developer documentation.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://expr.medv.io/docs/Language-Definition&#34;&gt;Language Definition&lt;/a&gt; page to learn the syntax.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Expr Code Editor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://bit.ly/expr-code-editor&#34;&gt; &lt;img src=&#34;https://antonmedv.github.io/expr/ogimage.png&#34; align=&#34;center&#34; alt=&#34;Expr Code Editor&#34; width=&#34;1200&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Also, I have an embeddable code editor written in JavaScript which allows editing expressions with syntax highlighting and autocomplete based on your types declaration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://antonmedv.github.io/expr/&#34;&gt;Learn more â†’&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/z7T8ytJ1T1d&#34;&gt;Play Online&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/antonmedv/expr&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;env := map[string]interface{}{&#xA;&#x9;&#x9;&#34;greet&#34;:   &#34;Hello, %v!&#34;,&#xA;&#x9;&#x9;&#34;names&#34;:   []string{&#34;world&#34;, &#34;you&#34;},&#xA;&#x9;&#x9;&#34;sprintf&#34;: fmt.Sprintf,&#xA;&#x9;}&#xA;&#xA;&#x9;code := `sprintf(greet, names[0])`&#xA;&#xA;&#x9;program, err := expr.Compile(code, expr.Env(env))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;output, err := expr.Run(program, env)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(output)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/4S4brsIvU4i&#34;&gt;Play Online&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/antonmedv/expr&#34;&#xA;)&#xA;&#xA;type Tweet struct {&#xA;&#x9;Len int&#xA;}&#xA;&#xA;type Env struct {&#xA;&#x9;Tweets []Tweet&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;code := `all(Tweets, {.Len &amp;lt;= 240})`&#xA;&#xA;&#x9;program, err := expr.Compile(code, expr.Env(Env{}))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;env := Env{&#xA;&#x9;&#x9;Tweets: []Tweet{{42}, {98}, {69}},&#xA;&#x9;}&#xA;&#x9;output, err := expr.Run(program, env)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(output)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who uses Expr?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aviasales.ru&#34;&gt;Aviasales&lt;/a&gt; uses Expr as a business rule engine for our flight search engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wish.com&#34;&gt;Wish.com&lt;/a&gt; uses Expr for decision-making rule engine in the Wish Assistant.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io&#34;&gt;Argo&lt;/a&gt; uses Expr in Argo Rollouts and Argo Workflows for Kubernetes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crowdsec.net&#34;&gt;Crowdsec&lt;/a&gt; uses Expr in a security automation tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.faceit.com&#34;&gt;FACEIT&lt;/a&gt; uses Expr to allow customization of its eSports matchmaking algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qiniu.com&#34;&gt;qiniu&lt;/a&gt; uses Expr in trade systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jungleegames.com/&#34;&gt;Junglee Games&lt;/a&gt; uses Expr for an in house marketing retention tool &lt;a href=&#34;https://www.linkedin.com/pulse/meet-project-audience-our-no-code-swiss-army-knife-product-bharti&#34;&gt;Project Audience&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opentelemetry.io&#34;&gt;OpenTelemetry&lt;/a&gt; uses Expr in the OpenTelemetry Collector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/philips-labs/tabia&#34;&gt;Philips Labs&lt;/a&gt; uses Expr in Tabia, a tool for collecting insights on the characteristics of our code bases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coredns.io&#34;&gt;CoreDNS&lt;/a&gt; uses Expr in CoreDNS, a DNS server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chaos-mesh.org&#34;&gt;Chaos Mesh&lt;/a&gt; uses Expr in Chaos Mesh, a cloud-native Chaos Engineering platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://milvus.io&#34;&gt;Milvus&lt;/a&gt; uses Expr in Milvus, an open-source vector database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visually.io&#34;&gt;Visually.io&lt;/a&gt; uses Expr as a business rule engine for our personalization targeting algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akvorado/akvorado&#34;&gt;Akvorado&lt;/a&gt; uses Expr to classify exporters and interfaces in network flows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/antonmedv/expr/edit/master/README.md&#34;&gt;Add your company too&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/antonmedv/expr/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>