<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-17T01:35:56Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aws/amazon-vpc-cni-k8s</title>
    <updated>2023-02-17T01:35:56Z</updated>
    <id>tag:github.com,2023-02-17:/aws/amazon-vpc-cni-k8s</id>
    <link href="https://github.com/aws/amazon-vpc-cni-k8s" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Networking plugin repository for pod networking in Kubernetes using Elastic Network Interfaces on AWS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;amazon-vpc-cni-k8s&lt;/h1&gt; &#xA;&lt;p&gt;Networking plugin for pod networking in &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt; using &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html&#34;&gt;Elastic Network Interfaces&lt;/a&gt; on AWS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/actions&#34;&gt;&lt;img src=&#34;https://github.com/aws/amazon-vpc-cni-k8s/workflows/Nightly%20Cron%20tests/badge.svg?sanitize=true&#34; alt=&#34;Nightly Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/aws/amazon-vpc-cni-k8s&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/aws/amazon-vpc-cni-k8s?&#34; alt=&#34;GoReport Widget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/aws/amazon-vpc-cni-k8s&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/aws/amazon-vpc-cni-k8s/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Download the latest version of the &lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/master/config/&#34;&gt;yaml&lt;/a&gt; and apply it to the cluster.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl apply -f aws-k8s-cni.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Launch kubelet with network plugins set to cni (&lt;code&gt;--network-plugin=cni&lt;/code&gt;), the cni directories configured (&lt;code&gt;--cni-config-dir&lt;/code&gt; and &lt;code&gt;--cni-bin-dir&lt;/code&gt;) and node ip set to the primary IPv4 address of the primary ENI for the instance (&lt;code&gt;--node-ip=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)&lt;/code&gt;). It is also recommended that you set &lt;code&gt;--max-pods&lt;/code&gt; equal to &lt;em&gt;(the number of ENIs for the instance type Ã— (the number of IPs per ENI - 1)) + 2&lt;/em&gt;; for details, see &lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/master/pkg/awsutils/vpc_ip_resource_limit.go&#34;&gt;vpc_ip_resource_limit.go&lt;/a&gt;. Setting &lt;code&gt;--max-pods&lt;/code&gt; will prevent scheduling that exceeds the IP address resources available to the kubelet.&lt;/p&gt; &#xA;&lt;p&gt;The default manifest expects &lt;code&gt;--cni-conf-dir=/etc/cni/net.d&lt;/code&gt; and &lt;code&gt;--cni-bin-dir=/opt/cni/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively there is also a &lt;a href=&#34;https://helm.sh/&#34;&gt;Helm&lt;/a&gt; chart: &lt;a href=&#34;https://github.com/aws/eks-charts/tree/master/stable/aws-vpc-cni&#34;&gt;eks/aws-vpc-cni&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;IAM Policy&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/master/docs/iam-policy.md&#34;&gt;here&lt;/a&gt; for required IAM policies.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;make&lt;/code&gt; defaults to &lt;code&gt;make build-linux&lt;/code&gt; that builds the Linux binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unit-test&lt;/code&gt;, &lt;code&gt;format&lt;/code&gt;,&lt;code&gt;lint&lt;/code&gt; and &lt;code&gt;vet&lt;/code&gt; provide ways to run the respective tests/tools and should be run before submitting a PR.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make docker&lt;/code&gt; will create a docker container using the docker-build with the finished binaries, with a tag of &lt;code&gt;amazon/amazon-k8s-cni:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make docker-build&lt;/code&gt; uses a docker container (golang:1.16) to build the binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make docker-unit-tests&lt;/code&gt; uses a docker container (golang:1.16) to run all unit tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;There are 2 components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/network-plugins/#cni&#34;&gt;CNI Plugin&lt;/a&gt;, which will wire up the host&#39;s and pod&#39;s network stack when called.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ipamd&lt;/code&gt;, a long-running node-Local IP Address Management (IPAM) daemon, is responsible for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;maintaining a warm-pool of available IP addresses, and&lt;/li&gt; &#xA;   &lt;li&gt;assigning an IP address to a Pod.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The details can be found in &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/raw/master/docs/cni-proposal.md&#34;&gt;Proposal: CNI plugin for Kubernetes networking over AWS VPC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Help &amp;amp; Feedback&lt;/h2&gt; &#xA;&lt;p&gt;For help, please consider the following venues (in order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.github.io/aws-eks-best-practices/networking/index/&#34;&gt;Amazon EKS Best Practices Guide for Networking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/raw/master/docs/troubleshooting.md&#34;&gt;Troubleshooting Guide&lt;/a&gt; provides tips on how to debug and troubleshoot this CNI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/issues&#34;&gt;Search open issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/issues/new/choose&#34;&gt;File an issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat with us on the &lt;code&gt;#aws-vpc-cni&lt;/code&gt; channel in the &lt;a href=&#34;https://kubernetes.slack.com/&#34;&gt;Kubernetes Slack&lt;/a&gt; community.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ENI Allocation&lt;/h2&gt; &#xA;&lt;p&gt;When a worker node first joins the cluster, there is only 1 ENI along with all of its addresses in the ENI. Without any configuration, ipamd always tries to keep one extra ENI.&lt;/p&gt; &#xA;&lt;p&gt;When the number of pods running on the node exceeds the number of addresses on a single ENI, the CNI backend starts allocating a new ENI using the following allocation scheme:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the number of current running Pods is between 0 and 29, ipamd will allocate one more eni. And Warm-Pool size is 2 eni * (30 -1) = 58&lt;/li&gt; &#xA; &lt;li&gt;If the number of current running Pods is between 30 and 58, ipamd will allocate 2 more eni. And Warm-Pool size is 3 eni * (30 -1) = 87&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, a m4.4xlarge node can have up to 8 ENIs, and each ENI can have up to 30 IP addresses. See &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html&#34;&gt;Elastic Network Interfaces documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;For a detailed explanation, see &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/raw/master/docs/eni-and-ip-target.md&#34;&gt;&lt;code&gt;WARM_ENI_TARGET&lt;/code&gt;, &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; and &lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CNI Configuration Variables&lt;a name=&#34;cni-env-vars&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The Amazon VPC CNI plugin for Kubernetes supports a number of configuration options, which are set through environment variables. The following environment variables are available, and all of them are optional.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_CNI_NODE_PORT_SUPPORT&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies whether &lt;code&gt;NodePort&lt;/code&gt; services are enabled on a worker node&#39;s primary network interface. This requires additional &lt;code&gt;iptables&lt;/code&gt; rules, and the kernel&#39;s reverse path filter on the primary interface is set to &lt;code&gt;loose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies that your pods may use subnets and security groups that are independent of your worker node&#39;s VPC configuration. By default, pods share the same subnet and security groups as the worker node&#39;s primary interface. Setting this variable to &lt;code&gt;true&lt;/code&gt; causes &lt;code&gt;ipamd&lt;/code&gt; to use the security groups and VPC subnet in a worker node&#39;s &lt;code&gt;ENIConfig&lt;/code&gt; for elastic network interface allocation. You must create an &lt;code&gt;ENIConfig&lt;/code&gt; custom resource for each subnet that your pods will reside in, and then annotate or label each worker node to use a specific &lt;code&gt;ENIConfig&lt;/code&gt;. Multiple worker nodes can be annotated or labelled with the same &lt;code&gt;ENIConfig&lt;/code&gt;, but each Worker node can be annotated with a single &lt;code&gt;ENIConfig&lt;/code&gt; at a time. Further, the subnet in the &lt;code&gt;ENIConfig&lt;/code&gt; must belong to the same Availability Zone that the worker node resides in. For more information, see &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/cni-custom-network.html&#34;&gt;&lt;em&gt;CNI Custom Networking&lt;/em&gt;&lt;/a&gt; in the Amazon EKS User Guide.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ENI_CONFIG_ANNOTATION_DEF&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;k8s.amazonaws.com/eniConfig&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies node annotation key name. This should be used when &lt;code&gt;AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG=true&lt;/code&gt;. Annotation value will be used to set &lt;code&gt;ENIConfig&lt;/code&gt; name. Note that annotations take precedence over labels.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ENI_CONFIG_LABEL_DEF&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;k8s.amazonaws.com/eniConfig&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies node label key name. This should be used when &lt;code&gt;AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG=true&lt;/code&gt;. Label value will be used to set &lt;code&gt;ENIConfig&lt;/code&gt; name. Note that annotations will take precedence over labels. To use labels, ensure there is no annotation with key &lt;code&gt;k8s.amazonaws.com/eniConfig&lt;/code&gt; or defined key (in &lt;code&gt;ENI_CONFIG_ANNOTATION_DEF&lt;/code&gt;) set on the node. To select an &lt;code&gt;ENIConfig&lt;/code&gt; based upon availability zone set this to &lt;code&gt;failure-domain.beta.kubernetes.io/zone&lt;/code&gt; and create an &lt;code&gt;ENIConfig&lt;/code&gt; custom resource for each availability zone (e.g. &lt;code&gt;us-east-1a&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_ENI_MTU&lt;/code&gt; (v1.6.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Integer as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: 9001&lt;/p&gt; &#xA;&lt;p&gt;Used to configure the MTU size for attached ENIs. The valid range is from &lt;code&gt;576&lt;/code&gt; to &lt;code&gt;9001&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_CNI_EXTERNALSNAT&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies whether an external NAT gateway should be used to provide SNAT of secondary ENI IP addresses. If set to &lt;code&gt;true&lt;/code&gt;, the SNAT &lt;code&gt;iptables&lt;/code&gt; rule and off-VPC IP rule are not applied, and these rules are removed if they have already been applied. Disable SNAT if you need to allow inbound communication to your pods from external VPNs, direct connections, and external VPCs, and your pods do not need to access the Internet directly via an Internet Gateway. However, your nodes must be running in a private subnet and connected to the internet through an AWS NAT Gateway or another external NAT device.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_CNI_RANDOMIZESNAT&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;prng&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Valid Values: &lt;code&gt;hashrandom&lt;/code&gt;, &lt;code&gt;prng&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies whether the SNAT &lt;code&gt;iptables&lt;/code&gt; rule should randomize the outgoing ports for connections. This setting takes effect when &lt;code&gt;AWS_VPC_K8S_CNI_EXTERNALSNAT=false&lt;/code&gt;, which is the default setting. The default setting for &lt;code&gt;AWS_VPC_K8S_CNI_RANDOMIZESNAT&lt;/code&gt; is &lt;code&gt;prng&lt;/code&gt;, meaning that &lt;code&gt;--random-fully&lt;/code&gt; will be added to the SNAT &lt;code&gt;iptables&lt;/code&gt; rule. For old versions of &lt;code&gt;iptables&lt;/code&gt; that do not support &lt;code&gt;--random-fully&lt;/code&gt; this option will fall back to &lt;code&gt;--random&lt;/code&gt;. To disable random port allocation, if you for example rely on sequential port allocation for outgoing connections set it to &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Any options other than &lt;code&gt;none&lt;/code&gt; will cause outbound connections to be assigned a source port that is not necessarily part of the ephemeral port range set at the OS level (&lt;code&gt;/proc/sys/net/ipv4/ip_local_port_range&lt;/code&gt;). This is relevant for any customers that might have NACLs restricting traffic based on the port range found in &lt;code&gt;ip_local_port_range&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_CNI_EXCLUDE_SNAT_CIDRS&lt;/code&gt; (v1.6.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: empty&lt;/p&gt; &#xA;&lt;p&gt;Specify a comma-separated list of IPv4 CIDRs to exclude from SNAT. For every item in the list an &lt;code&gt;iptables&lt;/code&gt; rule and off-VPC IP rule will be applied. If an item is not a valid ipv4 range it will be skipped. This should be used when &lt;code&gt;AWS_VPC_K8S_CNI_EXTERNALSNAT=false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;WARM_ENI_TARGET&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: Integer as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the number of free elastic network interfaces (and all of their available IP addresses) that the &lt;code&gt;ipamd&lt;/code&gt; daemon should attempt to keep available for pod assignment on the node. By default, &lt;code&gt;ipamd&lt;/code&gt; attempts to keep 1 elastic network interface and all of its IP addresses available for pod assignment. The number of IP addresses per network interface varies by instance type. For more information, see &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI&#34;&gt;IP Addresses Per Network Interface Per Instance Type&lt;/a&gt; in the &lt;em&gt;Amazon EC2 User Guide for Linux Instances&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, an &lt;code&gt;m4.4xlarge&lt;/code&gt; launches with 1 network interface and 30 IP addresses. If 5 pods are placed on the node and 5 free IP addresses are removed from the IP address warm pool, then &lt;code&gt;ipamd&lt;/code&gt; attempts to allocate more interfaces until &lt;code&gt;WARM_ENI_TARGET&lt;/code&gt; free interfaces are available on the node. If &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; is set, then this environment variable is ignored and the &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; behavior is used instead.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;WARM_IP_TARGET&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: Integer&lt;/p&gt; &#xA;&lt;p&gt;Default: None&lt;/p&gt; &#xA;&lt;p&gt;Specifies the number of free IP addresses that the &lt;code&gt;ipamd&lt;/code&gt; daemon should attempt to keep available for pod assignment on the node. Setting this to a non-positive value is the same as setting this to 0 or not setting the variable. With &lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; then &lt;code&gt;ipamd&lt;/code&gt; daemon will check if the existing (/28) prefixes are enough to maintain the &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; if it is not sufficient then more prefixes will be attached.&lt;/p&gt; &#xA;&lt;p&gt;For example,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;if &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; is set to 5, then &lt;code&gt;ipamd&lt;/code&gt; attempts to keep 5 free IP addresses available at all times. If the elastic network interfaces on the node are unable to provide these free addresses, &lt;code&gt;ipamd&lt;/code&gt; attempts to allocate more interfaces until &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; free IP addresses are available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; is 16. Initially, 1 (/28) prefix is sufficient but once a single pod is assigned IP then remaining free IPs are 15 hence IPAMD will allocate 1 more prefix to achieve 16 &lt;code&gt;WARM_IP_TARGET&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE!&lt;/strong&gt; Avoid this setting for large clusters, or if the cluster has high pod churn. Setting it will cause additional calls to the EC2 API and that might cause throttling of the requests. It is strongly suggested to set &lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt; when using &lt;code&gt;WARM_IP_TARGET&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If both &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; and &lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt; are set, &lt;code&gt;ipamd&lt;/code&gt; will attempt to meet both constraints. This environment variable overrides &lt;code&gt;WARM_ENI_TARGET&lt;/code&gt; behavior. For a detailed explanation, see &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/raw/master/docs/eni-and-ip-target.md&#34;&gt;&lt;code&gt;WARM_ENI_TARGET&lt;/code&gt;, &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; and &lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; overrides &lt;code&gt;WARM_PREFIX_TARGET&lt;/code&gt; behavior. For a detailed explanation, see &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/raw/master/docs/prefix-and-ip-target.md&#34;&gt;&lt;code&gt;WARM_PREFIX_TARGET&lt;/code&gt;, &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; and &lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt; (v1.6.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Integer&lt;/p&gt; &#xA;&lt;p&gt;Default: None&lt;/p&gt; &#xA;&lt;p&gt;Specifies the number of total IP addresses that the &lt;code&gt;ipamd&lt;/code&gt; daemon should attempt to allocate for pod assignment on the node. &lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt; behaves identically to &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; except that instead of setting a target number of free IP addresses to keep available at all times, it sets a target number for a floor on how many total IP addresses are allocated. Setting to a non-positive value is same as setting this to 0 or not setting the variable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt; is for pre-scaling, &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; is for dynamic scaling. For example, suppose a cluster has an expected pod density of approximately 30 pods per node. If &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; is set to 30 to ensure there are enough IPs allocated up front by the CNI, then 30 pods are deployed to the node, the CNI will allocate an additional 30 IPs, for a total of 60, accelerating IP exhaustion in the relevant subnets. If instead &lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt; is set to 30 and &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; to 2, after the 30 pods are deployed the CNI would allocate an additional 2 IPs. This still provides elasticity, but uses roughly half as many IPs as using WARM_IP_TARGET alone (32 IPs vs 60 IPs).&lt;/p&gt; &#xA;&lt;p&gt;This also improves the reliability of the EKS cluster by reducing the number of calls necessary to allocate or deallocate private IPs, which may be throttled, especially at scaling-related times.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;MAX_ENI&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: Integer&lt;/p&gt; &#xA;&lt;p&gt;Default: None&lt;/p&gt; &#xA;&lt;p&gt;Specifies the maximum number of ENIs that will be attached to the node. When &lt;code&gt;MAX_ENI&lt;/code&gt; is unset or 0 (or lower), the setting is not used, and the maximum number of ENIs is always equal to the maximum number for the instance type in question. Even when &lt;code&gt;MAX_ENI&lt;/code&gt; is a positive number, it is limited by the maximum number for the instance type.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_CNI_LOGLEVEL&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;DEBUG&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Valid Values: &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;FATAL&lt;/code&gt;. (Not case sensitive)&lt;/p&gt; &#xA;&lt;p&gt;Specifies the loglevel for &lt;code&gt;ipamd&lt;/code&gt; and &lt;code&gt;cni-metric-helper&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_CNI_LOG_FILE&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;/host/var/log/aws-routed-eni/ipamd.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Valid Values: &lt;code&gt;stdout&lt;/code&gt; or a file path&lt;/p&gt; &#xA;&lt;p&gt;Specifies where to write the logging output of &lt;code&gt;ipamd&lt;/code&gt;. Either to stdout or to override the default file (i.e., &lt;code&gt;/var/log/aws-routed-eni/ipamd.log&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_PLUGIN_LOG_FILE&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;/var/log/aws-routed-eni/plugin.log&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Valid Values: &lt;code&gt;stderr&lt;/code&gt; or a file path&lt;/p&gt; &#xA;&lt;p&gt;Specifies where to write the logging output for &lt;code&gt;aws-cni&lt;/code&gt; plugin. Either to &lt;code&gt;stderr&lt;/code&gt; or to override the default file (i.e., &lt;code&gt;/var/log/aws-routed-eni/plugin.log&lt;/code&gt;). &lt;code&gt;Stdout&lt;/code&gt; cannot be supported for plugin log, please refer to &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/issues/1248&#34;&gt;#1248&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Note: If chaining an external plugin (i.e Cilium) that does not provide a &lt;code&gt;pluginLogFile&lt;/code&gt; in its config file, the CNI plugin will by default write to &lt;code&gt;os.Stderr&lt;/code&gt;. The output of &lt;code&gt;cmdAdd&lt;/code&gt; are available in the Kubelet logs.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_PLUGIN_LOG_LEVEL&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;DEBUG&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Valid Values: &lt;code&gt;DEBUG&lt;/code&gt;, &lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;WARN&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;FATAL&lt;/code&gt;. (Not case sensitive)&lt;/p&gt; &#xA;&lt;p&gt;Specifies the loglevel for &lt;code&gt;aws-cni&lt;/code&gt; plugin.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;INTROSPECTION_BIND_ADDRESS&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;127.0.0.1:61679&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the bind address for the introspection endpoint.&lt;/p&gt; &#xA;&lt;p&gt;A Unix Domain Socket can be specified with the &lt;code&gt;unix:&lt;/code&gt; prefix before the socket path.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;DISABLE_INTROSPECTION&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies whether introspection endpoints are disabled on a worker node. Setting this to &lt;code&gt;true&lt;/code&gt; will reduce the debugging information we can get from the node when running the &lt;code&gt;aws-cni-support.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;DISABLE_METRICS&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies whether the prometheus metrics endpoint is disabled or not for ipamd. By default metrics are published on &lt;code&gt;:61678/metrics&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_CNI_VETHPREFIX&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;eni&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the veth prefix used to generate the host-side veth device name for the CNI. The prefix can be at most 4 characters long. The prefixes &lt;code&gt;eth&lt;/code&gt;, &lt;code&gt;vlan&lt;/code&gt;, and &lt;code&gt;lo&lt;/code&gt; are reserved by the CNI plugin and cannot be specified. We recommend using prefix name not shared by any other network interfaces on the worker node instance.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ADDITIONAL_ENI_TAGS&lt;/code&gt; (v1.6.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;{}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example values: &lt;code&gt;{&#34;tag_key&#34;: &#34;tag_val&#34;}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Metadata applied to ENI helps you categorize and organize your resources for billing or other purposes. Each tag consists of a custom-defined key and an optional value. Tag keys can have a maximum character length of 128 characters. Tag values can have a maximum length of 256 characters. These tags will be added to all ENIs on the host.&lt;/p&gt; &#xA;&lt;p&gt;Important: Custom tags should not contain &lt;code&gt;k8s.amazonaws.com&lt;/code&gt; prefix as it is reserved. If the tag has &lt;code&gt;k8s.amazonaws.com&lt;/code&gt; string, tag addition will be ignored.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;AWS_VPC_K8S_CNI_CONFIGURE_RPFILTER&lt;/code&gt; (deprecated v1.12.1+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies whether ipamd should configure rp filter for primary interface. Setting this to &lt;code&gt;false&lt;/code&gt; will require rp filter to be configured through init container.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE!&lt;/strong&gt; &lt;code&gt;AWS_VPC_K8S_CNI_CONFIGURE_RPFILTER&lt;/code&gt; has been deprecated, so setting this environment variable results in a no-op. The init container unconditionally configures the rp filter for the primary interface.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;CLUSTER_NAME&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the cluster name to tag allocated ENIs with. See the &#34;Cluster Name tag&#34; section below.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;CLUSTER_ENDPOINT&lt;/code&gt; (v1.12.1+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specifies the cluster endpoint to use for connecting to the api-server without relying on kube-proxy. This is an optional configuration parameter that can improve the initialization time of the AWS VPC CNI.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ENABLE_POD_ENI&lt;/code&gt; (v1.7.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To enable security groups for pods you need to have at least an EKS 1.17 eks.3 cluster.&lt;/p&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;ENABLE_POD_ENI&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will allow IPAMD to add the &lt;code&gt;vpc.amazonaws.com/has-trunk-attached&lt;/code&gt; label to the node if the instance has the capacity to attach an additional ENI.&lt;/p&gt; &#xA;&lt;p&gt;The label notifies vpc-resource-controller (&lt;a href=&#34;https://github.com/aws/amazon-vpc-resource-controller-k8s&#34;&gt;https://github.com/aws/amazon-vpc-resource-controller-k8s&lt;/a&gt;) to attach a Trunk ENI to the instance. The label value is initially set to &lt;code&gt;false&lt;/code&gt; and is marked to &lt;code&gt;true&lt;/code&gt; by IPAMD when vpc-resource-controller attaches a Trunk ENI to the instance. However, there might be cases where the label value will remain &lt;code&gt;false&lt;/code&gt; if the instance doesn&#39;t support ENI Trunking.&lt;/p&gt; &#xA;&lt;p&gt;Once enabled the VPC resource controller will then advertise branch network interfaces as extended resources on these nodes in your cluster. Branch interface capacity is additive to existing instance type limits for secondary IP addresses and prefixes. For example, a c5.4xlarge can continue to have up to 234 secondary IP addresses or 234 /28 prefixes assigned to standard network interfaces and up to 54 branch network interfaces. Each branch network interface only receives a single primary IP address and this IP address will be allocated to pods with a security group(branch ENI pods).&lt;/p&gt; &#xA;&lt;p&gt;Any of the WARM targets do not impact the scale of the branch ENI pods so you will have to set the WARM_{ENI/IP/PREFIX}_TARGET based on the number of non-branch ENI pods. If you are having the cluster mostly using pods with a security group consider setting WARM_IP_TARGET to a very low value instead of default WARM_ENI_TARGET or WARM_PREFIX_TARGET to reduce wastage of IPs/ENIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE!&lt;/strong&gt; Toggling &lt;code&gt;ENABLE_POD_ENI&lt;/code&gt; from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will not detach the Trunk ENI from an instance. To delete/detach the Trunk ENI from an instance, you need to recycle the instance.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;POD_SECURITY_GROUP_ENFORCING_MODE&lt;/code&gt; (v1.11.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;strict&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Valid Values: &lt;code&gt;strict&lt;/code&gt;, &lt;code&gt;standard&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once &lt;code&gt;ENABLE_POD_ENI&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, this value controls how the traffic of pods with the security group behaves.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;strict&lt;/code&gt; mode: all inbound/outbound traffic from pod with security group will be enforced by security group rules. This is the &lt;strong&gt;default&lt;/strong&gt; mode if POD_SECURITY_GROUP_ENFORCING_MODE is not set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;standard&lt;/code&gt; mode: the traffic of pod with security group behaves same as pods without a security group, except that each pod occupies a dedicated branch ENI.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;inbound traffic to pod with security group from another host will be enforced by security group rules.&lt;/li&gt; &#xA;   &lt;li&gt;outbound traffic from pod with security group to another host in the same VPC will be enforced by security group rules.&lt;/li&gt; &#xA;   &lt;li&gt;inbound/outbound traffic from another pod on the same host or another service on the same host(such as kubelet/nodeLocalDNS) won&#39;t be enforced by security group rules.&lt;/li&gt; &#xA;   &lt;li&gt;outbound traffic from pod with security group to IP address outside VPC &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;if externalSNAT enabled, traffic won&#39;t be SNATed, thus will be enforced by security group rules.&lt;/li&gt; &#xA;     &lt;li&gt;if externalSNAT disabled, traffic will be SNATed via eth0, thus will only be enforced by the security group associated with eth0.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE!&lt;/strong&gt;: To make new behavior be in effect after switching the mode, existing pods with security group must be recycled. Alternatively, you can restart the nodes as well.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;DISABLE_TCP_EARLY_DEMUX&lt;/code&gt; (v1.7.3+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;ENABLE_POD_ENI&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, for the kubelet to connect via TCP (for liveness or readiness probes) to pods that are using per pod security groups, &lt;code&gt;DISABLE_TCP_EARLY_DEMUX&lt;/code&gt; should be set to &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;amazon-k8s-cni-init&lt;/code&gt; the container under &lt;code&gt;initcontainers&lt;/code&gt;. This will increase the local TCP connection latency slightly. Details on why this is needed can be found in this &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s/pull/1212#issuecomment-693540666&#34;&gt;#1212 comment&lt;/a&gt;. To use this setting, a Linux kernel version of at least 4.6 is needed on the worker node.&lt;/p&gt; &#xA;&lt;p&gt;You can use the below command to enable &lt;code&gt;DISABLE_TCP_EARLY_DEMUX&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl patch daemonset aws-node -n kube-system -p &#39;{&#34;spec&#34;: {&#34;template&#34;: {&#34;spec&#34;: {&#34;initContainers&#34;: [{&#34;env&#34;:[{&#34;name&#34;:&#34;DISABLE_TCP_EARLY_DEMUX&#34;,&#34;value&#34;:&#34;true&#34;}],&#34;name&#34;:&#34;aws-vpc-cni-init&#34;}]}}}}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; (v1.9.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To enable prefix delegation on nitro instances. Setting &lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will start allocating a prefix (/28 for IPv4 and /80 for IPv6) instead of a secondary IP in the ENIs subnet. The total number of prefixes and private IP addresses will be less than the limit on private IPs allowed by your instance. Setting or resetting of &lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; while pods are running or if ENIs are attached is supported and the new pods allocated will get IPs based on the mode of IPAMD but the max pods of kubelet should be updated which would need either kubelet restart or node recycle.&lt;/p&gt; &#xA;&lt;p&gt;Setting ENABLE_PREFIX_DELEGATION to true will not increase the density of branch ENI pods. The limit on the number of branch network interfaces per instance type will remain the same - &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html#supported-instance-types&#34;&gt;https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html#supported-instance-types&lt;/a&gt;. Each branch network will be allocated a primary IP and this IP will be allocated for the branch ENI pods.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s#vpc-cni-feature-matrix&#34;&gt;VPC CNI Feature Matrix&lt;/a&gt; section below for additional information around using Prefix delegation with Custom Networking and Security Groups Per Pod features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; needs to be set to &lt;code&gt;true&lt;/code&gt; when VPC CNI is configured to operate in IPv6 mode (supported in v1.10.0+). Prefix Delegation in IPv4 and IPv6 modes is supported on Nitro based Bare Metal instances as well from v1.11+. If you&#39;re using Prefix Delegation feature on Bare Metal instances, downgrading to an earlier version of VPC CNI from v1.11+ will be disruptive and not supported.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;WARM_PREFIX_TARGET&lt;/code&gt; (v1.9.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Integer&lt;/p&gt; &#xA;&lt;p&gt;Default: None&lt;/p&gt; &#xA;&lt;p&gt;Specifies the number of free IPv4(/28) prefixes that the &lt;code&gt;ipamd&lt;/code&gt; daemon should attempt to keep available for pod assignment on the node. Setting to a non-positive value is same as setting this to 0 or not setting the variable. This environment variable works when &lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; and is overridden when &lt;code&gt;WARM_IP_TARGET&lt;/code&gt; and &lt;code&gt;MINIMUM_IP_TARGET&lt;/code&gt; are configured.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;DISABLE_NETWORK_RESOURCE_PROVISIONING&lt;/code&gt; (v1.9.1+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;DISABLE_NETWORK_RESOURCE_PROVISIONING&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will make IPAMD depend only on IMDS to get attached ENIs and IPs/prefixes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ENABLE_BANDWIDTH_PLUGIN&lt;/code&gt; (v1.10.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;ENABLE_BANDWIDTH_PLUGIN&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will update &lt;code&gt;10-aws.conflist&lt;/code&gt; to include upstream &lt;a href=&#34;https://www.cni.dev/plugins/current/meta/bandwidth/&#34;&gt;bandwidth plugin&lt;/a&gt; as a chained plugin.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ANNOTATE_POD_IP&lt;/code&gt; (v1.9.3+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting &lt;code&gt;ANNOTATE_POD_IP&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will allow IPAMD to add an annotation &lt;code&gt;vpc.amazonaws.com/pod-ips&lt;/code&gt; to the pod with pod IP.&lt;/p&gt; &#xA;&lt;p&gt;There is a known &lt;a href=&#34;https://github.com/kubernetes/kubernetes/issues/39113&#34;&gt;issue&lt;/a&gt; with kubelet taking time to update &lt;code&gt;Pod.Status.PodIP&lt;/code&gt; leading to calico being blocked on programming the policy. Setting &lt;code&gt;ANNOTATE_POD_IP&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will enable AWS VPC CNI plugin to add Pod IP as an annotation to the pod spec to address this race condition.&lt;/p&gt; &#xA;&lt;p&gt;To annotate the pod with pod IP, you will have to add &#34;patch&#34; permission for pods resource in aws-node clusterrole. You can use the below command -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF &amp;gt; append.yaml&#xA;- apiGroups:&#xA;  - &#34;&#34;&#xA;  resources:&#xA;  - pods&#xA;  verbs:&#xA;  - patch&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl apply -f &amp;lt;(cat &amp;lt;(kubectl get clusterrole aws-node -o yaml) append.yaml)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ENABLE_IPv4&lt;/code&gt; (v1.10.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;VPC CNI can operate in either IPv4 or IPv6 mode. Setting &lt;code&gt;ENABLE_IPv4&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will configure it in IPv4 mode (default mode).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Dual-stack mode isn&#39;t yet supported. So, enabling both IPv4 and IPv6 will be treated as an invalid configuration.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ENABLE_IPv6&lt;/code&gt; (v1.10.0+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;VPC CNI can operate in either IPv4 or IPv6 mode. Setting &lt;code&gt;ENABLE_IPv6&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; (both under &lt;code&gt;aws-node&lt;/code&gt; and &lt;code&gt;aws-vpc-cni-init&lt;/code&gt; containers in the manifest) will configure it in IPv6 mode. IPv6 is only supported in Prefix Delegation mode, so &lt;code&gt;ENABLE_PREFIX_DELEGATION&lt;/code&gt; needs to be set to &lt;code&gt;true&lt;/code&gt; if VPC CNI is configured to operate in IPv6 mode. Prefix delegation is only supported on nitro instances.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Please make sure that the required IPv6 IAM policy is applied (Refer to &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s#iam-policy&#34;&gt;IAM Policy&lt;/a&gt; section above). Dual stack mode isn&#39;t yet supported. So, enabling both IPv4 and IPv6 will be treated as invalid configuration. Please refer to the &lt;a href=&#34;https://github.com/aws/amazon-vpc-cni-k8s#vpc-cni-feature-matrix&#34;&gt;VPC CNI Feature Matrix&lt;/a&gt; section below for additional information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;ENABLE_NFTABLES&lt;/code&gt; (v1.12.1+)&lt;/h4&gt; &#xA;&lt;p&gt;Type: Boolean as a String&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;VPC CNI uses &lt;code&gt;iptables-legacy&lt;/code&gt; by default. Setting &lt;code&gt;ENABLE_NFTABLES&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will update VPC CNI to use &lt;code&gt;iptables-nft&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; VPC CNI image contains &lt;code&gt;iptables-legacy&lt;/code&gt; and &lt;code&gt;iptables-nft&lt;/code&gt;. Switching between them is done via &lt;code&gt;update-alternatives&lt;/code&gt;. It is &lt;em&gt;strongly&lt;/em&gt; recommended that the iptables mode matches that which is used by the base OS and &lt;code&gt;kube-proxy&lt;/code&gt;. Switching modes while pods are running or rules are installed will not trigger reconciliation. It is recommended that rules are manually updated or nodes are drained and cordoned before updating. If reloading node, ensure that previous rules are not set to be persisted.&lt;/p&gt; &#xA;&lt;h3&gt;VPC CNI Feature Matrix&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;IP Mode&lt;/th&gt; &#xA;   &lt;th&gt;Secondary IP Mode&lt;/th&gt; &#xA;   &lt;th&gt;Prefix Delegation&lt;/th&gt; &#xA;   &lt;th&gt;Security Groups Per Pod&lt;/th&gt; &#xA;   &lt;th&gt;WARM &amp;amp; MIN IP/Prefix Targets&lt;/th&gt; &#xA;   &lt;th&gt;External SNAT&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;IPv4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;IPv6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;ENI tags related to Allocation&lt;/h3&gt; &#xA;&lt;p&gt;This plugin interacts with the following tags on ENIs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cluster.k8s.amazonaws.com/name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node.k8s.amazonaws.com/instance_id&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node.k8s.amazonaws.com/no_manage&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cluster Name tag&lt;/h4&gt; &#xA;&lt;p&gt;The tag &lt;code&gt;cluster.k8s.amazonaws.com/name&lt;/code&gt; will be set to the cluster name of the aws-node daemonset which created the ENI.&lt;/p&gt; &#xA;&lt;h4&gt;Instance ID tag&lt;/h4&gt; &#xA;&lt;p&gt;The tag &lt;code&gt;node.k8s.amazonaws.com/instance_id&lt;/code&gt; will be set to the instance ID of the aws-node instance that allocated this ENI.&lt;/p&gt; &#xA;&lt;h4&gt;No Manage tag&lt;/h4&gt; &#xA;&lt;p&gt;The tag &lt;code&gt;node.k8s.amazonaws.com/no_manage&lt;/code&gt; is read by the aws-node daemonset to determine whether an ENI attached to the machine should not be configured or used for private IPs.&lt;/p&gt; &#xA;&lt;p&gt;This tag is not set by the cni plugin itself, but rather may be set by a user to indicate that an ENI is intended for host networking pods, or for some other process unrelated to Kubernetes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Attaching an ENI with the &lt;code&gt;no_manage&lt;/code&gt; tag will result in an incorrect value for the Kubelet&#39;s &lt;code&gt;--max-pods&lt;/code&gt; configuration option. Consider also updating the &lt;code&gt;MAX_ENI&lt;/code&gt; and &lt;code&gt;--max-pods&lt;/code&gt; configuration options on this plugin and the kubelet respectively if you are making use of this tag.&lt;/p&gt; &#xA;&lt;h3&gt;Container Runtime&lt;/h3&gt; &#xA;&lt;p&gt;For VPC CNI &amp;gt;=v1.12.0, IPAMD have switched to use an on-disk file &lt;code&gt;/var/run/aws-node/ipam.json&lt;/code&gt; to track IP allocations, thus became container runtime agnostic and no longer requires access to Container Runtime Interface(CRI) socket.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Helm chart &amp;gt;=v1.2.0 is released with VPC CNI v1.12.0, thus no longer supports the &lt;code&gt;cri.hostPath.path&lt;/code&gt;. If you need to install a VPC CNI &amp;lt;v1.12.0 with helm chart, a Helm chart version that &amp;lt;v1.2.0 should be used.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For VPC CNI &amp;lt;v1.12.0, IPAMD still depends on CRI to track IP allocations using pod sandboxes information upon its starting.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;By default the dockershim CRI socket was mounted but can be customized to use other CRI: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The mountPath should be changed to &lt;code&gt;/var/run/cri.sock&lt;/code&gt; and hostPath should be pointed to CRI used by kubelet, such as &lt;code&gt;/var/run/containerd/containerd.sock&lt;/code&gt; for containerd.&lt;/li&gt; &#xA;   &lt;li&gt;With Helm chart &amp;lt;v1.2.0, the flag &lt;code&gt;--set cri.hostPath.path=/var/run/containerd/containerd.sock&lt;/code&gt; can set above for you.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Note&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When using a different container runtime instead of the default dockershim in VPC CNI, make sure kubelet is also configured to use the same CRI.&lt;/li&gt; &#xA;   &lt;li&gt;If you want to enable containerd runtime with the support provided by Amazon AMI, please follow the instructions in our documentation, &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html#containerd-bootstrap&#34;&gt;Enable the containerd runtime bootstrap flag&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;L-IPAMD&lt;/code&gt;(aws-node daemonSet) running on every worker node requires access to the Kubernetes API server. If it can &lt;strong&gt;not&lt;/strong&gt; reach the Kubernetes API server, ipamd will exit and CNI will not be able to get any IP address for Pods. Here is a way to confirm if &lt;code&gt;aws-node&lt;/code&gt; has access to the Kubernetes API server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# find out Kubernetes service IP, e.g. 10.0.0.1&#xA;kubectl get svc Kubernetes&#xA;NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE&#xA;kubernetes   ClusterIP   10.0.0.1   &amp;lt;none&amp;gt;        443/TCP   29d&#xA;&#xA;# ssh into worker node, check if worker node can reach API server&#xA;telnet 10.0.0.1 443&#xA;Trying 10.0.0.1...&#xA;Connected to 10.0.0.1.&#xA;Escape character is &#39;^]&#39;.  &amp;lt;-------- Kubernetes API server is reachable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security disclosures&lt;/h2&gt; &#xA;&lt;p&gt;If you think youâ€™ve found a potential security issue, please do not post it in the Issues. Instead, please follow the instructions &lt;a href=&#34;https://aws.amazon.com/security/vulnerability-reporting/&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;mailto:aws-security@amazon.com&#34;&gt;email AWS security directly&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/master/CONTRIBUTING.md&#34;&gt;See CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>