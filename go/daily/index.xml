<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-18T01:30:11Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>erigontech/erigon</title>
    <updated>2024-08-18T01:30:11Z</updated>
    <id>tag:github.com,2024-08-18:/erigontech/erigon</id>
    <link href="https://github.com/erigontech/erigon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ethereum implementation on the efficiency frontier https://erigon.gitbook.io&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Erigon&lt;/h1&gt; &#xA;&lt;p&gt;Documentation: &lt;strong&gt;&lt;a href=&#34;https://erigon.gitbook.io&#34;&gt;erigon.gitbook.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Erigon is an implementation of Ethereum (execution layer with embeddable consensus layer), on the efficiency frontier. &lt;a href=&#34;https://ethereum.org/en/developers/docs/nodes-and-clients/archive-nodes/#what-is-an-archive-node&#34;&gt;Archive Node&lt;/a&gt; by default.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/erigontech/erigon/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=erigontech_erigon&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=erigontech_erigon&amp;amp;metric=coverage&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--ts--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#system-requirements&#34;&gt;System Requirements&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#testnets&#34;&gt;Testnets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#block-production-pow-miner-or-pos-validator&#34;&gt;Block Production&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/erigontech/erigon&#34;&gt;GoDoc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#beacon-chain-consensus-layer&#34;&gt;Beacon Chain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#dev-chain&#34;&gt;Dev Chain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#caplin&#34;&gt;Caplin (Internal Consensus Layer)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#key-features&#34;&gt;Key features&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#more-efficient-state-storage&#34;&gt;More Efficient State Storage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#faster-initial-sync&#34;&gt;Faster Initial Sync&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#json-rpc-daemon&#34;&gt;JSON-RPC daemon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#run-all-components-by-docker-compose&#34;&gt;Run all components by docker-compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#grafana-dashboard&#34;&gt;Grafana dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#caplin&#34;&gt;Internal Consensus Layer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#getting-in-touch&#34;&gt;Getting in touch&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#erigon-discord-server&#34;&gt;Erigon Discord Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#reporting-security-issues/concerns&#34;&gt;Reporting security issues/concerns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#team&#34;&gt;Team&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#htop-shows-incorrect-memory-usage&#34;&gt;&lt;code&gt;htop&lt;/code&gt; shows incorrect memory usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--te--&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: this software is currently a tech preview. We will do our best to keep it stable and make no breaking changes but we don&#39;t guarantee anything. Things can and will break.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important defaults&lt;/strong&gt;: Erigon is an Archive Node by default (to remove history see: &lt;code&gt;--prune&lt;/code&gt; flags in &lt;code&gt;erigon --help&lt;/code&gt;). We don&#39;t allow change this flag after first start.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;In-depth links are marked by the microscope sign (ðŸ”¬) &lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For an Archive node of Ethereum Mainnet we recommend &amp;gt;=3.5TB storage space: 2.3TiB state (as of March 2024), 643GiB snapshots (can symlink or mount folder &lt;code&gt;&amp;lt;datadir&amp;gt;/snapshots&lt;/code&gt; to another disk), 200GB temp files (can symlink or mount folder &lt;code&gt;&amp;lt;datadir&amp;gt;/temp&lt;/code&gt; to another disk). Ethereum Mainnet Full node (see &lt;a href=&#34;https://erigon.gitbook.io/erigon/basic-usage/usage/type-of-node#full-node-or-pruned-node&#34;&gt;Pruned Node&lt;/a&gt;): 1.1TiB not including temp files (June 2024).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Gnosis Chain Archive: 1.7TiB (March 2024). Gnosis Chain Full node (see &lt;a href=&#34;https://erigon.gitbook.io/erigon/basic-usage/usage/type-of-node#full-node-or-pruned-node&#34;&gt;Pruned Node&lt;/a&gt;): 300GiB (June 2024).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Polygon Mainnet Archive: 8.5TiB (December 2023). Polygon Mainnet Full node (see &lt;a href=&#34;https://erigon.gitbook.io/erigon/basic-usage/usage/type-of-node#full-node-or-pruned-node&#34;&gt;Pruned Node&lt;/a&gt;) with &lt;code&gt;--prune.*.older 15768000&lt;/code&gt;: 5.1Tb (September 2023).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SSD or NVMe. Do not recommend HDD - on HDD Erigon will always stay N blocks behind chain tip, but not fall behind. Bear in mind that SSD performance deteriorates when close to capacity.&lt;/p&gt; &#xA;&lt;p&gt;RAM: &amp;gt;=16GB, 64-bit architecture.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Golang version &amp;gt;= 1.21&lt;/a&gt;; GCC 10+ or Clang; On Linux: kernel &amp;gt; v4&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ðŸ”¬ more details on disk storage &lt;a href=&#34;https://erigon.substack.com/p/disk-footprint-changes-in-new-erigon?s=r&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://ledgerwatch.github.io/turbo_geth_release.html#Disk-space&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;p&gt;For building the latest release (this will be suitable for most users just wanting to run a node):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --branch release/&amp;lt;x.xx&amp;gt; --single-branch https://github.com/erigontech/erigon.git&#xA;cd erigon&#xA;make erigon&#xA;./build/bin/erigon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check &lt;a href=&#34;https://github.com/erigontech/erigon/releases&#34;&gt;the list of releases&lt;/a&gt; for release notes.&lt;/p&gt; &#xA;&lt;p&gt;For building the bleeding edge development branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules https://github.com/erigontech/erigon.git&#xA;cd erigon&#xA;git checkout main&#xA;make erigon&#xA;./build/bin/erigon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default &lt;code&gt;--snapshots&lt;/code&gt; for &lt;code&gt;mainnet&lt;/code&gt;, &lt;code&gt;gnosis&lt;/code&gt;, &lt;code&gt;chiado&lt;/code&gt;. Other networks now have default &lt;code&gt;--snapshots=false&lt;/code&gt;. Increase download speed by flag &lt;code&gt;--torrent.download.rate=20mb&lt;/code&gt;. &lt;code&gt;ðŸ”¬ See &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/cmd/downloader/readme.md&#34;&gt;Downloader docs&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--datadir&lt;/code&gt; to choose where to store data.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--chain=gnosis&lt;/code&gt; for &lt;a href=&#34;https://www.gnosis.io/&#34;&gt;Gnosis Chain&lt;/a&gt;, &lt;code&gt;--chain=bor-mainnet&lt;/code&gt; for Polygon Mainnet, and &lt;code&gt;--chain=amoy&lt;/code&gt; for Polygon Amoy. For Gnosis Chain you need a &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#beacon-chain-consensus-layer&#34;&gt;Consensus Layer&lt;/a&gt; client alongside Erigon (&lt;a href=&#34;https://docs.gnosischain.com/node/manual/beacon&#34;&gt;https://docs.gnosischain.com/node/manual/beacon&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;make help&lt;/code&gt; will list and describe the convenience commands available in the &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/Makefile&#34;&gt;Makefile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Datadir structure&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;chaindata: recent blocks, state, recent state history. low-latency disk recommended.&lt;/li&gt; &#xA; &lt;li&gt;snapshots: old blocks, old state history. can symlink/mount it to cheaper disk. mostly immutable. must have ~100gb free space (for merge recent files to bigger one).&lt;/li&gt; &#xA; &lt;li&gt;temp: can grow to ~100gb, but usually empty. can symlink/mount it to cheaper disk.&lt;/li&gt; &#xA; &lt;li&gt;txpool: pending transactions. safe to remove.&lt;/li&gt; &#xA; &lt;li&gt;nodes: p2p peers. safe to remove.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Flags:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;verbosity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log.console.verbosity&lt;/code&gt; (overriding alias for &lt;code&gt;verbosity&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log.console.json&lt;/code&gt; (alias for &lt;code&gt;log.json&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log.dir.path&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log.dir.prefix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log.dir.verbosity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;log.dir.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to log only to the stdout/stderr the &lt;code&gt;--verbosity&lt;/code&gt; (or &lt;code&gt;log.console.verbosity&lt;/code&gt;) flag can be used to supply an int value specifying the highest output log level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  LvlCrit = 0&#xA;  LvlError = 1&#xA;  LvlWarn = 2&#xA;  LvlInfo = 3&#xA;  LvlDebug = 4&#xA;  LvlTrace = 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set an output dir for logs to be collected on disk, please set &lt;code&gt;--log.dir.path&lt;/code&gt; If you want to change the filename produced from &lt;code&gt;erigon&lt;/code&gt; you should also set the &lt;code&gt;--log.dir.prefix&lt;/code&gt; flag to an alternate name. The flag &lt;code&gt;--log.dir.verbosity&lt;/code&gt; is also available to control the verbosity of this logging, with the same int value as above, or the string value e.g. &#39; debug&#39; or &#39;info&#39;. Default verbosity is &#39;debug&#39; (4), for disk logging.&lt;/p&gt; &#xA;&lt;p&gt;Log format can be set to json by the use of the boolean flags &lt;code&gt;log.json&lt;/code&gt; or &lt;code&gt;log.console.json&lt;/code&gt;, or for the disk output &lt;code&gt;--log.dir.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Modularity&lt;/h3&gt; &#xA;&lt;p&gt;Erigon by default is &#34;all in one binary&#34; solution, but it&#39;s possible start TxPool as separated processes. Same true about: JSON RPC layer (RPCDaemon), p2p layer (Sentry), history download layer (Downloader), consensus. Don&#39;t start services as separated processes unless you have clear reason for it: resource limiting, scale, replace by your own implementation, security. How to start Erigon&#39;s services as separated processes, see in &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Embedded Consensus Layer&lt;/h3&gt; &#xA;&lt;p&gt;On Ethereum Mainnet and Sepolia, the Engine API can be disabled in favour of the Erigon native Embedded Consensus Layer. If you want to use the internal Consensus Layer, run Erigon with flag &lt;code&gt;--internalcl&lt;/code&gt;. &lt;em&gt;Warning:&lt;/em&gt; Staking (block production) is not possible with the embedded CL.&lt;/p&gt; &#xA;&lt;h3&gt;Testnets&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to give Erigon a try, but do not have spare 2TB on your drive, a good option is to start syncing one of the public testnets, Sepolia. It syncs much quicker, and does not take so much disk space:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules -j8 https://github.com/erigontech/erigon.git&#xA;cd erigon&#xA;make erigon&#xA;./build/bin/erigon --datadir=&amp;lt;your_datadir&amp;gt; --chain=sepolia&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note the &lt;code&gt;--datadir&lt;/code&gt; option that allows you to store Erigon files in a non-default location, in this example, in &lt;code&gt;sepolia&lt;/code&gt; subdirectory of the current directory. Name of the directory &lt;code&gt;--datadir&lt;/code&gt; does not have to match the name of the chain in &lt;code&gt;--chain&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Block Production (PoW Miner or PoS Validator)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer: Not supported/tested for Gnosis Chain and Polygon Network (In Progress)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Support only remote-miners.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To enable, add &lt;code&gt;--mine --miner.etherbase=...&lt;/code&gt; or &lt;code&gt;--mine --miner.miner.sigkey=...&lt;/code&gt; flags.&lt;/li&gt; &#xA; &lt;li&gt;Other supported options: &lt;code&gt;--miner.extradata&lt;/code&gt;, &lt;code&gt;--miner.notify&lt;/code&gt;, &lt;code&gt;--miner.gaslimit&lt;/code&gt;, &lt;code&gt;--miner.gasprice&lt;/code&gt; , &lt;code&gt;--miner.gastarget&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON-RPC supports methods: eth_coinbase , eth_hashrate, eth_mining, eth_getWork, eth_submitWork, eth_submitHashrate&lt;/li&gt; &#xA; &lt;li&gt;JSON-RPC supports websocket methods: newPendingTransaction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt; ðŸ”¬ Detailed explanation is &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/docs/mining.md&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Windows users may run erigon in 3 possible ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Build executable binaries natively for Windows using provided &lt;code&gt;wmake.ps1&lt;/code&gt; PowerShell script. Usage syntax is the same as &lt;code&gt;make&lt;/code&gt; command so you have to run &lt;code&gt;.\wmake.ps1 [-target] &amp;lt;targetname&amp;gt;&lt;/code&gt;. Example: &lt;code&gt;.\wmake.ps1 erigon&lt;/code&gt; builds erigon executable. All binaries are placed in &lt;code&gt;.\build\bin\&lt;/code&gt; subfolder. There are some requirements for a successful native build on windows :&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt; for Windows must be installed. If you&#39;re cloning this repository is very likely you already have it&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;GO Programming Language&lt;/a&gt; must be installed. Minimum required version is 1.21&lt;/li&gt; &#xA;   &lt;li&gt;GNU CC Compiler at least version 13 (is highly suggested that you install &lt;code&gt;chocolatey&lt;/code&gt; package manager - see following point)&lt;/li&gt; &#xA;   &lt;li&gt;If you need to build MDBX tools (i.e. &lt;code&gt;.\wmake.ps1 db-tools&lt;/code&gt;) then &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey package manager&lt;/a&gt; for Windows must be installed. By Chocolatey you need to install the following components : &lt;code&gt;cmake&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;mingw&lt;/code&gt; by &lt;code&gt;choco install cmake make mingw&lt;/code&gt;. Make sure Windows System &#34;Path&#34; variable has: C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Important note about Anti-Viruses&lt;/strong&gt; During MinGW&#39;s compiler detection phase some temporary executables are generated to test compiler capabilities. It&#39;s been reported some anti-virus programs detect those files as possibly infected by &lt;code&gt;Win64/Kryptic.CIS&lt;/code&gt; trojan horse (or a variant of it). Although those are false positives we have no control over 100+ vendors of security products for Windows and their respective detection algorithms and we understand this might make your experience with Windows builds uncomfortable. To workaround the issue you might either set exclusions for your antivirus specifically for &lt;code&gt;build\bin\mdbx\CMakeFiles&lt;/code&gt; sub-folder of the cloned repo or you can run erigon using the following other two options&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Docker : see &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use WSL (Windows Subsystem for Linux) &lt;strong&gt;strictly on version 2&lt;/strong&gt;. Under this option you can build Erigon just as you would on a regular Linux distribution. You can point your data also to any of the mounted Windows partitions ( eg. &lt;code&gt;/mnt/c/[...]&lt;/code&gt;, &lt;code&gt;/mnt/d/[...]&lt;/code&gt; etc) but in such case be advised performance is impacted: this is due to the fact those mount points use &lt;code&gt;DrvFS&lt;/code&gt; which is a &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#blocks-execution-is-slow-on-cloud-network-drives&#34;&gt;network file system&lt;/a&gt; and, additionally, MDBX locks the db for exclusive access which implies only one process at a time can access data. This has consequences on the running of &lt;code&gt;rpcdaemon&lt;/code&gt; which has to be configured as &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/#for-remote-db&#34;&gt;Remote DB&lt;/a&gt; even if it is executed on the very same computer. If instead your data is hosted on the native Linux filesystem non limitations apply. &lt;strong&gt;Please also note the default WSL2 environment has its own IP address which does not match the one of the network interface of Windows host: take this into account when configuring NAT for port 30303 on your router.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using TOML or YAML Config Files&lt;/h3&gt; &#xA;&lt;p&gt;You can set Erigon flags through a YAML or TOML configuration file with the flag &lt;code&gt;--config&lt;/code&gt;. The flags set in the configuration file can be overwritten by writing the flags directly on Erigon command line&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;./build/bin/erigon --config ./config.yaml --chain=sepolia&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Assuming we have &lt;code&gt;chain : &#34;mainnet&#34;&lt;/code&gt; in our configuration file, by adding &lt;code&gt;--chain=sepolia&lt;/code&gt; allows the overwrite of the flag inside of the yaml configuration file and sets the chain to sepolia&lt;/p&gt; &#xA;&lt;h3&gt;TOML&lt;/h3&gt; &#xA;&lt;p&gt;Example of setting up TOML config file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;datadir = &#39;your datadir&#39;&#xA;port = 1111&#xA;chain = &#34;mainnet&#34;&#xA;http = true&#xA;&#34;private.api.addr&#34;=&#34;localhost:9090&#34;&#xA;&#xA;&#34;http.api&#34; = [&#34;eth&#34;,&#34;debug&#34;,&#34;net&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;YAML&lt;/h3&gt; &#xA;&lt;p&gt;Example of setting up a YAML config file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;datadir : &#39;your datadir&#39;&#xA;port : 1111&#xA;chain : &#34;mainnet&#34;&#xA;http : true&#xA;private.api.addr : &#34;localhost:9090&#34;&#xA;&#xA;http.api : [&#34;eth&#34;,&#34;debug&#34;,&#34;net&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Beacon Chain (Consensus Layer)&lt;/h3&gt; &#xA;&lt;p&gt;Erigon can be used as an Execution Layer (EL) for Consensus Layer clients (CL). Default configuration is OK.&lt;/p&gt; &#xA;&lt;p&gt;If your CL client is on a different device, add &lt;code&gt;--authrpc.addr 0.0.0.0&lt;/code&gt; (&lt;a href=&#34;https://github.com/ethereum/execution-apis/raw/main/src/engine&#34;&gt;Engine API&lt;/a&gt; listens on localhost by default) as well as &lt;code&gt;--authrpc.vhosts &amp;lt;CL host&amp;gt;&lt;/code&gt; where &lt;code&gt;&amp;lt;CL host&amp;gt;&lt;/code&gt; is your source host or &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to establish a secure connection between the Consensus Layer and the Execution Layer, a JWT secret key is automatically generated.&lt;/p&gt; &#xA;&lt;p&gt;The JWT secret key will be present in the datadir by default under the name of &lt;code&gt;jwt.hex&lt;/code&gt; and its path can be specified with the flag &lt;code&gt;--authrpc.jwtsecret&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This piece of info needs to be specified in the Consensus Layer as well in order to establish connection successfully. More information can be found &lt;a href=&#34;https://github.com/ethereum/execution-apis/raw/main/src/engine/authentication.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once Erigon is running, you need to point your CL client to &lt;code&gt;&amp;lt;erigon address&amp;gt;:8551&lt;/code&gt;, where &lt;code&gt;&amp;lt;erigon address&amp;gt;&lt;/code&gt; is either &lt;code&gt;localhost&lt;/code&gt; or the IP address of the device running Erigon, and also point to the JWT secret path created by Erigon.&lt;/p&gt; &#xA;&lt;h3&gt;Caplin&lt;/h3&gt; &#xA;&lt;p&gt;Caplin is a full-fledged validating Consensus Client like Prysm, Lighthouse, Teku, Nimbus and Lodestar. Its goal is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provide better stability&lt;/li&gt; &#xA; &lt;li&gt;Validation of the chain&lt;/li&gt; &#xA; &lt;li&gt;Stay in sync&lt;/li&gt; &#xA; &lt;li&gt;keep the execution of blocks on chain tip&lt;/li&gt; &#xA; &lt;li&gt;serve the Beacon API using a fast and compact data model alongside low CPU and memory usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The main reason why developed a new Consensus Layer is to experiment with the possible benefits that could come with it. For example, The Engine API does not work well with Erigon. The Engine API sends data one block at a time, which does not suit how Erigon works. Erigon is designed to handle many blocks simultaneously and needs to sort and process data efficiently. Therefore, it would be better for Erigon to handle the blocks independently instead of relying on the Engine API.&lt;/p&gt; &#xA;&lt;h4&gt;Caplin&#39;s Usage.&lt;/h4&gt; &#xA;&lt;p&gt;Caplin is be enabled by default. to disable it and enable the Engine API, use the &lt;code&gt;--externalcl&lt;/code&gt; flag. from that point on, an external Consensus Layer will not be need anymore.&lt;/p&gt; &#xA;&lt;p&gt;Caplin also has an archivial mode for historical states and blocks. it can be enabled through the &lt;code&gt;--caplin.archive&lt;/code&gt; flag. In order to enable the caplin&#39;s Beacon API, the flag &lt;code&gt;--beacon.api=&amp;lt;namespaces&amp;gt;&lt;/code&gt; must be added. e.g: &lt;code&gt;--beacon.api=beacon,builder,config,debug,node,validator,lighthouse&lt;/code&gt; will enable all endpoints. **NOTE: Caplin is not staking-ready so aggregation endpoints are still to be implemented. Additionally enabling the Beacon API will lead to a 6 GB higher RAM usage.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Instances / One Machine&lt;/h3&gt; &#xA;&lt;p&gt;Define 6 flags to avoid conflicts: &lt;code&gt;--datadir --port --http.port --authrpc.port --torrent.port --private.api.addr&lt;/code&gt;. Example of multiple chains on the same machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# mainnet&#xA;./build/bin/erigon --datadir=&#34;&amp;lt;your_mainnet_data_path&amp;gt;&#34; --chain=mainnet --port=30303 --http.port=8545 --authrpc.port=8551 --torrent.port=42069 --private.api.addr=127.0.0.1:9090 --http --ws --http.api=eth,debug,net,trace,web3,erigon&#xA;&#xA;&#xA;# sepolia&#xA;./build/bin/erigon --datadir=&#34;&amp;lt;your_sepolia_data_path&amp;gt;&#34; --chain=sepolia --port=30304 --http.port=8546 --authrpc.port=8552 --torrent.port=42068 --private.api.addr=127.0.0.1:9091 --http --ws --http.api=eth,debug,net,trace,web3,erigon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Quote your path if it has spaces.&lt;/p&gt; &#xA;&lt;h3&gt;Dev Chain&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; ðŸ”¬ Detailed explanation is &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/DEV_CHAIN.md&#34;&gt;DEV_CHAIN&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Key features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;ðŸ”¬ See more detailed &lt;a href=&#34;https://ledgerwatch.github.io/turbo_geth_release.html&#34;&gt;overview of functionality and current limitations&lt;/a&gt;. It is being updated on recurring basis.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;More Efficient State Storage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Flat KV storage.&lt;/strong&gt; Erigon uses a key-value database and storing accounts and storage in a simple way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; ðŸ”¬ See our detailed DB walkthrough &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/docs/programmers_guide/db_walkthrough.MD&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;. For some operations, Erigon uses temporary files to preprocess data before inserting it into the main DB. That reduces write amplification and DB inserts are orders of magnitude quicker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; ðŸ”¬ See our detailed ETL explanation &lt;a href=&#34;https://github.com/erigontech/erigon/raw/main/erigon-lib/etl/README.md&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Plain state&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Single accounts/state trie&lt;/strong&gt;. Erigon uses a single Merkle trie for both accounts and the storage.&lt;/p&gt; &#xA;&lt;h3&gt;Faster Initial Sync&lt;/h3&gt; &#xA;&lt;p&gt;Erigon uses a rearchitected full sync algorithm from &lt;a href=&#34;https://github.com/ethereum/go-ethereum&#34;&gt;Go-Ethereum&lt;/a&gt; that is split into &#34;stages&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ðŸ”¬ See more detailed explanation in the &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/eth/stagedsync/README.md&#34;&gt;Staged Sync Readme&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It uses the same network primitives and is compatible with regular go-ethereum nodes that are using full sync, you do not need any special sync capabilities for Erigon to sync.&lt;/p&gt; &#xA;&lt;p&gt;When reimagining the full sync, with focus on batching data together and minimize DB overwrites. That makes it possible to sync Ethereum mainnet in under 2 days if you have a fast enough network connection and an SSD drive.&lt;/p&gt; &#xA;&lt;p&gt;Examples of stages are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Downloading headers;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Downloading block bodies;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Recovering senders&#39; addresses;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Executing blocks;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Validating root hashes and building intermediate hashes for the state Merkle trie;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[...]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JSON-RPC daemon&lt;/h3&gt; &#xA;&lt;p&gt;Most of Erigon&#39;s components (txpool, rpcdaemon, snapshots downloader, sentry, ...) can work inside Erigon and as independent process.&lt;/p&gt; &#xA;&lt;p&gt;To enable built-in RPC server: &lt;code&gt;--http&lt;/code&gt; and &lt;code&gt;--ws&lt;/code&gt; (sharing same port with http)&lt;/p&gt; &#xA;&lt;p&gt;Run RPCDaemon as separated process: this daemon can use local DB (with running Erigon or on snapshot of a database) or remote DB (run on another server). &lt;code&gt;ðŸ”¬ See &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/cmd/rpcdaemon/README.md&#34;&gt;RPC-Daemon docs&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;For remote DB&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This works regardless of whether RPC daemon is on the same computer with Erigon, or on a different one. They use TPC socket connection to pass data between them. To use this mode, run Erigon in one terminal window&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make erigon&#xA;./build/bin/erigon --private.api.addr=localhost:9090 --http=false&#xA;make rpcdaemon&#xA;./build/bin/rpcdaemon --private.api.addr=localhost:9090 --http.api=eth,erigon,web3,net,debug,trace,txpool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;gRPC ports&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;9090&lt;/code&gt; erigon, &lt;code&gt;9091&lt;/code&gt; sentry, &lt;code&gt;9092&lt;/code&gt; consensus engine, &lt;code&gt;9093&lt;/code&gt; torrent downloader, &lt;code&gt;9094&lt;/code&gt; transactions pool&lt;/p&gt; &#xA;&lt;p&gt;Supported JSON-RPC calls (&lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/cmd/rpcdaemon/commands/eth_api.go&#34;&gt;eth&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/cmd/rpcdaemon/commands/debug_api.go&#34;&gt;debug&lt;/a&gt; , &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/cmd/rpcdaemon/commands/net_api.go&#34;&gt;net&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/cmd/rpcdaemon/commands/web3_api.go&#34;&gt;web3&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;For a details on the implementation status of each command, &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/cmd/rpcdaemon/README.md#rpc-implementation-status&#34;&gt;see this table&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Run all components by docker-compose&lt;/h3&gt; &#xA;&lt;p&gt;Docker allows for building and running Erigon via containers. This alleviates the need for installing build dependencies onto the host OS.&lt;/p&gt; &#xA;&lt;h4&gt;Optional: Setup dedicated user&lt;/h4&gt; &#xA;&lt;p&gt;User UID/GID need to be synchronized between the host OS and container so files are written with correct permission.&lt;/p&gt; &#xA;&lt;p&gt;You may wish to setup a dedicated user/group on the host OS, in which case the following &lt;code&gt;make&lt;/code&gt; targets are available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create &#34;erigon&#34; user&#xA;make user_linux&#xA;# or&#xA;make user_macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;There is a &lt;code&gt;.env.example&lt;/code&gt; file in the root of the repo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_UID&lt;/code&gt; - The UID of the docker user&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_GID&lt;/code&gt; - The GID of the docker user&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XDG_DATA_HOME&lt;/code&gt; - The data directory which will be mounted to the docker containers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If not specified, the UID/GID will use the current user.&lt;/p&gt; &#xA;&lt;p&gt;A good choice for &lt;code&gt;XDG_DATA_HOME&lt;/code&gt; is to use the &lt;code&gt;~erigon/.ethereum&lt;/code&gt; directory created by helper targets &lt;code&gt;make user_linux&lt;/code&gt; or &lt;code&gt;make user_macos&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Check: Permissions&lt;/h4&gt; &#xA;&lt;p&gt;In all cases, &lt;code&gt;XDG_DATA_HOME&lt;/code&gt; (specified or default) must be writeable by the user UID/GID in docker, which will be determined by the &lt;code&gt;DOCKER_UID&lt;/code&gt; and &lt;code&gt;DOCKER_GID&lt;/code&gt; at build time.&lt;/p&gt; &#xA;&lt;p&gt;If a build or service startup is failing due to permissions, check that all the directories, UID, and GID controlled by these environment variables are correct.&lt;/p&gt; &#xA;&lt;h4&gt;Run&lt;/h4&gt; &#xA;&lt;p&gt;Next command starts: Erigon on port 30303, rpcdaemon on port 8545, prometheus on port 9090, and grafana on port 3000.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#&#xA;# Will mount ~/.local/share/erigon to /home/erigon/.local/share/erigon inside container&#xA;#&#xA;make docker-compose&#xA;&#xA;#&#xA;# or&#xA;#&#xA;# if you want to use a custom data directory&#xA;# or, if you want to use different uid/gid for a dedicated user&#xA;#&#xA;# To solve this, pass in the uid/gid parameters into the container.&#xA;#&#xA;# DOCKER_UID: the user id&#xA;# DOCKER_GID: the group id&#xA;# XDG_DATA_HOME: the data directory (default: ~/.local/share)&#xA;#&#xA;# Note: /preferred/data/folder must be read/writeable on host OS by user with UID/GID given&#xA;#       if you followed above instructions&#xA;#&#xA;# Note: uid/gid syntax below will automatically use uid/gid of running user so this syntax&#xA;#       is intended to be run via the dedicated user setup earlier&#xA;#&#xA;DOCKER_UID=$(id -u) DOCKER_GID=$(id -g) XDG_DATA_HOME=/preferred/data/folder DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 make docker-compose&#xA;&#xA;#&#xA;# if you want to run the docker, but you are not logged in as the $ERIGON_USER&#xA;# then you&#39;ll need to adjust the syntax above to grab the correct uid/gid&#xA;#&#xA;# To run the command via another user, use&#xA;#&#xA;ERIGON_USER=erigon&#xA;sudo -u ${ERIGON_USER} DOCKER_UID=$(id -u ${ERIGON_USER}) DOCKER_GID=$(id -g ${ERIGON_USER}) XDG_DATA_HOME=~${ERIGON_USER}/.ethereum DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 make docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Makefile creates the initial directories for erigon, prometheus and grafana. The PID namespace is shared between erigon and rpcdaemon which is required to open Erigon&#39;s DB from another process (RPCDaemon local-mode). See: &lt;a href=&#34;https://github.com/erigontech/erigon/pull/2392/files&#34;&gt;https://github.com/erigontech/erigon/pull/2392/files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your docker installation requires the docker daemon to run as root (which is by default), you will need to prefix the command above with &lt;code&gt;sudo&lt;/code&gt;. However, it is sometimes recommended running docker (and therefore its containers) as a non-root user for security reasons. For more information about how to do this, refer to &lt;a href=&#34;https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Windows support for docker-compose is not ready yet. Please help us with .ps1 port.&lt;/p&gt; &#xA;&lt;h3&gt;Grafana dashboard&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;docker compose up prometheus grafana&lt;/code&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/cmd/prometheus/Readme.md&#34;&gt;detailed docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;p&gt;old data&lt;/p&gt; &#xA;&lt;p&gt;Disabled by default. To enable see &lt;code&gt;./build/bin/erigon --help&lt;/code&gt; for flags &lt;code&gt;--prune&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;./docs&lt;/code&gt; directory includes a lot of useful but outdated documentation. For code located in the &lt;code&gt;./cmd&lt;/code&gt; directory, their respective documentation can be found in &lt;code&gt;./cmd/*/README.md&lt;/code&gt;. A more recent collation of developments and happenings in Erigon can be found in the &lt;a href=&#34;https://erigon.substack.com/&#34;&gt;Erigon Blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h3&gt;How much RAM do I need&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Baseline (ext4 SSD): 16Gb RAM sync takes 6 days, 32Gb - 5 days, 64Gb - 4 days&lt;/li&gt; &#xA; &lt;li&gt;+1 day on &#34;zfs compression=off&#34;. +2 days on &#34;zfs compression=on&#34; (2x compression ratio). +3 days on btrfs.&lt;/li&gt; &#xA; &lt;li&gt;-1 day on NVMe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Detailed explanation: &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/docs/programmers_guide/db_faq.md&#34;&gt;./docs/programmers_guide/db_faq.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Default Ports and Firewalls&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;erigon&lt;/code&gt; ports&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Should Expose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;engine&lt;/td&gt; &#xA;   &lt;td&gt;9090&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;gRPC Server&lt;/td&gt; &#xA;   &lt;td&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;engine&lt;/td&gt; &#xA;   &lt;td&gt;42069&lt;/td&gt; &#xA;   &lt;td&gt;TCP &amp;amp; UDP&lt;/td&gt; &#xA;   &lt;td&gt;Snap sync (Bittorrent)&lt;/td&gt; &#xA;   &lt;td&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;engine&lt;/td&gt; &#xA;   &lt;td&gt;8551&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;Engine API (JWT auth)&lt;/td&gt; &#xA;   &lt;td&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sentry&lt;/td&gt; &#xA;   &lt;td&gt;30303&lt;/td&gt; &#xA;   &lt;td&gt;TCP &amp;amp; UDP&lt;/td&gt; &#xA;   &lt;td&gt;eth/68 peering&lt;/td&gt; &#xA;   &lt;td&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sentry&lt;/td&gt; &#xA;   &lt;td&gt;30304&lt;/td&gt; &#xA;   &lt;td&gt;TCP &amp;amp; UDP&lt;/td&gt; &#xA;   &lt;td&gt;eth/67 peering&lt;/td&gt; &#xA;   &lt;td&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sentry&lt;/td&gt; &#xA;   &lt;td&gt;9091&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;incoming gRPC Connections&lt;/td&gt; &#xA;   &lt;td&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rpcdaemon&lt;/td&gt; &#xA;   &lt;td&gt;8545&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;HTTP &amp;amp; WebSockets &amp;amp; GraphQL&lt;/td&gt; &#xA;   &lt;td&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Typically, 30303 and 30304 are exposed to the internet to allow incoming peering connections. 9090 is exposed only internally for rpcdaemon or other connections, (e.g. rpcdaemon -&amp;gt; erigon). Port 8551 (JWT authenticated) is exposed only internally for &lt;a href=&#34;https://github.com/ethereum/execution-apis/raw/main/src/engine&#34;&gt;Engine API&lt;/a&gt; JSON-RPC queries from the Consensus Layer node.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;caplin&lt;/code&gt; ports&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Should Expose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sentinel&lt;/td&gt; &#xA;   &lt;td&gt;4000&lt;/td&gt; &#xA;   &lt;td&gt;UDP&lt;/td&gt; &#xA;   &lt;td&gt;Peering&lt;/td&gt; &#xA;   &lt;td&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sentinel&lt;/td&gt; &#xA;   &lt;td&gt;4001&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;Peering&lt;/td&gt; &#xA;   &lt;td&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In order to configure the ports, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;   --caplin.discovery.addr value                                                    Address for Caplin DISCV5 protocol (default: &#34;127.0.0.1&#34;)&#xA;   --caplin.discovery.port value                                                    Port for Caplin DISCV5 protocol (default: 4000)&#xA;   --caplin.discovery.tcpport value                                                 TCP Port for Caplin DISCV5 protocol (default: 4001)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;beaconAPI&lt;/code&gt; ports&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Should Expose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REST&lt;/td&gt; &#xA;   &lt;td&gt;5555&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;REST&lt;/td&gt; &#xA;   &lt;td&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;shared&lt;/code&gt; ports&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Port&lt;/th&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;   &lt;th&gt;Should Expose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;6060&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;pprof&lt;/td&gt; &#xA;   &lt;td&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;all&lt;/td&gt; &#xA;   &lt;td&gt;6060&lt;/td&gt; &#xA;   &lt;td&gt;TCP&lt;/td&gt; &#xA;   &lt;td&gt;metrics&lt;/td&gt; &#xA;   &lt;td&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Optional flags can be enabled that enable pprof or metrics (or both) - however, they both run on 6060 by default, so&lt;/p&gt; &#xA;&lt;p&gt;you&#39;ll have to change one if you want to run both at the same time. use &lt;code&gt;--help&lt;/code&gt; with the binary for more info.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;other&lt;/code&gt; ports&lt;/h4&gt; &#xA;&lt;p&gt;Reserved for future use: &lt;strong&gt;gRPC ports&lt;/strong&gt;: &lt;code&gt;9092&lt;/code&gt; consensus engine, &lt;code&gt;9093&lt;/code&gt; snapshot downloader, &lt;code&gt;9094&lt;/code&gt; TxPool&lt;/p&gt; &#xA;&lt;h4&gt;Hetzner expecting strict firewall rules&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;0.0.0.0/8             &#34;This&#34; Network             RFC 1122, Section 3.2.1.3&#xA;10.0.0.0/8            Private-Use Networks       RFC 1918&#xA;100.64.0.0/10         Carrier-Grade NAT (CGN)    RFC 6598, Section 7&#xA;127.16.0.0/12         Private-Use Networks       RFC 1918&#xA;169.254.0.0/16        Link Local                 RFC 3927&#xA;172.16.0.0/12         Private-Use Networks       RFC 1918&#xA;192.0.0.0/24          IETF Protocol Assignments  RFC 5736&#xA;192.0.2.0/24          TEST-NET-1                 RFC 5737&#xA;192.88.99.0/24        6to4 Relay Anycast         RFC 3068&#xA;192.168.0.0/16        Private-Use Networks       RFC 1918&#xA;198.18.0.0/15         Network Interconnect&#xA;Device Benchmark Testing   RFC 2544&#xA;198.51.100.0/24       TEST-NET-2                 RFC 5737&#xA;203.0.113.0/24        TEST-NET-3                 RFC 5737&#xA;224.0.0.0/4           Multicast                  RFC 3171&#xA;240.0.0.0/4           Reserved for Future Use    RFC 1112, Section 4&#xA;255.255.255.255/32    Limited Broadcast          RFC 919, Section 7&#xA;RFC 922, Section 7&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same in &lt;a href=&#34;https://ethereum.stackexchange.com/questions/6386/how-to-prevent-being-blacklisted-for-running-an-ethereum-client/13068#13068&#34;&gt;IpTables syntax&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to run erigon as a separate user? (e.g. as a &lt;code&gt;systemd&lt;/code&gt; daemon)&lt;/h3&gt; &#xA;&lt;p&gt;Running erigon from &lt;code&gt;build/bin&lt;/code&gt; as a separate user might produce an error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error while loading shared libraries: libsilkworm_capi.so: cannot open shared object file: No such file or directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The library needs to be &lt;em&gt;installed&lt;/em&gt; for another user using &lt;code&gt;make DIST=&amp;lt;path&amp;gt; install&lt;/code&gt;. You could use &lt;code&gt;$HOME/erigon&lt;/code&gt; or &lt;code&gt;/opt/erigon&lt;/code&gt; as the installation path, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make DIST=/opt/erigon install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then run &lt;code&gt;/opt/erigon/erigon&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to get diagnostic for bug report?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get stack trace: &lt;code&gt;kill -SIGUSR1 &amp;lt;pid&amp;gt;&lt;/code&gt;, get trace and stop: &lt;code&gt;kill -6 &amp;lt;pid&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get CPU profiling: add &lt;code&gt;--pprof flag&lt;/code&gt; run &lt;code&gt;go tool pprof -png http://127.0.0.1:6060/debug/pprof/profile\?seconds\=20 &amp;gt; cpu.png&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get RAM profiling: add &lt;code&gt;--pprof flag&lt;/code&gt; run &lt;code&gt;go tool pprof -inuse_space -png http://127.0.0.1:6060/debug/pprof/heap &amp;gt; mem.png&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to run local devnet?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; ðŸ”¬ Detailed explanation is &lt;a href=&#34;https://raw.githubusercontent.com/erigontech/erigon/main/DEV_CHAIN.md&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker permissions error&lt;/h3&gt; &#xA;&lt;p&gt;Docker uses user erigon with UID/GID 1000 (for security reasons). You can see this user being created in the Dockerfile. Can fix by giving a host&#39;s user ownership of the folder, where the host&#39;s user UID/GID is the same as the docker&#39;s user UID/GID (1000). More details in &lt;a href=&#34;https://www.fullstaq.com/knowledge-hub/blogs/docker-and-the-host-filesystem-owner-matching-problem&#34;&gt;post&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to run public RPC api&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--txpool.nolocals=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;don&#39;t add &lt;code&gt;admin&lt;/code&gt; in &lt;code&gt;--http.api&lt;/code&gt; list&lt;/li&gt; &#xA; &lt;li&gt;to increase throughput may need increase/decrease: &lt;code&gt;--db.read.concurrency&lt;/code&gt;, &lt;code&gt;--rpc.batch.concurrency&lt;/code&gt;, &lt;code&gt;--rpc.batch.limit&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run RaspberyPI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mathMakesArt/Erigon-on-RPi-4&#34;&gt;https://github.com/mathMakesArt/Erigon-on-RPi-4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to change db pagesize&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/erigontech/erigon/raw/main/cmd/integration/Readme.md#copy-data-to-another-db&#34;&gt;post&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting in touch&lt;/h1&gt; &#xA;&lt;h3&gt;Erigon Discord Server&lt;/h3&gt; &#xA;&lt;p&gt;The main discussions are happening on our Discord server. To get an invite, send an email to &lt;code&gt;bloxster [at] proton.me&lt;/code&gt; with your name, occupation, a brief explanation of why you want to join the Discord, and how you heard about Erigon.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting security issues/concerns&lt;/h3&gt; &#xA;&lt;p&gt;Send an email to &lt;code&gt;security [at] torquem.ch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;code&gt;htop&lt;/code&gt; shows incorrect memory usage&lt;/h3&gt; &#xA;&lt;p&gt;Erigon&#39;s internal DB (MDBX) using &lt;code&gt;MemoryMap&lt;/code&gt; - when OS does manage all &lt;code&gt;read, write, cache&lt;/code&gt; operations instead of Application (&lt;a href=&#34;https://linux-kernel-labs.github.io/refs/heads/master/labs/memory_mapping.html&#34;&gt;linux&lt;/a&gt; , &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/memory/file-mapping&#34;&gt;windows&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; on column &lt;code&gt;res&lt;/code&gt; shows memory of &#34;App + OS used to hold page cache for given App&#34;, but it&#39;s not informative, because if &lt;code&gt;htop&lt;/code&gt; says that app using 90% of memory you still can run 3 more instances of app on the same machine - because most of that &lt;code&gt;90%&lt;/code&gt; is &#34;OS pages cache&#34;. OS automatically frees this cache any time it needs memory. Smaller &#34;page cache size&#34; may not impact performance of Erigon at all.&lt;/p&gt; &#xA;&lt;p&gt;Next tools show correct memory usage of Erigon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;vmmap -summary PID | grep -i &#34;Physical footprint&#34;&lt;/code&gt;. Without &lt;code&gt;grep&lt;/code&gt; you can see details&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;section MALLOC ZONE column Resident Size&lt;/code&gt; shows App memory usage, &lt;code&gt;section REGION TYPE column Resident Size&lt;/code&gt; shows OS pages cache size.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Prometheus&lt;/code&gt; dashboard shows memory of Go app without OS pages cache (&lt;code&gt;make prometheus&lt;/code&gt;, open in browser &lt;code&gt;localhost:3000&lt;/code&gt;, credentials &lt;code&gt;admin/admin&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat /proc/&amp;lt;PID&amp;gt;/smaps&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Erigon uses ~4Gb of RAM during genesis sync and ~1Gb during normal work. OS pages cache can utilize unlimited amount of memory.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Multiple instances of Erigon on same machine will touch Disk concurrently, it impacts performance - one of main Erigon optimisations: &#34;reduce Disk random access&#34;. &#34;Blocks Execution stage&#34; still does many random reads - this is reason why it&#39;s slowest stage. We do not recommend running multiple genesis syncs on same Disk. If genesis sync passed, then it&#39;s fine to run multiple Erigon instances on same Disk.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Blocks Execution is slow on cloud-network-drives&lt;/h3&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/erigontech/erigon/issues/1516#issuecomment-811958891&#34;&gt;https://github.com/erigontech/erigon/issues/1516#issuecomment-811958891&lt;/a&gt; In short: network-disks are bad for blocks execution - because blocks execution reading data from db non-parallel non-batched way.&lt;/p&gt; &#xA;&lt;h3&gt;Filesystem&#39;s background features are expensive&lt;/h3&gt; &#xA;&lt;p&gt;For example: btrfs&#39;s autodefrag option - may increase write IO 100x times&lt;/p&gt; &#xA;&lt;h3&gt;Gnome Tracker can kill Erigon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.gnome.org/Projects/Tracker&#34;&gt;Gnome Tracker&lt;/a&gt; - detecting miners and kill them.&lt;/p&gt; &#xA;&lt;h3&gt;the --mount option requires BuildKit error&lt;/h3&gt; &#xA;&lt;p&gt;For anyone else that was getting the BuildKit error when trying to start Erigon the old way you can use the below...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;XDG_DATA_HOME=/preferred/data/folder DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 make docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Erigon3 user&#39;s guide&lt;/h2&gt; &#xA;&lt;p&gt;Git branch &lt;code&gt;main&lt;/code&gt;. Just start erigon as you usually do.&lt;/p&gt; &#xA;&lt;p&gt;RAM requirement is higher: 32gb and better 64gb. We will work on this topic a bit later.&lt;/p&gt; &#xA;&lt;p&gt;Golang 1.21&lt;/p&gt; &#xA;&lt;p&gt;Almost all RPC methods are implemented - if something doesn&#39;t work - just drop it on our head.&lt;/p&gt; &#xA;&lt;p&gt;Supported networks: all.&lt;/p&gt; &#xA;&lt;h3&gt;E3 changes from E2:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sync from scratch doesn&#39;t require re-exec all history. Latest state and it&#39;s history are in snapshots - can download.&lt;/li&gt; &#xA; &lt;li&gt;ExecutionStage - now including many E2 stages: stage_hash_state, stage_trie, stage_log_index, stage_history_index, stage_trace_index&lt;/li&gt; &#xA; &lt;li&gt;E3 can execute 1 historical transaction - without executing it&#39;s block - because history/indices have transaction-granularity, instead of block-granularity.&lt;/li&gt; &#xA; &lt;li&gt;E3 doesn&#39;t store Logs (aka Receipts) - it always re-executing historical txn (but it&#39;s cheaper then in E2 - see point above). Known perf issues: &lt;a href=&#34;https://github.com/erigontech/erigon/issues/10747&#34;&gt;https://github.com/erigontech/erigon/issues/10747&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--sync.loop.block.limit&lt;/code&gt; is enabled by default. (Default: &lt;code&gt;5_000&lt;/code&gt;. Set &lt;code&gt;--sync.loop.block.limit=10_000 --batchSize=2g&lt;/code&gt; to increase sync speed on good hardware).&lt;/li&gt; &#xA; &lt;li&gt;datadir/chaindata is small now - to prevent it&#39;s grow: we recommend set &lt;code&gt;--batchSize &amp;lt;= 2G&lt;/code&gt;. And it&#39;s fine to &lt;code&gt;rm -rf chaindata&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;can symlink/mount latest state to fast drive and history to cheap drive&lt;/li&gt; &#xA; &lt;li&gt;Archive Node is default. Full Node: &lt;code&gt;--prune.mode=full&lt;/code&gt;, Minimal Node (EIP-4444): &lt;code&gt;--prune.mode=minimal&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Known Problems of E3:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;don&#39;t &lt;code&gt;rm -rf downloader&lt;/code&gt; - it will cause re-downloading of files: &lt;a href=&#34;https://github.com/erigontech/erigon/issues/10976&#34;&gt;https://github.com/erigontech/erigon/issues/10976&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;E3 datadir structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;datadir        &#xA;    chaindata   # &#34;Recently-updated Latest State&#34; and &#34;Recent History&#34;&#xA;    snapshots   &#xA;        domain    # Latest State: link to fast disk&#xA;        history   # Historical values &#xA;        idx       # InvertedIndices: can search/filtering/union/intersect them - to find historical data. like eth_getLogs or trace_transaction&#xA;        accessors # Additional (generated) indices of history - have &#34;random-touch&#34; read-pattern. They can serve only `Get` requests (no search/filters).&#xA;    temp # buffers to sort data &amp;gt;&amp;gt; RAM. sequential-buffered IO - is slow-disk-friendly&#xA;   &#xA;# There is 4 domains: account, storage, code, commitment &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;E3 can store state on fast disk and history on cheap disk&lt;/h3&gt; &#xA;&lt;p&gt;If you can afford store datadir on 1 nvme-raid - great. If can&#39;t - it&#39;s possible to store history on cheap drive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# place (or ln -s) `datadir` on slow disk. link some sub-folders to fast disk.&#xA;# Example: what need link to fast disk to speedup execution&#xA;datadir        &#xA;    chaindata   # link to fast disk&#xA;    snapshots   &#xA;        domain    # link to fast disk&#xA;        history   &#xA;        idx       &#xA;        accessors &#xA;    temp   &#xA;&#xA;# Example: how to speedup history access: &#xA;#   - go step-by-step - first try store `accessors` on fast disk&#xA;#   - if speed is not good enough: `idx`&#xA;#   - if still not enough: `history` &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;E3 datadir size&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;# eth-mainnet - archive - April 2024&#xA;&#xA;du -hsc /erigon/* &#xA;6G  &#x9;/erigon/caplin&#xA;50G &#x9;/erigon/chaindata&#xA;1.8T&#x9;/erigon/snapshots&#xA;1.9T&#x9;total&#xA;&#xA;du -hsc /erigon/snapshots/* &#xA;100G &#x9;/erigon/snapshots/accessor&#xA;240G&#x9;/erigon/snapshots/domain&#xA;260G&#x9;/erigon/snapshots/history&#xA;410G&#x9;/erigon/snapshots/idx&#xA;1.7T&#x9;/erigon/snapshots&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;# bor-mainnet - archive - Jun 2024&#xA;&#xA;du -hsc /erigon/* &#xA;&#xA;160M&#x9;/erigon/bor&#xA;50G &#x9;/erigon/chaindata&#xA;3.7T&#x9;/erigon/snapshots&#xA;3.8T&#x9;total&#xA;&#xA;du -hsc /erigon/snapshots/* &#xA;260G&#x9;/erigon-data/snapshots/accessor&#xA;850G&#x9;/erigon-data/snapshots/domain&#xA;650G&#x9;/erigon-data/snapshots/history&#xA;1.4T&#x9;/erigon-data/snapshots/idx&#xA;4.1T&#x9;/erigon/snapshots&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;E3 other perf trics&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--sync.loop.block.limit=10_000 --batchSize=2g&lt;/code&gt; - likely will help for sync speed.&lt;/li&gt; &#xA; &lt;li&gt;on cloud-drives (good throughput, bad latency) - can enable OS&#39;s brain to pre-fetch: &lt;code&gt;SNAPSHOT_MADV_RND=false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;can lock latest state in RAM - to prevent from eviction (node may face high historical RPC traffic without impacting Chain-Tip perf):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;vmtouch -vdlw /mnt/erigon/snapshots/domain/*bt&#xA;ls /mnt/erigon/snapshots/domain/*.kv | parallel vmtouch -vdlw&#xA;&#xA;# if it failing with &#34;can&#39;t allocate memory&#34;, try: &#xA;sync &amp;amp;&amp;amp; sudo sysctl vm.drop_caches=3&#xA;echo 1 &amp;gt; /proc/sys/vm/compact_memory&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>danielmiessler/fabric</title>
    <updated>2024-08-18T01:30:11Z</updated>
    <id>tag:github.com,2024-08-18:/danielmiessler/fabric</id>
    <link href="https://github.com/danielmiessler/fabric" rel="alternate"></link>
    <summary type="html">&lt;p&gt;fabric is an open-source framework for augmenting humans using AI. It provides a modular framework for solving specific problems using a crowdsourced set of AI prompts that can be used anywhere.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/images/fabric-logo-gif.gif&#34; alt=&#34;fabriclogo&#34; width=&#34;400&#34; height=&#34;400&#34;&gt; &#xA; &lt;h1&gt;&lt;code&gt;fabric&lt;/code&gt;&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/mission-human_flourishing_via_AI_augmentation-purple&#34; alt=&#34;Static Badge&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/danielmiessler/fabric&#34; alt=&#34;GitHub top language&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/danielmiessler/fabric&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p class=&#34;align center&#34;&gt; &lt;/p&gt;&#xA; &lt;h4&gt;&lt;code&gt;fabric&lt;/code&gt; is an open-source framework for augmenting humans using AI.&lt;/h4&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#whatandwhy&#34;&gt;What and Why&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#philosophy&#34;&gt;Philosophy&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#Installation&#34;&gt;Installation&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#Usage&#34;&gt;Usage&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#examples&#34;&gt;Examples&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#just-use-the-patterns&#34;&gt;Just Use the Patterns&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#custom-patterns&#34;&gt;Custom Patterns&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#helper-apps&#34;&gt;Helper Apps&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#meta&#34;&gt;Meta&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#what-and-why&#34;&gt;What and Why&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#philosophy&#34;&gt;Philosophy&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#breaking-problems-into-components&#34;&gt;Breaking problems into components&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#too-many-prompts&#34;&gt;Too many prompts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#our-approach-to-prompting&#34;&gt;The Fabric approach to prompting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#Installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#Usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#just-use-the-patterns&#34;&gt;Just use the Patterns&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#custom-patterns&#34;&gt;Custom Patterns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#helper-apps&#34;&gt;Helper Apps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#meta&#34;&gt;Meta&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/#primary-contributors&#34;&gt;Primary contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] August 16, 2024 â€” We have migrated to Go! The biggest thing to know is that &lt;strong&gt;the previous installation instructions in the various Fabric videos out there will no longer work&lt;/strong&gt; because they were for the legacy (Python) version. Check the new &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/fabric/main/Installation&#34;&gt;install instructions&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] August 16, 2024 â€” We have cleaned up the Pull Requests and Issues in the following ways as part of the Go release: 1) We incorporated all Pattern submissions in the new version. 2) We closed all Issues related to Python/Code because we we moved to Go. If your issue still persists, just resubmit and we&#39;ll get on it. 3) We did the same with Question issues because most of them were related to Python. 4) We left the Enhancement issues because those tend to not relate as much to Python vs. Go, and we&#39;ll be working through those.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;What and why&lt;/h2&gt; &#xA;&lt;p&gt;Since the start of 2023 and GenAI we&#39;ve seen a massive number of AI applications for accomplishing tasks. It&#39;s powerful, but &lt;em&gt;it&#39;s not easy to integrate this functionality into our lives.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h4&gt;In other words, AI doesn&#39;t have a capabilities problemâ€”it has an &lt;em&gt;integration&lt;/em&gt; problem.&lt;/h4&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Fabric was created to address this by enabling everyone to granularly apply AI to everyday challenges.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AI isn&#39;t a thing; it&#39;s a &lt;em&gt;magnifier&lt;/em&gt; of a thing. And that thing is &lt;strong&gt;human creativity&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We believe the purpose of technology is to help humans flourish, so when we talk about AI we start with the &lt;strong&gt;human&lt;/strong&gt; problems we want to solve.&lt;/p&gt; &#xA;&lt;h3&gt;Breaking problems into components&lt;/h3&gt; &#xA;&lt;p&gt;Our approach is to break problems into individual pieces (see below) and then apply AI to them one at a time. See below for some examples.&lt;/p&gt; &#xA;&lt;img width=&#34;2078&#34; alt=&#34;augmented_challenges&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/31997394-85a9-40c2-879b-b347e4701f06&#34;&gt; &#xA;&lt;h3&gt;Too many prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompts are good for this, but the biggest challenge I faced in 2023â€”â€”which still exists todayâ€”is &lt;strong&gt;the sheer number of AI prompts out there&lt;/strong&gt;. We all have prompts that are useful, but it&#39;s hard to discover new ones, know if they are good or not, &lt;em&gt;and manage different versions of the ones we like&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One of &lt;code&gt;fabric&lt;/code&gt;&#39;s primary features is helping people collect and integrate prompts, which we call &lt;em&gt;Patterns&lt;/em&gt;, into various parts of their lives.&lt;/p&gt; &#xA;&lt;p&gt;Fabric has Patterns for all sorts of life and work activities, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extracting the most interesting parts of YouTube videos and podcasts&lt;/li&gt; &#xA; &lt;li&gt;Writing an essay in your own voice with just an idea as an input&lt;/li&gt; &#xA; &lt;li&gt;Summarizing opaque academic papers&lt;/li&gt; &#xA; &lt;li&gt;Creating perfectly matched AI art prompts for a piece of writing&lt;/li&gt; &#xA; &lt;li&gt;Rating the quality of content to see if you want to read/watch the whole thing&lt;/li&gt; &#xA; &lt;li&gt;Getting summaries of long, boring content&lt;/li&gt; &#xA; &lt;li&gt;Explaining code to you&lt;/li&gt; &#xA; &lt;li&gt;Turning bad documentation into usable documentation&lt;/li&gt; &#xA; &lt;li&gt;Creating social media posts from any content input&lt;/li&gt; &#xA; &lt;li&gt;And a million moreâ€¦&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Fabric, make sure Go is installed, and then run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install Fabric directly from the repo&#xA;go install github.com/danielmiessler/fabric@latest&#xA;# Run the setup to set up your directories and keys&#xA;fabric --setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have it all set up, here&#39;s how to use it.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check out the options &lt;code&gt;fabric -h&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;usage: fabric -h&#xA;Usage:&#xA;  fabric [OPTIONS]&#xA;&#xA;Application Options:&#xA;  -p, --pattern=          Choose a pattern&#xA;  -C, --context=          Choose a context&#xA;      --session=          Choose a session&#xA;  -S, --setup             Run setup&#xA;  -t, --temperature=      Set temperature (default: 0.7)&#xA;  -T, --topp=             Set top P (default: 0.9)&#xA;  -s, --stream            Stream&#xA;  -P, --presencepenalty=  Set presence penalty (default: 0.0)&#xA;  -F, --frequencypenalty= Set frequency penalty (default: 0.0)&#xA;  -l, --listpatterns      List all patterns&#xA;  -L, --listmodels        List all available models&#xA;  -x, --listcontexts      List all contexts&#xA;  -X, --listsessions      List all sessions&#xA;  -U, --updatepatterns    Update patterns&#xA;  -c, --copy              Copy to clipboard&#xA;  -m, --model=            Choose model&#xA;  -u, --url=              Choose ollama url (default: http://127.0.0.1:11434)&#xA;  -o, --output=           Output to file&#xA;  -n, --latest=           Number of latest patterns to list (default: 0)&#xA;&#xA;Help Options:&#xA;  -h, --help              Show this help message&#xA;&#xA;Usage:&#xA;  fabric [OPTIONS]&#xA;&#xA;Application Options:&#xA;  -p, --pattern=          Choose a pattern&#xA;  -C, --context=          Choose a context&#xA;      --session=          Choose a session&#xA;  -S, --setup             Run setup&#xA;  -t, --temperature=      Set temperature (default: 0.7)&#xA;  -T, --topp=             Set top P (default: 0.9)&#xA;  -s, --stream            Stream&#xA;  -P, --presencepenalty=  Set presence penalty (default: 0.0)&#xA;  -F, --frequencypenalty= Set frequency penalty (default: 0.0)&#xA;  -l, --listpatterns      List all patterns&#xA;  -L, --listmodels        List all available models&#xA;  -x, --listcontexts      List all contexts&#xA;  -X, --listsessions      List all sessions&#xA;  -U, --updatepatterns    Update patterns&#xA;  -A, --addcontext        Add a context&#xA;  -c, --copy              Copy to clipboard&#xA;  -m, --model=            Choose model&#xA;  -u, --url=              Choose ollama url (default: http://127.0.0.1:11434)&#xA;  -o, --output=           Output to file&#xA;  -n, --latest=           Number of latest patterns to list (default: 0)&#xA;&#xA;Help Options:&#xA;  -h, --help              Show this help message&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Migration from Legacy (Python) Version&lt;/h2&gt; &#xA;&lt;p&gt;If you have the Legacy (Python) version installed and want to migrate to the Go version, here&#39;s how you do it. It&#39;s basically two steps: 1) uninstall the Python version, and 2) install the Go version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Uninstall Legacy Fabric&#xA;pipx uninstall fabric&#xA;&#xA;# Clear any old Fabric aliases&#xA;(check your .bashrc, .zshrc, etc.)&#xA;# Install the Go version&#xA;go install github.com/danielmiessler/fabric@latest&#xA;# Run setup for the new version. Important because things have changed&#xA;fabric --setup &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Our approach to prompting&lt;/h2&gt; &#xA;&lt;p&gt;Fabric &lt;em&gt;Patterns&lt;/em&gt; are different than most prompts you&#39;ll see.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;First, we use &lt;code&gt;Markdown&lt;/code&gt; to help ensure maximum readability and editability&lt;/strong&gt;. This not only helps the creator make a good one, but also anyone who wants to deeply understand what it does. &lt;em&gt;Importantly, this also includes the AI you&#39;re sending it to!&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of a Fabric Pattern.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;1461&#34; alt=&#34;pattern-example&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/b910c551-9263-405f-9735-71ca69bbab6d&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Next, we are extremely clear in our instructions&lt;/strong&gt;, and we use the Markdown structure to emphasize what we want the AI to do, and in what order.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;And finally, we tend to use the System section of the prompt almost exclusively&lt;/strong&gt;. In over a year of being heads-down with this stuff, we&#39;ve just seen more efficacy from doing that. If that changes, or we&#39;re shown data that says otherwise, we will adjust.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;summarize&lt;/code&gt; Pattern based on input from &lt;code&gt;stdin&lt;/code&gt;. In this case, the body of an article.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pbpaste | fabric --pattern summarize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;analyze_claims&lt;/code&gt; Pattern with the &lt;code&gt;--stream&lt;/code&gt; option to get immediate and streaming results.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pbpaste | fabric --stream --pattern analyze_claims&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;extract_wisdom&lt;/code&gt; Pattern with the &lt;code&gt;--stream&lt;/code&gt; option to get immediate and streaming results from any Youtube video (much like in the original introduction video).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yt --transcript https://youtube.com/watch?v=uXs-zPc63kM | fabric --stream --pattern extract_wisdom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Create patterns- you must create a .md file with the pattern and save it to ~/.config/fabric/pattterns/[yourpatternname].&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Just use the Patterns&lt;/h2&gt; &#xA;&lt;img width=&#34;1173&#34; alt=&#34;fabric-patterns-screenshot&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/9186a044-652b-4673-89f7-71cf066f32d8&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;If you&#39;re not looking to do anything fancy, and you just want a lot of great prompts, you can navigate to the &lt;a href=&#34;https://github.com/danielmiessler/fabric/tree/main/patterns&#34;&gt;&lt;code&gt;/patterns&lt;/code&gt;&lt;/a&gt; directory and start exploring!&lt;/p&gt; &#xA;&lt;p&gt;We hope that if you used nothing else from Fabric, the Patterns by themselves will make the project useful.&lt;/p&gt; &#xA;&lt;p&gt;You can use any of the Patterns you see there in any AI application that you have, whether that&#39;s ChatGPT or some other app or website. Our plan and prediction is that people will soon be sharing many more than those we&#39;ve published, and they will be way better than ours.&lt;/p&gt; &#xA;&lt;p&gt;The wisdom of crowds for the win.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Patterns&lt;/h2&gt; &#xA;&lt;p&gt;You may want to use Fabric to create your own custom Patternsâ€”but not share them with others. No problem!&lt;/p&gt; &#xA;&lt;p&gt;Just make a directory in &lt;code&gt;~/.config/custompatterns/&lt;/code&gt; (or wherever) and put your &lt;code&gt;.md&lt;/code&gt; files in there.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re ready to use them, copy them into:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/.config/fabric/patterns/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then use them like any other Patterns, but they won&#39;t be public unless you explicitly submit them as Pull Requests to the Fabric project. So don&#39;t worryâ€”they&#39;re private to you.&lt;/p&gt; &#xA;&lt;p&gt;This feature works with all openai and ollama models but does NOT work with claude. You can specify your model with the -m flag&lt;/p&gt; &#xA;&lt;h2&gt;Helper Apps&lt;/h2&gt; &#xA;&lt;p&gt;Fabric also makes use of some core helper apps (tools) to make it easier to integrate with your various workflows. Here are some examples:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;yt&lt;/code&gt; is a helper command that extracts the transcript from a YouTube video. You can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yt https://www.youtube.com/watch?v=lQVcbY52_gY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will return the transcript from the video, which you can then pipe into Fabric like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yt https://www.youtube.com/watch?v=lQVcbY52_gY | fabric --pattern extract_wisdom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;yt&lt;/code&gt; Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install &lt;code&gt;yt&lt;/code&gt;, install it the same way as you install Fabric, just with a different repo name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/danielmiessler/yt@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be sure to add your &lt;code&gt;YOUTUBE_API_KEY&lt;/code&gt; to &lt;code&gt;~/.config/fabric/.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Meta&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Special thanks to the following people for their inspiration and contributions!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Jonathan Dunn&lt;/em&gt; for being the absolute MVP dev on the project, including spearheading the new Go version, as well as the GUI! All this while also being a full-time medical doctor!&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Caleb Sima&lt;/em&gt; for pushing me over the edge of whether to make this a public project or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Eugen Eisler&lt;/em&gt; and &lt;em&gt;Frederick Ros&lt;/em&gt; for their invaluable contributions to the Go version&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Joel Parish&lt;/em&gt; for super useful input on the project&#39;s Github directory structure..&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Joseph Thacker&lt;/em&gt; for the idea of a &lt;code&gt;-c&lt;/code&gt; context flag that adds pre-created context in the &lt;code&gt;./config/fabric/&lt;/code&gt; directory to all Pattern queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Jason Haddix&lt;/em&gt; for the idea of a stitch (chained Pattern) to filter content using a local model before sending on to a cloud model, i.e., cleaning customer data using &lt;code&gt;llama2&lt;/code&gt; before sending on to &lt;code&gt;gpt-4&lt;/code&gt; for analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Andre Guerra&lt;/em&gt; for assisting with numerous components to make things simpler and more maintainable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Primary contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/danielmiessler&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/50654?v=4&#34; title=&#34;Daniel Miessler&#34; width=&#34;50&#34; height=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xssdoctor&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9218431?v=4&#34; title=&#34;Jonathan Dunn&#34; width=&#34;50&#34; height=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sbehrens&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/688589?v=4&#34; title=&#34;Scott Behrens&#34; width=&#34;50&#34; height=&#34;50&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agu3rra&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10410523?v=4&#34; title=&#34;Andre Guerra&#34; width=&#34;50&#34; height=&#34;50&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fabric&lt;/code&gt; was created by &lt;a href=&#34;https://danielmiessler.com/subscribe&#34; target=&#34;_blank&#34;&gt;Daniel Miessler&lt;/a&gt; in January of 2024. &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://twitter.com/intent/user?screen_name=danielmiessler&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/danielmiessler&#34; alt=&#34;X (formerly Twitter) Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>