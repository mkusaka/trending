<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T01:42:42Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>soypat/gopherlings</title>
    <updated>2022-06-26T01:42:42Z</updated>
    <id>tag:github.com,2022-06-26:/soypat/gopherlings</id>
    <link href="https://github.com/soypat/gopherlings" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üìòÔ∏è Learn Go by fixing tiny incorrect programs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gopherlings&lt;/h1&gt; &#xA;&lt;p&gt;üìòÔ∏è Learn Go by fixing tiny incorrect programs&lt;/p&gt; &#xA;&lt;p&gt;This project was directly inspired by the great &lt;a href=&#34;https://github.com/ratfactor/ziglings&#34;&gt;ziglings&lt;/a&gt; project which itself was inspired by &lt;a href=&#34;https://github.com/rust-lang/rustlings&#34;&gt;rustlings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a first time learner it is suggested you complement this material with another source such as&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gobyexample.com/&#34;&gt;Go by example&lt;/a&gt;. A lot of material here is based on this project!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yourbasic.org/golang/&#34;&gt;Go go-to guide&lt;/a&gt; by yourbasic. Great source for beginners.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Intended Audience&lt;/h2&gt; &#xA;&lt;p&gt;These exercises will probably be difficult if you&#39;ve never programmed before.&lt;/p&gt; &#xA;&lt;p&gt;The exercises should be self-contained and self-explained, though this is a WIP and suggestions are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Instructions: Running exercises&lt;/h2&gt; &#xA;&lt;p&gt;Requires a &lt;a href=&#34;https://go.dev/dl/&#34;&gt;Go installation&lt;/a&gt; to run the examples.&lt;/p&gt; &#xA;&lt;h3&gt;Instructions using VSCode&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the repository (or alternatively clone it)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the VSCode &lt;strong&gt;Go&lt;/strong&gt; extension authored by &lt;em&gt;Go Team at Google&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the &lt;code&gt;gopherlings&lt;/code&gt; folder in VSCode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the exercise file, i.e. &lt;a href=&#34;https://raw.githubusercontent.com/soypat/gopherlings/main/exercises/001-hello/hello.go&#34;&gt;&lt;code&gt;exercises/001-hello/hello.go&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once the &lt;code&gt;hello.go&lt;/code&gt; file is open you may edit it and press &lt;kbd&gt;F5&lt;/kbd&gt; to run it. Output will be shown in the Debug Console.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Instructions using terminal&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/soypat/gopherlings.git &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to example&#39;s directory&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd gopherlings/exercises/001-hello&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the file so it is correct and run it with &lt;code&gt;go run&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go run hello.go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;h4&gt;Short term&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add quizzes after $n$ exercises. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Possibly add several quizzes of varying difficulty inside quiz directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add a helper program. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Could run most recently edited exercise and lead the coder in right direction.&lt;/li&gt; &#xA;   &lt;li&gt;Could yield hints when coder requests it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Long term&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have exercises that cover the entire &lt;a href=&#34;https://go.dev/ref/spec&#34;&gt;Go spec&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>optiv/Mangle</title>
    <updated>2022-06-26T01:42:42Z</updated>
    <id>tag:github.com,2022-06-26:/optiv/Mangle</id>
    <link href="https://github.com/optiv/Mangle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mangle is a tool that manipulates aspects of compiled executables (.exe or DLL) to avoid detection from EDRs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mangle&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Mangle/main/Screenshots/logo.png&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Authored By Tyl0us&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;left&#34;&gt;&lt;b&gt;Featured at Source Zero Con 2022&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p&gt;Mangle is a tool that manipulates aspects of compiled executables (.exe or DLL). Mangle can remove known Indicators of Compromise (IoC) based strings and replace them with random characters, change the file by inflating the size to avoid EDRs, and can clone code-signing certs from legitimate files. In doing so, Mangle helps loaders evade on-disk and in-memory scanners.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Mangle was developed in Golang.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;The first step, as always, is to clone the repo. Before you compile Mangle, you&#39;ll need to install the dependencies. To install them, run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/Binject/debug/pe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build Mangle.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Important&lt;/h2&gt; &#xA;&lt;p&gt;While Mangle is written in Golang, a lot of the features are designed to work on executable files from other languages. At the time of release, the only feature that is Golang specific is the string manipulation part.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mangle -h&#xA;&#xA;&#x9;   _____                        .__&#xA;&#x9;  /     \ _____    ____    ____ |  |   ____&#xA;&#x9; /  \ /  \\__  \  /    \  / ___\|  | _/ __ \&#xA;&#x9;/    Y    \/ __ \|   |  \/ /_/  &amp;gt;  |_\  ___/&#xA;&#x9;\____|__  (____  /___|  /\___  /|____/\___  &amp;gt;&#xA;&#x9;&#x9;\/     \/     \//_____/   &#x9;  \/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;(@Tyl0us)&#xA;Usage of ./Mangle:&#xA;  -C string&#xA;        Path to the file containing the certificate you want to clone&#xA;  -I string&#xA;        Path to the orginal file&#xA;  -M    Edit the PE file to strip out Go indicators&#xA;  -O string&#xA;        The new file name&#xA;  -S int&#xA;        How many MBs to increase the file by&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Strings&lt;/h2&gt; &#xA;&lt;p&gt;Mangle takes the input executable and looks for known strings that security products look for or alert on. These strings alone are not the sole point of detection. Often, these strings are in conjunction with other data points and pieces of telemetry for detection and prevention. Mangle finds these known strings and replaces the hex values with random ones to remove them. IMPORTANT: Mangle replaces the exact size of the strings it‚Äôs manipulating. It doesn‚Äôt add any more or any less, as this would create misalignments and instabilities in the file. Mangle does this using the &lt;code&gt;-M&lt;/code&gt; command-line option.&lt;/p&gt; &#xA;&lt;p&gt;Currently, Mangle only does Golang files but as time goes on other languages will be added. If you know of any for other languages, please open an issue ticket and submit them.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;Before&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Mangle/main/Screenshots/Strings_Before.png&#34; border=&#34;2px solid #555&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;b&gt;After&lt;/b&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Mangle/main/Screenshots/Strings_After.png&#34; border=&#34;2px solid #555&#34;&gt; &lt;/p&gt;&#xA;&lt;h2&gt;Inflate&lt;/h2&gt; &#xA;&lt;p&gt;Pretty much all EDRs can‚Äôt scan both on disk or in memory files beyond a certain size. This simply stems from the fact that large files take longer to review, scan, or monitor. EDRs do not want to impact performance by slowing down the user&#39;s productivity. Mangle inflates files by creating a padding of Null bytes (Zeros) at the end of the file. This ensures that nothing inside the file is impacted. To inflate an executable, use the &lt;code&gt;-S&lt;/code&gt; command-line option along with the number of bytes you want to add to the file. Large payloads are really not an issue anymore with how fast Internet speeds are, that being said, it&#39;s not recommended to make a 2 gig file.&lt;/p&gt; &#xA;&lt;p&gt;Based on test cases across numerous userland and kernel EDRs, it is recommended to increase the size by either 95-100 megabytes. Because vendors do not check large files, the activity goes unnoticed, resulting in the successful execution of shellcode.&lt;/p&gt; &#xA;&lt;h3&gt;Example:&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/optiv/Mangle/main/Screenshots/Demo.gif&#34;&gt; &#xA;&lt;h2&gt;Certificate&lt;/h2&gt; &#xA;&lt;p&gt;Mangle also contains the ability to take the full chain and all attributes from a legitimate code-signing certificate from a file and copy it onto another file. This includes the signing date, counter signatures, and other measurable attributes.&lt;/p&gt; &#xA;&lt;p&gt;While this feature may sound similar to another tool I developed, &lt;a href=&#34;https://github.com/Tylous/Limelighter&#34;&gt;Limelighter&lt;/a&gt;, the major difference between the two is that Limelighter makes a fake certificate based off a domain and signs it with the current date and time, versus using valid attributes where the timestamp is taken from when the original file. This option can use DLL or .exe files to copy using the &lt;code&gt;-C&lt;/code&gt; command-line option, along with the path to the file you want to copy the certificate from.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/optiv/Mangle/main/Screenshots/Cert_Copy.png&#34; border=&#34;2px solid #555&#34;&gt; &lt;/p&gt;&#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Special thanks to Jessica of SuperNovasStore for creating the logo.&lt;/li&gt; &#xA; &lt;li&gt;Special thanks to Binject for his &lt;a href=&#34;https://github.com/Binject/debug&#34;&gt;repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/consul</title>
    <updated>2022-06-26T01:42:42Z</updated>
    <id>tag:github.com,2022-06-26:/hashicorp/consul</id>
    <link href="https://github.com/hashicorp/consul" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hashicorp/consul/main/website/public/img/logo.svg?sanitize=true&#34; align=&#34;left&#34; height=&#34;46px&#34; alt=&#34;Consul logo&#34;&gt; &lt;span&gt;Consul&lt;/span&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/_/consul&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/_/consul.svg?sanitize=true&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/hashicorp/consul&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/hashicorp/consul&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Consul is a distributed, highly available, and data center aware solution to connect and configure applications across dynamic, distributed infrastructure.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://www.consul.io&#34;&gt;https://www.consul.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Tutorials: &lt;a href=&#34;https://learn.hashicorp.com/consul&#34;&gt;HashiCorp Learn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://discuss.hashicorp.com/c/consul&#34;&gt;Discuss&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consul provides several key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Multi-Datacenter&lt;/strong&gt; - Consul is built to be datacenter aware, and can support any number of regions without complex configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Service Mesh/Service Segmentation&lt;/strong&gt; - Consul Connect enables secure service-to-service communication with automatic TLS encryption and identity-based authorization. Applications can use sidecar proxies in a service mesh configuration to establish TLS connections for inbound and outbound connections without being aware of Connect at all.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Service Discovery&lt;/strong&gt; - Consul makes it simple for services to register themselves and to discover other services via a DNS or HTTP interface. External services such as SaaS providers can be registered as well.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Health Checking&lt;/strong&gt; - Health Checking enables Consul to quickly alert operators about any issues in a cluster. The integration with service discovery prevents routing traffic to unhealthy hosts and enables service level circuit breakers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Key/Value Storage&lt;/strong&gt; - A flexible key/value store enables storing dynamic configuration, feature flagging, coordination, leader election and more. The simple HTTP API makes it easy to use anywhere.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Consul runs on Linux, macOS, FreeBSD, Solaris, and Windows and includes an optional &lt;a href=&#34;https://demo.consul.io&#34;&gt;browser based UI&lt;/a&gt;. A commercial version called &lt;a href=&#34;https://www.hashicorp.com/products/consul&#34;&gt;Consul Enterprise&lt;/a&gt; is also available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;: We take Consul&#39;s security and our users&#39; trust very seriously. If you believe you have found a security issue in Consul, please &lt;a href=&#34;https://www.hashicorp.com/security#vulnerability-reporting&#34;&gt;responsibly disclose&lt;/a&gt; by contacting us at &lt;a href=&#34;mailto:security@hashicorp.com&#34;&gt;security@hashicorp.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;A few quick start guides are available on the Consul website:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standalone binary install:&lt;/strong&gt; &lt;a href=&#34;https://learn.hashicorp.com/tutorials/consul/get-started-install&#34;&gt;https://learn.hashicorp.com/tutorials/consul/get-started-install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minikube install:&lt;/strong&gt; &lt;a href=&#34;https://learn.hashicorp.com/tutorials/consul/kubernetes-minikube&#34;&gt;https://learn.hashicorp.com/tutorials/consul/kubernetes-minikube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kind install:&lt;/strong&gt; &lt;a href=&#34;https://learn.hashicorp.com/tutorials/consul/kubernetes-kind&#34;&gt;https://learn.hashicorp.com/tutorials/consul/kubernetes-kind&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Kubernetes install:&lt;/strong&gt; &lt;a href=&#34;https://learn.hashicorp.com/tutorials/consul/kubernetes-deployment-guide&#34;&gt;https://learn.hashicorp.com/tutorials/consul/kubernetes-deployment-guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full, comprehensive documentation is available on the Consul website:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.consul.io/docs&#34;&gt;https://www.consul.io/docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for your interest in contributing! Please refer to &lt;a href=&#34;https://github.com/hashicorp/consul/raw/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for guidance. For contributions specifically to the browser based UI, please refer to the UI&#39;s &lt;a href=&#34;https://github.com/hashicorp/consul/raw/main/ui/packages/consul-ui/README.md&#34;&gt;README.md&lt;/a&gt; for guidance.&lt;/p&gt;</summary>
  </entry>
</feed>