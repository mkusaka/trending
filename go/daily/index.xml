<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-03T01:30:51Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>peer-calls/peer-calls</title>
    <updated>2024-10-03T01:30:51Z</updated>
    <id>tag:github.com,2024-10-03:/peer-calls/peer-calls</id>
    <link href="https://github.com/peer-calls/peer-calls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Group peer to peer video calls for everyone written in Go and TypeScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Peer Calls v4&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/peer-calls/peer-calls/workflows/Peer%20Calls%20CI/badge.svg?sanitize=true&#34; alt=&#34;Peer Calls CI&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/peer-calls/peer-calls&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/peer-calls/peer-calls&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WebRTC peer to peer calls for everyone. See it live in action at &lt;a href=&#34;https://peercalls.com&#34;&gt;peercalls.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The server has been completely rewriten in Go and all the original functionality works. An optional implementation of a Selective Forwarding Unit (SFU) is available to make Peer Calls consume less bandwith for user video uploads. This wouldn&#39;t haven been possible without the awesome &lt;a href=&#34;https://github.com/pion/webrtc&#34;&gt;pion/webrtc&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;The config file format is still YAML, but is different than what was in v3. The v3 source code is available in &lt;code&gt;version-3&lt;/code&gt; branch. Version 4 will no longer be published on NPM since the server is no longer written in NodeJS.&lt;/p&gt; &#xA;&lt;h1&gt;What&#39;s New in v4&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Core rewritten in Golang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Selective Forwarding Unit. Can be enabled using &lt;code&gt;NETWORK_TYPE=sfu&lt;/code&gt; environment variable. The &lt;a href=&#34;https://peercalls.com&#34;&gt;peercalls.com&lt;/a&gt; instance has this enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ability to change video and audio devices without reconnecting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improved toolbar layout. Can be toggled by clicking or tapping.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple videos are now shown in a full-size grid and each can be minimized.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Video cropping can be turned off.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improved file sending. Users are now able to send files larger than 64 or 256 KB (depends on the browser).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Device names are correctly populated in the dropdown list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improved desktop sharing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Copy invite link to clipboard. Will show as share icon on devices that support it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix: Toolbar icons render correctly on iOS 12 devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix: Video autoplays.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix: Toolbar is no longer visible until call is joined&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix: Add warning when using an unsupported browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fix: Add warning when JavaScript is disabled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO for Selective Forwarding Unit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support dynamic adding and removing of streams&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support RTCP packet Picture Loss Indicator (PLI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support RTCP packet Receiver Estimated Maximum Bitrate (REMB)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add handling of other RTCP packets besides NACK, PLI and REMB&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add JitterBuffer (experimental, currently without congestion control)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support multiple Peer Calls nodes when using SFU&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add support for passive ICE TCP candidates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; End-to-End Encryption (E2EE) using Insertable Streams. See &lt;a href=&#34;https://github.com/peer-calls/peer-calls/pull/142&#34;&gt;#142&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Requirements for Development&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js 18.13&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go 1.19.5&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, Docker can be used to run Peer Calls.&lt;/p&gt; &#xA;&lt;h1&gt;Stack&lt;/h1&gt; &#xA;&lt;h2&gt;Backend&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/webrtc&#34;&gt;pion/webrtc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;github.com/go-chi/chi&lt;/li&gt; &#xA; &lt;li&gt;nhooyr.io/websocket&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/peer-calls/peer-calls/master/go.mod&#34;&gt;go.mod&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;Frontend&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA; &lt;li&gt;Redux&lt;/li&gt; &#xA; &lt;li&gt;TypeScript (since peer-calls &lt;code&gt;v2.1.0&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/peer-calls/peer-calls/master/package.json&#34;&gt;package.json&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Installation &amp;amp; Running&lt;/h1&gt; &#xA;&lt;h2&gt;Download Release&lt;/h2&gt; &#xA;&lt;p&gt;Head to &lt;a href=&#34;https://github.com/peer-calls/peer-calls/releases&#34;&gt;Releases&lt;/a&gt; and download a precompiled version. Currently the binaries for the following systems are built automatically:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;linux amd64&lt;/li&gt; &#xA; &lt;li&gt;linux arm&lt;/li&gt; &#xA; &lt;li&gt;darwin (macOS) amd64&lt;/li&gt; &#xA; &lt;li&gt;windows amd64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deploying onto Kubernetes&lt;/h2&gt; &#xA;&lt;p&gt;The root of this repository contains a &lt;code&gt;kustomization.yaml&lt;/code&gt;, allowing anyone to patch the manifests found within the &lt;code&gt;deploy/&lt;/code&gt; directory. To deploy the manifests without applying any patches, pass the URL to &lt;code&gt;kubectl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;kubectl apply -k github.com/peer-calls/peer-calls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Docker&lt;/h2&gt; &#xA;&lt;p&gt;The automated builds on Docker Hub now require a subscription, and approval is required even for open source projects. We recently switched to using GitHub Container Registry instead:&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://ghcr.io/peer-calls/peer-calls&#34;&gt;&lt;code&gt;ghcr.io/peer-calls/peer-calls&lt;/code&gt;&lt;/a&gt; image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -it -p 3000:3000 ghcr.io/peer-calls/peer-calls:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/peer-calls/peer-calls.git&#xA;cd peer-calls&#xA;npm install&#xA;&#xA;# for production&#xA;npm run build&#xA;npm run build:go:linux&#xA;&#xA;# for development&#xA;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building Docker Image&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/peer-calls/peer-calls&#xA;cd peer-calls&#xA;docker build -t peer-calls .&#xA;docker run --rm -it -p 3000:3000 peer-calls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_LOG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;csv&lt;/td&gt; &#xA;   &lt;td&gt;Enables or disables logging for certain modules&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;-sdp,-ws,-nack,-rtp,-rtcp,-pion:*:trace,-pion:*:debug,-pion:*:info,*&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_FS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;When set to a non-empty value, use the path to find resource files&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_BASE_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Base URL of the application&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_BIND_HOST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;IP to listen to&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.0.0.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_BIND_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;Port to listen to&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;3000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_TLS_CERT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Path to TLS PEM certificate. If set will enable TLS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_TLS_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Path to TLS PEM cert key. If set will enable TLS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_STORE_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Can be &lt;code&gt;memory&lt;/code&gt; or &lt;code&gt;redis&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;memory&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_STORE_REDIS_HOST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Hostname of Redis server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_STORE_REDIS_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;Port of Redis server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_STORE_REDIS_PREFIX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Prefix for Redis keys. Suggestion: &lt;code&gt;peercalls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Can be &lt;code&gt;mesh&lt;/code&gt; or &lt;code&gt;sfu&lt;/code&gt;. Setting to SFU will make the server the main peer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mesh&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_INTERFACES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;csv&lt;/td&gt; &#xA;   &lt;td&gt;List of interfaces to use for ICE candidates, uses all available when empty&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_JITTER_BUFFER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; to enable the use of Jitter Buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_PROTOCOLS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;csv&lt;/td&gt; &#xA;   &lt;td&gt;Can be &lt;code&gt;udp4&lt;/code&gt;, &lt;code&gt;udp6&lt;/code&gt;, &lt;code&gt;tcp4&lt;/code&gt; or &lt;code&gt;tcp6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;udp4,udp6&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_TCP_BIND_ADDR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;ICE TCP bind address. By default listens on all interfaces.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_TCP_LISTEN_PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;ICE TCP listen port. By default uses a random port.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_TRANSPORT_LISTEN_ADDR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;When set, will listen for external RTP, Data and Metadata UDP streams&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_TRANSPORT_NODES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;csv&lt;/td&gt; &#xA;   &lt;td&gt;When set, will transmit media and data to designated &lt;code&gt;host:port&lt;/code&gt;(s).&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_UDP_PORT_MIN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;Defines ICE UDP range start to use for UDP host candidates.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_NETWORK_SFU_UDP_PORT_MAX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;Defines ICE UDP range end to use for UDP host candidates.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_ICE_SERVER_URLS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;csv&lt;/td&gt; &#xA;   &lt;td&gt;List of ICE Server URLs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_ICE_SERVER_AUTH_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Can be empty or &lt;code&gt;secret&lt;/code&gt; for coturn &lt;code&gt;static-auth-secret&lt;/code&gt; config option.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_ICE_SERVER_SECRET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Secret for coturn&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_ICE_SERVER_USERNAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Username for coturn&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_PROMETHEUS_ACCESS_TOKEN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Access token for prometheus &lt;code&gt;/metrics&lt;/code&gt; URL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PEERCALLS_FRONTEND_ENCODED_INSERTABLE_STREAMS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;Enable insertable streams&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The default ICE servers in use are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;stun:stun.l.google.com:19302&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stun:global.stun.twilio.com:3478?transport=udp&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Only a single ICE server can be defined via environment variables. To define more use a YAML config file. To load a config file, use the &lt;code&gt;-c /path/to/config.yml&lt;/code&gt; command line argument.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/peer-calls/peer-calls/master/src/server/config/types.go&#34;&gt;config/types.go&lt;/a&gt; for configuration types.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;base_url: &#39;&#39;&#xA;bind_host: &#39;0.0.0.0&#39;&#xA;bind_port: 3005&#xA;ice_servers:&#xA; - urls:&#xA;   - &#39;stun:stun.l.google.com:19302&#39;&#xA;- urls:&#xA;  - &#39;stun:global.stun.twilio.com:3478?transport=udp&#39;&#xA;#- urls:&#xA;#  - &#39;turn:coturn.mydomain.com&#39;&#xA;#  auth_type: secret&#xA;#  auth_secret:&#xA;#    username: &#34;peercalls&#34;&#xA;#    secret: &#34;some-static-secret&#34;&#xA;# tls:&#xA;#   cert: test.pem&#xA;#   key: test.key&#xA;store:&#xA;  type: memory&#xA;  # type: redis&#xA;  # redis:&#xA;  #   host: localhost&#xA;  #   port: 6379&#xA;  #   prefix: peercalls&#xA;network:&#xA;  type: mesh&#xA;  # type: sfu&#xA;  # sfu:&#xA;  #   interfaces:&#xA;  #   - eth0&#xA;prometheus:&#xA;  access_token: &#34;mytoken&#34;&#xA;frontend:&#xA;  encodedInsertableStreams: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prometheus &lt;code&gt;/metrics&lt;/code&gt; URL will not be accessible without an access token set. The access token can be provided by either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting &lt;code&gt;Authorization&lt;/code&gt; header to &lt;code&gt;Bearer mytoken&lt;/code&gt;, or&lt;/li&gt; &#xA; &lt;li&gt;Providing the access token as a query string: &lt;code&gt;/metrics?access_token=mytoken&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To access the server, go to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Accessing From Network&lt;/h1&gt; &#xA;&lt;p&gt;Most browsers will prevent access to user media devices if the application is accessed from the network (not via 127.0.0.1). If you wish to test your mobile devices, you&#39;ll have to enable TLS by setting the &lt;code&gt;PEERCALLS_TLS_CERT&lt;/code&gt; and &lt;code&gt;PEERCALLS_TLS_KEY&lt;/code&gt; environment variables. To generate a self-signed certificate you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl req -nodes -x509 -newkey rsa:4096 -keyout key.pem -subj &#34;/C=US/ST=Oregon/L=Portland/O=Company Name/OU=Org/CN=example.com&#34; -out cert.pem -days 365&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;example.com&lt;/code&gt; with your server&#39;s hostname.&lt;/p&gt; &#xA;&lt;h1&gt;Multiple Instances and Redis&lt;/h1&gt; &#xA;&lt;p&gt;Redis can be used to allow users connected to different instances to connect. The following needs to be added to &lt;code&gt;config.yaml&lt;/code&gt; to enable Redis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;store:&#xA;  type: redis&#xA;  redis:&#xA;    host: redis-host  # redis host&#xA;    port: 6379        # redis port&#xA;    prefix: peercalls # all instances must use the same prefix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;By default, Peer Calls server will log only basic information. Client-side logging is disabled by default.&lt;/p&gt; &#xA;&lt;p&gt;Server-side logs can be configured via the &lt;code&gt;PEERCALLS_LOG&lt;/code&gt; environment variable. Setting it to &lt;code&gt;*&lt;/code&gt; will enable all server-side logging:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PEERCALLS_LOG=*&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Client-side logs can be configured via &lt;code&gt;localStorage.DEBUG&lt;/code&gt; and &lt;code&gt;localStorage.LOG&lt;/code&gt; variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting &lt;code&gt;localStorage.log=1&lt;/code&gt; enables logging of Redux actions and state changes&lt;/li&gt; &#xA; &lt;li&gt;Setting &lt;code&gt;localStorage.debug=peercalls,peercalls:*&lt;/code&gt; enables all other client-side logging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;Below are some common scripts used for development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm start              build all resources and start the server.&#xA;npm run build          build all client-side resources.&#xA;npm run start:server   start the server&#xA;npm run js:watch       build and watch resources&#xA;npm test               run all client-side tests.&#xA;go test ./...          run all server tests&#xA;npm run ci             run all linting, tests and build the client-side&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Browser Support&lt;/h1&gt; &#xA;&lt;p&gt;Tested on Firefox and Chrome, including mobile versions. Also works on Safari and iOS since version 11. Does not work on Microsoft Edge because they do not support DataChannels yet.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://caniuse.com/#feat=rtcpeerconnection&#34;&gt;http://caniuse.com/#feat=rtcpeerconnection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://caniuse.com/#search=getUserMedia&#34;&gt;http://caniuse.com/#search=getUserMedia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In Firefox, it might be useful to use &lt;code&gt;about:webrtc&lt;/code&gt; to debug connection issues. In Chrome, use &lt;code&gt;about:webrtc-internals&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When experiencing connection issues, the first thing to try is to have all peers to use the same browser.&lt;/p&gt; &#xA;&lt;h1&gt;Epheremal UDP Ports for ICE&lt;/h1&gt; &#xA;&lt;p&gt;The UDP port range can be defined for opening epheremal ports. These ports will be used for generating UDP host ICE candidates. It is recommended to enable these UDP ports when ICE TCP is enabled, because the priority of TCP host candidates will be higher than srflx/prflx candidates, as such TCP will be used even though UDP connectivity might be possible.&lt;/p&gt; &#xA;&lt;h1&gt;ICE TCP&lt;/h1&gt; &#xA;&lt;p&gt;Peer Calls supports ICE over TCP as described in RFC6544. Currently only passive ICE candidates are supported. This means that users whose ISPs or corporate firewalls block UDP packets can use TCP to connect to the SFU. In most scenarios, this removes the need to use a TURN server, but this functionality is currently experimental and is not enabled by default.&lt;/p&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;tcp4&lt;/code&gt; and &lt;code&gt;tcp6&lt;/code&gt; to your &lt;code&gt;PEERCALLS_NETWORK_SFU_PROTOCOLS&lt;/code&gt; to enable support for ICE TCP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PEERCALLS_NETWORK_TYPE=sfu PEERCALLS_NETWORK_SFU_PROTOCOLS=`udp4,udp6,tcp4,tcp6` peer-calls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To test this functionality, &lt;code&gt;udp4&lt;/code&gt; and &lt;code&gt;udp6&lt;/code&gt; network types should be omitted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PEERCALLS_NETWORK_TYPE=sfu PEERCALLS_NETWORK_SFU_PROTOCOLS=`tcp4,tcp6` peer-calls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that in production the &lt;code&gt;PEERCALLS_NETWORK_SFU_TCP_LISTEN_PORT&lt;/code&gt; should be specified and external TCP access allowed through the server firewall.&lt;/p&gt; &#xA;&lt;h1&gt;TURN Server&lt;/h1&gt; &#xA;&lt;p&gt;When a direct connection cannot be established, it might be help to use a TURN server. The peercalls.com instance is configured to use a TURN server and it can be used for testing. However, the server bandwidth there is not unlimited.&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps to install a TURN server on Ubuntu/Debian Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install coturn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the following configuration as a template for &lt;code&gt;/etc/turnserver.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lt-cred-mech&#xA;use-auth-secret&#xA;static-auth-secret=p4ssw0rd&#xA;realm=example.com&#xA;total-quota=300&#xA;cert=/etc/letsencrypt/live/rtc.example.com/fullchain.pem&#xA;pkey=/etc/letsencrypt/live/rtc.example.com/privkey.pem&#xA;log-file=/dev/stdout&#xA;no-multicast-peers&#xA;proc-user=turnserver&#xA;proc-group=turnserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the &lt;code&gt;p4ssw0rd&lt;/code&gt;, &lt;code&gt;realm&lt;/code&gt; and paths to server certificates.&lt;/p&gt; &#xA;&lt;p&gt;Use the following configuration for Peer Calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;iceServers:&#xA;- urls:&#xA;  - &#39;turn:rtc.example.com&#39;&#xA;  auth_type: secret&#xA;  auth_secret:&#xA;    username: &#39;example&#39;&#xA;    secret: &#39;p4ssw0rd&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, enable and start the &lt;code&gt;coturn&lt;/code&gt; service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl enable coturn&#xA;sudo systemctl start coturn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/peer-calls/peer-calls/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter a bug, please open a new issue!&lt;/p&gt; &#xA;&lt;h1&gt;Support&lt;/h1&gt; &#xA;&lt;p&gt;The development of Peer Calls is sponsored by &lt;a href=&#34;https://rondomoon.com&#34;&gt;rondomoon&lt;/a&gt;. If you&#39;d like enterprise on-site support or become a sponsor, please contact &lt;a href=&#34;mailto:hello@rondomoon.com&#34;&gt;hello@rondomoon.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/peer-calls/peer-calls/master/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>