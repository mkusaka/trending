<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-12T01:41:11Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anchore/syft</title>
    <updated>2022-08-12T01:41:11Z</updated>
    <id>tag:github.com,2022-08-12:/anchore/syft</id>
    <link href="https://github.com/anchore/syft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLI tool and library for generating a Software Bill of Materials from container images and filesystems&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5199289/136844524-1527b09f-c5cb-4aa9-be54-5aa92a6086c1.png&#34; width=&#34;271&#34; alt=&#34;Cute pink owl syft logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/anchore/syft/actions/workflows/validations.yaml&#34;&gt;&lt;img src=&#34;https://github.com/anchore/syft/actions/workflows/validations.yaml/badge.svg?sanitize=true&#34; alt=&#34;Validations&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/anchore/syft&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/anchore/syft&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/anchore/syft/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/anchore/syft.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/anchore/syft&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/anchore/syft.svg?sanitize=true&#34; alt=&#34;GitHub go.mod Go version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/anchore/syft/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License: Apache-2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://anchore.com/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Join-blue?logo=slack&#34; alt=&#34;Slack Invite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A CLI tool and Go library for generating a Software Bill of Materials (SBOM) from container images and filesystems. Exceptional for vulnerability detection when used with a scanner like &lt;a href=&#34;https://github.com/anchore/grype&#34;&gt;Grype&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Join our community meetings!&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Calendar: &lt;a href=&#34;https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t&#34;&gt;https://calendar.google.com/calendar/u/0/r?cid=Y182OTM4dGt0MjRtajI0NnNzOThiaGtnM29qNEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Agenda: &lt;a href=&#34;https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing&#34;&gt;https://docs.google.com/document/d/1ZtSAa6fj2a6KRWviTn3WoJm09edvrNUp4Iz_dOjjyY8/edit?usp=sharing&lt;/a&gt; (join &lt;a href=&#34;https://groups.google.com/g/anchore-oss-community&#34;&gt;this group&lt;/a&gt; for write access)&lt;/li&gt; &#xA; &lt;li&gt;All are welcome!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For commercial support options with Syft or Grype, please &lt;a href=&#34;https://get.anchore.com/contact/&#34;&gt;contact Anchore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/590471/90277200-2a253000-de33-11ea-893f-32c219eea11a.gif&#34; alt=&#34;syft-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generates SBOMs for container images, filesystems, archives, and more to discover packages and libraries&lt;/li&gt; &#xA; &lt;li&gt;Supports OCI and Docker image formats&lt;/li&gt; &#xA; &lt;li&gt;Linux distribution identification&lt;/li&gt; &#xA; &lt;li&gt;Works seamlessly with &lt;a href=&#34;https://github.com/anchore/grype&#34;&gt;Grype&lt;/a&gt; (a fast, modern vulnerability scanner)&lt;/li&gt; &#xA; &lt;li&gt;Able to create signed SBOM attestations using the &lt;a href=&#34;https://github.com/in-toto/attestation/raw/main/spec/README.md&#34;&gt;in-toto specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Convert between SBOM formats, such as CycloneDX, SPDX, and Syft&#39;s own format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Ecosystems&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alpine (apk)&lt;/li&gt; &#xA; &lt;li&gt;C (conan)&lt;/li&gt; &#xA; &lt;li&gt;C++ (conan)&lt;/li&gt; &#xA; &lt;li&gt;Dart (pubs)&lt;/li&gt; &#xA; &lt;li&gt;Debian (dpkg)&lt;/li&gt; &#xA; &lt;li&gt;Dotnet (deps.json)&lt;/li&gt; &#xA; &lt;li&gt;Objective-C (cocoapods)&lt;/li&gt; &#xA; &lt;li&gt;Go (go.mod, Go binaries)&lt;/li&gt; &#xA; &lt;li&gt;Haskell (cabal, stack)&lt;/li&gt; &#xA; &lt;li&gt;Java (jar, ear, war, par, sar)&lt;/li&gt; &#xA; &lt;li&gt;JavaScript (npm, yarn)&lt;/li&gt; &#xA; &lt;li&gt;Jenkins Plugins (jpi, hpi)&lt;/li&gt; &#xA; &lt;li&gt;PHP (composer)&lt;/li&gt; &#xA; &lt;li&gt;Python (wheel, egg, poetry, requirements.txt)&lt;/li&gt; &#xA; &lt;li&gt;Red Hat (rpm)&lt;/li&gt; &#xA; &lt;li&gt;Ruby (gem)&lt;/li&gt; &#xA; &lt;li&gt;Rust (cargo.lock)&lt;/li&gt; &#xA; &lt;li&gt;Swift (cocoapods)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Currently, Syft is built only for Linux, macOS and Windows.&lt;/p&gt; &#xA;&lt;h3&gt;Recommended&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or, you can specify a release version and destination directory for the installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b &amp;lt;DESTINATION_DIR&amp;gt; &amp;lt;RELEASE_VERSION&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chocolatey&lt;/h3&gt; &#xA;&lt;p&gt;The chocolatey distribution of syft is community maintained and not distributed by the anchore team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;choco install syft -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap anchore/syft&#xA;brew install syft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Nix packaging of Syft is &lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/admin/syft/default.nix&#34;&gt;community maintained&lt;/a&gt;. Syft is currently only in the &lt;a href=&#34;https://nixos.wiki/wiki/Nix_channels#The_official_channels&#34;&gt;unstable channel&lt;/a&gt; awaiting the &lt;code&gt;22.05&lt;/code&gt; release&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -i syft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or, just try it out in an ephemeral nix shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell -p syft&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;SBOM&lt;/h3&gt; &#xA;&lt;p&gt;To generate an SBOM for a container image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syft &amp;lt;image&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above output includes only software that is visible in the container (i.e., the squashed representation of the image). To include software from all image layers in the SBOM, regardless of its presence in the final image, provide &lt;code&gt;--scope all-layers&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syft &amp;lt;image&amp;gt; --scope all-layers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported sources&lt;/h2&gt; &#xA;&lt;p&gt;Syft can generate a SBOM from a variety of sources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# catalog a container image archive (from the result of `docker image save ...`, `podman save ...`, or `skopeo copy` commands)&#xA;syft path/to/image.tar&#xA;&#xA;# catalog a directory&#xA;syft path/to/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sources can be explicitly provided with a scheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker:yourrepo/yourimage:tag            use images from the Docker daemon&#xA;podman:yourrepo/yourimage:tag            use images from the Podman daemon&#xA;docker-archive:path/to/yourimage.tar     use a tarball from disk for archives created from &#34;docker save&#34;&#xA;oci-archive:path/to/yourimage.tar        use a tarball from disk for OCI archives (from Skopeo or otherwise)&#xA;oci-dir:path/to/yourimage                read directly from a path on disk for OCI layout directories (from Skopeo or otherwise)&#xA;singularity:path/to/yourimage.sif        read directly from a Singularity Image Format (SIF) container on disk&#xA;dir:path/to/yourproject                  read directly from a path on disk (any directory)&#xA;file:path/to/yourproject/file            read directly from a path on disk (any single file)&#xA;registry:yourrepo/yourimage:tag          pull image directly from a registry (no container runtime required)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Default Cataloger Configuration by scan type&lt;/h4&gt; &#xA;&lt;h5&gt;Image Scanning:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;alpmdb&lt;/li&gt; &#xA; &lt;li&gt;rpmdb&lt;/li&gt; &#xA; &lt;li&gt;dpkgdb&lt;/li&gt; &#xA; &lt;li&gt;apkdb&lt;/li&gt; &#xA; &lt;li&gt;portage&lt;/li&gt; &#xA; &lt;li&gt;ruby-gemspec&lt;/li&gt; &#xA; &lt;li&gt;python-package&lt;/li&gt; &#xA; &lt;li&gt;php-composer-installed Cataloger&lt;/li&gt; &#xA; &lt;li&gt;javascript-package&lt;/li&gt; &#xA; &lt;li&gt;java&lt;/li&gt; &#xA; &lt;li&gt;go-module-binary&lt;/li&gt; &#xA; &lt;li&gt;dotnet-deps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Directory Scanning:&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;alpmdb&lt;/li&gt; &#xA; &lt;li&gt;apkdb&lt;/li&gt; &#xA; &lt;li&gt;dpkgdb&lt;/li&gt; &#xA; &lt;li&gt;portage&lt;/li&gt; &#xA; &lt;li&gt;rpmdb&lt;/li&gt; &#xA; &lt;li&gt;ruby-gemfile&lt;/li&gt; &#xA; &lt;li&gt;python-index&lt;/li&gt; &#xA; &lt;li&gt;python-package&lt;/li&gt; &#xA; &lt;li&gt;php-composer-lock&lt;/li&gt; &#xA; &lt;li&gt;javascript-lock&lt;/li&gt; &#xA; &lt;li&gt;java&lt;/li&gt; &#xA; &lt;li&gt;java-pom&lt;/li&gt; &#xA; &lt;li&gt;go-module-binary&lt;/li&gt; &#xA; &lt;li&gt;go-mod-file&lt;/li&gt; &#xA; &lt;li&gt;rust-cargo-lock&lt;/li&gt; &#xA; &lt;li&gt;dartlang-lock&lt;/li&gt; &#xA; &lt;li&gt;dotnet-deps&lt;/li&gt; &#xA; &lt;li&gt;cocoapods&lt;/li&gt; &#xA; &lt;li&gt;conan&lt;/li&gt; &#xA; &lt;li&gt;hackage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Non Default:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;cargo-auditable-binary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Excluding file paths&lt;/h3&gt; &#xA;&lt;p&gt;Syft can exclude files and paths from being scanned within a source by using glob expressions with one or more &lt;code&gt;--exclude&lt;/code&gt; parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syft &amp;lt;source&amp;gt; --exclude &#39;./out/**/*.json&#39; --exclude /etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; in the case of &lt;em&gt;image scanning&lt;/em&gt;, since the entire filesystem is scanned it is possible to use absolute paths like &lt;code&gt;/etc&lt;/code&gt; or &lt;code&gt;/usr/**/*.txt&lt;/code&gt; whereas &lt;em&gt;directory scans&lt;/em&gt; exclude files &lt;em&gt;relative to the specified directory&lt;/em&gt;. For example: scanning &lt;code&gt;/usr/foo&lt;/code&gt; with &lt;code&gt;--exclude ./package.json&lt;/code&gt; would exclude &lt;code&gt;/usr/foo/package.json&lt;/code&gt; and &lt;code&gt;--exclude &#39;**/package.json&#39;&lt;/code&gt; would exclude all &lt;code&gt;package.json&lt;/code&gt; files under &lt;code&gt;/usr/foo&lt;/code&gt;. For &lt;em&gt;directory scans&lt;/em&gt;, it is required to begin path expressions with &lt;code&gt;./&lt;/code&gt;, &lt;code&gt;*/&lt;/code&gt;, or &lt;code&gt;**/&lt;/code&gt;, all of which will be resolved &lt;em&gt;relative to the specified scan directory&lt;/em&gt;. Keep in mind, your shell may attempt to expand wildcards, so put those parameters in single quotes, like: &lt;code&gt;&#39;**/*.json&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Output formats&lt;/h3&gt; &#xA;&lt;p&gt;The output format for Syft is configurable as well using the &lt;code&gt;-o&lt;/code&gt; (or &lt;code&gt;--output&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syft &amp;lt;image&amp;gt; -o &amp;lt;format&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where the &lt;code&gt;formats&lt;/code&gt; available are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: Use this to get as much information out of Syft as possible!&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: A row-oriented, human-and-machine-friendly output.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cyclonedx-xml&lt;/code&gt;: A XML report conforming to the &lt;a href=&#34;https://cyclonedx.org/specification/overview/&#34;&gt;CycloneDX 1.4 specification&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cyclonedx-json&lt;/code&gt;: A JSON report conforming to the &lt;a href=&#34;https://cyclonedx.org/specification/overview/&#34;&gt;CycloneDX 1.4 specification&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spdx-tag-value&lt;/code&gt;: A tag-value formatted report conforming to the &lt;a href=&#34;https://spdx.github.io/spdx-spec/&#34;&gt;SPDX 2.2 specification&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spdx-json&lt;/code&gt;: A JSON report conforming to the &lt;a href=&#34;https://github.com/spdx/spdx-spec/raw/v2.2/schemas/spdx-schema.json&#34;&gt;SPDX 2.2 JSON Schema&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github&lt;/code&gt;: A JSON report conforming to GitHub&#39;s dependency snapshot format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;table&lt;/code&gt;: A columnar summary (default).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;template&lt;/code&gt;: Lets the user specify the output format. See &lt;a href=&#34;https://raw.githubusercontent.com/anchore/syft/main/#using-templates&#34;&gt;&#34;Using templates&#34;&lt;/a&gt; below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using templates&lt;/h2&gt; &#xA;&lt;p&gt;Syft lets you define custom output formats, using &lt;a href=&#34;https://pkg.go.dev/text/template&#34;&gt;Go templates&lt;/a&gt;. Here&#39;s how it works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Define your format as a Go template, and save this template as a file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set the output format to &#34;template&#34; (&lt;code&gt;-o template&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Specify the path to the template file (&lt;code&gt;-t ./path/to/custom.template&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Syft&#39;s template processing uses the same data models as the &lt;code&gt;json&lt;/code&gt; output format — so if you&#39;re wondering what data is available as you author a template, you can use the output from &lt;code&gt;syft &amp;lt;image&amp;gt; -o json&lt;/code&gt; as a reference.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; You could make Syft output data in CSV format by writing a Go template that renders CSV data and then running &lt;code&gt;syft &amp;lt;image&amp;gt; -o template -t ~/path/to/csv.tmpl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what the &lt;code&gt;csv.tmpl&lt;/code&gt; file might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gotemplate&#34;&gt;&#34;Package&#34;,&#34;Version Installed&#34;,&#34;Found by&#34;&#xA;{{- range .Artifacts}}&#xA;&#34;{{.Name}}&#34;,&#34;{{.Version}}&#34;,&#34;{{.FoundBy}}&#34;&#xA;{{- end}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which would produce output like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&#34;Package&#34;,&#34;Version Installed&#34;,&#34;Found by&#34;&#xA;&#34;alpine-baselayout&#34;,&#34;3.2.0-r20&#34;,&#34;apkdb-cataloger&#34;&#xA;&#34;alpine-baselayout-data&#34;,&#34;3.2.0-r20&#34;,&#34;apkdb-cataloger&#34;&#xA;&#34;alpine-keys&#34;,&#34;2.4-r1&#34;,&#34;apkdb-cataloger&#34;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Syft also includes a vast array of utility templating functions from &lt;a href=&#34;http://masterminds.github.io/sprig/&#34;&gt;sprig&lt;/a&gt; apart from the default Golang &lt;a href=&#34;https://pkg.go.dev/text/template#hdr-Functions&#34;&gt;text/template&lt;/a&gt; to allow users to customize the output format.&lt;/p&gt; &#xA;&lt;h2&gt;Multiple outputs&lt;/h2&gt; &#xA;&lt;p&gt;Syft can also output &lt;em&gt;multiple&lt;/em&gt; files in differing formats by appending &lt;code&gt;=&amp;lt;file&amp;gt;&lt;/code&gt; to the option, for example to output Syft JSON and SPDX JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;syft &amp;lt;image&amp;gt; -o json=sbom.syft.json -o spdx-json=sbom.spdx.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Private Registry Authentication&lt;/h2&gt; &#xA;&lt;h3&gt;Local Docker Credentials&lt;/h3&gt; &#xA;&lt;p&gt;When a container runtime is not present, Syft can still utilize credentials configured in common credential sources (such as &lt;code&gt;~/.docker/config.json&lt;/code&gt;). It will pull images from private registries using these credentials. The config file is where your credentials are stored when authenticating with private registries via some command like &lt;code&gt;docker login&lt;/code&gt;. For more information see the &lt;code&gt;go-containerregistry&lt;/code&gt; &lt;a href=&#34;https://github.com/google/go-containerregistry/tree/main/pkg/authn&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example &lt;code&gt;config.json&lt;/code&gt; looks something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;auths&#34;: {&#xA;&#x9;&#x9;&#34;registry.example.com&#34;: {&#xA;&#x9;&#x9;&#x9;&#34;username&#34;: &#34;AzureDiamond&#34;,&#xA;&#x9;&#x9;&#x9;&#34;password&#34;: &#34;hunter2&#34;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run the following command as an example. It details the mount/environment configuration a container needs to access a private registry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v ./config.json:/config/config.json -e &#34;DOCKER_CONFIG=/config&#34; anchore/syft:latest  &amp;lt;private_image&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Credentials in Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a simple workflow to mount this config file as a secret into a container on Kubernetes.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a secret. The value of &lt;code&gt;config.json&lt;/code&gt; is important. It refers to the specification detailed &lt;a href=&#34;https://github.com/google/go-containerregistry/tree/main/pkg/authn#the-config-file&#34;&gt;here&lt;/a&gt;. Below this section is the &lt;code&gt;secret.yaml&lt;/code&gt; file that the pod configuration will consume as a volume. The key &lt;code&gt;config.json&lt;/code&gt; is important. It will end up being the name of the file when mounted into the pod.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# secret.yaml&#xA;&#xA;apiVersion: v1&#xA;kind: Secret&#xA;metadata:&#xA;  name: registry-config&#xA;  namespace: syft&#xA;data:&#xA;  config.json: &amp;lt;base64 encoded config.json&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;kubectl apply -f secret.yaml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create your pod running syft. The env &lt;code&gt;DOCKER_CONFIG&lt;/code&gt; is important because it advertises where to look for the credential file. In the below example, setting &lt;code&gt;DOCKER_CONFIG=/config&lt;/code&gt; informs syft that credentials can be found at &lt;code&gt;/config/config.json&lt;/code&gt;. This is why we used &lt;code&gt;config.json&lt;/code&gt; as the key for our secret. When mounted into containers the secrets&#39; key is used as the filename. The &lt;code&gt;volumeMounts&lt;/code&gt; section mounts our secret to &lt;code&gt;/config&lt;/code&gt;. The &lt;code&gt;volumes&lt;/code&gt; section names our volume and leverages the secret we created in step one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# pod.yaml&#xA;&#xA;apiVersion: v1&#xA;kind: Pod&#xA;metadata:&#xA;  name: syft-k8s-usage&#xA;spec:&#xA;  containers:&#xA;    - image: anchore/syft:latest&#xA;      name: syft-private-registry-demo&#xA;      env:&#xA;        - name: DOCKER_CONFIG&#xA;          value: /config&#xA;      volumeMounts:&#xA;      - mountPath: /config&#xA;        name: registry-config&#xA;        readOnly: true&#xA;      args:&#xA;        - &amp;lt;private_image&amp;gt;&#xA;  volumes:&#xA;  - name: registry-config&#xA;    secret:&#xA;      secretName: registry-config&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;kubectl apply -f pod.yaml&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The user can now run &lt;code&gt;kubectl logs syft-private-registry-demo&lt;/code&gt;. The logs should show the Syft analysis for the &lt;code&gt;&amp;lt;private_image&amp;gt;&lt;/code&gt; provided in the pod configuration.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Using the above information, users should be able to configure private registry access without having to do so in the &lt;code&gt;grype&lt;/code&gt; or &lt;code&gt;syft&lt;/code&gt; configuration files. They will also not be dependent on a Docker daemon, (or some other runtime software) for registry configuration and access.&lt;/p&gt; &#xA;&lt;h2&gt;Format conversion (experimental)&lt;/h2&gt; &#xA;&lt;p&gt;The ability to convert existing SBOMs means you can create SBOMs in different formats quickly, without the need to regenerate the SBOM from scratch, which may take significantly more time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syft convert &amp;lt;ORIGINAL-SBOM-FILE&amp;gt; -o &amp;lt;NEW-SBOM-FORMAT&amp;gt;[=&amp;lt;NEW-SBOM-FILE&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature is experimental and data might be lost when converting formats. Packages are the main SBOM component easily transferable across formats, whereas files and relationships, as well as other information Syft doesn&#39;t support, are more likely to be lost.&lt;/p&gt; &#xA;&lt;p&gt;We support formats with wide community usage AND good encode/decode support by Syft. The supported formats are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Syft JSON&lt;/li&gt; &#xA; &lt;li&gt;SPDX 2.2 JSON&lt;/li&gt; &#xA; &lt;li&gt;SPDX 2.2 tag-value&lt;/li&gt; &#xA; &lt;li&gt;CycloneDX 1.4 JSON&lt;/li&gt; &#xA; &lt;li&gt;CycloneDX 1.4 XML&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Conversion example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;syft alpine:latest -o syft-json=sbom.syft.json # generate a syft SBOM&#xA;syft convert sbom.syft.json -o cyclonedx-json=sbom.cdx.json  # convert it to CycloneDX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Attestation (experimental)&lt;/h2&gt; &#xA;&lt;h3&gt;Keyless support&lt;/h3&gt; &#xA;&lt;p&gt;Syft supports generating attestations using cosign&#39;s &lt;a href=&#34;https://github.com/sigstore/cosign/raw/main/KEYLESS.md&#34;&gt;keyless&lt;/a&gt; signatures.&lt;/p&gt; &#xA;&lt;p&gt;To use this feature with a format like CycloneDX json simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syft attest --output cyclonedx-json &amp;lt;IMAGE WITH OCI WRITE ACCESS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will open a web browser and allow the user to authenticate their OIDC identity as the root of trust for the attestation (Github, Google, Microsoft).&lt;/p&gt; &#xA;&lt;p&gt;After authenticating, Syft will upload the attestation to the OCI registry specified by the image that the user has write access to.&lt;/p&gt; &#xA;&lt;p&gt;You will need to make sure your credentials are configured for the OCI registry you are uploading to so that the attestation can write successfully.&lt;/p&gt; &#xA;&lt;p&gt;Users can then verify the attestation(or any image with attestations) by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;COSIGN_EXPERIMENTAL=1 cosign verify-attestation &amp;lt;IMAGE_WITH_ATTESTATIONS&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users should see that the uploaded attestation claims are validated, the claims exist within the transparency log, and certificates on the attestations were verified against &lt;a href=&#34;https://github.com/SigStore/fulcio&#34;&gt;fulcio&lt;/a&gt;. There will also be a printout of the certificates subject &lt;code&gt;&amp;lt;user identity&amp;gt;&lt;/code&gt; and the certificate issuer URL: &lt;code&gt;&amp;lt;provider of user identity (Github, Google, Microsoft)&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Certificate subject:  test.email@testdomain.com&#xA;Certificate issuer URL:  https://accounts.google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Local private key support&lt;/h4&gt; &#xA;&lt;p&gt;To generate an SBOM attestation for a container image using a local private key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syft attest --output [FORMAT] --key [KEY] [SOURCE] [flags]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above output is in the form of the &lt;a href=&#34;https://github.com/secure-systems-lab/dsse/raw/master/envelope.md#dsse-envelope&#34;&gt;DSSE envelope&lt;/a&gt;. The payload is a base64 encoded &lt;code&gt;in-toto&lt;/code&gt; statement with the generated SBOM as the predicate. For details on workflows using this command see &lt;a href=&#34;https://raw.githubusercontent.com/anchore/syft/main/#adding-an-sbom-to-an-image-as-an-attestation-using-syft&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configuration search paths:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.syft.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.syft/config.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.syft.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;XDG_CONFIG_HOME&amp;gt;/syft/config.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Configuration options (example values are the default):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# the output format(s) of the SBOM report (options: table, text, json, spdx, ...)&#xA;# same as -o, --output, and SYFT_OUTPUT env var&#xA;# to specify multiple output files in differing formats, use a list:&#xA;# output:&#xA;#   - &#34;json=&amp;lt;syft-json-output-file&amp;gt;&#34;&#xA;#   - &#34;spdx-json=&amp;lt;spdx-json-output-file&amp;gt;&#34;&#xA;output: &#34;table&#34;&#xA;&#xA;# suppress all output (except for the SBOM report)&#xA;# same as -q ; SYFT_QUIET env var&#xA;quiet: false&#xA;&#xA;# same as --file; write output report to a file (default is to write to stdout)&#xA;file: &#34;&#34;&#xA;&#xA;# enable/disable checking for application updates on startup&#xA;# same as SYFT_CHECK_FOR_APP_UPDATE env var&#xA;check-for-app-update: true&#xA;&#xA;# a list of globs to exclude from scanning. same as --exclude ; for example:&#xA;# exclude:&#xA;#   - &#34;/etc/**&#34;&#xA;#   - &#34;./out/**/*.json&#34;&#xA;exclude: []&#xA;&#xA;# os and/or architecture to use when referencing container images (e.g. &#34;windows/armv6&#34; or &#34;arm64&#34;)&#xA;# same as --platform; SYFT_PLATFORM env var&#xA;platform: &#34;&#34;&#xA;&#xA;# set the list of package catalogers to use when generating the SBOM&#xA;# default = empty (cataloger set determined automatically by the source type [image or file/directory])&#xA;# catalogers:&#xA;#   - ruby-gemfile&#xA;#   - ruby-gemspec&#xA;#   - python-index&#xA;#   - python-package&#xA;#   - javascript-lock&#xA;#   - javascript-package&#xA;#   - php-composer-installed&#xA;#   - php-composer-lock&#xA;#   - alpmdb&#xA;#   - dpkgdb&#xA;#   - rpmdb&#xA;#   - java&#xA;#   - apkdb&#xA;#   - go-module-binary&#xA;#   - go-mod-file&#xA;#   - dartlang-lock&#xA;#   - rust&#xA;#   - dotnet-deps&#xA;# rust-audit-binary scans Rust binaries built with https://github.com/Shnatsel/rust-audit&#xA;#   - rust-audit-binary&#xA;catalogers:&#xA;&#xA;# cataloging packages is exposed through the packages and power-user subcommands&#xA;package:&#xA;&#xA;  # search within archives that do contain a file index to search against (zip)&#xA;  # note: for now this only applies to the java package cataloger&#xA;  # SYFT_PACKAGE_SEARCH_INDEXED_ARCHIVES env var&#xA;  search-indexed-archives: true&#xA;&#xA;  # search within archives that do not contain a file index to search against (tar, tar.gz, tar.bz2, etc)&#xA;  # note: enabling this may result in a performance impact since all discovered compressed tars will be decompressed&#xA;  # note: for now this only applies to the java package cataloger&#xA;  # SYFT_PACKAGE_SEARCH_UNINDEXED_ARCHIVES env var&#xA;  search-unindexed-archives: false&#xA;&#xA;  cataloger:&#xA;    # enable/disable cataloging of packages&#xA;    # SYFT_PACKAGE_CATALOGER_ENABLED env var&#xA;    enabled: true&#xA;&#xA;    # the search space to look for packages (options: all-layers, squashed)&#xA;    # same as -s ; SYFT_PACKAGE_CATALOGER_SCOPE env var&#xA;    scope: &#34;squashed&#34;&#xA;&#xA;# cataloging file classifications is exposed through the power-user subcommand&#xA;file-classification:&#xA;  cataloger:&#xA;    # enable/disable cataloging of file classifications&#xA;    # SYFT_FILE_CLASSIFICATION_CATALOGER_ENABLED env var&#xA;    enabled: true&#xA;&#xA;    # the search space to look for file classifications (options: all-layers, squashed)&#xA;    # SYFT_FILE_CLASSIFICATION_CATALOGER_SCOPE env var&#xA;    scope: &#34;squashed&#34;&#xA;&#xA;# cataloging file contents is exposed through the power-user subcommand&#xA;file-contents:&#xA;  cataloger:&#xA;    # enable/disable cataloging of secrets&#xA;    # SYFT_FILE_CONTENTS_CATALOGER_ENABLED env var&#xA;    enabled: true&#xA;&#xA;    # the search space to look for secrets (options: all-layers, squashed)&#xA;    # SYFT_FILE_CONTENTS_CATALOGER_SCOPE env var&#xA;    scope: &#34;squashed&#34;&#xA;&#xA;  # skip searching a file entirely if it is above the given size (default = 1MB; unit = bytes)&#xA;  # SYFT_FILE_CONTENTS_SKIP_FILES_ABOVE_SIZE env var&#xA;  skip-files-above-size: 1048576&#xA;&#xA;  # file globs for the cataloger to match on&#xA;  # SYFT_FILE_CONTENTS_GLOBS env var&#xA;  globs: []&#xA;&#xA;# cataloging file metadata is exposed through the power-user subcommand&#xA;file-metadata:&#xA;  cataloger:&#xA;    # enable/disable cataloging of file metadata&#xA;    # SYFT_FILE_METADATA_CATALOGER_ENABLED env var&#xA;    enabled: true&#xA;&#xA;    # the search space to look for file metadata (options: all-layers, squashed)&#xA;    # SYFT_FILE_METADATA_CATALOGER_SCOPE env var&#xA;    scope: &#34;squashed&#34;&#xA;&#xA;  # the file digest algorithms to use when cataloging files (options: &#34;sha256&#34;, &#34;md5&#34;, &#34;sha1&#34;)&#xA;  # SYFT_FILE_METADATA_DIGESTS env var&#xA;  digests: [&#34;sha256&#34;]&#xA;&#xA;# cataloging secrets is exposed through the power-user subcommand&#xA;secrets:&#xA;  cataloger:&#xA;    # enable/disable cataloging of secrets&#xA;    # SYFT_SECRETS_CATALOGER_ENABLED env var&#xA;    enabled: true&#xA;&#xA;    # the search space to look for secrets (options: all-layers, squashed)&#xA;    # SYFT_SECRETS_CATALOGER_SCOPE env var&#xA;    scope: &#34;all-layers&#34;&#xA;&#xA;  # show extracted secret values in the final JSON report&#xA;  # SYFT_SECRETS_REVEAL_VALUES env var&#xA;  reveal-values: false&#xA;&#xA;  # skip searching a file entirely if it is above the given size (default = 1MB; unit = bytes)&#xA;  # SYFT_SECRETS_SKIP_FILES_ABOVE_SIZE env var&#xA;  skip-files-above-size: 1048576&#xA;&#xA;  # name-regex pairs to consider when searching files for secrets. Note: the regex must match single line patterns&#xA;  # but may also have OPTIONAL multiline capture groups. Regexes with a named capture group of &#34;value&#34; will&#xA;  # use the entire regex to match, but the secret value will be assumed to be entirely contained within the&#xA;  # &#34;value&#34; named capture group.&#xA;  additional-patterns: {}&#xA;&#xA;  # names to exclude from the secrets search, valid values are: &#34;aws-access-key&#34;, &#34;aws-secret-key&#34;, &#34;pem-private-key&#34;,&#xA;  # &#34;docker-config-auth&#34;, and &#34;generic-api-key&#34;. Note: this does not consider any names introduced in the&#xA;  # &#34;secrets.additional-patterns&#34; config option.&#xA;  # SYFT_SECRETS_EXCLUDE_PATTERN_NAMES env var&#xA;  exclude-pattern-names: []&#xA;&#xA;# options when pulling directly from a registry via the &#34;registry:&#34; scheme&#xA;registry:&#xA;  # skip TLS verification when communicating with the registry&#xA;  # SYFT_REGISTRY_INSECURE_SKIP_TLS_VERIFY env var&#xA;  insecure-skip-tls-verify: false&#xA;  # use http instead of https when connecting to the registry&#xA;  # SYFT_REGISTRY_INSECURE_USE_HTTP env var&#xA;  insecure-use-http: false&#xA;&#xA;  # credentials for specific registries&#xA;  auth:&#xA;      # the URL to the registry (e.g. &#34;docker.io&#34;, &#34;localhost:5000&#34;, etc.)&#xA;      # SYFT_REGISTRY_AUTH_AUTHORITY env var&#xA;    - authority: &#34;&#34;&#xA;      # SYFT_REGISTRY_AUTH_USERNAME env var&#xA;      username: &#34;&#34;&#xA;      # SYFT_REGISTRY_AUTH_PASSWORD env var&#xA;      password: &#34;&#34;&#xA;      # note: token and username/password are mutually exclusive&#xA;      # SYFT_REGISTRY_AUTH_TOKEN env var&#xA;      token: &#34;&#34;&#xA;      # - ... # note, more credentials can be provided via config file only&#xA;&#xA;# generate an attested SBOM&#xA;attest:&#xA;  # path to the private key file to use for attestation&#xA;  # SYFT_ATTEST_KEY env var&#xA;  key: &#34;cosign.key&#34;&#xA;&#xA;  # password to decrypt to given private key&#xA;  # SYFT_ATTEST_PASSWORD env var, additionally responds to COSIGN_PASSWORD&#xA;  password: &#34;&#34;&#xA;&#xA;log:&#xA;  # use structured logging&#xA;  # same as SYFT_LOG_STRUCTURED env var&#xA;  structured: false&#xA;&#xA;  # the log level; note: detailed logging suppress the ETUI&#xA;  # same as SYFT_LOG_LEVEL env var&#xA;  level: &#34;error&#34;&#xA;&#xA;  # location to write the log file (default is not to have a log file)&#xA;  # same as SYFT_LOG_FILE env var&#xA;  file: &#34;&#34;&#xA;&#xA;# uploading package SBOM is exposed through the packages subcommand&#xA;anchore:&#xA;  # (feature-preview) the Anchore Enterprise Host or URL to upload results to (supported on Enterprise 3.0+)&#xA;  # same as -H ; SYFT_ANCHORE_HOST env var&#xA;  host: &#34;&#34;&#xA;&#xA;  # (feature-preview) the path after the host to the Anchore External API (supported on Enterprise 3.0+)&#xA;  # same as SYFT_ANCHORE_PATH env var&#xA;  path: &#34;&#34;&#xA;&#xA;  # (feature-preview) the username to authenticate against Anchore Enterprise (supported on Enterprise 3.0+)&#xA;  # same as -u ; SYFT_ANCHORE_USERNAME env var&#xA;  username: &#34;&#34;&#xA;&#xA;  # (feature-preview) the password to authenticate against Anchore Enterprise (supported on Enterprise 3.0+)&#xA;  # same as -p ; SYFT_ANCHORE_PASSWORD env var&#xA;  password: &#34;&#34;&#xA;&#xA;  # (feature-preview) path to dockerfile to be uploaded with the syft results to Anchore Enterprise (supported on Enterprise 3.0+)&#xA;  # same as -d ; SYFT_ANCHORE_DOCKERFILE env var&#xA;  dockerfile: &#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding an SBOM to an image as an attestation using Syft&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;syft attest --output [FORMAT] --key [KEY] [SOURCE] [flags]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;SBOMs themselves can serve as input to different analysis tools. &lt;a href=&#34;https://github.com/anchore/grype&#34;&gt;Grype&lt;/a&gt;, a vulnerability scanner CLI tool from Anchore, is one such tool. Publishers of container images can use attestations to enable their consumers to trust Syft-generated SBOM descriptions of those container images. To create and provide these attestations, image publishers can run &lt;code&gt;syft attest&lt;/code&gt; in conjunction with the &lt;a href=&#34;https://github.com/sigstore/cosign&#34;&gt;cosign&lt;/a&gt; tool to attach SBOM attestations to their images.&lt;/p&gt; &#xA;&lt;h4&gt;Example attestation&lt;/h4&gt; &#xA;&lt;p&gt;Note for the following example replace &lt;code&gt;docker.io/image:latest&lt;/code&gt; with an image you own. You should also have push access to its remote reference. Replace &lt;code&gt;$MY_PRIVATE_KEY&lt;/code&gt; with a private key you own or have generated with cosign.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;syft attest --key $MY_PRIVATE_KEY docker.io/image:latest &amp;gt; image_latest_sbom_attestation.json&#xA;cosign attach attestation --attestation image_latest_sbom_attestation.json docker.io/image:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify the new attestation exists on your image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cosign verify-attestation -key $MY_PUBLIC_KEY docker.io/image:latest | jq &#39;.payload | @base64d | .payload | fromjson | .predicate&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see this output along with the attached SBOM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Verification for docker.io/image:latest --&#xA;The following checks were performed on each of these signatures:&#xA;  - The cosign claims were validated&#xA;  - The signatures were verified against the specified public key&#xA;  - Any certificates were verified against the Fulcio roots.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Consumers of your image can now trust that the SBOM associated with your image is correct and from a trusted source.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rook/rook</title>
    <updated>2022-08-12T01:41:11Z</updated>
    <id>tag:github.com,2022-08-12:/rook/rook</id>
    <link href="https://github.com/rook/rook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Storage Orchestration for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;img alt=&#34;Rook&#34; src=&#34;https://raw.githubusercontent.com/rook/rook/master/Documentation/media/logo.svg?sanitize=true&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cncf.io/projects&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/cncf%20status-graduated-blue.svg?sanitize=true&#34; alt=&#34;CNCF Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rook/rook/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/rook/rook/all.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/u/rook&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/rook/ceph&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/rook/rook&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/rook/rook&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1599&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/1599/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rook/rook/actions/workflows/synk.yaml&#34;&gt;&lt;img src=&#34;https://github.com/rook/rook/actions/workflows/synk.yaml/badge.svg?sanitize=true&#34; alt=&#34;Security scanning&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.rook.io&#34;&gt;&lt;img src=&#34;https://slack.rook.io/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=rook_io&amp;amp;user_id=788180534543339520&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/rook_io.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What is Rook?&lt;/h1&gt; &#xA;&lt;p&gt;Rook is an open source &lt;strong&gt;cloud-native storage orchestrator&lt;/strong&gt; for Kubernetes, providing the platform, framework, and support for a diverse set of storage solutions to natively integrate with cloud-native environments.&lt;/p&gt; &#xA;&lt;p&gt;Rook turns storage software into self-managing, self-scaling, and self-healing storage services. It does this by automating deployment, bootstrapping, configuration, provisioning, scaling, upgrading, migration, disaster recovery, monitoring, and resource management. Rook uses the facilities provided by the underlying cloud-native container management, scheduling and orchestration platform to perform its duties.&lt;/p&gt; &#xA;&lt;p&gt;Rook integrates deeply into cloud native environments leveraging extension points and providing a seamless experience for scheduling, lifecycle management, resource management, security, monitoring, and user experience.&lt;/p&gt; &#xA;&lt;p&gt;For more details about the storage solutions currently supported by Rook, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/rook/rook/master/#project-status&#34;&gt;project status section&lt;/a&gt; below. We plan to continue adding support for other storage systems and environments based on community demand and engagement in future releases. See our &lt;a href=&#34;https://raw.githubusercontent.com/rook/rook/master/ROADMAP.md&#34;&gt;roadmap&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Rook is hosted by the &lt;a href=&#34;https://cncf.io&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt; (CNCF) as a &lt;a href=&#34;https://www.cncf.io/announcements/2020/10/07/cloud-native-computing-foundation-announces-rook-graduation/&#34;&gt;graduated&lt;/a&gt; level project. If you are a company that wants to help shape the evolution of technologies that are container-packaged, dynamically-scheduled and microservices-oriented, consider joining the CNCF. For details about who&#39;s involved and how Rook plays a role, read the CNCF &lt;a href=&#34;https://www.cncf.io/blog/2018/01/29/cncf-host-rook-project-cloud-native-storage-capabilities&#34;&gt;announcement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started and Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For installation, deployment, and administration, see our &lt;a href=&#34;https://rook.github.io/docs/rook/latest&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions. See &lt;a href=&#34;https://raw.githubusercontent.com/rook/rook/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Report a Bug&lt;/h2&gt; &#xA;&lt;p&gt;For filing bugs, suggesting improvements, or requesting new features, please open an &lt;a href=&#34;https://github.com/rook/rook/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting Security Vulnerabilities&lt;/h3&gt; &#xA;&lt;p&gt;If you find a vulnerability or a potential vulnerability in Rook please let us know immediately at &lt;a href=&#34;mailto:cncf-rook-security@lists.cncf.io&#34;&gt;cncf-rook-security@lists.cncf.io&lt;/a&gt;. We&#39;ll send a confirmation email to acknowledge your report, and we&#39;ll send an additional email when we&#39;ve identified the issues positively or negatively.&lt;/p&gt; &#xA;&lt;p&gt;For further details, please see the complete &lt;a href=&#34;https://raw.githubusercontent.com/rook/rook/master/SECURITY.md&#34;&gt;security release process&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Please use the following to reach members of the community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Slack: Join our &lt;a href=&#34;https://slack.rook.io&#34;&gt;slack channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GitHub: Start a &lt;a href=&#34;https://github.com/rook/rook/discussions&#34;&gt;discussion&lt;/a&gt; or open an &lt;a href=&#34;https://github.com/rook/rook/issues&#34;&gt;issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/rook_io&#34;&gt;@rook_io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Security topics: &lt;a href=&#34;https://raw.githubusercontent.com/rook/rook/master/#reporting-security-vulnerabilities&#34;&gt;cncf-rook-security@lists.cncf.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community Meeting&lt;/h3&gt; &#xA;&lt;p&gt;A regular community meeting takes place every other &lt;a href=&#34;https://zoom.us/j/392602367?pwd=NU1laFZhTWF4MFd6cnRoYzVwbUlSUT09&#34;&gt;Tuesday at 9:00 AM PT (Pacific Time)&lt;/a&gt;. Convert to your &lt;a href=&#34;http://www.thetimezoneconverter.com/?t=9:00&amp;amp;tz=PT%20%28Pacific%20Time%29&#34;&gt;local timezone&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any changes to the meeting schedule will be added to the &lt;a href=&#34;https://docs.google.com/document/d/1exd8_IG6DkdvyA0eiTtL2z5K2Ra-y68VByUUgwP7I9A/edit?usp=sharing&#34;&gt;agenda doc&lt;/a&gt; and posted to &lt;a href=&#34;https://rook-io.slack.com/messages/C76LLCEE7/&#34;&gt;Slack #announcements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Anyone who wants to discuss the direction of the project, design and implementation reviews, or general questions with the broader community is welcome and encouraged to join.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Meeting link: &lt;a href=&#34;https://zoom.us/j/392602367?pwd=NU1laFZhTWF4MFd6cnRoYzVwbUlSUT09&#34;&gt;https://zoom.us/j/392602367?pwd=NU1laFZhTWF4MFd6cnRoYzVwbUlSUT09&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1exd8_IG6DkdvyA0eiTtL2z5K2Ra-y68VByUUgwP7I9A/edit?usp=sharing&#34;&gt;Current agenda and past meeting notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLP0uDo-ZFnQP6NAgJWAtR9jaRcgqyQKVy&#34;&gt;Past meeting recordings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;The status of each storage provider supported by Rook can be found in the table below. Each API group is assigned its own individual status to reflect their varying maturity and stability. More details about API versioning and status in Kubernetes can be found on the Kubernetes &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/kubernetes-api/#api-versioning&#34;&gt;API versioning page&lt;/a&gt;, but the key difference between the statuses are summarized below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alpha:&lt;/strong&gt; The API may change in incompatible ways in a later software release without notice, recommended for use only in short-lived testing clusters, due to increased risk of bugs and lack of long-term support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Beta:&lt;/strong&gt; Support for the overall features will not be dropped, though details may change. Support for upgrading or migrating between versions will be provided, either through automation or manual steps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stable:&lt;/strong&gt; Features will appear in released software for many subsequent versions and support for upgrading between versions will be provided with software automation in the vast majority of scenarios.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Details&lt;/th&gt; &#xA;   &lt;th&gt;API Group&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ceph&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://ceph.com/&#34;&gt;Ceph&lt;/a&gt; is a distributed storage system that provides file, block and object storage and is deployed in large scale production clusters.&lt;/td&gt; &#xA;   &lt;td&gt;ceph.rook.io/v1&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This repo is for the Ceph storage provider. The &lt;a href=&#34;https://github.com/rook/cassandra&#34;&gt;Cassandra&lt;/a&gt; and &lt;a href=&#34;https://github.com/rook/nfs&#34;&gt;NFS&lt;/a&gt; storage providers moved to a separate repo to allow for each &lt;a href=&#34;https://rook.github.io/docs/rook/latest/storage-providers.html&#34;&gt;storage provider&lt;/a&gt; to have an independent development and release schedule.&lt;/p&gt; &#xA;&lt;h3&gt;Official Releases&lt;/h3&gt; &#xA;&lt;p&gt;Official releases of Rook can be found on the &lt;a href=&#34;https://github.com/rook/rook/releases&#34;&gt;releases page&lt;/a&gt;. Please note that it is &lt;strong&gt;strongly recommended&lt;/strong&gt; that you use &lt;a href=&#34;https://github.com/rook/rook/releases&#34;&gt;official releases&lt;/a&gt; of Rook, as unreleased versions from the master branch are subject to changes and incompatibilities that will not be supported in the official releases. Builds from the master branch can have functionality changed and even removed at any time without compatibility support and without prior notice.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Rook is under the Apache 2.0 license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Frook%2Frook?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Frook%2Frook.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>caddyserver/caddy</title>
    <updated>2022-08-12T01:41:11Z</updated>
    <id>tag:github.com,2022-08-12:/caddyserver/caddy</id>
    <link href="https://github.com/caddyserver/caddy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, multi-platform web server with automatic HTTPS&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://caddyserver.com&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1128849/36338535-05fb646a-136f-11e8-987b-e6901e717d5a.png&#34; alt=&#34;Caddy&#34; width=&#34;450&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;a &lt;a href=&#34;https://zerossl.com&#34;&gt;&lt;img src=&#34;https://caddyserver.com/resources/images/zerossl-logo.svg?sanitize=true&#34; height=&#34;28&#34; valign=&#34;middle&#34;&gt;&lt;/a&gt; project&lt;/h3&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Every site on HTTPS&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Caddy is an extensible server platform that uses TLS by default.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/caddyserver/caddy/actions?query=workflow%3ACross-Platform&#34;&gt;&lt;img src=&#34;https://github.com/caddyserver/caddy/workflows/Cross-Platform/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/caddyserver/caddy/v2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-reference-%23007d9c.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://twitter.com/caddyserver&#34; title=&#34;@caddyserver on Twitter&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@caddyserver-55acee.svg?sanitize=true&#34; alt=&#34;@caddyserver on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://caddy.community&#34; title=&#34;Caddy Forum&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/community-forum-ff69b4.svg?sanitize=true&#34; alt=&#34;Caddy Forum&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/caddyserver/caddy?badge&#34; title=&#34;Caddy on Sourcegraph&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/caddyserver/caddy/-/badge.svg?sanitize=true&#34; alt=&#34;Caddy on Sourcegraph&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cloudsmith.io/~caddy/repos/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/OSS%20hosting%20by-cloudsmith-blue?logo=cloudsmith&#34; alt=&#34;Cloudsmith&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/caddyserver/caddy/releases&#34;&gt;Releases&lt;/a&gt; · &lt;a href=&#34;https://caddyserver.com/docs/&#34;&gt;Documentation&lt;/a&gt; · &lt;a href=&#34;https://caddy.community&#34;&gt;Get Help&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Menu&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#build-from-source&#34;&gt;Build from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#for-development&#34;&gt;For development&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#with-version-information-andor-plugins&#34;&gt;With version information and/or plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#full-documentation&#34;&gt;Full documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#getting-help&#34;&gt;Getting help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/caddyserver/caddy/master/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Powered by&lt;/b&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/caddyserver/certmagic&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1128849/49704830-49d37200-fbd5-11e8-8385-767e0cd033c3.png&#34; alt=&#34;CertMagic&#34; width=&#34;250&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://caddyserver.com/v2&#34;&gt;Features&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy configuration&lt;/strong&gt; with the &lt;a href=&#34;https://caddyserver.com/docs/caddyfile&#34;&gt;Caddyfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful configuration&lt;/strong&gt; with its &lt;a href=&#34;https://caddyserver.com/docs/json/&#34;&gt;native JSON config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic configuration&lt;/strong&gt; with the &lt;a href=&#34;https://caddyserver.com/docs/api&#34;&gt;JSON API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://caddyserver.com/docs/config-adapters&#34;&gt;&lt;strong&gt;Config adapters&lt;/strong&gt;&lt;/a&gt; if you don&#39;t like JSON&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic HTTPS&lt;/strong&gt; by default &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://zerossl.com&#34;&gt;ZeroSSL&lt;/a&gt; and &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&#39;s Encrypt&lt;/a&gt; for public names&lt;/li&gt; &#xA;   &lt;li&gt;Fully-managed local CA for internal names &amp;amp; IPs&lt;/li&gt; &#xA;   &lt;li&gt;Can coordinate with other Caddy instances in a cluster&lt;/li&gt; &#xA;   &lt;li&gt;Multi-issuer fallback&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Stays up when other servers go down&lt;/strong&gt; due to TLS/OCSP/certificate-related issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Production-ready&lt;/strong&gt; after serving trillions of requests and managing millions of TLS certificates&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scales to tens of thousands of sites&lt;/strong&gt; ... and probably more&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HTTP/1.1, HTTP/2, and experimental HTTP/3&lt;/strong&gt; support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highly extensible&lt;/strong&gt; &lt;a href=&#34;https://caddyserver.com/docs/architecture&#34;&gt;modular architecture&lt;/a&gt; lets Caddy do anything without bloat&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Runs anywhere&lt;/strong&gt; with &lt;strong&gt;no external dependencies&lt;/strong&gt; (not even libc)&lt;/li&gt; &#xA; &lt;li&gt;Written in Go, a language with higher &lt;strong&gt;memory safety guarantees&lt;/strong&gt; than other servers&lt;/li&gt; &#xA; &lt;li&gt;Actually &lt;strong&gt;fun to use&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;So, so much more to &lt;a href=&#34;https://caddyserver.com/v2&#34;&gt;discover&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;The simplest, cross-platform way is to download from &lt;a href=&#34;https://github.com/caddyserver/caddy/releases&#34;&gt;GitHub Releases&lt;/a&gt; and place the executable file in your PATH.&lt;/p&gt; &#xA;&lt;p&gt;For other install options, see &lt;a href=&#34;https://caddyserver.com/docs/install&#34;&gt;https://caddyserver.com/docs/install&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build from source&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go 1.18 or newer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For development&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; These steps &lt;a href=&#34;https://github.com/golang/go/issues/29228&#34;&gt;will not embed proper version information&lt;/a&gt;. For that, please follow the instructions in the next section.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone &#34;https://github.com/caddyserver/caddy.git&#34;&#xA;$ cd caddy/cmd/caddy/&#xA;$ go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you run Caddy, it may try to bind to low ports unless otherwise specified in your config. If your OS requires elevated privileges for this, you will need to give your new binary permission to do so. On Linux, this can be done easily with: &lt;code&gt;sudo setcap cap_net_bind_service=+ep ./caddy&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to use &lt;code&gt;go run&lt;/code&gt; which only creates temporary binaries, you can still do this with the included &lt;code&gt;setcap.sh&lt;/code&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run -exec ./setcap.sh main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to type your password for &lt;code&gt;setcap&lt;/code&gt;, use &lt;code&gt;sudo visudo&lt;/code&gt; to edit your sudoers file and allow your user account to run that command without a password, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;username ALL=(ALL:ALL) NOPASSWD: /usr/sbin/setcap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;replacing &lt;code&gt;username&lt;/code&gt; with your actual username. Please be careful and only do this if you know what you are doing! We are only qualified to document how to use Caddy, not Go tooling or your computer, and we are providing these instructions for convenience only; please learn how to use your own computer at your own risk and make any needful adjustments.&lt;/p&gt; &#xA;&lt;h3&gt;With version information and/or plugins&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/caddyserver/xcaddy&#34;&gt;our builder tool, &lt;code&gt;xcaddy&lt;/code&gt;&lt;/a&gt;...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xcaddy build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...the following steps are automated:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new folder: &lt;code&gt;mkdir caddy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Change into it: &lt;code&gt;cd caddy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;a href=&#34;https://github.com/caddyserver/caddy/raw/master/cmd/caddy/main.go&#34;&gt;Caddy&#39;s main.go&lt;/a&gt; into the empty folder. Add imports for any custom plugins you want to add.&lt;/li&gt; &#xA; &lt;li&gt;Initialize a Go module: &lt;code&gt;go mod init caddy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Pin Caddy version: &lt;code&gt;go get github.com/caddyserver/caddy/v2@version&lt;/code&gt; replacing &lt;code&gt;version&lt;/code&gt; with a git tag, commit, or branch name.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) Add plugins by adding their import: &lt;code&gt;_ &#34;import/path/here&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile: &lt;code&gt;go build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://caddyserver.com/docs/&#34;&gt;Caddy website&lt;/a&gt; has documentation that includes tutorials, quick-start guides, reference, and more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We recommend that all users -- regardless of experience level -- do our &lt;a href=&#34;https://caddyserver.com/docs/getting-started&#34;&gt;Getting Started&lt;/a&gt; guide to become familiar with using Caddy.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve only got a minute, &lt;a href=&#34;https://caddyserver.com/docs/quick-starts&#34;&gt;the website has several quick-start tutorials&lt;/a&gt; to choose from! However, after finishing a quick-start tutorial, please read more documentation to understand how the software works. 🙂&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Caddy is most often used as an HTTPS server, but it is suitable for any long-running Go program. First and foremost, it is a platform to run Go applications. Caddy &#34;apps&#34; are just Go programs that are implemented as Caddy modules. Two apps -- &lt;code&gt;tls&lt;/code&gt; and &lt;code&gt;http&lt;/code&gt; -- ship standard with Caddy.&lt;/p&gt; &#xA;&lt;p&gt;Caddy apps instantly benefit from &lt;a href=&#34;https://caddyserver.com/docs/json/&#34;&gt;automated documentation&lt;/a&gt;, graceful on-line &lt;a href=&#34;https://caddyserver.com/docs/api&#34;&gt;config changes via API&lt;/a&gt;, and unification with other Caddy apps.&lt;/p&gt; &#xA;&lt;p&gt;Although &lt;a href=&#34;https://caddyserver.com/docs/json/&#34;&gt;JSON&lt;/a&gt; is Caddy&#39;s native config language, Caddy can accept input from &lt;a href=&#34;https://caddyserver.com/docs/config-adapters&#34;&gt;config adapters&lt;/a&gt; which can essentially convert any config format of your choice into JSON: Caddyfile, JSON 5, YAML, TOML, NGINX config, and more.&lt;/p&gt; &#xA;&lt;p&gt;The primary way to configure Caddy is through &lt;a href=&#34;https://caddyserver.com/docs/api&#34;&gt;its API&lt;/a&gt;, but if you prefer config files, the &lt;a href=&#34;https://caddyserver.com/docs/command-line&#34;&gt;command-line interface&lt;/a&gt; supports those too.&lt;/p&gt; &#xA;&lt;p&gt;Caddy exposes an unprecedented level of control compared to any web server in existence. In Caddy, you are usually setting the actual values of the initialized types in memory that power everything from your HTTP handlers and TLS handshakes to your storage medium. Caddy is also ridiculously extensible, with a powerful plugin system that makes vast improvements over other web servers.&lt;/p&gt; &#xA;&lt;p&gt;To wield the power of this design, you need to know how the config document is structured. Please see &lt;a href=&#34;https://caddyserver.com/docs/&#34;&gt;our documentation site&lt;/a&gt; for details about &lt;a href=&#34;https://caddyserver.com/docs/json/&#34;&gt;Caddy&#39;s config structure&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Nearly all of Caddy&#39;s configuration is contained in a single config document, rather than being scattered across CLI flags and env variables and a configuration file as with other web servers. This makes managing your server config more straightforward and reduces hidden variables/factors.&lt;/p&gt; &#xA;&lt;h2&gt;Full documentation&lt;/h2&gt; &#xA;&lt;p&gt;Our website has complete documentation:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://caddyserver.com/docs/&#34;&gt;https://caddyserver.com/docs/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The docs are also open source. You can contribute to them here: &lt;a href=&#34;https://github.com/caddyserver/website&#34;&gt;https://github.com/caddyserver/website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We &lt;strong&gt;strongly recommend&lt;/strong&gt; that all professionals or companies using Caddy get a support contract through &lt;a href=&#34;https://www.ardanlabs.com/my/contact-us?dd=caddy&#34;&gt;Ardan Labs&lt;/a&gt; before help is needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;a href=&#34;https://github.com/sponsors/mholt&#34;&gt;sponsorship&lt;/a&gt; goes a long way! If Caddy is benefitting your company, please consider a sponsorship! This not only helps fund full-time work to ensure the longevity of the project, it&#39;s also a great look for your company to your customers and potential customers!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Individuals can exchange help for free on our community forum at &lt;a href=&#34;https://caddy.community&#34;&gt;https://caddy.community&lt;/a&gt;. Remember that people give help out of their spare time and good will. The best way to get help is to give it first!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please use our &lt;a href=&#34;https://github.com/caddyserver/caddy/issues&#34;&gt;issue tracker&lt;/a&gt; only for bug reports and feature requests, i.e. actionable development items (support questions will usually be referred to the forums).&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Matthew Holt began developing Caddy in 2014 while studying computer science at Brigham Young University. (The name &#34;Caddy&#34; was chosen because this software helps with the tedious, mundane tasks of serving the Web, and is also a single place for multiple things to be organized together.) It soon became the first web server to use HTTPS automatically and by default, and now has hundreds of contributors and has served trillions of HTTPS requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The name &#34;Caddy&#34; is trademarked.&lt;/strong&gt; The name of the software is &#34;Caddy&#34;, not &#34;Caddy Server&#34; or &#34;CaddyServer&#34;. Please call it &#34;Caddy&#34; or, if you wish to clarify, &#34;the Caddy web server&#34;. Caddy is a registered trademark of Stack Holdings GmbH.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Project on Twitter: &lt;a href=&#34;https://twitter.com/caddyserver&#34;&gt;@caddyserver&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Author on Twitter: &lt;a href=&#34;https://twitter.com/mholt6&#34;&gt;@mholt6&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Caddy is a project of &lt;a href=&#34;https://zerossl.com&#34;&gt;ZeroSSL&lt;/a&gt;, a Stack Holdings company.&lt;/p&gt; &#xA;&lt;p&gt;Debian package repository hosting is graciously provided by &lt;a href=&#34;https://cloudsmith.com&#34;&gt;Cloudsmith&lt;/a&gt;. Cloudsmith is the only fully hosted, cloud-native, universal package management solution, that enables your organization to create, store and share packages in any format, to any place, with total confidence.&lt;/p&gt;</summary>
  </entry>
</feed>