<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-29T01:29:22Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Hoshinonyaruko/palworld-go</title>
    <updated>2024-01-29T01:29:22Z</updated>
    <id>tag:github.com,2024-01-29:/Hoshinonyaruko/palworld-go</id>
    <link href="https://github.com/Hoshinonyaruko/palworld-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pal World all-in-one webui for pc and mobile devices.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.github.com/hoshinonyaruko/palworld-go&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Hoshinonyaruko/palworld-go/main/pic/1.gif&#34; width=&#34;200&#34; height=&#34;200&#34; alt=&#34;palworld-go&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;palworld-go&lt;/h1&gt; &#xA; &lt;p&gt;&lt;em&gt;✨ 适用于palworld的跨平台服务端面板 ✨&lt;/em&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;✨ 使用go+quasar实现的palworld webui ✨&lt;/em&gt;&lt;/p&gt; &#xA; &lt;h2&gt;特别鸣谢+推荐&lt;/h2&gt; &#xA; &lt;p&gt;本项目的直接参考（linux版的palworld服务端守护脚本）&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://gist.github.com/Bluefissure/b0fcb05c024ee60cad4e23eb55463062&#34;&gt;https://gist.github.com/Bluefissure/b0fcb05c024ee60cad4e23eb55463062&lt;/a&gt; 本项目内置了该项目的编译后网页dist &lt;a href=&#34;https://github.com/Bluefissure/pal-conf&#34;&gt;https://github.com/Bluefissure/pal-conf&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;使用方法&lt;/h2&gt; &#xA; &lt;p&gt;本项目的webui特别对移动端设备进行优化，手机使用更轻松 （老版本iossafari 如果遇到按钮点不动刷新页面再点即可）&lt;/p&gt; &#xA; &lt;p&gt;webui可友善的可视化的修改帕鲁服务器，守护配置，内存配置，目前webui端口固定52000&lt;/p&gt; &#xA; &lt;p&gt;将可执行文件放置在&lt;/p&gt; &#xA; &lt;p&gt;\steamcmd\steamapps\common\PalServer\PalServer.exe&lt;/p&gt; &#xA; &lt;p&gt;同级目录&lt;/p&gt; &#xA; &lt;p&gt;运行palworld-go.exe 会自动进入webui&lt;/p&gt; &#xA; &lt;p&gt;webui默认地址:&lt;a href=&#34;http://127.0.0.1:52000&#34;&gt;http://127.0.0.1:52000&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;端口可在config.json修改，放通至公网可在公网访问&lt;/p&gt; &#xA; &lt;p&gt;控制台默认用户名 palgo 默认密码 useradmin&lt;/p&gt; &#xA; &lt;p&gt;用户名即帕鲁服务器名（serverName），可中文 密码即rcon密码（adminPassword） 纯英文&lt;/p&gt; &#xA; &lt;p&gt;图片介绍&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hoshinonyaruko/palworld-go/main/pic/1.png&#34; alt=&#34;内存清理和定时广播等设定&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hoshinonyaruko/palworld-go/main/pic/2.png&#34; alt=&#34;帕鲁服务器设定&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hoshinonyaruko/palworld-go/main/pic/3.png&#34; alt=&#34;直接按钮开关&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hoshinonyaruko/palworld-go/main/pic/4.png&#34; alt=&#34;可自动补全的rcon命令&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hoshinonyaruko/palworld-go/main/pic/5.png&#34; alt=&#34;bluefissure制作的sav修改页面&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Hoshinonyaruko/palworld-go/main/pic/6.png&#34; alt=&#34;服务器监控&#34;&gt;&lt;/p&gt; &#xA; &lt;h2&gt;兼容性&lt;/h2&gt; &#xA; &lt;p&gt;windows通过了测试，linux有待测试&lt;/p&gt; &#xA; &lt;h2&gt;场景支持&lt;/h2&gt; &#xA; &lt;p&gt;在手机上痛快的操作和管理服务器，当管理不再手忙脚乱。&lt;/p&gt; &#xA; &lt;p&gt;内存不足的时候，通过rcon通知服务器成员，然后重启服务器&lt;/p&gt; &#xA; &lt;p&gt;通过调用微软的rammap释放无用内存，并将有用内存转移至虚拟内存，实现一次释放50%+内存&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>gwuhaolin/lightsocks</title>
    <updated>2024-01-29T01:29:22Z</updated>
    <id>tag:github.com,2024-01-29:/gwuhaolin/lightsocks</id>
    <link href="https://github.com/gwuhaolin/lightsocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡️一个轻巧的网络混淆代理🌏&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/gwuhaolin/lightsocks&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/godoc-reference-5272B4.svg?style=flat-square&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;a href=&#34;https://github.com/gwuhaolin/lightsocks&#34;&gt;Lightsocks&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;一个轻量级网络混淆代理，基于 SOCKS5 协议，可用来代替 Shadowsocks。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;只专注于混淆，用最简单高效的混淆算法达到目的；&lt;/li&gt; &#xA; &lt;li&gt;不会放大传输流量，传输流量更少更快，占用资源更少（内存占用1M左右，CPU 占用 0.1% 左右）；&lt;/li&gt; &#xA; &lt;li&gt;纯 Golang 编写，跨平台，对Golang感兴趣？请看&lt;a href=&#34;http://go.wuhaolin.cn/&#34;&gt;Golang 中文学习资料汇总&lt;/a&gt;；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;想了解 Lightsocks 的实现原理？请阅读文章：&lt;a href=&#34;https://github.com/gwuhaolin/blog/issues/12&#34;&gt;你也能写个 Shadowsocks&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;下载&lt;/h2&gt; &#xA;&lt;p&gt;去 &lt;a href=&#34;https://github.com/gwuhaolin/lightsocks/releases&#34;&gt;releases&lt;/a&gt; 页下载最新的可执行文件，注意选择正确的操作系统和位数（Mac 系统内核为 darwin）。 解压后会看到2个可执行文件，分别是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;lightsocks-local&lt;/strong&gt;：用于运行在本地电脑的客户端，用于桥接本地浏览器和远程代理服务，传输前会混淆数据；&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lightsocks-server&lt;/strong&gt;：用于运行在代理服务器的客户端，会还原混淆数据；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;启动&lt;/h2&gt; &#xA;&lt;h3&gt;启动 lightsocks-server&lt;/h3&gt; &#xA;&lt;p&gt;在代理服务器下载好 lightsocks-server 后，执行命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./lightsocks-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;就可启动服务端，启动成功后会输出如下日志：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;服务监听地址 listen：&#xA;:12315&#xA;密码 password：&#xA;******&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;假如服务器的 IP 是 45.56.76.5，则以上日志的含义是指：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;服务监听在 &lt;code&gt;45.56.76.5:12315&lt;/code&gt;，监听端口12315是随机生成的；&lt;/li&gt; &#xA; &lt;li&gt;使用的密码是 &lt;code&gt;******&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;除此之外你还可以&lt;a href=&#34;https://cloud.docker.com/u/gwuhaolin/repository/docker/gwuhaolin/lightsocks&#34;&gt;通过 Docker 快速启动&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;启动 lightsocks-local&lt;/h3&gt; &#xA;&lt;p&gt;在本地电脑下载好 lightsocks-local 后，执行命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./lightsocks-local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;就可启动本地代理客户端，会看到如下日志：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2017/10/11 10:03:16 保存配置到文件 /Users/username/.lightsocks.json 成功&#xA;2017/10/11 10:03:16 lightsocks-client:master 启动成功 监听在 [::]:7448&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;这表明生成了一份配置文件到 &lt;code&gt;/Users/username/.lightsocks.json&lt;/code&gt;。 为了让客户端用指定的密码去连接服务器，需要给客户端传入参数，为此需要修改该配置文件为如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;remote&#34;: &#34;45.56.76.5:12315&#34;,&#xA;  &#34;password&#34;: &#34;******&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;重新启动 lightsocks-local 后，再使用监听在 &lt;code&gt;127.0.0.1:7448&lt;/code&gt; 的本地 SOCK5 服务就可以正常使用了。&lt;/p&gt; &#xA;&lt;p&gt;都启动成功后，可参考 &lt;a href=&#34;https://github.com/gwuhaolin/lightsocks/wiki/%E6%90%AD%E9%85%8D-Chrome-%E4%BD%BF%E7%94%A8&#34;&gt;搭配 Chrome 使用&lt;/a&gt; 配置你的 Chrome。&lt;/p&gt; &#xA;&lt;h4&gt;自启动&lt;/h4&gt; &#xA;&lt;h5&gt;macOS&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo vim /Library/LaunchDaemons/lightsocks.plist&#xA;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &#34;-//Apple//DTD PLIST 1.0//EN&#34; &#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&#34;&amp;gt;&#xA;&amp;lt;plist version=&#34;1.0&#34;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;    &amp;lt;key&amp;gt;KeepAlive&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;    &amp;lt;key&amp;gt;RunAtLoad&amp;lt;/key&amp;gt;&#xA;    &amp;lt;true/&amp;gt;&#xA;    &amp;lt;key&amp;gt;Label&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;lightsocks&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;ProgramArguments&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;/usr/local/bin/lightsocks-local&amp;lt;/string&amp;gt;&#xA;            &amp;lt;string&amp;gt;/Users/macOS-username/.lightsocks.json&amp;lt;/string&amp;gt;&#xA;    &amp;lt;/array&amp;gt;&#xA;   &amp;lt;key&amp;gt;StandardOutPath&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;/var/log/lightsocks.log&amp;lt;/string&amp;gt;&#xA;    &amp;lt;key&amp;gt;StandardErrorPath&amp;lt;/key&amp;gt;&#xA;    &amp;lt;string&amp;gt;/var/log/lightsocks.log&amp;lt;/string&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;启用开机自启动：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo launchctl load -w /Library/LaunchDaemons/lightsocks.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;关闭开机自启动：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo launchctl stop /Library/LaunchDaemons/lightsocks.plist&#xA;sudo launchctl unload -w /Library/LaunchDaemons/lightsocks.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;注意：&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lightsocks-local 和 lightsocks-server 的 password 必须一致才能正常正常使用，password 不要泄露。&lt;/li&gt; &#xA; &lt;li&gt;password 会自动生成，不要自己生成。两端的password要保持一致，一般采用拷贝 lightsocks-server 生成的密码到 lightsocks-local 使用的本地配置文件中。&lt;/li&gt; &#xA; &lt;li&gt;如果你想自定义保持配置文件的名称，可以通过 &lt;code&gt;lightsocks-local your-name.json&lt;/code&gt; 启动，这时配置文件会保存到 &lt;code&gt;~/your-name.json&lt;/code&gt; 中。&lt;/li&gt; &#xA; &lt;li&gt;启动后会把配置保存在 &lt;code&gt;~/.lightsocks.json&lt;/code&gt; 文件中，启动前会去 &lt;code&gt;~/.lightsocks.json&lt;/code&gt; 文件中读取配置，你可以在启动前修改&lt;code&gt;~/.lightsocks.json&lt;/code&gt; 文件来应用你需要的配置，格式如下：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;remote&#34;: &#34;45.56.76.5:7448&#34;,&#xA;  &#34;password&#34;: &#34;******&#34;,&#xA;  &#34;listen&#34;: &#34;127.0.0.1:7448&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;其它语言实现&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/linw1995/lightsocks-python&#34;&gt;lightsocks-python&lt;/a&gt;：Python语言 实现版本；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XanthusL/LightSocks-Android&#34;&gt;lightsocks-android&lt;/a&gt;：Android 实现版本；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrisyer/lightsocks-nodejs&#34;&gt;lightsocks-node&lt;/a&gt;：Node.js 实现版本；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LeeReindeer/lightsocks-c&#34;&gt;lightsocks-c&lt;/a&gt;：C语言 实现版本；&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maxlv7/LightSocks-cxx&#34;&gt;lightsocks-cxx&lt;/a&gt;: C++ 实现版本；&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>