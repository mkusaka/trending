<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-04T01:30:53Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ivoras/EncryptedNotepad2</title>
    <updated>2024-06-04T01:30:53Z</updated>
    <id>tag:github.com,2024-06-04:/ivoras/EncryptedNotepad2</id>
    <link href="https://github.com/ivoras/EncryptedNotepad2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Notepad-like simple text editor where files are saved (and later loaded) encrypted with AES-256.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Encrypted Notepad II&lt;/h1&gt; &#xA;&lt;p&gt;This is a spiritual successor to the &#34;Encrypted Notepad&#34; app &lt;a href=&#34;https://sourceforge.net/projects/enotes/&#34;&gt;previously developed on SourceForge&lt;/a&gt; by the same author. The goal is still the same: &lt;em&gt;&#34;Encrypted Notepad II&#34; does only one thing, but aims to do it perfectly - a Notepad-like simple text editor where files are saved (and later loaded) encrypted with industrial strength algorithms&lt;/em&gt;. No ads, no network connection required, no bloat, just run it. If you know how to use the Windows Notepad app, you know how to use this app. It&#39;s a Notepad clone where the file format is PGP&#39;s symmetrically encrypted ASCII-armoured (&lt;code&gt;.asc&lt;/code&gt;) data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ivoras/EncryptedNotepad2/master/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This app works on old-fashioned files - not internal databases, not proprietary storage, not even SQLite. There&#39;s nothing to import or export. Each document is its own file, saved in the encrypted OpenPGP ASCII-armoured format. That&#39;s it.&lt;/p&gt; &#xA;&lt;h1&gt;Current Status&lt;/h1&gt; &#xA;&lt;p&gt;Alpha version 0.3 - major features are done (de/encryption is complete), but there&#39;s space for improvement, especially in UX.&lt;/p&gt; &#xA;&lt;h1&gt;An Experiment in Sustainable Open Source&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Note from the author&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;I am an Open Source veteran. I&#39;ve put my code out there since before GitHub existed, and you can see my (early and embarrasing) work on SourceForge. All this time, I did it because I made something I want to share with the world, without expecting anything in return. But that isn&#39;t really sustainable. Software needs to be maintained. Bitrot is real. Operating systems get updated and move on, and once published, apps might not even run in a decade. That&#39;s what&#39;s happened with the original Encrypted Notepad.&lt;/p&gt; &#xA;&lt;p&gt;Encrypted Notepad II is my experiment in combining Open Source with a business model. The source code in its entirety is on GitHub, but the binaries are not. If you want to build them yourself, you are welcome to. If Linux distro maintainers want to include it, they are also welcome to. But if you want to download binaries for Windows, Android, or even Linux (and possibly MacOS and IOS too) - I&#39;m going to charge for that. Not as a subscription, but as a one-time payment with a lifetime of upgrades.&lt;/p&gt; &#xA;&lt;h1&gt;Downloading Encrypted Notepad II&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://payhip.com/b/q9s7S&#34;&gt;Here is a link where you can buy binaries and priority support for Encrypted Notepad II&lt;/a&gt;. By buying this product you support its future development, and get this in return:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows, Linux, and Android versions of the software (OS X and iOS will be provided if there&#39;s enough interest)&lt;/li&gt; &#xA; &lt;li&gt;Lifetimes of updates for those binaries, for a single payment&lt;/li&gt; &#xA; &lt;li&gt;Priority support for any issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is an open source app developed on GitHub. What you are buying here are the binaries and priority support. If you know how to, you can always build your own binaries from source.&lt;/p&gt; &#xA;&lt;h1&gt;Building Encrypted Notepad II&lt;/h1&gt; &#xA;&lt;p&gt;You will need Go 1.22+ installed. After cloning the repo, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./EncryptedNotepad2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Encryption&lt;/h1&gt; &#xA;&lt;p&gt;The files are encrypted using AES-256 and stored in the PGP/OpenPGP &lt;code&gt;.asc&lt;/code&gt; format, that is interoperable with any other tool using the same standard. The OpenPGP and general crypto libraries used are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ProtonMail&#34;&gt;ProtonMail&#39;s libraries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudflare/circl&#34;&gt;CloudFlare&#39;s circl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/x/crypto&#34;&gt;Golang&#39;s x/crypto&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free to inspect &lt;code&gt;go.mod&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;h1&gt;F.A.Q.&lt;/h1&gt; &#xA;&lt;h2&gt;Will you support other encryption algorithms?&lt;/h2&gt; &#xA;&lt;p&gt;No. Really, there&#39;s no need to. Either you trust AES, and in that case this is what you want, or you don&#39;t, in which case you most likely don&#39;t need this tool.&lt;/p&gt; &#xA;&lt;h2&gt;Will you support more file formats (other than OpenPGP ASCII-armoured messages)?&lt;/h2&gt; &#xA;&lt;p&gt;Maybe - depends if there&#39;s a good use case and enough people want it.&lt;/p&gt; &#xA;&lt;h2&gt;What is the actual cipher mode of AES-256 used in Encrypted Notepad II?&lt;/h2&gt; &#xA;&lt;p&gt;When saving in OpenPGP&#39;s message format (the &lt;code&gt;.asc&lt;/code&gt;) files, the mode is dictated by the OpenPGP spec. It is &lt;a href=&#34;https://web.archive.org/web/20231230093732/https://articles.59.ca/doku.php?id=pgpfan:mdc&#34;&gt;OCFB-MDC&lt;/a&gt;. It is an AEAD mode, providing tamper protection as well as encryption.&lt;/p&gt; &#xA;&lt;h2&gt;Why is the UI clunky / strange / not native?&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s because of Fyne... but it&#39;s getting better all the time.&lt;/p&gt; &#xA;&lt;h2&gt;Why is the executable / package so big, compared to the old version?&lt;/h2&gt; &#xA;&lt;p&gt;Encrypted Notepad II is written in Go, and that means it&#39;s mostly statically compiled on all platforms. It uses the &lt;a href=&#34;https://github.com/fyne-io/fyne&#34;&gt;Fyne&lt;/a&gt; UI toolkit, and that means it uses almost no operating system-provided UI facilities on any platform. The flip side of that is that everything needs to be built-in into the single executable, making it bigger than expected for such a compact app.&lt;/p&gt; &#xA;&lt;p&gt;The old version was written in Java, and that means it required a JRE to run. In that light, the new version is actually lighter-weight.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AccentDesign/gcss</title>
    <updated>2024-06-04T01:30:53Z</updated>
    <id>tag:github.com,2024-06-04:/AccentDesign/gcss</id>
    <link href="https://github.com/AccentDesign/gcss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CSS written in Pure Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/AccentDesign/gcss/actions/workflows/go-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/AccentDesign/gcss/actions/workflows/go-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/AccentDesign/gcss&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/AccentDesign/gcss&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/AccentDesign/gcss&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation%20on-pkg.go.dev-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/banner.jpg&#34; alt=&#34;banner&#34; style=&#34;width: 100%; height: auto;&#34;&gt; &#xA;&lt;h1&gt;gcss&lt;/h1&gt; &#xA;&lt;p&gt;CSS written in Pure Go.&lt;/p&gt; &#xA;&lt;p&gt;No JS builders, no preprocessors, no linters, no frameworks, no classes, no variables, no overrides, no plugins, no dependencies, no javascript, no templates, no bs, no nothing.&lt;/p&gt; &#xA;&lt;p&gt;Just Go.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;This is really just a bit of fun and a way to write CSS in Go. I wanted to see if it was possible and it is with ease. I wanted to find a way to easily control the CSS from the server side and not have to worry about pre-building the css to take variables and stuff. I didnt want to use UI libraries that are written for JS frameworks and I didn&#39;t want to use preprocessors or linters that add more steps to the build process.&lt;/p&gt; &#xA;&lt;p&gt;Could I just use CSS? Yes of course and I will, but I wanted to see if I could write CSS in Go as this is what is compiling the rest of the project.&lt;/p&gt; &#xA;&lt;h2&gt;Gopher&lt;/h2&gt; &#xA;&lt;p&gt;No it looks nothing like the Go gopher, but it&#39;s a gopher and I like it. It&#39;s the best I could get from the LM without giving up, &lt;a href=&#34;https://ideogram.ai/g/E-5MQp7QTPO4uyF9PvERzw/3&#34;&gt;ideogram.ai (1400097641)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Next steps&lt;/h2&gt; &#xA;&lt;p&gt;The next steps for this project are to add more features to the CSS package. This includes adding support for more CSS properties when the need arises. What I don&#39;t want to do is to add support for all CSS functionality as some things are better in CSS, but I do want to be able to create a few UI components that are configurable using Go.&lt;/p&gt; &#xA;&lt;h2&gt;What I don&#39;t need&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I don&#39;t need UI libs that are written for the purpose of JS frameworks.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t need linters when I have Go&#39;s static typing.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t need javascript to generate CSS.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t need templates with 400 css classes in them.&lt;/li&gt; &#xA; &lt;li&gt;I don&#39;t need css with more variables in them than actual css properties.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What I do need&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go&#39;s static typing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/AccentDesign/gcss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Basic usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gcss&lt;/code&gt; defines a &lt;code&gt;Style&lt;/code&gt; type that can be used to hold the properties for a specific css selector, eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;style := gcss.Style{&#xA;    Selector: &#34;body&#34;,&#xA;    Props: gcss.Props{&#xA;        BackgroundColor: props.ColorRGBA(0, 0, 0, 128),&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;CSS&lt;/code&gt; function on the &lt;code&gt;Style&lt;/code&gt; is used to write the style to a &lt;code&gt;io.Writer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;style.CSS(os.Stdout)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which gives you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;body{background-color:rgba(0,0,0,0.50);}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all there is to it. But it&#39;s not very useful on it&#39;s own I hear you say.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple styles&lt;/h3&gt; &#xA;&lt;p&gt;Well you can then use that to define a &lt;code&gt;Styles&lt;/code&gt; type that can be used to hold multiple &lt;code&gt;Style&lt;/code&gt; types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Styles []gcss.Style&#xA;&#xA;func (s Styles) CSS(w io.Writer) error {&#xA;    // handle your errors&#xA;    for _, style := range s {&#xA;        style.CSS(w)&#xA;    }&#xA;    return nil&#xA;}&#xA;&#xA;styles := Styles{&#xA;    {&#xA;        Selector: &#34;body&#34;,&#xA;        Props: gcss.Props{&#xA;            BackgroundColor: props.ColorRGBA(0, 0, 0, 128),&#xA;        },&#xA;    },&#xA;    {&#xA;        Selector: &#34;main&#34;,&#xA;        Props: gcss.Props{&#xA;            Padding: props.UnitRem(8.5),&#xA;        },&#xA;    },&#xA;}&#xA;&#xA;styles.CSS(os.Stdout)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which gives you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* formatted for visibility */&#xA;body{&#xA;    background-color:rgba(0,0,0,0.50);&#xA;}&#xA;main{&#xA;    padding:8.500rem;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Need a bit more? what about a dark and light theme? keep the last example in mind and read on.&lt;/h3&gt; &#xA;&lt;p&gt;Define a &lt;code&gt;Theme&lt;/code&gt; type that can be used to hold attributes for a specific theme, eg:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Theme struct {&#xA;    MediaQuery string&#xA;    Background props.Color&#xA;}&#xA;&#xA;func (t *Theme) CSS(w io.Writer) error {&#xA;    // handle your errors&#xA;    fmt.Fprintf(w, &#34;%s{&#34;, t.MediaQuery)&#xA;    for _, style := range t.Styles() {&#xA;        style.CSS(w)&#xA;    }&#xA;    fmt.Fprint(w, &#34;}&#34;)&#xA;}&#xA;&#xA;// Styles returns the styles for the theme.&#xA;// Can be any number of styles you want and any number of functions&#xA;// you just need them in the CSS function to loop over.&#xA;func (t *Theme) Styles() Styles {&#xA;    return Styles{&#xA;        {&#xA;            Selector: &#34;body&#34;,&#xA;            Props: gcss.Props{&#xA;                BackgroundColor: t.Background,&#xA;            },&#xA;        },&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can define a &lt;code&gt;Stylesheet&lt;/code&gt; type that can be used to hold multiple &lt;code&gt;Theme&lt;/code&gt; types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Stylesheet struct {&#xA;    Dark  *Theme&#xA;    Light *Theme&#xA;}&#xA;&#xA;func (s *Stylesheet) CSS(w io.Writer) error {&#xA;    // handle your errors&#xA;    s.Dark.CSS(w)&#xA;    s.Light.CSS(w)&#xA;    return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can use the &lt;code&gt;Stylesheet&lt;/code&gt; type to write the css to a &lt;code&gt;io.Writer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;styles := Stylesheet{&#xA;    Dark: &amp;amp;Theme{&#xA;        MediaQuery: &#34;@media (prefers-color-scheme: dark)&#34;,&#xA;        Background: props.ColorRGBA(0, 0, 0, 255),&#xA;    },&#xA;    Light: &amp;amp;Theme{&#xA;        MediaQuery: &#34;@media (prefers-color-scheme: light)&#34;,&#xA;        Background: props.ColorRGBA(255, 255, 255, 255),&#xA;    },&#xA;}&#xA;&#xA;styles.CSS(os.Stdout)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gives you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* formatted for visibility */&#xA;@media (prefers-color-scheme: dark) {&#xA;    body{&#xA;        background-color:rgba(0,0,0,1.00);&#xA;    }&#xA;}&#xA;@media (prefers-color-scheme: light) {&#xA;    body{&#xA;        background-color:rgba(255,255,255,1.00);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hopefully this will get you going. The rest is up to you.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maybe create a button function that takes a &lt;code&gt;props.Color&lt;/code&gt; and returns a Style.&lt;/li&gt; &#xA; &lt;li&gt;Or add extra &lt;code&gt;Styles&lt;/code&gt; to the &lt;code&gt;Stylesheet&lt;/code&gt; to additionally include non themed styles.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s all about how you construct the &lt;code&gt;Stylesheet&lt;/code&gt; and use the &lt;code&gt;gcss.Style&lt;/code&gt; type.&lt;/li&gt; &#xA; &lt;li&gt;If I could have created a &lt;code&gt;Stylesheet&lt;/code&gt; type that fits well any use case at all I would have, but there is a world of possibility, so I left it up to you.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;The benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Total control of the CSS from the server side.&lt;/li&gt; &#xA; &lt;li&gt;CSS doesn&#39;t have mixins, but you can create a function that returns a &lt;code&gt;Style&lt;/code&gt; type and reuse it.&lt;/li&gt; &#xA; &lt;li&gt;Keeps the css free of variables.&lt;/li&gt; &#xA; &lt;li&gt;Keeps html free of classes like &lt;code&gt;bg-gray-50 text-black dark:bg-slate-800 dark:text-white&lt;/code&gt; and eliminates the need to remember to add the dark variant.&lt;/li&gt; &#xA; &lt;li&gt;I recently saw a button component on an html page 10 times with over 1800 characters in the class attribute of each. This is not maintainable nor debuggable.&lt;/li&gt; &#xA; &lt;li&gt;Keeps the css clean and easy to debug with no overrides like the above.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;For example usage see the &lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples&#34;&gt;examples&lt;/a&gt; directory that include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples/css-resets&#34;&gt;CSS resets&lt;/a&gt; - A simple example collection of css resets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples/integration-templ&#34;&gt;Templ integration&lt;/a&gt; - An example of how to load styles from gcss with the &lt;a href=&#34;https://templ.guide&#34;&gt;templ&lt;/a&gt; package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples/media-queries&#34;&gt;Media queries&lt;/a&gt; - An example of how to use media queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples/themed-multiple-http-handlers&#34;&gt;Themed CSS using multiple HTTP handlers&lt;/a&gt; - An example of how to use multiple http handlers to serve different themes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples/themed-single-http-handler&#34;&gt;Themed CSS using a single HTTP handler&lt;/a&gt; - An example of how to use a single http handler to serve different themes using media queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples/to-file&#34;&gt;Write to a file&lt;/a&gt; - An example of how to write to a file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples/to-http-handler&#34;&gt;Write to an HTTP handler&lt;/a&gt; - An example of how to write to an http handler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AccentDesign/gcss/main/examples/to-stdout&#34;&gt;Write to stdout&lt;/a&gt; - An example of how to write to stdout.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to contribute to this project, please open an issue or a pull request. We welcome all contributions and ideas.&lt;/p&gt; &#xA;&lt;h2&gt;Mix it up with other CSS frameworks&lt;/h2&gt; &#xA;&lt;p&gt;You can mix &lt;code&gt;gcss&lt;/code&gt; with other CSS frameworks like &lt;code&gt;tailwindcss&lt;/code&gt; for example:&lt;/p&gt; &#xA;&lt;p&gt;separate the css files into base and utils:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* base.css */&#xA;@tailwind base;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* utils.css */&#xA;@tailwind utilities;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the &lt;code&gt;gcss&lt;/code&gt; styles in between in your html:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;base.css&#34;&amp;gt;&#xA;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;gcss-styles.css&#34;&amp;gt;&#xA;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;utils.css&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Try to keep the specificity of the &lt;code&gt;gcss&lt;/code&gt; styles to 1 by using single classes this will ensure any &lt;code&gt;tailwindcss&lt;/code&gt; utilities will be able to overwrite your styles where required.&lt;/p&gt;</summary>
  </entry>
</feed>