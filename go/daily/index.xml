<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-11T01:34:26Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ciyfly/microwaveo</title>
    <updated>2022-09-11T01:34:26Z</updated>
    <id>tag:github.com,2022-09-11:/Ciyfly/microwaveo</id>
    <link href="https://github.com/Ciyfly/microwaveo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;将dll exe 等转成shellcode 最后输出exe 可定制加载器模板 支持白文件的捆绑 shellcode 加密&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Microwaveo&lt;/h1&gt; &#xA;&lt;p&gt;一个小工具 微波炉加热一下dll&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;调用 go-donut 将dll/exe等转为shellcode&lt;/li&gt; &#xA; &lt;li&gt;使用go模板构建shellcode的加载器 最后输出exe&lt;/li&gt; &#xA; &lt;li&gt;也支持直接传入shellcode来构建最后的exe&lt;/li&gt; &#xA; &lt;li&gt;默认是对shellcode文件进行随机aes key加密的&lt;/li&gt; &#xA; &lt;li&gt;支持白文件捆绑 运行最后的exe会执行shellcode并运行白文件&lt;/li&gt; &#xA; &lt;li&gt;最后的exe支持 garble混淆&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;注意&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;因为是使用go 构建exe所以需要go的环境&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;p&gt;编译好的文件可以直接在 在这里 &lt;a href=&#34;https://github.com/Ciyfly/microwaveo/releases&#34;&gt;releases&lt;/a&gt; 下载 当然可以自己编译&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./microwaveo --help&#xA;GLOBAL OPTIONS:&#xA;   --arch value, -a value             shellcode arch x32 x64 x84 default x64 (default: &#34;x64&#34;)&#xA;   --encrypt value, -e value          encrypt the generated exe support aes default aes (default: &#34;aes&#34;)&#xA;   --funcname value, --fn value       dll func name&#xA;   --help, -h                         show help (default: false)&#xA;   --input value, -i value            input file dll/exe/shellcode&#xA;   --obfuscate, --of                  obfuscate the generated exe using garble (default: false)&#xA;   --shellcodeFormat value, -s value  output shellcode format hex bin default bin (default: &#34;bin&#34;)&#xA;   --version, -v                      print the version (default: false)&#xA;   --white value, -w value            bundled white files  file path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;将dll转为exe&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./microwaveo -i recar.dll -fn RunRecar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;将exe控制为32位&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./microwaveo -i recar.dll -fn RunRecar -a x32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;捆绑白文件&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./microwaveo -i recar.dll -fn RunRecar -w 白文件.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;使用garble混淆最后的exe&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./microwaveo -i recar.dll -fn RunRecar --of&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;需要安装 garble 最简单的安装 使用 &lt;code&gt;go install mvdan.cc/garble@latest&lt;/code&gt; 最后配置环境变量&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;思考是不是可以将加载器做成多个模板的形式来处理&lt;/li&gt; &#xA; &lt;li&gt;增加一些反沙箱的东西&lt;/li&gt; &#xA; &lt;li&gt;待定 有任何想法欢迎与我交流&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>charmbracelet/lipgloss</title>
    <updated>2022-09-11T01:34:26Z</updated>
    <id>tag:github.com,2022-09-11:/charmbracelet/lipgloss</id>
    <link href="https://github.com/charmbracelet/lipgloss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Style definitions for nice terminal layouts 👄&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lip Gloss&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://stuff.charm.sh/lipgloss/lipgloss-header-github.png&#34; width=&#34;340&#34; alt=&#34;Lip Gloss Title Treatment&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/charmbracelet/lipgloss/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/lipgloss.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/lipgloss?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/lipgloss/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/lipgloss/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Style definitions for nice terminal layouts. Built with TUIs in mind.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://stuff.charm.sh/lipgloss/lipgloss-example.png&#34; alt=&#34;Lip Gloss example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Lip Gloss takes an expressive, declarative approach to terminal rendering. Users familiar with CSS will feel at home with Lip Gloss.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;import &#34;github.com/charmbracelet/lipgloss&#34;&#xA;&#xA;var style = lipgloss.NewStyle().&#xA;    Bold(true).&#xA;    Foreground(lipgloss.Color(&#34;#FAFAFA&#34;)).&#xA;    Background(lipgloss.Color(&#34;#7D56F4&#34;)).&#xA;    PaddingTop(2).&#xA;    PaddingLeft(4).&#xA;    Width(22)&#xA;&#xA;fmt.Println(style.Render(&#34;Hello, kitty.&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Colors&lt;/h2&gt; &#xA;&lt;p&gt;Lip Gloss supports the following color profiles:&lt;/p&gt; &#xA;&lt;h3&gt;ANSI 16 colors (4-bit)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lipgloss.Color(&#34;5&#34;)  // magenta&#xA;lipgloss.Color(&#34;9&#34;)  // red&#xA;lipgloss.Color(&#34;12&#34;) // light blue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ANSI 256 Colors (8-bit)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lipgloss.Color(&#34;86&#34;)  // aqua&#xA;lipgloss.Color(&#34;201&#34;) // hot pink&#xA;lipgloss.Color(&#34;202&#34;) // orange&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;True Color (16,777,216 colors; 24-bit)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lipgloss.Color(&#34;#0000FF&#34;) // good ol&#39; 100% blue&#xA;lipgloss.Color(&#34;#04B575&#34;) // a green&#xA;lipgloss.Color(&#34;#3C3C3C&#34;) // a dark gray&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...as well as a 1-bit Ascii profile, which is black and white only.&lt;/p&gt; &#xA;&lt;p&gt;The terminal&#39;s color profile will be automatically detected, and colors outside the gamut of the current palette will be automatically coerced to their closest available value.&lt;/p&gt; &#xA;&lt;h3&gt;Adaptive Colors&lt;/h3&gt; &#xA;&lt;p&gt;You can also specify color options for light and dark backgrounds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lipgloss.AdaptiveColor{Light: &#34;236&#34;, Dark: &#34;248&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The terminal&#39;s background color will automatically be detected and the appropriate color will be chosen at runtime.&lt;/p&gt; &#xA;&lt;h2&gt;Inline Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Lip Gloss supports the usual ANSI text formatting options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var style = lipgloss.NewStyle().&#xA;    Bold(true).&#xA;    Italic(true).&#xA;    Faint(true).&#xA;    Blink(true).&#xA;    Strikethrough(true).&#xA;    Underline(true).&#xA;    Reverse(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Block-Level Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Lip Gloss also supports rules for block-level formatting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Padding&#xA;var style = lipgloss.NewStyle().&#xA;    PaddingTop(2).&#xA;    PaddingRight(4).&#xA;    PaddingBottom(2).&#xA;    PaddingLeft(4)&#xA;&#xA;// Margins&#xA;var style = lipgloss.NewStyle().&#xA;    MarginTop(2).&#xA;    MarginRight(4).&#xA;    MarginBottom(2).&#xA;    MarginLeft(4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also shorthand syntax for margins and padding, which follows the same format as CSS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 2 cells on all sides&#xA;lipgloss.NewStyle().Padding(2)&#xA;&#xA;// 2 cells on the top and bottom, 4 cells on the left and right&#xA;lipgloss.NewStyle().Margin(2, 4)&#xA;&#xA;// 1 cell on the top, 4 cells on the sides, 2 cells on the bottom&#xA;lipgloss.NewStyle().Padding(1, 4, 2)&#xA;&#xA;// Clockwise, starting from the top: 2 cells on the top, 4 on the right, 3 on&#xA;// the bottom, and 1 on the left&#xA;lipgloss.NewStyle().Margin(2, 4, 3, 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Aligning Text&lt;/h2&gt; &#xA;&lt;p&gt;You can align paragraphs of text to the left, right, or center.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var style = lipgloss.NewStyle().&#xA;    Width(24).&#xA;    Align(lipgloss.Left).  // align it left&#xA;    Align(lipgloss.Right). // no wait, align it right&#xA;    Align(lipgloss.Center) // just kidding, align it in the center&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Width and Height&lt;/h2&gt; &#xA;&lt;p&gt;Setting a minimum width and height is simple and straightforward.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var str = lipgloss.NewStyle().&#xA;    Width(24).&#xA;    Height(32).&#xA;    Foreground(lipgloss.Color(&#34;63&#34;)).&#xA;    Render(&#34;What’s for lunch?&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Borders&lt;/h2&gt; &#xA;&lt;p&gt;Adding borders is easy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Add a purple, rectangular border&#xA;var style = lipgloss.NewStyle().&#xA;    BorderStyle(lipgloss.NormalBorder()).&#xA;    BorderForeground(lipgloss.Color(&#34;63&#34;))&#xA;&#xA;// Set a rounded, yellow-on-purple border to the top and left&#xA;var anotherStyle = lipgloss.NewStyle().&#xA;    BorderStyle(lipgloss.RoundedBorder()).&#xA;    BorderForeground(lipgloss.Color(&#34;228&#34;)).&#xA;    BorderBackground(lipgloss.Color(&#34;63&#34;)).&#xA;    BorderTop(true).&#xA;    BorderLeft(true)&#xA;&#xA;// Make your own border&#xA;var myCuteBorder = lipgloss.Border{&#xA;    Top:         &#34;._.:*:&#34;,&#xA;    Bottom:      &#34;._.:*:&#34;,&#xA;    Left:        &#34;|*&#34;,&#xA;    Right:       &#34;|*&#34;,&#xA;    TopLeft:     &#34;*&#34;,&#xA;    TopRight:    &#34;*&#34;,&#xA;    BottomLeft:  &#34;*&#34;,&#xA;    BottomRight: &#34;*&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are also shorthand functions for defining borders, which follow a similar pattern to the margin and padding shorthand functions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Add a thick border to the top and bottom&#xA;lipgloss.NewStyle().&#xA;    Border(lipgloss.ThickBorder(), true, false)&#xA;&#xA;// Add a thick border to the right and bottom sides. Rules are set clockwise&#xA;// from top.&#xA;lipgloss.NewStyle().&#xA;    Border(lipgloss.DoubleBorder(), true, false, false, true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more on borders see &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/lipgloss?tab=doc&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Copying Styles&lt;/h2&gt; &#xA;&lt;p&gt;Just use &lt;code&gt;Copy()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var style = lipgloss.NewStyle().Foreground(lipgloss.Color(&#34;219&#34;))&#xA;&#xA;var wildStyle = style.Copy().Blink(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Copy()&lt;/code&gt; performs a copy on the underlying data structure ensuring that you get a true, dereferenced copy of a style. Without copying it&#39;s possible to mutate styles.&lt;/p&gt; &#xA;&lt;h2&gt;Inheritance&lt;/h2&gt; &#xA;&lt;p&gt;Styles can inherit rules from other styles. When inheriting, only unset rules on the receiver are inherited.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var styleA = lipgloss.NewStyle().&#xA;    Foreground(lipgloss.Color(&#34;229&#34;)).&#xA;    Background(lipgloss.Color(&#34;63&#34;))&#xA;&#xA;// Only the background color will be inherited here, because the foreground&#xA;// color will have been already set:&#xA;var styleB = lipgloss.NewStyle().&#xA;    Foreground(lipgloss.Color(&#34;201&#34;)).&#xA;    Inherit(styleA)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unsetting Rules&lt;/h2&gt; &#xA;&lt;p&gt;All rules can be unset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var style = lipgloss.NewStyle().&#xA;    Bold(true).                        // make it bold&#xA;    UnsetBold().                       // jk don&#39;t make it bold&#xA;    Background(lipgloss.Color(&#34;227&#34;)). // yellow background&#xA;    UnsetBackground()                  // never mind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When a rule is unset, it won&#39;t be inherited or copied.&lt;/p&gt; &#xA;&lt;h2&gt;Enforcing Rules&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes, such as when developing a component, you want to make sure style definitions respect their intended purpose in the UI. This is where &lt;code&gt;Inline&lt;/code&gt; and &lt;code&gt;MaxWidth&lt;/code&gt;, and &lt;code&gt;MaxHeight&lt;/code&gt; come in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Force rendering onto a single line, ignoring margins, padding, and borders.&#xA;someStyle.Inline(true).Render(&#34;yadda yadda&#34;)&#xA;&#xA;// Also limit rendering to five cells&#xA;someStyle.Inline(true).MaxWidth(5).Render(&#34;yadda yadda&#34;)&#xA;&#xA;// Limit rendering to a 5x5 cell block&#xA;someStyle.MaxWidth(5).MaxHeight(5).Render(&#34;yadda yadda&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rendering&lt;/h2&gt; &#xA;&lt;p&gt;Generally, you just call the &lt;code&gt;Render(string)&lt;/code&gt; method on a &lt;code&gt;lipgloss.Style&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(lipgloss.NewStyle().Bold(true).Render(&#34;Hello, kitty.&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But you could also use the Stringer interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var style = lipgloss.NewStyle().SetString(&#34;你好，猫咪。&#34;).Bold(true)&#xA;&#xA;fmt.Printf(&#34;%s\n&#34;, style)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Utilities&lt;/h2&gt; &#xA;&lt;p&gt;In addition to pure styling, Lip Gloss also ships with some utilities to help assemble your layouts.&lt;/p&gt; &#xA;&lt;h3&gt;Joining Paragraphs&lt;/h3&gt; &#xA;&lt;p&gt;Horizontally and vertically joining paragraphs is a cinch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Horizontally join three paragraphs along their bottom edges&#xA;lipgloss.JoinHorizontal(lipgloss.Bottom, paragraphA, paragraphB, paragraphC)&#xA;&#xA;// Vertically join two paragraphs along their center axes&#xA;lipgloss.JoinVertical(lipgloss.Center, paragraphA, paragraphB)&#xA;&#xA;// Horizontally join three paragraphs, with the shorter ones aligning 20%&#xA;// from the top of the tallest&#xA;lipgloss.JoinHorizontal(0.2, paragraphA, paragraphB, paragraphC)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Measuring Width and Height&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you’ll want to know the width and height of text blocks when building your layouts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var block string = lipgloss.NewStyle().&#xA;    Width(40).&#xA;    Padding(2).&#xA;    Render(someLongString)&#xA;&#xA;// Get the actual, physical dimensions of the text block.&#xA;width := lipgloss.Width(block)&#xA;height := lipgloss.Height(block)&#xA;&#xA;// Here&#39;s a shorthand function.&#xA;w, h := lipgloss.Size(block)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Placing Text in Whitespace&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you’ll simply want to place a block of text in whitespace.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Center a paragraph horizontally in a space 80 cells wide. The height of&#xA;// the block returned will be as tall as the input paragraph.&#xA;block := lipgloss.PlaceHorizontal(80, lipgloss.Center, fancyStyledParagraph)&#xA;&#xA;// Place a paragraph at the bottom of a space 30 cells tall. The width of&#xA;// the text block returned will be as wide as the input paragraph.&#xA;block := lipgloss.PlaceVertical(30, lipgloss.Bottom, fancyStyledParagraph)&#xA;&#xA;// Place a paragraph in the bottom right corner of a 30x80 cell space.&#xA;block := lipgloss.Place(30, 80, lipgloss.Right, lipgloss.Bottom, fancyStyledParagraph)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also style the whitespace. For details, see &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/lipgloss?tab=doc&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;What about &lt;a href=&#34;https://github.com/charmbracelet/tea&#34;&gt;Bubble Tea&lt;/a&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;Lip Gloss doesn’t replace Bubble Tea. Rather, it is an excellent Bubble Tea companion. It was designed to make assembling terminal user interface views as simple and fun as possible so that you can focus on building your application instead of concerning yourself with low-level layout details.&lt;/p&gt; &#xA;&lt;p&gt;In simple terms, you can use Lip Gloss to help build your Bubble Tea views.&lt;/p&gt; &#xA;&lt;h2&gt;Under the Hood&lt;/h2&gt; &#xA;&lt;p&gt;Lip Gloss is built on the excellent &lt;a href=&#34;https://github.com/muesli/termenv&#34;&gt;Termenv&lt;/a&gt; and &lt;a href=&#34;https://github.com/muesli/reflow&#34;&gt;Reflow&lt;/a&gt; libraries which deal with color and ANSI-aware text operations, respectively. For many use cases Termenv and Reflow will be sufficient for your needs.&lt;/p&gt; &#xA;&lt;h2&gt;Rendering Markdown&lt;/h2&gt; &#xA;&lt;p&gt;For a more document-centric rendering solution with support for things like lists, tables, and syntax-highlighted code have a look at &lt;a href=&#34;https://github.com/charmbracelet/glamour&#34;&gt;Glamour&lt;/a&gt;, the stylesheet-based Markdown renderer.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/lipgloss/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://charm.sh/&#34;&gt;&lt;img alt=&#34;The Charm logo&#34; src=&#34;https://stuff.charm.sh/charm-badge-unrounded.jpg&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Charm热爱开源 • Charm loves open source&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>prometheus/alertmanager</title>
    <updated>2022-09-11T01:34:26Z</updated>
    <id>tag:github.com,2022-09-11:/prometheus/alertmanager</id>
    <link href="https://github.com/prometheus/alertmanager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prometheus Alertmanager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alertmanager &lt;a href=&#34;https://circleci.com/gh/prometheus/alertmanager&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/prometheus/alertmanager/tree/main.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://quay.io/repository/prometheus/alertmanager&#34;&gt;&lt;img src=&#34;https://quay.io/repository/prometheus/alertmanager/status&#34; alt=&#34;Docker Repository on Quay&#34; title=&#34;Docker Repository on Quay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/prom/alertmanager/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/prom/alertmanager.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Alertmanager handles alerts sent by client applications such as the Prometheus server. It takes care of deduplicating, grouping, and routing them to the correct receiver integrations such as email, PagerDuty, or OpsGenie. It also takes care of silencing and inhibition of alerts.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://prometheus.io/docs/alerting/alertmanager/&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;There are various ways of installing Alertmanager.&lt;/p&gt; &#xA;&lt;h3&gt;Precompiled binaries&lt;/h3&gt; &#xA;&lt;p&gt;Precompiled binaries for released versions are available in the &lt;a href=&#34;https://prometheus.io/download/&#34;&gt;&lt;em&gt;download&lt;/em&gt; section&lt;/a&gt; on &lt;a href=&#34;https://prometheus.io&#34;&gt;prometheus.io&lt;/a&gt;. Using the latest production release binary is the recommended way of installing Alertmanager.&lt;/p&gt; &#xA;&lt;h3&gt;Docker images&lt;/h3&gt; &#xA;&lt;p&gt;Docker images are available on &lt;a href=&#34;https://quay.io/repository/prometheus/alertmanager&#34;&gt;Quay.io&lt;/a&gt; or &lt;a href=&#34;https://hub.docker.com/r/prom/alertmanager/&#34;&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can launch an Alertmanager container for trying it out with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --name alertmanager -d -p 127.0.0.1:9093:9093 quay.io/prometheus/alertmanager&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alertmanager will now be reachable at &lt;a href=&#34;http://localhost:9093/&#34;&gt;http://localhost:9093/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling the binary&lt;/h3&gt; &#xA;&lt;p&gt;You can either &lt;code&gt;go get&lt;/code&gt; it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ GO15VENDOREXPERIMENT=1 go get github.com/prometheus/alertmanager/cmd/...&#xA;# cd $GOPATH/src/github.com/prometheus/alertmanager&#xA;$ alertmanager --config.file=&amp;lt;your_file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or clone the repository and build manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir -p $GOPATH/src/github.com/prometheus&#xA;$ cd $GOPATH/src/github.com/prometheus&#xA;$ git clone https://github.com/prometheus/alertmanager.git&#xA;$ cd alertmanager&#xA;$ make build&#xA;$ ./alertmanager --config.file=&amp;lt;your_file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build just one of the binaries in this repo by passing a name to the build function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make build BINARIES=amtool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;This is an example configuration that should cover most relevant aspects of the new YAML configuration format. The full documentation of the configuration can be found &lt;a href=&#34;https://prometheus.io/docs/alerting/configuration/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;global:&#xA;  # The smarthost and SMTP sender used for mail notifications.&#xA;  smtp_smarthost: &#39;localhost:25&#39;&#xA;  smtp_from: &#39;alertmanager@example.org&#39;&#xA;&#xA;# The root route on which each incoming alert enters.&#xA;route:&#xA;  # The root route must not have any matchers as it is the entry point for&#xA;  # all alerts. It needs to have a receiver configured so alerts that do not&#xA;  # match any of the sub-routes are sent to someone.&#xA;  receiver: &#39;team-X-mails&#39;&#xA;&#xA;  # The labels by which incoming alerts are grouped together. For example,&#xA;  # multiple alerts coming in for cluster=A and alertname=LatencyHigh would&#xA;  # be batched into a single group.&#xA;  #&#xA;  # To aggregate by all possible labels use &#39;...&#39; as the sole label name.&#xA;  # This effectively disables aggregation entirely, passing through all&#xA;  # alerts as-is. This is unlikely to be what you want, unless you have&#xA;  # a very low alert volume or your upstream notification system performs&#xA;  # its own grouping. Example: group_by: [...]&#xA;  group_by: [&#39;alertname&#39;, &#39;cluster&#39;]&#xA;&#xA;  # When a new group of alerts is created by an incoming alert, wait at&#xA;  # least &#39;group_wait&#39; to send the initial notification.&#xA;  # This way ensures that you get multiple alerts for the same group that start&#xA;  # firing shortly after another are batched together on the first&#xA;  # notification.&#xA;  group_wait: 30s&#xA;&#xA;  # When the first notification was sent, wait &#39;group_interval&#39; to send a batch&#xA;  # of new alerts that started firing for that group.&#xA;  group_interval: 5m&#xA;&#xA;  # If an alert has successfully been sent, wait &#39;repeat_interval&#39; to&#xA;  # resend them.&#xA;  repeat_interval: 3h&#xA;&#xA;  # All the above attributes are inherited by all child routes and can&#xA;  # overwritten on each.&#xA;&#xA;  # The child route trees.&#xA;  routes:&#xA;  # This routes performs a regular expression match on alert labels to&#xA;  # catch alerts that are related to a list of services.&#xA;  - match_re:&#xA;      service: ^(foo1|foo2|baz)$&#xA;    receiver: team-X-mails&#xA;&#xA;    # The service has a sub-route for critical alerts, any alerts&#xA;    # that do not match, i.e. severity != critical, fall-back to the&#xA;    # parent node and are sent to &#39;team-X-mails&#39;&#xA;    routes:&#xA;    - match:&#xA;        severity: critical&#xA;      receiver: team-X-pager&#xA;&#xA;  - match:&#xA;      service: files&#xA;    receiver: team-Y-mails&#xA;&#xA;    routes:&#xA;    - match:&#xA;        severity: critical&#xA;      receiver: team-Y-pager&#xA;&#xA;  # This route handles all alerts coming from a database service. If there&#39;s&#xA;  # no team to handle it, it defaults to the DB team.&#xA;  - match:&#xA;      service: database&#xA;&#xA;    receiver: team-DB-pager&#xA;    # Also group alerts by affected database.&#xA;    group_by: [alertname, cluster, database]&#xA;&#xA;    routes:&#xA;    - match:&#xA;        owner: team-X&#xA;      receiver: team-X-pager&#xA;&#xA;    - match:&#xA;        owner: team-Y&#xA;      receiver: team-Y-pager&#xA;&#xA;&#xA;# Inhibition rules allow to mute a set of alerts given that another alert is&#xA;# firing.&#xA;# We use this to mute any warning-level notifications if the same alert is&#xA;# already critical.&#xA;inhibit_rules:&#xA;- source_matchers:&#xA;    - severity=&#34;critical&#34;&#xA;  target_matchers:&#xA;    - severity=&#34;warning&#34;&#xA;  # Apply inhibition if the alertname is the same.&#xA;  # CAUTION: &#xA;  #   If all label names listed in `equal` are missing &#xA;  #   from both the source and target alerts,&#xA;  #   the inhibition rule will apply!&#xA;  equal: [&#39;alertname&#39;]&#xA;&#xA;&#xA;receivers:&#xA;- name: &#39;team-X-mails&#39;&#xA;  email_configs:&#xA;  - to: &#39;team-X+alerts@example.org, team-Y+alerts@example.org&#39;&#xA;&#xA;- name: &#39;team-X-pager&#39;&#xA;  email_configs:&#xA;  - to: &#39;team-X+alerts-critical@example.org&#39;&#xA;  pagerduty_configs:&#xA;  - routing_key: &amp;lt;team-X-key&amp;gt;&#xA;&#xA;- name: &#39;team-Y-mails&#39;&#xA;  email_configs:&#xA;  - to: &#39;team-Y+alerts@example.org&#39;&#xA;&#xA;- name: &#39;team-Y-pager&#39;&#xA;  pagerduty_configs:&#xA;  - routing_key: &amp;lt;team-Y-key&amp;gt;&#xA;&#xA;- name: &#39;team-DB-pager&#39;&#xA;  pagerduty_configs:&#xA;  - routing_key: &amp;lt;team-DB-key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The current Alertmanager API is version 2. This API is fully generated via the &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/raw/master/versions/2.0.md&#34;&gt;OpenAPI project&lt;/a&gt; and &lt;a href=&#34;https://github.com/go-swagger/go-swagger/&#34;&gt;Go Swagger&lt;/a&gt; with the exception of the HTTP handlers themselves. The API specification can be found in &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/alertmanager/main/api/v2/openapi.yaml&#34;&gt;api/v2/openapi.yaml&lt;/a&gt;. A HTML rendered version can be accessed &lt;a href=&#34;http://petstore.swagger.io/?url=https://raw.githubusercontent.com/prometheus/alertmanager/main/api/v2/openapi.yaml&#34;&gt;here&lt;/a&gt;. Clients can be easily generated via any OpenAPI generator for all major languages.&lt;/p&gt; &#xA;&lt;p&gt;With the default config, endpoints are accessed under a &lt;code&gt;/api/v1&lt;/code&gt; or &lt;code&gt;/api/v2&lt;/code&gt; prefix. The v2 &lt;code&gt;/status&lt;/code&gt; endpoint would be &lt;code&gt;/api/v2/status&lt;/code&gt;. If &lt;code&gt;--web.route-prefix&lt;/code&gt; is set then API routes are prefixed with that as well, so &lt;code&gt;--web.route-prefix=/alertmanager/&lt;/code&gt; would relate to &lt;code&gt;/alertmanager/api/v2/status&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;API v2 is still under heavy development and thereby subject to change.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;amtool&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;amtool&lt;/code&gt; is a cli tool for interacting with the Alertmanager API. It is bundled with all releases of Alertmanager.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively you can install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go install github.com/prometheus/alertmanager/cmd/amtool@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;View all currently firing alerts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amtool alert&#xA;Alertname        Starts At                Summary&#xA;Test_Alert       2017-08-02 18:30:18 UTC  This is a testing alert!&#xA;Test_Alert       2017-08-02 18:30:18 UTC  This is a testing alert!&#xA;Check_Foo_Fails  2017-08-02 18:30:18 UTC  This is a testing alert!&#xA;Check_Foo_Fails  2017-08-02 18:30:18 UTC  This is a testing alert!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View all currently firing alerts with extended output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amtool -o extended alert&#xA;Labels                                        Annotations                                                    Starts At                Ends At                  Generator URL&#xA;alertname=&#34;Test_Alert&#34; instance=&#34;node0&#34;       link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;alertname=&#34;Test_Alert&#34; instance=&#34;node1&#34;       link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;alertname=&#34;Check_Foo_Fails&#34; instance=&#34;node0&#34;  link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;alertname=&#34;Check_Foo_Fails&#34; instance=&#34;node1&#34;  link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to viewing alerts, you can use the rich query syntax provided by Alertmanager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amtool -o extended alert query alertname=&#34;Test_Alert&#34;&#xA;Labels                                   Annotations                                                    Starts At                Ends At                  Generator URL&#xA;alertname=&#34;Test_Alert&#34; instance=&#34;node0&#34;  link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;alertname=&#34;Test_Alert&#34; instance=&#34;node1&#34;  link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;&#xA;$ amtool -o extended alert query instance=~&#34;.+1&#34;&#xA;Labels                                        Annotations                                                    Starts At                Ends At                  Generator URL&#xA;alertname=&#34;Test_Alert&#34; instance=&#34;node1&#34;       link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;alertname=&#34;Check_Foo_Fails&#34; instance=&#34;node1&#34;  link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;&#xA;$ amtool -o extended alert query alertname=~&#34;Test.*&#34; instance=~&#34;.+1&#34;&#xA;Labels                                   Annotations                                                    Starts At                Ends At                  Generator URL&#xA;alertname=&#34;Test_Alert&#34; instance=&#34;node1&#34;  link=&#34;https://example.com&#34; summary=&#34;This is a testing alert!&#34;  2017-08-02 18:31:24 UTC  0001-01-01 00:00:00 UTC  http://my.testing.script.local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Silence an alert:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amtool silence add alertname=Test_Alert&#xA;b3ede22e-ca14-4aa0-932c-ca2f3445f926&#xA;&#xA;$ amtool silence add alertname=&#34;Test_Alert&#34; instance=~&#34;.+0&#34;&#xA;e48cb58a-0b17-49ba-b734-3585139b1d25&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View silences:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amtool silence query&#xA;ID                                    Matchers              Ends At                  Created By  Comment&#xA;b3ede22e-ca14-4aa0-932c-ca2f3445f926  alertname=Test_Alert  2017-08-02 19:54:50 UTC  kellel&#xA;&#xA;$ amtool silence query instance=~&#34;.+0&#34;&#xA;ID                                    Matchers                            Ends At                  Created By  Comment&#xA;e48cb58a-0b17-49ba-b734-3585139b1d25  alertname=Test_Alert instance=~.+0  2017-08-02 22:41:39 UTC  kellel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expire a silence:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amtool silence expire b3ede22e-ca14-4aa0-932c-ca2f3445f926&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expire all silences matching a query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amtool silence query instance=~&#34;.+0&#34;&#xA;ID                                    Matchers                            Ends At                  Created By  Comment&#xA;e48cb58a-0b17-49ba-b734-3585139b1d25  alertname=Test_Alert instance=~.+0  2017-08-02 22:41:39 UTC  kellel&#xA;&#xA;$ amtool silence expire $(amtool silence query -q instance=~&#34;.+0&#34;)&#xA;&#xA;$ amtool silence query instance=~&#34;.+0&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Expire all silences:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ amtool silence expire $(amtool silence query -q)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Try out how a template works. Let&#39;s say you have this in your configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;templates:&#xA;  - &#39;/foo/bar/*.tmpl&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can test out how a template would look like with example by using this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;amtool template render --template.glob=&#39;/foo/bar/*.tmpl&#39; --template.text=&#39;{{ template &#34;slack.default.markdown.v1&#34; . }}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;amtool&lt;/code&gt; allows a configuration file to specify some options for convenience. The default configuration file paths are &lt;code&gt;$HOME/.config/amtool/config.yml&lt;/code&gt; or &lt;code&gt;/etc/amtool/config.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;An example configuration file might look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Define the path that `amtool` can find your `alertmanager` instance&#xA;alertmanager.url: &#34;http://localhost:9093&#34;&#xA;&#xA;# Override the default author. (unset defaults to your username)&#xA;author: me@example.com&#xA;&#xA;# Force amtool to give you an error if you don&#39;t include a comment on a silence&#xA;comment_required: true&#xA;&#xA;# Set a default output format. (unset defaults to simple)&#xA;output: extended&#xA;&#xA;# Set a default receiver&#xA;receiver: team-X-pager&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Routes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;amtool&lt;/code&gt; allows you to visualize the routes of your configuration in form of text tree view. Also you can use it to test the routing by passing it label set of an alert and it prints out all receivers the alert would match ordered and separated by &lt;code&gt;,&lt;/code&gt;. (If you use &lt;code&gt;--verify.receivers&lt;/code&gt; amtool returns error code 1 on mismatch)&lt;/p&gt; &#xA;&lt;p&gt;Example of usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# View routing tree of remote Alertmanager&#xA;$ amtool config routes --alertmanager.url=http://localhost:9090&#xA;&#xA;# Test if alert matches expected receiver&#xA;$ amtool config routes test --config.file=doc/examples/simple.yml --tree --verify.receivers=team-X-pager service=database owner=team-X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;High Availability&lt;/h2&gt; &#xA;&lt;p&gt;Alertmanager&#39;s high availability is in production use at many companies and is enabled by default.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Important: Both UDP and TCP are needed in alertmanager 0.15 and higher for the cluster to work.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;If you are using a firewall, make sure to whitelist the clustering port for both protocols.&lt;/li&gt; &#xA;  &lt;li&gt;If you are running in a container, make sure to expose the clustering port for both protocols.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To create a highly available cluster of the Alertmanager the instances need to be configured to communicate with each other. This is configured using the &lt;code&gt;--cluster.*&lt;/code&gt; flags.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.listen-address&lt;/code&gt; string: cluster listen address (default &#34;0.0.0.0:9094&#34;; empty string disables HA mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.advertise-address&lt;/code&gt; string: cluster advertise address&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.peer&lt;/code&gt; value: initial peers (repeat flag for each additional peer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.peer-timeout&lt;/code&gt; value: peer timeout period (default &#34;15s&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.gossip-interval&lt;/code&gt; value: cluster message propagation speed (default &#34;200ms&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.pushpull-interval&lt;/code&gt; value: lower values will increase convergence speeds at expense of bandwidth (default &#34;1m0s&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.settle-timeout&lt;/code&gt; value: maximum time to wait for cluster connections to settle before evaluating notifications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.tcp-timeout&lt;/code&gt; value: timeout value for tcp connections, reads and writes (default &#34;10s&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.probe-timeout&lt;/code&gt; value: time to wait for ack before marking node unhealthy (default &#34;500ms&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.probe-interval&lt;/code&gt; value: interval between random node probes (default &#34;1s&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.reconnect-interval&lt;/code&gt; value: interval between attempting to reconnect to lost peers (default &#34;10s&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cluster.reconnect-timeout&lt;/code&gt; value: length of time to attempt to reconnect to a lost peer (default: &#34;6h0m0s&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The chosen port in the &lt;code&gt;cluster.listen-address&lt;/code&gt; flag is the port that needs to be specified in the &lt;code&gt;cluster.peer&lt;/code&gt; flag of the other peers.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cluster.advertise-address&lt;/code&gt; flag is required if the instance doesn&#39;t have an IP address that is part of &lt;a href=&#34;https://tools.ietf.org/html/rfc6890&#34;&gt;RFC 6890&lt;/a&gt; with a default route.&lt;/p&gt; &#xA;&lt;p&gt;To start a cluster of three peers on your local machine use &lt;a href=&#34;https://github.com/mattn/goreman&#34;&gt;&lt;code&gt;goreman&lt;/code&gt;&lt;/a&gt; and the Procfile within this repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;goreman start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To point your Prometheus 1.4, or later, instance to multiple Alertmanagers, configure them in your &lt;code&gt;prometheus.yml&lt;/code&gt; configuration file, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;alerting:&#xA;  alertmanagers:&#xA;  - static_configs:&#xA;    - targets:&#xA;      - alertmanager1:9093&#xA;      - alertmanager2:9093&#xA;      - alertmanager3:9093&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Important: Do not load balance traffic between Prometheus and its Alertmanagers, but instead point Prometheus to a list of all Alertmanagers. The Alertmanager implementation expects all alerts to be sent to all Alertmanagers to ensure high availability.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Turn off high availability&lt;/h3&gt; &#xA;&lt;p&gt;If running Alertmanager in high availability mode is not desired, setting &lt;code&gt;--cluster.listen-address=&lt;/code&gt; prevents Alertmanager from listening to incoming peer requests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/prometheus/prometheus/raw/main/CONTRIBUTING.md&#34;&gt;Prometheus contributing page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To contribute to the user interface, refer to &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/alertmanager/main/ui/app/CONTRIBUTING.md&#34;&gt;ui/app/CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/prometheus/alertmanager/main/doc/arch.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License 2.0, see &lt;a href=&#34;https://github.com/prometheus/alertmanager/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>