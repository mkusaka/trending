<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-20T01:38:46Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>assetnote/surf</title>
    <updated>2023-06-20T01:38:46Z</updated>
    <id>tag:github.com,2023-06-20:/assetnote/surf</id>
    <link href="https://github.com/assetnote/surf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Escalate your SSRF vulnerabilities on Modern Cloud Environments. `surf` allows you to filter a list of hosts, returning a list of viable SSRF candidates.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Surf - Escalate your SSRF vulnerabilities on Modern Cloud Environments&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/assetnote/surf/master/gh-docs/surf.png&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;surf&lt;/code&gt; allows you to filter a list of hosts, returning a list of viable SSRF candidates. It does this by sending a HTTP request from your machine to each host, collecting all the hosts that did not respond, and then filtering them into a list of externally facing and internally facing hosts.&lt;/p&gt; &#xA;&lt;p&gt;You can then attempt these hosts wherever an SSRF vulnerability may be present. Due to most SSRF filters only focusing on internal or restricted IP ranges, you&#39;ll be pleasantly surprised when you get SSRF on an external IP that is not accessible via HTTP(s) from your machine.&lt;/p&gt; &#xA;&lt;p&gt;Often you will find that large companies with cloud environments will have external IPs for internal web apps. Traditional SSRF filters will not capture this unless these hosts are specifically added to a blacklist (which they usually never are). This is why this technique can be so powerful.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;This tool requires go 1.19 or above as we rely on &lt;a href=&#34;https://github.com/projectdiscovery/httpx&#34;&gt;httpx&lt;/a&gt; to do the HTTP probing.&lt;/p&gt; &#xA;&lt;p&gt;It can be installed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/assetnote/surf/cmd/surf@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Consider that you have subdomains for &lt;code&gt;bigcorp.com&lt;/code&gt; inside a file named &lt;code&gt;bigcorp.txt&lt;/code&gt;, and you want to find all the SSRF candidates for these subdomains. Here are some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# find all ssrf candidates (including external IP addresses via HTTP probing)&#xA;surf -l bigcorp.txt&#xA;# find all ssrf candidates (including external IP addresses via HTTP probing) with timeout and concurrency settings&#xA;surf -l bigcorp.txt -t 10 -c 200&#xA;# find all ssrf candidates (including external IP addresses via HTTP probing), and just print all hosts&#xA;surf -l bigcorp.txt -d&#xA;# find all hosts that point to an internal/private IP address (no HTTP probing)&#xA;surf -l bigcorp.txt -x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The full list of settings can be found below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;❯ surf -h&#xA;&#xA;███████╗██╗   ██╗██████╗ ███████╗&#xA;██╔════╝██║   ██║██╔══██╗██╔════╝&#xA;███████╗██║   ██║██████╔╝█████╗  &#xA;╚════██║██║   ██║██╔══██╗██╔══╝  &#xA;███████║╚██████╔╝██║  ██║██║     &#xA;╚══════╝ ╚═════╝ ╚═╝  ╚═╝╚═╝         &#xA;                                 &#xA;by shubs @ assetnote                                 &#xA;&#xA;Usage: surf [--hosts FILE] [--concurrency CONCURRENCY] [--timeout SECONDS] [--retries RETRIES] [--disablehttpx] [--disableanalysis]&#xA;&#xA;Options:&#xA;  --hosts FILE, -l FILE&#xA;                         List of assets (hosts or subdomains)&#xA;  --concurrency CONCURRENCY, -c CONCURRENCY&#xA;                         Threads (passed down to httpx) - default 100 [default: 100]&#xA;  --timeout SECONDS, -t SECONDS&#xA;                         Timeout in seconds (passed down to httpx) - default 3 [default: 3]&#xA;  --retries RETRIES, -r RETRIES&#xA;                         Retries on failure (passed down to httpx) - default 2 [default: 2]&#xA;  --disablehttpx, -x     Disable httpx and only output list of hosts that resolve to an internal IP address - default false [default: false]&#xA;  --disableanalysis, -d&#xA;                         Disable analysis and only output list of hosts - default false [default: false]&#xA;  --help, -h             display this help and exit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Output&lt;/h1&gt; &#xA;&lt;p&gt;When running &lt;code&gt;surf&lt;/code&gt;, it will print out the SSRF candidates to &lt;code&gt;stdout&lt;/code&gt;, but it will also save two files inside the folder it is ran from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;external-{timestamp}.txt&lt;/code&gt; - Externally resolving, but unable to send HTTP requests to from your machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;internal-{timestamp}.txt&lt;/code&gt; - Internally resolving, and obviously unable to send HTTP requests from your machine&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These two files will contain the list of hosts that are ideal SSRF candidates to try on your target. The external target list has higher chances of being viable than the internal list.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgements&lt;/h1&gt; &#xA;&lt;p&gt;Under the hood, this tool leverages &lt;a href=&#34;https://github.com/projectdiscovery/httpx&#34;&gt;httpx&lt;/a&gt; to do the HTTP probing. It captures errors returned from httpx, and then performs some basic analysis to determine the most viable candidates for SSRF.&lt;/p&gt; &#xA;&lt;p&gt;This tool was created as a result of a live hacking event for HackerOne (H1-4420 2023).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zincsearch/zincsearch</title>
    <updated>2023-06-20T01:38:46Z</updated>
    <id>tag:github.com,2023-06-20:/zincsearch/zincsearch</id>
    <link href="https://github.com/zincsearch/zincsearch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ZincSearch . A lightweight alternative to elasticsearch that requires minimal resources, written in Go.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/zincsearch/zincsearch&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/zincsearch/zincsearch&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zincsearch-docs.zinc.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docs-Docs-green&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/zinclabs/zincsearch&#34;&gt;&lt;img src=&#34;https://codecov.io/github/zincsearch/zincsearch/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;❗Note: If your use case is of log search (app and security logs) instead of app search (implement search feature in your application or website) then you should check &lt;a href=&#34;https://github.com/openobserve/openobserve&#34;&gt;openobserve/openobserve&lt;/a&gt; project built in rust that is specifically built for log search use case.&lt;/p&gt; &#xA;&lt;h1&gt;ZincSearch&lt;/h1&gt; &#xA;&lt;p&gt;ZincSearch is a search engine that does full text indexing. It is a lightweight alternative to Elasticsearch and runs using a fraction of the resources. It uses &lt;a href=&#34;https://github.com/blugelabs/bluge&#34;&gt;bluge&lt;/a&gt; as the underlying indexing library.&lt;/p&gt; &#xA;&lt;p&gt;It is very simple and easy to operate as opposed to Elasticsearch which requires a couple dozen knobs to understand and tune which you can get up and running in 2 minutes&lt;/p&gt; &#xA;&lt;p&gt;It is a drop-in replacement for Elasticsearch if you are just ingesting data using APIs and searching using kibana (Kibana is not supported with ZincSearch. ZincSearch provides its own UI).&lt;/p&gt; &#xA;&lt;p&gt;Check the below video for a quick demo of ZincSearch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=aZXtuVjt1ow&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zincsearch/zincsearch/main/screenshots/zinc-youtube.jpg&#34; alt=&#34;Zinc Youtube&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Why ZincSearch&lt;/h1&gt; &#xA;&lt;p&gt;While Elasticsearch is a very good product, it is complex and requires lots of resources and is more than a decade old. I built ZincSearch so it becomes easier for folks to use full text search indexing without doing a lot of work.&lt;/p&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Provides full text indexing capability&lt;/li&gt; &#xA; &lt;li&gt;Single binary for installation and running. Binaries available under releases for multiple platforms.&lt;/li&gt; &#xA; &lt;li&gt;Web UI for querying data written in Vue&lt;/li&gt; &#xA; &lt;li&gt;Compatibility with Elasticsearch APIs for ingestion of data (single record and bulk API)&lt;/li&gt; &#xA; &lt;li&gt;Out of the box authentication&lt;/li&gt; &#xA; &lt;li&gt;Schema less - No need to define schema upfront and different documents in the same index can have different fields.&lt;/li&gt; &#xA; &lt;li&gt;Index storage in disk&lt;/li&gt; &#xA; &lt;li&gt;aggregation support&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;Documentation is available at &lt;a href=&#34;https://zincsearch-docs.zinc.dev/&#34;&gt;https://zincsearch-docs.zinc.dev/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;h2&gt;Search screen&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zincsearch/zincsearch/main/screenshots/search_screen.jpg&#34; alt=&#34;Search screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;User management screen&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zincsearch/zincsearch/main/screenshots/users_screen.jpg&#34; alt=&#34;Users screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://zincsearch-docs.zinc.dev/quickstart/&#34;&gt;Quickstart&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Releases&lt;/h1&gt; &#xA;&lt;p&gt;ZincSearch has hundreds of production installations.&lt;/p&gt; &#xA;&lt;h1&gt;ZincSearch Vs OpenObserve&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;ZincSearch&lt;/th&gt; &#xA;   &lt;th&gt;OpenObserve&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ideal use case&lt;/td&gt; &#xA;   &lt;td&gt;App search&lt;/td&gt; &#xA;   &lt;td&gt;Logs, metrics, traces (Immutable Data)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Storage&lt;/td&gt; &#xA;   &lt;td&gt;Disk&lt;/td&gt; &#xA;   &lt;td&gt;Disk, Object (S3), GCS, MinIO, swift and more.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Preferred Use case&lt;/td&gt; &#xA;   &lt;td&gt;App search&lt;/td&gt; &#xA;   &lt;td&gt;Observability (Logs, metrics, traces)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Max data supported&lt;/td&gt; &#xA;   &lt;td&gt;100s of GBs&lt;/td&gt; &#xA;   &lt;td&gt;Petabyte scale&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;High availability&lt;/td&gt; &#xA;   &lt;td&gt;Not available&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Open source&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes, &lt;a href=&#34;https://github.com/openobserve/openobserve&#34;&gt;OpenObserve&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ES API compatibility&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GUI&lt;/td&gt; &#xA;   &lt;td&gt;Basic&lt;/td&gt; &#xA;   &lt;td&gt;Very Advanced, including dashboards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cost&lt;/td&gt; &#xA;   &lt;td&gt;Open source&lt;/td&gt; &#xA;   &lt;td&gt;Open source&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Get started&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://zincsearch-docs.zinc.dev/quickstart/&#34;&gt;Open source docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openobserve.ai/docs&#34;&gt;Open source docs&lt;/a&gt; or &lt;a href=&#34;https://cloud.openobserve.ai&#34;&gt;Cloud&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;How to develop and contribute to ZincSearch&lt;/p&gt; &lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/zincsearch/zincsearch/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; . Also check the &lt;a href=&#34;https://github.com/orgs/zinclabs/projects/3&#34;&gt;roadmap items&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;You can use ZincSearch to index and search any data. Here are some examples that folks have created to index and search enron email dataset using zincsearch:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jorgeloaiza48/Enron-Email-DataSet&#34;&gt;https://github.com/jorgeloaiza48/Enron-Email-DataSet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jhojanperlaza/email_search_engine&#34;&gt;https://github.com/jhojanperlaza/email_search_engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/carlosarraes/zinmail&#34;&gt;https://github.com/carlosarraes/zinmail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devjopa/golab-search&#34;&gt;https://github.com/devjopa/golab-search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avaco2312/zincsearch&#34;&gt;https://github.com/avaco2312/zincsearch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paolorossig/email-indexer&#34;&gt;https://github.com/paolorossig/email-indexer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>hishamk/statetrooper</title>
    <updated>2023-06-20T01:38:46Z</updated>
    <id>tag:github.com,2023-06-20:/hishamk/statetrooper</id>
    <link href="https://github.com/hishamk/statetrooper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;StateTrooper is a Go package that provides a finite state machine (FSM) for managing states. It allows you to define and enforce state transitions based on predefined rules.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;em&gt;Tiny, no frills finite state machine for Go&lt;/em&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hishamk/statetrooper/main/st-logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/hishamk/statetrooper?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/hishamk/statetrooper?status.png&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githack.com/wiki/hishamk/statetrooper/coverage.html&#34;&gt;&lt;img src=&#34;https://github.com/hishamk/statetrooper/wiki/coverage.svg?sanitize=true&#34; alt=&#34;Go Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/hishamk/statetrooper&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/hishamk/statetrooper&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/github/license/hishamk/statetrooper&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/hishamk/statetrooper&#34; alt=&#34;MIT&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/languages/code-size/hishamk/statetrooper&#34; alt=&#34;Code size&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;StateTrooper is a Go package that provides a finite state machine (FSM) for managing states. It allows you to define and enforce state transitions based on predefined rules.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generic support for different comparable types.&lt;/li&gt; &#xA; &lt;li&gt;Transition history with metadata.&lt;/li&gt; &#xA; &lt;li&gt;Thread safe.&lt;/li&gt; &#xA; &lt;li&gt;Super minimal - no triggers/events or actions/callbacks. For my use case I just needed a structured, serializable way to constrain and track state transitions.&lt;/li&gt; &#xA; &lt;li&gt;Is able to generate &lt;a href=&#34;https://mermaid.js.org&#34;&gt;Mermaid.js&lt;/a&gt; diagram descriptions for the transition rules and transition history.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Rules diagram:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hishamk/statetrooper/main/order-rules-diagram.png&#34; alt=&#34;Mermaid.js rules diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Transition history diagram:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hishamk/statetrooper/main/order-th-diagram.png&#34; alt=&#34;Mermaid.js transition history diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install StateTrooper, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/hishamk/statetrooper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Import the &lt;code&gt;statetrooper&lt;/code&gt; package into your Go code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/hishamk/statetrooper&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create an instance of the FSM with the desired state enum type and initial state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fsm := statetrooper.NewFSM[CustomStateEnum](CustomStateEnumA)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add valid transitions between states. AddRule takes variadic parameters for the allowed states:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Created -&amp;gt; Picked or Canceled&#xA;AddRule(StatusCreated, StatusPicked, StatusCanceled)&#xA;// Picked -&amp;gt; Packed or Canceled&#xA;AddRule(StatusPicked, StatusPacked, StatusCanceled)&#xA;// Packed -&amp;gt; Shipped&#xA;AddRule(StatusPacked, StatusShipped)&#xA;// Shipped -&amp;gt; Delivered&#xA;AddRule(StatusShipped, StatusDelivered)&#xA;// Canceled -&amp;gt; Reinstated&#xA;AddRule(StatusCanceled, StatusReinstated)&#xA;// Reinstated -&amp;gt; Picked or Canceled&#xA;AddRule(StatusReinstated, StatusPicked, StatusCanceled)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check if a transition from the current state to the target state is valid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;canTransition := fsm.CanTransition(targetState)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transition the entity from the current state to the target state with no metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;newState, err := fsm.Transition(targetState, nil)&#xA;if err != nil {&#xA;    // Handle the error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Transition the entity from the current state to the target state with metadata:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;newState, err := fsm.Transition(&#xA;&#x9;CustomStateEnumB,&#xA;&#x9;map[string]string{&#xA;&#x9;&#x9;&#34;requested_by&#34;:  &#34;Mahmoud&#34;,&#xA;&#x9;&#x9;&#34;logic_version&#34;: &#34;1.0&#34;,&#xA;&#x9;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generate Mermaid.js rules diagram:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;diagram, _ :=order.State.GenerateMermaidRulesDiagram()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;simply use the generated Mermaid code with your Mermaid visualizer to generate the diagram&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;graph LR;&#xA;shipped;&#xA;canceled;&#xA;reinstated;&#xA;created;&#xA;picked;&#xA;packed;&#xA;created --&amp;gt; picked;&#xA;created --&amp;gt; canceled;&#xA;picked --&amp;gt; packed;&#xA;picked --&amp;gt; canceled;&#xA;packed --&amp;gt; shipped;&#xA;shipped --&amp;gt; delivered;&#xA;canceled --&amp;gt; reinstated;&#xA;reinstated --&amp;gt; picked;&#xA;reinstated --&amp;gt; canceled;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hishamk/statetrooper/main/order-rules-diagram.png&#34; alt=&#34;Mermaid.js diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generate Mermaid.js transition history diagram:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;diagram, _ :=order.State.GenerateMermaidTransitionHistoryDiagram()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;graph TD;&#xA;packed;&#xA;shipped;&#xA;delivered;&#xA;created;&#xA;picked;&#xA;canceled;&#xA;reinstated;&#xA;created --&amp;gt;|1| picked;&#xA;picked --&amp;gt;|2| canceled;&#xA;canceled --&amp;gt;|3| reinstated;&#xA;reinstated --&amp;gt;|4| picked;&#xA;picked --&amp;gt;|5| packed;&#xA;packed --&amp;gt;|6| shipped;&#xA;shipped --&amp;gt;|7| delivered;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hishamk/statetrooper/main/order-th-diagram.png&#34; alt=&#34;Mermaid.js diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Benchmark&lt;/th&gt; &#xA;   &lt;th&gt;Operations&lt;/th&gt; &#xA;   &lt;th&gt;Time per Operation&lt;/th&gt; &#xA;   &lt;th&gt;Memory Allocated per Operation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Benchmark_singleTransition&lt;/td&gt; &#xA;   &lt;td&gt;5,166,985&lt;/td&gt; &#xA;   &lt;td&gt;273.8 ns/op&lt;/td&gt; &#xA;   &lt;td&gt;314 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Benchmark_twoTransitions&lt;/td&gt; &#xA;   &lt;td&gt;2,835,214&lt;/td&gt; &#xA;   &lt;td&gt;513.6 ns/op&lt;/td&gt; &#xA;   &lt;td&gt;577 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Benchmark_accessCurrentState&lt;/td&gt; &#xA;   &lt;td&gt;75,695,847&lt;/td&gt; &#xA;   &lt;td&gt;14.36 ns/op&lt;/td&gt; &#xA;   &lt;td&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Benchmark_accessTransitions&lt;/td&gt; &#xA;   &lt;td&gt;39,356,628&lt;/td&gt; &#xA;   &lt;td&gt;28.74 ns/op&lt;/td&gt; &#xA;   &lt;td&gt;48 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Benchmark_marshalJSON&lt;/td&gt; &#xA;   &lt;td&gt;1,000,000&lt;/td&gt; &#xA;   &lt;td&gt;1,174 ns/op&lt;/td&gt; &#xA;   &lt;td&gt;384 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Benchmark_unmarshalJSON&lt;/td&gt; &#xA;   &lt;td&gt;318,949&lt;/td&gt; &#xA;   &lt;td&gt;3,741 ns/op&lt;/td&gt; &#xA;   &lt;td&gt;1,240 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example usage with a custom entity struct and state enum:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type OrderStatusEnum string&#xA;&#xA;// Enum values for the custom entity&#xA;const (&#xA;&#x9;StatusCreated    OrderStatusEnum = &#34;created&#34;&#xA;&#x9;StatusPicked     OrderStatusEnum = &#34;picked&#34;&#xA;&#x9;StatusPacked     OrderStatusEnum = &#34;packed&#34;&#xA;&#x9;StatusShipped    OrderStatusEnum = &#34;shipped&#34;&#xA;&#x9;StatusDelivered  OrderStatusEnum = &#34;delivered&#34;&#xA;&#x9;StatusCanceled   OrderStatusEnum = &#34;canceled&#34;&#xA;&#x9;StatusReinstated OrderStatusEnum = &#34;reinstated&#34;&#xA;)&#xA;&#xA;// Order represents a custom entity with its current state&#xA;type Order struct {&#xA;&#x9;State *statetrooper.FSM[OrderStatusEnum]&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;// Create a new order with the initial state&#xA;&#x9;order := &amp;amp;Order{State: statetrooper.NewFSM[OrderStatusEnum](StatusCreated)}&#xA;&#xA;&#x9;// Define the valid state transitions for the order&#xA;&#xA;&#x9;// Created -&amp;gt; Picked or Canceled&#xA;&#x9;order.State.AddRule(StatusCreated, StatusPicked, StatusCanceled)&#xA;&#x9;// Picked -&amp;gt; Packed or Canceled&#xA;&#x9;order.State.AddRule(StatusPicked, StatusPacked, StatusCanceled)&#xA;&#x9;// Packed -&amp;gt; Shipped&#xA;&#x9;order.State.AddRule(StatusPacked, StatusShipped)&#xA;&#x9;// Shipped -&amp;gt; Delivered&#xA;&#x9;order.State.AddRule(StatusShipped, StatusDelivered)&#xA;&#x9;// Canceled -&amp;gt; Reinstated&#xA;&#x9;order.State.AddRule(StatusCanceled, StatusReinstated)&#xA;&#x9;// Reinstated -&amp;gt; Picked or Canceled&#xA;&#x9;order.State.AddRule(StatusReinstated, StatusPicked, StatusCanceled)&#xA;&#xA;&#x9;// Check if a transition is valid&#xA;&#x9;canTransition := order.State.CanTransition(StatusPicked)&#xA;&#x9;fmt.Printf(&#34;Can transition to %s: %t\n&#34;, StatusPicked, canTransition)&#xA;&#xA;&#x9;// Transition to picked&#xA;&#x9;_, err := order.State.Transition(StatusPicked, nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition error:&#34;, err)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition successful. Current state:&#34;, order.State.CurrentState())&#xA;&#x9;}&#xA;&#xA;&#x9;// Check if a transition to canceled is valid&#xA;&#x9;canTransition = order.State.CanTransition(StatusCanceled)&#xA;&#x9;fmt.Printf(&#34;Can transition to %s: %t\n&#34;, StatusCanceled, canTransition)&#xA;&#xA;&#x9;// Transition to canceled&#xA;&#x9;_, err = order.State.Transition(StatusCanceled, nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition error:&#34;, err)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition successful. Current state:&#34;, order.State.CurrentState())&#xA;&#x9;}&#xA;&#xA;&#x9;// Check if we can resinstate the order&#xA;&#x9;canTransition = order.State.CanTransition(StatusReinstated)&#xA;&#x9;fmt.Printf(&#34;Can transition to %s: %t\n&#34;, StatusReinstated, canTransition)&#xA;&#xA;&#x9;// Transition to reinstated&#xA;&#x9;_, err = order.State.Transition(StatusReinstated, nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition error:&#34;, err)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition successful. Current state:&#34;, order.State.CurrentState())&#xA;&#x9;}&#xA;&#xA;&#x9;// Transition to picked&#xA;&#x9;_, err = order.State.Transition(StatusPicked, nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition error:&#34;, err)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition successful. Current state:&#34;, order.State.CurrentState())&#xA;&#x9;}&#xA;&#xA;&#x9;// Transition to packed&#xA;&#x9;_, err = order.State.Transition(StatusPacked, nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition error:&#34;, err)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition successful. Current state:&#34;, order.State.CurrentState())&#xA;&#x9;}&#xA;&#xA;&#x9;// Transition to shipped&#xA;&#x9;_, err = order.State.Transition(&#xA;&#x9;&#x9;StatusShipped,&#xA;&#x9;&#x9;map[string]string{&#xA;&#x9;&#x9;&#x9;&#34;carrier&#34;:         &#34;Aramex&#34;,&#xA;&#x9;&#x9;&#x9;&#34;tracking_number&#34;: &#34;1234567890&#34;,&#xA;&#x9;&#x9;})&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition error:&#34;, err)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition successful. Current state:&#34;, order.State.CurrentState())&#xA;&#x9;}&#xA;&#xA;&#x9;// Transition to delivered&#xA;&#x9;_, err = order.State.Transition(StatusDelivered, nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition error:&#34;, err)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&#34;Transition successful. Current state:&#34;, order.State.CurrentState())&#xA;&#x9;}&#xA;&#xA;&#x9;// print the current FSM data&#xA;&#x9;fmt.Println(&#34;Current FSM data:&#34;, order.State)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that states can be defined using any comparable type, such as strings, int, etc e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// CustomStateEnum represents the state enum for the custom entity&#xA;type CustomStateEnum int&#xA;&#xA;// Enum values for the custom entity&#xA;const (&#xA;&#x9;CustomStateEnumA CustomStateEnum = iota&#xA;&#x9;CustomStateEnumB&#xA;&#x9;CustomStateEnumC&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Serialization&lt;/h2&gt; &#xA;&lt;p&gt;Current state, transition history and any metadata can be marshalled into JSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;json, err := json.Marshal(order.State)&#xA;if err != nil {&#xA;&#x9;fmt.Println(&#34;JSON error:&#34;, err)&#xA;} else {&#xA;&#x9;fmt.Println(&#34;Current FSM data as JSON:&#34;, string(json))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;current_state&#34;: &#34;delivered&#34;,&#xA;  &#34;transitions&#34;: [&#xA;    {&#xA;      &#34;from_state&#34;: &#34;created&#34;,&#xA;      &#34;to_state&#34;: &#34;picked&#34;,&#xA;      &#34;timestamp&#34;: &#34;2023-06-18T11:44:42.776422+03:00&#34;,&#xA;      &#34;metadata&#34;: null&#xA;    },&#xA;    {&#xA;      &#34;from_state&#34;: &#34;picked&#34;,&#xA;      &#34;to_state&#34;: &#34;canceled&#34;,&#xA;      &#34;timestamp&#34;: &#34;2023-06-18T11:44:42.77643+03:00&#34;,&#xA;      &#34;metadata&#34;: null&#xA;    },&#xA;    {&#xA;      &#34;from_state&#34;: &#34;canceled&#34;,&#xA;      &#34;to_state&#34;: &#34;reinstated&#34;,&#xA;      &#34;timestamp&#34;: &#34;2023-06-18T11:44:42.776435+03:00&#34;,&#xA;      &#34;metadata&#34;: null&#xA;    },&#xA;    {&#xA;      &#34;from_state&#34;: &#34;reinstated&#34;,&#xA;      &#34;to_state&#34;: &#34;picked&#34;,&#xA;      &#34;timestamp&#34;: &#34;2023-06-18T11:44:42.77644+03:00&#34;,&#xA;      &#34;metadata&#34;: null&#xA;    },&#xA;    {&#xA;      &#34;from_state&#34;: &#34;picked&#34;,&#xA;      &#34;to_state&#34;: &#34;packed&#34;,&#xA;      &#34;timestamp&#34;: &#34;2023-06-18T11:44:42.776442+03:00&#34;,&#xA;      &#34;metadata&#34;: null&#xA;    },&#xA;    {&#xA;      &#34;from_state&#34;: &#34;packed&#34;,&#xA;      &#34;to_state&#34;: &#34;shipped&#34;,&#xA;      &#34;timestamp&#34;: &#34;2023-06-18T11:44:42.776451+03:00&#34;,&#xA;      &#34;metadata&#34;: {&#xA;        &#34;carrier&#34;: &#34;Aramex&#34;,&#xA;        &#34;tracking_number&#34;: &#34;1234567890&#34;&#xA;      }&#xA;    },&#xA;    {&#xA;      &#34;from_state&#34;: &#34;shipped&#34;,&#xA;      &#34;to_state&#34;: &#34;delivered&#34;,&#xA;      &#34;timestamp&#34;: &#34;2023-06-18T11:44:42.776454+03:00&#34;,&#xA;      &#34;metadata&#34;: null&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This package is licensed under the MIT License. See the &lt;a href=&#34;https://raw.githubusercontent.com/hishamk/statetrooper/main/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for your interest in contributing! Feel free to PR bug fixes and documentation improvements. For new features or functional alterations, please open an issue for discussion prior to submitting a PR.&lt;/p&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;Synthwave title text generated courtesy of &lt;a href=&#34;https://www.textstudio.com/&#34;&gt;Text Effect&lt;/a&gt;. Trooper Gropher generated via midjourney prompt: &lt;em&gt;a photorealistic rendering of the Go/Golang gopher mascot holding a sheriff&#39;s badge. Color palette similar to mascot&#39;s (baby blue or light beige). Buck teeth. Round glasses. Big smile. Transparent background. --v 5&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>