<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-03T02:22:08Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dgraph-io/badger</title>
    <updated>2023-03-03T02:22:08Z</updated>
    <id>tag:github.com,2023-03-03:/dgraph-io/badger</id>
    <link href="https://github.com/dgraph-io/badger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast key-value DB in Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BadgerDB&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/dgraph-io/badger/v4&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/dgraph-io/badger/v4.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/dgraph-io/badger/v4&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/dgraph-io/badger/v4&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/dgraph-io/badger?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/dgraph-io/badger/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dgraph-io/badger/actions/workflows/ci-badger-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/dgraph-io/badger/actions/workflows/ci-badger-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;ci-badger-tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dgraph-io/badger/actions/workflows/ci-badger-bank-tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/dgraph-io/badger/actions/workflows/ci-badger-bank-tests.yml/badge.svg?sanitize=true&#34; alt=&#34;ci-badger-bank-tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dgraph-io/badger/actions/workflows/ci-golang-lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/dgraph-io/badger/actions/workflows/ci-golang-lint.yml/badge.svg?sanitize=true&#34; alt=&#34;ci-golang-lint&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/images/diggy-shadow.png&#34; alt=&#34;Badger mascot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;BadgerDB is an embeddable, persistent and fast key-value (KV) database written in pure Go. It is the underlying database for &lt;a href=&#34;https://dgraph.io&#34;&gt;Dgraph&lt;/a&gt;, a fast, distributed graph database. It&#39;s meant to be a performant alternative to non-Go-based key-value stores like RocksDB.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;Badger is stable and is being used to serve data sets worth hundreds of terabytes. Badger supports concurrent ACID transactions with serializable snapshot isolation (SSI) guarantees. A Jepsen-style bank test runs nightly for 8h, with &lt;code&gt;--race&lt;/code&gt; flag and ensures the maintenance of transactional guarantees. Badger has also been tested to work with filesystem level anomalies, to ensure persistence and consistency. Badger is being used by a number of projects which includes Dgraph, Jaeger Tracing, UsenetExpress, and many more.&lt;/p&gt; &#xA;&lt;p&gt;The list of projects using Badger can be found &lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#projects-using-badger&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Badger v1.0 was released in Nov 2017, and the latest version that is data-compatible with v1.0 is v1.6.0.&lt;/p&gt; &#xA;&lt;p&gt;Badger v2.0 was released in Nov 2019 with a new storage format which won&#39;t be compatible with all of the v1.x. Badger v2.0 supports compression, encryption and uses a cache to speed up lookup.&lt;/p&gt; &#xA;&lt;p&gt;Badger v3.0 was released in January 2021. This release improves compaction performance.&lt;/p&gt; &#xA;&lt;p&gt;Please consult the &lt;a href=&#34;https://github.com/dgraph-io/badger/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; for more detailed information on releases.&lt;/p&gt; &#xA;&lt;p&gt;For more details on our version naming schema please read &lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#choosing-a-version&#34;&gt;Choosing a version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#badgerdb&#34;&gt;BadgerDB&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#project-status&#34;&gt;Project Status&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#installing&#34;&gt;Installing&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#installing-badger-command-line-tool&#34;&gt;Installing Badger Command Line Tool&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#choosing-a-version&#34;&gt;Choosing a version&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#badger-documentation&#34;&gt;Badger Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#resources&#34;&gt;Resources&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#blog-posts&#34;&gt;Blog Posts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#design&#34;&gt;Design&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#comparisons&#34;&gt;Comparisons&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#projects-using-badger&#34;&gt;Projects Using Badger&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;To start using Badger, install Go 1.19 or above. Badger v3 needs go modules. From your project, run the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/dgraph-io/badger/v4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will retrieve the library.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Badger Command Line Tool&lt;/h4&gt; &#xA;&lt;p&gt;Badger provides a CLI tool which can perform certain operations like offline backup/restore. To install the Badger CLI, retrieve the repository and checkout the desired version. Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd badger&#xA;$ go install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the badger command line utility into your $GOBIN path.&lt;/p&gt; &#xA;&lt;h4&gt;Choosing a version&lt;/h4&gt; &#xA;&lt;p&gt;BadgerDB is a pretty special package from the point of view that the most important change we can make to it is not on its API but rather on how data is stored on disk.&lt;/p&gt; &#xA;&lt;p&gt;This is why we follow a version naming schema that differs from Semantic Versioning.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New major versions are released when the data format on disk changes in an incompatible way.&lt;/li&gt; &#xA; &lt;li&gt;New minor versions are released whenever the API changes but data compatibility is maintained. Note that the changes on the API could be backward-incompatible - unlike Semantic Versioning.&lt;/li&gt; &#xA; &lt;li&gt;New patch versions are released when there&#39;s no changes to the data format nor the API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Following these rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v1.5.0 and v1.6.0 can be used on top of the same files without any concerns, as their major version is the same, therefore the data format on disk is compatible.&lt;/li&gt; &#xA; &lt;li&gt;v1.6.0 and v2.0.0 are data incompatible as their major version implies, so files created with v1.6.0 will need to be converted into the new format before they can be used by v2.0.0.&lt;/li&gt; &#xA; &lt;li&gt;v2.x.x and v3.x.x are data incompatible as their major version implies, so files created with v2.x.x will need to be converted into the new format before they can be used by v3.0.0.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a longer explanation on the reasons behind using a new versioning naming schema, you can read &lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/VERSIONING.md&#34;&gt;VERSIONING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Badger Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Badger Documentation is available at &lt;a href=&#34;https://dgraph.io/docs/badger&#34;&gt;https://dgraph.io/docs/badger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;h3&gt;Blog Posts&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open.dgraph.io/post/badger/&#34;&gt;Introducing Badger: A fast key-value store written natively in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open.dgraph.io/post/alice/&#34;&gt;Make Badger crash resilient with ALICE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open.dgraph.io/post/badger-lmdb-boltdb/&#34;&gt;Badger vs LMDB vs BoltDB: Benchmarking key-value databases in Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://open.dgraph.io/post/badger-txn/&#34;&gt;Concurrent ACID Transactions in Badger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;Badger was written with these design goals in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write a key-value database in pure Go.&lt;/li&gt; &#xA; &lt;li&gt;Use latest research to build the fastest KV database for data sets spanning terabytes.&lt;/li&gt; &#xA; &lt;li&gt;Optimize for SSDs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Badger’s design is based on a paper titled &lt;em&gt;&lt;a href=&#34;https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf&#34;&gt;WiscKey: Separating Keys from Values in SSD-conscious Storage&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Comparisons&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Badger&lt;/th&gt; &#xA;   &lt;th&gt;RocksDB&lt;/th&gt; &#xA;   &lt;th&gt;BoltDB&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Design&lt;/td&gt; &#xA;   &lt;td&gt;LSM tree with value log&lt;/td&gt; &#xA;   &lt;td&gt;LSM tree only&lt;/td&gt; &#xA;   &lt;td&gt;B+ tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;High Read throughput&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;High Write throughput&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Designed for SSDs&lt;/td&gt; &#xA;   &lt;td&gt;Yes (with latest research &lt;sup&gt;1&lt;/sup&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Not specifically &lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Embeddable&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sorted KV access&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pure Go (no Cgo)&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Transactions&lt;/td&gt; &#xA;   &lt;td&gt;Yes, ACID, concurrent with SSI&lt;sup&gt;3&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes (but non-ACID)&lt;/td&gt; &#xA;   &lt;td&gt;Yes, ACID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Snapshots&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TTL support&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3D access (key-value-version)&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;sup&gt;4&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; The &lt;a href=&#34;https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf&#34;&gt;WISCKEY paper&lt;/a&gt; (on which Badger is based) saw big wins with separating values from keys, significantly reducing the write amplification compared to a typical LSM tree.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;2&lt;/sup&gt; RocksDB is an SSD optimized version of LevelDB, which was designed specifically for rotating disks. As such RocksDB&#39;s design isn&#39;t aimed at SSDs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;3&lt;/sup&gt; SSI: Serializable Snapshot Isolation. For more details, see the blog post &lt;a href=&#34;https://blog.dgraph.io/post/badger-txn/&#34;&gt;Concurrent ACID Transactions in Badger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;4&lt;/sup&gt; Badger provides direct access to value versions via its Iterator API. Users can also specify how many versions to keep per key via Options.&lt;/p&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;We have run comprehensive benchmarks against RocksDB, Bolt and LMDB. The benchmarking code, and the detailed logs for the benchmarks can be found in the &lt;a href=&#34;https://github.com/dgraph-io/badger-bench&#34;&gt;badger-bench&lt;/a&gt; repo. More explanation, including graphs can be found the blog posts (linked above).&lt;/p&gt; &#xA;&lt;h2&gt;Projects Using Badger&lt;/h2&gt; &#xA;&lt;p&gt;Below is a list of known projects that use Badger:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dgraph-io/dgraph&#34;&gt;Dgraph&lt;/a&gt; - Distributed graph database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jaegertracing/jaeger&#34;&gt;Jaeger&lt;/a&gt; - Distributed tracing platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ipfs/go-ipfs&#34;&gt;go-ipfs&lt;/a&gt; - Go client for the InterPlanetary File System (IPFS), a new hypermedia distribution protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-ego/riot&#34;&gt;Riot&lt;/a&gt; - An open-source, distributed search engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emitter-io/emitter&#34;&gt;emitter&lt;/a&gt; - Scalable, low latency, distributed pub/sub broker with message storage, uses MQTT, gossip and badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cube2222/octosql&#34;&gt;OctoSQL&lt;/a&gt; - Query tool that allows you to join, analyse and transform data from multiple databases using SQL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dkron.io/&#34;&gt;Dkron&lt;/a&gt; - Distributed, fault tolerant job scheduling system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smallstep/certificates&#34;&gt;smallstep/certificates&lt;/a&gt; - Step-ca is an online certificate authority for secure, automated certificate management.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/celrenheit/sandglass&#34;&gt;Sandglass&lt;/a&gt; - distributed, horizontally scalable, persistent, time sorted message queue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grab/talaria&#34;&gt;TalariaDB&lt;/a&gt; - Grab&#39;s Distributed, low latency time-series database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/salesforce/sloop&#34;&gt;Sloop&lt;/a&gt; - Salesforce&#39;s Kubernetes History Visualization Project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://usenetexpress.com/&#34;&gt;Usenet Express&lt;/a&gt; - Serving over 300TB of data with Badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/appleboy/gorush&#34;&gt;gorush&lt;/a&gt; - A push notification server written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zero-os/0-stor&#34;&gt;0-stor&lt;/a&gt; - Single device object store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dispatchlabs/disgo&#34;&gt;Dispatch Protocol&lt;/a&gt; - Blockchain protocol for distributed application data analytics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/valinurovam/garagemq&#34;&gt;GarageMQ&lt;/a&gt; - AMQP server written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alash3al.github.io/redix/&#34;&gt;RedixDB&lt;/a&gt; - A real-time persistent key-value store with the same redis protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BBVA/raft-badger&#34;&gt;BBVA&lt;/a&gt; - Raft backend implementation using BadgerDB for Hashicorp raft.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Fantom-foundation/go-lachesis&#34;&gt;Fantom&lt;/a&gt; - aBFT Consensus platform for distributed applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/decred/dcrdata&#34;&gt;decred&lt;/a&gt; - An open, progressive, and self-funding cryptocurrency with a system of community-based governance integrated into its blockchain.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opennetsys/c3-go&#34;&gt;OpenNetSys&lt;/a&gt; - Create useful dApps in any software language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/honeytrap/honeytrap&#34;&gt;HoneyTrap&lt;/a&gt; - An extensible and opensource system for running, monitoring and managing honeypots.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/insolar/insolar&#34;&gt;Insolar&lt;/a&gt; - Enterprise-ready blockchain platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iotexproject/iotex-core&#34;&gt;IoTeX&lt;/a&gt; - The next generation of the decentralized network for IoT powered by scalability- and privacy-centric blockchains.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kataras/go-sessions&#34;&gt;go-sessions&lt;/a&gt; - The sessions manager for Go net/http and fasthttp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mosaicnetworks/babble&#34;&gt;Babble&lt;/a&gt; - BFT Consensus platform for distributed applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpincas/tormenta&#34;&gt;Tormenta&lt;/a&gt; - Embedded object-persistence layer / simple JSON database for Go projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timshannon/badgerhold&#34;&gt;BadgerHold&lt;/a&gt; - An embeddable NoSQL store for querying Go types built on Badger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/didil/goblero&#34;&gt;Goblero&lt;/a&gt; - Pure Go embedded persistent job queue backed by BadgerDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.surfline.com&#34;&gt;Surfline&lt;/a&gt; - Serving global wave and weather forecast data with Badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mosuka/cete&#34;&gt;Cete&lt;/a&gt; - Simple and highly available distributed key-value store built on Badger. Makes it easy bringing up a cluster of Badger with Raft consensus algorithm by hashicorp/raft.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://volument.com/&#34;&gt;Volument&lt;/a&gt; - A new take on website analytics backed by Badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kvdb.io/&#34;&gt;KVdb&lt;/a&gt; - Hosted key-value store and serverless platform built on top of Badger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/asad-awadia/terminotes&#34;&gt;Terminotes&lt;/a&gt; - Self hosted notes storage and search server - storage powered by BadgerDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyroscope-io/pyroscope&#34;&gt;Pyroscope&lt;/a&gt; - Open source confinuous profiling platform built with BadgerDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bgokden/veri&#34;&gt;Veri&lt;/a&gt; - A distributed feature store optimized for Search and Recommendation tasks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikkelHJuul/bIter&#34;&gt;bIter&lt;/a&gt; - A library and Iterator interface for working with the &lt;code&gt;badger.Iterator&lt;/code&gt;, simplifying from-to, and prefix mechanics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MikkelHJuul/ld&#34;&gt;ld&lt;/a&gt; - (Lean Database) A very simple gRPC-only key-value database, exposing BadgerDB with key-range scanning semantics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darkweak/Souin&#34;&gt;Souin&lt;/a&gt; - A RFC compliant HTTP cache with lot of other features based on Badger for the storage. Compatible with all existing reverse-proxies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xuperchain/xupercore&#34;&gt;Xuperchain&lt;/a&gt; - A highly flexible blockchain architecture with great transaction performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qichengzx/m2&#34;&gt;m2&lt;/a&gt; - A simple http key/value store based on the raft protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChainSafe/chaindb&#34;&gt;chaindb&lt;/a&gt; - A blockchain storage layer used by &lt;a href=&#34;https://chainsafe.github.io/gossamer/&#34;&gt;Gossamer&lt;/a&gt;, a Go client for the &lt;a href=&#34;https://polkadot.network/&#34;&gt;Polkadot Network&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitalvas/vxdb&#34;&gt;vxdb&lt;/a&gt; - Simple schema-less Key-Value NoSQL database with simplest API interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/opacity/storage-node&#34;&gt;Opacity&lt;/a&gt; - Backend implementation for the Opacity storage project&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vaccovecrana/vephar&#34;&gt;Vephar&lt;/a&gt; - A minimal key/value store using hashicorp-raft for cluster coordination and Badger for data storage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nlnwa/gowarcserver&#34;&gt;gowarcserver&lt;/a&gt; - Open-source server for warc files. Can be used in conjunction with pywb&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/onflow/flow-go&#34;&gt;flow-go&lt;/a&gt; - A fast, secure, and developer-friendly blockchain built to support the next generation of games, apps and the digital assets that power them.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wrgl.co&#34;&gt;Wrgl&lt;/a&gt; - A data version control system that works like Git but specialized to store and diff CSV.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are using Badger in a project please send a pull request to add it to the list.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing to Badger see &lt;a href=&#34;https://raw.githubusercontent.com/dgraph-io/badger/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please use &lt;a href=&#34;https://github.com/dgraph-io/badger/issues&#34;&gt;Github issues&lt;/a&gt; for filing bugs.&lt;/li&gt; &#xA; &lt;li&gt;Please use &lt;a href=&#34;https://discuss.dgraph.io&#34;&gt;discuss.dgraph.io&lt;/a&gt; for questions, discussions, and feature requests.&lt;/li&gt; &#xA; &lt;li&gt;Follow us on Twitter &lt;a href=&#34;https://twitter.com/dgraphlabs&#34;&gt;@dgraphlabs&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>prometheus/pushgateway</title>
    <updated>2023-03-03T02:22:08Z</updated>
    <id>tag:github.com,2023-03-03:/prometheus/pushgateway</id>
    <link href="https://github.com/prometheus/pushgateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Push acceptor for ephemeral and batch jobs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prometheus Pushgateway&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/prometheus/pushgateway&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/prometheus/pushgateway/tree/master.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/prometheus/pushgateway&#34;&gt;&lt;img src=&#34;https://quay.io/repository/prometheus/pushgateway/status&#34; alt=&#34;Docker Repository on Quay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/prom/pushgateway/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/prom/pushgateway.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Prometheus Pushgateway exists to allow ephemeral and batch jobs to expose their metrics to Prometheus. Since these kinds of jobs may not exist long enough to be scraped, they can instead push their metrics to a Pushgateway. The Pushgateway then exposes these metrics to Prometheus.&lt;/p&gt; &#xA;&lt;h2&gt;Non-goals&lt;/h2&gt; &#xA;&lt;p&gt;First of all, the Pushgateway is not capable of turning Prometheus into a push-based monitoring system. For a general description of use cases for the Pushgateway, please read &lt;a href=&#34;https://prometheus.io/docs/practices/pushing/&#34;&gt;When To Use The Pushgateway&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Pushgateway is explicitly not an &lt;em&gt;aggregator or distributed counter&lt;/em&gt; but rather a metrics cache. It does not have &lt;a href=&#34;https://github.com/etsy/statsd&#34;&gt;statsd&lt;/a&gt;-like semantics. The metrics pushed are exactly the same as you would present for scraping in a permanently running program. If you need distributed counting, you could either use the actual statsd in combination with the &lt;a href=&#34;https://github.com/prometheus/statsd_exporter&#34;&gt;Prometheus statsd exporter&lt;/a&gt;, or have a look at &lt;a href=&#34;https://github.com/weaveworks/prom-aggregation-gateway&#34;&gt;Weavework&#39;s aggregation gateway&lt;/a&gt;. With more experience gathered, the Prometheus project might one day be able to provide a native solution, separate from or possibly even as part of the Pushgateway.&lt;/p&gt; &#xA;&lt;p&gt;For machine-level metrics, the &lt;a href=&#34;https://github.com/prometheus/node_exporter/raw/master/README.md#textfile-collector&#34;&gt;textfile&lt;/a&gt; collector of the Node exporter is usually more appropriate. The Pushgateway is intended for service-level metrics.&lt;/p&gt; &#xA;&lt;p&gt;The Pushgateway is not an &lt;em&gt;event store&lt;/em&gt;. While you can use Prometheus as a data source for &lt;a href=&#34;http://docs.grafana.org/reference/annotations/&#34;&gt;Grafana annotations&lt;/a&gt;, tracking something like release events has to happen with some event-logging framework.&lt;/p&gt; &#xA;&lt;p&gt;A while ago, we &lt;a href=&#34;https://github.com/prometheus/pushgateway/issues/19&#34;&gt;decided to not implement a “timeout” or TTL for pushed metrics&lt;/a&gt; because almost all proposed use cases turned out to be anti-patterns we strongly discourage. You can follow a more recent discussion on the &lt;a href=&#34;https://groups.google.com/forum/#!topic/prometheus-developers/9IyUxRvhY7w&#34;&gt;prometheus-developers mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run it&lt;/h2&gt; &#xA;&lt;p&gt;Download binary releases for your platform from the &lt;a href=&#34;https://github.com/prometheus/pushgateway/releases&#34;&gt;release page&lt;/a&gt; and unpack the tarball.&lt;/p&gt; &#xA;&lt;p&gt;If you want to compile yourself from the sources, you need a working Go setup. Then use the provided Makefile (type &lt;code&gt;make&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For the most basic setup, just start the binary. To change the address to listen on, use the &lt;code&gt;--web.listen-address&lt;/code&gt; flag (e.g. &#34;0.0.0.0:9091&#34; or &#34;:9091&#34;). By default, Pushgateway does not persist metrics. However, the &lt;code&gt;--persistence.file&lt;/code&gt; flag allows you to specify a file in which the pushed metrics will be persisted (so that they survive restarts of the Pushgateway).&lt;/p&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can deploy the Pushgateway using the &lt;a href=&#34;https://hub.docker.com/r/prom/pushgateway&#34;&gt;prom/pushgateway&lt;/a&gt; Docker image.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull prom/pushgateway&#xA;&#xA;docker run -d -p 9091:9091 prom/pushgateway&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use it&lt;/h2&gt; &#xA;&lt;h3&gt;Configure the Pushgateway as a target to scrape&lt;/h3&gt; &#xA;&lt;p&gt;The Pushgateway has to be configured as a target to scrape by Prometheus, using one of the usual methods. &lt;em&gt;However, you should always set &lt;code&gt;honor_labels: true&lt;/code&gt; in the scrape config&lt;/em&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/pushgateway/master/#about-the-job-and-instance-labels&#34;&gt;below&lt;/a&gt; for a detailed explanation).&lt;/p&gt; &#xA;&lt;h3&gt;Libraries&lt;/h3&gt; &#xA;&lt;p&gt;Prometheus client libraries should have a feature to push the registered metrics to a Pushgateway. Usually, a Prometheus client passively presents metric for scraping by a Prometheus server. A client library that supports pushing has a push function, which needs to be called by the client code. It will then actively push the metrics to a Pushgateway, using the API described below.&lt;/p&gt; &#xA;&lt;h3&gt;Command line&lt;/h3&gt; &#xA;&lt;p&gt;Using the Prometheus text protocol, pushing metrics is so easy that no separate CLI is provided. Simply use a command-line HTTP tool like &lt;code&gt;curl&lt;/code&gt;. Your favorite scripting language has most likely some built-in HTTP capabilities you can leverage here as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that in the text protocol, each line has to end with a line-feed character (aka &#39;LF&#39; or &#39;\n&#39;). Ending a line in other ways, e.g. with &#39;CR&#39; aka &#39;\r&#39;, &#39;CRLF&#39; aka &#39;\r\n&#39;, or just the end of the packet, will result in a protocol error.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pushed metrics are managed in groups, identified by a grouping key of any number of labels, of which the first must be the &lt;code&gt;job&lt;/code&gt; label. The groups are easy to inspect via the web interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For implications of special characters in label values see the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/pushgateway/master/#url&#34;&gt;URL section&lt;/a&gt; below.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Push a single sample into the group identified by &lt;code&gt;{job=&#34;some_job&#34;}&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  echo &#34;some_metric 3.14&#34; | curl --data-binary @- http://pushgateway.example.org:9091/metrics/job/some_job&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since no type information has been provided, &lt;code&gt;some_metric&lt;/code&gt; will be of type &lt;code&gt;untyped&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Push something more complex into the group identified by &lt;code&gt;{job=&#34;some_job&#34;,instance=&#34;some_instance&#34;}&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  cat &amp;lt;&amp;lt;EOF | curl --data-binary @- http://pushgateway.example.org:9091/metrics/job/some_job/instance/some_instance&#xA;  # TYPE some_metric counter&#xA;  some_metric{label=&#34;val1&#34;} 42&#xA;  # TYPE another_metric gauge&#xA;  # HELP another_metric Just an example.&#xA;  another_metric 2398.283&#xA;  EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note how type information and help strings are provided. Those lines are optional, but strongly encouraged for anything more complex.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete all metrics in the group identified by &lt;code&gt;{job=&#34;some_job&#34;,instance=&#34;some_instance&#34;}&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  curl -X DELETE http://pushgateway.example.org:9091/metrics/job/some_job/instance/some_instance&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete all metrics in the group identified by &lt;code&gt;{job=&#34;some_job&#34;}&lt;/code&gt; (note that this does not include metrics in the &lt;code&gt;{job=&#34;some_job&#34;,instance=&#34;some_instance&#34;}&lt;/code&gt; group from the previous example, even if those metrics have the same job label):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  curl -X DELETE http://pushgateway.example.org:9091/metrics/job/some_job&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete all metrics in all groups (requires to enable the admin API via the command line flag &lt;code&gt;--web.enable-admin-api&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  curl -X PUT http://pushgateway.example.org:9091/api/v1/admin/wipe&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;About the job and instance labels&lt;/h3&gt; &#xA;&lt;p&gt;The Prometheus server will attach a &lt;code&gt;job&lt;/code&gt; label and an &lt;code&gt;instance&lt;/code&gt; label to each scraped metric. The value of the &lt;code&gt;job&lt;/code&gt; label comes from the scrape configuration. When you configure the Pushgateway as a scrape target for your Prometheus server, you will probably pick a job name like &lt;code&gt;pushgateway&lt;/code&gt;. The value of the &lt;code&gt;instance&lt;/code&gt; label is automatically set to the host and port of the target scraped. Hence, all the metrics scraped from the Pushgateway will have the host and port of the Pushgateway as the &lt;code&gt;instance&lt;/code&gt; label and a &lt;code&gt;job&lt;/code&gt; label like &lt;code&gt;pushgateway&lt;/code&gt;. The conflict with the &lt;code&gt;job&lt;/code&gt; and &lt;code&gt;instance&lt;/code&gt; labels you might have attached to the metrics pushed to the Pushgateway is solved by renaming those labels to &lt;code&gt;exported_job&lt;/code&gt; and &lt;code&gt;exported_instance&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, this behavior is usually undesired when scraping a Pushgateway. Generally, you would like to retain the &lt;code&gt;job&lt;/code&gt; and &lt;code&gt;instance&lt;/code&gt; labels of the metrics pushed to the Pushgateway. That&#39;s why you have to set &lt;code&gt;honor_labels: true&lt;/code&gt; in the scrape config for the Pushgateway. It enables the desired behavior. See the &lt;a href=&#34;https://prometheus.io/docs/operating/configuration/#scrape_config&#34;&gt;documentation&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;This leaves us with the case where the metrics pushed to the Pushgateway do not feature an &lt;code&gt;instance&lt;/code&gt; label. This case is quite common as the pushed metrics are often on a service level and therefore not related to a particular instance. Even with &lt;code&gt;honor_labels: true&lt;/code&gt;, the Prometheus server will attach an &lt;code&gt;instance&lt;/code&gt; label if no &lt;code&gt;instance&lt;/code&gt; label has been set in the first place. Therefore, if a metric is pushed to the Pushgateway without an instance label (and without instance label in the grouping key, see below), the Pushgateway will export it with an empty instance label (&lt;code&gt;{instance=&#34;&#34;}&lt;/code&gt;), which is equivalent to having no &lt;code&gt;instance&lt;/code&gt; label at all but prevents the server from attaching one.&lt;/p&gt; &#xA;&lt;h3&gt;About metric inconsistencies&lt;/h3&gt; &#xA;&lt;p&gt;The Pushgateway exposes all pushed metrics together with its own metrics via the same &lt;code&gt;/metrics&lt;/code&gt; endpoint. (See the section about &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/pushgateway/master/#exposed-metrics&#34;&gt;exposed metrics&lt;/a&gt; for details.) Therefore, all the metrics have to be consistent with each other: Metrics of the same name must have the same type, even if they are pushed to different groups, and there must be no duplicates, i.e. metrics with the same name and the exact same label pairs. Pushes that would lead to inconsistencies are rejected with status code 400.&lt;/p&gt; &#xA;&lt;p&gt;Inconsistent help strings are tolerated, though. The Pushgateway will pick a winning help string and log about it at info level.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Legacy note: The help string of Pushgateway&#39;s own &lt;code&gt;push_time_seconds&lt;/code&gt; metric has changed in v0.10.0. By using a persistence file, metrics pushed to a Pushgateway of an earlier version can make it into a Pushgateway of v0.10.0 or later. In this case, the above mentioned log message will show up. Once each previously pushed group has been deleted or received a new push, the log message will disappear.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The consistency check performed during a push is the same as it happens anyway during a scrape. In common use cases, scrapes happen more often than pushes. Therefore, the performance cost of the push-time check isn&#39;t relevant. However, if a large amount of metrics on the Pushgateway is combined with frequent pushes, the push duration might become prohibitively long. In this case, you might consider using the command line flag &lt;code&gt;--push.disable-consistency-check&lt;/code&gt;, which saves the cost of the consistency check during a push but allows pushing inconsistent metrics. The check will still happen during a scrape, thereby failing all scrapes for as long as inconsistent metrics are stored on the Pushgateway. Setting the flag therefore puts you at risk to disable the Pushgateway by a single inconsistent push.&lt;/p&gt; &#xA;&lt;h3&gt;About timestamps&lt;/h3&gt; &#xA;&lt;p&gt;If you push metrics at time &lt;em&gt;t&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;, you might be tempted to believe that Prometheus will scrape them with that same timestamp &lt;em&gt;t&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;. Instead, what Prometheus attaches as a timestamp is the time when it scrapes the Pushgateway. Why so?&lt;/p&gt; &#xA;&lt;p&gt;In the world view of Prometheus, a metric can be scraped at any time. A metric that cannot be scraped has basically ceased to exist. Prometheus is somewhat tolerant, but if it cannot get any samples for a metric in 5min, it will behave as if that metric does not exist anymore. Preventing that is actually one of the reasons to use a Pushgateway. The Pushgateway will make the metrics of your ephemeral job scrapable at any time. Attaching the time of pushing as a timestamp would defeat that purpose because 5min after the last push, your metric will look as stale to Prometheus as if it could not be scraped at all anymore. (Prometheus knows only one timestamp per sample, there is no way to distinguish a &#39;time of pushing&#39; and a &#39;time of scraping&#39;.)&lt;/p&gt; &#xA;&lt;p&gt;As there aren&#39;t any use cases where it would make sense to attach a different timestamp, and many users attempting to incorrectly do so (despite no client library supporting this), the Pushgateway rejects any pushes with timestamps.&lt;/p&gt; &#xA;&lt;p&gt;If you think you need to push a timestamp, please see &lt;a href=&#34;https://prometheus.io/docs/practices/pushing/&#34;&gt;When To Use The Pushgateway&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to make it easier to alert on failed pushers or those that have not run recently, the Pushgateway will add in the metrics &lt;code&gt;push_time_seconds&lt;/code&gt; and &lt;code&gt;push_failure_time_seconds&lt;/code&gt; with the Unix timestamp of the last successful and failed &lt;code&gt;POST&lt;/code&gt;/&lt;code&gt;PUT&lt;/code&gt; to each group. This will override any pushed metric by that name. A value of zero for either metric implies that the group has never seen a successful or failed &lt;code&gt;POST&lt;/code&gt;/&lt;code&gt;PUT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;All pushes are done via HTTP. The interface is vaguely REST-like.&lt;/p&gt; &#xA;&lt;h3&gt;URL&lt;/h3&gt; &#xA;&lt;p&gt;The default port the Pushgateway is listening to is 9091. The path looks like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/metrics/job/&amp;lt;JOB_NAME&amp;gt;{/&amp;lt;LABEL_NAME&amp;gt;/&amp;lt;LABEL_VALUE&amp;gt;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;JOB_NAME&amp;gt;&lt;/code&gt; is used as the value of the &lt;code&gt;job&lt;/code&gt; label, followed by any number of other label pairs (which might or might not include an &lt;code&gt;instance&lt;/code&gt; label). The label set defined by the URL path is used as a grouping key. Any of those labels already set in the body of the request (as regular labels, e.g. &lt;code&gt;name{job=&#34;foo&#34;} 42&lt;/code&gt;) &lt;em&gt;will be overwritten to match the labels defined by the URL path!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;job&lt;/code&gt; or any label name is suffixed with &lt;code&gt;@base64&lt;/code&gt;, the following job name or label value is interpreted as a base64 encoded string according to &lt;a href=&#34;https://tools.ietf.org/html/rfc4648#section-5&#34;&gt;RFC 4648, using the URL and filename safe alphabet&lt;/a&gt;. (Padding is optional, but a single &lt;code&gt;=&lt;/code&gt; is required to encode an empty label value.) This is the only way to handle the following cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A job name or a label value that contains a &lt;code&gt;/&lt;/code&gt;, because the plain (or even URI-encoded) &lt;code&gt;/&lt;/code&gt; would otherwise be interpreted as a path separator.&lt;/li&gt; &#xA; &lt;li&gt;An empty label value, because the resulting &lt;code&gt;//&lt;/code&gt; or trailing &lt;code&gt;/&lt;/code&gt; would disappear when the path is sanitized by the HTTP router code. Note that an empty &lt;code&gt;job&lt;/code&gt; name is invalid. Empty label values are valid but rarely useful. To encode them with base64, you have to use at least one &lt;code&gt;=&lt;/code&gt; padding character to avoid a &lt;code&gt;//&lt;/code&gt; or a trailing &lt;code&gt;/&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For other special characters, the usual URI component encoding works, too, but the base64 might be more convenient.&lt;/p&gt; &#xA;&lt;p&gt;Ideally, client libraries take care of the suffixing and encoding.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To use the grouping key &lt;code&gt;job=&#34;directory_cleaner&#34;,path=&#34;/var/tmp&#34;&lt;/code&gt;, the following path will &lt;em&gt;not&lt;/em&gt; work:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;/metrics/job/directory_cleaner/path//var/tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead, use the base64 URL-safe encoding for the label value and mark it by suffixing the label name with &lt;code&gt;@base64&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;/metrics/job/directory_cleaner/path@base64/L3Zhci90bXA&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you are not using a client library that handles the encoding for you, you can use encoding tools. For example, there is a command line tool &lt;code&gt;base64url&lt;/code&gt; (Debian package &lt;code&gt;basez&lt;/code&gt;), which you could combine with &lt;code&gt;curl&lt;/code&gt; to push from the command line in the following way:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;echo &#39;some_metric{foo=&#34;bar&#34;} 3.14&#39; | curl --data-binary @- http://pushgateway.example.org:9091/metrics/job/directory_cleaner/path@base64/$(echo -n &#39;/var/tmp&#39; | base64url)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To use a grouping key containing an empty label value such as &lt;code&gt;job=&#34;example&#34;,first_label=&#34;&#34;,second_label=&#34;foobar&#34;&lt;/code&gt;, the following path will &lt;em&gt;not&lt;/em&gt; work:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; /metrics/job/example/first_label//second_label/foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead, use the following path including the &lt;code&gt;=&lt;/code&gt; padding character:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;/metrics/job/example/first_label@base64/=/second_label/foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The grouping key &lt;code&gt;job=&#34;titan&#34;,name=&#34;Προμηθεύς&#34;&lt;/code&gt; can be represented “traditionally” with URI encoding:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;/metrics/job/titan/name/%CE%A0%CF%81%CE%BF%CE%BC%CE%B7%CE%B8%CE%B5%CF%8D%CF%82&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or you can use the more compact base64 encoding:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;/metrics/job/titan/name@base64/zqDPgc6_zrzOt864zrXPjc-C&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;PUT&lt;/code&gt; method&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;PUT&lt;/code&gt; is used to push a group of metrics. All metrics with the grouping key specified in the URL are replaced by the metrics pushed with &lt;code&gt;PUT&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The body of the request contains the metrics to push either as delimited binary protocol buffers or in the simple flat text format (both in version 0.0.4, see the &lt;a href=&#34;https://docs.google.com/document/d/1ZjyKiKxZV83VI9ZKAXRGKaUKK2BIWCT7oiGBKDBpjEY/edit?usp=sharing&#34;&gt;data exposition format specification&lt;/a&gt;). Discrimination between the two variants is done via the &lt;code&gt;Content-Type&lt;/code&gt; header. (Use the value &lt;code&gt;application/vnd.google.protobuf; proto=io.prometheus.client.MetricFamily; encoding=delimited&lt;/code&gt; for protocol buffers, otherwise the text format is tried as a fall-back.)&lt;/p&gt; &#xA;&lt;p&gt;The response code upon success is either 200, 202, or 400. A 200 response implies a successful push, either replacing an existing group of metrics or creating a new one. A 400 response can happen if the request is malformed or if the pushed metrics are inconsistent with metrics pushed to other groups or collide with metrics of the Pushgateway itself. An explanation is returned in the body of the response and logged on error level. A 202 can only occur if the &lt;code&gt;--push.disable-consistency-check&lt;/code&gt; flag is set. In this case, pushed metrics are just queued and not checked for consistency. Inconsistencies will lead to failed scrapes, however, as described &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/pushgateway/master/#about-metric-inconsistencies&#34;&gt;above&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In rare cases, it is possible that the Pushgateway ends up with an inconsistent set of metrics already pushed. In that case, new pushes are also rejected as inconsistent even if the culprit is metrics that were pushed earlier. Delete the offending metrics to get out of that situation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;If using the protobuf format, do not send duplicate MetricFamily proto messages (i.e. more than one with the same name) in one push, as they will overwrite each other.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that the Pushgateway doesn&#39;t provide any strong guarantees that the pushed metrics are persisted to disk. (A server crash may cause data loss. Or the Pushgateway is configured to not persist to disk at all.)&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;PUT&lt;/code&gt; request with an empty body effectively deletes all metrics with the specified grouping key. However, in contrast to the &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/pushgateway/master/#delete-method&#34;&gt;&lt;code&gt;DELETE&lt;/code&gt; request&lt;/a&gt; described below, it does update the &lt;code&gt;push_time_seconds&lt;/code&gt; metrics.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;POST&lt;/code&gt; method&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;POST&lt;/code&gt; works exactly like the &lt;code&gt;PUT&lt;/code&gt; method but only metrics with the same name as the newly pushed metrics are replaced (among those with the same grouping key).&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;POST&lt;/code&gt; request with an empty body merely updates the &lt;code&gt;push_time_seconds&lt;/code&gt; metrics but does not change any of the previously pushed metrics.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;DELETE&lt;/code&gt; method&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt; is used to delete metrics from the Pushgateway. The request must not contain any content. All metrics with the grouping key specified in the URL are deleted.&lt;/p&gt; &#xA;&lt;p&gt;The response code upon success is always 202. The delete request is merely queued at that moment. There is no guarantee that the request will actually be executed or that the result will make it to the persistence layer (e.g. in case of a server crash). However, the order of &lt;code&gt;PUT&lt;/code&gt;/&lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; request is guaranteed, i.e. if you have successfully sent a &lt;code&gt;DELETE&lt;/code&gt; request and then send a &lt;code&gt;PUT&lt;/code&gt;, it is guaranteed that the &lt;code&gt;DELETE&lt;/code&gt; will be processed first (and vice versa).&lt;/p&gt; &#xA;&lt;p&gt;Deleting a grouping key without metrics is a no-op and will not result in an error.&lt;/p&gt; &#xA;&lt;h3&gt;Request compression&lt;/h3&gt; &#xA;&lt;p&gt;The body of a POST or PUT request may be gzip- or snappy-compressed. Add a header &lt;code&gt;Content-Encoding: gzip&lt;/code&gt; or &lt;code&gt;Content-Encoding: snappy&lt;/code&gt; to do so.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;some_metric 3.14&#34; | gzip | curl -H &#39;Content-Encoding: gzip&#39; --data-binary @- http://pushgateway.example.org:9091/metrics/job/some_job&#xA;echo &#34;some_metric 3.14&#34; | snzip | curl -H &#39;Content-Encoding: snappy&#39; --data-binary @- http://pushgateway.example.org:9091/metrics/job/some_job&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Admin API&lt;/h2&gt; &#xA;&lt;p&gt;The Admin API provides administrative access to the Pushgateway, and must be explicitly enabled by setting &lt;code&gt;--web.enable-admin-api&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h3&gt;URL&lt;/h3&gt; &#xA;&lt;p&gt;The default port the Pushgateway is listening to is 9091. The path looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/api/&amp;lt;API_VERSION&amp;gt;/admin/&amp;lt;HANDLER&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available endpoints:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;HTTP_METHOD&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;API_VERSION&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;HANDLER&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;DESCRIPTION&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PUT&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;wipe&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Safely deletes all metrics from the Pushgateway.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For example to wipe all metrics from the Pushgateway:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  curl -X PUT http://pushgateway.example.org:9091/api/v1/admin/wipe&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Query API&lt;/h2&gt; &#xA;&lt;p&gt;The query API allows accessing pushed metrics and build and runtime information.&lt;/p&gt; &#xA;&lt;h3&gt;URL&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;/api/&amp;lt;API_VERSION&amp;gt;/&amp;lt;HANDLER&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available endpoints:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;HTTP_METHOD&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;API_VERSION&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;HANDLER&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;DESCRIPTION&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;status&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Returns build information, command line flags, and the start time in JSON format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;v1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;metrics&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Returns the pushed metric families in JSON format.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For example :&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  curl -X GET http://pushgateway.example.org:9091/api/v1/status | jq&#xA;  &#xA;  {&#xA;    &#34;status&#34;: &#34;success&#34;,&#xA;    &#34;data&#34;: {&#xA;      &#34;build_information&#34;: {&#xA;        &#34;branch&#34;: &#34;master&#34;,&#xA;        &#34;buildDate&#34;: &#34;20200310-20:14:39&#34;,&#xA;        &#34;buildUser&#34;: &#34;flipbyte@localhost.localdomain&#34;,&#xA;        &#34;goVersion&#34;: &#34;go1.13.6&#34;,&#xA;        &#34;revision&#34;: &#34;eba0ec4100873d23666bcf4b8b1d44617d6430c4&#34;,&#xA;        &#34;version&#34;: &#34;1.1.0&#34;&#xA;      },&#xA;      &#34;flags&#34;: {&#xA;        &#34;log.format&#34;: &#34;logfmt&#34;,&#xA;        &#34;log.level&#34;: &#34;info&#34;,&#xA;        &#34;persistence.file&#34;: &#34;&#34;,&#xA;        &#34;persistence.interval&#34;: &#34;5m0s&#34;,&#xA;        &#34;push.disable-consistency-check&#34;: &#34;false&#34;,&#xA;        &#34;web.enable-admin-api&#34;: &#34;false&#34;,&#xA;        &#34;web.enable-lifecycle&#34;: &#34;false&#34;,&#xA;        &#34;web.external-url&#34;: &#34;&#34;,&#xA;        &#34;web.listen-address&#34;: &#34;:9091&#34;,&#xA;        &#34;web.route-prefix&#34;: &#34;&#34;,&#xA;        &#34;web.telemetry-path&#34;: &#34;/metrics&#34;&#xA;      },&#xA;      &#34;start_time&#34;: &#34;2020-03-11T01:44:49.9189758+05:30&#34;&#xA;    }&#xA;  }&#xA;  &#xA;  curl -X GET http://pushgateway.example.org:9091/api/v1/metrics | jq&#xA;  &#xA;  {&#xA;    &#34;status&#34;: &#34;success&#34;,&#xA;    &#34;data&#34;: [&#xA;      {&#xA;        &#34;labels&#34;: {&#xA;          &#34;job&#34;: &#34;batch&#34;&#xA;        },&#xA;        &#34;last_push_successful&#34;: true,&#xA;        &#34;my_job_duration_seconds&#34;: {&#xA;          &#34;time_stamp&#34;: &#34;2020-03-11T02:02:27.716605811+05:30&#34;,&#xA;          &#34;type&#34;: &#34;GAUGE&#34;,&#xA;          &#34;help&#34;: &#34;Duration of my batch jon in seconds&#34;,&#xA;          &#34;metrics&#34;: [&#xA;            {&#xA;              &#34;labels&#34;: {&#xA;                &#34;instance&#34;: &#34;&#34;,&#xA;                &#34;job&#34;: &#34;batch&#34;&#xA;              },&#xA;              &#34;value&#34;: &#34;0.2721322309989773&#34;&#xA;            }&#xA;          ]&#xA;        },&#xA;        &#34;push_failure_time_seconds&#34;: {&#xA;          &#34;time_stamp&#34;: &#34;2020-03-11T02:02:27.716605811+05:30&#34;,&#xA;          &#34;type&#34;: &#34;GAUGE&#34;,&#xA;          &#34;help&#34;: &#34;Last Unix time when changing this group in the Pushgateway failed.&#34;,&#xA;          &#34;metrics&#34;: [&#xA;            {&#xA;              &#34;labels&#34;: {&#xA;                &#34;instance&#34;: &#34;&#34;,&#xA;                &#34;job&#34;: &#34;batch&#34;&#xA;              },&#xA;              &#34;value&#34;: &#34;0&#34;&#xA;            }&#xA;          ]&#xA;        },&#xA;        &#34;push_time_seconds&#34;: {&#xA;          &#34;time_stamp&#34;: &#34;2020-03-11T02:02:27.716605811+05:30&#34;,&#xA;          &#34;type&#34;: &#34;GAUGE&#34;,&#xA;          &#34;help&#34;: &#34;Last Unix time when changing this group in the Pushgateway succeeded.&#34;,&#xA;          &#34;metrics&#34;: [&#xA;            {&#xA;              &#34;labels&#34;: {&#xA;                &#34;instance&#34;: &#34;&#34;,&#xA;                &#34;job&#34;: &#34;batch&#34;&#xA;              },&#xA;              &#34;value&#34;: &#34;1.5838723477166057e+09&#34;&#xA;            }&#xA;          ]&#xA;        }&#xA;      }&#xA;    ]&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Management API&lt;/h2&gt; &#xA;&lt;p&gt;The Pushgateway provides a set of management API to ease automation and integrations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Available endpoints:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;HTTP_METHOD&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;PATH&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;DESCRIPTION&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;/-/healthy&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Returns 200 whenever the Pushgateway is healthy.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;GET&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;/-/ready&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Returns 200 whenever the Pushgateway is ready to serve traffic.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The following endpoint is disabled by default and can be enabled via the &lt;code&gt;--web.enable-lifecycle&lt;/code&gt; flag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;HTTP_METHOD&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;PATH&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;DESCRIPTION&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PUT&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;/-/quit&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Triggers a graceful shutdown of Pushgateway.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Alternatively, a graceful shutdown can be triggered by sending a &lt;code&gt;SIGTERM&lt;/code&gt; to the Pushgateway process.&lt;/p&gt; &#xA;&lt;h2&gt;Exposed metrics&lt;/h2&gt; &#xA;&lt;p&gt;The Pushgateway exposes the following metrics via the configured &lt;code&gt;--web.telemetry-path&lt;/code&gt; (default: &lt;code&gt;/metrics&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The pushed metrics.&lt;/li&gt; &#xA; &lt;li&gt;For each pushed group, a metric &lt;code&gt;push_time_seconds&lt;/code&gt; and &lt;code&gt;push_failure_time_seconds&lt;/code&gt; as explained above.&lt;/li&gt; &#xA; &lt;li&gt;The usual metrics provided by the &lt;a href=&#34;https://github.com/prometheus/client_golang&#34;&gt;Prometheus Go client library&lt;/a&gt;, i.e.: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;process_...&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;go_...&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;promhttp_metric_handler_requests_...&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A number of metrics specific to the Pushgateway, as documented by the example scrape below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;# HELP pushgateway_build_info A metric with a constant &#39;1&#39; value labeled by version, revision, branch, and goversion from which pushgateway was built.&#xA;# TYPE pushgateway_build_info gauge&#xA;pushgateway_build_info{branch=&#34;master&#34;,goversion=&#34;go1.10.2&#34;,revision=&#34;8f88ccb0343fc3382f6b93a9d258797dcb15f770&#34;,version=&#34;0.5.2&#34;} 1&#xA;# HELP pushgateway_http_push_duration_seconds HTTP request duration for pushes to the Pushgateway.&#xA;# TYPE pushgateway_http_push_duration_seconds summary&#xA;pushgateway_http_push_duration_seconds{method=&#34;post&#34;,quantile=&#34;0.1&#34;} 0.000116755&#xA;pushgateway_http_push_duration_seconds{method=&#34;post&#34;,quantile=&#34;0.5&#34;} 0.000192608&#xA;pushgateway_http_push_duration_seconds{method=&#34;post&#34;,quantile=&#34;0.9&#34;} 0.000327593&#xA;pushgateway_http_push_duration_seconds_sum{method=&#34;post&#34;} 0.001622878&#xA;pushgateway_http_push_duration_seconds_count{method=&#34;post&#34;} 8&#xA;# HELP pushgateway_http_push_size_bytes HTTP request size for pushes to the Pushgateway.&#xA;# TYPE pushgateway_http_push_size_bytes summary&#xA;pushgateway_http_push_size_bytes{method=&#34;post&#34;,quantile=&#34;0.1&#34;} 166&#xA;pushgateway_http_push_size_bytes{method=&#34;post&#34;,quantile=&#34;0.5&#34;} 182&#xA;pushgateway_http_push_size_bytes{method=&#34;post&#34;,quantile=&#34;0.9&#34;} 196&#xA;pushgateway_http_push_size_bytes_sum{method=&#34;post&#34;} 1450&#xA;pushgateway_http_push_size_bytes_count{method=&#34;post&#34;} 8&#xA;# HELP pushgateway_http_requests_total Total HTTP requests processed by the Pushgateway, excluding scrapes.&#xA;# TYPE pushgateway_http_requests_total counter&#xA;pushgateway_http_requests_total{code=&#34;200&#34;,handler=&#34;static&#34;,method=&#34;get&#34;} 5&#xA;pushgateway_http_requests_total{code=&#34;200&#34;,handler=&#34;status&#34;,method=&#34;get&#34;} 8&#xA;pushgateway_http_requests_total{code=&#34;202&#34;,handler=&#34;delete&#34;,method=&#34;delete&#34;} 1&#xA;pushgateway_http_requests_total{code=&#34;202&#34;,handler=&#34;push&#34;,method=&#34;post&#34;} 6&#xA;pushgateway_http_requests_total{code=&#34;400&#34;,handler=&#34;push&#34;,method=&#34;post&#34;} 2&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alerting on failed pushes&lt;/h3&gt; &#xA;&lt;p&gt;It is in general a good idea to alert on &lt;code&gt;push_time_seconds&lt;/code&gt; being much farther behind than expected. This will catch both failed pushes as well as pushers being down completely.&lt;/p&gt; &#xA;&lt;p&gt;To detect failed pushes much earlier, alert on &lt;code&gt;push_failure_time_seconds &amp;gt; push_time_seconds&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pushes can also fail because they are malformed. In this case, they never reach any metric group and therefore won&#39;t set any &lt;code&gt;push_failure_time_seconds&lt;/code&gt; metrics. Those pushes are still counted as &lt;code&gt;pushgateway_http_requests_total{code=&#34;400&#34;,handler=&#34;push&#34;}&lt;/code&gt;. You can alert on the &lt;code&gt;rate&lt;/code&gt; of this metric, but you have to inspect the logs to identify the offending pusher.&lt;/p&gt; &#xA;&lt;h2&gt;TLS and basic authentication&lt;/h2&gt; &#xA;&lt;p&gt;The Pushgateway supports TLS and basic authentication. This enables better control of the various HTTP endpoints.&lt;/p&gt; &#xA;&lt;p&gt;To use TLS and/or basic authentication, you need to pass a configuration file using the &lt;code&gt;--web.config.file&lt;/code&gt; parameter. The format of the file is described &lt;a href=&#34;https://github.com/prometheus/exporter-toolkit/raw/master/docs/web-configuration.md&#34;&gt;in the exporter-toolkit repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the TLS and basic authentication settings affect all HTTP endpoints: /metrics for scraping, the API to push metrics via /metrics/..., the admin API via /api/..., and the web UI.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;The normal binary embeds the web files in the &lt;code&gt;resources&lt;/code&gt; directory. For development purposes, it is handy to have a running binary use those files directly (so that you can see the effect of changes immediately). To switch to direct usage, add &lt;code&gt;-tags dev&lt;/code&gt; to the &lt;code&gt;flags&lt;/code&gt; entry in &lt;code&gt;.promu.yml&lt;/code&gt;, and then &lt;code&gt;make build&lt;/code&gt;. Switch back to &#34;normal&#34; mode by reverting the changes to &lt;code&gt;.promu.yml&lt;/code&gt; and typing &lt;code&gt;make assets&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Relevant style guidelines are the &lt;a href=&#34;https://code.google.com/p/go-wiki/wiki/CodeReviewComments&#34;&gt;Go Code Review Comments&lt;/a&gt; and the &lt;em&gt;Formatting and style&lt;/em&gt; section of Peter Bourgon&#39;s &lt;a href=&#34;http://peter.bourgon.org/go-in-production/#formatting-and-style&#34;&gt;Go: Best Practices for Production Environments&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>