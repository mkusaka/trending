<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-09T01:41:34Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>serhack/pdf-diff</title>
    <updated>2022-08-09T01:41:34Z</updated>
    <id>tag:github.com,2022-08-09:/serhack/pdf-diff</id>
    <link href="https://github.com/serhack/pdf-diff" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for visualizing differences between two pdf files.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pdf-diff&lt;/h1&gt; &#xA;&lt;p&gt;A tool for visualizing differences between two pdf files. Mainly dedicated to editors that usually spends a lot of hours on several pdf.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/serhack/pdf-diff/main/image-1.png&#34; alt=&#34;Example of output&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Foreword&lt;/h2&gt; &#xA;&lt;p&gt;I use &lt;a href=&#34;https://www.adobe.com/it/products/indesign.html&#34;&gt;Indesign&lt;/a&gt; almost daily, and the pagination and convenient graphical interface make that product number 1 among desktop publishing programs. Indesign, as well as many other graphics programs, have one flaw: because they are not based on any versioning tool, it is difficult to compare two versions of the same file&lt;/p&gt; &#xA;&lt;p&gt;I sometimes have to do some retouching to files I produce. Be they resumes, books or technical manuals. However, if editing a resume is very easy, editing large volumes is much more difficult. Several times, sharing the result of pdfs with my team, we could not clearly visualize the differences between one version and another. This is compounded by human error: with more than 50-60 pages to review, it is impossible to keep track of all the changes between versions!&lt;/p&gt; &#xA;&lt;p&gt;Therefore, I developed through the powerful go programming language a new tool called &lt;code&gt;pdf-diff&lt;/code&gt;. Pdf-diff allows you to create images that show exactly where the pdf has changed, thus displaying the changes from one version to another.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;From a technical point of view, the tool is very simple and trivial. Pdf-diff uses pdftoppm to generate a series of images from the pdfs to be compared (one for each page). It then uses a very trivial pixel comparison algorithm to draw some red rectangles that display the differences between one pdf and another. The difference is based on RGB values of the pixel, so it can basically compare whatever you want. The go script also uses golang&#39;s very powerful native encoding/decoding image engine (which I personally was not familiar with!). I was very impressed with what is possible to do with Go in just a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;The images generated by pdf are inserted into a folder named as the hash of the content of the pdf file. E.g. the file has the hash &lt;code&gt;fc324..&lt;/code&gt;, the images are in the &lt;code&gt;fc324&lt;/code&gt; folder. If a folder with that name already exists, pdf-diff will not create any images since it consider that images were already generated.&lt;/p&gt; &#xA;&lt;p&gt;The code is not very clean and certainly can be optimized. I am asking some person much more knowledgeable than me in graphics if it is possible to create a simple algorithm that can apply a background color only locally, and not on the whole row where the pixel is changed.&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;The only requirement asked for running this tool is the &lt;code&gt;pdftoppm&lt;/code&gt; program. Based on your operating system or distro, you might want to check &lt;code&gt;poppler-utils&lt;/code&gt; package. A command for installing that tool in Ubuntu/Debian distro might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;apt install poppler-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the script, you can simply open a new shell and type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run main.go ./pdf-1.pdf ./pdf-2.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build&#xA;./pdf-diff pdf-1.pdf pdf-2.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once ran, the images are created in the folder &lt;code&gt;generated&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to use this for your project, go ahead. If you have any issues or improvements, feel free to open a new &lt;a href=&#34;https://github.com/serhack/pdf-diff/issues&#34;&gt;ISSUE&lt;/a&gt;. Lastly, if you have a good algorithm to implement or just to discuss about any other tools for editor, you can &lt;a href=&#34;https://raw.githubusercontent.com/serhack/pdf-diff/main/hi@serhack.me&#34;&gt;email me&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Donation&lt;/h4&gt; &#xA;&lt;p&gt;If you think my work contributed a little bit to your projects, goals or company, please let me know.&lt;/p&gt; &#xA;&lt;p&gt;Monero: &lt;code&gt;47VFueCo1yvc6nq688QsBt9UZSrg5z2JLFUwWFs4WtHBSwDsybDbnmLiydo46ybPeqSMxypnjmz5pdz87t4VjngfQfmMd4S&lt;/code&gt; Bitcoin: &lt;code&gt;1Pt3YwkFoexAA3s9pV3saoJ2EAXzpqBmrp&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ViRb3/wgcf</title>
    <updated>2022-08-09T01:41:34Z</updated>
    <id>tag:github.com,2022-08-09:/ViRb3/wgcf</id>
    <link href="https://github.com/ViRb3/wgcf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸš¤ Cross-platform, unofficial CLI for Cloudflare Warp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wgcf&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;wgcf is an unofficial, cross-platform CLI for &lt;a href=&#34;https://1.1.1.1/&#34;&gt;Cloudflare Warp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/drone/build/ViRb3/wgcf&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/ViRb3/wgcf&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/ViRb3/wgcf/total&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/code-size/ViRb3/wgcf&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register new account&lt;/li&gt; &#xA; &lt;li&gt;Change license key to use existing Warp+ subscription&lt;/li&gt; &#xA; &lt;li&gt;Generate WireGuard profile&lt;/li&gt; &#xA; &lt;li&gt;Check account status&lt;/li&gt; &#xA; &lt;li&gt;Print trace information to debug Warp/Warp+ status&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can find pre-compiled binaries on the &lt;a href=&#34;https://github.com/ViRb3/wgcf/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;wgcf&lt;/code&gt; in a terminal without any arguments to display the help screen. All commands and parameters are documented.&lt;/p&gt; &#xA;&lt;h3&gt;Register new account&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wgcf register&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The new account will be saved under &lt;code&gt;wgcf-account.toml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Generate WireGuard profile&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wgcf generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The WireGuard profile will be saved under &lt;code&gt;wgcf-profile.conf&lt;/code&gt;. For more information on how to use it, please check the official &lt;a href=&#34;https://www.wireguard.com/quickstart/&#34;&gt;WireGuard Quick Start&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Maximum transmission unit (MTU)&lt;/h4&gt; &#xA;&lt;p&gt;To ensure maximum compatibility, the generated profile will have a MTU of 1280, just like the official Android app. If you are experiencing performance issues, you may be able to improve your speed by increasing this value. For more information, please check &lt;a href=&#34;https://github.com/ViRb3/wgcf/issues/40&#34;&gt;#40&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Change license key&lt;/h3&gt; &#xA;&lt;p&gt;If you have an existing Warp+ subscription, for an example on your phone, you can bind the account generated by this tool to your phone&#39;s account, sharing its Warp+ status. Please note that there is a current limit of maximum 5 linked devices active at a time.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;âš &lt;/span&gt; This device&#39;s private key will be changed!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;First, get your Warp+ account license key. To view it on Android:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;1.1.1.1&lt;/code&gt; app&lt;/li&gt; &#xA; &lt;li&gt;Click on the hamburger menu button on the top-right corner&lt;/li&gt; &#xA; &lt;li&gt;Navigate to: &lt;code&gt;Account&lt;/code&gt; &amp;gt; &lt;code&gt;Key&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;wgcf-account.toml&lt;/code&gt; directly with the new license key and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wgcf update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or, using an environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WGCF_LICENSE_KEY=&#34;123412341234&#34; wgcf update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The license will be applied, and a new private key will be created for your account. &lt;a href=&#34;https://raw.githubusercontent.com/ViRb3/wgcf/master/#generate-wireguard-profile&#34;&gt;Regenerate&lt;/a&gt; your WireGuard configuration and use the new private key.&lt;/p&gt; &#xA;&lt;h3&gt;Check device status&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command in a terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wgcf status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verify Warp/Warp+ works&lt;/h3&gt; &#xA;&lt;p&gt;Connect to the WireGuard profile &lt;a href=&#34;https://raw.githubusercontent.com/ViRb3/wgcf/master/#generate-wireguard-profile&#34;&gt;generated&lt;/a&gt; by this tool, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wgcf trace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you look at the last line, it should say &lt;code&gt;warp=on&lt;/code&gt; or &lt;code&gt;warp=plus&lt;/code&gt;, depending on whether you have Warp or Warp+ respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Sub-packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ViRb3/wgcf/master/api_tests/main.go&#34;&gt;api_tests&lt;/a&gt; - Tests for API documentation generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ViRb3/wgcf/master/spec_format/main.go&#34;&gt;spec_format&lt;/a&gt; - OpenAPI3 specification formatter to post-process the spec generated by Optic&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://github.com/opticdev/optic&#34;&gt;Optic&lt;/a&gt; to automatically generate API documentation using the tests defined in &lt;a href=&#34;https://raw.githubusercontent.com/ViRb3/wgcf/master/api_tests/main.go&#34;&gt;api_tests&lt;/a&gt;. These tests cover all endpoints used by wgcf. The documentation is exported as an OpenAPI3 &lt;a href=&#34;https://raw.githubusercontent.com/ViRb3/wgcf/master/openapi-spec.json&#34;&gt;specification&lt;/a&gt;, which is then used with &lt;a href=&#34;https://openapi-generator.tech/&#34;&gt;openapi-generator&lt;/a&gt; to generate the Go client API code under &lt;a href=&#34;https://raw.githubusercontent.com/ViRb3/wgcf/master/openapi/client.go&#34;&gt;wgcf/openapi&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To update the API documentation, &lt;a href=&#34;https://github.com/opticdev/optic/releases/latest&#34;&gt;install Optic&lt;/a&gt;, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;api start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resolve and save all the differences in the Web UI.&lt;/p&gt; &#xA;&lt;p&gt;To regenerate the Go client API code, &lt;a href=&#34;https://openapi-generator.tech/docs/installation&#34;&gt;install openapi-generator&lt;/a&gt;, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash generate-api.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script supports both Linux and WSL.&lt;/p&gt; &#xA;&lt;h2&gt;Notice of Non-Affiliation and Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with Cloudflare, or any of its subsidiaries or its affiliates. The official Cloudflare website can be found at &lt;a href=&#34;https://www.cloudflare.com/&#34;&gt;https://www.cloudflare.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The names Cloudflare Warp and Cloudflare as well as related names, marks, emblems and images are registered trademarks of their respective owners.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cosmos/relayer</title>
    <updated>2022-08-09T01:41:34Z</updated>
    <id>tag:github.com,2022-08-09:/cosmos/relayer</id>
    <link href="https://github.com/cosmos/relayer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An IBC relayer for ibc-go&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Relayer&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/images/comp.gif&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.repostatus.org/#active&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/repo%20status-active-green.svg?style=flat-square&#34; alt=&#34;Project Status: Initial Release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/cosmos/relayer/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Workflow Status&#34;&gt; &lt;a href=&#34;https://godoc.org/github.com/cosmos/relayer&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-reference-blue?style=flat-square&amp;amp;logo=go&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/cosmos/relayer&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/cosmos/relayer&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cosmos/relayer/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/cosmos/relayer.svg?style=flat-square&#34; alt=&#34;License: Apache-2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cosmos/relayer&#34;&gt;&lt;img src=&#34;https://img.shields.io/tokei/lines/github/cosmos/relayer?style=flat-square&#34; alt=&#34;Lines Of Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cosmos/relayer/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/cosmos/relayer.svg?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;In IBC, blockchains do not directly pass messages to each other over the network. This is where &lt;code&gt;relayer&lt;/code&gt; comes in. A relayer process monitors for updates on opens paths between sets of &lt;a href=&#34;https://ibcprotocol.org/&#34;&gt;IBC&lt;/a&gt; enabled chains. The relayer submits these updates in the form of specific message types to the counterparty chain. Clients are then used to track and verify the consensus state.&lt;/p&gt; &#xA;&lt;p&gt;In addition to relaying packets, this relayer can open paths across chains, thus creating clients, connections and channels.&lt;/p&gt; &#xA;&lt;p&gt;Additional information on how IBC works can be found &lt;a href=&#34;https://ibc.cosmos.network/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Relayer&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;IBC-Go&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;v1.0.0&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;ibc-go v1, ibc-go v2&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;v2.0.0&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;ibc-go v3&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;**If you are updating the relayer from any version prior to &lt;code&gt;v2.0.0-rc1&lt;/code&gt;, your current config file is not compatible. See: &lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/config_migration.md&#34;&gt;config_migration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table Of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/#Basic-Usage---Relaying-Packets-Across-Chains&#34;&gt;Basic Usage - Relaying Across Chains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/create-path-across-chain.md&#34;&gt;Create Path Across Chains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/features.md&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/terminology.md&#34;&gt;Relayer Terminology&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/node_pruning.md&#34;&gt;Recommended Pruning Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/demo.md&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Basic Usage - Relaying Packets Across Chains&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The &lt;code&gt;-h&lt;/code&gt; (help) flag tailing any &lt;code&gt;rly&lt;/code&gt; command will be your best friend. USE THIS IN YOUR RELAYING JOURNEY.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone, checkout and install the latest release (&lt;a href=&#34;https://github.com/cosmos/relayer/releases&#34;&gt;releases page&lt;/a&gt;).&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go&lt;/a&gt; needs to be installed and a proper Go environment needs to be configured&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/cosmos/relayer.git&#xA;$ cd relayer &amp;amp;&amp;amp; git checkout v2.0.0-rc3&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Initialize the relayer&#39;s configuration directory/file.&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly config init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Default config file location:&lt;/strong&gt; &lt;code&gt;~/.relayer/config/config.yaml&lt;/code&gt;&lt;/p&gt; &lt;p&gt;By default, transactions will be relayed with a memo of &lt;code&gt;rly(VERSION)&lt;/code&gt; e.g. &lt;code&gt;rly(v2.0.0)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To customize the memo for all relaying, use the &lt;code&gt;--memo&lt;/code&gt; flag when initializing the configuration.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly config init --memo &#34;My custom memo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Custom memos will have &lt;code&gt;rly(VERSION)&lt;/code&gt; appended. For example, a memo of &lt;code&gt;My custom memo&lt;/code&gt; running on relayer version &lt;code&gt;v2.0.0&lt;/code&gt; would result in a transaction memo of &lt;code&gt;My custom memo | rly(v2.0.0)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;--memo&lt;/code&gt; flag is also available for other &lt;code&gt;rly&lt;/code&gt; commands also that involve sending transactions such as &lt;code&gt;rly tx link&lt;/code&gt; and &lt;code&gt;rly start&lt;/code&gt;. It can be passed there to override the &lt;code&gt;config.yaml&lt;/code&gt; value if desired.&lt;/p&gt; &lt;p&gt;To omit the memo entirely, including the default value of &lt;code&gt;rly(VERSION)&lt;/code&gt;, use &lt;code&gt;-&lt;/code&gt; for the memo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configure the chains you want to relay between.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In our example, we will configure the relayer to operate on the canonical path between the Cosmos Hub and Osmosis.&lt;br&gt; &lt;br&gt; The &lt;code&gt;rly chains add&lt;/code&gt; command fetches chain meta-data from the &lt;a href=&#34;https://github.com/cosmos/chain-registry&#34;&gt;chain-registry&lt;/a&gt; and adds it to your config file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly chains add cosmoshub osmosis&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Adding chains from the chain-registry randomly selects an RPC address from the registry entry.&lt;br&gt; If you are running your own node, manually go into the config and adjust the &lt;code&gt;rpc-addr&lt;/code&gt; setting.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: &lt;code&gt;rly chains add&lt;/code&gt; will check the liveliness of the available RPC endpoints for that chain in the chain-registry.&lt;br&gt; It is possible that the command will fail if none of these RPC endpoints are available. In this case, you will want to manually add the chain config.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;To add the chain config files manually, example config files have been included &lt;a href=&#34;https://github.com/cosmos/relayer/tree/main/docs/example-configs/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly chains add --url https://raw.githubusercontent.com/cosmos/relayer/main/docs/example-configs/cosmoshub-4.json cosmoshub&#xA;$ rly chains add --url https://raw.githubusercontent.com/cosmos/relayer/main/docs/example-configs/osmosis-1.json osmosis&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Import OR create new keys for the relayer to use when signing and relaying transactions.&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;key-name&lt;/code&gt; is an identifier of your choosing.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;If you need to generate a new private key you can use the &lt;code&gt;add&lt;/code&gt; subcommand.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly keys add cosmoshub [key-name]  &#xA;$ rly keys add osmosis [key-name]  &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you already have a private key and want to restore it from your mnemonic you can use the &lt;code&gt;restore&lt;/code&gt; subcommand.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly keys restore cosmoshub [key-name] &#34;mnemonic words here&#34;&#xA;$ rly keys restore osmosis [key-name] &#34;mnemonic words here&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Edit the relayer&#39;s &lt;code&gt;key&lt;/code&gt; values in the config file to match the &lt;code&gt;key-name&lt;/code&gt;&#39;s chosen above.&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This step is necessary if you chose a &lt;code&gt;key-name&lt;/code&gt; other than &#34;default&#34;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- type: cosmos&#xA;   value:&#xA;   key: YOUR-KEY-NAME-HERE&#xA;   chain-id: cosmoshub-4&#xA;   rpc-addr: http://localhost:26657&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Ensure the keys associated with the configured chains are funded.&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Your configured addresses will need to contain some of the respective native tokens for paying relayer fees.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;br&gt; You can query the balance of each configured key by running: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly q balance cosmoshub&#xA;$ rly q balance osmosis&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configure path meta-data in config file.&lt;/strong&gt; &lt;br&gt; We have the chain meta-data configured, now we need path meta-data. For more info on &lt;code&gt;path&lt;/code&gt; terminology visit &lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/troubleshooting.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;NOTE: Thinking of chains in the config as &#34;source&#34; and &#34;destination&#34; can be confusing. Be aware that most path are bi-directional.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;br&gt; &lt;p&gt;&lt;code&gt;rly paths fetch&lt;/code&gt; will check for IBC path meta data from the &lt;a href=&#34;https://github.com/cosmos/chain-registry/tree/master/_IBC&#34;&gt;chain-registry&lt;/a&gt; and add these paths to your config file.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly paths fetch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Don&#39;t see the path metadata for paths you want to relay on?&lt;br&gt; Please open a PR to add this metadata to the GitHub repo!&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;strong&gt;Configure the channel filter.&lt;/strong&gt;&lt;/h4&gt; &lt;p&gt;By default, the relayer will relay packets over all channels on a given connection.&lt;br&gt; &lt;br&gt; Each path has a &lt;code&gt;src-channel-filter&lt;/code&gt; which you can utilize to specify which channels you would like to relay on.&lt;br&gt; &lt;br&gt; The &lt;code&gt;rule&lt;/code&gt; can be one of three values:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;allowlist&lt;/code&gt; which tells the relayer to relay on &lt;em&gt;ONLY&lt;/em&gt; the channels in &lt;code&gt;channel-list&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;denylist&lt;/code&gt; which tells the relayer to relay on all channels &lt;em&gt;BESIDES&lt;/em&gt; the channels in &lt;code&gt;channel-list&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;empty value, which is the default setting, and tells the relayer to relay on all channels&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;br&gt; &lt;p&gt;Since we are only worried about the canonical channel between the Cosmos Hub and Osmosis our filter settings would look like the following.&lt;br&gt; &lt;br&gt; Example:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;hubosmo:&#xA;   src:&#xA;       chain-id: cosmoshub-4&#xA;       client-id: 07-tendermint-259&#xA;       connection-id: connection-257&#xA;   dst:&#xA;       chain-id: osmosis-1&#xA;       client-id: 07-tendermint-1&#xA;       connection-id: connection-1&#xA;   src-channel-filter:&#xA;           rule: allowlist&#xA;           channel-list: [channel-141]  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Because two channels between chains are tightly coupled, there is no need to specify the dst channels. If you only know the &#34;dst&#34; channel-ID you can query the &#34;src&#34; channel-ID by running: &lt;code&gt;rly q channel &amp;lt;dst_chain_name&amp;gt; &amp;lt;dst_channel_id&amp;gt; &amp;lt;port&amp;gt; | jq &#39;.channel.counterparty.channel_id&#39;&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Finally, we start the relayer on the desired path.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The relayer will periodically update the clients and listen for IBC messages to relay.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ rly paths list&#xA;$ rly start [path]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will need to start a separate shell instance for each path you wish to relay over.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;When running multiple instances of &lt;code&gt;rly start&lt;/code&gt;, you will need to use the &lt;code&gt;--debug-addr&lt;/code&gt; flag and provide an address:port. You can also pass an empty string &lt;code&gt;&#39;&#39;&lt;/code&gt; to turn off this feature or pass &lt;code&gt;localhost:0&lt;/code&gt; to randomly select a port.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;hr&gt; &lt;p&gt;[&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/troubleshooting.md&#34;&gt;TROUBLESHOOTING&lt;/a&gt;]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Security Notice&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to report a security critical bug related to the relayer repo, please reach out @jackzampolin or @Ethereal0ne on telegram.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;The Cosmos community is dedicated to providing an inclusive and harassment free experience for contributors. Please visit &lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cosmos/relayer/main/docs/create-path-across-chain.md&#34;&gt;Create Path Across Chains --&amp;gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>