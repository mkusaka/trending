<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-01T01:35:42Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aquasecurity/trivy-operator</title>
    <updated>2023-02-01T01:35:42Z</updated>
    <id>tag:github.com,2023-02-01:/aquasecurity/trivy-operator</id>
    <link href="https://github.com/aquasecurity/trivy-operator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kubernetes-native security toolkit&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/docs/images/trivy-operator-logo.png&#34; alt=&#34;Trivy-operator logo&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Kubernetes-native security toolkit. (&lt;a href=&#34;https://aquasecurity.github.io/trivy-operator/latest&#34;&gt;Documentation&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aquasecurity/trivy-operator/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/aquasecurity/trivy-operator.svg?logo=github&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aquasecurity/trivy-operator/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/aquasecurity/trivy-operator/actions/workflows/build.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build Action&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aquasecurity/trivy-operator/actions/workflows/release-snapshot.yaml&#34;&gt;&lt;img src=&#34;https://github.com/aquasecurity/trivy-operator/actions/workflows/release-snapshot.yaml/badge.svg?sanitize=true&#34; alt=&#34;Release snapshot Action&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aquasecurity/trivy-operator/actions/workflows/e2e.yaml/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/aquasecurity/trivy-operator/actions/workflows/e2e.yaml/badge.svg?sanitize=true&#34; alt=&#34;End to End Testing&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/aquasecurity/trivy-operator&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/aquasecurity/trivy-operator&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aquasecurity/trivy-operator/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/aquasecurity/trivy-operator.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/aquasecurity/trivy-operator/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/aquasecurity/trivy-operator/total?logo=github&#34; alt=&#34;GitHub All Releases&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/aquasec/trivy-operator?logo=docker&amp;amp;label=docker%20pulls%20%2F%20trivy%20operator&#34; alt=&#34;Docker Pulls Trivy-operator&#34;&gt; &lt;a href=&#34;https://slack.aquasec.com/?_ga=2.51428586.2119512742.1655808394-1739877964.1641199050&#34;&gt; &lt;img src=&#34;https://img.shields.io/static/v1?label=Slack&amp;amp;message=Join+our+Community&amp;amp;color=4a154b&amp;amp;logo=slack&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/search?repo=trivy-operator&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/trivy-operator&#34; alt=&#34;Artifact Hub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;There are lots of security tools in the cloud native world, created by Aqua and by others, for identifying and informing users about security issues in Kubernetes workloads and infrastructure components. However powerful and useful they might be, they tend to sit alongside Kubernetes, with each new product requiring users to learn a separate set of commands and installation steps in order to operate them and find critical security information.&lt;/p&gt; &#xA;&lt;p&gt;The Trivy-Operator leverages trivy security tools by incorporating their outputs into Kubernetes CRDs (Custom Resource Definitions) and from there, making security reports accessible through the Kubernetes API. This way users can find and view the risks that relate to different resources in what we call a Kubernetes-native way.&lt;/p&gt; &#xA;&lt;p&gt;The Trivy operator automatically updates security reports in response to workload and other changes on a Kubernetes cluster, generating the following reports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vulnerability Scans: Automated vulnerability scanning for Kubernetes workloads.&lt;/li&gt; &#xA; &lt;li&gt;ConfigAudit Scans: Automated configuration audits for Kubernetes resources with predefined rules or custom Open Policy Agent (OPA) policies.&lt;/li&gt; &#xA; &lt;li&gt;Exposed Secret Scans: Automated secret scans which find and detail the location of exposed Secrets within your cluster.&lt;/li&gt; &#xA; &lt;li&gt;RBAC scans: Role Based Access Control scans provide detailed information on the access rights of the different resources installed.&lt;/li&gt; &#xA; &lt;li&gt;K8s core component infra assessment scan Kubernetes infra core components (etcd,apiserver,scheduler,controller-manager and etc) setting and configuration.&lt;/li&gt; &#xA; &lt;li&gt;Compliance reports &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NSA, CISA Kubernetes Hardening Guidance v1.1 cybersecurity technical report is produced.&lt;/li&gt; &#xA;   &lt;li&gt;CIS Kubernetes Benchmark v1.23 cybersecurity technical report is produced.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/docs/images/trivy-operator-overview.png&#34; alt=&#34;Trivy-operator Overview&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Please &lt;a href=&#34;https://github.com/aquasecurity/trivy-operator/stargazers&#34;&gt;star ‚≠ê&lt;/a&gt; the repo if you want us to continue developing and improving trivy-operator! üòÄ&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;p&gt;Although we are trying to keep new releases backward compatible with previous versions, this project is still incubating, and some APIs and &lt;a href=&#34;https://aquasecurity.github.io/trivy-operator/latest/crds&#34;&gt;Custom Resource Definitions&lt;/a&gt; may change.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;The official &lt;a href=&#34;https://aquasecurity.github.io/trivy-operator/latest&#34;&gt;Documentation&lt;/a&gt; provides detailed installation, configuration, troubleshooting, and quick start guides.&lt;/p&gt; &#xA;&lt;p&gt;You can install the Trivy-operator Operator with &lt;a href=&#34;https://aquasecurity.github.io/trivy-operator/latest/operator/installation/kubectl&#34;&gt;Static YAML Manifests&lt;/a&gt; and follow the &lt;a href=&#34;https://aquasecurity.github.io/trivy-operator/latest/operator&#34;&gt;Getting Started&lt;/a&gt; guide to see how vulnerability and configuration audit reports are generated automatically.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;At this early stage we would love your feedback on the overall concept of Trivy-Operator. Over time, we&#39;d love to see contributions integrating different security tools so that users can access security information in standard, Kubernetes-native ways.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/aquasecurity/trivy-operator/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for information about setting up your development environment, and the contribution workflow that we expect.&lt;/li&gt; &#xA; &lt;li&gt;Please ensure that you are following our &lt;a href=&#34;https://github.com/aquasecurity/community/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code Of Conduct&lt;/a&gt; during any interaction with the Aqua projects and their community.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Trivy-Operator is an &lt;a href=&#34;https://aquasec.com&#34;&gt;Aqua Security&lt;/a&gt; open source project.&lt;br&gt; Learn about our &lt;a href=&#34;https://www.aquasec.com/products/open-source-projects/&#34;&gt;Open Source Work and Portfolio&lt;/a&gt;.&lt;br&gt; Join the community, and talk to us about any matter in &lt;a href=&#34;https://github.com/aquasecurity/trivy-operator/discussions&#34;&gt;GitHub Discussions&lt;/a&gt; or &lt;a href=&#34;https://slack.aquasec.com/&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-co-op/gocron</title>
    <updated>2023-02-01T01:35:42Z</updated>
    <id>tag:github.com,2023-02-01:/go-co-op/gocron</id>
    <link href="https://github.com/go-co-op/gocron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy and fluent Go cron scheduling. This is a fork from https://github.com/jasonlvhit/gocron&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gocron: A Golang Job Scheduling Package.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-co-op/gocron/actions?query=workflow%3A%22lint%22&#34;&gt;&lt;img src=&#34;https://github.com/go-co-op/gocron/workflows/Go%20Test/badge.svg?sanitize=true&#34; alt=&#34;CI State&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/go-co-op/gocron&#34; alt=&#34;Go Report Card&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/go-co-op/gocron&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-co-op/gocron?status.svg?sanitize=true&#34; alt=&#34;Go Doc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;gocron is a job scheduling package which lets you run Go functions at pre-determined intervals using a simple, human-friendly syntax.&lt;/p&gt; &#xA;&lt;p&gt;gocron is a Golang scheduler implementation similar to the Ruby module &lt;a href=&#34;https://github.com/tomykaira/clockwork&#34;&gt;clockwork&lt;/a&gt; and the Python job scheduling package &lt;a href=&#34;https://github.com/dbader/schedule&#34;&gt;schedule&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also these two great articles that were used for design input:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://adam.herokuapp.com/past/2010/4/13/rethinking_cron/&#34;&gt;Rethinking Cron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://adam.herokuapp.com/past/2010/6/30/replace_cron_with_clockwork/&#34;&gt;Replace Cron with Clockwork&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to chat, you can find us at Slack! &lt;a href=&#34;https://gophers.slack.com/archives/CQ7T0T1FW&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gophers-gocron-brightgreen?logo=slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Concepts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduler&lt;/strong&gt;: The scheduler tracks all the jobs assigned to it and makes sure they are passed to the executor when ready to be run. The scheduler is able to manage overall aspects of job behavior like limiting how many jobs are running at one time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Job&lt;/strong&gt;: The job is simply aware of the task (go function) it&#39;s provided and is therefore only able to perform actions related to that task like preventing itself from overruning a previous task that is taking a long time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Executor&lt;/strong&gt;: The executor, as it&#39;s name suggests, is simply responsible for calling the task (go function) that the job hands to it when sent by the scheduler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;s := gocron.NewScheduler(time.UTC)&#xA;&#xA;s.Every(5).Seconds().Do(func(){ ... })&#xA;&#xA;// strings parse to duration&#xA;s.Every(&#34;5m&#34;).Do(func(){ ... })&#xA;&#xA;s.Every(5).Days().Do(func(){ ... })&#xA;&#xA;s.Every(1).Month(1, 2, 3).Do(func(){ ... })&#xA;&#xA;// set time&#xA;s.Every(1).Day().At(&#34;10:30&#34;).Do(func(){ ... })&#xA;&#xA;// set multiple times&#xA;s.Every(1).Day().At(&#34;10:30;08:00&#34;).Do(func(){ ... })&#xA;&#xA;s.Every(1).Day().At(&#34;10:30&#34;).At(&#34;08:00&#34;).Do(func(){ ... })&#xA;&#xA;// Schedule each last day of the month&#xA;s.Every(1).MonthLastDay().Do(func(){ ... })&#xA;&#xA;// Or each last day of every other month&#xA;s.Every(2).MonthLastDay().Do(func(){ ... })&#xA;&#xA;// cron expressions supported&#xA;s.Cron(&#34;*/1 * * * *&#34;).Do(task) // every minute&#xA;&#xA;// you can start running the scheduler in two different ways:&#xA;// starts the scheduler asynchronously&#xA;s.StartAsync()&#xA;// starts the scheduler and blocks current execution path&#xA;s.StartBlocking()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples, take a look in our &lt;a href=&#34;https://pkg.go.dev/github.com/go-co-op/gocron#pkg-examples&#34;&gt;go docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Interval&lt;/th&gt; &#xA;   &lt;th&gt;Supported schedule options&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sub-second&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;milliseconds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seconds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minutes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hours&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;days&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;, &lt;code&gt;At()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;weeks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;, &lt;code&gt;At()&lt;/code&gt;, &lt;code&gt;Weekday()&lt;/code&gt; (and all week day named functions)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;months&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;StartAt()&lt;/code&gt;, &lt;code&gt;At()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;There are several options available to restrict how jobs run:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Behavior&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Default&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;jobs are rescheduled at every interval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Job singleton&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SingletonMode()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a long running job will not be rescheduled until the current run is completed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scheduler limit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SetMaxConcurrentJobs()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;set a collective maximum number of concurrent jobs running across the scheduler&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Tags&lt;/h2&gt; &#xA;&lt;p&gt;Jobs may have arbitrary tags added which can be useful when tracking many jobs. The scheduler supports both enforcing tags to be unique and when not unique, running all jobs with a given tag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;s := gocron.NewScheduler(time.UTC)&#xA;s.TagsUnique()&#xA;&#xA;_, _ = s.Every(1).Week().Tag(&#34;foo&#34;).Do(task)&#xA;_, err := s.Every(1).Week().Tag(&#34;foo&#34;).Do(task)&#xA;// error!!!&#xA;&#xA;s := gocron.NewScheduler(time.UTC)&#xA;&#xA;s.Every(2).Day().Tag(&#34;tag&#34;).At(&#34;10:00&#34;).Do(task)&#xA;s.Every(1).Minute().Tag(&#34;tag&#34;).Do(task)&#xA;s.RunByTag(&#34;tag&#34;)&#xA;// both jobs will run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: I&#39;m running multiple pods on a distributed environment. How can I make a job not run once per pod causing duplication?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: We recommend using your own lock solution within the jobs themselves (you could use &lt;a href=&#34;https://redis.io/topics/distlock&#34;&gt;Redis&lt;/a&gt;, for example)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: I&#39;ve removed my job from the scheduler, but how can I stop a long-running job that has already been triggered?&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A: We recommend using a means of canceling your job, e.g. a &lt;code&gt;context.WithCancel()&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Looking to contribute? Try to follow these guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use issues for everything&lt;/li&gt; &#xA; &lt;li&gt;For a small change, just send a PR!&lt;/li&gt; &#xA; &lt;li&gt;For bigger changes, please open an issue for discussion before sending a PR.&lt;/li&gt; &#xA; &lt;li&gt;PRs should have: tests, documentation and examples (if it makes sense)&lt;/li&gt; &#xA; &lt;li&gt;You can also contribute by: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Reporting issues&lt;/li&gt; &#xA;   &lt;li&gt;Suggesting new features or enhancements&lt;/li&gt; &#xA;   &lt;li&gt;Improving/fixing documentation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/19351306/110375142-2ba88680-8017-11eb-80c3-554cc746b165.png&#34; alt=&#34;design-diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=gocron&#34;&gt;Jetbrains&lt;/a&gt; supports this project with GoLand licenses. We appreciate their support for free and open source software!&lt;/p&gt;</summary>
  </entry>
</feed>