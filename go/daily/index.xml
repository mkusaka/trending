<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-08T01:36:34Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>boltdb/bolt</title>
    <updated>2023-07-08T01:36:34Z</updated>
    <id>tag:github.com,2023-07-08:/boltdb/bolt</id>
    <link href="https://github.com/boltdb/bolt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An embedded key/value database for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bolt &lt;a href=&#34;https://coveralls.io/r/boltdb/bolt?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/boltdb/bolt/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/boltdb/bolt&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/boltdb/bolt?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/version-1.2.1-green.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Bolt is a pure Go key/value store inspired by &lt;a href=&#34;https://twitter.com/hyc_symas&#34;&gt;Howard Chu&#39;s&lt;/a&gt; &lt;a href=&#34;http://symas.com/mdb/&#34;&gt;LMDB project&lt;/a&gt;. The goal of the project is to provide a simple, fast, and reliable database for projects that don&#39;t require a full database server such as Postgres or MySQL.&lt;/p&gt; &#xA;&lt;p&gt;Since Bolt is meant to be used as such a low-level piece of functionality, simplicity is key. The API will be small and only focus on getting values and setting values. That&#39;s it.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;Bolt is stable, the API is fixed, and the file format is fixed. Full unit test coverage and randomized black box testing are used to ensure database consistency and thread safety. Bolt is currently used in high-load production environments serving databases as large as 1TB. Many companies such as Shopify and Heroku use Bolt-backed services every day.&lt;/p&gt; &#xA;&lt;h2&gt;A message from the author&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The original goal of Bolt was to provide a simple pure Go key/value store and to not bloat the code with extraneous features. To that end, the project has been a success. However, this limited scope also means that the project is complete.&lt;/p&gt; &#xA; &lt;p&gt;Maintaining an open source database requires an immense amount of time and energy. Changes to the code can have unintended and sometimes catastrophic effects so even simple changes require hours and hours of careful testing and validation.&lt;/p&gt; &#xA; &lt;p&gt;Unfortunately I no longer have the time or energy to continue this work. Bolt is in a stable state and has years of successful production use. As such, I feel that leaving it in its current state is the most prudent course of action.&lt;/p&gt; &#xA; &lt;p&gt;If you are interested in using a more featureful version of Bolt, I suggest that you look at the CoreOS fork called &lt;a href=&#34;https://github.com/coreos/bbolt&#34;&gt;bbolt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ben Johnson (&lt;a href=&#34;https://twitter.com/benbjohnson&#34;&gt;@benbjohnson&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#opening-a-database&#34;&gt;Opening a database&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#transactions&#34;&gt;Transactions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#read-write-transactions&#34;&gt;Read-write transactions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#read-only-transactions&#34;&gt;Read-only transactions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#batch-read-write-transactions&#34;&gt;Batch read-write transactions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#managing-transactions-manually&#34;&gt;Managing transactions manually&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#using-buckets&#34;&gt;Using buckets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#using-keyvalue-pairs&#34;&gt;Using key/value pairs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#autoincrementing-integer-for-the-bucket&#34;&gt;Autoincrementing integer for the bucket&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#iterating-over-keys&#34;&gt;Iterating over keys&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#prefix-scans&#34;&gt;Prefix scans&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#range-scans&#34;&gt;Range scans&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#foreach&#34;&gt;ForEach()&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#nested-buckets&#34;&gt;Nested buckets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#database-backups&#34;&gt;Database backups&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#statistics&#34;&gt;Statistics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#read-only-mode&#34;&gt;Read-Only Mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#mobile-use-iosandroid&#34;&gt;Mobile Use (iOS/Android)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#comparison-with-other-databases&#34;&gt;Comparison with other databases&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#postgres-mysql--other-relational-databases&#34;&gt;Postgres, MySQL, &amp;amp; other relational databases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#leveldb-rocksdb&#34;&gt;LevelDB, RocksDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#lmdb&#34;&gt;LMDB&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#caveats--limitations&#34;&gt;Caveats &amp;amp; Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#reading-the-source&#34;&gt;Reading the Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/boltdb/bolt/master/#other-projects-using-bolt&#34;&gt;Other Projects Using Bolt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;To start using Bolt, install Go and run &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get github.com/boltdb/bolt/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will retrieve the library and install the &lt;code&gt;bolt&lt;/code&gt; command line utility into your &lt;code&gt;$GOBIN&lt;/code&gt; path.&lt;/p&gt; &#xA;&lt;h3&gt;Opening a database&lt;/h3&gt; &#xA;&lt;p&gt;The top-level object in Bolt is a &lt;code&gt;DB&lt;/code&gt;. It is represented as a single file on your disk and represents a consistent snapshot of your data.&lt;/p&gt; &#xA;&lt;p&gt;To open your database, simply use the &lt;code&gt;bolt.Open()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/boltdb/bolt&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Open the my.db data file in your current directory.&#xA;&#x9;// It will be created if it doesn&#39;t exist.&#xA;&#x9;db, err := bolt.Open(&#34;my.db&#34;, 0600, nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#x9;defer db.Close()&#xA;&#xA;&#x9;...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that Bolt obtains a file lock on the data file so multiple processes cannot open the same database at the same time. Opening an already open Bolt database will cause it to hang until the other process closes it. To prevent an indefinite wait you can pass a timeout option to the &lt;code&gt;Open()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db, err := bolt.Open(&#34;my.db&#34;, 0600, &amp;amp;bolt.Options{Timeout: 1 * time.Second})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Transactions&lt;/h3&gt; &#xA;&lt;p&gt;Bolt allows only one read-write transaction at a time but allows as many read-only transactions as you want at a time. Each transaction has a consistent view of the data as it existed when the transaction started.&lt;/p&gt; &#xA;&lt;p&gt;Individual transactions and all objects created from them (e.g. buckets, keys) are not thread safe. To work with data in multiple goroutines you must start a transaction for each one or use locking to ensure only one goroutine accesses a transaction at a time. Creating transaction from the &lt;code&gt;DB&lt;/code&gt; is thread safe.&lt;/p&gt; &#xA;&lt;p&gt;Read-only transactions and read-write transactions should not depend on one another and generally shouldn&#39;t be opened simultaneously in the same goroutine. This can cause a deadlock as the read-write transaction needs to periodically re-map the data file but it cannot do so while a read-only transaction is open.&lt;/p&gt; &#xA;&lt;h4&gt;Read-write transactions&lt;/h4&gt; &#xA;&lt;p&gt;To start a read-write transaction, you can use the &lt;code&gt;DB.Update()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := db.Update(func(tx *bolt.Tx) error {&#xA;&#x9;...&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside the closure, you have a consistent view of the database. You commit the transaction by returning &lt;code&gt;nil&lt;/code&gt; at the end. You can also rollback the transaction at any point by returning an error. All database operations are allowed inside a read-write transaction.&lt;/p&gt; &#xA;&lt;p&gt;Always check the return error as it will report any disk failures that can cause your transaction to not complete. If you return an error within your closure it will be passed through.&lt;/p&gt; &#xA;&lt;h4&gt;Read-only transactions&lt;/h4&gt; &#xA;&lt;p&gt;To start a read-only transaction, you can use the &lt;code&gt;DB.View()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := db.View(func(tx *bolt.Tx) error {&#xA;&#x9;...&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also get a consistent view of the database within this closure, however, no mutating operations are allowed within a read-only transaction. You can only retrieve buckets, retrieve values, and copy the database within a read-only transaction.&lt;/p&gt; &#xA;&lt;h4&gt;Batch read-write transactions&lt;/h4&gt; &#xA;&lt;p&gt;Each &lt;code&gt;DB.Update()&lt;/code&gt; waits for disk to commit the writes. This overhead can be minimized by combining multiple updates with the &lt;code&gt;DB.Batch()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := db.Batch(func(tx *bolt.Tx) error {&#xA;&#x9;...&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Concurrent Batch calls are opportunistically combined into larger transactions. Batch is only useful when there are multiple goroutines calling it.&lt;/p&gt; &#xA;&lt;p&gt;The trade-off is that &lt;code&gt;Batch&lt;/code&gt; can call the given function multiple times, if parts of the transaction fail. The function must be idempotent and side effects must take effect only after a successful return from &lt;code&gt;DB.Batch()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example: don&#39;t display messages from inside the function, instead set variables in the enclosing scope:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var id uint64&#xA;err := db.Batch(func(tx *bolt.Tx) error {&#xA;&#x9;// Find last key in bucket, decode as bigendian uint64, increment&#xA;&#x9;// by one, encode back to []byte, and add new key.&#xA;&#x9;...&#xA;&#x9;id = newValue&#xA;&#x9;return nil&#xA;})&#xA;if err != nil {&#xA;&#x9;return ...&#xA;}&#xA;fmt.Println(&#34;Allocated ID %d&#34;, id)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Managing transactions manually&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;DB.View()&lt;/code&gt; and &lt;code&gt;DB.Update()&lt;/code&gt; functions are wrappers around the &lt;code&gt;DB.Begin()&lt;/code&gt; function. These helper functions will start the transaction, execute a function, and then safely close your transaction if an error is returned. This is the recommended way to use Bolt transactions.&lt;/p&gt; &#xA;&lt;p&gt;However, sometimes you may want to manually start and end your transactions. You can use the &lt;code&gt;DB.Begin()&lt;/code&gt; function directly but &lt;strong&gt;please&lt;/strong&gt; be sure to close the transaction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Start a writable transaction.&#xA;tx, err := db.Begin(true)&#xA;if err != nil {&#xA;    return err&#xA;}&#xA;defer tx.Rollback()&#xA;&#xA;// Use the transaction...&#xA;_, err := tx.CreateBucket([]byte(&#34;MyBucket&#34;))&#xA;if err != nil {&#xA;    return err&#xA;}&#xA;&#xA;// Commit the transaction and check for error.&#xA;if err := tx.Commit(); err != nil {&#xA;    return err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first argument to &lt;code&gt;DB.Begin()&lt;/code&gt; is a boolean stating if the transaction should be writable.&lt;/p&gt; &#xA;&lt;h3&gt;Using buckets&lt;/h3&gt; &#xA;&lt;p&gt;Buckets are collections of key/value pairs within the database. All keys in a bucket must be unique. You can create a bucket using the &lt;code&gt;DB.CreateBucket()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db.Update(func(tx *bolt.Tx) error {&#xA;&#x9;b, err := tx.CreateBucket([]byte(&#34;MyBucket&#34;))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return fmt.Errorf(&#34;create bucket: %s&#34;, err)&#xA;&#x9;}&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create a bucket only if it doesn&#39;t exist by using the &lt;code&gt;Tx.CreateBucketIfNotExists()&lt;/code&gt; function. It&#39;s a common pattern to call this function for all your top-level buckets after you open your database so you can guarantee that they exist for future transactions.&lt;/p&gt; &#xA;&lt;p&gt;To delete a bucket, simply call the &lt;code&gt;Tx.DeleteBucket()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h3&gt;Using key/value pairs&lt;/h3&gt; &#xA;&lt;p&gt;To save a key/value pair to a bucket, use the &lt;code&gt;Bucket.Put()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db.Update(func(tx *bolt.Tx) error {&#xA;&#x9;b := tx.Bucket([]byte(&#34;MyBucket&#34;))&#xA;&#x9;err := b.Put([]byte(&#34;answer&#34;), []byte(&#34;42&#34;))&#xA;&#x9;return err&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will set the value of the &lt;code&gt;&#34;answer&#34;&lt;/code&gt; key to &lt;code&gt;&#34;42&#34;&lt;/code&gt; in the &lt;code&gt;MyBucket&lt;/code&gt; bucket. To retrieve this value, we can use the &lt;code&gt;Bucket.Get()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db.View(func(tx *bolt.Tx) error {&#xA;&#x9;b := tx.Bucket([]byte(&#34;MyBucket&#34;))&#xA;&#x9;v := b.Get([]byte(&#34;answer&#34;))&#xA;&#x9;fmt.Printf(&#34;The answer is: %s\n&#34;, v)&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Get()&lt;/code&gt; function does not return an error because its operation is guaranteed to work (unless there is some kind of system failure). If the key exists then it will return its byte slice value. If it doesn&#39;t exist then it will return &lt;code&gt;nil&lt;/code&gt;. It&#39;s important to note that you can have a zero-length value set to a key which is different than the key not existing.&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;Bucket.Delete()&lt;/code&gt; function to delete a key from the bucket.&lt;/p&gt; &#xA;&lt;p&gt;Please note that values returned from &lt;code&gt;Get()&lt;/code&gt; are only valid while the transaction is open. If you need to use a value outside of the transaction then you must use &lt;code&gt;copy()&lt;/code&gt; to copy it to another byte slice.&lt;/p&gt; &#xA;&lt;h3&gt;Autoincrementing integer for the bucket&lt;/h3&gt; &#xA;&lt;p&gt;By using the &lt;code&gt;NextSequence()&lt;/code&gt; function, you can let Bolt determine a sequence which can be used as the unique identifier for your key/value pairs. See the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// CreateUser saves u to the store. The new user ID is set on u once the data is persisted.&#xA;func (s *Store) CreateUser(u *User) error {&#xA;    return s.db.Update(func(tx *bolt.Tx) error {&#xA;        // Retrieve the users bucket.&#xA;        // This should be created when the DB is first opened.&#xA;        b := tx.Bucket([]byte(&#34;users&#34;))&#xA;&#xA;        // Generate ID for the user.&#xA;        // This returns an error only if the Tx is closed or not writeable.&#xA;        // That can&#39;t happen in an Update() call so I ignore the error check.&#xA;        id, _ := b.NextSequence()&#xA;        u.ID = int(id)&#xA;&#xA;        // Marshal user data into bytes.&#xA;        buf, err := json.Marshal(u)&#xA;        if err != nil {&#xA;            return err&#xA;        }&#xA;&#xA;        // Persist bytes to users bucket.&#xA;        return b.Put(itob(u.ID), buf)&#xA;    })&#xA;}&#xA;&#xA;// itob returns an 8-byte big endian representation of v.&#xA;func itob(v int) []byte {&#xA;    b := make([]byte, 8)&#xA;    binary.BigEndian.PutUint64(b, uint64(v))&#xA;    return b&#xA;}&#xA;&#xA;type User struct {&#xA;    ID int&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Iterating over keys&lt;/h3&gt; &#xA;&lt;p&gt;Bolt stores its keys in byte-sorted order within a bucket. This makes sequential iteration over these keys extremely fast. To iterate over keys we&#39;ll use a &lt;code&gt;Cursor&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db.View(func(tx *bolt.Tx) error {&#xA;&#x9;// Assume bucket exists and has keys&#xA;&#x9;b := tx.Bucket([]byte(&#34;MyBucket&#34;))&#xA;&#xA;&#x9;c := b.Cursor()&#xA;&#xA;&#x9;for k, v := c.First(); k != nil; k, v = c.Next() {&#xA;&#x9;&#x9;fmt.Printf(&#34;key=%s, value=%s\n&#34;, k, v)&#xA;&#x9;}&#xA;&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cursor allows you to move to a specific point in the list of keys and move forward or backward through the keys one at a time.&lt;/p&gt; &#xA;&lt;p&gt;The following functions are available on the cursor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;First()  Move to the first key.&#xA;Last()   Move to the last key.&#xA;Seek()   Move to a specific key.&#xA;Next()   Move to the next key.&#xA;Prev()   Move to the previous key.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of those functions has a return signature of &lt;code&gt;(key []byte, value []byte)&lt;/code&gt;. When you have iterated to the end of the cursor then &lt;code&gt;Next()&lt;/code&gt; will return a &lt;code&gt;nil&lt;/code&gt; key. You must seek to a position using &lt;code&gt;First()&lt;/code&gt;, &lt;code&gt;Last()&lt;/code&gt;, or &lt;code&gt;Seek()&lt;/code&gt; before calling &lt;code&gt;Next()&lt;/code&gt; or &lt;code&gt;Prev()&lt;/code&gt;. If you do not seek to a position then these functions will return a &lt;code&gt;nil&lt;/code&gt; key.&lt;/p&gt; &#xA;&lt;p&gt;During iteration, if the key is non-&lt;code&gt;nil&lt;/code&gt; but the value is &lt;code&gt;nil&lt;/code&gt;, that means the key refers to a bucket rather than a value. Use &lt;code&gt;Bucket.Bucket()&lt;/code&gt; to access the sub-bucket.&lt;/p&gt; &#xA;&lt;h4&gt;Prefix scans&lt;/h4&gt; &#xA;&lt;p&gt;To iterate over a key prefix, you can combine &lt;code&gt;Seek()&lt;/code&gt; and &lt;code&gt;bytes.HasPrefix()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db.View(func(tx *bolt.Tx) error {&#xA;&#x9;// Assume bucket exists and has keys&#xA;&#x9;c := tx.Bucket([]byte(&#34;MyBucket&#34;)).Cursor()&#xA;&#xA;&#x9;prefix := []byte(&#34;1234&#34;)&#xA;&#x9;for k, v := c.Seek(prefix); k != nil &amp;amp;&amp;amp; bytes.HasPrefix(k, prefix); k, v = c.Next() {&#xA;&#x9;&#x9;fmt.Printf(&#34;key=%s, value=%s\n&#34;, k, v)&#xA;&#x9;}&#xA;&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Range scans&lt;/h4&gt; &#xA;&lt;p&gt;Another common use case is scanning over a range such as a time range. If you use a sortable time encoding such as RFC3339 then you can query a specific date range like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db.View(func(tx *bolt.Tx) error {&#xA;&#x9;// Assume our events bucket exists and has RFC3339 encoded time keys.&#xA;&#x9;c := tx.Bucket([]byte(&#34;Events&#34;)).Cursor()&#xA;&#xA;&#x9;// Our time range spans the 90&#39;s decade.&#xA;&#x9;min := []byte(&#34;1990-01-01T00:00:00Z&#34;)&#xA;&#x9;max := []byte(&#34;2000-01-01T00:00:00Z&#34;)&#xA;&#xA;&#x9;// Iterate over the 90&#39;s.&#xA;&#x9;for k, v := c.Seek(min); k != nil &amp;amp;&amp;amp; bytes.Compare(k, max) &amp;lt;= 0; k, v = c.Next() {&#xA;&#x9;&#x9;fmt.Printf(&#34;%s: %s\n&#34;, k, v)&#xA;&#x9;}&#xA;&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, while RFC3339 is sortable, the Golang implementation of RFC3339Nano does not use a fixed number of digits after the decimal point and is therefore not sortable.&lt;/p&gt; &#xA;&lt;h4&gt;ForEach()&lt;/h4&gt; &#xA;&lt;p&gt;You can also use the function &lt;code&gt;ForEach()&lt;/code&gt; if you know you&#39;ll be iterating over all the keys in a bucket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db.View(func(tx *bolt.Tx) error {&#xA;&#x9;// Assume bucket exists and has keys&#xA;&#x9;b := tx.Bucket([]byte(&#34;MyBucket&#34;))&#xA;&#xA;&#x9;b.ForEach(func(k, v []byte) error {&#xA;&#x9;&#x9;fmt.Printf(&#34;key=%s, value=%s\n&#34;, k, v)&#xA;&#x9;&#x9;return nil&#xA;&#x9;})&#xA;&#x9;return nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that keys and values in &lt;code&gt;ForEach()&lt;/code&gt; are only valid while the transaction is open. If you need to use a key or value outside of the transaction, you must use &lt;code&gt;copy()&lt;/code&gt; to copy it to another byte slice.&lt;/p&gt; &#xA;&lt;h3&gt;Nested buckets&lt;/h3&gt; &#xA;&lt;p&gt;You can also store a bucket in a key to create nested buckets. The API is the same as the bucket management API on the &lt;code&gt;DB&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (*Bucket) CreateBucket(key []byte) (*Bucket, error)&#xA;func (*Bucket) CreateBucketIfNotExists(key []byte) (*Bucket, error)&#xA;func (*Bucket) DeleteBucket(key []byte) error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Say you had a multi-tenant application where the root level bucket was the account bucket. Inside of this bucket was a sequence of accounts which themselves are buckets. And inside the sequence bucket you could have many buckets pertaining to the Account itself (Users, Notes, etc) isolating the information into logical groupings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;// createUser creates a new user in the given account.&#xA;func createUser(accountID int, u *User) error {&#xA;    // Start the transaction.&#xA;    tx, err := db.Begin(true)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    defer tx.Rollback()&#xA;&#xA;    // Retrieve the root bucket for the account.&#xA;    // Assume this has already been created when the account was set up.&#xA;    root := tx.Bucket([]byte(strconv.FormatUint(accountID, 10)))&#xA;&#xA;    // Setup the users bucket.&#xA;    bkt, err := root.CreateBucketIfNotExists([]byte(&#34;USERS&#34;))&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    // Generate an ID for the new user.&#xA;    userID, err := bkt.NextSequence()&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    u.ID = userID&#xA;&#xA;    // Marshal and save the encoded user.&#xA;    if buf, err := json.Marshal(u); err != nil {&#xA;        return err&#xA;    } else if err := bkt.Put([]byte(strconv.FormatUint(u.ID, 10)), buf); err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    // Commit the transaction.&#xA;    if err := tx.Commit(); err != nil {&#xA;        return err&#xA;    }&#xA;&#xA;    return nil&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Database backups&lt;/h3&gt; &#xA;&lt;p&gt;Bolt is a single file so it&#39;s easy to backup. You can use the &lt;code&gt;Tx.WriteTo()&lt;/code&gt; function to write a consistent view of the database to a writer. If you call this from a read-only transaction, it will perform a hot backup and not block your other database reads and writes.&lt;/p&gt; &#xA;&lt;p&gt;By default, it will use a regular file handle which will utilize the operating system&#39;s page cache. See the &lt;a href=&#34;https://godoc.org/github.com/boltdb/bolt#Tx&#34;&gt;&lt;code&gt;Tx&lt;/code&gt;&lt;/a&gt; documentation for information about optimizing for larger-than-RAM datasets.&lt;/p&gt; &#xA;&lt;p&gt;One common use case is to backup over HTTP so you can use tools like &lt;code&gt;cURL&lt;/code&gt; to do database backups:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func BackupHandleFunc(w http.ResponseWriter, req *http.Request) {&#xA;&#x9;err := db.View(func(tx *bolt.Tx) error {&#xA;&#x9;&#x9;w.Header().Set(&#34;Content-Type&#34;, &#34;application/octet-stream&#34;)&#xA;&#x9;&#x9;w.Header().Set(&#34;Content-Disposition&#34;, `attachment; filename=&#34;my.db&#34;`)&#xA;&#x9;&#x9;w.Header().Set(&#34;Content-Length&#34;, strconv.Itoa(int(tx.Size())))&#xA;&#x9;&#x9;_, err := tx.WriteTo(w)&#xA;&#x9;&#x9;return err&#xA;&#x9;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;http.Error(w, err.Error(), http.StatusInternalServerError)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can backup using this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl http://localhost/backup &amp;gt; my.db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can open your browser to &lt;code&gt;http://localhost/backup&lt;/code&gt; and it will download automatically.&lt;/p&gt; &#xA;&lt;p&gt;If you want to backup to another file you can use the &lt;code&gt;Tx.CopyFile()&lt;/code&gt; helper function.&lt;/p&gt; &#xA;&lt;h3&gt;Statistics&lt;/h3&gt; &#xA;&lt;p&gt;The database keeps a running count of many of the internal operations it performs so you can better understand what&#39;s going on. By grabbing a snapshot of these stats at two points in time we can see what operations were performed in that time range.&lt;/p&gt; &#xA;&lt;p&gt;For example, we could start a goroutine to log stats every 10 seconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;go func() {&#xA;&#x9;// Grab the initial stats.&#xA;&#x9;prev := db.Stats()&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;// Wait for 10s.&#xA;&#x9;&#x9;time.Sleep(10 * time.Second)&#xA;&#xA;&#x9;&#x9;// Grab the current stats and diff them.&#xA;&#x9;&#x9;stats := db.Stats()&#xA;&#x9;&#x9;diff := stats.Sub(&amp;amp;prev)&#xA;&#xA;&#x9;&#x9;// Encode stats to JSON and print to STDERR.&#xA;&#x9;&#x9;json.NewEncoder(os.Stderr).Encode(diff)&#xA;&#xA;&#x9;&#x9;// Save stats for the next loop.&#xA;&#x9;&#x9;prev = stats&#xA;&#x9;}&#xA;}()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also useful to pipe these stats to a service such as statsd for monitoring or to provide an HTTP endpoint that will perform a fixed-length sample.&lt;/p&gt; &#xA;&lt;h3&gt;Read-Only Mode&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes it is useful to create a shared, read-only Bolt database. To this, set the &lt;code&gt;Options.ReadOnly&lt;/code&gt; flag when opening your database. Read-only mode uses a shared lock to allow multiple processes to read from the database but it will block any processes from opening the database in read-write mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;db, err := bolt.Open(&#34;my.db&#34;, 0666, &amp;amp;bolt.Options{ReadOnly: true})&#xA;if err != nil {&#xA;&#x9;log.Fatal(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mobile Use (iOS/Android)&lt;/h3&gt; &#xA;&lt;p&gt;Bolt is able to run on mobile devices by leveraging the binding feature of the &lt;a href=&#34;https://github.com/golang/mobile&#34;&gt;gomobile&lt;/a&gt; tool. Create a struct that will contain your database logic and a reference to a &lt;code&gt;*bolt.DB&lt;/code&gt; with a initializing constructor that takes in a filepath where the database file will be stored. Neither Android nor iOS require extra permissions or cleanup from using this method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewBoltDB(filepath string) *BoltDB {&#xA;&#x9;db, err := bolt.Open(filepath+&#34;/demo.db&#34;, 0600, nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;return &amp;amp;BoltDB{db}&#xA;}&#xA;&#xA;type BoltDB struct {&#xA;&#x9;db *bolt.DB&#xA;&#x9;...&#xA;}&#xA;&#xA;func (b *BoltDB) Path() string {&#xA;&#x9;return b.db.Path()&#xA;}&#xA;&#xA;func (b *BoltDB) Close() {&#xA;&#x9;b.db.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Database logic should be defined as methods on this wrapper struct.&lt;/p&gt; &#xA;&lt;p&gt;To initialize this struct from the native language (both platforms now sync their local storage to the cloud. These snippets disable that functionality for the database file):&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String path;&#xA;if (android.os.Build.VERSION.SDK_INT &amp;gt;=android.os.Build.VERSION_CODES.LOLLIPOP){&#xA;    path = getNoBackupFilesDir().getAbsolutePath();&#xA;} else{&#xA;    path = getFilesDir().getAbsolutePath();&#xA;}&#xA;Boltmobiledemo.BoltDB boltDB = Boltmobiledemo.NewBoltDB(path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;- (void)demo {&#xA;    NSString* path = [NSSearchPathForDirectoriesInDomains(NSLibraryDirectory,&#xA;                                                          NSUserDomainMask,&#xA;                                                          YES) objectAtIndex:0];&#xA;&#x9;GoBoltmobiledemoBoltDB * demo = GoBoltmobiledemoNewBoltDB(path);&#xA;&#x9;[self addSkipBackupAttributeToItemAtPath:demo.path];&#xA;&#x9;//Some DB Logic would go here&#xA;&#x9;[demo close];&#xA;}&#xA;&#xA;- (BOOL)addSkipBackupAttributeToItemAtPath:(NSString *) filePathString&#xA;{&#xA;    NSURL* URL= [NSURL fileURLWithPath: filePathString];&#xA;    assert([[NSFileManager defaultManager] fileExistsAtPath: [URL path]]);&#xA;&#xA;    NSError *error = nil;&#xA;    BOOL success = [URL setResourceValue: [NSNumber numberWithBool: YES]&#xA;                                  forKey: NSURLIsExcludedFromBackupKey error: &amp;amp;error];&#xA;    if(!success){&#xA;        NSLog(@&#34;Error excluding %@ from backup %@&#34;, [URL lastPathComponent], error);&#xA;    }&#xA;    return success;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;For more information on getting started with Bolt, check out the following articles:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://npf.io/2014/07/intro-to-boltdb-painless-performant-persistence/&#34;&gt;Intro to BoltDB: Painless Performant Persistence&lt;/a&gt; by &lt;a href=&#34;https://github.com/natefinch&#34;&gt;Nate Finch&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.progville.com/go/bolt-embedded-db-golang/&#34;&gt;Bolt -- an embedded key/value database for Go&lt;/a&gt; by Progville&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Comparison with other databases&lt;/h2&gt; &#xA;&lt;h3&gt;Postgres, MySQL, &amp;amp; other relational databases&lt;/h3&gt; &#xA;&lt;p&gt;Relational databases structure data into rows and are only accessible through the use of SQL. This approach provides flexibility in how you store and query your data but also incurs overhead in parsing and planning SQL statements. Bolt accesses all data by a byte slice key. This makes Bolt fast to read and write data by key but provides no built-in support for joining values together.&lt;/p&gt; &#xA;&lt;p&gt;Most relational databases (with the exception of SQLite) are standalone servers that run separately from your application. This gives your systems flexibility to connect multiple application servers to a single database server but also adds overhead in serializing and transporting data over the network. Bolt runs as a library included in your application so all data access has to go through your application&#39;s process. This brings data closer to your application but limits multi-process access to the data.&lt;/p&gt; &#xA;&lt;h3&gt;LevelDB, RocksDB&lt;/h3&gt; &#xA;&lt;p&gt;LevelDB and its derivatives (RocksDB, HyperLevelDB) are similar to Bolt in that they are libraries bundled into the application, however, their underlying structure is a log-structured merge-tree (LSM tree). An LSM tree optimizes random writes by using a write ahead log and multi-tiered, sorted files called SSTables. Bolt uses a B+tree internally and only a single file. Both approaches have trade-offs.&lt;/p&gt; &#xA;&lt;p&gt;If you require a high random write throughput (&amp;gt;10,000 w/sec) or you need to use spinning disks then LevelDB could be a good choice. If your application is read-heavy or does a lot of range scans then Bolt could be a good choice.&lt;/p&gt; &#xA;&lt;p&gt;One other important consideration is that LevelDB does not have transactions. It supports batch writing of key/values pairs and it supports read snapshots but it will not give you the ability to do a compare-and-swap operation safely. Bolt supports fully serializable ACID transactions.&lt;/p&gt; &#xA;&lt;h3&gt;LMDB&lt;/h3&gt; &#xA;&lt;p&gt;Bolt was originally a port of LMDB so it is architecturally similar. Both use a B+tree, have ACID semantics with fully serializable transactions, and support lock-free MVCC using a single writer and multiple readers.&lt;/p&gt; &#xA;&lt;p&gt;The two projects have somewhat diverged. LMDB heavily focuses on raw performance while Bolt has focused on simplicity and ease of use. For example, LMDB allows several unsafe actions such as direct writes for the sake of performance. Bolt opts to disallow actions which can leave the database in a corrupted state. The only exception to this in Bolt is &lt;code&gt;DB.NoSync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are also a few differences in API. LMDB requires a maximum mmap size when opening an &lt;code&gt;mdb_env&lt;/code&gt; whereas Bolt will handle incremental mmap resizing automatically. LMDB overloads the getter and setter functions with multiple flags whereas Bolt splits these specialized cases into their own functions.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats &amp;amp; Limitations&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s important to pick the right tool for the job and Bolt is no exception. Here are a few things to note when evaluating and using Bolt:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Bolt is good for read intensive workloads. Sequential write performance is also fast but random writes can be slow. You can use &lt;code&gt;DB.Batch()&lt;/code&gt; or add a write-ahead log to help mitigate this issue.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bolt uses a B+tree internally so there can be a lot of random page access. SSDs provide a significant performance boost over spinning disks.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try to avoid long running read transactions. Bolt uses copy-on-write so old pages cannot be reclaimed while an old transaction is using them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Byte slices returned from Bolt are only valid during a transaction. Once the transaction has been committed or rolled back then the memory they point to can be reused by a new page or can be unmapped from virtual memory and you&#39;ll see an &lt;code&gt;unexpected fault address&lt;/code&gt; panic when accessing it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bolt uses an exclusive write lock on the database file so it cannot be shared by multiple processes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Be careful when using &lt;code&gt;Bucket.FillPercent&lt;/code&gt;. Setting a high fill percent for buckets that have random inserts will cause your database to have very poor page utilization.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use larger buckets in general. Smaller buckets causes poor page utilization once they become larger than the page size (typically 4KB).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bulk loading a lot of random writes into a new bucket can be slow as the page will not split until the transaction is committed. Randomly inserting more than 100,000 key/value pairs into a single new bucket in a single transaction is not advised.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bolt uses a memory-mapped file so the underlying operating system handles the caching of the data. Typically, the OS will cache as much of the file as it can in memory and will release memory as needed to other processes. This means that Bolt can show very high memory usage when working with large databases. However, this is expected and the OS will release memory as needed. Bolt can handle databases much larger than the available physical RAM, provided its memory-map fits in the process virtual address space. It may be problematic on 32-bits systems.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The data structures in the Bolt database are memory mapped so the data file will be endian specific. This means that you cannot copy a Bolt file from a little endian machine to a big endian machine and have it work. For most users this is not a concern since most modern CPUs are little endian.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Because of the way pages are laid out on disk, Bolt cannot truncate data files and return free pages back to the disk. Instead, Bolt maintains a free list of unused pages within its data file. These free pages can be reused by later transactions. This works well for many use cases as databases generally tend to grow. However, it&#39;s important to note that deleting large chunks of data will not allow you to reclaim that space on disk.&lt;/p&gt; &lt;p&gt;For more information on page allocation, &lt;a href=&#34;https://github.com/boltdb/bolt/issues/308#issuecomment-74811638&#34;&gt;see this comment&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reading the Source&lt;/h2&gt; &#xA;&lt;p&gt;Bolt is a relatively small code base (&amp;lt;3KLOC) for an embedded, serializable, transactional key/value database so it can be a good starting point for people interested in how databases work.&lt;/p&gt; &#xA;&lt;p&gt;The best places to start are the main entry points into Bolt:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Open()&lt;/code&gt; - Initializes the reference to the database. It&#39;s responsible for creating the database if it doesn&#39;t exist, obtaining an exclusive lock on the file, reading the meta pages, &amp;amp; memory-mapping the file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;DB.Begin()&lt;/code&gt; - Starts a read-only or read-write transaction depending on the value of the &lt;code&gt;writable&lt;/code&gt; argument. This requires briefly obtaining the &#34;meta&#34; lock to keep track of open transactions. Only one read-write transaction can exist at a time so the &#34;rwlock&#34; is acquired during the life of a read-write transaction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Bucket.Put()&lt;/code&gt; - Writes a key/value pair into a bucket. After validating the arguments, a cursor is used to traverse the B+tree to the page and position where they key &amp;amp; value will be written. Once the position is found, the bucket materializes the underlying page and the page&#39;s parent pages into memory as &#34;nodes&#34;. These nodes are where mutations occur during read-write transactions. These changes get flushed to disk during commit.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Bucket.Get()&lt;/code&gt; - Retrieves a key/value pair from a bucket. This uses a cursor to move to the page &amp;amp; position of a key/value pair. During a read-only transaction, the key and value data is returned as a direct reference to the underlying mmap file so there&#39;s no allocation overhead. For read-write transactions, this data may reference the mmap file or one of the in-memory node values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Cursor&lt;/code&gt; - This object is simply for traversing the B+tree of on-disk pages or in-memory nodes. It can seek to a specific key, move to the first or last value, or it can move forward or backward. The cursor handles the movement up and down the B+tree transparently to the end user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Tx.Commit()&lt;/code&gt; - Converts the in-memory dirty nodes and the list of free pages into pages to be written to disk. Writing to disk then occurs in two phases. First, the dirty pages are written to disk and an &lt;code&gt;fsync()&lt;/code&gt; occurs. Second, a new meta page with an incremented transaction ID is written and another &lt;code&gt;fsync()&lt;/code&gt; occurs. This two phase write ensures that partially written data pages are ignored in the event of a crash since the meta page pointing to them is never written. Partially written meta pages are invalidated because they are written with a checksum.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have additional notes that could be helpful for others, please submit them via pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Other Projects Using Bolt&lt;/h2&gt; &#xA;&lt;p&gt;Below is a list of public, open source projects that use Bolt:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/evnix/boltdbweb&#34;&gt;BoltDbWeb&lt;/a&gt; - A web based GUI for BoltDB files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gocode.io&#34;&gt;Operation Go: A Routine Mission&lt;/a&gt; - An online programming game for Golang using Bolt for user accounts and a leaderboard.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bazil.org/&#34;&gt;Bazil&lt;/a&gt; - A file system that lets your data reside where it is most convenient for it to reside.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/janelia-flyem/dvid&#34;&gt;DVID&lt;/a&gt; - Added Bolt as optional storage engine and testing it against Basho-tuned leveldb.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skybox/skybox&#34;&gt;Skybox Analytics&lt;/a&gt; - A standalone funnel analysis tool for web analytics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benbjohnson/scuttlebutt&#34;&gt;Scuttlebutt&lt;/a&gt; - Uses Bolt to store and process all Twitter mentions of GitHub projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/peterhellberg/wiki&#34;&gt;Wiki&lt;/a&gt; - A tiny wiki using Goji, BoltDB and Blackfriday.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pressly/chainstore&#34;&gt;ChainStore&lt;/a&gt; - Simple key-value interface to a variety of storage engines organized as a chain of operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/msiebuhr/MetricBase&#34;&gt;MetricBase&lt;/a&gt; - Single-binary version of Graphite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gitchain/gitchain&#34;&gt;Gitchain&lt;/a&gt; - Decentralized, peer-to-peer Git repositories aka &#34;Git meets Bitcoin&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sclasen/event-shuttle&#34;&gt;event-shuttle&lt;/a&gt; - A Unix system service to collect and reliably deliver messages to Kafka.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kelseyhightower/ipxed&#34;&gt;ipxed&lt;/a&gt; - Web interface and api for ipxed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yosssi/boltstore&#34;&gt;BoltStore&lt;/a&gt; - Session store using Bolt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godoc.org/bitbucket.org/kardianos/photosite/session&#34;&gt;photosite/session&lt;/a&gt; - Sessions for a photo viewing site.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/siddontang/ledisdb&#34;&gt;LedisDB&lt;/a&gt; - A high performance NoSQL, using Bolt as optional storage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndreasBriese/ipLocator&#34;&gt;ipLocator&lt;/a&gt; - A fast ip-geo-location-server using bolt with bloom filters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/cayley&#34;&gt;cayley&lt;/a&gt; - Cayley is an open-source graph database using Bolt as optional backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.blevesearch.com/&#34;&gt;bleve&lt;/a&gt; - A pure Go search engine similar to ElasticSearch that uses Bolt as the default storage backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/optiflows/tentacool&#34;&gt;tentacool&lt;/a&gt; - REST api server to manage system stuff (IP, DNS, Gateway...) on a linux server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrislusf/seaweedfs&#34;&gt;Seaweed File System&lt;/a&gt; - Highly scalable distributed key~file system with O(1) disk read.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://influxdata.com&#34;&gt;InfluxDB&lt;/a&gt; - Scalable datastore for metrics, events, and real-time analytics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tshannon.bitbucket.org/freehold/&#34;&gt;Freehold&lt;/a&gt; - An open, secure, and lightweight platform for your files and data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oliver006/prom_annotation_server&#34;&gt;Prometheus Annotation Server&lt;/a&gt; - Annotation server for PromDash &amp;amp; Prometheus service monitoring system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hashicorp/consul&#34;&gt;Consul&lt;/a&gt; - Consul is service discovery and configuration made easy. Distributed, highly available, and datacenter-aware.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ajvb/kala&#34;&gt;Kala&lt;/a&gt; - Kala is a modern job scheduler optimized to run on a single node. It is persistent, JSON over HTTP API, ISO 8601 duration notation, and dependent jobs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/odeke-em/drive&#34;&gt;drive&lt;/a&gt; - drive is an unofficial Google Drive command line client for *NIX operating systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/djherbis/stow&#34;&gt;stow&lt;/a&gt; - a persistence manager for objects backed by boltdb.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joyrexus/buckets&#34;&gt;buckets&lt;/a&gt; - a bolt wrapper streamlining simple tx and key scans.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abhigupta912/mbuckets&#34;&gt;mbuckets&lt;/a&gt; - A Bolt wrapper that allows easy operations on multi level (nested) buckets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darklynx/request-baskets&#34;&gt;Request Baskets&lt;/a&gt; - A web service to collect arbitrary HTTP requests and inspect them via REST API or simple web UI, similar to &lt;a href=&#34;http://requestb.in/&#34;&gt;RequestBin&lt;/a&gt; service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://goreportcard.com/&#34;&gt;Go Report Card&lt;/a&gt; - Go code quality report cards as a (free and open source) service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bobintornado/boltdb-boilerplate&#34;&gt;Boltdb Boilerplate&lt;/a&gt; - Boilerplate wrapper around bolt aiming to make simple calls one-liners.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/crowdriff/lru&#34;&gt;lru&lt;/a&gt; - Easy to use Bolt-backed Least-Recently-Used (LRU) read-through cache with chainable remote stores.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asdine/storm&#34;&gt;Storm&lt;/a&gt; - Simple and powerful ORM for BoltDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/josephspurrier/gowebapp&#34;&gt;GoWebApp&lt;/a&gt; - A basic MVC web application in Go using BoltDB.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xyproto/simplebolt&#34;&gt;SimpleBolt&lt;/a&gt; - A simple way to use BoltDB. Deals mainly with strings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xyproto/algernon&#34;&gt;Algernon&lt;/a&gt; - A HTTP/2 web server with built-in support for Lua. Uses BoltDB as the default database backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dankomiocevic/mulifs&#34;&gt;MuLiFS&lt;/a&gt; - Music Library Filesystem creates a filesystem to organise your music files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pankajkhairnar/goShort&#34;&gt;GoShort&lt;/a&gt; - GoShort is a URL shortener written in Golang and BoltDB for persistent key/value storage and for routing it&#39;s using high performent HTTPRouter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anacrolix/torrent&#34;&gt;torrent&lt;/a&gt; - Full-featured BitTorrent client package and utilities in Go. BoltDB is a storage backend in development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gopherpit/gopherpit&#34;&gt;gopherpit&lt;/a&gt; - A web service to manage Go remote import paths with custom domains&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hasit/bolter&#34;&gt;bolter&lt;/a&gt; - Command-line app for viewing BoltDB file in your terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/btcsuite/btcwallet&#34;&gt;btcwallet&lt;/a&gt; - A bitcoin wallet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/decred/dcrwallet&#34;&gt;dcrwallet&lt;/a&gt; - A wallet for the Decred cryptocurrency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timshannon/ironsmith&#34;&gt;Ironsmith&lt;/a&gt; - A simple, script-driven continuous integration (build - &amp;gt; test -&amp;gt; release) tool, with no external dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timshannon/bolthold&#34;&gt;BoltHold&lt;/a&gt; - An embeddable NoSQL store for Go types built on BoltDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ponzu-cms.org&#34;&gt;Ponzu CMS&lt;/a&gt; - Headless CMS + automatic JSON API with auto-HTTPS, HTTP/2 Server Push, and flexible server framework.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are using Bolt in a project please send a pull request to add it to the list.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Masterminds/sprig</title>
    <updated>2023-07-08T01:36:34Z</updated>
    <id>tag:github.com,2023-07-08:/Masterminds/sprig</id>
    <link href="https://github.com/Masterminds/sprig" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Useful template functions for Go templates.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sprig: Template functions for Go templates&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/Masterminds/sprig/v3&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=godoc&amp;amp;message=reference&amp;amp;color=blue&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/Masterminds/sprig&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/Masterminds/sprig&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://masterminds.github.io/stability/sustained.html&#34;&gt;&lt;img src=&#34;https://masterminds.github.io/stability/sustained.svg?sanitize=true&#34; alt=&#34;Stability: Sustained&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Masterminds/sprig/actions&#34;&gt;&lt;img src=&#34;https://github.com/Masterminds/sprig/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Go language comes with a &lt;a href=&#34;http://golang.org/pkg/text/template/&#34;&gt;built-in template language&lt;/a&gt;, but not very many template functions. Sprig is a library that provides more than 100 commonly used template functions.&lt;/p&gt; &#xA;&lt;p&gt;It is inspired by the template functions found in &lt;a href=&#34;http://twig.sensiolabs.org/documentation&#34;&gt;Twig&lt;/a&gt; and in various JavaScript libraries, such as &lt;a href=&#34;http://underscorejs.org/&#34;&gt;underscore.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;IMPORTANT NOTES&lt;/h2&gt; &#xA;&lt;p&gt;Sprig leverages &lt;a href=&#34;https://github.com/imdario/mergo&#34;&gt;mergo&lt;/a&gt; to handle merges. In its v0.3.9 release, there was a behavior change that impacts merging template functions in sprig. It is currently recommended to use v0.3.10 or later of that package. Using v0.3.9 will cause sprig tests to fail.&lt;/p&gt; &#xA;&lt;h2&gt;Package Versions&lt;/h2&gt; &#xA;&lt;p&gt;There are two active major versions of the &lt;code&gt;sprig&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v3 is currently stable release series on the &lt;code&gt;master&lt;/code&gt; branch. The Go API should remain compatible with v2, the current stable version. Behavior change behind some functions is the reason for the new major version.&lt;/li&gt; &#xA; &lt;li&gt;v2 is the previous stable release series. It has been more than three years since the initial release of v2. You can read the documentation and see the code on the &lt;a href=&#34;https://github.com/Masterminds/sprig/tree/release-2&#34;&gt;release-2&lt;/a&gt; branch. Bug fixes to this major version will continue for some time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Template developers&lt;/strong&gt;: Please use Sprig&#39;s &lt;a href=&#34;http://masterminds.github.io/sprig/&#34;&gt;function documentation&lt;/a&gt; for detailed instructions and code snippets for the &amp;gt;100 template functions available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Go developers&lt;/strong&gt;: If you&#39;d like to include Sprig as a library in your program, our API documentation is available &lt;a href=&#34;http://godoc.org/github.com/Masterminds/sprig&#34;&gt;at GoDoc.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For standard usage, read on.&lt;/p&gt; &#xA;&lt;h3&gt;Load the Sprig library&lt;/h3&gt; &#xA;&lt;p&gt;To load the Sprig &lt;code&gt;FuncMap&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;import (&#xA;  &#34;github.com/Masterminds/sprig/v3&#34;&#xA;  &#34;html/template&#34;&#xA;)&#xA;&#xA;// This example illustrates that the FuncMap *must* be set before the&#xA;// templates themselves are loaded.&#xA;tpl := template.Must(&#xA;  template.New(&#34;base&#34;).Funcs(sprig.FuncMap()).ParseGlob(&#34;*.html&#34;)&#xA;)&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Calling the functions inside of templates&lt;/h3&gt; &#xA;&lt;p&gt;By convention, all functions are lowercase. This seems to follow the Go idiom for template functions (as opposed to template methods, which are TitleCase). For example, this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{ &#34;hello!&#34; | upper | repeat 5 }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;produces this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HELLO!HELLO!HELLO!HELLO!HELLO!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Principles Driving Our Function Selection&lt;/h2&gt; &#xA;&lt;p&gt;We followed these principles to decide which functions to add and how to implement them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use template functions to build layout. The following types of operations are within the domain of template functions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Formatting&lt;/li&gt; &#xA;   &lt;li&gt;Layout&lt;/li&gt; &#xA;   &lt;li&gt;Simple type conversions&lt;/li&gt; &#xA;   &lt;li&gt;Utilities that assist in handling common formatting and layout needs (e.g. arithmetic)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Template functions should not return errors unless there is no way to print a sensible value. For example, converting a string to an integer should not produce an error if conversion fails. Instead, it should display a default value.&lt;/li&gt; &#xA; &lt;li&gt;Simple math is necessary for grid layouts, pagers, and so on. Complex math (anything other than arithmetic) should be done outside of templates.&lt;/li&gt; &#xA; &lt;li&gt;Template functions only deal with the data passed into them. They never retrieve data from a source.&lt;/li&gt; &#xA; &lt;li&gt;Finally, do not override core Go template functions.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>golang/crypto</title>
    <updated>2023-07-08T01:36:34Z</updated>
    <id>tag:github.com,2023-07-08:/golang/crypto</id>
    <link href="https://github.com/golang/crypto" rel="alternate"></link>
    <summary type="html">&lt;p&gt;[mirror] Go supplementary cryptography libraries&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Cryptography&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/crypto&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/golang.org/x/crypto.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository holds supplementary Go cryptography libraries.&lt;/p&gt; &#xA;&lt;h2&gt;Download/Install&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install is to run &lt;code&gt;go get -u golang.org/x/crypto/...&lt;/code&gt;. You can also manually git clone the repository to &lt;code&gt;$GOPATH/src/golang.org/x/crypto&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Report Issues / Send Patches&lt;/h2&gt; &#xA;&lt;p&gt;This repository uses Gerrit for code changes. To learn how to submit changes to this repository, see &lt;a href=&#34;https://golang.org/doc/contribute.html&#34;&gt;https://golang.org/doc/contribute.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main issue tracker for the crypto repository is located at &lt;a href=&#34;https://github.com/golang/go/issues&#34;&gt;https://github.com/golang/go/issues&lt;/a&gt;. Prefix your issue with &#34;x/crypto:&#34; in the subject line, so it is easy to find.&lt;/p&gt; &#xA;&lt;p&gt;Note that contributions to the cryptography package receive additional scrutiny due to their sensitive nature. Patches may take longer than normal to receive feedback.&lt;/p&gt;</summary>
  </entry>
</feed>