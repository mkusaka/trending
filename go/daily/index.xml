<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-14T01:34:43Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pgrok/pgrok</title>
    <updated>2023-03-14T01:34:43Z</updated>
    <id>tag:github.com,2023-03-14:/pgrok/pgrok</id>
    <link href="https://github.com/pgrok/pgrok" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Poor man&#39;s ngrok - a multi-tenant HTTP reverse tunnel solution through SSH remote port forwarding&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgrok - Poor man&#39;s ngrok&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourcegraph.com/github.com/pgrok/pgrok&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/view%20on-Sourcegraph-brightgreen.svg?style=for-the-badge&amp;amp;logo=sourcegraph&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What?&lt;/h2&gt; &#xA;&lt;p&gt;The pgrok is a multi-tenant HTTP reverse tunnel solution through remote port forwarding from the SSH protocol.&lt;/p&gt; &#xA;&lt;p&gt;This is intended for small teams that need to expose the local development environment to the public internet, and you need to bring your own domain name and SSO provider.&lt;/p&gt; &#xA;&lt;p&gt;It gives stable subdomain for every user, and gated by your SSO through OIDC protocol.&lt;/p&gt; &#xA;&lt;p&gt;Think this as a bare-bone alternative to the &lt;a href=&#34;https://ngrok.com/pricing&#34;&gt;ngrok&#39;s $65/user/month enterprise tier&lt;/a&gt;. Try to put this behind a production system will blow up your SLA.&lt;/p&gt; &#xA;&lt;p&gt;For individuals and production systems, just buy ngrok, it is still my favorite.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Stable subdomains and SSO are two things too expensive.&lt;/p&gt; &#xA;&lt;p&gt;Why not just pick one from the &lt;a href=&#34;https://github.com/anderspitman/awesome-tunneling&#34;&gt;Awesome Tunneling&lt;/a&gt;? Think broader. Not everyone is a dev who knows about server operations. For people working as community managers, sales, and PMs, booting up something locally could already be a stretch and requiring them to understand how to set up and fix server problems is a waste of team&#39;s productivity.&lt;/p&gt; &#xA;&lt;p&gt;Copy, paste, and run is the best UX for everyone.&lt;/p&gt; &#xA;&lt;h2&gt;How?&lt;/h2&gt; &#xA;&lt;p&gt;Before you get started, make sure you have the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A domain name (e.g. &lt;code&gt;pgrok.dev&lt;/code&gt;, this will be used as the example throughout this section).&lt;/li&gt; &#xA; &lt;li&gt;A server (dedicated server, VPS) with a public IP address (e.g. &lt;code&gt;111.33.5.14&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;An SSO provider (e.g. Google, Okta, Keycloak) that allows you to create OIDC clients.&lt;/li&gt; &#xA; &lt;li&gt;A PostgreSQL server (&lt;a href=&#34;https://bit.io/&#34;&gt;bit.io&lt;/a&gt;, Cloud SQL, self-host).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;HTTPS for the web and proxy server is not required for this to work, while recommended if possible. Examples in the section all use HTTP.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Set up the server (&lt;code&gt;pgrokd&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add the following DNS records for your domain name: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; record for &lt;code&gt;pgrok.dev&lt;/code&gt; to &lt;code&gt;111.33.5.14&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; record for &lt;code&gt;*.pgrok.dev&lt;/code&gt; to &lt;code&gt;111.33.5.14&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;pgrokd.yml&lt;/code&gt; file: &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;external_url: &#34;http://pgrok.dev&#34;&#xA;web:&#xA;  port: 3320&#xA;proxy:&#xA;  port: 3000&#xA;  scheme: &#34;http&#34;&#xA;  domain: &#34;pgrok.dev&#34;&#xA;sshd:&#xA;  port: 2222&#xA;&#xA;database:&#xA;  host: &#34;localhost&#34;&#xA;  port: 5432&#xA;  user: &#34;REDACTED&#34;&#xA;  password: &#34;REDACTED&#34;&#xA;  database: &#34;pgrokd&#34;&#xA;&#xA;identity_provider:&#xA;  type: &#34;oidc&#34;&#xA;  display_name: &#34;Google&#34;&#xA;  issuer: &#34;https://accounts.google.com&#34;&#xA;  client_id: &#34;REDACTED&#34;&#xA;  client_secret: &#34;REDACTED&#34;&#xA;  field_mapping:&#xA;    identifier: &#34;email&#34;&#xA;    display_name: &#34;name&#34;&#xA;    email: &#34;email&#34;&#xA;#  # The required domain name, &#34;field_mapping.email&#34; is required to set for this to work.&#xA;#  required_domain: &#34;example.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Download the latest version of the &lt;code&gt;pgrokd&lt;/code&gt; archive from the &lt;a href=&#34;https://github.com/pgrok/pgrok/releases&#34;&gt;Releases&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;Launch the &lt;code&gt;pgrokd&lt;/code&gt; in background (systemd, screen, nohup). &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;By default, &lt;code&gt;pgrokd&lt;/code&gt; expects the &lt;code&gt;pgrokd.yml&lt;/code&gt; is available in the working directory. Use &lt;code&gt;--config&lt;/code&gt; flag to specify a different path for the config file.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Alter your network security policy (if applicable) to allow inbound requests to port 2222 from &lt;code&gt;0.0.0.0/0&lt;/code&gt; (anywhere).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://caddyserver.com/docs/install&#34;&gt;Download and install Caddy 2&lt;/a&gt; on your server, and use the following Caddyfile config: &lt;pre&gt;&lt;code class=&#34;language-caddyfile&#34;&gt;http://pgrok.dev {&#xA;    reverse_proxy * localhost:3320&#xA;}&#xA;&#xA;http://*.pgrok.dev {&#xA;    reverse_proxy * localhost:3000&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a new OIDC client in your SSO with the &lt;strong&gt;Redirect URI&lt;/strong&gt; to be &lt;code&gt;http://pgrok.dev/-/oidc/callback&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Set up the client (&lt;code&gt;pgrok&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;http://pgrok.dev&#34;&gt;http://pgrok.dev&lt;/a&gt;, authenticate with your SSO to obtain the token and URL (e.g. &lt;code&gt;http://unknwon.pgrok.dev&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Download the latest version of the &lt;code&gt;pgrok&lt;/code&gt;: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;For Homebrew: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install pgrok/tap/pgrok&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For others, download the archive from the &lt;a href=&#34;https://github.com/pgrok/pgrok/releases&#34;&gt;Releases&lt;/a&gt; page.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Initialize a &lt;code&gt;pgrok.yml&lt;/code&gt; file with the following command (assuming you want to forward requests to &lt;code&gt;http://localhost:3000&lt;/code&gt;): &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pgrok init --remote-addr pgrok.dev:2222 --forward-addr http://localhost:3000 --token {YOUR_TOKEN}&#xA;&lt;/code&gt;&lt;/pre&gt; By default, the config file is created under the home directory (&lt;code&gt;~/.pgrok/pgrok.yml&lt;/code&gt;). Use &lt;code&gt;--config&lt;/code&gt; flag to specify a different path for the config file.&lt;/li&gt; &#xA; &lt;li&gt;Launch the client by executing the &lt;code&gt;pgrok&lt;/code&gt; or &lt;code&gt;pgrok http&lt;/code&gt; command. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;By default, &lt;code&gt;pgrok&lt;/code&gt; expects the &lt;code&gt;pgrok.yml&lt;/code&gt; is available under the home directory (&lt;code&gt;~/.pgrok/pgrok.yml&lt;/code&gt;). Use &lt;code&gt;--config&lt;/code&gt; flag to specify a different path for the config file.&lt;/li&gt; &#xA;   &lt;li&gt;Use the &lt;code&gt;--debug&lt;/code&gt; flag to turn on debug logging.&lt;/li&gt; &#xA;   &lt;li&gt;Upon successful startup, you should see a log looks like: &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;YYYY-MM-DD 12:34:56 INFO Tunneling connection established remote=pgrok.dev:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Now visit the URL.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Override config options&lt;/h4&gt; &#xA;&lt;p&gt;Following config options can be override through CLI flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--remote-addr&lt;/code&gt; -&amp;gt; &lt;code&gt;remote_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--forward-addr&lt;/code&gt; -&amp;gt; &lt;code&gt;forward_addr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--token&lt;/code&gt; -&amp;gt; &lt;code&gt;token&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a special case, the first argument of the &lt;code&gt;pgrok http&lt;/code&gt; can be used to specify forward address, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pgrok http 8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Dynamic forwards&lt;/h4&gt; &#xA;&lt;p&gt;In addition to traditional request forwarding to a single address, &lt;code&gt;pgrok&lt;/code&gt; can be configured to have dynamic forward rules.&lt;/p&gt; &#xA;&lt;p&gt;For example, if your local frontend is running at &lt;code&gt;http://localhost:3000&lt;/code&gt; but some gRPC endpoints need talk to the backend directly at &lt;code&gt;http://localhost:8080&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;dynamic_forwards: |&#xA;  /api http://localhost:8080&#xA;  /hook http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then all request prefixed with the path &lt;code&gt;/api&lt;/code&gt; and &lt;code&gt;/hook&lt;/code&gt; will be forwarded to &lt;code&gt;http://localhost:8080&lt;/code&gt; and all the rest are forwarded to the &lt;code&gt;forward_addr&lt;/code&gt; (&lt;code&gt;http://localhost:3000&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Vanilla SSH&lt;/h3&gt; &#xA;&lt;p&gt;Because the standard SSH protocol is used for tunneling, you may well just use the vanilla SSH client.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to &lt;a href=&#34;http://pgrok.dev&#34;&gt;http://pgrok.dev&lt;/a&gt;, authenticate with your SSO to obtain the token and URL (e.g. &lt;code&gt;http://unknwon.pgrok.dev&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Launch the client by executing the &lt;code&gt;ssh -N -R 0::3000 pgrok.dev -p 2222&lt;/code&gt; command: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Enter the token as your password.&lt;/li&gt; &#xA;   &lt;li&gt;Use the &lt;code&gt;-v&lt;/code&gt; flag to turn on debug logging.&lt;/li&gt; &#xA;   &lt;li&gt;Upon successful startup, you should see a log looks like: &lt;pre&gt;&lt;code&gt;Allocated port 22487 for remote forward to :3000&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Now visit the URL.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Explain it to me&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2946214/224469633-4d03a2cb-8561-4584-a743-c70f3fda0aef.png&#34; alt=&#34;pgrok network diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://www.bytebase.com&#34;&gt; &lt;img src=&#34;https://www.bytebase.com/_nuxt/img/logo-full.79b60e4.svg?sanitize=true&#34; width=&#34;300&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://www.flaticon.com/free-icon/nat_9168228&#34;&gt;logo&lt;/a&gt; is from &lt;a href=&#34;https://www.flaticon.com/&#34;&gt;flaticon.com&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The project wouldn&#39;t be possible without reading &lt;a href=&#34;https://github.com/function61/holepunch-server&#34;&gt;function61/holepunch-server&lt;/a&gt;, &lt;a href=&#34;https://github.com/function61/holepunch-client&#34;&gt;function61/holepunch-client&lt;/a&gt;, and &lt;a href=&#34;https://github.com/apache/mina-sshd/raw/master/docs/technical/tcpip-forwarding.md&#34;&gt;TCP/IP Port Forwarding&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is under the MIT License. See the &lt;a href=&#34;https://raw.githubusercontent.com/pgrok/pgrok/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full license text.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>projectdiscovery/interactsh</title>
    <updated>2023-03-14T01:34:43Z</updated>
    <id>tag:github.com,2023-03-14:/projectdiscovery/interactsh</id>
    <link href="https://github.com/projectdiscovery/interactsh" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An OOB interaction gathering server and client library&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8293321/150756129-df9990c2-cdc0-4c6e-b3ae-3d17079968c5.png&#34; width=&#34;200px&#34; alt=&#34;Interactsh&#34;&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;An OOB interaction gathering server and client library&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-_red.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/interactsh/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/interactsh&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/interactsh&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pdiscoveryio&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/interactsh/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/interactsh/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/interactsh/main/#interactsh-client&#34;&gt;Interactsh Client&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/interactsh/main/#interactsh-server&#34;&gt;Interactsh Server&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/interactsh/main/#interactsh-integration&#34;&gt;Interactsh Integration&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Join Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Interactsh&lt;/strong&gt; is an open-source tool for detecting out-of-band interactions. It is a tool designed to detect vulnerabilities that cause external interactions.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;DNS/HTTP(S)/SMTP(S)/LDAP Interaction&lt;/li&gt; &#xA; &lt;li&gt;CLI / Web / Burp / ZAP / Docker client&lt;/li&gt; &#xA; &lt;li&gt;AES encryption with zero logging&lt;/li&gt; &#xA; &lt;li&gt;Automatic ACME based Wildcard TLS w/ Auto Renewal&lt;/li&gt; &#xA; &lt;li&gt;DNS Entries for Cloud Metadata service&lt;/li&gt; &#xA; &lt;li&gt;Dynamic HTTP Response control&lt;/li&gt; &#xA; &lt;li&gt;Self-Hosted Interactsh Server&lt;/li&gt; &#xA; &lt;li&gt;Multiple domain support &lt;strong&gt;(self-hosted)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;NTLM/SMB/FTP/RESPONDER Listener &lt;strong&gt;(self-hosted)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wildcard / Protected Interactions &lt;strong&gt;(self-hosted)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customizable Index / File hosting &lt;strong&gt;(self-hosted)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customizable Payload Length &lt;strong&gt;(self-hosted)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Custom SSL Certificate &lt;strong&gt;(self-hosted)&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Interactsh Client&lt;/h1&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;interactsh-client -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display help for the tool. Here are all the switches it supports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Usage:&#xA;  ./interactsh-client [flags]&#xA;&#xA;Flags:&#xA;INPUT:&#xA;   -s, -server string  interactsh server(s) to use (default &#34;oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me&#34;)&#xA;&#xA;CONFIG:&#xA;   -config string                           flag configuration file (default &#34;$HOME/.config/interactsh-client/config.yaml&#34;)&#xA;   -n, -number int                          number of interactsh payload to generate (default 1)&#xA;   -t, -token string                        authentication token to connect protected interactsh server&#xA;   -pi, -poll-interval int                  poll interval in seconds to pull interaction data (default 5)&#xA;   -nf, -no-http-fallback                   disable http fallback registration&#xA;   -cidl, -correlation-id-length int        length of the correlation id preamble (default 20)&#xA;   -cidn, -correlation-id-nonce-length int  length of the correlation id nonce (default 13)&#xA;   -sf, -session-file string                store/read from session file&#xA;&#xA;FILTER:&#xA;   -m, -match string[]   match interaction based on the specified pattern&#xA;   -f, -filter string[]  filter interaction based on the specified pattern&#xA;   -dns-only             display only dns interaction in CLI output&#xA;   -http-only            display only http interaction in CLI output&#xA;   -smtp-only            display only smtp interactions in CLI output&#xA;&#xA;OUTPUT:&#xA;   -o string  output file to write interaction data&#xA;   -json      write output in JSONL(ines) format&#xA;   -v         display verbose interaction&#xA;&#xA;DEBUG:&#xA;   -version            show version of the project&#xA;   -health-check, -hc  run diagnostic check up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactsh CLI Client&lt;/h2&gt; &#xA;&lt;p&gt;Interactsh Cli client requires &lt;strong&gt;go1.17+&lt;/strong&gt; to install successfully. Run the following command to get the repo -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install -v github.com/projectdiscovery/interactsh/cmd/interactsh-client@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Run&lt;/h3&gt; &#xA;&lt;p&gt;This will generate a unique payload that can be used for OOB testing with minimal interaction information in the output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-client&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v0.0.5&#xA;&#xA;        projectdiscovery.io&#xA;&#xA;[INF] Listing 1 payload for OOB Testing&#xA;[INF] c23b2la0kl1krjcrdj10cndmnioyyyyyn.oast.pro&#xA;&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (A) from 172.253.226.100 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (AAAA) from 32.3.34.129 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received HTTP interaction from 43.22.22.50 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (MX) from 43.3.192.3 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (TXT) from 74.32.183.135 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received SMTP interaction from 32.85.166.50 at 2021-26-26 12:26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Session File&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;interactsh-client&lt;/code&gt; with &lt;code&gt;-sf, -session-file&lt;/code&gt; flag can be used store/read the current session information from user defined file which is useful to resume the same session to poll the interactions even after the client gets stopped or closed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-client -sf interact.session&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ 1.0.3&#xA;&#xA;        projectdiscovery.io&#xA;&#xA;[INF] Listing 1 payload for OOB Testing&#xA;[INF] c23b2la0kl1krjcrdj10cndmnioyyyyyn.oast.pro&#xA;&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (A) from 172.253.226.100 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (AAAA) from 32.3.34.129 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received HTTP interaction from 43.22.22.50 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (MX) from 43.3.192.3 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received DNS interaction (TXT) from 74.32.183.135 at 2021-26-26 12:26&#xA;[c23b2la0kl1krjcrdj10cndmnioyyyyyn] Received SMTP interaction from 32.85.166.50 at 2021-26-26 12:26&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verbose Mode&lt;/h3&gt; &#xA;&lt;p&gt;Running the &lt;code&gt;interactsh-client&lt;/code&gt; in &lt;strong&gt;verbose mode&lt;/strong&gt; (v) to see the whole request and response, along with an output file to analyze afterwards.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-client -v -o interactsh-logs.txt&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ 1.0.3&#xA;&#xA;    projectdiscovery.io&#xA;&#xA;[INF] Listing 1 payload for OOB Testing&#xA;[INF] c58bduhe008dovpvhvugcfemp9yyyyyyn.oast.pro&#xA;&#xA;[c58bduhe008dovpvhvugcfemp9yyyyyyn] Received HTTP interaction from 103.22.142.211 at 2021-09-26 18:08:07&#xA;------------&#xA;HTTP Request&#xA;------------&#xA;&#xA;GET /favicon.ico HTTP/2.0&#xA;Host: c58bduhe008dovpvhvugcfemp9yyyyyyn.oast.pro&#xA;Referer: https://c58bduhe008dovpvhvugcfemp9yyyyyyn.oast.pro&#xA;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.82 Safari/537.36&#xA;&#xA;&#xA;-------------&#xA;HTTP Response&#xA;-------------&#xA;&#xA;HTTP/1.1 200 OK&#xA;Connection: close&#xA;Content-Type: text/html; charset=utf-8&#xA;Server: oast.pro&#xA;&#xA;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;nyyyyyy9pmefcguvhvpvod800ehudb85c&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Self-Hosted server&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;server&lt;/code&gt; flag, &lt;code&gt;interactsh-client&lt;/code&gt; can be configured to connect with a self-hosted Interactsh server, this flag accepts single or multiple server separated by comma.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;interactsh-client -server hackwithautomation.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We maintain a list of default Interactsh servers to use with &lt;code&gt;interactsh-client&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;oast.pro&lt;/li&gt; &#xA; &lt;li&gt;oast.live&lt;/li&gt; &#xA; &lt;li&gt;oast.site&lt;/li&gt; &#xA; &lt;li&gt;oast.online&lt;/li&gt; &#xA; &lt;li&gt;oast.fun&lt;/li&gt; &#xA; &lt;li&gt;oast.me&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Default servers are subject to change/rotate/down at any time, thus we recommend using a self-hosted interactsh server if you are experiencing issues with the default server.&lt;/p&gt; &#xA;&lt;h3&gt;Using Protected Self-Hosted server&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;token&lt;/code&gt; flag, &lt;code&gt;interactsh-client&lt;/code&gt; can connect to a self-hosted Interactsh server that is protected with authentication.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;interactsh-client -server hackwithautomation.com -token XXX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using with Notify&lt;/h3&gt; &#xA;&lt;p&gt;If you are away from your terminal, you may use &lt;a href=&#34;https://github.com/projectdiscovery/notify&#34;&gt;notify&lt;/a&gt; to send a real-time interaction notification to any supported platform.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;interactsh-client | notify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8293321/116283535-9bcac180-a7a9-11eb-94d5-0313d4812fef.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Interactsh Web Client&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/projectdiscovery/interactsh-web&#34;&gt;Interactsh-web&lt;/a&gt; is a free and open-source web client that displays Interactsh interactions in a well-managed dashboard in your browser. It uses the browser&#39;s local storage to store and display all incoming interactions. By default, the web client is configured to use &lt;strong&gt;interact.sh&lt;/strong&gt; as default interactsh server, and supports other self-hosted public/authencaited interactsh servers as well.&lt;/p&gt; &#xA;&lt;p&gt;A hosted instance of &lt;strong&gt;interactsh-web&lt;/strong&gt; client is available at &lt;a href=&#34;https://app.interactsh.com&#34;&gt;https://app.interactsh.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;2032&#34; alt=&#34;interactsh-web&#34; src=&#34;https://user-images.githubusercontent.com/8293321/136621531-d72c9ece-0076-4db1-98c9-21dcba4ba09c.png&#34;&gt; &#xA;&lt;h2&gt;Interactsh Docker Client&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://hub.docker.com/r/projectdiscovery/interactsh-client&#34;&gt;Docker image&lt;/a&gt; is also provided with interactsh client that is ready to run and can be used in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run projectdiscovery/interactsh-client:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker run projectdiscovery/interactsh-client:latest&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v1.0.0&#xA;&#xA;        projectdiscovery.io&#xA;&#xA;[INF] Listing 1 payload for OOB Testing&#xA;[INF] c59e3crp82ke7bcnedq0cfjqdpeyyyyyn.oast.pro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Burp Suite Extension&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wdahlenburg/interactsh-collaborator&#34;&gt;interactsh-collaborator&lt;/a&gt; is Burp Suite extension developed and maintained by &lt;a href=&#34;https://twitter.com/wdahlenb&#34;&gt;@wdahlenb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download latest JAR file from &lt;a href=&#34;https://github.com/wdahlenburg/interactsh-collaborator/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/li&gt; &#xA; &lt;li&gt;Open Burp Suite → Extender → Add → Java → Select JAR file → Next&lt;/li&gt; &#xA; &lt;li&gt;New tab named &lt;strong&gt;Interactsh&lt;/strong&gt; will be appeared upon successful installation.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/wdahlenburg/interactsh-collaborator&#34;&gt;interactsh-collaborator&lt;/a&gt; project for more info.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;2032&#34; alt=&#34;burp&#34; src=&#34;https://user-images.githubusercontent.com/8293321/135176099-0e3fa01c-bdce-4f04-a94f-de0a34c7abf6.png&#34;&gt; &#xA;&lt;h2&gt;OWASP ZAP Add-On&lt;/h2&gt; &#xA;&lt;p&gt;Interactsh can be used with OWASP ZAP via the &lt;a href=&#34;https://www.zaproxy.org/docs/desktop/addons/oast-support/&#34;&gt;OAST add-on for ZAP&lt;/a&gt;. With ZAP&#39;s scripting capabilities, you can create powerful out-of-band scan rules that leverage Interactsh&#39;s features. A standalone script template has been provided as an example (it is added automatically when you install the add-on).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install the OAST add-on from the &lt;a href=&#34;https://www.zaproxy.org/addons/&#34;&gt;ZAP Marketplace&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Go to Tools → Options → OAST and select &lt;strong&gt;Interactsh&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Configure &lt;a href=&#34;https://www.zaproxy.org/docs/desktop/addons/oast-support/services/interactsh/options/&#34;&gt;the options&lt;/a&gt; for the client and click on &#34;New Payload&#34; to generate a new payload.&lt;/li&gt; &#xA; &lt;li&gt;OOB interactions will appear in the &lt;a href=&#34;https://www.zaproxy.org/docs/desktop/addons/oast-support/tab/&#34;&gt;OAST Tab&lt;/a&gt; and you can click on any of them to view the full request and response.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://www.zaproxy.org/docs/desktop/addons/oast-support/&#34;&gt;OAST add-on documentation&lt;/a&gt; for more info.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/16446369/135211920-ed24ba5a-5547-4cd4-b6d8-656af9592c20.png&#34; alt=&#34;zap&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Interactsh Server&lt;/h1&gt; &#xA;&lt;p&gt;Interactsh server runs multiple services and captures all the incoming requests. To host an instance of &lt;strong&gt;interactsh-server&lt;/strong&gt;, you are required to setup:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Domain name with custom &lt;strong&gt;host names&lt;/strong&gt; and &lt;strong&gt;nameservers&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Basic droplet running 24/7 in the background.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;interactsh-server -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display help for the tool. Here are all the switches it supports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;Usage:&#xA;  ./interactsh-server [flags]&#xA;&#xA;Flags:&#xA;INPUT:&#xA;   -d, -domain string[]                     single/multiple configured domain to use for server&#xA;   -ip string                               public ip address to use for interactsh server&#xA;   -lip, -listen-ip string                  public ip address to listen on (default &#34;0.0.0.0&#34;)&#xA;   -e, -eviction int                        number of days to persist interaction data in memory (default 30)&#xA;   -ne, -no-eviction                        disable periodic data eviction from memory&#xA;   -a, -auth                                enable authentication to server using random generated token&#xA;   -t, -token string                        enable authentication to server using given token&#xA;   -acao-url string                         origin url to send in acao header to use web-client) (default &#34;*&#34;)&#xA;   -sa, -skip-acme                          skip acme registration (certificate checks/handshake + TLS protocols will be disabled)&#xA;   -se, -scan-everywhere                    scan canary token everywhere&#xA;   -cidl, -correlation-id-length int        length of the correlation id preamble (default 20)&#xA;   -cidn, -correlation-id-nonce-length int  length of the correlation id nonce (default 13)&#xA;   -cert string                             custom certificate path&#xA;   -privkey string                          custom private key path&#xA;   -oih, -origin-ip-header string           HTTP header containing origin ip (interactsh behind a reverse proxy)&#xA;&#xA;CONFIG:&#xA;   -config string               flag configuration file (default &#34;$HOME/.config/interactsh-server/config.yaml&#34;)&#xA;   -dr, -dynamic-resp           enable setting up arbitrary response data&#xA;   -cr, -custom-records string  custom dns records YAML file for DNS server&#xA;   -hi, -http-index string      custom index file for http server&#xA;   -hd, -http-directory string  directory with files to serve with http server&#xA;   -ds, -disk                   disk based storage&#xA;   -dsp, -disk-path string      disk storage path&#xA;&#xA;SERVICES:&#xA;   -dns-port int           port to use for dns service (default 53)&#xA;   -http-port int          port to use for http service (default 80)&#xA;   -https-port int         port to use for https service (default 443)&#xA;   -smtp-port int          port to use for smtp service (default 25)&#xA;   -smtps-port int         port to use for smtps service (default 587)&#xA;   -smtp-autotls-port int  port to use for smtps autotls service (default 465)&#xA;   -ldap-port int          port to use for ldap service (default 389)&#xA;   -ldap                   enable ldap server with full logging (authenticated)&#xA;   -wc, -wildcard          enable wildcard interaction for interactsh domain (authenticated)&#xA;   -smb                    start smb agent - impacket and python 3 must be installed (authenticated)&#xA;   -responder              start responder agent - docker must be installed (authenticated)&#xA;   -ftp                    start ftp agent (authenticated)&#xA;   -smb-port int           port to use for smb service (default 445)&#xA;   -ftp-port int           port to use for ftp service (default 21)&#xA;   -ftp-dir string         ftp directory - temporary if not specified&#xA;&#xA;DEBUG:&#xA;   -version            show version of the project&#xA;   -debug              start interactsh server in debug mode&#xA;   -ep, -enable-pprof  enable pprof debugging server&#xA;   -health-check, -hc  run diagnostic check up&#xA;   -metrics            enable metrics endpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We are using GoDaddy for domain name and DigitalOcean droplet for the server, a basic $5 droplet should be sufficient to run self-hosted Interactsh server. If you are not using GoDaddy, follow your registrar&#39;s process for creating / updating DNS entries.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &lt;h2&gt;Configuring Interactsh domain&lt;/h2&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Navigate to &lt;code&gt;https://dcc.godaddy.com/manage/{{domain}}/dns/hosts&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Advanced Features → Host names → Add → Submit &lt;code&gt;ns1&lt;/code&gt;, &lt;code&gt;ns2&lt;/code&gt; with your &lt;code&gt;SERVER_IP&lt;/code&gt; as value&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;img width=&#34;1288&#34; alt=&#34;gdd-hostname&#34; src=&#34;https://user-images.githubusercontent.com/8293321/135175512-135259fb-0490-4038-845a-0b62b1b8f549.png&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Navigate to &lt;code&gt;https://dns.godaddy.com/{{domain}}/nameservers&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;I&#39;ll use my own nameservers → Submit &lt;code&gt;ns1.INTERACTSH_DOMAIN&lt;/code&gt;, &lt;code&gt;ns2.INTERACTSH_DOMAIN&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;img width=&#34;1288&#34; alt=&#34;gdd-ns&#34; src=&#34;https://user-images.githubusercontent.com/8293321/135175627-ea9639fd-353d-441b-a9a4-dae7f540d0ae.png&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &lt;h2&gt;Configuring Interactsh server&lt;/h2&gt; &lt;p&gt;Install &lt;code&gt;interactsh-server&lt;/code&gt; on your &lt;strong&gt;VPS&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install -v github.com/projectdiscovery/interactsh/cmd/interactsh-server@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Considering domain name setup is &lt;strong&gt;completed&lt;/strong&gt;, run the below command to run &lt;code&gt;interactsh-server&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;interactsh-server -domain INTERACTSH_DOMAIN&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Following is an example of a successful installation and operation of a self-hosted server:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8293321/150676089-b5638c19-33a3-426a-987c-3ac6fa227012.png&#34; alt=&#34;interactsh-server&#34;&gt;&lt;/p&gt; &lt;p&gt;A number of needed flags are configured automatically to run &lt;code&gt;interactsh-server&lt;/code&gt; with default settings. For example, &lt;code&gt;ip&lt;/code&gt; and &lt;code&gt;listen-ip&lt;/code&gt; flags set with the Public IP address of the system when possible.&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Running Interactsh Server&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -domain interact.sh&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v1.0.0&#xA;&#xA;                projectdiscovery.io&#xA;&#xA;[INF] Listening with the following services:&#xA;[HTTPS] Listening on TCP 46.101.25.250:443&#xA;[HTTP] Listening on TCP 46.101.25.250:80&#xA;[SMTPS] Listening on TCP 46.101.25.250:587&#xA;[LDAP] Listening on TCP 46.101.25.250:389&#xA;[SMTP] Listening on TCP 46.101.25.250:25&#xA;[DNS] Listening on TCP 46.101.25.250:53&#xA;[DNS] Listening on UDP 46.101.25.250:53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactsh Server with Multiple Domain&lt;/h2&gt; &#xA;&lt;p&gt;Multiple domain names can be given in the same way as above to run the same interactsh server across multiple &lt;strong&gt;configured domains&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -d oast.pro,oast.me&#xA;&#xA;    _       __                       __       __&#xA;   (_)___  / /____  _________ ______/ /______/ /_&#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ 1.0.5&#xA;&#xA;                projectdiscovery.io&#xA;&#xA;[INF] Loading existing SSL Certificate for:  [*.oast.pro, oast.pro]&#xA;[INF] Loading existing SSL Certificate for:  [*.oast.me, oast.me]&#xA;[INF] Listening with the following services:&#xA;[HTTPS] Listening on TCP 46.101.25.250:443&#xA;[HTTP] Listening on TCP 46.101.25.250:80&#xA;[SMTPS] Listening on TCP 46.101.25.250:587&#xA;[LDAP] Listening on TCP 46.101.25.250:389&#xA;[SMTP] Listening on TCP 46.101.25.250:25&#xA;[DNS] Listening on TCP 46.101.25.250:53&#xA;[DNS] Listening on UDP 46.101.25.250:53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;While running interactsh server on &lt;strong&gt;Cloud VM&lt;/strong&gt;&#39;s like Amazon EC2, Goolge Cloud Platform (GCP), it is required to update the security rules to allow &lt;strong&gt;&#34;all traffic&#34;&lt;/strong&gt; for inbound connections.&lt;/p&gt; &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;  &#xA;&lt;p&gt;There are more useful capabilities supported by &lt;code&gt;interactsh-server&lt;/code&gt; that are not enabled by default and are intended to be used only by &lt;strong&gt;self-hosted&lt;/strong&gt; servers.&lt;/p&gt; &#xA;&lt;h2&gt;Interactsh Server behind a reverse proxy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;interactsh-server&lt;/code&gt; might require custom ports for services if the default ones are already busy. If this is the case but still default ports are required as part of the payload, it&#39;s possible to configure &lt;code&gt;interactsh-server&lt;/code&gt; behind a reverse proxy, by port-forwarding HTTP/TCP/UDP based services via &lt;code&gt;http/stream&lt;/code&gt; proxy directive (&lt;code&gt;proxy_pass&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Nginx&lt;/h2&gt; &#xA;&lt;p&gt;Assuming that &lt;code&gt;interactsh-server&lt;/code&gt; essential services run on the following ports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTP: 8080/TCP&lt;/li&gt; &#xA; &lt;li&gt;HTTPS: 8440/TCP&lt;/li&gt; &#xA; &lt;li&gt;SMTP: 8025/TCP&lt;/li&gt; &#xA; &lt;li&gt;DNS: 8053/UDP&lt;/li&gt; &#xA; &lt;li&gt;DNS: 8053/TCP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The nginx configuration file to forward the traffic would look like the following one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;# http/https&#xA;http {&#xA;   server {&#xA;      listen 443 ssl;&#xA;      server_name mysite.com;&#xA;      ssl_certificate /etc/nginx/interactsh.pem;&#xA;      ssl_certificate_key /etc/nginx/interactsh.key;&#xA;&#xA;      location / {&#xA;         proxy_pass https://interachsh.mysite.com:80/;&#xA;         proxy_set_header Host $host;&#xA;         proxy_set_header X-Real-IP $remote_addr;&#xA;         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;         proxy_set_header X-Forwarded-Proto $scheme;&#xA;      }        &#xA;   }&#xA;}&#xA;&#xA;stream {&#xA;   # smtp&#xA;   server {&#xA;      listen 25;&#xA;      proxy_pass interachsh.mysite.com:8025;&#xA;   }&#xA;&#xA;   # dns&#xA;   server {&#xA;      listen 53;&#xA;      proxy_pass interachsh.mysite.com:8053;&#xA;   }&#xA;   server {&#xA;      listen 53 udp;&#xA;      proxy_pass interachsh.mysite.com:8053;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configured Domains&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -d oast.pro,oast.me&#xA;&#xA;    _       __                       __       __&#xA;   (_)___  / /____  _________ ______/ /______/ /_&#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ 1.0.5&#xA;&#xA;                projectdiscovery.io&#xA;&#xA;[INF] Loading existing SSL Certificate for:  [*.oast.pro, oast.pro]&#xA;[INF] Loading existing SSL Certificate for:  [*.oast.me, oast.me]&#xA;[INF] Listening with the following services:&#xA;[HTTPS] Listening on TCP 46.101.25.250:443&#xA;[HTTP] Listening on TCP 46.101.25.250:80&#xA;[SMTPS] Listening on TCP 46.101.25.250:587&#xA;[LDAP] Listening on TCP 46.101.25.250:389&#xA;[SMTP] Listening on TCP 46.101.25.250:25&#xA;[DNS] Listening on TCP 46.101.25.250:53&#xA;[DNS] Listening on UDP 46.101.25.250:53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Server Index&lt;/h2&gt; &#xA;&lt;p&gt;Index page for http server can be customized while running custom interactsh server using &lt;code&gt;-http-index&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -d hackwithautomation.com -http-index banner.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;{DOMAIN}&lt;/code&gt; placeholder is also supported in index file to replace with server domain name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8293321/179397016-f6ee12e0-5b0b-42b6-83e7-f0972a804655.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Static File Hosting&lt;/h2&gt; &#xA;&lt;p&gt;Interactsh http server optionally enables file hosting to help in security testing. This capability can be used with a self-hosted server to serve files for common payloads for &lt;strong&gt;XSS, XXE, RCE&lt;/strong&gt; and other attacks.&lt;/p&gt; &#xA;&lt;p&gt;To use this feature, &lt;code&gt;-http-directory&lt;/code&gt; flag can be used which accepts diretory as input and files are served under &lt;code&gt;/s/&lt;/code&gt; direcotry.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -d hackwithautomation.com -http-directory ./paylods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8293321/179396480-d5ff8399-8b91-48aa-b21f-c67e40e80945.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic HTTP Response&lt;/h2&gt; &#xA;&lt;p&gt;Interactsh http server optionally enables responding with dynamic HTTP response by using query parameters. This feature can be enabled by using &lt;code&gt;-dr&lt;/code&gt; or &lt;code&gt;-dynamic-resp&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;The following query parameter names are supported - &lt;code&gt;body&lt;/code&gt;, &lt;code&gt;header&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;delay&lt;/code&gt;. Multiple &lt;code&gt;header&lt;/code&gt; parameters can be specified to set multiple headers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;body&lt;/strong&gt; (response body)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;header&lt;/strong&gt; (response header)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;status&lt;/strong&gt; (response status code)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;delay&lt;/strong&gt; (response time)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;curl -i &#39;https://hackwithautomation.com/x?status=307&amp;amp;body=this+is+example+body&amp;amp;delay=1&amp;amp;header=header1:value1&amp;amp;header=header1:value12&#39;&#xA;&#xA;HTTP/2 307 &#xA;header1: value1&#xA;header1: value12&#xA;server: hackwithautomation.com&#xA;x-interactsh-version: 1.0.7&#xA;content-type: text/plain; charset=utf-8&#xA;content-length: 20&#xA;date: Tue, 13 Sep 2022 12:31:05 GMT&#xA;&#xA;this is example body&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dynamic HTTP Response feature is disabled as default.&lt;/li&gt; &#xA; &lt;li&gt;By design, this feature lets anyone run client-side code / redirects using your interactsh domain / server&lt;/li&gt; &#xA; &lt;li&gt;Using this option with an isolated domain is recommended to &lt;strong&gt;avoid security impact&lt;/strong&gt; on associated root/subdomains.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wildcard Interaction&lt;/h2&gt; &#xA;&lt;p&gt;To enable &lt;code&gt;wildcard&lt;/code&gt; interaction for configured Interactsh domain &lt;code&gt;wildcard&lt;/code&gt; flag can be used with implicit authentication protection via the &lt;code&gt;auth&lt;/code&gt; flag if the &lt;code&gt;token&lt;/code&gt; flag is omitted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -domain hackwithautomation.com -wildcard&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v1.0.0&#xA;&#xA;        projectdiscovery.io&#xA;&#xA;[INF] Client Token: 699c55544ce1604c63edb769e51190acaad1f239589a35671ccabd664385cfc7&#xA;[INF] Listening with the following services:&#xA;[HTTPS] Listening on TCP 157.230.223.165:443&#xA;[HTTP] Listening on TCP 157.230.223.165:80&#xA;[SMTPS] Listening on TCP 157.230.223.165:587&#xA;[LDAP] Listening on TCP 157.230.223.165:389&#xA;[SMTP] Listening on TCP 157.230.223.165:25&#xA;[DNS] Listening on TCP 157.230.223.165:53&#xA;[DNS] Listening on UDP 157.230.223.165:53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LDAP Interaction&lt;/h2&gt; &#xA;&lt;p&gt;As default, Interactsh server support LDAP interaction for the payload included in &lt;a href=&#34;https://ldapwiki.com/wiki/LDAP%20Query%20Examples&#34;&gt;search query&lt;/a&gt;, additionally &lt;code&gt;ldap&lt;/code&gt; flag can be used for complete logging.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -domain hackwithautomation.com -sa -ldap&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v1.0.0&#xA;&#xA;        projectdiscovery.io&#xA;&#xA;[INF] Client Token: deb58fc151e6f0e53d448be3eb14cd7a11590d8950d142b9cd1abac3c2e3e7bc&#xA;[INF] Listening with the following services:&#xA;[DNS] Listening on UDP 157.230.223.165:53&#xA;[LDAP] Listening on TCP 157.230.223.165:389&#xA;[HTTP] Listening on TCP 157.230.223.165:80&#xA;[SMTP] Listening on TCP 157.230.223.165:25&#xA;[DNS] Listening on TCP 157.230.223.165:53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Payload Length&lt;/h2&gt; &#xA;&lt;p&gt;The length of the interactsh payload is &lt;strong&gt;33&lt;/strong&gt; by default, consisting of &lt;strong&gt;20&lt;/strong&gt; (unique correlation-id) + &lt;strong&gt;13&lt;/strong&gt; (nonce token), which can be customized using the &lt;code&gt;cidl&lt;/code&gt; and &lt;code&gt;cidn&lt;/code&gt; flags to make shorter when required with self-hosted interacsh server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -d hackwithautomation.com -cidl 4 -cidn 6&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v1.0.2&#xA;&#xA;        projectdiscovery.io&#xA;&#xA;[INF] Loading existing SSL Certificate for:  [*.hackwithautomation.com, hackwithautomation.com]&#xA;[INF] Listening with the following services:&#xA;[HTTPS] Listening on TCP 157.230.223.165:443&#xA;[SMTPS] Listening on TCP 157.230.223.165:587&#xA;[DNS] Listening on UDP 157.230.223.165:53&#xA;[HTTP] Listening on TCP 157.230.223.165:80&#xA;[LDAP] Listening on TCP 157.230.223.165:389&#xA;[SMTP] Listening on TCP 157.230.223.165:25&#xA;[DNS] Listening on TCP 157.230.223.165:53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is important and required to use same length on both side (&lt;strong&gt;client&lt;/strong&gt; and &lt;strong&gt;server&lt;/strong&gt;), otherwise co-relation will not work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-client -s hackwithautomation.com -cidl 4 -cidn 6&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v1.0.2&#xA;&#xA;        projectdiscovery.io&#xA;&#xA;[INF] Listing 1 payload for OOB Testing&#xA;[INF] c8rf4e8xm4.hackwithautomation.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom SSL Certificate&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/caddyserver/certmagic&#34;&gt;certmagic&lt;/a&gt; library is used by default by interactsh server to produce wildcard certificates for requested domain in an automatic way. To use your own SSL certificate with self-hosted interactsh server, &lt;code&gt;cert&lt;/code&gt; and &lt;code&gt;privkey&lt;/code&gt; flag can be used to provider required certificate files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; To utilize all of the functionality of the SSL protocol, a wildcard certificate is mandatory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;interactsh-server -d hackwithautomation.com -cert hackwithautomation.com.crt -privkey hackwithautomation.com.key&#xA;&#xA;    _       __                       __       __  &#xA;   (_)___  / /____  _________ ______/ /______/ /_ &#xA;  / / __ \/ __/ _ \/ ___/ __ &#39;/ ___/ __/ ___/ __ \&#xA; / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /&#xA;/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/ v1.0.2&#xA;&#xA;        projectdiscovery.io&#xA;&#xA;[INF] Listening with the following services:&#xA;[HTTPS] Listening on TCP 157.230.223.165:443&#xA;[SMTP] Listening on TCP 157.230.223.165:25&#xA;[HTTP] Listening on TCP 157.230.223.165:80&#xA;[LDAP] Listening on TCP 157.230.223.165:389&#xA;[DNS] Listening on TCP 157.230.223.165:53&#xA;[SMTPS] Listening on TCP 157.230.223.165:587&#xA;[DNS] Listening on UDP 157.230.223.165:53&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Protocols&lt;/h2&gt; &#xA;&lt;h3&gt;FTP&lt;/h3&gt; &#xA;&lt;p&gt;FTP support can be enabled with the &lt;code&gt;-ftp&lt;/code&gt; flag and is recommended for self-hosted instances only. The FTP agent simulates a fully-functional FTP server agent with authentication that captures authentications with every file operation. By default, the agent listens on port 21 (this can be changed with the &lt;code&gt;-ftp-port&lt;/code&gt; flag) and lists in read-only mode the content of the OS default temporary directory (customizable with the &lt;code&gt;-ftp-dir&lt;/code&gt; option). Example of starting the FTP daemon and capturing a login interaction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo go run . -ftp -skip-acme -debug -domain localhost&#xA;...&#xA;[INF] Outbound IP: 192.168.1.16&#xA;[INF] Client Token: 6dc07e4a76c3d5e58e4bea13ce073dc403499b128c62397aff7b934a6e4822e3&#xA;[INF] Listening with the following services:&#xA;[DNS] Listening on TCP 192.168.1.16:53&#xA;[SMTP] Listening on TCP 192.168.1.16:25&#xA;[HTTP] Listening on TCP 192.168.1.16:80&#xA;[FTP] Listening on TCP 192.168.1.16:21&#xA;[DNS] Listening on UDP 192.168.1.16:53&#xA;[LDAP] Listening on TCP 192.168.1.16:389&#xA;[DBG] FTP Interaction: &#xA;{&#34;protocol&#34;:&#34;ftp&#34;,&#34;unique-id&#34;:&#34;&#34;,&#34;full-id&#34;:&#34;&#34;,&#34;raw-request&#34;:&#34;USER test\ntest logging in&#34;,&#34;remote-address&#34;:&#34;127.0.0.1:51564&#34;,&#34;timestamp&#34;:&#34;2022-09-29T00:49:42.212323+02:00&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;External Supported Protocols&lt;/h2&gt; &#xA;&lt;h3&gt;SMB&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;-smb&lt;/code&gt; flag enables the Samba protocol (only for self-hosted instances). The samba protocol uses &lt;a href=&#34;https://github.com/SecureAuthCorp/impacket&#34;&gt;impacket&lt;/a&gt; &lt;code&gt;smbserver&lt;/code&gt; class to simulate a samba daemon share listening on port &lt;code&gt;445&lt;/code&gt; unless changed by the &lt;code&gt;-smb-port&lt;/code&gt; flag. When enabled, interactsh executes under the hoods the script &lt;code&gt;smb_server.py&lt;/code&gt;. Hence Python3 and impacket dependencies are required. Example of enabling the samba server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo interactsh-server -smb -skip-acme -debug -domain localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Responder&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lgandx/Responder&#34;&gt;Responder&lt;/a&gt; is wrapped in a docker container exposing various service ports via docker port forwarding. The interactions are retrieved by monitoring the shared log file &lt;code&gt;Responder-Session.log&lt;/code&gt; in the temp folder. To use it on a self-hosted instance, it&#39;s necessary first to build the docker container and tag it as &lt;code&gt;interactsh&lt;/code&gt;(docker daemon must be configured correctly and with port forwarding capabilities):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;docker build . -t interactsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run the service with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo interactsh-server -responder -d localhost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On default settings, the daemon listens on the following ports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UDP: 137, 138, 1434&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TCP: 21 (might collide with FTP daemon if used), 110, 135, 139, 389, 445, 1433, 3141, 3128&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Interactsh Integration&lt;/h2&gt; &#xA;&lt;h3&gt;Use as library&lt;/h3&gt; &#xA;&lt;p&gt;The below example uses interactsh client library to get external interactions for a generated URL by making a http request to the URL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/projectdiscovery/interactsh/pkg/client&#34;&#xA;&#x9;&#34;github.com/projectdiscovery/interactsh/pkg/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client, err := client.New(client.DefaultOptions)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;defer client.Close()&#xA;&#xA;&#x9;client.StartPolling(time.Duration(1*time.Second), func(interaction *server.Interaction) {&#xA;&#x9;&#x9;fmt.Printf(&#34;Got Interaction: %v =&amp;gt; %v\n&#34;, interaction.Protocol, interaction.FullId)&#xA;&#x9;})&#xA;&#x9;defer client.StopPolling()&#xA;&#xA;&#x9;URL := client.URL()&#xA;&#xA;&#x9;resp, err := http.Get(&#34;https://&#34; + URL)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;resp.Body.Close()&#xA;&#xA;&#x9;fmt.Printf(&#34;Got URL: %v =&amp;gt; %v\n&#34;, URL, resp)&#xA;&#x9;time.Sleep(5 * time.Second)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nuclei - OAST&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/projectdiscovery/nuclei&#34;&gt;Nuclei&lt;/a&gt; vulnerability scanner utilize &lt;strong&gt;Interactsh&lt;/strong&gt; for automated payload generation and detection of out of band based security vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://blog.projectdiscovery.io/nuclei-interactsh-integration/&#34;&gt;Nuclei + Interactsh&lt;/a&gt; Integration blog and &lt;a href=&#34;https://nuclei.projectdiscovery.io/templating-guide/interactsh/&#34;&gt;guide document&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h1&gt;Cloud Metadata&lt;/h1&gt; &#xA;&lt;p&gt;Interactsh server supports DNS records for cloud metadata services, which is useful for testing SSRF-related vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;Currently supported metadata services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html&#34;&gt;AWS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alibabacloud.com/blog/alibaba-cloud-ecs-metadata-user-data-and-dynamic-data_594351&#34;&gt;Alibaba&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;aws.interact.sh&lt;/strong&gt; points to 169.254.169.254&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;alibaba.interact.sh&lt;/strong&gt; points to 100.100.100.200&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Acknowledgement&lt;/h3&gt; &#xA;&lt;p&gt;Interactsh is inspired from &lt;a href=&#34;https://portswigger.net/burp/documentation/collaborator&#34;&gt;Burp Collaborator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Interactsh is distributed under &lt;a href=&#34;https://github.com/projectdiscovery/interactsh/raw/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt; and made with 🖤 by the &lt;a href=&#34;https://projectdiscovery.io&#34;&gt;projectdiscovery&lt;/a&gt; team.&lt;/p&gt;</summary>
  </entry>
</feed>