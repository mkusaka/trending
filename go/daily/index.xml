<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-07T01:37:20Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DrDonk/unlocker</title>
    <updated>2023-02-07T01:37:20Z</updated>
    <id>tag:github.com,2023-02-07:/DrDonk/unlocker</id>
    <link href="https://github.com/DrDonk/unlocker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;VMware macOS utilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HELP WANTED:&lt;/h1&gt; &#xA;&lt;h1&gt;I am going to be retiring from the macOS VM work and I am looking for someone who would be willing to maintain the code. Please see this issue:&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/DrDonk/unlocker/issues/85&#34;&gt;https://github.com/DrDonk/unlocker/issues/85&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;macOS Unlocker V4 for VMware Workstation&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Please checkout the wiki. &lt;a href=&#34;https://github.com/DrDonk/unlocker/wiki&#34;&gt;https://github.com/DrDonk/unlocker/wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1. Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Unlocker 4 is designed for VMware Workstation and Player and has been tested against:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Workstation Pro 16/17 on Windows and Linux&lt;/li&gt; &#xA; &lt;li&gt;Workstation Player 16/17 on Windows and Linux&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Unlocker enables certain flags and data tables that are required to see the macOS type when setting the guest OS type, and modify the implmentation of the virtual SMC controller device. These capabiltiites are normally exposed in Fusion and ESXi when running on Apple hardware.&lt;/p&gt; &#xA;&lt;p&gt;The patch code carries out the following modifications dependent on the product being patched:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Patch vmware-vmx and derivatives to allow macOS to boot&lt;/li&gt; &#xA; &lt;li&gt;Patch vmwarebase.dll or libvmwarebase.so to allow Apple guests to be selected during VM creation&lt;/li&gt; &#xA; &lt;li&gt;Provide a copy of the macOS VMware Tools for the guest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is important to understand that the Unlocker cannot add any new capabilities to VMware Workstation and Player but enables support for macOS that is disabled in the VMware products that do not run on Apple hardware.&lt;/p&gt; &#xA;&lt;p&gt;The Unlocker cannot:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add support for new versions of macOS&lt;/li&gt; &#xA; &lt;li&gt;add paravirtualized Apple GPU support&lt;/li&gt; &#xA; &lt;li&gt;add older (non-Ryzen) AMD CPU support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or any other features that are not already in the VMware compiled code.&lt;/p&gt; &#xA;&lt;h2&gt;2. Running the Unlocker&lt;/h2&gt; &#xA;&lt;h3&gt;2.1 Download Release&lt;/h3&gt; &#xA;&lt;p&gt;The code is written in Go and has no pre-requisites and should run directly from the release zip download.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download a binary release from &lt;a href=&#34;https://github.com/DrDonk/unlocker/releases&#34;&gt;https://github.com/DrDonk/unlocker/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Optionally check the sha256 checksum matches that published in the release&lt;/li&gt; &#xA; &lt;li&gt;Unzip (Windows) or untar (Linux) the archive to extract the executables and VMware Tools images&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the folder with the extracted files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.2 Windows&lt;/h3&gt; &#xA;&lt;p&gt;On Windows you can double-click the executables to launch them from the &#34;windows&#34; folder. You may be prompted to run with Administrator rights which are required to patch VMware.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;unlock.exe - apply patches to VMware&lt;/li&gt; &#xA; &lt;li&gt;relock.exe - remove patches from VMware&lt;/li&gt; &#xA; &lt;li&gt;check.exe - check the patch status of VMware&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.3 Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Linux navigate to the folder where the unlocker has been unpacked, and run the required command from the &#34;linux&#34; folder. You will need to be either root or use sudo to run the scripts in the terminal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;unlock - apply patches to VMware&lt;/li&gt; &#xA; &lt;li&gt;relock - remove patches from VMware&lt;/li&gt; &#xA; &lt;li&gt;check - check the patch status of your VMware installation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.3.1 Arch Linux and its derivatives&lt;/h3&gt; &#xA;&lt;p&gt;If you are using Arch Linux or a derivative of Arch, you can install and use this like any normal package &lt;a href=&#34;https://aur.archlinux.org/packages/vmware-unlocker-bin&#34;&gt;from the AUR&lt;/a&gt;. Precompiled binaries and PKGBUILDs to build from the &lt;a href=&#34;https://aur.archlinux.org/packages/vmware-unlocker&#34;&gt;source of the latest release&lt;/a&gt; as well as &lt;a href=&#34;https://aur.archlinux.org/packages/vmware-unlocker-git&#34;&gt;from the main branch&lt;/a&gt; are provided. Included in all of the packages are some Pacman hooks to help unlock and relock VMware whenever there is an update to Unlocker, VMware Worksation Pro/Player, or any of VMware Workstation Pro/Player&#39;s components. The binary files are installed to the &lt;code&gt;/usr/bin&lt;/code&gt; directory so they are already added to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;2.4 Upgrading VMware&lt;/h2&gt; &#xA;&lt;p&gt;If a new VMware version is installed the patches will be lost as the update will overwrite the patched files. You will need to re-run the unlock program to patch the newly installed VMware files. This does not apply to the Arch Linux AUR packages due to the provided ALPM hooks.&lt;/p&gt; &#xA;&lt;h2&gt;2.5 VMware Tools&lt;/h2&gt; &#xA;&lt;p&gt;The Unlocker provides the VMware tools ISO images. Version 16/17 of Workstation Pro recognises the darwin.iso files and the tools can be installed in the usual way by using the &#34;Install VMware Tools&#34; menu item. The Player version does not automatically pick up the ISO images and so the ISO must be maually attached to the VM via the guest&#39;s settings.&lt;/p&gt; &#xA;&lt;h2&gt;3. VMware Downloads&lt;/h2&gt; &#xA;&lt;p&gt;These URLs will link to the latest versions of VMware&#39;s hosted products:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VMware Fusion &lt;a href=&#34;https://vmware.com/go/getfusion&#34;&gt;https://vmware.com/go/getfusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VMware Workstation for Windows &lt;a href=&#34;https://www.vmware.com/go/getworkstation-win&#34;&gt;https://www.vmware.com/go/getworkstation-win&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VMware Workstation for Linux &lt;a href=&#34;https://www.vmware.com/go/getworkstation-linux&#34;&gt;https://www.vmware.com/go/getworkstation-linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VMware Player for Windows &lt;a href=&#34;https://www.vmware.com/go/getplayer-win&#34;&gt;https://www.vmware.com/go/getplayer-win&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VMware Player for Linux &lt;a href=&#34;https://www.vmware.com/go/getplayer-linux&#34;&gt;https://www.vmware.com/go/getplayer-linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;VMware Guest Tools &lt;a href=&#34;https://vmware.com/go/tools&#34;&gt;https://vmware.com/go/tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4. Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Zenith432 for originally building the C++ Unlocker and Mac Son of Knife (MSoK) for all the testing and support.&lt;/p&gt; &#xA;&lt;p&gt;Thanks also to Sam B for finding the solution for ESXi 6 and helping me with debugging expertise. Sam also wrote the code for patching ESXi ELF files and modified the Unlocker code to run on Python 3 in the ESXi 6.5 environment.&lt;/p&gt; &#xA;&lt;p&gt;There have also been many new testers via GitHub, some who want to remain anoymous, but a big thanks to them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>score-spec/score-helm</title>
    <updated>2023-02-07T01:37:20Z</updated>
    <id>tag:github.com,2023-02-07:/score-spec/score-helm</id>
    <link href="https://github.com/score-spec/score-helm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reference implementation for Helm charts integrationsupport&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/score-spec/score-helm/main/docs/images/banner.png&#34; alt=&#34;Score banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/score-spec/score-helm/main/docs/images/logo.svg?sanitize=true&#34; alt=&#34;Score&#34;&gt; Score overview&lt;/h1&gt; &#xA;&lt;p&gt;Score aims to improve developer producticity and experience by reducing the risk of configuration inconsistencies between local and remote environments. It provides developer-centric workload specification (&lt;code&gt;score.yaml&lt;/code&gt;) which captures a workloads runtime requirements in a platform-agnostic manner.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;score.yaml&lt;/code&gt; specification file can be executed against a &lt;em&gt;Score Implementation CLI&lt;/em&gt;, a conversion tool for application developers to generate environment specific configuration. In combination with environment specific parameters, the CLI tool can run your workload in the target environment by generating a platform-specific configuration file such as &lt;code&gt;docker-compose.yaml&lt;/code&gt; or a Helm &lt;code&gt;values.yaml&lt;/code&gt;. Learn more &lt;a href=&#34;https://github.com/score-spec/spec#-what-is-score&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/score-spec/score-helm/main/docs/images/install.svg?sanitize=true&#34; alt=&#34;Installation&#34;&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;score-helm&lt;/code&gt;, follow the instructions as described in our &lt;a href=&#34;https://docs.score.dev/docs/get-started/install/&#34;&gt;installation guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/score-spec/score-helm/main/docs/images/overview.svg?sanitize=true&#34; alt=&#34;Get Started&#34;&gt; Get Started&lt;/h2&gt; &#xA;&lt;p&gt;If you already have a &lt;code&gt;score.yaml&lt;/code&gt; file defined, you can simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Prepare a new Helm values file&#xA;score-helm run -f ./score.yaml -o ./values.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;run&lt;/code&gt; tells the CLI to translate the Score file to a Helm &lt;code&gt;values.yaml&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-f&lt;/code&gt; is the path to the Score file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--env&lt;/code&gt; specifies the path to the &lt;code&gt;values.yaml&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re just getting started, follow &lt;a href=&#34;https://docs.score.dev/docs/get-started/score-helm-hello-world/&#34;&gt;this guide&lt;/a&gt; to run your first Hello World program with &lt;code&gt;score-helm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/score-spec/score-helm/main/docs/images/get-involved.svg?sanitize=true&#34; alt=&#34;Get involved&#34;&gt; Get involved&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give the project a star!&lt;/li&gt; &#xA; &lt;li&gt;Contact us via email: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;mailto:team@score.dev&#34;&gt;team@score.dev&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;mailto:abuse@score.dev&#34;&gt;abuse@score.dev&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;See our &lt;a href=&#34;https://docs.score.dev&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;img src=&#34;https://raw.githubusercontent.com/score-spec/score-helm/main/docs/images/contributing.svg?sanitize=true&#34; alt=&#34;Contributing&#34;&gt; Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Write a &lt;a href=&#34;https://score.dev/blog&#34;&gt;blog post&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Provide feedback on our &lt;a href=&#34;https://github.com/score-spec/spec/raw/main/roadmap.md#get-involved&#34;&gt;road map and releases board&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Contribute.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributions are what make the open-source community such a wonderful place to learn, inspire, and create. Any contributions you make are greatly appreciated.&lt;/p&gt; &#xA;&lt;p&gt;If you have a suggestion that would improve this, please fork the repo and create a pull request. You can also open an issue with the tag &lt;code&gt;enhancement&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project.&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch. &lt;code&gt;git checkout -b feature/feature-name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes. &lt;code&gt;git commit -s -m &#34;Add some AmazingFeature&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch. &lt;code&gt;git push origin feature/feature-name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/score-spec/score-helm/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;You can find our documentation at &lt;a href=&#34;https://docs.score.dev/docs&#34;&gt;docs.score.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/score-spec/spec/raw/main/roadmap.md&#34;&gt;Roadmap&lt;/a&gt;. You can &lt;a href=&#34;https://github.com/score-spec/spec/raw/main/roadmap.md#get-involved&#34;&gt;submit an idea&lt;/a&gt; anytime.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Code of conduct&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/score-spec/score-helm/main/code_of_conduct.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>houko/wechatgpt</title>
    <updated>2023-02-07T01:37:20Z</updated>
    <id>tag:github.com,2023-02-07:/houko/wechatgpt</id>
    <link href="https://github.com/houko/wechatgpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;wechatgpt golang版 chatgpt机器人(可docker部署)，目前支持微信(wechat)，telegram（可直接加@xiaomo_chatgpt_bot体验）&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;欢迎使用&lt;code&gt;wechatgpt&lt;/code&gt;智能机器人，Let&#39;s Chat with ChatGPT&lt;/h2&gt; &#xA;&lt;p&gt;如果觉得不错，请麻烦点个&lt;code&gt;Star&lt;/code&gt;，非常感谢。（最新己经添加了docker部署的方式）&lt;/p&gt; &#xA;&lt;p&gt; &lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/badge/version-2.9.3-blue.svg?cacheSeconds=86400&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/#&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;License: MIT&#34; src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/xiaomoinfo&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;Twitter: xiaomoinfo&#34; src=&#34;https://img.shields.io/twitter/follow/xiaomoinfo.svg?style=social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;仓库地址&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/houko/wechatgpt&#34;&gt;https://github.com/houko/wechatgpt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;准备运行环境&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;go mod tidy &#xA;cp config/config.yaml.example local/config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;修改你的token&lt;/h2&gt; &#xA;&lt;p&gt;打开 &lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;openai&lt;/a&gt; 并注册一个账号, 生成一个api_key并把api_key放到&lt;code&gt;local/config.yaml&lt;/code&gt; 的token下，请看如下示例：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chatgpt:&#xA;  wechat: 小莫&#xA;  token: sk-pKHZD1fLYqXDjjsdsdsdUvIODTT3ssjdfadsJC2gTuqqhTum&#xA;  telegram: your telegram token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;大陆用户注册&lt;code&gt;openai&lt;/code&gt;请参考 &lt;a href=&#34;https://sms-activate.org/cn/info/ChatGPT&#34;&gt;注册ChatGPT详细指南&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;运行App&lt;/h2&gt; &#xA;&lt;h3&gt;环境变量&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;变量名&lt;/th&gt; &#xA;   &lt;th&gt;值&lt;/th&gt; &#xA;   &lt;th&gt;作用&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;api_key&lt;/td&gt; &#xA;   &lt;td&gt;&#34;chatgpt的api_key&#34;&lt;/td&gt; &#xA;   &lt;td&gt;必填项&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wechat&lt;/td&gt; &#xA;   &lt;td&gt;&#34;true&#34; 或缺省&lt;/td&gt; &#xA;   &lt;td&gt;如果为true就会启动微信机器人&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;wechat_keyword&lt;/td&gt; &#xA;   &lt;td&gt;&#34;关键字&#34;或缺省&lt;/td&gt; &#xA;   &lt;td&gt;如果缺省则发任何消息机器都会回复&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;telegram&lt;/td&gt; &#xA;   &lt;td&gt;telegram的token或缺省&lt;/td&gt; &#xA;   &lt;td&gt;如果要启动tg机器人需要填写&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tg_keyword&lt;/td&gt; &#xA;   &lt;td&gt;telegram触发关键字或缺省&lt;/td&gt; &#xA;   &lt;td&gt;如果需要关键字触发就填写&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tg_whitelist&lt;/td&gt; &#xA;   &lt;td&gt;telegram的触发白名单&lt;/td&gt; &#xA;   &lt;td&gt;白名单以外的用户名发消息不会触发&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;Docker&lt;/code&gt; 方式运行&lt;code&gt;wechatgpt&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;运行微信智能机器人的话运行下面这段代码，微信登陆的地址请查看运行日志&lt;code&gt;docker logs &amp;lt;containerId&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d \&#xA;--name wechatgpt \&#xA;-e wechat=&#34;true&#34; \&#xA;-e wechat_keyword=&#34;微信触发关键字&#34; \&#xA;xiaomoinfo/wechatgpt:latest&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行微信智能机器人不需要任何触发关键字请运行下面这段代码，适合微信小号专业做机器人用，微信登陆的地址请查看运行日志&lt;code&gt;docker logs &amp;lt;containerId&amp;gt;&lt;/code&gt;&lt;br&gt; &lt;code&gt;警告：以下命令会让任何消息都会被机器人接管，微信主号不要用下面这个命令&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d \&#xA;--name wechatgpt \&#xA;-e api_key=&#34;你的chatgpt api_key&#34; \&#xA;-e wechat=&#34;true&#34; \&#xA;xiaomoinfo/wechatgpt:latest&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行&lt;code&gt;telegram&lt;/code&gt;智能机器人的话运行下面这段代码&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d \&#xA;--name wechatgpt \&#xA;-e api_key=&#34;你的chatgpt api_key&#34; \&#xA;-e telegram=&#34;你的telegram token&#34; \&#xA;xiaomoinfo/wechatgpt:latest&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果运行&lt;code&gt;telegram&lt;/code&gt;智能机器人时只希望指定的人使用，白名单以外的人发消息机器人不会回复&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d \&#xA;--name wechatgpt \&#xA;-e api_key=&#34;你的chatgpt api_key&#34; \&#xA;-e telegram=&#34;你的telegram token&#34; \&#xA;-e tg_whitelist=&#34;username1,username2&#34; \&#xA;xiaomoinfo/wechatgpt:latest&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果运行&lt;code&gt;telegram&lt;/code&gt;智能机器人时希望在群里回复别人消息，可以指定一个关键字触发&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -d \&#xA;--name wechatgpt \&#xA;-e api_key=&#34;你的chatgpt api_key&#34; \&#xA;-e telegram=&#34;你的telegram token&#34; \&#xA;-e tg_keyword=&#34;小莫&#34; \&#xA;xiaomoinfo/wechatgpt:latest&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;screenshots/docker部署.png&#34; alt=&#34;drawing&#34; style=&#34;width:450px;&#34;&gt; &#xA;&lt;h3&gt;微信&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;ain.go #gosetup&#xA;go: downloading github.com/eatmoreapple/openwechat v1.2.1&#xA;go: downloading github.com/sirupsen/logrus v1.6.0&#xA;go: downloading github.com/spf13/afero v1.9.2&#xA;go: downloading github.com/pelletier/go-toml/v2 v2.0.5&#xA;go: downloading golang.org/x/sys v0.0.0-20220908164124-27713097b956&#xA;/private/var/folders/8t/0nvj_2kn4dl517vhbc4rmb9h0000gn/T/GoLand/___go_build_main_go&#xA;访问下面网址扫描二维码登录&#xA;https://login.weixin.qq.com/qrcode/QedkOe1I4w==&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;会自动打开默认浏览器，如果没有打开也可以手动点击上面的链接打开二维码扫微信&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;2022/12/09 15:15:00 登录成功&#xA;2022/12/09 15:15:01 RetCode:0  Selector:2&#xA;2022/12/09 15:15:04 RetCode:0  Selector:2&#xA;INFO[0099] 0 &amp;lt;Friend:hxh,晓华&amp;gt;                            &#xA;INFO[0099] 1 &amp;lt;Friend:刘葵&amp;gt;                                &#xA;INFO[0099] 2 &amp;lt;Friend:吕&amp;gt;                                 &#xA;INFO[0099] 3 &amp;lt;Friend:wloscar&amp;gt;               &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;登陆成功后会拉取微信的好友和群组&lt;/p&gt; &#xA;&lt;h3&gt;如何使用&lt;/h3&gt; &#xA;&lt;p&gt;默认为&lt;code&gt;chatgpt&lt;/code&gt;，如果想设置其他的触发方式可以修改&lt;code&gt;local/config.yaml&lt;/code&gt;的wechat。此时，如果别人给你发消息带有关键字&lt;code&gt;chatgpt&lt;/code&gt; ，你的微信就会调用&lt;code&gt;chatGPT&lt;/code&gt;AI自动回复你的好友。 当然，在群里也是可以的。&lt;/p&gt; &#xA;&lt;h3&gt;使用场景1&lt;/h3&gt; &#xA;&lt;p&gt;别人给你发消息时，如果消息中带有关键字，系统就会调用AI自动帮你回复此问题。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/IMG_3837.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/IMG_3840.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/IMG_3850.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;使用场景2&lt;/h3&gt; &#xA;&lt;p&gt;别人在群里发消息时，如果消息中带有关键字，系统就会调用AI自动帮你回复此问题。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/IMG_3845.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/IMG_3847.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;使用场景3&lt;/h3&gt; &#xA;&lt;p&gt;自己给自己发消息时，如果消息中带有关键字，系统会也调用AI自动帮你回复此问题。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/IMG_3844.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt; &#xA;&lt;h3&gt;意外之喜&lt;/h3&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/IMG_3843.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt; &#xA;&lt;p&gt;这不比对象来的贴心？&lt;/p&gt; &#xA;&lt;h3&gt;telegram机器人使用方式&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;方式1: 直接添加小莫的bot进行使用&lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/telegram.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;方式2：自己部署&lt;br&gt; 修改 config下的 &lt;code&gt;chatgpt.telegram&lt;/code&gt;的token后运行&lt;code&gt;go run main.go&lt;/code&gt;进行启动，参考如下：&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;chatgpt:&#xA;  wechat: 小莫&#xA;  token: sk-pKHZD1fLYqXDjjsdsdsdUvIODTT3ssjdfadsJC2gTuqqhTum&#xA;  telegram: 5718911250:AAhR1pn52xcCFoM_GyI2g9BaX18S7WbYviQ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;token&lt;/code&gt;获取方式，请在telegram中添加好友&lt;code&gt;@botFather&lt;/code&gt;并按提示操作&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/IMG_3991.png&#34; alt=&#34;drawing&#34; style=&#34;width:250px;&#34;&gt; &#xA;&lt;h2&gt;总结&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;你可以把它当作你的智能助理，帮助你快速回复消息。&lt;/li&gt; &#xA; &lt;li&gt;你可以把它当作一个智能机器人，邀请在群里之后通过关键字帮助大家解答问题。&lt;/li&gt; &#xA; &lt;li&gt;你可以把它当作你的智多星，有什么问题不懂的时候随时问它。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;变爸爸事件&lt;/h2&gt; &#xA;&lt;p&gt;放在B站 &lt;a href=&#34;https://www.bilibili.com/video/BV1B24y1Q7us/&#34;&gt;用chatgpt写了个微信机器人结果变爸爸了&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;贡献本仓库&lt;/h2&gt; &#xA;&lt;p&gt;如果大家有玩的时候有遇到一些奇怪的对话可以截图发PR分享给大家。另外对本项目有什么想法或者贡献的话欢迎提&lt;a href=&#34;https://github.com/houko/wechatgpt/issues&#34;&gt;issue&lt;/a&gt; 或&lt;a href=&#34;https://github.com/houko/wechatgpt/pulls&#34;&gt;pr&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Q&amp;amp;A&lt;/h2&gt; &#xA;&lt;h3&gt;1. 返回错误&lt;code&gt;invalid_api_key&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;这是因为&lt;code&gt;openai&lt;/code&gt;的&lt;code&gt;API&lt;/code&gt; 需要付费，价格非常便宜具体可以官网查看。按照如下参考绑定一下信息卡就可以正常使用了，如果还是有错就把&lt;code&gt;API Key&lt;/code&gt;删掉重新建一个。 &lt;img src=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/screenshots/billing.png&#34; alt=&#34;img.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Cannot load io/fs: malformed module path &#34;io/fs&#34;: missing dot in first path element&lt;/h3&gt; &#xA;&lt;p&gt;golang版本太低，需要&lt;code&gt;1.16&lt;/code&gt;以上，查看方式为&lt;code&gt;go version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go version&#xA;go version go1.17.3 linux/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. 扫码登陆时出现错误 FATA【0023】write token.json: bad file descriptor&lt;/h3&gt; &#xA;&lt;p&gt;删除项目根目录下的&lt;code&gt;token.json&lt;/code&gt;后重新扫码登陆即可&lt;/p&gt; &#xA;&lt;h3&gt;4. go mod tidy时connect: connection refused&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;go: github.com/eatmoreapple/openwechat@v1.2.1: Get https://proxy.golang.org/github.com/eatmoreapple/openwechat/@v/v1.2.1.mod: dial tcp 142.251.43.17:443:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;自身网络环境问题，请排查网络设置&lt;/p&gt; &#xA;&lt;h2&gt;协议&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/houko/wechatgpt/main/LICENSE&#34;&gt;MIT LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>