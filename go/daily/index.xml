<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-24T01:30:39Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alecthomas/kong</title>
    <updated>2024-06-24T01:30:39Z</updated>
    <id>tag:github.com,2024-06-24:/alecthomas/kong</id>
    <link href="https://github.com/alecthomas/kong" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kong is a command-line parser for Go&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;90%&#34; src=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/kong.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Kong is a command-line parser for Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://godoc.org/github.com/alecthomas/kong&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/alecthomas/kong?status.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/alecthomas/kong&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/alecthomas/kong.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/alecthomas/kong&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/alecthomas/kong&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gophers.slack.com/messages/CN9DS8YF3&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?logo=slack&amp;amp;style=flat&amp;amp;label=slack&amp;amp;color=green&amp;amp;message=gophers&#34; alt=&#34;Slack chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- TOC depthfrom:2 depthto:3 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#help&#34;&gt;Help&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#help-as-a-user-of-a-kong-application&#34;&gt;Help as a user of a Kong application&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#defining-help-in-kong&#34;&gt;Defining help in Kong&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#command-handling&#34;&gt;Command handling&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#switch-on-the-command-string&#34;&gt;Switch on the command string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#attach-a-run-error-method-to-each-command&#34;&gt;Attach a Run... error method to each command&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#hooks-beforereset-beforeresolve-beforeapply-afterapply-and-the-bind-option&#34;&gt;Hooks: BeforeReset, BeforeResolve, BeforeApply, AfterApply and the Bind option&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#flags&#34;&gt;Flags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#commands-and-sub-commands&#34;&gt;Commands and sub-commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#branching-positional-arguments&#34;&gt;Branching positional arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#positional-arguments&#34;&gt;Positional arguments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#slices&#34;&gt;Slices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#maps&#34;&gt;Maps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#pointers&#34;&gt;Pointers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#nested-data-structure&#34;&gt;Nested data structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#custom-named-decoders&#34;&gt;Custom named decoders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#supported-field-types&#34;&gt;Supported field types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#custom-decoders-mappers&#34;&gt;Custom decoders mappers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#supported-tags&#34;&gt;Supported tags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#dynamic-commands&#34;&gt;Dynamic Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#variable-interpolation&#34;&gt;Variable interpolation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#validation&#34;&gt;Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#modifying-kongs-behaviour&#34;&gt;Modifying Kong&#39;s behaviour&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#namehelp-and-descriptionhelp---set-the-application-name-description&#34;&gt;Namehelp and Descriptionhelp - set the application name description&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#configurationloader-paths---load-defaults-from-configuration-files&#34;&gt;Configurationloader, paths... - load defaults from configuration files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#resolver---support-for-default-values-from-external-sources&#34;&gt;Resolver... - support for default values from external sources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#mapper---customising-how-the-command-line-is-mapped-to-go-values&#34;&gt;*Mapper... - customising how the command-line is mapped to Go values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#configurehelphelpoptions-and-helphelpfunc---customising-help&#34;&gt;ConfigureHelpHelpOptions and HelpHelpFunc - customising help&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#bind---bind-values-for-callback-hooks-and-run-methods&#34;&gt;Bind... - bind values for callback hooks and Run methods&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#other-options&#34;&gt;Other options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Kong aims to support arbitrarily complex command-line structures with as little developer effort as possible.&lt;/p&gt; &#xA;&lt;p&gt;To achieve that, command-lines are expressed as Go types, with the structure and tags directing how the command line is mapped onto the struct.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following command-line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;shell rm [-f] [-r] &amp;lt;paths&amp;gt; ...&#xA;shell ls [&amp;lt;paths&amp;gt; ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can be represented by the following command-line structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/alecthomas/kong&#34;&#xA;&#xA;var CLI struct {&#xA;  Rm struct {&#xA;    Force     bool `help:&#34;Force removal.&#34;`&#xA;    Recursive bool `help:&#34;Recursively remove files.&#34;`&#xA;&#xA;    Paths []string `arg:&#34;&#34; name:&#34;path&#34; help:&#34;Paths to remove.&#34; type:&#34;path&#34;`&#xA;  } `cmd:&#34;&#34; help:&#34;Remove files.&#34;`&#xA;&#xA;  Ls struct {&#xA;    Paths []string `arg:&#34;&#34; optional:&#34;&#34; name:&#34;path&#34; help:&#34;Paths to list.&#34; type:&#34;path&#34;`&#xA;  } `cmd:&#34;&#34; help:&#34;List paths.&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;  ctx := kong.Parse(&amp;amp;CLI)&#xA;  switch ctx.Command() {&#xA;  case &#34;rm &amp;lt;path&amp;gt;&#34;:&#xA;  case &#34;ls&#34;:&#xA;  default:&#xA;    panic(ctx.Command())&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;h3&gt;Help as a user of a Kong application&lt;/h3&gt; &#xA;&lt;p&gt;Every Kong application includes a &lt;code&gt;--help&lt;/code&gt; flag that will display auto-generated help.&lt;/p&gt; &#xA;&lt;p&gt;eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ shell --help&#xA;usage: shell &amp;lt;command&amp;gt;&#xA;&#xA;A shell-like example app.&#xA;&#xA;Flags:&#xA;  --help   Show context-sensitive help.&#xA;  --debug  Debug mode.&#xA;&#xA;Commands:&#xA;  rm &amp;lt;path&amp;gt; ...&#xA;    Remove files.&#xA;&#xA;  ls [&amp;lt;path&amp;gt; ...]&#xA;    List paths.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a command is provided, the help will show full detail on the command including all available flags.&lt;/p&gt; &#xA;&lt;p&gt;eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ shell --help rm&#xA;usage: shell rm &amp;lt;paths&amp;gt; ...&#xA;&#xA;Remove files.&#xA;&#xA;Arguments:&#xA;  &amp;lt;paths&amp;gt; ...  Paths to remove.&#xA;&#xA;Flags:&#xA;      --debug        Debug mode.&#xA;&#xA;  -f, --force        Force removal.&#xA;  -r, --recursive    Recursively remove files.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defining help in Kong&lt;/h3&gt; &#xA;&lt;p&gt;Help is automatically generated from the command-line structure itself, including &lt;code&gt;help:&#34;&#34;&lt;/code&gt; and other tags. &lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#variable-interpolation&#34;&gt;Variables&lt;/a&gt; will also be interpolated into the help string.&lt;/p&gt; &#xA;&lt;p&gt;Finally, any command, or argument type implementing the interface &lt;code&gt;Help() string&lt;/code&gt; will have this function called to retrieve more detail to augment the help tag. This allows for much more descriptive text than can fit in Go tags. &lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/_examples/shell/help&#34;&gt;See _examples/shell/help&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Showing the &lt;em&gt;command&lt;/em&gt;&#39;s detailed help&lt;/h4&gt; &#xA;&lt;p&gt;A command&#39;s additional help text is &lt;em&gt;not&lt;/em&gt; shown from top-level help, but can be displayed within contextual help:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Top level help&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; $ go run ./_examples/shell/help --help&#xA;Usage: help &amp;lt;command&amp;gt;&#xA;&#xA;An app demonstrating HelpProviders&#xA;&#xA;Flags:&#xA;  -h, --help    Show context-sensitive help.&#xA;      --flag    Regular flag help&#xA;&#xA;Commands:&#xA;  echo    Regular command help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contextual&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; $ go run ./_examples/shell/help echo --help&#xA;Usage: help echo &amp;lt;msg&amp;gt;&#xA;&#xA;Regular command help&#xA;&#xA;🚀 additional command help&#xA;&#xA;Arguments:&#xA;  &amp;lt;msg&amp;gt;    Regular argument help&#xA;&#xA;Flags:&#xA;  -h, --help    Show context-sensitive help.&#xA;      --flag    Regular flag help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Showing an &lt;em&gt;argument&lt;/em&gt;&#39;s detailed help&lt;/h4&gt; &#xA;&lt;p&gt;Custom help will only be shown for &lt;em&gt;positional arguments with named fields&lt;/em&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/README.md#branching-positional-arguments&#34;&gt;see the README section on positional arguments for more details on what that means&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Contextual argument help&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; $ go run ./_examples/shell/help msg --help&#xA;Usage: help echo &amp;lt;msg&amp;gt;&#xA;&#xA;Regular argument help&#xA;&#xA;📣 additional argument help&#xA;&#xA;Flags:&#xA;  -h, --help    Show context-sensitive help.&#xA;      --flag    Regular flag help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command handling&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to handle commands in Kong.&lt;/p&gt; &#xA;&lt;h3&gt;Switch on the command string&lt;/h3&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;kong.Parse()&lt;/code&gt; it will return a unique string representation of the command. Each command branch in the hierarchy will be a bare word and each branching argument or required positional argument will be the name surrounded by angle brackets. Here&#39;s an example:&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s an example of this pattern &lt;a href=&#34;https://github.com/alecthomas/kong/raw/master/_examples/shell/commandstring/main.go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/alecthomas/kong&#34;&#xA;&#xA;var CLI struct {&#xA;  Rm struct {&#xA;    Force     bool `help:&#34;Force removal.&#34;`&#xA;    Recursive bool `help:&#34;Recursively remove files.&#34;`&#xA;&#xA;    Paths []string `arg:&#34;&#34; name:&#34;path&#34; help:&#34;Paths to remove.&#34; type:&#34;path&#34;`&#xA;  } `cmd:&#34;&#34; help:&#34;Remove files.&#34;`&#xA;&#xA;  Ls struct {&#xA;    Paths []string `arg:&#34;&#34; optional:&#34;&#34; name:&#34;path&#34; help:&#34;Paths to list.&#34; type:&#34;path&#34;`&#xA;  } `cmd:&#34;&#34; help:&#34;List paths.&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;  ctx := kong.Parse(&amp;amp;CLI)&#xA;  switch ctx.Command() {&#xA;  case &#34;rm &amp;lt;path&amp;gt;&#34;:&#xA;  case &#34;ls&#34;:&#xA;  default:&#xA;    panic(ctx.Command())&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This has the advantage that it is convenient, but the downside that if you modify your CLI structure, the strings may change. This can be fragile.&lt;/p&gt; &#xA;&lt;h3&gt;Attach a &lt;code&gt;Run(...) error&lt;/code&gt; method to each command&lt;/h3&gt; &#xA;&lt;p&gt;A more robust approach is to break each command out into their own structs:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Break leaf commands out into separate structs.&lt;/li&gt; &#xA; &lt;li&gt;Attach a &lt;code&gt;Run(...) error&lt;/code&gt; method to all leaf commands.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;kong.Kong.Parse()&lt;/code&gt; to obtain a &lt;code&gt;kong.Context&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Call &lt;code&gt;kong.Context.Run(bindings...)&lt;/code&gt; to call the selected parsed command.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once a command node is selected by Kong it will search from that node back to the root. Each encountered command node with a &lt;code&gt;Run(...) error&lt;/code&gt; will be called in reverse order. This allows sub-trees to be re-used fairly conveniently.&lt;/p&gt; &#xA;&lt;p&gt;In addition to values bound with the &lt;code&gt;kong.Bind(...)&lt;/code&gt; option, any values passed through to &lt;code&gt;kong.Context.Run(...)&lt;/code&gt; are also bindable to the target&#39;s &lt;code&gt;Run()&lt;/code&gt; arguments.&lt;/p&gt; &#xA;&lt;p&gt;Finally, hooks can also contribute bindings via &lt;code&gt;kong.Context.Bind()&lt;/code&gt; and &lt;code&gt;kong.Context.BindTo()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a full example emulating part of the Docker CLI &lt;a href=&#34;https://github.com/alecthomas/kong/tree/master/_examples/docker&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Context struct {&#xA;  Debug bool&#xA;}&#xA;&#xA;type RmCmd struct {&#xA;  Force     bool `help:&#34;Force removal.&#34;`&#xA;  Recursive bool `help:&#34;Recursively remove files.&#34;`&#xA;&#xA;  Paths []string `arg:&#34;&#34; name:&#34;path&#34; help:&#34;Paths to remove.&#34; type:&#34;path&#34;`&#xA;}&#xA;&#xA;func (r *RmCmd) Run(ctx *Context) error {&#xA;  fmt.Println(&#34;rm&#34;, r.Paths)&#xA;  return nil&#xA;}&#xA;&#xA;type LsCmd struct {&#xA;  Paths []string `arg:&#34;&#34; optional:&#34;&#34; name:&#34;path&#34; help:&#34;Paths to list.&#34; type:&#34;path&#34;`&#xA;}&#xA;&#xA;func (l *LsCmd) Run(ctx *Context) error {&#xA;  fmt.Println(&#34;ls&#34;, l.Paths)&#xA;  return nil&#xA;}&#xA;&#xA;var cli struct {&#xA;  Debug bool `help:&#34;Enable debug mode.&#34;`&#xA;&#xA;  Rm RmCmd `cmd:&#34;&#34; help:&#34;Remove files.&#34;`&#xA;  Ls LsCmd `cmd:&#34;&#34; help:&#34;List paths.&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;  ctx := kong.Parse(&amp;amp;cli)&#xA;  // Call the Run() method of the selected parsed command.&#xA;  err := ctx.Run(&amp;amp;Context{Debug: cli.Debug})&#xA;  ctx.FatalIfErrorf(err)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hooks: BeforeReset(), BeforeResolve(), BeforeApply(), AfterApply() and the Bind() option&lt;/h2&gt; &#xA;&lt;p&gt;If a node in the grammar has a &lt;code&gt;BeforeReset(...)&lt;/code&gt;, &lt;code&gt;BeforeResolve (...)&lt;/code&gt;, &lt;code&gt;BeforeApply(...) error&lt;/code&gt; and/or &lt;code&gt;AfterApply(...) error&lt;/code&gt; method, those methods will be called before values are reset, before validation/assignment, and after validation/assignment, respectively.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--help&lt;/code&gt; flag is implemented with a &lt;code&gt;BeforeReset&lt;/code&gt; hook.&lt;/p&gt; &#xA;&lt;p&gt;Arguments to hooks are provided via the &lt;code&gt;Run(...)&lt;/code&gt; method or &lt;code&gt;Bind(...)&lt;/code&gt; option. &lt;code&gt;*Kong&lt;/code&gt;, &lt;code&gt;*Context&lt;/code&gt; and &lt;code&gt;*Path&lt;/code&gt; are also bound and finally, hooks can also contribute bindings via &lt;code&gt;kong.Context.Bind()&lt;/code&gt; and &lt;code&gt;kong.Context.BindTo()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A flag with a hook that, if triggered, will set the debug loggers output to stdout.&#xA;type debugFlag bool&#xA;&#xA;func (d debugFlag) BeforeApply(logger *log.Logger) error {&#xA;  logger.SetOutput(os.Stdout)&#xA;  return nil&#xA;}&#xA;&#xA;var cli struct {&#xA;  Debug debugFlag `help:&#34;Enable debug logging.&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;  // Debug logger going to discard.&#xA;  logger := log.New(io.Discard, &#34;&#34;, log.LstdFlags)&#xA;&#xA;  ctx := kong.Parse(&amp;amp;cli, kong.Bind(logger))&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another example of using hooks is load the env-file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;  &#34;github.com/alecthomas/kong&#34;&#xA;  &#34;github.com/joho/godotenv&#34;&#xA;)&#xA;&#xA;type EnvFlag string&#xA;&#xA;// BeforeResolve loads env file.&#xA;func (c EnvFlag) BeforeReset(ctx *kong.Context, trace *kong.Path) error {&#xA;  path := string(ctx.FlagValue(trace.Flag).(EnvFlag)) // nolint&#xA;  path = kong.ExpandPath(path)&#xA;  if err := godotenv.Load(path); err != nil {&#xA;    return err&#xA;  }&#xA;  return nil&#xA;}&#xA;&#xA;var CLI struct {&#xA;  EnvFile EnvFlag&#xA;  Flag `env:&#34;FLAG&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;  _ = kong.Parse(&amp;amp;CLI)&#xA;  fmt.Println(CLI.Flag)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Flags&lt;/h2&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#mapper---customising-how-the-command-line-is-mapped-to-go-values&#34;&gt;mapped&lt;/a&gt; field in the command structure &lt;em&gt;not&lt;/em&gt; tagged with &lt;code&gt;cmd&lt;/code&gt; or &lt;code&gt;arg&lt;/code&gt; will be a flag. Flags are optional by default.&lt;/p&gt; &#xA;&lt;p&gt;eg. The command-line &lt;code&gt;app [--flag=&#34;foo&#34;]&lt;/code&gt; can be represented by the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type CLI struct {&#xA;  Flag string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands and sub-commands&lt;/h2&gt; &#xA;&lt;p&gt;Sub-commands are specified by tagging a struct field with &lt;code&gt;cmd&lt;/code&gt;. Kong supports arbitrarily nested commands.&lt;/p&gt; &#xA;&lt;p&gt;eg. The following struct represents the CLI structure &lt;code&gt;command [--flag=&#34;str&#34;] sub-command&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type CLI struct {&#xA;  Command struct {&#xA;    Flag string&#xA;&#xA;    SubCommand struct {&#xA;    } `cmd`&#xA;  } `cmd`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a sub-command is tagged with &lt;code&gt;default:&#34;1&#34;&lt;/code&gt; it will be selected if there are no further arguments. If a sub-command is tagged with &lt;code&gt;default:&#34;withargs&#34;&lt;/code&gt; it will be selected even if there are further arguments or flags and those arguments or flags are valid for the sub-command. This allows the user to omit the sub-command name on the CLI if its arguments/flags are not ambiguous with the sibling commands or flags.&lt;/p&gt; &#xA;&lt;h2&gt;Branching positional arguments&lt;/h2&gt; &#xA;&lt;p&gt;In addition to sub-commands, structs can also be configured as branching positional arguments.&lt;/p&gt; &#xA;&lt;p&gt;This is achieved by tagging an &lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#mapper---customising-how-the-command-line-is-mapped-to-go-values&#34;&gt;unmapped&lt;/a&gt; nested struct field with &lt;code&gt;arg&lt;/code&gt;, then including a positional argument field inside that struct &lt;em&gt;with the same name&lt;/em&gt;. For example, the following command structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;app rename &amp;lt;name&amp;gt; to &amp;lt;name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Can be represented with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var CLI struct {&#xA;  Rename struct {&#xA;    Name struct {&#xA;      Name string `arg` // &amp;lt;-- NOTE: identical name to enclosing struct field.&#xA;      To struct {&#xA;        Name struct {&#xA;          Name string `arg`&#xA;        } `arg`&#xA;      } `cmd`&#xA;    } `arg`&#xA;  } `cmd`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This looks a little verbose in this contrived example, but typically this will not be the case.&lt;/p&gt; &#xA;&lt;h2&gt;Positional arguments&lt;/h2&gt; &#xA;&lt;p&gt;If a field is tagged with &lt;code&gt;arg:&#34;&#34;&lt;/code&gt; it will be treated as the final positional value to be parsed on the command line. By default positional arguments are required, but specifying &lt;code&gt;optional:&#34;&#34;&lt;/code&gt; will alter this.&lt;/p&gt; &#xA;&lt;p&gt;If a positional argument is a slice, all remaining arguments will be appended to that slice.&lt;/p&gt; &#xA;&lt;h2&gt;Slices&lt;/h2&gt; &#xA;&lt;p&gt;Slice values are treated specially. First the input is split on the &lt;code&gt;sep:&#34;&amp;lt;rune&amp;gt;&#34;&lt;/code&gt; tag (defaults to &lt;code&gt;,&lt;/code&gt;), then each element is parsed by the slice element type and appended to the slice. If the same value is encountered multiple times, elements continue to be appended.&lt;/p&gt; &#xA;&lt;p&gt;To represent the following command-line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmd ls &amp;lt;file&amp;gt; &amp;lt;file&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You would use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var CLI struct {&#xA;  Ls struct {&#xA;    Files []string `arg:&#34;&#34; type:&#34;existingfile&#34;`&#xA;  } `cmd`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maps&lt;/h2&gt; &#xA;&lt;p&gt;Maps are similar to slices except that only one key/value pair can be assigned per value, and the &lt;code&gt;sep&lt;/code&gt; tag denotes the assignment character and defaults to &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To represent the following command-line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmd config set &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; &amp;lt;key&amp;gt;=&amp;lt;value&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You would use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var CLI struct {&#xA;  Config struct {&#xA;    Set struct {&#xA;      Config map[string]float64 `arg:&#34;&#34; type:&#34;file:&#34;`&#xA;    } `cmd`&#xA;  } `cmd`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For flags, multiple key+value pairs should be separated by &lt;code&gt;mapsep:&#34;rune&#34;&lt;/code&gt; tag (defaults to &lt;code&gt;;&lt;/code&gt;) eg. &lt;code&gt;--set=&#34;key1=value1;key2=value2&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pointers&lt;/h2&gt; &#xA;&lt;p&gt;Pointers work like the underlying type, except that you can differentiate between the presence of the zero value and no value being supplied.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var CLI struct {&#xA;&#x9;Foo *int&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Would produce a nil value for &lt;code&gt;Foo&lt;/code&gt; if no &lt;code&gt;--foo&lt;/code&gt; argument is supplied, but would have a pointer to the value 0 if the argument &lt;code&gt;--foo=0&lt;/code&gt; was supplied.&lt;/p&gt; &#xA;&lt;h2&gt;Nested data structure&lt;/h2&gt; &#xA;&lt;p&gt;Kong support a nested data structure as well with &lt;code&gt;embed:&#34;&#34;&lt;/code&gt;. You can combine &lt;code&gt;embed:&#34;&#34;&lt;/code&gt; with &lt;code&gt;prefix:&#34;&#34;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var CLI struct {&#xA;  Logging struct {&#xA;    Level string `enum:&#34;debug,info,warn,error&#34; default:&#34;info&#34;`&#xA;    Type string `enum:&#34;json,console&#34; default:&#34;console&#34;`&#xA;  } `embed:&#34;&#34; prefix:&#34;logging.&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configures Kong to accept flags &lt;code&gt;--logging.level&lt;/code&gt; and &lt;code&gt;--logging.type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom named decoders&lt;/h2&gt; &#xA;&lt;p&gt;Kong includes a number of builtin custom type mappers. These can be used by specifying the tag &lt;code&gt;type:&#34;&amp;lt;type&amp;gt;&#34;&lt;/code&gt;. They are registered with the option function &lt;code&gt;NamedMapper(name, mapper)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A path. ~ expansion is applied. &lt;code&gt;-&lt;/code&gt; is accepted for stdout, and will be passed unaltered.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;existingfile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An existing file. ~ expansion is applied. &lt;code&gt;-&lt;/code&gt; is accepted for stdin, and will be passed unaltered.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;existingdir&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An existing directory. ~ expansion is applied.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;counter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Increment a numeric field. Useful for &lt;code&gt;-vvv&lt;/code&gt;. Can accept &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;--long&lt;/code&gt; or &lt;code&gt;--long=N&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;filecontent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Read the file at path into the field. ~ expansion is applied. &lt;code&gt;-&lt;/code&gt; is accepted for stdin, and will be passed unaltered.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Slices and maps treat type tags specially. For slices, the &lt;code&gt;type:&#34;&#34;&lt;/code&gt; tag specifies the element type. For maps, the tag has the format &lt;code&gt;tag:&#34;[&amp;lt;key&amp;gt;]:[&amp;lt;value&amp;gt;]&#34;&lt;/code&gt; where either may be omitted.&lt;/p&gt; &#xA;&lt;h2&gt;Supported field types&lt;/h2&gt; &#xA;&lt;h2&gt;Custom decoders (mappers)&lt;/h2&gt; &#xA;&lt;p&gt;Any field implementing &lt;code&gt;encoding.TextUnmarshaler&lt;/code&gt; or &lt;code&gt;json.Unmarshaler&lt;/code&gt; will use those interfaces for decoding values. Kong also includes builtin support for many common Go types:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time.Duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Populated using &lt;code&gt;time.ParseDuration()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time.Time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Populated using &lt;code&gt;time.Parse()&lt;/code&gt;. Format defaults to RFC3339 but can be overridden with the &lt;code&gt;format:&#34;X&#34;&lt;/code&gt; tag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;*os.File&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to a file that will be opened, or &lt;code&gt;-&lt;/code&gt; for &lt;code&gt;os.Stdin&lt;/code&gt;. File must be closed by the user.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;*url.URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Populated with &lt;code&gt;url.Parse()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more fine-grained control, if a field implements the &lt;a href=&#34;https://godoc.org/github.com/alecthomas/kong#MapperValue&#34;&gt;MapperValue&lt;/a&gt; interface it will be used to decode arguments into the field.&lt;/p&gt; &#xA;&lt;h2&gt;Supported tags&lt;/h2&gt; &#xA;&lt;p&gt;Tags can be in two forms:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Standard Go syntax, eg. &lt;code&gt;kong:&#34;required,name=&#39;foo&#39;&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Bare tags, eg. &lt;code&gt;required:&#34;&#34; name:&#34;foo&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Both can coexist with standard Tag parsing.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmd:&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If present, struct is a command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arg:&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If present, field is an argument. Required by default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;env:&#34;X,Y,...&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify envars to use for default value. The envs are resolved in the declared order. The first value found is used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Long name, for overriding field name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;help:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Help text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;type:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify &lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#custom-named-decoders&#34;&gt;named types&lt;/a&gt; to use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;placeholder:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Placeholder text.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;default:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;default:&#34;1&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;On a command, make it the default.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;default:&#34;withargs&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;On a command, make it the default and allow args/flags from that command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;short:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Short name, if flag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;aliases:&#34;X,Y&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;One or more aliases (for cmd or flag).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;required:&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If present, flag/arg is required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;optional:&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If present, flag/arg is optional.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hidden:&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If present, command or flag is hidden.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;negatable:&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If present on a &lt;code&gt;bool&lt;/code&gt; field, supports prefixing a flag with &lt;code&gt;--no-&lt;/code&gt; to invert the default value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;format:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format for parsing input, if supported.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sep:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Separator for sequences (defaults to &#34;,&#34;). May be &lt;code&gt;none&lt;/code&gt; to disable splitting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mapsep:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Separator for maps (defaults to &#34;;&#34;). May be &lt;code&gt;none&lt;/code&gt; to disable splitting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;enum:&#34;X,Y,...&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set of valid values allowed for this flag. An enum field must be &lt;code&gt;required&lt;/code&gt; or have a valid &lt;code&gt;default&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;group:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logical group for a flag or command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;xor:&#34;X,Y,...&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exclusive OR groups for flags. Only one flag in the group can be used which is restricted within the same command. When combined with &lt;code&gt;required&lt;/code&gt;, at least one of the &lt;code&gt;xor&lt;/code&gt; group will be required.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prefix:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prefix for all sub-flags.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;envprefix:&#34;X&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Envar prefix for all sub-flags.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;set:&#34;K=V&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set a variable for expansion by child elements. Multiples can occur.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;embed:&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If present, this field&#39;s children will be embedded in the parent. Useful for composition.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;passthrough:&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If present on a positional argument, it stops flag parsing when encountered, as if &lt;code&gt;--&lt;/code&gt; was processed before. Useful for external command wrappers, like &lt;code&gt;exec&lt;/code&gt;. On a command it requires that the command contains only one argument of type &lt;code&gt;[]string&lt;/code&gt; which is then filled with everything following the command, unparsed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ignore the field. Useful for adding non-CLI fields to a configuration struct. e.g &lt;code&gt;`kong:&#34;-&#34;`&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Kong CLI&#39;s can be extended by embedding the &lt;code&gt;kong.Plugin&lt;/code&gt; type and populating it with pointers to Kong annotated structs. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var pluginOne struct {&#xA;  PluginOneFlag string&#xA;}&#xA;var pluginTwo struct {&#xA;  PluginTwoFlag string&#xA;}&#xA;var cli struct {&#xA;  BaseFlag string&#xA;  kong.Plugins&#xA;}&#xA;cli.Plugins = kong.Plugins{&amp;amp;pluginOne, &amp;amp;pluginTwo}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally if an interface type is embedded, it can also be populated with a Kong annotated struct.&lt;/p&gt; &#xA;&lt;h2&gt;Dynamic Commands&lt;/h2&gt; &#xA;&lt;p&gt;While plugins give complete control over extending command-line interfaces, Kong also supports dynamically adding commands via &lt;code&gt;kong.DynamicCommand()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Variable interpolation&lt;/h2&gt; &#xA;&lt;p&gt;Kong supports limited variable interpolation into help strings, enum lists and default values.&lt;/p&gt; &#xA;&lt;p&gt;Variables are in the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;${&amp;lt;name&amp;gt;}&#xA;${&amp;lt;name&amp;gt;=&amp;lt;default&amp;gt;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Variables are set with the &lt;code&gt;Vars{&#34;key&#34;: &#34;value&#34;, ...}&lt;/code&gt; option. Undefined variable references in the grammar without a default will result in an error at construction time.&lt;/p&gt; &#xA;&lt;p&gt;Variables can also be set via the &lt;code&gt;set:&#34;K=V&#34;&lt;/code&gt; tag. In this case, those variables will be available for that node and all children. This is useful for composition by allowing the same struct to be reused.&lt;/p&gt; &#xA;&lt;p&gt;When interpolating into flag or argument help strings, some extra variables are defined from the value itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;${default}&#xA;${enum}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For flags with associated environment variables, the variable &lt;code&gt;${env}&lt;/code&gt; can be interpolated into the help string. In the absence of this variable in the help string, Kong will append &lt;code&gt;($$${env})&lt;/code&gt; to the help string.&lt;/p&gt; &#xA;&lt;p&gt;eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type cli struct {&#xA;  Config string `type:&#34;path&#34; default:&#34;${config_file}&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;  kong.Parse(&amp;amp;cli,&#xA;    kong.Vars{&#xA;      &#34;config_file&#34;: &#34;~/.app.conf&#34;,&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validation&lt;/h2&gt; &#xA;&lt;p&gt;Kong does validation on the structure of a command-line, but also supports extensible validation. Any node in the tree may implement the following interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Validatable interface {&#xA;    Validate() error&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If one of these nodes is in the active command-line it will be called during normal validation.&lt;/p&gt; &#xA;&lt;h2&gt;Modifying Kong&#39;s behaviour&lt;/h2&gt; &#xA;&lt;p&gt;Each Kong parser can be configured via functional options passed to &lt;code&gt;New(cli interface{}, options...Option)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The full set of options can be found &lt;a href=&#34;https://godoc.org/github.com/alecthomas/kong#Option&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Name(help)&lt;/code&gt; and &lt;code&gt;Description(help)&lt;/code&gt; - set the application name description&lt;/h3&gt; &#xA;&lt;p&gt;Set the application name and/or description.&lt;/p&gt; &#xA;&lt;p&gt;The name of the application will default to the binary name, but can be overridden with &lt;code&gt;Name(name)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As with all help in Kong, text will be wrapped to the terminal.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Configuration(loader, paths...)&lt;/code&gt; - load defaults from configuration files&lt;/h3&gt; &#xA;&lt;p&gt;This option provides Kong with support for loading defaults from a set of configuration files. Each file is opened, if possible, and the loader called to create a resolver for that file.&lt;/p&gt; &#xA;&lt;p&gt;eg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;kong.Parse(&amp;amp;cli, kong.Configuration(kong.JSON, &#34;/etc/myapp.json&#34;, &#34;~/.myapp.json&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alecthomas/kong/raw/master/resolver_test.go#L206&#34;&gt;See the tests&lt;/a&gt; for an example of how the JSON file is structured.&lt;/p&gt; &#xA;&lt;h4&gt;List of Configuration Loaders&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/kong-yaml&#34;&gt;YAML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/kong-hcl&#34;&gt;HCL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/kong-toml&#34;&gt;TOML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/kong&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;Resolver(...)&lt;/code&gt; - support for default values from external sources&lt;/h3&gt; &#xA;&lt;p&gt;Resolvers are Kong&#39;s extension point for providing default values from external sources. As an example, support for environment variables via the &lt;code&gt;env&lt;/code&gt; tag is provided by a resolver. There&#39;s also a builtin resolver for JSON configuration files.&lt;/p&gt; &#xA;&lt;p&gt;Example resolvers can be found in &lt;a href=&#34;https://github.com/alecthomas/kong/raw/master/resolver.go&#34;&gt;resolver.go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;*Mapper(...)&lt;/code&gt; - customising how the command-line is mapped to Go values&lt;/h3&gt; &#xA;&lt;p&gt;Command-line arguments are mapped to Go values via the Mapper interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A Mapper represents how a field is mapped from command-line values to Go.&#xA;//&#xA;// Mappers can be associated with concrete fields via pointer, reflect.Type, reflect.Kind, or via a &#34;type&#34; tag.&#xA;//&#xA;// Additionally, if a type implements the MapperValue interface, it will be used.&#xA;type Mapper interface {&#xA;&#x9;// Decode ctx.Value with ctx.Scanner into target.&#xA;&#x9;Decode(ctx *DecodeContext, target reflect.Value) error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All builtin Go types (as well as a bunch of useful stdlib types like &lt;code&gt;time.Time&lt;/code&gt;) have mappers registered by default. Mappers for custom types can be added using &lt;code&gt;kong.??Mapper(...)&lt;/code&gt; options. Mappers are applied to fields in four ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;NamedMapper(string, Mapper)&lt;/code&gt; and using the tag key &lt;code&gt;type:&#34;&amp;lt;name&amp;gt;&#34;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;KindMapper(reflect.Kind, Mapper)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TypeMapper(reflect.Type, Mapper)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ValueMapper(interface{}, Mapper)&lt;/code&gt;, passing in a pointer to a field of the grammar.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;code&gt;ConfigureHelp(HelpOptions)&lt;/code&gt; and &lt;code&gt;Help(HelpFunc)&lt;/code&gt; - customising help&lt;/h3&gt; &#xA;&lt;p&gt;The default help output is usually sufficient, but if not there are two solutions.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;ConfigureHelp(HelpOptions)&lt;/code&gt; to configure how help is formatted (see &lt;a href=&#34;https://godoc.org/github.com/alecthomas/kong#HelpOptions&#34;&gt;HelpOptions&lt;/a&gt; for details).&lt;/li&gt; &#xA; &lt;li&gt;Custom help can be wired into Kong via the &lt;code&gt;Help(HelpFunc)&lt;/code&gt; option. The &lt;code&gt;HelpFunc&lt;/code&gt; is passed a &lt;code&gt;Context&lt;/code&gt;, which contains the parsed context for the current command-line. See the implementation of &lt;code&gt;DefaultHelpPrinter&lt;/code&gt; for an example.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;ValueFormatter(HelpValueFormatter)&lt;/code&gt; if you want to just customize the help text that is accompanied by flags and arguments.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;Groups([]Group)&lt;/code&gt; if you want to customize group titles or add a header.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;code&gt;Bind(...)&lt;/code&gt; - bind values for callback hooks and Run() methods&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/kong/master/#hooks-beforeresolve-beforeapply-afterapply-and-the-bind-option&#34;&gt;section on hooks&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;Other options&lt;/h3&gt; &#xA;&lt;p&gt;The full set of options can be found &lt;a href=&#34;https://godoc.org/github.com/alecthomas/kong#Option&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>casibase/casibase</title>
    <updated>2024-06-24T01:30:39Z</updated>
    <id>tag:github.com,2024-06-24:/casibase/casibase</id>
    <link href="https://github.com/casibase/casibase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spising: ⚡️Open-source AI LangChain-like RAG (Retrieval-Augmented Generation) knowledge database with web UI and Enterprise SSO⚡️, supports OpenAI, Azure, LLaMA, Google Gemini, HuggingFace, Claude, Grok, etc., chat bot demo: https://demo.casibase.com, admin UI demo: https://demo-admin.casibase.com&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34; style=&#34;border-bottom: none;&#34;&gt;📦⚡️ Casibase&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Open-source AI LangChain-like RAG (Retrieval-Augmented Generation) knowledge database with web UI and Enterprise SSO, supports OpenAI, Azure, LLaMA, Google Gemini, HuggingFace, Claude, Grok, etc.,&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/casibase/casibase/master/#badge&#34;&gt; &lt;img alt=&#34;semantic-release&#34; src=&#34;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/casbin/casibase&#34;&gt; &lt;img alt=&#34;docker pull casbin/casibase&#34; src=&#34;https://img.shields.io/docker/pulls/casbin/casibase.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casibase/casibase/actions/workflows/build.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://github.com/casibase/casibase/workflows/Build/badge.svg?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casibase/casibase/releases/latest&#34;&gt; &lt;img alt=&#34;GitHub Release&#34; src=&#34;https://img.shields.io/github/v/release/casibase/casibase.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/casbin/casibase&#34;&gt; &lt;img alt=&#34;Docker Image Version (latest semver)&#34; src=&#34;https://img.shields.io/badge/Docker%20Hub-latest-brightgreen&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- waiting for changing --&gt; &#xA; &lt;!-- &lt;a href=&#34;https://hub.docker.com/r/casbin/casibase&#34;&gt; --&gt; &#xA; &lt;!-- &lt;a href=&#34;https://github.com/casibase/casibase/actions/workflows/build.yml&#34;&gt; --&gt; &#xA; &lt;!-- &lt;a href=&#34;https://github.com/casibase/casibase/releases/latest&#34;&gt; --&gt; &#xA; &lt;!-- &lt;a href=&#34;https://hub.docker.com/repository/docker/casbin/casibase&#34;&gt; --&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/casibase/casibase&#34;&gt; &lt;img alt=&#34;Go Report Card&#34; src=&#34;https://goreportcard.com/badge/github.com/casibase/casibase?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casibase/casibase/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/casibase/casibase?style=flat-square&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casibase/casibase/issues&#34;&gt; &lt;img alt=&#34;GitHub issues&#34; src=&#34;https://img.shields.io/github/issues/casibase/casibase?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/casibase/casibase/master/#&#34;&gt; &lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/casibase/casibase?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/casibase/casibase/network&#34;&gt; &lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/casibase/casibase?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://crowdin.com/project/casibase&#34;&gt; &lt;img alt=&#34;Crowdin&#34; src=&#34;https://badges.crowdin.net/casibase/localized.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/devUNrWXrh&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1022748306096537660?logo=discord&amp;amp;label=discord&amp;amp;color=5865F2&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Online Demo&lt;/h2&gt; &#xA;&lt;h3&gt;Chat Bot&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Demo site: &lt;a href=&#34;https://demo.casibase.com&#34;&gt;https://demo.casibase.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Admin UI&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read-only site: &lt;a href=&#34;https://demo-admin.casibase.com&#34;&gt;https://demo-admin.casibase.com&lt;/a&gt; (any modification operation will fail)&lt;/li&gt; &#xA; &lt;li&gt;Writable site: &lt;a href=&#34;https://demo-admin-w.casibase.com&#34;&gt;https://demo-admin-w.casibase.com&lt;/a&gt; (original data will be restored for every 5 minutes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://casibase.org&#34;&gt;https://casibase.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Casibase contains 2 parts:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Language&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Frontend&lt;/td&gt; &#xA;   &lt;td&gt;User interface for Casibase&lt;/td&gt; &#xA;   &lt;td&gt;JavaScript + React&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Backend&lt;/td&gt; &#xA;   &lt;td&gt;Server-side logic and API for Casibase&lt;/td&gt; &#xA;   &lt;td&gt;Golang + Beego + Python + Flask + MySQL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/casibase/casibase/master/assets/0-Architecture-casibase.png&#34; alt=&#34;0-Architecture-casibase&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Models&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Language Model&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Sub Type&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;gpt-4-32k-0613，gpt-4-32k-0314，gpt-4-32k，gpt-4-0613，gpt-4-0314，gpt-4，gpt-3.5-turbo-0613，gpt-3.5-turbo-0301，gpt-3.5-turbo-16k，gpt-3.5-turbo-16k-0613，gpt-3.5-turbo，text-davinci-003，text-davinci-002，text-curie-001，text-babbage-001，text-ada-001，text-davinci-001，davinci-instruct-beta，davinci，curie-instruct-beta，curie，ada，babbage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chat.openai.com/&#34;&gt;OpenAI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hugging Face&lt;/td&gt; &#xA;   &lt;td&gt;meta-llama/Llama-2-7b, tiiuae/falcon-180B, bigscience/bloom, gpt2, baichuan-inc/Baichuan2-13B-Chat, THUDM/chatglm2-6b&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/&#34;&gt;Hugging Face&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Claude&lt;/td&gt; &#xA;   &lt;td&gt;claude-2, claude-v1, claude-v1-100k, claude-instant-v1, claude-instant-v1-100k, claude-v1.3, claude-v1.3-100k, claude-v1.2, claude-v1.0, claude-instant-v1.1, claude-instant-v1.1-100k, claude-instant-v1.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://claude.ai/chats&#34;&gt;Claude&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenRouter&lt;/td&gt; &#xA;   &lt;td&gt;google/palm-2-codechat-bison, google/palm-2-chat-bison, openai/gpt-3.5-turbo, openai/gpt-3.5-turbo-16k, openai/gpt-4, openai/gpt-4-32k, anthropic/claude-2, anthropic/claude-instant-v1, meta-llama/llama-2-13b-chat, meta-llama/llama-2-70b-chat, palm-2-codechat-bison, palm-2-chat-bison, gpt-3.5-turbo, gpt-3.5-turbo-16k, gpt-4, gpt-4-32k, claude-2, claude-instant-v1, llama-2-13b-chat, llama-2-70b-chat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://openrouter.ai/&#34;&gt;OpenRouter&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ernie&lt;/td&gt; &#xA;   &lt;td&gt;ERNIE-Bot, ERNIE-Bot-turbo, BLOOMZ-7B, Llama-2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://yiyan.baidu.com/&#34;&gt;Ernie&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iFlytek&lt;/td&gt; &#xA;   &lt;td&gt;spark-v1.5, spark-v2.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://xinghuo.xfyun.cn/&#34;&gt;iFlytek&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ChatGLM&lt;/td&gt; &#xA;   &lt;td&gt;chatglm2-6b&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chatglm.cn/&#34;&gt;ChatGLM&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MiniMax&lt;/td&gt; &#xA;   &lt;td&gt;abab5-chat&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://api.minimax.chat/&#34;&gt;MiniMax&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Local&lt;/td&gt; &#xA;   &lt;td&gt;custom-model&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/casibase/casibase/master/#&#34;&gt;Local Computer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Embedding Model&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Model&lt;/th&gt; &#xA;   &lt;th&gt;Sub Type&lt;/th&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenAI&lt;/td&gt; &#xA;   &lt;td&gt;AdaSimilarity, BabbageSimilarity, CurieSimilarity, DavinciSimilarity, AdaSearchDocument, AdaSearchQuery, BabbageSearchDocument, BabbageSearchQuery, CurieSearchDocument, CurieSearchQuery, DavinciSearchDocument, DavinciSearchQuery, AdaCodeSearchCode, AdaCodeSearchText, BabbageCodeSearchCode, BabbageCodeSearchText, AdaEmbeddingV2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chat.openai.com/&#34;&gt;OpenAI&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hugging Face&lt;/td&gt; &#xA;   &lt;td&gt;sentence-transformers/all-MiniLM-L6-v2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://huggingface.co/&#34;&gt;Hugging Face&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cohere&lt;/td&gt; &#xA;   &lt;td&gt;embed-english-v2.0, embed-english-light-v2.0, embed-multilingual-v2.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cohere.com/&#34;&gt;Cohere&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ernie&lt;/td&gt; &#xA;   &lt;td&gt;default&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://yiyan.baidu.com/&#34;&gt;Ernie&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Local&lt;/td&gt; &#xA;   &lt;td&gt;custom-embedding&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/casibase/casibase/master/#&#34;&gt;Local Computer&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://casibase.org&#34;&gt;https://casibase.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://casibase.org/docs/basic/server-installation&#34;&gt;https://casibase.org/docs/basic/server-installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to contact?&lt;/h2&gt; &#xA;&lt;p&gt;Discord: &lt;a href=&#34;https://discord.gg/5rPsrAzK7S&#34;&gt;https://discord.gg/5rPsrAzK7S&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;For Casibase, if you have any questions, you can give issues, or you can also directly start Pull Requests(but we recommend giving issues first to communicate with the community).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/casibase/casibase/raw/master/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>