<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-12T01:32:26Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gtoxlili/wechat-chatGPT</title>
    <updated>2022-12-12T01:32:26Z</updated>
    <id>tag:github.com,2022-12-12:/gtoxlili/wechat-chatGPT</id>
    <link href="https://github.com/gtoxlili/wechat-chatGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;实现微信公众号被动返回接口的ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;wechat-chatGPT&lt;/h2&gt; &#xA;&lt;p&gt;具有微信公众号被动回复用户消息功能的 ChatGPTBot 实现&lt;/p&gt; &#xA;&lt;h3&gt;食用指南&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;在 main.go 文件中填入，微信公众平台中设置的 Token&lt;/li&gt; &#xA; &lt;li&gt;在 sessionToken 文件中填入&lt;code&gt;chat.openai.com&lt;/code&gt; 里 Cookie 中的 __Secure-next-auth.session-token&lt;/li&gt; &#xA; &lt;li&gt;编译项目，并部署到服务器中 默认监听本机 127.0.0.1:7458, 请自行通过 Nginx 或 Caddy 等反向代理工具进行转发&lt;/li&gt; &#xA; &lt;li&gt;在微信公众平台中设置服务器地址为你的服务器地址&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;编译命令&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;GOOS=linux GOARCH=amd64 GOARM= GOMIPS= \&#xA;CGO_ENABLED=0 \                                                   &#xA;go build -trimpath -o ./dist/weChatGPT \                          &#xA;-ldflags &#34;-w -s -buildid=&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;注意事项&lt;/h3&gt; &#xA;&lt;p&gt;sessionToken 文件请放置与可执行文件同一目录下，并且只保留__Secure-next-auth.session-token的内容&lt;/p&gt; &#xA;&lt;h3&gt;效果图&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gtoxlili/wechat-chatGPT/master/img/photo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;其他&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;del&gt;这其实是一篇没什么用的README&lt;/del&gt;&lt;/p&gt; &#xA; &lt;p&gt;由于微信公众号的 &lt;a href=&#34;https://developers.weixin.qq.com/doc/offiaccount/Message_Management/Passive_user_reply_message.html&#34;&gt;5s限制&lt;/a&gt;，虽然本项目已经通过技术将这个限制提升至了 15s, 但绝大多数情况下通过逆向得到的ChatGPT接口的相应速率都超过了这个时间限制。&lt;/p&gt; &#xA; &lt;p&gt;故本 Bot 几乎无法正常工作，可能以后等 ChatGPT 的正式接口出来，会重构本项目的代码。&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>charmbracelet/glow</title>
    <updated>2022-12-12T01:32:26Z</updated>
    <id>tag:github.com,2022-12-12:/charmbracelet/glow</id>
    <link href="https://github.com/charmbracelet/glow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Render markdown on the CLI, with pizzazz! 💅🏻&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Glow&lt;/h1&gt; &#xA;&lt;p&gt;Render markdown on the CLI, with &lt;em&gt;pizzazz&lt;/em&gt;!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://stuff.charm.sh/glow/glow-banner-github.gif&#34; alt=&#34;Glow Logo&#34;&gt; &lt;a href=&#34;https://github.com/charmbracelet/glow/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/glow.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/glow?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/glow/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/glow/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/charmbracelet/glow&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/charmbracelet/glow&#34; alt=&#34;Go ReportCard&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://stuff.charm.sh/glow/glow-1.3-trailer-github.gif&#34; width=&#34;600&#34; alt=&#34;Glow UI Demo&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;Glow is a terminal based markdown reader designed from the ground up to bring out the beauty—and power—of the CLI.&lt;/p&gt; &#xA;&lt;p&gt;Use it to discover markdown files, read documentation directly on the command line and stash markdown files to your own private collection, so you can read them anywhere. Glow will find local markdown files in subdirectories or a local Git repository.&lt;/p&gt; &#xA;&lt;p&gt;By the way, all data stashed is encrypted end-to-end: only you can decrypt it. More on that below.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Package Manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# macOS or Linux&#xA;brew install glow&#xA;&#xA;# macOS (with MacPorts)&#xA;sudo port install glow&#xA;&#xA;# Arch Linux (btw)&#xA;pacman -S glow&#xA;&#xA;# Void Linux&#xA;xbps-install -S glow&#xA;&#xA;# Nix&#xA;nix-env -iA nixpkgs.glow&#xA;&#xA;# FreeBSD&#xA;pkg install glow&#xA;&#xA;# Solus&#xA;eopkg install glow&#xA;&#xA;# Windows (with Scoop or Chocolatey)&#xA;scoop install glow&#xA;choco install glow&#xA;&#xA;# Android (with termux)&#xA;pkg install glow&#xA;&#xA;# Debian/Ubuntu&#xA;sudo mkdir -p /etc/apt/keyrings&#xA;curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg&#xA;echo &#34;deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *&#34; | sudo tee /etc/apt/sources.list.d/charm.list&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install glow&#xA;&#xA;# Fedora/RHEL&#xA;echo &#39;[charm]&#xA;name=Charm&#xA;baseurl=https://repo.charm.sh/yum/&#xA;enabled=1&#xA;gpgcheck=1&#xA;gpgkey=https://repo.charm.sh/yum/gpg.key&#39; | sudo tee /etc/yum.repos.d/charm.repo&#xA;sudo yum install glow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download a binary from the &lt;a href=&#34;https://github.com/charmbracelet/glow/releases&#34;&gt;releases&lt;/a&gt; page. MacOS, Linux, Windows, FreeBSD and OpenBSD binaries are available, as well as Debian, RPM, and Alpine packages. ARM builds are also available for macOS, Linux, FreeBSD and OpenBSD.&lt;/p&gt; &#xA;&lt;h3&gt;Go&lt;/h3&gt; &#xA;&lt;p&gt;Or just install it with &lt;code&gt;go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/charmbracelet/glow@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build (requires Go 1.13+)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/charmbracelet/glow.git&#xA;cd glow&#xA;go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The TUI&lt;/h2&gt; &#xA;&lt;p&gt;Simply run &lt;code&gt;glow&lt;/code&gt; without arguments to start the textual user interface and browse local and stashed markdown. Glow will find local markdown files in the current directory and below or, if you’re in a Git repository, Glow will search the repo.&lt;/p&gt; &#xA;&lt;p&gt;Markdown files can be read with Glow&#39;s high-performance pager. Most of the keystrokes you know from &lt;code&gt;less&lt;/code&gt; are the same, but you can press &lt;code&gt;?&lt;/code&gt; to list the hotkeys.&lt;/p&gt; &#xA;&lt;h3&gt;Stashing&lt;/h3&gt; &#xA;&lt;p&gt;Glow works with the Charm Cloud to allow you to store any markdown files in your own private collection. You can stash a local document from the Glow TUI by pressing &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Stashing is private, its contents will not be exposed publicly, and it&#39;s encrypted end-to-end. More on encryption below.&lt;/p&gt; &#xA;&lt;h2&gt;The CLI&lt;/h2&gt; &#xA;&lt;p&gt;In addition to a TUI, Glow has a CLI for working with Markdown. To format a document use a markdown source as the primary argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Read from file&#xA;glow README.md&#xA;&#xA;# Read from stdin&#xA;glow -&#xA;&#xA;# Fetch README from GitHub / GitLab&#xA;glow github.com/charmbracelet/glow&#xA;&#xA;# Fetch markdown from HTTP&#xA;glow https://host.tld/file.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stashing&lt;/h3&gt; &#xA;&lt;p&gt;You can also stash documents from the CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;glow stash README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, when you run &lt;code&gt;glow&lt;/code&gt; without arguments will you can browse through your stashed documents. This is a great way to keep track of things that you need to reference often.&lt;/p&gt; &#xA;&lt;h3&gt;Word Wrapping&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;-w&lt;/code&gt; flag lets you set a maximum width at which the output will be wrapped:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;glow -w 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Paging&lt;/h3&gt; &#xA;&lt;p&gt;CLI output can be displayed in your preferred pager with the &lt;code&gt;-p&lt;/code&gt; flag. This defaults to the ANSI-aware &lt;code&gt;less -r&lt;/code&gt; if &lt;code&gt;$PAGER&lt;/code&gt; is not explicitly set.&lt;/p&gt; &#xA;&lt;h3&gt;Styles&lt;/h3&gt; &#xA;&lt;p&gt;You can choose a style with the &lt;code&gt;-s&lt;/code&gt; flag. When no flag is provided &lt;code&gt;glow&lt;/code&gt; tries to detect your terminal&#39;s current background color and automatically picks either the &lt;code&gt;dark&lt;/code&gt; or the &lt;code&gt;light&lt;/code&gt; style for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;glow -s [dark|light]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can also supply a custom JSON stylesheet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;glow -s mystyle.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For additional usage details see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;glow --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/charmbracelet/glamour/raw/master/styles/gallery/README.md&#34;&gt;Glamour Style Section&lt;/a&gt; to find more styles. Or &lt;a href=&#34;https://github.com/charmbracelet/glamour/tree/master/styles&#34;&gt;make your own&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;The Config File&lt;/h2&gt; &#xA;&lt;p&gt;If you find yourself supplying the same flags to &lt;code&gt;glow&lt;/code&gt; all the time, it&#39;s probably a good idea to create a config file. Run &lt;code&gt;glow config&lt;/code&gt;, which will open it in your favorite $EDITOR. Alternatively you can manually put a file named &lt;code&gt;glow.yml&lt;/code&gt; in the default config path of you platform. If you&#39;re not sure where that is, please refer to &lt;code&gt;glow --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# style name or JSON path (default &#34;auto&#34;)&#xA;style: &#34;light&#34;&#xA;# show local files only; no network (TUI-mode only)&#xA;local: true&#xA;# mouse support (TUI-mode only)&#xA;mouse: true&#xA;# use pager to display markdown&#xA;pager: true&#xA;# word-wrap at width&#xA;width: 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔒 Encryption: How It Works&lt;/h2&gt; &#xA;&lt;p&gt;Encryption works by issuing symmetric keys (basically a generated password) and encrypting it with the local SSH public key generated by the open-source &lt;a href=&#34;https://github.com/charmbracelet/charm&#34;&gt;charm&lt;/a&gt; library. That encrypted key is then sent up to our server. We can’t read it since we don’t have your private key. When you want to decrypt something or view your stash, that key is downloaded from our server and decrypted locally using the SSH private key. When you link accounts, the symmetric key is encrypted for each new public key. This happens on your machine and not our server, so we never see any unencrypted data.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We’d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/charmcli&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.social/@charmcli&#34;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charm.sh/chat&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/glow/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://charm.sh/&#34;&gt;&lt;img alt=&#34;The Charm logo&#34; src=&#34;https://stuff.charm.sh/charm-badge.jpg&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Charm热爱开源 • Charm loves open source&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eryajf/chatgpt-dingtalk</title>
    <updated>2022-12-12T01:32:26Z</updated>
    <id>tag:github.com,2022-12-12:/eryajf/chatgpt-dingtalk</id>
    <link href="https://github.com/eryajf/chatgpt-dingtalk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ChatGPT机器人在钉钉群聊中交互&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;ChatGPT Dingtalk&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/eryajf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Auth-eryajf-ff69b4&#34; alt=&#34;Auth&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/eryajf/chatgpt-dingtalk&#34; alt=&#34;Go Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://views.whatilearened.today/views/github/eryajf/chatgpt-dingtalk.svg?sanitize=true&#34; alt=&#34;HitCount&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/eryajf/chatgpt-dingtalk&#34; alt=&#34;Docker Image Size (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/eryajf/chatgpt-dingtalk&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt; 🌉 在钉钉群聊中添加ChatGPT机器人 🌉&lt;/p&gt; &#xA; &lt;img src=&#34;https://camo.githubusercontent.com/82291b0fe831bfc6781e07fc5090cbd0a8b912bb8b8d4fec0696c881834f81ac/68747470733a2f2f70726f626f742e6d656469612f394575424971676170492e676966&#34; width=&#34;800&#34; height=&#34;3&#34;&gt; &#xA;&lt;/div&gt;&#xA;&lt;br&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;最近ChatGPT异常火爆，本项目可以将GPT机器人集成到钉钉群聊中。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;感谢：&lt;/code&gt;这个项目借鉴了&lt;a href=&#34;https://github.com/869413421/wechatbot.git&#34;&gt;wechatbot&lt;/a&gt;，wechatbot是一个能够集成到个人微信的GPT机器人，如果需要，可以前去体验。&lt;/p&gt; &#xA;&lt;h3&gt;功能简介&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持在钉钉群聊中添加机器人，通过@机器人进行聊天交互。&lt;/li&gt; &#xA; &lt;li&gt;提问增加上下文(可能不太理想)，更接近官网效果。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用前提&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;有openai账号，并且创建好api_key，注册相关事项可以参考&lt;a href=&#34;https://juejin.cn/post/7173447848292253704&#34;&gt;此文章&lt;/a&gt; 。访问&lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;这里&lt;/a&gt;，申请个人秘钥。&lt;/li&gt; &#xA; &lt;li&gt;在钉钉开发者后台创建机器人，配置应用程序回调。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用教程&lt;/h2&gt; &#xA;&lt;h3&gt;第一步，先创建机器人&lt;/h3&gt; &#xA;&lt;p&gt;创建步骤参考文档：&lt;a href=&#34;https://open.dingtalk.com/document/robots/enterprise-created-chatbot&#34;&gt;企业内部开发机器人&lt;/a&gt;，或者根据如下步骤进行配置。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;创建机器人。 &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163616.png&#34; alt=&#34;image_20221209_163616&#34;&gt;&lt;/p&gt; &lt;p&gt;步骤比较简单，这里就不赘述了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;配置机器人回调接口。 &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163652.png&#34; alt=&#34;image_20221209_163652&#34;&gt;&lt;/p&gt; &lt;p&gt;创建完毕之后，点击机器人开发管理，然后配置将要部署的服务所在服务器的出口IP，以及将要给服务配置的域名。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;发布机器人。 &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163709.png&#34; alt=&#34;image_20221209_163709&#34;&gt;&lt;/p&gt; &lt;p&gt;点击版本管理与发布，然后点击上线，这个时候就能在钉钉的群里中添加这个机器人了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;群聊添加机器人。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163724.png&#34; alt=&#34;image_20221209_163724&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;第二步，部署应用&lt;/h3&gt; &#xA;&lt;p&gt;你可以使用docker快速运行本项目。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;第一种：基于环境变量运行&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 运行项目&#xA;$ docker run -itd --name chatgpt -p 8090:8090 -e ApiKey=xxxx -e SessionTimeout=60s --restart=always docker.mirrors.sjtug.sjtu.edu.cn/eryajf/chatgpt-dingtalk:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行命令中映射的配置文件参考下边的配置文件说明。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;第二种：基于配置文件挂载运行&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 复制配置文件，根据自己实际情况，调整配置里的内容&#xA;$ cp config.dev.json config.json  # 其中 config.dev.json 从项目的根目录获取&#xA;&#xA;# 运行项目&#xA;docker run -itd --name chatgpt -p 8090:8090  -v `pwd`/config.json:/app/config.json --restart=always docker.mirrors.sjtug.sjtu.edu.cn/eryajf/chatgpt-dingtalk:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中配置文件参考下边的配置文件说明。&lt;/p&gt; &#xA;&lt;p&gt;部署完成之后，通过Nginx代理本服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {&#xA;    listen       80;&#xA;    server_name  chat.eryajf.net;&#xA;&#xA;    client_header_timeout 120s;&#xA;    client_body_timeout 120s;&#xA;&#xA;    location / {&#xA;        proxy_set_header Host $host;&#xA;        proxy_set_header X-Real-IP $remote_addr;&#xA;        proxy_set_header X-Forwarded-Proto $scheme;&#xA;        proxy_set_header X-Forwarded-For $remote_addr;&#xA;        proxy_pass http://localhost:8090;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;部署完成之后，就可以在群里艾特机器人进行体验了。&lt;/p&gt; &#xA;&lt;p&gt;效果如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163739.png&#34; alt=&#34;image_20221209_163739&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;如果你想通过命令行直接部署，可以直接下载release中的&lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/releases&#34;&gt;压缩包&lt;/a&gt; ，请根据自己系统以及架构选择合适的压缩包，下载之后直接解压运行。&lt;/p&gt; &#xA;&lt;p&gt;下载之后，在本地解压，即可看到可执行程序，与配置文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tar xf chatgpt-dingtalk-v0.0.4-darwin-arm64.tar.gz&#xA;$ cd chatgpt-dingtalk-v0.0.4-darwin-arm64&#xA;$ cp config.dev.json # 根据情况调整配置文件内容&#xA;$ ./chatgpt-dingtalk  # 直接运行&#xA;&#xA;# 如果要守护在后台运行&#xA;$ nohup ./chatgpt-dingtalk &amp;amp;&amp;gt; run.log &amp;amp;&#xA;$ tail -f run.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;本地开发&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 获取项目&#xA;$ git clone https://github.com/eryajf/chatgpt-dingtalk.git&#xA;&#xA;# 进入项目目录&#xA;$ cd chatgpt-dingtalk&#xA;&#xA;# 复制配置文件，根据个人实际情况进行配置&#xA;$ cp config.dev.json config.json&#xA;&#xA;# 启动项目&#xA;$ go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置文件说明&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;api_key&#34;: &#34;xxxxxxxxx&#34;,  // openai api_key&#xA;    &#34;session_timeout&#34;: 60    // 会话超时时间,默认60秒,在会话时间内所有发送给机器人的信息会作为上下文&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>