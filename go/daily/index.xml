<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-06T01:36:38Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sashabaranov/go-openai</title>
    <updated>2023-03-06T01:36:38Z</updated>
    <id>tag:github.com,2023-03-06:/sashabaranov/go-openai</id>
    <link href="https://github.com/sashabaranov/go-openai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAI ChatGPT, GPT-3, DALL·E, Whisper API wrapper for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go OpenAI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/sashabaranov/go-openai&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/GoDoc-Reference-blue.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/sashabaranov/go-openai&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/sashabaranov/go-openai&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the repository was recently renamed from &lt;code&gt;go-gpt3&lt;/code&gt; to &lt;code&gt;go-openai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This library provides Go clients for &lt;a href=&#34;https://platform.openai.com/&#34;&gt;OpenAI API&lt;/a&gt;. We support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ChatGPT&lt;/li&gt; &#xA; &lt;li&gt;GPT-3&lt;/li&gt; &#xA; &lt;li&gt;DALL·E 2&lt;/li&gt; &#xA; &lt;li&gt;Whisper&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/sashabaranov/go-openai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ChatGPT example usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;openai &#34;github.com/sashabaranov/go-openai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;client := openai.NewClient(&#34;your token&#34;)&#xA;&#x9;resp, err := client.CreateChatCompletion(&#xA;&#x9;&#x9;context.Background(),&#xA;&#x9;&#x9;openai.ChatCompletionRequest{&#xA;&#x9;&#x9;&#x9;Model: openai.GPT3Dot5Turbo,&#xA;&#x9;&#x9;&#x9;Messages: []openai.ChatCompletionMessage{&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Role:    openai.ChatMessageRoleUser,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Content: &#34;Hello!&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;},&#xA;&#x9;)&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(resp.Choices[0].Message.Content)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other examples:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GPT-3 completion&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;openai &#34;github.com/sashabaranov/go-openai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;c := openai.NewClient(&#34;your token&#34;)&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;req := openai.CompletionRequest{&#xA;&#x9;&#x9;Model:     openai.GPT3Ada,&#xA;&#x9;&#x9;MaxTokens: 5,&#xA;&#x9;&#x9;Prompt:    &#34;Lorem ipsum&#34;,&#xA;&#x9;}&#xA;&#x9;resp, err := c.CreateCompletion(ctx, req)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;fmt.Println(resp.Choices[0].Text)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;GPT-3 streaming completion&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;io&#34;&#xA;&#x9;openai &#34;github.com/sashabaranov/go-openai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;c := openai.NewClient(&#34;your token&#34;)&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;req := openai.CompletionRequest{&#xA;&#x9;&#x9;Model:     openai.GPT3Ada,&#xA;&#x9;&#x9;MaxTokens: 5,&#xA;&#x9;&#x9;Prompt:    &#34;Lorem ipsum&#34;,&#xA;&#x9;&#x9;Stream:    true,&#xA;&#x9;}&#xA;&#x9;stream, err := c.CreateCompletionStream(ctx, req)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;defer stream.Close()&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;response, err := stream.Recv()&#xA;&#x9;&#x9;if errors.Is(err, io.EOF) {&#xA;&#x9;&#x9;&#x9;fmt.Println(&#34;Stream finished&#34;)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;fmt.Printf(&#34;Stream error: %v\n&#34;, err)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;fmt.Printf(&#34;Stream response: %v\n&#34;, response)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Audio Speech-To-Text&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;openai &#34;github.com/sashabaranov/go-openai&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;c := openai.NewClient(&#34;your token&#34;)&#xA;&#x9;ctx := context.Background()&#xA;&#xA;&#x9;req := openai.AudioRequest{&#xA;&#x9;&#x9;Model:    openai.Whisper1,&#xA;&#x9;&#x9;FilePath: &#34;recording.mp3&#34;,&#xA;&#x9;}&#xA;&#x9;resp, err := c.CreateTranscription(ctx, req)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Printf(&#34;Transcription error: %v\n&#34;, err)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;fmt.Println(resp.Text)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Configuring proxy&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;config := openai.DefaultConfig(&#34;token&#34;)&#xA;proxyUrl, err := url.Parse(&#34;http://localhost:{port}&#34;)&#xA;if err != nil {&#xA;&#x9;panic(err)&#xA;}&#xA;transport := &amp;amp;http.Transport{&#xA;&#x9;Proxy: http.ProxyURL(proxyUrl),&#xA;}&#xA;config.HTTPClient = &amp;amp;http.Client{&#xA;&#x9;Transport: transport,&#xA;}&#xA;&#xA;c := openai.NewClientWithConfig(config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;See also: &lt;a href=&#34;https://pkg.go.dev/github.com/sashabaranov/go-openai#ClientConfig&#34;&gt;https://pkg.go.dev/github.com/sashabaranov/go-openai#ClientConfig&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>