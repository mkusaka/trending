<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-14T01:41:57Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gruntwork-io/terratest</title>
    <updated>2022-07-14T01:41:57Z</updated>
    <id>tag:github.com,2022-07-14:/gruntwork-io/terratest</id>
    <link href="https://github.com/gruntwork-io/terratest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terratest is a Go library that makes it easier to write automated tests for your infrastructure code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Terratest&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gruntwork.io/?ref=repo_terratest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/maintained%20by-gruntwork.io-%235849a6.svg?sanitize=true&#34; alt=&#34;Maintained by Gruntwork.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/gruntwork-io/terratest&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/gruntwork-io/terratest.svg?style=svg&amp;amp;circle-token=e48019e09fc3b8bf6e0315a84048501c87c4157c&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gruntwork-io/terratest&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gruntwork-io/terratest&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/mod/github.com/gruntwork-io/terratest?tab=overview&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;go.dev reference&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/gruntwork-io/terratest&#34; alt=&#34;go.mod version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Terratest is a Go library that makes it easier to write automated tests for your infrastructure code. It provides a variety of helper functions and patterns for common infrastructure testing tasks, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Testing Terraform code&lt;/li&gt; &#xA; &lt;li&gt;Testing Packer templates&lt;/li&gt; &#xA; &lt;li&gt;Testing Docker images&lt;/li&gt; &#xA; &lt;li&gt;Executing commands on servers over SSH&lt;/li&gt; &#xA; &lt;li&gt;Working with AWS APIs&lt;/li&gt; &#xA; &lt;li&gt;Working with Azure APIs&lt;/li&gt; &#xA; &lt;li&gt;Working with GCP APIs&lt;/li&gt; &#xA; &lt;li&gt;Working with Kubernetes APIs&lt;/li&gt; &#xA; &lt;li&gt;Testing Helm Charts&lt;/li&gt; &#xA; &lt;li&gt;Making HTTP requests&lt;/li&gt; &#xA; &lt;li&gt;Running shell commands&lt;/li&gt; &#xA; &lt;li&gt;And much more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see the following for more info:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terratest.gruntwork.io&#34;&gt;Terratest Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terratest.gruntwork.io/docs/getting-started/quick-start/&#34;&gt;Getting started with Terratest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terratest.gruntwork.io/docs/&#34;&gt;Terratest Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terratest.gruntwork.io/docs/community/contributing/&#34;&gt;Contributing to Terratest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terratest.gruntwork.io/commercial-support/&#34;&gt;Commercial Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This code is released under the Apache 2.0 License. Please see &lt;a href=&#34;https://raw.githubusercontent.com/gruntwork-io/terratest/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/gruntwork-io/terratest/master/NOTICE&#34;&gt;NOTICE&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Copyright ¬© 2020 Gruntwork, Inc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>swaggo/swag</title>
    <updated>2022-07-14T01:41:57Z</updated>
    <id>tag:github.com,2022-07-14:/swaggo/swag</id>
    <link href="https://github.com/swaggo/swag" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically generate RESTful API documentation with Swagger 2.0 for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swag&lt;/h1&gt; &#xA;&lt;p&gt;üåç &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/README.md&#34;&gt;English&lt;/a&gt; ‚àô &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/README_zh-CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;180px&#34; src=&#34;https://raw.githubusercontent.com/swaggo/swag/master/assets/swaggo.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;&lt;img src=&#34;https://github.com/swaggo/swag/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/swaggo/swag&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/swaggo/swag/master.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/swaggo/swag&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/swaggo/swag&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codebeat.co/projects/github-com-swaggo-swag-master&#34;&gt;&lt;img src=&#34;https://codebeat.co/badges/71e2f5e5-9e6b-405d-baf9-7cc8b5037330&#34; alt=&#34;codebeat badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/swaggo/swag&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/swaggo/swagg?status.svg?sanitize=true&#34; alt=&#34;Go Doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fswaggo%2Fswag?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fswaggo%2Fswag.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swaggo/swag/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/swaggo/swag.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Swag converts Go annotations to Swagger Documentation 2.0. We&#39;ve created a variety of plugins for popular &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#supported-web-frameworks&#34;&gt;Go web frameworks&lt;/a&gt;. This allows you to quickly integrate with an existing Go project (using Swagger UI).&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#supported-web-frameworks&#34;&gt;Supported Web Frameworks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#how-to-use-it-with-gin&#34;&gt;How to use it with Gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#the-swag-formatter&#34;&gt;The swag formatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#implementation-status&#34;&gt;Implementation Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#declarative-comments-format&#34;&gt;Declarative Comments Format&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#general-api-info&#34;&gt;General API Info&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#api-operation&#34;&gt;API Operation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#descriptions-over-multiple-lines&#34;&gt;Descriptions over multiple lines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#user-defined-structure-with-an-array-type&#34;&gt;User defined structure with an array type&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#model-composition-in-response&#34;&gt;Model composition in response&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#add-a-headers-in-response&#34;&gt;Add a headers in response&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-multiple-path-params&#34;&gt;Use multiple path params&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#example-value-of-struct&#34;&gt;Example value of struct&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#schemaexample-of-body&#34;&gt;SchemaExample of body&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#description-of-struct&#34;&gt;Description of struct&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-swaggertype-tag-to-supported-custom-type&#34;&gt;Use swaggertype tag to supported custom type&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-global-overrides-to-support-a-custom-type&#34;&gt;Use global overrides to support a custom type&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-swaggerignore-tag-to-exclude-a-field&#34;&gt;Use swaggerignore tag to exclude a field&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#add-extension-info-to-struct-field&#34;&gt;Add extension info to struct field&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#rename-model-to-display&#34;&gt;Rename model to display&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#how-to-use-security-annotations&#34;&gt;How to use security annotations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#add-a-description-for-enum-items&#34;&gt;Add a description for enum items&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#generate-only-specific-docs-file-types&#34;&gt;Generate only specific docs file types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#about-the-project&#34;&gt;About the Project&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Add comments to your API source code, See &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#declarative-comments-format&#34;&gt;Declarative Comments Format&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download swag by using:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get -u github.com/swaggo/swag/cmd/swag&#xA;&#xA;# 1.16 or newer&#xA;$ go install github.com/swaggo/swag/cmd/swag@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build from source you need &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go&lt;/a&gt; (1.15 or newer).&lt;/p&gt; &#xA;&lt;p&gt;Or download a pre-compiled binary from the &lt;a href=&#34;https://github.com/swaggo/swag/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;swag init&lt;/code&gt; in the project&#39;s root folder which contains the &lt;code&gt;main.go&lt;/code&gt; file. This will parse your comments and generate the required files (&lt;code&gt;docs&lt;/code&gt; folder and &lt;code&gt;docs/docs.go&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ swag init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to import the generated &lt;code&gt;docs/docs.go&lt;/code&gt; so that your specific configuration gets &lt;code&gt;init&lt;/code&gt;&#39;ed. If your General API annotations do not live in &lt;code&gt;main.go&lt;/code&gt;, you can let swag know with &lt;code&gt;-g&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swag init -g http/api.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;(optional) Use &lt;code&gt;swag fmt&lt;/code&gt; format the SWAG comment. (Please upgrade to the latest version)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swag fmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;swag cli&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ swag init -h&#xA;NAME:&#xA;   swag init - Create docs.go&#xA;&#xA;USAGE:&#xA;   swag init [command options] [arguments...]&#xA;&#xA;OPTIONS:&#xA;   --generalInfo value, -g value          Go file path in which &#39;swagger general API Info&#39; is written (default: &#34;main.go&#34;)&#xA;   --dir value, -d value                  Directories you want to parse,comma separated and general-info file must be in the first one (default: &#34;./&#34;)&#xA;   --exclude value                        Exclude directories and files when searching, comma separated&#xA;   --propertyStrategy value, -p value     Property Naming Strategy like snakecase,camelcase,pascalcase (default: &#34;camelcase&#34;)&#xA;   --output value, -o value               Output directory for all the generated files(swagger.json, swagger.yaml and docs.go) (default: &#34;./docs&#34;)&#xA;   --outputTypes value, --ot value        Output types of generated files (docs.go, swagger.json, swagger.yaml) like go,json,yaml (default: &#34;go,json,yaml&#34;)&#xA;   --parseVendor                          Parse go files in &#39;vendor&#39; folder, disabled by default (default: false)&#xA;   --parseDependency, --pd                Parse go files inside dependency folder, disabled by default (default: false)&#xA;   --markdownFiles value, --md value      Parse folder containing markdown files to use as description, disabled by default&#xA;   --codeExampleFiles value, --cef value  Parse folder containing code example files to use for the x-codeSamples extension, disabled by default&#xA;   --parseInternal                        Parse go files in internal packages, disabled by default (default: false)&#xA;   --generatedTime                        Generate timestamp at the top of docs.go, disabled by default (default: false)&#xA;   --requiredByDefault                    Set validation required for all fields by default (default: false)&#xA;   --parseDepth value                     Dependency parse depth (default: 100)&#xA;   --instanceName value                   This parameter can be used to name different swagger document instances. It is optional.&#xA;   --overridesFile value                  File to read global type overrides from. (default: &#34;.swaggo&#34;)&#xA;   --help, -h                             show help (default: false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;swag fmt -h&#xA;NAME:&#xA;   swag fmt - format swag comments&#xA;&#xA;USAGE:&#xA;   swag fmt [command options] [arguments...]&#xA;&#xA;OPTIONS:&#xA;   --dir value, -d value          Directories you want to parse,comma separated and general-info file must be in the first one (default: &#34;./&#34;)&#xA;   --exclude value                Exclude directories and files when searching, comma separated&#xA;   --generalInfo value, -g value  Go file path in which &#39;swagger general API Info&#39; is written (default: &#34;main.go&#34;)&#xA;   --help, -h                     show help (default: false)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Web Frameworks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/swaggo/gin-swagger&#34;&gt;gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/swaggo/echo-swagger&#34;&gt;echo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/buffalo-swagger&#34;&gt;buffalo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/http-swagger&#34;&gt;net/http&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/http-swagger&#34;&gt;gorilla/mux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/http-swagger&#34;&gt;go-chi/chi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i-love-flamingo/swagger&#34;&gt;flamingo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gofiber/swagger&#34;&gt;fiber&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nerzal/atreugo-swagger&#34;&gt;atreugo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use it with Gin&lt;/h2&gt; &#xA;&lt;p&gt;Find the example source code &lt;a href=&#34;https://github.com/swaggo/swag/tree/master/example/celler&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;After using &lt;code&gt;swag init&lt;/code&gt; to generate Swagger 2.0 docs, import the following packages:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/swaggo/gin-swagger&#34; // gin-swagger middleware&#xA;import &#34;github.com/swaggo/files&#34; // swagger embed files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#general-api-info&#34;&gt;General API&lt;/a&gt; annotations in &lt;code&gt;main.go&lt;/code&gt; code:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @title           Swagger Example API&#xA;// @version         1.0&#xA;// @description     This is a sample server celler server.&#xA;// @termsOfService  http://swagger.io/terms/&#xA;&#xA;// @contact.name   API Support&#xA;// @contact.url    http://www.swagger.io/support&#xA;// @contact.email  support@swagger.io&#xA;&#xA;// @license.name  Apache 2.0&#xA;// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html&#xA;&#xA;// @host      localhost:8080&#xA;// @BasePath  /api/v1&#xA;&#xA;// @securityDefinitions.basic  BasicAuth&#xA;func main() {&#xA;&#x9;r := gin.Default()&#xA;&#xA;&#x9;c := controller.NewController()&#xA;&#xA;&#x9;v1 := r.Group(&#34;/api/v1&#34;)&#xA;&#x9;{&#xA;&#x9;&#x9;accounts := v1.Group(&#34;/accounts&#34;)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;accounts.GET(&#34;:id&#34;, c.ShowAccount)&#xA;&#x9;&#x9;&#x9;accounts.GET(&#34;&#34;, c.ListAccounts)&#xA;&#x9;&#x9;&#x9;accounts.POST(&#34;&#34;, c.AddAccount)&#xA;&#x9;&#x9;&#x9;accounts.DELETE(&#34;:id&#34;, c.DeleteAccount)&#xA;&#x9;&#x9;&#x9;accounts.PATCH(&#34;:id&#34;, c.UpdateAccount)&#xA;&#x9;&#x9;&#x9;accounts.POST(&#34;:id/images&#34;, c.UploadAccountImage)&#xA;&#x9;&#x9;}&#xA;    //...&#xA;&#x9;}&#xA;&#x9;r.GET(&#34;/swagger/*any&#34;, ginSwagger.WrapHandler(swaggerFiles.Handler))&#xA;&#x9;r.Run(&#34;:8080&#34;)&#xA;}&#xA;//...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally some general API info can be set dynamically. The generated code package &lt;code&gt;docs&lt;/code&gt; exports &lt;code&gt;SwaggerInfo&lt;/code&gt; variable which we can use to set the title, description, version, host and base path programmatically. Example using Gin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/gin-gonic/gin&#34;&#xA;&#x9;&#34;github.com/swaggo/files&#34;&#xA;&#x9;&#34;github.com/swaggo/gin-swagger&#34;&#xA;&#xA;&#x9;&#34;./docs&#34; // docs is generated by Swag CLI, you have to import it.&#xA;)&#xA;&#xA;// @contact.name   API Support&#xA;// @contact.url    http://www.swagger.io/support&#xA;// @contact.email  support@swagger.io&#xA;&#xA;// @license.name  Apache 2.0&#xA;// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html&#xA;func main() {&#xA;&#xA;&#x9;// programmatically set swagger info&#xA;&#x9;docs.SwaggerInfo.Title = &#34;Swagger Example API&#34;&#xA;&#x9;docs.SwaggerInfo.Description = &#34;This is a sample server Petstore server.&#34;&#xA;&#x9;docs.SwaggerInfo.Version = &#34;1.0&#34;&#xA;&#x9;docs.SwaggerInfo.Host = &#34;petstore.swagger.io&#34;&#xA;&#x9;docs.SwaggerInfo.BasePath = &#34;/v2&#34;&#xA;&#x9;docs.SwaggerInfo.Schemes = []string{&#34;http&#34;, &#34;https&#34;}&#xA;&#xA;&#x9;r := gin.New()&#xA;&#xA;&#x9;// use ginSwagger middleware to serve the API docs&#xA;&#x9;r.GET(&#34;/swagger/*any&#34;, ginSwagger.WrapHandler(swaggerFiles.Handler))&#xA;&#xA;&#x9;r.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Add &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#api-operation&#34;&gt;API Operation&lt;/a&gt; annotations in &lt;code&gt;controller&lt;/code&gt; code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package controller&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;    &#34;net/http&#34;&#xA;    &#34;strconv&#34;&#xA;&#xA;    &#34;github.com/gin-gonic/gin&#34;&#xA;    &#34;github.com/swaggo/swag/example/celler/httputil&#34;&#xA;    &#34;github.com/swaggo/swag/example/celler/model&#34;&#xA;)&#xA;&#xA;// ShowAccount godoc&#xA;// @Summary      Show an account&#xA;// @Description  get string by ID&#xA;// @Tags         accounts&#xA;// @Accept       json&#xA;// @Produce      json&#xA;// @Param        id   path      int  true  &#34;Account ID&#34;&#xA;// @Success      200  {object}  model.Account&#xA;// @Failure      400  {object}  httputil.HTTPError&#xA;// @Failure      404  {object}  httputil.HTTPError&#xA;// @Failure      500  {object}  httputil.HTTPError&#xA;// @Router       /accounts/{id} [get]&#xA;func (c *Controller) ShowAccount(ctx *gin.Context) {&#xA;  id := ctx.Param(&#34;id&#34;)&#xA;  aid, err := strconv.Atoi(id)&#xA;  if err != nil {&#xA;    httputil.NewError(ctx, http.StatusBadRequest, err)&#xA;    return&#xA;  }&#xA;  account, err := model.AccountOne(aid)&#xA;  if err != nil {&#xA;    httputil.NewError(ctx, http.StatusNotFound, err)&#xA;    return&#xA;  }&#xA;  ctx.JSON(http.StatusOK, account)&#xA;}&#xA;&#xA;// ListAccounts godoc&#xA;// @Summary      List accounts&#xA;// @Description  get accounts&#xA;// @Tags         accounts&#xA;// @Accept       json&#xA;// @Produce      json&#xA;// @Param        q    query     string  false  &#34;name search by q&#34;  Format(email)&#xA;// @Success      200  {array}   model.Account&#xA;// @Failure      400  {object}  httputil.HTTPError&#xA;// @Failure      404  {object}  httputil.HTTPError&#xA;// @Failure      500  {object}  httputil.HTTPError&#xA;// @Router       /accounts [get]&#xA;func (c *Controller) ListAccounts(ctx *gin.Context) {&#xA;  q := ctx.Request.URL.Query().Get(&#34;q&#34;)&#xA;  accounts, err := model.AccountsAll(q)&#xA;  if err != nil {&#xA;    httputil.NewError(ctx, http.StatusNotFound, err)&#xA;    return&#xA;  }&#xA;  ctx.JSON(http.StatusOK, accounts)&#xA;}&#xA;//...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ swag init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run your app, and browse to &lt;a href=&#34;http://localhost:8080/swagger/index.html&#34;&gt;http://localhost:8080/swagger/index.html&lt;/a&gt;. You will see Swagger 2.0 Api documents as shown below:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/swaggo/swag/master/assets/swagger-image.png&#34; alt=&#34;swagger_index.html&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The swag formatter&lt;/h2&gt; &#xA;&lt;p&gt;The Swag Comments can be automatically formatted, just like &#39;go fmt&#39;. Find the result of formatting &lt;a href=&#34;https://github.com/swaggo/swag/tree/master/example/celler&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;swag fmt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude folderÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;swag fmt -d ./ --exclude ./internal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementation Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swagger.io/docs/specification/2-0/basic-structure/&#34;&gt;Swagger 2.0 document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic Structure&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API Host and Base Path&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Paths and Operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Describing Parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Describing Request Body&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Describing Responses&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MIME Types&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Authentication &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic Authentication&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; API Keys&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Adding Examples&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; File Upload&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Enums&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Grouping Operations With Tags&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Swagger Extensions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Declarative Comments Format&lt;/h1&gt; &#xA;&lt;h2&gt;General API Info&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;a href=&#34;https://github.com/swaggo/swag/raw/master/example/celler/main.go&#34;&gt;celler/main.go&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;annotation&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; The title of the application.&lt;/td&gt; &#xA;   &lt;td&gt;// @title Swagger Example API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; Provides the version of the application API.&lt;/td&gt; &#xA;   &lt;td&gt;// @version 1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;A short description of the application.&lt;/td&gt; &#xA;   &lt;td&gt;// @description This is a sample server celler server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.name&lt;/td&gt; &#xA;   &lt;td&gt;Name of a tag.&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.name This is the name of the tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.description&lt;/td&gt; &#xA;   &lt;td&gt;Description of the tag&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.description Cool Description&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.docs.url&lt;/td&gt; &#xA;   &lt;td&gt;Url of the external Documentation of the tag&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.docs.url &lt;a href=&#34;https://example.com&#34;&gt;https://example.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.docs.description&lt;/td&gt; &#xA;   &lt;td&gt;Description of the external Documentation of the tag&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.docs.description Best example documentation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;termsOfService&lt;/td&gt; &#xA;   &lt;td&gt;The Terms of Service for the API.&lt;/td&gt; &#xA;   &lt;td&gt;// @termsOfService &lt;a href=&#34;http://swagger.io/terms/&#34;&gt;http://swagger.io/terms/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contact.name&lt;/td&gt; &#xA;   &lt;td&gt;The contact information for the exposed API.&lt;/td&gt; &#xA;   &lt;td&gt;// @contact.name API Support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contact.url&lt;/td&gt; &#xA;   &lt;td&gt;The URL pointing to the contact information. MUST be in the format of a URL.&lt;/td&gt; &#xA;   &lt;td&gt;// @contact.url &lt;a href=&#34;http://www.swagger.io/support&#34;&gt;http://www.swagger.io/support&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;contact.email&lt;/td&gt; &#xA;   &lt;td&gt;The email address of the contact person/organization. MUST be in the format of an email address.&lt;/td&gt; &#xA;   &lt;td&gt;// @contact.email &lt;a href=&#34;mailto:support@swagger.io&#34;&gt;support@swagger.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;license.name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; The license name used for the API.&lt;/td&gt; &#xA;   &lt;td&gt;// @license.name Apache 2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;license.url&lt;/td&gt; &#xA;   &lt;td&gt;A URL to the license used for the API. MUST be in the format of a URL.&lt;/td&gt; &#xA;   &lt;td&gt;// @license.url &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0.html&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;host&lt;/td&gt; &#xA;   &lt;td&gt;The host (name or ip) serving the API.&lt;/td&gt; &#xA;   &lt;td&gt;// @host localhost:8080&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BasePath&lt;/td&gt; &#xA;   &lt;td&gt;The base path on which the API is served.&lt;/td&gt; &#xA;   &lt;td&gt;// @BasePath /api/v1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;accept&lt;/td&gt; &#xA;   &lt;td&gt;A list of MIME types the APIs can consume. Note that Accept only affects operations with a request body, such as POST, PUT and PATCH. Value MUST be as described under &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;// @accept json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;produce&lt;/td&gt; &#xA;   &lt;td&gt;A list of MIME types the APIs can produce. Value MUST be as described under &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;// @produce json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;query.collection.format&lt;/td&gt; &#xA;   &lt;td&gt;The default collection(array) param format in query,enums:csv,multi,pipes,tsv,ssv. If not set, csv is the default.&lt;/td&gt; &#xA;   &lt;td&gt;// @query.collection.format multi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;schemes&lt;/td&gt; &#xA;   &lt;td&gt;The transfer protocol for the operation that separated by spaces.&lt;/td&gt; &#xA;   &lt;td&gt;// @schemes http https&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x-name&lt;/td&gt; &#xA;   &lt;td&gt;The extension key, must be start by x- and take only json value&lt;/td&gt; &#xA;   &lt;td&gt;// @x-example-key {&#34;key&#34;: &#34;value&#34;}&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using markdown descriptions&lt;/h3&gt; &#xA;&lt;p&gt;When a short string in your documentation is insufficient, or you need images, code examples and things like that you may want to use markdown descriptions. In order to use markdown descriptions use the following annotations.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;annotation&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; The title of the application.&lt;/td&gt; &#xA;   &lt;td&gt;// @title Swagger Example API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required.&lt;/strong&gt; Provides the version of the application API.&lt;/td&gt; &#xA;   &lt;td&gt;// @version 1.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description.markdown&lt;/td&gt; &#xA;   &lt;td&gt;A short description of the application. Parsed from the api.md file. This is an alternative to @description&lt;/td&gt; &#xA;   &lt;td&gt;// @description.markdown No value needed, this parses the description from api.md&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.name&lt;/td&gt; &#xA;   &lt;td&gt;Name of a tag.&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.name This is the name of the tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tag.description.markdown&lt;/td&gt; &#xA;   &lt;td&gt;Description of the tag this is an alternative to tag.description. The description will be read from a file named like tagname.md&lt;/td&gt; &#xA;   &lt;td&gt;// @tag.description.markdown&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;API Operation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;a href=&#34;https://github.com/swaggo/swag/tree/master/example/celler/controller&#34;&gt;celler/controller&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;annotation&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;A verbose explanation of the operation behavior.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description.markdown&lt;/td&gt; &#xA;   &lt;td&gt;A short description of the application. The description will be read from a file. E.g. &lt;code&gt;@description.markdown details&lt;/code&gt; will load &lt;code&gt;details.md&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;A unique string used to identify the operation. Must be unique among all API operations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tags&lt;/td&gt; &#xA;   &lt;td&gt;A list of tags to each API operation that separated by commas.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;summary&lt;/td&gt; &#xA;   &lt;td&gt;A short summary of what the operation does.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;accept&lt;/td&gt; &#xA;   &lt;td&gt;A list of MIME types the APIs can consume. Note that Accept only affects operations with a request body, such as POST, PUT and PATCH. Value MUST be as described under &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;produce&lt;/td&gt; &#xA;   &lt;td&gt;A list of MIME types the APIs can produce. Value MUST be as described under &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#mime-types&#34;&gt;Mime Types&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;param&lt;/td&gt; &#xA;   &lt;td&gt;Parameters that separated by spaces. &lt;code&gt;param name&lt;/code&gt;,&lt;code&gt;param type&lt;/code&gt;,&lt;code&gt;data type&lt;/code&gt;,&lt;code&gt;is mandatory?&lt;/code&gt;,&lt;code&gt;comment&lt;/code&gt; &lt;code&gt;attribute(optional)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;security&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#security&#34;&gt;Security&lt;/a&gt; to each API operation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;success&lt;/td&gt; &#xA;   &lt;td&gt;Success response that separated by spaces. &lt;code&gt;return code or default&lt;/code&gt;,&lt;code&gt;{param type}&lt;/code&gt;,&lt;code&gt;data type&lt;/code&gt;,&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;failure&lt;/td&gt; &#xA;   &lt;td&gt;Failure response that separated by spaces. &lt;code&gt;return code or default&lt;/code&gt;,&lt;code&gt;{param type}&lt;/code&gt;,&lt;code&gt;data type&lt;/code&gt;,&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;response&lt;/td&gt; &#xA;   &lt;td&gt;As same as &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;failure&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;header&lt;/td&gt; &#xA;   &lt;td&gt;Header in response that separated by spaces. &lt;code&gt;return code&lt;/code&gt;,&lt;code&gt;{param type}&lt;/code&gt;,&lt;code&gt;data type&lt;/code&gt;,&lt;code&gt;comment&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;router&lt;/td&gt; &#xA;   &lt;td&gt;Path definition that separated by spaces. &lt;code&gt;path&lt;/code&gt;,&lt;code&gt;[httpMethod]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x-name&lt;/td&gt; &#xA;   &lt;td&gt;The extension key, must be start by x- and take only json value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x-codeSample&lt;/td&gt; &#xA;   &lt;td&gt;Optional Markdown usage. take &lt;code&gt;file&lt;/code&gt; as parameter. This will then search for a file named like the summary in the given folder.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;deprecated&lt;/td&gt; &#xA;   &lt;td&gt;Mark endpoint as deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Mime Types&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;swag&lt;/code&gt; accepts all MIME Types which are in the correct format, that is, match &lt;code&gt;*/*&lt;/code&gt;. Besides that, &lt;code&gt;swag&lt;/code&gt; also accepts aliases for some MIME Types as follows:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Alias&lt;/th&gt; &#xA;   &lt;th&gt;MIME Type&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json&lt;/td&gt; &#xA;   &lt;td&gt;application/json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xml&lt;/td&gt; &#xA;   &lt;td&gt;text/xml&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;plain&lt;/td&gt; &#xA;   &lt;td&gt;text/plain&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;html&lt;/td&gt; &#xA;   &lt;td&gt;text/html&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mpfd&lt;/td&gt; &#xA;   &lt;td&gt;multipart/form-data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;x-www-form-urlencoded&lt;/td&gt; &#xA;   &lt;td&gt;application/x-www-form-urlencoded&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json-api&lt;/td&gt; &#xA;   &lt;td&gt;application/vnd.api+json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;json-stream&lt;/td&gt; &#xA;   &lt;td&gt;application/x-json-stream&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;octet-stream&lt;/td&gt; &#xA;   &lt;td&gt;application/octet-stream&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;png&lt;/td&gt; &#xA;   &lt;td&gt;image/png&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jpeg&lt;/td&gt; &#xA;   &lt;td&gt;image/jpeg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gif&lt;/td&gt; &#xA;   &lt;td&gt;image/gif&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Param Type&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;query&lt;/li&gt; &#xA; &lt;li&gt;path&lt;/li&gt; &#xA; &lt;li&gt;header&lt;/li&gt; &#xA; &lt;li&gt;body&lt;/li&gt; &#xA; &lt;li&gt;formData&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Data Type&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;string (string)&lt;/li&gt; &#xA; &lt;li&gt;integer (int, uint, uint32, uint64)&lt;/li&gt; &#xA; &lt;li&gt;number (float32)&lt;/li&gt; &#xA; &lt;li&gt;boolean (bool)&lt;/li&gt; &#xA; &lt;li&gt;user defined struct&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;annotation&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;parameters&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.basic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/2-0/authentication/basic-authentication/&#34;&gt;Basic&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;// @securityDefinitions.basic BasicAuth&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.apikey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/2-0/authentication/api-keys/&#34;&gt;API key&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;in, name, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securityDefinitions.apikey ApiKeyAuth&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.oauth2.application&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/authentication/oauth2/&#34;&gt;OAuth2 application&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;tokenUrl, scope, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securitydefinitions.oauth2.application OAuth2Application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.oauth2.implicit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/authentication/oauth2/&#34;&gt;OAuth2 implicit&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;authorizationUrl, scope, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securitydefinitions.oauth2.implicit OAuth2Implicit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.oauth2.password&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/authentication/oauth2/&#34;&gt;OAuth2 password&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;tokenUrl, scope, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securitydefinitions.oauth2.password OAuth2Password&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;securitydefinitions.oauth2.accessCode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://swagger.io/docs/specification/authentication/oauth2/&#34;&gt;OAuth2 access code&lt;/a&gt; auth.&lt;/td&gt; &#xA;   &lt;td&gt;tokenUrl, authorizationUrl, scope, description&lt;/td&gt; &#xA;   &lt;td&gt;// @securitydefinitions.oauth2.accessCode OAuth2AccessCode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;parameters annotation&lt;/th&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;in&lt;/td&gt; &#xA;   &lt;td&gt;// @in header&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;// @name Authorization&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tokenUrl&lt;/td&gt; &#xA;   &lt;td&gt;// @tokenUrl &lt;a href=&#34;https://example.com/oauth/token&#34;&gt;https://example.com/oauth/token&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;authorizationurl&lt;/td&gt; &#xA;   &lt;td&gt;// @authorizationurl &lt;a href=&#34;https://example.com/oauth/authorize&#34;&gt;https://example.com/oauth/authorize&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;scope.hoge&lt;/td&gt; &#xA;   &lt;td&gt;// @scope.write Grants write access&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;   &lt;td&gt;// @description OAuth protects our entity endpoints&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Attribute&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Param   enumstring  query     string     false  &#34;string enums&#34;       Enums(A, B, C)&#xA;// @Param   enumint     query     int        false  &#34;int enums&#34;          Enums(1, 2, 3)&#xA;// @Param   enumnumber  query     number     false  &#34;int enums&#34;          Enums(1.1, 1.2, 1.3)&#xA;// @Param   string      query     string     false  &#34;string valid&#34;       minlength(5)  maxlength(10)&#xA;// @Param   int         query     int        false  &#34;int valid&#34;          minimum(1)    maximum(10)&#xA;// @Param   default     query     string     false  &#34;string default&#34;     default(A)&#xA;// @Param   example     query     string     false  &#34;string example&#34;     example(string)&#xA;// @Param   collection  query     []string   false  &#34;string collection&#34;  collectionFormat(multi)&#xA;// @Param   extensions  query     []string   false  &#34;string collection&#34;  extensions(x-example=test,x-nullable)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also works for the struct fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Foo struct {&#xA;    Bar string `minLength:&#34;4&#34; maxLength:&#34;16&#34; example:&#34;random string&#34;`&#xA;    Baz int `minimum:&#34;10&#34; maximum:&#34;20&#34; default:&#34;15&#34;`&#xA;    Qux []string `enums:&#34;foo,bar,baz&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;validate&#34;&gt;&lt;/a&gt;validate&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines the validation for the parameter. Possible values are: &lt;code&gt;required,optional&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterDefault&#34;&gt;&lt;/a&gt;default&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;Declares the value of the parameter that the server will use if none is provided, for example a &#34;count&#34; to control the number of results per page might default to 100 if not supplied by the client in the request. (Note: &#34;default&#34; has no meaning for required parameters.) See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-6.2&lt;/a&gt;. Unlike JSON Schema this value MUST conform to the defined &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; for this parameter.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMaximum&#34;&gt;&lt;/a&gt;maximum&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.2&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMinimum&#34;&gt;&lt;/a&gt;minimum&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.3&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMultipleOf&#34;&gt;&lt;/a&gt;multipleOf&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.1.1&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMaxLength&#34;&gt;&lt;/a&gt;maxLength&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.1&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMinLength&#34;&gt;&lt;/a&gt;minLength&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.2&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterEnums&#34;&gt;&lt;/a&gt;enums&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;[*]&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.5.1&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterFormat&#34;&gt;&lt;/a&gt;format&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The extending format for the previously mentioned &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#parameterType&#34;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&#34;https://swagger.io/specification/v2/#dataTypeFormat&#34;&gt;Data Type Formats&lt;/a&gt; for further details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterCollectionFormat&#34;&gt;&lt;/a&gt;collectionFormat&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines the format of the array if type array is used. Possible values are: &#xA;    &lt;ul&gt;&#xA;     &lt;li&gt;&lt;code&gt;csv&lt;/code&gt; - comma separated values &lt;code&gt;foo,bar&lt;/code&gt;. &lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;ssv&lt;/code&gt; - space separated values &lt;code&gt;foo bar&lt;/code&gt;. &lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;tsv&lt;/code&gt; - tab separated values &lt;code&gt;foo\tbar&lt;/code&gt;. &lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;pipes&lt;/code&gt; - pipe separated values &lt;code&gt;foo|bar&lt;/code&gt;. &lt;/li&gt;&#xA;     &lt;li&gt;&lt;code&gt;multi&lt;/code&gt; - corresponds to multiple parameter instances instead of multiple values for a single instance &lt;code&gt;foo=bar&amp;amp;foo=baz&lt;/code&gt;. This is valid only for parameters &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#parameterIn&#34;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; &#34;query&#34; or &#34;formData&#34;. &lt;/li&gt;&#xA;    &lt;/ul&gt; Default value is &lt;code&gt;csv&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterExample&#34;&gt;&lt;/a&gt;example&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;Declares the example for the parameter value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterExtensions&#34;&gt;&lt;/a&gt;extensions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add extension to parameters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Future&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterPattern&#34;&gt;&lt;/a&gt;pattern&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.2.3&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMaxItems&#34;&gt;&lt;/a&gt;maxItems&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.2&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterMinItems&#34;&gt;&lt;/a&gt;minItems&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.3&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a name=&#34;parameterUniqueItems&#34;&gt;&lt;/a&gt;uniqueItems&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4&#34;&gt;https://tools.ietf.org/html/draft-fge-json-schema-validation-00#section-5.3.4&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Descriptions over multiple lines&lt;/h3&gt; &#xA;&lt;p&gt;You can add descriptions spanning multiple lines in either the general api description or routes definitions like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @description This is the first line&#xA;// @description This is the second line&#xA;// @description And so forth.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User defined structure with an array type&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Success 200 {array} model.Account &amp;lt;-- This is a user defined struct.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package model&#xA;&#xA;type Account struct {&#xA;    ID   int    `json:&#34;id&#34; example:&#34;1&#34;`&#xA;    Name string `json:&#34;name&#34; example:&#34;account name&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Model composition in response&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// JSONResult&#39;s data field will be overridden by the specific type proto.Order&#xA;@success 200 {object} jsonresult.JSONResult{data=proto.Order} &#34;desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type JSONResult struct {&#xA;    Code    int          `json:&#34;code&#34; `&#xA;    Message string       `json:&#34;message&#34;`&#xA;    Data    interface{}  `json:&#34;data&#34;`&#xA;}&#xA;&#xA;type Order struct { //in `proto` package&#xA;    Id  uint            `json:&#34;id&#34;`&#xA;    Data  interface{}   `json:&#34;data&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;also support array of objects and primitive types as nested response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;@success 200 {object} jsonresult.JSONResult{data=[]proto.Order} &#34;desc&#34;&#xA;@success 200 {object} jsonresult.JSONResult{data=string} &#34;desc&#34;&#xA;@success 200 {object} jsonresult.JSONResult{data=[]string} &#34;desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;overriding multiple fields. field will be added if not exists&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;@success 200 {object} jsonresult.JSONResult{data1=string,data2=[]string,data3=proto.Order,data4=[]proto.Order} &#34;desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;overriding deep-level fields&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type DeepObject struct { //in `proto` package&#xA;&#x9;...&#xA;}&#xA;@success 200 {object} jsonresult.JSONResult{data1=proto.Order{data=proto.DeepObject},data2=[]proto.Order{data=[]proto.DeepObject}} &#34;desc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a headers in response&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Success      200              {string}  string    &#34;ok&#34;&#xA;// @failure      400              {string}  string    &#34;error&#34;&#xA;// @response     default          {string}  string    &#34;other error&#34;&#xA;// @Header       200              {string}  Location  &#34;/entity/1&#34;&#xA;// @Header       200,400,default  {string}  Token     &#34;token&#34;&#xA;// @Header       all              {string}  Token2    &#34;token2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use multiple path params&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/// ...&#xA;// @Param group_id   path int true &#34;Group ID&#34;&#xA;// @Param account_id path int true &#34;Account ID&#34;&#xA;// ...&#xA;// @Router /examples/groups/{group_id}/accounts/{account_id} [get]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add multiple paths&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/// ...&#xA;// @Param group_id path int true &#34;Group ID&#34;&#xA;// @Param user_id  path int true &#34;User ID&#34;&#xA;// ...&#xA;// @Router /examples/groups/{group_id}/user/{user_id}/address [put]&#xA;// @Router /examples/user/{user_id}/address [put]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example value of struct&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Account struct {&#xA;    ID   int    `json:&#34;id&#34; example:&#34;1&#34;`&#xA;    Name string `json:&#34;name&#34; example:&#34;account name&#34;`&#xA;    PhotoUrls []string `json:&#34;photo_urls&#34; example:&#34;http://test/image/1.jpg,http://test/image/2.jpg&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SchemaExample of body&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Param email body string true &#34;message/rfc822&#34; SchemaExample(Subject: Testmail\r\n\r\nBody Message\r\n)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Description of struct&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Account model info&#xA;// @Description User account information&#xA;// @Description with user id and username&#xA;type Account struct {&#xA;&#x9;// ID this is userid&#xA;&#x9;ID   int    `json:&#34;id&#34;`&#xA;&#x9;Name string `json:&#34;name&#34;` // This is Name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swaggo/swag/issues/708&#34;&gt;#708&lt;/a&gt; The parser handles only struct comments starting with &lt;code&gt;@Description&lt;/code&gt; attribute. But it writes all struct field comments as is.&lt;/p&gt; &#xA;&lt;p&gt;So, generated swagger doc as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;Account&#34;: {&#xA;  &#34;type&#34;:&#34;object&#34;,&#xA;  &#34;description&#34;: &#34;User account information with user id and username&#34;&#xA;  &#34;properties&#34;: {&#xA;    &#34;id&#34;: {&#xA;      &#34;type&#34;: &#34;integer&#34;,&#xA;      &#34;description&#34;: &#34;ID this is userid&#34;&#xA;    },&#xA;    &#34;name&#34;: {&#xA;      &#34;type&#34;:&#34;string&#34;,&#xA;      &#34;description&#34;: &#34;This is Name&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use swaggertype tag to supported custom type&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swaggo/swag/issues/201#issuecomment-475479409&#34;&gt;#201&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type TimestampTime struct {&#xA;    time.Time&#xA;}&#xA;&#xA;///implement encoding.JSON.Marshaler interface&#xA;func (t *TimestampTime) MarshalJSON() ([]byte, error) {&#xA;    bin := make([]byte, 16)&#xA;    bin = strconv.AppendInt(bin[:0], t.Time.Unix(), 10)&#xA;    return bin, nil&#xA;}&#xA;&#xA;func (t *TimestampTime) UnmarshalJSON(bin []byte) error {&#xA;    v, err := strconv.ParseInt(string(bin), 10, 64)&#xA;    if err != nil {&#xA;        return err&#xA;    }&#xA;    t.Time = time.Unix(v, 0)&#xA;    return nil&#xA;}&#xA;///&#xA;&#xA;type Account struct {&#xA;    // Override primitive type by simply specifying it via `swaggertype` tag&#xA;    ID     sql.NullInt64 `json:&#34;id&#34; swaggertype:&#34;integer&#34;`&#xA;&#xA;    // Override struct type to a primitive type &#39;integer&#39; by specifying it via `swaggertype` tag&#xA;    RegisterTime TimestampTime `json:&#34;register_time&#34; swaggertype:&#34;primitive,integer&#34;`&#xA;&#xA;    // Array types can be overridden using &#34;array,&amp;lt;prim_type&amp;gt;&#34; format&#xA;    Coeffs []big.Float `json:&#34;coeffs&#34; swaggertype:&#34;array,number&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/swaggo/swag/issues/379&#34;&gt;#379&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type CerticateKeyPair struct {&#xA;&#x9;Crt []byte `json:&#34;crt&#34; swaggertype:&#34;string&#34; format:&#34;base64&#34; example:&#34;U3dhZ2dlciByb2Nrcw==&#34;`&#xA;&#x9;Key []byte `json:&#34;key&#34; swaggertype:&#34;string&#34; format:&#34;base64&#34; example:&#34;U3dhZ2dlciByb2Nrcw==&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;generated swagger doc as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#34;api.MyBinding&#34;: {&#xA;  &#34;type&#34;:&#34;object&#34;,&#xA;  &#34;properties&#34;:{&#xA;    &#34;crt&#34;:{&#xA;      &#34;type&#34;:&#34;string&#34;,&#xA;      &#34;format&#34;:&#34;base64&#34;,&#xA;      &#34;example&#34;:&#34;U3dhZ2dlciByb2Nrcw==&#34;&#xA;    },&#xA;    &#34;key&#34;:{&#xA;      &#34;type&#34;:&#34;string&#34;,&#xA;      &#34;format&#34;:&#34;base64&#34;,&#xA;      &#34;example&#34;:&#34;U3dhZ2dlciByb2Nrcw==&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use global overrides to support a custom type&lt;/h3&gt; &#xA;&lt;p&gt;If you are using generated files, the &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#use-swaggertype-tag-to-supported-custom-type&#34;&gt;&lt;code&gt;swaggertype&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;swaggerignore&lt;/code&gt; tags may not be possible.&lt;/p&gt; &#xA;&lt;p&gt;By passing a mapping to swag with &lt;code&gt;--overridesFile&lt;/code&gt; you can tell swag to use one type in place of another wherever it appears. By default, if a &lt;code&gt;.swaggo&lt;/code&gt; file is present in the current directory it will be used.&lt;/p&gt; &#xA;&lt;p&gt;Go code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MyStruct struct {&#xA;  ID     sql.NullInt64 `json:&#34;id&#34;`&#xA;  Name   sql.NullString `json:&#34;name&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;.swaggo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Replace all NullInt64 with int&#xA;replace database/sql.NullInt64 int&#xA;&#xA;// Don&#39;t include any fields of type database/sql.NullString in the swagger docs&#xA;skip    database/sql.NullString&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Possible directives are comments (beginning with &lt;code&gt;//&lt;/code&gt;), &lt;code&gt;replace path/to/a.type path/to/b.type&lt;/code&gt;, and &lt;code&gt;skip path/to/a.type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(Note that the full paths to any named types must be provided to prevent problems when multiple packages define a type with the same name)&lt;/p&gt; &#xA;&lt;p&gt;Rendered:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#34;types.MyStruct&#34;: {&#xA;  &#34;id&#34;: &#34;integer&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use swaggerignore tag to exclude a field&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Account struct {&#xA;    ID   string    `json:&#34;id&#34;`&#xA;    Name string     `json:&#34;name&#34;`&#xA;    Ignored int     `swaggerignore:&#34;true&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add extension info to struct field&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Account struct {&#xA;    ID   string    `json:&#34;id&#34;   extensions:&#34;x-nullable,x-abc=def,!x-omitempty&#34;` // extensions fields must start with &#34;x-&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;generate swagger doc as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#34;Account&#34;: {&#xA;    &#34;type&#34;: &#34;object&#34;,&#xA;    &#34;properties&#34;: {&#xA;        &#34;id&#34;: {&#xA;            &#34;type&#34;: &#34;string&#34;,&#xA;            &#34;x-nullable&#34;: true,&#xA;            &#34;x-abc&#34;: &#34;def&#34;,&#xA;            &#34;x-omitempty&#34;: false&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rename model to display&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;type Resp struct {&#xA;&#x9;Code int&#xA;}//@name Response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to use security annotations&lt;/h3&gt; &#xA;&lt;p&gt;General API info.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @securityDefinitions.basic BasicAuth&#xA;&#xA;// @securitydefinitions.oauth2.application OAuth2Application&#xA;// @tokenUrl https://example.com/oauth/token&#xA;// @scope.write Grants write access&#xA;// @scope.admin Grants read and write access to administrative information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each API operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Security ApiKeyAuth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make it AND condition&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Security ApiKeyAuth&#xA;// @Security OAuth2Application[write, admin]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make it OR condition&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @Security ApiKeyAuth || firebase&#xA;// @Security OAuth2Application[write, admin] || APIKeyAuth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add a description for enum items&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Example struct {&#xA;&#x9;// Sort order:&#xA;&#x9;// * asc - Ascending, from A to Z.&#xA;&#x9;// * desc - Descending, from Z to A.&#xA;&#x9;Order string `enums:&#34;asc,desc&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate only specific docs file types&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;swag&lt;/code&gt; command generates Swagger specification in three different files/file types:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;docs.go&lt;/li&gt; &#xA; &lt;li&gt;swagger.json&lt;/li&gt; &#xA; &lt;li&gt;swagger.yaml&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would like to limit a set of file types which should be generated you can use &lt;code&gt;--outputTypes&lt;/code&gt; (short &lt;code&gt;-ot&lt;/code&gt;) flag. Default value is &lt;code&gt;go,json,yaml&lt;/code&gt; - output types separated with comma. To limit output only to &lt;code&gt;go&lt;/code&gt; and &lt;code&gt;yaml&lt;/code&gt; files, you would write &lt;code&gt;go,yaml&lt;/code&gt;. With complete command that would be &lt;code&gt;swag init --outputTypes go,yaml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About the Project&lt;/h2&gt; &#xA;&lt;p&gt;This project was inspired by &lt;a href=&#34;https://github.com/yvasiyarov/swagger&#34;&gt;yvasiyarov/swagger&lt;/a&gt; but we simplified the usage and added support a variety of &lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/#supported-web-frameworks&#34;&gt;web frameworks&lt;/a&gt;. Gopher image source is &lt;a href=&#34;https://github.com/tenntenn/gopher-stickers&#34;&gt;tenntenn/gopher-stickers&lt;/a&gt;. It has licenses &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/deed.en&#34;&gt;creative commons licensing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/swaggo/swag/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/swaggo/swag/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&#34;https://opencollective.com/swag#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/swag#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/swag#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/swag/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/swag/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/swag/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fswaggo%2Fswag?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fswaggo%2Fswag.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>databus23/helm-diff</title>
    <updated>2022-07-14T01:41:57Z</updated>
    <id>tag:github.com,2022-07-14:/databus23/helm-diff</id>
    <link href="https://github.com/databus23/helm-diff" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A helm plugin that shows a diff explaining what a helm upgrade would change&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Helm Diff Plugin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/databus23/helm-diff&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/databus23/helm-diff&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/databus23/helm-diff&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/databus23/helm-diff?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/databus23/helm-diff/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a Helm plugin giving your a preview of what a &lt;code&gt;helm upgrade&lt;/code&gt; would change. It basically generates a diff between the latest deployed version of a release and a &lt;code&gt;helm upgrade --debug --dry-run&lt;/code&gt;. This can also be used to compare two revisions/versions of your helm release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/105326&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/105326.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Using Helm plugin manager (&amp;gt; 2.3.x)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;helm plugin install https://github.com/databus23/helm-diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre Helm 2.3.0 Installation&lt;/h3&gt; &#xA;&lt;p&gt;Pick a release tarball from the &lt;a href=&#34;https://github.com/databus23/helm-diff/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;Unpack the tarball in your helm plugins directory (&lt;code&gt;$(helm home)/plugins&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -L $TARBALL_URL | tar -C $(helm home)/plugins -xzv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GoLang &lt;code&gt;&amp;gt;= 1.17&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Make sure you do not have a verison of &lt;code&gt;helm-diff&lt;/code&gt; installed. You can remove it by running &lt;code&gt;helm plugin uninstall diff&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Installation Steps&lt;/h4&gt; &#xA;&lt;p&gt;The first step is to download the repository and enter the directory. You can do this via &lt;code&gt;git clone&lt;/code&gt; or downloaing and extracting the release. If you clone via git, remember to checkout the latest tag for the latest release.&lt;/p&gt; &#xA;&lt;p&gt;Next, depending on which helm version you have, install the plugin into helm.&lt;/p&gt; &#xA;&lt;h5&gt;Helm 2&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Helm 3&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install/helm3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;The Helm Diff Plugin&#xA;&#xA;* Shows a diff explaining what a helm upgrade would change:&#xA;    This fetches the currently deployed version of a release&#xA;  and compares it to a local chart plus values. This can be &#xA;  used visualize what changes a helm upgrade will perform.&#xA;&#xA;* Shows a diff explaining what had changed between two revisions:&#xA;    This fetches previously deployed versions of a release&#xA;  and compares them. This can be used visualize what changes &#xA;  were made during revision change.&#xA;&#xA;* Shows a diff explaining what a helm rollback would change:&#xA;    This fetches the currently deployed version of a release&#xA;  and compares it to the previously deployed version of the release, that you&#xA;  want to rollback. This can be used visualize what changes a &#xA;  helm rollback will perform.&#xA;&#xA;Usage:&#xA;  diff [flags]&#xA;  diff [command]&#xA;&#xA;Available Commands:&#xA;  release     Shows diff between release&#39;s manifests&#xA;  revision    Shows diff between revision&#39;s manifests&#xA;  rollback    Show a diff explaining what a helm rollback could perform&#xA;  upgrade     Show a diff explaining what a helm upgrade would change.&#xA;  version     Show version of the helm diff plugin&#xA;&#xA;Flags:&#xA;      --allow-unreleased             enables diffing of releases that are not yet deployed via Helm&#xA;  -a, --api-versions stringArray     Kubernetes api versions used for Capabilities.APIVersions&#xA;      --color                        color output. You can control the value for this flag via HELM_DIFF_COLOR=[true|false]. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not &#34;dumb&#34;&#xA;  -C, --context int                  output NUM lines of context around changes (default -1)&#xA;      --detailed-exitcode            return a non-zero exit code when there are changes&#xA;      --devel                        use development versions, too. Equivalent to version &#39;&amp;gt;0.0.0-0&#39;. If --version is set, this is ignored.&#xA;      --disable-openapi-validation   disables rendered templates validation against the Kubernetes OpenAPI Schema&#xA;      --disable-validation           disables rendered templates validation against the Kubernetes cluster you are currently pointing to. This is the same validation performed on an install&#xA;      --dry-run                      disables cluster access and show diff as if it was install. Implies --install, --reset-values, and --disable-validation&#xA;  -h, --help                         help for diff&#xA;      --include-tests                enable the diffing of the helm test hooks&#xA;      --install                      enables diffing of releases that are not yet deployed via Helm (equivalent to --allow-unreleased, added to match &#34;helm upgrade --install&#34; command&#xA;      --kube-version string          Kubernetes version used for Capabilities.KubeVersion&#xA;      --kubeconfig string            This flag is ignored, to allow passing of this top level flag to helm&#xA;      --no-color                     remove colors from the output. If both --no-color and --color are unspecified, coloring enabled only when the stdout is a term and TERM is not &#34;dumb&#34;&#xA;      --no-hooks                     disable diffing of hooks&#xA;      --normalize-manifests          normalize manifests before running diff to exclude style differences from the output&#xA;      --output string                Possible values: diff, simple, json, template. When set to &#34;template&#34;, use the env var HELM_DIFF_TPL to specify the template. (default &#34;diff&#34;)&#xA;      --post-renderer string         the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path&#xA;      --repo string                  specify the chart repository url to locate the requested chart&#xA;      --reset-values                 reset the values to the ones built into the chart and merge in any new values&#xA;      --reuse-values                 reuse the last release&#39;s values and merge in any new values. If &#39;--reset-values&#39; is specified, this is ignored&#xA;      --set stringArray              set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)&#xA;      --set-file stringArray         set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)&#xA;      --set-string stringArray       set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)&#xA;      --show-secrets                 do not redact secret values in the output&#xA;      --strip-trailing-cr            strip trailing carriage return on input&#xA;      --suppress stringArray         allows suppression of the values listed in the diff output&#xA;  -q, --suppress-secrets             suppress secrets in the output&#xA;      --three-way-merge              use three-way-merge to compute patch and generate diff output&#xA;  -f, --values valueFiles            specify values in a YAML file (can specify multiple) (default [])&#xA;      --version string               specify the exact chart version to use. If this is not specified, the latest version is used&#xA;&#xA;Additional help topics:&#xA;  diff          &#xA;&#xA;Use &#34;diff [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands:&lt;/h2&gt; &#xA;&lt;h3&gt;upgrade:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ helm diff upgrade -h&#xA;Show a diff explaining what a helm upgrade would change.&#xA;&#xA;This fetches the currently deployed version of a release&#xA;and compares it to a chart plus values.&#xA;This can be used visualize what changes a helm upgrade will&#xA;perform.&#xA;&#xA;Usage:&#xA;  diff upgrade [flags] [RELEASE] [CHART]&#xA;&#xA;Examples:&#xA;  helm diff upgrade my-release stable/postgresql --values values.yaml&#xA;&#xA;  # Set HELM_DIFF_IGNORE_UNKNOWN_FLAGS=true to ignore unknown flags&#xA;  # It&#39;s useful when you&#39;re using `helm-diff` in a `helm upgrade` wrapper.&#xA;  # See https://github.com/databus23/helm-diff/issues/278 for more information.&#xA;  HELM_DIFF_IGNORE_UNKNOWN_FLAGS=true helm diff upgrade my-release stable/postgres --wait&#xA;&#xA;  # Set HELM_DIFF_USE_UPGRADE_DRY_RUN=true to&#xA;  # use `helm upgrade --dry-run` instead of `helm template` to render manifests from the chart.&#xA;  # See https://github.com/databus23/helm-diff/issues/253 for more information.&#xA;  HELM_DIFF_USE_UPGRADE_DRY_RUN=true helm diff upgarde my-release datadog/datadog&#xA;&#xA;  # Set HELM_DIFF_THREE_WAY_MERGE=true to&#xA;  # enable the three-way-merge on diff.&#xA;  # This is equivalent to specifying the --three-way-merge flag.&#xA;  # Read the flag usage below for more information on --three-way-merge.&#xA;  HELM_DIFF_THREE_WAY_MERGE=true helm diff upgarde my-release datadog/datadog&#xA;&#xA;Flags:&#xA;      --allow-unreleased             enables diffing of releases that are not yet deployed via Helm&#xA;  -a, --api-versions stringArray     Kubernetes api versions used for Capabilities.APIVersions&#xA;  -C, --context int                  output NUM lines of context around changes (default -1)&#xA;      --detailed-exitcode            return a non-zero exit code when there are changes&#xA;      --devel                        use development versions, too. Equivalent to version &#39;&amp;gt;0.0.0-0&#39;. If --version is set, this is ignored.&#xA;      --disable-openapi-validation   disables rendered templates validation against the Kubernetes OpenAPI Schema&#xA;      --disable-validation           disables rendered templates validation against the Kubernetes cluster you are currently pointing to. This is the same validation performed on an install&#xA;      --dry-run                      disables cluster access and show diff as if it was install. Implies --install, --reset-values, and --disable-validation&#xA;  -h, --help                         help for upgrade&#xA;      --include-tests                enable the diffing of the helm test hooks&#xA;      --install                      enables diffing of releases that are not yet deployed via Helm (equivalent to --allow-unreleased, added to match &#34;helm upgrade --install&#34; command&#xA;      --kube-version string          Kubernetes version used for Capabilities.KubeVersion&#xA;      --kubeconfig string            This flag is ignored, to allow passing of this top level flag to helm&#xA;      --no-hooks                     disable diffing of hooks&#xA;      --normalize-manifests          normalize manifests before running diff to exclude style differences from the output&#xA;      --output string                Possible values: diff, simple, json, template. When set to &#34;template&#34;, use the env var HELM_DIFF_TPL to specify the template. (default &#34;diff&#34;)&#xA;      --post-renderer string         the path to an executable to be used for post rendering. If it exists in $PATH, the binary will be used, otherwise it will try to look for the executable at the given path&#xA;      --repo string                  specify the chart repository url to locate the requested chart&#xA;      --reset-values                 reset the values to the ones built into the chart and merge in any new values&#xA;      --reuse-values                 reuse the last release&#39;s values and merge in any new values. If &#39;--reset-values&#39; is specified, this is ignored&#xA;      --set stringArray              set values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)&#xA;      --set-file stringArray         set values from respective files specified via the command line (can specify multiple or separate values with commas: key1=path1,key2=path2)&#xA;      --set-string stringArray       set STRING values on the command line (can specify multiple or separate values with commas: key1=val1,key2=val2)&#xA;      --show-secrets                 do not redact secret values in the output&#xA;      --strip-trailing-cr            strip trailing carriage return on input&#xA;      --suppress stringArray         allows suppression of the values listed in the diff output&#xA;  -q, --suppress-secrets             suppress secrets in the output&#xA;      --three-way-merge              use three-way-merge to compute patch and generate diff output&#xA;  -f, --values valueFiles            specify values in a YAML file (can specify multiple) (default [])&#xA;      --version string               specify the exact chart version to use. If this is not specified, the latest version is used&#xA;&#xA;Global Flags:&#xA;      --no-color   remove colors from the output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;release:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ helm diff release -h&#xA;&#xA;This command compares the manifests details of a different releases created from the same chart&#xA;&#xA;It can be used to compare the manifests of&#xA;&#xA; - release1 with release2&#xA;&#x9;$ helm diff release [flags] release1 release2&#xA;   Example:&#xA;&#x9;$ helm diff release my-prod my-stage&#xA;&#xA;Usage:&#xA;  diff release [flags] RELEASE release1 [release2]&#xA;&#xA;Flags:&#xA;  -C, --context int            output NUM lines of context around changes (default -1)&#xA;  -h, --help                   help for release&#xA;      --home string            location of your Helm config. Overrides $HELM_HOME (default &#34;/home/aananth/.helm&#34;)&#xA;      --include-tests          enable the diffing of the helm test hooks&#xA;      --strip-trailing-cr      strip trailing carriage return on input&#xA;      --suppress stringArray   allows suppression of the values listed in the diff output&#xA;  -q, --suppress-secrets       suppress secrets in the output&#xA;      --tls                    enable TLS for request&#xA;      --tls-ca-cert string     path to TLS CA certificate file (default &#34;$HELM_HOME/ca.pem&#34;)&#xA;      --tls-cert string        path to TLS certificate file (default &#34;$HELM_HOME/cert.pem&#34;)&#xA;      --tls-hostname string    the server name used to verify the hostname on the returned certificates from the server&#xA;      --tls-key string         path to TLS key file (default &#34;$HELM_HOME/key.pem&#34;)&#xA;      --tls-verify             enable TLS for request and verify remote&#xA;&#xA;Global Flags:&#xA;      --no-color   remove colors from the output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;revision:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ helm diff revision -h&#xA;&#xA;This command compares the manifests details of a named release.&#xA;&#xA;It can be used to compare the manifests of &#xA; &#xA; - latest REVISION with specified REVISION&#xA;&#x9;$ helm diff revision [flags] RELEASE REVISION1&#xA;   Example: &#xA;&#x9;$ helm diff revision my-release 2&#xA;&#xA; - REVISION1 with REVISION2&#xA;&#x9;$ helm diff revision [flags] RELEASE REVISION1 REVISION2&#xA;   Example: &#xA;&#x9;$ helm diff revision my-release 2 3&#xA;&#xA;Usage:&#xA;  diff revision [flags] RELEASE REVISION1 [REVISION2]&#xA;&#xA;Flags:&#xA;  -h, --help                   help for revision&#xA;      --strip-trailing-cr      strip trailing carriage return on input&#xA;      --suppress stringArray   allows suppression of the values listed in the diff output&#xA;  -q, --suppress-secrets       suppress secrets in the output&#xA;&#xA;Global Flags:&#xA;      --no-color   remove colors from the output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rollback:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ helm diff rollback -h&#xA;&#xA;This command compares the latest manifest details of a named release &#xA;with specific revision values to rollback.&#xA;&#xA;It forecasts/visualizes changes, that a helm rollback could perform.&#xA;&#xA;Usage:&#xA;  diff rollback [flags] [RELEASE] [REVISION]&#xA;&#xA;Examples:&#xA;  helm diff rollback my-release 2&#xA;&#xA;Flags:&#xA;  -h, --help                   help for rollback&#xA;      --strip-trailing-cr      strip trailing carriage return on input&#xA;      --suppress stringArray   allows suppression of the values listed in the diff output&#xA;  -q, --suppress-secrets       suppress secrets in the output&#xA;&#xA;Global Flags:&#xA;      --no-color   remove colors from the output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository into your &lt;code&gt;$GOPATH&lt;/code&gt; and then build it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir -p $GOPATH/src/github.com/databus23/&#xA;$ cd $GOPATH/src/github.com/databus23/&#xA;$ git clone https://github.com/databus23/helm-diff.git&#xA;$ cd helm-diff&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will install this plugin into your &lt;code&gt;$HELM_HOME/plugins&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need to have &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; installed. Make sure to set &lt;code&gt;$GOPATH&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;Automated tests are implemented with &lt;a href=&#34;https://golang.org/pkg/testing/&#34;&gt;&lt;em&gt;testing&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -v ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Release&lt;/h2&gt; &#xA;&lt;p&gt;Bump &lt;code&gt;version&lt;/code&gt; in &lt;code&gt;plugin.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ code plugin.yaml&#xA;$ git commit -m &#39;Bump helm-diff version to 3.x.y&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make docker-run-release&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>