<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-19T01:36:42Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>deckarep/golang-set</title>
    <updated>2023-03-19T01:36:42Z</updated>
    <id>tag:github.com,2023-03-19:/deckarep/golang-set</id>
    <link href="https://github.com/deckarep/golang-set" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple generic set type for the Go language. Trusted by Docker, 1Password, Ethereum and Hashicorp.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/deckarep/golang-set/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;example workflow&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/deckarep/golang-set/v2&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/deckarep/golang-set/v2&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/deckarep/golang-set/v2&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/deckarep/golang-set/v2?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;golang-set&lt;/h1&gt; &#xA;&lt;p&gt;The missing &lt;code&gt;generic&lt;/code&gt; set collection for the Go language. Until Go has sets built-in...use this.&lt;/p&gt; &#xA;&lt;h2&gt;Update 3/5/2023&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Packaged version: &lt;code&gt;2.2.0&lt;/code&gt; release includes a refactor to minimize pointer indirection, better method documentation standards and a few constructor convenience methods to increase ergonomics when appending items &lt;code&gt;Append&lt;/code&gt; or creating a new set from an exist &lt;code&gt;Map&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;supports &lt;code&gt;new generic&lt;/code&gt; syntax&lt;/li&gt; &#xA; &lt;li&gt;Go &lt;code&gt;1.18.0&lt;/code&gt; or higher&lt;/li&gt; &#xA; &lt;li&gt;Workflow tested on Go &lt;code&gt;1.20&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/deckarep/golang-set/main/new_improved.jpeg&#34; alt=&#34;With Generics&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Coming from Python one of the things I miss is the superbly wonderful set collection. This is my attempt to mimic the primary features of the set collection from Python. You can of course argue that there is no need for a set in Go, otherwise the creators would have added one to the standard library. To those I say simply ignore this repository and carry-on and to the rest that find this useful please contribute in helping me make it better by contributing with suggestions or PRs.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;NEW&lt;/em&gt; &lt;a href=&#34;https://go.dev/doc/tutorial/generics&#34;&gt;Generics&lt;/a&gt; based implementation (requires &lt;a href=&#34;https://go.dev/blog/go1.18beta1&#34;&gt;Go 1.18&lt;/a&gt; or higher)&lt;/li&gt; &#xA; &lt;li&gt;One common &lt;em&gt;interface&lt;/em&gt; to both implementations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;a &lt;strong&gt;non threadsafe&lt;/strong&gt; implementation favoring &lt;em&gt;performance&lt;/em&gt;&lt;/li&gt; &#xA;   &lt;li&gt;a &lt;strong&gt;threadsafe&lt;/strong&gt; implementation favoring &lt;em&gt;concurrent&lt;/em&gt; use&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Feature complete set implementation modeled after &lt;a href=&#34;https://docs.python.org/3/library/stdtypes.html#set&#34;&gt;Python&#39;s set implementation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Exhaustive unit-test and benchmark suite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Trusted by&lt;/h2&gt; &#xA;&lt;p&gt;This package is trusted by many companies and thousands of open-source packages. Here are just a few sample users of this package.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Notable projects/companies using this package &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Ethereum&lt;/li&gt; &#xA;   &lt;li&gt;Docker&lt;/li&gt; &#xA;   &lt;li&gt;1Password&lt;/li&gt; &#xA;   &lt;li&gt;Hashicorp&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#deckarep/golang-set&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=deckarep/golang-set&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The code below demonstrates how a Set collection can better manage data and actually minimize boilerplate and needless loops in code. This package now fully supports &lt;em&gt;generic&lt;/em&gt; syntax so you are now able to instantiate a collection for any &lt;a href=&#34;https://flaviocopes.com/golang-comparing-values/&#34;&gt;comparable&lt;/a&gt; type object.&lt;/p&gt; &#xA;&lt;p&gt;What is considered comparable in Go?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Booleans&lt;/code&gt;, &lt;code&gt;integers&lt;/code&gt;, &lt;code&gt;strings&lt;/code&gt;, &lt;code&gt;floats&lt;/code&gt; or basically primitive types.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pointers&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Arrays&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Structs&lt;/code&gt; if &lt;em&gt;all of their fields&lt;/em&gt; are also comparable independently&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using this library is as simple as creating either a threadsafe or non-threadsafe set and providing a &lt;code&gt;comparable&lt;/code&gt; type for instantiation of the collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Syntax example, doesn&#39;t compile.&#xA;mySet := mapset.NewSet[T]() // where T is some concrete comparable type.&#xA;&#xA;// Therefore this code creates an int set&#xA;mySet := mapset.NewSet[int]()&#xA;&#xA;// Or perhaps you want a string set&#xA;mySet := mapset.NewSet[string]()&#xA;&#xA;type myStruct {&#xA;  name string&#xA;  age uint8&#xA;}&#xA;&#xA;// Alternatively a set of structs&#xA;mySet := mapset.NewSet[myStruct]()&#xA;&#xA;// Lastly a set that can hold anything using the any or empty interface keyword: interface{}. This is effectively removes type safety.&#xA;mySet := mapset.NewSet[any]()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Comprehensive Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;  mapset &#34;github.com/deckarep/golang-set/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  // Create a string-based set of required classes.&#xA;  required := mapset.NewSet[string]()&#xA;  required.Add(&#34;cooking&#34;)&#xA;  required.Add(&#34;english&#34;)&#xA;  required.Add(&#34;math&#34;)&#xA;  required.Add(&#34;biology&#34;)&#xA;&#xA;  // Create a string-based set of science classes.&#xA;  sciences := mapset.NewSet[string]()&#xA;  sciences.Add(&#34;biology&#34;)&#xA;  sciences.Add(&#34;chemistry&#34;)&#xA;  &#xA;  // Create a string-based set of electives.&#xA;  electives := mapset.NewSet[string]()&#xA;  electives.Add(&#34;welding&#34;)&#xA;  electives.Add(&#34;music&#34;)&#xA;  electives.Add(&#34;automotive&#34;)&#xA;&#xA;  // Create a string-based set of bonus programming classes.&#xA;  bonus := mapset.NewSet[string]()&#xA;  bonus.Add(&#34;beginner go&#34;)&#xA;  bonus.Add(&#34;python for dummies&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a set of all unique classes. Sets will &lt;em&gt;automatically&lt;/em&gt; deduplicate the same data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  all := required&#xA;    .Union(sciences)&#xA;    .Union(electives)&#xA;    .Union(bonus)&#xA;  &#xA;  fmt.Println(all)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Set{cooking, english, math, chemistry, welding, biology, music, automotive, beginner go, python for dummies}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Is cooking considered a science class?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;result := sciences.Contains(&#34;cooking&#34;)&#xA;fmt.Println(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-false&#34;&gt;false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show me all classes that are not science classes, since I don&#39;t enjoy science.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;notScience := all.Difference(sciences)&#xA;fmt.Println(notScience)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Set{ music, automotive, beginner go, python for dummies, cooking, english, math, welding }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which science classes are also required classes?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;reqScience := sciences.Intersect(required)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Set{biology}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How many bonus classes do you offer?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(bonus.Cardinality())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thanks for visiting!&lt;/p&gt; &#xA;&lt;p&gt;-deckarep&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mgechev/revive</title>
    <updated>2023-03-19T01:36:42Z</updated>
    <id>tag:github.com,2023-03-19:/mgechev/revive</id>
    <link href="https://github.com/mgechev/revive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ”¥ ~6x faster, stricter, configurable, extensible, and beautiful drop-in replacement for golint&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/mgechev/revive&#34;&gt;&lt;img src=&#34;https://travis-ci.org/mgechev/revive.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;revive&lt;/h1&gt; &#xA;&lt;p&gt;Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. &lt;strong&gt;&lt;code&gt;Revive&lt;/code&gt; provides a framework for development of custom rules, and lets you define a strict preset for enhancing your development &amp;amp; code review processes&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mgechev/revive/master/assets/logo.png&#34; alt=&#34;&#34; width=&#34;300&#34;&gt; &lt;br&gt; Logo by &lt;a href=&#34;https://github.com/hawkgs&#34;&gt;Georgi Serev&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s how &lt;code&gt;revive&lt;/code&gt; is different from &lt;code&gt;golint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows to enable or disable rules using a configuration file.&lt;/li&gt; &#xA; &lt;li&gt;Allows to configure the linting rules with a TOML file.&lt;/li&gt; &#xA; &lt;li&gt;2x faster running the same rules as golint.&lt;/li&gt; &#xA; &lt;li&gt;Provides functionality for disabling a specific rule or the entire linter for a file or a range of lines. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;golint&lt;/code&gt; allows this only for generated files.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional type checking. Most rules in golint do not require type checking. If you disable them in the config file, revive will run over 6x faster than golint.&lt;/li&gt; &#xA; &lt;li&gt;Provides multiple formatters which let us customize the output.&lt;/li&gt; &#xA; &lt;li&gt;Allows to customize the return code for the entire linter or based on the failure of only some rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Everyone can extend it easily with custom rules or formatters.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Revive&lt;/code&gt; provides more rules compared to &lt;code&gt;golint&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who uses Revive&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pingcap/tidb&#34;&gt;&lt;code&gt;tidb&lt;/code&gt;&lt;/a&gt; - TiDB is a distributed HTAP database compatible with the MySQL protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grafana/grafana&#34;&gt;&lt;code&gt;grafana&lt;/code&gt;&lt;/a&gt; - The tool for beautiful monitoring and metric analytics &amp;amp; dashboards for Graphite, InfluxDB &amp;amp; Prometheus &amp;amp; More&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/etcd-io/etcd&#34;&gt;&lt;code&gt;etcd&lt;/code&gt;&lt;/a&gt; - Distributed reliable key-value store for the most critical data of a distributed system&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber/cadence&#34;&gt;&lt;code&gt;cadence&lt;/code&gt;&lt;/a&gt; - Cadence is a distributed, scalable, durable, and highly available orchestration engine by Uber to execute asynchronous long-running business logic in a scalable and resilient way&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MontFerret/ferret&#34;&gt;&lt;code&gt;ferret&lt;/code&gt;&lt;/a&gt; - Declarative web scraping&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gopasspw/gopass&#34;&gt;&lt;code&gt;gopass&lt;/code&gt;&lt;/a&gt; - The slightly more awesome standard unix password manager for teams&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-gitea/gitea&#34;&gt;&lt;code&gt;gitea&lt;/code&gt;&lt;/a&gt; - Git with a cup of tea, painless self-hosted git service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/360EntSecGroup-Skylar/excelize&#34;&gt;&lt;code&gt;excelize&lt;/code&gt;&lt;/a&gt; - Go library for reading and writing Microsoft Excelâ„¢ (XLSX) files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xuri/aurora&#34;&gt;&lt;code&gt;aurora&lt;/code&gt;&lt;/a&gt; - aurora is a web-based Beanstalk queue server console written in Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/XiaoMi/soar&#34;&gt;&lt;code&gt;soar&lt;/code&gt;&lt;/a&gt; - SQL Optimizer And Rewriter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyroscope-io/pyroscope&#34;&gt;&lt;code&gt;pyroscope&lt;/code&gt;&lt;/a&gt; - Continuous profiling platform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/appleboy/gorush&#34;&gt;&lt;code&gt;gorush&lt;/code&gt;&lt;/a&gt; - A push notification server written in Go (Golang).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moncho/dry&#34;&gt;&lt;code&gt;dry&lt;/code&gt;&lt;/a&gt; - dry - A Docker manager for the terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chenjiandongx/go-echarts&#34;&gt;&lt;code&gt;go-echarts&lt;/code&gt;&lt;/a&gt; - The adorable charts library for Golang&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reviewdog/reviewdog&#34;&gt;&lt;code&gt;reviewdog&lt;/code&gt;&lt;/a&gt; - Automated code review tool integrated with any code analysis tools regardless of programming language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rudderlabs/rudder-server&#34;&gt;&lt;code&gt;rudder-server&lt;/code&gt;&lt;/a&gt; - Privacy and Security focused Segment-alternative, in Golang and React.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pa-m/sklearn&#34;&gt;&lt;code&gt;sklearn&lt;/code&gt;&lt;/a&gt; - A partial port of scikit-learn written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pseudomuto/protoc-gen-doc&#34;&gt;&lt;code&gt;protoc-gen-doc&lt;/code&gt;&lt;/a&gt; - Documentation generator plugin for Google Protocol Buffers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/llir/llvm&#34;&gt;&lt;code&gt;llvm&lt;/code&gt;&lt;/a&gt; - Library for interacting with LLVM IR in pure Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SAP/jenkins-library&#34;&gt;&lt;code&gt;jenkins-library&lt;/code&gt;&lt;/a&gt; - Jenkins shared library for Continuous Delivery pipelines by SAP.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tikv/pd&#34;&gt;&lt;code&gt;pd&lt;/code&gt;&lt;/a&gt; - Placement driver for TiKV.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shellhub-io/shellhub&#34;&gt;&lt;code&gt;shellhub&lt;/code&gt;&lt;/a&gt; - ShellHub enables teams to easily access any Linux device behind firewall and NAT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheThingsNetwork/lorawan-stack&#34;&gt;&lt;code&gt;lorawan-stack&lt;/code&gt;&lt;/a&gt; - The Things Network Stack for LoRaWAN V3&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/appleboy/gin-jwt&#34;&gt;&lt;code&gt;gin-jwt&lt;/code&gt;&lt;/a&gt; - This is a JWT middleware for Gin framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/appleboy/gofight&#34;&gt;&lt;code&gt;gofight&lt;/code&gt;&lt;/a&gt; - Testing API Handler written in Golang.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Clivern/Beaver&#34;&gt;&lt;code&gt;Beaver&lt;/code&gt;&lt;/a&gt; - A Real Time Messaging Server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-ggz/ggz&#34;&gt;&lt;code&gt;ggz&lt;/code&gt;&lt;/a&gt; - An URL shortener service written in Golang&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codeac.io?ref=revive&#34;&gt;&lt;code&gt;Codeac.io&lt;/code&gt;&lt;/a&gt; - Automated code review service integrates with GitHub, Bitbucket and GitLab (even self-hosted) and helps you fight technical debt.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/incubator-devlake&#34;&gt;&lt;code&gt;DevLake&lt;/code&gt;&lt;/a&gt; - Apache DevLake is an open-source dev data platform to ingest, analyze, and visualize the fragmented data from DevOps toolsï¼Œwhich can distill insights to improve engineering productivity.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Open a PR to add your project&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mgechev/revive/master/assets/demo.svg?sanitize=true&#34; alt=&#34;&#34; width=&#34;700&#34;&gt; &lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#revive&#34;&gt;revive&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#bazel&#34;&gt;Bazel&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#text-editors&#34;&gt;Text Editors&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#github-actions&#34;&gt;GitHub Actions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#continuous-integration&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#linter-aggregators&#34;&gt;Linter Aggregators&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#golangci-lint&#34;&gt;golangci-lint&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#command-line-flags&#34;&gt;Command Line Flags&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#sample-invocations&#34;&gt;Sample Invocations&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#comment-directives&#34;&gt;Comment Directives&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#default-configuration&#34;&gt;Default Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#custom-configuration&#34;&gt;Custom Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#recommended-configuration&#34;&gt;Recommended Configuration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#available-rules&#34;&gt;Available Rules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#configurable-rules&#34;&gt;Configurable rules&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#var-naming&#34;&gt;&lt;code&gt;var-naming&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#available-formatters&#34;&gt;Available Formatters&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#friendly&#34;&gt;Friendly&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#stylish&#34;&gt;Stylish&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#default&#34;&gt;Default&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#plain&#34;&gt;Plain&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#unix&#34;&gt;Unix&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#sarif&#34;&gt;SARIF&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#extensibility&#34;&gt;Extensibility&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#writing-a-custom-rule&#34;&gt;Custom Rule&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#custom-formatter&#34;&gt;Custom Formatter&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#speed-comparison&#34;&gt;Speed Comparison&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#golint&#34;&gt;golint&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#revive&#34;&gt;revive&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#overriding-colorization-detection&#34;&gt;Overriding colorization detection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/mgechev/revive@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get a released executable from the &lt;a href=&#34;https://github.com/mgechev/revive/releases&#34;&gt;Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;You can install the main branch (including the last commit) with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/mgechev/revive@master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Since the default behavior of &lt;code&gt;revive&lt;/code&gt; is compatible with &lt;code&gt;golint&lt;/code&gt;, without providing any additional flags, the only difference you&#39;d notice is faster execution.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;revive&lt;/code&gt; supports a &lt;code&gt;-config&lt;/code&gt; flag whose value should correspond to a TOML file describing which rules to use for &lt;code&gt;revive&lt;/code&gt;&#39;s linting. If not provided, &lt;code&gt;revive&lt;/code&gt; will try to use a global config file (assumed to be located at &lt;code&gt;$HOME/revive.toml&lt;/code&gt;). Otherwise, if no configuration TOML file is found then &lt;code&gt;revive&lt;/code&gt; uses a built-in set of default linting rules.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;A volume needs to be mounted to share the current repository with the container.&lt;br&gt; Please refer to the &lt;a href=&#34;https://docs.docker.com/storage/bind-mounts/&#34;&gt;bind mounts Docker documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -v &#34;$(pwd)&#34;:/var/&amp;lt;repository&amp;gt; ghcr.io/mgechev/revive:v1.1.2-next -config /var/&amp;lt;repository&amp;gt;/revive.toml -formatter stylish ./var/kidle/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt; is for the volume&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/mgechev/revive:v1.1.2-next &lt;/code&gt; is the image name and its version corresponding to &lt;code&gt;revive&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;The provided flags are the same as the binary usage.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use revive with Bazel, take a look at the &lt;a href=&#34;https://github.com/atlassian/bazel-tools/tree/master/gorevive&#34;&gt;rules&lt;/a&gt; that Atlassian maintains.&lt;/p&gt; &#xA;&lt;h3&gt;Text Editors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for VSCode in &lt;a href=&#34;https://github.com/Microsoft/vscode-go/pull/1699&#34;&gt;vscode-go&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for GoLand via &lt;a href=&#34;https://dev.to/s0xzwasd/configure-revive-go-linter-in-goland-2ggl&#34;&gt;File Watchers&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for Atom via &lt;a href=&#34;https://github.com/morphy2k/linter-revive&#34;&gt;linter-revive&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for vim via &lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;dense-analysis/ale&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:ale_linters = {&#xA;\   &#39;go&#39;: [&#39;revive&#39;],&#xA;\}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for Neovim via &lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls.nvim&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;null-ls&#34;).setup({&#xA;    sources = {&#xA;        require(&#34;null-ls&#34;).builtins.diagnostics.revive&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GitHub Actions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marketplace/actions/revive-action&#34;&gt;Revive Action&lt;/a&gt; with annotation support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Continuous Integration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.codeac.io?ref=revive&#34;&gt;Codeac.io&lt;/a&gt; - Automated code review service integrates with GitHub, Bitbucket and GitLab (even self-hosted) and helps you fight technical debt. Check your &lt;a href=&#34;https://www.codeac.io/documentation/pull-requests.html?ref=revive&#34;&gt;pull-requests&lt;/a&gt; with &lt;a href=&#34;https://www.codeac.io/documentation/revive-configuration.html?ref=revive&#34;&gt;revive&lt;/a&gt; automatically. (free for open-source projects)&lt;/p&gt; &#xA;&lt;h3&gt;Linter aggregators&lt;/h3&gt; &#xA;&lt;h4&gt;golangci-lint&lt;/h4&gt; &#xA;&lt;p&gt;To enable &lt;code&gt;revive&lt;/code&gt; in &lt;code&gt;golangci-lint&lt;/code&gt; you need to add &lt;code&gt;revive&lt;/code&gt; to the list of enabled linters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# golangci-lint configuration file&#xA;linters:&#xA;   enable:&#xA;     - revive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;code&gt;revive&lt;/code&gt; can be configured by adding an entry to the &lt;code&gt;linters-settings&lt;/code&gt; section of the configuration, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# golangci-lint configuration file&#xA;linters-settings:&#xA;  revive:&#xA;    ignore-generated-header: true&#xA;    severity: warning&#xA;    rules:&#xA;      - name: atomic&#xA;      - name: line-length-limit&#xA;        severity: error&#xA;        arguments: [80]&#xA;      - name: unhandled-error&#xA;        arguments : [&#34;fmt.Printf&#34;, &#34;myFunction&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above configuration enables three rules of &lt;code&gt;revive&lt;/code&gt;: &lt;em&gt;atomic&lt;/em&gt;, &lt;em&gt;line-length-limit&lt;/em&gt; and &lt;em&gt;unhandled-error&lt;/em&gt; and pass some arguments to the last two. The &lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#configuration&#34;&gt;Configuration&lt;/a&gt; section of this document provides details on how to configure &lt;code&gt;revive&lt;/code&gt;. Note that while &lt;code&gt;revive&lt;/code&gt; configuration is in TOML, that of &lt;code&gt;golangci-lint&lt;/code&gt; is in YAML.&lt;/p&gt; &#xA;&lt;p&gt;Please notice that if no particular configuration is provided, &lt;code&gt;revive&lt;/code&gt; will behave as &lt;code&gt;go-lint&lt;/code&gt; does, i.e. all &lt;code&gt;go-lint&lt;/code&gt; rules are enabled (the &lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/#available-rules&#34;&gt;Available Rules table&lt;/a&gt; details what are the &lt;code&gt;go-lint&lt;/code&gt; rules). When a configuration is provided, only rules in the configuration are enabled.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line Flags&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;revive&lt;/code&gt; accepts the following command line parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-config [PATH]&lt;/code&gt; - path to config file in TOML format, defaults to &lt;code&gt;$HOME/revive.toml&lt;/code&gt; if present.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-exclude [PATTERN]&lt;/code&gt; - pattern for files/directories/packages to be excluded for linting. You can specify the files you want to exclude for linting either as package name (i.e. &lt;code&gt;github.com/mgechev/revive&lt;/code&gt;), list them as individual files (i.e. &lt;code&gt;file.go&lt;/code&gt;), directories (i.e. &lt;code&gt;./foo/...&lt;/code&gt;), or any combination of the three.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-formatter [NAME]&lt;/code&gt; - formatter to be used for the output. The currently available formatters are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;default&lt;/code&gt; - will output the failures the same way that &lt;code&gt;golint&lt;/code&gt; does.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;json&lt;/code&gt; - outputs the failures in JSON format.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ndjson&lt;/code&gt; - outputs the failures as stream in newline delimited JSON (NDJSON) format.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;friendly&lt;/code&gt; - outputs the failures when found. Shows summary of all the failures.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;stylish&lt;/code&gt; - formats the failures in a table. Keep in mind that it doesn&#39;t stream the output so it might be perceived as slower compared to others.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;checkstyle&lt;/code&gt; - outputs the failures in XML format compatible with that of Java&#39;s &lt;a href=&#34;https://checkstyle.org/&#34;&gt;Checkstyle&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-max_open_files&lt;/code&gt; - maximum number of open files at the same time. Defaults to unlimited.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-set_exit_status&lt;/code&gt; - set exit status to 1 if any issues are found, overwrites &lt;code&gt;errorCode&lt;/code&gt; and &lt;code&gt;warningCode&lt;/code&gt; in config.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-version&lt;/code&gt; - get revive version.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sample Invocations&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;revive -config revive.toml -exclude file1.go -exclude file2.go -formatter friendly github.com/mgechev/revive package/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The command above will use the configuration from &lt;code&gt;revive.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;revive&lt;/code&gt; will ignore &lt;code&gt;file1.go&lt;/code&gt; and &lt;code&gt;file2.go&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The output will be formatted with the &lt;code&gt;friendly&lt;/code&gt; formatter&lt;/li&gt; &#xA; &lt;li&gt;The linter will analyze &lt;code&gt;github.com/mgechev/revive&lt;/code&gt; and the files in &lt;code&gt;package&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Comment Directives&lt;/h3&gt; &#xA;&lt;p&gt;Using comments, you can disable the linter for the entire file or only range of lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//revive:disable&#xA;&#xA;func Public() {}&#xA;//revive:enable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The snippet above, will disable &lt;code&gt;revive&lt;/code&gt; between the &lt;code&gt;revive:disable&lt;/code&gt; and &lt;code&gt;revive:enable&lt;/code&gt; comments. If you skip &lt;code&gt;revive:enable&lt;/code&gt;, the linter will be disabled for the rest of the file.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;revive:disable-next-line&lt;/code&gt; and &lt;code&gt;revive:disable-line&lt;/code&gt; you can disable &lt;code&gt;revive&lt;/code&gt; on a particular code line.&lt;/p&gt; &#xA;&lt;p&gt;You can do the same on a rule level. In case you want to disable only a particular rule, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//revive:disable:unexported-return&#xA;func Public() private {&#xA;  return private&#xA;}&#xA;//revive:enable:unexported-return&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, &lt;code&gt;revive&lt;/code&gt; will not warn you for that you&#39;re returning an object of an unexported type, from an exported function.&lt;/p&gt; &#xA;&lt;p&gt;You can document why you disable the linter by adding a trailing text in the directive, for example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//revive:disable Until the code is stable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//revive:disable:cyclomatic High complexity score but easy to understand&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also configure &lt;code&gt;revive&lt;/code&gt; to enforce documenting linter disabling directives by adding&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[directive.specify-disable-reason]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the configuration. You can set the severity (defaults to &lt;em&gt;warning&lt;/em&gt;) of the violation of this directive&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[directive.specify-disable-reason]&#xA;    severity = &#34;error&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;revive&lt;/code&gt; can be configured with a TOML file. Here&#39;s a sample configuration with explanation for the individual properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# When set to false, ignores files with &#34;GENERATED&#34; header, similar to golint&#xA;ignoreGeneratedHeader = true&#xA;&#xA;# Sets the default severity to &#34;warning&#34;&#xA;severity = &#34;warning&#34;&#xA;&#xA;# Sets the default failure confidence. This means that linting errors&#xA;# with less than 0.8 confidence will be ignored.&#xA;confidence = 0.8&#xA;&#xA;# Sets the error code for failures with severity &#34;error&#34;&#xA;errorCode = 0&#xA;&#xA;# Sets the error code for failures with severity &#34;warning&#34;&#xA;warningCode = 0&#xA;&#xA;# Configuration of the `cyclomatic` rule. Here we specify that&#xA;# the rule should fail if it detects code with higher complexity than 10.&#xA;[rule.cyclomatic]&#xA;  arguments = [10]&#xA;&#xA;# Sets the severity of the `package-comments` rule to &#34;error&#34;.&#xA;[rule.package-comments]&#xA;  severity = &#34;error&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default &lt;code&gt;revive&lt;/code&gt; will enable only the linting rules that are named in the configuration file. For example, the previous configuration file makes &lt;code&gt;revive&lt;/code&gt; to enable only &lt;em&gt;cyclomatic&lt;/em&gt; and &lt;em&gt;package-comments&lt;/em&gt; linting rules.&lt;/p&gt; &#xA;&lt;p&gt;To enable all available rules you need to add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;enableAllRules = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable all available rules no matter of what rules are named in the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;To disable a rule, you simply mark it as disabled in the configuration. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[rule.line-length-limit]&#xA;    Disabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When enabling all rules you still need/can provide specific configurations for rules. The following files is an example configuration were all rules are enabled, with exception to those that are explicitly disabled, and some rules are configured with particular arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;severity = &#34;warning&#34;&#xA;confidence = 0.8&#xA;errorCode = 0&#xA;warningCode = 0&#xA;&#xA;# Enable all available rules&#xA;enableAllRules = true&#xA;&#xA;# Disabled rules&#xA;[rule.blank-imports]&#xA;    Disabled = true&#xA;[rule.file-header]&#xA;    Disabled = true&#xA;[rule.max-public-structs]&#xA;    Disabled = true&#xA;[rule.line-length-limit]&#xA;    Disabled = true&#xA;[rule.function-length]&#xA;    Disabled = true&#xA;[rule.banned-characters]&#xA;    Disabled = true&#xA;&#xA;# Rule tuning&#xA;[rule.argument-limit]&#xA;    Arguments = [5]&#xA;[rule.cyclomatic]&#xA;    Arguments = [10]&#xA;[rule.cognitive-complexity]&#xA;    Arguments = [7]&#xA;[rule.function-result-limit]&#xA;    Arguments = [3]&#xA;[rule.error-strings]&#xA;    Arguments = [&#34;mypackage.Error&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The default configuration of &lt;code&gt;revive&lt;/code&gt; can be found at &lt;code&gt;defaults.toml&lt;/code&gt;. This will enable all rules available in &lt;code&gt;golint&lt;/code&gt; and use their default configuration (i.e. the way they are hardcoded in &lt;code&gt;golint&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;revive -config defaults.toml github.com/mgechev/revive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will use the configuration file &lt;code&gt;defaults.toml&lt;/code&gt;, the &lt;code&gt;default&lt;/code&gt; formatter, and will run linting over the &lt;code&gt;github.com/mgechev/revive&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;revive -config config.toml -formatter friendly github.com/mgechev/revive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will use &lt;code&gt;config.toml&lt;/code&gt;, the &lt;code&gt;friendly&lt;/code&gt; formatter, and will run linting over the &lt;code&gt;github.com/mgechev/revive&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;h3&gt;Recommended Configuration&lt;/h3&gt; &#xA;&lt;p&gt;The following snippet contains the recommended &lt;code&gt;revive&lt;/code&gt; configuration that you can use in your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;ignoreGeneratedHeader = false&#xA;severity = &#34;warning&#34;&#xA;confidence = 0.8&#xA;errorCode = 0&#xA;warningCode = 0&#xA;&#xA;[rule.blank-imports]&#xA;[rule.context-as-argument]&#xA;[rule.context-keys-type]&#xA;[rule.dot-imports]&#xA;[rule.error-return]&#xA;[rule.error-strings]&#xA;[rule.error-naming]&#xA;[rule.exported]&#xA;[rule.if-return]&#xA;[rule.increment-decrement]&#xA;[rule.var-naming]&#xA;[rule.var-declaration]&#xA;[rule.package-comments]&#xA;[rule.range]&#xA;[rule.receiver-naming]&#xA;[rule.time-naming]&#xA;[rule.unexported-return]&#xA;[rule.indent-error-flow]&#xA;[rule.errorf]&#xA;[rule.empty-block]&#xA;[rule.superfluous-else]&#xA;[rule.unused-parameter]&#xA;[rule.unreachable-code]&#xA;[rule.redefines-builtin-id]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available Rules&lt;/h2&gt; &#xA;&lt;p&gt;List of all available rules. The rules ported from &lt;code&gt;golint&lt;/code&gt; are left unchanged and indicated in the &lt;code&gt;golint&lt;/code&gt; column.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Config&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;golint&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Typed&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#context-key-types&#34;&gt;&lt;code&gt;context-keys-type&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallows the usage of basic types in &lt;code&gt;context.WithValue&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#time-equal&#34;&gt;&lt;code&gt;time-equal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Suggests to use &lt;code&gt;time.Time.Equal&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; for equality check time.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#time-naming&#34;&gt;&lt;code&gt;time-naming&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Conventions around the naming of time variables.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#var-declaration&#34;&gt;&lt;code&gt;var-declaration&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Reduces redundancies around variable declaration.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#unexported-return&#34;&gt;&lt;code&gt;unexported-return&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns when a public return is from unexported type.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#errorf&#34;&gt;&lt;code&gt;errorf&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Should replace &lt;code&gt;errors.New(fmt.Sprintf())&lt;/code&gt; with &lt;code&gt;fmt.Errorf()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#blank-imports&#34;&gt;&lt;code&gt;blank-imports&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallows blank imports&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#context-as-argument&#34;&gt;&lt;code&gt;context-as-argument&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;context.Context&lt;/code&gt; should be the first argument of a function.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#dot-imports&#34;&gt;&lt;code&gt;dot-imports&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbids &lt;code&gt;.&lt;/code&gt; imports.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#error-return&#34;&gt;&lt;code&gt;error-return&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The error return parameter should be last.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#error-strings&#34;&gt;&lt;code&gt;error-strings&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;[]string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Conventions around error strings.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#error-naming&#34;&gt;&lt;code&gt;error-naming&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Naming of error variables.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#exported&#34;&gt;&lt;code&gt;exported&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;[]string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Naming and commenting conventions on exported symbols.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#if-return&#34;&gt;&lt;code&gt;if-return&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Redundant if when returning an error.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#increment-decrement&#34;&gt;&lt;code&gt;increment-decrement&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;i++&lt;/code&gt; and &lt;code&gt;i--&lt;/code&gt; instead of &lt;code&gt;i += 1&lt;/code&gt; and &lt;code&gt;i -= 1&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#var-naming&#34;&gt;&lt;code&gt;var-naming&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;whitelist &amp;amp; blacklist of initialisms&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Naming rules.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#package-comments&#34;&gt;&lt;code&gt;package-comments&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Package commenting conventions.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#range&#34;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prevents redundant variables when iterating over a collection.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#receiver-naming&#34;&gt;&lt;code&gt;receiver-naming&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Conventions around the naming of receivers.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#indent-error-flow&#34;&gt;&lt;code&gt;indent-error-flow&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prevents redundant else statements.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#argument-limit&#34;&gt;&lt;code&gt;argument-limit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specifies the maximum number of arguments a function can receive&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#cyclomatic&#34;&gt;&lt;code&gt;cyclomatic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets restriction for maximum Cyclomatic complexity.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#max-public-structs&#34;&gt;&lt;code&gt;max-public-structs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The maximum number of public structs in a file.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#file-header&#34;&gt;&lt;code&gt;file-header&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Header which each file should have.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#empty-block&#34;&gt;&lt;code&gt;empty-block&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on empty code blocks&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#superfluous-else&#34;&gt;&lt;code&gt;superfluous-else&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prevents redundant else statements (extends &lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#indent-error-flow&#34;&gt;&lt;code&gt;indent-error-flow&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#confusing-naming&#34;&gt;&lt;code&gt;confusing-naming&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on methods with names that differ only by capitalization&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#get-return&#34;&gt;&lt;code&gt;get-return&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on getters that do not yield any result&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#modifies-parameter&#34;&gt;&lt;code&gt;modifies-parameter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on assignments to function parameters&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#confusing-results&#34;&gt;&lt;code&gt;confusing-results&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Suggests to name potentially confusing function results&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#deep-exit&#34;&gt;&lt;code&gt;deep-exit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Looks for program exits in funcs other than &lt;code&gt;main()&lt;/code&gt; or &lt;code&gt;init()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#unused-parameter&#34;&gt;&lt;code&gt;unused-parameter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Suggests to rename or remove unused function parameters&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#unreachable-code&#34;&gt;&lt;code&gt;unreachable-code&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on unreachable code&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#add-constant&#34;&gt;&lt;code&gt;add-constant&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;map&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Suggests using constant for magic numbers and string literals&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#flag-parameter&#34;&gt;&lt;code&gt;flag-parameter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on boolean parameters that create a control coupling&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#unnecessary-stmt&#34;&gt;&lt;code&gt;unnecessary-stmt&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Suggests removing or simplifying unnecessary statements&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#struct-tag&#34;&gt;&lt;code&gt;struct-tag&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;[]string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Checks common struct tags like &lt;code&gt;json&lt;/code&gt;,&lt;code&gt;xml&lt;/code&gt;,&lt;code&gt;yaml&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#modifies-value-receiver&#34;&gt;&lt;code&gt;modifies-value-receiver&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on assignments to value-passed method receivers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#constant-logical-expr&#34;&gt;&lt;code&gt;constant-logical-expr&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on constant logical expressions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#bool-literal-in-expr&#34;&gt;&lt;code&gt;bool-literal-in-expr&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Suggests removing Boolean literals from logic expressions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#redefines-builtin-id&#34;&gt;&lt;code&gt;redefines-builtin-id&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on redefinitions of builtin identifiers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#function-result-limit&#34;&gt;&lt;code&gt;function-result-limit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specifies the maximum number of results a function can return&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#imports-blacklist&#34;&gt;&lt;code&gt;imports-blacklist&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;[]string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallows importing the specified packages&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#range-val-in-closure&#34;&gt;&lt;code&gt;range-val-in-closure&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns if range value is used in a closure dispatched as goroutine&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#range-val-address&#34;&gt;&lt;code&gt;range-val-address&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns if address of range value is used dangerously&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#waitgroup-by-value&#34;&gt;&lt;code&gt;waitgroup-by-value&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on functions taking sync.WaitGroup as a by-value parameter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#atomic&#34;&gt;&lt;code&gt;atomic&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Check for common mistaken usages of the &lt;code&gt;sync/atomic&lt;/code&gt; package&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#empty-lines&#34;&gt;&lt;code&gt;empty-lines&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns when there are heading or trailing newlines in a block&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#line-length-limit&#34;&gt;&lt;code&gt;line-length-limit&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specifies the maximum number of characters in a line&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#call-to-gc&#34;&gt;&lt;code&gt;call-to-gc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on explicit call to the garbage collector&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#duplicated-imports&#34;&gt;&lt;code&gt;duplicated-imports&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Looks for packages that are imported two or more times&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#import-shadowing&#34;&gt;&lt;code&gt;import-shadowing&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Spots identifiers that shadow an import&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#bare-return&#34;&gt;&lt;code&gt;bare-return&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on bare returns&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#unused-receiver&#34;&gt;&lt;code&gt;unused-receiver&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Suggests to rename or remove unused method receivers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#unhandled-error&#34;&gt;&lt;code&gt;unhandled-error&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;[]string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on unhandled errors returned by function calls&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#cognitive-complexity&#34;&gt;&lt;code&gt;cognitive-complexity&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;int&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets restriction for maximum Cognitive complexity.&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#string-of-int&#34;&gt;&lt;code&gt;string-of-int&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on suspicious casts from int to string&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#string-format&#34;&gt;&lt;code&gt;string-format&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;map&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on specific string literals that fail one or more user-configured regular expressions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#early-return&#34;&gt;&lt;code&gt;early-return&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Spots if-then-else statements where the predicate may be inverted to reduce nesting&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#unconditional-recursion&#34;&gt;&lt;code&gt;unconditional-recursion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on function calls that will lead to (direct) infinite recursion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#identical-branches&#34;&gt;&lt;code&gt;identical-branches&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Spots if-then-else statements with identical &lt;code&gt;then&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; branches&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#defer&#34;&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;map&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on some &lt;a href=&#34;https://blog.learngoprogramming.com/5-gotchas-of-defer-in-go-golang-part-iii-36a1ab3d6ef1&#34;&gt;defer gotchas&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#unexported-naming&#34;&gt;&lt;code&gt;unexported-naming&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on wrongly named un-exported symbols&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#function-length&#34;&gt;&lt;code&gt;function-length&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on functions exceeding the statements or lines max&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#nested-structs&#34;&gt;&lt;code&gt;nested-structs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on structs within structs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#useless-break&#34;&gt;&lt;code&gt;useless-break&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on useless &lt;code&gt;break&lt;/code&gt; statements in case clauses&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#banned-characters&#34;&gt;&lt;code&gt;banned-characters&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Checks banned characters in identifiers&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#optimize-operands-order&#34;&gt;&lt;code&gt;optimize-operands-order&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Checks inefficient conditional expressions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#use-any&#34;&gt;&lt;code&gt;use-any&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Proposes to replace &lt;code&gt;interface{}&lt;/code&gt; with its alias &lt;code&gt;any&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#datarace&#34;&gt;&lt;code&gt;datarace&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n/a&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Spots potential dataraces&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/RULES_DESCRIPTIONS.md#comment-spacings&#34;&gt;&lt;code&gt;comment-spacings&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;[]string&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warns on malformed comments&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configurable rules&lt;/h2&gt; &#xA;&lt;p&gt;Here you can find how you can configure some existing rules:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;var-naming&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This rule accepts two slices of strings, a whitelist and a blacklist of initialisms. By default, the rule behaves exactly as the alternative in &lt;code&gt;golint&lt;/code&gt; but optionally, you can relax it (see &lt;a href=&#34;https://github.com/golang/lint/issues/89&#34;&gt;golint/lint/issues/89&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[rule.var-naming]&#xA;  arguments = [[&#34;ID&#34;], [&#34;VM&#34;]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way, revive will not warn for identifier called &lt;code&gt;customId&lt;/code&gt; but will warn that &lt;code&gt;customVm&lt;/code&gt; should be called &lt;code&gt;customVM&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available Formatters&lt;/h2&gt; &#xA;&lt;p&gt;This section lists all the available formatters and provides a screenshot for each one.&lt;/p&gt; &#xA;&lt;h3&gt;Friendly&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgechev/revive/master/assets/formatter-friendly.png&#34; alt=&#34;Friendly formatter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Stylish&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgechev/revive/master/assets/formatter-stylish.png&#34; alt=&#34;Stylish formatter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Default&lt;/h3&gt; &#xA;&lt;p&gt;The default formatter produces the same output as &lt;code&gt;golint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgechev/revive/master/assets/formatter-default.png&#34; alt=&#34;Default formatter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Plain&lt;/h3&gt; &#xA;&lt;p&gt;The plain formatter produces the same output as the default formatter and appends URL to the rule description.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgechev/revive/master/assets/formatter-plain.png&#34; alt=&#34;Plain formatter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Unix&lt;/h3&gt; &#xA;&lt;p&gt;The unix formatter produces the same output as the default formatter but surrounds the rules in &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mgechev/revive/master/assets/formatter-unix.png&#34; alt=&#34;Unix formatter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SARIF&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;sarif&lt;/code&gt; formatter produces outputs in SARIF, for &lt;em&gt;Static Analysis Results Interchange Format&lt;/em&gt;, a standard JSON-based format for the output of static analysis tools defined and promoted by &lt;a href=&#34;https://www.oasis-open.org/&#34;&gt;OASIS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Current supported version of the standard is &lt;a href=&#34;https://docs.oasis-open.org/sarif/sarif/v2.1.0/csprd01/sarif-v2.1.0-csprd01.html&#34;&gt;SARIF-v2.1.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Extensibility&lt;/h2&gt; &#xA;&lt;p&gt;The tool can be extended with custom rules or formatters. This section contains additional information on how to implement such.&lt;/p&gt; &#xA;&lt;p&gt;To extend the linter with a custom rule you can push it to this repository or use &lt;code&gt;revive&lt;/code&gt; as a library (see below)&lt;/p&gt; &#xA;&lt;p&gt;To add a custom formatter you&#39;ll have to push it to this repository or fork it. This is due to the limited &lt;code&gt;-buildmode=plugin&lt;/code&gt; support which &lt;a href=&#34;https://golang.org/pkg/plugin/&#34;&gt;works only on Linux (with known issues)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Writing a Custom Rule&lt;/h3&gt; &#xA;&lt;p&gt;Each rule needs to implement the &lt;code&gt;lint.Rule&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Rule interface {&#xA;&#x9;Name() string&#xA;&#x9;Apply(*File, Arguments) []Failure&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Arguments&lt;/code&gt; type is an alias of the type &lt;code&gt;[]interface{}&lt;/code&gt;. The arguments of the rule are passed from the configuration file.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s suppose we have developed a rule called &lt;code&gt;BanStructNameRule&lt;/code&gt; which disallow us to name a structure with given identifier. We can set the banned identifier by using the TOML configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[rule.ban-struct-name]&#xA;  arguments = [&#34;Foo&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the snippet above we:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable the rule with name &lt;code&gt;ban-struct-name&lt;/code&gt;. The &lt;code&gt;Name()&lt;/code&gt; method of our rule should return a string which matches &lt;code&gt;ban-struct-name&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Configure the rule with the argument &lt;code&gt;Foo&lt;/code&gt;. The list of arguments will be passed to &lt;code&gt;Apply(*File, Arguments)&lt;/code&gt; together with the target file we&#39;re linting currently.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A sample rule implementation can be found &lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/rule/argument-limit.go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Using &lt;code&gt;revive&lt;/code&gt; as a library&lt;/h4&gt; &#xA;&lt;p&gt;If a rule is specific to your use case (i.e. it is not a good candidate to be added to &lt;code&gt;revive&lt;/code&gt;&#39;s rule set) you can add it to your own linter using &lt;code&gt;revive&lt;/code&gt; as linting engine.&lt;/p&gt; &#xA;&lt;p&gt;The following code shows how to use &lt;code&gt;revive&lt;/code&gt; in your own application. In the example only one rule is added (&lt;code&gt;myRule&lt;/code&gt;), of course, you can add as many as you need to. Your rules can be configured programmatically or with the standard &lt;code&gt;revive&lt;/code&gt; configuration file. The full rule set of &lt;code&gt;revive&lt;/code&gt; is also actionable by your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/mgechev/revive/cli&#34;&#xA;&#x9;&#34;github.com/mgechev/revive/lint&#34;&#xA;&#x9;&#34;github.com/mgechev/revive/revivelib&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;cli.RunRevive(revivelib.NewExtraRule(&amp;amp;myRule{}, lint.RuleConfig{}))&#xA;}&#xA;&#xA;type myRule struct{}&#xA;&#xA;func (f myRule) Name() string {&#xA;&#x9;return &#34;myRule&#34;&#xA;}&#xA;&#xA;func (f myRule) Apply(*lint.File, lint.Arguments) []lint.Failure { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can still go further and use &lt;code&gt;revive&lt;/code&gt; without its cli, as part of your library, or your own cli:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package mylib&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/mgechev/revive/cli&#34;&#xA;&#x9;&#34;github.com/mgechev/revive/revivelib&#34;&#xA;&#x9;&#34;github.com/mgechev/revive/lint&#34;&#xA;)&#xA;&#xA;// Error checking removed for clarity&#xA;func LintMyFile(file string) {&#xA;&#x9;conf, _:= config.GetConfig(&#34;../defaults.toml&#34;)&#xA;&#xA;&#x9;revive, _ := revivelib.New(&#xA;&#x9;&#x9;conf,  // Configuration file&#xA;&#x9;&#x9;true,  // Set exit status&#xA;&#x9;&#x9;2048,  // Max open files&#xA;&#xA;&#x9;&#x9;// Then add as many extra rules as you need&#xA;&#x9;&#x9;revivelib.NewExtraRule(&amp;amp;myRule{}, lint.RuleConfig{}),&#xA;&#x9;)&#xA;&#xA;&#x9;failuresChan, err := revive.Lint(&#xA; &#x9;&#x9;revivelib.Include(file),&#xA; &#x9;&#x9;revivelib.Exclude(&#34;./fixtures&#34;),&#xA; &#x9;&#x9;// You can use as many revivelib.Include or revivelib.Exclude as required&#xA; &#x9;)&#xA;  &#x9;if err != nil {&#xA;  &#x9; &#x9;panic(&#34;Shouldn&#39;t have failed: &#34; + err.Error)&#xA;  &#x9;}&#xA;&#xA;  &#x9;// Now let&#39;s return the formatted errors&#xA;&#x9;failures, exitCode, _ := revive.Format(&#34;stylish&#34;, failuresChan)&#xA;&#xA;  &#x9;// failures is the string with all formatted lint error messages&#xA;  &#x9;// exit code is 0 if no errors, 1 if errors (unless config options change it)&#xA;  &#x9;// ... do something with them&#xA;}&#xA;&#xA;type myRule struct{}&#xA;&#xA;func (f myRule) Name() string {&#xA;&#x9;return &#34;myRule&#34;&#xA;}&#xA;&#xA;func (f myRule) Apply(*lint.File, lint.Arguments) []lint.Failure { ... }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Formatter&lt;/h3&gt; &#xA;&lt;p&gt;Each formatter needs to implement the following interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Formatter interface {&#xA;&#x9;Format(&amp;lt;-chan Failure, Config) (string, error)&#xA;&#x9;Name() string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;Format&lt;/code&gt; method accepts a channel of &lt;code&gt;Failure&lt;/code&gt; instances and the configuration of the enabled rules. The &lt;code&gt;Name()&lt;/code&gt; method should return a string different from the names of the already existing rules. This string is used when specifying the formatter when invoking the &lt;code&gt;revive&lt;/code&gt; CLI tool.&lt;/p&gt; &#xA;&lt;p&gt;For a sample formatter, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/mgechev/revive/master/formatter/json.go&#34;&gt;this file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Speed Comparison&lt;/h2&gt; &#xA;&lt;p&gt;Compared to &lt;code&gt;golint&lt;/code&gt;, &lt;code&gt;revive&lt;/code&gt; performs better because it lints the files for each individual rule into a separate goroutine. Here&#39;s a basic performance benchmark on MacBook Pro Early 2013 run on kubernetes:&lt;/p&gt; &#xA;&lt;h3&gt;golint&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;time golint kubernetes/... &amp;gt; /dev/null&#xA;&#xA;real    0m54.837s&#xA;user    0m57.844s&#xA;sys     0m9.146s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;revive&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# no type checking&#xA;time revive -config untyped.toml kubernetes/... &amp;gt; /dev/null&#xA;&#xA;real    0m8.471s&#xA;user    0m40.721s&#xA;sys     0m3.262s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that if you use rules which require type checking, the performance may drop to 2x faster than &lt;code&gt;golint&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# type checking enabled&#xA;time revive kubernetes/... &amp;gt; /dev/null&#xA;&#xA;real    0m26.211s&#xA;user    2m6.708s&#xA;sys     0m17.192s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, type checking is enabled by default. If you want to run the linter without type checking, remove all typed rules from the configuration file.&lt;/p&gt; &#xA;&lt;h2&gt;Overriding colorization detection&lt;/h2&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;revive&lt;/code&gt; determines whether or not to colorize its output based on whether it&#39;s connected to a TTY or not. This works for most use cases, but may not behave as expected if you use &lt;code&gt;revive&lt;/code&gt; in a pipeline of commands, where STDOUT is being piped to another command.&lt;/p&gt; &#xA;&lt;p&gt;To force colorization, add &lt;code&gt;REVIVE_FORCE_COLOR=1&lt;/code&gt; to the environment you&#39;re running in. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;REVIVE_FORCE_COLOR=1 revive -formatter friendly ./... | tee revive.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/apps/renovate&#34;&gt;&lt;img alt=&#34;renovate[bot]&#34; src=&#34;https://avatars.githubusercontent.com/in/2740?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mgechev&#34;&gt;&lt;img alt=&#34;mgechev&#34; src=&#34;https://avatars.githubusercontent.com/u/455023?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/chavacava&#34;&gt;&lt;img alt=&#34;chavacava&#34; src=&#34;https://avatars.githubusercontent.com/u/25788468?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/renovate-bot&#34;&gt;&lt;img alt=&#34;renovate-bot&#34; src=&#34;https://avatars.githubusercontent.com/u/25180681?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuri&#34;&gt;&lt;img alt=&#34;xuri&#34; src=&#34;https://avatars.githubusercontent.com/u/2809468?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/doniacld&#34;&gt;&lt;img alt=&#34;doniacld&#34; src=&#34;https://avatars.githubusercontent.com/u/19799268?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/apps/renovate&#34;&gt;renovate[bot]&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mgechev&#34;&gt;mgechev&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/chavacava&#34;&gt;chavacava&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/renovate-bot&#34;&gt;renovate-bot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xuri&#34;&gt;xuri&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/doniacld&#34;&gt;doniacld&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Clivern&#34;&gt;&lt;img alt=&#34;Clivern&#34; src=&#34;https://avatars.githubusercontent.com/u/1634427?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/bernhardreisenberger&#34;&gt;&lt;img alt=&#34;bernhardreisenberger&#34; src=&#34;https://avatars.githubusercontent.com/u/5809300?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/morphy2k&#34;&gt;&lt;img alt=&#34;morphy2k&#34; src=&#34;https://avatars.githubusercontent.com/u/4280578?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/butuzov&#34;&gt;&lt;img alt=&#34;butuzov&#34; src=&#34;https://avatars.githubusercontent.com/u/651824?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dshemin&#34;&gt;&lt;img alt=&#34;dshemin&#34; src=&#34;https://avatars.githubusercontent.com/u/11780307?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/heynemann&#34;&gt;&lt;img alt=&#34;heynemann&#34; src=&#34;https://avatars.githubusercontent.com/u/60965?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Clivern&#34;&gt;Clivern&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/bernhardreisenberger&#34;&gt;bernhardreisenberger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/morphy2k&#34;&gt;morphy2k&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/butuzov&#34;&gt;butuzov&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dshemin&#34;&gt;dshemin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/heynemann&#34;&gt;heynemann&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/gsamokovarov&#34;&gt;&lt;img alt=&#34;gsamokovarov&#34; src=&#34;https://avatars.githubusercontent.com/u/604618?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tymonx&#34;&gt;&lt;img alt=&#34;tymonx&#34; src=&#34;https://avatars.githubusercontent.com/u/8367378?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sina-devel&#34;&gt;&lt;img alt=&#34;sina-devel&#34; src=&#34;https://avatars.githubusercontent.com/u/61763643?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/abeltay&#34;&gt;&lt;img alt=&#34;abeltay&#34; src=&#34;https://avatars.githubusercontent.com/u/15604207?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dvejmz&#34;&gt;&lt;img alt=&#34;dvejmz&#34; src=&#34;https://avatars.githubusercontent.com/u/9487006?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mihaitodor&#34;&gt;&lt;img alt=&#34;mihaitodor&#34; src=&#34;https://avatars.githubusercontent.com/u/788216?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/gsamokovarov&#34;&gt;gsamokovarov&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tymonx&#34;&gt;tymonx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sina-devel&#34;&gt;sina-devel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/abeltay&#34;&gt;abeltay&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/dvejmz&#34;&gt;dvejmz&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mihaitodor&#34;&gt;mihaitodor&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/markelog&#34;&gt;&lt;img alt=&#34;markelog&#34; src=&#34;https://avatars.githubusercontent.com/u/945528?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tamird&#34;&gt;&lt;img alt=&#34;tamird&#34; src=&#34;https://avatars.githubusercontent.com/u/1535036?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/shmsr&#34;&gt;&lt;img alt=&#34;shmsr&#34; src=&#34;https://avatars.githubusercontent.com/u/51480165?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mapreal19&#34;&gt;&lt;img alt=&#34;mapreal19&#34; src=&#34;https://avatars.githubusercontent.com/u/3055997?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kulti&#34;&gt;&lt;img alt=&#34;kulti&#34; src=&#34;https://avatars.githubusercontent.com/u/1286683?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Aragur&#34;&gt;&lt;img alt=&#34;Aragur&#34; src=&#34;https://avatars.githubusercontent.com/u/11004008?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/markelog&#34;&gt;markelog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tamird&#34;&gt;tamird&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/shmsr&#34;&gt;shmsr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mapreal19&#34;&gt;mapreal19&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/kulti&#34;&gt;kulti&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Aragur&#34;&gt;Aragur&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/s0xzwasd&#34;&gt;&lt;img alt=&#34;s0xzwasd&#34; src=&#34;https://avatars.githubusercontent.com/u/29286703?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/derekperkins&#34;&gt;&lt;img alt=&#34;derekperkins&#34; src=&#34;https://avatars.githubusercontent.com/u/3588778?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yangdiangzb&#34;&gt;&lt;img alt=&#34;yangdiangzb&#34; src=&#34;https://avatars.githubusercontent.com/u/16643665?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/petethepig&#34;&gt;&lt;img alt=&#34;petethepig&#34; src=&#34;https://avatars.githubusercontent.com/u/662636?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/euank&#34;&gt;&lt;img alt=&#34;euank&#34; src=&#34;https://avatars.githubusercontent.com/u/2147649?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/quasilyte&#34;&gt;&lt;img alt=&#34;quasilyte&#34; src=&#34;https://avatars.githubusercontent.com/u/6286655?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/s0xzwasd&#34;&gt;s0xzwasd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/derekperkins&#34;&gt;derekperkins&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yangdiangzb&#34;&gt;yangdiangzb&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/petethepig&#34;&gt;petethepig&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/euank&#34;&gt;euank&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/quasilyte&#34;&gt;quasilyte&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/grongor&#34;&gt;&lt;img alt=&#34;grongor&#34; src=&#34;https://avatars.githubusercontent.com/u/972493?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jamesmaidment&#34;&gt;&lt;img alt=&#34;jamesmaidment&#34; src=&#34;https://avatars.githubusercontent.com/u/2050324?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jan-xyz&#34;&gt;&lt;img alt=&#34;jan-xyz&#34; src=&#34;https://avatars.githubusercontent.com/u/5249233?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jefersonf&#34;&gt;&lt;img alt=&#34;jefersonf&#34; src=&#34;https://avatars.githubusercontent.com/u/3049540?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/johnrichardrinehart&#34;&gt;&lt;img alt=&#34;johnrichardrinehart&#34; src=&#34;https://avatars.githubusercontent.com/u/6321578?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/very-amused&#34;&gt;&lt;img alt=&#34;very-amused&#34; src=&#34;https://avatars.githubusercontent.com/u/44382255?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/grongor&#34;&gt;grongor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jamesmaidment&#34;&gt;jamesmaidment&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jan-xyz&#34;&gt;jan-xyz&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jefersonf&#34;&gt;jefersonf&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/johnrichardrinehart&#34;&gt;johnrichardrinehart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/very-amused&#34;&gt;very-amused&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ldez&#34;&gt;&lt;img alt=&#34;ldez&#34; src=&#34;https://avatars.githubusercontent.com/u/5674651?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mathieu-aubin&#34;&gt;&lt;img alt=&#34;mathieu-aubin&#34; src=&#34;https://avatars.githubusercontent.com/u/15820228?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/michalhisim&#34;&gt;&lt;img alt=&#34;michalhisim&#34; src=&#34;https://avatars.githubusercontent.com/u/764249?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pa-m&#34;&gt;&lt;img alt=&#34;pa-m&#34; src=&#34;https://avatars.githubusercontent.com/u/5503106?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/paul-at-start&#34;&gt;&lt;img alt=&#34;paul-at-start&#34; src=&#34;https://avatars.githubusercontent.com/u/5486775?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/weastur&#34;&gt;&lt;img alt=&#34;weastur&#34; src=&#34;https://avatars.githubusercontent.com/u/10865586?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ldez&#34;&gt;ldez&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mathieu-aubin&#34;&gt;mathieu-aubin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/michalhisim&#34;&gt;michalhisim&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pa-m&#34;&gt;pa-m&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/paul-at-start&#34;&gt;paul-at-start&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/weastur&#34;&gt;weastur&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/paco0x&#34;&gt;&lt;img alt=&#34;paco0x&#34; src=&#34;https://avatars.githubusercontent.com/u/6123425?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rdeusser&#34;&gt;&lt;img alt=&#34;rdeusser&#34; src=&#34;https://avatars.githubusercontent.com/u/5935071?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ridvansumset&#34;&gt;&lt;img alt=&#34;ridvansumset&#34; src=&#34;https://avatars.githubusercontent.com/u/26631560?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tartale&#34;&gt;&lt;img alt=&#34;tartale&#34; src=&#34;https://avatars.githubusercontent.com/u/9323250?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Jarema&#34;&gt;&lt;img alt=&#34;Jarema&#34; src=&#34;https://avatars.githubusercontent.com/u/7369771?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/vkrol&#34;&gt;&lt;img alt=&#34;vkrol&#34; src=&#34;https://avatars.githubusercontent.com/u/153412?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/paco0x&#34;&gt;paco0x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rdeusser&#34;&gt;rdeusser&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ridvansumset&#34;&gt;ridvansumset&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/tartale&#34;&gt;tartale&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/Jarema&#34;&gt;Jarema&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/vkrol&#34;&gt;vkrol&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/cce&#34;&gt;&lt;img alt=&#34;cce&#34; src=&#34;https://avatars.githubusercontent.com/u/51567?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/haya14busa&#34;&gt;&lt;img alt=&#34;haya14busa&#34; src=&#34;https://avatars.githubusercontent.com/u/3797062?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jmckenzieark&#34;&gt;&lt;img alt=&#34;jmckenzieark&#34; src=&#34;https://avatars.githubusercontent.com/u/70923399?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/techknowlogick&#34;&gt;&lt;img alt=&#34;techknowlogick&#34; src=&#34;https://avatars.githubusercontent.com/u/164197?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/zeripath&#34;&gt;&lt;img alt=&#34;zeripath&#34; src=&#34;https://avatars.githubusercontent.com/u/1824502?v=4&amp;amp;s=117&#34; width=&#34;117&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/cce&#34;&gt;cce&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/haya14busa&#34;&gt;haya14busa&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/jmckenzieark&#34;&gt;jmckenzieark&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/techknowlogick&#34;&gt;techknowlogick&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/zeripath&#34;&gt;zeripath&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>