<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-23T01:33:20Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ropnop/kerbrute</title>
    <updated>2024-01-23T01:33:20Z</updated>
    <id>tag:github.com,2024-01-23:/ropnop/kerbrute</id>
    <link href="https://github.com/ropnop/kerbrute" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool to perform Kerberos pre-auth bruteforcing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kerbrute&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/ropnop/kerbrute&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ropnop/kerbrute.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tool to quickly bruteforce and enumerate valid Active Directory accounts through Kerberos Pre-Authentication&lt;/p&gt; &#xA;&lt;p&gt;Grab the latest binaries from the &lt;a href=&#34;https://github.com/ropnop/kerbrute/releases/latest&#34;&gt;releases page&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;This tool grew out of some &lt;a href=&#34;https://github.com/ropnop/kerberos_windows_scripts&#34;&gt;bash scripts&lt;/a&gt; I wrote a few years ago to perform bruteforcing using the Heimdal Kerberos client from Linux. I wanted something that didn&#39;t require privileges to install a Kerberos client, and when I found the amazing pure Go implementation of Kerberos &lt;a href=&#34;https://github.com/jcmturner/gokrb5&#34;&gt;gokrb5&lt;/a&gt;, I decided to finally learn Go and write this.&lt;/p&gt; &#xA;&lt;p&gt;Bruteforcing Windows passwords with Kerberos is much faster than any other approach I know of, and potentially stealthier since pre-authentication failures do not trigger that &#34;traditional&#34; &lt;code&gt;An account failed to log on&lt;/code&gt; event 4625. With Kerberos, you can validate a username or test a login by only sending one UDP frame to the KDC (Domain Controller)&lt;/p&gt; &#xA;&lt;p&gt;For more background and information, check out my Troopers 2019 talk, Fun with LDAP and Kerberos (link TBD)&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Kerbrute has three main commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;bruteuser&lt;/strong&gt; - Bruteforce a single user&#39;s password from a wordlist&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bruteforce&lt;/strong&gt; - Read username:password combos from a file or stdin and test them&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;passwordspray&lt;/strong&gt; - Test a single password against a list of users&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;userenum&lt;/strong&gt; - Enumerate valid domain usernames via Kerberos&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A domain (&lt;code&gt;-d&lt;/code&gt;) or a domain controller (&lt;code&gt;--dc&lt;/code&gt;) must be specified. If a Domain Controller is not given the KDC will be looked up via DNS.&lt;/p&gt; &#xA;&lt;p&gt;By default, Kerbrute is multithreaded and uses 10 threads. This can be changed with the &lt;code&gt;-t&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;Output is logged to stdout, but a log file can be specified with &lt;code&gt;-o&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By default, failures are not logged, but that can be changed with &lt;code&gt;-v&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lastly, Kerbrute has a &lt;code&gt;--safe&lt;/code&gt; option. When this option is enabled, if an account comes back as locked out, it will abort all threads to stop locking out any other accounts.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;help&lt;/code&gt; command can be used for more information&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./kerbrute -h&#xA;&#xA;    __             __               __&#xA;   / /_____  _____/ /_  _______  __/ /____&#xA;  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \&#xA; / ,&amp;lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/&#xA;/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/&#xA;&#xA;Version: dev (bc1d606) - 11/15/20 - Ronnie Flathers @ropnop&#xA;&#xA;This tool is designed to assist in quickly bruteforcing valid Active Directory accounts through Kerberos Pre-Authentication.&#xA;It is designed to be used on an internal Windows domain with access to one of the Domain Controllers.&#xA;Warning: failed Kerberos Pre-Auth counts as a failed login and WILL lock out accounts&#xA;&#xA;Usage:&#xA;  kerbrute [command]&#xA;&#xA;Available Commands:&#xA;  bruteforce    Bruteforce username:password combos, from a file or stdin&#xA;  bruteuser     Bruteforce a single user&#39;s password from a wordlist&#xA;  help          Help about any command&#xA;  passwordspray Test a single password against a list of users&#xA;  userenum      Enumerate valid domain usernames via Kerberos&#xA;  version       Display version info and quit&#xA;&#xA;Flags:&#xA;      --dc string          The location of the Domain Controller (KDC) to target. If blank, will lookup via DNS&#xA;      --delay int          Delay in millisecond between each attempt. Will always use single thread if set&#xA;  -d, --domain string      The full domain to use (e.g. contoso.com)&#xA;      --downgrade          Force downgraded encryption type (arcfour-hmac-md5)&#xA;      --hash-file string   File to save AS-REP hashes to (if any captured), otherwise just logged&#xA;  -h, --help               help for kerbrute&#xA;  -o, --output string      File to write logs to. Optional.&#xA;      --safe               Safe mode. Will abort if any user comes back as locked out. Default: FALSE&#xA;  -t, --threads int        Threads to use (default 10)&#xA;  -v, --verbose            Log failures and errors&#xA;&#xA;Use &#34;kerbrute [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;User Enumeration&lt;/h3&gt; &#xA;&lt;p&gt;To enumerate usernames, Kerbrute sends TGT requests with no pre-authentication. If the KDC responds with a &lt;code&gt;PRINCIPAL UNKNOWN&lt;/code&gt; error, the username does not exist. However, if the KDC prompts for pre-authentication, we know the username exists and we move on. This does not cause any login failures so it will not lock out any accounts. This generates a Windows event ID &lt;a href=&#34;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4768&#34;&gt;4768&lt;/a&gt; if Kerberos logging is enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;root@kali:~# ./kerbrute_linux_amd64 userenum -d lab.ropnop.com usernames.txt&#xA;&#xA;    __             __               __&#xA;   / /_____  _____/ /_  _______  __/ /____&#xA;  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \&#xA; / ,&amp;lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/&#xA;/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/&#xA;&#xA;Version: dev (43f9ca1) - 03/06/19 - Ronnie Flathers @ropnop&#xA;&#xA;2019/03/06 21:28:04 &amp;gt;  Using KDC(s):&#xA;2019/03/06 21:28:04 &amp;gt;   pdc01.lab.ropnop.com:88&#xA;&#xA;2019/03/06 21:28:04 &amp;gt;  [+] VALID USERNAME:       amata@lab.ropnop.com&#xA;2019/03/06 21:28:04 &amp;gt;  [+] VALID USERNAME:       thoffman@lab.ropnop.com&#xA;2019/03/06 21:28:04 &amp;gt;  Done! Tested 1001 usernames (2 valid) in 0.425 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Password Spray&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;code&gt;passwordspray&lt;/code&gt;, Kerbrute will perform a horizontal brute force attack against a list of domain users. This is useful for testing one or two common passwords when you have a large list of users. WARNING: this does will increment the failed login count and lock out accounts. This will generate both event IDs &lt;a href=&#34;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4768&#34;&gt;4768 - A Kerberos authentication ticket (TGT) was requested&lt;/a&gt; and &lt;a href=&#34;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4771&#34;&gt;4771 - Kerberos pre-authentication failed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;root@kali:~# ./kerbrute_linux_amd64 passwordspray -d lab.ropnop.com domain_users.txt Password123&#xA;&#xA;    __             __               __&#xA;   / /_____  _____/ /_  _______  __/ /____&#xA;  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \&#xA; / ,&amp;lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/&#xA;/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/&#xA;&#xA;Version: dev (43f9ca1) - 03/06/19 - Ronnie Flathers @ropnop&#xA;&#xA;2019/03/06 21:37:29 &amp;gt;  Using KDC(s):&#xA;2019/03/06 21:37:29 &amp;gt;   pdc01.lab.ropnop.com:88&#xA;&#xA;2019/03/06 21:37:35 &amp;gt;  [+] VALID LOGIN:  callen@lab.ropnop.com:Password123&#xA;2019/03/06 21:37:37 &amp;gt;  [+] VALID LOGIN:  eshort@lab.ropnop.com:Password123&#xA;2019/03/06 21:37:37 &amp;gt;  Done! Tested 2755 logins (2 successes) in 7.674 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Brute User&lt;/h3&gt; &#xA;&lt;p&gt;This is a traditional bruteforce account against a username. Only run this if you are sure there is no lockout policy! This will generate both event IDs &lt;a href=&#34;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4768&#34;&gt;4768 - A Kerberos authentication ticket (TGT) was requested&lt;/a&gt; and &lt;a href=&#34;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4771&#34;&gt;4771 - Kerberos pre-authentication failed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;root@kali:~# ./kerbrute_linux_amd64 bruteuser -d lab.ropnop.com passwords.lst thoffman&#xA;&#xA;    __             __               __&#xA;   / /_____  _____/ /_  _______  __/ /____&#xA;  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \&#xA; / ,&amp;lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/&#xA;/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/&#xA;&#xA;Version: dev (43f9ca1) - 03/06/19 - Ronnie Flathers @ropnop&#xA;&#xA;2019/03/06 21:38:24 &amp;gt;  Using KDC(s):&#xA;2019/03/06 21:38:24 &amp;gt;   pdc01.lab.ropnop.com:88&#xA;&#xA;2019/03/06 21:38:27 &amp;gt;  [+] VALID LOGIN:  thoffman@lab.ropnop.com:Summer2017&#xA;2019/03/06 21:38:27 &amp;gt;  Done! Tested 1001 logins (1 successes) in 2.711 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Brute Force&lt;/h3&gt; &#xA;&lt;p&gt;This mode simply reads username and password combinations (in the format &lt;code&gt;username:password&lt;/code&gt;) from a file or from &lt;code&gt;stdin&lt;/code&gt; and tests them with Kerberos PreAuthentication. It will skip any blank lines or lines with blank usernames/passwords. This will generate both event IDs &lt;a href=&#34;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4768&#34;&gt;4768 - A Kerberos authentication ticket (TGT) was requested&lt;/a&gt; and &lt;a href=&#34;https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4771&#34;&gt;4771 - Kerberos pre-authentication failed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat combos.lst | ./kerbrute -d lab.ropnop.com bruteforce -&#xA;&#xA;    __             __               __&#xA;   / /_____  _____/ /_  _______  __/ /____&#xA;  / //_/ _ \/ ___/ __ \/ ___/ / / / __/ _ \&#xA; / ,&amp;lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/&#xA;/_/|_|\___/_/  /_.___/_/   \__,_/\__/\___/&#xA;&#xA;Version: dev (n/a) - 05/11/19 - Ronnie Flathers @ropnop&#xA;&#xA;2019/05/11 18:40:56 &amp;gt;  Using KDC(s):&#xA;2019/05/11 18:40:56 &amp;gt;   pdc01.lab.ropnop.com:88&#xA;&#xA;2019/05/11 18:40:56 &amp;gt;  [+] VALID LOGIN:  athomas@lab.ropnop.com:Password1234&#xA;2019/05/11 18:40:56 &amp;gt;  Done! Tested 7 logins (1 successes) in 0.114 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can download pre-compiled binaries for Linux, Windows and Mac from the &lt;a href=&#34;https://github.com/ropnop/kerbrute/releases/tag/latest&#34;&gt;releases page&lt;/a&gt;. If you want to live on the edge, you can also install with Go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go get github.com/ropnop/kerbrute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the repository cloned, you can also use the Make file to compile for common architectures:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ make help&#xA;help:            Show this help.&#xA;windows:  Make Windows x86 and x64 Binaries&#xA;linux:  Make Linux x86 and x64 Binaries&#xA;mac:  Make Darwin (Mac) x86 and x64 Binaries&#xA;clean:  Delete any binaries&#xA;all:  Make Windows, Linux and Mac x86/x64 Binaries&#xA;&#xA;$ make all&#xA;Done.&#xA;Building for windows amd64..&#xA;Building for windows 386..&#xA;Done.&#xA;Building for linux amd64...&#xA;Building for linux 386...&#xA;Done.&#xA;Building for mac amd64...&#xA;Building for mac 386...&#xA;Done.&#xA;&#xA;$ ls dist/&#xA;kerbrute_darwin_386        kerbrute_linux_386         kerbrute_windows_386.exe&#xA;kerbrute_darwin_amd64      kerbrute_linux_amd64       kerbrute_windows_amd64.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Huge shoutout to jcmturner for his pure Go implementation of KRB5: &lt;a href=&#34;https://github.com/jcmturner/gokrb5&#34;&gt;https://github.com/jcmturner/gokrb5&lt;/a&gt; . An amazing project and very well documented. Couldn&#39;t have done any of this without that project.&lt;/p&gt; &#xA;&lt;p&gt;Shoutout to &lt;a href=&#34;https://github.com/audibleblink&#34;&gt;audibleblink&lt;/a&gt; for the suggestion and implementation of the &lt;code&gt;delay&lt;/code&gt; option!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bazelbuild/bazelisk</title>
    <updated>2024-01-23T01:33:20Z</updated>
    <id>tag:github.com,2024-01-23:/bazelbuild/bazelisk</id>
    <link href="https://github.com/bazelbuild/bazelisk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A user-friendly launcher for Bazel.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bazelisk&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A user-friendly launcher for Bazel.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Bazelisk&lt;/h2&gt; &#xA;&lt;p&gt;Bazelisk is a wrapper for Bazel written in Go. It automatically picks a good version of Bazel given your current working directory, downloads it from the official server (if required) and then transparently passes through all command-line arguments to the real Bazel binary. You can call it just like you would call Bazel.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;On macOS: &lt;code&gt;brew install bazelisk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Windows: &lt;code&gt;choco install bazelisk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each adds bazelisk to the &lt;code&gt;PATH&lt;/code&gt; as both &lt;code&gt;bazelisk&lt;/code&gt; and &lt;code&gt;bazel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Linux: You can download Bazelisk binary on our &lt;a href=&#34;https://github.com/bazelbuild/bazelisk/releases&#34;&gt;Releases&lt;/a&gt; page and add it to your &lt;code&gt;PATH&lt;/code&gt; manually, which also works on macOS and Windows.&lt;/p&gt; &#xA;&lt;p&gt;Bazelisk is also published to npm. Frontend developers may want to install it with &lt;code&gt;npm install -g @bazel/bazelisk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You will notice that it serves an analogous function for Bazel as the &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;&lt;code&gt;nvm&lt;/code&gt; utility&lt;/a&gt; which manages your version of Node.js.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some ideas how to use it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install it as the &lt;code&gt;bazel&lt;/code&gt; binary in your &lt;code&gt;PATH&lt;/code&gt; (e.g. copy it to &lt;code&gt;/usr/local/bin/bazel&lt;/code&gt;). Never worry about upgrading Bazel to the latest version again.&lt;/li&gt; &#xA; &lt;li&gt;Check it into your repository and recommend users to build your software via &lt;code&gt;./bazelisk build //my:software&lt;/code&gt;. That way, even someone who has never used Bazel or doesn&#39;t have it installed can build your software.&lt;/li&gt; &#xA; &lt;li&gt;As a company using Bazel or as a project owner, add a &lt;code&gt;.bazelversion&lt;/code&gt; file to your repository. This will tell Bazelisk to use the exact version specified in the file when running in your workspace. The fact that it&#39;s versioned inside your repository will then allow for atomic upgrades of Bazel including all necessary changes. If you install Bazelisk as &lt;code&gt;bazel&lt;/code&gt; on your CI machines, too, you can even test Bazel upgrades via a normal presubmit / pull request. It will also ensure that users will not try to build your project with an incompatible version of Bazel, which is often a cause for frustration and failing builds. (But see the note below about ensuring your developers install Bazelisk.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before Bazelisk was rewritten in Go, it was a Python script. This still works and has the advantage that you can run it on any platform that has a Python interpreter, but is currently unmaintained and it doesn&#39;t support as many features. The documentation below describes the newer Go version only.&lt;/p&gt; &#xA;&lt;h2&gt;How does Bazelisk know which Bazel version to run?&lt;/h2&gt; &#xA;&lt;p&gt;It uses a simple algorithm:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the environment variable &lt;code&gt;USE_BAZEL_VERSION&lt;/code&gt; is set, it will use the version specified in the value.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if a &lt;code&gt;.bazeliskrc&lt;/code&gt; file exists in the workspace root and contains the &lt;code&gt;USE_BAZEL_VERSION&lt;/code&gt; variable, this version will be used.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if a &lt;code&gt;.bazelversion&lt;/code&gt; file exists in the current directory or recursively any parent directory, it will read the file and use the version specified in it.&lt;/li&gt; &#xA; &lt;li&gt;Otherwise, if the environment variable &lt;code&gt;USE_BAZEL_FALLBACK_VERSION&lt;/code&gt; is set to one of the following formats: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If set to a value starting with &lt;code&gt;error:&lt;/code&gt;, it will report an error and version detection will fail.&lt;/li&gt; &#xA;   &lt;li&gt;If set to a value starting with &lt;code&gt;warn:&lt;/code&gt;, it will report a warning and use the version specified after the prefix.&lt;/li&gt; &#xA;   &lt;li&gt;If set to a value starting with &lt;code&gt;silent:&lt;/code&gt;, it will use the version specified after the prefix.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Otherwise, it will use the official latest Bazel release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A version can optionally be prefixed with a fork name. The fork and version should be separated by slash: &lt;code&gt;&amp;lt;FORK&amp;gt;/&amp;lt;VERSION&amp;gt;&lt;/code&gt;. Please see the next section for how to work with forks.&lt;/p&gt; &#xA;&lt;p&gt;Bazelisk currently understands the following formats for version labels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;latest&lt;/code&gt; means the latest stable (LTS) version of Bazel as released on GitHub. Previous releases can be specified via &lt;code&gt;latest-1&lt;/code&gt;, &lt;code&gt;latest-2&lt;/code&gt; etc.&lt;/li&gt; &#xA; &lt;li&gt;A version number like &lt;code&gt;0.17.2&lt;/code&gt; means that exact version of Bazel. It can also be a release candidate version like &lt;code&gt;0.20.0rc3&lt;/code&gt;, or a rolling release version like &lt;code&gt;5.0.0-pre.20210317.1&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A floating version identifier like &lt;code&gt;4.x&lt;/code&gt; that returns the latest release from the LTS series started by Bazel 4.0.0.&lt;/li&gt; &#xA; &lt;li&gt;The hash of a Git commit. Please note that Bazel binaries are only available for commits that passed &lt;a href=&#34;https://buildkite.com/bazel/bazel-bazel&#34;&gt;Bazel CI&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, a few special version names are supported for our official releases only (these formats do not work when using a fork):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;last_green&lt;/code&gt; refers to the Bazel binary that was built at the most recent commit that passed &lt;a href=&#34;https://buildkite.com/bazel/bazel-bazel&#34;&gt;Bazel CI&lt;/a&gt;. Ideally this binary should be very close to Bazel-at-head.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;last_downstream_green&lt;/code&gt; points to the most recent Bazel binary that builds and tests all &lt;a href=&#34;https://buildkite.com/bazel/bazel-at-head-plus-downstream&#34;&gt;downstream projects&lt;/a&gt; successfully.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;last_rc&lt;/code&gt; points to the most recent release candidate. If there is no active release candidate, Bazelisk uses the latest Bazel release instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rolling&lt;/code&gt; refers to the latest rolling release (even if there is a newer LTS release).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Where does Bazelisk get Bazel from?&lt;/h2&gt; &#xA;&lt;p&gt;By default Bazelisk retrieves Bazel releases, release candidates and binaries built at green commits from Google Cloud Storage. The downloaded artifacts are validated against the SHA256 value recorded in &lt;code&gt;BAZELISK_VERIFY_SHA256&lt;/code&gt; if this variable is set in the configuration file.&lt;/p&gt; &#xA;&lt;p&gt;As mentioned in the previous section, the &lt;code&gt;&amp;lt;FORK&amp;gt;/&amp;lt;VERSION&amp;gt;&lt;/code&gt; version format allows you to use your own Bazel fork hosted on GitHub:&lt;/p&gt; &#xA;&lt;p&gt;If you want to create a fork with your own releases, you should follow the naming conventions that we use in &lt;code&gt;bazelbuild/bazel&lt;/code&gt; for the binary file names as this results in predictable URLs that are similar to the official ones. The URL format looks like &lt;code&gt;https://github.com/&amp;lt;FORK&amp;gt;/bazel/releases/download/&amp;lt;VERSION&amp;gt;/&amp;lt;FILENAME&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also override the URL by setting the environment variable &lt;code&gt;$BAZELISK_BASE_URL&lt;/code&gt;. Bazelisk will then append &lt;code&gt;/&amp;lt;VERSION&amp;gt;/&amp;lt;FILENAME&amp;gt;&lt;/code&gt; to the base URL instead of using the official release server. Bazelisk will read file &lt;a href=&#34;https://everything.curl.dev/usingcurl/netrc&#34;&gt;&lt;code&gt;~/.netrc&lt;/code&gt;&lt;/a&gt; for credentials for Basic authentication.&lt;/p&gt; &#xA;&lt;p&gt;If for any reason none of this works, you can also override the URL format altogether by setting the environment variable &lt;code&gt;$BAZELISK_FORMAT_URL&lt;/code&gt;. This variable takes a format-like string with placeholders and performs the following replacements to compute the download URL:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;%e&lt;/code&gt;: Extension suffix, such as the empty string or &lt;code&gt;.exe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%h&lt;/code&gt;: Value of &lt;code&gt;BAZELISK_VERIFY_SHA256&lt;/code&gt;, respecting uppercase/lowercase characters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%m&lt;/code&gt;: Machine architecture name, such as &lt;code&gt;arm64&lt;/code&gt; or &lt;code&gt;x86_64&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%o&lt;/code&gt;: Operating system name, such as &lt;code&gt;darwin&lt;/code&gt; or &lt;code&gt;linux&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%v&lt;/code&gt;: Bazel version as determined by Bazelisk.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%%&lt;/code&gt;: Literal &lt;code&gt;%&lt;/code&gt; for escaping purposes.&lt;/li&gt; &#xA; &lt;li&gt;All other characters after &lt;code&gt;%&lt;/code&gt; are reserved for future use and result in a processing error.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ensuring that your developers use Bazelisk rather than Bazel&lt;/h2&gt; &#xA;&lt;p&gt;Bazel installers typically provide Bazel&#39;s &lt;a href=&#34;https://github.com/bazelbuild/bazel/raw/master/scripts/packages/bazel.sh&#34;&gt;shell wrapper script&lt;/a&gt; as the &lt;code&gt;bazel&lt;/code&gt; on the PATH.&lt;/p&gt; &#xA;&lt;p&gt;When installed this way, Bazel checks the &lt;code&gt;.bazelversion&lt;/code&gt; file itself, but the failure when it mismatches with the actual version of Bazel can be quite confusing to developers. You may find yourself having to explain the difference between Bazel and Bazelisk (especially when you upgrade the pinned version). To avoid this, you can add a check in your &lt;code&gt;tools/bazel&lt;/code&gt; wrapper. Since Bazelisk is careful to avoid calling itself in a loop, it always calls the wrapper with the environment variable &lt;code&gt;BAZELISK_SKIP_WRAPPER&lt;/code&gt; set to `true&#39;. You can check for the presence of that variable, and when not found, report a useful error to your users about how to install Bazelisk.&lt;/p&gt; &#xA;&lt;p&gt;Note that if users directly downloaded a Bazel binary and put it in their PATH, rather than running an installer, then &lt;code&gt;tools/bazel&lt;/code&gt; and &lt;code&gt;.bazelversion&lt;/code&gt; are not checked. You could call the &lt;a href=&#34;https://github.com/bazelbuild/bazel-skylib/raw/1.1.1/docs/versions_doc.md#versionscheck&#34;&gt;versions.check&lt;/a&gt; starlark module from the beginning of your WORKSPACE to require users update their bazel.&lt;/p&gt; &#xA;&lt;h2&gt;Other features&lt;/h2&gt; &#xA;&lt;p&gt;The Go version of Bazelisk offers three new flags.&lt;/p&gt; &#xA;&lt;h3&gt;--strict&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;--strict&lt;/code&gt; expands to the set of incompatible flags which may be enabled for the given version of Bazel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bazelisk --strict build //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;--migrate&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;--migrate&lt;/code&gt; will run Bazel multiple times to help you identify compatibility issues. If the code fails with &lt;code&gt;--strict&lt;/code&gt;, the flag &lt;code&gt;--migrate&lt;/code&gt; will run Bazel with each one of the flag separately, and print a report at the end. This will show you which flags can safely enabled, and which flags require a migration.&lt;/p&gt; &#xA;&lt;h3&gt;--bisect&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;--bisect&lt;/code&gt; flag allows you to bisect Bazel versions to find which version introduced a build failure. You can specify the range of versions to bisect with &lt;code&gt;--bisect=&amp;lt;GOOD&amp;gt;..&amp;lt;BAD&amp;gt;&lt;/code&gt;, where GOOD is the last known working Bazel version and BAD is the first known non-working Bazel version. Bazelisk uses &lt;a href=&#34;https://docs.github.com/en/rest/commits/commits#compare-two-commits&#34;&gt;GitHub&#39;s compare API&lt;/a&gt; to get the list of commits to bisect. When GOOD is not an ancestor of BAD, GOOD is reset to their merge base commit.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Bisect between 6.0.0 and Bazel at HEAD&#xA;bazelisk --bisect=6.0.0..HEAD test //foo:bar_test&#xA;&#xA;# Bisect between 6.1.0 and the second release candidate of Bazel 6.2.0&#xA;bazelisk --bisect=6.1.0..release-6.2.0rc2 test //foo:bar_test&#xA;&#xA;# Bisect between two commits on the main branch (or branches with `release-` prefix) of the Bazel GitHub repository.&#xA;bazelisk --bisect=&amp;lt;good commit hash&amp;gt;..&amp;lt;bad commit hash&amp;gt; test //foo:bar_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that, Bazelisk uses prebuilt Bazel binaries at commits on the main and release branches, therefore you cannot bisect your local commits.&lt;/p&gt; &#xA;&lt;h3&gt;Useful environment variables for --migrate and --bisect&lt;/h3&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;BAZELISK_INCOMPATIBLE_FLAGS&lt;/code&gt; to set a list of incompatible flags (separated by &lt;code&gt;,&lt;/code&gt;) to be tested, otherwise Bazelisk tests all flags starting with &lt;code&gt;--incompatible_&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;BAZELISK_GITHUB_TOKEN&lt;/code&gt; to set a GitHub access token to use for API requests to avoid rate limiting when on shared networks.&lt;/p&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;BAZELISK_SHUTDOWN&lt;/code&gt; to run &lt;code&gt;shutdown&lt;/code&gt; between builds when migrating or bisecting if you suspect this affects your results.&lt;/p&gt; &#xA;&lt;p&gt;You can set &lt;code&gt;BAZELISK_CLEAN&lt;/code&gt; to run &lt;code&gt;clean --expunge&lt;/code&gt; between builds when migrating or bisecting if you suspect this affects your results.&lt;/p&gt; &#xA;&lt;h2&gt;tools/bazel&lt;/h2&gt; &#xA;&lt;p&gt;If &lt;code&gt;tools/bazel&lt;/code&gt; exists in your workspace root and is executable, Bazelisk will run this file, instead of the Bazel version it downloaded. It will set the environment variable &lt;code&gt;BAZEL_REAL&lt;/code&gt; to the path of the downloaded Bazel binary. This can be useful, if you have a wrapper script that e.g. ensures that environment variables are set to known good values. This behavior can be disabled by setting the environment variable &lt;code&gt;BAZELISK_SKIP_WRAPPER&lt;/code&gt; to any value (except the empty string) before launching Bazelisk.&lt;/p&gt; &#xA;&lt;p&gt;You can control the user agent that Bazelisk sends in all HTTP requests by setting &lt;code&gt;BAZELISK_USER_AGENT&lt;/code&gt; to the desired value.&lt;/p&gt; &#xA;&lt;h1&gt;.bazeliskrc configuration file&lt;/h1&gt; &#xA;&lt;p&gt;The Go version supports a &lt;code&gt;.bazeliskrc&lt;/code&gt; file in the root directory of a workspace and the user home directory. This file allows users to set environment variables persistently.&lt;/p&gt; &#xA;&lt;p&gt;Example file content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;USE_BAZEL_VERSION=0.19.0&#xA;BAZELISK_GITHUB_TOKEN=abc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following variables can be set:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_BASE_URL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_CLEAN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_GITHUB_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_HOME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_INCOMPATIBLE_FLAGS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_SHOW_PROGRESS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_SHUTDOWN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_SKIP_WRAPPER&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_USER_AGENT&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BAZELISK_VERIFY_SHA256&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;USE_BAZEL_VERSION&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Configuration variables are evaluated with precedence order. The preferred values are derived in order from highest to lowest precedence as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Variables defined in the environment&lt;/li&gt; &#xA; &lt;li&gt;Variables defined in the workspace root &lt;code&gt;.bazeliskrc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Variables defined in the user home &lt;code&gt;.bazeliskrc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;For ease of use, the Python version of Bazelisk is written to work with Python 2.7 and 3.x and only uses modules provided by the standard library.&lt;/p&gt; &#xA;&lt;p&gt;The Go version can be compiled to run natively on Linux, macOS and Windows. You need at least Go 1.11 to build Bazelisk, otherwise you&#39;ll run into errors like &lt;code&gt;undefined: os.UserCacheDir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install the Go version, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/bazelbuild/bazelisk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With Go 1.17 or later, the recommended way to install it is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/bazelbuild/bazelisk@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add it to your PATH:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export PATH=$PATH:$(go env GOPATH)/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, you may read about the &lt;a href=&#34;https://github.com/golang/go/wiki/SettingGOPATH&#34;&gt;&lt;code&gt;GOPATH&lt;/code&gt; environment variable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Ideas for the future&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add support for checked-in Bazel binaries.&lt;/li&gt; &#xA; &lt;li&gt;When the version label is set to a commit hash, first download a matching binary version of Bazel, then build Bazel automatically at that commit and use the resulting binary.&lt;/li&gt; &#xA; &lt;li&gt;Add support to automatically bisect a build failure to a culprit commit in Bazel. If you notice that you could successfully build your project using version X, but not using version X+1, then Bazelisk should be able to figure out the commit that caused the breakage and the Bazel team can easily fix the problem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Where does Bazelisk store the downloaded versions of Bazel?&lt;/h3&gt; &#xA;&lt;p&gt;It creates a directory called &#34;bazelisk&#34; inside your &lt;a href=&#34;https://golang.org/pkg/os/#UserCacheDir&#34;&gt;user cache directory&lt;/a&gt; and will store them there. Feel free to delete this directory at any time, as it can be regenerated automatically when required.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>singchia/geminio</title>
    <updated>2024-01-23T01:33:20Z</updated>
    <id>tag:github.com,2024-01-23:/singchia/geminio</id>
    <link href="https://github.com/singchia/geminio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;♊️ An application layer networking framework with rpc, bidirectional-rpc, multiplexer, raw-io and client-server consistency. 一个Go的应用层网络编程库，支持消息和确认、RPC、双向RPC、多路复用、多会话管理等&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/singchia/geminio/main/docs/geminio.png&#34; width=&#34;60%&#34; height=&#34;60%&#34;&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/singchia/geminio&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/badge/github.com/singchia/geminio.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/singchia/geminio&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/singchia/geminio&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-linux-brightgreen.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-mac-brightgreen.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-windows-brightgreen.svg?sanitize=true&#34; alt=&#34;Platform&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/singchia/geminio/main/README_cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Geminio is a library that provides &lt;strong&gt;application-layer&lt;/strong&gt; network programming, named after &lt;a href=&#34;https://harrypotter.fandom.com/wiki/Doubling_Charm&#34;&gt;Doubling_Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This library can make network development much easier with comprehensive capabilities like &lt;em&gt;&lt;strong&gt;RPC&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;bidirectional-RPC&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;messager&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;multi-sessions&lt;/strong&gt;&lt;/em&gt;, &lt;em&gt;&lt;strong&gt;multiplexing&lt;/strong&gt;&lt;/em&gt; and still &lt;em&gt;&lt;strong&gt;raw-connections&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/singchia/geminio/main/docs/biz-arch.png&#34; width=&#34;100%&#34; height=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;Interfaces&lt;/h3&gt; &#xA;&lt;p&gt;Most of the library&#39;s abstractions are defined in the &lt;code&gt;geminio.go&lt;/code&gt; file. You can understand the library&#39;s concepts by starting from &lt;code&gt;End&lt;/code&gt; and combining it with the architecture diagram above. Alternatively, you can jump to the usage section below and directly look at the examples.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;type RawRPCMessager interface {&#xA;    // raw&#xA;    Raw&#xA;    // rpc&#xA;    RPCer&#xA;    // message&#xA;    Messager&#xA;}&#xA;&#xA;type Stream interface {&#xA;    // a stream is a geminio&#xA;    RawRPCMessager&#xA;    // meta info for a stream&#xA;    StreamID() uint64&#xA;    ClientID() uint64&#xA;    Meta() []byte&#xA;}&#xA;    &#xA;// Stream multiplexer&#xA;type Multiplexer interface {&#xA;    OpenStream(opts ...*options.OpenStreamOptions) (Stream, error)&#xA;    AcceptStream() (Stream, error)&#xA;    ListStreams() []Stream&#xA;}&#xA;    &#xA;type End interface {&#xA;    // End is a default stream with streamID 1&#xA;    // Close on default stream will close all from the End&#xA;    Stream&#xA;    // End is a stream multiplexer&#xA;    Multiplexer&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Basic RPC&lt;/strong&gt; (registration and invocation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bidirectional RPC&lt;/strong&gt; (registration and invocation on both ends)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Message send and acknowledgment&lt;/strong&gt; (message consistency guarantee)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Synchronous/Asynchronous messaging&lt;/strong&gt; (waiting for return, asynchronous waiting)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Connection multiplexing&lt;/strong&gt; (abstract countless TCP/UDP connections on a single connection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Connection identification&lt;/strong&gt; (unique ClientID and StreamID)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Native net package compatibility&lt;/strong&gt; (support for abstracting net.Conn and net.Listener)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High availability&lt;/strong&gt; (client&#39;s continuous reconnection mechanism)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensive testing&lt;/strong&gt; (stress testing, chaos testing, runtime PProf analysis, etc.)&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All usage examples can be found &lt;a href=&#34;https://raw.githubusercontent.com/singchia/geminio/main/examples/usage&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Message&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;server:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;&#xA;    &#34;github.com/jumboframes/armorigo/log&#34;&#xA;    &#34;github.com/singchia/geminio/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    ln, err := server.Listen(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;server listen err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;&#xA;    for {&#xA;        end, err := ln.AcceptEnd()&#xA;        if err != nil {&#xA;            log.Errorf(&#34;accept err: %s&#34;, err)&#xA;            break&#xA;        }&#xA;        go func() {&#xA;            msg, err := end.Receive(context.TODO())&#xA;            if err != nil {&#xA;                return&#xA;            }&#xA;            log.Infof(&#34;end receive: %s&#34;, string(msg.Data()))&#xA;            msg.Done()&#xA;        }()&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;client:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;&#xA;    &#34;github.com/jumboframes/armorigo/log&#34;&#xA;    &#34;github.com/singchia/geminio/client&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    end, err := client.NewEnd(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;client dial err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;    msg := end.NewMessage([]byte(&#34;hello&#34;))&#xA;    err = end.Publish(context.TODO(), msg)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;end publish err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;    end.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RPC&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;server:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;&#xA;    &#34;github.com/jumboframes/armorigo/log&#34;&#xA;    &#34;github.com/singchia/geminio&#34;&#xA;    &#34;github.com/singchia/geminio/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    ln, err := server.Listen(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;server listen err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;&#xA;    for {&#xA;        end, err := ln.AcceptEnd()&#xA;        if err != nil {&#xA;            log.Errorf(&#34;accept err: %s&#34;, err)&#xA;            break&#xA;        }&#xA;        go func() {&#xA;            err := end.Register(context.TODO(), &#34;echo&#34;, echo)&#xA;            if err != nil {&#xA;                return&#xA;            }&#xA;        }()&#xA;    }&#xA;}&#xA;&#xA;func echo(_ context.Context, req geminio.Request, rsp geminio.Response) {&#xA;    rsp.SetData(req.Data())&#xA;    log.Info(&#34;echo:&#34;, string(req.Data()))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;client:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;&#xA;    &#34;github.com/jumboframes/armorigo/log&#34;&#xA;    &#34;github.com/singchia/geminio/client&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    opt := client.NewEndOptions()&#xA;    opt.SetWaitRemoteRPCs(&#34;echo&#34;)&#xA;    end, err := client.NewEnd(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;, opt)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;client dial err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;    rsp, err := end.Call(context.TODO(), &#34;echo&#34;, end.NewRequest([]byte(&#34;hello&#34;)))&#xA;    if err != nil {&#xA;        log.Errorf(&#34;end call err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;    if string(rsp.Data()) != &#34;hello&#34; {&#xA;        log.Fatal(&#34;wrong echo&#34;, string(rsp.Data()))&#xA;    }&#xA;    log.Info(&#34;echo:&#34;, string(rsp.Data()))&#xA;    end.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bidirectional RPC&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;server:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;&#xA;    &#34;github.com/jumboframes/armorigo/log&#34;&#xA;    &#34;github.com/singchia/geminio&#34;&#xA;    &#34;github.com/singchia/geminio/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    opt := server.NewEndOptions()&#xA;    // the option means all End from server will wait for the rpc registration&#xA;    opt.SetWaitRemoteRPCs(&#34;client-echo&#34;)&#xA;    // pre-register server side method&#xA;    opt.SetRegisterLocalRPCs(&amp;amp;geminio.MethodRPC{&#34;server-echo&#34;, echo})&#xA;&#xA;    ln, err := server.Listen(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;, opt)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;server listen err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;&#xA;    for {&#xA;        end, err := ln.AcceptEnd()&#xA;        if err != nil {&#xA;            log.Errorf(&#34;accept err: %s&#34;, err)&#xA;            break&#xA;        }&#xA;        go func() {&#xA;            // call client side method&#xA;            rsp, err := end.Call(context.TODO(), &#34;client-echo&#34;, end.NewRequest([]byte(&#34;foo&#34;)))&#xA;            if err != nil {&#xA;                log.Errorf(&#34;end call err: %s&#34;, err)&#xA;                return&#xA;            }&#xA;            if string(rsp.Data()) != &#34;foo&#34; {&#xA;                log.Fatal(&#34;wrong echo&#34;, string(rsp.Data()))&#xA;            }&#xA;            log.Info(&#34;client echo:&#34;, string(rsp.Data()))&#xA;        }()&#xA;    }&#xA;}&#xA;&#xA;func echo(_ context.Context, req geminio.Request, rsp geminio.Response) {&#xA;    rsp.SetData(req.Data())&#xA;    log.Info(&#34;server echo:&#34;, string(req.Data()))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;clent:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;&#xA;    &#34;github.com/jumboframes/armorigo/log&#34;&#xA;    &#34;github.com/singchia/geminio&#34;&#xA;    &#34;github.com/singchia/geminio/client&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    opt := client.NewEndOptions()&#xA;    // the option means all End from server will wait for the rpc registration&#xA;    opt.SetWaitRemoteRPCs(&#34;server-echo&#34;)&#xA;    // pre-register client side method&#xA;    opt.SetRegisterLocalRPCs(&amp;amp;geminio.MethodRPC{&#34;client-echo&#34;, echo})&#xA;&#xA;    end, err := client.NewEnd(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;, opt)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;client dial err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;    // call server side method&#xA;    rsp, err := end.Call(context.TODO(), &#34;server-echo&#34;, end.NewRequest([]byte(&#34;bar&#34;)))&#xA;    if err != nil {&#xA;        log.Errorf(&#34;end call err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;    if string(rsp.Data()) != &#34;bar&#34; {&#xA;        log.Fatal(&#34;wrong echo&#34;, string(rsp.Data()))&#xA;    }&#xA;    log.Info(&#34;server echo:&#34;, string(rsp.Data()))&#xA;    end.Close()&#xA;}&#xA;&#xA;func echo(_ context.Context, req geminio.Request, rsp geminio.Response) {&#xA;    rsp.SetData(req.Data())&#xA;    log.Info(&#34;client echo:&#34;, string(req.Data()))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiplexer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;server:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/jumboframes/armorigo/log&#34;&#xA;    &#34;github.com/singchia/geminio/server&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    ln, err := server.Listen(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;server listen err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;&#xA;    for {&#xA;        end, err := ln.AcceptEnd()&#xA;        if err != nil {&#xA;            log.Errorf(&#34;accept err: %s&#34;, err)&#xA;            break&#xA;        }&#xA;        // stream #1, and it&#39;s also a net.Conn&#xA;        sm1, err := end.OpenStream()&#xA;        if err != nil {&#xA;            log.Errorf(&#34;end open stream err: %s&#34;, err)&#xA;            break&#xA;        }&#xA;        sm1.Write([]byte(&#34;hello#1&#34;))&#xA;        sm1.Close()&#xA;&#xA;        // stream #2 and it&#39;s also a net.Conn&#xA;        sm2, err := end.OpenStream()&#xA;        if err != nil {&#xA;            log.Errorf(&#34;end open stream err: %s&#34;, err)&#xA;            break&#xA;        }&#xA;        sm2.Write([]byte(&#34;hello#2&#34;))&#xA;        sm2.Close()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;client:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;net&#34;&#xA;&#xA;    &#34;github.com/jumboframes/armorigo/log&#34;&#xA;    &#34;github.com/singchia/geminio/client&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    end, err := client.NewEnd(&#34;tcp&#34;, &#34;127.0.0.1:8080&#34;)&#xA;    if err != nil {&#xA;        log.Errorf(&#34;client dial err: %s&#34;, err)&#xA;        return&#xA;    }&#xA;    // the end is also a net.Listener&#xA;    ln := net.Listener(end)&#xA;    for {&#xA;        conn, err := ln.Accept()&#xA;        if err != nil {&#xA;            log.Errorf(&#34;end accept err: %s&#34;, err)&#xA;            break&#xA;        }&#xA;        go func(conn net.Conn) {&#xA;            buf := make([]byte, 128)&#xA;            _, err := conn.Read(buf)&#xA;            if err != nil {&#xA;                return&#xA;            }&#xA;            log.Info(&#34;read:&#34;, string(buf))&#xA;        }(conn)&#xA;    }&#xA;    end.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Message and Acknowledgment&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/singchia/geminio/main/examples/messager&#34;&gt;messager&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Message Queue&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/singchia/geminio/main/examples/mq&#34;&gt;mq&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chatroom&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/singchia/geminio/main/examples/chatroom&#34;&gt;chatroom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Relay&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/singchia/geminio/main/examples/relay&#34;&gt;relay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Intranet Penetration&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/singchia/geminio/main/examples/traversal&#34;&gt;traversal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;h3&gt;Benchmarks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;goos: darwin&#xA;goarch: amd64&#xA;pkg: github.com/singchia/geminio/test/bench&#xA;cpu: Intel(R) Core(TM) i5-6267U CPU @ 2.90GHz&#xA;BenchmarkMessage-4   &#x9;   10117&#x9;    112584 ns/op&#x9;1164.21 MB/s&#x9;    5764 B/op&#x9;     181 allocs/op&#xA;BenchmarkEnd-4       &#x9;   11644&#x9;     98586 ns/op&#x9;1329.52 MB/s&#x9;  550534 B/op&#x9;      73 allocs/op&#xA;BenchmarkStream-4    &#x9;   12301&#x9;     96955 ns/op&#x9;1351.88 MB/s&#x9;  550605 B/op&#x9;      82 allocs/op&#xA;BenchmarkRPC-4       &#x9;    6960&#x9;    165384 ns/op&#x9; 792.53 MB/s&#x9;   38381 B/op&#x9;     187 allocs/op&#xA;PASS&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;This library is implemented based on the following architecture&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/singchia/geminio/main/docs/design.png&#34; width=&#34;80%&#34; height=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you find any bugs, please submit the issue, we will respond in a short time.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute new features or help solve project problems, please feel free to submit a PR:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maintain consistent code style&lt;/li&gt; &#xA; &lt;li&gt;Submit one feature at a time&lt;/li&gt; &#xA; &lt;li&gt;Include unit tests with the code you submit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Copy-paste in your Readme.md file --&gt; &#xA;&lt;a href=&#34;https://next.ossinsight.io/widgets/official/compose-activity-trends?repo_id=412119706&#34; target=&#34;_blank&#34; style=&#34;display: block&#34; align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://next.ossinsight.io/widgets/official/compose-activity-trends/thumbnail.png?repo_id=412119706&amp;amp;image_size=auto&amp;amp;color_scheme=dark&#34; width=&#34;815&#34; height=&#34;auto&#34;&gt; &#xA;  &lt;img alt=&#34;Activity Trends of singchia/geminio - Last 28 days&#34; src=&#34;https://next.ossinsight.io/widgets/official/compose-activity-trends/thumbnail.png?repo_id=412119706&amp;amp;image_size=auto&amp;amp;color_scheme=light&#34; width=&#34;815&#34; height=&#34;auto&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;!-- Made with [OSS Insight](https://ossinsight.io/) --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;© Austin Zhai, 2023-2030&lt;/p&gt; &#xA;&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/singchia/geminio/raw/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>