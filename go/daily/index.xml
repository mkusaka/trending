<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-05T01:31:42Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>googleapis/go-genai</title>
    <updated>2025-05-05T01:31:42Z</updated>
    <id>tag:github.com,2025-05-05:/googleapis/go-genai</id>
    <link href="https://github.com/googleapis/go-genai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google Gen AI Go SDK provides an interface for developers to integrate Google&#39;s generative models into their Go applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/googleapis/go-genai&#34; alt=&#34;GitHub go.mod Go version&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/google.golang.org/genai&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/google.golang.org/genai.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® NEW ‚ú®&lt;/h2&gt; &#xA;&lt;h3&gt;Google Gemini Multimodal Live support&lt;/h3&gt; &#xA;&lt;p&gt;Introducing support for the Gemini Multimodal Live feature. Here&#39;s an example Multimodal Live server showing realtime conversation and video streaming: &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/go-genai/main/examples/live/live_streaming_server.go&#34;&gt;code&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Google Gen AI Go SDK&lt;/h1&gt; &#xA;&lt;p&gt;The Google Gen AI Go SDK enables developers to use Google&#39;s state-of-the-art generative AI models (like Gemini) to build AI-powered features and applications. This SDK supports use cases like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate text from text-only input&lt;/li&gt; &#xA; &lt;li&gt;Generate text from text-and-images input (multimodal)&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, with just a few lines of code, you can access Gemini&#39;s multimodal capabilities to generate text from text-and-image input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;parts := []*genai.Part{&#xA;  {Text: &#34;What&#39;s this image about?&#34;},&#xA;  {InlineData: &amp;amp;genai.Blob{Data: imageBytes, MIMEType: &#34;image/jpeg&#34;}},&#xA;}&#xA;result, err := client.Models.GenerateContent(ctx, &#34;gemini-2.0-flash&#34;, []*genai.Content{{Parts: parts}}, nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;p&gt;Add the SDK to your module with &lt;code&gt;go get google.golang.org/genai&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Create Clients&lt;/h2&gt; &#xA;&lt;h3&gt;Imports&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;google.golang.org/genai&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gemini API Client:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client, err := genai.NewClient(ctx, &amp;amp;genai.ClientConfig{&#xA;&#x9;APIKey:   apiKey,&#xA;&#x9;Backend:  genai.BackendGeminiAPI,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vertex AI Client:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client, err := genai.NewClient(ctx, &amp;amp;genai.ClientConfig{&#xA;&#x9;Project:  project,&#xA;&#x9;Location: location,&#xA;&#x9;Backend:  genai.BackendVertexAI,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The contents of this repository are licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License, version 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>blacktop/ipsw</title>
    <updated>2025-05-05T01:31:42Z</updated>
    <id>tag:github.com,2025-05-05:/blacktop/ipsw</id>
    <link href="https://github.com/blacktop/ipsw" rel="alternate"></link>
    <summary type="html">&lt;p&gt;iOS/macOS Research Swiss Army Knife&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/blacktop/ipsw&#34;&gt;&lt;img alt=&#34;IPSW Logo&#34; src=&#34;https://github.com/blacktop/ipsw/raw/master/www/static/img/logo/ipsw.svg?sanitize=true&#34; height=&#34;140&#34;&gt;&lt;/a&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;ipsw&lt;/h1&gt; &#xA;&lt;h4&gt;&lt;p align=&#34;center&#34;&gt;iOS/macOS Research Swiss Army Knife&lt;/p&gt;&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/blacktop/ipsw/actions&#34; alt=&#34;Actions&#34;&gt; &lt;img src=&#34;https://github.com/blacktop/ipsw/actions/workflows/go.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/blacktop/ipsw/releases/latest&#34; alt=&#34;Downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/blacktop/ipsw/total.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/blacktop/ipsw/releases&#34; alt=&#34;GitHub Release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/blacktop/ipsw.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://doge.mit-license.org&#34; alt=&#34;LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/:license-mit-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;What is &lt;code&gt;ipsw&lt;/code&gt; ü§î&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IPSW downloader/exploder&lt;/li&gt; &#xA; &lt;li&gt;OTA downloader/exploder&lt;/li&gt; &#xA; &lt;li&gt;macho parser&lt;/li&gt; &#xA; &lt;li&gt;ObjC class-dump&lt;/li&gt; &#xA; &lt;li&gt;Swift class-dump üöß&lt;/li&gt; &#xA; &lt;li&gt;dyld_shared_cache parser&lt;/li&gt; &#xA; &lt;li&gt;kernelcache parser&lt;/li&gt; &#xA; &lt;li&gt;img4 parser/decrypter&lt;/li&gt; &#xA; &lt;li&gt;device-tree parser&lt;/li&gt; &#xA; &lt;li&gt;ARM v9-a disassember&lt;/li&gt; &#xA; &lt;li&gt;research tool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Use my tap &lt;em&gt;(includes &lt;code&gt;extras&lt;/code&gt; version)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install blacktop/tap/ipsw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR use the &lt;strong&gt;official&lt;/strong&gt; formula&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install ipsw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install ipsw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scoop bucket add blacktop https://github.com/blacktop/scoop-bucket.git &#xA;scoop install blacktop/ipsw&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚ùØ ipsw&#xA;&#xA;Download and Parse IPSWs (and SO much more)&#xA;&#xA;Usage:&#xA;  ipsw [command]&#xA;&#xA;Available Commands:&#xA;  appstore        Interact with the App Store Connect API&#xA;  class-dump      ObjC class-dump a dylib from a DSC or MachO&#xA;  device-list     List all iOS devices&#xA;  diff            Diff IPSWs&#xA;  download        Download Apple Firmware files (and more)&#xA;  dtree           Parse DeviceTree&#xA;  dyld            Parse dyld_shared_cache&#xA;  ent             Search IPSW filesystem DMG or Folder for MachOs with a given entitlement&#xA;  extract         Extract kernelcache, dyld_shared_cache or DeviceTree from IPSW/OTA&#xA;  fw              Firmware commands&#xA;  help            Help about any command&#xA;  idev            USB connected device commands&#xA;  img4            Parse Img4&#xA;  info            Display IPSW/OTA Info&#xA;  kernel          Parse kernelcache&#xA;  macho           Parse MachO&#xA;  mdevs           List all MobileDevices in IPSW&#xA;  mount           Mount DMG from IPSW&#xA;  ota             Parse OTAs&#xA;  pkg             List contents of a DMG/PKG file&#xA;  plist           Dump plist as JSON&#xA;  ssh             SSH into a jailbroken device&#xA;  swift-dump      üöß Swift class-dump a dylib from a DSC or MachO&#xA;  symbolicate     Symbolicate ARM 64-bit crash logs (similar to Apple&#39;s symbolicatecrash)&#xA;  version         Print the version number of ipsw&#xA;  watch           Watch Github Commits&#xA;&#xA;Flags:&#xA;      --color           colorize output&#xA;      --config string   config file (default is $HOME/.config/ipsw/config.yaml)&#xA;  -h, --help            help for ipsw&#xA;      --no-color        disable colorize output&#xA;  -V, --verbose         verbose output&#xA;&#xA;Use &#34;ipsw [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blacktop.github.io/ipsw&#34;&gt;https://blacktop.github.io/ipsw&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üÜï AI Generated Wiki&lt;/h3&gt; &#xA;&lt;p&gt;You can now ask the repo questions ü§ñ&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://deepwiki.com/blacktop/ipsw&#34;&gt;https://deepwiki.com/blacktop/ipsw&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] It does contain some hallucinations etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;ipsw&lt;/code&gt; Diffs&lt;/h2&gt; &#xA;&lt;p&gt;A collection of &lt;code&gt;ipsw&lt;/code&gt; diffs can be found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/blacktop/ipsw-diffs&#34;&gt;https://github.com/blacktop/ipsw-diffs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;You have questions, need support and or just want to talk about &lt;code&gt;ipsw&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;p&gt;Here are ways to get in touch with the &lt;code&gt;ipsw&lt;/code&gt; community:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/blacktop__&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/follow_on_twitter-1DA1F2?style=for-the-badge&amp;amp;logo=twitter&amp;amp;logoColor=white&#34; alt=&#34;Follow Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mastodon.social/@blacktop&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/follow_on_mastodon-6364FF?style=for-the-badge&amp;amp;logo=mastodon&amp;amp;logoColor=white&#34; alt=&#34;Follow Mastodon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/blacktop/ipsw/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GITHUB_DISCUSSION-181717?style=for-the-badge&amp;amp;logo=github&amp;amp;logoColor=white&#34; alt=&#34;GitHub Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;macOS&lt;/code&gt; IPSW etc support is sometimes broken&lt;/p&gt; &lt;p&gt;Automated testing of &lt;code&gt;ipsw&lt;/code&gt; is challenging as it requires a lot of resources to test all the different IPSW flavors and OS versions etc. No CI/CD can really handle that unless I want to wait forever for it to run on each commit. Please create an &lt;a href=&#34;https://github.com/blacktop/ipsw/issues&#34;&gt;issue&lt;/a&gt; and I&#39;ll fix it as soon as I can ‚ù§Ô∏è &lt;em&gt;(&lt;strong&gt;NOTE:&lt;/strong&gt; a comprehensive test suite is in the roadmap so I can at least test on the few local IPSWs I have)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Big shout out to Jonathan Levin&#39;s amazing books and his legendary &lt;code&gt;jtool&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/blacktop/ipsw&#34;&gt;&lt;img src=&#34;https://starchart.cc/blacktop/ipsw.svg?variant=adaptive&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT Copyright (c) 2018-2025 &lt;strong&gt;blacktop&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>