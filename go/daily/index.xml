<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-01T01:32:39Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>EverythingSuckz/TG-FileStreamBot</title>
    <updated>2024-04-01T01:32:39Z</updated>
    <id>tag:github.com,2024-04-01:/EverythingSuckz/TG-FileStreamBot</id>
    <link href="https://github.com/EverythingSuckz/TG-FileStreamBot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A telegram bot that will give instant stream links for telegram files without the need of waiting till the download completes.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Telegram File Stream Bot&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;  &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a herf=&#34;https://github.com/EverythingSuckz/TG-FileStreamBot&#34;&gt; &lt;img src=&#34;https://telegra.ph/file/a8bb3f6b334ad1200ddb4.png&#34; height=&#34;100&#34; width=&#34;100&#34; alt=&#34;File Stream Bot Logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A Telegram bot to &lt;b&gt;generate direct link&lt;/b&gt; for your Telegram files. &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Checkout &lt;a href=&#34;https://github.com/EverythingSuckz/TG-FileStreamBot/tree/main&#34;&gt;python branch&lt;/a&gt; if you are interested in that.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#how-to-make-your-own&#34;&gt;How to make your own&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#deploy-to-heroku&#34;&gt;Deploy to Heroku&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#download-from-releases&#34;&gt;Download and run&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#run-using-docker-compose&#34;&gt;Run via Docker compose&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#run-using-docker&#34;&gt;Run via Docker&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#build-from-source&#34;&gt;Build and run&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#ubuntu&#34;&gt;Ubuntu&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#setting-up-things&#34;&gt;Setting up Things&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#required-vars&#34;&gt;Required environment variables&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#optional-vars&#34;&gt;Optional environment variables&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#use-multiple-bots-to-speed-up&#34;&gt;Using multiple bots&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#use-multiple-bots-to-speed-up&#34;&gt;Using user session to auto add bots&lt;/a&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#what-it-does&#34;&gt;What it does?&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#how-to-generate-a-session-string&#34;&gt;How to generate a session string?&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#contact-me&#34;&gt;Contact me&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;How to make your own&lt;/h2&gt; &#xA;&lt;h3&gt;Deploy to Heroku&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You&#39;ll have to &lt;a href=&#34;https://github.com/EverythingSuckz/TG-FileStreamBot/fork&#34;&gt;fork&lt;/a&gt; this repository to deploy to Heroku.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Press the below button to fast deploy to Heroku&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://heroku.com/deploy&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy To Heroku&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/config-vars#using-the-heroku-dashboard&#34;&gt;Click Here&lt;/a&gt; to know how to add / edit &lt;a href=&#34;https://raw.githubusercontent.com/EverythingSuckz/TG-FileStreamBot/main/#required-vars&#34;&gt;environment variables&lt;/a&gt; in Heroku.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Download from releases&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Head over to &lt;a href=&#34;https://github.com/EverythingSuckz/TG-FileStreamBot/releases&#34;&gt;releases&lt;/a&gt; tab, from the &lt;em&gt;pre release&lt;/em&gt; section, download the one for your platform and architecture.&lt;/li&gt; &#xA; &lt;li&gt;Extract the zip file to a folder.&lt;/li&gt; &#xA; &lt;li&gt;Create an a file named &lt;code&gt;fsb.env&lt;/code&gt; and add all the variables there (see &lt;code&gt;fsb.sample.env&lt;/code&gt; file for reference).&lt;/li&gt; &#xA; &lt;li&gt;Give the executable file permission to execute using the command &lt;code&gt;chmod +x fsb&lt;/code&gt; (Not required for windows).&lt;/li&gt; &#xA; &lt;li&gt;Run the bot using &lt;code&gt;./fsb run&lt;/code&gt; command. ( &lt;code&gt;./fsb.exe run&lt;/code&gt; for windows)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Run using docker-compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/EverythingSuckz/TG-FileStreamBot&#xA;cd TG-FileStreamBot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an a file named &lt;code&gt;fsb.env&lt;/code&gt; and add all the variables there (see &lt;code&gt;fsb.sample.env&lt;/code&gt; file for reference).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nano fsb.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build and run the docker-compose file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Run using docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --env-file fsb.env ghcr.io/everythingsuckz/fsb:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;fsb.env&lt;/code&gt; is the environment file containing all the variables.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Make sure to install go 1.21 or above. Refer &lt;a href=&#34;https://stackoverflow.com/a/17566846/15807350&#34;&gt;https://stackoverflow.com/a/17566846/15807350&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/EverythingSuckz/TG-FileStreamBot&#xA;cd TG-FileStreamBot&#xA;go build ./cmd/fsb/&#xA;chmod +x fsb&#xA;mv fsb.sample.env fsb.env&#xA;nano fsb.env&#xA;# (add your environment variables, see the next section for more info)&#xA;./fsb run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and to stop the program, do &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Make sure to install go 1.21 or above.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;git clone https://github.com/EverythingSuckz/TG-FileStreamBot&#xA;cd TG-FileStreamBot&#xA;go build ./cmd/fsb/&#xA;Rename-Item -LiteralPath &#34;.\fsb.sample.env&#34; -NewName &#34;.\fsb.env&#34;&#xA;notepad fsb.env&#xA;# (add your environment variables, see the next section for more info)&#xA;.\fsb run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and to stop the program, do &lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;C&lt;/kbd&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setting up things&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re locally hosting, create a file named &lt;code&gt;fsb.env&lt;/code&gt; in the root directory and add all the variables there. You may check the &lt;code&gt;fsb.sample.env&lt;/code&gt;. An example of &lt;code&gt;fsb.env&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;API_ID=452525&#xA;API_HASH=esx576f8738x883f3sfzx83&#xA;BOT_TOKEN=55838383:yourbottokenhere&#xA;LOG_CHANNEL=-10045145224562&#xA;PORT=8080&#xA;HOST=http://yourserverip&#xA;# (if you want to set up multiple bots)&#xA;MULTI_TOKEN1=55838373:yourworkerbottokenhere&#xA;MULTI_TOKEN2=55838355:yourworkerbottokenhere&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Required Vars&lt;/h3&gt; &#xA;&lt;p&gt;Before running the bot, you will need to set up the following mandatory variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;API_ID&lt;/code&gt; : This is the API ID for your Telegram account, which can be obtained from my.telegram.org.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;API_HASH&lt;/code&gt; : This is the API hash for your Telegram account, which can also be obtained from my.telegram.org.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;BOT_TOKEN&lt;/code&gt; : This is the bot token for the Telegram Media Streamer Bot, which can be obtained from &lt;a href=&#34;https://telegram.dog/BotFather&#34;&gt;@BotFather&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;LOG_CHANNEL&lt;/code&gt; : This is the channel ID for the log channel where the bot will forward media messages and store these files to make the generated direct links work. To obtain a channel ID, create a new telegram channel (public or private), post something in the channel, forward the message to &lt;a href=&#34;https://telegram.dog/MissRose_bot&#34;&gt;@missrose_bot&lt;/a&gt; and &lt;strong&gt;reply the forwarded message&lt;/strong&gt; with the /id command. Copy the forwarded channel ID and paste it into the this field.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional Vars&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the mandatory variables, you can also set the following optional variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;PORT&lt;/code&gt; : This sets the port that your webapp will listen to. The default value is 8080.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HOST&lt;/code&gt; : A Fully Qualified Domain Name if present or use your server IP. (eg. &lt;code&gt;https://example.com&lt;/code&gt; or &lt;code&gt;http://14.1.154.2:8080&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HASH_LENGTH&lt;/code&gt; : Custom hash length for generated URLs. The hash length must be greater than 5 and less than or equal to 32. The default value is 6.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;USE_SESSION_FILE&lt;/code&gt; : Use session files for worker client(s). This speeds up the worker bot startups. (default: &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;USER_SESSION&lt;/code&gt; : A pyrogram session string for a user bot. Used for auto adding the bots to &lt;code&gt;LOG_CHANNEL&lt;/code&gt;. (default: &lt;code&gt;null&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ALLOWED_USERS&lt;/code&gt; : A list of user IDs separated by comma (&lt;code&gt;,&lt;/code&gt;). If this is set, only the users in this list will be able to use the bot. (default: &lt;code&gt;null&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Use Multiple Bots to speed up&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] &lt;strong&gt;What it multi-client feature and what it does?&lt;/strong&gt; &lt;br&gt; This feature shares the Telegram API requests between worker bots to speed up download speed when many users are using the server and to avoid the flood limits that are set by Telegram. &lt;br&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] You can add up to 50 bots since 50 is the max amount of bot admins you can set in a Telegram Channel.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To enable multi-client, generate new bot tokens and add it as your &lt;code&gt;fsb.env&lt;/code&gt; with the following key names.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MULTI_TOKEN1&lt;/code&gt;: Add your first bot token here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MULTI_TOKEN2&lt;/code&gt;: Add your second bot token here.&lt;/p&gt; &#xA;&lt;p&gt;you may also add as many as bots you want. (max limit is 50) &lt;code&gt;MULTI_TOKEN3&lt;/code&gt;, &lt;code&gt;MULTI_TOKEN4&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] Don&#39;t forget to add all these worker bots to the &lt;code&gt;LOG_CHANNEL&lt;/code&gt; for the proper functioning&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Using user session to auto add bots&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This might sometimes result in your account getting resticted or banned. &lt;strong&gt;Only newly created accounts are prone to this.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To use this feature, you need to generate a pyrogram session string for the user account and add it to the &lt;code&gt;USER_SESSION&lt;/code&gt; variable in the &lt;code&gt;fsb.env&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h4&gt;What it does?&lt;/h4&gt; &#xA;&lt;p&gt;This feature is used to auto add the worker bots to the &lt;code&gt;LOG_CHANNEL&lt;/code&gt; when they are started. This is useful when you have a lot of worker bots and you don&#39;t want to add them manually to the &lt;code&gt;LOG_CHANNEL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;How to generate a session string?&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to generate a session string is by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./fsb session --api-id &amp;lt;your api id&amp;gt; --api-hash &amp;lt;your api hash&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://github.com/EverythingSuckz/TG-FileStreamBot/assets/65120517/b5bd2b88-0e1f-4dbc-ad9a-faa6d5a17320&#34; height=&#34;300&#34;&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will generate a session string for your user account using QR code authentication. Authentication via phone number is not supported yet and will be added in the future.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to contribute to this project if you have any further ideas&lt;/p&gt; &#xA;&lt;h2&gt;Contact me&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xn--r1a.click/wrench_labs&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Join&amp;amp;message=Telegram%20Channel&amp;amp;color=blueviolet&amp;amp;style=for-the-badge&amp;amp;logo=telegram&amp;amp;logoColor=violet&#34; alt=&#34;Telegram Channel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://xn--r1a.click/AlteredVoid&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Join&amp;amp;message=Telegram%20Group&amp;amp;color=blueviolet&amp;amp;style=for-the-badge&amp;amp;logo=telegram&amp;amp;logoColor=violet&#34; alt=&#34;Telegram Group&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can contact either via my &lt;a href=&#34;https://xn--r1a.click/AlteredVoid&#34;&gt;Telegram Group&lt;/a&gt; or you can message me on &lt;a href=&#34;https://xn--r1a.click/EverythingSuckz&#34;&gt;@EverythingSuckz&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/celestix&#34;&gt;@celestix&lt;/a&gt; for &lt;a href=&#34;https://github.com/celestix/gotgproto&#34;&gt;gotgproto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/divyam234/teldrive&#34;&gt;@divyam234&lt;/a&gt; for his &lt;a href=&#34;https://github.com/divyam234/teldrive&#34;&gt;Teldrive&lt;/a&gt; Project&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2023 &lt;a href=&#34;https://github.com/EverythingSuckz&#34;&gt;EverythingSuckz&lt;/a&gt; under &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;GNU Affero General Public License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;TG-FileStreamBot is Free Software: You can use, study share and improve it at your will. Specifically you can redistribute and/or modify it under the terms of the &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;GNU Affero General Public License&lt;/a&gt; as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. Also keep in mind that all the forks of this repository MUST BE OPEN-SOURCE and MUST BE UNDER THE SAME LICENSE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pojntfx/weron</title>
    <updated>2024-04-01T01:32:39Z</updated>
    <id>tag:github.com,2024-04-01:/pojntfx/weron</id>
    <link href="https://github.com/pojntfx/weron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Overlay networks based on WebRTC.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;weron&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/docs/logo-readme.png&#34; alt=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overlay networks based on WebRTC.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ weron has not yet been audited! While we try to make weron as secure as possible, it has not yet undergone a formal security audit by a third party. Please keep this in mind if you use it for security-critical applications. ⚠️&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/pojntfx/weron/actions/workflows/hydrun.yaml&#34;&gt;&lt;img src=&#34;https://github.com/pojntfx/weron/actions/workflows/hydrun.yaml/badge.svg?sanitize=true&#34; alt=&#34;hydrun CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pojntfx/weron/actions/workflows/docker.yaml&#34;&gt;&lt;img src=&#34;https://github.com/pojntfx/weron/actions/workflows/docker.yaml/badge.svg?sanitize=true&#34; alt=&#34;Docker CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/go%20version-%3E=1.18-61CFDD.svg?sanitize=true&#34; alt=&#34;Go Version&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/pojntfx/weron.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#weron:matrix.org?via=matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/weron:matrix.org&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pojntfx/weron/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/pojntfx/weron/total?label=binary%20downloads&#34; alt=&#34;Binary Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;weron provides lean, fast &amp;amp; secure overlay networks based on WebRTC.&lt;/p&gt; &#xA;&lt;p&gt;It enables you too ...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Access nodes behind NAT&lt;/strong&gt;: Because weron uses WebRTC to establish connections between nodes, it can easily traverse corporate firewalls and NATs using STUN, or even use a TURN server to tunnel traffic. This can be very useful to for example SSH into your homelab without forwarding any ports on your router.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure your home network&lt;/strong&gt;: Due to the relatively low overhead of WebRTC in low-latency networks, weron can be used to secure traffic between nodes in a LAN without a significant performance hit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Join local nodes into a cloud network&lt;/strong&gt;: If you run for example a Kubernetes cluster with nodes based on cloud instances but also want to join your on-prem nodes into it, you can use weron to create a trusted network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bypass censorship&lt;/strong&gt;: The underlying WebRTC suite, which is what popular videoconferencing tools such as Zoom, Teams and Meet are built on, is hard to block on a network level, making it a valuable addition to your toolbox for bypassing state or corporate censorship.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Write your own peer-to-peer protocols&lt;/strong&gt;: The simple API makes writing distributed applications with automatic reconnects, multiple datachannels etc. easy.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Containerized&lt;/h3&gt; &#xA;&lt;p&gt;You can get the OCI image like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ podman pull ghcr.io/pojntfx/weron&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Natively&lt;/h3&gt; &#xA;&lt;p&gt;Static binaries are available on &lt;a href=&#34;https://github.com/pojntfx/weron/releases&#34;&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Linux, you can install them like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -L -o /tmp/weron &#34;https://github.com/pojntfx/weron/releases/latest/download/weron.linux-$(uname -m)&#34;&#xA;$ sudo install /tmp/weron /usr/local/bin&#xA;$ sudo setcap cap_net_admin+ep /usr/local/bin/weron # This allows rootless execution&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS, you can use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ curl -L -o /tmp/weron &#34;https://github.com/pojntfx/weron/releases/latest/download/weron.darwin-$(uname -m)&#34;&#xA;$ sudo install /tmp/weron /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, the following should work (using PowerShell as administrator):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PS&amp;gt; Invoke-WebRequest https://github.com/pojntfx/weron/releases/latest/download/weron.windows-x86_64.exe -OutFile \Windows\System32\weron.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find binaries for more operating systems and architectures on &lt;a href=&#34;https://github.com/pojntfx/weron/releases&#34;&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;TL;DR: Join a layer 3 (IP) overlay network on the hosted signaling server with &lt;code&gt;sudo weron vpn ip --community mycommunity --password mypassword --key mykey --ips 2001:db8::1/32,192.0.2.1/24&lt;/code&gt; and a layer 2 (Ethernet) overlay network with &lt;code&gt;sudo weron vpn ethernet --community mycommunity --password mypassword --key mykey&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;1. Start a Signaling Server with &lt;code&gt;weron signaler&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The signaling server connects peers with each other by exchanging connection information between them. It also manages access to communities through the &lt;code&gt;--password&lt;/code&gt; flag of clients and can maintain persistent communities even after all peers have disconnected.&lt;/p&gt; &#xA;&lt;p&gt;While it is possible and reasonably private (in addition to TLS, connection information is encrypted using the &lt;code&gt;--key&lt;/code&gt; flag of clients) to use the hosted signaling server at &lt;code&gt;wss://weron.up.railway.app/&lt;/code&gt;, hosting it yourself has many benefits, such as lower latency and even better privacy.&lt;/p&gt; &#xA;&lt;p&gt;The signaling server can use an in-process broker with an in-memory database or Redis and PostgreSQL; for production use the latter configuration is strongly recommended, as it allows you to easily scale the signaling server horizontally. This is particularly important if you want to scale your server infrastructure across multiple continents, as intra-cloud backbones usually have lower latency than residential connections, which reduces the amount of time required to connect peers with each other.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand containerized instructions&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo podman network create weron&#xA;&#xA;$ sudo podman run -d --restart=always --label &#34;io.containers.autoupdate=image&#34; --name weron-postgres --network weron -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_DB=weron_communities postgres&#xA;$ sudo podman generate systemd --new weron-postgres | sudo tee /lib/systemd/system/weron-postgres.service&#xA;&#xA;$ sudo podman run -d --restart=always --label &#34;io.containers.autoupdate=image&#34; --name weron-redis --network weron redis&#xA;$ sudo podman generate systemd --new weron-redis | sudo tee /lib/systemd/system/weron-redis.service&#xA;&#xA;$ sudo podman run -d --restart=always --label &#34;io.containers.autoupdate=image&#34; --name weron-signaler --network weron -p 1337:1337 -e DATABASE_URL=&#39;postgres://postgres@weron-postgres:5432/weron_communities?sslmode=disable&#39; -e REDIS_URL=&#39;redis://weron-redis:6379/1&#39; -e API_PASSWORD=&#39;myapipassword&#39; ghcr.io/pojntfx/weron:unstable weron signaler&#xA;$ sudo podman generate systemd --new weron-signaler | sudo tee /lib/systemd/system/weron-signaler.service&#xA;&#xA;$ sudo systemctl daemon-reload&#xA;&#xA;$ sudo systemctl enable --now weron-postgres&#xA;$ sudo systemctl enable --now weron-redis&#xA;$ sudo systemctl enable --now weron-signaler&#xA;&#xA;$ sudo firewall-cmd --permanent --add-port=1337/tcp&#xA;$ sudo firewall-cmd --reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand native instructions&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo podman run -d --restart=always --label &#34;io.containers.autoupdate=image&#34; --name weron-postgres -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_DB=weron_communities -p 127.0.0.1:5432:5432 postgres&#xA;sudo podman generate systemd --new weron-postgres | sudo tee /lib/systemd/system/weron-postgres.service&#xA;&#xA;sudo podman run -d --restart=always --label &#34;io.containers.autoupdate=image&#34; --name weron-redis -p 127.0.0.1:6379:6379 redis&#xA;sudo podman generate systemd --new weron-redis | sudo tee /lib/systemd/system/weron-redis.service&#xA;&#xA;sudo tee /etc/systemd/system/weron-signaler.service&amp;lt;&amp;lt;&#39;EOT&#39;&#xA;[Unit]&#xA;Description=weron Signaling Server&#xA;After=weron-postgres.service weron-redis.service&#xA;&#xA;[Service]&#xA;ExecStart=/usr/local/bin/weron signaler --verbose=7&#xA;Environment=&#34;DATABASE_URL=postgres://postgres@localhost:5432/weron_communities?sslmode=disable&#34;&#xA;Environment=&#34;REDIS_URL=redis://localhost:6379/1&#34;&#xA;Environment=&#34;API_PASSWORD=myapipassword&#34;&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;EOT&#xA;&#xA;sudo systemctl daemon-reload&#xA;&#xA;sudo systemctl restart weron-postgres&#xA;sudo systemctl restart weron-redis&#xA;sudo systemctl restart weron-signaler&#xA;&#xA;sudo firewall-cmd --permanent --add-port=1337/tcp&#xA;sudo firewall-cmd --reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;It should now be reachable on &lt;code&gt;ws://localhost:1337/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use it in production, put this signaling server behind a TLS-enabled reverse proxy such as &lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt; or &lt;a href=&#34;https://traefik.io/&#34;&gt;Traefik&lt;/a&gt;. You may also either want to keep &lt;code&gt;API_PASSWORD&lt;/code&gt; empty to disable the management API completely or use OpenID Connect to authenticate instead; for more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/#signaling-server&#34;&gt;signaling server reference&lt;/a&gt;. You can also embed the signaling server in your own application using it&#39;s &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtcsgl&#34;&gt;Go API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2. Manage Communities with &lt;code&gt;weron manager&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;While it is possible to create ephemeral communities on a signaling server without any kind of authorization, you probably want to create a persistent community for most applications. Ephemeral communities get created and deleted automatically as clients join or leave, persistent communities will never get deleted automatically. You can manage these communities using the manager CLI.&lt;/p&gt; &#xA;&lt;p&gt;If you want to work on your self-hosted signaling server, first set the remote address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export WERON_RADDR=&#39;http://localhost:1337/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, set the API password using the &lt;code&gt;API_PASSWORD&lt;/code&gt; env variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export API_PASSWORD=&#39;myapipassword&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use OIDC to authenticate, you can instead set the API password using &lt;a href=&#34;https://github.com/pojntfx/goit&#34;&gt;goit&lt;/a&gt; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export OIDC_CLIENT_ID=&#39;Ab7OLrQibhXUzKHGWYDFieLa2KqZmFzb&#39; OIDC_ISSUER=&#39;https://pojntfx.eu.auth0.com/&#39; OIDC_REDIRECT_URL=&#39;http://localhost:11337&#39;&#xA;$ export API_KEY=&#34;$(goit)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we now list the communities, we see that none currently exist:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron manager list&#xA;id,clients,persistent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can create a persistent community using &lt;code&gt;weron create&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron manager create --community mycommunity --password mypassword&#xA;id,clients,persistent&#xA;mycommunity,0,true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to delete communities using &lt;code&gt;weron delete&lt;/code&gt;, which will also disconnect all joined peers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron manager delete --community mycommunity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/#manager&#34;&gt;manager reference&lt;/a&gt;. You can also embed the manager in your own application using its &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtcmgr&#34;&gt;Go API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;3. Test the System with &lt;code&gt;weron chat&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you want to work on your self-hosted signaling server, first set the remote address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ export WERON_RADDR=&#39;ws://localhost:1337/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The chat is an easy way to test if everything is working correctly. To join a chatroom, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron chat --community mycommunity --password mypassword --key mykey --names user1,user2,user3 --channels one,two,three&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On another peer, run the following (if your signaling server is public, you can run this anywhere on the planet):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron chat --community mycommunity --password mypassword --key mykey --names user1,user2,user3 --channels one,two,three&#xA;.wss://weron.up.railway.app/&#xA;user2!&#xA;+user1@one&#xA;+user1@two&#xA;+user1@three&#xA;user2&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now start sending and receiving messages or add new peers to your chatroom to test the network.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/#chat&#34;&gt;chat reference&lt;/a&gt;. You can also embed the chat in your own application using its &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtcchat&#34;&gt;Go API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;4. Measure Latency with &lt;code&gt;weron utility latency&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;An insightful metric of your network is its latency, which you can measure with this utility; think of this as &lt;code&gt;ping&lt;/code&gt;, but for WebRTC. First, start the latency measurement server like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron utility latency --community mycommunity --password mypassword --key mykey --server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On another peer, launch the client, which should start measuring the latency immediately; press &lt;kbd&gt;CTRL&lt;/kbd&gt; &lt;kbd&gt;C&lt;/kbd&gt; to stop it and get the total statistics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron utility latency --community mycommunity --password mypassword --key mykey&#xA;# ...&#xA;128 B written and acknowledged in 110.111µs&#xA;128 B written and acknowledged in 386.12µs&#xA;128 B written and acknowledged in 310.458µs&#xA;128 B written and acknowledged in 335.341µs&#xA;128 B written and acknowledged in 264.149µs&#xA;^CAverage latency: 281.235µs (5 packets written) Min: 110.111µs Max: 386.12µs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/#latency-measurement-utility&#34;&gt;latency measurement utility reference&lt;/a&gt;. You can also embed the utility in your own application using its &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtcltc&#34;&gt;Go API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;5. Measure Throughput with &lt;code&gt;weron utility throughput&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you want to transfer large amounts of data, your network&#39;s throughput is a key characteristic. This utility allows you to measure this metric between two nodes; think of it as &lt;code&gt;iperf&lt;/code&gt;, but for WebRTC. First, start the throughput measurement server like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron utility throughput --community mycommunity --password mypassword --key mykey --server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On another peer, launch the client, which should start measuring the throughput immediately; press &lt;kbd&gt;CTRL&lt;/kbd&gt; &lt;kbd&gt;C&lt;/kbd&gt; to stop it and get the total statistics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron utility throughput --community mycommunity --password mypassword --key mykey&#xA;# ...&#xA;97.907 MB/s (783.253 Mb/s) (50 MB read in 510.690403ms)&#xA;64.844 MB/s (518.755 Mb/s) (50 MB read in 771.076908ms)&#xA;103.360 MB/s (826.881 Mb/s) (50 MB read in 483.745832ms)&#xA;89.335 MB/s (714.678 Mb/s) (50 MB read in 559.692495ms)&#xA;85.582 MB/s (684.657 Mb/s) (50 MB read in 584.233931ms)&#xA;^CAverage throughput: 74.295 MB/s (594.359 Mb/s) (250 MB written in 3.364971672s) Min: 64.844 MB/s Max: 103.360 MB/s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/#throughput-measurement-utility&#34;&gt;throughput measurement utility reference&lt;/a&gt;. You can also embed the utility in your own application using it&#39;s &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtcthr&#34;&gt;Go API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;6. Create a Layer 3 (IP) Overlay Network with &lt;code&gt;weron vpn ip&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you want to join multiple nodes into an overlay network, the IP VPN is the best choice. It works similarly to i.e. Tailscale/WireGuard and can either dynamically allocate an IP address from a CIDR notation or statically assign one for you. On Windows, make sure to install &lt;a href=&#34;https://build.openvpn.net/downloads/releases/&#34;&gt;TAP-Windows&lt;/a&gt; first. Also note that due to technical limitations, only one IPv4 or IPv6 network and only one VPN instance at a time is supported on Windows; on macOS, only IPv6 networks are supported and IPv4 networks are ignored. To get started, launch the VPN on the first peer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo weron vpn ip --community mycommunity --password mypassword --key mykey --ips 2001:db8::1/64,192.0.2.1/24&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;addr&#34;:&#34;wss://weron.up.railway.app/&#34;,&#34;time&#34;:&#34;2022-05-06T22:20:51+02:00&#34;,&#34;message&#34;:&#34;Connecting to signaler&#34;}&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;id&#34;:&#34;[\&#34;2001:db8::6a/64\&#34;,\&#34;192.0.2.107/24\&#34;]&#34;,&#34;time&#34;:&#34;2022-05-06T22:20:56+02:00&#34;,&#34;message&#34;:&#34;Connected to signaler&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On another peer, launch the VPN as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo weron vpn ip --community mycommunity --password mypassword --key mykey --ips 2001:db8::1/64,192.0.2.1/24&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;addr&#34;:&#34;wss://weron.up.railway.app/&#34;,&#34;time&#34;:&#34;2022-05-06T22:22:30+02:00&#34;,&#34;message&#34;:&#34;Connecting to signaler&#34;}&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;id&#34;:&#34;[\&#34;2001:db8::b9/64\&#34;,\&#34;192.0.2.186/24\&#34;]&#34;,&#34;time&#34;:&#34;2022-05-06T22:22:36+02:00&#34;,&#34;message&#34;:&#34;Connected to signaler&#34;}&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;id&#34;:&#34;[\&#34;2001:db8::6a/64\&#34;,\&#34;192.0.2.107/24\&#34;]&#34;,&#34;time&#34;:&#34;2022-05-06T22:22:36+02:00&#34;,&#34;message&#34;:&#34;Connected to peer&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now communicate between the peers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ping 2001:db8::b9&#xA;PING 2001:db8::b9(2001:db8::b9) 56 data bytes&#xA;64 bytes from 2001:db8::b9: icmp_seq=1 ttl=64 time=1.07 ms&#xA;64 bytes from 2001:db8::b9: icmp_seq=2 ttl=64 time=1.36 ms&#xA;64 bytes from 2001:db8::b9: icmp_seq=3 ttl=64 time=1.20 ms&#xA;64 bytes from 2001:db8::b9: icmp_seq=4 ttl=64 time=1.10 ms&#xA;^C&#xA;--- 2001:db8::b9 ping statistics ---&#xA;4 packets transmitted, 4 received, 0% packet loss, time 3002ms&#xA;rtt min/avg/max/mdev = 1.066/1.180/1.361/0.114 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you temporarily lose the network connection, the network topology changes etc. it will automatically reconnect. For more information and limitations on proprietary operating systems like macOS, see the &lt;a href=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/#layer-3-ip-overlay-networks&#34;&gt;IP VPN reference&lt;/a&gt;. You can also embed the utility in your own application using its &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtcip&#34;&gt;Go API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;7. Create a Layer 2 (Ethernet) Overlay Network with &lt;code&gt;weron vpn ethernet&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you want more flexibility or work on non-IP networks, the Ethernet VPN is a good choice. It works similarly to &lt;code&gt;n2n&lt;/code&gt; or ZeroTier. Due to API restrictions, this VPN type &lt;a href=&#34;https://support.apple.com/guide/deployment/system-and-kernel-extensions-in-macos-depa5fb8376f/web&#34;&gt;is not available on macOS&lt;/a&gt;; use &lt;a href=&#34;https://asahilinux.org/&#34;&gt;Asahi Linux&lt;/a&gt;, a computer that respects your freedoms or the layer 3 (IP) VPN instead. To get started, launch the VPN on the first peer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo weron vpn ethernet --community mycommunity --password mypassword --key mykey&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;addr&#34;:&#34;wss://weron.up.railway.app/&#34;,&#34;time&#34;:&#34;2022-05-06T22:42:10+02:00&#34;,&#34;message&#34;:&#34;Connecting to signaler&#34;}&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;id&#34;:&#34;fe:60:a5:8b:81:36&#34;,&#34;time&#34;:&#34;2022-05-06T22:42:11+02:00&#34;,&#34;message&#34;:&#34;Connected to signaler&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to add an IP address to the TAP interface, do so with &lt;code&gt;iproute2&lt;/code&gt; or your OS tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ip addr add 192.0.2.1/24 dev tap0&#xA;$ sudo ip addr add 2001:db8::1/32 dev tap0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On another peer, launch the VPN as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo weron vpn ethernet --community mycommunity --password mypassword --key mykey&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;addr&#34;:&#34;wss://weron.up.railway.app/&#34;,&#34;time&#34;:&#34;2022-05-06T22:52:56+02:00&#34;,&#34;message&#34;:&#34;Connecting to signaler&#34;}&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;id&#34;:&#34;b2:ac:ae:b6:32:8c&#34;,&#34;time&#34;:&#34;2022-05-06T22:52:57+02:00&#34;,&#34;message&#34;:&#34;Connected to signaler&#34;}&#xA;{&#34;level&#34;:&#34;info&#34;,&#34;id&#34;:&#34;fe:60:a5:8b:81:36&#34;,&#34;time&#34;:&#34;2022-05-06T22:52:57+02:00&#34;,&#34;message&#34;:&#34;Connected to peer&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add the IP addresses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ sudo ip addr add 192.0.2.2/24 dev tap0&#xA;$ sudo ip addr add 2001:db8::2/32 dev tap0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now communicate between the peers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ping 2001:db8::2&#xA;PING 2001:db8::2(2001:db8::2) 56 data bytes&#xA;64 bytes from 2001:db8::2: icmp_seq=1 ttl=64 time=1.20 ms&#xA;64 bytes from 2001:db8::2: icmp_seq=2 ttl=64 time=1.14 ms&#xA;64 bytes from 2001:db8::2: icmp_seq=3 ttl=64 time=1.24 ms&#xA;^C&#xA;--- 2001:db8::2 ping statistics ---&#xA;3 packets transmitted, 3 received, 0% packet loss, time 2002ms&#xA;rtt min/avg/max/mdev = 1.136/1.193/1.239/0.042 ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you temporarily lose the network connection, the network topology changes etc. it will automatically reconnect. You can also embed the utility in your own application using its &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtceth&#34;&gt;Go API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;8. Write your own protocol with &lt;code&gt;wrtcconn&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;It is almost trivial to build your own distributed applications with weron, similarly to how &lt;a href=&#34;https://peerjs.com/&#34;&gt;PeerJS&lt;/a&gt; works. Here is the core logic behind a simple echo example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ...&#xA;for {&#xA;&#x9;select {&#xA;&#x9;case id := &amp;lt;-ids:&#xA;&#x9;&#x9;log.Println(&#34;Connected to signaler&#34;, id)&#xA;&#x9;case peer := &amp;lt;-adapter.Accept():&#xA;&#x9;&#x9;log.Println(&#34;Connected to peer&#34;, peer.PeerID, &#34;and channel&#34;, peer.ChannelID)&#xA;&#xA;&#x9;&#x9;go func() {&#xA;&#x9;&#x9;&#x9;defer func() {&#xA;&#x9;&#x9;&#x9;&#x9;log.Println(&#34;Disconnected from peer&#34;, peer.PeerID, &#34;and channel&#34;, peer.ChannelID)&#xA;&#x9;&#x9;&#x9;}()&#xA;&#xA;&#x9;&#x9;&#x9;reader := bufio.NewScanner(peer.Conn)&#xA;&#x9;&#x9;&#x9;for reader.Scan() {&#xA;&#x9;&#x9;&#x9;&#x9;log.Printf(&#34;%s&#34;, reader.Bytes())&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}()&#xA;&#xA;&#x9;&#x9;go func() {&#xA;&#x9;&#x9;&#x9;for {&#xA;&#x9;&#x9;&#x9;&#x9;if _, err := peer.Conn.Write([]byte(&#34;Hello!\n&#34;)); err != nil {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;time.Sleep(time.Second)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}()&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can either use the &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtcconn#Adapter&#34;&gt;minimal adapter&lt;/a&gt; or the &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron/pkg/wrtcconn#NamedAdapter&#34;&gt;named adapter&lt;/a&gt;; the latter negotiates a username between the peers, while the former does not check for duplicates. For more information, check out the &lt;a href=&#34;https://pkg.go.dev/github.com/pojntfx/weron&#34;&gt;Go API&lt;/a&gt; and take a look at the provided &lt;a href=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/examples&#34;&gt;examples&lt;/a&gt;, utilities and services in the package for examples.&lt;/p&gt; &#xA;&lt;p&gt;🚀 &lt;strong&gt;That&#39;s it!&lt;/strong&gt; We hope you enjoy using weron.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Command Line Arguments&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron --help&#xA;Overlay networks based on WebRTC.&#xA;&#xA;Find more information at:&#xA;https://github.com/pojntfx/weron&#xA;&#xA;Usage:&#xA;  weron [command]&#xA;&#xA;Available Commands:&#xA;  chat        Chat over the overlay network&#xA;  completion  Generate the autocompletion script for the specified shell&#xA;  help        Help about any command&#xA;  manager     Manage a signaling server&#xA;  signaler    Start a signaling server&#xA;  utility     Utilities for overlay networks&#xA;  vpn         Join virtual private networks built on overlay networks&#xA;&#xA;Flags:&#xA;  -h, --help          help for weron&#xA;  -v, --verbose int   Verbosity level (0 is disabled, default is info, 7 is trace) (default 5)&#xA;&#xA;Use &#34;weron [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand subcommand reference&lt;/summary&gt; &#xA; &lt;h4&gt;Signaling Server&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron signaler --help&#xA;Start a signaling server&#xA;&#xA;Usage:&#xA;  weron signaler [flags]&#xA;&#xA;Aliases:&#xA;  signaler, sgl, s&#xA;&#xA;Flags:&#xA;      --api-password string     Password for the management API (can also be set using the API_PASSWORD env variable). Ignored if any of the OIDC parameters are set.&#xA;      --api-username string     Username for the management API (can also be set using the API_USERNAME env variable). Ignored if any of the OIDC parameters are set. (default &#34;admin&#34;)&#xA;      --cleanup                 (Warning: Only enable this after stopping all other servers accessing the database!) Remove all ephemeral communities from database and reset client counts before starting&#xA;      --ephemeral-communities    Enable the creation of ephemeral communities (default true)&#xA;      --heartbeat duration      Time to wait for heartbeats (default 10s)&#xA;  -h, --help                    help for signaler&#xA;      --laddr string            Listening address (can also be set using the PORT env variable) (default &#34;:1337&#34;)&#xA;      --oidc-client-id string   OIDC Client ID (i.e. myoidcclientid) (can also be set using the OIDC_CLIENT_ID env variable)&#xA;      --oidc-issuer string      OIDC Issuer (i.e. https://pojntfx.eu.auth0.com/) (can also be set using the OIDC_ISSUER env variable)&#xA;      --postgres-url string     URL of PostgreSQL database to use (i.e. postgres://myuser:mypassword@myhost:myport/mydatabase) (can also be set using the DATABASE_URL env variable). If empty, a in-memory database will be used.&#xA;      --redis-url string        URL of Redis database to use (i.e. redis://myuser:mypassword@myhost:myport/1) (can also be set using the REDIS_URL env variable). If empty, a in-process broker will be used.&#xA;&#xA;Global Flags:&#xA;  -v, --verbose int   Verbosity level (0 is disabled, default is info, 7 is trace) (default 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Manager&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron manager --help&#xA;Manage a signaling server&#xA;&#xA;Usage:&#xA;  weron manager [command]&#xA;&#xA;Aliases:&#xA;  manager, mgr, m&#xA;&#xA;Available Commands:&#xA;  create      Create a persistent community&#xA;  delete      Delete a persistent or ephemeral community&#xA;  list        List persistent and ephemeral communities&#xA;&#xA;Flags:&#xA;  -h, --help   help for manager&#xA;&#xA;Global Flags:&#xA;  -v, --verbose int   Verbosity level (0 is disabled, default is info, 7 is trace) (default 5)&#xA;&#xA;Use &#34;weron manager [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Chat&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron chat --help&#xA;Chat over the overlay network&#xA;&#xA;Usage:&#xA;  weron chat [flags]&#xA;&#xA;Aliases:&#xA;  chat, cht, c&#xA;&#xA;Flags:&#xA;      --channels strings    Comma-separated list of channels in community to join (default [weron/chat/primary])&#xA;      --community string    ID of community to join&#xA;      --force-relay         Force usage of TURN servers&#xA;  -h, --help                help for chat&#xA;      --ice strings         Comma-separated list of STUN servers (in format stun:host:port) and TURN servers to use (in format username:credential@turn:host:port) (i.e. username:credential@turn:global.turn.twilio.com:3478?transport=tcp) (default [stun:stun.l.google.com:19302])&#xA;      --id-channel string   Channel to use to negotiate names (default &#34;weron/chat/id&#34;)&#xA;      --key string          Encryption key for community&#xA;      --kicks duration      Time to wait for kicks (default 5s)&#xA;      --names strings       Comma-separated list of names to try and claim one from&#xA;      --password string     Password for community&#xA;      --raddr string        Remote address (default &#34;wss://weron.up.railway.app/&#34;)&#xA;      --timeout duration    Time to wait for connections (default 10s)&#xA;&#xA;Global Flags:&#xA;  -v, --verbose int   Verbosity level (0 is disabled, default is info, 7 is trace) (default 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Latency Measurement Utility&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron utility latency --help&#xA;Measure the latency of the overlay network&#xA;&#xA;Usage:&#xA;  weron utility latency [flags]&#xA;&#xA;Aliases:&#xA;  latency, ltc, l&#xA;&#xA;Flags:&#xA;      --community string    ID of community to join&#xA;      --force-relay         Force usage of TURN servers&#xA;  -h, --help                help for latency&#xA;      --ice strings         Comma-separated list of STUN servers (in format stun:host:port) and TURN servers to use (in format username:credential@turn:host:port) (i.e. username:credential@turn:global.turn.twilio.com:3478?transport=tcp) (default [stun:stun.l.google.com:19302])&#xA;      --key string          Encryption key for community&#xA;      --packet-length int   Size of packet to send and acknowledge (default 128)&#xA;      --password string     Password for community&#xA;      --pause duration      Time to wait before sending next packet (default 1s)&#xA;      --raddr string        Remote address (default &#34;wss://weron.up.railway.app/&#34;)&#xA;      --server              Act as a server&#xA;      --timeout duration    Time to wait for connections (default 10s)&#xA;&#xA;Global Flags:&#xA;  -v, --verbose int   Verbosity level (0 is disabled, default is info, 7 is trace) (default 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Throughput Measurement Utility&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron utility throughput --help&#xA;Measure the throughput of the overlay network&#xA;&#xA;Usage:&#xA;  weron utility throughput [flags]&#xA;&#xA;Aliases:&#xA;  throughput, thr, t&#xA;&#xA;Flags:&#xA;      --community string    ID of community to join&#xA;      --force-relay         Force usage of TURN servers&#xA;  -h, --help                help for throughput&#xA;      --ice strings         Comma-separated list of STUN servers (in format stun:host:port) and TURN servers to use (in format username:credential@turn:host:port) (i.e. username:credential@turn:global.turn.twilio.com:3478?transport=tcp) (default [stun:stun.l.google.com:19302])&#xA;      --key string          Encryption key for community&#xA;      --packet-count int    Amount of packets to send before waiting for acknowledgement (default 1000)&#xA;      --packet-length int   Size of packet to send (default 50000)&#xA;      --password string     Password for community&#xA;      --raddr string        Remote address (default &#34;wss://weron.up.railway.app/&#34;)&#xA;      --server              Act as a server&#xA;      --timeout duration    Time to wait for connections (default 10s)&#xA;&#xA;Global Flags:&#xA;  -v, --verbose int   Verbosity level (0 is disabled, default is info, 7 is trace) (default 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Layer 3 (IP) Overlay Networks&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron vpn ip --help&#xA;Join a layer 3 overlay network&#xA;&#xA;Usage:&#xA;  weron vpn ip [flags]&#xA;&#xA;Aliases:&#xA;  ip, i&#xA;&#xA;Flags:&#xA;      --community string    ID of community to join&#xA;      --dev string          Name to give to the TUN device (i.e. weron0) (default is auto-generated; only supported on Linux)&#xA;      --force-relay         Force usage of TURN servers&#xA;  -h, --help                help for ip&#xA;      --ice strings         Comma-separated list of STUN servers (in format stun:host:port) and TURN servers to use (in format username:credential@turn:host:port) (i.e. username:credential@turn:global.turn.twilio.com:3478?transport=tcp) (default [stun:stun.l.google.com:19302])&#xA;      --id-channel string   Channel to use to negotiate names (default &#34;weron/ip/id&#34;)&#xA;      --ips strings         Comma-separated list of IP networks to claim an IP address from and and give to the TUN device (i.e. 2001:db8::1/32,192.0.2.1/24) (on Windows, only one IP network (either IPv4 or IPv6) is supported; on macOS, IPv4 networks are ignored)&#xA;      --key string          Encryption key for community&#xA;      --kicks duration      Time to wait for kicks (default 5s)&#xA;      --max-retries int     Maximum amount of times to try and claim an IP address (default 200)&#xA;      --parallel int        Amount of threads to use to decode frames (default 20)&#xA;      --password string     Password for community&#xA;      --raddr string        Remote address (default &#34;wss://weron.up.railway.app/&#34;)&#xA;      --static              Try to claim the exact IPs specified in the --ips flag statically instead of selecting a random one from the specified network&#xA;      --timeout duration    Time to wait for connections (default 10s)&#xA;&#xA;Global Flags:&#xA;  -v, --verbose int   Verbosity level (0 is disabled, default is info, 7 is trace) (default 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Layer 2 (Ethernet) Overlay Networks&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ weron vpn ethernet --help&#xA;Join a layer 2 overlay network&#xA;&#xA;Usage:&#xA;  weron vpn ethernet [flags]&#xA;&#xA;Aliases:&#xA;  ethernet, eth, e&#xA;&#xA;Flags:&#xA;      --community string   ID of community to join&#xA;      --dev string         Name to give to the TAP device (i.e. weron0) (default is auto-generated; only supported on Linux and macOS)&#xA;      --force-relay        Force usage of TURN servers&#xA;  -h, --help               help for ethernet&#xA;      --ice strings        Comma-separated list of STUN servers (in format stun:host:port) and TURN servers to use (in format username:credential@turn:host:port) (i.e. username:credential@turn:global.turn.twilio.com:3478?transport=tcp) (default [stun:stun.l.google.com:19302])&#xA;      --key string         Encryption key for community&#xA;      --mac string         MAC address to give to the TAP device (i.e. 3a:f8&lt;span&gt;🇩🇪&lt;/span&gt;7b:ef:52) (default is auto-generated; only supported on Linux)&#xA;      --parallel int       Amount of threads to use to decode frames (default 20)&#xA;      --password string    Password for community&#xA;      --raddr string       Remote address (default &#34;wss://weron.up.railway.app/&#34;)&#xA;      --timeout duration   Time to wait for connections (default 10s)&#xA;&#xA;Global Flags:&#xA;  -v, --verbose int   Verbosity level (0 is disabled, default is info, 7 is trace) (default 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;All command line arguments described above can also be set using environment variables; for example, to set &lt;code&gt;--max-retries&lt;/code&gt; to &lt;code&gt;300&lt;/code&gt; with an environment variable, use &lt;code&gt;WERON_MAX_RETRIES=300&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/songgao/water&#34;&gt;songgao/water&lt;/a&gt; provides the TUN/TAP device library for weron.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pion/webrtc&#34;&gt;pion/webrtc&lt;/a&gt; provides the WebRTC functionality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To contribute, please use the &lt;a href=&#34;https://guides.github.com/introduction/flow/&#34;&gt;GitHub flow&lt;/a&gt; and follow our &lt;a href=&#34;https://raw.githubusercontent.com/pojntfx/weron/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build and start a development version of weron locally, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/pojntfx/weron.git&#xA;$ cd weron&#xA;$ make depend&#xA;$ make &amp;amp;&amp;amp; sudo make install&#xA;$ weron signal # Starts the signaling server&#xA;# In another terminal&#xA;$ weron chat --raddr ws://localhost:1337 --community mycommunity --password mypassword --key mykey --names user1,user2,user3 --channels one,two,three&#xA;# In another terminal&#xA;$ weron chat --raddr ws://localhost:1337 --community mycommunity --password mypassword --key mykey --names user1,user2,user3 --channels one,two,three&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you can also contribute to the utilities and VPNs like this.&lt;/p&gt; &#xA;&lt;p&gt;Have any questions or need help? Chat with us &lt;a href=&#34;https://matrix.to/#/#weron:matrix.org?via=matrix.org&#34;&gt;on Matrix&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;weron (c) 2023 Felicitas Pojtinger and contributors&lt;/p&gt; &#xA;&lt;p&gt;SPDX-License-Identifier: AGPL-3.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>plandex-ai/plandex</title>
    <updated>2024-04-01T01:32:39Z</updated>
    <id>tag:github.com,2024-04-01:/plandex-ai/plandex</id>
    <link href="https://github.com/plandex-ai/plandex" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An AI coding engine for complex tasks&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://plandex.ai&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;images/plandex-logo-dark.png&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;images/plandex-logo-light.png&#34;&gt; &#xA;   &lt;img width=&#34;370&#34; src=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/images/plandex-logo-dark-bg.png&#34;&gt; &#xA;  &lt;/picture&gt;&lt;/a&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;🔮 An open source, terminal-based AI coding engine for complex tasks.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- Badges --&gt; &lt;a href=&#34;https://github.com/plandex-ai/plandex/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;  &lt;a href=&#34;https://github.com/plandex-ai/plandex/releases?q=cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/plandex-ai/plandex?filter=cli*&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/plandex-ai/plandex/releases?q=server&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/plandex-ai/plandex?filter=server*&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://github.com/your_username/your_project/issues&#34;&gt;&#xA;    &lt;img src=&#34;https://img.shields.io/github/issues-closed/your_username/your_project.svg&#34; alt=&#34;Issues Closed&#34; /&gt;&#xA;  &lt;/a&gt; --&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;!-- Call to Action Links --&gt; &lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/#install&#34;&gt; &lt;b&gt;Install&lt;/b&gt; &lt;/a&gt; · &#xA; &lt;!-- &lt;a href=&#34;https://plandex.ai&#34;&gt;&#xA;    &lt;b&gt;Website&lt;/b&gt;&#xA;  &lt;/a&gt;&#xA;  · --&gt; &lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/guides/USAGE.md&#34;&gt; &lt;b&gt;Usage&lt;/b&gt; &lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/guides/HOSTING.md&#34;&gt; &lt;b&gt;Self-Hosting&lt;/b&gt; &lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/guides/DEVELOPMENT.md&#34;&gt; &lt;b&gt;Development&lt;/b&gt; &lt;/a&gt; · &lt;a href=&#34;https://discord.gg/plandex-ai&#34;&gt; &lt;b&gt;Discord&lt;/b&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Plandex uses long-running agents to complete tasks that require many steps. It breaks up large tasks into smaller subtasks, then implements each one, continuing until it finishes the job. It helps you churn through your backlog, work with unfamiliar technologies, get unstuck, and spend less time on the boring stuff. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- Vimeo link is nicer on mobile than embedded video... downside is it navigates to vimeo in same tab (no way to add target=_blank) --&gt; &#xA;&lt;!-- https://github.com/plandex-ai/plandex/assets/545350/c2ee3bcd-1512-493f-bdd5-e3a4ca534a36 --&gt; &#xA;&lt;a href=&#34;https://player.vimeo.com/video/926634577&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/images/plandex-intro-vimeo.png&#34; alt=&#34;Plandex intro video&#34; width=&#34;100%&#34;&gt; &lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;🌟&amp;nbsp; Build complex software with LLMs&lt;/h2&gt; &#xA;&lt;p&gt;⚡️ &amp;nbsp;Changes are accumulated in a protected sandbox so that you can review them before automatically applying them to your project files. Built-in version control allows you to easily go backwards and try a different approach. Branches allow you to try multiple approaches and compare the results.&lt;/p&gt; &#xA;&lt;p&gt;📑 &amp;nbsp;Manage context efficiently in the terminal. Easily add files or entire directories to context, and keep them updated automatically as you work so that models are always working with the latest state of your project.&lt;/p&gt; &#xA;&lt;p&gt;🧠 &amp;nbsp;Plandex relies on the OpenAI API and requires an &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable. Support for open source models, Google Gemini, and Anthropic Claude is coming soon.&lt;/p&gt; &#xA;&lt;p&gt;✅ &amp;nbsp;Plandex supports Mac, Linux, FreeBSD, and Windows. It runs from a single binary with no dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Install&amp;nbsp;&amp;nbsp;📥&lt;/h2&gt; &#xA;&lt;h3&gt;Quick install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL https://plandex.ai/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Manual install&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt; Grab the appropriate binary for your platform from the latest &lt;a href=&#34;https://github.com/plandex-ai/plandex/releases&#34;&gt;release&lt;/a&gt; and put it somewhere in your &lt;code&gt;PATH&lt;/code&gt;. &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Build from source&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;pre&gt;&lt;code&gt;git clone https://github.com/plandex-ai/plandex.git&#xA;cd plandex/app/cli&#xA;go build -ldflags &#34;-X plandex/version.Version=$(cat version.txt)&#34;&#xA;mv plandex /usr/local/bin # adapt as needed for your system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Windows&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt; Windows is supported via &lt;a href=&#34;https://gitforwindows.org&#34;&gt;Git bash&lt;/a&gt; or &lt;a href=&#34;https://learn.microsoft.com/en-us/windows/wsl/about&#34;&gt;WSL&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Get started&amp;nbsp; 🚀&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t have an OpenAI account, first &lt;a href=&#34;https://platform.openai.com/signup&#34;&gt;sign up here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;generate an API key here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd your-project&#xA;export OPENAI_API_KEY=...&#xA;plandex new&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After any plandex command is run, commands that could make sense to run next will be suggested. You can learn to use Plandex quickly by jumping in and following these suggestions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&amp;nbsp; 🛠️&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/guides/USAGE.md&#34;&gt;Here&#39;s a quick overview of the commands and functionality.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help&amp;nbsp; ℹ️&lt;/h2&gt; &#xA;&lt;p&gt;To see all available commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plandex help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For help on any command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;plandex [command] --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why Plandex?&amp;nbsp; 🤔&lt;/h2&gt; &#xA;&lt;p&gt;🏗️&amp;nbsp; Go beyond autocomplete to build complex functionality with AI.&lt;br&gt; 🚫&amp;nbsp; Stop the mouse-centered, copy-pasting madness of coding with ChatGPT.&lt;br&gt; 📑&amp;nbsp; Manage context efficiently in the terminal.&lt;br&gt; ⚡️&amp;nbsp; Ensure AI models always have the latest versions of files in context.&lt;br&gt; 🪙&amp;nbsp; Retain granular control over what&#39;s in context and how many tokens you&#39;re using.&lt;br&gt; 🚧&amp;nbsp; Experiment, revise, and review in a protected sandbox before applying changes.&lt;br&gt; ⏪&amp;nbsp; Rewind and retry as needed.&lt;br&gt; 🌱&amp;nbsp; Explore multiple approaches with branches.&lt;br&gt; 🔀&amp;nbsp; Run tasks in the background or work on multiple tasks in parallel.&lt;br&gt; 🎛️&amp;nbsp; Try different models and model settings, then compare results.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Plandex Cloud&amp;nbsp; ☁️&lt;/h2&gt; &#xA;&lt;p&gt;Plandex Cloud is the easiest and most reliable way to use Plandex. You&#39;ll be prompted to start an anonymous trial (no email required) when you create your first plan with &lt;code&gt;plandex new&lt;/code&gt;. Trial accounts are limited to 10 plans and 10 AI model replies per plan. You can upgrade to an unlimited account with your name and email.&lt;/p&gt; &#xA;&lt;p&gt;Plandex Cloud accounts are free for now. In the future, they will cost somewhere in the $10-20 per month range.&lt;/p&gt; &#xA;&lt;h2&gt;Self-hosting&amp;nbsp; 🏠&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/guides/HOSTING.md&#34;&gt;Read about self-hosting Plandex here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&amp;nbsp;and guidance ⚠️&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Plandex can provide a significant boost to your productivity, but as with any other AI tool, you shouldn&#39;t expect perfect results. Always review a plan carefully before applying changes, especially if security is involved. Plandex is designed to get you 80-90% of the way there rather than 100%.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Due to the reasoning limitations of LLMs, automatically applied file updates also aren&#39;t perfect. While these can be improved over time with better prompting strategies (contributions welcome) and better models, be prepared for occasional updates that aren&#39;t quite right. Use the &lt;code&gt;plandex changes&lt;/code&gt; command to review pending updates in a TUI. If a file update has mistakes, make those changes yourself with copy-and-paste and reject the file in the changes TUI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The more direction and detail you provide, the better the results will be. Working with Plandex often involves giving it a prompt, seeing that the results are a bit off, then using &lt;code&gt;plandex rewind&lt;/code&gt; to go back and iterate on the prompt or add context before trying again. Branches are also useful for trying different approaches.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;While it can be tempting to just dump your entire project into context if it fits under the token limit, with current models you will tend to see better results (and pay less) by being more selective about what&#39;s loaded into context.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security &amp;nbsp;🔐&lt;/h2&gt; &#xA;&lt;p&gt;Plandex Cloud follows best practices for network and data security. And whether cloud or self-hosted, Plandex protects model provider API keys (like your OpenAI API key). &lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/guides/SECURITY.md&#34;&gt;Read more here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Privacy and data retention &amp;nbsp;🛡️&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/guides/PRIVACY.md&#34;&gt;Read about Plandex Cloud&#39;s privacy and data retention policies here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap &amp;nbsp;🗺️&lt;/h2&gt; &#xA;&lt;p&gt;🧠&amp;nbsp; Support for open source models, Google Gemini, and Anthropic Claude in addition to OpenAI&lt;br&gt; 🤝&amp;nbsp; Plan sharing and team collaboration&lt;br&gt; 🖼️&amp;nbsp; Support for GPT4-Vision and other multi-modal models—add images and screenshots to context&lt;br&gt; 🖥️&amp;nbsp; VSCode and JetBrains extensions&lt;br&gt; 📦&amp;nbsp; Community plugins and modules&lt;br&gt; 🔌&amp;nbsp; Github integration&lt;br&gt; 🌐&amp;nbsp; Web dashboard and GUI&lt;br&gt; 🔐&amp;nbsp; SOC2 compliance&lt;br&gt; 🛩️&amp;nbsp; Fine-tuned models&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;This list will grow and be prioritized based on your feedback.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion and discord &amp;nbsp;💬&lt;/h2&gt; &#xA;&lt;p&gt;Speaking of feedback, feel free to give yours, ask questions, report a bug, or just hang out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/plandex-ai&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plandex-ai/plandex/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/plandex-ai/plandex/issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors &amp;nbsp;👥&lt;/h2&gt; &#xA;&lt;p&gt;⭐️&amp;nbsp;&amp;nbsp;Please star, fork, explore, and contribute to Plandex. There&#39;s a lot of work to do and so much that can be improved.&lt;/p&gt; &#xA;&lt;p&gt;Work on tests, evals, prompts, and bug fixes is especially appreciated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/plandex-ai/plandex/main/guides/DEVELOPMENT.md&#34;&gt;Here&#39;s an overview on setting up a development environment.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Comparable tools ⚖️&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/paul-gauthier/aider&#34;&gt;Aider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AbanteAI/mentat&#34;&gt;Mentat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Pythagora-io/gpt-pilot&#34;&gt;Pythagora Gpt-pilot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sourcegraph/cody&#34;&gt;Sourcegraph Cody&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/continuedev/continue&#34;&gt;Continue.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sweepai/sweep&#34;&gt;Sweep.dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getcursor/cursor&#34;&gt;Cursor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/copilot&#34;&gt;Github Copilot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://replit.com/ai&#34;&gt;Replit Ghostwriter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chat.openai.com/g/g-n7Rs0IK86-grimoire&#34;&gt;Grimoire&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About the developer&amp;nbsp; 👋&lt;/h2&gt; &#xA;&lt;p&gt;Hi, I&#39;m Dane. I&#39;ve been building and launching software products for 17 years. I went through YCombinator in winter 2018 with my devops security company, &lt;a href=&#34;https://envkey.com&#34;&gt;EnvKey&lt;/a&gt;, which I continue to run today. I&#39;m fascinated by LLMs and their potential to transform the practice of software development.&lt;/p&gt; &#xA;&lt;p&gt;I live with my wife and 4 year old daughter on the SF peninsula in California. I grew up in the Finger Lakes region of upstate New York. I like reading fiction, listening to podcasts, fitness, and surfing.&lt;/p&gt;</summary>
  </entry>
</feed>