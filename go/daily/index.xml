<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-05T01:28:04Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-vgo/robotgo</title>
    <updated>2023-09-05T01:28:04Z</updated>
    <id>tag:github.com,2023-09-05:/go-vgo/robotgo</id>
    <link href="https://github.com/go-vgo/robotgo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RobotGo, Go Native cross-platform GUI automation @vcaesar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Robotgo&lt;/h1&gt; &#xA;&lt;!--&lt;img align=&#34;right&#34; src=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/logo.jpg&#34;&gt;--&gt; &#xA;&lt;!--[![Build Status](https://travis-ci.org/go-vgo/robotgo.svg)](https://travis-ci.org/go-vgo/robotgo)&#xA;[![codecov](https://codecov.io/gh/go-vgo/robotgo/branch/master/graph/badge.svg)](https://codecov.io/gh/go-vgo/robotgo)--&gt; &#xA;&lt;!--&lt;a href=&#34;https://circleci.com/gh/go-vgo/robotgo/tree/dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/go-vgo/robotgo/dev.svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/commits/master&#34;&gt;&lt;img src=&#34;https://github.com/go-vgo/robotgo/workflows/Go/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/go-vgo/robotgo&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/go-vgo/robotgo.svg?style=shield&#34; alt=&#34;CircleCI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/go-vgo/robotgo&#34;&gt;&lt;img src=&#34;https://travis-ci.org/go-vgo/robotgo.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://ci.appveyor.com/api/projects/status/github/go-vgo/robotgo?branch=master&amp;amp;svg=true&#34; alt=&#34;Appveyor&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/go-vgo/robotgo&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/go-vgo/robotgo&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/go-vgo/robotgo&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-vgo/robotgo?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-vgo/robotgo/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/go-vgo/robotgo.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/go-vgo/robotgo?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/go-vgo/robotgo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [![Release](https://github-release-version.herokuapp.com/github/go-vgo/robotgo/release.svg?style=flat)](https://github.com/go-vgo/robotgo/releases/latest) --&gt; &#xA;&lt;!-- &lt;a href=&#34;https://github.com/go-vgo/robotgo/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20version%20-%206.0.0%20-blue.svg?style=flat-square&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; --&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Golang Desktop Automation. Control the mouse, keyboard, read the screen, process, Window Handle, image and bitmap and global event listener.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;RobotGo supports Mac, Windows, and Linux(X11); and robotgo supports arm64 and x86-amd64.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#docs&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#binding&#34;&gt;Binding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#update&#34;&gt;Update&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/docs/keys.md&#34;&gt;Type Conversion and keys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/docs/install.md#crosscompiling&#34;&gt;Cross-Compiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#plans&#34;&gt;Plans&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#donate&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-vgo/robotgo/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/go-vgo/robotgo&#34;&gt;GoDoc&lt;/a&gt; &lt;br&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/docs/doc.md&#34;&gt;API Docs&lt;/a&gt; (Deprecated, no updated)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Binding:&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vcaesar/adb&#34;&gt;ADB&lt;/a&gt;, packaging android adb API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vcaesar/robotn&#34;&gt;Robotn&lt;/a&gt;, binding JavaScript and other, support more language.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements:&lt;/h2&gt; &#xA;&lt;p&gt;Now, Please make sure &lt;code&gt;Golang, GCC&lt;/code&gt; is installed correctly before installing RobotGo.&lt;/p&gt; &#xA;&lt;h3&gt;ALL:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Golang&#xA;&#xA;GCC&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For MacOS:&lt;/h4&gt; &#xA;&lt;p&gt;Xcode Command Line Tools (And Privacy setting: &lt;a href=&#34;https://github.com/go-vgo/robotgo/issues/277&#34;&gt;#277&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xcode-select --install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;For Windows:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sourceforge.net/projects/mingw-w64/files&#34;&gt;MinGW-w64&lt;/a&gt; (Use recommended)&lt;/p&gt; &#xA;&lt;p&gt;Download the Mingw, then set system environment variables &lt;code&gt;C:\mingw64\bin&lt;/code&gt; to the Path. &lt;a href=&#34;https://www.youtube.com/results?search_query=Set+environment+variables+to+run+GCC+from+command+line&#34;&gt;Set environment variables to run GCC from command line&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Or the other GCC (But you should compile the &#34;libpng&#34; with yourself when use the bitmap.)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;For everything else:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;GCC&#xA;&#xA;X11 with the XTest extension (the Xtst library)&#xA;&#xA;&#34;Clipboard&#34;: xsel xclip&#xA;&#xA;&#xA;&#34;Bitmap&#34;: libpng (Just used by the bitmap.)&#xA;&#xA;&#34;Event&#34;: xcb, xkb, libxkbcommon (Just used by the hook.)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Ubuntu:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# gcc&#xA;sudo apt install gcc libc6-dev&#xA;&#xA;# x11&#xA;sudo apt install libx11-dev xorg-dev libxtst-dev&#xA;&#xA;# Clipboard&#xA;sudo apt install xsel xclip&#xA;&#xA;#&#xA;# Bitmap&#xA;sudo apt install libpng++-dev&#xA;&#xA;# Hook&#xA;sudo apt install xcb libxcb-xkb-dev x11-xkb-utils libx11-xcb-dev libxkbcommon-x11-dev libxkbcommon-dev&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Fedora:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# x11&#xA;sudo dnf install libXtst-devel&#xA;&#xA;# Clipboard&#xA;sudo dnf install xsel xclip&#xA;&#xA;#&#xA;# Bitmap&#xA;sudo dnf install libpng-devel&#xA;&#xA;# Hook&#xA;sudo dnf install libxkbcommon-devel libxkbcommon-x11-devel xorg-x11-xkb-utils-devel&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;With Go module support (Go 1.11+), just import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/go-vgo/robotgo&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, to install the robotgo package, run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/go-vgo/robotgo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;png.h: No such file or directory? Please see &lt;a href=&#34;https://github.com/go-vgo/robotgo/issues/47&#34;&gt;issues/47&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Update:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get -u github.com/go-vgo/robotgo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note go1.10.x C file compilation cache problem, &lt;a href=&#34;https://github.com/golang/go/issues/24355&#34;&gt;golang #24355&lt;/a&gt;. &lt;code&gt;go mod vendor&lt;/code&gt; problem, &lt;a href=&#34;https://github.com/golang/go/issues/26366&#34;&gt;golang #26366&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/examples&#34;&gt;Examples:&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/examples/mouse/main.go&#34;&gt;Mouse&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;github.com/go-vgo/robotgo&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  robotgo.MouseSleep = 100&#xA;&#xA;  robotgo.ScrollDir(10, &#34;up&#34;)&#xA;  robotgo.ScrollDir(20, &#34;right&#34;)&#xA;&#xA;  robotgo.Scroll(0, -10)&#xA;  robotgo.Scroll(100, 0)&#xA;&#xA;  robotgo.MilliSleep(100)&#xA;  robotgo.ScrollSmooth(-10, 6)&#xA;  // robotgo.ScrollRelative(10, -100)&#xA;&#xA;  robotgo.Move(10, 20)&#xA;  robotgo.MoveRelative(0, -10)&#xA;  robotgo.DragSmooth(10, 10)&#xA;&#xA;  robotgo.Click(&#34;wheelRight&#34;)&#xA;  robotgo.Click(&#34;left&#34;, true)&#xA;  robotgo.MoveSmooth(100, 200, 1.0, 10.0)&#xA;&#xA;  robotgo.Toggle(&#34;left&#34;)&#xA;  robotgo.Toggle(&#34;left&#34;, &#34;up&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/examples/key/main.go&#34;&gt;Keyboard&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;&#xA;  &#34;github.com/go-vgo/robotgo&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  robotgo.TypeStr(&#34;Hello World&#34;)&#xA;  robotgo.TypeStr(&#34;だんしゃり&#34;, 0, 1)&#xA;  // robotgo.TypeStr(&#34;テストする&#34;)&#xA;&#xA;  robotgo.TypeStr(&#34;Hi, Seattle space needle, Golden gate bridge, One world trade center.&#34;)&#xA;  robotgo.TypeStr(&#34;Hi galaxy, hi stars, hi MT.Rainier, hi sea. こんにちは世界.&#34;)&#xA;  robotgo.Sleep(1)&#xA;&#xA;  // ustr := uint32(robotgo.CharCodeAt(&#34;Test&#34;, 0))&#xA;  // robotgo.UnicodeType(ustr)&#xA;&#xA;  robotgo.KeySleep = 100&#xA;  robotgo.KeyTap(&#34;enter&#34;)&#xA;  // robotgo.TypeStr(&#34;en&#34;)&#xA;  robotgo.KeyTap(&#34;i&#34;, &#34;alt&#34;, &#34;cmd&#34;)&#xA;&#xA;  arr := []string{&#34;alt&#34;, &#34;cmd&#34;}&#xA;  robotgo.KeyTap(&#34;i&#34;, arr)&#xA;&#xA;  robotgo.MilliSleep(100)&#xA;  robotgo.KeyToggle(&#34;a&#34;)&#xA;  robotgo.KeyToggle(&#34;a&#34;, &#34;up&#34;)&#xA;&#xA;  robotgo.WriteAll(&#34;Test&#34;)&#xA;  text, err := robotgo.ReadAll()&#xA;  if err == nil {&#xA;    fmt.Println(text)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/examples/screen/main.go&#34;&gt;Screen&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;&#xA;  &#34;github.com/go-vgo/robotgo&#34;&#xA;  &#34;github.com/vcaesar/imgo&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  x, y := robotgo.Location()&#xA;  fmt.Println(&#34;pos: &#34;, x, y)&#xA;&#xA;  color := robotgo.GetPixelColor(100, 200)&#xA;  fmt.Println(&#34;color---- &#34;, color)&#xA;&#xA;  sx, sy := robotgo.GetScreenSize()&#xA;  fmt.Println(&#34;get screen size: &#34;, sx, sy)&#xA;&#xA;  bit := robotgo.CaptureScreen(10, 10, 30, 30)&#xA;  defer robotgo.FreeBitmap(bit)&#xA;&#xA;  img := robotgo.ToImage(bit)&#xA;  imgo.Save(&#34;test.png&#34;, img)&#xA;&#xA;  num := robotgo.DisplaysNum()&#xA;  for i := 0; i &amp;lt; num; i++ {&#xA;    robotgo.DisplayID = i&#xA;    img1 := robotgo.CaptureImg()&#xA;    path1 := &#34;save_&#34; + strconv.Itoa(i)&#xA;    robotgo.Save(img1, path1+&#34;.png&#34;)&#xA;    robotgo.SaveJpeg(img1, path1+&#34;.jpeg&#34;, 50)&#xA;&#xA;    img2 := robotgo.CaptureImg(10, 10, 20, 20)&#xA;    robotgo.Save(img2, &#34;test_&#34;+strconv.Itoa(i)+&#34;.png&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/vcaesar/bitmap/raw/main/examples/main.go&#34;&gt;Bitmap&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;&#xA;  &#34;github.com/go-vgo/robotgo&#34;&#xA;  &#34;github.com/vcaesar/bitmap&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  bit := robotgo.CaptureScreen(10, 20, 30, 40)&#xA;  // use `defer robotgo.FreeBitmap(bit)` to free the bitmap&#xA;  defer robotgo.FreeBitmap(bit)&#xA;&#xA;  fmt.Println(&#34;bitmap...&#34;, bit)&#xA;  img := robotgo.ToImage(bit)&#xA;  // robotgo.SavePng(img, &#34;test_1.png&#34;)&#xA;  robotgo.Save(img, &#34;test_1.png&#34;)&#xA;&#xA;  bit2 := robotgo.ToCBitmap(robotgo.ImgToBitmap(img))&#xA;  fx, fy := bitmap.Find(bit2)&#xA;  fmt.Println(&#34;FindBitmap------ &#34;, fx, fy)&#xA;  robotgo.Move(fx, fy)&#xA;&#xA;  arr := bitmap.FindAll(bit2)&#xA;  fmt.Println(&#34;Find all bitmap: &#34;, arr)&#xA;&#xA;  fx, fy = bitmap.Find(bit)&#xA;  fmt.Println(&#34;FindBitmap------ &#34;, fx, fy)&#xA;&#xA;  bitmap.Save(bit, &#34;test.png&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/vcaesar/gcv&#34;&gt;OpenCV&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;  &#34;math/rand&#34;&#xA;&#xA;  &#34;github.com/go-vgo/robotgo&#34;&#xA;  &#34;github.com/vcaesar/gcv&#34;&#xA;  &#34;github.com/vcaesar/bitmap&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  opencv()&#xA;}&#xA;&#xA;func opencv() {&#xA;  name := &#34;test.png&#34;&#xA;  name1 := &#34;test_001.png&#34;&#xA;  robotgo.SaveCapture(name1, 10, 10, 30, 30)&#xA;  robotgo.SaveCapture(name)&#xA;&#xA;  fmt.Print(&#34;gcv find image: &#34;)&#xA;  fmt.Println(gcv.FindImgFile(name1, name))&#xA;  fmt.Println(gcv.FindAllImgFile(name1, name))&#xA;&#xA;  bit := bitmap.Open(name1)&#xA;  defer robotgo.FreeBitmap(bit)&#xA;  fmt.Print(&#34;find bitmap: &#34;)&#xA;  fmt.Println(bitmap.Find(bit))&#xA;&#xA;  // bit0 := robotgo.CaptureScreen()&#xA;  // img := robotgo.ToImage(bit0)&#xA;  // bit1 := robotgo.CaptureScreen(10, 10, 30, 30)&#xA;  // img1 := robotgo.ToImage(bit1)&#xA;  // defer robotgo.FreeBitmapArr(bit0, bit1)&#xA;  img := robotgo.CaptureImg()&#xA;  img1 := robotgo.CaptureImg(10, 10, 30, 30)&#xA;&#xA;  fmt.Print(&#34;gcv find image: &#34;)&#xA;  fmt.Println(gcv.FindImg(img1, img))&#xA;  fmt.Println()&#xA;&#xA;  res := gcv.FindAllImg(img1, img)&#xA;  fmt.Println(res[0].TopLeft.Y, res[0].Rects.TopLeft.X, res)&#xA;  x, y := res[0].TopLeft.X, res[0].TopLeft.Y&#xA;  robotgo.Move(x, y-rand.Intn(5))&#xA;  robotgo.MilliSleep(100)&#xA;  robotgo.Click()&#xA;&#xA;  res = gcv.FindAll(img1, img) // use find template and sift&#xA;  fmt.Println(&#34;find all: &#34;, res)&#xA;  res1 := gcv.Find(img1, img)&#xA;  fmt.Println(&#34;find: &#34;, res1)&#xA;&#xA;  img2, _, _ := robotgo.DecodeImg(&#34;test_001.png&#34;)&#xA;  x, y = gcv.FindX(img2, img)&#xA;  fmt.Println(x, y)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/robotn/gohook/raw/master/examples/main.go&#34;&gt;Event&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;&#xA;  // &#34;github.com/go-vgo/robotgo&#34;&#xA;  hook &#34;github.com/robotn/gohook&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  add()&#xA;  low()&#xA;  event()&#xA;}&#xA;&#xA;func add() {&#xA;  fmt.Println(&#34;--- Please press ctrl + shift + q to stop hook ---&#34;)&#xA;  hook.Register(hook.KeyDown, []string{&#34;q&#34;, &#34;ctrl&#34;, &#34;shift&#34;}, func(e hook.Event) {&#xA;    fmt.Println(&#34;ctrl-shift-q&#34;)&#xA;    hook.End()&#xA;  })&#xA;&#xA;  fmt.Println(&#34;--- Please press w---&#34;)&#xA;  hook.Register(hook.KeyDown, []string{&#34;w&#34;}, func(e hook.Event) {&#xA;    fmt.Println(&#34;w&#34;)&#xA;  })&#xA;&#xA;  s := hook.Start()&#xA;  &amp;lt;-hook.Process(s)&#xA;}&#xA;&#xA;func low() {&#xA;&#x9;evChan := hook.Start()&#xA;&#x9;defer hook.End()&#xA;&#xA;&#x9;for ev := range evChan {&#xA;&#x9;&#x9;fmt.Println(&#34;hook: &#34;, ev)&#xA;&#x9;}&#xA;}&#xA;&#xA;func event() {&#xA;  ok := hook.AddEvents(&#34;q&#34;, &#34;ctrl&#34;, &#34;shift&#34;)&#xA;  if ok {&#xA;    fmt.Println(&#34;add events...&#34;)&#xA;  }&#xA;&#xA;  keve := hook.AddEvent(&#34;k&#34;)&#xA;  if keve {&#xA;    fmt.Println(&#34;you press... &#34;, &#34;k&#34;)&#xA;  }&#xA;&#xA;  mleft := hook.AddEvent(&#34;mleft&#34;)&#xA;  if mleft {&#xA;    fmt.Println(&#34;you press... &#34;, &#34;mouse left button&#34;)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/examples/window/main.go&#34;&gt;Window&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;&#xA;  &#34;github.com/go-vgo/robotgo&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  fpid, err := robotgo.FindIds(&#34;Google&#34;)&#xA;  if err == nil {&#xA;    fmt.Println(&#34;pids... &#34;, fpid)&#xA;&#xA;    if len(fpid) &amp;gt; 0 {&#xA;      robotgo.TypeStr(&#34;Hi galaxy!&#34;, fpid[0])&#xA;      robotgo.KeyTap(&#34;a&#34;, fpid[0], &#34;cmd&#34;)&#xA;&#xA;      robotgo.KeyToggle(&#34;a&#34;, fpid[0])&#xA;      robotgo.KeyToggle(&#34;a&#34;, fpid[0], &#34;up&#34;)&#xA;&#xA;      robotgo.ActivePid(fpid[0])&#xA;&#xA;      robotgo.Kill(fpid[0])&#xA;    }&#xA;  }&#xA;&#xA;  robotgo.ActiveName(&#34;chrome&#34;)&#xA;&#xA;  isExist, err := robotgo.PidExists(100)&#xA;  if err == nil &amp;amp;&amp;amp; isExist {&#xA;    fmt.Println(&#34;pid exists is&#34;, isExist)&#xA;&#xA;    robotgo.Kill(100)&#xA;  }&#xA;&#xA;  abool := robotgo.Alert(&#34;test&#34;, &#34;robotgo&#34;)&#xA;  if abool {&#xA; &#x9;  fmt.Println(&#34;ok@@@ &#34;, &#34;ok&#34;)&#xA;  }&#xA;&#xA;  title := robotgo.GetTitle()&#xA;  fmt.Println(&#34;title@@@ &#34;, title)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vcaesar&#34;&gt;The author is vz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/go-vgo/people&#34;&gt;Maintainers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-vgo/robotgo/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plans&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refactor some C code to Go (such as x11, windows)&lt;/li&gt; &#xA; &lt;li&gt;Better multiscreen support&lt;/li&gt; &#xA; &lt;li&gt;Wayland support&lt;/li&gt; &#xA; &lt;li&gt;Update Window Handle&lt;/li&gt; &#xA; &lt;li&gt;Try to support Android and IOS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/go-vgo/robotgo/graphs/contributors&#34;&gt;contributors page&lt;/a&gt; for full list of contributors.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Robotgo is primarily distributed under the terms of &#34;both the MIT license and the Apache License (Version 2.0)&#34;, with portions covered by various BSD-like licenses.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;LICENSE-APACHE&lt;/a&gt;, &lt;a href=&#34;https://github.com/go-vgo/robotgo/raw/master/LICENSE&#34;&gt;LICENSE-MIT&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>synacktiv/CVE-2023-35001</title>
    <updated>2023-09-05T01:28:04Z</updated>
    <id>tag:github.com,2023-09-05:/synacktiv/CVE-2023-35001</id>
    <link href="https://github.com/synacktiv/CVE-2023-35001" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pwn2Own Vancouver 2023 Ubuntu LPE exploit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nftables oob read/write exploit (CVE-2023-35001)&lt;/h1&gt; &#xA;&lt;p&gt;Exploit used at pwn2own Vancouver 2023 on Ubuntu desktop. The exploit supports the kernel version available at the beginning of the event (5.19.0-35).&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C compiler&lt;/li&gt; &#xA; &lt;li&gt;Go compiler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build&#xA;$ make&#xA;&#xA;# Run&#xA;$ ./exploit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This produces a &lt;code&gt;lpe.zip&lt;/code&gt; file which can be unpacked on the target. There are two binaries in the archive:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;wrapper&lt;/strong&gt;: A C binary used to enter namespaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;exploit&lt;/strong&gt;: The actual exploit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;exploit&lt;/code&gt; file is the program that should be executed. It uses the &lt;code&gt;wrapper&lt;/code&gt; program to call itself and enter a new namespace.&lt;/p&gt;</summary>
  </entry>
</feed>