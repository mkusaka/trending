<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-25T01:31:01Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AvaProtocol/EigenLayer-AVS</title>
    <updated>2025-02-25T01:31:01Z</updated>
    <id>tag:github.com,2025-02-25:/AvaProtocol/EigenLayer-AVS</id>
    <link href="https://github.com/AvaProtocol/EigenLayer-AVS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AvaProtocol Ethereum Automation Build on EigenLayer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ava Protocol Automation On Ethereum&lt;/h1&gt; &#xA;&lt;p&gt;The Ava Protocol AVS can be compiled directly using Go version 1.22+. Ensure you have the appropriate version of Go installed on your development environment.&lt;/p&gt; &#xA;&lt;p&gt;Check Go version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile Ava Protocol AVS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build -o ap-avs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run &lt;code&gt;ap-avs&lt;/code&gt; binary. We make an effort to use pure Go so you can also cross compile for any supported architecture that the Go compiler support.&lt;/p&gt; &#xA;&lt;h2&gt;Run operator&lt;/h2&gt; &#xA;&lt;p&gt;Check how to run an &lt;a href=&#34;https://raw.githubusercontent.com/AvaProtocol/EigenLayer-AVS/main/docs/operator.md&#34;&gt;operator docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run aggregator&lt;/h3&gt; &#xA;&lt;p&gt;To run the aggregator, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ap-avs aggregator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The Ava Protocol team currently manages the aggregator, and the communication IP address between the operator and the aggregator is hardcoded in the operator.&lt;/p&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;table&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td bgcolor=&#34;white&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AvaProtocol/EigenLayer-AVS/main/docs/highlevel-diagram.png&#34;&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;User wallet&lt;/h2&gt; &#xA;&lt;p&gt;For each owner we deploy a ERC6900 wallet to schedule task and approve spending to user wallet.&lt;/p&gt; &#xA;&lt;p&gt;Each task type has its equivalent modular code to re-present its condition and their actual execution.&lt;/p&gt; &#xA;&lt;h2&gt;Aggregator&lt;/h2&gt; &#xA;&lt;p&gt;Aggregator accepts RPC request from client to submit Task Payload. Currently, aggregator is managed and run by Ava Protocol team.&lt;/p&gt; &#xA;&lt;p&gt;Periodically, aggregator combine the task submission, update our internal storage and a zkSNARK proof will be write back to our TaskManager contract.&lt;/p&gt; &#xA;&lt;p&gt;Aggregator also accept task condition check result from operator, perform quorum and consensus check, then write the result back and flag that a task is good to run.&lt;/p&gt; &#xA;&lt;h3&gt;Aggregator Address&lt;/h3&gt; &#xA;&lt;p&gt;The aggregator is currently run and managed by the Ava Protocol team. Depend on testnet or mainnet, you would need to point your operator to the right address in the operator config file.&lt;/p&gt; &#xA;&lt;h4&gt;Holesky Testnet&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aggregator-holesky.avaprotocol.org:2206&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-explorer-holesky.avaprotocol.org/&#34;&gt;https://api-explorer-holesky.avaprotocol.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mainnet&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;aggregator.avaprotocol.org:2206&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://api-explorer.avaprotocol.org/&#34;&gt;https://api-explorer.avaprotocol.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operators&lt;/h2&gt; &#xA;&lt;p&gt;Operators communicates with aggregators through RPC. It requests task data from aggregator, it performs condition execution to check whether a task can be trigger. The result is then sent back to aggregator.&lt;/p&gt; &#xA;&lt;p&gt;For task is ok to run, the operator will executed them. The detail of how task is triggering through our ERC6900 modular wallet will come soon.&lt;/p&gt; &#xA;&lt;h2&gt;Ava Protocol operator address&lt;/h2&gt; &#xA;&lt;p&gt;Currently, Ava Protocol has deployed our operator on the testnet. Community members can run their own operator and register for Ava Protocol AVS service, or they can delegate their tokens to the Ava Protocol operator.&lt;/p&gt; &#xA;&lt;h3&gt;Testnet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ava Protocol&#39;s operator: &lt;a href=&#34;https://holesky.eigenlayer.xyz/operator/0x997e5d40a32c44a3d93e59fc55c4fd20b7d2d49d&#34;&gt;0x997e5d40a32c44a3d93e59fc55c4fd20b7d2d49d&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mainnet&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ava Protocol&#39;s operator: &lt;a href=&#34;https://etherscan.io/address/0xc6B87cc9e85b07365b6aBEfff061F237F7cf7Dc3&#34;&gt;0xc6B87cc9e85b07365b6aBEfff061F237F7cf7Dc3&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Telemetry Dashboard&lt;/h2&gt; &#xA;&lt;p&gt;Operator that is connected to Ava Protocol aggregator can also check their operator on our telemetry dashboard as below&lt;/p&gt; &#xA;&lt;h3&gt;Testnet&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aggregator-holesky.avaprotocol.org/telemetry&#34;&gt;https://aggregator-holesky.avaprotocol.org/telemetry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Mainnet&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aggregator.avaprotocol.org/telemetry&#34;&gt;https://aggregator.avaprotocol.org/telemetry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Development guide&lt;/h1&gt; &#xA;&lt;p&gt;View docs/development.md&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;EigenLayer CLI&lt;/h3&gt; &#xA;&lt;p&gt;Install the EigenLayer CLI with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSfL https://raw.githubusercontent.com/layr-labs/eigenlayer-cli/master/scripts/install.sh | sh -s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Golang&lt;/h3&gt; &#xA;&lt;p&gt;Install Go with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Foundry Toolchain&lt;/h3&gt; &#xA;&lt;p&gt;Install the Foundry toolchain with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -L https://foundry.paradigm.xyz | bash&#xA;foundryup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Protobuf Compiler&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install google.golang.org/protobuf/cmd/protoc-gen-go@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate API Docs from Proto Files&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;code&gt;protoc-gen-doc&lt;/code&gt; plugin for &lt;code&gt;protoc&lt;/code&gt;. Install via Go:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Ensure the plugin is in your PATH:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;export PATH=&#34;$PATH:$(go env GOPATH)/bin&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Verify the plugin is installed:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;which protoc-gen-doc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate API references in HTML format&lt;/p&gt; &lt;pre&gt;&lt;code&gt;protoc --doc_out=./docs --doc_opt=html,docs.html ./protobuf/avs.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively, generate API references in Markdown format&lt;/p&gt; &lt;pre&gt;&lt;code&gt;protoc --doc_out=./docs --doc_opt=markdown,docs.md ./protobuf/avs.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This command will generate a markdown version of the gRPC API documentation. To enhance the clarity of the generated documentation, the following improvements should be made to the .proto file:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Group Definitions by Command&lt;/strong&gt;: Organize the API methods and their descriptions by command categories to make it easier for users to find relevant information.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Elaborate on Input Fields&lt;/strong&gt;: Provide detailed descriptions for each input field, including data types, expected values, and any constraints or special considerations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Add Examples&lt;/strong&gt;: Include usage examples for each API method to demonstrate how to construct requests and interpret responses.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Link to Related Resources&lt;/strong&gt;: Where applicable, link to additional resources or documentation that provide further context or implementation details.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Coming soon&lt;/p&gt; &#xA;&lt;h2&gt;Contract address&lt;/h2&gt; &#xA;&lt;h3&gt;Holesky Testnet&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Address&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ProxyAdmin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0x26CF7A7DF7d1E00D83A5Ca24385f697a3ca4577d&#34;&gt;&lt;code&gt;0x26CF7A7DF7d1E00D83A5Ca24385f697a3ca4577d&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ServiceManager&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0xEA3E82F9Ae371A6a372A6DCffB1a9bD17e0608eF&#34;&gt;&lt;code&gt;0xEA3E82F9Ae371A6a372A6DCffB1a9bD17e0608eF&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RegistryCoordinator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0x90c6d6f2A78d5Ce22AB8631Ddb142C03AC87De7a&#34;&gt;&lt;code&gt;0x90c6d6f2A78d5Ce22AB8631Ddb142C03AC87De7a&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BLSApkRegistry&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0x6752F8BeeE5BF45c9d11FDBC4F8aFfF879925585&#34;&gt;&lt;code&gt;0x6752F8BeeE5BF45c9d11FDBC4F8aFfF879925585&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IndexRegistry&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0x298a5d3C8F8Db30E8292C9e2BF92292de469C8FF&#34;&gt;&lt;code&gt;0x298a5d3C8F8Db30E8292C9e2BF92292de469C8FF&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OperatorStateRetriever&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0xb7bb920538e038DFFEfcB55caBf713652ED2031F&#34;&gt;&lt;code&gt;0xb7bb920538e038DFFEfcB55caBf713652ED2031F&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PauserRegistry&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0x3A8ea6e4202CdDe4a9e0cCE19c4Dc1739ba2cF0b&#34;&gt;&lt;code&gt;0x3A8ea6e4202CdDe4a9e0cCE19c4Dc1739ba2cF0b&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;StakeRegistry&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0x7BacD5dd5A7C3acf8bf1a3c88fB0D00B68EE626A&#34;&gt;&lt;code&gt;0x7BacD5dd5A7C3acf8bf1a3c88fB0D00B68EE626A&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ApConfig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://holesky.etherscan.io/address/0xb8abbb082ecaae8d1cd68378cf3b060f6f0e07eb&#34;&gt;&lt;code&gt;0xb8abbb082ecaae8d1cd68378cf3b060f6f0e07eb&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Ethereum Mainnet&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Address&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ProxyAdmin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0x5989934D31f7f397511f105B7E4175a06B7A517F&#34;&gt;&lt;code&gt;0x5989934D31f7f397511f105B7E4175a06B7A517F&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ServiceManager&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0x18343Aa10e3D2F3A861e5649627324aEAD987Adf&#34;&gt;&lt;code&gt;0x18343Aa10e3D2F3A861e5649627324aEAD987Adf&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RegistryCoordinator&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0x8DE3Ee0dE880161Aa0CD8Bf9F8F6a7AfEeB9A44B&#34;&gt;&lt;code&gt;0x8DE3Ee0dE880161Aa0CD8Bf9F8F6a7AfEeB9A44B&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BLSApkRegistry&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0xB58687fF303C8e92C28a484342755d3228081d45&#34;&gt;&lt;code&gt;0xB58687fF303C8e92C28a484342755d3228081d45&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IndexRegistry&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0xc6A464e39d4fA5013D61295501c7cCd050d76612&#34;&gt;&lt;code&gt;0xc6A464e39d4fA5013D61295501c7cCd050d76612&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OperatorStateRetriever&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0xb3af70D5f72C04D1f490ff49e5aB189fA7122713&#34;&gt;&lt;code&gt;0xb3af70D5f72C04D1f490ff49e5aB189fA7122713&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PauserRegistry&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0xeec585186c37c517030ba371deac5c17e728c135&#34;&gt;&lt;code&gt;0xeec585186c37c517030ba371deac5c17e728c135&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;StakeRegistry&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0x363b3604fE8c2323a98c00906115c8b87a512a12&#34;&gt;&lt;code&gt;0x363b3604fE8c2323a98c00906115c8b87a512a12&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TaskManager&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0x940f62f75cbbbd723d37c9171dc681dfba653b49&#34;&gt;&lt;code&gt;0x940f62f75cbbbd723d37c9171dc681dfba653b49&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ApConfig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://etherscan.io/address/0x9c02dfc92eea988902a98919bf4f035e4aaefced&#34;&gt;&lt;code&gt;0x9c02dfc92eea988902a98919bf4f035e4aaefced&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>googleapis/genai-toolbox</title>
    <updated>2025-02-25T01:31:01Z</updated>
    <id>tag:github.com,2025-02-25:/googleapis/genai-toolbox</id>
    <link href="https://github.com/googleapis/genai-toolbox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gen AI Toolbox for Databases is an open source server that makes it easier to build Gen AI tools for interacting with databases.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🧰 Gen AI Toolbox for Databases&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Gen AI Toolbox for Databases is currently in beta, and may see breaking changes until the first stable release (v1.0).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Gen AI Toolbox for Databases is an open source server that makes it easier to build Gen AI tools for interacting with databases. It enables you to develop tools easier, faster, and more securely by handling the complexities such as connection pooling, authentication, and more.&lt;/p&gt; &#xA;&lt;p&gt;This README provides a brief overview. For comprehensive details, see the full &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- TOC ignore:true --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#why-toolbox&#34;&gt;Why Toolbox?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#general-architecture&#34;&gt;General Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#installing-the-server&#34;&gt;Installing the server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#running-the-server&#34;&gt;Running the server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#integrating-your-application&#34;&gt;Integrating your application&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#sources&#34;&gt;Sources&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#toolsets&#34;&gt;Toolsets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Why Toolbox?&lt;/h2&gt; &#xA;&lt;p&gt;Toolbox helps you build Gen AI tools that let your agents access data in your database. Toolbox provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simplified development&lt;/strong&gt;: Integrate tools to your agent in less than 10 lines of code, reuse tools between multiple agents or frameworks, and deploy new versions of tools more easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Better performance&lt;/strong&gt;: Best practices such as connection pooling, authentication, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhanced security&lt;/strong&gt;: Integrated auth for more secure access to your data&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;End-to-end observability&lt;/strong&gt;: Out of the box metrics and tracing with built-in support for OpenTelemetry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;General Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Toolbox sits between your application&#39;s orchestration framework and your database, providing a control plane that is used to modify, distribute, or invoke tools. It simplifies the management of your tools by providing you with a centralized location to store and update tools, allowing you to share tools between agents and applications and update those tools without necessarily redeploying your application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/docs/en/getting-started/introduction/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing the server&lt;/h3&gt; &#xA;&lt;p&gt;For the latest version, check the &lt;a href=&#34;https://github.com/googleapis/genai-toolbox/releases&#34;&gt;releases page&lt;/a&gt; and use the following instructions for your OS and CPU architecture.&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Binary&lt;/summary&gt; &#xA; &lt;p&gt;To install Toolbox as a binary:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# see releases page for other versions&#xA;export VERSION=0.1.0&#xA;curl -O https://storage.googleapis.com/genai-toolbox/v$VERSION/linux/amd64/toolbox&#xA;chmod +x toolbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Container image&lt;/summary&gt; You can also install Toolbox as a container: &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# see releases page for other versions&#xA;export VERSION=0.1.0&#xA;docker pull us-central1-docker.pkg.dev/database-toolbox/toolbox/toolbox:$VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Compile from source&lt;/summary&gt; &#xA; &lt;p&gt;To install from source, ensure you have the latest version of &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go installed&lt;/a&gt;, and then run the following command:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/googleapis/genai-toolbox@v0.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Running the server&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/#configuration&#34;&gt;Configure&lt;/a&gt; a &lt;code&gt;tools.yaml&lt;/code&gt; to define your tools, and then execute &lt;code&gt;toolbox&lt;/code&gt; to start the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./toolbox --tools_file &#34;tools.yaml&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;toolbox help&lt;/code&gt; for a full list of flags! To stop the server, send a terminate signal (&lt;code&gt;ctrl+c&lt;/code&gt; on most platforms).&lt;/p&gt; &#xA;&lt;p&gt;For more detailed documentation on deploying to different environments, check out the resources in the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/how-to/&#34;&gt;How-to section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Integrating your application&lt;/h3&gt; &#xA;&lt;p&gt;Once your server is up and running, you can load the tools into your application. See below the list of Client SDKs for using various frameworks:&lt;/p&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;LangChain / LangGraph&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Install &lt;a href=&#34;https://github.com/googleapis/genai-toolbox-langchain-python&#34;&gt;Toolbox LangChain SDK&lt;/a&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install toolbox-langchain&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Load tools: &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from toolbox_langchain import ToolboxClient&#xA;&#xA;# update the url to point to your server&#xA;client = ToolboxClient(&#34;http://127.0.0.1:5000&#34;)&#xA;&#xA;# these tools can be passed to your application! &#xA;tools = await client.aload_toolset()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;For more detailed instructions on using the Toolbox LangChain SDK, see the &lt;a href=&#34;https://github.com/googleapis/genai-toolbox-langchain-python/raw/main/README.md&#34;&gt;project&#39;s README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The primary way to configure Toolbox is through the &lt;code&gt;tools.yaml&lt;/code&gt; file. If you have multiple files, you can tell toolbox which to load with the &lt;code&gt;--tools_file tools.yaml&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;You can find more detailed reference documentation to all resource types in the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/&#34;&gt;Resources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sources&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;sources&lt;/code&gt; section of your &lt;code&gt;tools.yaml&lt;/code&gt; defines what data sources your Toolbox should have access to. Most tools will have at least one source to execute against.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sources:&#xA;  my-pg-source:&#xA;    kind: postgres&#xA;    host: 127.0.0.1&#xA;    port: 5432&#xA;    database: toolbox_db&#xA;    user: toolbox_user&#xA;    password: my-password&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on configuring different types of sources, see the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/sources&#34;&gt;Sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tools&lt;/code&gt; section of your &lt;code&gt;tools.yaml&lt;/code&gt; define your the actions your agent can take: what kind of tool it is, which source(s) it affects, what parameters it uses, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;tools:&#xA;  search-hotels-by-name:&#xA;    kind: postgres-sql&#xA;    source: my-pg-source&#xA;    description: Search for hotels based on name.&#xA;    parameters:&#xA;      - name: name&#xA;        type: string&#xA;        description: The name of the hotel.&#xA;    statement: SELECT * FROM hotels WHERE name ILIKE &#39;%&#39; || $1 || &#39;%&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details on configuring different types of tools, see the &lt;a href=&#34;https://googleapis.github.io/genai-toolbox/resources/tools&#34;&gt;Tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Toolsets&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;toolsets&lt;/code&gt; section of your &lt;code&gt;tools.yaml&lt;/code&gt; allows you to define groups of tools that you want to be able to load together. This can be useful for defining different groups based on agent or application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;toolsets:&#xA;    my_first_toolset:&#xA;        - my_first_tool&#xA;        - my_second_tool&#xA;    my_second_toolset:&#xA;        - my_second_tool&#xA;        - my_third_tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can load toolsets by name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# This will load all tools&#xA;all_tools = await client.aload_toolset()&#xA;&#xA;# This will only load the tools listed in &#39;my_second_toolset&#39;&#xA;my_second_toolset = await client.aload_toolset(&#34;my_second_toolset&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;https://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;, including a &lt;code&gt;MAJOR.MINOR.PATCH&lt;/code&gt; version number that increments with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MAJOR version when we make incompatible API changes&lt;/li&gt; &#xA; &lt;li&gt;MINOR version when we add functionality in a backward compatible manner&lt;/li&gt; &#xA; &lt;li&gt;PATCH version when we make backward compatible bug fixes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The public API that this applies to is the CLI associated with Toolbox, the interactions with official SDKs, and the definitions in the &lt;code&gt;tools.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. Please, see the &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. See &lt;a href=&#34;https://raw.githubusercontent.com/googleapis/genai-toolbox/main/CODE_OF_CONDUCT.md&#34;&gt;Contributor Code of Conduct&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>