<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-16T01:43:17Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grafov/hulk</title>
    <updated>2022-08-16T01:43:17Z</updated>
    <id>tag:github.com,2022-08-16:/grafov/hulk</id>
    <link href="https://github.com/grafov/hulk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HULK DoS tool ported to Go with some additional features.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hulk DoS tool&lt;/h1&gt; &#xA;&lt;p&gt;HULK DoS tool ported to Go language from Python. Original Python utility by Barry Shteiman &lt;a href=&#34;http://www.sectorix.com/2012/05/17/hulk-web-server-dos-tool/&#34;&gt;http://www.sectorix.com/2012/05/17/hulk-web-server-dos-tool/&lt;/a&gt; I just ported the code as is quick and dirty. Original functions names are keeped and original logic mostly keeped too.&lt;/p&gt; &#xA;&lt;p&gt;The main difference from Python version layed in Golang architecture for concurrency: the goroutines. hulk.py runs a new thread for each connection in the connection pool so it uses hundreds and thousands of threads. hulk.go just uses lightweight goroutines that used only tens of threads (commonly golang runtime started one thread for CPU core + several service threads). This architecture allows golang version better consume resources and got much higher connection pool on the same hardware than Python version can.&lt;/p&gt; &#xA;&lt;p&gt;This tool targeted for stress testing and may really down badly configured server or badly made app. Use it carefully.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ hulk -site http://example.com/test/ 2&amp;gt;/dev/null&#xA;&#xA;$ HULKMAXPROCS=4096 hulk -site http://example.com 2&amp;gt;/tmp/errlog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Useful environment vars:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GOMAXPROCS Set it to number of your CPUs or higher (no more actual for latest golang versions).&lt;/li&gt; &#xA; &lt;li&gt;HULKMAXPROCS Limit the connection pool (1024 by default).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details: &lt;a href=&#34;http://old.siberian.laika.name/node/7&#34;&gt;http://old.siberian.laika.name/node/7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Update: well, I created this utility for one time task when I only played a bit with golang. Surprisingly I found that this utility used by other people, got some stars on github and even included in &lt;a href=&#34;http://blackarch.org/dos.html&#34;&gt;BlackArch Linux distro&lt;/a&gt;. So I cleaned up code a bit.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;I think it may be public domain because of it is just simple and short piece of code but for reason I don&#39;t remember already I have choose GPL for it. Okey. So, Go version of HULK licensed under GPLv3. See LICENSE.&lt;/p&gt; &#xA;&lt;p&gt;I am not related with original HULK utility in Python. Original HULK utility is authority of Barry Shteiman (&lt;a href=&#34;http://sectorix.com&#34;&gt;http://sectorix.com&lt;/a&gt;). There are not any references to license in the original source then it is not under GPL. Ask author of the original utility about license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Jguer/yay</title>
    <updated>2022-08-16T01:43:17Z</updated>
    <id>tag:github.com,2022-08-16:/Jguer/yay</id>
    <link href="https://github.com/Jguer/yay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Yet another Yogurt - An AUR Helper written in Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/yay/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/yay?color=1793d1&amp;amp;label=yay&amp;amp;logo=arch-linux&amp;amp;style=for-the-badge&#34; alt=&#34;yay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/yay-bin/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/yay-bin?color=1793d1&amp;amp;label=yay-bin&amp;amp;logo=arch-linux&amp;amp;style=for-the-badge&#34; alt=&#34;yay-bin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://aur.archlinux.org/packages/yay-git/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/yay-git?color=1793d1&amp;amp;label=yay-git&amp;amp;logo=arch-linux&amp;amp;style=for-the-badge&#34; alt=&#34;yay-git&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/aur/votes/yay?color=333333&amp;amp;style=for-the-badge&#34; alt=&#34;AUR votes&#34;&gt; &lt;a href=&#34;https://github.com/Jguer/yay/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/jguer/yay?color=333333&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Yay&lt;/h1&gt; &#xA;&lt;p&gt;Yet Another Yogurt - An AUR Helper Written in Go&lt;/p&gt; &#xA;&lt;h3&gt;Help translate yay: &lt;a href=&#34;https://www.transifex.com/yay-1/yay/&#34;&gt;Transifex&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advanced dependency solving&lt;/li&gt; &#xA; &lt;li&gt;PKGBUILD downloading from ABS or AUR&lt;/li&gt; &#xA; &lt;li&gt;Completions for AUR packages&lt;/li&gt; &#xA; &lt;li&gt;Query user up-front for all input (prior to starting builds)&lt;/li&gt; &#xA; &lt;li&gt;Narrow search (&lt;code&gt;yay linux header&lt;/code&gt; will first search &lt;code&gt;linux&lt;/code&gt; and then narrow on &lt;code&gt;header&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Find matching package providers during search and allow selection&lt;/li&gt; &#xA; &lt;li&gt;Remove make dependencies at the end of the build process&lt;/li&gt; &#xA; &lt;li&gt;Un/Vote for packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/399431&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/399431.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/399433&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/399433.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you are migrating from another AUR helper, you can simply install Yay with that helper.&lt;/p&gt; &#xA;&lt;h3&gt;Source&lt;/h3&gt; &#xA;&lt;p&gt;The initial installation of Yay can be done by cloning the PKGBUILD and building with makepkg:&lt;/p&gt; &#xA;&lt;p&gt;Before you begin, make sure you have the &lt;code&gt;base-devel&lt;/code&gt; package group installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S --needed git base-devel&#xA;git clone https://aur.archlinux.org/yay.git&#xA;cd yay&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to do all of this at once, we can chain the commands like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S --needed git base-devel &amp;amp;&amp;amp; git clone https://aur.archlinux.org/yay.git &amp;amp;&amp;amp; cd yay &amp;amp;&amp;amp; makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary&lt;/h3&gt; &#xA;&lt;p&gt;If you do not want to compile yay yourself you can use the builds generated by GitHub Actions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S --needed git base-devel&#xA;git clone https://aur.archlinux.org/yay-bin.git&#xA;cd yay-bin&#xA;makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other distributions&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using Manjaro or &lt;a href=&#34;https://repology.org/project/yay/versions&#34;&gt;another distribution that packages &lt;code&gt;yay&lt;/code&gt;&lt;/a&gt; you can simply install yay using pacman (as root):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pacman -S --needed git base-devel yay&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;⚠️ distributions sometimes lag updating yay on their repositories.&lt;/p&gt; &#xA;&lt;h2&gt;First Use&lt;/h2&gt; &#xA;&lt;h4&gt;Development packages upgrade&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;yay -Y --gendb&lt;/code&gt; to generate a development package database for &lt;code&gt;*-git&lt;/code&gt; packages that were installed without yay. This command should only be run once.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;yay -Syu --devel&lt;/code&gt; will then check for development package updates&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;yay -Y --devel --save&lt;/code&gt; to make development package updates permanently enabled (&lt;code&gt;yay&lt;/code&gt; and &lt;code&gt;yay -Syu&lt;/code&gt; will then always check dev packages)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples of Custom Operations&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Alias to &lt;code&gt;yay -Syu&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay &amp;lt;Search Term&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Present package-installation selection menu.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Y --combinedupgrade --save&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make combined upgrade the default mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Ps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print system statistics.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Yc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean unneeded dependencies.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -G &amp;lt;AUR Package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Download PKGBUILD from ABS or AUR.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Gp &amp;lt;AUR Package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print to stdout PKGBUILD from ABS or AUR.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Y --gendb&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Generate development package database used for devel update.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Syu --devel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Perform system upgrade, but also check for development package updates.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Syu --timeupdate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Perform system upgrade and use PKGBUILD modification time (not version number) to determine update.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Wv &amp;lt;AUR Package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vote for package (Requires setting &lt;code&gt;AUR_USER&lt;/code&gt; and &lt;code&gt;AUR_PASSWORD&lt;/code&gt; environment variables). (yay v11.3+)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;yay -Wu &amp;lt;AUR Package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unvote for package (Requires setting &lt;code&gt;AUR_USER&lt;/code&gt; and &lt;code&gt;AUR_PASSWORD&lt;/code&gt; environment variables) (yay v11.3+)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Yay does not display colored output. How do I fix it?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Make sure you have the &lt;code&gt;Color&lt;/code&gt; option in your &lt;code&gt;/etc/pacman.conf&lt;/code&gt; (see issue &lt;a href=&#34;https://github.com/Jguer/yay/issues/123&#34;&gt;#123&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Yay is not prompting to skip packages during system upgrade.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The default behavior was changed after &lt;a href=&#34;https://github.com/Jguer/yay/releases/tag/v8.918&#34;&gt;v8.918&lt;/a&gt; (see &lt;a href=&#34;https://github.com/Jguer/yay/commit/3bdb5343218d99d40f8a449b887348611f6bdbfc&#34;&gt;3bdb534&lt;/a&gt; and issue &lt;a href=&#34;https://github.com/Jguer/yay/issues/554&#34;&gt;#554&lt;/a&gt;). To restore the package-skip behavior use &lt;code&gt;--combinedupgrade&lt;/code&gt; (make it permanent by appending &lt;code&gt;--save&lt;/code&gt;). Note: skipping packages will leave your system in a &lt;a href=&#34;https://wiki.archlinux.org/index.php/System_maintenance#Partial_upgrades_are_unsupported&#34;&gt;partially-upgraded state&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Sometimes diffs are printed to the terminal, and other times they are paged via less. How do I fix this?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yay uses &lt;code&gt;git diff&lt;/code&gt; to display diffs, which by default tells less not to page if the output can fit into one terminal length. This behavior can be overridden by exporting your own flags (&lt;code&gt;export LESS=SRX&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Yay is not asking me to edit PKGBUILDS, and I don&#39;t like the diff menu! What can I do?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;yay --editmenu --nodiffmenu --save&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;How can I tell Yay to act only on AUR packages, or only on repo packages?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;code&gt;yay -{OPERATION} --aur&lt;/code&gt; &lt;code&gt;yay -{OPERATION} --repo&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;An &lt;code&gt;Out Of Date AUR Packages&lt;/code&gt; message is displayed. Why doesn&#39;t Yay update them?&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This message does not mean that updated AUR packages are available. It means the packages have been flagged out of date on the AUR, but their maintainers have not yet updated the &lt;code&gt;PKGBUILD&lt;/code&gt;s (see &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch_User_Repository#Foo_in_the_AUR_is_outdated.3B_what_should_I_do.3F&#34;&gt;outdated AUR packages&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Yay doesn&#39;t install dependencies added to a PKGBUILD during installation.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yay resolves all dependencies ahead of time. You are free to edit the PKGBUILD in any way, but any problems you cause are your own and should not be reported unless they can be reproduced with the original PKGBUILD.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;I know my &lt;code&gt;-git&lt;/code&gt; package has updates but yay doesn&#39;t offer to update it&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Yay uses an hash cache for development packages. Normally it is updated at the end of the package install with the message &lt;code&gt;Found git repo&lt;/code&gt;. If you transition between aur helpers and did not install the devel package using yay at some point, it is possible it never got added to the cache. &lt;code&gt;yay -Y --gendb&lt;/code&gt; will fix the current version of every devel package and start checking from there.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;I want to help out!&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/Jguer/yay/next/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;What settings do you use?&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -Y --devel --combinedupgrade --batchinstall --save&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Pacman conf options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;UseSyslog&#xA;Color&#xA;CheckSpace&#xA;VerbosePkgLists&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;All support related to Yay should be requested via GitHub issues. Since Yay is not officially supported by Arch Linux, support should not be sought out on the forums, AUR comments or other official channels.&lt;/p&gt; &#xA;&lt;p&gt;A broken AUR package should be reported as a comment on the package&#39;s AUR page. A package may only be considered broken if it fails to build with makepkg.&lt;/p&gt; &#xA;&lt;p&gt;Reports should be made using makepkg and include the full output as well as any other relevant information. Never make reports using Yay or any other external tools.&lt;/p&gt; &#xA;&lt;h2&gt;Images&lt;/h2&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://rawcdn.githack.com/Jguer/jguer.github.io/77647f396cb7156fd32e30970dbeaf6d6dc7f983/yay/yay.png&#34; width=&#34;42%&#34;&gt; &lt;img src=&#34;https://rawcdn.githack.com/Jguer/jguer.github.io/77647f396cb7156fd32e30970dbeaf6d6dc7f983/yay/yay-s.png&#34; width=&#34;42%&#34;&gt; &lt;/p&gt; &#xA;&lt;p float=&#34;left&#34;&gt; &lt;img src=&#34;https://rawcdn.githack.com/Jguer/jguer.github.io/77647f396cb7156fd32e30970dbeaf6d6dc7f983/yay/yay-y.png&#34; width=&#34;42%&#34;&gt; &lt;img src=&#34;https://rawcdn.githack.com/Jguer/jguer.github.io/77647f396cb7156fd32e30970dbeaf6d6dc7f983/yay/yay-ps.png&#34; width=&#34;42%&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Other AUR helpers/tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/morganamilo/paru&#34;&gt;paru&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AladW/aurutils&#34;&gt;aurutils&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/actionless/pikaur&#34;&gt;pikaur&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>OWASP/Amass</title>
    <updated>2022-08-16T01:43:17Z</updated>
    <id>tag:github.com,2022-08-16:/OWASP/Amass</id>
    <link href="https://github.com/OWASP/Amass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In-depth Attack Surface Mapping and Asset Discovery&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://owasp.org/www-project-amass/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/images/owasp_logo.png&#34; alt=&#34;OWASP Logo&#34;&gt; OWASP Amass&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/OWASP/Amass/raw/master/images/amass_video.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://owasp.org/projects/#sec-flagships&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/owasp-flagship%20project-48A646.svg?sanitize=true&#34; alt=&#34;OWASP Flagship&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/OWASP/Amass/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/OWASP/Amass&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/caffix/amass&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/caffix/amass.svg?sanitize=true&#34; alt=&#34;Docker Images&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/owaspamass&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/owaspamass.svg?logo=twitter&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rtN8GMd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/433729817918308352.svg?logo=discord&#34; alt=&#34;Chat on Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/OWASP/Amass/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;GitHub Test Status&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/OWASP/Amass/v3&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/OWASP/Amass/v3?utm_source=godoc&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-apache%202-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/OWASP/Amass&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/OWASP/Amass&#34; alt=&#34;Go Report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/OWASP/Amass&#34;&gt;&lt;img src=&#34;https://www.codefactor.io/repository/github/OWASP/Amass/badge&#34; alt=&#34;CodeFactor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/OWASP/Amass/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/41c139f7cf5c23df1e58/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/OWASP/Amass&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/OWASP/Amass/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The OWASP Amass Project performs network mapping of attack surfaces and external asset discovery using open source information gathering and active reconnaissance techniques.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Information Gathering Techniques Used:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Technique&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Data Sources&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;APIs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;360PassiveDNS, Ahrefs, AnubisDB, BinaryEdge, BufferOver, BuiltWith, C99, Chaos, CIRCL, Cloudflare, DNSDB, DNSRepo, Detectify, FOFA, FullHunt, GitHub, GitLab, Greynoise, HackerTarget, Hunter, IntelX, LeakIX, Maltiverse, Mnemonic, N45HT, PassiveTotal, PentestTools, Quake, Shodan, SonarSearch, Spamhaus, Spyse, Sublist3rAPI, ThreatBook, ThreatCrowd, ThreatMiner, Twitter, URLScan, VirusTotal, ZETAlytics, ZoomEye&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Certificates&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Active pulls (optional), Censys, CertSpotter, Crtsh, Digitorus, FacebookCT, GoogleCT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DNS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Brute forcing, Reverse DNS sweeping, NSEC zone walking, Zone transfers, FQDN alterations/permutations, FQDN Similarity-based Guessing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Routing&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ARIN, BGPTools, BGPView, IPdata, IPinfo, NetworksDB, RADb, Robtex, ShadowServer, TeamCymru&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scraping&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AbuseIPDB, Ask, Baidu, Bing, DNSDumpster, DuckDuckGo, Gists, HackerOne, HyperStat, IPv4Info, PKey, RapidDNS, Riddler, Searchcode, Searx, SiteDossier, Yahoo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Web Archives&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ArchiveIt, Arquivo, CommonCrawl, HAW, UKWebArchive, Wayback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WHOIS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;AlienVault, AskDNS, DNSlytics, ONYPHE, SecurityTrails, SpyOnWeb, Umbrella, WhoisXMLAPI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation &lt;a href=&#34;https://golang.org/dl/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/OWASP/Amass&#34; alt=&#34;Go Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/caffix/amass&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/caffix/amass.svg?sanitize=true&#34; alt=&#34;Docker Images&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/amass&#34;&gt;&lt;img src=&#34;https://snapcraft.io/amass/badge.svg?sanitize=true&#34; alt=&#34;Snapcraft&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/OWASP/Amass/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/OWASP/Amass/latest/total.svg?sanitize=true&#34; alt=&#34;GitHub Downloads&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can find some additional installation variations in the &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/doc/install.md&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Prebuilt Packages&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Simply unzip the &lt;a href=&#34;https://github.com/OWASP/Amass/releases/latest&#34;&gt;package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put the precompiled binary into your path&lt;/li&gt; &#xA; &lt;li&gt;Start using OWASP Amass!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap caffix/amass&#xA;brew install amass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Snapcraft&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install amass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Container&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Pull the Docker image by running &lt;code&gt;docker pull caffix/amass&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;docker run -v OUTPUT_DIR_PATH:/.config/amass/ caffix/amass enum -d example.com&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The volume argument allows the Amass graph database to persist between executions and output files to be accessed on the host system. The first field (left of the colon) of the volume option is the amass output directory that is external to Docker, while the second field is the path, internal to Docker, where amass will write the output files.&lt;/p&gt; &#xA;&lt;h3&gt;From Sources&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go&lt;/a&gt; and setup your Go workspace&lt;/li&gt; &#xA; &lt;li&gt;Download OWASP Amass by running &lt;code&gt;go install -v github.com/OWASP/Amass/v3/...@master&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;At this point, the binary should be in &lt;code&gt;$GOPATH/bin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation &lt;a href=&#34;https://pkg.go.dev/github.com/OWASP/Amass/v3&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/OWASP/Amass/v3?utm_source=godoc&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/doc/install.md&#34;&gt;Installation Guide&lt;/a&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/doc/user_guide.md&#34;&gt;User&#39;s Guide&lt;/a&gt; for additional information.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/doc/tutorial.md&#34;&gt;Tutorial&lt;/a&gt; for example usage.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/doc/scripting.md&#34;&gt;Amass Scripting Engine Manual&lt;/a&gt; for greater control over your enumeration process.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting &lt;a href=&#34;https://discord.gg/rtN8GMd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/433729817918308352.svg?logo=discord&#34; alt=&#34;Chat on Discord&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you need help with installation and/or usage of the tool, please join our &lt;a href=&#34;https://discord.gg/rtN8GMd&#34;&gt;Discord server&lt;/a&gt; where community members can best help you.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🛑&lt;/span&gt; &lt;strong&gt;Please avoid opening GitHub issues for support requests or questions!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contribute-yes-brightgreen.svg?sanitize=true&#34; alt=&#34;Contribute Yes&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rtN8GMd&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/433729817918308352.svg?logo=discord&#34; alt=&#34;Chat on Discord&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;We are always happy to get new contributors on board! Please check &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to learn how to contribute to our codebase, and join our &lt;a href=&#34;https://discord.gg/rtN8GMd&#34;&gt;Discord Server&lt;/a&gt; to discuss current project goals.&lt;/p&gt; &#xA;&lt;p&gt;For a list of all contributors to the OWASP Amass Project please visit our &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/HALL_OF_FAME.md&#34;&gt;HALL_OF_FAME.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;External Projects Helping Amass Users&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PatrikFehrenbach/amass-tools&#34;&gt;Patrik&#39;s Amass data source scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeredbare/paradigm&#34;&gt;Paradigm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amroot/amass-to-csv&#34;&gt;amass-to-csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/postmodern/ruby-amass&#34;&gt;ruby-amass&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.accenture.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/images/accenture_logo.png&#34; alt=&#34;Accenture Logo&#34;&gt; Accenture&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&#34;Accenture’s adversary simulation team has used Amass as our primary tool suite on a variety of external enumeration projects and attack surface assessments for clients. It’s been an absolutely invaluable basis for infrastructure enumeration, and we’re really grateful for all the hard work that’s gone into making and maintaining it – it’s made our job much easier!&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;- Max Deighton, Accenture Cyber Defense Manager&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.visma.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/images/visma_logo.png&#34; alt=&#34;Visma Logo&#34;&gt; Visma&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&#34;For an internal red team, the organisational structure of Visma puts us against a unique challenge. Having sufficient, continuous visibility over our external attack surface is an integral part of being able to efficiently carry out our task. When dealing with hundreds of companies with different products and supporting infrastructure we need to always be on top of our game.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For years, OWASP Amass has been a staple in the asset reconnaissance field, and keeps proving its worth time after time. The tool keeps constantly evolving and improving to adapt to the new trends in this area.&#34;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;- Joona Hoikkala (&lt;a href=&#34;https://github.com/joohoi&#34;&gt;@joohoi&lt;/a&gt;) &amp;amp; Alexis Fernández (&lt;a href=&#34;https://github.com/six2dez&#34;&gt;@six2dez&lt;/a&gt;), Visma Red Team&lt;/p&gt; &#xA;&lt;h2&gt;References &lt;a href=&#34;https://www.youtube.com/watch?v=C-GabM2db9A&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/bugcrowd-levelup%200x04-orange.svg?sanitize=true&#34; alt=&#34;Bugcrowd LevelUp 0x04&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.defcon.org/html/defcon-27/dc-27-demolabs.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/defcon%2027-demo%20labs-purple.svg?sanitize=true&#34; alt=&#34;DEF CON 27 Demo Labs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reconvillage.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/defcon%2027-recon%20village-lightgrey.svg?sanitize=true&#34; alt=&#34;DEF CON 27 Recon Village&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/RedTeamVillage/featured&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/defcon%2028-red%20team%20village-red.svg?sanitize=true&#34; alt=&#34;DEF CON 28 Red Team Village&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.twitch.tv/videos/723418873&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/bugcrowd-levelup%200x07-orange.svg?sanitize=true&#34; alt=&#34;Bugcrowd LevelUp 0x07&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=J33JmuQ79tE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/grayhat%202020-bootcamp-lightgrey.svg?sanitize=true&#34; alt=&#34;Grayhat 2020&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=fDlKQXRaGl0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/owasp%202020-benelux%20days-blue.svg?sanitize=true&#34; alt=&#34;BeNeLux 2020&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://vimeo.com/481985359&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/bsides%202020-k%C3%B8benhavn-red.svg?sanitize=true&#34; alt=&#34;BSides København 2020&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=fDlKQXRaGl0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/security%20weekly-esw%20219-blue.svg?sanitize=true&#34; alt=&#34;ESW 2021&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Did you write a blog post, magazine article or do a podcast about OWASP Amass? Or maybe you held or joined a conference talk or meetup session, a hacking workshop or public training where this project was mentioned?&lt;/p&gt; &#xA;&lt;p&gt;Add it to our ever-growing list of &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/REFERENCES.md&#34;&gt;REFERENCES.md&lt;/a&gt; by forking and opening a Pull Request!&lt;/p&gt; &#xA;&lt;h3&gt;Top Mentions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://main.whoisxmlapi.com/success-stories/cyber-security-solutions/owasp-amass-and-whoisxml-api-are-now-integration-partners&#34;&gt;WhoisXML API | OWASP Amass and WhoisXML API Are Now Integration Partners&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.intigriti.com/2021/06/08/hacker-tools-amass-hunting-for-subdomains&#34;&gt;Intigriti | Hacker tools: Amass – Hunting for Subdomains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@hakluke/haklukes-guide-to-amass-how-to-use-amass-more-effectively-for-bug-bounties-7c37570b83f7&#34;&gt;Hakluke | Guide to Amass — How to Use Amass More Effectively for Bug Bounties&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://securitytrails.com/blog/owasp-amass&#34;&gt;SecurityTrails | OWASP Amass: A Solid Information Gathering Tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.trustedsec.com/blog/upgrade-your-workflow-part-1-building-osint-checklists/&#34;&gt;TrustedSec | Upgrade Your Workflow, Part 1: Building OSINT Checklists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://isc.sans.edu/forums/diary/Offensive+Tools+Are+For+Blue+Teams+Too/25842/&#34;&gt;SANS ISC | Offensive Tools Are For Blue Teams Too&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/study/amass/&#34;&gt;Daniel Miessler | amass — Automated Attack Surface Mapping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dionach.com/blog/how-to-use-owasp-amass-an-extensive-tutorial/&#34;&gt;Dionach | How to Use OWASP Amass: An Extensive Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Qw1nNPiH_Go&#34;&gt;Jason Haddix | LevelUp 0x02 - The Bug Hunters Methodology v3(ish)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/hacker-toolbelt/owasp-amass-osint-reconnaissance-9b57d81fb958&#34;&gt;Hacker Toolbelt | OWASP Amass OSINT Reconnaissance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mEQnVkSG19M&#34;&gt;ToolWar | Extreme Subdomain Enumeration/Scanning on Windows : OWASP Amass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QRkKzYH4efI&#34;&gt;Ghost Lulz | YouTube - Bug Bounty Tips: Amass Recon Tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://captmeelo.com/bugbounty/2019/09/02/asset-enumeration.html&#34;&gt;Capt. Meelo | Asset Enumeration: Expanding a Target&#39;s Attack Surface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@noobhax/my-recon-process-dns-enumeration-d0e288f81a8a&#34;&gt;Noobhax | My Recon Process — DNS Enumeration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licensing &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-apache%202-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/LICENSE&#34;&gt;Apache license&lt;/a&gt;. OWASP Amass and any contributions are Copyright © by Jeff Foley 2017-2022. Some subcomponents have separate licenses.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OWASP/Amass/master/images/network_06092018.png&#34; alt=&#34;Network graph&#34; title=&#34;Amass Network Mapping&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>