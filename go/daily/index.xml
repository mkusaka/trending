<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-20T01:34:01Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trpc-group/trpc-go</title>
    <updated>2023-10-20T01:34:01Z</updated>
    <id>tag:github.com,2023-10-20:/trpc-group/trpc-go</id>
    <link href="https://github.com/trpc-group/trpc-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pluggable, high-performance RPC framework written in golang&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/README.zh_CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;tRPC-Go Framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/trpc-group/trpc-go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/trpc-group/trpc-go.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/trpc.group/trpc-go/trpc-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/trpc.group/trpc-go/trpc-go&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/trpc-group/trpc-go/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache--2.0-green.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/trpc-group/trpc-go/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/trpc-group/trpc-go.svg?style=flat-square&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://trpc.group/docs/languages/go/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-green&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/trpc-group/trpc-go/actions/workflows/prc.yml&#34;&gt;&lt;img src=&#34;https://github.com/trpc-group/trpc-go/actions/workflows/prc.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/trpc-group/trpc-go/tree/main&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/trpc-group/trpc-go/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;tRPC-Go, as the &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; language implementation of &lt;a href=&#34;https://github.com/trpc-group/trpc&#34;&gt;tRPC&lt;/a&gt;, is a battle-tested microservices framework that has been extensively validated in production environments. It not only delivers high performance but also offers ease of use and testability.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/docs/quick_start.md&#34;&gt;quick start guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/docs/README.md&#34;&gt;detailed documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overall Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/.resources/overall.png&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;tRPC-Go has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multiple services can be started within a single process, listening on multiple addresses.&lt;/li&gt; &#xA; &lt;li&gt;All components are pluggable, with default implementations for various basic functionalities that can be replaced. Other components can be implemented by third parties and registered within the framework.&lt;/li&gt; &#xA; &lt;li&gt;All interfaces can be mock tested using gomock&amp;amp;mockgen to generate mock code, facilitating testing.&lt;/li&gt; &#xA; &lt;li&gt;The framework supports any third-party protocol by implementing the &lt;code&gt;codec&lt;/code&gt; interfaces for the respective protocol. It defaults to supporting trpc and http protocols and can be switched at any time.&lt;/li&gt; &#xA; &lt;li&gt;It provides the &lt;a href=&#34;https://github.com/trpc-group/trpc-cmdline&#34;&gt;trpc command-line tool&lt;/a&gt; for generating code templates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/docs/quick_start.md&#34;&gt;quick start guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/docs/README.md&#34;&gt;detailed documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;readme documents in each directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trpc-group/trpc-cmdline&#34;&gt;trpc command-line tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/examples/helloworld/&#34;&gt;helloworld development guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/examples/features/&#34;&gt;example documentation for various features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trpc-ecosystem/go-codec&#34;&gt;codec plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trpc-ecosystem/go-filter&#34;&gt;filter plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trpc-ecosystem/go-database&#34;&gt;database plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/trpc-ecosystem/repositories&#34;&gt;more...&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing, please take a look at the &lt;a href=&#34;https://raw.githubusercontent.com/trpc-group/trpc-go/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and check the &lt;a href=&#34;https://github.com/trpc-group/trpc-go/issues&#34;&gt;unassigned issues&lt;/a&gt; in the repository. Claim a task and let&#39;s contribute together to tRPC-Go.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apache/incubator-answer</title>
    <updated>2023-10-20T01:34:01Z</updated>
    <id>tag:github.com,2023-10-20:/apache/incubator-answer</id>
    <link href="https://github.com/apache/incubator-answer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Q&amp;A platform software for teams at any scales. Whether it&#39;s a community forum, help center, or knowledge management platform, you can always count on Answer.&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://answer.dev&#34;&gt; &lt;img alt=&#34;logo&#34; src=&#34;https://raw.githubusercontent.com/apache/incubator-answer/main/docs/img/logo.svg?sanitize=true&#34; height=&#34;99px&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Answer - Build Q&amp;amp;A platform&lt;/h1&gt; &#xA;&lt;p&gt;A Q&amp;amp;A platform software for teams at any scales. Whether it’s a community forum, help center, or knowledge management platform, you can always count on Answer.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the project, visit &lt;a href=&#34;https://answer.dev&#34;&gt;answer.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/answerdev/answer/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/answerdev/answer&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://golang.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-go-blue.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reactjs.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-react-blue.svg?sanitize=true&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/answerdev/answer&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/answerdev/answer&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Jm7Y4cbUej&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-chat-5865f2?logo=discord&amp;amp;logoColor=f5f5f5&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apache/incubator-answer/main/docs/img/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Running with docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d -p 9080:80 -v answer-data:/data --name answer answerdev/answer:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https://answer.dev/docs/installation&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Answer provides a plugin system for developers to create custom plugins and expand Answer’s features. You can find the &lt;a href=&#34;https://answer.dev/docs/development/extending/&#34;&gt;plugin documentation here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We value your feedback and suggestions to improve our documentation. If you have any comments or questions, please feel free to contact us. We’re excited to see what you can create using our plugin system!&lt;/p&gt; &#xA;&lt;p&gt;You can also check out the &lt;a href=&#34;https://github.com/answerdev/plugins&#34;&gt;plugins here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome!&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://answer.dev/docs/development/contributing/&#34;&gt;CONTRIBUTING&lt;/a&gt; for ways to get started.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/answerdev/answer/raw/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fullstorydev/grpcurl</title>
    <updated>2023-10-20T01:34:01Z</updated>
    <id>tag:github.com,2023-10-20:/fullstorydev/grpcurl</id>
    <link href="https://github.com/fullstorydev/grpcurl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPCurl&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/fullstorydev/grpcurl/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/fullstorydev/grpcurl/tree/master.svg?style=svg&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/fullstorydev/grpcurl&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/fullstorydev/grpcurl&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grpcurl&lt;/code&gt; is a command-line tool that lets you interact with gRPC servers. It&#39;s basically &lt;code&gt;curl&lt;/code&gt; for gRPC servers.&lt;/p&gt; &#xA;&lt;p&gt;The main purpose for this tool is to invoke RPC methods on a gRPC server from the command-line. gRPC servers use a binary encoding on the wire (&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;protocol buffers&lt;/a&gt;, or &#34;protobufs&#34; for short). So they are basically impossible to interact with using regular &lt;code&gt;curl&lt;/code&gt; (and older versions of &lt;code&gt;curl&lt;/code&gt; that do not support HTTP/2 are of course non-starters). This program accepts messages using JSON encoding, which is much more friendly for both humans and scripts.&lt;/p&gt; &#xA;&lt;p&gt;With this tool you can also browse the schema for gRPC services, either by querying a server that supports &lt;a href=&#34;https://github.com/grpc/grpc/raw/master/src/proto/grpc/reflection/v1/reflection.proto&#34;&gt;server reflection&lt;/a&gt;, by reading proto source files, or by loading in compiled &#34;protoset&#34; files (files that contain encoded file &lt;a href=&#34;https://github.com/google/protobuf/raw/master/src/google/protobuf/descriptor.proto&#34;&gt;descriptor protos&lt;/a&gt;). In fact, the way the tool transforms JSON request data into a binary encoded protobuf is using that very same schema. So, if the server you interact with does not support reflection, you will either need the proto source files that define the service or need protoset files that &lt;code&gt;grpcurl&lt;/code&gt; can use.&lt;/p&gt; &#xA;&lt;p&gt;This repo also provides a library package, &lt;code&gt;github.com/fullstorydev/grpcurl&lt;/code&gt;, that has functions for simplifying the construction of other command-line tools that dynamically invoke gRPC endpoints. This code is a great example of how to use the various packages of the &lt;a href=&#34;https://godoc.org/github.com/jhump/protoreflect&#34;&gt;protoreflect&lt;/a&gt; library, and shows off what they can do.&lt;/p&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://www.youtube.com/watch?v=dDr-8kbMnaw&#34;&gt;&lt;code&gt;grpcurl&lt;/code&gt; talk at GopherCon 2018&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;grpcurl&lt;/code&gt; supports all kinds of RPC methods, including streaming methods. You can even operate bi-directional streaming methods interactively by running &lt;code&gt;grpcurl&lt;/code&gt; from an interactive terminal and using stdin as the request body!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grpcurl&lt;/code&gt; supports both secure/TLS servers &lt;em&gt;and&lt;/em&gt; plain-text servers (i.e. no TLS) and has numerous options for TLS configuration. It also supports mutual TLS, where the client is required to present a client certificate.&lt;/p&gt; &#xA;&lt;p&gt;As mentioned above, &lt;code&gt;grpcurl&lt;/code&gt; works seamlessly if the server supports the reflection service. If not, you can supply the &lt;code&gt;.proto&lt;/code&gt; source files or you can supply protoset files (containing compiled descriptors, produced by &lt;code&gt;protoc&lt;/code&gt;) to &lt;code&gt;grpcurl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Binaries&lt;/h3&gt; &#xA;&lt;p&gt;Download the binary from the &lt;a href=&#34;https://github.com/fullstorydev/grpcurl/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;On macOS, &lt;code&gt;grpcurl&lt;/code&gt; is available via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install grpcurl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;For platforms that support Docker, you can download an image that lets you run &lt;code&gt;grpcurl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Download image&#xA;docker pull fullstorydev/grpcurl:latest&#xA;# Run the tool&#xA;docker run fullstorydev/grpcurl api.grpc.me:443 list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that there are some pitfalls when using docker:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you need to interact with a server listening on the host&#39;s loopback network, you must specify the host as &lt;code&gt;host.docker.internal&lt;/code&gt; instead of &lt;code&gt;localhost&lt;/code&gt; (for Mac or Windows) &lt;em&gt;OR&lt;/em&gt; have the container use the host network with &lt;code&gt;-network=&#34;host&#34;&lt;/code&gt; (Linux only).&lt;/li&gt; &#xA; &lt;li&gt;If you need to provide proto source files or descriptor sets, you must mount the folder containing the files as a volume (&lt;code&gt;-v $(pwd):/protos&lt;/code&gt;) and adjust the import paths to container paths accordingly.&lt;/li&gt; &#xA; &lt;li&gt;If you want to provide the request message via stdin, using the &lt;code&gt;-d @&lt;/code&gt; option, you need to use the &lt;code&gt;-i&lt;/code&gt; flag on the docker command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other Packages&lt;/h3&gt; &#xA;&lt;p&gt;There are numerous other ways to install &lt;code&gt;grpcurl&lt;/code&gt;, thanks to support from third parties that have created recipes/packages for it. These include other ways to install &lt;code&gt;grpcurl&lt;/code&gt; on a variety of environments, including Windows and myriad Linux distributions.&lt;/p&gt; &#xA;&lt;p&gt;You can see more details and the full list of other packages for &lt;code&gt;grpcurl&lt;/code&gt; at &lt;em&gt;repology.org&lt;/em&gt;: &lt;a href=&#34;https://repology.org/project/grpcurl/information&#34;&gt;https://repology.org/project/grpcurl/information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;If you already have the &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go SDK&lt;/a&gt; installed, you can use the &lt;code&gt;go&lt;/code&gt; tool to install &lt;code&gt;grpcurl&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This installs the command into the &lt;code&gt;bin&lt;/code&gt; sub-folder of wherever your &lt;code&gt;$GOPATH&lt;/code&gt; environment variable points. (If you have no &lt;code&gt;GOPATH&lt;/code&gt; environment variable set, the default install location is &lt;code&gt;$HOME/go/bin&lt;/code&gt;). If this directory is already in your &lt;code&gt;$PATH&lt;/code&gt;, then you should be good to go.&lt;/p&gt; &#xA;&lt;p&gt;If you have already pulled down this repo to a location that is not in your &lt;code&gt;$GOPATH&lt;/code&gt; and want to build from the sources, you can &lt;code&gt;cd&lt;/code&gt; into the repo and then run &lt;code&gt;make install&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you encounter compile errors and are using a version of the Go SDK older than 1.13, you could have out-dated versions of &lt;code&gt;grpcurl&lt;/code&gt;&#39;s dependencies. You can update the dependencies by running &lt;code&gt;make updatedeps&lt;/code&gt;. Or, if you are using Go 1.11 or 1.12, you can add &lt;code&gt;GO111MODULE=on&lt;/code&gt; as a prefix to the commands above, which will also build using the right versions of dependencies (vs. whatever you may already have in your &lt;code&gt;GOPATH&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The usage doc for the tool explains the numerous options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;grpcurl -help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the sections below, you will find numerous examples demonstrating how to use &lt;code&gt;grpcurl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Invoking RPCs&lt;/h3&gt; &#xA;&lt;p&gt;Invoking an RPC on a trusted server (e.g. TLS without self-signed key or custom CA) that requires no client certs and supports server reflection is the simplest thing to do with &lt;code&gt;grpcurl&lt;/code&gt;. This minimal invocation sends an empty request body:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;grpcurl grpc.server.com:443 my.custom.server.Service/Method&#xA;&#xA;# no TLS&#xA;grpcurl -plaintext grpc.server.com:80 my.custom.server.Service/Method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To send a non-empty request, use the &lt;code&gt;-d&lt;/code&gt; argument. Note that all arguments must come &lt;em&gt;before&lt;/em&gt; the server address and method name:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;grpcurl -d &#39;{&#34;id&#34;: 1234, &#34;tags&#34;: [&#34;foo&#34;,&#34;bar&#34;]}&#39; \&#xA;    grpc.server.com:443 my.custom.server.Service/Method&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As can be seen in the example, the supplied body must be in JSON format. The body will be parsed and then transmitted to the server in the protobuf binary format.&lt;/p&gt; &#xA;&lt;p&gt;If you want to include &lt;code&gt;grpcurl&lt;/code&gt; in a command pipeline, such as when using &lt;code&gt;jq&lt;/code&gt; to create a request body, you can use &lt;code&gt;-d @&lt;/code&gt;, which tells &lt;code&gt;grpcurl&lt;/code&gt; to read the actual request body from stdin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;grpcurl -d @ grpc.server.com:443 my.custom.server.Service/Method &amp;lt;&amp;lt;EOM&#xA;{&#xA;  &#34;id&#34;: 1234,&#xA;  &#34;tags&#34;: [&#xA;    &#34;foor&#34;,&#xA;    &#34;bar&#34;&#xA;  ]&#xA;}&#xA;EOM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Listing Services&lt;/h3&gt; &#xA;&lt;p&gt;To list all services exposed by a server, use the &#34;list&#34; verb. When using &lt;code&gt;.proto&lt;/code&gt; source or protoset files instead of server reflection, this lists all services defined in the source or protoset files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Server supports reflection&#xA;grpcurl localhost:8787 list&#xA;&#xA;# Using compiled protoset files&#xA;grpcurl -protoset my-protos.bin list&#xA;&#xA;# Using proto sources&#xA;grpcurl -import-path ../protos -proto my-stuff.proto list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;list&#34; verb also lets you see all methods in a particular service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;grpcurl localhost:8787 list my.custom.server.Service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Describing Elements&lt;/h3&gt; &#xA;&lt;p&gt;The &#34;describe&#34; verb will print the type of any symbol that the server knows about or that is found in a given protoset file. It also prints a description of that symbol, in the form of snippets of proto source. It won&#39;t necessarily be the original source that defined the element, but it will be equivalent.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Server supports reflection&#xA;grpcurl localhost:8787 describe my.custom.server.Service.MethodOne&#xA;&#xA;# Using compiled protoset files&#xA;grpcurl -protoset my-protos.bin describe my.custom.server.Service.MethodOne&#xA;&#xA;# Using proto sources&#xA;grpcurl -import-path ../protos -proto my-stuff.proto describe my.custom.server.Service.MethodOne&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Descriptor Sources&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;grpcurl&lt;/code&gt; tool can operate on a variety of sources for descriptors. The descriptors are required, in order for &lt;code&gt;grpcurl&lt;/code&gt; to understand the RPC schema, translate inputs into the protobuf binary format as well as translate responses from the binary format into text. The sections below document the supported sources and what command-line flags are needed to use them.&lt;/p&gt; &#xA;&lt;h3&gt;Server Reflection&lt;/h3&gt; &#xA;&lt;p&gt;Without any additional command-line flags, &lt;code&gt;grpcurl&lt;/code&gt; will try to use &lt;a href=&#34;https://github.com/grpc/grpc/raw/master/src/proto/grpc/reflection/v1/reflection.proto&#34;&gt;server reflection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Examples for how to set up server reflection can be found &lt;a href=&#34;https://github.com/grpc/grpc/raw/master/doc/server-reflection.md#known-implementations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using reflection, the server address (host:port or path to Unix socket) is required even for &#34;list&#34; and &#34;describe&#34; operations, so that &lt;code&gt;grpcurl&lt;/code&gt; can connect to the server and ask it for its descriptors.&lt;/p&gt; &#xA;&lt;h3&gt;Proto Source Files&lt;/h3&gt; &#xA;&lt;p&gt;To use &lt;code&gt;grpcurl&lt;/code&gt; on servers that do not support reflection, you can use &lt;code&gt;.proto&lt;/code&gt; source files.&lt;/p&gt; &#xA;&lt;p&gt;In addition to using &lt;code&gt;-proto&lt;/code&gt; flags to point &lt;code&gt;grpcurl&lt;/code&gt; at the relevant proto source file(s), you may also need to supply &lt;code&gt;-import-path&lt;/code&gt; flags to tell &lt;code&gt;grpcurl&lt;/code&gt; the folders from which dependencies can be imported.&lt;/p&gt; &#xA;&lt;p&gt;Just like when compiling with &lt;code&gt;protoc&lt;/code&gt;, you do &lt;em&gt;not&lt;/em&gt; need to provide an import path for the location of the standard protos included with &lt;code&gt;protoc&lt;/code&gt; (which contain various &#34;well-known types&#34; with a package definition of &lt;code&gt;google.protobuf&lt;/code&gt;). These files are &#34;known&#34; by &lt;code&gt;grpcurl&lt;/code&gt; as a snapshot of their descriptors is built into the &lt;code&gt;grpcurl&lt;/code&gt; binary.&lt;/p&gt; &#xA;&lt;p&gt;When using proto sources, you can omit the server address (host:port or path to Unix socket) when using the &#34;list&#34; and &#34;describe&#34; operations since they only need to consult the proto source files.&lt;/p&gt; &#xA;&lt;h3&gt;Protoset Files&lt;/h3&gt; &#xA;&lt;p&gt;You can also use compiled protoset files with &lt;code&gt;grpcurl&lt;/code&gt;. If you are scripting &lt;code&gt;grpcurl&lt;/code&gt; and need to re-use the same proto sources for many invocations, you will see better performance by using protoset files (since it skips the parsing and compilation steps with each invocation).&lt;/p&gt; &#xA;&lt;p&gt;Protoset files contain binary encoded &lt;code&gt;google.protobuf.FileDescriptorSet&lt;/code&gt; protos. To create a protoset file, invoke &lt;code&gt;protoc&lt;/code&gt; with the &lt;code&gt;*.proto&lt;/code&gt; files that define the service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;protoc --proto_path=. \&#xA;    --descriptor_set_out=myservice.protoset \&#xA;    --include_imports \&#xA;    my/custom/server/service.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;--descriptor_set_out&lt;/code&gt; argument is what tells &lt;code&gt;protoc&lt;/code&gt; to produce a protoset, and the &lt;code&gt;--include_imports&lt;/code&gt; argument is necessary for the protoset to contain everything that &lt;code&gt;grpcurl&lt;/code&gt; needs to process and understand the schema.&lt;/p&gt; &#xA;&lt;p&gt;When using protosets, you can omit the server address (host:port or path to Unix socket) when using the &#34;list&#34; and &#34;describe&#34; operations since they only need to consult the protoset files.&lt;/p&gt;</summary>
  </entry>
</feed>