<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-04T01:28:25Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MultSec/MultCheck</title>
    <updated>2024-03-04T01:28:25Z</updated>
    <id>tag:github.com,2024-03-04:/MultSec/MultCheck</id>
    <link href="https://github.com/MultSec/MultCheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Identifies bad bytes from static analysis with any Anti-Virus scanner.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;MultCheck&lt;/h1&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;i&gt;MultCheck is a open-source, and easy-to-use malware AV test, created by &lt;a href=&#34;https://infosec.exchange/@Pengrey&#34;&gt;@Pengrey&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;MultCheck is a malware-analysis tool that can be used to test the detection of a file by multiple AV engines.&lt;/p&gt; &#xA;&lt;p&gt;It is designed to be easy to use, and to be able to test multiple AV engines. It is also designed to be easy to extend, and to be able to add custom AV engines.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;go build&lt;/code&gt; under the root directory of the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Or directly run the compiled binaries in &lt;a href=&#34;https://github.com/MultSec/MultCheck/releases&#34;&gt;Releases&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd src&#xA;# Build for Windows&#xA;## 64-bit&#xA;$ GOOS=windows GOARCH=amd64 go build -o ../bin/multcheck_x64.exe main.go&#xA;&#xA;## 32-bit&#xA;$ GOOS=windows GOARCH=386 go build -o ../bin/multcheck_x32.exe main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MultSec/MultCheck/assets/55480558/b3105f45-a2d2-42e2-b938-5388f0dc000a&#34;&gt;https://github.com/MultSec/MultCheck/assets/55480558/b3105f45-a2d2-42e2-b938-5388f0dc000a&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;MultCheck accepts a target file as an argument: &lt;code&gt;./multcheck &amp;lt;target_file&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Different built-in scanners can be used by specifying the &lt;code&gt;-scanner&lt;/code&gt; flag: &lt;code&gt;./multcheck -scanner &amp;lt;scanner_name&amp;gt; &amp;lt;target_file&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom scanners can be added by creating a configuration file and providing the path to the file through the &lt;code&gt;-scanner&lt;/code&gt; flag: &lt;code&gt;./multcheck -scanner &amp;lt;path_to_config_file&amp;gt; &amp;lt;target_file&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Scanners&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows Defender (winDef)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration file for custom scanners is a JSON file with the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;AV name&#34;,&#xA;  &#34;cmd&#34;: &#34;Scan Program (with full PATH) for scanning the target file.&#34;,&#xA;  &#34;args&#34;: &#34;Scan arguments, use {{file}} as the file name to be scanned.&#34;,&#xA;  &#34;out&#34;: &#34;A string present in positive detection but not in negative&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;PS C:\Users\pengrey\Downloads&amp;gt; .\multcheck.exe -scanner .\windef.json C:\Users\pengrey\Downloads\mimikatz.exe&#xA;[&amp;gt;] Result: Malicious content found at offset: 00000121&#xA;00000000  d1 27 71 71 a9 b6 71 52  69 63 68 70 a9 b6 71 00  |.&#39;qq..qRichp..q.|&#xA;00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 50  |...............P|&#xA;00000020  45 00 00 64 86 06 00 63  39 5a 5e 00 00 00 00 00  |E..d...c9Z^.....|&#xA;00000030  00 00 00 f0 00 22 00 0b  02 09 00 00 2c 0c 00 00  |.....&#34;......,...|&#xA;&#xA;&#xA;PS C:\Users\pengrey\Downloads&amp;gt; .\multcheck.exe -scanner .\windef.json C:\Users\pengrey\Downloads\Rubeus.exe&#xA;[&amp;gt;] Result: Malicious content found at offset: 00048e3d&#xA;00000000  65 74 5f 61 64 64 69 74  69 6f 6e 61 6c 5f 74 69  |et_additional_ti|&#xA;00000010  63 6b 65 74 73 00 67 65  74 5f 74 69 63 6b 65 74  |ckets.get_ticket|&#xA;00000020  73 00 73 65 74 5f 74 69  63 6b 65 74 73 00 53 79  |s.set_tickets.Sy|&#xA;00000030  73 74 65 6d 2e 4e 65 74  2e 53 6f 63 6b 65 74 73  |stem.Net.Sockets|&#xA;&#xA;&#xA;PS C:\Users\pengrey\Downloads&amp;gt; .\multcheck.exe -scanner .\windef.json C:\Users\pengrey\Downloads\multcheck.exe&#xA;[&amp;gt;] Result: Payload not detected.&#xA;PS C:\Users\pengrey\Downloads&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the GNU General Public License - see the &lt;a href=&#34;https://raw.githubusercontent.com/MultSec/MultCheck/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project is inspired by the following projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matterpreter/DefenderCheck&#34;&gt;DefenderCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rasta-mouse/ThreatCheck&#34;&gt;ThreatCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PACHAKUTlQ/ThreatCheck&#34;&gt;ThreatCheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gatariee/gocheck&#34;&gt;GoCheck&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Calcium-Ion/new-api</title>
    <updated>2024-03-04T01:28:25Z</updated>
    <id>tag:github.com,2024-03-04:/Calcium-Ion/new-api</id>
    <link href="https://github.com/Calcium-Ion/new-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于One API的二次开发版本，仅供个人管理渠道使用，请勿用于商业API分发！&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;New API&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] 本项目为开源项目，在&lt;a href=&#34;https://github.com/songquanpeng/one-api&#34;&gt;One API&lt;/a&gt;的基础上进行二次开发，感谢原作者的无私奉献。 使用者必须在遵循 OpenAI 的&lt;a href=&#34;https://openai.com/policies/terms-of-use&#34;&gt;使用条款&lt;/a&gt;以及&lt;strong&gt;法律法规&lt;/strong&gt;的情况下使用，不得用于非法用途。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] 本项目为个人学习使用，不保证稳定性，且不提供任何技术支持，使用者必须在遵循 OpenAI 的使用条款以及法律法规的情况下使用，不得用于非法用途。&lt;br&gt; 根据&lt;a href=&#34;http://www.cac.gov.cn/2023-07/13/c_1690898327029107.htm&#34;&gt;《生成式人工智能服务管理暂行办法》&lt;/a&gt;的要求，请勿对中国地区公众提供一切未经备案的生成式人工智能服务。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] 最新版Docker镜像 calciumion/new-api:latest&lt;br&gt; 更新指令 docker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower -cR&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;主要变更&lt;/h2&gt; &#xA;&lt;p&gt;此分叉版本的主要变更如下：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;全新的UI界面（部分界面还待更新）&lt;/li&gt; &#xA; &lt;li&gt;添加&lt;a href=&#34;https://github.com/novicezk/midjourney-proxy&#34;&gt;Midjourney-Proxy&lt;/a&gt;接口的支持 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; /mj/submit/imagine&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; /mj/submit/change&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; /mj/submit/blend&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; /mj/submit/describe&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; /mj/image/{id} （通过此接口获取图片，&lt;strong&gt;请必须在系统设置中填写服务器地址！！&lt;/strong&gt;）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; /mj/task/{id}/fetch （此接口返回的图片地址为经过One API转发的地址）&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; /task/list-by-condition&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;支持在线充值功能，可在系统设置中设置，当前支持的支付接口： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 易支付&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;支持用key查询使用额度: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;配合项目&lt;a href=&#34;https://github.com/Calcium-Ion/neko-api-key-tool&#34;&gt;neko-api-key-tool&lt;/a&gt;可实现用key查询使用&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;渠道显示已使用额度，支持指定组织访问&lt;/li&gt; &#xA; &lt;li&gt;分页支持选择每页显示数量&lt;/li&gt; &#xA; &lt;li&gt;兼容原版One API的数据库，可直接使用原版数据库（one-api.db）&lt;/li&gt; &#xA; &lt;li&gt;支持模型按次数收费，可在 系统设置-运营设置 中设置&lt;/li&gt; &#xA; &lt;li&gt;支持渠道&lt;strong&gt;加权随机&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;数据看板&lt;/li&gt; &#xA; &lt;li&gt;可设置令牌能调用的模型&lt;/li&gt; &#xA; &lt;li&gt;支持Telegram授权登录&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;模型支持&lt;/h2&gt; &#xA;&lt;p&gt;此版本额外支持以下模型：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;第三方模型 &lt;strong&gt;gps&lt;/strong&gt; （gpt-4-gizmo-*）&lt;/li&gt; &#xA; &lt;li&gt;智谱glm-4v，glm-4v识图&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;您可以在渠道中添加自定义模型gpt-4-gizmo-*，此模型并非OpenAI官方模型，而是第三方模型，使用官方key无法调用。&lt;/p&gt; &#xA;&lt;h2&gt;部署&lt;/h2&gt; &#xA;&lt;h3&gt;基于 Docker 进行部署&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 使用 SQLite 的部署命令：&#xA;docker run --name new-api -d --restart always -p 3000:3000 -e TZ=Asia/Shanghai -v /home/ubuntu/data/new-api:/data calciumion/new-api:latest&#xA;# 使用 MySQL 的部署命令，在上面的基础上添加 `-e SQL_DSN=&#34;root:123456@tcp(localhost:3306)/oneapi&#34;`，请自行修改数据库连接参数。&#xA;# 例如：&#xA;docker run --name new-api -d --restart always -p 3000:3000 -e SQL_DSN=&#34;root:123456@tcp(localhost:3306)/oneapi&#34; -e TZ=Asia/Shanghai -v /home/ubuntu/data/new-api:/data calciumion/new-api:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;使用宝塔面板Docker功能部署&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 使用 SQLite 的部署命令：&#xA;docker run --name new-api -d --restart always -p 3000:3000 -e TZ=Asia/Shanghai -v /www/wwwroot/new-api:/data calciumion/new-api:latest&#xA;# 使用 MySQL 的部署命令，在上面的基础上添加 `-e SQL_DSN=&#34;root:123456@tcp(localhost:3306)/oneapi&#34;`，请自行修改数据库连接参数。&#xA;# 例如：&#xA;# 注意：数据库要开启远程访问，并且只允许服务器IP访问&#xA;docker run --name new-api -d --restart always -p 3000:3000 -e SQL_DSN=&#34;root:123456@tcp(宝塔的服务器地址:宝塔数据库端口)/宝塔数据库名称&#34; -e TZ=Asia/Shanghai -v /www/wwwroot/new-api:/data calciumion/new-api:latest&#xA;# 注意：数据库要开启远程访问，并且只允许服务器IP访问&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Midjourney接口设置文档&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Calcium-Ion/new-api/main/Midjourney.md&#34;&gt;对接文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;交流群&lt;/h2&gt; &#xA;&lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/de536a8a-0161-47a7-a0a2-66ef6de81266&#34; width=&#34;300&#34;&gt; &#xA;&lt;h2&gt;界面截图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/ad0e7aae-0203-471c-9716-2d83768927d4&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/d1ac216e-0804-4105-9fdc-66b35022d861&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/3ca0b282-00ff-4c96-bf9d-e29ef615c605&#34; alt=&#34;image&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/f4f40ed4-8ccb-43d7-a580-90677827646d&#34; alt=&#34;image&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/90d7d763-6a77-4b36-9f76-2bb30f18583d&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/e414228a-3c35-429a-b298-6451d76d9032&#34; alt=&#34;image&#34;&gt; 夜间模式&lt;br&gt; &lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/1c66b593-bb9e-4757-9720-ff2759539242&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/5b3228e8-2556-44f7-97d6-4f8d8ee6effa&#34; alt=&#34;image&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/Calcium-Ion/new-api/assets/61247483/af9a07ee-5101-4b3d-8bd9-ae21a4fd7e9e&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#Calcium-Ion/new-api&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=Calcium-Ion/new-api&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>autobrr/autobrr</title>
    <updated>2024-03-04T01:28:25Z</updated>
    <id>tag:github.com,2024-03-04:/autobrr/autobrr</id>
    <link href="https://github.com/autobrr/autobrr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modern, easy to use download automation for torrents and usenet.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;autobrr logo&#34; src=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/.github/images/logo.png&#34; width=&#34;160px&#34;&gt;&lt;br&gt; autobrr &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;autobrr redefines download automation for torrents and Usenet, drawing inspiration from tools like trackarr, autodl-irssi, and flexget. We&#39;ve combined the best of these worlds into one versatile tool that can do it all, and then some.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;GitHub release (latest by date)&#34; src=&#34;https://img.shields.io/github/v/release/autobrr/autobrr?style=for-the-badge&#34;&gt;&amp;nbsp;&lt;img alt=&#34;GitHub all releases&#34; src=&#34;https://img.shields.io/github/downloads/autobrr/autobrr/total?style=for-the-badge&#34;&gt;&amp;nbsp;&lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/autobrr/autobrr/release.yml?style=for-the-badge&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img alt=&#34;autobrr ui&#34; src=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/.github/images/front-dark.png&#34;&gt;&lt;br&gt; &lt;em&gt;We also have a light theme. Check it out &lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/.github/images/front-light.png&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Full documentation can be found at &lt;a href=&#34;https://autobrr.com&#34;&gt;https://autobrr.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#what-is-autobrr&#34;&gt;What Is Autobrr?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#key-features&#34;&gt;Key Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#available-download-clients-and-actions&#34;&gt;Available Download Clients and Actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#rss-and-usenet-support&#34;&gt;RSS and Usenet Support&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#swizzin&#34;&gt;Swizzin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#saltbox&#34;&gt;Saltbox&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#quickbox&#34;&gt;QuickBox&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#shared-seedbox&#34;&gt;Shared Seedbox&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#docker-compose&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#linux-generic&#34;&gt;Linux Generic&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;What Is Autobrr?&lt;/h2&gt; &#xA;&lt;p&gt;What is autobrr, and how does it fit into the ecosystem?&lt;/p&gt; &#xA;&lt;p&gt;We can start by talking about torrent trackers (hereby referred to as indexers) and maintaining ratio. You are required to maintain a ratio with most indexers. Ratio is built by seeding your torrents. The earlier you&#39;re seeding a torrent, the more peers you make yourself available to on that torrent.&lt;/p&gt; &#xA;&lt;p&gt;Software like Radarr and Sonarr utilizes RSS to look for new torrents. RSS feeds are updated regularly, but too slow to let you be a part of what we call the initial swarm of a torrent. This is where autobrr comes into play.&lt;/p&gt; &#xA;&lt;p&gt;Many indexers announce new torrents on their IRC channels the second it is uploaded to the site. autobrr monitors such channels in real time and grabs the torrent file as soon as it&#39;s uploaded based on certain conditions (hereby referred to as filters) that you set up within autobrr. It then sends that torrent file to a download client of your choice via an action set within the filter. A download client can be anything from qBittorrent and Deluge, to Radarr and Sonarr, or a watch folder.&lt;/p&gt; &#xA;&lt;p&gt;When your autobrr filter is set to send the torrent files to Radarr and Sonarr, they will decide if it&#39;s something they want, and then forward it to the torrent client they are set up with.&lt;/p&gt; &#xA;&lt;p&gt;autobrr can also send matches (torrent files that meets your filter&#39;s criteria) directly to torrent clients like qBittorrent, Deluge, r(u)Torrent and Transmission. You don&#39;t need to use the *arr suite to make use of autobrr.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Torrents and Usenet support&lt;/li&gt; &#xA; &lt;li&gt;Support for 75+ torrent trackers with IRC announces&lt;/li&gt; &#xA; &lt;li&gt;Newznab, Torznab and RSS support to easily get access to hundreds of torrent and Usenet indexers&lt;/li&gt; &#xA; &lt;li&gt;Torrent Magnet support&lt;/li&gt; &#xA; &lt;li&gt;Powerful but simple filtering with RegEx support (like in autodl-irssi)&lt;/li&gt; &#xA; &lt;li&gt;Easy to use and mobile friendly web UI (with dark mode!) to manage everything&lt;/li&gt; &#xA; &lt;li&gt;Built on Go and React making autobrr lightweight and perfect for supporting multiple platforms (Linux, FreeBSD, Windows, macOS) on different architectures (e.g. x86, ARM)&lt;/li&gt; &#xA; &lt;li&gt;Great container support (Docker, k8s/Kubernetes)&lt;/li&gt; &#xA; &lt;li&gt;Database engine supporting both PostgreSQL and SQLite&lt;/li&gt; &#xA; &lt;li&gt;Notifications (Discord, Telegram, Notifiarr, Pushover, Gotify)&lt;/li&gt; &#xA; &lt;li&gt;One autobrr instance can communicate with multiple clients (torrent, Usenet and *arr) on remote servers&lt;/li&gt; &#xA; &lt;li&gt;Base path / Subfolder (and subdomain) support for convenient reverse-proxy support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Available Download Clients and Actions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;qBittorrent:&lt;/strong&gt; Includes built-in re-announce, categories, rules, max active downloads, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deluge v1+ and v2+&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;rTorrent&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transmission&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Porla&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sonarr, Radarr, Lidarr, Whisparr, Readarr:&lt;/strong&gt; Pushes releases directly for early swarm participation, rather than relying on RSS feeds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SABnzbd (Usenet):&lt;/strong&gt; Integrates smoothly for Usenet downloads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Watch Folder:&lt;/strong&gt; Monitors specified folders for new files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exec Custom Scripts:&lt;/strong&gt; Execute tailored scripts for advanced automation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Webhook:&lt;/strong&gt; Offers webhook support for diverse integration needs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;RSS and Usenet Support&lt;/h3&gt; &#xA;&lt;p&gt;A lot of indexers do not announce new torrents in an IRC channel. You can still make use of these indexers with autobrr since it has built in support for feeds as well. Both Torznab, Newznab and regular RSS is supported. RSS indexers are treated the same way as regular indexers within autobrr.&lt;/p&gt; &#xA;&lt;p&gt;Usenet support via Newznab feeds allows you to easily manage everything in a single application. While there is a lot of applications that handles RSS well, we think autobrr offers very easy to use filtering to help you get the content you want.&lt;/p&gt; &#xA;&lt;p&gt;You can use Usenet feeds and send to arrs or send directly to SABnzbd.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For comprehensive installation instructions, visit our &lt;a href=&#34;https://autobrr.com/installation/linux&#34;&gt;Installation Guide&lt;/a&gt;. This guide provides detailed steps for different platforms, including Windows, Linux, Docker, and more.&lt;/p&gt; &#xA;&lt;p&gt;Remember to head over to our &lt;a href=&#34;https://autobrr.com/configuration/autobrr&#34;&gt;Configuration Guide&lt;/a&gt; to learn how to set up your indexers, IRC, and download clients after you&#39;re done installing.&lt;/p&gt; &#xA;&lt;h3&gt;Swizzin (dedi)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://swizzin.ltd/&#34;&gt;Swizzin&lt;/a&gt; users can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo box install autobrr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Saltbox&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.saltbox.dev/&#34;&gt;Saltbox&lt;/a&gt; users can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sb install autobrr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more info check the &lt;a href=&#34;https://docs.saltbox.dev/apps/autobrr/&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;QuickBox&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://quickbox.io/&#34;&gt;QuickBox&lt;/a&gt; users can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;qb install autobrr -u ${username}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more info check the &lt;a href=&#34;https://quickbox.io/knowledge-base/v3/applications-v3/autobrr-applications-v3/autobrr-quick-reference/&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Shared Seedbox&lt;/h3&gt; &#xA;&lt;h4&gt;One-Click Installer &amp;amp; Quick Installer&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HostingByDesign (former Seedbox.io) via box - &lt;code&gt;box install autobrr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Swizzin.net via box - &lt;code&gt;box install autobrr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Seedit4.me&lt;/li&gt; &#xA; &lt;li&gt;SeedHost.eu&lt;/li&gt; &#xA; &lt;li&gt;Ultra.cc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Installation Scripts&lt;/h5&gt; &#xA;&lt;p&gt;We have support for a couple of other providers out of the box.&lt;br&gt; Please contact us on &lt;a href=&#34;https://discord.gg/WQ2eUycxyT&#34;&gt;Discord&lt;/a&gt; if your provider is missing. The scripts require some input, but do most of the work.&lt;/p&gt; &#xA;&lt;h4&gt;WhatBox&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://gobrr.sh/install_whatbox &amp;amp;&amp;amp; bash install_whatbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Feralhosting&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://gobrr.sh/install_feral &amp;amp;&amp;amp; bash install_feral&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bytesized Hosting&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://gobrr.sh/install_bytesized &amp;amp;&amp;amp; bash install_bytesized&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other providers&lt;/h4&gt; &#xA;&lt;p&gt;For other providers the Seedbox.io installer should work. If not, open an issue or contact us on &lt;a href=&#34;https://discord.gg/WQ2eUycxyT&#34;&gt;Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://gobrr.sh/install_sbio &amp;amp;&amp;amp; bash install_sbio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Modify accordingly if running with unRAID or setting up with Portainer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Logging is optional&lt;/li&gt; &#xA; &lt;li&gt;Host port mapping might need to be changed to not collide with other apps&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;code&gt;BASE_DOCKER_DATA_PATH&lt;/code&gt; to match your setup. Can be simply &lt;code&gt;./data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set custom network if needed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Create &lt;code&gt;docker-compose.yml&lt;/code&gt; and add the following. If you have an existing setup change to fit that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#34;3.7&#34;&#xA;&#xA;services:&#xA;  autobrr:&#xA;    container_name: autobrr&#xA;    image: ghcr.io/autobrr/autobrr:latest&#xA;    restart: unless-stopped&#xA;    environment:&#xA;      - TZ=${TZ}&#xA;    user: 1000:1000&#xA;    volumes:&#xA;      - ${BASE_DOCKER_DATA_PATH}/autobrr/config:/config&#xA;    ports:&#xA;      - 7474:7474&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then start with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Check the Windows Setup Guide &lt;a href=&#34;https://autobrr.com/installation/windows&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux Generic&lt;/h3&gt; &#xA;&lt;p&gt;Download the latest release, or download the &lt;a href=&#34;https://github.com/autobrr/autobrr/releases/latest&#34;&gt;source code&lt;/a&gt; and build it yourself using &lt;code&gt;make build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget $(curl -s https://api.github.com/repos/autobrr/autobrr/releases/latest | grep download | grep linux_x86_64 | cut -d\&#34; -f4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unpack&lt;/h4&gt; &#xA;&lt;p&gt;Run with &lt;code&gt;root&lt;/code&gt; or &lt;code&gt;sudo&lt;/code&gt;. If you do not have root, or are on a shared system, place the binaries somewhere in your home directory like &lt;code&gt;~/.bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -C /usr/local/bin -xzf autobrr*.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will extract both &lt;code&gt;autobrr&lt;/code&gt; and &lt;code&gt;autobrrctl&lt;/code&gt; to &lt;code&gt;/usr/local/bin&lt;/code&gt;. Note: If the command fails, prefix it with &lt;code&gt;sudo&lt;/code&gt; and re-run again.&lt;/p&gt; &#xA;&lt;h4&gt;Systemd (Recommended)&lt;/h4&gt; &#xA;&lt;p&gt;On Linux-based systems, it is recommended to run autobrr as a sort of service with auto-restarting capabilities, in order to account for potential downtime. The most common way is to do it via systemd.&lt;/p&gt; &#xA;&lt;p&gt;You will need to create a service file in &lt;code&gt;/etc/systemd/system/&lt;/code&gt; called &lt;code&gt;autobrr.service&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch /etc/systemd/system/autobrr@.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then place the following content inside the file (e.g. via nano/vim/ed):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-systemd&#34;&gt;[Unit]&#xA;Description=autobrr service for %i&#xA;After=syslog.target network-online.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;User=%i&#xA;Group=%i&#xA;ExecStart=/usr/bin/autobrr --config=/home/%i/.config/autobrr/&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the service. Enable will make it startup on reboot.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl enable -q --now --user autobrr@$USER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, the configuration is set to listen on &lt;code&gt;127.0.0.1&lt;/code&gt;. While autobrr works fine as is exposed to the internet, it is recommended to use a reverse proxy like &lt;a href=&#34;https://autobrr.com/installation/linux#nginx&#34;&gt;nginx&lt;/a&gt;, &lt;a href=&#34;https://autobrr.com/installation/linux#caddy&#34;&gt;caddy&lt;/a&gt; or &lt;a href=&#34;https://autobrr.com/installation/docker#traefik&#34;&gt;traefik&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are not running a reverse proxy change &lt;code&gt;host&lt;/code&gt; in the &lt;code&gt;config.toml&lt;/code&gt; to &lt;code&gt;0.0.0.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Join our friendly and welcoming community on &lt;a href=&#34;https://discord.gg/WQ2eUycxyT&#34;&gt;Discord&lt;/a&gt;! Connect with fellow autobrr users, get advice, and share your experiences. Whether you&#39;re seeking help, wanting to contribute, or just looking to discuss your ideas, our community is a hub of discussion and support. We&#39;re all here to help each other out, so don&#39;t hesitate to jump in!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Whether you&#39;re fixing a bug, adding a feature, or improving documentation, your help is appreciated. Here&#39;s how you can contribute:&lt;/p&gt; &#xA;&lt;h3&gt;Reporting Issues and Suggestions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Report Bugs:&lt;/strong&gt; Encountered a bug? Please report it using our &lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/.github/ISSUE_TEMPLATE/bug_report.md&#34;&gt;bug report template&lt;/a&gt;. Include detailed steps to reproduce, expected behavior, and any relevant screenshots or logs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Feature Requests:&lt;/strong&gt; Submit it using our &lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/.github/ISSUE_TEMPLATE/feature_request.md&#34;&gt;feature request template&lt;/a&gt;. Describe your idea and how it will improve &lt;code&gt;autobrr&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code Contributions&lt;/h3&gt; &#xA;&lt;p&gt;Check out the full guide for contributing &lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fork and Clone:&lt;/strong&gt; Fork the &lt;code&gt;autobrr&lt;/code&gt; repository and clone it to start working on your changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Branching:&lt;/strong&gt; Create a new branch for your changes. Use a descriptive name for easy understanding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Coding:&lt;/strong&gt; Ensure your code is well-commented for clarity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Commit Guidelines:&lt;/strong&gt; We appreciate the use of &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/#summary&#34;&gt;Conventional Commit Guidelines&lt;/a&gt; when writing your commits. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;There is no need for force pushing or rebasing. We squash commits on merge to keep the history clean and manageable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pull Requests:&lt;/strong&gt; Submit a pull request with a clear description of your changes. Reference any related issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code Review:&lt;/strong&gt; Be open to feedback during the code review process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;See an area that needs clarity or additional information? Feel free to update our documentation &lt;a href=&#34;https://github.com/autobrr/autobrr.com&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;We follow a code of conduct that promotes respectful and harassment-free experiences. Please read &lt;a href=&#34;https://raw.githubusercontent.com/autobrr/autobrr/develop/CODE_OF_CONDUCT.md&#34;&gt;our Code of Conduct&lt;/a&gt; before participating.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;autobrr is proudly open-source and is released under the &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0-standalone.html&#34;&gt;GNU General Public License v2 or later (GPLv2+)&lt;/a&gt;. This license allows you the freedom to run, study, share, and modify the software:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Freedom to Run:&lt;/strong&gt; You can run autobrr in any environment, for any purpose.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Freedom to Study and Modify:&lt;/strong&gt; Access to the source code allows you to study and modify autobrr to suit your needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Freedom to Share:&lt;/strong&gt; You can redistribute copies of autobrr to help others.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Freedom to Enhance:&lt;/strong&gt; Contributions to improve autobrr are always welcome.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copyright 2021-2024&lt;/p&gt;</summary>
  </entry>
</feed>