<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-29T01:41:17Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flannel-io/flannel</title>
    <updated>2022-07-29T01:41:17Z</updated>
    <id>tag:github.com,2022-07-29:/flannel-io/flannel</id>
    <link href="https://github.com/flannel-io/flannel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;flannel is a network fabric for containers, designed for Kubernetes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flannel&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/logos/flannel-horizontal-color.png&#34; alt=&#34;flannel Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/coreos/flannel&#34;&gt;&lt;img src=&#34;https://travis-ci.org/coreos/flannel.png?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flannel is a simple and easy way to configure a layer 3 network fabric designed for Kubernetes.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;Flannel runs a small, single binary agent called &lt;code&gt;flanneld&lt;/code&gt; on each host, and is responsible for allocating a subnet lease to each host out of a larger, preconfigured address space. Flannel uses either the Kubernetes API or &lt;a href=&#34;https://go.etcd.io/etcd/v3&#34;&gt;etcd&lt;/a&gt; directly to store the network configuration, the allocated subnets, and any auxiliary data (such as the host&#39;s public IP). Packets are forwarded using one of several &lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/backends.md&#34;&gt;backend mechanisms&lt;/a&gt; including VXLAN and various cloud integrations.&lt;/p&gt; &#xA;&lt;h3&gt;Networking details&lt;/h3&gt; &#xA;&lt;p&gt;Platforms like Kubernetes assume that each container (pod) has a unique, routable IP inside the cluster. The advantage of this model is that it removes the port mapping complexities that come from sharing a single host IP.&lt;/p&gt; &#xA;&lt;p&gt;Flannel is responsible for providing a layer 3 IPv4 network between multiple nodes in a cluster. Flannel does not control how containers are networked to the host, only how the traffic is transported between hosts. However, flannel does provide a CNI plugin for Kubernetes and a guidance on integrating with Docker.&lt;/p&gt; &#xA;&lt;p&gt;Flannel is focused on networking. For network policy, other projects such as &lt;a href=&#34;http://www.projectcalico.org&#34;&gt;Calico&lt;/a&gt; can be used.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started on Kubernetes&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to deploy flannel with Kubernetes is to use one of several deployment tools and distributions that network clusters with flannel by default. For example, CoreOS&#39;s &lt;a href=&#34;https://coreos.com/tectonic/&#34;&gt;Tectonic&lt;/a&gt; sets up flannel in the Kubernetes clusters it creates using the open source &lt;a href=&#34;https://github.com/coreos/tectonic-installer&#34;&gt;Tectonic Installer&lt;/a&gt; to drive the setup process.&lt;/p&gt; &#xA;&lt;p&gt;Though not required, it&#39;s recommended that flannel uses the Kubernetes API as its backing store which avoids the need to deploy a discrete &lt;code&gt;etcd&lt;/code&gt; cluster for &lt;code&gt;flannel&lt;/code&gt;. This &lt;code&gt;flannel&lt;/code&gt; mode is known as the &lt;em&gt;kube subnet manager&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Deploying flannel manually&lt;/h3&gt; &#xA;&lt;p&gt;Flannel can be added to any existing Kubernetes cluster though it&#39;s simplest to add &lt;code&gt;flannel&lt;/code&gt; before any pods using the pod network have been started.&lt;/p&gt; &#xA;&lt;p&gt;For Kubernetes v1.17+&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure a &lt;code&gt;flanneld&lt;/code&gt; binary exists at &lt;code&gt;/opt/bin/flanneld&lt;/code&gt; on each node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you use custom &lt;code&gt;podCIDR&lt;/code&gt; (not &lt;code&gt;10.244.0.0/16&lt;/code&gt;) you first need to download the above manifest and modify the network to match your one.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kubernetes.md&#34;&gt;Kubernetes&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started on Docker&lt;/h2&gt; &#xA;&lt;p&gt;flannel is also widely used outside of kubernetes. When deployed outside of kubernetes, etcd is always used as the datastore. For more details integrating flannel with Docker see &lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/running.md&#34;&gt;Running&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/building.md&#34;&gt;Building (and releasing)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/configuration.md&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/backends.md&#34;&gt;Backends&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/running.md&#34;&gt;Running&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/integrations.md&#34;&gt;Projects integrating with flannel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/production-users.md&#34;&gt;Production users&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Slack: #flannel-users on &lt;a href=&#34;https://slack.projectcalico.org&#34;&gt;Calico Users Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Planning/Roadmap: &lt;a href=&#34;https://github.com/flannel-io/flannel/milestones&#34;&gt;milestones&lt;/a&gt;, &lt;a href=&#34;https://github.com/kubernetes/kubernetes/milestones&#34;&gt;roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bugs: &lt;a href=&#34;https://github.com/flannel-io/flannel/issues&#34;&gt;issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Meeting&lt;/h2&gt; &#xA;&lt;p&gt;The Flannel Maintainer Community runs a meeting on every other Thursday at 8:30 AM PST. This meeting is used to discuss issues, open pull requests, and other topics related to Flannel should the need arise.&lt;/p&gt; &#xA;&lt;p&gt;The meeting agenda and Teams link can be found here: &lt;a href=&#34;https://docs.google.com/document/d/1kPMMFDhljWL8_CUZajrfL8Q9sdntd9vvUpe-UGhX5z8&#34;&gt;Flannel Community Meeting Agenda&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/reporting_bugs.md&#34;&gt;reporting bugs&lt;/a&gt; for details about reporting any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Flannel is under the Apache 2.0 license. See the &lt;a href=&#34;https://github.com/flannel-io/flannel/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/wire</title>
    <updated>2022-07-29T01:41:17Z</updated>
    <id>tag:github.com,2022-07-29:/google/wire</id>
    <link href="https://github.com/google/wire" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compile-time Dependency Injection for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wire: Automated Initialization in Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/wire/actions&#34;&gt;&lt;img src=&#34;https://github.com/google/wire/actions/workflows/tests.yml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/google/wire&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/google/wire?status.svg?sanitize=true&#34; alt=&#34;godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/google/wire&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/google/wire/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Wire is a code generation tool that automates connecting components using &lt;a href=&#34;https://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;dependency injection&lt;/a&gt;. Dependencies between components are represented in Wire as function parameters, encouraging explicit initialization instead of global variables. Because Wire operates without runtime state or reflection, code written to be used with Wire is useful even for hand-written initialization.&lt;/p&gt; &#xA;&lt;p&gt;For an overview, see the &lt;a href=&#34;https://blog.golang.org/wire&#34;&gt;introductory blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Install Wire by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/google/wire/cmd/wire@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and ensuring that &lt;code&gt;$GOPATH/bin&lt;/code&gt; is added to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wire/main/_tutorial/README.md&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wire/main/docs/guide.md&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wire/main/docs/best-practices.md&#34;&gt;Best Practices&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wire/main/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project status&lt;/h2&gt; &#xA;&lt;p&gt;As of version v0.3.0, Wire is &lt;em&gt;beta&lt;/em&gt; and is considered feature complete. It works well for the tasks it was designed to perform, and we prefer to keep it as simple as possible.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll not be accepting new features at this time, but will gladly accept bug reports and fixes.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;For questions, please use &lt;a href=&#34;https://github.com/google/wire/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project is covered by the Go &lt;a href=&#34;https://raw.githubusercontent.com/google/wire/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wa-lang/wa</title>
    <updated>2022-07-29T01:41:17Z</updated>
    <id>tag:github.com,2022-07-29:/wa-lang/wa</id>
    <link href="https://github.com/wa-lang/wa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🇨🇳 凹语言™ The Wa Programming Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;凹语言™&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wa-lang/wa/actions/workflows/wa.yml&#34;&gt;&lt;img src=&#34;https://github.com/wa-lang/wa/actions/workflows/wa.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/wa-lang/wa&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/wa-lang/wa&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/wa-lang/wa&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/wa-lang/wa/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wa-lang/wa/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/wa-lang/wa.svg?label=release&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;凹语言™（凹读音“Wa”）是&lt;a href=&#34;https://github.com/chai2010&#34;&gt;柴树杉&lt;/a&gt;、&lt;a href=&#34;https://github.com/3dgen&#34;&gt;丁尔男&lt;/a&gt;和&lt;a href=&#34;https://github.com/benshi001&#34;&gt;史斌&lt;/a&gt;设计的实验性编程语言。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+---+    +---+&#xA;| o |    | o |&#xA;|   +----+   |&#xA;|            |&#xA;|     Wa     |&#xA;|            |&#xA;+------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装和测试:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装 &lt;a href=&#34;https://clang.llvm.org&#34;&gt;Clang&lt;/a&gt;, 确保本地 &lt;code&gt;clang&lt;/code&gt; 命令有效&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go install github.com/wa-lang/wa@latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wa init -name=_examples/hi&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wa run _examples/hi&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;设计目标&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;披着 Go 和 Rust 语法外衣的 C++ 语言；&lt;/li&gt; &#xA; &lt;li&gt;凹语言™源码文件后缀为 &lt;code&gt;.wa&lt;/code&gt;；&lt;/li&gt; &#xA; &lt;li&gt;凹语言™编译器兼容 WaGo 语法。WaGo 是 Go 真子集。使用 WaGo 语法的源码文件后缀为 &lt;code&gt;.wa.go&lt;/code&gt;。凹语法与 WaGo 语法在 AST 层面一致；&lt;/li&gt; &#xA; &lt;li&gt;凹语言™支持中文/英文双语关键字，即任一关键字均有中文及英文版，二者在语法层面等价。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多细节请参考 &lt;a href=&#34;https://raw.githubusercontent.com/wa-lang/wa/master/docs/goals.md&#34;&gt;凹语言™项目目标&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;处理过程&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph LR&#xA;    wa_ext(.wa);&#xA;    wago_ext(.wa.go);&#xA;&#xA;    wa_ast(Wa AST);&#xA;&#xA;    c_cpp(C/C++);&#xA;    llir(LLVM IR);&#xA;    wasm(WASM);&#xA;&#xA;    wa_ext   --&amp;gt; wa_ast;&#xA;    wago_ext --&amp;gt; wa_ast;&#xA;&#xA;    wa_ast --&amp;gt; c_cpp;&#xA;    wa_ast --&amp;gt; llir;&#xA;    wa_ast --&amp;gt; wasm;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;例子: 打印素数&lt;/h2&gt; &#xA;&lt;p&gt;打印 30 以内的素数：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// 版权 @2021 凹语言™ 作者。保留所有权利。&#xA;&#xA;fn main() {&#xA;&#x9;for n := 2; n &amp;lt;= 30; n = n + 1 {&#xA;&#x9;&#x9;let isPrime int = 1&#xA;&#x9;&#x9;for i := 2; i*i &amp;lt;= n; i = i + 1 {&#xA;&#x9;&#x9;&#x9;if x := n % i; x == 0 {&#xA;&#x9;&#x9;&#x9;&#x9;isPrime = 0&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if isPrime != 0 {&#xA;&#x9;&#x9;&#x9;println(n)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行并输出结果:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go run main.go run _examples/prime&#xA;2&#xA;3&#xA;5&#xA;7&#xA;11&#xA;13&#xA;17&#xA;19&#xA;23&#xA;29&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;更多例子&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wa-lang/wa/master/_examples&#34;&gt;_examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wa-lang/wa-lang.github.io/master/wa-run-demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;微信群&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://wa-lang.org/static/images/wechatgroup.jpg&#34; alt=&#34;微信群二维码&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;版权&lt;/h2&gt; &#xA;&lt;p&gt;版权 @2019 凹语言™ 作者。保留所有权利。&lt;/p&gt;</summary>
  </entry>
</feed>