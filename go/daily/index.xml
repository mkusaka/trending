<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-21T01:34:22Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>paypal/junodb</title>
    <updated>2023-05-21T01:34:22Z</updated>
    <id>tag:github.com,2023-05-21:/paypal/junodb</id>
    <link href="https://github.com/paypal/junodb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JunoDB is PayPal&#39;s home-grown secure, consistent and highly available key-value store providing low, single digit millisecond, latency at any scale.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JunoDB - A secure, consistent and highly available key-value store&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;&lt;img src=&#34;http://img.shields.io/:license-Apache%202-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/paypal/junoDB/actions/workflows/juno_server_bin_build.yml&#34;&gt;&lt;img src=&#34;https://github.com/paypal/junoDB/actions/workflows/juno_server_bin_build.yml/badge.svg?branch=main&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/paypal/junoDB/actions/workflows/juno_server_docker_build.yml&#34;&gt;&lt;img src=&#34;https://github.com/paypal/junoDB/actions/workflows/juno_server_docker_build.yml/badge.svg?branch=main&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is JunoDB&lt;/h2&gt; &#xA;&lt;p&gt;JunoDB is PayPal&#39;s home-grown secure, consistent and highly available key-value store providing low, single digit millisecond, latency at any scale.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/docs/junodb_arch_overview.md&#34;&gt;High Level Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/docs/wireprotocol.md&#34;&gt;Wire protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/docs/contributing.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started with the JunoDB Server&lt;/h2&gt; &#xA;&lt;h3&gt;Clone the repository from &lt;a href=&#34;https://github.com/paypal/junodb&#34;&gt;github&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/paypal/junodb.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set BUILDTOP variable&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export BUILDTOP=&amp;lt;path_to_junodb_folder&amp;gt;/junodb&#xA;cd $BUILDTOP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Continue building JunoDB server with&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#docker-build&#34;&gt;Docker build&lt;/a&gt; or&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#manual-build&#34;&gt;Manual build&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Docker Build&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#docker-build&#34;&gt;Docker&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#docker_install_dependencies&#34;&gt;Install Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#docker_build_junodb&#34;&gt;Build JunoDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#docker_run_junodb&#34;&gt;Run JunoDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#docker_secrets&#34;&gt;Generate Secrets for Dev&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#docker_validate_junodb&#34;&gt;Validate JunoDB&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;docker_install_dependencies&#34;&gt;Install Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/install/ubuntu/&#34;&gt;Install Docker Engine version 20.10.0+&lt;/a&gt; Check for existing docker version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install Docker if not installed or version is older than 20.10.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker/setup.sh&#xA;#If you are not added to the docker group, you will have to logout and login in the machine after running docker/setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the user is not added to &lt;code&gt;docker&lt;/code&gt; group, you may add manually. Logout and re-login after this step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo usermod -a -G docker $USER&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify that your username is added to docker group&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;groups&#xA;&#xA;#or&#xA;cat /etc/group | grep docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;docker_build_junodb&#34;&gt;Build JunoDB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#Login to docker hub account &#xA;docker login&#xA;&#xA;# Build junodb docker images&#xA;#etcd&#xA;#clustercfg&#xA;#storageserv&#xA;#proxy &#xA;#junoclient&#xA;&#xA;&#xA;docker/build.sh &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;docker_run_junodb&#34;&gt;Run JunoDB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Setup junodb network and start junodb services&#xA;#etcd&#xA;#clustercfg&#xA;#storageserv&#xA;#proxy &#xA;#junoclient&#xA;&#xA;&#xA;# JunoDB proxy service listens on port &#xA;# :5080 TLS and :8080 TCP&#xA;docker/start.sh &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shutdown JunoDB services&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# This will shutdown junodb services&#xA;#etcd&#xA;#clustercfg&#xA;#storageserv&#xA;#proxy &#xA;#junoclient&#xA;&#xA;docker/shutdown.sh &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually Run JunoDB services&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#This can be done instead of ./start.sh to start up the docker services&#xA;&#xA;cd $BUILDTOP/docker/manifest&#xA;&#xA;# To run junodb services in --detach mode (recommended)&#xA;docker compose up -d&#xA;&#xA;# Juno proxy service listens on port &#xA;# :5080 TLS and :8080 TCP&#xA;&#xA;#To view the running containers &#xA;docker ps&#xA;&#xA;# To stop junodb services&#xA;docker compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;docker_secrets&#34;&gt;Generate Secrets for Dev&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; secrets for TLS and Encryption can be generated for dev/testing.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh $BUILDTOP/docker/manifest/config/secrets/gensecrets.sh&#xA;&#xA;## generated secrets&#xA;# server.crt/server.pem - certificate/key for junodb proxy for TLS &#xA;# ca.crt - CA cert&#xA;# keystore.toml - sample keystore file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;docker_validate_junodb&#34;&gt;Validate JunoDB&lt;/h3&gt; &#xA;&lt;p&gt;Login to docker client and check connection with proxy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it junoclient bash -c &#39;nc -vz proxy 5080&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;You can also test the junodb server by running junocli and junoload&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;JunoCLI&lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The following commands log in to the docker client and run the ./junocli command directly. The proxy ip is aliased as &#34;proxy&#34;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;CREATE&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it junoclient bash -c &#39;/opt/juno/junocli create -s proxy:8080 -c config.toml -ns test_ns test_key test_value&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;GET&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it junoclient bash -c &#39;/opt/juno/junocli get -s proxy:8080 -c config.toml -ns test_ns test_key&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;UPDATE&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it junoclient bash -c &#39;/opt/juno/junocli update -s proxy:8080 -c config.toml -ns test_ns test_key test_value_updated&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;DESTROY&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it junoclient bash -c &#39;/opt/juno/junocli destroy -s proxy:8080 -c config.toml -ns test_ns test_key&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More about junocli &lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/docs/junocli.md&#34;&gt;here&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Junoload&lt;br&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The following command logs in to the docker client and runs the ./junoload command directly. Junoload can be used for benchmarking juno server. The proxy ip is aliased as &#34;proxy&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec -it junoclient bash -c &#39;/opt/juno/junoload -s proxy:5080 -ssl -c config.toml -o 1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More about junoload &lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/docs/junoload.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Manual Build&lt;/h2&gt; &#xA;&lt;p&gt;The following sections explain the process for manually building the JunoDB server without Docker. These instructions are based on an Ubuntu 20.04.5 system&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#manual-build&#34;&gt;Manual&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#manual_install_dependencies&#34;&gt;Install Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#manual_build_junodb&#34;&gt;Build JunoDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#manual_run_junodb&#34;&gt;Run JunoDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#manual_validate_junodb&#34;&gt;Validate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/#manual_shutdown_junodb&#34;&gt;Shutdown JunoDB&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;manual_install_dependencies&#34;&gt;Install Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://www.openssl.org/source/&#34;&gt;OpenSSL 1.0.2g+&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://manpages.ubuntu.com/manpages/bionic/man8/multilog.8.html&#34;&gt;multilog&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install daemontools&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies for rocksdb&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install build-essential libgflags-dev libsnappy-dev zlib1g-dev libbz2-dev liblz4-dev libzstd-dev -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; Install Python &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#install python&#xA;sudo apt-get install python3.8&#xA;#set soft link&#xA;cd /usr/bin&#xA;sudo ln -s python3.8 python&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;manual_build_junodb&#34;&gt;Build JunoDB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;binary_build/build.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;manual_run_junodb&#34;&gt;Run JunoDB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export JUNO_BUILD_DIR=$BUILDTOP/release-binary/code-build&#xA;script/deploy.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;manual_validate_junodb&#34;&gt;Validate JunoDB&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#Validate if deploy was successful by checking if the proxy (junoserv), storage (junostorageserv), and etcd (junoclusterserv) processes are running&#xA;ps -eaf | grep juno&#xA;#There should be 41 processes running&#xA;#5 for junoclusterserv (3 logs, 1 etcdsvr.py, 1 etcdsvr_exe)&#xA;#20 for junostorageserv (6 logs, 1 manager, 12 workers, 1 monitor)&#xA;#16 for junoserv (6 logs, 1 manager, 8 workers, 1 monitor)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Test out the server using junocli and junoload command&lt;/h3&gt; &#xA;&lt;p&gt;See instructions for junocli &lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/docs/junocli.md&#34;&gt;here&lt;/a&gt; &lt;br&gt; See instructions for junoload &lt;a href=&#34;https://raw.githubusercontent.com/paypal/junodb/main/docs/junoload.md&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run functional tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#Assuming user is in $BUILDTOP folder&#xA;test/functest/configsetup.sh&#xA;cd test/functest&#xA;$BUILDTOP/release-binary/tool/go/bin/go test -v -config=config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Run unit tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#Assuming user is in $BUILDTOP folder&#xA;cd test/unittest&#xA;$BUILDTOP/release-binary/tool/go/bin/go test -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;manual_shutdown_junodb&#34;&gt;Shutdown JunoDB Services&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#Assuming user is in $BUILDTOP folder&#xA;script/deploy.sh stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt;</summary>
  </entry>
  <entry>
    <title>kubeovn/kube-ovn</title>
    <updated>2023-05-21T01:34:22Z</updated>
    <id>tag:github.com,2023-05-21:/kubeovn/kube-ovn</id>
    <link href="https://github.com/kubeovn/kube-ovn" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Bridge between SDN and Cloud Native (Project under CNCF)&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/cncf/artwork/raw/master/projects/kube-ovn/horizontal/color/kube-ovn-horizontal-color.svg?sanitize=true&#34; alt=&#34;kube_ovn_logo&#34; width=&#34;500&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kubeovn/kube-ovn/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kubeovn/kube-ovn/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/kubeovn/kube-ovn.svg?sanitize=true&#34; alt=&#34;Build Tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/docker/pulls/kubeovn/kube-ovn&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/kubeovn/kube-ovn&#34; alt=&#34;Docker Tag&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/docker/image-size/kubeovn/kube-ovn?sort=date&#34; alt=&#34;Docker Image Size (latest by date)&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/kubeovn/kube-ovn&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/kubeovn/kube-ovn&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Falauda%2Fkube-ovn?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Falauda%2Fkube-ovn.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/&#34;&gt;中文文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you miss the good old days of SDN, then Kube-OVN is your choice in Cloud Native era.&lt;/p&gt; &#xA;&lt;p&gt;Kube-OVN, a &lt;a href=&#34;https://www.cncf.io/sandbox-projects/&#34;&gt;CNCF Sandbox Level Project&lt;/a&gt;, integrates the OVN-based Network Virtualization with Kubernetes. It offers an advanced Container Network Fabric for Enterprises with the most functions, extreme performance and the easiest operation.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The Kube-OVN community is waiting for your participation!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow us at &lt;a href=&#34;https://twitter.com/KubeOvn&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat with us at &lt;a href=&#34;https://communityinviter.com/apps/kube-ovn/kube-ovn&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;微信用户请&lt;a href=&#34;https://ma.alauda.cn/p/0f39a&#34;&gt;填写表单&lt;/a&gt;加入交流群！&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Namespaced Subnets&lt;/strong&gt;: Each Namespace can have a unique Subnet (backed by a Logical Switch). Pods within the Namespace will have IP addresses allocated from the Subnet. It&#39;s also possible for multiple Namespaces to share a Subnet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Vlan/Underlay Support&lt;/strong&gt;: In addition to overlay network, Kube-OVN also supports underlay and vlan mode network for better performance and direct connectivity with physical network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;VPC Support&lt;/strong&gt;: Multi-tenant network with independent address spaces, where each tenant has its own network infrastructure such as eips, nat gateways, security groups and loadbalancers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Static IP Addresses for Workloads&lt;/strong&gt;: Allocate random or static IP addresses to workloads.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-Cluster Network&lt;/strong&gt;: Connect different Kubernetes/Openstack clusters into one L3 network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TroubleShooting Tools&lt;/strong&gt;: Handy tools to diagnose, trace, monitor and dump container network traffic to help troubleshoot complicate network issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prometheus &amp;amp; Grafana Integration&lt;/strong&gt;: Exposing network quality metrics like pod/node/service/dns connectivity/latency in Prometheus format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ARM Support&lt;/strong&gt;: Kube-OVN can run on x86_64 and arm64 platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows Support&lt;/strong&gt;: Kube-OVN can run on Windows worker nodes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subnet Isolation&lt;/strong&gt;: Can configure a Subnet to deny any traffic from source IP addresses not within the same Subnet. Can whitelist specific IP addresses and IP ranges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network Policy&lt;/strong&gt;: Implementing networking.k8s.io/NetworkPolicy API by high performance ovn ACL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DualStack IP Support&lt;/strong&gt;: Pod can run in IPv4-Only/IPv6-Only/DualStack mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pod NAT and EIP&lt;/strong&gt;: Manage the pod external traffic and external ip like tradition VM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IPAM for Multi NIC&lt;/strong&gt;: A cluster-wide IPAM for CNI plugins other than Kube-OVN, such as macvlan/vlan/host-device to take advantage of subnet and static ip allocation functions in Kube-OVN.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic QoS&lt;/strong&gt;: Configure Pod/Gateway Ingress/Egress traffic rate/priority/loss/latency on the fly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embedded Load Balancers&lt;/strong&gt;: Replace kube-proxy with the OVN embedded high performance distributed L2 Load Balancer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Distributed Gateways&lt;/strong&gt;: Every Node can act as a Gateway to provide external network connectivity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Namespaced Gateways&lt;/strong&gt;: Every Namespace can have a dedicated Gateway for Egress traffic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Direct External Connectivity&lt;/strong&gt;：Pod IP can be exposed to external network directly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;BGP Support&lt;/strong&gt;: Pod/Subnet IP can be exposed to external by BGP router protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Traffic Mirror&lt;/strong&gt;: Duplicated container network traffic for monitoring, diagnosing and replay.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hardware Offload&lt;/strong&gt;: Boost network performance and save CPU resource by offloading OVS flow table to hardware.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DPDK Support&lt;/strong&gt;: DPDK application now can run in Pod with OVS-DPDK.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cilium Integration&lt;/strong&gt;: Cilium can take over the work of kube-proxy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;F5 CES Integration&lt;/strong&gt;: F5 can help better manage the outgoing traffic of k8s pod/container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Network Topology&lt;/h2&gt; &#xA;&lt;p&gt;The Switch, Router and Firewall showed in the diagram below are all distributed on all Nodes. There is no single point of failure for in-cluster network.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubeovn/kube-ovn/master/docs/ovn-network-topology.png&#34; alt=&#34;topology&#34; title=&#34;kube-ovn network topology&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Monitoring Dashboard&lt;/h2&gt; &#xA;&lt;p&gt;Kube-OVN offers prometheus integration with grafana dashboards to visualize network quality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubeovn/kube-ovn/master/docs/pinger-grafana.png&#34; alt=&#34;dashboard&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Kube-OVN is easy to install with all necessary components/dependencies included. If you already have a Kubernetes cluster without any cni plugin, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/kubeovn/kube-ovn/master/docs/install.md&#34;&gt;Installation Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to install Kubernetes from scratch, you can try &lt;a href=&#34;https://github.com/kubernetes-sigs/kubespray/raw/master/docs/kube-ovn.md&#34;&gt;kubespray&lt;/a&gt; or for Chinese users try &lt;a href=&#34;https://github.com/easzlab/kubeasz/raw/master/docs/setup/network-plugin/kube-ovn.md&#34;&gt;kubeasz&lt;/a&gt; to deploy a production ready Kubernetes cluster with Kube-OVN embedded.&lt;/p&gt; &#xA;&lt;h2&gt;Documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/en/&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/en/start/prepare/&#34;&gt;Getting Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/en/guide/setup-options/&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/en/ops/kubectl-ko/&#34;&gt;Operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/en/advance/multi-nic/&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/en/reference/architecture/&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;We are looking forward to your PR!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/en/reference/dev-env/&#34;&gt;Development Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubeovn.github.io/docs/en/reference/architecture/&#34;&gt;Architecture Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: What&#39;s the different with other CNIs?&lt;/p&gt; &lt;p&gt;A: Different CNI Implementations have different scopes, there is no single implementation that can resolve all network problems. Kube-OVN is aiming to bring SDN to Cloud Native. If you are missing the old day network concepts like VPC, Subnet, customize route, security groups etc. you can not find corresponding functions in any other CNIs. Then Kube-OVN is your only choice when you need these functions to build datacenter or enterprise network fabric.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: How about the scalability of Kube-OVN?&lt;/p&gt; &lt;p&gt;A: We have simulated 200 Nodes with 10k Pods by kubemark, and it works fine. Some community users have deployed one cluster with 500 Nodes and 10k+ Pods in production. It&#39;s still not reach the limitation, but we don&#39;t have enough resources to find the limitation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: What&#39;s the Addressing/IPAM? Node-specific or cluster-wide?&lt;/p&gt; &lt;p&gt;A: Kube-OVN uses a cluster-wide IPAM, Pod address can float to any nodes in the cluster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: What&#39;s the encapsulation?&lt;/p&gt; &lt;p&gt;A: For overlay mode, Kube-OVN uses Geneve/Vxlan/STT to encapsulate packets between nodes. For Vlan/Underlay mode there is no encapsulation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Falauda%2Fkube-ovn?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Falauda%2Fkube-ovn.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://trackgit.com&#34;&gt; &lt;img src=&#34;https://us-central1-trackgit-analytics.cloudfunctions.net/token/ping/l57vf80m7ckk59iv8ll5&#34; alt=&#34;trackgit-views&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>kardianos/service</title>
    <updated>2023-05-21T01:34:22Z</updated>
    <id>tag:github.com,2023-05-21:/kardianos/service</id>
    <link href="https://github.com/kardianos/service" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run go programs as a service on major platforms.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;service &lt;a href=&#34;https://godoc.org/github.com/kardianos/service&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/kardianos/service?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;service will install / un-install, start / stop, and run a program as a service (daemon). Currently supports Windows XP+, Linux/(systemd | Upstart | SysV), and OSX/Launchd.&lt;/p&gt; &#xA;&lt;p&gt;Windows controls services by setting up callbacks that is non-trivial. This is very different then other systems. This package provides the same API despite the substantial differences. It also can be used to detect how a program is called, from an interactive terminal or from a service manager.&lt;/p&gt; &#xA;&lt;h2&gt;BUGS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependencies field is not implemented for Linux systems and Launchd.&lt;/li&gt; &#xA; &lt;li&gt;OS X when running as a UserService Interactive will not be accurate.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>