<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-15T01:41:45Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kgretzky/evilginx2</title>
    <updated>2022-07-15T01:41:45Z</updated>
    <id>tag:github.com,2022-07-15:/kgretzky/evilginx2</id>
    <link href="https://github.com/kgretzky/evilginx2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standalone man-in-the-middle attack framework used for phishing login credentials along with session cookies, allowing for the bypass of 2-factor authentication&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Evilginx2 Logo&#34; src=&#34;https://raw.githubusercontent.com/kgretzky/evilginx2/master/media/img/evilginx2-logo-512.png&#34; height=&#34;160&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Evilginx2 Title&#34; src=&#34;https://raw.githubusercontent.com/kgretzky/evilginx2/master/media/img/evilginx2-title-black-512.png&#34; height=&#34;60&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;evilginx2&lt;/strong&gt; is a man-in-the-middle attack framework used for phishing login credentials along with session cookies, which in turn allows to bypass 2-factor authentication protection.&lt;/p&gt; &#xA;&lt;p&gt;This tool is a successor to &lt;a href=&#34;https://github.com/kgretzky/evilginx&#34;&gt;Evilginx&lt;/a&gt;, released in 2017, which used a custom version of nginx HTTP server to provide man-in-the-middle functionality to act as a proxy between a browser and phished website. Present version is fully written in GO as a standalone application, which implements its own HTTP and DNS server, making it extremely easy to set up and use.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Screenshot&#34; src=&#34;https://raw.githubusercontent.com/kgretzky/evilginx2/master/media/img/screen.png&#34; height=&#34;320&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I am very much aware that Evilginx can be used for nefarious purposes. This work is merely a demonstration of what adept attackers can do. It is the defender&#39;s responsibility to take such attacks into consideration and find ways to protect their users against this type of phishing attacks. Evilginx should be used only in legitimate penetration testing assignments with written permission from to-be-phished parties.&lt;/p&gt; &#xA;&lt;h2&gt;Write-up&lt;/h2&gt; &#xA;&lt;p&gt;If you want to learn more about this phishing technique, I&#39;ve published extensive blog posts about &lt;strong&gt;evilginx2&lt;/strong&gt; here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://breakdev.org/evilginx-2-next-generation-of-phishing-2fa-tokens&#34;&gt;Evilginx 2.0 - Release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://breakdev.org/evilginx-2-1-the-first-post-release-update/&#34;&gt;Evilginx 2.1 - First Update&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://breakdev.org/evilginx-2-2-jolly-winter-update/&#34;&gt;Evilginx 2.2 - Jolly Winter Update&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://breakdev.org/evilginx-2-3-phishermans-dream/&#34;&gt;Evilginx 2.3 - Phisherman&#39;s Dream&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://breakdev.org/evilginx-2-4-gone-phishing/&#34;&gt;Evilginx 2.4 - Gone Phishing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Video guide&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the fantastic videos made by Luke Turvey (&lt;a href=&#34;https://twitter.com/TurvSec&#34;&gt;@TurvSec&lt;/a&gt;), which fully explain how to get started using &lt;strong&gt;evilginx2&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://mrturvey.co.uk/aiovg_videos/how-to-phish-for-passwords-and-bypass-2fa/&#34;&gt;&lt;img src=&#34;https://mrturvey.co.uk/wp-content/uploads/2020/12/Phishing-Bypass-2FA--1024x576.jpg&#34; alt=&#34;How to phish for passwords and bypass 2FA - Luke Turvey&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mrturvey.co.uk/aiovg_videos/creating-custom-phishlets-for-evilginx2-2fa-bypass/&#34;&gt;&lt;img src=&#34;https://mrturvey.co.uk/wp-content/uploads/2020/12/Evilginx2-Phishlet-Creation-1024x576.jpg&#34; alt=&#34;Creating custom phishlets for evilginx2 (2FA Bypass) - Luke Turvey&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Phishlet Masters - Hall of Fame&lt;/h2&gt; &#xA;&lt;p&gt;Please thank the following contributors for devoting their precious time to deliver us fresh phishlets! (in order of first contributions)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/an0nud4y&#34;&gt;&lt;strong&gt;@an0nud4y&lt;/strong&gt;&lt;/a&gt; - PayPal, TikTok, Coinbase, Airbnb&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/cust0msync&#34;&gt;&lt;strong&gt;@cust0msync&lt;/strong&gt;&lt;/a&gt; - Amazon, Reddit&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/white_fi&#34;&gt;&lt;strong&gt;@white_fi&lt;/strong&gt;&lt;/a&gt; - Twitter&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/424f424f&#34;&gt;&lt;strong&gt;rvrsh3ll @424f424f&lt;/strong&gt;&lt;/a&gt; - Citrix&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/4lex&#34;&gt;&lt;strong&gt;audibleblink @4lex&lt;/strong&gt;&lt;/a&gt; - GitHub&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JamesCullum&#34;&gt;&lt;strong&gt;@JamesCullum&lt;/strong&gt;&lt;/a&gt; - Office 365&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can either use a &lt;a href=&#34;https://github.com/kgretzky/evilginx2/releases&#34;&gt;precompiled binary package&lt;/a&gt; for your architecture or you can compile &lt;strong&gt;evilginx2&lt;/strong&gt; from source.&lt;/p&gt; &#xA;&lt;p&gt;You will need an external server where you&#39;ll host your &lt;strong&gt;evilginx2&lt;/strong&gt; installation. I personally recommend Digital Ocean and if you follow my referral link, you will &lt;a href=&#34;https://m.do.co/c/50338abc7ffe&#34;&gt;get an extra $10 to spend on servers for free&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Evilginx runs very well on the most basic Debian 8 VPS.&lt;/p&gt; &#xA;&lt;h4&gt;Installing from source&lt;/h4&gt; &#xA;&lt;p&gt;In order to compile from source, make sure you have installed &lt;strong&gt;GO&lt;/strong&gt; of version at least &lt;strong&gt;1.14.0&lt;/strong&gt; (get it from &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When you have GO installed, type in the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get -y install git make&#xA;git clone https://github.com/kgretzky/evilginx2.git&#xA;cd evilginx2&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now either run &lt;strong&gt;evilginx2&lt;/strong&gt; from local directory like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo ./bin/evilginx -p ./phishlets/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or install it globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo make install&#xA;sudo evilginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instructions above can also be used to update &lt;strong&gt;evilginx2&lt;/strong&gt; to the latest version.&lt;/p&gt; &#xA;&lt;h4&gt;Installing with Docker&lt;/h4&gt; &#xA;&lt;p&gt;You can launch &lt;strong&gt;evilginx2&lt;/strong&gt; from within Docker. First build the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build . -t evilginx2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can run the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -p 53:53/udp -p 80:80 -p 443:443 evilginx2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Phishlets are loaded within the container at &lt;code&gt;/app/phishlets&lt;/code&gt;, which can be mounted as a volume for configuration.&lt;/p&gt; &#xA;&lt;h4&gt;Installing from precompiled binary packages&lt;/h4&gt; &#xA;&lt;p&gt;Grab the package you want from &lt;a href=&#34;https://github.com/kgretzky/evilginx2/releases&#34;&gt;here&lt;/a&gt; and drop it on your box. Then do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;tar zxvf evilginx-linux-amd64.tar.gz&#xA;cd evilginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to do a system-wide install, use the install script with root privileges:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod 700 ./install.sh&#xA;sudo ./install.sh&#xA;sudo evilginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or just launch &lt;strong&gt;evilginx2&lt;/strong&gt; from the current directory (you will also need root privileges):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod 700 ./evilginx&#xA;sudo ./evilginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT!&lt;/strong&gt; Make sure that there is no service listening on ports &lt;code&gt;TCP 443&lt;/code&gt;, &lt;code&gt;TCP 80&lt;/code&gt; and &lt;code&gt;UDP 53&lt;/code&gt;. You may need to shutdown apache or nginx and any service used for resolving DNS that may be running. &lt;strong&gt;evilginx2&lt;/strong&gt; will tell you on launch if it fails to open a listening socket on any of these ports.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;evilginx2&lt;/strong&gt; will look for phishlets in &lt;code&gt;./phishlets/&lt;/code&gt; directory and later in &lt;code&gt;/usr/share/evilginx/phishlets/&lt;/code&gt;. If you want to specify a custom path to load phishlets from, use the &lt;code&gt;-p &amp;lt;phishlets_dir_path&amp;gt;&lt;/code&gt; parameter when launching the tool.&lt;/p&gt; &#xA;&lt;p&gt;By default, &lt;strong&gt;evilginx2&lt;/strong&gt; will look for HTML temapltes in &lt;code&gt;./templates/&lt;/code&gt; directory and later in &lt;code&gt;/usr/share/evilginx/templates/&lt;/code&gt;. If you want to specify a custom path to load HTML templates from, use the &lt;code&gt;-t &amp;lt;templates_dir_path&amp;gt;&lt;/code&gt; parameter when launching the tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage of ./evilginx:&#xA;  -c string&#xA;        Configuration directory path&#xA;  -debug&#xA;        Enable debug output&#xA;  -developer&#xA;        Enable developer mode (generates self-signed certificates for all hostnames)&#xA;  -p string&#xA;        Phishlets directory path&#xA;  -t string&#xA;        HTML templates directory path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see &lt;strong&gt;evilginx2&lt;/strong&gt; logo with a prompt to enter commands. Type &lt;code&gt;help&lt;/code&gt; or &lt;code&gt;help &amp;lt;command&amp;gt;&lt;/code&gt; if you want to see available commands or more detailed information on them.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;To get up and running, you need to first do some setting up.&lt;/p&gt; &#xA;&lt;p&gt;At this point I assume, you&#39;ve already registered a domain (let&#39;s call it &lt;code&gt;yourdomain.com&lt;/code&gt;) and you set up the nameservers (both &lt;code&gt;ns1&lt;/code&gt; and &lt;code&gt;ns2&lt;/code&gt;) in your domain provider&#39;s admin panel to point to your server&#39;s IP (e.g. 10.0.0.1):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ns1.yourdomain.com = 10.0.0.1&#xA;ns2.yourdomain.com = 10.0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set up your server&#39;s domain and IP using following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;config domain yourdomain.com&#xA;config ip 10.0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can set up the phishlet you want to use. For the sake of this short guide, we will use a LinkedIn phishlet. Set up the hostname for the phishlet (it must contain your domain obviously):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;phishlets hostname linkedin my.phishing.hostname.yourdomain.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And now you can &lt;code&gt;enable&lt;/code&gt; the phishlet, which will initiate automatic retrieval of LetsEncrypt SSL/TLS certificates if none are locally found for the hostname you picked:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;phishlets enable linkedin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your phishing site is now live. Think of the URL, you want the victim to be redirected to on successful login and get the phishing URL like this (victim will be redirected to &lt;code&gt;https://www.google.com&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lures create linkedin&#xA;lures edit 0 redirect_url https://www.google.com&#xA;lures get-url 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running phishlets will only respond to phishing links generating for specific lures, so any scanners who scan your main domain will be redirected to URL specified as &lt;code&gt;redirect_url&lt;/code&gt; under &lt;code&gt;config&lt;/code&gt;. If you want to hide your phishlet and make it not respond even to valid lure phishing URLs, use &lt;code&gt;phishlet hide/unhide &amp;lt;phishlet&amp;gt;&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;You can monitor captured credentials and session cookies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sessions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get detailed information about the captured session, with the session cookie itself (it will be printed in JSON format at the bottom), select its session ID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sessions &amp;lt;id&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The captured session cookie can be copied and imported into Chrome browser, using &lt;a href=&#34;https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=en&#34;&gt;EditThisCookie&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important!&lt;/strong&gt; If you want &lt;strong&gt;evilginx2&lt;/strong&gt; to continue running after you log out from your server, you should run it inside a &lt;code&gt;screen&lt;/code&gt; or &lt;code&gt;tmux&lt;/code&gt; session.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;I DO NOT offer support for providing or creating phishlets. I will also NOT help you with creation of your own phishlets. There are many phishlets provided as examples, which you can use to create your own.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;evilginx2&lt;/strong&gt; is made by Kuba Gretzky (&lt;a href=&#34;https://twitter.com/mrgretzky&#34;&gt;@mrgretzky&lt;/a&gt;) and it&#39;s released under GPL3 license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>earthly/earthly</title>
    <updated>2022-07-15T01:41:45Z</updated>
    <id>tag:github.com,2022-07-15:/earthly/earthly</id>
    <link href="https://github.com/earthly/earthly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The effortless CI/CD framework that runs anywhere&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://earthly.dev&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/earthly/earthly/main/img/logo-banner-white-bg.png&#34; alt=&#34;Earthly&#34; align=&#34;center&#34; width=&#34;700px&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/earthly/earthly/actions?query=workflow%3A%22GitHub+Actions+CI%22+branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/earthly/earthly/workflows/GitHub%20Actions%20CI/badge.svg?sanitize=true&#34; alt=&#34;GitHub Actions CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://earthly.dev/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-join%20chat-red.svg?sanitize=true&#34; alt=&#34;Join the chat on Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.earthly.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-git%20book-blue&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://earthly.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/website-earthly.dev-blue&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://earthly.dev/get-earthly&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/earthly/earthly.svg?label=install&amp;amp;color=1f626c&#34; alt=&#34;Install Earthly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/u/earthly&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docker%20hub-earthly-blue&#34; alt=&#34;Docker Hub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL-blue.svg?sanitize=true&#34; alt=&#34;License MPL-2&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🐳 Build anything via containers&lt;/strong&gt; - &lt;em&gt;build images or standalone artifacts (binaries, packages, arbitrary files)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🛠 Programming language agnostic&lt;/strong&gt; - &lt;em&gt;allows the use of language-specific build tooling&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🔁 Repeatable builds&lt;/strong&gt; - &lt;em&gt;does not depend on user&#39;s local installation: runs the same locally, as in CI&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;⛓ Parallelism that just works&lt;/strong&gt; - &lt;em&gt;build in parallel without special considerations&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🏘 Mono and Poly-repo friendly&lt;/strong&gt; - &lt;em&gt;ability to split the build definitions across vast project hierarchies&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;💾 Shared caching&lt;/strong&gt; - &lt;em&gt;share build cache between CI runners&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🔀 Multi-platform&lt;/strong&gt; - &lt;em&gt;build for multiple platforms in parallel&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://earthly.dev&#34;&gt;🌍 Earthly&lt;/a&gt; is a CI/CD framework that allows you to develop pipelines locally and run them anywhere. Earthly leverages containers for the execution of pipelines. This makes them self-contained, repeatable, portable and parallel.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://earthly.dev/get-earthly&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/earthly/earthly/main/docs/img/get-earthly-button.png&#34; alt=&#34;Get Earthly&#34; title=&#34;Get Earthly&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#why-use-earthly&#34;&gt;Why use Earthly?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#where-does-earthly-fit&#34;&gt;Where Does Earthly Fit?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#how-does-it-work&#34;&gt;How Does It Work?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Why Use Earthly?&lt;/h2&gt; &#xA;&lt;h3&gt;🔁 Reproduce CI failures&lt;/h3&gt; &#xA;&lt;p&gt;Earthly builds are self-contained, isolated and repeatable. Regardless of whether Earthly runs in your CI or on your laptop, there is a degree of guarantee that the build will run the same way. This allows for faster iteration on the build scripts and easier debugging when something goes wrong. No more &lt;code&gt;git commit -m &#34;try again&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🤲 Builds that run the same for everyone&lt;/h3&gt; &#xA;&lt;p&gt;Repeatable builds also mean that your build will run the same on your colleagues&#39; laptop without any additional project-specific or language-specific setup. This fosters better developer collaboration and mitigates works-for-me type of issues.&lt;/p&gt; &#xA;&lt;h3&gt;🚀 From zero to working build in minutes&lt;/h3&gt; &#xA;&lt;p&gt;Jump from project to project with ease, regardless of the language they are written in. Running the project&#39;s test suites is simply a matter of running an Earthly target (without fiddling with project configuration to make it compile and run on your system). Contribute across teams with confidence.&lt;/p&gt; &#xA;&lt;h3&gt;📦 Reusability&lt;/h3&gt; &#xA;&lt;p&gt;A simple, yet powerful import system allows for reusability of builds across directories or even across repositories. Importing other builds does not have hidden environment-specific implications - it just works.&lt;/p&gt; &#xA;&lt;h3&gt;❤️ It&#39;s like Makefile and Dockerfile had a baby&lt;/h3&gt; &#xA;&lt;p&gt;Taking some of the best ideas from Makefiles and Dockerfiles, Earthly combines two build specifications into one.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Where Does Earthly Fit?&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/earthly/earthly/main/docs/img/integration-diagram-v2.png&#34; alt=&#34;Earthly fits between language-specific tooling and the CI&#34; width=&#34;700px&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Earthly is meant to be used both on your development machine and in CI. It can run on top of popular CI systems (like Jenkins, &lt;a href=&#34;https://docs.earthly.dev/examples/circle-integration&#34;&gt;Circle&lt;/a&gt;, &lt;a href=&#34;https://docs.earthly.dev/examples/gh-actions-integration&#34;&gt;GitHub Actions&lt;/a&gt;). It is typically the layer between language-specific tooling (like maven, gradle, npm, pip, go build) and the CI build spec.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;How Does It Work?&lt;/h2&gt; &#xA;&lt;p&gt;In short: &lt;strong&gt;containers&lt;/strong&gt;, &lt;strong&gt;layer caching&lt;/strong&gt; and &lt;strong&gt;complex build graphs&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Earthly executes builds in containers, where execution is isolated. The dependencies of the build are explicitly specified in the build definition, thus making the build self-sufficient.&lt;/p&gt; &#xA;&lt;p&gt;We use a target-based system to help users break up complex builds into reusable parts. Nothing is shared between targets other than clearly declared dependencies. Nothing shared means no unexpected race conditions. In fact, the build is executed in parallel whenever possible, without any need for the user to take care of any locking or unexpected environment interactions.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;ℹ️ Note &lt;br&gt;&lt;br&gt; Earthfiles might seem very similar to Dockerfile multi-stage builds. In fact, the &lt;a href=&#34;https://github.com/moby/buildkit&#34;&gt;same technology&lt;/a&gt; is used underneath. However, a key difference is that Earthly is designed to be a general-purpose build system, not just a Docker image specification. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/#how-is-earthly-different-from-dockerfiles&#34;&gt;how Earthly is different from Dockerfiles&lt;/a&gt;.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://earthly.dev/get-earthly&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To build from source, check the &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/CONTRIBUTING.md&#34;&gt;contributing page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Here are some resources to get you started with Earthly&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🏁 &lt;a href=&#34;https://docs.earthly.dev/guides/basics&#34;&gt;Getting started guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;👀 &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/c&#34;&gt;C&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/cpp&#34;&gt;C++&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/cobol&#34;&gt;COBOL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/js&#34;&gt;JS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/rust&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/scala&#34;&gt;Scala&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/monorepo&#34;&gt;Mono-repo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/multirepo&#34;&gt;Multi-repo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🔍 Explore &lt;a href=&#34;https://docs.earthly.dev/examples/examples#earthlys-own-build&#34;&gt;Earthly&#39;s own build&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;✔️ &lt;a href=&#34;https://docs.earthly.dev/best-practices&#34;&gt;Best practices&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://docs.earthly.dev&#34;&gt;full documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Reference pages&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📑 &lt;a href=&#34;https://docs.earthly.dev/earthfile&#34;&gt;Earthfile reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;#️⃣ &lt;a href=&#34;https://docs.earthly.dev/earthly-command&#34;&gt;Earthly command reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;⚙️ &lt;a href=&#34;https://docs.earthly.dev/earthly-config&#34;&gt;Configuration reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;A simple example (for Go)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-earthly&#34;&gt;# Earthfile&#xA;VERSION 0.6&#xA;FROM golang:1.15-alpine3.13&#xA;RUN apk --update --no-cache add git&#xA;WORKDIR /go-example&#xA;&#xA;all:&#xA;  BUILD +lint&#xA;  BUILD +docker&#xA;&#xA;build:&#xA;  COPY main.go .&#xA;  RUN go build -o build/go-example main.go&#xA;  SAVE ARTIFACT build/go-example AS LOCAL build/go-example&#xA;&#xA;lint:&#xA;  RUN go get golang.org/x/lint/golint&#xA;  COPY main.go .&#xA;  RUN golint -set_exit_status ./...&#xA;&#xA;docker:&#xA;  COPY +build/go-example .&#xA;  ENTRYPOINT [&#34;/go-example/go-example&#34;]&#xA;  SAVE IMAGE go-example:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// main.go&#xA;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;  fmt.Println(&#34;hello world&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Invoke the build using &lt;code&gt;earthly +all&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://asciinema.org/a/351683?speed=2&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/earthly/earthly/main/img/demo-351683.gif&#34; alt=&#34;Demonstration of a simple Earthly build&#34; title=&#34;View on asciinema.org&#34; width=&#34;600px&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Examples for other languages are available in the &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples&#34;&gt;examples dir&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;📦 Modern import system&lt;/h3&gt; &#xA;&lt;p&gt;Earthly can be used to reference and build targets from other directories or even other repositories. For example, if we wanted to build &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/go/Earthfile#L17-L20&#34;&gt;an example target from the &lt;code&gt;github.com/earthly/earthly&lt;/code&gt; repository&lt;/a&gt;, we could issue&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Try it yourself! No need to clone.&#xA;earthly github.com/earthly/earthly/examples/go:main+docker&#xA;# Run the resulting image.&#xA;docker run --rm earthly/examples:go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🔨 Reference other targets using +&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;+&lt;/code&gt; to reference other targets and create complex build inter-dependencies.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://docs.earthly.dev/guides/target-ref&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/earthly/earthly/main/docs/guides/img/ref-infographic-v2.png&#34; alt=&#34;Target and artifact reference syntax&#34; title=&#34;Reference targets using +&#34; width=&#34;600px&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Examples&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Same directory (same Earthfile)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-earthly&#34;&gt;BUILD +some-target&#xA;FROM +some-target&#xA;COPY +some-target/my-artifact ./&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other directories&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-earthly&#34;&gt;BUILD ./some/local/path+some-target&#xA;FROM ./some/local/path+some-target&#xA;COPY ./some/local/path+some-target/my-artifact ./&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Other repositories&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-earthly&#34;&gt;BUILD github.com/someone/someproject:v1.2.3+some-target&#xA;FROM github.com/someone/someproject:v1.2.3+some-target&#xA;COPY github.com/someone/someproject:v1.2.3+some-target/my-artifact ./&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;💾 Caching that works the same as Docker builds&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://asciinema.org/a/351674?speed=2&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/earthly/earthly/main/img/demo-351674.gif&#34; alt=&#34;Demonstration of Earthly&#39;s caching&#34; title=&#34;View on asciinema.org&#34; width=&#34;600px&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Cut down build times in CI through &lt;a href=&#34;https://docs.earthly.dev/guides/shared-cache&#34;&gt;Shared Caching&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🛠 Multi-platform support&lt;/h3&gt; &#xA;&lt;p&gt;Build for multiple platforms in parallel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-earthly&#34;&gt;VERSION 0.6&#xA;all:&#xA;    BUILD \&#xA;        --platform=linux/amd64 \&#xA;        --platform=linux/arm64 \&#xA;        --platform=linux/arm/v7 \&#xA;        --platform=linux/arm/v6 \&#xA;        +build&#xA;&#xA;build:&#xA;    FROM alpine:3.15&#xA;    CMD [&#34;uname&#34;, &#34;-m&#34;]&#xA;    SAVE IMAGE multiplatform-image&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⛓ Parallelization that just works&lt;/h3&gt; &#xA;&lt;p&gt;Whenever possible, Earthly automatically executes targets in parallel.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://asciinema.org/a/351678?speed=2&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/earthly/earthly/main/img/demo-351678.gif&#34; alt=&#34;Demonstration of Earthly&#39;s parallelization&#34; title=&#34;View on asciinema.org&#34; width=&#34;600px&#34;&gt;&lt;/a&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;🤲 Make use of build tools that work everywhere&lt;/h3&gt; &#xA;&lt;p&gt;No need to ask your team to install &lt;code&gt;protoc&lt;/code&gt;, a specific version of Python, Java 1.6 or the .NET Core ecosystem. You only install once, in your Earthfile, and it works for everyone. Or even better, you can just make use of the rich Docker Hub ecosystem.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-earthly&#34;&gt;VERSION 0.6&#xA;FROM golang:1.15-alpine3.13&#xA;WORKDIR /proto-example&#xA;&#xA;proto:&#xA;  FROM namely/protoc-all:1.29_4&#xA;  COPY api.proto /defs&#xA;  RUN --entrypoint -- -f api.proto -l go&#xA;  SAVE ARTIFACT ./gen/pb-go /pb AS LOCAL pb&#xA;&#xA;build:&#xA;  COPY go.mod go.sum .&#xA;  RUN go mod download&#xA;  COPY +proto/pb pb&#xA;  COPY main.go ./&#xA;  RUN go build -o build/proto-example main.go&#xA;  SAVE ARTIFACT build/proto-example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See full &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/examples/readme/proto&#34;&gt;example code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;🔑 Cloud secrets support built-in&lt;/h3&gt; &#xA;&lt;p&gt;Secrets are never stored within an image&#39;s layers and they are only available to the commands that need them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;earthly set /user/github/token &#39;shhh...&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-earthly&#34;&gt;release:&#xA;  RUN --push --secret GITHUB_TOKEN=+secrets/user/github/token github-release upload file.bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How is Earthly different from Dockerfiles?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfiles&lt;/a&gt; were designed for specifying the make-up of Docker images and that&#39;s where Dockerfiles stop. Earthly takes some key principles of Dockerfiles (like layer caching), but expands on the use-cases. For example, Earthly can output regular artifacts, run unit and integration tests, and create several Docker images at a time - all outside the scope of Dockerfiles.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to use Dockerfiles in combination with other technologies (e.g., Makefiles or bash files) to solve such use-cases. However, these combinations are difficult to parallelize, challenging to scale across repositories as they lack a robust import system and also they often vary in style from one team to another. Earthly does not have these limitations as it was designed as a general-purpose build system.&lt;/p&gt; &#xA;&lt;p&gt;For example, Earthly introduces a richer target, artifact and image &lt;a href=&#34;https://docs.earthly.dev/guides/target-ref&#34;&gt;referencing system&lt;/a&gt;, allowing for better reuse in complex builds spanning a single large repository or multiple repositories. Because Dockerfiles are only meant to describe one image at a time, such features are outside the scope of applicability of Dockerfiles.&lt;/p&gt; &#xA;&lt;h3&gt;How do I tell apart classical Dockerfile commands from Earthly commands?&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://docs.earthly.dev/earthfile&#34;&gt;Earthfile reference doc page&lt;/a&gt;. It has all the commands there and specifies which commands are the same as Dockerfile commands and which are new.&lt;/p&gt; &#xA;&lt;h3&gt;Can Earthly build Dockerfiles?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! You can use the command &lt;code&gt;FROM DOCKERFILE&lt;/code&gt; to inherit the commands in an existing Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-earthly&#34;&gt;build:&#xA;  FROM DOCKERFILE .&#xA;  SAVE IMAGE some-image:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also optionally port your Dockerfiles to Earthly entirely. Translating Dockerfiles to Earthfiles is usually a matter of copy-pasting and making minor adjustments. See the &lt;a href=&#34;https://docs.earthly.dev/guides/basics&#34;&gt;getting started page&lt;/a&gt; for some Earthfile examples.&lt;/p&gt; &#xA;&lt;h3&gt;How is Earthly different from Bazel?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; is a build tool developed by Google to optimize the speed, correctness, and reproducibility of their internal monorepo codebase. Earthly draws inspiration from some of the principles of Bazel (mainly the idea of repeatable builds), but it is different in a few key ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Earthly does not replace language-specific tools, like Maven, Gradle, Webpack, etc. Instead, it leverages and integrates with them. Adopting Bazel usually means that all build files need to be completely rewritten. This is not the case with Earthly, as it mainly acts as the glue between builds.&lt;/li&gt; &#xA; &lt;li&gt;The learning curve of Earthly is more accessible, especially if the user already has experience with Dockerfiles. Bazel, on the other hand, introduces some completely new concepts.&lt;/li&gt; &#xA; &lt;li&gt;Bazel has a purely descriptive specification language. Earthly is a mix of descriptive and imperative language.&lt;/li&gt; &#xA; &lt;li&gt;Bazel uses tight control of compiler toolchains to achieve true hermetic builds, whereas Earthly uses containers and well-defined inputs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Overall, compared to Bazel, Earthly sacrifices some correctness and reproducibility in favor of significantly better usability and composability with existing open-source technologies.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please report bugs as &lt;a href=&#34;https://github.com/earthly/earthly/issues&#34;&gt;GitHub issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Join us on &lt;a href=&#34;https://earthly.dev/slack&#34;&gt;Slack&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Questions via GitHub issues are welcome!&lt;/li&gt; &#xA; &lt;li&gt;PRs welcome! But please give a heads-up in a GitHub issue before starting work. If there is no GitHub issue for what you want to do, please create one.&lt;/li&gt; &#xA; &lt;li&gt;To build from source, check the &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/CONTRIBUTING.md&#34;&gt;contributing page&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Earthly is licensed under the Mozilla Public License Version 2.0. See &lt;a href=&#34;https://raw.githubusercontent.com/earthly/earthly/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>projectdiscovery/nuclei</title>
    <updated>2022-07-15T01:41:45Z</updated>
    <id>tag:github.com,2022-07-15:/projectdiscovery/nuclei</id>
    <link href="https://github.com/projectdiscovery/nuclei" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and customizable vulnerability scanner based on simple YAML based DSL.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://nuclei.projectdiscovery.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/static/nuclei-logo.png&#34; width=&#34;200px&#34; alt=&#34;Nuclei&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Fast and customisable vulnerability scanner based on simple YAML based DSL.&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/projectdiscovery/nuclei?filename=v2%2Fgo.mod&#34;&gt; &lt;a href=&#34;https://github.com/projectdiscovery/nuclei/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/projectdiscovery/nuclei/total&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/projectdiscovery/nuclei/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors-anon/projectdiscovery/nuclei&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/projectdiscovery/nuclei/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/projectdiscovery/nuclei&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/projectdiscovery/nuclei/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/projectdiscovery/nuclei&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://github.com/projectdiscovery/nuclei/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/projectdiscovery/nuclei&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pdnuclei&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pdnuclei.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/#how-it-works&#34;&gt;How&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/#install-nuclei&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/#for-security-engineers&#34;&gt;For Security Engineers&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/#for-developers-and-organisations&#34;&gt;For Developers&lt;/a&gt; • &lt;a href=&#34;https://nuclei.projectdiscovery.io/nuclei/get-started/&#34;&gt;Documentation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/#credits&#34;&gt;Credits&lt;/a&gt; • &lt;a href=&#34;https://nuclei.projectdiscovery.io/faq/nuclei/&#34;&gt;FAQs&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Join Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/projectdiscovery/nuclei/raw/master/README.md&#34;&gt;English&lt;/a&gt; • &lt;a href=&#34;https://github.com/projectdiscovery/nuclei/raw/master/README_CN.md&#34;&gt;中文&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Nuclei is used to send requests across targets based on a template, leading to zero false positives and providing fast scanning on a large number of hosts. Nuclei offers scanning for a variety of protocols, including TCP, DNS, HTTP, SSL, File, Whois, Websocket, Headless etc. With powerful and flexible templating, Nuclei can be used to model all kinds of security checks.&lt;/p&gt; &#xA;&lt;p&gt;We have a &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates&#34;&gt;dedicated repository&lt;/a&gt; that houses various type of vulnerability templates contributed by &lt;strong&gt;more than 300&lt;/strong&gt; security researchers and engineers.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/static/nuclei-flow.jpg&#34; alt=&#34;nuclei-flow&#34; width=&#34;700px&#34;&gt; &lt;/h3&gt; &#xA;&lt;h1&gt;Install Nuclei&lt;/h1&gt; &#xA;&lt;p&gt;Nuclei requires &lt;strong&gt;go1.17&lt;/strong&gt; to install successfully. Run the following command to install the latest version -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install -v github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;More installation &lt;a href=&#34;https://nuclei.projectdiscovery.io/nuclei/get-started/&#34;&gt;methods can be found here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;h3&gt;Nuclei Templates&lt;/h3&gt; &lt;p&gt;Nuclei has built-in support for automatic template download/update as default since version &lt;a href=&#34;https://github.com/projectdiscovery/nuclei/releases/tag/v2.5.2&#34;&gt;v2.5.2&lt;/a&gt;. &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates&#34;&gt;&lt;strong&gt;Nuclei-Templates&lt;/strong&gt;&lt;/a&gt; project provides a community-contributed list of ready-to-use templates that is constantly updated.&lt;/p&gt; &lt;p&gt;You may still use the &lt;code&gt;update-templates&lt;/code&gt; flag to update the nuclei templates at any time; You can write your own checks for your individual workflow and needs following Nuclei&#39;s &lt;a href=&#34;https://nuclei.projectdiscovery.io/templating-guide/&#34;&gt;templating guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The YAML DSL reference syntax is available &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/SYNTAX-REFERENCE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nuclei -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display help for the tool. Here are all the switches it supports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Nuclei is a fast, template based vulnerability scanner focusing&#xA;on extensive configurability, massive extensibility and ease of use.&#xA;&#xA;Usage:&#xA;  nuclei [flags]&#xA;&#xA;Flags:&#xA;TARGET:&#xA;   -u, -target string[]  target URLs/hosts to scan&#xA;   -l, -list string      path to file containing a list of target URLs/hosts to scan (one per line)&#xA;   -resume string        Resume scan using resume.cfg (clustering will be disabled)&#xA;&#xA;TEMPLATES:&#xA;   -nt, -new-templates          run only new templates added in latest nuclei-templates release&#xA;   -as, -automatic-scan         automatic web scan using wappalyzer technology detection to tags mapping&#xA;   -t, -templates string[]      list of template or template directory to run (comma-separated, file)&#xA;   -tu, -template-url string[]  list of template urls to run (comma-separated, file)&#xA;   -w, -workflows string[]      list of workflow or workflow directory to run (comma-separated, file)&#xA;   -wu, -workflow-url string[]  list of workflow urls to run (comma-separated, file)&#xA;   -validate                    validate the passed templates to nuclei&#xA;   -tl                          list all available templates&#xA;&#xA;FILTERING:&#xA;   -a, -author string[]              templates to run based on authors (comma-separated, file)&#xA;   -tags string[]                    templates to run based on tags (comma-separated, file)&#xA;   -etags, -exclude-tags string[]    templates to exclude based on tags (comma-separated, file)&#xA;   -itags, -include-tags string[]    tags to be executed even if they are excluded either by default or configuration&#xA;   -id, -template-id string[]        templates to run based on template ids (comma-separated, file)&#xA;   -eid, -exclude-id string[]        templates to exclude based on template ids (comma-separated, file)&#xA;   -it, -include-templates string[]  templates to be executed even if they are excluded either by default or configuration&#xA;   -et, -exclude-templates string[]  template or template directory to exclude (comma-separated, file)&#xA;   -s, -severity value[]             templates to run based on severity. Possible values: info, low, medium, high, critical, unknown&#xA;   -es, -exclude-severity value[]    templates to exclude based on severity. Possible values: info, low, medium, high, critical, unknown&#xA;   -pt, -type value[]                templates to run based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois&#xA;   -ept, -exclude-type value[]       templates to exclude based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois&#xA;&#xA;OUTPUT:&#xA;   -o, -output string            output file to write found issues/vulnerabilities&#xA;   -sresp, -store-resp           store all request/response passed through nuclei to output directory&#xA;   -srd, -store-resp-dir string  store all request/response passed through nuclei to custom directory (default &#34;output&#34;)&#xA;   -silent                       display findings only&#xA;   -nc, -no-color                disable output content coloring (ANSI escape codes)&#xA;   -json                         write output in JSONL(ines) format&#xA;   -irr, -include-rr             include request/response pairs in the JSONL output (for findings only)&#xA;   -nm, -no-meta                 disable printing result metadata in cli output&#xA;   -nts, -no-timestamp           disable printing timestamp in cli output&#xA;   -rdb, -report-db string       nuclei reporting database (always use this to persist report data)&#xA;   -ms, -matcher-status          display match failure status&#xA;   -me, -markdown-export string  directory to export results in markdown format&#xA;   -se, -sarif-export string     file to export results in SARIF format&#xA;&#xA;CONFIGURATIONS:&#xA;   -config string              path to the nuclei configuration file&#xA;   -fr, -follow-redirects      enable following redirects for http templates&#xA;   -mr, -max-redirects int     max number of redirects to follow for http templates (default 10)&#xA;   -dr, -disable-redirects     disable redirects for http templates&#xA;   -rc, -report-config string  nuclei reporting module configuration file&#xA;   -H, -header string[]        custom header/cookie to include in all http request in header:value format (cli, file)&#xA;   -V, -var value              custom vars in key=value format&#xA;   -r, -resolvers string       file containing resolver list for nuclei&#xA;   -sr, -system-resolvers      use system DNS resolving as error fallback&#xA;   -passive                    enable passive HTTP response processing mode&#xA;   -ev, -env-vars              enable environment variables to be used in template&#xA;   -cc, -client-cert string    client certificate file (PEM-encoded) used for authenticating against scanned hosts&#xA;   -ck, -client-key string     client key file (PEM-encoded) used for authenticating against scanned hosts&#xA;   -ca, -client-ca string      client certificate authority file (PEM-encoded) used for authenticating against scanned hosts&#xA;   -sml, -show-match-line      show match lines for file templates, works with extractors only&#xA;   -ztls                       use ztls library with autofallback to standard one for tls13&#xA;   -sni string                 tls sni hostname to use (default: input domain name)&#xA;&#xA;INTERACTSH:&#xA;   -iserver, -interactsh-server string  interactsh server url for self-hosted instance (default: oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me)&#xA;   -itoken, -interactsh-token string    authentication token for self-hosted interactsh server&#xA;   -interactions-cache-size int         number of requests to keep in the interactions cache (default 5000)&#xA;   -interactions-eviction int           number of seconds to wait before evicting requests from cache (default 60)&#xA;   -interactions-poll-duration int      number of seconds to wait before each interaction poll request (default 5)&#xA;   -interactions-cooldown-period int    extra time for interaction polling before exiting (default 5)&#xA;   -ni, -no-interactsh                  disable interactsh server for OAST testing, exclude OAST based templates&#xA;&#xA;RATE-LIMIT:&#xA;   -rl, -rate-limit int            maximum number of requests to send per second (default 150)&#xA;   -rlm, -rate-limit-minute int    maximum number of requests to send per minute&#xA;   -bs, -bulk-size int             maximum number of hosts to be analyzed in parallel per template (default 25)&#xA;   -c, -concurrency int            maximum number of templates to be executed in parallel (default 25)&#xA;   -hbs, -headless-bulk-size int   maximum number of headless hosts to be analyzed in parallel per template (default 10)&#xA;   -hc, -headless-concurrency int  maximum number of headless templates to be executed in parallel (default 10)&#xA;&#xA;OPTIMIZATIONS:&#xA;   -timeout int                time to wait in seconds before timeout (default 5)&#xA;   -retries int                number of times to retry a failed request (default 1)&#xA;   -ldp, -leave-default-ports  leave default HTTP/HTTPS ports (eg. host:80,host:443&#xA;   -mhe, -max-host-error int   max errors for a host before skipping from scan (default 30)&#xA;   -project                    use a project folder to avoid sending same request multiple times&#xA;   -project-path string        set a specific project path&#xA;   -spm, -stop-at-first-path   stop processing HTTP requests after the first match (may break template/workflow logic)&#xA;   -stream                     stream mode - start elaborating without sorting the input&#xA;&#xA;HEADLESS:&#xA;   -headless            enable templates that require headless browser support (root user on linux will disable sandbox)&#xA;   -page-timeout int    seconds to wait for each page in headless mode (default 20)&#xA;   -sb, -show-browser   show the browser on the screen when running templates with headless mode&#xA;   -sc, -system-chrome  Use local installed chrome browser instead of nuclei installed&#xA;&#xA;DEBUG:&#xA;   -debug                    show all requests and responses&#xA;   -dreq, -debug-req         show all sent requests&#xA;   -dresp, -debug-resp       show all received responses&#xA;   -p, -proxy string[]       list of http/socks5 proxy to use (comma separated or file input)&#xA;   -pi, -proxy-internal      proxy all internal requests&#xA;   -tlog, -trace-log string  file to write sent requests trace log&#xA;   -elog, -error-log string  file to write sent requests error log&#xA;   -version                  show nuclei version&#xA;   -hm, -hang-monitor        enable nuclei hang monitoring&#xA;   -v, -verbose              show verbose output&#xA;   -vv                       display templates loaded for scan&#xA;   -ep, -enable-pprof        enable pprof debugging server&#xA;   -tv, -templates-version   shows the version of the installed nuclei-templates&#xA;&#xA;UPDATE:&#xA;   -update                        update nuclei engine to the latest released version&#xA;   -ut, -update-templates         update nuclei-templates to latest released version&#xA;   -ud, -update-directory string  overwrite the default directory to install nuclei-templates&#xA;   -duc, -disable-update-check    disable automatic nuclei/templates update check&#xA;&#xA;STATISTICS:&#xA;   -stats                    display statistics about the running scan&#xA;   -sj, -stats-json          write statistics data to an output file in JSONL(ines) format&#xA;   -si, -stats-interval int  number of seconds to wait between showing a statistics update (default 5)&#xA;   -m, -metrics              expose nuclei metrics on a port&#xA;   -mp, -metrics-port int    port to expose nuclei metrics on (default 9092)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Nuclei&lt;/h3&gt; &#xA;&lt;p&gt;Scanning target domain with &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates&#34;&gt;community-curated&lt;/a&gt; nuclei templates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nuclei -u https://example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scanning target URLs with &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates&#34;&gt;community-curated&lt;/a&gt; nuclei templates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nuclei -list urls.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example of &lt;code&gt;urls.txt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;http://example.com&#xA;http://app.example.com&#xA;http://test.example.com&#xA;http://uat.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;More detailed examples of running nuclei can be found &lt;a href=&#34;https://nuclei.projectdiscovery.io/nuclei/get-started/#running-nuclei&#34;&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;For Security Engineers&lt;/h1&gt; &#xA;&lt;p&gt;Nuclei offers great number of features that are helpful for security engineers to customise workflow in their organisation. With the varieties of scan capabilities (like DNS, HTTP, TCP), security engineers can easily create their suite of custom checks with Nuclei.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Varieties of protocols supported: TCP, DNS, HTTP, File, etc&lt;/li&gt; &#xA; &lt;li&gt;Achieve complex vulnerability steps with workflows and &lt;a href=&#34;https://blog.projectdiscovery.io/nuclei-unleashed-quickly-write-complex-exploits/&#34;&gt;dynamic requests.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easy to integrate into CI/CD, designed to be easily integrated into regression cycle to actively check the fix and re-appearance of vulnerability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1 align=&#34;left&#34;&gt; &lt;a href=&#34;https://nuclei.projectdiscovery.io/nuclei/get-started/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/static/learn-more-button.png&#34; width=&#34;170px&#34; alt=&#34;Learn More&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;For Bug Bounty hunters:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Nuclei allows you to customise your testing approach with your own suite of checks and easily run across your bug bounty programs. Moreover, Nuclei can be easily integrated into any continuous scanning workflow.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Designed to be easily integrated into other tool workflow.&lt;/li&gt; &#xA;     &lt;li&gt;Can process thousands of hosts in few minutes.&lt;/li&gt; &#xA;     &lt;li&gt;Easily automate your custom testing approach with our simple YAML DSL.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;Please check our other open-source projects that might fit into your bug bounty workflow: &lt;a href=&#34;http://github.com/projectdiscovery&#34;&gt;github.com/projectdiscovery&lt;/a&gt;, we also host daily &lt;a href=&#34;http://chaos.projectdiscovery.io&#34;&gt;refresh of DNS data at Chaos&lt;/a&gt;.&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;strong&gt;For Penetration Testers:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Nuclei immensely improve how you approach security assessment by augmenting the manual, repetitive processes. Consultancies are already converting their manual assessment steps with Nuclei, it allows them to run set of their custom assessment approach across thousands of hosts in an automated manner.&lt;/p&gt; &lt;p&gt;Pen-testers get the full power of our public templates and customization capabilities to speed up their assessment process, and specifically with the regression cycle where you can easily verify the fix.&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Easily create your compliance, standards suite (e.g. OWASP Top 10) checklist.&lt;/li&gt; &#xA;     &lt;li&gt;With capabilities like &lt;a href=&#34;https://nuclei.projectdiscovery.io/templating-guide/#advance-fuzzing&#34;&gt;fuzz&lt;/a&gt; and &lt;a href=&#34;https://nuclei.projectdiscovery.io/templating-guide/#workflows&#34;&gt;workflows&lt;/a&gt;, complex manual steps and repetitive assessment can be easily automated with Nuclei.&lt;/li&gt; &#xA;     &lt;li&gt;Easy to re-test vulnerability-fix by just re-running the template.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h1&gt;For Developers and Organisations&lt;/h1&gt; &#xA;&lt;p&gt;Nuclei is built with simplicity in mind, with the community backed templates by hundreds of security researchers, it allows you to stay updated with the latest security threats using continuous Nuclei scanning on the hosts. It is designed to be easily integrated into regression tests cycle, to verify the fixes and eliminate vulnerabilities from occurring in the future.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;CI/CD:&lt;/strong&gt; Engineers are already utilising Nuclei within their CI/CD pipeline, it allows them to constantly monitor their staging and production environments with customised templates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Continuous Regression Cycle:&lt;/strong&gt; With Nuclei, you can create your custom template on every new identified vulnerability and put into Nuclei engine to eliminate in the continuous regression cycle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/discussions/693&#34;&gt;a discussion thread around this&lt;/a&gt;, there are already some bug bounty programs giving incentives to hackers on writing nuclei templates with every submission, that helps them to eliminate the vulnerability across all their assets, as well as to eliminate future risk in reappearing on productions. If you&#39;re interested in implementing it in your organisation, feel free to &lt;a href=&#34;mailto:contact@projectdiscovery.io&#34;&gt;reach out to us&lt;/a&gt;. We will be more than happy to help you in the getting started process, or you can also post into the &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/discussions/693&#34;&gt;discussion thread for any help&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/static/regression-with-nuclei.jpg&#34; alt=&#34;regression-cycle-with-nuclei&#34; width=&#34;1100px&#34;&gt; &lt;/h3&gt; &#xA;&lt;h1 align=&#34;left&#34;&gt; &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-action&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/static/learn-more-button.png&#34; width=&#34;170px&#34; alt=&#34;Learn More&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ewP0xVPW-Pk&#34;&gt;Finding bugs with Nuclei with PinkDraconian (Robbe Van Roey)&lt;/a&gt; by &lt;strong&gt;&lt;a href=&#34;https://twitter.com/PinkDraconian&#34;&gt;@PinkDraconian&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bishopfox.com/blog/nuclei-vulnerability-scan&#34;&gt;Nuclei: Packing a Punch with Vulnerability Scanning&lt;/a&gt; by &lt;strong&gt;Bishopfox&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.fastly.com/blog/the-waf-efficacy-framework-measuring-the-effectiveness-of-your-waf&#34;&gt;The WAF efficacy framework&lt;/a&gt; by &lt;strong&gt;Fastly&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.escape.tech/devsecops-part-iii-scanning-live-web-applications/&#34;&gt;Scanning Live Web Applications with Nuclei in CI/CD Pipeline&lt;/a&gt; by &lt;strong&gt;&lt;a href=&#34;https://twitter.com/TristanKalos&#34;&gt;@TristanKalos&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.projectdiscovery.io/community-powered-scanning-with-nuclei/&#34;&gt;Community Powered Scanning with Nuclei&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.projectdiscovery.io/nuclei-unleashed-quickly-write-complex-exploits/&#34;&gt;Nuclei Unleashed - Quickly write complex exploits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.projectdiscovery.io/nuclei-fuzz-all-the-things/&#34;&gt;Nuclei - Fuzz all the things&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.projectdiscovery.io/nuclei-interactsh-integration/&#34;&gt;Nuclei + Interactsh Integration for Automating OOB Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@dwisiswant0/weaponizes-nuclei-workflows-to-pwn-all-the-things-cd01223feb77&#34;&gt;Weaponizes nuclei Workflows to Pwn All the Things&lt;/a&gt; by &lt;strong&gt;&lt;a href=&#34;https://github.com/dwisiswant0&#34;&gt;@dwisiswant0&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@dwisiswant0/how-to-scan-continuously-with-nuclei-fcb7e9d8b8b9&#34;&gt;How to Scan Continuously with Nuclei?&lt;/a&gt; by &lt;strong&gt;&lt;a href=&#34;https://github.com/dwisiswant0&#34;&gt;@dwisiswant0&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dhiyaneshgeek.github.io/web/security/2021/07/19/hack-with-automation/&#34;&gt;Hack with Automation !!!&lt;/a&gt; by &lt;strong&gt;&lt;a href=&#34;https://github.com/DhiyaneshGeek&#34;&gt;@DhiyaneshGeek&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to all the amazing community &lt;a href=&#34;https://github.com/projectdiscovery/nuclei/graphs/contributors&#34;&gt;contributors for sending PRs&lt;/a&gt;. Do also check out the below similar open-source projects that may fit in your workflow:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf&#34;&gt;FFuF&lt;/a&gt;, &lt;a href=&#34;https://github.com/ameenmaali/qsfuzz&#34;&gt;Qsfuzz&lt;/a&gt;, &lt;a href=&#34;https://github.com/proabiral/inception&#34;&gt;Inception&lt;/a&gt;, &lt;a href=&#34;https://github.com/hannob/snallygaster&#34;&gt;Snallygaster&lt;/a&gt;, &lt;a href=&#34;https://github.com/Static-Flow/gofingerprint&#34;&gt;Gofingerprint&lt;/a&gt;, &lt;a href=&#34;https://github.com/1N3/Sn1per/tree/master/templates&#34;&gt;Sn1per&lt;/a&gt;, &lt;a href=&#34;https://github.com/google/tsunami-security-scanner&#34;&gt;Google tsunami&lt;/a&gt;, &lt;a href=&#34;https://github.com/jaeles-project/jaeles&#34;&gt;Jaeles&lt;/a&gt;, &lt;a href=&#34;https://github.com/michelin/ChopChop&#34;&gt;ChopChop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Nuclei is distributed under &lt;a href=&#34;https://github.com/projectdiscovery/nuclei/raw/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;left&#34;&gt; &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/static/Join-Discord.png&#34; width=&#34;380&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nuclei.projectdiscovery.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei/master/static/check-nuclei-documentation.png&#34; width=&#34;380&#34; alt=&#34;Check Nuclei Documentation&#34;&gt;&lt;/a&gt; &lt;/h1&gt;</summary>
  </entry>
</feed>