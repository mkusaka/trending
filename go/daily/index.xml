<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-11T01:28:19Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>intigriti/misconfig-mapper</title>
    <updated>2024-05-11T01:28:19Z</updated>
    <id>tag:github.com,2024-05-11:/intigriti/misconfig-mapper</id>
    <link href="https://github.com/intigriti/misconfig-mapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Misconfig Mapper is a fast tool to help you uncover security misconfigurations on popular third-party services used by your company and/or bug bounty targets!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Misconfig Mapper&lt;/h1&gt; &#xA;&lt;p&gt;Misconfig Mapper is a project by Intigriti for the community to help you find, detect and resolve common security misconfigurations in various popular services, technologies and SaaS-based solutions that your targets use!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/.github/assets/images/logo.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;CLI Tool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Misconfig Mapper&lt;/strong&gt; has a &lt;a href=&#34;https://github.com/intigriti/misconfig-mapper&#34;&gt;dedicated open-source CLI tool&lt;/a&gt; written in Golang to help you automate the testing of most misconfigurations found on covered services.&lt;br&gt; &lt;br&gt; It can identify and enumerate instances of services used by your company, and perform detection and misconfiguration checks at scale! By supplying a template with detection fingerprints and misconfiguration check fingerprints, the tool can quickly and accurately identify potential security risks in popular third-party software and services!&lt;br&gt; &lt;br&gt; The tool is based on templates and is versatile. New services can be easily added by adding them to the &lt;code&gt;services.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The CLI tool is based on templates defined in the &lt;code&gt;services.json&lt;/code&gt; file. You can add as many as you want. See &lt;a href=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/cli-tool.md#templates&#34;&gt;&lt;em&gt;Templates section&lt;/em&gt;&lt;/a&gt; for more information on how to add a template.&lt;/li&gt; &#xA; &lt;li&gt;If you provide a company name, the tool will automatically generate permutations based on the keyword you provided and try to find any matching services.&lt;/li&gt; &#xA; &lt;li&gt;You can also optionally select to only detect the presence of services without performing any misconfiguration checks (see more on &lt;a href=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/cli-tool.md#usage&#34;&gt;&lt;em&gt;Usage section&lt;/em&gt;&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;To install Misconfig Mapper, you can clone the repository and compile the code from source or &lt;a href=&#34;https://github.com/intigriti/misconfig-mapper/releases&#34;&gt;download the latest release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] If you decide to download a release, make sure to run the following command to install the required templates:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;./misconfig-mapper -update-templates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This command will ensure that you download the latest templates that misconfig-mapper requires.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;If you want to build your own instance from source, ensure you have the latest version of Golang installed. To verify your installation, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go version&#xA;  go version go1.21.5 linux/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/intigriti/misconfig-mapper.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Next, compile your binary from source:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go build -o misconfig-mapper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Finally, add or move the binary to a folder in your &lt;code&gt;$PATH&lt;/code&gt; (optional)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;CLI Auto-Completion&lt;/h3&gt; &#xA;&lt;p&gt;In case you would like to enable autocompletions for Misconfig Mapper, we support both Bash and ZSH.&lt;/p&gt; &#xA;&lt;h4&gt;Bash&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;_misconfig_mapper_autocomplete()&#xA;{&#xA;    local cur prev opts&#xA;    COMPREPLY=()&#xA;    cur=&#34;${COMP_WORDS[COMP_CWORD]}&#34;&#xA;    prev=&#34;${COMP_WORDS[COMP_CWORD-1]}&#34;&#xA;    opts=&#34;-target -service -permutations -skip-misconfiguration-checks -list-services -max-redirects -headers -delay -timeout -verbose&#34;&#xA;&#xA;    if [[ ${cur} == -* ]] ; then&#xA;        COMPREPLY=( $(compgen -W &#34;${opts}&#34; -- ${cur}) )&#xA;        return 0&#xA;    fi&#xA;}&#xA;&#xA;complete -F _misconfig_mapper_autocomplete misconfig-mapper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ZSH (OhMyZsh)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-zsh&#34;&gt;#!/bin/zsh&#xA;#compdef misconfig-mapper&#xA;&#xA;_auto_completion_misconfig_mapper() {&#xA;    local -a options=(&#34;-target&#34; &#34;-service&#34; &#34;-permutations&#34; &#34;-skip-misconfiguration-checks&#34; &#34;-list-services&#34; &#34;-max-redirects&#34; &#34;-headers&#34; &#34;-delay&#34; &#34;-timeout&#34; &#34;-verbose&#34;)&#xA;&#xA;    _arguments \&#xA;        &#39;*: :-&amp;gt;args&#39; \&#xA;        &#34;*: :(${(j:|:)options})&#34;&#xA;&#xA;    case $state in&#xA;        (args)&#xA;            # Handle arguments completion here&#xA;            ;;&#xA;        (*)&#xA;            # Handle options completion here&#xA;            compadd -a options&#xA;            ;;&#xA;    esac&#xA;}&#xA;&#xA;_auto_completion_misconfig_mapper &#34;$@&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Make sure to save this file as &lt;code&gt;_auto_completion_misconfig_mapper&lt;/code&gt; under your &lt;code&gt;$fpath&lt;/code&gt;. Afterwards, you will have to initialize the completion system with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;autoload -U compinit&#xA;compinit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; Perform a scan to enumerate all misconfigured third-party services&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-basic&#34;&gt;$ ./misconfig-mapper -target &#34;yourcompanyname&#34; -service 1 -delay 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/.github/assets/images/example_1.png&#34; alt=&#34;Example 1&#34; title=&#34;Example 1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; Perform a detection-only scan to enumerate all third-party services (without checking for any misconfigurations)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./misconfig-mapper -target &#34;yourcompanyname&#34; -service 1 -skip-misconfiguration-checks true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/.github/assets/images/example_2.png&#34; alt=&#34;Example 2&#34; title=&#34;Example 2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; Only test for one specific service (by ID or name)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./misconfig-mapper -target &#34;yourcompanyname&#34; -service 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./misconfig-mapper -target &#34;yourcompanyname&#34; -service &#34;drupal&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/.github/assets/images/example_3.png&#34; alt=&#34;Example 3&#34; title=&#34;Example 3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 4:&lt;/strong&gt; Print out all loaded services&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./misconfig-mapper -list-services&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/.github/assets/images/example_4.png&#34; alt=&#34;Example 4&#34; title=&#34;Example 4&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can pass request headers using the &lt;code&gt;-headers&lt;/code&gt; flag to comply with any request requirements (separate each header using a &lt;strong&gt;double semi-colon&lt;/strong&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-headers &#34;User-Agent: xyz;; Cookie: session=eyJ...;;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage of ./misconfig-mapper:&#xA;  -delay int&#xA;    &#x9;Specify a delay between each request sent in milliseconds to enforce a rate limit.&#xA;  -headers string&#xA;    &#x9;Specify request headers to send with requests (separate each header with a double semi-colon: &#34;User-Agent: xyz;; Cookie: xyz...;;&#34;)&#xA;  -list-services&#xA;    &#x9;Print all services with their associated IDs&#xA;  -max-redirects int&#xA;    &#x9;Specify the max amount of redirects to follow. (default 5)&#xA;  -permutations string&#xA;    &#x9;Enable permutations and look for several other keywords of your target. (default &#34;true&#34;)&#xA;  -service string&#xA;    &#x9;Specify the service ID you&#39;d like to check for: &#34;0&#34; for Atlassian Jira Open Signups. Wildcards are also accepted to check for all services. (default &#34;0&#34;)&#xA;  -skip-misconfiguration-checks string&#xA;    &#x9;Only check for existing instances (and skip checks for potential security misconfigurations).&#xA;  -target string&#xA;    &#x9;Specify your target domain name or company/organization name: &#34;intigriti.com&#34; or &#34;intigriti&#34; (files are also accepted)&#xA;  -timeout int&#xA;    &#x9;Specify a timeout for each request sent in milliseconds. (default 7000)&#xA;  -update-templates&#xA;    &#x9;Pull the latest templates &amp;amp; update your current services.json file&#xA;  -verbose&#xA;    &#x9;Print verbose messages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Templates&lt;/h1&gt; &#xA;&lt;p&gt;You can easily define more templates to scan for. Templates are in a structured JSON object and read from &lt;code&gt;services.json&lt;/code&gt;&lt;br&gt; &lt;br&gt; To define more services, edit the services.json file and separate each misconfiguration in your &lt;code&gt;services.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;An example template definition schema is available &lt;a href=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/.github/assets/template-schema.json&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] To update the service.json file to the latest version, simply run:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;./misconfig-mapper -update-templates&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This command will pull the latest templates from Github.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Template Type Definitions&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;ID&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; number&lt;br&gt; &lt;br&gt; The &lt;code&gt;id&lt;/code&gt; field is used to identify the service when the &lt;code&gt;-service&lt;/code&gt; flag is provided. It should be a numerical value that follows the sequence of previous IDs.&lt;/p&gt; &#xA;&lt;h2&gt;Request&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Method&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;method&lt;/code&gt; field is used to provide a HTTP method.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;BaseURL&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;baseURL&lt;/code&gt; field is used to locate the third-party service, if it exists.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] The CLI tool can auto-detect and replace the &lt;strong&gt;&#34;{TARGET}&#34;&lt;/strong&gt; template variable with the target provided using the target flag.&lt;br&gt; &lt;br&gt; Example: https://{TARGET}.example.com will allow the tool to look for:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://yourcompanyname.example.com&#34;&gt;https://yourcompanyname.example.com&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://yourcompanyname-app.example.com&#34;&gt;https://yourcompanyname-app.example.com&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://yourcompanyname-eu.example.com&#34;&gt;https://yourcompanyname-eu.example.com&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;...&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Path&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; field checks whether the service is vulnerable by observing the response.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] The CLI tool can auto-detect and replace the &lt;strong&gt;&#34;{TARGET}&#34;&lt;/strong&gt; template variable with the target provided using the target flag.&lt;br&gt; &lt;br&gt; Example: /app/{TARGET} will allow the tool to look for:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://example.com/app/yourcompanyname&#34;&gt;https://example.com/app/yourcompanyname&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://example.com/app/yourcompanyname-app&#34;&gt;https://example.com/app/yourcompanyname-app&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://example.com/app/yourcompanyname-eu&#34;&gt;https://example.com/app/yourcompanyname-eu&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;...&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Headers&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; object array&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;headers&lt;/code&gt; field is used to supply any required request headers.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Body&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string | null&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;body&lt;/code&gt; field is used to supply a raw request body.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Set the request body to &lt;strong&gt;null&lt;/strong&gt; if there&#39;s no need to send a request body.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Response&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;StatusCode&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; int&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;statusCode&lt;/code&gt; field is used to validate the matching response status code and further minimize the chances of false positive results.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Detection Fingerprints&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string array&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;detectionFingerprints&lt;/code&gt; field supports enumeration &amp;amp; validation of a third-party service for your target. These fingerprints are used to mark the detection of a service or instance. Make sure to define strict regex patterns or keywords to minimize the chances of false positive results.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Regex patterns are supported!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Fingerprints&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string array&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;fingerprints&lt;/code&gt; field is used to validate the existence of a misconfigured third-party service for your target. Make sure to define strict regex patterns or keywords to minimize the chances of false positive results.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Regex patterns are supported!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Metadata&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Service&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;service&lt;/code&gt; field is used to display the service name in the CLI output results to visually confirm which service is currently being scanned.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;description&lt;/code&gt; field displays the service description in the CLI output once a service has been enumerated or identified and confirmed vulnerable.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Reproduction Steps&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string array&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;reproductionSteps&lt;/code&gt; field reports back on how to reproduce the found misconfiguration. These steps are derived from this documentation.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Each step should be in a separate array entry. You can specify as many steps as you&#39;d like to.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Type:&lt;/strong&gt; string array&lt;/p&gt; &#xA;&lt;p&gt;The&#39; references&#39; field documents enumerated and misconfigured services. These references are derived from this documentation.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Each reference should be in a separate array entry. You can specify as many references as you&#39;d like to.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Contributions&lt;/h1&gt; &#xA;&lt;p&gt;Misconfig Mapper is open-source and made for the community! We encourage you to contribute to the project! Please see the &lt;a href=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/CONTRIBUTING.md&#34;&gt;Contributing guideline&lt;/a&gt; on how to contribute and further improve Misconfig Mapper!&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed and available under the &lt;a href=&#34;https://raw.githubusercontent.com/intigriti/misconfig-mapper/main/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aurora-develop/Duck2api</title>
    <updated>2024-05-11T01:28:19Z</updated>
    <id>tag:github.com,2024-05-11:/aurora-develop/Duck2api</id>
    <link href="https://github.com/aurora-develop/Duck2api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;duck2api&lt;/h1&gt; &#xA;&lt;h1&gt;交流群&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/aurora_develop&#34;&gt;https://t.me/aurora_develop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Web端&lt;/h1&gt; &#xA;&lt;p&gt;访问&lt;a href=&#34;http://%E4%BD%A0%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8ip:8080/web&#34;&gt;http://你的服务器ip:8080/web&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://jsd.cdn.zzko.cn/gh/xiaozhou26/tuph@main/images/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-04-07%20111706.png&#34; alt=&#34;web使用&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Deploy&lt;/h2&gt; &#xA;&lt;h3&gt;Render部署&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://render.com/deploy&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;编译部署&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/aurora-develop/duck2api&#xA;cd duck2api&#xA;go build -o duck2api&#xA;chmod +x ./duck2api&#xA;./duck2api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker部署&lt;/h3&gt; &#xA;&lt;h2&gt;Docker部署&lt;/h2&gt; &#xA;&lt;p&gt;您需要安装Docker和Docker Compose。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -d \&#xA;  --name duck2api \&#xA;  -p 8080:8080 \&#xA;  ghcr.io/aurora-develop/duck2api:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker Compose部署&lt;/h2&gt; &#xA;&lt;p&gt;创建一个新的目录，例如duck2api，并进入该目录：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir duck2api&#xA;cd duck2api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在此目录中下载库中的docker-compose.yml文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location &#39;http://你的服务器ip:8080/v1/chat/completions&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data &#39;{&#xA;     &#34;model&#34;: &#34;gpt-3.5-turbo&#34;,&#xA;     &#34;messages&#34;: [{&#34;role&#34;: &#34;user&#34;, &#34;content&#34;: &#34;Say this is a test!&#34;}],&#xA;     &#34;stream&#34;: true&#xA;   }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;支持claude和gpt-3.5-turbo&lt;/p&gt; &#xA;&lt;h2&gt;高级设置&lt;/h2&gt; &#xA;&lt;p&gt;默认情况不需要设置，除非你有需求&lt;/p&gt; &#xA;&lt;h3&gt;环境变量&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Authorization=your_authorization  用户认证 key。&#xA;TLS_CERT=path_to_your_tls_cert 存储TLS（传输层安全协议）证书的路径。&#xA;TLS_KEY=path_to_your_tls_key 存储TLS（传输层安全协议）证书的路径。&#xA;PROXY_URL=your_proxy_url 添加代理池来。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢各位大佬的pr支持，感谢。&lt;/p&gt; &#xA;&lt;h2&gt;参考项目&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/xqdoo00o/ChatGPT-to-API&#34;&gt;https://github.com/xqdoo00o/ChatGPT-to-API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>context-labs/mactop</title>
    <updated>2024-05-11T01:28:19Z</updated>
    <id>tag:github.com,2024-05-11:/context-labs/mactop</id>
    <link href="https://github.com/context-labs/mactop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mactop - Apple Silicon Monitor Top written in pure Go Lang! Under 1,000 lines of code.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mactop&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/context-labs/mactop/total&#34; alt=&#34;GitHub Downloads (all assets, all releases)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/context-labs/mactop&#34; alt=&#34;GitHub Release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mactop&lt;/code&gt; is a terminal-based monitoring tool &#34;top&#34; designed to display real-time metrics for Apple Silicon chips. It provides a simple and efficient way to monitor CPU and GPU usage, E-Cores and P-Cores, power consumption, and other system metrics directly from your terminal!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/context-labs/mactop/main/screenshot2.png&#34; alt=&#34;mactop&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple Silicon Only (ARM64)&lt;/li&gt; &#xA; &lt;li&gt;macOS Monterey 12.3+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apple Silicon Monitor Top written in Go Lang (Under 1,000 lines of code)&lt;/li&gt; &#xA; &lt;li&gt;Real-time CPU and GPU power usage display.&lt;/li&gt; &#xA; &lt;li&gt;Detailed metrics for different CPU clusters (E-Cores and P-Cores).&lt;/li&gt; &#xA; &lt;li&gt;Memory usage and swap information.&lt;/li&gt; &#xA; &lt;li&gt;Network usage information&lt;/li&gt; &#xA; &lt;li&gt;Disk Activity Read/Write&lt;/li&gt; &#xA; &lt;li&gt;Easy-to-read terminal UI&lt;/li&gt; &#xA; &lt;li&gt;Two layouts: default and alternative&lt;/li&gt; &#xA; &lt;li&gt;Customizable UI color (green, red, blue, cyan, magenta, yellow, and white)&lt;/li&gt; &#xA; &lt;li&gt;Customizable update interval (default is 1000ms)&lt;/li&gt; &#xA; &lt;li&gt;Support for all Apple Silicon models.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install via Homebrew&lt;/h2&gt; &#xA;&lt;p&gt;Help get us on the official Homebrew formulas by giving us a star and watching this repo! &lt;a href=&#34;https://github.com/context-labs/mactop&#34;&gt;mactop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap context-labs/mactop https://github.com/context-labs/mactop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install mactop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mactop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating via Homebrew&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew upgrade mactop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install &lt;code&gt;mactop&lt;/code&gt;, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you have Go installed on your machine. If not, you can install it by following the instructions here: &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go Installation Guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/context-labs/mactop.git&#xA;cd mactop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./mactop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After installation, you can start &lt;code&gt;mactop&lt;/code&gt; by simply running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ./mactop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo&lt;/code&gt; is required to run &lt;code&gt;mactop&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example with flags&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo mactop --interval 1000 --color green&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;mactop Flags&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--interval&lt;/code&gt; or &lt;code&gt;-i&lt;/code&gt;: Set the powermetrics update interval in milliseconds. Default is 1000. (For low-end M chips, you may want to increase this value)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--color&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt;: Set the UI color. Default is white. Options are &#39;green&#39;, &#39;red&#39;, &#39;blue&#39;, &#39;cyan&#39;, &#39;magenta&#39;, &#39;yellow&#39;, and &#39;white&#39;. (-c green)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt;: Print the version of mactop.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--help&lt;/code&gt; or &lt;code&gt;-h&lt;/code&gt;: Show a help message about these flags and how to run mactop.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;mactop Commands&lt;/h2&gt; &#xA;&lt;p&gt;Use the following keys to interact with the application while its running:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;q&lt;/code&gt;: Quit the application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r&lt;/code&gt;: Refresh the UI data manually.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;l&lt;/code&gt;: Toggle the current layout.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Theme (Green) Screenshot (sudo mactop -c green)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/context-labs/mactop/main/screenshot3.png&#34; alt=&#34;mactop theme&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Confirmed tested working M series chips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;M1&lt;/li&gt; &#xA; &lt;li&gt;M1 Max&lt;/li&gt; &#xA; &lt;li&gt;M1 Ultra&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(If you have a confirmed working M series chip that is not listed, please open an issue!)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open-source community such an amazing place to learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork mactop&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;What does mactop use to get real-time data?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sysctl&lt;/code&gt;: For CPU model information&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;system_profiler&lt;/code&gt;: For GPU Core Count&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;psutil&lt;/code&gt;: For memory and swap metrics&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;powermetrics&lt;/code&gt;: For majority of CPU, GPU, Network, and Disk metrics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See &lt;code&gt;LICENSE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Carsen Klock - &lt;a href=&#34;https://twitter.com/carsenklock&#34;&gt;@carsenklock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/context-labs/mactop&#34;&gt;https://github.com/context-labs/mactop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool is not officially supported by Apple. It is provided as is, and may not work as expected. Use at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gizak/termui&#34;&gt;termui&lt;/a&gt; for the terminal UI framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shirou/gopsutil&#34;&gt;gopsutil&lt;/a&gt; for system memory monitoring.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tlkh/asitop&#34;&gt;asitop&lt;/a&gt; for the original inspiration!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>