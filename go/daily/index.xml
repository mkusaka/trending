<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-24T01:34:28Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>panjf2000/ants</title>
    <updated>2022-09-24T01:34:28Z</updated>
    <id>tag:github.com,2022-09-24:/panjf2000/ants</id>
    <link href="https://github.com/panjf2000/ants" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üêúüêúüêú ants is a high-performance and low-cost goroutine pool in Go, inspired by fasthttp./ ants ÊòØ‰∏Ä‰∏™È´òÊÄßËÉΩ‰∏î‰ΩéÊçüËÄóÁöÑ goroutine Ê±†„ÄÇ&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/logos/master/ants/logo.png&#34;&gt; &lt;b&gt;A goroutine pool for Go&lt;/b&gt; &lt;br&gt;&lt;br&gt; &lt;a title=&#34;Build Status&#34; target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/ants/actions?query=workflow%3ATests&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/panjf2000/ants/Tests?style=flat-square&amp;amp;logo=github-actions&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Codecov&#34; target=&#34;_blank&#34; href=&#34;https://codecov.io/gh/panjf2000/ants&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/panjf2000/ants?style=flat-square&amp;amp;logo=codecov&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Release&#34; target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/ants/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/panjf2000/ants.svg?color=161823&amp;amp;style=flat-square&amp;amp;logo=smartthings&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Tag&#34; target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/ants/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/panjf2000/ants?color=%23ff8936&amp;amp;logo=fitbit&amp;amp;style=flat-square&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a title=&#34;Chat Room&#34; target=&#34;_blank&#34; href=&#34;https://gitter.im/ants-pool/ants?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=body_badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/ants-pool/ants.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Go Report Card&#34; target=&#34;_blank&#34; href=&#34;https://goreportcard.com/report/github.com/panjf2000/ants&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/panjf2000/ants?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Doc for ants&#34; target=&#34;_blank&#34; href=&#34;https://pkg.go.dev/github.com/panjf2000/ants/v2?tab=doc&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-doc-007d9c?style=flat-square&amp;amp;logo=read-the-docs&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Mentioned in Awesome Go&#34; target=&#34;_blank&#34; href=&#34;https://github.com/avelino/awesome-go#goroutines&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge-flat.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/panjf2000/ants/master/README_ZH.md&#34;&gt;‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Library &lt;code&gt;ants&lt;/code&gt; implements a goroutine pool with fixed capacity, managing and recycling a massive number of goroutines, allowing developers to limit the number of goroutines in your concurrent programs.&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Managing and recycling a massive number of goroutines automatically&lt;/li&gt; &#xA; &lt;li&gt;Purging overdue goroutines periodically&lt;/li&gt; &#xA; &lt;li&gt;Abundant APIs: submitting tasks, getting the number of running goroutines, tuning capacity of pool dynamically, releasing pool, rebooting pool&lt;/li&gt; &#xA; &lt;li&gt;Handle panic gracefully to prevent programs from crash&lt;/li&gt; &#xA; &lt;li&gt;Efficient&amp;nbsp;in&amp;nbsp;memory&amp;nbsp;usage and it even achieves&amp;nbsp;&lt;a href=&#34;https://raw.githubusercontent.com/panjf2000/ants/master/#-performance-summary&#34;&gt;higher performance&lt;/a&gt;&amp;nbsp;than unlimited goroutines in Golang&lt;/li&gt; &#xA; &lt;li&gt;Nonblocking mechanism&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚öîÔ∏è Tested in the following Golang releases:&lt;/h2&gt; &#xA;&lt;p&gt;All releases from &lt;strong&gt;Go1.8.x&lt;/strong&gt; to &lt;strong&gt;Go1.18.x&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üí° How &lt;code&gt;ants&lt;/code&gt; works&lt;/h2&gt; &#xA;&lt;h3&gt;Flow Diagram&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;1011&#34; alt=&#34;ants-flowchart-en&#34; src=&#34;https://user-images.githubusercontent.com/7496278/66396509-7b42e700-ea0c-11e9-8612-b71a4b734683.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Activity Diagrams&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/go/ants-pool-1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/go/ants-pool-2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/go/ants-pool-3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/go/ants-pool-4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üß∞ How to install&lt;/h2&gt; &#xA;&lt;h3&gt;For &lt;code&gt;ants&lt;/code&gt; v1&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;go get -u github.com/panjf2000/ants&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For &lt;code&gt;ants&lt;/code&gt; v2 (with GO111MODULE=on)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;go get -u github.com/panjf2000/ants/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üõ† How to use&lt;/h2&gt; &#xA;&lt;p&gt;Just take a imagination that your program starts a massive number of goroutines, resulting in a huge consumption of memory. To mitigate that kind of situation, all you need to do is to import &lt;code&gt;ants&lt;/code&gt; package and submit all your tasks to a default pool with fixed capacity, activated when package &lt;code&gt;ants&lt;/code&gt; is imported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;sync&#34;&#xA;&#x9;&#34;sync/atomic&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/panjf2000/ants/v2&#34;&#xA;)&#xA;&#xA;var sum int32&#xA;&#xA;func myFunc(i interface{}) {&#xA;&#x9;n := i.(int32)&#xA;&#x9;atomic.AddInt32(&amp;amp;sum, n)&#xA;&#x9;fmt.Printf(&#34;run with %d\n&#34;, n)&#xA;}&#xA;&#xA;func demoFunc() {&#xA;&#x9;time.Sleep(10 * time.Millisecond)&#xA;&#x9;fmt.Println(&#34;Hello World!&#34;)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;defer ants.Release()&#xA;&#xA;&#x9;runTimes := 1000&#xA;&#xA;&#x9;// Use the common pool.&#xA;&#x9;var wg sync.WaitGroup&#xA;&#x9;syncCalculateSum := func() {&#xA;&#x9;&#x9;demoFunc()&#xA;&#x9;&#x9;wg.Done()&#xA;&#x9;}&#xA;&#x9;for i := 0; i &amp;lt; runTimes; i++ {&#xA;&#x9;&#x9;wg.Add(1)&#xA;&#x9;&#x9;_ = ants.Submit(syncCalculateSum)&#xA;&#x9;}&#xA;&#x9;wg.Wait()&#xA;&#x9;fmt.Printf(&#34;running goroutines: %d\n&#34;, ants.Running())&#xA;&#x9;fmt.Printf(&#34;finish all tasks.\n&#34;)&#xA;&#xA;&#x9;// Use the pool with a function,&#xA;&#x9;// set 10 to the capacity of goroutine pool and 1 second for expired duration.&#xA;&#x9;p, _ := ants.NewPoolWithFunc(10, func(i interface{}) {&#xA;&#x9;&#x9;myFunc(i)&#xA;&#x9;&#x9;wg.Done()&#xA;&#x9;})&#xA;&#x9;defer p.Release()&#xA;&#x9;// Submit tasks one by one.&#xA;&#x9;for i := 0; i &amp;lt; runTimes; i++ {&#xA;&#x9;&#x9;wg.Add(1)&#xA;&#x9;&#x9;_ = p.Invoke(int32(i))&#xA;&#x9;}&#xA;&#x9;wg.Wait()&#xA;&#x9;fmt.Printf(&#34;running goroutines: %d\n&#34;, p.Running())&#xA;&#x9;fmt.Printf(&#34;finish all tasks, result is %d\n&#34;, sum)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Functional options for ants pool&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Option represents the optional function.&#xA;type Option func(opts *Options)&#xA;&#xA;// Options contains all options which will be applied when instantiating a ants pool.&#xA;type Options struct {&#xA;&#x9;// ExpiryDuration is a period for the scavenger goroutine to clean up those expired workers,&#xA;&#x9;// the scavenger scans all workers every `ExpiryDuration` and clean up those workers that haven&#39;t been&#xA;&#x9;// used for more than `ExpiryDuration`.&#xA;&#x9;ExpiryDuration time.Duration&#xA;&#xA;&#x9;// PreAlloc indicates whether to make memory pre-allocation when initializing Pool.&#xA;&#x9;PreAlloc bool&#xA;&#xA;&#x9;// Max number of goroutine blocking on pool.Submit.&#xA;&#x9;// 0 (default value) means no such limit.&#xA;&#x9;MaxBlockingTasks int&#xA;&#xA;&#x9;// When Nonblocking is true, Pool.Submit will never be blocked.&#xA;&#x9;// ErrPoolOverload will be returned when Pool.Submit cannot be done at once.&#xA;&#x9;// When Nonblocking is true, MaxBlockingTasks is inoperative.&#xA;&#x9;Nonblocking bool&#xA;&#xA;&#x9;// PanicHandler is used to handle panics from each worker goroutine.&#xA;&#x9;// if nil, panics will be thrown out again from worker goroutines.&#xA;&#x9;PanicHandler func(interface{})&#xA;&#xA;&#x9;// Logger is the customized logger for logging info, if it is not set,&#xA;&#x9;// default standard logger from log package is used.&#xA;&#x9;Logger Logger&#xA;}&#xA;&#xA;// WithOptions accepts the whole options config.&#xA;func WithOptions(options Options) Option {&#xA;&#x9;return func(opts *Options) {&#xA;&#x9;&#x9;*opts = options&#xA;&#x9;}&#xA;}&#xA;&#xA;// WithExpiryDuration sets up the interval time of cleaning up goroutines.&#xA;func WithExpiryDuration(expiryDuration time.Duration) Option {&#xA;&#x9;return func(opts *Options) {&#xA;&#x9;&#x9;opts.ExpiryDuration = expiryDuration&#xA;&#x9;}&#xA;}&#xA;&#xA;// WithPreAlloc indicates whether it should malloc for workers.&#xA;func WithPreAlloc(preAlloc bool) Option {&#xA;&#x9;return func(opts *Options) {&#xA;&#x9;&#x9;opts.PreAlloc = preAlloc&#xA;&#x9;}&#xA;}&#xA;&#xA;// WithMaxBlockingTasks sets up the maximum number of goroutines that are blocked when it reaches the capacity of pool.&#xA;func WithMaxBlockingTasks(maxBlockingTasks int) Option {&#xA;&#x9;return func(opts *Options) {&#xA;&#x9;&#x9;opts.MaxBlockingTasks = maxBlockingTasks&#xA;&#x9;}&#xA;}&#xA;&#xA;// WithNonblocking indicates that pool will return nil when there is no available workers.&#xA;func WithNonblocking(nonblocking bool) Option {&#xA;&#x9;return func(opts *Options) {&#xA;&#x9;&#x9;opts.Nonblocking = nonblocking&#xA;&#x9;}&#xA;}&#xA;&#xA;// WithPanicHandler sets up panic handler.&#xA;func WithPanicHandler(panicHandler func(interface{})) Option {&#xA;&#x9;return func(opts *Options) {&#xA;&#x9;&#x9;opts.PanicHandler = panicHandler&#xA;&#x9;}&#xA;}&#xA;&#xA;// WithLogger sets up a customized logger.&#xA;func WithLogger(logger Logger) Option {&#xA;&#x9;return func(opts *Options) {&#xA;&#x9;&#x9;opts.Logger = logger&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ants.Options&lt;/code&gt;contains all optional configurations of ants pool, which allows you to customize the goroutine pool by invoking option functions to set up each configuration in &lt;code&gt;NewPool&lt;/code&gt;/&lt;code&gt;NewPoolWithFunc&lt;/code&gt;method.&lt;/p&gt; &#xA;&lt;h3&gt;Customize limited pool&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ants&lt;/code&gt; also supports customizing the capacity of pool. You can invoke the &lt;code&gt;NewPool&lt;/code&gt; method to instantiate a pool with a given capacity, as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Set 10000 the size of goroutine pool&#xA;p, _ := ants.NewPool(10000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Submit tasks&lt;/h3&gt; &#xA;&lt;p&gt;Tasks can be submitted by calling &lt;code&gt;ants.Submit(func())&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ants.Submit(func(){})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tune pool capacity in runtime&lt;/h3&gt; &#xA;&lt;p&gt;You can tune the capacity of &lt;code&gt;ants&lt;/code&gt; pool in runtime with &lt;code&gt;Tune(int)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;pool.Tune(1000) // Tune its capacity to 1000&#xA;pool.Tune(100000) // Tune its capacity to 100000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t worry about the synchronous problems in this case, the method here is thread-safe (or should be called goroutine-safe).&lt;/p&gt; &#xA;&lt;h3&gt;Pre-malloc goroutine queue in pool&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ants&lt;/code&gt; allows you to pre-allocate memory of goroutine queue in pool, which may get a performance enhancement under some special certain circumstances such as the scenario that requires a pool with ultra-large capacity, meanwhile each task in goroutine lasts for a long time, in this case, pre-mallocing will reduce a lot of memory allocation in goroutine queue.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// ants will pre-malloc the whole capacity of pool when you invoke this method&#xA;p, _ := ants.NewPool(100000, ants.WithPreAlloc(true))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Release Pool&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;pool.Release()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reboot Pool&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A pool that has been released can be still used once you invoke the Reboot().&#xA;pool.Reboot()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è About sequence&lt;/h2&gt; &#xA;&lt;p&gt;All tasks submitted to &lt;code&gt;ants&lt;/code&gt; pool will not be guaranteed to be addressed in order, because those tasks scatter among a series of concurrent workers, thus those tasks would be executed concurrently.&lt;/p&gt; &#xA;&lt;h2&gt;üß≤ Benchmarks&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/7496278/51515466-c7ce9e00-1e4e-11e9-89c4-bd3785b3c667.png&#34;&gt;&#xA;&lt;/div&gt; In this benchmark result, the first and second benchmarks performed test cases with 1M tasks and the rest of benchmarks performed test cases with 10M tasks, both in unlimited goroutines and `ants` pool, and the capacity of this `ants` goroutine-pool was limited to 50K. &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;BenchmarkGoroutine-4 represents the benchmarks with unlimited goroutines in golang.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;BenchmarkPoolGroutine-4 represents the benchmarks with a &lt;code&gt;ants&lt;/code&gt; pool.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Benchmarks with Pool&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7496278/51515499-f187c500-1e4e-11e9-80e5-3df8f94fa70f.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In above benchmark result, the first and second benchmarks performed test cases with 1M tasks and the rest of benchmarks performed test cases with 10M tasks, both in unlimited goroutines and &lt;code&gt;ants&lt;/code&gt; pool, and the capacity of this &lt;code&gt;ants&lt;/code&gt; goroutine-pool was limited to 50K.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;As you can see, &lt;code&gt;ants&lt;/code&gt; performs 2 times faster than goroutines without pool (10M tasks) and it only consumes&amp;nbsp;half the memory comparing with goroutines without pool. (both in 1M and 10M tasks)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Benchmarks with PoolWithFunc&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7496278/51515565-1e3bdc80-1e4f-11e9-8a08-452ab91d117e.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Throughput (it is suitable for scenarios where tasks are submitted asynchronously without waiting for the final results)&lt;/h3&gt; &#xA;&lt;h4&gt;100K tasks&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7496278/51515590-36abf700-1e4f-11e9-91e4-7bd3dcb5f4a5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;1M tasks&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7496278/51515596-44617c80-1e4f-11e9-89e3-01e19d2979a1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;10M tasks&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7496278/52987732-537c2000-3437-11e9-86a6-177f00d7a1d6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìä Performance Summary&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/7496278/63449727-3ae6d400-c473-11e9-81e3-8b3280d8288a.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In conclusion, &lt;code&gt;ants&lt;/code&gt; performs 2~6 times faster than goroutines without a pool and the memory consumption is&amp;nbsp;reduced&amp;nbsp;by&amp;nbsp;10&amp;nbsp;to&amp;nbsp;20&amp;nbsp;times.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üëè Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/panjf2000/ants/master/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt; before opening a PR and thank you to all the developers who already made contributions to &lt;code&gt;ants&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/panjf2000/ants/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/ants/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ License&lt;/h2&gt; &#xA;&lt;p&gt;Source code in &lt;code&gt;ants&lt;/code&gt; is available under the &lt;a href=&#34;https://raw.githubusercontent.com/panjf2000/ants/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìö Relevant Articles&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://taohuawu.club/high-performance-implementation-of-goroutine-pool&#34;&gt;Goroutine Âπ∂ÂèëË∞ÉÂ∫¶Ê®°ÂûãÊ∑±Â∫¶Ëß£Êûê‰πãÊâãÊí∏‰∏Ä‰∏™È´òÊÄßËÉΩ goroutine Ê±†&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/coinmonks/visually-understanding-worker-pool-48a83b7fc1f5&#34;&gt;Visually Understanding Worker Pool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://brandur.org/go-worker-pool&#34;&gt;The Case For A Go Worker Pool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twin.sh/articles/39/go-concurrency-goroutines-worker-pools-and-throttling-made-simple&#34;&gt;Go Concurrency - GoRoutines, Worker Pools and Throttling Made Simple&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üñ• Use cases&lt;/h2&gt; &#xA;&lt;h3&gt;business companies&lt;/h3&gt; &#xA;&lt;p&gt;The following companies/organizations use &lt;code&gt;ants&lt;/code&gt; in production.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tencent.com&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/tencent_logo.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.bytedance.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/ByteDance_Logo.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://tieba.baidu.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/baidu-tieba-logo.png&#34; width=&#34;300&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.sina.com.cn/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/sina-logo.png&#34; width=&#34;200&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.163.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/netease-logo.png&#34; width=&#34;150&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.tencentmusic.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/tencent-music-logo.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.futuhk.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/futu-logo.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.shopify.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/shopify-logo.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;https://www.wechat.com/en/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/wechat-logo.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://www.baidu.com/&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;http://img.taohuawu.club/gallery/baidu-mobile.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;open-source software&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/panjf2000/gnet&#34;&gt;gnet&lt;/a&gt;: A high-performance, lightweight, non-blocking, event-driven networking framework written in pure Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ehang-io/nps&#34;&gt;nps&lt;/a&gt;: A lightweight, high-performance, powerful intranet penetration proxy server, with a powerful web management terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/milvus-io/milvus&#34;&gt;milvus&lt;/a&gt;: An open-source vector database for scalable similarity search and AI applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/j3ssie/osmedeus&#34;&gt;osmedeus&lt;/a&gt;: A Workflow Engine for Offensive Security.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jitsucom/jitsu&#34;&gt;jitsu&lt;/a&gt;: An open-source Segment alternative. Fully-scriptable data ingestion engine for modern data teams. Set-up a real-time data pipeline in minutes, not days.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RH12503/triangula&#34;&gt;triangula&lt;/a&gt;: Generate high-quality triangulated and polygonal art from images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binance-chain/bsc&#34;&gt;bsc&lt;/a&gt;: A Binance Smart Chain client based on the go-ethereum fork.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jaeles-project/jaeles&#34;&gt;jaeles&lt;/a&gt;: The Swiss Army knife for automated Web Application Testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apache/incubator-devlake&#34;&gt;devlake&lt;/a&gt;: The open-source dev data platform &amp;amp; dashboard for your DevOps tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;All use cases:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/panjf2000/ants/network/dependents?package_id=UGFja2FnZS0yMjY2ODgxMjg2&#34;&gt;Repositories that depend on ants/v2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/panjf2000/ants/network/dependents?package_id=UGFja2FnZS0yMjY0ODMzNjEw&#34;&gt;Repositories that depend on ants/v1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;ants&lt;/code&gt; integrated into projects, feel free to open a pull request refreshing this list of use cases.&lt;/p&gt; &#xA;&lt;h2&gt;üîã JetBrains OS licenses&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ants&lt;/code&gt; had been being developed with GoLand under the &lt;strong&gt;free JetBrains Open Source license(s)&lt;/strong&gt; granted by JetBrains s.r.o., hence I would like to express my thanks here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=ants&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/jetbrains/jetbrains-variant-4.png&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üí∞ Backers&lt;/h2&gt; &#xA;&lt;p&gt;Support us with a monthly donation and help us continue our activities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ants#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ants/backers.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üíé Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Become a bronze sponsor with a monthly donation of $10 and get your logo on our README on Github.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ants#sponsors&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/ants/sponsors.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚òïÔ∏è Buy me a coffee&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please be sure to leave your name, GitHub account or other social media accounts when you donate by the following means so that I can add it to the list of donors as a token of my appreciation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/payments/WeChatPay.JPG&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/payments/AliPay.JPG&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://www.paypal.me/R136a1X&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/payments/PayPal.JPG&#34; width=&#34;250&#34; align=&#34;middle&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;üíµ Patrons&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/patrick-othmer&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/8964313&#34; width=&#34;100&#34; alt=&#34;Patrick Othmer&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/panjf2000/gnet&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/50285334&#34; width=&#34;100&#34; alt=&#34;Jimmy&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/cafra&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/13758306&#34; width=&#34;100&#34; alt=&#34;ChenZhen&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/yangwenmai&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/1710912&#34; width=&#34;100&#34; alt=&#34;Mai Yang&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/BeijingWks&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/33656339&#34; width=&#34;100&#34; alt=&#34;ÁéãÂºÄÂ∏Ö&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/refs&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/6905948&#34; width=&#34;100&#34; alt=&#34;Unger Alejandro&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=&#34;_blank&#34; href=&#34;https://github.com/Wuvist&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/657796&#34; width=&#34;100&#34; alt=&#34;Weng Wei&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üîã Sponsorship&lt;/h2&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt; &lt;img src=&#34;https://opensource.nyc3.cdn.digitaloceanspaces.com/attribution/assets/PoweredByDO/DO_Powered_by_Badge_blue.svg?sanitize=true&#34; width=&#34;201px&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elazarl/goproxy</title>
    <updated>2022-09-24T01:34:28Z</updated>
    <id>tag:github.com,2022-09-24:/elazarl/goproxy</id>
    <link href="https://github.com/elazarl/goproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An HTTP proxy library for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/elazarl/goproxy&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/elazarl/goproxy?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/elazarl/goproxy?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/elazarl/goproxy&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/elazarl/goproxy/workflows/Go/badge.svg?sanitize=true&#34; alt=&#34;Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Package goproxy provides a customizable HTTP proxy library for Go (golang),&lt;/p&gt; &#xA;&lt;p&gt;It supports regular HTTP proxy, HTTPS through CONNECT, and &#34;hijacking&#34; HTTPS connection using &#34;Man in the Middle&#34; style attack.&lt;/p&gt; &#xA;&lt;p&gt;The intent of the proxy is to be usable with reasonable amount of traffic, yet customizable and programmable.&lt;/p&gt; &#xA;&lt;p&gt;The proxy itself is simply a &lt;code&gt;net/http&lt;/code&gt; handler.&lt;/p&gt; &#xA;&lt;p&gt;In order to use goproxy, one should set their browser to use goproxy as an HTTP proxy. Here is how you do that &lt;a href=&#34;https://support.google.com/chrome/answer/96815?hl=en&#34;&gt;in Chrome&lt;/a&gt; and &lt;a href=&#34;http://www.wikihow.com/Enter-Proxy-Settings-in-Firefox&#34;&gt;in Firefox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the URL you should use as proxy when running &lt;code&gt;./bin/basic&lt;/code&gt; is &lt;code&gt;localhost:8080&lt;/code&gt;, as this is the default binding for the basic proxy.&lt;/p&gt; &#xA;&lt;h2&gt;Mailing List&lt;/h2&gt; &#xA;&lt;p&gt;New features will be discussed on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/goproxy-dev&#34;&gt;mailing list&lt;/a&gt; before their development.&lt;/p&gt; &#xA;&lt;h2&gt;Latest Stable Release&lt;/h2&gt; &#xA;&lt;p&gt;Get the latest goproxy from &lt;code&gt;gopkg.in/elazarl/goproxy.v1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Why not Fiddler2?&lt;/h1&gt; &#xA;&lt;p&gt;Fiddler is an excellent software with similar intent. However, Fiddler is not as customizable as goproxy intends to be. The main difference is, Fiddler is not intended to be used as a real proxy.&lt;/p&gt; &#xA;&lt;p&gt;A possible use case that suits goproxy but not Fiddler, is gathering statistics on page load times for a certain website over a week. With goproxy you could ask all your users to set their proxy to a dedicated machine running a goproxy server. Fiddler is a GUI app not designed to be run like a server for multiple users.&lt;/p&gt; &#xA;&lt;h1&gt;A taste of goproxy&lt;/h1&gt; &#xA;&lt;p&gt;To get a taste of &lt;code&gt;goproxy&lt;/code&gt;, a basic HTTP/HTTPS transparent proxy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/elazarl/goproxy&#34;&#xA;    &#34;log&#34;&#xA;    &#34;net/http&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    proxy := goproxy.NewProxyHttpServer()&#xA;    proxy.Verbose = true&#xA;    log.Fatal(http.ListenAndServe(&#34;:8080&#34;, proxy))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This line will add &lt;code&gt;X-GoProxy: yxorPoG-X&lt;/code&gt; header to all requests sent through the proxy&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;proxy.OnRequest().DoFunc(&#xA;    func(r *http.Request,ctx *goproxy.ProxyCtx)(*http.Request,*http.Response) {&#xA;        r.Header.Set(&#34;X-GoProxy&#34;,&#34;yxorPoG-X&#34;)&#xA;        return r,nil&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;DoFunc&lt;/code&gt; will process all incoming requests to the proxy. It will add a header to the request and return it. The proxy will send the modified request.&lt;/p&gt; &#xA;&lt;p&gt;Note that we returned nil value as the response. Had we returned a response, goproxy would have discarded the request and sent the new response to the client.&lt;/p&gt; &#xA;&lt;p&gt;In order to refuse connections to reddit at work time&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;proxy.OnRequest(goproxy.DstHostIs(&#34;www.reddit.com&#34;)).DoFunc(&#xA;    func(r *http.Request,ctx *goproxy.ProxyCtx)(*http.Request,*http.Response) {&#xA;        if h,_,_ := time.Now().Clock(); h &amp;gt;= 8 &amp;amp;&amp;amp; h &amp;lt;= 17 {&#xA;            return r,goproxy.NewResponse(r,&#xA;                    goproxy.ContentTypeText,http.StatusForbidden,&#xA;                    &#34;Don&#39;t waste your time!&#34;)&#xA;        }&#xA;        return r,nil&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;DstHostIs&lt;/code&gt; returns a &lt;code&gt;ReqCondition&lt;/code&gt;, that is a function receiving a &lt;code&gt;Request&lt;/code&gt; and returning a boolean. We will only process requests that match the condition. &lt;code&gt;DstHostIs(&#34;www.reddit.com&#34;)&lt;/code&gt; will return a &lt;code&gt;ReqCondition&lt;/code&gt; accepting only requests directed to &#34;www.reddit.com&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DoFunc&lt;/code&gt; will receive a function that will preprocess the request. We can change the request, or return a response. If the time is between 8:00am and 17:00pm, we will reject the request, and return a pre-canned text response saying &#34;do not waste your time&#34;.&lt;/p&gt; &#xA;&lt;p&gt;See additional examples in the examples directory.&lt;/p&gt; &#xA;&lt;h1&gt;Type of handlers for manipulating connect/req/resp behavior&lt;/h1&gt; &#xA;&lt;p&gt;There are 3 kinds of useful handlers to manipulate the behavior, as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// handler called after receiving HTTP CONNECT from the client, and before proxy establish connection &#xA;// with destination host&#xA;httpsHandlers   []HttpsHandler&#xA;    &#xA;// handler called before proxy send HTTP request to destination host&#xA;reqHandlers     []ReqHandler &#xA;    &#xA;// handler called after proxy receives HTTP Response from destination host, and before proxy forward &#xA;// the Response to the client.&#xA;respHandlers    []RespHandler &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on what you want to manipulate, the ways to add handlers to each handler list are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Add handlers to httpsHandlers &#xA;proxy.OnRequest(Some ReqConditions).HandleConnect(YourHandlerFunc())&#xA;&#xA;// Add handlers to reqHandlers&#xA;proxy.OnRequest(Some ReqConditions).Do(YourReqHandlerFunc())&#xA;&#xA;// Add handlers to respHandlers&#xA;proxy.OnResponse(Some RespConditions).Do(YourRespHandlerFunc())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// This rejects the HTTPS request to *.reddit.com during HTTP CONNECT phase&#xA;proxy.OnRequest(goproxy.ReqHostMatches(regexp.MustCompile(&#34;reddit.*:443$&#34;))).HandleConnect(goproxy.AlwaysReject)&#xA;&#xA;// This will NOT reject the HTTPS request with URL ending with gif, due to the fact that proxy &#xA;// only got the URL.Hostname and URL.Port during the HTTP CONNECT phase if the scheme is HTTPS, which is&#xA;// quiet common these days.&#xA;proxy.OnRequest(goproxy.UrlMatches(regexp.MustCompile(`.*gif$`))).HandleConnect(goproxy.AlwaysReject)&#xA;&#xA;// The correct way to manipulate the HTTP request using URL.Path as condition is:&#xA;proxy.OnRequest(goproxy.UrlMatches(regexp.MustCompile(`.*gif$`))).Do(YourReqHandlerFunc())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;What&#39;s New&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ability to &lt;code&gt;Hijack&lt;/code&gt; CONNECT requests. See &lt;a href=&#34;https://github.com/elazarl/goproxy/raw/master/examples/goproxy-eavesdropper/main.go#L27&#34;&gt;the eavesdropper example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Transparent proxy support for http/https including MITM certificate generation for TLS. See the &lt;a href=&#34;https://github.com/elazarl/goproxy/tree/master/examples/goproxy-transparent&#34;&gt;transparent example.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;I put the software temporarily under the Go-compatible BSD license. If this prevents someone from using the software, do let me know and I&#39;ll consider changing it.&lt;/p&gt; &#xA;&lt;p&gt;At any rate, user feedback is very important for me, so I&#39;ll be delighted to know if you&#39;re using this package.&lt;/p&gt; &#xA;&lt;h1&gt;Beta Software&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;ve received positive feedback from a few people who use goproxy in production settings. I believe it is good enough for usage.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ll try to keep reasonable backwards compatibility. In case of a major API change, I&#39;ll change the import path.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>evmos/evmos</title>
    <updated>2022-09-24T01:34:28Z</updated>
    <id>tag:github.com,2022-09-24:/evmos/evmos</id>
    <link href="https://github.com/evmos/evmos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Evmos is the Ethereum Virtual Machine (EVM) Hub on the Cosmos Network. It is the flagship implementation of the Ethermint library that prioritizes interoperability and novel economics.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; Evmos &lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/evmos/evmos/releases/latest&#34;&gt; &lt;img alt=&#34;Version&#34; src=&#34;https://img.shields.io/github/tag/tharsis/evmos.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/evmos/evmos/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;License: Apache-2.0&#34; src=&#34;https://img.shields.io/github/license/tharsis/evmos.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://pkg.go.dev/github.com/evmos/evmos&#34;&gt; &lt;img alt=&#34;GoDoc&#34; src=&#34;https://godoc.org/github.com/evmos/evmos?status.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://goreportcard.com/report/github.com/evmos/evmos&#34;&gt; &lt;img alt=&#34;Go report card&#34; src=&#34;https://goreportcard.com/badge/github.com/evmos/evmos&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/5018&#34;&gt; &lt;img alt=&#34;Lines of code&#34; src=&#34;https://img.shields.io/tokei/lines/github/tharsis/evmos&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://discord.gg/evmos&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/809048090249134080.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/evmos/evmos/actions?query=branch%3Amain+workflow%3ALint&#34;&gt; &lt;img alt=&#34;Lint Status&#34; src=&#34;https://github.com/evmos/evmos/actions/workflows/lint.yml/badge.svg?branch=main&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://codecov.io/gh/tharsis/evmos&#34;&gt; &lt;img alt=&#34;Code Coverage&#34; src=&#34;https://codecov.io/gh/tharsis/evmos/branch/main/graph/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://twitter.com/EvmosOrg&#34;&gt; &lt;img alt=&#34;Twitter Follow Evmos&#34; src=&#34;https://img.shields.io/twitter/follow/EvmosOrg&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Evmos is a scalable, high-throughput Proof-of-Stake blockchain that is fully compatible and interoperable with Ethereum. It&#39;s built using the &lt;a href=&#34;https://github.com/cosmos/cosmos-sdk/&#34;&gt;Cosmos SDK&lt;/a&gt; which runs on top of &lt;a href=&#34;https://github.com/tendermint/tendermint&#34;&gt;Tendermint Core&lt;/a&gt; consensus engine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Requires &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go 1.18+&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For prerequisites and detailed build instructions please read the &lt;a href=&#34;https://evmos.dev/validators/quickstart/installation.html&#34;&gt;Installation&lt;/a&gt; instructions. Once the dependencies are installed, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or check out the latest &lt;a href=&#34;https://github.com/evmos/evmos/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To learn how the Evmos works from a high-level perspective, go to the &lt;a href=&#34;https://evmos.dev/about/intro/overview.html&#34;&gt;Introduction&lt;/a&gt; section from the documentation. You can also check the instructions to &lt;a href=&#34;https://evmos.dev/validators/quickstart/run_node.html&#34;&gt;Run a Node&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The following chat channels and forums are a great spot to ask questions about Evmos:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/EvmosOrg&#34;&gt;Evmos Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/evmos&#34;&gt;Evmos Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://commonwealth.im/evmos&#34;&gt;Evmos Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/TharsisHQ&#34;&gt;Tharsis Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Looking for a good place to start contributing? Check out some &lt;a href=&#34;https://github.com/evmos/evmos/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&#34;&gt;&lt;code&gt;good first issues&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For additional instructions, standards and style guides, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/evmos/evmos/main/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Careers&lt;/h2&gt; &#xA;&lt;p&gt;See our open positions on &lt;a href=&#34;https://jobs.cosmos.network/project/evmos-d0sk1uxuh-remote/&#34;&gt;Cosmos Jobs&lt;/a&gt;, &lt;a href=&#34;https://tharsis.notion.site&#34;&gt;Notion&lt;/a&gt;, or feel free to &lt;a href=&#34;mailto:careers@thars.is&#34;&gt;reach out&lt;/a&gt; via email.&lt;/p&gt;</summary>
  </entry>
</feed>