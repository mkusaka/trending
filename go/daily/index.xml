<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-21T01:33:10Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sinclairtarget/git-who</title>
    <updated>2025-03-21T01:33:10Z</updated>
    <id>tag:github.com,2025-03-21:/sinclairtarget/git-who</id>
    <link href="https://github.com/sinclairtarget/git-who" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Git blame for file trees&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-who&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sinclairtarget/git-who/master/screenshots/vanity.png&#34; alt=&#34;Vanity screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git-who&lt;/code&gt; is a command-line tool for answering that eternal question:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Who wrote this code?!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;git blame&lt;/code&gt;, which can tell you who wrote a &lt;em&gt;line&lt;/em&gt; of code, &lt;code&gt;git-who&lt;/code&gt; tells you the people responsible for entire components or subsystems in a codebase. You can think of &lt;code&gt;git-who&lt;/code&gt; sort of like &lt;code&gt;git blame&lt;/code&gt; but for file trees rather than individual files.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;This README contains comprehensive documentation. For an overview, see &lt;a href=&#34;https://sinclairtarget.com/blog/2025/03/who-will-maintain-vim-a-demo-of-git-who/&#34;&gt;Who Will Maintain Vim? A Demo of Git Who&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Precompiled Binaries&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/sinclairtarget/git-who/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Package Managers&lt;/h3&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install git-who&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;Building from source requires that you have Go, Ruby, and the &lt;code&gt;rake&lt;/code&gt; Ruby gem installed. Note that these are &lt;em&gt;only&lt;/em&gt; required when building from source; you can download and run one of the binary releases without installing any of these tools.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone git@github.com:sinclairtarget/git-who.git&#xA;$ cd git-who&#xA;$ rake&#xA;$ ./git-who --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;(In the following examples, &lt;code&gt;git-who&lt;/code&gt; is invoked as &lt;code&gt;git who&lt;/code&gt;. This will work automatically as long as Git can find &lt;code&gt;git-who&lt;/code&gt; in your PATH. See the &lt;a href=&#34;https://raw.githubusercontent.com/sinclairtarget/git-who/master/#git-alias&#34;&gt;Git Alias&lt;/a&gt; section for more details.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;git who&lt;/code&gt; has three subcommands. Each subcommand gives you a different view of authorship in your Git repository.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;table&lt;/code&gt; Subcommand&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;table&lt;/code&gt; subcommand is the default subcommand. You can invoke it explicitly as &lt;code&gt;git who table&lt;/code&gt; or implicitly just as &lt;code&gt;git who&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;table&lt;/code&gt; subcommand prints a table summarizing the contributions of every author who has made commits in the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/clones/cpython$ git who&#xA;┌─────────────────────────────────────────────────────┐&#xA;│Author                            Last Edit   Commits│&#xA;├─────────────────────────────────────────────────────┤&#xA;│Guido van Rossum                  2 mon. ago   11,213│&#xA;│Victor Stinner                    1 week ago    7,193│&#xA;│Fred Drake                        13 yr. ago    5,465│&#xA;│Georg Brandl                      1 year ago    5,294│&#xA;│Benjamin Peterson                 4 mon. ago    4,724│&#xA;│Raymond Hettinger                 1 month ago   4,235│&#xA;│Serhiy Storchaka                  3 days ago    3,366│&#xA;│Antoine Pitrou                    10 mon. ago   3,180│&#xA;│Jack Jansen                       18 yr. ago    2,978│&#xA;│Martin v. Löwis                   9 yr. ago     2,690│&#xA;│...3,026 more...                                     │&#xA;└─────────────────────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify a path to filter the results to only commits that touched files under the given path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/repos/cpython$ git who Tools/&#xA;┌─────────────────────────────────────────────────────┐&#xA;│Author                            Last Edit   Commits│&#xA;├─────────────────────────────────────────────────────┤&#xA;│Guido van Rossum                  8 mon. ago      820│&#xA;│Barry Warsaw                      1 year ago      279│&#xA;│Martin v. Löwis                   9 yr. ago       242│&#xA;│Victor Stinner                    1 month ago     235│&#xA;│Steve Dower                       1 month ago     228│&#xA;│Jeremy Hylton                     19 yr. ago      178│&#xA;│Mark Shannon                      4 hr. ago       131│&#xA;│Serhiy Storchaka                  2 mon. ago      118│&#xA;│Erlend E. Aasland                 1 week ago      117│&#xA;│Christian Heimes                  2 yr. ago       114│&#xA;│...267 more...                                       │&#xA;└─────────────────────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify a branch name, tag name, or any &#34;commit-ish&#34; to filter the results to commits reachable from the specified commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/clones/cpython$ git who v3.7.1&#xA;┌─────────────────────────────────────────────────────┐&#xA;│Author                            Last Edit   Commits│&#xA;├─────────────────────────────────────────────────────┤&#xA;│Guido van Rossum                  6 yr. ago    10,986│&#xA;│Fred Drake                        13 yr. ago    5,465│&#xA;│Georg Brandl                      8 yr. ago     5,291│&#xA;│Benjamin Peterson                 6 yr. ago     4,599│&#xA;│Victor Stinner                    6 yr. ago     4,462│&#xA;│Raymond Hettinger                 6 yr. ago     3,667│&#xA;│Antoine Pitrou                    6 yr. ago     3,149│&#xA;│Jack Jansen                       18 yr. ago    2,978│&#xA;│Martin v. Löwis                   9 yr. ago     2,690│&#xA;│Tim Peters                        10 yr. ago    2,489│&#xA;│...550 more...                                       │&#xA;└─────────────────────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Revision ranges also work. This shows the commits made after the release of 3.10.9 up to the release of 3.11.9:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/clones/cpython$ git who v3.10.9..v3.11.9&#xA;┌─────────────────────────────────────────────────────┐&#xA;│Author                            Last Edit   Commits│&#xA;├─────────────────────────────────────────────────────┤&#xA;│Miss Islington (bot)              9 mon. ago    2,551│&#xA;│Victor Stinner                    9 mon. ago      367│&#xA;│Serhiy Storchaka                  9 mon. ago      304│&#xA;│Erlend Egeberg Aasland            2 yr. ago       202│&#xA;│Christian Heimes                  2 yr. ago       200│&#xA;│Mark Shannon                      1 year ago      157│&#xA;│Irit Katriel                      10 mon. ago     135│&#xA;│Nikita Sobolev                    10 mon. ago     126│&#xA;│Pablo Galindo Salgado             1 year ago      117│&#xA;│Pablo Galindo                     9 mon. ago       97│&#xA;│...574 more...                                       │&#xA;└─────────────────────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just like with &lt;code&gt;git&lt;/code&gt; itself, when there is ambiguity between a path name and a commit-ish, you can use &lt;code&gt;--&lt;/code&gt; to clarify the distinction. The following command will show you contributions to the file or directory called &lt;code&gt;foo&lt;/code&gt; even if there is also a branch called &lt;code&gt;foo&lt;/code&gt; in your repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git who -- foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Options&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;-m&lt;/code&gt;, &lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;-l&lt;/code&gt;, and &lt;code&gt;-f&lt;/code&gt; flags allow you to sort the table by different metrics.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-m&lt;/code&gt; flag sorts the table by the &#34;Last Edit&#34; column, showing who edited the repository most recently. The &lt;code&gt;-c&lt;/code&gt; flag sorts the table by first edit, so that the authors who committed to the repository earliest are at the top.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-l&lt;/code&gt; flag sorts the table by number of lines modified, adding some more columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git who -l&#xA;┌──────────────────────────────────────────────────────────────────────────────┐&#xA;│Author                          Last Edit   Commits   Files        Lines (+/-)│&#xA;├──────────────────────────────────────────────────────────────────────────────┤&#xA;│Guido van Rossum                2 mon. ago   11,213  14,135     1.3m / 793,252│&#xA;│Antoine Pitrou                  10 mon. ago   3,180   3,868  944,685 / 776,587│&#xA;│Jack Jansen                     18 yr. ago    2,978   5,887  836,527 / 691,078│&#xA;│Benjamin Peterson               4 mon. ago    4,724   6,957  690,740 / 781,700│&#xA;│Georg Brandl                    1 year ago    5,294   9,139  644,620 / 640,217│&#xA;│Martin v. Löwis                 9 yr. ago     2,690   4,557  570,632 / 389,794│&#xA;│Victor Stinner                  1 week ago    7,193  11,382  464,474 / 460,396│&#xA;│Brett Cannon                    1 month ago   2,022   2,841  305,631 / 283,178│&#xA;│Serhiy Storchaka                3 days ago    3,366   9,955  335,209 / 208,899│&#xA;│Christian Heimes                1 year ago    1,553   4,191  339,706 / 178,947│&#xA;│...3,022 more...                                                              │&#xA;└──────────────────────────────────────────────────────────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-f&lt;/code&gt; flag sorts the table by the number of files modified.&lt;/p&gt; &#xA;&lt;p&gt;There is also an &lt;code&gt;-n&lt;/code&gt; option can be used to print more rows. Passing &lt;code&gt;-n 0&lt;/code&gt; prints all rows.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;git-who table --help&lt;/code&gt; to see additional options for the &lt;code&gt;table&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;tree&lt;/code&gt; Subcommand&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tree&lt;/code&gt; subcommand prints out a file tree showing files in the working tree just like &lt;a href=&#34;https://en.wikipedia.org/wiki/Tree_(command)&#34;&gt;tree&lt;/a&gt;. Each node in the file tree is annotated with information showing which author contributed the most to files at or under that path.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example showing contributions to the Python parser. By default, contributions will be measured by number of commits:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/repos/cpython$ git who tree Parser/&#xA;Parser/.........................Guido van Rossum (182)&#xA;├── lexer/......................Pablo Galindo Salgado (5)&#xA;│   ├── buffer.c................Lysandros Nikolaou (1)&#xA;│   ├── buffer.h................Lysandros Nikolaou (1)&#xA;│   ├── lexer.c&#xA;│   ├── lexer.h.................Lysandros Nikolaou (1)&#xA;│   ├── state.c&#xA;│   └── state.h&#xA;├── tokenizer/..................Filipe Laíns (1)&#xA;│   ├── file_tokenizer.c&#xA;│   ├── helpers.c...............Lysandros Nikolaou (1)&#xA;│   ├── helpers.h...............Lysandros Nikolaou (1)&#xA;│   ├── readline_tokenizer.c....Lysandros Nikolaou (1)&#xA;│   ├── string_tokenizer.c......Lysandros Nikolaou (1)&#xA;│   ├── tokenizer.h.............Lysandros Nikolaou (1)&#xA;│   └── utf8_tokenizer.c........Lysandros Nikolaou (1)&#xA;├── Python.asdl.................Benjamin Peterson (14)&#xA;├── action_helpers.c............Pablo Galindo Salgado (6)&#xA;├── asdl.py.....................Benjamin Peterson (7)&#xA;├── asdl_c.py...................Benjamin Peterson (42)&#xA;├── myreadline.c&#xA;├── parser.c....................Pablo Galindo Salgado (34)&#xA;├── peg_api.c...................Lysandros Nikolaou (2)&#xA;├── pegen.c.....................Pablo Galindo (33)&#xA;├── pegen.h.....................Pablo Galindo Salgado (13)&#xA;├── pegen_errors.c..............Pablo Galindo Salgado (16)&#xA;├── string_parser.c.............Victor Stinner (10)&#xA;├── string_parser.h.............Pablo Galindo Salgado (1)&#xA;└── token.c.....................Pablo Galindo Salgado (2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may notice that some files, like &lt;code&gt;lexer.c&lt;/code&gt;, are not annotated. If a file is not annotated, that is because the author who has most contributed to that file is the same as the author who has most contributed to the directory containing the file. This is done to minimize visual noise.&lt;/p&gt; &#xA;&lt;p&gt;You can force &lt;code&gt;git-who tree&lt;/code&gt; to annotate every file using the &lt;code&gt;-a&lt;/code&gt; flag (for &#34;all&#34;). This flag also prints all file paths that were discovered while walking the commit history, including those no longer in the working tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/repos/cpython$ git who tree -a Parser/&#xA;Parser/.........................Guido van Rossum (182)&#xA;├── lexer/......................Pablo Galindo Salgado (5)&#xA;│   ├── buffer.c................Lysandros Nikolaou (1)&#xA;│   ├── buffer.h................Lysandros Nikolaou (1)&#xA;│   ├── lexer.c.................Pablo Galindo Salgado (4)&#xA;│   ├── lexer.h.................Lysandros Nikolaou (1)&#xA;│   ├── state.c.................Pablo Galindo Salgado (2)&#xA;│   └── state.h.................Pablo Galindo Salgado (1)&#xA;├── pegen/......................Pablo Galindo (30)&#xA;│   ├── parse.c.................Pablo Galindo (16)&#xA;│   ├── parse_string.c..........Pablo Galindo (7)&#xA;│   ├── parse_string.h..........Pablo Galindo (2)&#xA;│   ├── peg_api.c...............Pablo Galindo (3)&#xA;│   ├── pegen.c.................Pablo Galindo (17)&#xA;│   └── pegen.h.................Pablo Galindo (9)&#xA;├── pgen/.......................Pablo Galindo (8)&#xA;│   ├── __init__.py.............Pablo Galindo (2)&#xA;│   ├── __main__.py.............Pablo Galindo (5)&#xA;│   ├── automata.py.............Pablo Galindo (4)&#xA;│   ├── grammar.py..............Pablo Galindo (5)&#xA;│   ├── keywordgen.py...........Pablo Galindo (3)&#xA;│   ├── metaparser.py...........Pablo Galindo (2)&#xA;│   ├── pgen.py.................Pablo Galindo (5)&#xA;│   └── token.py................Pablo Galindo (4)&#xA;├── tokenizer/..................Filipe Laíns (1)&#xA;│   ├── file_tokenizer.c........Filipe Laíns (1)&#xA;│   ├── helpers.c...............Lysandros Nikolaou (1)&#xA;│   ├── helpers.h...............Lysandros Nikolaou (1)&#xA;│   ├── readline_tokenizer.c....Lysandros Nikolaou (1)&#xA;│   ├── string_tokenizer.c......Lysandros Nikolaou (1)&#xA;│   ├── tokenizer.h.............Lysandros Nikolaou (1)&#xA;│   └── utf8_tokenizer.c........Lysandros Nikolaou (1)&#xA;├── .cvsignore..................Martin v. Löwis (1)&#xA;├── Makefile.in.................Guido van Rossum (10)&#xA;├── Python.asdl.................Benjamin Peterson (14)&#xA;├── acceler.c...................Guido van Rossum (17)&#xA;├── action_helpers.c............Pablo Galindo Salgado (6)&#xA;├── asdl.py.....................Benjamin Peterson (7)&#xA;├── asdl_c.py...................Benjamin Peterson (42)&#xA;├── assert.h....................Guido van Rossum (11)&#xA;├── bitset.c....................Guido van Rossum (12)&#xA;├── firstsets.c.................Guido van Rossum (13)&#xA;├── grammar.c...................Guido van Rossum (20)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(&lt;em&gt;The above output continues but has been elided for the purposes of this README.&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Note that, whether or not the &lt;code&gt;-a&lt;/code&gt; flag is used, commits that edited files not in the working tree will still count toward the total displayed next to ancestor directories of that file. In the above two examples, Guido van Rossum is shown as the overall highest committer to the &lt;code&gt;Parser/&lt;/code&gt; directory, though it takes listing the entire tree with the &lt;code&gt;-a&lt;/code&gt; flag to see that most of his commits were to files that have since been moved or deleted.&lt;/p&gt; &#xA;&lt;p&gt;Like with the &lt;code&gt;table&lt;/code&gt; subcommand, you can specify a &#34;commit-ish&#34;. This next example shows changes to the &lt;code&gt;Parser/&lt;/code&gt; directory that happened after the 3.10.9 release up to the 3.11.9 release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/clones/cpython$ git who tree v3.10.9..v3.11.9 -- Parser/&#xA;Parser/.................Pablo Galindo Salgado (52)&#xA;├── Python.asdl.........Batuhan Taskaya (1)&#xA;├── action_helpers.c....Matthieu Dartiailh (1)&#xA;├── asdl_c.py...........Batuhan Taskaya (4)&#xA;├── myreadline.c........Victor Stinner (1)&#xA;├── parser.c&#xA;├── pegen.c&#xA;├── pegen.h&#xA;├── pegen_errors.c......Miss Islington (bot) (8)&#xA;└── string_parser.c.....Miss Islington (bot) (4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If a file isn&#39;t edited in any of the commits specified by the revision range, then it won&#39;t appear in the output of &lt;code&gt;git who tree&lt;/code&gt;, even if the file is in the working tree. This can make &lt;code&gt;git who tree&lt;/code&gt; useful for visualizing the changes introduced by a branch.&lt;/p&gt; &#xA;&lt;h4&gt;Options&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;tree&lt;/code&gt; subcommand, like the &lt;code&gt;table&lt;/code&gt; subcommand, supports the &lt;code&gt;-l&lt;/code&gt;, &lt;code&gt;-f&lt;/code&gt;, &lt;code&gt;-m&lt;/code&gt;, and &lt;code&gt;-c&lt;/code&gt; flags.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-l&lt;/code&gt; flag will annotate each file tree node with the author who has added or removed the most lines at that path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/repos/cpython$ git who tree -l Parser/&#xA;Parser/.........................Pablo Galindo (72,917 / 47,102)&#xA;├── lexer/......................Lysandros Nikolaou (1,668 / 0)&#xA;│   ├── buffer.c&#xA;│   ├── buffer.h&#xA;│   ├── lexer.c&#xA;│   ├── lexer.h&#xA;│   ├── state.c&#xA;│   └── state.h.................Pablo Galindo Salgado (1 / 0)&#xA;├── tokenizer/..................Lysandros Nikolaou (1,391 / 0)&#xA;│   ├── file_tokenizer.c&#xA;│   ├── helpers.c&#xA;│   ├── helpers.h&#xA;│   ├── readline_tokenizer.c&#xA;│   ├── string_tokenizer.c&#xA;│   ├── tokenizer.h&#xA;│   └── utf8_tokenizer.c&#xA;├── Python.asdl.................Benjamin Peterson (120 / 122)&#xA;├── action_helpers.c&#xA;├── asdl.py.....................Eli Bendersky (276 / 331)&#xA;├── asdl_c.py...................Victor Stinner (634 / 496)&#xA;├── myreadline.c................Guido van Rossum (365 / 226)&#xA;├── parser.c&#xA;├── peg_api.c...................Victor Stinner (5 / 46)&#xA;├── pegen.c&#xA;├── pegen.h&#xA;├── pegen_errors.c&#xA;├── string_parser.c&#xA;├── string_parser.h&#xA;└── token.c.....................Serhiy Storchaka (233 / 0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-f&lt;/code&gt; flag will pick authors based on number of files edited. The &lt;code&gt;-m&lt;/code&gt; flag will pick an author based on last modification time while the &lt;code&gt;-c&lt;/code&gt; flag picks the author who first edited a file.&lt;/p&gt; &#xA;&lt;p&gt;You can limit the depth of the tree printed by using the &lt;code&gt;-d&lt;/code&gt; flag. The depth is measured from the current working directory.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;-a&lt;/code&gt; flag has already been mentioned.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;git who tree --help&lt;/code&gt; to see all options available for the &lt;code&gt;tree&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;hist&lt;/code&gt; Subcommand&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;hist&lt;/code&gt; subcommand prints out a little bar chart / timeline of commit activity showing the history of contributions to the repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/clones/cpython$ git who hist&#xA;1990 ┤ #                                     Guido van Rossum (105)&#xA;1991 ┤ ##                                    Guido van Rossum (445)&#xA;1992 ┤ ###                                   Guido van Rossum (606)&#xA;1993 ┤ #-                                    Guido van Rossum (200)&#xA;1994 ┤ ###                                   Guido van Rossum (525)&#xA;1995 ┤ ####-                                 Guido van Rossum (869)&#xA;1996 ┤ ####---                               Guido van Rossum (961)&#xA;1997 ┤ #######--                             Guido van Rossum (1,626)&#xA;1998 ┤ #####------                           Guido van Rossum (1,205)&#xA;1999 ┤ ###-----                              Fred Drake (755)&#xA;2000 ┤ ####------------                      Fred Drake (973)&#xA;2001 ┤ #####-----------------                Fred Drake (1,196)&#xA;2002 ┤ ###--------------                     Guido van Rossum (543)&#xA;2003 ┤ ##------------                        Raymond Hettinger (479)&#xA;2004 ┤ ##--------                            Raymond Hettinger (460)&#xA;2005 ┤ #----                                 Raymond Hettinger (171)&#xA;2006 ┤ ###-------------                      Neal Norwitz (636)&#xA;2007 ┤ ####------------                      Guido van Rossum (792)&#xA;2008 ┤ ####--------------------              Georg Brandl (1,005)&#xA;2009 ┤ #####-----------------------          Benjamin Peterson (1,107)&#xA;2010 ┤ #####-------------------------------  Georg Brandl (1,088)&#xA;2011 ┤ ####-----------------                 Victor Stinner (877)&#xA;2012 ┤ ##------------------                  Antoine Pitrou (466)&#xA;2013 ┤ ###--------------                     Victor Stinner (570)&#xA;2014 ┤ ###----------                         Victor Stinner (594)&#xA;2015 ┤ ###---------                          Victor Stinner (529)&#xA;2016 ┤ ##-----------                         Victor Stinner (497)&#xA;2017 ┤ ##--------                            Victor Stinner (404)&#xA;2018 ┤ ##--------                            Victor Stinner (306)&#xA;2019 ┤ ##----------                          Victor Stinner (467)&#xA;2020 ┤ ###---------                          Victor Stinner (524)&#xA;2021 ┤ ##----------                          Victor Stinner (260)&#xA;2022 ┤ ##-------------                       Victor Stinner (366)&#xA;2023 ┤ ###---------------                    Victor Stinner (556)&#xA;2024 ┤ ##-----------------                   Serhiy Storchaka (321)&#xA;2025 ┤ #                                     Bénédikt Tran (27)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Git was only released in 2005, so clearly there has been some version control metadata imported from another tool!)&lt;/p&gt; &#xA;&lt;p&gt;The timeline shows the author who made the most commits in each year. The bar in the bar chart shows their contributions as a proportion of the total contributions made in that year. (The &lt;code&gt;#&lt;/code&gt; symbol shows the proportion of total commits by the &#34;winning&#34; author for that year.)&lt;/p&gt; &#xA;&lt;p&gt;Like with the other subcommands, you can filter the commits examined to just those editing files under a given path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/repos/cpython$ git who hist iOS/&#xA;Feb 2024 ┤ #                                     Russell Keith-Magee (1)&#xA;Mar 2024 ┤ ####                                  Russell Keith-Magee (4)&#xA;Apr 2024 ┤ #-                                    Xie Yanbo (1)&#xA;May 2024 ┤&#xA;Jun 2024 ┤&#xA;Jul 2024 ┤ #                                     Russell Keith-Magee (1)&#xA;Aug 2024 ┤ ##                                    Russell Keith-Magee (2)&#xA;Sep 2024 ┤ #                                     Russell Keith-Magee (1)&#xA;Oct 2024 ┤&#xA;Nov 2024 ┤ #                                     Russell Keith-Magee (1)&#xA;Dec 2024 ┤ ###-                                  Russell Keith-Magee (3)&#xA;Jan 2025 ┤&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The printed timeline will begin with the date of the first commit modifying that path.&lt;/p&gt; &#xA;&lt;p&gt;You can also filter using a commit-ish. This shows the timeline of contributions since Python&#39;s 3.12 release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/clones/cpython$ git who hist v3.12.0..&#xA;May 2023 ┤ ###---------                          Victor Stinner (28)&#xA;Jun 2023 ┤ #######--------------------           Victor Stinner (90)&#xA;Jul 2023 ┤ ######----------------------------    Victor Stinner (78)&#xA;Aug 2023 ┤ #######-------------------------      Victor Stinner (91)&#xA;Sep 2023 ┤ ############----------------------    Victor Stinner (157)&#xA;Oct 2023 ┤ #####---------------------------      Victor Stinner (68)&#xA;Nov 2023 ┤ ###---------------------              Serhiy Storchaka (40)&#xA;Dec 2023 ┤ ###-----------------------            Alex Waygood (32)&#xA;Jan 2024 ┤ ####-----------------------------     Serhiy Storchaka (43)&#xA;Feb 2024 ┤ ####------------------------------    Serhiy Storchaka (42)&#xA;Mar 2024 ┤ #####---------------------------      Victor Stinner (59)&#xA;Apr 2024 ┤ ###---------------------------        Serhiy Storchaka (37)&#xA;May 2024 ┤ ##----------------------------------  Serhiy Storchaka (26)&#xA;Jun 2024 ┤ ####------------------------          Victor Stinner (48)&#xA;Jul 2024 ┤ ###------------------------           Sam Gross (32)&#xA;Aug 2024 ┤ ##-------------------                 Mark Shannon (24)&#xA;Sep 2024 ┤ ##---------------------------         Serhiy Storchaka (23)&#xA;Oct 2024 ┤ ###----------------------------       Victor Stinner (39)&#xA;Nov 2024 ┤ ##-----------------------             Serhiy Storchaka (27)&#xA;Dec 2024 ┤ ##------------------                  Bénédikt Tran (18)&#xA;Jan 2025 ┤ ##---------                           Bénédikt Tran (26)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Options&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;hist&lt;/code&gt; subcommand supports the &lt;code&gt;-l&lt;/code&gt; and &lt;code&gt;-f&lt;/code&gt; flags but not the &lt;code&gt;-m&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt; flags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/repos/cpython$ git who hist -l iOS/&#xA;Feb 2024 ┤ ###############                       Russell Keith-Magee (406 / 0)&#xA;Mar 2024 ┤ ####################################  Russell Keith-Magee (994 / 32)&#xA;Apr 2024 ┤ #                                     Xie Yanbo (2 / 2)&#xA;May 2024 ┤&#xA;Jun 2024 ┤&#xA;Jul 2024 ┤ #                                     Russell Keith-Magee (1 / 1)&#xA;Aug 2024 ┤ #                                     Russell Keith-Magee (2 / 0)&#xA;Sep 2024 ┤ #                                     Russell Keith-Magee (6 / 0)&#xA;Oct 2024 ┤&#xA;Nov 2024 ┤ #####                                 Russell Keith-Magee (104 / 28)&#xA;Dec 2024 ┤ ##################-                   Russell Keith-Magee (444 / 52)&#xA;Jan 2025 ┤&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;git who hist --help&lt;/code&gt; for a full listing of the options supported by the &lt;code&gt;hist&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h3&gt;Additional Options for Filtering Commits&lt;/h3&gt; &#xA;&lt;p&gt;All of the &lt;code&gt;git who&lt;/code&gt; subcommands take these additional options that further filter the commits that get counted.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--author&lt;/code&gt; and &lt;code&gt;--nauthor&lt;/code&gt; options allow you to specify authors to include or exclude. Both options can be specified multiple times to include or exclude multiple authors.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--since&lt;/code&gt; and &lt;code&gt;--until&lt;/code&gt; options allow you to filter out commits before or after a certain date respectively. These options each take a string that gets passed to &lt;code&gt;git log&lt;/code&gt; to be interpreted. &lt;code&gt;git log&lt;/code&gt; can handle some surprising inputs. See git-commit(1) for a description of what is possible.&lt;/p&gt; &#xA;&lt;p&gt;The following example shows the paths edited by Guido van Rossum over the last eight months:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/repos/cpython$ git who tree -d 1 --since &#34;nine months ago&#34; --author &#34;Guido van Rossum&#34;&#xA;./..................Guido van Rossum (11)&#xA;├── .github/........Guido van Rossum (2)&#xA;├── Doc/............Guido van Rossum (3)&#xA;├── Include/........Guido van Rossum (3)&#xA;├── Lib/............Guido van Rossum (1)&#xA;├── Modules/........Guido van Rossum (1)&#xA;├── Objects/........Guido van Rossum (1)&#xA;├── PCbuild/........Guido van Rossum (2)&#xA;├── Programs/.......Guido van Rossum (1)&#xA;├── Python/.........Guido van Rossum (4)&#xA;├── Tools/..........Guido van Rossum (1)&#xA;├── configure&#xA;└── configure.ac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caching&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;git who&lt;/code&gt; caches data on a per-repository basis under &lt;code&gt;XDG_CACHE_HOME&lt;/code&gt; (this is &lt;code&gt;~/.cache&lt;/code&gt; if the environment variable is not set).&lt;/p&gt; &#xA;&lt;p&gt;You can disable caching by setting &lt;code&gt;GIT_WHO_DISABLE_CACHE=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;git-who&lt;/code&gt; with Docker&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;git-who&lt;/code&gt; as a Docker container without installing it on your system directly. Follow these steps to build and use the Docker image.&lt;/p&gt; &#xA;&lt;h3&gt;Building the Docker Image&lt;/h3&gt; &#xA;&lt;p&gt;To build the &lt;code&gt;git-who&lt;/code&gt; Docker image, run the following command from the project root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t git-who -f docker/Dockerfile .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a Docker image named &lt;code&gt;git-who&lt;/code&gt; that you can use to run the tool.&lt;/p&gt; &#xA;&lt;h3&gt;Running &lt;code&gt;git-who&lt;/code&gt; via Docker&lt;/h3&gt; &#xA;&lt;p&gt;To use git-who without modifying your Git configuration, you can manually run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -v &#34;$(pwd)&#34;:/git -v &#34;$HOME&#34;:/root git-who who&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;: Automatically remove the container after execution.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-it&lt;/code&gt;: Enable interactive mode (for a better experience with CLI tools).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v &#34;$(pwd):/git&#34;&lt;/code&gt;: Mounts the current Git repository into the container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v &#34;$HOME:/root&#34;&lt;/code&gt;: Ensures that user-specific configurations (e.g., SSH keys, Git settings) are available inside the container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setting Up a Git Alias&lt;/h3&gt; &#xA;&lt;p&gt;To make it easier to run &lt;code&gt;git-who&lt;/code&gt;, you can add an alias to your Git configuration. Add the following lines to your &lt;code&gt;~/.gitconfig&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[alias]&#xA;    who = !zsh -c &#34;docker run --rm -it -v$(pwd):/git -v$HOME:/root git-who who $*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git who&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;from any Git repository, and it will invoke git-who through Docker.&lt;/p&gt; &#xA;&lt;h2&gt;Git Alias&lt;/h2&gt; &#xA;&lt;p&gt;If you install the &lt;code&gt;git-who&lt;/code&gt; binary somewhere in your path, running &lt;code&gt;git who&lt;/code&gt; will automatically invoke it with no further configuration. This is a Git feature.&lt;/p&gt; &#xA;&lt;p&gt;If you install the binary using a different name or just like to be explicit you can configure a Git alias in your global Git config like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[alias]&#xA;    who = &#34;!git-who-executable-name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases&#34;&gt;here&lt;/a&gt; for more information about Git aliases.&lt;/p&gt; &#xA;&lt;h2&gt;Git Mailmap&lt;/h2&gt; &#xA;&lt;p&gt;Quite often, people end up committing to a repository under different names or using different email addresses. For example, someone might make a commit using the name &#34;Nathan Smith&#34; and their work email address and then later make a commit using the name &#34;Nate Smith&#34; and their personal email address.&lt;/p&gt; &#xA;&lt;p&gt;How can you make sure that all of someone&#39;s commits are counted together instead of being attributed to three or four different people with slightly different names?&lt;/p&gt; &#xA;&lt;p&gt;Git already has a solution for his problem called &lt;a href=&#34;https://git-scm.com/docs/gitmailmap&#34;&gt;Git mailmap&lt;/a&gt;. If a &lt;code&gt;.mailmap&lt;/code&gt; file is present in a Git repository, &lt;code&gt;git who&lt;/code&gt; will respect it.&lt;/p&gt; &#xA;&lt;h2&gt;What Exactly Do These Numbers Mean?&lt;/h2&gt; &#xA;&lt;h3&gt;Metrics&lt;/h3&gt; &#xA;&lt;p&gt;The number of &lt;strong&gt;commits&lt;/strong&gt; shown for each author is the number of unique commits found while walking the commit log. When supplying a path argument to &lt;code&gt;git who&lt;/code&gt;, the commits walked include only commits modifying the given path(s). Here, the rules described under the HISTORY SIMPLIFICATION section of Git log apply—branches in the commit history that do not modify the given path(s) are pruned away.&lt;/p&gt; &#xA;&lt;p&gt;The number of &lt;strong&gt;files&lt;/strong&gt; shown for each author is the number of unique files modified in commits by that author. If a file is renamed, it will count twice.&lt;/p&gt; &#xA;&lt;p&gt;The number of &lt;strong&gt;lines added&lt;/strong&gt; and &lt;strong&gt;lines removed&lt;/strong&gt; shown for each author is the number of lines added and removed to files under the supplied path(s) or to all files in the case of no path arguments. In Git, modifying a line counts as removing it and then adding the new version of the line.&lt;/p&gt; &#xA;&lt;h3&gt;Merge Commits&lt;/h3&gt; &#xA;&lt;p&gt;Merge commits are not counted toward any of these metrics. The rationale here is that merge commits represent a kind of overhead involved in managing the commit graph and that all novel changes will already have been introduced to the commit graph by the merge commit&#39;s ancestor commits.&lt;/p&gt; &#xA;&lt;p&gt;You can supply the &lt;code&gt;--merges&lt;/code&gt; flag to &lt;code&gt;git who&lt;/code&gt; to change this behavior. The &lt;code&gt;--merges&lt;/code&gt; flag forces &lt;code&gt;git who&lt;/code&gt; to count merge commits toward the commit total for each author. Merge commits are still ignored for the purposes of the file total or lines total.&lt;/p&gt; &#xA;&lt;h3&gt;Differences From &lt;code&gt;git blame&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Whereas &lt;code&gt;git blame&lt;/code&gt; starts from the code that exists in the working tree and identifies the commit that introduced each line, &lt;code&gt;git who&lt;/code&gt; instead walks some subset of the commit log tallying contributions. This means that &lt;code&gt;git blame&lt;/code&gt; and &lt;code&gt;git who&lt;/code&gt;, in addition to operating on different levels (individual files vs file trees), tell you slightly different things.&lt;/p&gt; &#xA;&lt;p&gt;This is best illustrated through an example. If Bob has made dozens of commits editing a file, but Alice recently formatted the file and made one big commit with her style changes, &lt;code&gt;git blame&lt;/code&gt; will attribute most of the lines in the file to Alice. &lt;code&gt;git who&lt;/code&gt;, on the other hand, will rank Bob as the primary author, at least when sorting by number of commits. In this case, &lt;code&gt;git who&lt;/code&gt; seems better suited to answering the question, &#34;Who came up with the code in this file?&#34;&lt;/p&gt; &#xA;&lt;p&gt;If instead, Bob made the same commits but Alice came along later and completely refactored the file, again in one big commit, &lt;code&gt;git blame&lt;/code&gt; will correctly attribute most of the lines in the file to her, while &lt;code&gt;git who&lt;/code&gt; will still list Bob as the primary author. In this case, &lt;code&gt;git blame&lt;/code&gt; seems to do a better job of answering, &#34;Who came up with the code in this file?&#34;. That said, the various subcommands and options of &lt;code&gt;git who&lt;/code&gt; can give you the full picture of what has happened here. &lt;code&gt;git who hist&lt;/code&gt; in particular will show you that Bob was the primary author until Alice took over.&lt;/p&gt; &#xA;&lt;p&gt;Ultimately, neither tool quite answers what we want to know, which is &#34;Who came up with the code in this file?&#34;, perhaps because the question is too ambiguous. &lt;code&gt;git blame&lt;/code&gt; answers, &#34;Who last modified each line of code in this file?&#34; and &lt;code&gt;git who&lt;/code&gt; answers, &#34;Who made the most modifications to this file / this file tree?&#34;&lt;/p&gt; &#xA;&lt;h2&gt;DEVELOPMENT&lt;/h2&gt; &#xA;&lt;h3&gt;Test Repository Submodule&lt;/h3&gt; &#xA;&lt;p&gt;Some of the automated tests for &lt;code&gt;git-who&lt;/code&gt; need to run against a Git repository. A test repository is attached to this repository as a submodule.&lt;/p&gt; &#xA;&lt;p&gt;If you want to run the automated tests, you will first need to set up the submodule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git submodule update --init&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>cloudwego/eino-examples</title>
    <updated>2025-03-21T01:33:10Z</updated>
    <id>tag:github.com,2025-03-21:/cloudwego/eino-examples</id>
    <link href="https://github.com/cloudwego/eino-examples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples and demonstrations for using the Eino framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Eino Examples&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/eino-examples/main/README.zh_CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains examples and demonstrations for using the Eino framework. It provides practical examples to help developers better understand and utilize Eino&#39;s features.&lt;/p&gt; &#xA;&lt;h2&gt;Repository Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;components/&lt;/strong&gt;: Examples demonstrating the usage of various components from cloudwego/eino-ext&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Includes implementations and usage patterns for different component types&lt;/li&gt; &#xA;   &lt;li&gt;Shows how to use and customize Eino&#39;s extension components&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;compose/&lt;/strong&gt;: Examples showcasing Eino&#39;s orchestration capabilities&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Demonstrates how to use Graph and Chain orchestration&lt;/li&gt; &#xA;   &lt;li&gt;Provides patterns for combining different components&lt;/li&gt; &#xA;   &lt;li&gt;Shows various orchestration scenarios and best practices&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;flow/&lt;/strong&gt;: Examples illustrating the usage of Eino&#39;s flow module&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Contains demonstrations of flow-based programming patterns&lt;/li&gt; &#xA;   &lt;li&gt;Shows how to implement and manage data flows&lt;/li&gt; &#xA;   &lt;li&gt;Includes examples of stream processing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;quickstart/&lt;/strong&gt;: Quick start examples from the user documentation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Basic examples to help new users get started&lt;/li&gt; &#xA;   &lt;li&gt;Contains the same demos as shown in the official documentation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;If you discover a potential security issue in this project, or think you may have discovered a security issue, we ask that you notify Bytedance Security via our &lt;a href=&#34;https://security.bytedance.com/src&#34;&gt;security center&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/eino-examples/main/sec@bytedance.com&#34;&gt;vulnerability reporting email&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please do &lt;strong&gt;not&lt;/strong&gt; create a public GitHub issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/eino-examples/main/LICENSE.txt&#34;&gt;Apache-2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>