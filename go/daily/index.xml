<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-04T01:35:06Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/cel-go</title>
    <updated>2023-05-04T01:35:06Z</updated>
    <id>tag:github.com,2023-05-04:/google/cel-go</id>
    <link href="https://github.com/google/cel-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, portable, non-Turing complete expression evaluation with gradual typing (Go)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Common Expression Language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/google/cel-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/google/cel-go&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/google/cel-go&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/google/cel-go?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Common Expression Language (CEL) is a non-Turing complete language designed for simplicity, speed, safety, and portability. CEL&#39;s C-like &lt;a href=&#34;https://github.com/google/cel-spec&#34;&gt;syntax&lt;/a&gt; looks nearly identical to equivalent expressions in C++, Go, Java, and TypeScript.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Check whether a resource name starts with a group name.&#xA;resource.name.startsWith(&#34;/groups/&#34; + auth.claims.group)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Determine whether the request is in the permitted time window.&#xA;request.time - resource.age &amp;lt; duration(&#34;24h&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// Check whether all resource names in a list match a given filter.&#xA;auth.claims.email_verified &amp;amp;&amp;amp; resources.all(r, r.startsWith(auth.claims.email))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A CEL &#34;program&#34; is a single expression. The examples have been tagged as &lt;code&gt;java&lt;/code&gt;, &lt;code&gt;go&lt;/code&gt;, and &lt;code&gt;typescript&lt;/code&gt; within the markdown to showcase the commonality of the syntax.&lt;/p&gt; &#xA;&lt;p&gt;CEL is ideal for lightweight expression evaluation when a fully sandboxed scripting language is too resource intensive. To get started, try the &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/cel-go/index.html&#34;&gt;Codelab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A dashboard that shows results of cel-go conformance tests can be found &lt;a href=&#34;https://k8s-testgrid.appspot.com/google-cel#cel-go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#overview&#34;&gt;Overview&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#environment-setup&#34;&gt;Environment Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#parse-and-check&#34;&gt;Parse and Check&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#macros&#34;&gt;Macros&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#evaluate&#34;&gt;Evaluate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#Errors&#34;&gt;Errors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/examples/README.md&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#common-questions&#34;&gt;Common Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Determine the variables and functions you want to provide to CEL. Parse and check an expression to make sure it&#39;s valid. Then evaluate the output AST against some input. Checking is optional, but strongly encouraged.&lt;/p&gt; &#xA;&lt;h3&gt;Environment Setup&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s expose &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;group&lt;/code&gt; variables to CEL using the &lt;code&gt;cel.Declarations&lt;/code&gt; environment option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/google/cel-go/cel&#34;&#xA;&#xA;env, err := cel.NewEnv(&#xA;    cel.Variable(&#34;name&#34;, cel.StringType),&#xA;    cel.Variable(&#34;group&#34;, cel.StringType),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it. The environment is ready to be use for parsing and type-checking. CEL supports all the usual primitive types in addition to lists, maps, as well as first-class support for JSON and Protocol Buffers.&lt;/p&gt; &#xA;&lt;h3&gt;Parse and Check&lt;/h3&gt; &#xA;&lt;p&gt;The parsing phase indicates whether the expression is syntactically valid and expands any macros present within the environment. Parsing and checking are more computationally expensive than evaluation, and it is recommended that expressions be parsed and checked ahead of time.&lt;/p&gt; &#xA;&lt;p&gt;The parse and check phases are combined for convenience into the &lt;code&gt;Compile&lt;/code&gt; step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ast, issues := env.Compile(`name.startsWith(&#34;/groups/&#34; + group)`)&#xA;if issues != nil &amp;amp;&amp;amp; issues.Err() != nil {&#xA;    log.Fatalf(&#34;type-check error: %s&#34;, issues.Err())&#xA;}&#xA;prg, err := env.Program(ast)&#xA;if err != nil {&#xA;    log.Fatalf(&#34;program construction error: %s&#34;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;cel.Program&lt;/code&gt; generated at the end of parse and check is stateless, thread-safe, and cachable.&lt;/p&gt; &#xA;&lt;p&gt;Type-checking in an optional, but strongly encouraged, step that can reject some semantically invalid expressions using static analysis. Additionally, the check produces metadata which can improve function invocation performance and object field selection at evaluation-time.&lt;/p&gt; &#xA;&lt;h4&gt;Macros&lt;/h4&gt; &#xA;&lt;p&gt;Macros are optional but enabled by default. Macros were introduced to support optional CEL features that might not be desired in all use cases without the syntactic burden and complexity such features might desire if they were part of the core CEL syntax. Macros are expanded at parse time and their expansions are type-checked at check time.&lt;/p&gt; &#xA;&lt;p&gt;For example, when macros are enabled it is possible to support bounded iteration / fold operators. The macros &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;exists&lt;/code&gt;, &lt;code&gt;exists_one&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and &lt;code&gt;map&lt;/code&gt; are particularly useful for evaluating a single predicate against list and map values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Ensure all tweets are less than 140 chars&#xA;tweets.all(t, t.size() &amp;lt;= 140)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;has&lt;/code&gt; macro is useful for unifying field presence testing logic across protobuf types and dynamic (JSON-like) types.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Test whether the field is a non-default value if proto-based, or defined&#xA;// in the JSON case.&#xA;has(message.field)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both cases traditionally require special syntax at the language level, but these features are exposed via macros in CEL.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluate&lt;/h3&gt; &#xA;&lt;p&gt;Now, evaluate for fun and profit. The evaluation is thread-safe and side-effect free. Many different inputs can be send to the same &lt;code&gt;cel.Program&lt;/code&gt; and if fields are present in the input, but not referenced in the expression, they are ignored.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// The `out` var contains the output of a successful evaluation.&#xA;// The `details&#39; var would contain intermediate evaluation state if enabled as&#xA;// a cel.ProgramOption. This can be useful for visualizing how the `out` value&#xA;// was arrive at.&#xA;out, details, err := prg.Eval(map[string]interface{}{&#xA;    &#34;name&#34;: &#34;/groups/acme.co/documents/secret-stuff&#34;,&#xA;    &#34;group&#34;: &#34;acme.co&#34;})&#xA;fmt.Println(out) // &#39;true&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Partial State&lt;/h4&gt; &#xA;&lt;p&gt;What if &lt;code&gt;name&lt;/code&gt; hadn&#39;t been supplied? CEL is designed for this case. In distributed apps it is not uncommon to have edge caches and central services. If possible, evaluation should happen at the edge, but it isn&#39;t always possible to know the full state required for all values and functions present in the CEL expression.&lt;/p&gt; &#xA;&lt;p&gt;To improve the odds of successful evaluation with partial state, CEL uses commutative logical operators &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;. If an error or unknown value (not the same thing) is encountered on the left-hand side, the right hand side is evaluated also to determine the outcome. While it is possible to implement evaluation with partial state without this feature, this method was chosen because it aligns with the semantics of SQL evaluation and because it&#39;s more robust to evaluation against dynamic data types such as JSON inputs.&lt;/p&gt; &#xA;&lt;p&gt;In the following truth-table, the symbols &lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;y&amp;gt;&lt;/code&gt; represent error or unknown values, with the &lt;code&gt;?&lt;/code&gt; indicating that the branch is not taken due to short-circuiting. When the result is &lt;code&gt;&amp;lt;x, y&amp;gt;&lt;/code&gt; this means that the both args are possibly relevant to the result.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Expression&lt;/th&gt; &#xA;   &lt;th&gt;Result&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;false &amp;amp;&amp;amp; ?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;true &amp;amp;&amp;amp; false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt; &amp;amp;&amp;amp; false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;true &amp;amp;&amp;amp; true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;true &amp;amp;&amp;amp; &amp;lt;x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt; &amp;amp;&amp;amp; true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt; &amp;amp;&amp;amp; &amp;lt;y&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x, y&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;true || ?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;false || true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt; || true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;false || false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;false || &amp;lt;x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt; || false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x&amp;gt; || &amp;lt;y&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;x, y&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In the cases where unknowns are expected, &lt;code&gt;cel.EvalOptions(cel.OptTrackState)&lt;/code&gt; should be enabled. The &lt;code&gt;details&lt;/code&gt; value returned by &lt;code&gt;Eval()&lt;/code&gt; will contain the intermediate evaluation values and can be provided to the &lt;code&gt;interpreter.Prune&lt;/code&gt; function to generate a residual expression. e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;// Residual when `name` omitted:&#xA;name.startsWith(&#34;/groups/acme.co&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This technique can be useful when there are variables that are expensive to compute unless they are absolutely needed. This functionality will be the focus of many future improvements, so keep an eye out for more goodness here!&lt;/p&gt; &#xA;&lt;h3&gt;Errors&lt;/h3&gt; &#xA;&lt;p&gt;Parse and check errors have friendly error messages with pointers to where the issues occur in source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ERROR: &amp;lt;input&amp;gt;:1:40: undefined field &#39;undefined&#39;&#xA;    | TestAllTypes{single_int32: 1, undefined: 2}&#xA;    | .......................................^`,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Both the parsed and checked expressions contain source position information about each node that appears in the output AST. This information can be used to determine error locations at evaluation time as well.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;CEL-Go supports &lt;code&gt;modules&lt;/code&gt; and uses semantic versioning. For more info see the &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;p&gt;And of course, there is always the option to build from source directly.&lt;/p&gt; &#xA;&lt;h2&gt;Common Questions&lt;/h2&gt; &#xA;&lt;h3&gt;Why not JavaScript, Lua, or WASM?&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript and Lua are rich languages that require sandboxing to execute safely. Sandboxing is costly and factors into the &#34;what will I let users evaluate?&#34; question heavily when the answer is anything more than O(n) complexity.&lt;/p&gt; &#xA;&lt;p&gt;CEL evaluates linearly with respect to the size of the expression and the input being evaluated when macros are disabled. The only functions beyond the built-ins that may be invoked are provided by the host environment. While extension functions may be more complex, this is a choice by the application embedding CEL.&lt;/p&gt; &#xA;&lt;p&gt;But, why not WASM? WASM is an excellent choice for certain applications and is far superior to embedded JavaScript and Lua, but it does not have support for garbage collection and non-primitive object types require semi-expensive calls across modules. In most cases CEL will be faster and just as portable for its intended use case, though for node.js and web-based execution CEL too may offer a WASM evaluator with direct to WASM compilation.&lt;/p&gt; &#xA;&lt;h3&gt;Do I need to Parse &lt;em&gt;and&lt;/em&gt; Check?&lt;/h3&gt; &#xA;&lt;p&gt;Checking is an optional, but strongly suggested, step in CEL expression validation. It is sufficient in some cases to simply Parse and rely on the runtime bindings and error handling to do the right thing.&lt;/p&gt; &#xA;&lt;h3&gt;Where can I learn more about the language?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/google/cel-spec&#34;&gt;CEL Spec&lt;/a&gt; for the specification and conformance test suite.&lt;/li&gt; &#xA; &lt;li&gt;Ask for support on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/cel-go-discuss&#34;&gt;CEL Go Discuss&lt;/a&gt; Google group.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Where can I learn more about the internals?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://godoc.org/github.com/google/cel-go&#34;&gt;GoDoc&lt;/a&gt; to learn how to integrate CEL into services written in Go.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/google/cel-cpp&#34;&gt;CEL C++&lt;/a&gt; toolchain (under development) for information about how to integrate CEL evaluation into other environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How can I contribute?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to get started.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/google/cel-go/issues&#34;&gt;GitHub Issues&lt;/a&gt; to request features or report bugs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Some tests don&#39;t work with &lt;code&gt;go test&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;A handful of tests rely on &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;. In particular dynamic proto support at check time and the conformance test driver require Bazel to coordinate the test inputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bazel test ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the &lt;a href=&#34;https://raw.githubusercontent.com/google/cel-go/master/LICENSE&#34;&gt;Apache License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Disclaimer: This is not an official Google product.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>quic-go/quic-go</title>
    <updated>2023-05-04T01:35:06Z</updated>
    <id>tag:github.com,2023-05-04:/quic-go/quic-go</id>
    <link href="https://github.com/quic-go/quic-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A QUIC implementation in pure go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A QUIC implementation in pure Go&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/quic-go/quic-go/master/docs/quic.png&#34; width=&#34;303&#34; height=&#34;124&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/quic-go/quic-go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/quic-go/quic-go&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/quic-go/quic-go/&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/quic-go/quic-go/master.svg?style=flat-square&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;quic-go is an implementation of the QUIC protocol (&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9000&#34;&gt;RFC 9000&lt;/a&gt;, &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9001&#34;&gt;RFC 9001&lt;/a&gt;, &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9002&#34;&gt;RFC 9002&lt;/a&gt;) in Go, including the Unreliable Datagram Extension (&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9221&#34;&gt;RFC 9221&lt;/a&gt;) and Datagram Packetization Layer Path MTU Discovery (DPLPMTUD, &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8899&#34;&gt;RFC 8899&lt;/a&gt;). It has support for HTTP/3 (&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9114&#34;&gt;RFC 9114&lt;/a&gt;), including QPACK (&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9204&#34;&gt;RFC 9204&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;In addition to the RFCs listed above, it currently implements the &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-quic-transport-29&#34;&gt;IETF QUIC draft-29&lt;/a&gt;. Support for draft-29 will eventually be dropped, as it is phased out of the ecosystem.&lt;/p&gt; &#xA;&lt;h2&gt;Guides&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;We currently support Go 1.19.x and Go 1.20.x&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Running tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;QUIC without HTTP/3&lt;/h3&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/quic-go/quic-go/master/example/echo/echo.go&#34;&gt;this echo example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;As a server&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/quic-go/quic-go/master/example/main.go&#34;&gt;example server&lt;/a&gt;. Starting a QUIC server is very similar to the standard lib http in go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;http.Handle(&#34;/&#34;, http.FileServer(http.Dir(wwwDir)))&#xA;http3.ListenAndServeQUIC(&#34;localhost:4242&#34;, &#34;/path/to/cert/chain.pem&#34;, &#34;/path/to/privkey.pem&#34;, nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;As a client&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/quic-go/quic-go/master/example/client/main.go&#34;&gt;example client&lt;/a&gt;. Use a &lt;code&gt;http3.RoundTripper&lt;/code&gt; as a &lt;code&gt;Transport&lt;/code&gt; in a &lt;code&gt;http.Client&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;http.Client{&#xA;  Transport: &amp;amp;http3.RoundTripper{},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Projects using quic-go&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Stars&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/AdguardTeam/AdGuardHome&#34;&gt;AdGuardHome&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Free and open source, powerful network-wide ads &amp;amp; trackers blocking DNS server.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/AdguardTeam/AdGuardHome?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/xyproto/algernon&#34;&gt;algernon&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Small self-contained pure-Go web server with Lua, Markdown, HTTP/2, QUIC, Redis and PostgreSQL support&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/xyproto/algernon?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/caddyserver/caddy/&#34;&gt;caddy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fast, multi-platform web server with automatic HTTPS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/caddyserver/caddy?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cloudflare/cloudflared&#34;&gt;cloudflared&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A tunneling daemon that proxies traffic from the Cloudflare network to your origins&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/cloudflare/cloudflared?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/libp2p/go-libp2p&#34;&gt;go-libp2p&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;libp2p implementation in Go, powering &lt;a href=&#34;https://github.com/ipfs/kubo&#34;&gt;Kubo&lt;/a&gt; (IPFS) and &lt;a href=&#34;https://github.com/filecoin-project/lotus&#34;&gt;Lotus&lt;/a&gt; (Filecoin), among others&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/libp2p/go-libp2p?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/dunglas/mercure&#34;&gt;Mercure&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An open, easy, fast, reliable and battery-efficient solution for real-time communications&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/dunglas/mercure?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ooni/probe-cli&#34;&gt;OONI Probe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next generation OONI Probe. Library and CLI tool.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/ooni/probe-cli?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/syncthing/syncthing/&#34;&gt;syncthing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open Source Continuous File Synchronization&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/syncthing/syncthing?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/traefik/traefik&#34;&gt;traefik&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Cloud Native Application Proxy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/traefik/traefik?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/v2fly/v2ray-core&#34;&gt;v2ray-core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A platform for building proxies to bypass network restrictions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/v2fly/v2ray-core?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/yomorun/yomo&#34;&gt;YoMo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Streaming Serverless Framework for Geo-distributed System&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://img.shields.io/github/stars/yomorun/yomo?style=flat-square&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are always happy to welcome new contributors! We have a number of self-contained issues that are suitable for first-time contributors, they are tagged with &lt;a href=&#34;https://github.com/quic-go/quic-go/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;help wanted&lt;/a&gt;. If you have any questions, please feel free to reach out by opening an issue or leaving a comment.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Versent/saml2aws</title>
    <updated>2023-05-04T01:35:06Z</updated>
    <id>tag:github.com,2023-05-04:/Versent/saml2aws</id>
    <link href="https://github.com/Versent/saml2aws" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLI tool which enables you to login and retrieve AWS temporary credentials using a SAML IDP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;saml2aws&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Versent/saml2aws/actions?query=workflow%3AGo&#34;&gt;&lt;img src=&#34;https://github.com/Versent/saml2aws/workflows/Go/badge.svg?branch=master&#34; alt=&#34;GitHub Actions status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/davidobrien1985/saml2aws/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/ptpi18kci16o4i82/branch/master?svg=true&#34; alt=&#34;Build status - Windows&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Versent/saml2aws&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Versent/saml2aws/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CLI tool which enables you to login and retrieve &lt;a href=&#34;https://aws.amazon.com/&#34;&gt;AWS&lt;/a&gt; temporary credentials using with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/bb897402.aspx&#34;&gt;ADFS&lt;/a&gt; or &lt;a href=&#34;https://www.pingidentity.com/en/products/pingfederate.html&#34;&gt;PingFederate&lt;/a&gt; Identity Providers.&lt;/p&gt; &#xA;&lt;p&gt;This is based on python code from &lt;a href=&#34;https://blogs.aws.amazon.com/security/post/TxU0AVUS9J00FP/How-to-Implement-a-General-Solution-for-Federated-API-CLI-Access-Using-SAML-2-0&#34;&gt; How to Implement a General Solution for Federated API/CLI Access Using SAML 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The process goes something like this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setup an account alias, either using the default or given a name&lt;/li&gt; &#xA; &lt;li&gt;Prompt user for credentials&lt;/li&gt; &#xA; &lt;li&gt;Log in to Identity Provider using form based authentication&lt;/li&gt; &#xA; &lt;li&gt;Build a SAML assertion containing AWS roles&lt;/li&gt; &#xA; &lt;li&gt;Optionally cache the SAML assertion (the cache is not encrypted)&lt;/li&gt; &#xA; &lt;li&gt;Exchange the role and SAML assertion with &lt;a href=&#34;https://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html&#34;&gt;AWS STS service&lt;/a&gt; to get a temporary set of credentials&lt;/li&gt; &#xA; &lt;li&gt;Save these credentials to an aws profile named &#34;saml&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#saml2aws&#34;&gt;saml2aws&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#caveats&#34;&gt;Caveats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#osx&#34;&gt;OSX&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#linux&#34;&gt;Linux&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#using-make&#34;&gt;Using Make&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#arch-linux-and-its-derivatives&#34;&gt;Arch Linux and its derivatives&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#void-linux&#34;&gt;Void Linux&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#autocomplete&#34;&gt;Autocomplete&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#bash&#34;&gt;Bash&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#zsh&#34;&gt;Zsh&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#dependency-setup&#34;&gt;Dependency Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#saml2aws-script&#34;&gt;&lt;code&gt;saml2aws script&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#saml2aws-exec&#34;&gt;&lt;code&gt;saml2aws exec&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#configuring-idp-accounts&#34;&gt;Configuring IDP Accounts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#advanced-configuration&#34;&gt;Advanced Configuration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#windows-subsystem-linux-wsl-configuration&#34;&gt;Windows Subsystem Linux (WSL) Configuration&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#option-1-disable-keychain&#34;&gt;Option 1: Disable Keychain&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#option-2-configure-pass-to-be-the-default-keyring&#34;&gt;Option 2: Configure Pass to be the default keyring&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#configuring-multiple-accounts&#34;&gt;Configuring Multiple Accounts&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#dev-account-setup&#34;&gt;Dev Account Setup&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#test-account-setup&#34;&gt;Test Account Setup&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#advanced-configuration-multiple-aws-account-access-but-saml-authenticate-against-a-single-sso-aws-account&#34;&gt;Advanced Configuration (Multiple AWS account access but SAML authenticate against a single &#39;SSO&#39; AWS account)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#advanced-configuration---additional-parameters&#34;&gt;Advanced Configuration - additional parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#building&#34;&gt;Building&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#macos&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#linux-1&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#environment-vars&#34;&gt;Environment vars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#provider-specific-documentation&#34;&gt;Provider Specific Documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#releasing&#34;&gt;Releasing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#debugging-issues-with-idps&#34;&gt;Debugging Issues with IDPs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#using-saml2aws-as-credential-process&#34;&gt;Using saml2aws as credential process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#caching-the-saml2aws-saml-assertion-for-immediate-reuse&#34;&gt;Caching the saml2aws SAML assertion for immediate reuse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#okta-sessions&#34;&gt;Okta Sessions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One of the supported Identity Providers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ADFS (2.x or 3.x)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/doc/provider/aad/README.md&#34;&gt;AzureAD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;PingFederate + PingId&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/pkg/provider/okta/README.md&#34;&gt;Okta&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;KeyCloak + (TOTP)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/pkg/provider/googleapps/README.md&#34;&gt;Google Apps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/pkg/provider/shibboleth/README.md&#34;&gt;Shibboleth&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/pkg/provider/f5apm/README.md&#34;&gt;F5APM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/pkg/provider/akamai/README.md&#34;&gt;Akamai&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;OneLogin&lt;/li&gt; &#xA;   &lt;li&gt;NetIQ&lt;/li&gt; &#xA;   &lt;li&gt;Browser, this uses &lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/github.com/playwright-community/playwright-go&#34;&gt;playwright-go&lt;/a&gt; to run a sandbox chromium window.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/pkg/provider/auth0/README.md&#34;&gt;Auth0&lt;/a&gt; NOTE: Currently, MFA not supported&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;AWS SAML Provider configured&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Aside from Okta, most of the providers in this project are using screen scraping to log users into SAML, this isn&#39;t ideal and hopefully vendors make this easier in the future. In addition to this there are some things you need to know:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;AWS defaults to session tokens being issued with a duration of up to 3600 seconds (1 hour), this can now be configured as per &lt;a href=&#34;https://aws.amazon.com/blogs/security/enable-federated-api-access-to-your-aws-resources-for-up-to-12-hours-using-iam-roles/&#34;&gt;Enable Federated API Access to your AWS Resources for up to 12 hours Using IAM Roles&lt;/a&gt; and &lt;code&gt;--session-duration&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;Every SAML provider is different, the login process, MFA support is pluggable and therefore some work may be needed to integrate with your identity server&lt;/li&gt; &#xA; &lt;li&gt;By default, the temporary security credentials returned &lt;strong&gt;do not support SigV4A&lt;/strong&gt;. If you need SigV4A support then you must set the &lt;code&gt;AWS_STS_REGIONAL_ENDPOINTS&lt;/code&gt; enviornment variable to &lt;code&gt;regional&lt;/code&gt; when calling &lt;code&gt;saml2aws&lt;/code&gt; so that &lt;a href=&#34;https://github.com/aws/aws-sdk-go&#34;&gt;aws-sdk-go&lt;/a&gt; uses a regional STS endpoint instead of the global one. See the note at the bottom of &lt;a href=&#34;https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html#signature-versions&#34;&gt;Signing AWS API requests&lt;/a&gt; and &lt;a href=&#34;https://docs.aws.amazon.com/sdkref/latest/guide/feature-sts-regionalized-endpoints.html&#34;&gt;AWS STS Regionalized endpoints&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;OSX&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re on OSX you can install saml2aws using homebrew!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install saml2aws&#xA;saml2aws --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re on Windows you can &lt;a href=&#34;https://chocolatey.org/packages?q=saml2aws&#34;&gt;install saml2aws using chocolatey&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install saml2aws&#xA;saml2aws --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;While brew is available for Linux you can also run the following without using a package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CURRENT_VERSION=$(curl -Ls https://api.github.com/repos/Versent/saml2aws/releases/latest | grep &#39;tag_name&#39; | cut -d&#39;v&#39; -f2 | cut -d&#39;&#34;&#39; -f1)&#xA;wget -c &#34;https://github.com/Versent/saml2aws/releases/download/v${CURRENT_VERSION}/saml2aws_${CURRENT_VERSION}_linux_amd64.tar.gz&#34; -O - | tar -xzv -C ~/.local/bin&#xA;chmod u+x ~/.local/bin/saml2aws&#xA;hash -r&#xA;saml2aws --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If U2F support is required then there are separate builds for this - use the following download URL instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget -c &#34;https://github.com/Versent/saml2aws/releases/download/v${CURRENT_VERSION}/saml2aws-u2f_${CURRENT_VERSION}_linux_amd64.tar.gz&#34; -O - | tar -xzv -C ~/.local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Make&lt;/h4&gt; &#xA;&lt;p&gt;You will need &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go Tools&lt;/a&gt; (you can check your package maintainer as well) installed and the &lt;a href=&#34;https://github.com/alecthomas/gometalinter&#34;&gt;Go Lint tool&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clone this repo to your &lt;code&gt;$GOPATH/src&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;Now you can install by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://archlinux.org/&#34;&gt;Arch Linux&lt;/a&gt; and its derivatives&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;saml2aws&lt;/code&gt; tool is available in AUR (&lt;a href=&#34;https://aur.archlinux.org/packages/saml2aws-bin/&#34;&gt;saml2aws-bin&lt;/a&gt;), so you can install it using an available AUR helper:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manjaro: &lt;code&gt;$ pamac build saml2aws-bin&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://voidlinux.org/&#34;&gt;Void Linux&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you are on Void Linux you can use xbps to install the saml2aws package!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;xbps-install saml2aws&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Autocomplete&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;saml2aws&lt;/code&gt; can generate completion scripts.&lt;/p&gt; &#xA;&lt;h3&gt;Bash&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your &lt;code&gt;.bash_profile&lt;/code&gt; (or equivalent):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(saml2aws --completion-script-bash)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Zsh&lt;/h3&gt; &#xA;&lt;p&gt;Add the following line to your &lt;code&gt;.zshrc&lt;/code&gt; (or equivalent):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;eval &#34;$(saml2aws --completion-script-zsh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependency Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install the AWS CLI &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/installing.html&#34;&gt;see&lt;/a&gt;, in our case we are using &lt;a href=&#34;http://brew.sh/&#34;&gt;homebrew&lt;/a&gt; on OSX.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install awscli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;usage: saml2aws [&amp;lt;flags&amp;gt;] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt; ...]&#xA;&#xA;A command line tool to help with SAML access to the AWS token service.&#xA;&#xA;Flags:&#xA;      --help                   Show context-sensitive help (also try --help-long and --help-man).&#xA;      --version                Show application version.&#xA;      --quiet                  silences logs&#xA;      --verbose                Enable verbose logging&#xA;  -i, --provider=PROVIDER      This flag is obsolete. See: https://github.com/Versent/saml2aws#configuring-idp-accounts&#xA;  -a, --idp-account=&#34;default&#34;  The name of the configured IDP account. (env: SAML2AWS_IDP_ACCOUNT)&#xA;      --idp-provider=IDP-PROVIDER&#xA;                               The configured IDP provider. (env: SAML2AWS_IDP_PROVIDER)&#xA;      --mfa=MFA                The name of the mfa. (env: SAML2AWS_MFA)&#xA;  -s, --skip-verify            Skip verification of server certificate. (env: SAML2AWS_SKIP_VERIFY)&#xA;      --url=URL                The URL of the SAML IDP server used to login. (env: SAML2AWS_URL)&#xA;      --username=USERNAME      The username used to login. (env: SAML2AWS_USERNAME)&#xA;      --password=PASSWORD      The password used to login. (env: SAML2AWS_PASSWORD)&#xA;      --mfa-token=MFA-TOKEN    The current MFA token (supported in Keycloak, ADFS, GoogleApps, Okta). (env: SAML2AWS_MFA_TOKEN)&#xA;      --role=ROLE              The ARN of the role to assume. (env: SAML2AWS_ROLE)&#xA;      --aws-urn=AWS-URN        The URN used by SAML when you login. (env: SAML2AWS_AWS_URN)&#xA;      --skip-prompt            Skip prompting for parameters during login.&#xA;      --session-duration=SESSION-DURATION&#xA;                               The duration of your AWS Session. (env: SAML2AWS_SESSION_DURATION)&#xA;      --disable-keychain       Do not use keychain at all. (env: SAML2AWS_DISABLE_KEYCHAIN)&#xA;  -r, --region=REGION          AWS region to use for API requests, e.g. us-east-1, us-gov-west-1, cn-north-1 (env: SAML2AWS_REGION)&#xA;&#xA;Commands:&#xA;  help [&amp;lt;command&amp;gt;...]&#xA;    Show help.&#xA;&#xA;&#xA;  configure [&amp;lt;flags&amp;gt;]&#xA;    Configure a new IDP account.&#xA;&#xA;        --app-id=APP-ID            OneLogin app id required for SAML assertion. (env: ONELOGIN_APP_ID)&#xA;        --client-id=CLIENT-ID      OneLogin client id, used to generate API access token. (env: ONELOGIN_CLIENT_ID)&#xA;        --client-secret=CLIENT-SECRET&#xA;                                   OneLogin client secret, used to generate API access token. (env: ONELOGIN_CLIENT_SECRET)&#xA;        --subdomain=SUBDOMAIN      OneLogin subdomain of your company account. (env: ONELOGIN_SUBDOMAIN)&#xA;        --mfa-ip-address=MFA-IP-ADDRESS&#xA;                                   IP address whitelisting defined in OneLogin MFA policies. (env: ONELOGIN_MFA_IP_ADDRESS)&#xA;    -p, --profile=PROFILE          The AWS profile to save the temporary credentials. (env: SAML2AWS_PROFILE)&#xA;        --resource-id=RESOURCE-ID  F5APM SAML resource ID of your company account. (env: SAML2AWS_F5APM_RESOURCE_ID)&#xA;        --config=CONFIG            Path/filename of saml2aws config file (env: SAML2AWS_CONFIGFILE)&#xA;        --cache-saml               Caches the SAML response (env: SAML2AWS_CACHE_SAML)&#xA;        --cache-file=CACHE-FILE    The location of the SAML cache file (env: SAML2AWS_SAML_CACHE_FILE)&#xA;        --disable-sessions         Do not use Okta sessions. Uses Okta sessions by default. (env: SAML2AWS_OKTA_DISABLE_SESSIONS)&#xA;        --disable-remember-device  Do not remember Okta MFA device. Remembers MFA device by default. (env: SAML2AWS_OKTA_DISABLE_REMEMBER_DEVICE)&#xA;&#xA;  login [&amp;lt;flags&amp;gt;]&#xA;    Login to a SAML 2.0 IDP and convert the SAML assertion to an STS token.&#xA;&#xA;    -p, --profile=PROFILE        The AWS profile to save the temporary credentials. (env: SAML2AWS_PROFILE)&#xA;        --duo-mfa-option=DUO-MFA-OPTION&#xA;                                 The MFA option you want to use to authenticate with&#xA;        --client-id=CLIENT-ID    OneLogin client id, used to generate API access token. (env: ONELOGIN_CLIENT_ID)&#xA;        --client-secret=CLIENT-SECRET&#xA;                                 OneLogin client secret, used to generate API access token. (env: ONELOGIN_CLIENT_SECRET)&#xA;        --mfa-ip-address=MFA-IP-ADDRESS&#xA;                                 IP address whitelisting defined in OneLogin MFA policies. (env: ONELOGIN_MFA_IP_ADDRESS)&#xA;        --force                  Refresh credentials even if not expired.&#xA;        --credential-process     Enables AWS Credential Process support by outputting credentials to STDOUT in a JSON message.&#xA;        --credentials-file=CREDENTIALS-FILE&#xA;                                 The file that will cache the credentials retrieved from AWS. When not specified, will use the default AWS credentials file location. (env: SAML2AWS_CREDENTIALS_FILE)&#xA;        --cache-saml             Caches the SAML response (env: SAML2AWS_CACHE_SAML)&#xA;        --cache-file=CACHE-FILE  The location of the SAML cache file (env: SAML2AWS_SAML_CACHE_FILE)&#xA;        --download-browser-driver  Automatically download browsers for Browser IDP. (env: SAML2AWS_AUTO_BROWSER_DOWNLOAD)&#xA;        --disable-sessions         Do not use Okta sessions. Uses Okta sessions by default. (env: SAML2AWS_OKTA_DISABLE_SESSIONS)&#xA;        --disable-remember-device  Do not remember Okta MFA device. Remembers MFA device by default. (env: SAML2AWS_OKTA_DISABLE_REMEMBER_DEVICE)&#xA;&#xA;  exec [&amp;lt;flags&amp;gt;] [&amp;lt;command&amp;gt;...]&#xA;    Exec the supplied command with env vars from STS token.&#xA;&#xA;    -p, --profile=PROFILE      The AWS profile to save the temporary credentials. (env: SAML2AWS_PROFILE)&#xA;        --exec-profile=EXEC-PROFILE&#xA;                               The AWS profile to utilize for command execution. Useful to allow the aws cli to perform secondary role assumption. (env: SAML2AWS_EXEC_PROFILE)&#xA;        --credentials-file=CREDENTIALS-FILE&#xA;                               The file that will cache the credentials retrieved from AWS. When not specified, will use the default AWS credentials file location. (env: SAML2AWS_CREDENTIALS_FILE)&#xA;&#xA;  console [&amp;lt;flags&amp;gt;]&#xA;    Console will open the aws console after logging in.&#xA;&#xA;        --exec-profile=EXEC-PROFILE&#xA;                               The AWS profile to utilize for console execution. (env: SAML2AWS_EXEC_PROFILE)&#xA;    -p, --profile=PROFILE      The AWS profile to save the temporary credentials. (env: SAML2AWS_PROFILE)&#xA;        --force                Refresh credentials even if not expired.&#xA;        --link                 Present link to AWS console instead of opening browser&#xA;        --credentials-file=CREDENTIALS-FILE&#xA;                               The file that will cache the credentials retrieved from AWS. When not specified, will use the default AWS credentials file location. (env: SAML2AWS_CREDENTIALS_FILE)&#xA;&#xA;  list-roles&#xA;    List available role ARNs.&#xA;        --cache-saml             Caches the SAML response (env: SAML2AWS_CACHE_SAML)&#xA;        --cache-file=CACHE-FILE  The location of the SAML cache file (env: SAML2AWS_SAML_CACHE_FILE)&#xA;&#xA;&#xA;  script [&amp;lt;flags&amp;gt;]&#xA;    Emit a script that will export environment variables.&#xA;&#xA;    -p, --profile=PROFILE      The AWS profile to save the temporary credentials. (env: SAML2AWS_PROFILE)&#xA;        --shell=bash           Type of shell environment. Options include: bash, /bin/sh, powershell, fish, env&#xA;        --credentials-file=CREDENTIALS-FILE&#xA;                               The file that will cache the credentials retrieved from AWS. When not specified, will use the default AWS credentials file location. (env: SAML2AWS_CREDENTIALS_FILE)&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;saml2aws script&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If the &lt;code&gt;script&lt;/code&gt; sub-command is called, &lt;code&gt;saml2aws&lt;/code&gt; will output the following temporary security credentials:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export AWS_ACCESS_KEY_ID=&#34;ASIAI....UOCA&#34;&#xA;export AWS_SECRET_ACCESS_KEY=&#34;DuH...G1d&#34;&#xA;export AWS_SESSION_TOKEN=&#34;AQ...1BQ==&#34;&#xA;export AWS_SECURITY_TOKEN=&#34;AQ...1BQ==&#34;&#xA;export AWS_CREDENTIAL_EXPIRATION=&#34;2016-09-04T38:27:00Z00:00&#34;&#xA;SAML2AWS_PROFILE=saml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Powershell, sh and fish shells are supported as well. Env is useful for all AWS SDK compatible tools that can source an env file. It is a powerful combo with docker and the &lt;code&gt;--env-file&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;eval $(saml2aws script)&lt;/code&gt; frequently, you may want to create a alias for it:&lt;/p&gt; &#xA;&lt;p&gt;zsh:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias s2a=&#34;function(){eval $( $(command saml2aws) script --shell=bash --profile=$@);}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;bash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;function s2a { eval $( $(which saml2aws) script --shell=bash --profile=$@); }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;env:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -ti --env-file &amp;lt;(saml2aws script --shell=env) amazon/aws-cli s3 ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;saml2aws exec&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If the &lt;code&gt;exec&lt;/code&gt; sub-command is called, &lt;code&gt;saml2aws&lt;/code&gt; will execute the command given as an argument: By default saml2aws will execute the command with temp credentials generated via &lt;code&gt;saml2aws login&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--exec-profile&lt;/code&gt; flag allows for a command to execute using an aws profile which may have chained &#34;assume role&#34; actions. (via &#39;source_profile&#39; in ~/.aws/config)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;options:&#xA;--exec-profile           Execute the given command utilizing a specific profile from your ~/.aws/config file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring IDP Accounts&lt;/h3&gt; &#xA;&lt;p&gt;This is the &lt;em&gt;new&lt;/em&gt; way of adding IDP provider accounts, it enables you to have named accounts with whatever settings you like and supports having one &lt;em&gt;default&lt;/em&gt; account which is used if you omit the account flag. This replaces the --provider flag and old configuration file in 1.x.&lt;/p&gt; &#xA;&lt;p&gt;To add a default IdP account to saml2aws just run the following command and follow the prompts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ saml2aws configure&#xA;? Please choose a provider: Ping&#xA;? AWS Profile myaccount&#xA;&#xA;? URL https://example.com&#xA;? Username me@example.com&#xA;&#xA;? Password&#xA;No password supplied&#xA;&#xA;account {&#xA;  URL: https://example.com&#xA;  Username: me@example.com&#xA;  Provider: Ping&#xA;  MFA: Auto&#xA;  SkipVerify: false&#xA;  AmazonWebservicesURN: urn:amazon:webservices&#xA;  SessionDuration: 3600&#xA;  Profile: myaccount&#xA;  Region: us-east-1&#xA;}&#xA;&#xA;Configuration saved for IDP account: default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to login using this account.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add named accounts, below is an example where I am setting up an account under the &lt;code&gt;wolfeidau&lt;/code&gt; alias, again just follow the prompts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws configure -a wolfeidau&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also configure the account alias without prompts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws configure -a wolfeidau --idp-provider KeyCloak --username mark@wolfe.id.au -r cn-north-1  \&#xA;  --url https://keycloak.wolfe.id.au/auth/realms/master/protocol/saml/clients/amazon-aws --skip-prompt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then your ready to use saml2aws.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Log into a service (without MFA).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ saml2aws login&#xA;Using IDP Account default to access Ping https://id.example.com&#xA;To use saved password just hit enter.&#xA;Username [mark.wolfe@example.com]:&#xA;Password: ************&#xA;&#xA;Authenticating as mark.wolfe@example.com ...&#xA;Selected role: arn:aws:iam::123123123123:role/AWS-Admin-CloudOPSNonProd&#xA;Requesting AWS credentials using SAML assertion&#xA;Saving credentials&#xA;Logged in as: arn:aws:sts::123123123123:assumed-role/AWS-Admin-CloudOPSNonProd/wolfeidau@example.com&#xA;&#xA;Your new access key pair has been stored in the AWS configuration&#xA;Note that it will expire at 2016-09-19 15:59:49 +1000 AEST&#xA;To use this credential, call the AWS CLI with the --profile option (e.g. aws --profile saml ec2 describe-instances).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log into a service (with MFA).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ saml2aws login&#xA;Using IDP Account default to access Ping https://id.example.com&#xA;To use saved password just hit enter.&#xA;Username [mark.wolfe@example.com]:&#xA;Password: ************&#xA;&#xA;Authenticating as mark.wolfe@example.com ...&#xA;Enter passcode: 123456&#xA;&#xA;Selected role: arn:aws:iam::123123123123:role/AWS-Admin-CloudOPSNonProd&#xA;Requesting AWS credentials using SAML assertion&#xA;Saving credentials&#xA;Logged in as: arn:aws:sts::123123123123:assumed-role/AWS-Admin-CloudOPSNonProd/wolfeidau@example.com&#xA;&#xA;Your new access key pair has been stored in the AWS configuration&#xA;Note that it will expire at 2016-09-19 15:59:49 +1000 AEST&#xA;To use this credential, call the AWS CLI with the --profile option (e.g. aws --profile saml ec2 describe-instances --region us-east-1).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Windows Subsystem Linux (WSL) Configuration&lt;/h3&gt; &#xA;&lt;p&gt;If you are using WSL1 or WSL2, you might get the following error when attempting to save the credentials into the keychain&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; No such interface “org.freedesktop.DBus.Properties” on object at path /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This happens because the preferred keyring back-end - uses the &lt;code&gt;gnome-keyring&lt;/code&gt; by default - which requires X11 - and if you are not using Windows 11 with support for Linux GUI applications - this can be difficult without &lt;a href=&#34;https://stackoverflow.com/questions/61110603/how-to-set-up-working-x11-forwarding-on-wsl2&#34;&gt;configuring a X11 forward&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are 2 preferred approaches to workaround this issue:&lt;/p&gt; &#xA;&lt;h4&gt;Option 1: Disable Keychain&lt;/h4&gt; &#xA;&lt;p&gt;You can apply the &lt;code&gt;--disable-keychain&lt;/code&gt; flag when using both the &lt;code&gt;configure&lt;/code&gt; and &lt;code&gt;login&lt;/code&gt; commands. Using this flag means that your credentials (such as your password to your IDP, or in the case of Okta the Okta Session Token) will not save to your keychain - and be skipped entierly. This means you will be required to enter your username and password each time you invoke the &lt;code&gt;login&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h4&gt;Option 2: Configure Pass to be the default keyring&lt;/h4&gt; &#xA;&lt;p&gt;There are a few steps involved with this option - however this option will save your credentials (such as your password to your IDP, and session tokens etc) into the &lt;code&gt;pass&lt;/code&gt;[https://www.passwordstore.org/] keyring. The &lt;code&gt;pass&lt;/code&gt; keyring is the standard Unix password manager. This option was &lt;em&gt;heavily inspired&lt;/em&gt; by a similar issue in &lt;a href=&#34;https://github.com/99designs/aws-vault/issues/683&#34;&gt;aws-vault&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To configure pass to be the default keyring the following steps will need to be completed (assuming you are using Ubuntu 20.04 LTS):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the pass backend and update gnupg, which encrypts passwords&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y pass gnupg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Generate a key with gpg (gnupg) and take note of your public key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gpg --gen-key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output of the gpg command will output the something similar to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;public and secret key created and signed.&#xA;&#xA;pub   rsa3072 2021-04-22 [SC] [expires: 2023-04-22]&#xA;      844E426A53A64C2A916CBD1F522014D5FDBF6E3D&#xA;uid                      Meir Gabay &amp;lt;willy@wonka.com&amp;gt;&#xA;sub   rsa3072 2021-04-22 [E] [expires: 2023-04-22]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a storage key in pass from the previously generated public (pub) key&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pass init &amp;lt;GPG_PUBLIC_KEY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;during the &lt;code&gt;init&lt;/code&gt; process you&#39;ll be requested to enter the passphrase provided in step 2&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Now, configure &lt;code&gt;saml2aws&lt;/code&gt; to use the &lt;code&gt;pass&lt;/code&gt; keyring. This can be done by setting the &lt;code&gt;SAML2AWS_KEYRING_BACKEND&lt;/code&gt; environment variable to be &lt;code&gt;pass&lt;/code&gt;. You&#39;ll need to also set the &lt;code&gt;GPG_TTY&lt;/code&gt; to your current tty which means you can set the variable to &lt;code&gt;&#34;$( tty )&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;which means the following can be added into your profile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export SAML2AWS_KEYRING_BACKEND=pass&#xA;export GPG_TTY=&#34;$( tty )&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Profit! Now when you run login/configure commands - you&#39;ll be promoted once to enter your passphrase - and your credentials will be saved into your keyring!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Configuring Multiple Accounts&lt;/h3&gt; &#xA;&lt;p&gt;Configuring multiple accounts with custom role and profile in &lt;code&gt;~/.aws/config&lt;/code&gt; with goal being isolation between infra code when deploying to these environments. This setup assumes you&#39;re using separate roles and probably AWS accounts for &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; and is designed to help operations staff avoid accidentally deploying to the wrong AWS account in complex environments. Note that this method configures SAML authentication to each AWS account directly (in this case different AWS accounts). In the example below, separate authentication values are configured for AWS accounts &#39;profile=customer-dev/awsAccount=was 121234567890&#39; and &#39;profile=customer-test/awsAccount=121234567891&#39;&lt;/p&gt; &#xA;&lt;h4&gt;Dev Account Setup&lt;/h4&gt; &#xA;&lt;p&gt;To setup the dev account run the following and enter URL, username and password, and assign a standard role to be automatically selected on login.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws configure -a customer-dev --role=arn:aws:iam::121234567890:role/customer-admin-role -p customer-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will result in the following configuration in &lt;code&gt;~/.saml2aws&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[customer-dev]&#xA;url                     = https://id.customer.cloud&#xA;username                = mark@wolfe.id.au&#xA;provider                = Ping&#xA;mfa                     = Auto&#xA;skip_verify             = false&#xA;timeout                 = 0&#xA;aws_urn                 = urn:amazon:webservices&#xA;aws_session_duration    = 28800&#xA;aws_profile             = customer-dev&#xA;role_arn                = arn:aws:iam::121234567890:role/customer-admin-role&#xA;region                  = us-east-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this you will need to export &lt;code&gt;AWS_DEFAULT_PROFILE=customer-dev&lt;/code&gt; environment variable to target &lt;code&gt;dev&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Test Account Setup&lt;/h4&gt; &#xA;&lt;p&gt;To setup the test account run the following and enter URL, username and password.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws configure -a customer-test --role=arn:aws:iam::121234567891:role/customer-admin-role -p customer-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This results in the following configuration in &lt;code&gt;~/.saml2aws&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[customer-test]&#xA;url                     = https://id.customer.cloud&#xA;username                = mark@wolfe.id.au&#xA;provider                = Ping&#xA;mfa                     = Auto&#xA;skip_verify             = false&#xA;timeout                 = 0&#xA;aws_urn                 = urn:amazon:webservices&#xA;aws_session_duration    = 28800&#xA;aws_profile             = customer-test&#xA;role_arn                = arn:aws:iam::121234567891:role/customer-admin-role&#xA;region                  = us-east-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use this you will need to export &lt;code&gt;AWS_DEFAULT_PROFILE=customer-test&lt;/code&gt; environment variable to target &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Playwright Browser Drivers for Browser IDP&lt;/h3&gt; &#xA;&lt;p&gt;If you are using the Browser Identity Provider, on first invocation of &lt;code&gt;saml2aws login&lt;/code&gt; you need to remember to install the browser drivers in order for playwright-go to work. Otherwise you will see the following error message:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Error authenticating to IDP.: could not start driver: fork/exec ... no such file or directory&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To install the drivers, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pass &lt;code&gt;--download-browser-driver&lt;/code&gt; to &lt;code&gt;saml2aws login&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set in your shell environment &lt;code&gt;SAML2AWS_AUTO_BROWSER_DOWNLOAD=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;download_browser_driver = true&lt;/code&gt; in your saml2aws config file, i.e. &lt;code&gt;~/.saml2aws&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Configuration (Multiple AWS account access but SAML authenticate against a single &#39;SSO&#39; AWS account)&lt;/h2&gt; &#xA;&lt;p&gt;Example: (Authenticate to my &#39;SSO&#39; AWS account. With this setup, there is no need to authenticate again. We can now rely on IAM to assume role cross account)&lt;/p&gt; &#xA;&lt;p&gt;~/.aws/credentials: #(these are generated by &lt;code&gt;saml2aws login&lt;/code&gt;. Sets up SAML authentication into my AWS &#39;SSO&#39; account)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[saml]&#xA;aws_access_key_id        = AAAAAAAAAAAAAAAAB&#xA;aws_secret_access_key    = duqhdZPRjEdZPRjE=dZPRjEhKjfB&#xA;aws_session_token        = #REMOVED#&#xA;aws_security_token       = #REMOVED#&#xA;x_principal_arn          = arn:aws:sts::000000000123:assumed-role/myInitialAccount&#xA;x_security_token_expires = 2019-08-19T15:00:56-06:00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(Use AWS profiles to assume an aws role cross-account) (Note that the &#34;source_profile&#34; is set to SAML which is my SSO AWS account since it is already authenticated)&lt;/p&gt; &#xA;&lt;p&gt;~/.aws/config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[profile roleIn2ndAwsAccount]&#xA;source_profile=saml&#xA;role_arn=arn:aws:iam::123456789012:role/OtherRoleInAnyFederatedAccount # Note the different account number here&#xA;role_session_name=myAccountName&#xA;&#xA;[profile extraRroleIn2ndAwsAccount]&#xA;# this profile uses a _third_ level of role assumption&#xA;source_profile=roleIn2ndAwsAccount&#xA;role_arn=arn:aws:iam::123456789012:role/OtherRoleInAnyFederatedAccount&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running saml2aws without --exec-profile flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws exec aws sts get-caller-identity&#xA;{&#xA;    &#34;UserId&#34;: &#34;AROAYAROAYAROAYOO:myInitialAccount&#34;,&#xA;    &#34;Account&#34;: &#34;000000000123&#34;,&#xA;    &#34;Arn&#34;: &#34;arn:aws:sts::000000000123:assumed-role/myInitialAccount&#34;  # This shows my &#39;SSO&#39; account (SAML profile)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running saml2aws with --exec-profile flag:&lt;/p&gt; &#xA;&lt;p&gt;When using &#39;--exec-profile&#39; I can assume-role into a different AWS account without re-authenticating. Note that it does not re-authenticate since we are already authenticated via the SSO account.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws exec --exec-profile roleIn2ndAwsAccount aws sts get-caller-identity&#xA;{&#xA;    &#34;UserId&#34;: &#34;YOOYOOYOOYOOYOOA:/myAccountName&#34;,&#xA;    &#34;Account&#34;: &#34;123456789012&#34;,&#xA;    &#34;Arn&#34;: &#34;arn:aws:sts::123456789012:assumed-role/myAccountName&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws login&#xA;&#xA;aws s3 ls --profile saml&#xA;&#xA;An error occurred (AccessDenied) when calling the ListBuckets operation: Access Denied&#xA;# This is denied in this example because there are no S3 buckets in the &#39;SSO&#39; AWS account&#xA;&#xA;saml2aws exec --exec-profile roleIn2ndAwsAccount aws s3 ls  # Runs given CMD with environment configured from --exec-profile role&#xA;&#xA;# If we check env variables we see that our environment is configured with temporary credentials for our &#39;assumed role&#39;&#xA;env | grep AWS&#xA;AWS_SESSION_TTL=12h&#xA;AWS_FEDERATION_TOKEN_TTL=12h&#xA;AWS_ASSUME_ROLE_TTL=1h&#xA;AWS_ACCESS_KEY_ID=AAAAAAAASORTENED&#xA;AWS_SECRET_ACCESS_KEY=secretShortened+6jJ5SMqsM5CkYi3Gw7&#xA;AWS_SESSION_TOKEN=ShortenedTokenXXX=&#xA;AWS_SECURITY_TOKEN=ShortenedSecurityTokenXXX=&#xA;AWS_CREDENTIAL_EXPIRATION=2016-09-04T38:27:00Z00:00&#xA;&#xA;# If we desire to execute multiple commands utilizing our assumed profile, we can obtain a new shell with Env variables configured for access&#xA;&#xA;saml2aws exec --exec-profile roleIn2ndAwsAccount $SHELL  # Get a new shell with AWS env vars configured for &#39;assumed role&#39; account access&#xA;&#xA;# We are now able to execute AWS cli commands with our assume role permissions&#xA;&#xA;# Note that we do not need a --profile flag because our environment variables were set up for this access when we obtained a new shell with the --exec-profile flag&#xA;&#xA;aws s3 ls&#xA;2019-07-30 01:32:59 264998d7606497040-sampleBucket&#xA;&#xA;aws iam list-groups&#xA;{&#xA;    &#34;Groups&#34;: [&#xA;        {&#xA;            &#34;Path&#34;: &#34;/&#34;,&#xA;            &#34;GroupName&#34;: &#34;MyGroup&#34;,&#xA;            &#34;GroupId&#34;: &#34;AGAGTENTENTENGOCQFK&#34;,&#xA;            &#34;Arn&#34;: &#34;arn:aws:iam::123456789012:group/MyGroup&#34;,&#xA;            &#34;CreateDate&#34;: &#34;2019-05-13T16:12:19Z&#34;&#xA;            ]&#xA;        }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Configuration - additional parameters&lt;/h2&gt; &#xA;&lt;p&gt;There are few additional parameters allowing to customise saml2aws configuration. Use following parameters in &lt;code&gt;~/.saml2aws&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http_attempts_count&lt;/code&gt; - configures the number of attempts to send http requests in order to authorise with saml provider. Defaults to 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http_retry_delay&lt;/code&gt; - configures the duration (in seconds) of timeout between attempts to send http requests to saml provider. Defaults to 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;region&lt;/code&gt; - configures which region endpoints to use, See &lt;a href=&#34;https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_create_saml_assertions.html#saml_audience-restriction&#34;&gt;Audience&lt;/a&gt; and &lt;a href=&#34;https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arns-syntax&#34;&gt;partition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;target_url&lt;/code&gt; - look for a target endpoint other than signin.aws.amazon.com/saml. The Okta, Pingfed, Pingone and Shibboleth ECP providers need to either explicitly send or look for this URL in a response in order to obtain or identify an appropriate authentication response. This can be overridden here if you wish to authenticate for something other than AWS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example: typical configuration with such parameters would look like follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[default]&#xA;url                     = https://id.customer.cloud&#xA;username                = user@versent.com.au&#xA;provider                = Ping&#xA;mfa                     = Auto&#xA;skip_verify             = false&#xA;timeout                 = 0&#xA;aws_urn                 = urn:amazon:webservices&#xA;aws_session_duration    = 28800&#xA;aws_profile             = customer-dev&#xA;role_arn                = arn:aws:iam::121234567890:role/customer-admin-role&#xA;http_attempts_count     = 3&#xA;http_retry_delay        = 1&#xA;region                  = us-east-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;To build this software on osx clone to the repo to &lt;code&gt;$GOPATH/src/github.com/versent/saml2aws&lt;/code&gt; and ensure you have &lt;code&gt;$GOPATH/bin&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make mod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the binary to &lt;code&gt;$GOPATH/bin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then to test the software just run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before raising a PR please run the linter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make lint-fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;To build this software on Debian/Ubuntu, you need to install a build dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install libudev-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You also need &lt;a href=&#34;https://github.com/goreleaser/goreleaser&#34;&gt;GoReleaser&lt;/a&gt; installed, and the binary (or a symlink) in &lt;code&gt;bin/goreleaser&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ln -s $(command -v goreleaser) bin/goreleaser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment vars&lt;/h2&gt; &#xA;&lt;p&gt;The exec sub command will export the following environment variables.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AWS_ACCESS_KEY_ID&lt;/li&gt; &#xA; &lt;li&gt;AWS_SECRET_ACCESS_KEY&lt;/li&gt; &#xA; &lt;li&gt;AWS_SESSION_TOKEN&lt;/li&gt; &#xA; &lt;li&gt;AWS_SECURITY_TOKEN&lt;/li&gt; &#xA; &lt;li&gt;EC2_SECURITY_TOKEN&lt;/li&gt; &#xA; &lt;li&gt;AWS_PROFILE&lt;/li&gt; &#xA; &lt;li&gt;AWS_DEFAULT_PROFILE&lt;/li&gt; &#xA; &lt;li&gt;AWS_CREDENTIAL_EXPIRATION&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: That profile environment variables enable you to use &lt;code&gt;exec&lt;/code&gt; with a script or command which requires an explicit profile.&lt;/p&gt; &#xA;&lt;h2&gt;Provider Specific Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/doc/provider/aad&#34;&gt;Azure Active Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Versent/saml2aws/master/doc/provider/jumpcloud&#34;&gt;JumpCloud&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;p&gt;This tool would not be possible without some great opensource libraries.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PuerkitoBio/goquery&#34;&gt;goquery&lt;/a&gt; html querying&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beevik/etree&#34;&gt;etree&lt;/a&gt; xpath selector&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/kingpin&#34;&gt;kingpin&lt;/a&gt; command line flags&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aws/aws-sdk-go&#34;&gt;aws-sdk-go&lt;/a&gt; AWS Go SDK&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-ini/ini&#34;&gt;go-ini&lt;/a&gt; INI file parser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Azure/go-ntlmssp&#34;&gt;go-ntlmssp&lt;/a&gt; NTLM/Negotiate authentication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Releasing&lt;/h1&gt; &#xA;&lt;p&gt;Install &lt;code&gt;github-release&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/buildkite/github-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To release run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Debugging Issues with IDPs&lt;/h1&gt; &#xA;&lt;p&gt;There are two levels of debugging, first emits debug information and the URL / Method / Status line of requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;saml2aws login --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second emits the content of requests and responses, this includes authentication related information so don&#39;t copy and paste it into chat or tickets!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;DUMP_CONTENT=true saml2aws login --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using saml2aws as credential process&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/awsprocesscreds&#34;&gt;Credential Process&lt;/a&gt; is a convenient way of interfacing credential providers with the AWS Cli.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;saml2aws&lt;/code&gt; as a credential provider by simply configuring it and then adding a profile to the AWS configuration. &lt;code&gt;saml2aws&lt;/code&gt; has a flag &lt;code&gt;--credential-process&lt;/code&gt; generating an output with the right JSON format, as well as a flag &lt;code&gt;--quiet&lt;/code&gt; that will block the logging from being displayed. The AWS credential file (typically ~/.aws/credentials) has precedence over the credential_process provider. That means that if credentials are present in the file, the credential process will not trigger. To counter that you can override the aws credential location of &lt;code&gt;saml2aws&lt;/code&gt; to another file using &lt;code&gt;--credential-file&lt;/code&gt; or specifying it during &lt;code&gt;configure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example of the aws configuration (&lt;code&gt;~/.aws/config&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[profile mybucket]&#xA;region = us-west-1&#xA;credential_process = saml2aws login --skip-prompt --quiet --credential-process --role &amp;lt;ROLE&amp;gt; --profile mybucket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using the aws cli with the &lt;code&gt;mybucket&lt;/code&gt; profile, the authentication process will be run and the aws will then be executed based on the returned credentials.&lt;/p&gt; &#xA;&lt;h1&gt;Caching the saml2aws SAML assertion for immediate reuse&lt;/h1&gt; &#xA;&lt;p&gt;You can use the flag &lt;code&gt;--cache-saml&lt;/code&gt; in order to cache the SAML assertion at authentication time. The SAML assertion cache has a very short validity (5 min) and can be used to authenticate to several roles with a single MFA validation.&lt;/p&gt; &#xA;&lt;p&gt;there is a file per saml2aws profile, the cache directory is called &lt;code&gt;saml2aws&lt;/code&gt; and is located in your &lt;code&gt;.aws&lt;/code&gt; directory in your user homedir.&lt;/p&gt; &#xA;&lt;p&gt;You can toggle &lt;code&gt;--cache-saml&lt;/code&gt; during &lt;code&gt;login&lt;/code&gt; or during &lt;code&gt;list-roles&lt;/code&gt;, and you can set it once during &lt;code&gt;configure&lt;/code&gt; and use it implicitly.&lt;/p&gt; &#xA;&lt;h1&gt;Okta Sessions&lt;/h1&gt; &#xA;&lt;p&gt;This requires the use of the keychain (local credentials store). If you disabled the keychain using &lt;code&gt;--disable-keychain&lt;/code&gt;, Okta sessions will also be disabled.&lt;/p&gt; &#xA;&lt;p&gt;Okta sessions are enabled by default. This will store the Okta session locally and save your device for MFA. This means that if the session has not yet expired, you will not be prompted for MFA.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To disable remembering the device, you can toggle &lt;code&gt;--disable-remember-device&lt;/code&gt; during &lt;code&gt;login&lt;/code&gt; or &lt;code&gt;configure&lt;/code&gt; commands.&lt;/li&gt; &#xA; &lt;li&gt;To disable using Okta sessions, you can toggle &lt;code&gt;--disable-sessions&lt;/code&gt; during &lt;code&gt;login&lt;/code&gt; or &lt;code&gt;configure&lt;/code&gt; commands. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This will also disable the Okta MFA remember device feature&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--force&lt;/code&gt; flag during &lt;code&gt;login&lt;/code&gt; command to prompt for AWS role selection.&lt;/p&gt; &#xA;&lt;p&gt;If Okta sessions are disabled via any of the methods mentioned above, the login process will default to the standard authentication process (without using sessions).&lt;/p&gt; &#xA;&lt;p&gt;Please note that your Okta session duration and MFA policies are governed by your Okta host organization.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This code is Copyright (c) 2018 &lt;a href=&#34;http://versent.com.au&#34;&gt;Versent&lt;/a&gt; and released under the MIT license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE.md file for more details.&lt;/p&gt;</summary>
  </entry>
</feed>