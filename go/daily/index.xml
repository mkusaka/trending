<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-12T01:30:44Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dolthub/go-mysql-server</title>
    <updated>2024-04-12T01:30:44Z</updated>
    <id>tag:github.com,2024-04-12:/dolthub/go-mysql-server</id>
    <link href="https://github.com/dolthub/go-mysql-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A MySQL-compatible relational database with a storage agnostic query engine. Implemented in pure Go.&lt;/p&gt;&lt;hr&gt;&lt;img height=&#34;240&#34; src=&#34;https://raw.githubusercontent.com/dolthub/go-mysql-server/main/mascot.png&#34;&gt; &#xA;&lt;h1&gt;A MySQL compatible database engine written in pure Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;go-mysql-server&lt;/strong&gt; is a data-source agnostic SQL engine and server which runs queries on data sources you provide, using the MySQL dialect and wire protocol. A simple in-memory database implementation is included, and you can query any data source you want by implementing your own backend.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.doltdb.com&#34;&gt;Dolt&lt;/a&gt;, a SQL database with Git-style versioning, is the main production database implementation of this package. &lt;a href=&#34;https://docs.dolthub.com/introduction/what-is-dolt&#34;&gt;Check out&lt;/a&gt; that project for a reference implementation. Or, hop into the Dolt Discord server &lt;a href=&#34;https://discord.com/invite/RFwfYpu&#34;&gt;here&lt;/a&gt; if you want to talk to the &lt;a href=&#34;https://www.dolthub.com/team&#34;&gt;core developers&lt;/a&gt; behind &lt;strong&gt;go-mysql-server&lt;/strong&gt; and Dolt.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;With the exception of specific limitations (see below), &lt;strong&gt;go-mysql-server&lt;/strong&gt; is a drop-in replacement for MySQL. Any client library, tool, query, SQL syntax, SQL function, etc. that works with MySQL should also work with &lt;strong&gt;go-mysql-server&lt;/strong&gt;. If you find a gap in functionality, please file an issue.&lt;/p&gt; &#xA;&lt;p&gt;For full MySQL compatibility documentation, see the &lt;a href=&#34;https://docs.dolthub.com/sql-reference/sql-support&#34;&gt;Dolt docs&lt;/a&gt; on this topic.&lt;/p&gt; &#xA;&lt;h2&gt;Scope of this project&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQL server and engine to query your data sources.&lt;/li&gt; &#xA; &lt;li&gt;In-memory database backend implementation suitable for use in tests.&lt;/li&gt; &#xA; &lt;li&gt;Interfaces you can use to implement new backends to query your own data sources.&lt;/li&gt; &#xA; &lt;li&gt;With a few caveats and using a full database implementation, a drop-in MySQL database replacement.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;go-mysql-server&lt;/strong&gt; has two primary uses case:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Stand-in for MySQL in a golang test environment, using the built-in &lt;code&gt;memory&lt;/code&gt; database implementation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Providing access to arbitrary data sources with SQL queries by implementing a handful of interfaces. The most complete real-world implementation is &lt;a href=&#34;https://github.com/dolthub/dolt&#34;&gt;Dolt&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;strong&gt;go-mysql-server&lt;/strong&gt; as a dependency to your project. In the directory with the &lt;code&gt;go.mod&lt;/code&gt; file, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/dolthub/go-mysql-server@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the in-memory test server&lt;/h2&gt; &#xA;&lt;p&gt;The in-memory test server can replace a real MySQL server in tests. Start the server using the code in the &lt;a href=&#34;https://raw.githubusercontent.com/dolthub/go-mysql-server/main/_example/main.go&#34;&gt;_example directory&lt;/a&gt;, also reproduced below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/dolthub/vitess/go/vt/proto/query&#34;&#xA;&#xA;&#x9;sqle &#34;github.com/dolthub/go-mysql-server&#34;&#xA;&#x9;&#34;github.com/dolthub/go-mysql-server/memory&#34;&#xA;&#x9;&#34;github.com/dolthub/go-mysql-server/server&#34;&#xA;&#x9;&#34;github.com/dolthub/go-mysql-server/sql&#34;&#xA;&#x9;&#34;github.com/dolthub/go-mysql-server/sql/types&#34;&#xA;)&#xA;&#xA;// This is an example of how to implement a MySQL server.&#xA;// After running the example, you may connect to it using the following:&#xA;//&#xA;// &amp;gt; mysql --host=localhost --port=3306 --user=root mydb --execute=&#34;SELECT * FROM mytable;&#34;&#xA;// +----------+-------------------+-------------------------------+----------------------------+&#xA;// | name     | email             | phone_numbers                 | created_at                 |&#xA;// +----------+-------------------+-------------------------------+----------------------------+&#xA;// | Jane Deo | janedeo@gmail.com | [&#34;556-565-566&#34;,&#34;777-777-777&#34;] | 2022-11-01 12:00:00.000001 |&#xA;// | Jane Doe | jane@doe.com      | []                            | 2022-11-01 12:00:00.000001 |&#xA;// | John Doe | john@doe.com      | [&#34;555-555-555&#34;]               | 2022-11-01 12:00:00.000001 |&#xA;// | John Doe | johnalt@doe.com   | []                            | 2022-11-01 12:00:00.000001 |&#xA;// +----------+-------------------+-------------------------------+----------------------------+&#xA;//&#xA;// The included MySQL client is used in this example, however any MySQL-compatible client will work.&#xA;&#xA;var (&#xA;&#x9;dbName    = &#34;mydb&#34;&#xA;&#x9;tableName = &#34;mytable&#34;&#xA;&#x9;address   = &#34;localhost&#34;&#xA;&#x9;port      = 3306&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;pro := createTestDatabase()&#xA;&#x9;engine := sqle.NewDefault(pro)&#xA;&#xA;&#x9;session := memory.NewSession(sql.NewBaseSession(), pro)&#xA;&#x9;ctx := sql.NewContext(context.Background(), sql.WithSession(session))&#xA;&#x9;ctx.SetCurrentDatabase(&#34;test&#34;)&#xA;&#xA;&#x9;// This variable may be found in the &#34;users_example.go&#34; file. Please refer to that file for a walkthrough on how to&#xA;&#x9;// set up the &#34;mysql&#34; database to allow user creation and user checking when establishing connections. This is set&#xA;&#x9;// to false for this example, but feel free to play around with it and see how it works.&#xA;&#x9;if enableUsers {&#xA;&#x9;&#x9;if err := enableUserAccounts(ctx, engine); err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;config := server.Config{&#xA;&#x9;&#x9;Protocol: &#34;tcp&#34;,&#xA;&#x9;&#x9;Address:  fmt.Sprintf(&#34;%s:%d&#34;, address, port),&#xA;&#x9;}&#xA;&#x9;s, err := server.NewServer(config, engine, memory.NewSessionBuilder(pro), nil)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;if err = s.Start(); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&#xA;func createTestDatabase() *memory.DbProvider {&#xA;&#x9;db := memory.NewDatabase(dbName)&#xA;&#x9;db.BaseDatabase.EnablePrimaryKeyIndexes()&#xA;&#xA;&#x9;pro := memory.NewDBProvider(db)&#xA;&#x9;session := memory.NewSession(sql.NewBaseSession(), pro)&#xA;&#x9;ctx := sql.NewContext(context.Background(), sql.WithSession(session))&#xA;&#xA;&#x9;table := memory.NewTable(db, tableName, sql.NewPrimaryKeySchema(sql.Schema{&#xA;&#x9;&#x9;{Name: &#34;name&#34;, Type: types.Text, Nullable: false, Source: tableName, PrimaryKey: true},&#xA;&#x9;&#x9;{Name: &#34;email&#34;, Type: types.Text, Nullable: false, Source: tableName, PrimaryKey: true},&#xA;&#x9;&#x9;{Name: &#34;phone_numbers&#34;, Type: types.JSON, Nullable: false, Source: tableName},&#xA;&#x9;&#x9;{Name: &#34;created_at&#34;, Type: types.MustCreateDatetimeType(query.Type_DATETIME, 6), Nullable: false, Source: tableName},&#xA;&#x9;}), db.GetForeignKeyCollection())&#xA;&#x9;db.AddTable(tableName, table)&#xA;&#xA;&#x9;creationTime := time.Unix(0, 1667304000000001000).UTC()&#xA;&#x9;_ = table.Insert(ctx, sql.NewRow(&#34;Jane Deo&#34;, &#34;janedeo@gmail.com&#34;, types.MustJSON(`[&#34;556-565-566&#34;, &#34;777-777-777&#34;]`), creationTime))&#xA;&#x9;_ = table.Insert(ctx, sql.NewRow(&#34;Jane Doe&#34;, &#34;jane@doe.com&#34;, types.MustJSON(`[]`), creationTime))&#xA;&#x9;_ = table.Insert(ctx, sql.NewRow(&#34;John Doe&#34;, &#34;john@doe.com&#34;, types.MustJSON(`[&#34;555-555-555&#34;]`), creationTime))&#xA;&#x9;_ = table.Insert(ctx, sql.NewRow(&#34;John Doe&#34;, &#34;johnalt@doe.com&#34;, types.MustJSON(`[]`), creationTime))&#xA;&#xA;&#x9;return pro&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example populates the database by creating &lt;code&gt;memory.Database&lt;/code&gt; and &lt;code&gt;memory.Table&lt;/code&gt; objects via golang code, but you can also populate it by issuing &lt;code&gt;CREATE DATABASE&lt;/code&gt;, &lt;code&gt;CREATE TABLE&lt;/code&gt;, etc. statements to the server once it&#39;s running.&lt;/p&gt; &#xA;&lt;p&gt;Once the server is running, connect with any MySQL client, including the golang MySQL connector and the &lt;code&gt;mysql&lt;/code&gt; shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; mysql --host=localhost --port=3306 --user=root mydb --execute=&#34;SELECT * FROM mytable;&#34;&#xA;+----------+-------------------+-------------------------------+----------------------------+&#xA;| name     | email             | phone_numbers                 | created_at                 |&#xA;+----------+-------------------+-------------------------------+----------------------------+&#xA;| Jane Deo | janedeo@gmail.com | [&#34;556-565-566&#34;,&#34;777-777-777&#34;] | 2022-11-01 12:00:00.000001 |&#xA;| Jane Doe | jane@doe.com      | []                            | 2022-11-01 12:00:00.000001 |&#xA;| John Doe | john@doe.com      | [&#34;555-555-555&#34;]               | 2022-11-01 12:00:00.000001 |&#xA;| John Doe | johnalt@doe.com   | []                            | 2022-11-01 12:00:00.000001 |&#xA;+----------+-------------------+-------------------------------+----------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations of the in-memory database implementation&lt;/h2&gt; &#xA;&lt;p&gt;The in-memory database implementation included with this package is intended for use in tests. It has specific limitations that we know of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dolthub/go-mysql-server/issues/1306&#34;&gt;Not threadsafe&lt;/a&gt;. To avoid concurrency issues, limit DDL and DML statements (&lt;code&gt;CREATE TABLE&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, etc.) to a single goroutine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dolthub/go-mysql-server/issues/1506&#34;&gt;No transaction support&lt;/a&gt;. Statements like &lt;code&gt;START TRANSACTION&lt;/code&gt;, &lt;code&gt;ROLLBACK&lt;/code&gt;, and &lt;code&gt;COMMIT&lt;/code&gt; are no-ops.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dolthub/go-mysql-server/issues/1347&#34;&gt;Non-performant index implementation&lt;/a&gt;. Indexed lookups and joins perform full table scans on the underlying tables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Custom backend implementations&lt;/h2&gt; &#xA;&lt;p&gt;You can create your own backend to query your own data sources by implementing some interfaces. For detailed instructions, see the &lt;a href=&#34;https://raw.githubusercontent.com/dolthub/go-mysql-server/main/BACKEND.md&#34;&gt;backend guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Technical documentation for contributors and backend developers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dolthub/go-mysql-server/main/ARCHITECTURE.md&#34;&gt;Architecture&lt;/a&gt; is an overview of the various packages of the project and how they fit together.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dolthub/go-mysql-server/main/CONTRIBUTING.md&#34;&gt;Contribution guide&lt;/a&gt; for new contributors, including instructions for how to get your PR merged.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Powered by go-mysql-server&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dolthub/dolt&#34;&gt;dolt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/src-d/gitbase&#34;&gt;gitbase&lt;/a&gt; (defunct)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Are you building a database backend using &lt;strong&gt;go-mysql-server&lt;/strong&gt;? We would like to hear from you and include you in this list.&lt;/p&gt; &#xA;&lt;h2&gt;Security Policy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dolthub/go-mysql-server/raw/main/SECURITY.md&#34;&gt;go-mysql-server&#39;s security policy&lt;/a&gt; is maintained in this repository. Please follow the disclosure instructions there. Please do not initially report security issues in this repository&#39;s public GitHub issues.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;go-mysql-server&lt;/strong&gt; was originally developed by the &lt;code&gt;{source-d}&lt;/code&gt; organzation, and this repository was originally forked from &lt;a href=&#34;https://github.com/src-d/go-mysql-server&#34;&gt;src-d&lt;/a&gt;. We want to thank the entire &lt;code&gt;{source-d}&lt;/code&gt; development team for their work on this project, especially Miguel Molina (@erizocosmico) and Juanjo Álvarez Martinez (@juanjux).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License 2.0, see &lt;a href=&#34;https://raw.githubusercontent.com/dolthub/go-mysql-server/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>