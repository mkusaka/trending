<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-08T01:37:43Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grafana/k6</title>
    <updated>2022-09-08T01:37:43Z</updated>
    <id>tag:github.com,2022-09-08:/grafana/k6</id>
    <link href="https://github.com/grafana/k6" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern load testing tool, using Go and JavaScript - https://k6.io&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://k6.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/grafana/k6/master/assets/k6-logo-with-grafana.svg?sanitize=true&#34; alt=&#34;k6&#34; width=&#34;258&#34; height=&#34;210&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Like unit testing, for performance&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A modern load testing tool for developers and testers in the DevOps era.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/grafana/k6/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/grafana/k6.svg?sanitize=true&#34; alt=&#34;Github release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grafana/k6/actions/workflows/all.yml&#34;&gt;&lt;img src=&#34;https://github.com/grafana/k6/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/grafana/k6&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/grafana/k6&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/grafana/k6&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/grafana/k6/master.svg?sanitize=true&#34; alt=&#34;Codecov branch&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://twitter.com/k6_io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@k6_io-55acee.svg?sanitize=true&#34; alt=&#34;@k6_io on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://k6.io/slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-k6-ff69b4.svg?sanitize=true&#34; alt=&#34;Slack channel&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/grafana/k6/releases&#34;&gt;Download&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#install&#34;&gt;Install&lt;/a&gt; · &lt;a href=&#34;https://k6.io/docs&#34;&gt;Documentation&lt;/a&gt; · &lt;a href=&#34;https://community.k6.io/&#34;&gt;Community Forum&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/grafana/k6/master/assets/github-hr.png&#34; alt=&#34;---&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;k6&lt;/strong&gt; is a modern load testing tool, building on &lt;a href=&#34;https://k6.io/about&#34;&gt;our&lt;/a&gt; years of experience in the load and performance testing industry. It provides a clean, approachable scripting API, &lt;a href=&#34;https://k6.io/docs/getting-started/running-k6&#34;&gt;local&lt;/a&gt; and &lt;a href=&#34;https://k6.io/docs/cloud&#34;&gt;cloud execution&lt;/a&gt;, and flexible configuration.&lt;/p&gt; &#xA;&lt;p&gt;This is how load testing should look in the 21st century.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;600&#34; src=&#34;https://raw.githubusercontent.com/grafana/k6/master/assets/k6-demo.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Menu&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#running-k6&#34;&gt;Running k6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#contributing&#34;&gt;Need help or want to contribute?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scripting in ES6 JS&lt;/strong&gt;: support for &lt;a href=&#34;https://k6.io/docs/using-k6/modules&#34;&gt;modules&lt;/a&gt; to aid code reusability across an organization&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Everything as code&lt;/strong&gt;: test logic and &lt;a href=&#34;https://k6.io/docs/using-k6/options&#34;&gt;configuration options&lt;/a&gt; are both in JS for version control friendliness&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automation-friendly&lt;/strong&gt;: &lt;a href=&#34;https://k6.io/docs/using-k6/checks&#34;&gt;checks&lt;/a&gt; (like asserts) and &lt;a href=&#34;https://k6.io/docs/using-k6/thresholds&#34;&gt;thresholds&lt;/a&gt; for easy and flexible CI configuration!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://k6.io/docs/using-k6/http-requests&#34;&gt;&lt;strong&gt;HTTP/1.1&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/using-k6/protocols/http-2&#34;&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/using-k6/protocols/websockets&#34;&gt;&lt;strong&gt;WebSocket&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://k6.io/docs/using-k6/protocols/grpc&#34;&gt;&lt;strong&gt;gRPC&lt;/strong&gt;&lt;/a&gt; protocol support&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TLS features&lt;/strong&gt;: &lt;a href=&#34;https://k6.io/docs/using-k6/protocols/ssl-tls/ssl-tls-client-certificates&#34;&gt;client certificates&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/using-k6/protocols/ssl-tls/ssl-tls-version-and-ciphers&#34;&gt;configurable SSL/TLS versions and ciphers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Batteries included&lt;/strong&gt;: &lt;a href=&#34;https://k6.io/docs/using-k6/cookies&#34;&gt;Cookies&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-crypto&#34;&gt;Crypto&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/using-k6/metrics#custom-metrics&#34;&gt;Custom metrics&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-encoding&#34;&gt;Encodings&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/using-k6/environment-variables&#34;&gt;Environment variables&lt;/a&gt;, JSON, &lt;a href=&#34;https://k6.io/docs/using-k6/html/working-with-html-forms&#34;&gt;HTML forms&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/javascript-api/init-context/open-filepath-mode&#34;&gt;files&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/getting-started/running-k6#section-stages-ramping-updown-vus&#34;&gt;flexible execution control&lt;/a&gt;, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built-in HAR converter&lt;/strong&gt;: record browser sessions as &lt;a href=&#34;https://en.wikipedia.org/wiki/.har&#34;&gt;&lt;code&gt;.har&lt;/code&gt; files&lt;/a&gt; and &lt;a href=&#34;https://k6.io/docs/using-k6/session-recording-har-support&#34;&gt;directly convert them to k6 scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible metrics storage and visualization&lt;/strong&gt;: &lt;a href=&#34;https://k6.io/docs/results-visualization/influxdb-+-grafana&#34;&gt;InfluxDB&lt;/a&gt; (+Grafana), &lt;a href=&#34;https://k6.io/docs/getting-started/results-output/json&#34;&gt;JSON&lt;/a&gt; or &lt;a href=&#34;https://k6.io/docs/cloud/analyzing-results/overview&#34;&gt;k6 Cloud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://k6.io/docs/using-k6/cloud-execution&#34;&gt;&lt;strong&gt;Cloud execution&lt;/strong&gt;&lt;/a&gt; and distributed tests &lt;em&gt;(currently only on infrastructure managed by &lt;a href=&#34;https://k6.io/cloud&#34;&gt;us k6 cloud&lt;/a&gt;, with native distributed execution in k6 &lt;a href=&#34;https://github.com/grafana/k6/issues/140&#34;&gt;planned&lt;/a&gt; for the near future!)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s even more! &lt;a href=&#34;https://k6.io/docs/&#34;&gt;See all features available in k6.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Mac&lt;/h3&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install k6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;If you use the &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey package manager&lt;/a&gt; you can install the unofficial k6 package with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;choco install k6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, you can manually download and install the &lt;a href=&#34;https://dl.k6.io/msi/k6-latest-amd64.msi&#34;&gt;latest official &lt;code&gt;.msi&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;For Debian-based Linux distributions like Ubuntu, you can install k6 from the private deb repo like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69&#xA;echo &#34;deb https://dl.k6.io/deb stable main&#34; | sudo tee /etc/apt/sources.list.d/k6.list&#xA;sudo apt-get update&#xA;sudo apt-get install k6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have issues adding the key from the keyserver, you can instead run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -s https://dl.k6.io/key.gpg | sudo apt-key add -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then confirm that the key with the above ID is shown in the output of &lt;code&gt;sudo apt-key list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And for rpm-based ones like Fedora and CentOS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo dnf install https://dl.k6.io/rpm/repo.rpm    # use yum instead of dnf for older distros&#xA;sudo dnf install k6    # use yum install --nogpgcheck k6 for older distros (e.g. CentOS 7, Amazon Linux 2) without PGP V4 signature support&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;gnupg2&lt;/code&gt; package is required for signature verification.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull grafana/k6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-built binaries &amp;amp; other platforms&lt;/h3&gt; &#xA;&lt;p&gt;In case there isn&#39;t an official package for your operating system or architecture, or if you don&#39;t want to install a custom repository, you can easily grab a pre-built binary from &lt;a href=&#34;https://github.com/grafana/k6/releases&#34;&gt;the GitHub Releases page&lt;/a&gt;. Once you download and unpack the release, you can optionally copy the &lt;code&gt;k6&lt;/code&gt; binary it contains somewhere in your &lt;code&gt;PATH&lt;/code&gt;, so you are able to run k6 from any location on your system.&lt;/p&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;k6 is written in Go, so it&#39;s just a single statically-linked executable and very easy to build and distribute. To build from source you need &lt;strong&gt;&lt;a href=&#34;https://go.dev/doc/install&#34;&gt;Go&lt;/a&gt;&lt;/strong&gt; (1.17 or newer). Follow these instructions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;go install go.k6.io/k6@latest&lt;/code&gt; which will build a &lt;code&gt;k6&lt;/code&gt; binary and put it in the &lt;code&gt;$GOBIN&lt;/code&gt; folder (which defaults to &lt;code&gt;$GOPATH/bin&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have &lt;code&gt;$GOPATH/bin&lt;/code&gt; in your &lt;code&gt;PATH&lt;/code&gt; (or copy the &lt;code&gt;k6&lt;/code&gt; binary somewhere in your &lt;code&gt;PATH&lt;/code&gt;), so you are able to run k6 from any location.&lt;/li&gt; &#xA; &lt;li&gt;Tada, you can now run k6 using &lt;code&gt;k6 run script.js&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running k6&lt;/h2&gt; &#xA;&lt;p&gt;k6 works with the concept of &lt;strong&gt;virtual users&lt;/strong&gt; (VUs) that execute scripts - they&#39;re essentially glorified, parallel &lt;code&gt;while(true)&lt;/code&gt; loops. Scripts are written using JavaScript as ES6 modules, which allows you to break larger tests into smaller and more reusable pieces, making it easy to scale tests across an organization.&lt;/p&gt; &#xA;&lt;p&gt;Scripts must contain, at the very least, an exported &lt;code&gt;default&lt;/code&gt; function - this defines the entry point for your VUs, similar to the &lt;code&gt;main()&lt;/code&gt; function in many languages. Let&#39;s create a very simple script that makes an HTTP GET request to a test website:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import http from &#34;k6/http&#34;;&#xA;&#xA;export default function() {&#xA;    let response = http.get(&#34;https://test-api.k6.io&#34;);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script details and how we can extend and configure it will be explained below, but for now, simply save the above snippet as a &lt;code&gt;script.js&lt;/code&gt; file somewhere on your system. Assuming that you&#39;ve &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#install&#34;&gt;installed k6&lt;/a&gt; correctly, on Linux and Mac, you can run the saved script by executing &lt;code&gt;k6 run script.js&lt;/code&gt; from the same folder. For Windows, the command is almost the same - &lt;code&gt;k6.exe run script.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you decide to use the &lt;a href=&#34;https://hub.docker.com/r/grafana/k6/&#34;&gt;k6 docker image&lt;/a&gt;, the command will be slightly different. Instead of passing the script filename to k6, a dash is used to instruct k6 to read the script contents directly via the standard input. This allows us to avoid messing with docker volumes for such a simple single-file script, greatly simplifying the docker command: &lt;code&gt;docker run -i grafana/k6 run - &amp;lt;script.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In some situations, it may also be useful to execute remote scripts. You can do that with HTTP&lt;strong&gt;S&lt;/strong&gt; URLs in k6 by &lt;a href=&#34;https://k6.io/docs/using-k6/modules#section-remote-modules&#34;&gt;importing them&lt;/a&gt; in the script via their URL or simply specifying their URL in the CLI command: &lt;code&gt;k6 run github.com/grafana/k6/samples/http_2.js&lt;/code&gt; (k6 &#34;knows&#34; a bit about GitHub and cdnjs URLs, so this command is shorthand for &lt;code&gt;k6 run raw.githubusercontent.com/grafana/k6/master/samples/http_2.js&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;For more information on how to get started running k6, please look at the &lt;a href=&#34;https://k6.io/docs/getting-started/running-k6&#34;&gt;Running k6&lt;/a&gt; documentation page. If you want to know more about making and measuring HTTP requests with k6, take a look &lt;a href=&#34;https://k6.io/docs/using-k6/http-requests&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-http&#34;&gt;here&lt;/a&gt;. And for information about the commercial k6 services like distributed cloud execution (the &lt;code&gt;k6 cloud&lt;/code&gt; command) or Cloud Results (&lt;code&gt;k6 run -o cloud&lt;/code&gt;), you can visit &lt;a href=&#34;https://k6.io/cloud&#34;&gt;k6.io&lt;/a&gt; or view the &lt;a href=&#34;https://k6.io/docs/cloud&#34;&gt;cloud documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;In this section, we&#39;ll briefly explore some basic concepts and principles of how k6 works. If you want to learn more in-depth about the k6 scripting API, results output, and features, you can visit the complete k6 documentation website at &lt;a href=&#34;https://k6.io/docs/&#34;&gt;k6.io/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Init and VU stages&lt;/h3&gt; &#xA;&lt;p&gt;Earlier, in the &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#running-k6&#34;&gt;Running k6&lt;/a&gt; section, we mentioned that scripts must contain a &lt;code&gt;default&lt;/code&gt; function. &lt;em&gt;&#34;Why not just run my script normally, from top to bottom&#34;&lt;/em&gt;, you might ask - the answer is: we do, but code &lt;strong&gt;inside&lt;/strong&gt; and &lt;strong&gt;outside&lt;/strong&gt; your &lt;code&gt;default&lt;/code&gt; function can do different things.&lt;/p&gt; &#xA;&lt;p&gt;Each virtual user (VU) executes your script in a completely separate JavaScript runtime, parallel to all the other running VUs. Code inside the &lt;code&gt;default&lt;/code&gt; function is called &lt;em&gt;VU code&lt;/em&gt; and is run over and over for as long as the test is running. Code outside the &lt;code&gt;default&lt;/code&gt; function is called &lt;em&gt;init code&lt;/em&gt; and is run only once per VU when that VU is initialized.&lt;/p&gt; &#xA;&lt;p&gt;VU code can make HTTP and WebSocket requests, emit metrics, and generally do everything you&#39;d expect a load test to do. With a few important exceptions - you can&#39;t load anything from your local filesystem or import any other modules. This all has to be done from the &lt;a href=&#34;https://k6.io/docs/javascript-api/init-context&#34;&gt;init code&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two reasons for this. The first is, of course, performance. If you read a file from disk on every single script iteration, it&#39;d be needlessly slow. Even if you cache the contents of the file and any imported modules, it&#39;d mean the &lt;em&gt;first run&lt;/em&gt; of the script would be much slower than all the others. Worse yet, if you have a script that imports or loads things based on things that can only be known at runtime, you&#39;d get slow iterations thrown in every time you load something new. That&#39;s also the reason why we initialize &lt;em&gt;all&lt;/em&gt; needed VUs before any of them starts the actual load test by executing the &lt;code&gt;default&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;But there&#39;s another, more interesting reason. By forcing all imports and file reads into the init context, we design for distributed execution. We know which files will be needed, so we distribute only those files to each node in the cluster. We know which modules will be imported, so we can bundle them up in an &lt;a href=&#34;https://k6.io/docs/using-k6/archives-for-bundling-sharing-a-test&#34;&gt;archive&lt;/a&gt; from the get-go. And, tying into the performance point above, the other nodes don&#39;t even need writable file systems - everything can be kept in memory.&lt;/p&gt; &#xA;&lt;p&gt;This means that if your script works when it&#39;s executed with &lt;code&gt;k6 run&lt;/code&gt; locally, it should also work without any modifications in a distributed execution environment like &lt;code&gt;k6 cloud&lt;/code&gt; (that executes it in the commercial &lt;a href=&#34;https://k6.io/cloud&#34;&gt;k6 cloud infrastructure&lt;/a&gt;) or, in the future, with the &lt;a href=&#34;https://github.com/grafana/k6/wiki/Roadmap&#34;&gt;planned&lt;/a&gt; k6 native cluster execution mode.&lt;/p&gt; &#xA;&lt;h3&gt;Script execution&lt;/h3&gt; &#xA;&lt;p&gt;For simplicity, unlike many other JavaScript runtimes, a lot of the operations in k6 are synchronous. That means that, for example, the &lt;code&gt;let response = http.get(&#34;https://test-api.k6.io/&#34;)&lt;/code&gt; call from the &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#running-k6&#34;&gt;Running k6&lt;/a&gt; example script will block the VU execution until the HTTP request is completed, save the &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-http/response-k6-http&#34;&gt;response information&lt;/a&gt; in the &lt;code&gt;response&lt;/code&gt; variable and only then continue executing the rest of the script - no callbacks and promises needed.&lt;/p&gt; &#xA;&lt;p&gt;This simplification works because k6 isn&#39;t just a single JavaScript runtime. Instead, each VU independently executes the supplied script in its own separate and semi-isolated JavaScript runtime, in parallel to all the other running VUs. This allows us to fully utilize modern multi-core hardware while at the same time lowering the script complexity by having mostly synchronous functions. Where it makes sense, we also have in-VU parallelization as well, for example, the &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-http/batch-requests&#34;&gt;&lt;code&gt;http.batch()&lt;/code&gt;&lt;/a&gt; function (which allows a single VU to make multiple simultaneous HTTP requests like a browser/real user would) or the &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-ws&#34;&gt;websocket&lt;/a&gt; support.&lt;/p&gt; &#xA;&lt;p&gt;As an added bonus, there&#39;s an actual &lt;a href=&#34;https://k6.io/docs/javascript-api/k6/sleep-t&#34;&gt;&lt;code&gt;sleep()&lt;/code&gt; function&lt;/a&gt;! And you can also use the VU separation to reuse data between iterations (i.e. executions of the &lt;code&gt;default&lt;/code&gt; function) in the same VU:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var vuLocalCounter = 0;&#xA;export default function() {&#xA;    vuLocalCounter++;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Script options and execution control&lt;/h3&gt; &#xA;&lt;p&gt;So we&#39;ve mentioned VUs and iterations, but how are those things controlled?&lt;/p&gt; &#xA;&lt;p&gt;By default, if nothing is specified, k6 runs a script with only 1 VU and for 1 iteration only. Useful for debugging, but usually not very useful when doing load testing. For actual script execution in a load test, k6 offers a lot of flexibility - there are a few different configuration mechanisms you can use to specify script options, and several options to control the number of VUs and how long your script will be executed, among &lt;a href=&#34;https://k6.io/docs/using-k6/options&#34;&gt;other things&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say that you want to specify the number of VUs in your script. In order of precedence, you can use any of the following configuration mechanisms to do it:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Command-line flags: &lt;code&gt;k6 run --vus 10 script.js&lt;/code&gt;, or via the short &lt;code&gt;-u&lt;/code&gt; flag syntax if we want to save 3 keystrokes (&lt;code&gt;k6 run -u 10 script.js&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Environment variables: setting &lt;code&gt;K6_VUS=20&lt;/code&gt; before you run the script with k6. Especially useful when using the &lt;a href=&#34;https://hub.docker.com/r/grafana/k6/&#34;&gt;docker k6 image&lt;/a&gt; and when running in containerized environments like Kubernetes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your script can &lt;code&gt;export&lt;/code&gt; an &lt;code&gt;options&lt;/code&gt; object that k6 reads and uses to set any options you want; for example, setting VUs would look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export let options = {&#xA;    vus: 30,&#xA;};&#xA;export default function() { /* ... do whatever ... */ }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This functionality is very useful, because here you have access to key-value &lt;a href=&#34;https://k6.io/docs/using-k6/environment-variables&#34;&gt;environment variables&lt;/a&gt; that k6 exposes to the script via the global &lt;code&gt;__ENV&lt;/code&gt; object, so you can use the full power of JavaScript to do things like:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (__ENV.script_scenario == &#34;staging&#34;) {&#xA;    export let options = { /* first set of options */ };&#xA;} else {&#xA;    export let options = { /* second set of options */ };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or any variation of the above, like importing different config files, etc. Also, having most of the script configuration right next to the script code makes k6 scripts very easily version-controllable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A global JSON config. By default, k6 looks for it in the config home folder of the current user (OS-dependent, for Linux/BSDs k6 will look for &lt;code&gt;config.json&lt;/code&gt; inside of &lt;code&gt;${HOME}/.config/loadimpact/k6&lt;/code&gt;), though that can be modified with the &lt;code&gt;--config&lt;/code&gt;/&lt;code&gt;-c&lt;/code&gt; CLI flag. It uses the same option keys as the exported &lt;code&gt;options&lt;/code&gt; from the script file, so we can set the VUs by having &lt;code&gt;config.json&lt;/code&gt; contain &lt;code&gt;{ &#34;vus&#34;: 1 }&lt;/code&gt;. Although it rarely makes sense to set the number of VUs there, the global config file is much more useful for storing things like login credentials for the different &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#outputs&#34;&gt;outputs&lt;/a&gt;, as used by the &lt;code&gt;k6 login&lt;/code&gt; subcommand...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Configuration mechanisms do have an order of precedence. As presented, options at the top of the list can override configuration mechanisms that are specified lower in the list. If we used all the above examples for setting the number of VUs, we would end up with 10 VUs, since the CLI flags have the highest priority. Also, please note that not all the available options are configurable via all different mechanisms - some options may be impractical to specify via simple strings (so no CLI/environment variables), while other rarely-used ones may be intentionally excluded from the CLI flags to avoid clutter - refer to &lt;a href=&#34;https://k6.io/docs/using-k6/options&#34;&gt;options docs&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;As shown above, there are several ways to configure the number of simultaneous virtual users k6 will launch. There are also different ways to specify how long those virtual users will be running. For simple tests you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set the test duration by the &lt;code&gt;--duration&lt;/code&gt;/&lt;code&gt;-d&lt;/code&gt; CLI flag (or the &lt;code&gt;K6_DURATION&lt;/code&gt; environment variable and the &lt;code&gt;duration&lt;/code&gt; script/JSON option). For ease of use, &lt;code&gt;duration&lt;/code&gt; is specified with human-readable values like &lt;code&gt;1h30m10s&lt;/code&gt; - &lt;code&gt;k6 run --duration 30s script.js&lt;/code&gt;, &lt;code&gt;k6 cloud -d 15m10s script.js&lt;/code&gt;, &lt;code&gt;export K6_DURATION=1h&lt;/code&gt;, etc. If set to &lt;code&gt;0&lt;/code&gt;, k6 wouldn&#39;t stop executing the script unless the user manually stops it.&lt;/li&gt; &#xA; &lt;li&gt;Set the total number of script iterations with the &lt;code&gt;--iterations&lt;/code&gt;/&lt;code&gt;-i&lt;/code&gt; CLI flag (or the &lt;code&gt;K6_ITERATIONS&lt;/code&gt; environment variable and the &lt;code&gt;iterations&lt;/code&gt; script/JSON option). k6 will stop executing the script whenever the &lt;strong&gt;total&lt;/strong&gt; number of iterations (i.e. the number of iterations across all VUs) reaches the specified number. So if you have &lt;code&gt;k6 run --iterations 10 --vus 10 script.js&lt;/code&gt;, then each VU would make only a single iteration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more complex cases, you can specify execution stages. They are a combination of &lt;code&gt;duration,target-VUs&lt;/code&gt; pairs. These pairs instruct k6 to linearly ramp up, ramp down, or stay at the number of VUs specified for the period specified. Execution stages can be set via the &lt;code&gt;stages&lt;/code&gt; script/JSON option as an array of &lt;code&gt;{ duration: ..., target: ... }&lt;/code&gt; pairs, or with the &lt;code&gt;--stage&lt;/code&gt;/&lt;code&gt;-s&lt;/code&gt; CLI flags and the &lt;code&gt;K6_STAGES&lt;/code&gt; environment variable via the &lt;code&gt;duration:target,duration:target...&lt;/code&gt; syntax.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following options would have k6 linearly ramping up from 5 to 10 VUs over the period of 3 minutes (k6 starts with &lt;code&gt;vus&lt;/code&gt; number of VUs, or 1 by default), then staying flat at 10 VUs for 5 minutes, then ramping up from 10 to 35 VUs over the next 10 minutes before finally ramping down to 0 VUs for another 90 seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export let options = {&#xA;    vus: 5,&#xA;    stages: [&#xA;        { duration: &#34;3m&#34;, target: 10 },&#xA;        { duration: &#34;5m&#34;, target: 10 },&#xA;        { duration: &#34;10m&#34;, target: 35 },&#xA;        { duration: &#34;1m30s&#34;, target: 0 },&#xA;    ]&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the CLI flags &lt;code&gt;--vus 5 --stage 3m:10,5m:10,10m:35,1m30s:0&lt;/code&gt; or set the environment variables &lt;code&gt;K6_VUS=5 K6_STAGES=&#34;3m:10,5m:10,10m:35,1m30s:0&#34;&lt;/code&gt; to achieve the same results.&lt;/p&gt; &#xA;&lt;p&gt;For a complete list of supported k6 options, refer to the documentation at &lt;a href=&#34;https://k6.io/docs/using-k6/options&#34;&gt;k6.io/docs/using-k6/options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Hint: besides accessing the supplied &lt;a href=&#34;https://k6.io/docs/using-k6/environment-variables&#34;&gt;environment variables&lt;/a&gt; through the &lt;code&gt;__ENV&lt;/code&gt; global object briefly mentioned above, you can also use the &lt;a href=&#34;https://k6.io/docs/using-k6/execution-context-variables&#34;&gt;execution context variables&lt;/a&gt; &lt;code&gt;__VU&lt;/code&gt; and &lt;code&gt;__ITER&lt;/code&gt; to access the current VU number and the number of the current iteration &lt;strong&gt;for that VU&lt;/strong&gt;. These variables can be very useful if you want VUs to execute different scripts/scenarios or to aid in generating different data per VU. &lt;code&gt;http.post(&#34;https://some.example.website/signup&#34;, {username: `testuser${__VU}@testsite.com`, /* ... */})&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For even more complex scenarios, you can use the k6 &lt;a href=&#34;https://k6.io/docs/misc/k6-rest-api&#34;&gt;REST API&lt;/a&gt; and the &lt;code&gt;k6 status&lt;/code&gt;, &lt;code&gt;k6 scale&lt;/code&gt;, &lt;code&gt;k6 pause&lt;/code&gt;, &lt;code&gt;k6 resume&lt;/code&gt; CLI commands to manually control a running k6 test. For &lt;a href=&#34;https://k6.io/docs/using-k6/cloud-execution&#34;&gt;cloud-based tests&lt;/a&gt;, executed on our managed infrastructure via the &lt;code&gt;k6 cloud&lt;/code&gt; command, you can also specify the VU distribution percentages for different load zones when executing load tests, giving you scalable and geographically-distributed test execution.&lt;/p&gt; &#xA;&lt;h3&gt;Setup and teardown&lt;/h3&gt; &#xA;&lt;p&gt;Beyond the init code and the required VU stage (i.e. the &lt;code&gt;default&lt;/code&gt; function), which is code run for each VU, k6 also supports test-wide setup and teardown stages, like many other testing frameworks and tools. The &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; functions, like the &lt;code&gt;default&lt;/code&gt; function, need to be &lt;code&gt;export&lt;/code&gt;ed. But unlike the &lt;code&gt;default&lt;/code&gt; function, &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; are only called once for a test - &lt;code&gt;setup()&lt;/code&gt; is called at the beginning of the test, after the init stage but before the VU stage (&lt;code&gt;default&lt;/code&gt; function), and &lt;code&gt;teardown()&lt;/code&gt; is called at the end of a test, after the last VU iteration (&lt;code&gt;default&lt;/code&gt; function) has finished executing. This is also supported in the distributed &lt;a href=&#34;https://k6.io/docs/using-k6/cloud-execution&#34;&gt;cloud execution&lt;/a&gt; mode via &lt;code&gt;k6 cloud&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export function setup() {&#xA;    return {v: 1};&#xA;}&#xA;&#xA;export default function(data) {&#xA;    console.log(JSON.stringify(data));&#xA;}&#xA;&#xA;export function teardown(data) {&#xA;    if (data.v != 1) {&#xA;        throw new Error(&#34;incorrect data: &#34; + JSON.stringify(data));&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A copy of whatever data &lt;code&gt;setup()&lt;/code&gt; returns will be passed as the first argument to each iteration of the &lt;code&gt;default&lt;/code&gt; function and to &lt;code&gt;teardown()&lt;/code&gt; at the end of the test. For more information and examples, refer to the k6 docs &lt;a href=&#34;https://k6.io/docs/using-k6/test-life-cycle#setup-and-teardown-stages&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Metrics, tags, and groups&lt;/h3&gt; &#xA;&lt;p&gt;By default k6 measures and collects a lot of metrics about the things your scripts do - the duration of different script iterations, how much data was sent and received, how many HTTP requests were made, the duration of those HTTP requests, and even how long did the TLS handshake of a particular HTTPS request take. To see a summary of these built-in metrics in the output, you can run a simple k6 test, e.g. &lt;code&gt;k6 run github.com/grafana/k6/samples/http_get.js&lt;/code&gt;. More information about the different built-in metrics collected by k6 (and how some of them can be accessed from inside the scripts) is available in the docs &lt;a href=&#34;https://k6.io/docs/using-k6/metrics&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;k6 also allows the creation of user-defined &lt;code&gt;Counter&lt;/code&gt;, &lt;code&gt;Gauge&lt;/code&gt;, &lt;code&gt;Rate&lt;/code&gt;, and &lt;code&gt;Trend&lt;/code&gt; metrics. They can be used to more precisely track and measure a custom subset of the things that k6 measures by default, or anything else the user wants, for example tracking non-timing information that is returned from the remote system. You can find more information about them &lt;a href=&#34;https://k6.io/docs/using-k6/metrics#custom-metrics&#34;&gt;here&lt;/a&gt; and a description of their APIs &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-metrics&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Every measurement metric in k6 comes with a set of key-value tags attached. Some of them are automatically added by k6 - for example, a particular &lt;code&gt;http_req_duration&lt;/code&gt; metric may have the &lt;code&gt;method=GET&lt;/code&gt;, &lt;code&gt;status=200&lt;/code&gt;, &lt;code&gt;url=https://loadimpact.com&lt;/code&gt;, etc. system tags attached to it. Others can be added by users - globally for a test run via the &lt;code&gt;tags&lt;/code&gt; &lt;a href=&#34;https://k6.io/docs/using-k6/options#tags&#34;&gt;option&lt;/a&gt;, or individually as a &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-http/params-k6-http&#34;&gt;parameter&lt;/a&gt; in a specific HTTP request, WebSocket connection, &lt;code&gt;userMetric.Add()&lt;/code&gt; call, etc.&lt;/p&gt; &#xA;&lt;p&gt;These tags don&#39;t show in the simple summary at the end of a k6 test (unless you reference them in a &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#checks-and-thresholds&#34;&gt;threshold&lt;/a&gt;), but they are invaluable for filtering and investigating k6 test results if you use any of the &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/#outputs&#34;&gt;outputs&lt;/a&gt; mentioned below. k6 also supports simple hierarchical groups for easier code and result organization. You can find more information about groups and system and user-defined tags &lt;a href=&#34;https://k6.io/docs/using-k6/tags-and-groups&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Checks and thresholds&lt;/h3&gt; &#xA;&lt;p&gt;Checks and thresholds are some of the k6 features that make it very easy to use load tests like unit and functional tests and integrate them in a CI (continuous integration) workflow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://k6.io/docs/using-k6/checks&#34;&gt;Checks&lt;/a&gt; are similar to asserts but differ in that they don&#39;t halt execution. Instead, they just store the result of the check, pass or fail, and let the script execution continue. Checks are great for codifying assertions relating to HTTP requests/responses. For example, making sure an HTTP response code is 2xx.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://k6.io/docs/using-k6/thresholds&#34;&gt;Thresholds&lt;/a&gt; are global pass/fail criteria that can be used to verify if any result metric is within a specified range. They can also reference a subset of values in a given metric, based on the used metric tags. Thresholds are specified in the options section of a k6 script. If they are exceeded during a test run, k6 would exit with a nonzero code on test completion, and can also optionally abort the test early. This makes thresholds ideally suited as checks in a CI workflow!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import http from &#34;k6/http&#34;;&#xA;import { check, group, sleep } from &#34;k6&#34;;&#xA;import { Rate } from &#34;k6/metrics&#34;;&#xA;&#xA;// A custom metric to track failure rates&#xA;var failureRate = new Rate(&#34;check_failure_rate&#34;);&#xA;&#xA;// Options&#xA;export let options = {&#xA;    stages: [&#xA;        // Linearly ramp up from 1 to 50 VUs during first minute&#xA;        { target: 50, duration: &#34;1m&#34; },&#xA;        // Hold at 50 VUs for the next 3 minutes and 30 seconds&#xA;        { target: 50, duration: &#34;3m30s&#34; },&#xA;        // Linearly ramp down from 50 to 0 VUs over the last 30 seconds&#xA;        { target: 0, duration: &#34;30s&#34; }&#xA;        // Total execution time will be ~5 minutes&#xA;    ],&#xA;    thresholds: {&#xA;        // We want the 95th percentile of all HTTP request durations to be less than 500ms&#xA;        &#34;http_req_duration&#34;: [&#34;p(95)&amp;lt;500&#34;],&#xA;        // Requests with the staticAsset tag should finish even faster&#xA;        &#34;http_req_duration{staticAsset:yes}&#34;: [&#34;p(99)&amp;lt;250&#34;],&#xA;        // Thresholds based on the custom metric we defined and use to track application failures&#xA;        &#34;check_failure_rate&#34;: [&#xA;            // Global failure rate should be less than 1%&#xA;            &#34;rate&amp;lt;0.01&#34;,&#xA;            // Abort the test early if it climbs over 5%&#xA;            { threshold: &#34;rate&amp;lt;=0.05&#34;, abortOnFail: true },&#xA;        ],&#xA;    },&#xA;};&#xA;&#xA;// Main function&#xA;export default function () {&#xA;    let response = http.get(&#34;https://test.k6.io/&#34;);&#xA;&#xA;    // check() returns false if any of the specified conditions fail&#xA;    let checkRes = check(response, {&#xA;        &#34;http2 is used&#34;: (r) =&amp;gt; r.proto === &#34;HTTP/2.0&#34;,&#xA;        &#34;status is 200&#34;: (r) =&amp;gt; r.status === 200,&#xA;        &#34;content is present&#34;: (r) =&amp;gt; r.body.indexOf(&#34;Collection of simple web-pages suitable for load testing.&#34;) !== -1,&#xA;    });&#xA;&#xA;    // We reverse the check() result since we want to count the failures&#xA;    failureRate.add(!checkRes);&#xA;&#xA;    // Load static assets, all requests&#xA;    group(&#34;Static Assets&#34;, function () {&#xA;        // Execute multiple requests in parallel like a browser, to fetch some static resources&#xA;        let resps = http.batch([&#xA;            [&#34;GET&#34;, &#34;https://test.k6.io/static/css/site.css&#34;, null, { tags: { staticAsset: &#34;yes&#34; } }],&#xA;            [&#34;GET&#34;, &#34;https://test.k6.io/static/favicon.ico&#34;, null, { tags: { staticAsset: &#34;yes&#34; } }],&#xA;            [&#34;GET&#34;, &#34;https://test.k6.io/static/js/prisms.js&#34;, null, { tags: { staticAsset: &#34;yes&#34; } }],&#xA;        ]);&#xA;        // Combine check() call with failure tracking&#xA;        failureRate.add(!check(resps, {&#xA;            &#34;status is 200&#34;: (r) =&amp;gt; r[0].status === 200 &amp;amp;&amp;amp; r[1].status === 200,&#xA;            &#34;reused connection&#34;: (r) =&amp;gt; r[0].timings.connecting == 0,&#xA;        }));&#xA;    });&#xA;&#xA;    sleep(Math.random() * 3 + 2); // Random sleep between 2s and 5s&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can save the above example as a local file and run it, or you can also run it directly from the &lt;a href=&#34;https://github.com/grafana/k6/raw/master/samples/thresholds_readme_example.js&#34;&gt;github copy of the file&lt;/a&gt; with the &lt;code&gt;k6 run github.com/grafana/k6/samples/thresholds_readme_example.js&lt;/code&gt; command. You can find (and contribute!) more k6 script examples here: &lt;a href=&#34;https://github.com/grafana/k6/tree/master/samples&#34;&gt;https://github.com/grafana/k6/tree/master/samples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Outputs&lt;/h3&gt; &#xA;&lt;p&gt;To make full use of your test results and to be able to fully explore and understand them, k6 can output the raw metrics to an external repository of your choice.&lt;/p&gt; &#xA;&lt;p&gt;The simplest output option, meant primarily for debugging, is to send the JSON-encoded metrics to a file or to &lt;code&gt;stdout&lt;/code&gt;. Other output options are sending the metrics to an InfluxDB instance, an Apache Kafka queue, or even to the k6 cloud. This allows you to run your load tests locally or behind a company firewall, early in the development process or as part of a CI suite, while at the same time being able to store their results in the k6 cloud, where you can compare and analyze them. You can find more information about the available outputs &lt;a href=&#34;https://k6.io/docs/getting-started/results-output&#34;&gt;here&lt;/a&gt; and about k6 Cloud Results &lt;a href=&#34;https://k6.io/docs/getting-started/results-output/cloud&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://k6.io/docs/cloud/analyzing-results/overview&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Modules and JavaScript compatibility&lt;/h3&gt; &#xA;&lt;p&gt;k6 comes with several built-in modules for things like making (and measuring) &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-http&#34;&gt;HTTP requests&lt;/a&gt; and &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-ws&#34;&gt;websocket connections&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-html&#34;&gt;parsing HTML&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/javascript-api/init-context/open-filepath-mode&#34;&gt;reading files&lt;/a&gt;, &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-crypto&#34;&gt;calculating hashes&lt;/a&gt;, setting up checks and thresholds, tracking &lt;a href=&#34;https://k6.io/docs/javascript-api/k6-metrics&#34;&gt;custom metrics&lt;/a&gt;, and others.&lt;/p&gt; &#xA;&lt;p&gt;You can, of course, also write your own ES6 modules and &lt;code&gt;import&lt;/code&gt; them in your scripts, potentially reusing code across an organization. The situation with importing JavaScript libraries is a bit more complicated. You can potentially use &lt;strong&gt;some&lt;/strong&gt; JS libraries in k6, even ones intended for Node.js if you use browserify, though if they depend on network/OS-related APIs, they likely won&#39;t work. You can find more details and instructions about writing or importing JS modules &lt;a href=&#34;https://k6.io/docs/using-k6/modules&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;To get help about usage, report bugs, suggest features and discuss k6 with other users see &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/SUPPORT.md&#34;&gt;SUPPORT.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to contribute or help with the development of k6, start by reading &lt;a href=&#34;https://raw.githubusercontent.com/grafana/k6/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;. Before you start coding, especially when it comes to big changes and features, it might be a good idea to first discuss your plans and implementation details with the k6 maintainers. You can do this either in the &lt;a href=&#34;https://github.com/grafana/k6/issues&#34;&gt;github issue&lt;/a&gt; for the problem you&#39;re solving (create one if it doesn&#39;t exist) or in the &lt;code&gt;#developers&lt;/code&gt; channel on &lt;a href=&#34;https://k6.io/slack&#34;&gt;Slack&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sirupsen/logrus</title>
    <updated>2022-09-08T01:37:43Z</updated>
    <id>tag:github.com,2022-09-08:/sirupsen/logrus</id>
    <link href="https://github.com/sirupsen/logrus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Structured, pluggable logging for Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Logrus &lt;img src=&#34;http://i.imgur.com/hTeVwmJ.png&#34; width=&#34;40&#34; height=&#34;40&#34; alt=&#34;:walrus:&#34; class=&#34;emoji&#34; title=&#34;:walrus:&#34;&gt; &lt;a href=&#34;https://github.com/sirupsen/logrus/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/sirupsen/logrus/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/sirupsen/logrus&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sirupsen/logrus.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/sirupsen/logrus&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/sirupsen/logrus.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Logrus is a structured logger for Go (golang), completely API compatible with the standard library logger.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Logrus is in maintenance-mode.&lt;/strong&gt; We will not be introducing new features. It&#39;s simply too hard to do in a way that won&#39;t break many people&#39;s projects, which is the last thing you want from your Logging library (again...).&lt;/p&gt; &#xA;&lt;p&gt;This does not mean Logrus is dead. Logrus will continue to be maintained for security, (backwards compatible) bug fixes, and performance (where we are limited by the interface).&lt;/p&gt; &#xA;&lt;p&gt;I believe Logrus&#39; biggest contribution is to have played a part in today&#39;s widespread use of structured logging in Golang. There doesn&#39;t seem to be a reason to do a major, breaking iteration into Logrus V2, since the fantastic Go community has built those independently. Many fantastic alternatives have sprung up. Logrus would look like those, had it been re-designed with what we know about structured logging in Go today. Check out, for example, &lt;a href=&#34;https://github.com/rs/zerolog&#34;&gt;Zerolog&lt;/a&gt;, &lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;Zap&lt;/a&gt;, and &lt;a href=&#34;https://github.com/apex/log&#34;&gt;Apex&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Seeing weird case-sensitive problems?&lt;/strong&gt; It&#39;s in the past been possible to import Logrus as both upper- and lower-case. Due to the Go package environment, this caused issues in the community and we needed a standard. Some environments experienced problems with the upper-case variant, so the lower-case was decided. Everything using &lt;code&gt;logrus&lt;/code&gt; will need to use the lower-case: &lt;code&gt;github.com/sirupsen/logrus&lt;/code&gt;. Any package that isn&#39;t, should be changed.&lt;/p&gt; &#xA;&lt;p&gt;To fix Glide, see &lt;a href=&#34;https://github.com/sirupsen/logrus/issues/553#issuecomment-306591437&#34;&gt;these comments&lt;/a&gt;. For an in-depth explanation of the casing issue, see &lt;a href=&#34;https://github.com/sirupsen/logrus/issues/570#issuecomment-313933276&#34;&gt;this comment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Nicely color-coded in development (when a TTY is attached, otherwise just plain text):&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/PY7qMwd.png&#34; alt=&#34;Colored&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;log.SetFormatter(&amp;amp;log.JSONFormatter{})&lt;/code&gt;, for easy parsing by logstash or Splunk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;animal&#34;:&#34;walrus&#34;,&#34;level&#34;:&#34;info&#34;,&#34;msg&#34;:&#34;A group of walrus emerges from the&#xA;ocean&#34;,&#34;size&#34;:10,&#34;time&#34;:&#34;2014-03-10 19:57:38.562264131 -0400 EDT&#34;}&#xA;&#xA;{&#34;level&#34;:&#34;warning&#34;,&#34;msg&#34;:&#34;The group&#39;s number increased tremendously!&#34;,&#xA;&#34;number&#34;:122,&#34;omg&#34;:true,&#34;time&#34;:&#34;2014-03-10 19:57:38.562471297 -0400 EDT&#34;}&#xA;&#xA;{&#34;animal&#34;:&#34;walrus&#34;,&#34;level&#34;:&#34;info&#34;,&#34;msg&#34;:&#34;A giant walrus appears!&#34;,&#xA;&#34;size&#34;:10,&#34;time&#34;:&#34;2014-03-10 19:57:38.562500591 -0400 EDT&#34;}&#xA;&#xA;{&#34;animal&#34;:&#34;walrus&#34;,&#34;level&#34;:&#34;info&#34;,&#34;msg&#34;:&#34;Tremendously sized cow enters the ocean.&#34;,&#xA;&#34;size&#34;:9,&#34;time&#34;:&#34;2014-03-10 19:57:38.562527896 -0400 EDT&#34;}&#xA;&#xA;{&#34;level&#34;:&#34;fatal&#34;,&#34;msg&#34;:&#34;The ice breaks!&#34;,&#34;number&#34;:100,&#34;omg&#34;:true,&#xA;&#34;time&#34;:&#34;2014-03-10 19:57:38.562543128 -0400 EDT&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the default &lt;code&gt;log.SetFormatter(&amp;amp;log.TextFormatter{})&lt;/code&gt; when a TTY is not attached, the output is compatible with the &lt;a href=&#34;http://godoc.org/github.com/kr/logfmt&#34;&gt;logfmt&lt;/a&gt; format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;time=&#34;2015-03-26T01:27:38-04:00&#34; level=debug msg=&#34;Started observing beach&#34; animal=walrus number=8&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=info msg=&#34;A group of walrus emerges from the ocean&#34; animal=walrus size=10&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=warning msg=&#34;The group&#39;s number increased tremendously!&#34; number=122 omg=true&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=debug msg=&#34;Temperature changes&#34; temperature=-4&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=panic msg=&#34;It&#39;s over 9000!&#34; animal=orca size=9009&#xA;time=&#34;2015-03-26T01:27:38-04:00&#34; level=fatal msg=&#34;The ice breaks!&#34; err=&amp;amp;{0x2082280c0 map[animal:orca size:9009] 2015-03-26 01:27:38.441574009 -0400 EDT panic It&#39;s over 9000!} number=100 omg=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To ensure this behaviour even if a TTY is attached, set your formatter as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#x9;log.SetFormatter(&amp;amp;log.TextFormatter{&#xA;&#x9;&#x9;DisableColors: true,&#xA;&#x9;&#x9;FullTimestamp: true,&#xA;&#x9;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logging Method Name&lt;/h4&gt; &#xA;&lt;p&gt;If you wish to add the calling method as a field, instruct the logger via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.SetReportCaller(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds the caller as &#39;method&#39; like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#34;animal&#34;:&#34;penguin&#34;,&#34;level&#34;:&#34;fatal&#34;,&#34;method&#34;:&#34;github.com/sirupsen/arcticcreatures.migrate&#34;,&#34;msg&#34;:&#34;a penguin swims by&#34;,&#xA;&#34;time&#34;:&#34;2014-03-10 19:57:38.562543129 -0400 EDT&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;time=&#34;2015-03-26T01:27:38-04:00&#34; level=fatal method=github.com/sirupsen/arcticcreatures.migrate msg=&#34;a penguin swims by&#34; animal=penguin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this does add measurable overhead - the cost will depend on the version of Go, but is between 20 and 40% in recent tests with 1.6 and 1.7. You can validate this in your environment via benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -bench=.*CallerTracing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Case-sensitivity&lt;/h4&gt; &#xA;&lt;p&gt;The organization&#39;s name was changed to lower-case--and this will not be changed back. If you are getting import conflicts due to case sensitivity, please use the lower-case import: &lt;code&gt;github.com/sirupsen/logrus&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;The simplest way to use Logrus is simply the package-level exported logger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  log &#34;github.com/sirupsen/logrus&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  log.WithFields(log.Fields{&#xA;    &#34;animal&#34;: &#34;walrus&#34;,&#xA;  }).Info(&#34;A walrus appears&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that it&#39;s completely api-compatible with the stdlib logger, so you can replace your &lt;code&gt;log&lt;/code&gt; imports everywhere with &lt;code&gt;log &#34;github.com/sirupsen/logrus&#34;&lt;/code&gt; and you&#39;ll now have the flexibility of Logrus. You can customize it all you want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;os&#34;&#xA;  log &#34;github.com/sirupsen/logrus&#34;&#xA;)&#xA;&#xA;func init() {&#xA;  // Log as JSON instead of the default ASCII formatter.&#xA;  log.SetFormatter(&amp;amp;log.JSONFormatter{})&#xA;&#xA;  // Output to stdout instead of the default stderr&#xA;  // Can be any io.Writer, see below for File example&#xA;  log.SetOutput(os.Stdout)&#xA;&#xA;  // Only log the warning severity or above.&#xA;  log.SetLevel(log.WarnLevel)&#xA;}&#xA;&#xA;func main() {&#xA;  log.WithFields(log.Fields{&#xA;    &#34;animal&#34;: &#34;walrus&#34;,&#xA;    &#34;size&#34;:   10,&#xA;  }).Info(&#34;A group of walrus emerges from the ocean&#34;)&#xA;&#xA;  log.WithFields(log.Fields{&#xA;    &#34;omg&#34;:    true,&#xA;    &#34;number&#34;: 122,&#xA;  }).Warn(&#34;The group&#39;s number increased tremendously!&#34;)&#xA;&#xA;  log.WithFields(log.Fields{&#xA;    &#34;omg&#34;:    true,&#xA;    &#34;number&#34;: 100,&#xA;  }).Fatal(&#34;The ice breaks!&#34;)&#xA;&#xA;  // A common pattern is to re-use fields between logging statements by re-using&#xA;  // the logrus.Entry returned from WithFields()&#xA;  contextLogger := log.WithFields(log.Fields{&#xA;    &#34;common&#34;: &#34;this is a common field&#34;,&#xA;    &#34;other&#34;: &#34;I also should be logged always&#34;,&#xA;  })&#xA;&#xA;  contextLogger.Info(&#34;I&#39;ll be logged with common and other field&#34;)&#xA;  contextLogger.Info(&#34;Me too&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more advanced usage such as logging to multiple locations from the same application, you can also create an instance of the &lt;code&gt;logrus&lt;/code&gt; Logger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;os&#34;&#xA;  &#34;github.com/sirupsen/logrus&#34;&#xA;)&#xA;&#xA;// Create a new instance of the logger. You can have any number of instances.&#xA;var log = logrus.New()&#xA;&#xA;func main() {&#xA;  // The API for setting attributes is a little different than the package level&#xA;  // exported logger. See Godoc.&#xA;  log.Out = os.Stdout&#xA;&#xA;  // You could set this to any `io.Writer` such as a file&#xA;  // file, err := os.OpenFile(&#34;logrus.log&#34;, os.O_CREATE|os.O_WRONLY|os.O_APPEND, 0666)&#xA;  // if err == nil {&#xA;  //  log.Out = file&#xA;  // } else {&#xA;  //  log.Info(&#34;Failed to log to file, using default stderr&#34;)&#xA;  // }&#xA;&#xA;  log.WithFields(logrus.Fields{&#xA;    &#34;animal&#34;: &#34;walrus&#34;,&#xA;    &#34;size&#34;:   10,&#xA;  }).Info(&#34;A group of walrus emerges from the ocean&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fields&lt;/h4&gt; &#xA;&lt;p&gt;Logrus encourages careful, structured logging through logging fields instead of long, unparseable error messages. For example, instead of: &lt;code&gt;log.Fatalf(&#34;Failed to send event %s to topic %s with key %d&#34;)&lt;/code&gt;, you should log the much more discoverable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.WithFields(log.Fields{&#xA;  &#34;event&#34;: event,&#xA;  &#34;topic&#34;: topic,&#xA;  &#34;key&#34;: key,&#xA;}).Fatal(&#34;Failed to send event&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ve found this API forces you to think about logging in a way that produces much more useful logging messages. We&#39;ve been in countless situations where just a single added field to a log statement that was already there would&#39;ve saved us hours. The &lt;code&gt;WithFields&lt;/code&gt; call is optional.&lt;/p&gt; &#xA;&lt;p&gt;In general, with Logrus using any of the &lt;code&gt;printf&lt;/code&gt;-family functions should be seen as a hint you should add a field, however, you can still use the &lt;code&gt;printf&lt;/code&gt;-family functions with Logrus.&lt;/p&gt; &#xA;&lt;h4&gt;Default Fields&lt;/h4&gt; &#xA;&lt;p&gt;Often it&#39;s helpful to have fields &lt;em&gt;always&lt;/em&gt; attached to log statements in an application or parts of one. For example, you may want to always log the &lt;code&gt;request_id&lt;/code&gt; and &lt;code&gt;user_ip&lt;/code&gt; in the context of a request. Instead of writing &lt;code&gt;log.WithFields(log.Fields{&#34;request_id&#34;: request_id, &#34;user_ip&#34;: user_ip})&lt;/code&gt; on every line, you can create a &lt;code&gt;logrus.Entry&lt;/code&gt; to pass around instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;requestLogger := log.WithFields(log.Fields{&#34;request_id&#34;: request_id, &#34;user_ip&#34;: user_ip})&#xA;requestLogger.Info(&#34;something happened on that request&#34;) # will log request_id and user_ip&#xA;requestLogger.Warn(&#34;something not great happened&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hooks&lt;/h4&gt; &#xA;&lt;p&gt;You can add hooks for logging levels. For example to send errors to an exception tracking service on &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Fatal&lt;/code&gt; and &lt;code&gt;Panic&lt;/code&gt;, info to StatsD or log to multiple places simultaneously, e.g. syslog.&lt;/p&gt; &#xA;&lt;p&gt;Logrus comes with &lt;a href=&#34;https://raw.githubusercontent.com/sirupsen/logrus/master/hooks/&#34;&gt;built-in hooks&lt;/a&gt;. Add those, or your custom hook, in &lt;code&gt;init&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;  log &#34;github.com/sirupsen/logrus&#34;&#xA;  &#34;gopkg.in/gemnasium/logrus-airbrake-hook.v2&#34; // the package is named &#34;airbrake&#34;&#xA;  logrus_syslog &#34;github.com/sirupsen/logrus/hooks/syslog&#34;&#xA;  &#34;log/syslog&#34;&#xA;)&#xA;&#xA;func init() {&#xA;&#xA;  // Use the Airbrake hook to report errors that have Error severity or above to&#xA;  // an exception tracker. You can create custom hooks, see the Hooks section.&#xA;  log.AddHook(airbrake.NewHook(123, &#34;xyz&#34;, &#34;production&#34;))&#xA;&#xA;  hook, err := logrus_syslog.NewSyslogHook(&#34;udp&#34;, &#34;localhost:514&#34;, syslog.LOG_INFO, &#34;&#34;)&#xA;  if err != nil {&#xA;    log.Error(&#34;Unable to connect to local syslog daemon&#34;)&#xA;  } else {&#xA;    log.AddHook(hook)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Syslog hook also support connecting to local syslog (Ex. &#34;/dev/log&#34; or &#34;/var/run/syslog&#34; or &#34;/var/run/log&#34;). For the detail, please check the &lt;a href=&#34;https://raw.githubusercontent.com/sirupsen/logrus/master/hooks/syslog/README.md&#34;&gt;syslog hook README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A list of currently known service hooks can be found in this wiki &lt;a href=&#34;https://github.com/sirupsen/logrus/wiki/Hooks&#34;&gt;page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Level logging&lt;/h4&gt; &#xA;&lt;p&gt;Logrus has seven logging levels: Trace, Debug, Info, Warning, Error, Fatal and Panic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Trace(&#34;Something very low level.&#34;)&#xA;log.Debug(&#34;Useful debugging information.&#34;)&#xA;log.Info(&#34;Something noteworthy happened!&#34;)&#xA;log.Warn(&#34;You should probably take a look at this.&#34;)&#xA;log.Error(&#34;Something failed but I&#39;m not quitting.&#34;)&#xA;// Calls os.Exit(1) after logging&#xA;log.Fatal(&#34;Bye.&#34;)&#xA;// Calls panic() after logging&#xA;log.Panic(&#34;I&#39;m bailing.&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the logging level on a &lt;code&gt;Logger&lt;/code&gt;, then it will only log entries with that severity or anything above it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Will log anything that is info or above (warn, error, fatal, panic). Default.&#xA;log.SetLevel(log.InfoLevel)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It may be useful to set &lt;code&gt;log.Level = logrus.DebugLevel&lt;/code&gt; in a debug or verbose environment if your application has that.&lt;/p&gt; &#xA;&lt;h4&gt;Entries&lt;/h4&gt; &#xA;&lt;p&gt;Besides the fields added with &lt;code&gt;WithField&lt;/code&gt; or &lt;code&gt;WithFields&lt;/code&gt; some fields are automatically added to all logging events:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;time&lt;/code&gt;. The timestamp when the entry was created.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;msg&lt;/code&gt;. The logging message passed to &lt;code&gt;{Info,Warn,Error,Fatal,Panic}&lt;/code&gt; after the &lt;code&gt;AddFields&lt;/code&gt; call. E.g. &lt;code&gt;Failed to send event.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;level&lt;/code&gt;. The logging level. E.g. &lt;code&gt;info&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Environments&lt;/h4&gt; &#xA;&lt;p&gt;Logrus has no notion of environment.&lt;/p&gt; &#xA;&lt;p&gt;If you wish for hooks and formatters to only be used in specific environments, you should handle that yourself. For example, if your application has a global variable &lt;code&gt;Environment&lt;/code&gt;, which is a string representation of the environment you could do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;  log &#34;github.com/sirupsen/logrus&#34;&#xA;)&#xA;&#xA;func init() {&#xA;  // do something here to set environment depending on an environment variable&#xA;  // or command-line flag&#xA;  if Environment == &#34;production&#34; {&#xA;    log.SetFormatter(&amp;amp;log.JSONFormatter{})&#xA;  } else {&#xA;    // The TextFormatter is default, you don&#39;t actually have to do this.&#xA;    log.SetFormatter(&amp;amp;log.TextFormatter{})&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configuration is how &lt;code&gt;logrus&lt;/code&gt; was intended to be used, but JSON in production is mostly only useful if you do log aggregation with tools like Splunk or Logstash.&lt;/p&gt; &#xA;&lt;h4&gt;Formatters&lt;/h4&gt; &#xA;&lt;p&gt;The built-in logging formatters are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;logrus.TextFormatter&lt;/code&gt;. Logs the event in colors if stdout is a tty, otherwise without colors. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Note:&lt;/em&gt; to force colored output when there is no TTY, set the &lt;code&gt;ForceColors&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;. To force no colored output even if there is a TTY set the &lt;code&gt;DisableColors&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;. For Windows, see &lt;a href=&#34;https://github.com/mattn/go-colorable&#34;&gt;github.com/mattn/go-colorable&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;When colors are enabled, levels are truncated to 4 characters by default. To disable truncation set the &lt;code&gt;DisableLevelTruncation&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;When outputting to a TTY, it&#39;s often helpful to visually scan down a column where all the levels are the same width. Setting the &lt;code&gt;PadLevelText&lt;/code&gt; field to &lt;code&gt;true&lt;/code&gt; enables this behavior, by adding padding to the level text.&lt;/li&gt; &#xA;   &lt;li&gt;All options are listed in the &lt;a href=&#34;https://godoc.org/github.com/sirupsen/logrus#TextFormatter&#34;&gt;generated docs&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;logrus.JSONFormatter&lt;/code&gt;. Logs fields as JSON. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All options are listed in the &lt;a href=&#34;https://godoc.org/github.com/sirupsen/logrus#JSONFormatter&#34;&gt;generated docs&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Third party logging formatters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joonix/log&#34;&gt;&lt;code&gt;FluentdFormatter&lt;/code&gt;&lt;/a&gt;. Formats entries that can be parsed by Kubernetes and Google Container Engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fabienm/go-logrus-formatters&#34;&gt;&lt;code&gt;GELF&lt;/code&gt;&lt;/a&gt;. Formats entries so they comply to Graylog&#39;s &lt;a href=&#34;http://docs.graylog.org/en/2.4/pages/gelf.html&#34;&gt;GELF 1.1 specification&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bshuster-repo/logrus-logstash-hook&#34;&gt;&lt;code&gt;logstash&lt;/code&gt;&lt;/a&gt;. Logs fields as &lt;a href=&#34;http://logstash.net&#34;&gt;Logstash&lt;/a&gt; Events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/x-cray/logrus-prefixed-formatter&#34;&gt;&lt;code&gt;prefixed&lt;/code&gt;&lt;/a&gt;. Displays log entry source along with alternative layout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aybabtme/logzalgo&#34;&gt;&lt;code&gt;zalgo&lt;/code&gt;&lt;/a&gt;. Invoking the Power of Zalgo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antonfisher/nested-logrus-formatter&#34;&gt;&lt;code&gt;nested-logrus-formatter&lt;/code&gt;&lt;/a&gt;. Converts logrus fields to a nested structure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zput/zxcTool&#34;&gt;&lt;code&gt;powerful-logrus-formatter&lt;/code&gt;&lt;/a&gt;. get fileName, log&#39;s line number and the latest function&#39;s name when print log; Sava log to files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nolleh/caption_json_formatter&#34;&gt;&lt;code&gt;caption-json-formatter&lt;/code&gt;&lt;/a&gt;. logrus&#39;s message json formatter with human-readable caption added.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can define your formatter by implementing the &lt;code&gt;Formatter&lt;/code&gt; interface, requiring a &lt;code&gt;Format&lt;/code&gt; method. &lt;code&gt;Format&lt;/code&gt; takes an &lt;code&gt;*Entry&lt;/code&gt;. &lt;code&gt;entry.Data&lt;/code&gt; is a &lt;code&gt;Fields&lt;/code&gt; type (&lt;code&gt;map[string]interface{}&lt;/code&gt;) with all your fields as well as the default ones (see Entries section above):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MyJSONFormatter struct {&#xA;}&#xA;&#xA;log.SetFormatter(new(MyJSONFormatter))&#xA;&#xA;func (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {&#xA;  // Note this doesn&#39;t include Time, Level and Message which are available on&#xA;  // the Entry. Consult `godoc` on information about those fields or read the&#xA;  // source of the official loggers.&#xA;  serialized, err := json.Marshal(entry.Data)&#xA;    if err != nil {&#xA;      return nil, fmt.Errorf(&#34;Failed to marshal fields to JSON, %w&#34;, err)&#xA;    }&#xA;  return append(serialized, &#39;\n&#39;), nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logger as an &lt;code&gt;io.Writer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Logrus can be transformed into an &lt;code&gt;io.Writer&lt;/code&gt;. That writer is the end of an &lt;code&gt;io.Pipe&lt;/code&gt; and it is your responsibility to close it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;w := logger.Writer()&#xA;defer w.Close()&#xA;&#xA;srv := http.Server{&#xA;    // create a stdlib log.Logger that writes to&#xA;    // logrus.Logger.&#xA;    ErrorLog: log.New(w, &#34;&#34;, 0),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each line written to that writer will be printed the usual way, using formatters and hooks. The level for those entries is &lt;code&gt;info&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This means that we can override the standard library logger easily:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;logger := logrus.New()&#xA;logger.Formatter = &amp;amp;logrus.JSONFormatter{}&#xA;&#xA;// Use logrus for standard log output&#xA;// Note that `log` here references stdlib&#39;s log&#xA;// Not logrus imported under the name `log`.&#xA;log.SetOutput(logger.Writer())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rotation&lt;/h4&gt; &#xA;&lt;p&gt;Log rotation is not provided with Logrus. Log rotation should be done by an external program (like &lt;code&gt;logrotate(8)&lt;/code&gt;) that can compress and delete old log entries. It should not be a feature of the application-level logger.&lt;/p&gt; &#xA;&lt;h4&gt;Tools&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gogap/logrus_mate&#34;&gt;Logrus Mate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logrus mate is a tool for Logrus to manage loggers, you can initial logger&#39;s level, hook and formatter by config file, the logger will be generated with different configs in different environments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/heirko/go-contrib/tree/master/logrusHelper&#34;&gt;Logrus Viper Helper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An Helper around Logrus to wrap with spf13/Viper to load configuration with fangs! And to simplify Logrus configuration use some behavior of &lt;a href=&#34;https://github.com/gogap/logrus_mate&#34;&gt;Logrus Mate&lt;/a&gt;. &lt;a href=&#34;https://github.com/heirko/iris-contrib/raw/master/middleware/logrus-logger/example&#34;&gt;sample&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Testing&lt;/h4&gt; &#xA;&lt;p&gt;Logrus has a built in facility for asserting the presence of log messages. This is implemented through the &lt;code&gt;test&lt;/code&gt; hook and provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;decorators for existing logger (&lt;code&gt;test.NewLocal&lt;/code&gt; and &lt;code&gt;test.NewGlobal&lt;/code&gt;) which basically just adds the &lt;code&gt;test&lt;/code&gt; hook&lt;/li&gt; &#xA; &lt;li&gt;a test logger (&lt;code&gt;test.NewNullLogger&lt;/code&gt;) that just records log messages (and does not output any):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import(&#xA;  &#34;github.com/sirupsen/logrus&#34;&#xA;  &#34;github.com/sirupsen/logrus/hooks/test&#34;&#xA;  &#34;github.com/stretchr/testify/assert&#34;&#xA;  &#34;testing&#34;&#xA;)&#xA;&#xA;func TestSomething(t*testing.T){&#xA;  logger, hook := test.NewNullLogger()&#xA;  logger.Error(&#34;Helloerror&#34;)&#xA;&#xA;  assert.Equal(t, 1, len(hook.Entries))&#xA;  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)&#xA;  assert.Equal(t, &#34;Helloerror&#34;, hook.LastEntry().Message)&#xA;&#xA;  hook.Reset()&#xA;  assert.Nil(t, hook.LastEntry())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fatal handlers&lt;/h4&gt; &#xA;&lt;p&gt;Logrus can register one or more functions that will be called when any &lt;code&gt;fatal&lt;/code&gt; level message is logged. The registered handlers will be executed before logrus performs an &lt;code&gt;os.Exit(1)&lt;/code&gt;. This behavior may be helpful if callers need to gracefully shutdown. Unlike a &lt;code&gt;panic(&#34;Something went wrong...&#34;)&lt;/code&gt; call which can be intercepted with a deferred &lt;code&gt;recover&lt;/code&gt; a call to &lt;code&gt;os.Exit(1)&lt;/code&gt; can not be intercepted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;...&#xA;handler := func() {&#xA;  // gracefully shutdown something...&#xA;}&#xA;logrus.RegisterExitHandler(handler)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Thread safety&lt;/h4&gt; &#xA;&lt;p&gt;By default, Logger is protected by a mutex for concurrent writes. The mutex is held when calling hooks and writing logs. If you are sure such locking is not needed, you can call logger.SetNoLock() to disable the locking.&lt;/p&gt; &#xA;&lt;p&gt;Situation when locking is not needed includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You have no hooks registered, or hooks calling is already thread-safe.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Writing to logger.Out is already thread-safe, for example:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;logger.Out is protected by locks.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;logger.Out is an os.File handler opened with &lt;code&gt;O_APPEND&lt;/code&gt; flag, and every write is smaller than 4k. (This allows multi-thread/multi-process writing)&lt;/p&gt; &lt;p&gt;(Refer to &lt;a href=&#34;http://www.notthewizard.com/2014/06/17/are-files-appends-really-atomic/&#34;&gt;http://www.notthewizard.com/2014/06/17/are-files-appends-really-atomic/&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>drk1wi/Modlishka</title>
    <updated>2022-09-08T01:37:43Z</updated>
    <id>tag:github.com,2022-09-08:/drk1wi/Modlishka</id>
    <link href="https://github.com/drk1wi/Modlishka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modlishka. Reverse Proxy.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;..Modlishka..&lt;/h1&gt; &#xA;&lt;p&gt;Modlishka is a powerful and flexible HTTP reverse proxy. It implements an entirely new and interesting approach of handling browser-based HTTP traffic flow, which allows to transparently proxy multi-domain destination traffic, both TLS and non-TLS, over a single domain, without a requirement of installing any additional certificate on the client. What does this exactly mean? In short, it simply has a lot of potential, that can be used in many use case scenarios...&lt;/p&gt; &#xA;&lt;p&gt;From the security perspective, Modlishka can be currently used to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support ethical phishing penetration tests with a transparent and automated reverse proxy component that has a universal 2FA “bypass” support.&lt;/li&gt; &#xA; &lt;li&gt;Automatically poison HTTP 301 browsers cache and permanently hijack non-TLS URLS.&lt;/li&gt; &#xA; &lt;li&gt;Diagnose and hijack browser-based applications HTTP traffic from the &#34;Client Domain Hooking&#34; attack perspective.&lt;/li&gt; &#xA; &lt;li&gt;Wrap legacy websites with TLS layer, confuse crawler bots and automated scanners, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Modlishka was written as an attempt overcome standard reverse proxy limitations and as a personal challenge to see what is possible with sufficient motivation and a bit of extra research time. The achieved results appeared to be very interesting and the tool was initially released and later updated with aim to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highlight currently used two factor authentication (&lt;a href=&#34;https://blog.duszynski.eu/phishing-ng-bypassing-2fa-with-modlishka/&#34;&gt;2FA&lt;/a&gt;) scheme weaknesses, so adequate security solutions can be created and implemented by the industry.&lt;/li&gt; &#xA; &lt;li&gt;Support other projects that could benefit from a universal and transparent reverse proxy.&lt;/li&gt; &#xA; &lt;li&gt;Raise community awareness about modern phishing techniques and strategies and support penetration testers in their daily work.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Modlishka was primarily written for security related tasks. Nevertheless, it can be helpful in other, non-security related, usage scenarios.&lt;/p&gt; &#xA;&lt;p&gt;Efficient proxying !&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Some of the most important &#39;Modlishka&#39; features :&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;General:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Point-and-click HTTP and HTTPS reverse proxying of an arbitrary domain/s.&lt;/li&gt; &#xA; &lt;li&gt;Full control of &#34;cross&#34; origin TLS traffic flow from your users browsers (without a requirement of installing any additional certificate on the client).&lt;/li&gt; &#xA; &lt;li&gt;Easy and fast configuration through command line options and JSON configuration files.&lt;/li&gt; &#xA; &lt;li&gt;Pattern based JavaScript payload injection.&lt;/li&gt; &#xA; &lt;li&gt;Wrapping websites with an extra &#34;security&#34;: TLS wrapping, authentication, relevant security headers, etc.&lt;/li&gt; &#xA; &lt;li&gt;Striping websites from all encryption and security headers (back to 90&#39;s MITM style).&lt;/li&gt; &#xA; &lt;li&gt;Stateless design. Can be scaled up easily to handle an arbitrary amount of traffic - e.g. through a DNS load balancer.&lt;/li&gt; &#xA; &lt;li&gt;Can be extended easily with your ideas through modular plugins.&lt;/li&gt; &#xA; &lt;li&gt;Automatic test TLS certificate generation plugin for the proxy domain (requires a self-signed CA certificate)&lt;/li&gt; &#xA; &lt;li&gt;Written in Go, so it works basically on all platforms and architectures: Windows, OSX, Linux, BSD supported...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Security related:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for majority of 2FA authentication schemes (out of the box).&lt;/li&gt; &#xA; &lt;li&gt;Practical implementation of the &#34;&lt;a href=&#34;https://blog.duszynski.eu/client-domain-hooking-in-practice/&#34;&gt;Client Domain Hooking&lt;/a&gt;&#34; attack. Supported with a diagnostic plugin.&lt;/li&gt; &#xA; &lt;li&gt;User credential harvesting (with context based on URL parameter passed identifiers).&lt;/li&gt; &#xA; &lt;li&gt;Web panel plugin with a summary of automatically collected credentials and one-click user session impersonation module (proof-of-concept/beta).&lt;/li&gt; &#xA; &lt;li&gt;No website templates (just point Modlishka to the target domain - in most cases, it will be handled automatically without any additional manual configuration).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Proxying In Action (2FA bypass)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;&#34;A picture is worth a thousand words&#34;:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Modlishka in action against an example two factor authentication scheme (SMS based bypass proof-of-concept) :&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vimeo.com/308709275&#34;&gt;https://vimeo.com/308709275&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Latest source code version can be fetched from &lt;a href=&#34;https://github.com/drk1wi/modlishka/zipball/master&#34;&gt;here&lt;/a&gt; (zip) or &lt;a href=&#34;https://github.com/drk1wi/modlishka/tarball/master&#34;&gt;here&lt;/a&gt; (tar).&lt;/p&gt; &#xA;&lt;p&gt;Fetch the code with &lt;em&gt;&#39;go install&#39;&lt;/em&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go install github.com/drk1wi/Modlishka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compile the binary and you are ready to go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/drk1wi/Modlishka.git&#xA;$ cd Modlishka&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/drk1wi/assets/raw/master/0876a672f771046e833f2242f6be5d3cf01519efdbb9dad0e1ed2d33e33fecbc.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# ./dist/proxy -h&#xA;&#xA;&#xA;Usage of ./dist/proxy:&#xA;      &#xA;  -cert string&#xA;    &#x9;base64 encoded TLS certificate&#xA;  &#xA;  -certKey string&#xA;    &#x9;base64 encoded TLS certificate key&#xA;  &#xA;  -certPool string&#xA;    &#x9;base64 encoded Certification Authority certificate&#xA;  &#xA;  -config string&#xA;    &#x9;JSON configuration file. Convenient instead of using command line switches.&#xA;      &#xA;  -controlCreds string&#xA;      Username and password to protect the credentials page.  user:pass format&#xA;      &#xA;  -controlURL string&#xA;      URL to view captured credentials and settings. (default &#34;SayHello2Modlishka&#34;)&#xA;      &#xA;  -credParams string&#xA;      &#x9;Credential regexp with matching groups. e.g. : base64(username_regex),base64(password_regex)&#xA;&#xA;  -debug&#xA;    &#x9;Print debug information&#xA;  &#xA;  -disableSecurity&#xA;    &#x9;Disable proxy security features like anti-SSRF. &#39;Here be dragons&#39; - disable at your own risk.&#xA;  &#xA;  -dynamicMode&#xA;      &#x9;Enable dynamic mode for &#39;Client Domain Hooking&#39;&#xA;  &#xA;  -forceHTTP&#xA;     &#x9;Strip all TLS from the traffic and proxy through HTTP only&#xA;&#xA;  -forceHTTPS&#xA;     &#x9;Strip all clear-text from the traffic and proxy through HTTPS only&#xA; &#xA;  -jsRules string&#xA;    &#x9;Comma separated list of URL patterns and JS base64 encoded payloads that will be injected - e.g.: target.tld:base64(alert(1)),..,etc&#xA;  &#xA;  -listeningAddress string&#xA;    &#x9;Listening address - e.g.: 0.0.0.0  (default &#34;127.0.0.1&#34;)&#xA;  &#xA;  -log string&#xA;    &#x9;Local file to which fetched requests will be written (appended)&#xA;  &#xA;  -plugins string&#xA;    &#x9;Comma seperated list of enabled plugin names (default &#34;all&#34;)&#xA;  &#xA;  -proxyAddress string&#xA;&#x9;    Proxy that should be used (socks/https/http) - e.g.: http://127.0.0.1:8080 &#xA;     &#xA;  -proxyDomain string&#xA;    &#x9;Proxy domain name that will be used - e.g.: proxy.tld&#xA;  &#xA;  -postOnly&#xA;    &#x9;Log only HTTP POST requests&#xA;  &#xA;  -rules string&#xA;      &#x9;Comma separated list of &#39;string&#39; patterns and their replacements - e.g.: base64(new):base64(old),base64(newer):base64(older)&#xA;&#xA;  -target string&#xA;    &#x9;Target domain name  - e.g.: target.tld&#xA;     &#xA;  -targetRes string&#xA;    &#x9;Comma separated list of domains that were not translated automatically. Use this to force domain translation - e.g.: static.target.tld &#xA;  &#xA;  -terminateTriggers string&#xA;    &#x9;Session termination: Comma separated list of URLs from target&#39;s origin which will trigger session termination&#xA;    &#x9;&#x9;&#xA;  -terminateUrl string&#xA;    &#x9;URL to which a client will be redirected after Session Termination rules trigger&#xA;  &#xA;  -trackingCookie string&#xA;    &#x9;Name of the HTTP cookie used to track the client (default &#34;id&#34;)&#xA;  &#xA;  -trackingParam string&#xA;    &#x9;Name of the HTTP parameter used to track the client (default &#34;id&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/drk1wi/Modlishka/wiki&#34;&gt;WIKI&lt;/a&gt; pages: with more details about the tool usage and configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/drk1wi/Modlishka/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Blog posts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.duszynski.eu/phishing-ng-bypassing-2fa-with-modlishka/&#34;&gt;&#34;Modlishka introduction&#34;&lt;/a&gt; &#34;Bypassing standard 2FA mechanism proof-of-concept&#34; blog post.&lt;/li&gt; &#xA; &lt;li&gt;&#34;&lt;a href=&#34;https://blog.duszynski.eu/hijacking-browser-tls-traffic-through-client-domain-hooking/&#34;&gt;Hijacking browser TLS traffic through Client Domain Hooking&lt;/a&gt;&#34; technical paper - in case you are interested about the approach that is used to handle the traffic.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Author: Modlishka was designed and implemented by Piotr Duszyński (&lt;a href=&#34;https://twitter.com/drk1wi&#34;&gt;@drk1wi&lt;/a&gt;) (this includes the technique described in the &#34;Client Domain Hooking&#34; paper) . You can find the relevant license &lt;a href=&#34;https://github.com/drk1wi/Modlishka/raw/master/LICENSE&#34;&gt;here&lt;/a&gt;. All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;The initial version of the tool was written as part of a bigger project that was dissolved and assets were distributed accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Big kudos go to all &lt;a href=&#34;https://github.com/drk1wi/Modlishka/graphs/contributors&#34;&gt;contributors&lt;/a&gt; 💪!&lt;/p&gt; &#xA;&lt;p&gt;Kudos for helping with the final code optimization and great support go to Giuseppe Trotta (&lt;a href=&#34;https://twitter.com/giutro&#34;&gt;@Giutro&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This tool is made only for educational purposes and can be used in legitimate penetration tests or research only. Author does not take any responsibility for any actions taken by its users.&lt;/p&gt;</summary>
  </entry>
</feed>