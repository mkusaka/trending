<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-27T01:30:36Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>roblillack/spot</title>
    <updated>2024-05-27T01:30:36Z</updated>
    <id>tag:github.com,2024-05-27:/roblillack/spot</id>
    <link href="https://github.com/roblillack/spot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React-like desktop GUI toolkit for Go&lt;/p&gt;&lt;hr&gt;&lt;p style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/roblillack/spot/main/resources/2024-05-13-demo-video.gif&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Spot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/roblillack/spot.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/roblillack/spot&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/roblillack/spot&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Spot is a simple, cross-platform, reactive GUI toolkit for Go using native widgets where available. It is designed to be easy to use and to provide a consistent API across different platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/roblillack/spot&#34;&#xA;&#x9;&#34;github.com/roblillack/spot/ui&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;ui.Init()&#xA;&#xA;&#x9;spot.MountFn(func(ctx *spot.RenderContext) spot.Component {&#xA;&#x9;&#x9;counter, setCounter := spot.UseState[int](ctx, 0)&#xA;&#xA;&#x9;&#x9;buttonTitle := &#34;Click me!&#34;&#xA;&#x9;&#x9;if counter &amp;gt; 0 {&#xA;&#x9;&#x9;&#x9;buttonTitle = fmt.Sprintf(&#34;Clicked %d times!&#34;, counter)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return &amp;amp;ui.Window{&#xA;&#x9;&#x9;&#x9;Title:  &#34;Hello World!&#34;,&#xA;&#x9;&#x9;&#x9;Width:  200,&#xA;&#x9;&#x9;&#x9;Height: 125,&#xA;&#x9;&#x9;&#x9;Children: []spot.Component{&#xA;&#x9;&#x9;&#x9;&#x9;&amp;amp;ui.Button{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;X: 25, Y: 50, Width: 150, Height: 25,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Title: buttonTitle,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;OnClick: func() {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;setCounter(counter + 1)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;}&#xA;&#x9;})&#xA;&#xA;&#x9;ui.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: You can add Spot as a simple dependency to your project and start building your UI right away. No need to use additional tools or code generation steps. Just write Go code and get a native GUI application as a self-contained binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt;: Spot uses native widgets where available and automatically selects the best backend for the platform you are running on at compile time. Currently, two backend implementations are provided: one based on &lt;a href=&#34;https://fltk.org&#34;&gt;FLTK&lt;/a&gt; using &lt;a href=&#34;https://github.com/pwiecz/go-fltk&#34;&gt;go-fltk&lt;/a&gt; and one based on Cocoa using (&lt;a href=&#34;https://github.com/roblillack/gocoa&#34;&gt;a modified version of&lt;/a&gt;) &lt;a href=&#34;https://github.com/mojbro/gocoa&#34;&gt;gocoa&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Reactive&lt;/strong&gt;: Spot automatically updates the UI when the state of the application changes. You just provide side-effect free rendering functions and manage the state of your application using the &lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot#UseState&#34;&gt;&lt;code&gt;UseState&lt;/code&gt;&lt;/a&gt; hook.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Broad widget support&lt;/strong&gt;: Spot provides a wide range of UI controls out of the box, including buttons, labels, text inputs, sliders, dropdowns, and more. See the full list: &lt;a href=&#34;https://raw.githubusercontent.com/roblillack/spot/main/#list-of-supported-ui-controls&#34;&gt;List of supported UI controls&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQs&lt;/h2&gt; &#xA;&lt;h4&gt;What does &#34;reactive&#34; mean?&lt;/h4&gt; &#xA;&lt;p&gt;In the context of Spot, &lt;em&gt;reactive&lt;/em&gt; means that the UI is automatically updated when the state of the application changes. This is achieved by re-building an immutable component tree upon state changes which can quickly be compared to the previous state in order to determine what UI controls need to be updated. In the web world, this idea is often called a &#34;virtual DOM&#34; and Spot actually started as an experiment to bring this concept to Go by implementing a React-like GUI library for the desktop.&lt;/p&gt; &#xA;&lt;p&gt;By using a reactive model, the developer does not need to worry about updating the UI manually. Instead, the developer can focus on the application logic and let Spot take care of updating the UI.&lt;/p&gt; &#xA;&lt;h4&gt;What are the &#34;native widgets&#34; that Spot uses?&lt;/h4&gt; &#xA;&lt;p&gt;Currently, Spot uses a Cocoa backend on macOS and a FLTK-based one on all other platforms. Optionally, FLTK can be used on the Mac, too. Better support for Windows is planned for the future.&lt;/p&gt; &#xA;&lt;h4&gt;Can I implement my own hooks?&lt;/h4&gt; &#xA;&lt;p&gt;Yes, just like in React, you can implement your own hooks. Just create a function which takes a &lt;code&gt;*spot.RenderContext&lt;/code&gt; as first argument and use this to &#34;hook&#34; into the Spot lifecycle by calling &lt;code&gt;spot.UseState&lt;/code&gt;, &lt;code&gt;spot.UseEffect&lt;/code&gt;, etc. Convention here is to prefix the function with &lt;code&gt;Use…&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;How do I write custom components?&lt;/h4&gt; &#xA;&lt;p&gt;There are a few different ways to separate your UI into components in Spot; for some ideas, check out the &lt;code&gt;custom-components&lt;/code&gt; example. The main way to write custom components is to create a struct that implements the &lt;code&gt;spot.Component&lt;/code&gt; interface. This interface has a single method, &lt;code&gt;Render(ctx *spot.RenderContext) spot.Component&lt;/code&gt;, which is called to render the component. Components created like this can be used in the same way as the built-in ones.&lt;/p&gt; &#xA;&lt;p&gt;Look at the &lt;code&gt;BlinkingButton&lt;/code&gt; component in the example to see how this is done.&lt;/p&gt; &#xA;&lt;h4&gt;Can I use Spot with a completely different widget library than the provided one?&lt;/h4&gt; &#xA;&lt;p&gt;Yes, you can. You just need to create some structs that implement the &lt;code&gt;spot.Component&lt;/code&gt; interface and which take care of managing the native widgets.&lt;/p&gt; &#xA;&lt;h4&gt;Can I use &lt;code&gt;spot/ui&lt;/code&gt;, but with a different backend than Cocoa or FLTK?&lt;/h4&gt; &#xA;&lt;p&gt;Currently, these are the only backends that are supported. But feel free to create a PR if you want to add support for another backend. &lt;em&gt;*hint hint*&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;What&#39;s the difference between &lt;code&gt;spot/ui&lt;/code&gt; and &lt;code&gt;spot&lt;/code&gt;?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;spot&lt;/code&gt; is the core package that provides the reactive model and the rendering functionality. It is backend-agnostic and can be used with any set of controls which implement the &lt;code&gt;spot.Control&lt;/code&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;spot/ui&lt;/code&gt; is a package that provides a set of pre-built cross-platform GUI controls that which can be used with &lt;code&gt;spot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;What&#39;s the difference between a “component” and a “control”?&lt;/h4&gt; &#xA;&lt;p&gt;In Spot, a &lt;em&gt;component&lt;/em&gt; is a logical unit of the application that contains business logic and state. Any component is made out of other componens and can ultimately be rendered down to a single or multiple &#34;controls&#34;.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;control&lt;/em&gt; is special kind component is mounted to the UI tree and represents a visual element on the screen. Usually a control is backed by a native implementation of the GUI backend, like a button, a label, or a text input.&lt;/p&gt; &#xA;&lt;h4&gt;What do the terms ”make”, “render”, “build”, “mount”, and “update” mean in the context of Spot?&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Make&lt;/em&gt;: The process of creating a new component instance. This is done by creating a reference to an instance of a struct that implements the &lt;code&gt;spot.Component&lt;/code&gt; interface or by calling &lt;code&gt;spot.Make&lt;/code&gt; with a render function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Render&lt;/em&gt;: The process of applying a component&#39;s state to its building blocks and hereby returning another component instance. This is done by calling the &lt;code&gt;Render&lt;/code&gt; method on a component instance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Build&lt;/em&gt;: The process of creating a new UI tree from a component instance. This is done by &lt;em&gt;recursively&lt;/em&gt; rendering a component to create a tree of controls. This can be done by calling &lt;code&gt;spot.Build&lt;/code&gt; with a component instance or &lt;code&gt;spot.BuildFn&lt;/code&gt; with a render function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Mount&lt;/em&gt;: The process of creating real UI controls from a (virtual) tree of controls. This is done by calling &lt;code&gt;Mount&lt;/code&gt; on a tree node or &lt;code&gt;spot.Mount&lt;/code&gt; with a component instance or &lt;code&gt;spot.MountFn&lt;/code&gt; with a render function.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: The process of updating a tree of (mounted) controls. This is done by calling &lt;code&gt;Update&lt;/code&gt; on a tree node.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features, Spot does not have right now&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatic layouting&lt;/li&gt; &#xA; &lt;li&gt;Multiple windows&lt;/li&gt; &#xA; &lt;li&gt;Modal dialogs&lt;/li&gt; &#xA; &lt;li&gt;Resizable windows&lt;/li&gt; &#xA; &lt;li&gt;Menu bars&lt;/li&gt; &#xA; &lt;li&gt;Custom widgets&lt;/li&gt; &#xA; &lt;li&gt;Access to native widgets&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop&lt;/li&gt; &#xA; &lt;li&gt;Internationalization&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;List of supported UI controls&lt;/h2&gt; &#xA;&lt;p&gt;Explanation of the status column: &lt;br&gt; ❓ Not implemented / 🚧 Work in progress / ⚠️ Partially implemented / ✅ Done&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Native controls used&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#Button&#34;&gt;Button&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple button to initiate an action&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Button.html&#34;&gt;Fl_Button&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsbutton&#34;&gt;NSButton&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#Checkbox&#34;&gt;Checkbox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Control offering the user a choice between two mutually exclusive options&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Check__Button.html&#34;&gt;Fl_Check_Button&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsbutton&#34;&gt;NSButton&lt;/a&gt; (&lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsbuttontype/nsbuttontypeswitch&#34;&gt;NSButtonTypeSwitch&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ComboBox&lt;/td&gt; &#xA;   &lt;td&gt;A combined dropdown menu with text input&lt;/td&gt; &#xA;   &lt;td&gt;ComboBox &lt;br&gt; NSComboBox&lt;/td&gt; &#xA;   &lt;td&gt;Not started&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#Dial&#34;&gt;Dial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Circular status control&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Dial.html&#34;&gt;Fl_Dial&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsprogressindicator&#34;&gt;NSProgressIndicator&lt;/a&gt; (with &lt;code&gt;NSCircular&lt;/code&gt; style)&lt;/td&gt; &#xA;   &lt;td&gt;⚠️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#Dropdown&#34;&gt;Dropdown&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drop-down menu to select a single item out of multiple options&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Choice.html&#34;&gt;Fl_Choice&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nscombobox&#34;&gt;NSComboBox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Image&lt;/td&gt; &#xA;   &lt;td&gt;An image control&lt;/td&gt; &#xA;   &lt;td&gt;Image &lt;br&gt; NSImageView&lt;/td&gt; &#xA;   &lt;td&gt;Not started&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#Label&#34;&gt;Label&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Simple, non-editable text label&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Box.html&#34;&gt;Fl_Box&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nstextfield&#34;&gt;NSTextField&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#ListBox&#34;&gt;ListBox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scrollable control which allows the user to select a single or multible items from a given list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Select__Browser.html&#34;&gt;Fl_Select_Browser&lt;/a&gt;/&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Multi__Browser.html&#34;&gt;Fl_Multi_Browser&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nstableview&#34;&gt;NSTableView&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#ProgressBar&#34;&gt;ProgressBar&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Progress bar control to visualize the progression of a long-running operation&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Progress.html&#34;&gt;Fl_Progress&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsprogressindicator&#34;&gt;NSProgressIndicator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#Slider&#34;&gt;Slider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Horizontal slider input control&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Slider.html&#34;&gt;Fl_Slider&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsslider&#34;&gt;NSSlider&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#Spinner&#34;&gt;Spinner&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number input control with up/down buttons&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Spinner.html&#34;&gt;Fl_Spinner&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nstextfield&#34;&gt;NSTextField&lt;/a&gt;+&lt;a href=&#34;https://developer.apple.com/documentation/appkit/nsstepper&#34;&gt;NSStepper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#TextField&#34;&gt;TextField&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Control for single-line text input&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Input.html&#34;&gt;Fl_Input&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nstextfield&#34;&gt;NSTextField&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TextView/TextEditor&lt;/td&gt; &#xA;   &lt;td&gt;General-purpose text box to view/edit multi-line text content&lt;/td&gt; &#xA;   &lt;td&gt;Text &lt;br&gt; NSTextView&lt;/td&gt; &#xA;   &lt;td&gt;🚧&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/roblillack/spot/ui#Window&#34;&gt;Window&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Control representing a (top-level) window on the screen&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.fltk.org/doc-1.4/classFl__Window.html&#34;&gt;Fl_Window&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://developer.apple.com/documentation/appkit/nswindow&#34;&gt;NSWindow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Potential future backends to look at&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Native Windows controls: &lt;a href=&#34;https://github.com/rodrigocfd/windigo&#34;&gt;https://github.com/rodrigocfd/windigo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Threadfin/Threadfin</title>
    <updated>2024-05-27T01:30:36Z</updated>
    <id>tag:github.com,2024-05-27:/Threadfin/Threadfin</id>
    <link href="https://github.com/Threadfin/Threadfin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;an M3U proxy for Kernel/Plex/Jellyfin/Emby based on xTeVe&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34; style=&#34;background-color: #111; padding: 100;&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/Threadfin/Threadfin&#34;&gt;&lt;img width=&#34;285&#34; height=&#34;80&#34; src=&#34;https://raw.githubusercontent.com/Threadfin/Threadfin/main/html/img/threadfin.png&#34; alt=&#34;Threadfin&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Threadfin&lt;/h1&gt; &#xA;&lt;h2&gt;M3U Proxy for Plex DVR and Emby/Jellyfin Live TV. Based on xTeVe.&lt;/h2&gt; &#xA;&lt;p&gt;You can follow the old xTeVe documentation for now until I update it for Threadfin. Documentation for setup and configuration is &lt;a href=&#34;https://github.com/xteve-project/xTeVe-Documentation/raw/master/en/configuration.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Donation&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/Fyb3roptik&#34;&gt;Github Sponsor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;h3&gt;Plex&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Plex Media Server (1.11.1.4730 or newer)&lt;/li&gt; &#xA; &lt;li&gt;Plex Client with DVR support&lt;/li&gt; &#xA; &lt;li&gt;Plex Pass&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emby&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emby Server (3.5.3.0 or newer)&lt;/li&gt; &#xA; &lt;li&gt;Emby Client with Live-TV support&lt;/li&gt; &#xA; &lt;li&gt;Emby Premiere&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Jellyfin&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jellyfin Server (10.7.1 or newer)&lt;/li&gt; &#xA; &lt;li&gt;Jellyfin Client with Live-TV support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Threadfin Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New Bootstrap based UI&lt;/li&gt; &#xA; &lt;li&gt;RAM based buffer instead of File based&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Filter Group&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can now add a starting channel number for the filter group&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Map Editor&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Can now multi select Bulk Edit by holding shift&lt;/li&gt; &#xA; &lt;li&gt;Now has a separate table for inactive channels&lt;/li&gt; &#xA; &lt;li&gt;Can add 3 backup channels for an active channel (backup channels do NOT have to be active)&lt;/li&gt; &#xA; &lt;li&gt;Alpha Numeric sorting now sorts correctly&lt;/li&gt; &#xA; &lt;li&gt;Can now add a starting channel number for Bulk Edit to renumber multiple channels at a time&lt;/li&gt; &#xA; &lt;li&gt;PPV channels can now map the channel name to an EPG&lt;/li&gt; &#xA; &lt;li&gt;Removed old Threadfin buffer option, since FFMPEG/VLC will always be a better solution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;xTeVe Features&lt;/h2&gt; &#xA;&lt;h4&gt;Files&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Merge external M3U files&lt;/li&gt; &#xA; &lt;li&gt;Merge external XMLTV files&lt;/li&gt; &#xA; &lt;li&gt;Automatic M3U and XMLTV update&lt;/li&gt; &#xA; &lt;li&gt;M3U and XMLTV export&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Channel management&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Filtering streams&lt;/li&gt; &#xA; &lt;li&gt;Channel mapping&lt;/li&gt; &#xA; &lt;li&gt;Channel order&lt;/li&gt; &#xA; &lt;li&gt;Channel logos&lt;/li&gt; &#xA; &lt;li&gt;Channel categories&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Streaming&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Buffer with HLS / M3U8 support&lt;/li&gt; &#xA; &lt;li&gt;Re-streaming&lt;/li&gt; &#xA; &lt;li&gt;Number of tuners adjustable&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Plex / Emby / Jellyfin EPG&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Docker Image&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/fyb3roptik/threadfin&#34;&gt;Threadfin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker compose example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#34;2.3&#34;&#xA;services:&#xA;  threadfin:&#xA;    image: fyb3roptik/threadfin&#xA;    container_name: threadfin&#xA;    ports:&#xA;      - 34400:34400&#xA;    environment:&#xA;      - PUID=1001&#xA;      - PGID=1001&#xA;      - TZ=America/Los_Angeles&#xA;    volumes:&#xA;      - ./data/conf:/home/threadfin/conf&#xA;      - ./data/temp:/tmp/threadfin:rw&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Threadfin Beta branch&lt;/h3&gt; &#xA;&lt;p&gt;New features and bug fixes are only available in beta branch. Only after successful testing are they are merged into the main branch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is not recommended to use the beta version in a production system.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;With the command line argument &lt;code&gt;branch&lt;/code&gt; the Git Branch can be changed. Threadfin must be started via the terminal.&lt;/p&gt; &#xA;&lt;h4&gt;Switch from master to beta branch:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;threadfin -branch beta&#xA;&#xA;...&#xA;[Threadfin] GitHub:                https://github.com/Threadfin/Threadfin&#xA;[Threadfin] Git Branch:            beta [Threadfin]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Switch from beta to master branch:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;threadfin -branch main&#xA;&#xA;...&#xA;[Threadfin] GitHub:                https://github.com/Threadfin/Threadfin&#xA;[Threadfin] Git Branch:            main [Threadfin]&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the branch is changed, an update is only performed if there is a new version and the update function is activated in the settings.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Build from source code [Go / Golang]&lt;/h2&gt; &#xA;&lt;h4&gt;Requirements&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; (go1.18 or newer)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koron/go-ssdp&#34;&gt;go-ssdp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gorilla/websocket&#34;&gt;websocket&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kardianos/osext&#34;&gt;osext&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Threadfin/Threadfin/main/github.com/avfs/avfs&#34;&gt;avfs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download source code&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;go mod tidy &amp;amp;&amp;amp; go mod vendor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Build Threadfin&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build threadfin.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Update web files (optional)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If TypeScript files were changed, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;tsc -p ./ts/tsconfig.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, to embed updated JavaScript files into the source code (src/webUI.go), run it in development mode at least once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go build threadfin.go&#xA;threadfin -dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Fork without pull request &lt;span&gt;📣&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When creating a fork, the Threadfin GitHub account must be changed from the source code or the update function disabled. Future updates of Threadfin would update your fork.&lt;/p&gt; &#xA;&lt;p&gt;threadfin.go - Line: 29&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;var GitHub = GitHubStruct{Branch: &#34;main&#34;, User: &#34;Threadfin&#34;, Repo: &#34;Threadfin&#34;, Update: true}&#xA;&#xA;/*&#xA;  Branch: GitHub Branch&#xA;  User:   GitHub Username&#xA;  Repo:   GitHub Repository&#xA;  Update: Automatic updates from the GitHub repository [true|false]&#xA;*/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>zuoyebang/bitalostored</title>
    <updated>2024-05-27T01:30:36Z</updated>
    <id>tag:github.com,2024-05-27:/zuoyebang/bitalostored</id>
    <link href="https://github.com/zuoyebang/bitalostored" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bitalostored is a high-performance distributed storage system, core engine based on bitalosdb(self-developed), compatible with Redis protocol.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zuoyebang/bitalostored/main/docs/bitalos.png&#34; alt=&#34;bitalos&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Bitalostored is a high-performance distributed storage system, compatible with Redis protocol. &lt;a href=&#34;https://raw.githubusercontent.com/zuoyebang/bitalostored/main/README_CN.md&#34;&gt;中文版&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Bitalostored is a high-performance distributed storage system, core engine based on &lt;a href=&#34;https://git.zuoyebang.cc/stored-bitalosdb/bitalosdb/README.md&#34;&gt;bitalosdb&lt;/a&gt;, compatible with Redis protocol. As an alternative to Redis, it stores data with low-cost hard disk instead of expensive memory, takes full advantage of multi-core and provides excellent single-core performance, which can significantly reduce service costs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bitalostored contains three main projects: dashboard (visual management platform), stored (storage service), and proxy (proxy service). Current open-source version is stable, and provides a complete industrial grade solution. In Zuoyebang company, the stability of Bitalostored has been verified. Hundreds of online clusters are running stably all year round. Now data capacity is 200TB, peak QPS is 20 million, peak network bandwidth is 5000Gbps, and since v1.0 was released in 2019, there have been no online incidents.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Produced: Zuoyebang Company - Platform technical team&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Author: Xu Ruibo(&lt;a href=&#34;mailto:hustxrb@163.com&#34;&gt;hustxrb@163.com&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Contributors: Xing Fu(&lt;a href=&#34;mailto:wzxingfu@gmail.com&#34;&gt;wzxingfu@gmail.com&lt;/a&gt;), Lu Wenwei(&lt;a href=&#34;mailto:422213023@qq.com&#34;&gt;422213023@qq.com&lt;/a&gt;), Liu Fang(&lt;a href=&#34;mailto:killcode13@sina.com&#34;&gt;killcode13@sina.com&lt;/a&gt;), Li Jingchen(&lt;a href=&#34;mailto:cokin.lee@outlook.com&#34;&gt;cokin.lee@outlook.com&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Technology&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Compatible with Redis protocol, low integration cost. Supports most commands, including LUA, distributed transactions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High-performance core, equipped with self-developed KV engine: bitalosdb, which has a significant performance breakthrough compared to rocksdb.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High-performance data consistency architecture, based on bitalos-raft, deeply optimized Raft protocol, significantly improved write performance, and more stable election strategy and data synchronization process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;High-performance storage structure. By compressing redis composite data structure, greatly reduce disk I/O bytes, and improve system throughput.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multi-cloud disaster recovery, supports multi-room or multi-cloud deployment &amp;amp; management, and has a comprehensive complete downgrade &amp;amp; disaster recovery solution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multi-master write (enterprise edition support). Based on CRDT, optimize data synchronization and consistency strategy, ensure that conflicts can be adaptively resolved when written to multi-master in same shard, and guarantee eventual consistency.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick deployment&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Applicable scenarios: Deploy a test cluster on a single machine(machine needs to be connected to the Internet), experience the functions of all components(dashboard, proxy, and stored), and cluster operation and maintenance&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deployment script: install.sh, follow the prompts to enter the number of shards (group), the number of slave nodes (slave), and the number of witness nodes (witness); the default number: proxy * 1, group * 2 (master * 2, slave * 2 , witness * 2)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Admin web: 127.0.0.1:8080, both of default user&amp;amp;password are demo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Service address: 127.0.0.1:8790, use command: redis-cli -h 127.0.0.1 -p 8790&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Uninstall script: uninstall.sh&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;There are currently several well-known open source storage systems (compatible with the redis protocol), two products (*d* &amp;amp; *i*) with excellent performance are chosen. This benchmark is bases on bitalostored v5.0 and two procudcts (*d* &amp;amp; *i*) newest version.&lt;/p&gt; &#xA;&lt;h3&gt;Hardware&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;CPU:    Intel(R) Xeon(R) Platinum 8255C CPU @ 2.50GHz&#xA;Memory: 384GB&#xA;Disk:   2*3.5TB NVMe SSD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Program&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Benchmark: memtier_benchmark (redis official tool)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;NoSQL Program: thread number(8), cgroup cpu(8 core)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Command args: 3 data spec&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;--data-size=1024 --key-maximum=40672038 -t 8 -c 16 -n 317750 # items=40672000 (8*16*317750)&#xA;--data-size=128 --key-maximum=335544320 -t 8 -c 16 -n 2621440 # items=335544320 (8*16*2621440)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command (e.g., --data-size=1024)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;./memtier_benchmark -t 8 -c 16 -s 127.0.0.1 -p xxxx --distinct-client-seed --command=&#34;set __key__ __data__&#34; --key-prefix=&#34;performance_test_key_prefix_&#34; --key-minimum=1 --key-maximum=40672038 --random-data --data-size=1024 -n 317750&#xA;./memtier_benchmark -t 8 -c 16 -s 127.0.0.1 -p xxxx --distinct-client-seed --command=&#34;get __key__&#34; --key-prefix=&#34;performance_test_key_prefix_&#34; --key-minimum=1 --key-maximum=40672038 --test-time=300&#xA;./memtier_benchmark -t 8 -c 16 -s 127.0.0.1 -p xxxx --distinct-client-seed --command=&#34;incr __key__&#34; --key-prefix=&#34;int_&#34; --key-minimum=1 --key-maximum=40672038 --random-data --data-size=1024 -n 317750&#xA;./memtier_benchmark -t 8 -c 16 -s 127.0.0.1 -p xxxx --distinct-client-seed --command=&#34;lpush __key__ __data__&#34; --key-prefix=&#34;list_&#34; --key-minimum=1 --key-maximum=40672038 --random-data --data-size=1024 -n 317750&#xA;./memtier_benchmark -t 8 -c 16 -s 127.0.0.1 -p xxxx --distinct-client-seed --command=&#34;sadd __key__ __data__&#34; --key-prefix=&#34;set_&#34; --key-minimum=1 --key-maximum=40672038 --random-data --data-size=1024 -n 317750&#xA;./memtier_benchmark -t 8 -c 16 -s 127.0.0.1 -p xxxx --distinct-client-seed --command=&#34;zadd __key__ __key__ __data__&#34; --key-prefix=&#34;&#34; --key-minimum=1 --key-maximum=40672038 --random-data --data-size=1024 -n 317750&#xA;./memtier_benchmark -t 8 -c 16 -s 127.0.0.1 -p xxxx --distinct-client-seed --command=&#34;hset __key__ __data__ __key__&#34; --key-prefix=&#34;hash_&#34; --key-minimum=1 --key-maximum=40672038 --random-data --data-size=1024 -n 317750&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;incr is irrelevant to data size, only needs to be tested once.&lt;/p&gt; &#xA;&lt;h3&gt;Data&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Total data size：40GB&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Comparison dimensions： comand（SET、GET、LPUSH、SADD、ZADD、HSET） x value-size&amp;amp;count（1KB &amp;amp; 40,672,000、128B &amp;amp; 335,544,320）, INCR&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Comparison standard: QPS on single-core (multi-core QPS / core number), single-core performance reflects cost advantage better.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Config&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;*d* &amp;amp; *i*&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Threads:8&#xA;Memtable：512MB&#xA;WAL：enable&#xA;Binlog：disable&#xA;Cache：40GB&#xA;&#xA;Other parameters are set as same as the official recommended benchmark configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bitalostored&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;Threads:8&#xA;Memtable：512MB&#xA;WAL：enable&#xA;Raftlog：disable&#xA;Cache：2GB~40GB&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Result&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QPS (&lt;a href=&#34;https://raw.githubusercontent.com/zuoyebang/bitalostored/main/docs/benchmark-qps.png&#34;&gt;Horizontal&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zuoyebang/bitalostored/main/docs/benchmark-qps-vertical.png&#34; alt=&#34;benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latency (&lt;a href=&#34;https://raw.githubusercontent.com/zuoyebang/bitalostored/main/docs/benchmark-latency.png&#34;&gt;Horizontal&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zuoyebang/bitalostored/main/docs/benchmark-latency-vertical.png&#34; alt=&#34;benchmark&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Document&lt;/h2&gt; &#xA;&lt;p&gt;Technical architecture and documentation, refer to the official website: bitalos.zuoyebang.com&lt;/p&gt; &#xA;&lt;h2&gt;Technology accumulation(bitalosearch)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;High performance distributed search &amp;amp; analysis engine, SQL protocol, focusing on AP scenarios, and has certain TP capabilities. It is being practiced internally, and the open source plan is to be determined&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compared to elasticsearch, bitalosearch has significant cost advantages. Hard disk consumption is saved 30%; data writing performance is improved by 25%; for complex analysis logic, query performance is improved by 20% to 500%&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>