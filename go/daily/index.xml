<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-27T01:42:58Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>projectdiscovery/tlsx</title>
    <updated>2022-06-27T01:42:58Z</updated>
    <id>tag:github.com,2022-06-27:/projectdiscovery/tlsx</id>
    <link href="https://github.com/projectdiscovery/tlsx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and configurable TLS grabber focused on TLS based data collection.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/8293321/174841003-01a62bad-2ecf-4874-89c4-efa53dd56884.png&#34; width=&#34;200px&#34;&gt; &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-_red.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/tlsx&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/projectdiscovery/tlsx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/projectdiscovery/tlsx/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/projectdiscovery/tlsx&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/pdiscoveryio&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/pdiscoveryio.svg?logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/695645237418131507.svg?logo=discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/tlsx/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/tlsx/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/tlsx/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/tlsx/main/#running-tlsx&#34;&gt;Running tlsx&lt;/a&gt; • &lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;Join Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A fast and configurable TLS grabber focused on TLS based &lt;strong&gt;data collection and analysis&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8293321/174847743-0e229545-2431-4b4c-9029-878f218ad0bc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast And fully configurable TLS Connection&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;Modes for TLS Connection&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple &lt;strong&gt;TLS probes&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto TLS Fallback&lt;/strong&gt; for older TLS version&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pre Handshake&lt;/strong&gt; TLS connection (early termination)&lt;/li&gt; &#xA; &lt;li&gt;Customizable &lt;strong&gt;Cipher / SNI / TLS&lt;/strong&gt; selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TLS Misconfigurations&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;HOST, IP, URL&lt;/strong&gt; and &lt;strong&gt;CIDR&lt;/strong&gt; input&lt;/li&gt; &#xA; &lt;li&gt;STD &lt;strong&gt;IN/OUT&lt;/strong&gt; and &lt;strong&gt;TXT/JSON&lt;/strong&gt; output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;tlsx requires &lt;strong&gt;Go 1.18&lt;/strong&gt; to install successfully. To install, just run the below command or download pre-compiled binary from &lt;a href=&#34;https://github.com/projectdiscovery/tlsx/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;go install github.com/projectdiscovery/tlsx/cmd/tlsx@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;tlsx -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display help for the tool. Here are all the switches it supports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Usage:&#xA;  ./tlsx [flags]&#xA;&#xA;Flags:&#xA;INPUT:&#xA;   -u, -host string[]  target host to scan (-u INPUT1,INPUT2)&#xA;   -l, -list string    target list to scan (-l INPUT_FILE)&#xA;   -p, -port string[]  target port to connect (default 443)&#xA;&#xA;SCAN-MODE:&#xA;   -sm, -scan-mode string  tls connection mode to use (ctls, ztls, auto) (default ctls)&#xA;   -ps, -pre-handshake     enable pre-handshake tls connection (early termination) using ztls&#xA;&#xA;PROBES:&#xA;   -san               display subject alternative names&#xA;   -cn                display subject common names&#xA;   -so                display subject organization name&#xA;   -tv, -tls-version  display used tls version&#xA;   -cipher            display used cipher&#xA;   -ex, -expired      display validity status of certificate&#xA;   -ss, -self-signed  display status of self-signed certificate&#xA;   -hash string       display certificate fingerprint hashes (md5,sha1,sha256)&#xA;&#xA;CONFIGURATIONS:&#xA;   -config string               path to the tlsx configuration file&#xA;   -r, -resolvers string[]      list of resolvers to use&#xA;   -cc, -cacert string          client certificate authority file&#xA;   -ci, -cipher-input string[]  ciphers to use with tls connection&#xA;   -sni string                  tls sni hostname to use&#xA;   -min-version string          minimum tls version to accept (ssl30,tls10,tls11,tls12,tls13)&#xA;   -max-version string          maximum tls version to accept (ssl30,tls10,tls11,tls12,tls13)&#xA;   -tc, -tls-chain              display tls chain in json output&#xA;   -verify-cert                 enable verification of server certificate&#xA;&#xA;OPTIMIZATIONS:&#xA;   -c, -concurrency int  number of concurrent threads to process (default 300)&#xA;   -timeout int          tls connection timeout in seconds (default 5)&#xA;&#xA;OUTPUT:&#xA;   -o, -output string  file to write output to&#xA;   -j, -json           display json format output&#xA;   -ro, -resp-only     display tls response only&#xA;   -silent             display silent output&#xA;   -nc, -no-color      disable colors in cli output&#xA;   -v, -verbose        display verbose output&#xA;   -version            display project version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running tlsx&lt;/h2&gt; &#xA;&lt;h3&gt;Input for tlsx&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;tlsx&lt;/strong&gt; requires &lt;strong&gt;ip&lt;/strong&gt; to make TLS connection and accept multiple format as listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;173.0.84.0/24 # CIDR input&#xA;93.184.216.34 # IP input&#xA;example.com # DNS input&#xA;example.com:443 # DNS input with port&#xA;https://example.com:443 # URL input port&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Input host can be provided using &lt;code&gt;-host / -u&lt;/code&gt; flag, and multiple values can be provided using comma-separated input, similarly &lt;strong&gt;file&lt;/strong&gt; input is supported using &lt;code&gt;-list / -l&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Example of comma-separated host input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tlsx -u 93.184.216.34,example.com,example.com:443,https://example.com:443 -silent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example of file based host input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tlsx -list host_list.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Port Input:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;tlsx&lt;/strong&gt; connects on port &lt;strong&gt;443&lt;/strong&gt; by default, which can be customized using &lt;code&gt;-port / -p&lt;/code&gt; flag, single or multiple ports can be specified using comma sperated input or new line delimited file containing list of ports to connect.&lt;/p&gt; &#xA;&lt;p&gt;Example of comma-separated port input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tlsx -u hackerone.com -p 443,8443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example of file based port input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tlsx -u hackerone.com -p port_list.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;When input host contains port in it, for example, &lt;code&gt;8.8.8.8:443&lt;/code&gt; or &lt;code&gt;hackerone.com:8443&lt;/code&gt;, port specified with host will be used to make TLS connection instead of default or one provided using &lt;code&gt;-port / -p&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;TLS Probe (default run)&lt;/h3&gt; &#xA;&lt;p&gt;This will run the tool against the given CIDR range and returns hosts that accepts tls connection on port 443.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo 173.0.84.0/24 | tlsx &#xA;  &#xA;&#xA;  _____ _    _____  __&#xA; |_   _| |  / __\ \/ /&#xA;   | | | |__\__ \&amp;gt;  &amp;lt; &#xA;   |_| |____|___/_/\_\  v0.0.1&#xA;&#xA;    projectdiscovery.io&#xA;&#xA;[WRN] Use with caution. You are responsible for your actions.&#xA;[WRN] Developers assume no liability and are not responsible for any misuse or damage.&#xA;&#xA;173.0.84.69:443&#xA;173.0.84.67:443&#xA;173.0.84.68:443&#xA;173.0.84.66:443&#xA;173.0.84.76:443&#xA;173.0.84.70:443&#xA;173.0.84.72:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SAN/CN Probe&lt;/h3&gt; &#xA;&lt;p&gt;TLS certificate contains DNS names under &lt;strong&gt;subject alternative name&lt;/strong&gt; and &lt;strong&gt;common name&lt;/strong&gt; field that can be extracted using &lt;code&gt;-san&lt;/code&gt;, &lt;code&gt;-cn&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo 173.0.84.0/24 | tlsx -san -cn -silent&#xA;&#xA;173.0.84.104:443 [uptycspay.paypal.com]&#xA;173.0.84.104:443 [api-3t.paypal.com]&#xA;173.0.84.104:443 [api-m.paypal.com]&#xA;173.0.84.104:443 [payflowpro.paypal.com]&#xA;173.0.84.104:443 [pointofsale-s.paypal.com]&#xA;173.0.84.104:443 [svcs.paypal.com]&#xA;173.0.84.104:443 [uptycsven.paypal.com]&#xA;173.0.84.104:443 [api-aa.paypal.com]&#xA;173.0.84.104:443 [pilot-payflowpro.paypal.com]&#xA;173.0.84.104:443 [pointofsale.paypal.com]&#xA;173.0.84.104:443 [uptycshon.paypal.com]&#xA;173.0.84.104:443 [api.paypal.com]&#xA;173.0.84.104:443 [adjvendor.paypal.com]&#xA;173.0.84.104:443 [zootapi.paypal.com]&#xA;173.0.84.104:443 [api-aa-3t.paypal.com]&#xA;173.0.84.104:443 [uptycsize.paypal.com]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For ease of automation, optionally &lt;code&gt;-resp-only&lt;/code&gt; flag can be used to list only dns names in CLI output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo 173.0.84.0/24 | tlsx -san -cn -silent -resp-only&#xA;&#xA;api-aa-3t.paypal.com&#xA;pilot-payflowpro.paypal.com&#xA;pointofsale-s.paypal.com&#xA;uptycshon.paypal.com&#xA;a.paypal.com&#xA;adjvendor.paypal.com&#xA;zootapi.paypal.com&#xA;api-aa.paypal.com&#xA;payflowpro.paypal.com&#xA;pointofsale.paypal.com&#xA;uptycspay.paypal.com&#xA;api-3t.paypal.com&#xA;uptycsize.paypal.com&#xA;api.paypal.com&#xA;api-m.paypal.com&#xA;svcs.paypal.com&#xA;uptycsven.paypal.com&#xA;uptycsven.paypal.com&#xA;a.paypal.com&#xA;api.paypal.com&#xA;pointofsale-s.paypal.com&#xA;pilot-payflowpro.paypal.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;subdomains&lt;/strong&gt; obtained from TLS certificates can be further piped to other PD tools for further inspection, here is an example piping tls subdomains to &lt;strong&gt;&lt;a href=&#34;https://github.com/projectdiscovery/dnsx&#34;&gt;dnsx&lt;/a&gt;&lt;/strong&gt; to filter passive subdomains and passing to &lt;strong&gt;&lt;a href=&#34;https://github.com/projectdiscovery/httpx&#34;&gt;httpx&lt;/a&gt;&lt;/strong&gt; to list hosts running active web services.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo 173.0.84.0/24 | tlsx -san -cn -silent -resp-only | dnsx -silent | httpx&#xA;&#xA;    __    __  __       _  __&#xA;   / /_  / /_/ /_____ | |/ /&#xA;  / __ \/ __/ __/ __ \|   /&#xA; / / / / /_/ /_/ /_/ /   |&#xA;/_/ /_/\__/\__/ .___/_/|_|&#xA;             /_/              v1.2.2&#xA;&#xA;    projectdiscovery.io&#xA;&#xA;Use with caution. You are responsible for your actions.&#xA;Developers assume no liability and are not responsible for any misuse or damage.&#xA;https://api-m.paypal.com&#xA;https://uptycsize.paypal.com&#xA;https://api.paypal.com&#xA;https://uptycspay.paypal.com&#xA;https://svcs.paypal.com&#xA;https://adjvendor.paypal.com&#xA;https://uptycshap.paypal.com&#xA;https://uptycshon.paypal.com&#xA;https://pilot-payflowpro.paypal.com&#xA;https://slc-a-origin-pointofsale.paypal.com&#xA;https://uptycsven.paypal.com&#xA;https://api-aa.paypal.com&#xA;https://api-aa-3t.paypal.com&#xA;https://uptycsbrt.paypal.com&#xA;https://payflowpro.paypal.com&#xA;http://pointofsale-s.paypal.com&#xA;http://slc-b-origin-pointofsale.paypal.com&#xA;http://api-3t.paypal.com&#xA;http://zootapi.paypal.com&#xA;http://pointofsale.paypal.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TLS / Cipher Probe&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ subfinder -d hackerone.com | tlsx -tls-version -cipher&#xA;&#xA;mta-sts.hackerone.com:443 [TLS1.3] [TLS_AES_128_GCM_SHA256]&#xA;hackerone.com:443 [TLS1.3] [TLS_AES_128_GCM_SHA256]&#xA;api.hackerone.com:443 [TLS1.3] [TLS_AES_128_GCM_SHA256]&#xA;mta-sts.managed.hackerone.com:443 [TLS1.3] [TLS_AES_128_GCM_SHA256]&#xA;mta-sts.forwarding.hackerone.com:443 [TLS1.3] [TLS_AES_128_GCM_SHA256]&#xA;www.hackerone.com:443 [TLS1.3] [TLS_AES_128_GCM_SHA256]&#xA;support.hackerone.com:443 [TLS1.2] [TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Expired / Self Signed Certificate&lt;/h3&gt; &#xA;&lt;p&gt;A list of host can be provided to tlsx to detect &lt;strong&gt;expired / self-signed&lt;/strong&gt; certificates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tlsx -u expired.badssl.com,self-signed.badssl.com -expired -self-signed&#xA;  &#xA;&#xA;  _____ _    _____  __&#xA; |_   _| |  / __\ \/ /&#xA;   | | | |__\__ \&amp;gt;  &amp;lt; &#xA;   |_| |____|___/_/\_\  v0.0.1&#xA;&#xA;    projectdiscovery.io&#xA;&#xA;[WRN] Use with caution. You are responsible for your actions.&#xA;[WRN] Developers assume no liability and are not responsible for any misuse or damage.&#xA;&#xA;expired.badssl.com:443 [expired]&#xA;self-signed.badssl.com:443 [self-signed]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON Output&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;tlsx&lt;/strong&gt; does support multiple probe flags to query specific data, but all the information is always available in JSON format, for automation and post processing using &lt;code&gt;-json&lt;/code&gt; output is most convenient option to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;echo example.com | tlsx -json -silent | jq .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;timestamp&#34;: &#34;2022-06-21T17:03:22.148592+05:30&#34;,&#xA;  &#34;host&#34;: &#34;example.com&#34;,&#xA;  &#34;ip&#34;: &#34;93.184.216.34&#34;,&#xA;  &#34;port&#34;: &#34;443&#34;,&#xA;  &#34;tls-version&#34;: &#34;tls13&#34;,&#xA;  &#34;cipher&#34;: &#34;TLS_AES_256_GCM_SHA384&#34;,&#xA;  &#34;expired&#34;: false,&#xA;  &#34;not-before&#34;: &#34;2023-03-14T23:59:59Z&#34;,&#xA;  &#34;not-after&#34;: &#34;2023-03-14T23:59:59Z&#34;,&#xA;  &#34;subject-dn&#34;: &#34;CN=www.example.org, O=Internet&amp;nbsp;Corporation&amp;nbsp;for&amp;nbsp;Assigned&amp;nbsp;Names&amp;nbsp;and&amp;nbsp;Numbers, L=Los Angeles, ST=California, C=US&#34;,&#xA;  &#34;subject-cn&#34;: &#34;www.example.org&#34;,&#xA;  &#34;subject-org&#34;: [&#xA;    &#34;Internet&amp;nbsp;Corporation&amp;nbsp;for&amp;nbsp;Assigned&amp;nbsp;Names&amp;nbsp;and&amp;nbsp;Numbers&#34;&#xA;  ],&#xA;  &#34;subject-an&#34;: [&#xA;    &#34;www.example.org&#34;,&#xA;    &#34;example.net&#34;,&#xA;    &#34;example.edu&#34;,&#xA;    &#34;example.com&#34;,&#xA;    &#34;example.org&#34;,&#xA;    &#34;www.example.com&#34;,&#xA;    &#34;www.example.edu&#34;,&#xA;    &#34;www.example.net&#34;&#xA;  ],&#xA;  &#34;issuer-dn&#34;: &#34;CN=DigiCert TLS RSA SHA256 2020 CA1, O=DigiCert Inc, C=US&#34;,&#xA;  &#34;issuer-cn&#34;: &#34;DigiCert TLS RSA SHA256 2020 CA1&#34;,&#xA;  &#34;issuer-org&#34;: [&#xA;    &#34;DigiCert Inc&#34;&#xA;  ],&#xA;  &#34;fingerprint-hash&#34;: {&#xA;    &#34;md5&#34;: &#34;c5208a47259d540a6e3404dddb85af91&#34;,&#xA;    &#34;sha1&#34;: &#34;df81dfa6b61eafdffffe1a250240db5d2e6cee25&#34;,&#xA;    &#34;sha256&#34;: &#34;7f2fe8d6b18e9a47839256cd97938daa70e8515750298ddba2f3f4b8440113fc&#34;&#xA;  },&#xA;  &#34;tls-connection&#34;: &#34;ctls&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Scan Mode&lt;/h3&gt; &#xA;&lt;p&gt;tlsx provides multiple options to make TLS connection, &lt;strong&gt;&lt;a href=&#34;https://pkg.go.dev/crypto/tls&#34;&gt;crypto/tls&lt;/a&gt;&lt;/strong&gt; being default option which is standard crypto library in Go.&lt;/p&gt; &#xA;&lt;p&gt;Available TLS Connection modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ctls&lt;/code&gt; (&lt;strong&gt;crypto/tls&lt;/strong&gt;) - default&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ztls&lt;/code&gt; (&lt;strong&gt;zcrypto/tls&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;auto&lt;/code&gt; (&lt;strong&gt;ctls&lt;/strong&gt; with &lt;strong&gt;ztls&lt;/strong&gt; fallback support)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some pointers for the specific mode / library is highlighted in &lt;a href=&#34;https://github.com/projectdiscovery/tlsx/discussions/2&#34;&gt;linked discussions&lt;/a&gt;, &lt;code&gt;auto&lt;/code&gt; mode is supported to ensure the maximum coverage and scans for the hosts running older version of TLS by retrying the connection using &lt;code&gt;ztls&lt;/code&gt; mode upon any connection error.&lt;/p&gt; &#xA;&lt;p&gt;An example of using &lt;code&gt;ztls&lt;/code&gt; mode to scan website using old / outdated TLS version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ echo tls-v1-0.badssl.com | tlsx -port 1010 -sm ztls&#xA;  &#xA;&#xA;  _____ _    _____  __&#xA; |_   _| |  / __\ \/ /&#xA;   | | | |__\__ \&amp;gt;  &amp;lt; &#xA;   |_| |____|___/_/\_\  v0.0.1&#xA;&#xA;    projectdiscovery.io&#xA;&#xA;[WRN] Use with caution. You are responsible for your actions.&#xA;[WRN] Developers assume no liability and are not responsible for any misuse or damage.&#xA;&#xA;tls-v1-0.badssl.com:1010&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pre-Handshake (Early Termination)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;tlsx&lt;/strong&gt; supports terminating SSL connection early which leads to faster scanning and less connection request (disconnecting after TLS &lt;code&gt;serverhello&lt;/code&gt; and certificate data is gathered).&lt;/p&gt; &#xA;&lt;p&gt;For more detail, please refer to &lt;a href=&#34;https://github.com/erbbysam/Hunting-Certificates-And-Servers/raw/master/Hunting%20Certificates%20%26%20Servers.pdf&#34;&gt;Hunting-Certificates-And-Servers&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/erbbysam&#34;&gt;@erbbysam&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An example of using &lt;code&gt;-pre-handshake&lt;/code&gt; mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tlsx -u example.com -pre-handshake &#xA;  &#xA;&#xA;  _____ _    _____  __&#xA; |_   _| |  / __\ \/ /&#xA;   | | | |__\__ \&amp;gt;  &amp;lt; &#xA;   |_| |____|___/_/\_\  v0.0.1&#xA;&#xA;    projectdiscovery.io&#xA;&#xA;[WRN] Use with caution. You are responsible for your actions.&#xA;[WRN] Developers assume no liability and are not responsible for any misuse or damage.&#xA;&#xA;example.com:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;pre-handshake&lt;/strong&gt; mode utilizes &lt;code&gt;ztls&lt;/code&gt; (&lt;strong&gt;zcrypto/tls&lt;/strong&gt;) which also means the support is limited till &lt;code&gt;TLS v1.2&lt;/code&gt; as &lt;code&gt;TLS v1.3&lt;/code&gt; is not supported by &lt;code&gt;ztls&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;TLS Version&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Minimum&lt;/strong&gt; and &lt;strong&gt;Maximum&lt;/strong&gt; TLS versions can be specified using &lt;code&gt;-min-version&lt;/code&gt; and &lt;code&gt;-max-version&lt;/code&gt; flags, as default these value are set by underlying used library.&lt;/p&gt; &#xA;&lt;p&gt;The acceptable values for TLS version is specified below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl30&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tls10&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tls11&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tls12&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is an example using &lt;code&gt;max-version&lt;/code&gt; to scan for hosts supporting an older version of TLS, i.e &lt;strong&gt;TLS v1.0&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tlsx -u example.com -max-version tls10&#xA;  &#xA;&#xA;  _____ _    _____  __&#xA; |_   _| |  / __\ \/ /&#xA;   | | | |__\__ \&amp;gt;  &amp;lt; &#xA;   |_| |____|___/_/\_\  v0.0.1&#xA;&#xA;    projectdiscovery.io&#xA;&#xA;[WRN] Use with caution. You are responsible for your actions.&#xA;[WRN] Developers assume no liability and are not responsible for any misuse or damage.&#xA;example.com:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Cipher&lt;/h3&gt; &#xA;&lt;p&gt;Supported custom cipher can provided using &lt;code&gt;-cipher-input / -ci&lt;/code&gt; flag, supported cipher list for each mode is available at &lt;a href=&#34;https://github.com/projectdiscovery/tlsx/wiki/Ciphers&#34;&gt;wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tlsx -u example.com -ci TLS_AES_256_GCM_SHA384 -cipher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ tlsx -u example.com -ci cipher_list.txt -cipher&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This program optionally uses the &lt;a href=&#34;https://github.com/zmap/zcrypto&#34;&gt;zcrypto&lt;/a&gt; library from the zmap team.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;tlsx is made with ❤️ by the &lt;a href=&#34;https://projectdiscovery.io&#34;&gt;projectdiscovery&lt;/a&gt; team and distributed under &lt;a href=&#34;https://raw.githubusercontent.com/projectdiscovery/tlsx/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/projectdiscovery&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/projectdiscovery/nuclei-burp-plugin/main/static/join-discord.png&#34; width=&#34;300&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>adonovan/gopl.io</title>
    <updated>2022-06-27T01:42:58Z</updated>
    <id>tag:github.com,2022-06-27:/adonovan/gopl.io</id>
    <link href="https://github.com/adonovan/gopl.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Example programs from &#34;The Go Programming Language&#34;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Go Programming Language&lt;/h1&gt; &#xA;&lt;p&gt;This repository provides the downloadable example programs for the book, &#34;The Go Programming Language&#34;; see &lt;a href=&#34;http://www.gopl.io&#34;&gt;http://www.gopl.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These example programs are licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;.&lt;br&gt; &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can download, build, and run the programs with the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export GOPATH=$HOME/gobook            # choose workspace directory&#xA;$ go get gopl.io/ch1/helloworld         # fetch, build, install&#xA;$ $GOPATH/bin/helloworld                # run&#xA;Hello, 世界&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many of the programs contain comments of the form &lt;code&gt;//!+&lt;/code&gt; and &lt;code&gt;//!-&lt;/code&gt;. These comments bracket the parts of the programs that are excerpted in the book; you can safely ignore them. In a few cases, programs have been reformatted in an unnatural way so that they can be presented in stages in the book.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>muesli/duf</title>
    <updated>2022-06-27T01:42:58Z</updated>
    <id>tag:github.com,2022-06-27:/muesli/duf</id>
    <link href="https://github.com/muesli/duf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Disk Usage/Free Utility - a better &#39;df&#39; alternative&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;duf&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/muesli/duf/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/muesli/duf.svg?style=for-the-badge&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/muesli/duf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-reference-blue.svg?style=for-the-badge&#34; alt=&#34;Go Doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/muesli/duf/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge&#34; alt=&#34;Software License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/muesli/duf/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/muesli/duf/build?style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/muesli/duf&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/muesli/duf?style=for-the-badge&#34; alt=&#34;Go ReportCard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Disk Usage/Free Utility (Linux, BSD, macOS &amp;amp; Windows)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/muesli/duf/master/duf.png&#34; alt=&#34;duf&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; User-friendly, colorful output&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Adjusts to your terminal&#39;s theme &amp;amp; width&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sort the results according to your needs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Groups &amp;amp; filters devices&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Can conveniently output JSON&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Packages&lt;/h3&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arch Linux: &lt;code&gt;pacman -S duf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Debian/Ubuntu: &lt;code&gt;apt install duf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nix: &lt;code&gt;nix-env -iA nixpkgs.duf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Void Linux: &lt;code&gt;xbps-install -S duf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/muesli/duf/releases&#34;&gt;Packages&lt;/a&gt; in Alpine, Debian &amp;amp; RPM formats&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;BSD&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FreeBSD: &lt;code&gt;pkg install duf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD: &lt;code&gt;pkg_add duf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;: &lt;code&gt;brew install duf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;with &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;: &lt;code&gt;sudo port selfupdate &amp;amp;&amp;amp; sudo port install duf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt;: &lt;code&gt;choco install duf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;with &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;: &lt;code&gt;scoop install duf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Android (via termux): &lt;code&gt;pkg install duf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Binaries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/muesli/duf/releases&#34;&gt;Binaries&lt;/a&gt; for Linux, FreeBSD, OpenBSD, macOS, Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have a working Go environment (Go 1.12 or higher is required). See the &lt;a href=&#34;https://golang.org/doc/install.html&#34;&gt;install instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Compiling duf is easy, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/muesli/duf.git&#xA;cd duf&#xA;go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You can simply start duf without any command-line arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you supply arguments, duf will only list specific devices &amp;amp; mount points:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf /home /some/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to list everything (including pseudo, duplicate, inaccessible file systems):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filtering&lt;/h3&gt; &#xA;&lt;p&gt;You can show and hide specific tables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --only local,network,fuse,special,loops,binds&#xA;duf --hide local,network,fuse,special,loops,binds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also show and hide specific filesystems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --only-fs tmpfs,vfat&#xA;duf --hide-fs tmpfs,vfat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or specific mount points:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --only-mp /,/home,/dev&#xA;duf --hide-mp /,/home,/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wildcards inside quotes work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --only-mp &#39;/sys/*,/dev/*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Display options&lt;/h3&gt; &#xA;&lt;p&gt;Sort the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --sort size&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Valid keys are: &lt;code&gt;mountpoint&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;used&lt;/code&gt;, &lt;code&gt;avail&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt;, &lt;code&gt;inodes&lt;/code&gt;, &lt;code&gt;inodes_used&lt;/code&gt;, &lt;code&gt;inodes_avail&lt;/code&gt;, &lt;code&gt;inodes_usage&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;filesystem&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Show or hide specific columns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --output mountpoint,size,usage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Valid keys are: &lt;code&gt;mountpoint&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;used&lt;/code&gt;, &lt;code&gt;avail&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt;, &lt;code&gt;inodes&lt;/code&gt;, &lt;code&gt;inodes_used&lt;/code&gt;, &lt;code&gt;inodes_avail&lt;/code&gt;, &lt;code&gt;inodes_usage&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;filesystem&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;List inode information instead of block usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --inodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If duf doesn&#39;t detect your terminal&#39;s colors correctly, you can set a theme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --theme light&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Color-coding &amp;amp; Thresholds&lt;/h3&gt; &#xA;&lt;p&gt;duf highlights the availability &amp;amp; usage columns in red, green, or yellow, depending on how much space is still available. You can set your own thresholds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --avail-threshold=&#34;10G,1G&#34;&#xA;duf --usage-threshold=&#34;0.5,0.9&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bonus&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer your output as JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;duf --json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;Users of &lt;code&gt;oh-my-zsh&lt;/code&gt; should be aware that it already defines an alias called &lt;code&gt;duf&lt;/code&gt;, which you will have to remove in order to use &lt;code&gt;duf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;unalias duf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;Got some feedback or suggestions? Please open an issue or drop me a note!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mueslix&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.social/@fribbledom&#34;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>