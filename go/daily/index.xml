<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-19T01:31:01Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>metoro-io/mcp-golang</title>
    <updated>2025-03-19T01:31:01Z</updated>
    <id>tag:github.com,2025-03-19:/metoro-io/mcp-golang</id>
    <link href="https://github.com/metoro-io/mcp-golang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Write Model Context Protocol servers in few lines of go code. Docs at https://mcpgolang.com&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/metoro-io/mcp-golang/main/resources/mcp-golang-logo.webp&#34; height=&#34;300&#34; alt=&#34;Statusphere logo&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/metoro-io/mcp-golang?style=social&#34; alt=&#34;GitHub stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/metoro-io/mcp-golang?style=social&#34; alt=&#34;GitHub forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/metoro-io/mcp-golang&#34; alt=&#34;GitHub issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/metoro-io/mcp-golang&#34; alt=&#34;GitHub pull requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/metoro-io/mcp-golang&#34; alt=&#34;GitHub license&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/metoro-io/mcp-golang&#34; alt=&#34;GitHub contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/metoro-io/mcp-golang&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/metoro-io/mcp-golang&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/metoro-io/mcp-golang.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/metoro-io/mcp-golang&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/metoro-io/mcp-golang&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/metoro-io/mcp-golang/actions/workflows/go-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;mcp-golang&lt;/h1&gt; &#xA;&lt;p&gt;mcp-golang is an unofficial implementation of the &lt;a href=&#34;https://modelcontextprotocol.io/&#34;&gt;Model Context Protocol&lt;/a&gt; in Go.&lt;/p&gt; &#xA;&lt;p&gt;Write MCP servers and clients in golang with a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;Docs at &lt;a href=&#34;https://mcpgolang.com&#34;&gt;https://mcpgolang.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üõ°Ô∏è&lt;strong&gt;Type safety&lt;/strong&gt; - Define your tool arguments as native go structs, have mcp-golang handle the rest. Automatic schema generation, deserialization, error handling etc.&lt;/li&gt; &#xA; &lt;li&gt;üöõ &lt;strong&gt;Custom transports&lt;/strong&gt; - Use the built-in transports (stdio for full feature support, HTTP for stateless communication) or write your own.&lt;/li&gt; &#xA; &lt;li&gt;‚ö° &lt;strong&gt;Low boilerplate&lt;/strong&gt; - mcp-golang generates all the MCP endpoints for you apart from your tools, prompts and resources.&lt;/li&gt; &#xA; &lt;li&gt;üß© &lt;strong&gt;Modular&lt;/strong&gt; - The library is split into three components: transport, protocol and server/client. Use them all or take what you need.&lt;/li&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Bi-directional&lt;/strong&gt; - Full support for both server and client implementations through stdio transport.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;p&gt;Install with &lt;code&gt;go get github.com/metoro-io/mcp-golang&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Server Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/metoro-io/mcp-golang&#34;&#xA;&#x9;&#34;github.com/metoro-io/mcp-golang/transport/stdio&#34;&#xA;)&#xA;&#xA;// Tool arguments are just structs, annotated with jsonschema tags&#xA;// More at https://mcpgolang.com/tools#schema-generation&#xA;type Content struct {&#xA;&#x9;Title       string  `json:&#34;title&#34; jsonschema:&#34;required,description=The title to submit&#34;`&#xA;&#x9;Description *string `json:&#34;description&#34; jsonschema:&#34;description=The description to submit&#34;`&#xA;}&#xA;type MyFunctionsArguments struct {&#xA;&#x9;Submitter string  `json:&#34;submitter&#34; jsonschema:&#34;required,description=The name of the thing calling this tool (openai, google, claude, etc)&#34;`&#xA;&#x9;Content   Content `json:&#34;content&#34; jsonschema:&#34;required,description=The content of the message&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;done := make(chan struct{})&#xA;&#xA;&#x9;server := mcp_golang.NewServer(stdio.NewStdioServerTransport())&#xA;&#x9;err := server.RegisterTool(&#34;hello&#34;, &#34;Say hello to a person&#34;, func(arguments MyFunctionsArguments) (*mcp_golang.ToolResponse, error) {&#xA;&#x9;&#x9;return mcp_golang.NewToolResponse(mcp_golang.NewTextContent(fmt.Sprintf(&#34;Hello, %server!&#34;, arguments.Submitter))), nil&#xA;&#x9;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;err = server.RegisterPrompt(&#34;promt_test&#34;, &#34;This is a test prompt&#34;, func(arguments Content) (*mcp_golang.PromptResponse, error) {&#xA;&#x9;&#x9;return mcp_golang.NewPromptResponse(&#34;description&#34;, mcp_golang.NewPromptMessage(mcp_golang.NewTextContent(fmt.Sprintf(&#34;Hello, %server!&#34;, arguments.Title)), mcp_golang.RoleUser)), nil&#xA;&#x9;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;err = server.RegisterResource(&#34;test://resource&#34;, &#34;resource_test&#34;, &#34;This is a test resource&#34;, &#34;application/json&#34;, func() (*mcp_golang.ResourceResponse, error) {&#xA;&#x9;&#x9;return mcp_golang.NewResourceResponse(mcp_golang.NewTextEmbeddedResource(&#34;test://resource&#34;, &#34;This is a test resource&#34;, &#34;application/json&#34;)), nil&#xA;&#x9;})&#xA;&#xA;&#x9;err = server.Serve()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;&amp;lt;-done&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Server Example&lt;/h3&gt; &#xA;&lt;p&gt;You can also create an HTTP-based server using either the standard HTTP transport or Gin framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Standard HTTP&#xA;transport := http.NewHTTPTransport(&#34;/mcp&#34;)&#xA;transport.WithAddr(&#34;:8080&#34;)&#xA;server := mcp_golang.NewServer(transport)&#xA;&#xA;// Or with Gin framework&#xA;transport := http.NewGinTransport()&#xA;router := gin.Default()&#xA;router.POST(&#34;/mcp&#34;, transport.Handler())&#xA;server := mcp_golang.NewServer(transport)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: HTTP transports are stateless and don&#39;t support bidirectional features like notifications. Use stdio transport if you need those features.&lt;/p&gt; &#xA;&lt;h3&gt;Client Example&lt;/h3&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://raw.githubusercontent.com/metoro-io/mcp-golang/main/examples/client&#34;&gt;examples/client&lt;/a&gt; directory for a more complete example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;    &#34;log&#34;&#xA;    mcp &#34;github.com/metoro-io/mcp-golang&#34;&#xA;    &#34;github.com/metoro-io/mcp-golang/transport/stdio&#34;&#xA;)&#xA;&#xA;// Define type-safe arguments&#xA;type CalculateArgs struct {&#xA;    Operation string `json:&#34;operation&#34;`&#xA;    A         int    `json:&#34;a&#34;`&#xA;    B         int    `json:&#34;b&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;   cmd := exec.Command(&#34;go&#34;, &#34;run&#34;, &#34;./server/main.go&#34;)&#xA;   stdin, err := cmd.StdinPipe()&#xA;   if err != nil {&#xA;    log.Fatalf(&#34;Failed to get stdin pipe: %v&#34;, err)&#xA;   }&#xA;   stdout, err := cmd.StdoutPipe()&#xA;   if err != nil {&#xA;    log.Fatalf(&#34;Failed to get stdout pipe: %v&#34;, err)&#xA;   }&#xA;&#xA;   if err := cmd.Start(); err != nil {&#xA;    log.Fatalf(&#34;Failed to start server: %v&#34;, err)&#xA;   }&#xA;   defer cmd.Process.Kill()&#xA;    // Create and initialize client&#xA;    transport := stdio.NewStdioServerTransportWithIO(stdout, stdin)&#xA;    client := mcp.NewClient(transport)&#xA;    &#xA;    if _, err := client.Initialize(context.Background()); err != nil {&#xA;        log.Fatalf(&#34;Failed to initialize: %v&#34;, err)&#xA;    }&#xA;&#xA;    // Call a tool with typed arguments&#xA;    args := CalculateArgs{&#xA;        Operation: &#34;add&#34;,&#xA;        A:         10,&#xA;        B:         5,&#xA;    }&#xA;    &#xA;    response, err := client.CallTool(context.Background(), &#34;calculate&#34;, args)&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;Failed to call tool: %v&#34;, err)&#xA;    }&#xA;    &#xA;    if response != nil &amp;amp;&amp;amp; len(response.Content) &amp;gt; 0 {&#xA;        log.Printf(&#34;Result: %s&#34;, response.Content[0].TextContent.Text)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using with Claude Desktop&lt;/h3&gt; &#xA;&lt;p&gt;Create a file in ~/Library/Application Support/Claude/claude_desktop_config.json with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#34;mcpServers&#34;: {&#xA;  &#34;golang-mcp-server&#34;: {&#xA;      &#34;command&#34;: &#34;&amp;lt;your path to golang MCP server go executable&amp;gt;&#34;,&#xA;      &#34;args&#34;: [],&#xA;      &#34;env&#34;: {}&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are more than welcome! Please check out &lt;a href=&#34;https://raw.githubusercontent.com/metoro-io/mcp-golang/main/CONTRIBUTING.md&#34;&gt;our contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Discord&lt;/h2&gt; &#xA;&lt;p&gt;Got any suggestions, have a question on the api or usage? Ask on the &lt;a href=&#34;https://discord.gg/33saRwE3pT&#34;&gt;discord server&lt;/a&gt;. A maintainer will be happy to help you out.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Some more extensive examples using the library found here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img height=&#34;12&#34; width=&#34;12&#34; src=&#34;https://metoro.io/static/images/logos/Metoro.svg?sanitize=true&#34;&gt; &lt;strong&gt;&lt;a href=&#34;https://github.com/metoro-io/metoro-mcp-server&#34;&gt;Metoro&lt;/a&gt;&lt;/strong&gt; - Query and interact with kubernetes environments monitored by Metoro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open a PR to add your own projects!&lt;/p&gt; &#xA;&lt;h2&gt;Server Feature Implementation&lt;/h2&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tool Calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Native go structs as arguments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Programatically generated tool list endpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Change notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pagination&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prompts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prompt Calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Programatically generated prompt list endpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Change notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pagination&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resource Calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Programatically generated resource list endpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Change notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pagination&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Transports&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stdio - Full support for all features including bidirectional communication&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; HTTP - Stateless transport for simple request-response scenarios (no notifications support)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Gin - HTTP transport with Gin framework integration (stateless, no notifications support)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SSE&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom transport support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; HTTPS with custom auth support - in progress. Not currently part of the spec but we&#39;ll be adding experimental support for it.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Call tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Call prompts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Call resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List prompts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List resources&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>