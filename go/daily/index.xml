<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-11T01:30:57Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>JohannesKaufmann/html-to-markdown</title>
    <updated>2024-11-11T01:30:57Z</updated>
    <id>tag:github.com,2024-11-11:/JohannesKaufmann/html-to-markdown</id>
    <link href="https://github.com/JohannesKaufmann/html-to-markdown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öôÔ∏è Convert HTML to Markdown. Even works with entire websites and can be extended through rules.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;html-to-markdown&lt;/h1&gt; &#xA;&lt;p&gt;A robust html-to-markdown converter that transforms HTML (even entire websites) into clean, readable Markdown. It supports complex formatting, customizable options, and plugins for full control over the conversion process.&lt;/p&gt; &#xA;&lt;p&gt;Use the fully extendable &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/#golang-library&#34;&gt;Golang library&lt;/a&gt; or a quick &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/#cli---using-it-on-the-command-line&#34;&gt;CLI command&lt;/a&gt;. Alternatively, try the &lt;a href=&#34;https://html-to-markdown.com/demo&#34;&gt;Online Demo&lt;/a&gt; or &lt;a href=&#34;https://html-to-markdown.com/api&#34;&gt;REST API&lt;/a&gt; to see it in action!&lt;/p&gt; &#xA;&lt;p&gt;Here are some &lt;em&gt;cool features&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bold &amp;amp; Italic:&lt;/strong&gt; Supports bold and italic‚Äîeven within single words.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/point_bold_italic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;List:&lt;/strong&gt; Handles ordered and unordered lists with full nesting support.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/point_list.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Blockquote:&lt;/strong&gt; Blockquotes can include other elements, with seamless support for nested quotes.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/point_blockquote.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Inline Code &amp;amp; Code Block:&lt;/strong&gt; Correctly handles backticks and multi-line code blocks, preserving code structure.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/point_code.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Link &amp;amp; Image:&lt;/strong&gt; Properly formats multi-line links, adding escapes for blank lines where needed.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/point_link_image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Smart Escaping:&lt;/strong&gt; Escapes special characters only when necessary, to avoid accidental Markdown rendering. üóíÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/ESCAPING.md&#34;&gt;ESCAPING.md&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/point_escaping.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Remove/Keep HTML:&lt;/strong&gt; Choose to strip or retain specific HTML tags for ultimate control over output.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/point_wrapper.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Plugins:&lt;/strong&gt; Easily extend with plugins. Or create custom ones to enhance functionality.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/point_strikethrough.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Golang Library&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/JohannesKaufmann/html-to-markdown/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Or if you want a specific commit add the suffix &lt;code&gt;/v2@commithash&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; This is the documentation for the v2 library. For the old version switch to the &lt;a href=&#34;https://github.com/JohannesKaufmann/html-to-markdown/tree/v1&#34;&gt;&#34;v1&#34; branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/JohannesKaufmann/html-to-markdown/v2&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/JohannesKaufmann/html-to-markdown/v2.svg?sanitize=true&#34; alt=&#34;Go V2 Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;htmltomarkdown &#34;github.com/JohannesKaufmann/html-to-markdown/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;input := `&amp;lt;strong&amp;gt;Bold Text&amp;lt;/strong&amp;gt;`&#xA;&#xA;&#x9;markdown, err := htmltomarkdown.ConvertString(input)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(markdown)&#xA;&#x9;// Output: **Bold Text**&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üßë‚Äçüíª &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/examples/basics/main.go&#34;&gt;Example code, basics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The function &lt;code&gt;htmltomarkdown.ConvertString()&lt;/code&gt; is a &lt;em&gt;small wrapper&lt;/em&gt; around &lt;code&gt;converter.NewConverter()&lt;/code&gt; and the &lt;em&gt;base&lt;/em&gt; and &lt;em&gt;commonmark&lt;/em&gt; plugins. If you want more control, use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/JohannesKaufmann/html-to-markdown/v2/converter&#34;&#xA;&#x9;&#34;github.com/JohannesKaufmann/html-to-markdown/v2/plugin/base&#34;&#xA;&#x9;&#34;github.com/JohannesKaufmann/html-to-markdown/v2/plugin/commonmark&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;input := `&amp;lt;strong&amp;gt;Bold Text&amp;lt;/strong&amp;gt;`&#xA;&#xA;&#x9;conv := converter.NewConverter(&#xA;&#x9;&#x9;converter.WithPlugins(&#xA;&#x9;&#x9;&#x9;base.NewBasePlugin(),&#xA;&#x9;&#x9;&#x9;commonmark.NewCommonmarkPlugin(&#xA;&#x9;&#x9;&#x9;&#x9;commonmark.WithStrongDelimiter(&#34;__&#34;),&#xA;&#x9;&#x9;&#x9;&#x9;// ...additional configurations for the plugin&#xA;&#x9;&#x9;&#x9;),&#xA;&#x9;&#x9;),&#xA;&#x9;)&#xA;&#xA;&#x9;markdown, err := conv.ConvertString(input)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#x9;fmt.Println(markdown)&#xA;&#x9;// Output: __Bold Text__&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üßë‚Äçüíª &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/examples/options/main.go&#34;&gt;Example code, options&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; If you use &lt;code&gt;NewConverter&lt;/code&gt; directly make sure to also &lt;strong&gt;register the commonmark and base plugin&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;h4&gt;Published Plugins&lt;/h4&gt; &#xA;&lt;p&gt;These are the plugins located in the &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/plugin&#34;&gt;plugin folder&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Base&lt;/td&gt; &#xA;   &lt;td&gt;Implements basic shared functionality (e.g. removing nodes)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Commonmark&lt;/td&gt; &#xA;   &lt;td&gt;Implements Markdown according to the &lt;a href=&#34;https://spec.commonmark.org/&#34;&gt;Commonmark Spec&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitHubFlavored&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;planned&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TaskListItems&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;planned&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Strikethrough&lt;/td&gt; &#xA;   &lt;td&gt;Converts &lt;code&gt;&amp;lt;strike&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;s&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt; to the &lt;code&gt;~~&lt;/code&gt; syntax.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Table&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;planned&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VimeoEmbed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;planned&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YoutubeEmbed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;planned&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConfluenceCodeBlock&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;planned&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConfluenceAttachments&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;planned&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; Not all the plugins from v1 are already ported to v2. These will soon be implemented...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;These are the plugins in other repositories:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[Plugin Name](Your Link)&lt;/td&gt; &#xA;   &lt;td&gt;A short description&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Writing Plugins&lt;/h4&gt; &#xA;&lt;p&gt;You want to write custom logic?&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Write your logic and &lt;strong&gt;register&lt;/strong&gt; it.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/.github/images/autocomplete_register.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;üßë‚Äçüíª &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/examples/register/main.go&#34;&gt;Example code, register&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Optional:&lt;/em&gt; Package your logic into a &lt;strong&gt;plugin&lt;/strong&gt; and publish it.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;üóíÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/WRITING_PLUGINS.md&#34;&gt;WRITING_PLUGINS.md&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;CLI - Using it on the command line&lt;/h2&gt; &#xA;&lt;p&gt;Using the Golang library provides the most customization, while the CLI is the simplest way to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Homebrew Tap&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install JohannesKaufmann/tap/html2markdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Manually&lt;/h4&gt; &#xA;&lt;p&gt;Download the pre-compiled binaries from the &lt;a href=&#34;https://github.com/JohannesKaufmann/html-to-markdown/releases&#34;&gt;releases page&lt;/a&gt; and copy them to the desired location.&lt;/p&gt; &#xA;&lt;h3&gt;Version&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;html2markdown --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; Make sure that &lt;code&gt;--version&lt;/code&gt; prints &lt;code&gt;2.X.X&lt;/code&gt; as there is a different CLI for V2 of the converter.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#34;&amp;lt;strong&amp;gt;important&amp;lt;/strong&amp;gt;&#34; | html2markdown&#xA;&#xA;**important**&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ curl --no-progress-meter http://example.com | html2markdown&#xA;&#xA;# Example Domain&#xA;&#xA;This domain is for use in illustrative examples in documents. You may use this domain in literature without prior coordination or asking for permission.&#xA;&#xA;[More information...](https://www.iana.org/domains/example)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(The cli does not support every option yet. Over time more customization will be added)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Extending with Plugins&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Need your own logic? Write your own code and then &lt;strong&gt;register&lt;/strong&gt; it.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Don&#39;t like the &lt;strong&gt;defaults&lt;/strong&gt; that the library uses? You can use &lt;code&gt;PriorityEarly&lt;/code&gt; to run you logic &lt;em&gt;earlier&lt;/em&gt; than others.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;üßë‚Äçüíª &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/examples/register/main.go&#34;&gt;Example code, register&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you believe that you logic could also benefit others, you can package it up into a &lt;strong&gt;plugin&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;üóíÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/WRITING_PLUGINS.md&#34;&gt;WRITING_PLUGINS.md&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bugs&lt;/h3&gt; &#xA;&lt;p&gt;You found a bug?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JohannesKaufmann/html-to-markdown/issues/new/choose&#34;&gt;Open an issue&lt;/a&gt; with the HTML snippet that does not produce the expected results. Please, please, plase &lt;em&gt;submit the HTML snippet&lt;/em&gt; that caused the problem. Otherwise it is very difficult to reproduce and fix...&lt;/p&gt; &#xA;&lt;h3&gt;Security&lt;/h3&gt; &#xA;&lt;p&gt;This library produces markdown that is readable and can be changed by humans.&lt;/p&gt; &#xA;&lt;p&gt;Once you convert this markdown back to HTML (e.g. using &lt;a href=&#34;https://github.com/yuin/goldmark&#34;&gt;goldmark&lt;/a&gt; or &lt;a href=&#34;https://github.com/russross/blackfriday&#34;&gt;blackfriday&lt;/a&gt;) you need to be careful of malicious content.&lt;/p&gt; &#xA;&lt;p&gt;This library does NOT sanitize untrusted content. Use an HTML sanitizer such as &lt;a href=&#34;https://github.com/microcosm-cc/bluemonday&#34;&gt;bluemonday&lt;/a&gt; before displaying the HTML in the browser.&lt;/p&gt; &#xA;&lt;p&gt;üóíÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/SECURITY.md&#34;&gt;SECURITY.md&lt;/a&gt; if you find a security vulnerability&lt;/p&gt; &#xA;&lt;h3&gt;Goroutines&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;Converter&lt;/code&gt; from (multiple) goroutines. Internally a mutex is used &amp;amp; there is a test to verify that behaviour.&lt;/p&gt; &#xA;&lt;h3&gt;Escaping &amp;amp; Backslash&lt;/h3&gt; &#xA;&lt;p&gt;Some characters have a special meaning in markdown (e.g. &#34;*&#34; for emphasis). The backslash &lt;code&gt;\&lt;/code&gt; character is used to &#34;escape&#34; those characters. That is perfectly safe and won&#39;t be displayed in the final render.&lt;/p&gt; &#xA;&lt;p&gt;üóíÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/ESCAPING.md&#34;&gt;ESCAPING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;You want to contribute? Thats great to hear! There are many ways to help:&lt;/p&gt; &#xA;&lt;p&gt;Helping to answer questions, triaging issues, writing documentation, writing code, ...&lt;/p&gt; &#xA;&lt;p&gt;If you want to make a code change: Please first discuss the change you wish to make, by opening an issue. I&#39;m also happy to guide you to where a change is most likely needed. There are also extensive tests (see below) so you can freely experiment üßë‚Äçüî¨&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The outside API should not change because of backwards compatibility...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;You don&#39;t have to be afraid of breaking the converter, since there are many &#34;Golden File&#34; tests:&lt;/p&gt; &#xA;&lt;p&gt;Add your problematic HTML snippet to one of the &lt;code&gt;.in.html&lt;/code&gt; files in the &lt;code&gt;testdata&lt;/code&gt; folders. Then run &lt;code&gt;go test -update&lt;/code&gt; and have a look at which &lt;code&gt;.out.md&lt;/code&gt; files changed in GIT.&lt;/p&gt; &#xA;&lt;p&gt;You can now change the internal logic and inspect what impact your change has by running &lt;code&gt;go test -update&lt;/code&gt; again.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Before submitting your change as a PR, make sure that you run those tests and check the files into GIT...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Unless otherwise specified, the project is licensed under the terms of the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;üóíÔ∏è &lt;a href=&#34;https://raw.githubusercontent.com/JohannesKaufmann/html-to-markdown/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>helm-unittest/helm-unittest</title>
    <updated>2024-11-11T01:30:57Z</updated>
    <id>tag:github.com,2024-11-11:/helm-unittest/helm-unittest</id>
    <link href="https://github.com/helm-unittest/helm-unittest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BDD styled unit test framework for Kubernetes Helm charts as a Helm plugin.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;helm unittest&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/helm-unittest/helm-unittest/actions&#34;&gt;&lt;img src=&#34;https://github.com/helm-unittest/helm-unittest/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/helm-unittest/helm-unittest&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/helm-unittest/helm-unittest&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=helm-unittest_helm-unittest&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=helm-unittest_helm-unittest&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.bestpractices.dev/projects/9365&#34;&gt;&lt;img src=&#34;https://www.bestpractices.dev/projects/9365/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://scorecard.dev/viewer/?uri=github.com/helm-unittest/helm-unittest&#34;&gt;&lt;img src=&#34;https://api.scorecard.dev/projects/github.com/helm-unittest/helm-unittest/badge&#34; alt=&#34;OpenSSF&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Unit test for &lt;em&gt;helm chart&lt;/em&gt; in YAML to keep your chart consistent and robust!&lt;/p&gt; &#xA;&lt;p&gt;Feature:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;write test file in pure YAML&lt;/li&gt; &#xA; &lt;li&gt;render locally&lt;/li&gt; &#xA; &lt;li&gt;create &lt;strong&gt;nothing&lt;/strong&gt; on your cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/DOCUMENT.md#test-suite&#34;&gt;wildcard selection for templates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/DOCUMENT.md#test-job&#34;&gt;define values and release options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#snapshot-testing&#34;&gt;snapshot testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#test-suite-code-completion-and-validation&#34;&gt;test suite code completion and validation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;If you are ready for writing tests, check the &lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/DOCUMENT.md&#34;&gt;DOCUMENT&lt;/a&gt; for the test API in YAML.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#docker-usage&#34;&gt;Docker Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#get-started&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#test-suite-file&#34;&gt;Test Suite File&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#templated-test-suites&#34;&gt;Templated Test Suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#flags&#34;&gt;Flags&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#yaml-jsonpath-support&#34;&gt;Yaml JsonPath Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#documentselector&#34;&gt;DocumentSelector&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#snapshot-testing&#34;&gt;Snapshot Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#dependent-subchart-testing&#34;&gt;Dependent subchart Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#tests-within-subchart&#34;&gt;Tests within subchart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#test-suite-code-completion-and-validation&#34;&gt;Test suite code completion and validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#frequently-asked-questions&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#related-projects--commands&#34;&gt;Related Projects / Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ helm plugin install https://github.com/helm-unittest/helm-unittest.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will install the latest version of binary into helm plugin directory.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# run help of latest helm with latest helm unittest plugin&#xA;docker run -ti --rm -v $(pwd):/apps helmunittest/helm-unittest&#xA;&#xA;# run help of specific helm version with specific helm unittest plugin version&#xA;docker run -ti --rm -v $(pwd):/apps helmunittest/helm-unittest:3.11.1-0.3.0&#xA;&#xA;# run unittests of a helm 3 chart&#xA;# make sure to mount local folder to /apps in container&#xA;docker run -ti --rm -v $(pwd):/apps helmunittest/helm-unittest:3.11.1-0.3.0 .&#xA;&#xA;# run unittests of a helm 3 chart with Junit output for CI validation&#xA;# make sure to mount local folder to /apps in container&#xA;# the test-output.xml will be available in the local folder.&#xA;docker run -ti --rm -v $(pwd):/apps helmunittest/helm-unittest:3.11.1-0.3.0 -o test-output.xml -t junit .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The docker container contains the fully installed helm client, including the helm-unittest plugin.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;tests&lt;/code&gt; in &lt;code&gt;.helmignore&lt;/code&gt; of your chart, and create the following test file at &lt;code&gt;$YOUR_CHART/tests/deployment_test.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;suite: test deployment&#xA;templates:&#xA;  - deployment.yaml&#xA;tests:&#xA;  - it: should work&#xA;    set:&#xA;      image.tag: latest&#xA;    asserts:&#xA;      - isKind:&#xA;          of: Deployment&#xA;      - matchRegex:&#xA;          path: metadata.name&#xA;          pattern: -my-chart$&#xA;      - equal:&#xA;          path: spec.template.spec.containers[0].image&#xA;          value: nginx:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ helm unittest $YOUR_CHART&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now there is your first test! ;)&lt;/p&gt; &#xA;&lt;h2&gt;Test Suite File&lt;/h2&gt; &#xA;&lt;p&gt;The test suite file is written in pure YAML, and default placed under the &lt;code&gt;tests/&lt;/code&gt; directory of the chart with suffix &lt;code&gt;_test.yaml&lt;/code&gt;. You can also have your own suite files arrangement with &lt;code&gt;-f, --file&lt;/code&gt; option of cli set as the glob patterns of test suite files related to chart directory, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ helm unittest -f &#39;my-tests/*.yaml&#39; -f &#39;more-tests/**/*.yaml&#39; my-chart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/DOCUMENT.md&#34;&gt;DOCUMENT&lt;/a&gt; for more details about writing tests.&lt;/p&gt; &#xA;&lt;h3&gt;Templated Test Suites&lt;/h3&gt; &#xA;&lt;p&gt;You may find yourself needing to set up a lots o tests that are a parameterization of a single test. For instance, let&#39;s say that you deploy to 3 environments &lt;code&gt;env = dev | staging | prod&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to do this, you can actually write your tests as a helm chart as well. If you go about this route, you must set the &lt;code&gt;--chart-tests-path&lt;/code&gt; option. Once you have done so, helm unittest will run a standard helm render against the values.yaml in your specified directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/my-chart&#xA;  /tests-chart&#xA;    /Chart.yaml&#xA;    /values.yaml&#xA;    /templates&#xA;      /per_env_snapshots.yaml&#xA;&#xA;  /Chart.yaml&#xA;  /values.yaml&#xA;  /.helmignore&#xA;  /templates&#xA;    /actual_template.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the above example file structure, you would maintain a helm chart that will render out against the Chart.yaml that as provided and the values.yaml. With rendered charts, any test suite that is generated is automatically ran we do not look for a file postfix or glob.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; since you can create multiple suites in a single template file, you must provide the suite name, since we can no longer use the test suite file name meaningfully.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; since you can be running against subcharts and multiple charts, you need to make sure that you do not designate your &lt;code&gt;--chart-tests-path&lt;/code&gt; to be the same folder as your other tests. This is because we will try to render those non-helm test folders and fail during the unit test.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note 3:&lt;/strong&gt; for snapshot tests, you will need to provide a helm ignore that ignores &lt;code&gt;*/__snapshot__/*&lt;/code&gt;. Otherwise, subsequent runs will try to render those snapshots.&lt;/p&gt; &#xA;&lt;p&gt;The command for the above chart and test configuration would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;helm unittest --chart-tests-path tests-chart my-chart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ helm unittest [flags] CHART [...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This renders your charts locally (without tiller) and runs tests defined in test suite files.&lt;/p&gt; &#xA;&lt;h3&gt;Flags&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;      --color                  enforce printing colored output even stdout is not a tty. Set to false to disable color&#xA;      --strict                 strict parse the testsuites (default false)&#xA;  -d  --debugPlugin            enable debug logging (default false)&#xA;  -v, --values stringArray     absolute or glob paths of values files location to override helmchart values&#xA;  -f, --file stringArray       glob paths of test files location, default to tests\*_test.yaml (default [tests\*_test.yaml])&#xA;  -q, --failfast               direct quit testing, when a test is failed (default false)&#xA;  -h, --help                   help for unittest&#xA;  -t, --output-type string     the file-format where testresults are written in, accepted types are (JUnit, NUnit, XUnit) (default XUnit)&#xA;  -o, --output-file string     the file where testresults are written in format specified, defaults no output is written to file&#xA;  -u, --update-snapshot        update the snapshot cached if needed, make sure you review the change before update&#xA;  -s, --with-subchart charts   include tests of the subcharts within charts folder (default true)&#xA;      --chart-tests-path string the folder location relative to the chart where a helm chart to render test suites is located&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Yaml JsonPath Support&lt;/h3&gt; &#xA;&lt;p&gt;Now JsonPath is supported for mappings and arrays. This makes it possible to find items in an array, based on JsonPath. For more detail on the &lt;a href=&#34;https://github.com/vmware-labs/yaml-jsonpath#syntax&#34;&gt;&lt;code&gt;jsonPath&lt;/code&gt;&lt;/a&gt; syntax.&lt;/p&gt; &#xA;&lt;p&gt;Due to the change to JsonPath, the map keys in &lt;code&gt;path&lt;/code&gt; containing periods (&lt;code&gt;.&lt;/code&gt;) or special characters (&lt;code&gt;/&lt;/code&gt;) are now supported with the use of &lt;code&gt;&#34;&#34;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- equal:&#xA;    path: metadata.annotations[&#34;kubernetes.io/ingress.class&#34;]&#xA;    value: nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The next releases it will be possible to validate multiple paths when JsonPath result into multiple results.&lt;/p&gt; &#xA;&lt;h3&gt;DocumentSelector&lt;/h3&gt; &#xA;&lt;p&gt;The test job or assertion can also specify a documentSelector rather than a documentIndex. Note that the documentSelector will always override a documentIndex if a match is found. This field is particularly useful when helm produces multiple templates and the order is not always guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;path&lt;/code&gt; in the documentSelector has Yaml JsonPath Support, using JsonPath expressions it is possible to filter on multiple fields.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; in the documentSelector can validate complete yaml objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;...&#xA;tests:&#xA;  - it: should pass&#xA;    values:&#xA;      - ./values/staging.yaml&#xA;    set:&#xA;      image.pullPolicy: Always&#xA;      resources:&#xA;        limits:&#xA;          memory: 128Mi&#xA;    template: deployment.yaml&#xA;    documentSelector:&#xA;      path: metadata.name&#xA;      value: my-service-name&#xA;    asserts:&#xA;      - equal:&#xA;          path: metadata.name&#xA;          value: my-deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/test/data/v3/basic&#34;&gt;&lt;code&gt;test/data/v3/basic/&lt;/code&gt;&lt;/a&gt; for some basic use cases of a simple chart.&lt;/p&gt; &#xA;&lt;h2&gt;Snapshot Testing&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you may just want to keep the rendered manifest not changed between changes without every details asserted. That&#39;s the reason for snapshot testing! Check the tests below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;templates:&#xA;  - templates/deployment.yaml&#xA;tests:&#xA;  - it: pod spec should match snapshot&#xA;    asserts:&#xA;      - matchSnapshot:&#xA;          path: spec.template.spec&#xA;  # or you can snapshot the whole manifest&#xA;  - it: manifest should match snapshot&#xA;    asserts:&#xA;      - matchSnapshot: {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;matchSnapshot&lt;/code&gt; assertion validate the content rendered the same as cached last time. It fails if the content changed, and you should check and update the cache with &lt;code&gt;-u, --update-snapshot&lt;/code&gt; option of cli.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ helm unittest -u my-chart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cache files is stored as &lt;code&gt;__snapshot__/*_test.yaml.snap&lt;/code&gt; at the directory your test file placed, you should add them in version control with your chart.&lt;/p&gt; &#xA;&lt;h2&gt;Dependent subchart Testing&lt;/h2&gt; &#xA;&lt;p&gt;If you have hard dependency subcharts (installed via &lt;code&gt;helm dependency&lt;/code&gt;) existed in &lt;code&gt;charts&lt;/code&gt; directory (they don&#39;t need to be extracted), it is possible to unittest these from the root chart. This feature can be helpful to validate if good default values are accidentally overwritten within your default helm chart.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# $YOUR_CHART/tests/xxx_test.yaml&#xA;templates:&#xA;  - charts/postgresql/templates/xxx.yaml&#xA;tests:&#xA;  - it:&#xA;    set:&#xA;      # this time required to prefix with &#34;postgresql.&#34;&#xA;      postgresql.somevalue: should_be_scoped&#xA;    asserts:&#xA;      - ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note 1: if dependent subcharts uses an alias, use the alias name in the templates. Note 2: using the folder structure in templates can also be used to unittest templates which are placed in subfolders or unittest subcharts from the rootchart.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/test/data/v3/with-subchart&#34;&gt;&lt;code&gt;test/data/v3/with-subchart/&lt;/code&gt;&lt;/a&gt; as an example.&lt;/p&gt; &#xA;&lt;h2&gt;Tests within subchart&lt;/h2&gt; &#xA;&lt;p&gt;If you have customized hard dependency subchart (not installed via &lt;code&gt;helm dependency&lt;/code&gt;, but added manually) existed in &lt;code&gt;charts&lt;/code&gt; directory, tests inside would also be executed by default. You can disable this behavior by setting &lt;code&gt;--with-subchart=false&lt;/code&gt; flag in cli, thus only the tests in root chart will be executed. Notice that the values defined in subchart tests will be automatically scoped, you don&#39;t have to add dependency scope yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# with-subchart/charts/child-chart/tests/xxx_test.yaml&#xA;templates:&#xA;  - templates/xxx.yaml&#xA;tests:&#xA;  - it:&#xA;    set:&#xA;      # no need to prefix with &#34;child-chart.&#34;&#xA;      somevalue: should_be_scoped&#xA;    asserts:&#xA;      - ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/test/data/v3/with-subchart&#34;&gt;&lt;code&gt;test/data/v3/with-subchart/&lt;/code&gt;&lt;/a&gt; as an example.&lt;/p&gt; &#xA;&lt;h2&gt;Test Suite code completion and validation&lt;/h2&gt; &#xA;&lt;p&gt;Most popular IDEs (IntelliJ, Visual Studio Code, etc.) support applying schemas to YAML files using a JSON Schema. This provides comprehensive documentation as well as code completion while editing the test-suite file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/.images/testsuite-yaml-codecompletion.png&#34; alt=&#34;Code completion&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In addition, test-suite files can be validated while editing so wrongfully added additional properties or incorrect data types can be detected while editing:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/.images/testsuite-yaml-codevalidation.png&#34; alt=&#34;Code Validation&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Visual Studio Code&lt;/h3&gt; &#xA;&lt;p&gt;When developing with VSCode, the very popular YAML plug-in (created by RedHat) allows adding references to schemas by adding a comment line on top of the file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# yaml-language-server: $schema=https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json&#xA;suite: http-service.configmap_test.yaml&#xA;templates: [configmap.yaml]&#xA;release:&#xA;  name: test-release&#xA;  namespace: TEST_NAMESPACE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can add the schema globally to the IDE, using a well defined pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;yaml.schemas&#34;: {&#xA;  &#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/schema/helm-testsuite.json&#34;: [&#34;charts/*/tests/*_test.yaml&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;IntelliJ&lt;/h3&gt; &#xA;&lt;p&gt;Similar to VSCode, IntelliJ allows mapping file patterns to schemas via preferences: Languages &amp;amp; Frameworks -&amp;gt; Schemas and DTDs -&amp;gt; JSON Schema Mappings&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/.images/testsuite-yaml-addschema-intellij.png&#34; alt=&#34;Add Json Schema&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;As more people use the unittest plugin, more questions will come. Therefore a &lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/FAQ.md&#34;&gt;Frequently Asked Question page&lt;/a&gt; is created to answer the most common questions.&lt;/p&gt; &#xA;&lt;p&gt;If you are missing an answer to a question, feel free to raise a ticket.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects / Commands&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is inspired by &lt;a href=&#34;https://github.com/technosophos/helm-template&#34;&gt;helm-template&lt;/a&gt;, and the idea of snapshot testing and some printing format comes from &lt;a href=&#34;https://github.com/facebook/jest&#34;&gt;jest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;And there are some other helm commands you might want to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/helm/raw/master/docs/helm/helm_template.md&#34;&gt;&lt;code&gt;helm template&lt;/code&gt;&lt;/a&gt;: render the chart and print the output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/helm/raw/master/docs/helm/helm_lint.md&#34;&gt;&lt;code&gt;helm lint&lt;/code&gt;&lt;/a&gt;: examines a chart for possible issues, useful to validate chart dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/helm/raw/master/docs/helm/helm_test.md&#34;&gt;&lt;code&gt;helm test&lt;/code&gt;&lt;/a&gt;: test a release with testing pod defined in chart. Note this does create resources on your cluster to verify if your release is correct. Check the &lt;a href=&#34;https://github.com/kubernetes/helm/raw/master/docs/chart_tests.md&#34;&gt;doc&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, you can also use generic tests frameworks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/apache/airflow/issues/11657&#34;&gt;Python&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go - &lt;a href=&#34;https://blog.gruntwork.io/automated-testing-for-kubernetes-and-helm-charts-using-terratest-a4ddc4e67344&#34;&gt;terratest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Issues and PRs are welcome! To start developing this plugin please follow the &lt;a href=&#34;https://raw.githubusercontent.com/helm-unittest/helm-unittest/main/CONTRIBUTING.md&#34;&gt;Contribution&lt;/a&gt; guidelines.&lt;/p&gt;</summary>
  </entry>
</feed>