<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-31T01:34:29Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-redis/redis</title>
    <updated>2022-08-31T01:34:29Z</updated>
    <id>tag:github.com,2022-08-31:/go-redis/redis</id>
    <link href="https://github.com/go-redis/redis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Type-safe Redis client for Golang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Redis client for Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/go-redis/redis/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build workflow&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/go-redis/redis/v8?tab=doc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/go-redis/redis/v8&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://redis.uptrace.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/redis-documentation-informational&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rWtp5Aj&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/752070105847955518/widget.png&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;go-redis is brought to you by &lt;span&gt;‚≠ê&lt;/span&gt; &lt;a href=&#34;https://github.com/uptrace/uptrace&#34;&gt;&lt;strong&gt;uptrace/uptrace&lt;/strong&gt;&lt;/a&gt;. Uptrace is an open source and blazingly fast &lt;a href=&#34;https://get.uptrace.dev/compare/distributed-tracing-tools.html&#34;&gt;distributed tracing tool&lt;/a&gt; powered by OpenTelemetry and ClickHouse. Give it a star as well!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;h3&gt;Upstash: Serverless Database for Redis&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://upstash.com/?utm_source=goredis&#34;&gt;&lt;img align=&#34;right&#34; width=&#34;320&#34; src=&#34;https://raw.githubusercontent.com/upstash/sponsorship/master/redis.png&#34; alt=&#34;Upstash&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Upstash is a Serverless Database with Redis/REST API and durable storage. It is the perfect database for your applications thanks to its per request pricing and low latency data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://upstash.com/?utm_source=goredis&#34;&gt;Start for free in 30 seconds!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br clear=&#34;both&#34;&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/redis/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/rWtp5Aj&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-redis/redis/v8?tab=doc&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-redis/redis/v8?tab=doc#pkg-examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/redismock&#34;&gt;Redis Mock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bsm/redislock&#34;&gt;Distributed Locks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/cache&#34;&gt;Redis Cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-redis/redis_rate&#34;&gt;Rate limiting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This client also works with &lt;a href=&#34;https://github.com/KvrocksLabs/kvrocks&#34;&gt;kvrocks&lt;/a&gt;, a distributed key value NoSQL database that uses RocksDB as storage engine and is compatible with Redis protocol.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redis 3 commands except QUIT, MONITOR, and SYNC.&lt;/li&gt; &#xA; &lt;li&gt;Automatic connection pooling with&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-pubsub.html&#34;&gt;Pub/Sub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-pipelines.html&#34;&gt;Pipelines and transactions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/lua-scripting.html&#34;&gt;Scripting&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-sentinel.html&#34;&gt;Redis Sentinel&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/go-redis-cluster.html&#34;&gt;Redis Cluster&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/ring.html&#34;&gt;Redis Ring&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.uptrace.dev/guide/redis-performance-monitoring.html&#34;&gt;Redis Performance Monitoring&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;go-redis supports 2 last Go versions and requires a Go version with &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;modules&lt;/a&gt; support. So make sure to initialize a Go module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go mod init github.com/my/repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;strong&gt;Redis 6&lt;/strong&gt;, install go-redis/&lt;strong&gt;v8&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/go-redis/redis/v8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;strong&gt;Redis 7&lt;/strong&gt;, install go-redis/&lt;strong&gt;v9&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/go-redis/redis/v9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;context&#34;&#xA;    &#34;github.com/go-redis/redis/v8&#34;&#xA;    &#34;fmt&#34;&#xA;)&#xA;&#xA;var ctx = context.Background()&#xA;&#xA;func ExampleClient() {&#xA;    rdb := redis.NewClient(&amp;amp;redis.Options{&#xA;        Addr:     &#34;localhost:6379&#34;,&#xA;        Password: &#34;&#34;, // no password set&#xA;        DB:       0,  // use default DB&#xA;    })&#xA;&#xA;    err := rdb.Set(ctx, &#34;key&#34;, &#34;value&#34;, 0).Err()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    val, err := rdb.Get(ctx, &#34;key&#34;).Result()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;    fmt.Println(&#34;key&#34;, val)&#xA;&#xA;    val2, err := rdb.Get(ctx, &#34;key2&#34;).Result()&#xA;    if err == redis.Nil {&#xA;        fmt.Println(&#34;key2 does not exist&#34;)&#xA;    } else if err != nil {&#xA;        panic(err)&#xA;    } else {&#xA;        fmt.Println(&#34;key2&#34;, val2)&#xA;    }&#xA;    // Output: key value&#xA;    // key2 does not exist&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Look and feel&lt;/h2&gt; &#xA;&lt;p&gt;Some corner cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// SET key value EX 10 NX&#xA;set, err := rdb.SetNX(ctx, &#34;key&#34;, &#34;value&#34;, 10*time.Second).Result()&#xA;&#xA;// SET key value keepttl NX&#xA;set, err := rdb.SetNX(ctx, &#34;key&#34;, &#34;value&#34;, redis.KeepTTL).Result()&#xA;&#xA;// SORT list LIMIT 0 2 ASC&#xA;vals, err := rdb.Sort(ctx, &#34;list&#34;, &amp;amp;redis.Sort{Offset: 0, Count: 2, Order: &#34;ASC&#34;}).Result()&#xA;&#xA;// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2&#xA;vals, err := rdb.ZRangeByScoreWithScores(ctx, &#34;zset&#34;, &amp;amp;redis.ZRangeBy{&#xA;    Min: &#34;-inf&#34;,&#xA;    Max: &#34;+inf&#34;,&#xA;    Offset: 0,&#xA;    Count: 2,&#xA;}).Result()&#xA;&#xA;// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM&#xA;vals, err := rdb.ZInterStore(ctx, &#34;out&#34;, &amp;amp;redis.ZStore{&#xA;    Keys: []string{&#34;zset1&#34;, &#34;zset2&#34;},&#xA;    Weights: []int64{2, 3}&#xA;}).Result()&#xA;&#xA;// EVAL &#34;return {KEYS[1],ARGV[1]}&#34; 1 &#34;key&#34; &#34;hello&#34;&#xA;vals, err := rdb.Eval(ctx, &#34;return {KEYS[1],ARGV[1]}&#34;, []string{&#34;key&#34;}, &#34;hello&#34;).Result()&#xA;&#xA;// custom command&#xA;res, err := rdb.Do(ctx, &#34;set&#34;, &#34;key&#34;, &#34;value&#34;).Result()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run the test&lt;/h2&gt; &#xA;&lt;p&gt;go-redis will start a redis-server and run the test cases.&lt;/p&gt; &#xA;&lt;p&gt;The paths of redis-server bin file and redis config file are defined in &lt;code&gt;main_test.go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var (&#xA;&#x9;redisServerBin, _  = filepath.Abs(filepath.Join(&#34;testdata&#34;, &#34;redis&#34;, &#34;src&#34;, &#34;redis-server&#34;))&#xA;&#x9;redisServerConf, _ = filepath.Abs(filepath.Join(&#34;testdata&#34;, &#34;redis&#34;, &#34;redis.conf&#34;))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For local testing, you can change the variables to refer to your local files, or create a soft link to the corresponding folder for redis-server and copy the config file to &lt;code&gt;testdata/redis/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ln -s /usr/bin/redis-server ./go-redis/testdata/redis/src&#xA;cp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev&#34;&gt;Golang ORM&lt;/a&gt; for PostgreSQL, MySQL, MSSQL, and SQLite&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/postgres/&#34;&gt;Golang PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bunrouter.uptrace.dev/&#34;&gt;Golang HTTP router&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uptrace/go-clickhouse&#34;&gt;Golang ClickHouse ORM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/go-redis/redis/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=go-redis/redis&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>gocolly/colly</title>
    <updated>2022-08-31T01:34:29Z</updated>
    <id>tag:github.com,2022-08-31:/gocolly/colly</id>
    <link href="https://github.com/gocolly/colly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Elegant Scraper and Crawler Framework for Golang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Colly&lt;/h1&gt; &#xA;&lt;p&gt;Lightning Fast and Elegant Scraping Framework for Gophers&lt;/p&gt; &#xA;&lt;p&gt;Colly provides a clean interface to write any kind of crawler/scraper/spider.&lt;/p&gt; &#xA;&lt;p&gt;With Colly you can easily extract structured data from websites, which can be used for a wide range of applications, like data mining, data processing or archiving.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/gocolly/colly/v2&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/gocolly/colly?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gocolly/colly/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gocolly/colly/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gocolly/colly/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/gocolly/colly/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://goreportcard.com/report/gocolly/colly&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/report%20card-a%2B-ff3333.svg?style=flat-square&#34; alt=&#34;report card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gocolly/colly/tree/master/_examples&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/learn%20by-examples-0077b3.svg?style=flat-square&#34; alt=&#34;view examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/gocolly/colly?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/gocolly/colly/master.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fgocolly%2Fcolly?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgocolly%2Fcolly.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/gocolly&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-follow-green.svg?sanitize=true&#34; alt=&#34;Twitter URL&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clean API&lt;/li&gt; &#xA; &lt;li&gt;Fast (&amp;gt;1k request/sec on a single core)&lt;/li&gt; &#xA; &lt;li&gt;Manages request delays and maximum concurrency per domain&lt;/li&gt; &#xA; &lt;li&gt;Automatic cookie and session handling&lt;/li&gt; &#xA; &lt;li&gt;Sync/async/parallel scraping&lt;/li&gt; &#xA; &lt;li&gt;Caching&lt;/li&gt; &#xA; &lt;li&gt;Automatic encoding of non-unicode responses&lt;/li&gt; &#xA; &lt;li&gt;Robots.txt support&lt;/li&gt; &#xA; &lt;li&gt;Distributed scraping&lt;/li&gt; &#xA; &lt;li&gt;Configuration via environment variables&lt;/li&gt; &#xA; &lt;li&gt;Extensions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;c := colly.NewCollector()&#xA;&#xA;&#x9;// Find and visit all links&#xA;&#x9;c.OnHTML(&#34;a[href]&#34;, func(e *colly.HTMLElement) {&#xA;&#x9;&#x9;e.Request.Visit(e.Attr(&#34;href&#34;))&#xA;&#x9;})&#xA;&#xA;&#x9;c.OnRequest(func(r *colly.Request) {&#xA;&#x9;&#x9;fmt.Println(&#34;Visiting&#34;, r.URL)&#xA;&#x9;})&#xA;&#xA;&#x9;c.Visit(&#34;http://go-colly.org/&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/gocolly/colly/tree/master/_examples&#34;&gt;examples folder&lt;/a&gt; for more detailed examples.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add colly to your &lt;code&gt;go.mod&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;module github.com/x/y&#xA;&#xA;go 1.14&#xA;&#xA;require (&#xA;        github.com/gocolly/colly/v2 latest&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Bugs or suggestions? Visit the &lt;a href=&#34;https://github.com/gocolly/colly/issues&#34;&gt;issue tracker&lt;/a&gt; or join &lt;code&gt;#colly&lt;/code&gt; on freenode&lt;/p&gt; &#xA;&lt;h2&gt;Other Projects Using Colly&lt;/h2&gt; &#xA;&lt;p&gt;Below is a list of public, open source projects that use Colly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greenpeace/check-my-pages&#34;&gt;greenpeace/check-my-pages&lt;/a&gt; Scraping script to test the Spanish Greenpeace web archive.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/altsab/gowap&#34;&gt;altsab/gowap&lt;/a&gt; Wappalyzer implementation in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jesuiscamille/goquotes&#34;&gt;jesuiscamille/goquotes&lt;/a&gt; A quotes scrapper, making your day a little better!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jivesearch/jivesearch&#34;&gt;jivesearch/jivesearch&lt;/a&gt; A search engine that doesn&#39;t track you.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Leagify/colly-draft-prospects&#34;&gt;Leagify/colly-draft-prospects&lt;/a&gt; A scraper for future NFL Draft prospects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lucasepe/go-ps4&#34;&gt;lucasepe/go-ps4&lt;/a&gt; Search playstation store for your favorite PS4 games using the command line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yringler/inside-chassidus-scraper&#34;&gt;yringler/inside-chassidus-scraper&lt;/a&gt; Scrapes Rabbi Paltiel&#39;s web site for lesson metadata.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gamedb/gamedb&#34;&gt;gamedb/gamedb&lt;/a&gt; A database of Steam games.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lawzava/scrape&#34;&gt;lawzava/scrape&lt;/a&gt; CLI for email scraping from any website.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eureka101v/WeiboSpiderGo&#34;&gt;eureka101v/WeiboSpiderGo&lt;/a&gt; A sina weibo(chinese twitter) scrapper&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Go-phie/gophie&#34;&gt;Go-phie/gophie&lt;/a&gt; Search, Download and Stream movies from your terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imthaghost/goclone&#34;&gt;imthaghost/goclone&lt;/a&gt; Clone websites to your computer within seconds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/superiss/spidy&#34;&gt;superiss/spidy&lt;/a&gt; Crawl the web and collect expired domains.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker-slim/docker-slim&#34;&gt;docker-slim/docker-slim&lt;/a&gt; Optimize your Docker containers to make them smaller and better.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seversky/gachifinder&#34;&gt;seversky/gachifinder&lt;/a&gt; an agent for asynchronous scraping, parsing and writing to some storages(elasticsearch for now)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eval-exec/goodreads&#34;&gt;eval-exec/goodreads&lt;/a&gt; crawl all tags and all pages of quotes from goodreads.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are using Colly in a project please send a pull request to add it to the list.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://raw.githubusercontent.com/gocolly/colly/master/CONTRIBUTING.md&#34;&gt;[Contribute]&lt;/a&gt;. &lt;a href=&#34;https://github.com/gocolly/colly/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/contributors.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! üôè [&lt;a href=&#34;https://opencollective.com/colly#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/colly#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/colly#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/colly/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/colly/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/colly/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fgocolly%2Fcolly?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fgocolly%2Fcolly.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rs/zerolog</title>
    <updated>2022-08-31T01:34:29Z</updated>
    <id>tag:github.com,2022-08-31:/rs/zerolog</id>
    <link href="https://github.com/rs/zerolog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zero Allocation JSON Logger&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zero Allocation JSON Logger&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/rs/zerolog&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/godoc-reference-blue.svg?style=flat&#34; alt=&#34;godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-red.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/rs/zerolog&#34;&gt;&lt;img src=&#34;https://travis-ci.org/rs/zerolog.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://gocover.io/github.com/rs/zerolog&#34;&gt;&lt;img src=&#34;http://gocover.io/_badge/github.com/rs/zerolog&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The zerolog package provides a fast and simple logger dedicated to JSON output.&lt;/p&gt; &#xA;&lt;p&gt;Zerolog&#39;s API is designed to provide both a great developer experience and stunning &lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#benchmarks&#34;&gt;performance&lt;/a&gt;. Its unique chaining API allows zerolog to write JSON (or CBOR) log events by avoiding allocations and reflection.&lt;/p&gt; &#xA;&lt;p&gt;Uber&#39;s &lt;a href=&#34;https://godoc.org/go.uber.org/zap&#34;&gt;zap&lt;/a&gt; library pioneered this approach. Zerolog is taking this concept to the next level with a simpler to use API and even better performance.&lt;/p&gt; &#xA;&lt;p&gt;To keep the code base and the API simple, zerolog focuses on efficient structured logging only. Pretty logging on the console is made possible using the provided (but inefficient) &lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#pretty-logging&#34;&gt;&lt;code&gt;zerolog.ConsoleWriter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rs/zerolog/master/pretty.png&#34; alt=&#34;Pretty Logging Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Who uses zerolog&lt;/h2&gt; &#xA;&lt;p&gt;Find out &lt;a href=&#34;https://github.com/rs/zerolog/wiki/Who-uses-zerolog&#34;&gt;who uses zerolog&lt;/a&gt; and add your company / project to the list.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#benchmarks&#34;&gt;Blazing fast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#benchmarks&#34;&gt;Low to zero allocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#leveled-logging&#34;&gt;Leveled logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#log-sampling&#34;&gt;Sampling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#hooks&#34;&gt;Hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#contextual-logging&#34;&gt;Contextual fields&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;context.Context&lt;/code&gt; integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#integration-with-nethttp&#34;&gt;Integration with &lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#binary-encoding&#34;&gt;JSON and CBOR encoding formats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#pretty-logging&#34;&gt;Pretty logging for development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#error-logging&#34;&gt;Error Logging (with optional Stacktrace)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -u github.com/rs/zerolog/log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Simple Logging Example&lt;/h3&gt; &#xA;&lt;p&gt;For simple logging, import the global logger package &lt;strong&gt;github.com/rs/zerolog/log&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // UNIX Time is faster and smaller than most timestamps&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Print(&#34;hello world&#34;)&#xA;}&#xA;&#xA;// Output: {&#34;time&#34;:1516134303,&#34;level&#34;:&#34;debug&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: By default log writes to &lt;code&gt;os.Stderr&lt;/code&gt; Note: The default log level for &lt;code&gt;log.Print&lt;/code&gt; is &lt;em&gt;debug&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Contextual Logging&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;zerolog&lt;/strong&gt; allows data to be added to log messages in the form of key:value pairs. The data added to the message adds &#34;context&#34; about the log event that can be critical for debugging as well as myriad other purposes. An example of this is below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Debug().&#xA;        Str(&#34;Scale&#34;, &#34;833 cents&#34;).&#xA;        Float64(&#34;Interval&#34;, 833.09).&#xA;        Msg(&#34;Fibonacci is everywhere&#34;)&#xA;    &#xA;    log.Debug().&#xA;        Str(&#34;Name&#34;, &#34;Tom&#34;).&#xA;        Send()&#xA;}&#xA;&#xA;// Output: {&#34;level&#34;:&#34;debug&#34;,&#34;Scale&#34;:&#34;833 cents&#34;,&#34;Interval&#34;:833.09,&#34;time&#34;:1562212768,&#34;message&#34;:&#34;Fibonacci is everywhere&#34;}&#xA;// Output: {&#34;level&#34;:&#34;debug&#34;,&#34;Name&#34;:&#34;Tom&#34;,&#34;time&#34;:1562212768}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You&#39;ll note in the above example that when adding contextual fields, the fields are strongly typed. You can find the full list of supported fields &lt;a href=&#34;https://raw.githubusercontent.com/rs/zerolog/master/#standard-types&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Leveled Logging&lt;/h3&gt; &#xA;&lt;h4&gt;Simple Leveled Logging Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Info().Msg(&#34;hello world&#34;)&#xA;}&#xA;&#xA;// Output: {&#34;time&#34;:1516134303,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It is very important to note that when using the &lt;strong&gt;zerolog&lt;/strong&gt; chaining API, as shown above (&lt;code&gt;log.Info().Msg(&#34;hello world&#34;&lt;/code&gt;), the chain must have either the &lt;code&gt;Msg&lt;/code&gt; or &lt;code&gt;Msgf&lt;/code&gt; method call. If you forget to add either of these, the log will not occur and there is no compile time error to alert you of this.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;zerolog&lt;/strong&gt; allows for logging at the following levels (from highest to lowest):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;panic (&lt;code&gt;zerolog.PanicLevel&lt;/code&gt;, 5)&lt;/li&gt; &#xA; &lt;li&gt;fatal (&lt;code&gt;zerolog.FatalLevel&lt;/code&gt;, 4)&lt;/li&gt; &#xA; &lt;li&gt;error (&lt;code&gt;zerolog.ErrorLevel&lt;/code&gt;, 3)&lt;/li&gt; &#xA; &lt;li&gt;warn (&lt;code&gt;zerolog.WarnLevel&lt;/code&gt;, 2)&lt;/li&gt; &#xA; &lt;li&gt;info (&lt;code&gt;zerolog.InfoLevel&lt;/code&gt;, 1)&lt;/li&gt; &#xA; &lt;li&gt;debug (&lt;code&gt;zerolog.DebugLevel&lt;/code&gt;, 0)&lt;/li&gt; &#xA; &lt;li&gt;trace (&lt;code&gt;zerolog.TraceLevel&lt;/code&gt;, -1)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can set the Global logging level to any of these options using the &lt;code&gt;SetGlobalLevel&lt;/code&gt; function in the zerolog package, passing in one of the given constants above, e.g. &lt;code&gt;zerolog.InfoLevel&lt;/code&gt; would be the &#34;info&#34; level. Whichever level is chosen, all logs with a level greater than or equal to that level will be written. To turn off logging entirely, pass the &lt;code&gt;zerolog.Disabled&lt;/code&gt; constant.&lt;/p&gt; &#xA;&lt;h4&gt;Setting Global Log Level&lt;/h4&gt; &#xA;&lt;p&gt;This example uses command-line flags to demonstrate various outputs depending on the chosen log level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;flag&#34;&#xA;&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;    debug := flag.Bool(&#34;debug&#34;, false, &#34;sets log level to debug&#34;)&#xA;&#xA;    flag.Parse()&#xA;&#xA;    // Default level for this example is info, unless debug flag is present&#xA;    zerolog.SetGlobalLevel(zerolog.InfoLevel)&#xA;    if *debug {&#xA;        zerolog.SetGlobalLevel(zerolog.DebugLevel)&#xA;    }&#xA;&#xA;    log.Debug().Msg(&#34;This message appears only when log level set to Debug&#34;)&#xA;    log.Info().Msg(&#34;This message appears when log level set to Debug or Info&#34;)&#xA;&#xA;    if e := log.Debug(); e.Enabled() {&#xA;        // Compute log output only if enabled.&#xA;        value := &#34;bar&#34;&#xA;        e.Str(&#34;foo&#34;, value).Msg(&#34;some debug message&#34;)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Info Output (no flag)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./logLevelExample&#xA;{&#34;time&#34;:1516387492,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;This message appears when log level set to Debug or Info&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug Output (debug flag set)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./logLevelExample -debug&#xA;{&#34;time&#34;:1516387573,&#34;level&#34;:&#34;debug&#34;,&#34;message&#34;:&#34;This message appears only when log level set to Debug&#34;}&#xA;{&#34;time&#34;:1516387573,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;This message appears when log level set to Debug or Info&#34;}&#xA;{&#34;time&#34;:1516387573,&#34;level&#34;:&#34;debug&#34;,&#34;foo&#34;:&#34;bar&#34;,&#34;message&#34;:&#34;some debug message&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Logging without Level or Message&lt;/h4&gt; &#xA;&lt;p&gt;You may choose to log without a specific level by using the &lt;code&gt;Log&lt;/code&gt; method. You may also write without a message by setting an empty string in the &lt;code&gt;msg string&lt;/code&gt; parameter of the &lt;code&gt;Msg&lt;/code&gt; method. Both are demonstrated in the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Log().&#xA;        Str(&#34;foo&#34;, &#34;bar&#34;).&#xA;        Msg(&#34;&#34;)&#xA;}&#xA;&#xA;// Output: {&#34;time&#34;:1494567715,&#34;foo&#34;:&#34;bar&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Error Logging&lt;/h3&gt; &#xA;&lt;p&gt;You can log errors using the &lt;code&gt;Err&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#xA;&#x9;&#34;github.com/rs/zerolog&#34;&#xA;&#x9;&#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;&#x9;err := errors.New(&#34;seems we have an error here&#34;)&#xA;&#x9;log.Error().Err(err).Msg(&#34;&#34;)&#xA;}&#xA;&#xA;// Output: {&#34;level&#34;:&#34;error&#34;,&#34;error&#34;:&#34;seems we have an error here&#34;,&#34;time&#34;:1609085256}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The default field name for errors is &lt;code&gt;error&lt;/code&gt;, you can change this by setting &lt;code&gt;zerolog.ErrorFieldName&lt;/code&gt; to meet your needs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Error Logging with Stacktrace&lt;/h4&gt; &#xA;&lt;p&gt;Using &lt;code&gt;github.com/pkg/errors&lt;/code&gt;, you can add a formatted stacktrace to your errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/pkg/errors&#34;&#xA;&#x9;&#34;github.com/rs/zerolog/pkgerrors&#34;&#xA;&#xA;&#x9;&#34;github.com/rs/zerolog&#34;&#xA;&#x9;&#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#x9;zerolog.ErrorStackMarshaler = pkgerrors.MarshalStack&#xA;&#xA;&#x9;err := outer()&#xA;&#x9;log.Error().Stack().Err(err).Msg(&#34;&#34;)&#xA;}&#xA;&#xA;func inner() error {&#xA;&#x9;return errors.New(&#34;seems we have an error here&#34;)&#xA;}&#xA;&#xA;func middle() error {&#xA;&#x9;err := inner()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&#xA;func outer() error {&#xA;&#x9;err := middle()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&#xA;// Output: {&#34;level&#34;:&#34;error&#34;,&#34;stack&#34;:[{&#34;func&#34;:&#34;inner&#34;,&#34;line&#34;:&#34;20&#34;,&#34;source&#34;:&#34;errors.go&#34;},{&#34;func&#34;:&#34;middle&#34;,&#34;line&#34;:&#34;24&#34;,&#34;source&#34;:&#34;errors.go&#34;},{&#34;func&#34;:&#34;outer&#34;,&#34;line&#34;:&#34;32&#34;,&#34;source&#34;:&#34;errors.go&#34;},{&#34;func&#34;:&#34;main&#34;,&#34;line&#34;:&#34;15&#34;,&#34;source&#34;:&#34;errors.go&#34;},{&#34;func&#34;:&#34;main&#34;,&#34;line&#34;:&#34;204&#34;,&#34;source&#34;:&#34;proc.go&#34;},{&#34;func&#34;:&#34;goexit&#34;,&#34;line&#34;:&#34;1374&#34;,&#34;source&#34;:&#34;asm_amd64.s&#34;}],&#34;error&#34;:&#34;seems we have an error here&#34;,&#34;time&#34;:1609086683}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;zerolog.ErrorStackMarshaler must be set in order for the stack to output anything.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Logging Fatal Messages&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;errors&#34;&#xA;&#xA;    &#34;github.com/rs/zerolog&#34;&#xA;    &#34;github.com/rs/zerolog/log&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    err := errors.New(&#34;A repo man spends his life getting into tense situations&#34;)&#xA;    service := &#34;myservice&#34;&#xA;&#xA;    zerolog.TimeFieldFormat = zerolog.TimeFormatUnix&#xA;&#xA;    log.Fatal().&#xA;        Err(err).&#xA;        Str(&#34;service&#34;, service).&#xA;        Msgf(&#34;Cannot start %s&#34;, service)&#xA;}&#xA;&#xA;// Output: {&#34;time&#34;:1516133263,&#34;level&#34;:&#34;fatal&#34;,&#34;error&#34;:&#34;A repo man spends his life getting into tense situations&#34;,&#34;service&#34;:&#34;myservice&#34;,&#34;message&#34;:&#34;Cannot start myservice&#34;}&#xA;//         exit status 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Using &lt;code&gt;Msgf&lt;/code&gt; generates one allocation even when the logger is disabled.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Create logger instance to manage different outputs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;logger := zerolog.New(os.Stderr).With().Timestamp().Logger()&#xA;&#xA;logger.Info().Str(&#34;foo&#34;, &#34;bar&#34;).Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:1494567715,&#34;message&#34;:&#34;hello world&#34;,&#34;foo&#34;:&#34;bar&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sub-loggers let you chain loggers with additional context&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sublogger := log.With().&#xA;                 Str(&#34;component&#34;, &#34;foo&#34;).&#xA;                 Logger()&#xA;sublogger.Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:1494567715,&#34;message&#34;:&#34;hello world&#34;,&#34;component&#34;:&#34;foo&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pretty logging&lt;/h3&gt; &#xA;&lt;p&gt;To log a human-friendly, colorized output, use &lt;code&gt;zerolog.ConsoleWriter&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Logger = log.Output(zerolog.ConsoleWriter{Out: os.Stderr})&#xA;&#xA;log.Info().Str(&#34;foo&#34;, &#34;bar&#34;).Msg(&#34;Hello world&#34;)&#xA;&#xA;// Output: 3:04PM INF Hello World foo=bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To customize the configuration and formatting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;output := zerolog.ConsoleWriter{Out: os.Stdout, TimeFormat: time.RFC3339}&#xA;output.FormatLevel = func(i interface{}) string {&#xA;    return strings.ToUpper(fmt.Sprintf(&#34;| %-6s|&#34;, i))&#xA;}&#xA;output.FormatMessage = func(i interface{}) string {&#xA;    return fmt.Sprintf(&#34;***%s****&#34;, i)&#xA;}&#xA;output.FormatFieldName = func(i interface{}) string {&#xA;    return fmt.Sprintf(&#34;%s:&#34;, i)&#xA;}&#xA;output.FormatFieldValue = func(i interface{}) string {&#xA;    return strings.ToUpper(fmt.Sprintf(&#34;%s&#34;, i))&#xA;}&#xA;&#xA;log := zerolog.New(output).With().Timestamp().Logger()&#xA;&#xA;log.Info().Str(&#34;foo&#34;, &#34;bar&#34;).Msg(&#34;Hello World&#34;)&#xA;&#xA;// Output: 2006-01-02T15:04:05Z07:00 | INFO  | ***Hello World**** foo:BAR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sub dictionary&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Info().&#xA;    Str(&#34;foo&#34;, &#34;bar&#34;).&#xA;    Dict(&#34;dict&#34;, zerolog.Dict().&#xA;        Str(&#34;bar&#34;, &#34;baz&#34;).&#xA;        Int(&#34;n&#34;, 1),&#xA;    ).Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:1494567715,&#34;foo&#34;:&#34;bar&#34;,&#34;dict&#34;:{&#34;bar&#34;:&#34;baz&#34;,&#34;n&#34;:1},&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customize automatic field names&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;zerolog.TimestampFieldName = &#34;t&#34;&#xA;zerolog.LevelFieldName = &#34;l&#34;&#xA;zerolog.MessageFieldName = &#34;m&#34;&#xA;&#xA;log.Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;l&#34;:&#34;info&#34;,&#34;t&#34;:1494567715,&#34;m&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add contextual fields to the global logger&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Logger = log.With().Str(&#34;foo&#34;, &#34;bar&#34;).Logger()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add file and line number to log&lt;/h3&gt; &#xA;&lt;p&gt;Equivalent of &lt;code&gt;Llongfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log.Logger = log.With().Caller().Logger()&#xA;log.Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;: &#34;info&#34;, &#34;message&#34;: &#34;hello world&#34;, &#34;caller&#34;: &#34;/go/src/your_project/some_file:21&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Equivalent of &lt;code&gt;Lshortfile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;zerolog.CallerMarshalFunc = func(file string, line int) string {&#xA;    short := file&#xA;    for i := len(file) - 1; i &amp;gt; 0; i-- {&#xA;        if file[i] == &#39;/&#39; {&#xA;            short = file[i+1:]&#xA;            break&#xA;        }&#xA;    }&#xA;    file = short&#xA;    return file + &#34;:&#34; + strconv.Itoa(line)&#xA;}&#xA;log.Logger = log.With().Caller().Logger()&#xA;log.Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;level&#34;: &#34;info&#34;, &#34;message&#34;: &#34;hello world&#34;, &#34;caller&#34;: &#34;some_file:21&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Thread-safe, lock-free, non-blocking writer&lt;/h3&gt; &#xA;&lt;p&gt;If your writer might be slow or not thread-safe and you need your log producers to never get slowed down by a slow writer, you can use a &lt;code&gt;diode.Writer&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;wr := diode.NewWriter(os.Stdout, 1000, 10*time.Millisecond, func(missed int) {&#xA;&#x9;&#x9;fmt.Printf(&#34;Logger Dropped %d messages&#34;, missed)&#xA;&#x9;})&#xA;log := zerolog.New(wr)&#xA;log.Print(&#34;test&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need to install &lt;code&gt;code.cloudfoundry.org/go-diodes&lt;/code&gt; to use this feature.&lt;/p&gt; &#xA;&lt;h3&gt;Log Sampling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sampled := log.Sample(&amp;amp;zerolog.BasicSampler{N: 10})&#xA;sampled.Info().Msg(&#34;will be logged every 10 messages&#34;)&#xA;&#xA;// Output: {&#34;time&#34;:1494567715,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;will be logged every 10 messages&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More advanced sampling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Will let 5 debug messages per period of 1 second.&#xA;// Over 5 debug message, 1 every 100 debug messages are logged.&#xA;// Other levels are not sampled.&#xA;sampled := log.Sample(zerolog.LevelSampler{&#xA;    DebugSampler: &amp;amp;zerolog.BurstSampler{&#xA;        Burst: 5,&#xA;        Period: 1*time.Second,&#xA;        NextSampler: &amp;amp;zerolog.BasicSampler{N: 100},&#xA;    },&#xA;})&#xA;sampled.Debug().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;time&#34;:1494567715,&#34;level&#34;:&#34;debug&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hooks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type SeverityHook struct{}&#xA;&#xA;func (h SeverityHook) Run(e *zerolog.Event, level zerolog.Level, msg string) {&#xA;    if level != zerolog.NoLevel {&#xA;        e.Str(&#34;severity&#34;, level.String())&#xA;    }&#xA;}&#xA;&#xA;hooked := log.Hook(SeverityHook{})&#xA;hooked.Warn().Msg(&#34;&#34;)&#xA;&#xA;// Output: {&#34;level&#34;:&#34;warn&#34;,&#34;severity&#34;:&#34;warn&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pass a sub-logger by context&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ctx := log.With().Str(&#34;component&#34;, &#34;module&#34;).Logger().WithContext(ctx)&#xA;&#xA;log.Ctx(ctx).Info().Msg(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;component&#34;:&#34;module&#34;,&#34;level&#34;:&#34;info&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set as standard logger output&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log := zerolog.New(os.Stdout).With().&#xA;    Str(&#34;foo&#34;, &#34;bar&#34;).&#xA;    Logger()&#xA;&#xA;stdlog.SetFlags(0)&#xA;stdlog.SetOutput(log)&#xA;&#xA;stdlog.Print(&#34;hello world&#34;)&#xA;&#xA;// Output: {&#34;foo&#34;:&#34;bar&#34;,&#34;message&#34;:&#34;hello world&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integration with &lt;code&gt;net/http&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;github.com/rs/zerolog/hlog&lt;/code&gt; package provides some helpers to integrate zerolog with &lt;code&gt;http.Handler&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this example we use &lt;a href=&#34;https://github.com/justinas/alice&#34;&gt;alice&lt;/a&gt; to install logger for better readability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;log := zerolog.New(os.Stdout).With().&#xA;    Timestamp().&#xA;    Str(&#34;role&#34;, &#34;my-service&#34;).&#xA;    Str(&#34;host&#34;, host).&#xA;    Logger()&#xA;&#xA;c := alice.New()&#xA;&#xA;// Install the logger handler with default output on the console&#xA;c = c.Append(hlog.NewHandler(log))&#xA;&#xA;// Install some provided extra handler to set some request&#39;s context fields.&#xA;// Thanks to that handler, all our logs will come with some prepopulated fields.&#xA;c = c.Append(hlog.AccessHandler(func(r *http.Request, status, size int, duration time.Duration) {&#xA;    hlog.FromRequest(r).Info().&#xA;        Str(&#34;method&#34;, r.Method).&#xA;        Stringer(&#34;url&#34;, r.URL).&#xA;        Int(&#34;status&#34;, status).&#xA;        Int(&#34;size&#34;, size).&#xA;        Dur(&#34;duration&#34;, duration).&#xA;        Msg(&#34;&#34;)&#xA;}))&#xA;c = c.Append(hlog.RemoteAddrHandler(&#34;ip&#34;))&#xA;c = c.Append(hlog.UserAgentHandler(&#34;user_agent&#34;))&#xA;c = c.Append(hlog.RefererHandler(&#34;referer&#34;))&#xA;c = c.Append(hlog.RequestIDHandler(&#34;req_id&#34;, &#34;Request-Id&#34;))&#xA;&#xA;// Here is your final handler&#xA;h := c.Then(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;    // Get the logger from the request&#39;s context. You can safely assume it&#xA;    // will be always there: if the handler is removed, hlog.FromRequest&#xA;    // will return a no-op logger.&#xA;    hlog.FromRequest(r).Info().&#xA;        Str(&#34;user&#34;, &#34;current user&#34;).&#xA;        Str(&#34;status&#34;, &#34;ok&#34;).&#xA;        Msg(&#34;Something happened&#34;)&#xA;&#xA;    // Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:&#34;2001-02-03T04:05:06Z&#34;,&#34;role&#34;:&#34;my-service&#34;,&#34;host&#34;:&#34;local-hostname&#34;,&#34;req_id&#34;:&#34;b4g0l5t6tfid6dtrapu0&#34;,&#34;user&#34;:&#34;current user&#34;,&#34;status&#34;:&#34;ok&#34;,&#34;message&#34;:&#34;Something happened&#34;}&#xA;}))&#xA;http.Handle(&#34;/&#34;, h)&#xA;&#xA;if err := http.ListenAndServe(&#34;:8080&#34;, nil); err != nil {&#xA;    log.Fatal().Err(err).Msg(&#34;Startup failed&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multiple Log Output&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;zerolog.MultiLevelWriter&lt;/code&gt; may be used to send the log message to multiple outputs. In this example, we send the log message to both &lt;code&gt;os.Stdout&lt;/code&gt; and the in-built ConsoleWriter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;consoleWriter := zerolog.ConsoleWriter{Out: os.Stdout}&#xA;&#xA;&#x9;multi := zerolog.MultiLevelWriter(consoleWriter, os.Stdout)&#xA;&#xA;&#x9;logger := zerolog.New(multi).With().Timestamp().Logger()&#xA;&#xA;&#x9;logger.Info().Msg(&#34;Hello World!&#34;)&#xA;}&#xA;&#xA;// Output (Line 1: Console; Line 2: Stdout)&#xA;// 12:36PM INF Hello World!&#xA;// {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:&#34;2019-11-07T12:36:38+03:00&#34;,&#34;message&#34;:&#34;Hello World!&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Global Settings&lt;/h2&gt; &#xA;&lt;p&gt;Some settings can be changed and will be applied to all loggers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;log.Logger&lt;/code&gt;: You can set this value to customize the global logger (the one used by package level methods).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.SetGlobalLevel&lt;/code&gt;: Can raise the minimum level of all loggers. Call this with &lt;code&gt;zerolog.Disabled&lt;/code&gt; to disable logging altogether (quiet mode).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.DisableSampling&lt;/code&gt;: If argument is &lt;code&gt;true&lt;/code&gt;, all sampled loggers will stop sampling and issue 100% of their log events.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.TimestampFieldName&lt;/code&gt;: Can be set to customize &lt;code&gt;Timestamp&lt;/code&gt; field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.LevelFieldName&lt;/code&gt;: Can be set to customize level field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.MessageFieldName&lt;/code&gt;: Can be set to customize message field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.ErrorFieldName&lt;/code&gt;: Can be set to customize &lt;code&gt;Err&lt;/code&gt; field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.TimeFieldFormat&lt;/code&gt;: Can be set to customize &lt;code&gt;Time&lt;/code&gt; field value formatting. If set with &lt;code&gt;zerolog.TimeFormatUnix&lt;/code&gt;, &lt;code&gt;zerolog.TimeFormatUnixMs&lt;/code&gt; or &lt;code&gt;zerolog.TimeFormatUnixMicro&lt;/code&gt;, times are formated as UNIX timestamp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.DurationFieldUnit&lt;/code&gt;: Can be set to customize the unit for time.Duration type fields added by &lt;code&gt;Dur&lt;/code&gt; (default: &lt;code&gt;time.Millisecond&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.DurationFieldInteger&lt;/code&gt;: If set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;Dur&lt;/code&gt; fields are formatted as integers instead of floats (default: &lt;code&gt;false&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;zerolog.ErrorHandler&lt;/code&gt;: Called whenever zerolog fails to write an event on its output. If not set, an error is printed on the stderr. This handler must be thread safe and non-blocking.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Field Types&lt;/h2&gt; &#xA;&lt;h3&gt;Standard Types&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Int8&lt;/code&gt;, &lt;code&gt;Int16&lt;/code&gt;, &lt;code&gt;Int32&lt;/code&gt;, &lt;code&gt;Int64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Uint&lt;/code&gt;, &lt;code&gt;Uint8&lt;/code&gt;, &lt;code&gt;Uint16&lt;/code&gt;, &lt;code&gt;Uint32&lt;/code&gt;, &lt;code&gt;Uint64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Float32&lt;/code&gt;, &lt;code&gt;Float64&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced Fields&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Err&lt;/code&gt;: Takes an &lt;code&gt;error&lt;/code&gt; and renders it as a string using the &lt;code&gt;zerolog.ErrorFieldName&lt;/code&gt; field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Func&lt;/code&gt;: Run a &lt;code&gt;func&lt;/code&gt; only if the level is enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Timestamp&lt;/code&gt;: Inserts a timestamp field with &lt;code&gt;zerolog.TimestampFieldName&lt;/code&gt; field name, formatted using &lt;code&gt;zerolog.TimeFieldFormat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Time&lt;/code&gt;: Adds a field with time formatted with &lt;code&gt;zerolog.TimeFieldFormat&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dur&lt;/code&gt;: Adds a field with &lt;code&gt;time.Duration&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dict&lt;/code&gt;: Adds a sub-key/value as a field of the event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RawJSON&lt;/code&gt;: Adds a field with an already encoded JSON (&lt;code&gt;[]byte&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Hex&lt;/code&gt;: Adds a field with value formatted as a hexadecimal string (&lt;code&gt;[]byte&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Interface&lt;/code&gt;: Uses reflection to marshal the type.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most fields are also available in the slice format (&lt;code&gt;Strs&lt;/code&gt; for &lt;code&gt;[]string&lt;/code&gt;, &lt;code&gt;Errs&lt;/code&gt; for &lt;code&gt;[]error&lt;/code&gt; etc.)&lt;/p&gt; &#xA;&lt;h2&gt;Binary Encoding&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the default JSON encoding, &lt;code&gt;zerolog&lt;/code&gt; can produce binary logs using &lt;a href=&#34;https://cbor.io&#34;&gt;CBOR&lt;/a&gt; encoding. The choice of encoding can be decided at compile time using the build tag &lt;code&gt;binary_log&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -tags binary_log .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To Decode binary encoded log files you can use any CBOR decoder. One has been tested to work with zerolog library is &lt;a href=&#34;https://github.com/toravir/csd/&#34;&gt;CSD&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cheapRoc/grpc-zerolog&#34;&gt;grpc-zerolog&lt;/a&gt;: Implementation of &lt;code&gt;grpclog.LoggerV2&lt;/code&gt; interface using &lt;code&gt;zerolog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Trendyol/overlog&#34;&gt;overlog&lt;/a&gt;: Implementation of &lt;code&gt;Mapped Diagnostic Context&lt;/code&gt; interface using &lt;code&gt;zerolog&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-logr/zerologr&#34;&gt;zerologr&lt;/a&gt;: Implementation of &lt;code&gt;logr.LogSink&lt;/code&gt; interface using &lt;code&gt;zerolog&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;http://hackemist.com/logbench/&#34;&gt;logbench&lt;/a&gt; for more comprehensive and up-to-date benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;All operations are allocation free (those numbers &lt;em&gt;include&lt;/em&gt; JSON encoding):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;BenchmarkLogEmpty-8        100000000    19.1 ns/op     0 B/op       0 allocs/op&#xA;BenchmarkDisabled-8        500000000    4.07 ns/op     0 B/op       0 allocs/op&#xA;BenchmarkInfo-8            30000000     42.5 ns/op     0 B/op       0 allocs/op&#xA;BenchmarkContextFields-8   30000000     44.9 ns/op     0 B/op       0 allocs/op&#xA;BenchmarkLogFields-8       10000000     184 ns/op      0 B/op       0 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a few Go logging benchmarks and comparisons that include zerolog.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imkira/go-loggers-bench&#34;&gt;imkira/go-loggers-bench&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber-go/zap#performance&#34;&gt;uber-common/zap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using Uber&#39;s zap comparison benchmark:&lt;/p&gt; &#xA;&lt;p&gt;Log a message and 10 fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Time&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bytes Allocated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Objects Allocated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zerolog&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;767 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;552 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;‚ö°&lt;/span&gt; zap&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;848 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;704 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;‚ö°&lt;/span&gt; zap (sugared)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1363 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1610 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go-kit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3614 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2895 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;66 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5392 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5807 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;logrus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5661 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6092 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;78 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;apex/log&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15332 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3832 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;65 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;log15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;20657 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5632 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;93 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Log a message with a logger that already has 10 fields of context:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Time&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bytes Allocated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Objects Allocated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zerolog&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;‚ö°&lt;/span&gt; zap&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;283 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;‚ö°&lt;/span&gt; zap (sugared)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;337 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2702 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4074 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;38 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go-kit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3378 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3046 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;logrus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4309 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4564 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;63 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;apex/log&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13456 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2898 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;log15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14179 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2642 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Log a static string, without any context or &lt;code&gt;printf&lt;/code&gt;-style templating:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Library&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Time&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bytes Allocated&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Objects Allocated&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;zerolog&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;‚ö°&lt;/span&gt; zap&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;236 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard library&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;453 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;span&gt;‚ö°&lt;/span&gt; zap (sugared)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;337 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go-kit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;508 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;656 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lion&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;771 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1224 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;logrus&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1244 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1505 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;27 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;apex/log&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2751 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;584 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;log15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5181 ns/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1592 B/op&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;26 allocs/op&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Note that zerolog does no de-duplication of fields. Using the same key multiple times creates multiple keys in final JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;logger := zerolog.New(os.Stderr).With().Timestamp().Logger()&#xA;logger.Info().&#xA;       Timestamp().&#xA;       Msg(&#34;dup&#34;)&#xA;// Output: {&#34;level&#34;:&#34;info&#34;,&#34;time&#34;:1494567715,&#34;time&#34;:1494567715,&#34;message&#34;:&#34;dup&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, many consumers will take the last value, but this is not guaranteed; check yours if in doubt.&lt;/p&gt;</summary>
  </entry>
</feed>