<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-17T01:34:20Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>roadrunner-server/roadrunner</title>
    <updated>2022-10-17T01:34:20Z</updated>
    <id>tag:github.com,2022-10-17:/roadrunner-server/roadrunner</id>
    <link href="https://github.com/roadrunner-server/roadrunner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤯 High-performance PHP application server, process manager written in Go and powered with plugins&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/796136/50286124-6f7f3780-046f-11e9-9f45-e8fedd4f786d.png&#34; height=&#34;75px&#34; alt=&#34;RoadRunner&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://packagist.org/packages/spiral/roadrunner&#34;&gt;&lt;img src=&#34;https://poser.pugx.org/spiral/roadrunner/version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/roadrunner-server/roadrunner/v2?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/roadrunner-server/roadrunner/v2?status.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/spiralphp&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/spiralphp?style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/roadrunner-server/roadrunner/&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/roadrunner-server/roadrunner/branch/master/graph/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/roadrunner-server/roadrunner/actions&#34;&gt;&lt;img src=&#34;https://github.com/roadrunner-server/roadrunner/workflows/rr_cli_tests/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/roadrunner-server/rr-e2e-tests/&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/roadrunner-server/rr-e2e-tests/branch/master/graph/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/roadrunner-server/rr-e2e-tests/actions&#34;&gt;&lt;img src=&#34;https://github.com/roadrunner-server/rr-e2e-tests/workflows/linux_on_push/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/roadrunner-server/rr-e2e-tests/actions&#34;&gt;&lt;img src=&#34;https://github.com/roadrunner-server/rr-e2e-tests/workflows/Linters/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/roadrunner-server/roadrunner&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/roadrunner-server/roadrunner&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lgtm.com/projects/g/roadrunner-server/roadrunner/alerts/&#34;&gt;&lt;img alt=&#34;Total alerts&#34; src=&#34;https://img.shields.io/lgtm/alerts/g/roadrunner-server/roadrunner.svg?logo=lgtm&amp;amp;logoWidth=18&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/TFeEmCs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-chat-magenta.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/spiral/roadrunner&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/dd/spiral/roadrunner?style=flat-square&#34;&gt;&lt;/a&gt; &lt;img alt=&#34;All releases&#34; src=&#34;https://img.shields.io/github/downloads/roadrunner-server/roadrunner/total&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;RoadRunner is an open-source (MIT licensed) high-performance PHP application server, load balancer, and process manager. It supports running as a service with the ability to extend its functionality on a per-project basis.&lt;/p&gt; &#xA;&lt;p&gt;RoadRunner includes PSR-7/PSR-17 compatible HTTP and HTTP/2 server and can be used to replace classic Nginx+FPM setup with much greater performance and flexibility.&lt;/p&gt; &#xA;&lt;h1&gt;Join our discord server: &lt;a href=&#34;https://discord.gg/TFeEmCs&#34;&gt;Link&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://roadrunner.dev/&#34;&gt;&lt;b&gt;Official Website&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://roadrunner.dev/docs&#34;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/orgs/roadrunner-server/projects/1&#34;&gt;&lt;b&gt;Release schedule&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Production-ready&lt;/li&gt; &#xA; &lt;li&gt;PCI DSS compliant&lt;/li&gt; &#xA; &lt;li&gt;PSR-7 HTTP server (file uploads, error handling, static files, hot reload, middlewares, event listeners)&lt;/li&gt; &#xA; &lt;li&gt;HTTPS and HTTP/2 support (including HTTP/2 Push, H2C)&lt;/li&gt; &#xA; &lt;li&gt;A Fully customizable server, FastCGI support&lt;/li&gt; &#xA; &lt;li&gt;Flexible environment configuration&lt;/li&gt; &#xA; &lt;li&gt;No external PHP dependencies (64bit version required), drop-in (based on &lt;a href=&#34;https://github.com/roadrunner-server/goridge&#34;&gt;Goridge&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Process manager and task pipeline&lt;/li&gt; &#xA; &lt;li&gt;Integrated metrics (Prometheus)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/temporalio/sdk-php&#34;&gt;Workflow engine&lt;/a&gt; by &lt;a href=&#34;https://temporal.io&#34;&gt;Temporal.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Works over TCP, UNIX sockets and standard pipes&lt;/li&gt; &#xA; &lt;li&gt;Automatic worker replacement and safe PHP process destruction&lt;/li&gt; &#xA; &lt;li&gt;Worker create/allocate/destroy timeouts&lt;/li&gt; &#xA; &lt;li&gt;Max jobs per worker&lt;/li&gt; &#xA; &lt;li&gt;Worker lifecycle management (controller) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;maxMemory (graceful stop)&lt;/li&gt; &#xA;   &lt;li&gt;TTL (graceful stop)&lt;/li&gt; &#xA;   &lt;li&gt;idleTTL (graceful stop)&lt;/li&gt; &#xA;   &lt;li&gt;execTTL (brute, max_execution_time)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Payload context and body&lt;/li&gt; &#xA; &lt;li&gt;Protocol, worker and job level error management (including PHP errors)&lt;/li&gt; &#xA; &lt;li&gt;Development Mode&lt;/li&gt; &#xA; &lt;li&gt;Integrations with Symfony, &lt;a href=&#34;https://github.com/spiral/roadrunner-laravel&#34;&gt;Laravel&lt;/a&gt;, Slim, CakePHP, Zend Expressive&lt;/li&gt; &#xA; &lt;li&gt;Application server for &lt;a href=&#34;https://github.com/spiral/framework&#34;&gt;Spiral&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Included in Laravel Octane&lt;/li&gt; &#xA; &lt;li&gt;Automatic reloading on file changes&lt;/li&gt; &#xA; &lt;li&gt;Works on Windows (Unix sockets (AF_UNIX) supported on Windows 10)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation:&lt;/h2&gt; &#xA;&lt;p&gt;To get the roadrunner binary file you can use our docker image: &lt;code&gt;spiralscout/roadrunner:2.X.X&lt;/code&gt; (more information about image and tags can be found &lt;a href=&#34;https://hub.docker.com/r/spiralscout/roadrunner/&#34;&gt;here&lt;/a&gt;) or use the GitHub package: &lt;code&gt;ghcr.io/roadrunner-server/roadrunner:2.X.X&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM ghcr.io/roadrunner-server/roadrunner:2.X.X AS roadrunner&#xA;FROM php:8.1-cli&#xA;&#xA;COPY --from=roadrunner /usr/bin/rr /usr/local/bin/rr&#xA;&#xA;# USE THE RR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CLI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ composer require spiral/roadrunner:v2.0 nyholm/psr7&#xA;$ ./vendor/bin/rr get-binary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu (Debian-derivatives):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget https://github.com/roadrunner-server/roadrunner/releases/download/v2.X.X/roadrunner-2.X.X-linux-amd64.deb&#xA;$ sudo dpkg -i roadrunner-2.X.X-linux-amd64.deb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configuration can be located in &lt;code&gt;.rr.yaml&lt;/code&gt; file (&lt;a href=&#34;https://github.com/roadrunner-server/roadrunner/raw/master/.rr.yaml&#34;&gt;full sample&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# configuration version: https://roadrunner.dev/docs/beep-beep-config/2.x/en&#xA;version: &#39;2.7&#39;&#xA;&#xA;rpc:&#xA;  listen: tcp://127.0.0.1:6001&#xA;&#xA;server:&#xA;  command: &#34;php worker.php&#34;&#xA;&#xA;http:&#xA;  address: &#34;0.0.0.0:8080&#34;&#xA;&#xA;logs:&#xA;  level: error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Read more in &lt;a href=&#34;https://roadrunner.dev/docs&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Example Worker:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;&#xA;use Spiral\RoadRunner;&#xA;use Nyholm\Psr7;&#xA;&#xA;include &#34;vendor/autoload.php&#34;;&#xA;&#xA;$worker = RoadRunner\Worker::create();&#xA;$psrFactory = new Psr7\Factory\Psr17Factory();&#xA;&#xA;$worker = new RoadRunner\Http\PSR7Worker($worker, $psrFactory, $psrFactory, $psrFactory);&#xA;&#xA;while ($req = $worker-&amp;gt;waitRequest()) {&#xA;    try {&#xA;        $rsp = new Psr7\Response();&#xA;        $rsp-&amp;gt;getBody()-&amp;gt;write(&#39;Hello world!&#39;);&#xA;&#xA;        $worker-&amp;gt;respond($rsp);&#xA;    } catch (\Throwable $e) {&#xA;        $worker-&amp;gt;getWorker()-&amp;gt;error((string)$e);&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Plugins: &lt;a href=&#34;https://roadrunner.dev/docs&#34;&gt;link&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Run:&lt;/h2&gt; &#xA;&lt;p&gt;To run application server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./rr serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License:&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT). Please see &lt;a href=&#34;https://raw.githubusercontent.com/roadrunner-server/roadrunner/master/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt; for more information. Maintained by &lt;a href=&#34;https://spiralscout.com&#34;&gt;Spiral Scout&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/roadrunner-server/roadrunner/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=roadrunner-server/roadrunner&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>dunglas/frankenphp</title>
    <updated>2022-10-17T01:34:20Z</updated>
    <id>tag:github.com,2022-10-17:/dunglas/frankenphp</id>
    <link href="https://github.com/dunglas/frankenphp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The modern PHP app server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FrankenPHP: Modern App Server for PHP&lt;/h1&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://frankenphp.dev&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/frankenphp.png&#34; alt=&#34;FrankenPHP&#34; width=&#34;600&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;FrankenPHP is a modern application server for PHP built on top of the &lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt; web server.&lt;/p&gt; &#xA;&lt;p&gt;FrankenPHP gives superpowers to your PHP apps thanks to its stunning features: &lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/docs/early-hints.md&#34;&gt;&lt;em&gt;Early Hints&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/docs/worker.md&#34;&gt;worker mode&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/docs/mercure.md&#34;&gt;real-time capabilities&lt;/a&gt;, automatic HTTPS, HTTP/2 and HTTP/3 support...&lt;/p&gt; &#xA;&lt;p&gt;FrankenPHP works with any PHP app and makes your Symfony projects faster than ever thanks to provided integration with the worker mode (Laravel Octane support coming).&lt;/p&gt; &#xA;&lt;p&gt;FrankenPHP can also be used as a standalone Go library to embed PHP in any app using &lt;code&gt;net/http&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://frankenphp.dev&#34;&gt;&lt;strong&gt;Learn more&lt;/strong&gt; on &lt;em&gt;frankenphp.dev&lt;/em&gt;&lt;/a&gt; in this slide deck:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dunglas.dev/2022/10/frankenphp-the-modern-php-app-server-written-in-go/&#34;&gt;&lt;img src=&#34;https://dunglas.dev/wp-content/uploads/2022/10/frankenphp.png&#34; alt=&#34;Slides&#34; width=&#34;600&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;☢️ FrankenPHP is very experimental, don&#39;t use it in production yet, &lt;a href=&#34;https://github.com/dunglas/frankenphp/issues&#34;&gt;file bugs&lt;/a&gt; and write patches! ☢️&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v $PWD:/app/public \&#xA;    -p 80:80 -p 443:443 \&#xA;    dunglas/frankenphp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;https://localhost&lt;/code&gt;, and enjoy!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: do not attempt to use &lt;code&gt;https://127.0.0.1&lt;/code&gt;. Use &lt;code&gt;localhost&lt;/code&gt; and accept the self-signed certificate. Caddy has an automatic TLS handling that auto-trusts some local-based hostnames like &lt;code&gt;localhost&lt;/code&gt;, but it does not apply to IP addresses. More details &lt;a href=&#34;https://caddyserver.com/docs/automatic-https#hostname-requirements&#34;&gt;on Caddy&#39;s &#34;automatic https&#34; docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/docs/worker.md&#34;&gt;The worker mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/docs/early-hints.md&#34;&gt;Early Hints support (103 HTTP status code)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/docs/mercure.md&#34;&gt;Real-time&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/docs/config.md&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dunglas/frankenphp-demo&#34;&gt;Demo app (Symfony) and benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/docs/compile.md&#34;&gt;Compile from sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/dunglas/frankenphp&#34;&gt;Go library documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunglas/frankenphp/main/CONTRIBUTING.md&#34;&gt;Contributing and debugging&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Jeffail/tunny</title>
    <updated>2022-10-17T01:34:20Z</updated>
    <id>tag:github.com,2022-10-17:/Jeffail/tunny</id>
    <link href="https://github.com/Jeffail/tunny" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A goroutine pool for Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Jeffail/tunny/master/tunny_logo.png&#34; alt=&#34;Tunny&#34; title=&#34;Tunny&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://godoc.org/github.com/Jeffail/tunny&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/Jeffail/tunny?status.svg?sanitize=true&#34; alt=&#34;godoc for Jeffail/tunny&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/Jeffail/tunny&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/Jeffail/tunny&#34; alt=&#34;goreportcard for Jeffail/tunny&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tunny is a Golang library for spawning and managing a goroutine pool, allowing you to limit work coming from any number of goroutines with a synchronous API.&lt;/p&gt; &#xA;&lt;p&gt;A fixed goroutine pool is helpful when you have work coming from an arbitrary number of asynchronous sources, but a limited capacity for parallel processing. For example, when processing jobs from HTTP requests that are CPU heavy you can create a pool with a size that matches your CPU count.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/Jeffail/tunny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, using dep:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;dep ensure -add github.com/Jeffail/tunny&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;For most cases your heavy work can be expressed in a simple &lt;code&gt;func()&lt;/code&gt;, where you can use &lt;code&gt;NewFunc&lt;/code&gt;. Let&#39;s see how this looks using our HTTP requests to CPU count example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;io/ioutil&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;runtime&#34;&#xA;&#xA;&#x9;&#34;github.com/Jeffail/tunny&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;numCPUs := runtime.NumCPU()&#xA;&#xA;&#x9;pool := tunny.NewFunc(numCPUs, func(payload interface{}) interface{} {&#xA;&#x9;&#x9;var result []byte&#xA;&#xA;&#x9;&#x9;// TODO: Something CPU heavy with payload&#xA;&#xA;&#x9;&#x9;return result&#xA;&#x9;})&#xA;&#x9;defer pool.Close()&#xA;&#xA;&#x9;http.HandleFunc(&#34;/work&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;&#x9;input, err := ioutil.ReadAll(r.Body)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;http.Error(w, &#34;Internal error&#34;, http.StatusInternalServerError)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;defer r.Body.Close()&#xA;&#xA;&#x9;&#x9;// Funnel this work into our pool. This call is synchronous and will&#xA;&#x9;&#x9;// block until the job is completed.&#xA;&#x9;&#x9;result := pool.Process(input)&#xA;&#xA;&#x9;&#x9;w.Write(result.([]byte))&#xA;&#x9;})&#xA;&#xA;&#x9;http.ListenAndServe(&#34;:8080&#34;, nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tunny also supports timeouts. You can replace the &lt;code&gt;Process&lt;/code&gt; call above to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;result, err := pool.ProcessTimed(input, time.Second*5)&#xA;if err == tunny.ErrJobTimedOut {&#xA;&#x9;http.Error(w, &#34;Request timed out&#34;, http.StatusRequestTimeout)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the context from the request (or any other context) to handle timeouts and deadlines. Simply replace the &lt;code&gt;Process&lt;/code&gt; call to the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;result, err := pool.ProcessCtx(r.Context(), input)&#xA;if err == context.DeadlineExceeded {&#xA;&#x9;http.Error(w, &#34;Request timed out&#34;, http.StatusRequestTimeout)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changing Pool Size&lt;/h2&gt; &#xA;&lt;p&gt;The size of a Tunny pool can be changed at any time with &lt;code&gt;SetSize(int)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;pool.SetSize(10) // 10 goroutines&#xA;pool.SetSize(100) // 100 goroutines&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is safe to perform from any goroutine even if others are still processing.&lt;/p&gt; &#xA;&lt;h2&gt;Goroutines With State&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes each goroutine within a Tunny pool will require its own managed state. In this case you should implement &lt;a href=&#34;https://godoc.org/github.com/Jeffail/tunny#Worker&#34;&gt;&lt;code&gt;tunny.Worker&lt;/code&gt;&lt;/a&gt;, which includes calls for terminating, interrupting (in case a job times out and is no longer needed) and blocking the next job allocation until a condition is met.&lt;/p&gt; &#xA;&lt;p&gt;When creating a pool using &lt;code&gt;Worker&lt;/code&gt; types you will need to provide a constructor function for spawning your custom implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;pool := tunny.New(poolSize, func() Worker {&#xA;&#x9;// TODO: Any per-goroutine state allocation here.&#xA;&#x9;return newCustomWorker()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows Tunny to create and destroy &lt;code&gt;Worker&lt;/code&gt; types cleanly when the pool size is changed.&lt;/p&gt; &#xA;&lt;h2&gt;Ordering&lt;/h2&gt; &#xA;&lt;p&gt;Backlogged jobs are not guaranteed to be processed in order. Due to the current implementation of channels and select blocks a stack of backlogged jobs will be processed as a FIFO queue. However, this behaviour is not part of the spec and should not be relied upon.&lt;/p&gt;</summary>
  </entry>
</feed>