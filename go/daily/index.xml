<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-08T01:28:24Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opentffoundation/opentf</title>
    <updated>2023-09-08T01:28:24Z</updated>
    <id>tag:github.com,2023-09-08:/opentffoundation/opentf</id>
    <link href="https://github.com/opentffoundation/opentf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenTF lets you declaratively manage your cloud infrastructure.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenTF&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manifesto: &lt;a href=&#34;https://opentf.org&#34;&gt;https://opentf.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;About the OpenTF fork: &lt;a href=&#34;https://opentf.org/fork&#34;&gt;https://opentf.org/fork&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/opentfcommunity/shared_invite/zt-22ifsm1t2-AF6cL0cOdzivP8E~4deDJA&#34;&gt;Join our Slack community!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img alt=&#34;OpenTF&#34; src=&#34;https://raw.githubusercontent.com/opentffoundation/brand-artifacts/main/full/transparent/SVG/on-light.svg?sanitize=true&#34; width=&#34;600px&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important Note: This repository is currently a work in progress while we&#39;re preparing it for the first alpha release and fine-tuning the community contribution process. Please read the &lt;a href=&#34;https://opentf.org/fork&#34;&gt;announcement post&lt;/a&gt; for important context and the &lt;a href=&#34;https://raw.githubusercontent.com/opentffoundation/opentf/main/CONTRIBUTING.md&#34;&gt;contributing docs&lt;/a&gt; for instructions on how to contribute. Additionally, please be mindful that building this repository in its current state and running it might put you in violation of the &lt;a href=&#34;https://web.archive.org/web/https://registry.terraform.io/terms&#34;&gt;Terraform Registry ToS&lt;/a&gt;, if that&#39;s where you fetch your providers or modules from.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenTF is an OSS tool for building, changing, and versioning infrastructure safely and efficiently. OpenTF can manage existing and popular service providers as well as custom in-house solutions.&lt;/p&gt; &#xA;&lt;p&gt;The key features of OpenTF are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt;: Infrastructure is described using a high-level configuration syntax. This allows a blueprint of your datacenter to be versioned and treated as you would any other code. Additionally, infrastructure can be shared and re-used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Execution Plans&lt;/strong&gt;: OpenTF has a &#34;planning&#34; step where it generates an execution plan. The execution plan shows what OpenTF will do when you call apply. This lets you avoid any surprises when OpenTF manipulates infrastructure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resource Graph&lt;/strong&gt;: OpenTF builds a graph of all your resources, and parallelizes the creation and modification of any non-dependent resources. Because of this, OpenTF builds infrastructure as efficiently as possible, and operators get insight into dependencies in their infrastructure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Change Automation&lt;/strong&gt;: Complex changesets can be applied to your infrastructure with minimal human interaction. With the previously mentioned execution plan and resource graph, you know exactly what OpenTF will change and in what order, avoiding many possible human errors.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing OpenTF&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains OpenTF Core, which includes the command line interface and the main graph engine.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To learn more about compiling OpenTF and contributing suggested changes, refer to &lt;a href=&#34;https://raw.githubusercontent.com/opentffoundation/opentf/main/CONTRIBUTING.md&#34;&gt;the contributing guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To submit bug reports or enhancement requests, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/opentffoundation/opentf/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; as well.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/opentffoundation/opentf/raw/main/LICENSE&#34;&gt;Mozilla Public License v2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gonum/gonum</title>
    <updated>2023-09-08T01:28:24Z</updated>
    <id>tag:github.com,2023-09-08:/gonum/gonum</id>
    <link href="https://github.com/gonum/gonum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gonum is a set of numeric libraries for the Go programming language. It contains libraries for matrices, statistics, optimization, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gonum&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gonum/gonum/actions&#34;&gt;&lt;img src=&#34;https://github.com/gonum/gonum/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/Gonum/gonum/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/valslkp8sr50eepn/branch/master?svg=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/gonum/gonum&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/gonum/gonum/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/gonum.org/v1/gonum&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/gonum.org/v1/gonum&#34; alt=&#34;go.dev reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godocs.io/gonum.org/v1/gonum&#34;&gt;&lt;img src=&#34;https://godocs.io/gonum.org/v1/gonum?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gonum/gonum&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gonum/gonum&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emersion/stability-badges#unstable&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stability-unstable-yellow.svg?sanitize=true&#34; alt=&#34;stability-unstable&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The core packages of the Gonum suite are written in pure Go with some assembly. Installation is done using &lt;code&gt;go get&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get -u gonum.org/v1/gonum/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Go versions&lt;/h2&gt; &#xA;&lt;p&gt;Gonum supports and tests using the gc compiler on the &lt;a href=&#34;https://github.com/gonum/gonum/raw/master/.github/workflows/ci.yml#L14-L15&#34;&gt;two most recent Go releases&lt;/a&gt; on Linux (386, amd64 and arm64), macOS and Windows (both on amd64).&lt;/p&gt; &#xA;&lt;p&gt;Note that floating point behavior may differ between compiler versions and between architectures due to differences in floating point operation implementations.&lt;/p&gt; &#xA;&lt;h2&gt;Release schedule&lt;/h2&gt; &#xA;&lt;p&gt;The Gonum modules are released on a six-month release schedule, aligned with the Go releases. &lt;em&gt;i.e.:&lt;/em&gt; when &lt;code&gt;Go-1.x&lt;/code&gt; is released, &lt;code&gt;Gonum-v0.n.0&lt;/code&gt; is released around the same time. Six months after, &lt;code&gt;Go-1.x+1&lt;/code&gt; is released, and &lt;code&gt;Gonum-v0.n+1.0&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;p&gt;The release schedule, based on the current Go release schedule is thus:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Gonum-v0.n.0&lt;/code&gt;: February&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Gonum-v0.n+1.0&lt;/code&gt;: August&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build tags&lt;/h2&gt; &#xA;&lt;p&gt;The Gonum packages use a variety of build tags to set non-standard build conditions. Building Gonum applications will work without knowing how to use these tags, but they can be used during testing and to control the use of assembly and CGO code.&lt;/p&gt; &#xA;&lt;p&gt;The current list of non-internal tags is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;safe — do not use assembly or unsafe&lt;/li&gt; &#xA; &lt;li&gt;bounds — use bounds checks even in internal calls&lt;/li&gt; &#xA; &lt;li&gt;noasm — do not use assembly implementations&lt;/li&gt; &#xA; &lt;li&gt;tomita — use &lt;a href=&#34;https://doi.org/10.1016%2Fj.tcs.2006.06.015&#34;&gt;Tomita, Tanaka, Takahashi pivot choice&lt;/a&gt; for maximimal clique calculation, otherwise use random pivot (only in &lt;a href=&#34;https://pkg.go.dev/gonum.org/v1/gonum/graph/topo&#34;&gt;topo package&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues &lt;a href=&#34;https://www.tickgit.com/browse?repo=github.com/gonum/gonum&#34;&gt;&lt;img src=&#34;https://badgen.net/https/api.tickgit.com/badgen/github.com/gonum/gonum&#34; alt=&#34;TODOs&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you find any bugs, feel free to file an issue on the github issue tracker. Discussions on API changes, added features, code review, or similar requests are preferred on the gonum-dev Google Group.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/gonum-dev&#34;&gt;https://groups.google.com/forum/#!forum/gonum-dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Original code is licensed under the Gonum License found in the LICENSE file. Portions of the code are subject to the additional licenses found in THIRD_PARTY_LICENSES. All third party code is licensed either under a BSD or MIT license.&lt;/p&gt; &#xA;&lt;p&gt;Code in graph/formats/dot is dual licensed &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;Public Domain Dedication&lt;/a&gt; and Gonum License, and users are free to choose the license which suits their needs for this code.&lt;/p&gt; &#xA;&lt;p&gt;The W3C test suites in graph/formats/rdf are distributed under both the &lt;a href=&#34;http://www.w3.org/Consortium/Legal/2008/04-testsuite-license&#34;&gt;W3C Test Suite License&lt;/a&gt; and the &lt;a href=&#34;http://www.w3.org/Consortium/Legal/2008/03-bsd-license&#34;&gt;W3C 3-clause BSD License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>oklog/ulid</title>
    <updated>2023-09-08T01:28:24Z</updated>
    <id>tag:github.com,2023-09-08:/oklog/ulid</id>
    <link href="https://github.com/oklog/ulid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universally Unique Lexicographically Sortable Identifier (ULID) in Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Universally Unique Lexicographically Sortable Identifier&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/oklog/ulid/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/oklog/ulid.svg?style=flat-square&#34; alt=&#34;Project status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/oklog/ulid/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/oklog/ulid&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/oklog/ulid?cache=0&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/oklog/ulid?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/oklog/ulid/badge.svg?branch=master&amp;amp;cache=0&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/oklog/ulid/v2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;go.dev reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/oklog/ulid/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache2-blue.svg?sanitize=true&#34; alt=&#34;Apache 2 licensed&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Go port of &lt;a href=&#34;https://github.com/ulid/javascript&#34;&gt;ulid/javascript&lt;/a&gt; with binary format implemented.&lt;/p&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;A GUID/UUID can be suboptimal for many use-cases because:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It isn&#39;t the most character efficient way of encoding 128 bits&lt;/li&gt; &#xA; &lt;li&gt;UUID v1/v2 is impractical in many environments, as it requires access to a unique, stable MAC address&lt;/li&gt; &#xA; &lt;li&gt;UUID v3/v5 requires a unique seed and produces randomly distributed IDs, which can cause fragmentation in many data structures&lt;/li&gt; &#xA; &lt;li&gt;UUID v4 provides no other information than randomness which can cause fragmentation in many data structures&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A ULID however:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is compatible with UUID/GUID&#39;s&lt;/li&gt; &#xA; &lt;li&gt;1.21e+24 unique ULIDs per millisecond (1,208,925,819,614,629,174,706,176 to be exact)&lt;/li&gt; &#xA; &lt;li&gt;Lexicographically sortable&lt;/li&gt; &#xA; &lt;li&gt;Canonically encoded as a 26 character string, as opposed to the 36 character UUID&lt;/li&gt; &#xA; &lt;li&gt;Uses Crockford&#39;s base32 for better efficiency and readability (5 bits per character)&lt;/li&gt; &#xA; &lt;li&gt;Case insensitive&lt;/li&gt; &#xA; &lt;li&gt;No special characters (URL safe)&lt;/li&gt; &#xA; &lt;li&gt;Monotonic sort order (correctly detects and handles the same millisecond)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;This package requires Go modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/oklog/ulid/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;ULIDs are constructed from two things: a timestamp with millisecond precision, and some random data.&lt;/p&gt; &#xA;&lt;p&gt;Timestamps are modeled as uint64 values representing a Unix time in milliseconds. They can be produced by passing a &lt;a href=&#34;https://pkg.go.dev/time#Time&#34;&gt;time.Time&lt;/a&gt; to &lt;a href=&#34;https://pkg.go.dev/github.com/oklog/ulid/v2#Timestamp&#34;&gt;ulid.Timestamp&lt;/a&gt;, or by calling &lt;a href=&#34;https://pkg.go.dev/time#Time.UnixMilli&#34;&gt;time.Time.UnixMilli&lt;/a&gt; and converting the returned value to &lt;code&gt;uint64&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Random data is taken from a provided &lt;a href=&#34;https://pkg.go.dev/io#Reader&#34;&gt;io.Reader&lt;/a&gt;. This design allows for greater flexibility when choosing trade-offs, but can be a bit confusing to newcomers.&lt;/p&gt; &#xA;&lt;p&gt;If you just want to generate a ULID and don&#39;t (yet) care about details like performance, cryptographic security, etc., use the &lt;a href=&#34;https://pkg.go.dev/github.com/oklog/ulid/v2#Make&#34;&gt;ulid.Make&lt;/a&gt; helper function. This function calls &lt;a href=&#34;https://pkg.go.dev/time#Now&#34;&gt;time.Now&lt;/a&gt; to get a timestamp, and uses a source of entropy which is process-global, &lt;a href=&#34;https://pkg.go.dev/math/rand&#34;&gt;pseudo-random&lt;/a&gt;, and &lt;a href=&#34;https://pkg.go.dev/github.com/oklog/ulid/v2#LockedMonotonicReader&#34;&gt;monotonic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fmt.Println(ulid.Make())&#xA;// 01G65Z755AFWAKHE12NY0CQ9FH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More advanced use cases should utilize &lt;a href=&#34;https://pkg.go.dev/github.com/oklog/ulid/v2#New&#34;&gt;ulid.New&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;entropy := rand.New(rand.NewSource(time.Now().UnixNano()))&#xA;ms := ulid.Timestamp(time.Now())&#xA;fmt.Println(ulid.New(ms, entropy))&#xA;// 01G65Z755AFWAKHE12NY0CQ9FH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Care should be taken when providing a source of entropy.&lt;/p&gt; &#xA;&lt;p&gt;The above example utilizes &lt;a href=&#34;https://pkg.go.dev/math/rand#Rand&#34;&gt;math/rand.Rand&lt;/a&gt;, which is not safe for concurrent use by multiple goroutines. Consider alternatives such as &lt;a href=&#34;https://pkg.go.dev/golang.org/x/exp/rand#LockedSource&#34;&gt;x/exp/rand&lt;/a&gt;. Security-sensitive use cases should always use cryptographically secure entropy provided by &lt;a href=&#34;https://pkg.go.dev/crypto/rand&#34;&gt;crypto/rand&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Performance-sensitive use cases should avoid synchronization when generating IDs. One option is to use a unique source of entropy for each concurrent goroutine, which results in no lock contention, but cannot provide strong guarantees about the random data, and does not provide monotonicity within a given millisecond. One common performance optimization is to pool sources of entropy using a &lt;a href=&#34;https://pkg.go.dev/sync#Pool&#34;&gt;sync.Pool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Monotonicity is a property that says each ULID is &#34;bigger than&#34; the previous one. ULIDs are automatically monotonic, but only to millisecond precision. ULIDs generated within the same millisecond are ordered by their random component, which means they are by default un-ordered. You can use &lt;a href=&#34;https://pkg.go.dev/github.com/oklog/ulid/v2#MonotonicEntropy&#34;&gt;ulid.MonotonicEntropy&lt;/a&gt; or &lt;a href=&#34;https://pkg.go.dev/github.com/oklog/ulid/v2#LockedMonotonicEntropy&#34;&gt;ulid.LockedMonotonicEntropy&lt;/a&gt; to create ULIDs that are monotonic within a given millisecond, with caveats. See the documentation for details.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t care about time-based ordering of generated IDs, then there&#39;s no reason to use ULIDs! There are many other kinds of IDs that are easier, faster, smaller, etc. Consider UUIDs.&lt;/p&gt; &#xA;&lt;h2&gt;Commandline tool&lt;/h2&gt; &#xA;&lt;p&gt;This repo also provides a tool to generate and parse ULIDs at the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/oklog/ulid/v2/cmd/ulid@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;Usage: ulid [-hlqz] [-f &amp;lt;format&amp;gt;] [parameters ...]&#xA; -f, --format=&amp;lt;format&amp;gt;  when parsing, show times in this format: default, rfc3339, unix, ms&#xA; -h, --help             print this help text&#xA; -l, --local            when parsing, show local time instead of UTC&#xA; -q, --quick            when generating, use non-crypto-grade entropy&#xA; -z, --zero             when generating, fix entropy to all-zeroes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ulid&#xA;01D78XYFJ1PRM1WPBCBT3VHMNV&#xA;$ ulid -z&#xA;01D78XZ44G0000000000000000&#xA;$ ulid 01D78XZ44G0000000000000000&#xA;Sun Mar 31 03:51:23.536 UTC 2019&#xA;$ ulid --format=rfc3339 --local 01D78XZ44G0000000000000000&#xA;2019-03-31T05:51:23.536+02:00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specification&lt;/h2&gt; &#xA;&lt;p&gt;Below is the current specification of ULID as implemented in this repository.&lt;/p&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Timestamp&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;48 bits&lt;/li&gt; &#xA; &lt;li&gt;UNIX-time in milliseconds&lt;/li&gt; &#xA; &lt;li&gt;Won&#39;t run out of space till the year 10889 AD&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Entropy&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;80 bits&lt;/li&gt; &#xA; &lt;li&gt;User defined entropy source.&lt;/li&gt; &#xA; &lt;li&gt;Monotonicity within the same millisecond with &lt;a href=&#34;https://godoc.org/github.com/oklog/ulid#Monotonic&#34;&gt;&lt;code&gt;ulid.Monotonic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Encoding&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.crockford.com/wrmg/base32.html&#34;&gt;Crockford&#39;s Base32&lt;/a&gt; is used as shown. This alphabet excludes the letters I, L, O, and U to avoid confusion and abuse.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0123456789ABCDEFGHJKMNPQRSTVWXYZ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary Layout and Byte Order&lt;/h3&gt; &#xA;&lt;p&gt;The components are encoded as 16 octets. Each component is encoded with the Most Significant Byte first (network byte order).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0                   1                   2                   3&#xA; 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|                      32_bit_uint_time_high                    |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|     16_bit_uint_time_low      |       16_bit_uint_random      |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|                       32_bit_uint_random                      |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|                       32_bit_uint_random                      |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;String Representation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt; 01AN4Z07BY      79KA1307SR9X4MV3&#xA;|----------|    |----------------|&#xA; Timestamp           Entropy&#xA;  10 chars           16 chars&#xA;   48bits             80bits&#xA;   base32             base32&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;On a Intel Core i7 Ivy Bridge 2.7 GHz, MacOS 10.12.1 and Go 1.8.0beta1&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BenchmarkNew/WithCryptoEntropy-8      2000000        771 ns/op      20.73 MB/s   16 B/op   1 allocs/op&#xA;BenchmarkNew/WithEntropy-8            20000000      65.8 ns/op     243.01 MB/s   16 B/op   1 allocs/op&#xA;BenchmarkNew/WithoutEntropy-8         50000000      30.0 ns/op     534.06 MB/s   16 B/op   1 allocs/op&#xA;BenchmarkMustNew/WithCryptoEntropy-8  2000000        781 ns/op      20.48 MB/s   16 B/op   1 allocs/op&#xA;BenchmarkMustNew/WithEntropy-8        20000000      70.0 ns/op     228.51 MB/s   16 B/op   1 allocs/op&#xA;BenchmarkMustNew/WithoutEntropy-8     50000000      34.6 ns/op     462.98 MB/s   16 B/op   1 allocs/op&#xA;BenchmarkParse-8                      50000000      30.0 ns/op     866.16 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkMustParse-8                  50000000      35.2 ns/op     738.94 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkString-8                     20000000      64.9 ns/op     246.40 MB/s   32 B/op   1 allocs/op&#xA;BenchmarkMarshal/Text-8               20000000      55.8 ns/op     286.84 MB/s   32 B/op   1 allocs/op&#xA;BenchmarkMarshal/TextTo-8             100000000     22.4 ns/op     714.91 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkMarshal/Binary-8             300000000     4.02 ns/op    3981.77 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkMarshal/BinaryTo-8           2000000000    1.18 ns/op   13551.75 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkUnmarshal/Text-8             100000000     20.5 ns/op    1265.27 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkUnmarshal/Binary-8           300000000     4.94 ns/op    3240.01 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkNow-8                        100000000     15.1 ns/op     528.09 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkTimestamp-8                  2000000000    0.29 ns/op   27271.59 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkTime-8                       2000000000    0.58 ns/op   13717.80 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkSetTime-8                    2000000000    0.89 ns/op    9023.95 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkEntropy-8                    200000000     7.62 ns/op    1311.66 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkSetEntropy-8                 2000000000    0.88 ns/op   11376.54 MB/s    0 B/op   0 allocs/op&#xA;BenchmarkCompare-8                    200000000     7.34 ns/op    4359.23 MB/s    0 B/op   0 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prior Art&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ulid/javascript&#34;&gt;ulid/javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RobThree/NUlid&#34;&gt;RobThree/NUlid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/imdario/go-ulid&#34;&gt;imdario/go-ulid&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>