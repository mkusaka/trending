<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-06T01:32:09Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sourcegraph/conc</title>
    <updated>2023-01-06T01:32:09Z</updated>
    <id>tag:github.com,2023-01-06:/sourcegraph/conc</id>
    <link href="https://github.com/sourcegraph/conc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Better structured concurrency for go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12631702/210295964-785cc63d-d697-420c-99ff-f492eb81dec9.svg?sanitize=true&#34; alt=&#34;conch&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;conc&lt;/code&gt;: better structured concurrency for go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/sourcegraph/conc.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/sourcegraph/conc&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/sourcegraph/conc&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/sourcegraph/conc&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/sourcegraph/conc/branch/main/graph/badge.svg?token=MQZTEA1QWT&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/bvXQXmtRjN&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-chat-%235765F2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;conc&lt;/code&gt; is your toolbelt for structured concurrency in go, making common tasks easier and safer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/sourcegraph/conc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;At a glance&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc#WaitGroup&#34;&gt;&lt;code&gt;conc.WaitGroup&lt;/code&gt;&lt;/a&gt; if you just want a safer version of &lt;code&gt;sync.WaitGroup&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#Pool&#34;&gt;&lt;code&gt;pool.Pool&lt;/code&gt;&lt;/a&gt; if you want a concurrency-limited task runner&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#ResultPool&#34;&gt;&lt;code&gt;pool.ResultPool&lt;/code&gt;&lt;/a&gt; if you want a concurrent task runner that collects task results&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#ErrorPool&#34;&gt;&lt;code&gt;pool.(Result)?ErrorPool&lt;/code&gt;&lt;/a&gt; if your tasks are fallible&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#ContextPool&#34;&gt;&lt;code&gt;pool.(Result)?ContextPool&lt;/code&gt;&lt;/a&gt; if your tasks should be canceled on failure&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/stream#Stream&#34;&gt;&lt;code&gt;stream.Stream&lt;/code&gt;&lt;/a&gt; if you want to process an ordered stream of tasks in parallel with serial callbacks&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/iter#Map&#34;&gt;&lt;code&gt;iter.Map&lt;/code&gt;&lt;/a&gt; if you want to concurrently map a slice&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/iter#ForEach&#34;&gt;&lt;code&gt;iter.ForEach&lt;/code&gt;&lt;/a&gt; if you want to concurrently iterate over a slice&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc#PanicCatcher&#34;&gt;&lt;code&gt;conc.PanicCatcher&lt;/code&gt;&lt;/a&gt; if you want to catch panics in your own goroutines&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All pools are created with &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#New&#34;&gt;&lt;code&gt;pool.New()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#NewWithResults&#34;&gt;&lt;code&gt;pool.NewWithResults[T]()&lt;/code&gt;&lt;/a&gt;, then configured with methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#Pool.MaxGoroutines&#34;&gt;&lt;code&gt;p.WithMaxGoroutines()&lt;/code&gt;&lt;/a&gt; configures the maximum number of goroutines in the pool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#Pool.WithErrors&#34;&gt;&lt;code&gt;p.WithErrors()&lt;/code&gt;&lt;/a&gt; configures the pool to run tasks that return errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#Pool.WithContext&#34;&gt;&lt;code&gt;p.WithContext(ctx)&lt;/code&gt;&lt;/a&gt; configures the pool to run tasks that should be canceled on first error&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#ErrorPool.WithFirstError&#34;&gt;&lt;code&gt;p.WithFirstError()&lt;/code&gt;&lt;/a&gt; configures error pools to only keep the first returned error rather than an aggregated error&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/sourcegraph/conc@v0.1.0/pool#ResultContextPool.WithCollectErrored&#34;&gt;&lt;code&gt;p.WithCollectErrored()&lt;/code&gt;&lt;/a&gt; configures result pools to only collect results that did not error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Goals&lt;/h1&gt; &#xA;&lt;p&gt;The main goals of the package are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make it harder to leak goroutines&lt;/li&gt; &#xA; &lt;li&gt;Handle panics gracefully&lt;/li&gt; &#xA; &lt;li&gt;Make concurrent code easier to read&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Goal #1: Make it harder to leak goroutines&lt;/h2&gt; &#xA;&lt;p&gt;A common pain point when working with goroutines is cleaning them up. It&#39;s really easy to fire off a &lt;code&gt;go&lt;/code&gt; statement and fail to properly wait for it to complete.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;conc&lt;/code&gt; takes the opinionated stance that all concurrency should be scoped. That is, goroutines should have an owner and that owner should always ensure that its owned goroutines exit properly.&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;conc&lt;/code&gt;, the owner of a goroutine is always a &lt;code&gt;conc.WaitGroup&lt;/code&gt;. Goroutines are spawned in a &lt;code&gt;WaitGroup&lt;/code&gt; with &lt;code&gt;(*WaitGroup).Go()&lt;/code&gt;, and &lt;code&gt;(*WaitGroup).Wait()&lt;/code&gt; should always be called before the &lt;code&gt;WaitGroup&lt;/code&gt; goes out of scope.&lt;/p&gt; &#xA;&lt;p&gt;In some cases, you might want a spawned goroutine to outlast the scope of the caller. In that case, you could pass a &lt;code&gt;WaitGroup&lt;/code&gt; into the spawning function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    var wg conc.WaitGroup&#xA;    defer wg.Wait()&#xA;&#xA;    startTheThing(&amp;amp;wg)&#xA;}&#xA;&#xA;func startTheThing(wg *conc.WaitGroup) {&#xA;    wg.Go(func() { ... })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For some more discussion on why scoped concurrency is nice, check out &lt;a href=&#34;https://vorpus.org/blog/notes-on-structured-concurrency-or-go-statement-considered-harmful/&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Goal #2: Handle panics gracefully&lt;/h2&gt; &#xA;&lt;p&gt;A frequent problem with goroutines in long-running applications is handling panics. A goroutine spawned without a panic handler will crash the whole process on panic. This is usually undesirable.&lt;/p&gt; &#xA;&lt;p&gt;However, if you do add a panic handler to a goroutine, what do you do with the panic once you catch it? Some options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ignore it&lt;/li&gt; &#xA; &lt;li&gt;Log it&lt;/li&gt; &#xA; &lt;li&gt;Turn it into an error and return that to the goroutine spawner&lt;/li&gt; &#xA; &lt;li&gt;Propagate the panic to the goroutine spawner&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Ignoring panics is a bad idea since panics usually mean there is actually something wrong and someone should fix it.&lt;/p&gt; &#xA;&lt;p&gt;Just logging panics isn&#39;t great either because then there is no indication to the spawner that something bad happened, and it might just continue on as normal even though your program is in a really bad state.&lt;/p&gt; &#xA;&lt;p&gt;Both (3) and (4) are reasonable options, but both require the goroutine to have an owner that can actually receive the message that something went wrong. This is generally not true with a goroutine spawned with &lt;code&gt;go&lt;/code&gt;, but in the &lt;code&gt;conc&lt;/code&gt; package, all goroutines have an owner that must collect the spawned goroutine. In the conc package, any call to &lt;code&gt;Wait()&lt;/code&gt; will panic if any of the spawned goroutines panicked. Additionally, it decorates the panic value with a stacktrace from the child goroutine so that you don&#39;t lose information about what caused the panic.&lt;/p&gt; &#xA;&lt;p&gt;Doing this all correctly every time you spawn something with &lt;code&gt;go&lt;/code&gt; is not trivial and it requires a lot of boilerplate that makes the important parts of the code more difficult to read, so &lt;code&gt;conc&lt;/code&gt; does this for you.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;stdlib&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;conc&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type caughtPanicError struct {&#xA;    val   any&#xA;    stack []byte&#xA;}&#xA;&#xA;func (e *caughtPanicError) Error() string {&#xA;    return fmt.Sprintf(&#xA;        &#34;panic: %q\n%s&#34;,&#xA;        e.val,&#xA;        string(e.stack)&#xA;    )&#xA;}&#xA;&#xA;func main() {&#xA;    done := make(chan error)&#xA;    go func() {&#xA;        defer func() {&#xA;            if v := recover(); v != nil {&#xA;                done &amp;lt;- caughtPanicError{&#xA;                    val: v,&#xA;                    stack: debug.Stack()&#xA;                }&#xA;            } else {&#xA;                done &amp;lt;- nil&#xA;            }&#xA;        }()&#xA;        doSomethingThatMightPanic()&#xA;    }()&#xA;    err := &amp;lt;-done&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    var wg conc.WaitGroup&#xA;    wg.Go(doSomethingThatMightPanic)&#xA;    // panics with a nice stacktrace&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Goal #3: Make concurrent code easier to read&lt;/h2&gt; &#xA;&lt;p&gt;Doing concurrency correctly is difficult. Doing it in a way that doesn&#39;t obfuscate what the code is actually doing is more difficult. The &lt;code&gt;conc&lt;/code&gt; package attempts to make common operations easier by abstracting as much boilerplate complexity as possible.&lt;/p&gt; &#xA;&lt;p&gt;Want to run a set of concurrent tasks with a bounded set of goroutines? Use &lt;code&gt;pool.New()&lt;/code&gt;. Want to process an ordered stream of results concurrently, but still maintain order? Try &lt;code&gt;stream.New()&lt;/code&gt;. What about a concurrent map over a slice? Take a peek at &lt;code&gt;iter.Map()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Browse some examples below for some comparisons with doing these by hand.&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;Each of these examples forgoes propagating panics for simplicity. To see what kind of complexity that would add, check out the &#34;Goal #2&#34; header above.&lt;/p&gt; &#xA;&lt;p&gt;Spawn a set of goroutines and waiting for them to finish:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;stdlib&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;conc&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    var wg sync.WaitGroup&#xA;    for i := 0; i &amp;lt; 10; i++ {&#xA;        wg.Add(1)&#xA;        go func() {&#xA;            defer wg.Done()&#xA;            // crashes on panic!&#xA;            doSomething()&#xA;        }()&#xA;    }&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;    var wg conc.WaitGroup&#xA;    for i := 0; i &amp;lt; 10; i++ {&#xA;        wg.Go(doSomething)&#xA;    }&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Process each element of a stream in a static pool of goroutines:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;stdlib&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;conc&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func process(stream chan int) {&#xA;    var wg sync.WaitGroup&#xA;    for i := 0; i &amp;lt; 10; i++ {&#xA;        wg.Add(1)&#xA;        go func() {&#xA;            defer wg.Done()&#xA;            for elem := range stream {&#xA;                handle(elem)&#xA;            }&#xA;        }()&#xA;    }&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func process(stream chan int) {&#xA;    p := pool.New().WithMaxGoroutines(10)&#xA;    for elem := range stream {&#xA;        elem := elem&#xA;        p.Go(func() {&#xA;            handle(elem)&#xA;        })&#xA;    }&#xA;    p.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Process each element of a slice in a static pool of goroutines:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;stdlib&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;conc&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func process(values []int) {&#xA;    feeder := make(chan int, 8)&#xA;&#xA;    var wg sync.WaitGroup&#xA;    for i := 0; i &amp;lt; 10; i++ {&#xA;        wg.Add(1)&#xA;        go func() {&#xA;            defer wg.Done()&#xA;            for elem := range feeder {&#xA;                handle(elem)&#xA;            }&#xA;        }()&#xA;    }&#xA;&#xA;    for _, value := range values {&#xA;        feeder &amp;lt;- value&#xA;    }&#xA;&#xA;    wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func process(values []int) {&#xA;    iter.ForEach(values, handle)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Concurrently map a slice:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;stdlib&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;conc&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func concMap(&#xA;    input []int,&#xA;    f func(int) int,&#xA;) []int {&#xA;    res := make([]int, len(input))&#xA;    var idx atomic.Int64&#xA;&#xA;    var wg sync.WaitGroup&#xA;    for i := 0; i &amp;lt; 10; i++ {&#xA;        wg.Add(1)&#xA;        go func() {&#xA;            defer wg.Done()&#xA;&#xA;            for {&#xA;                i := int(idx.Add(1) - 1)&#xA;                if i &amp;gt;= len(input) {&#xA;                    return&#xA;                }&#xA;&#xA;                res[i] = f(input[i])&#xA;            }&#xA;        }()&#xA;    }&#xA;    wg.Wait()&#xA;    return res&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func concMap(&#xA;    input []int,&#xA;    f func(int) int,&#xA;) []int {&#xA;    return iter.Map(input, f)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Process an ordered stream concurrently:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;stdlib&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;conc&lt;/code&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func mapStream&#xA;    in chan int,&#xA;    out chan int,&#xA;    f func(int) int,&#xA;) {&#xA;    tasks := make(chan func())&#xA;    taskResults := make(chan chan int)&#xA;&#xA;    // Worker goroutines&#xA;    var workerWg sync.WaitGroup&#xA;    for i := 0; i &amp;lt; 10; i++ {&#xA;        workerWg.Add(1)&#xA;        go func() {&#xA;            defer workerWg.Done()&#xA;            for task := range tasks {&#xA;                task()&#xA;            }&#xA;        }()&#xA;    }&#xA;&#xA;    // Ordered reader goroutines&#xA;    var readerWg sync.WaitGroup&#xA;    readerWg.Add(1)&#xA;    go func() {&#xA;        defer readerWg.Done()&#xA;        for result := range taskResults {&#xA;            out &amp;lt;- result&#xA;        }&#xA;    }&#xA;&#xA;    // Feed the workers with tasks&#xA;    for elem := range in {&#xA;        resultCh := make(chan int, 1)&#xA;        taskResults &amp;lt;- resultCh&#xA;        tasks &amp;lt;- func() {&#xA;            resultCh &amp;lt;- f(elem)&#xA;        }&#xA;    }&#xA;&#xA;    // We&#39;ve exhausted input.&#xA;    // Wait for everything to finish&#xA;    close(tasks)&#xA;    workerWg.Wait()&#xA;    close(taskResults)&#xA;    readerWg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func mapStream(&#xA;    in chan int,&#xA;    out chan int,&#xA;    f func(int) int,&#xA;) {&#xA;    s := stream.New().WithMaxGoroutines(10)&#xA;    for elem := range in {&#xA;        elem := elem&#xA;        s.Go(func() stream.Callback {&#xA;            res := f(elem)&#xA;            return func() { out &amp;lt;- res }&#xA;        })&#xA;    }&#xA;    s.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
</feed>