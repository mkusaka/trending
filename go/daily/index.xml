<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-15T01:30:39Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yonahd/kor</title>
    <updated>2023-10-15T01:30:39Z</updated>
    <id>tag:github.com,2023-10-15:/yonahd/kor</id>
    <link href="https://github.com/yonahd/kor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Golang Tool to discover unused Kubernetes Resources&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/yonahd/kor&#34; alt=&#34;GitHub go.mod Go version (subdirectory of monorepo)&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/yonahd/kor?color=green&amp;amp;link=https://github.com/yonahd/kor/releases&#34; alt=&#34;GitHub release (with filter)&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/yonahd/kor&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/yonahd/kor/branch/main/graph/badge.svg?token=tNKcOjlxLo&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Kor - Kubernetes Orphaned Resources Finder&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonahd/kor/main/images/kor_logo.png&#34; alt=&#34;Kor Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kor is a tool to discover unused Kubernetes resources. Currently, Kor can identify and list unused:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ConfigMaps&lt;/li&gt; &#xA; &lt;li&gt;Secrets&lt;/li&gt; &#xA; &lt;li&gt;Services&lt;/li&gt; &#xA; &lt;li&gt;ServiceAccounts&lt;/li&gt; &#xA; &lt;li&gt;Deployments&lt;/li&gt; &#xA; &lt;li&gt;StatefulSets&lt;/li&gt; &#xA; &lt;li&gt;Roles&lt;/li&gt; &#xA; &lt;li&gt;HPAs&lt;/li&gt; &#xA; &lt;li&gt;PVCs&lt;/li&gt; &#xA; &lt;li&gt;Ingresses&lt;/li&gt; &#xA; &lt;li&gt;PDBs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yonahd/kor/main/images/screenshot.png&#34; alt=&#34;Kor Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download the binary for your operating system from the &lt;a href=&#34;https://github.com/yonahd/kor/releases&#34;&gt;releases page&lt;/a&gt; and add it to your system&#39;s PATH.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;For macOS users, you can install Kor using Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install kor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build from source&lt;/h3&gt; &#xA;&lt;p&gt;Install the binary to your &lt;code&gt;$GOBIN&lt;/code&gt; or &lt;code&gt;$GOPATH/bin&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/yonahd/kor@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Run a container with your kubeconfig mounted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -i yonahdissen/kor&#xA;&#xA;docker run --rm -i -v &#34;/path/to/.kube/config:/root/.kube/config&#34; yonahdissen/kor all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Helm&lt;/h3&gt; &#xA;&lt;p&gt;Run as a cronjob in your Cluster&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;helm upgrade -i kor \&#xA;    --namespace kor \&#xA;    --create-namespace \&#xA;    ./charts/kor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information see &lt;a href=&#34;https://raw.githubusercontent.com/yonahd/kor/main/#in-cluster-usage&#34;&gt;in cluster usage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Kor provides various subcommands to identify and list unused resources. The available commands are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;all&lt;/code&gt; - Gets all unused resources for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;configmap&lt;/code&gt; - Gets unused ConfigMaps for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;secret&lt;/code&gt; - Gets unused Secrets for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;services&lt;/code&gt; - Gets unused Services for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;serviceaccount&lt;/code&gt; - Gets unused ServiceAccounts for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deployments&lt;/code&gt; - Gets unused Deployments for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;statefulsets&lt;/code&gt; - Gets unused StatefulSets for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;role&lt;/code&gt; - Gets unused Roles for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hpa&lt;/code&gt; - Gets unused HPAs for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pvc&lt;/code&gt; - Gets unused PVCs for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ingress&lt;/code&gt; - Gets unused Ingresses for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pdb&lt;/code&gt; - Gets unused PDBs for the specified namespace or all namespaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exporter&lt;/code&gt; - Export Prometheus metrics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Supported Flags&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;-e, --exclude-namespaces string   Namespaces to be excluded, split by comma. Example: --exclude-namespace ns1,ns2,ns3. If --include-namespace is set, --exclude-namespaces will be ignored.&#xA;-h, --help                        help for kor&#xA;-n, --include-namespaces string   Namespaces to run on, split by comma. Example: --include-namespace ns1,ns2,ns3.&#xA;-k, --kubeconfig string           Path to kubeconfig file (optional)&#xA;    --output string               Output format (table or json) (default &#34;table&#34;)&#xA;    --slack-auth-token string     Slack auth token to send notifications to. --slack-auth-token requires --slack-channel to be set.&#xA;    --slack-channel string        Slack channel to send notifications to. --slack-channel requires --slack-auth-token to be set.&#xA;    --slack-webhook-url string    Slack webhook URL to send notifications to&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a specific subcommand, run &lt;code&gt;kor [subcommand] [flags]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kor all --namespace my-namespace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information about each subcommand and its available flags, you can use the &lt;code&gt;--help&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kor [subcommand] --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported resources and limitations&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Resource&lt;/th&gt; &#xA;   &lt;th&gt;What it looks for&lt;/th&gt; &#xA;   &lt;th&gt;Known False Positives ⚠️&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConfigMaps&lt;/td&gt; &#xA;   &lt;td&gt;ConfigMaps not used in the following places:&lt;br&gt;- Pods&lt;br&gt;- Containers&lt;br&gt;- ConfigMaps used through Volumes&lt;br&gt;- ConfigMaps used through environment variables&lt;/td&gt; &#xA;   &lt;td&gt;ConfigMaps used by resources which don&#39;t explicitly state them in the config.&lt;br&gt; e.g Grafana dashboards loaded dynamically OPA policies fluentd configs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Secrets&lt;/td&gt; &#xA;   &lt;td&gt;Secrets not used in the following places:&lt;br&gt;- Pods&lt;br&gt;- Containers&lt;br&gt;- Secrets used through volumes&lt;br&gt;- Secrets used through environment variables&lt;br&gt;- Secrets used by Ingress TLS&lt;br&gt;- Secrets used by ServiceAccounts&lt;/td&gt; &#xA;   &lt;td&gt;Secrets used by resources which don&#39;t explicitly state them in the config&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Services&lt;/td&gt; &#xA;   &lt;td&gt;Services with no endpoints&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deployments&lt;/td&gt; &#xA;   &lt;td&gt;Deployments with no Replicas&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ServiceAccounts&lt;/td&gt; &#xA;   &lt;td&gt;ServiceAccounts unused by Pods&lt;br&gt;ServiceAccounts unused by roleBinding or clusterRoleBinding&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;StatefulSets&lt;/td&gt; &#xA;   &lt;td&gt;Statefulsets with no Replicas&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Roles&lt;/td&gt; &#xA;   &lt;td&gt;Roles not used in roleBinding&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PVCs&lt;/td&gt; &#xA;   &lt;td&gt;PVCs not used in Pods&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ingresses&lt;/td&gt; &#xA;   &lt;td&gt;Ingresses not pointing at any Service&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hpas&lt;/td&gt; &#xA;   &lt;td&gt;HPAs not used in Deployments&lt;br&gt; HPAs not used in StatefulSets&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pdbs&lt;/td&gt; &#xA;   &lt;td&gt;PDBs not used in Deployments&lt;br&gt; PDBs not used in StatefulSets&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Ignore Resources&lt;/h2&gt; &#xA;&lt;p&gt;The resources labeled with &#34;kor/used = true&#34; will be ignored by kor even if they are unused. You can add this label to resources you want to ignore.&lt;/p&gt; &#xA;&lt;h2&gt;Import Option&lt;/h2&gt; &#xA;&lt;p&gt;You can also use kor as a Go library to programmatically discover unused resources. By importing the github.com/yonahd/kor/pkg/kor package, you can call the relevant functions to retrieve unused resources. The library provides the option to get the results in JSON format by specifying the outputFormat parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;github.com/yonahd/kor/pkg/kor&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    myNamespaces := kor.IncludeExcludeLists{&#xA;        IncludeListStr: &#34;my-namespace1, my-namespace2&#34;,&#xA;    }&#xA;    outputFormat := &#34;json&#34; // Set to &#34;json&#34; for JSON output&#xA;&#xA;    if outputFormat == &#34;json&#34; {&#xA;        jsonResponse, err := kor.GetUnusedDeploymentsStructured(myNamespaces, kubeconfig, &#34;json&#34;)&#xA;        if err != nil {&#xA;            // Handle error&#xA;        }&#xA;        // Process the JSON response&#xA;        // ...&#xA;    } else {&#xA;        kor.GetUnusedDeployments(namespace)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;In Cluster Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use this tool inside the cluster running as a CronJob and sending the results to a Slack Webhook as raw text(has characters limits of 4000) or to a Slack channel by uploading a file(recommended), you can use the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Send to a Slack webhook as raw text&#xA;helm upgrade -i kor \&#xA;    --namespace kor \&#xA;    --create-namespace \&#xA;    --set cronJob.slackWebhookUrl=&amp;lt;slack-webhook-url&amp;gt; \&#xA;    ./charts/kor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Send to a Slack channel by uploading a file&#xA;helm upgrade -i kor \&#xA;    --namespace kor \&#xA;    --create-namespace \&#xA;    --set cronJob.slackChannel=&amp;lt;slack-channel&amp;gt; \&#xA;    --set cronJob.slackToken=&amp;lt;slack-token&amp;gt; \&#xA;    ./charts/kor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: To send it to Slack as a file it&#39;s required to set the &lt;code&gt;slackToken&lt;/code&gt; and &lt;code&gt;slackChannel&lt;/code&gt; values.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It&#39;s set to run every Monday at 1 a.m. by default. You can change the schedule by setting the &lt;code&gt;cronJob.schedule&lt;/code&gt; value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;helm upgrade -i kor \&#xA;    --namespace kor \&#xA;    --create-namespace \&#xA;    --set cronJob.slackChannel=&amp;lt;slack-channel&amp;gt; \&#xA;    --set cronJob.slackToken=&amp;lt;slack-token&amp;gt; \&#xA;    --set cronJob.schedule=&#34;0 1 * * 1&#34; \&#xA;    ./charts/kor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you encounter any bugs or have suggestions for improvements, please open an issue in the &lt;a href=&#34;https://github.com/yonahd/kor/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This open-source project is available under the &lt;a href=&#34;https://raw.githubusercontent.com/yonahd/kor/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;. Feel free to use, modify, and distribute it as per the terms of the license.&lt;/p&gt;</summary>
  </entry>
</feed>