<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-30T01:35:11Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AnalogJ/scrutiny</title>
    <updated>2023-04-30T01:35:11Z</updated>
    <id>tag:github.com,2023-04-30:/AnalogJ/scrutiny</id>
    <link href="https://github.com/AnalogJ/scrutiny" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hard Drive S.M.A.R.T Monitoring, Historical Trends &amp; Real World Failure Thresholds&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/AnalogJ/scrutiny&#34;&gt; &lt;img width=&#34;300&#34; alt=&#34;scrutiny_view&#34; src=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/webapp/frontend/src/assets/images/logo/scrutiny-logo-dark.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;scrutiny&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AnalogJ/scrutiny/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/AnalogJ/scrutiny/workflows/CI/badge.svg?branch=master&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/AnalogJ/scrutiny&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/AnalogJ/scrutiny/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AnalogJ/scrutiny/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/AnalogJ/scrutiny.svg?style=flat-square&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/analogj/scrutiny&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-reference-blue.svg?style=flat-square&#34; alt=&#34;Godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/AnalogJ/scrutiny&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/AnalogJ/scrutiny?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AnalogJ/scrutiny/releases&#34;&gt;&lt;img src=&#34;http://img.shields.io/github/release/AnalogJ/scrutiny.svg?style=flat-square&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;WebUI for smartd S.M.A.R.T monitoring&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Scrutiny is a Work-in-Progress and still has some rough edges.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://imgur.com/a/5k8qMzS&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/docs/dashboard.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;If you run a server with more than a couple of hard drives, you&#39;re probably already familiar with S.M.A.R.T and the &lt;code&gt;smartd&lt;/code&gt; daemon. If not, it&#39;s an incredible open source project described as the following:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;smartd is a daemon that monitors the Self-Monitoring, Analysis and Reporting Technology (SMART) system built into many ATA, IDE and SCSI-3 hard drives. The purpose of SMART is to monitor the reliability of the hard drive and predict drive failures, and to carry out different types of drive self-tests.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Theses S.M.A.R.T hard drive self-tests can help you detect and replace failing hard drives before they cause permanent data loss. However, there&#39;s a couple issues with &lt;code&gt;smartd&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There are more than a hundred S.M.A.R.T attributes, however &lt;code&gt;smartd&lt;/code&gt; does not differentiate between critical and informational metrics&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smartd&lt;/code&gt; does not record S.M.A.R.T attribute history, so it can be hard to determine if an attribute is degrading slowly over time.&lt;/li&gt; &#xA; &lt;li&gt;S.M.A.R.T attribute thresholds are set by the manufacturer. In some cases these thresholds are unset, or are so high that they can only be used to confirm a failed drive, rather than detecting a drive about to fail.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smartd&lt;/code&gt; is a command line only tool. For head-less servers a web UI would be more valuable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Scrutiny is a Hard Drive Health Dashboard &amp;amp; Monitoring solution, merging manufacturer provided S.M.A.R.T metrics with real-world failure rates.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;Scrutiny is a simple but focused application, with a couple of core features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web UI Dashboard - focused on Critical metrics&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;smartd&lt;/code&gt; integration (no re-inventing the wheel)&lt;/li&gt; &#xA; &lt;li&gt;Auto-detection of all connected hard-drives&lt;/li&gt; &#xA; &lt;li&gt;S.M.A.R.T metric tracking for historical trends&lt;/li&gt; &#xA; &lt;li&gt;Customized thresholds using real world failure rates&lt;/li&gt; &#xA; &lt;li&gt;Temperature tracking&lt;/li&gt; &#xA; &lt;li&gt;Provided as an all-in-one Docker image (but can be installed manually)&lt;/li&gt; &#xA; &lt;li&gt;Configurable Alerting/Notifications via Webhooks&lt;/li&gt; &#xA; &lt;li&gt;(Future) Hard Drive performance testing &amp;amp; tracking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;RAID/Virtual Drives&lt;/h2&gt; &#xA;&lt;p&gt;Scrutiny uses &lt;code&gt;smartctl --scan&lt;/code&gt; to detect devices/drives.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All RAID controllers supported by &lt;code&gt;smartctl&lt;/code&gt; are automatically supported by Scrutiny. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;While some RAID controllers support passing through the underlying SMART data to &lt;code&gt;smartctl&lt;/code&gt; others do not.&lt;/li&gt; &#xA;   &lt;li&gt;In some cases &lt;code&gt;--scan&lt;/code&gt; does not correctly detect the device type, returning &lt;a href=&#34;https://github.com/AnalogJ/scrutiny/issues/45&#34;&gt;incomplete SMART data&lt;/a&gt;. Scrutiny supports overriding detected device type via the config file: see &lt;a href=&#34;https://github.com/AnalogJ/scrutiny/raw/master/example.collector.yaml&#34;&gt;example.collector.yaml&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you use docker, you &lt;strong&gt;must&lt;/strong&gt; pass though the RAID virtual disk to the container using &lt;code&gt;--device&lt;/code&gt; (see below) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This device may be in &lt;code&gt;/dev/*&lt;/code&gt; or &lt;code&gt;/dev/bus/*&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;If you&#39;re unsure, run &lt;code&gt;smartctl --scan&lt;/code&gt; on your host, and pass all listed devices to the container.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/docs/TROUBLESHOOTING_DEVICE_COLLECTOR.md&#34;&gt;docs/TROUBLESHOOTING_DEVICE_COLLECTOR.md&lt;/a&gt; for help&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using Docker, getting started is as simple as running the following command:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/docker/example.omnibus.docker-compose.yml&#34;&gt;docker/example.omnibus.docker-compose.yml&lt;/a&gt; for a docker-compose file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it --rm -p 8080:8080 -p 8086:8086 \&#xA;  -v `pwd`/scrutiny:/opt/scrutiny/config \&#xA;  -v `pwd`/influxdb2:/opt/scrutiny/influxdb \&#xA;  -v /run/udev:/run/udev:ro \&#xA;  --cap-add SYS_RAWIO \&#xA;  --device=/dev/sda \&#xA;  --device=/dev/sdb \&#xA;  --name scrutiny \&#xA;  ghcr.io/analogj/scrutiny:master-omnibus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/run/udev&lt;/code&gt; is necessary to provide the Scrutiny collector with access to your device metadata&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--cap-add SYS_RAWIO&lt;/code&gt; is necessary to allow &lt;code&gt;smartctl&lt;/code&gt; permission to query your device SMART data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NOTE: If you have &lt;strong&gt;NVMe&lt;/strong&gt; drives, you must add &lt;code&gt;--cap-add SYS_ADMIN&lt;/code&gt; as well. See issue &lt;a href=&#34;https://github.com/AnalogJ/scrutiny/issues/26#issuecomment-696817130&#34;&gt;#26&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--device&lt;/code&gt; entries are required to ensure that your hard disk devices are accessible within the container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/analogj/scrutiny:master-omnibus&lt;/code&gt; is a omnibus image, containing both the webapp server (frontend &amp;amp; api) as well as the S.M.A.R.T metric collector. (see below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hub/Spoke Deployment&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the Omnibus image (available under the &lt;code&gt;latest&lt;/code&gt; tag) you can deploy in Hub/Spoke mode, which requires 3 other Docker images:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/analogj/scrutiny:master-collector&lt;/code&gt; - Contains the Scrutiny data collector, &lt;code&gt;smartctl&lt;/code&gt; binary and cron-like scheduler. You can run one collector on each server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ghcr.io/analogj/scrutiny:master-web&lt;/code&gt; - Contains the Web UI and API. Only one container necessary&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;influxdb:2.2&lt;/code&gt; - InfluxDB image, used by the Web container to persist SMART data. Only one container necessary See &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/docs/TROUBLESHOOTING_INFLUXDB.md&#34;&gt;docs/TROUBLESHOOTING_INFLUXDB.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/docker/example.hubspoke.docker-compose.yml&#34;&gt;docker/example.hubspoke.docker-compose.yml&lt;/a&gt; for a docker-compose file.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -p 8086:8086 \&#xA;  -v `pwd`/influxdb2:/var/lib/influxdb2 \&#xA;  --name scrutiny-influxdb \&#xA;  influxdb:2.2&#xA;&#xA;docker run --rm -p 8080:8080 \&#xA;  -v `pwd`/scrutiny:/opt/scrutiny/config \&#xA;  --name scrutiny-web \&#xA;  ghcr.io/analogj/scrutiny:master-web&#xA;&#xA;docker run --rm \&#xA;  -v /run/udev:/run/udev:ro \&#xA;  --cap-add SYS_RAWIO \&#xA;  --device=/dev/sda \&#xA;  --device=/dev/sdb \&#xA;  -e COLLECTOR_API_ENDPOINT=http://SCRUTINY_WEB_IPADDRESS:8080 \&#xA;  --name scrutiny-collector \&#xA;  ghcr.io/analogj/scrutiny:master-collector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Installation (without-Docker)&lt;/h2&gt; &#xA;&lt;p&gt;While the easiest way to get started with &lt;a href=&#34;https://github.com/AnalogJ/scrutiny#docker&#34;&gt;Scrutiny is using Docker&lt;/a&gt;, it is possible to run it manually without much work. You can even mix and match, using Docker for one component and a manual installation for the other.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/docs/INSTALL_MANUAL.md&#34;&gt;docs/INSTALL_MANUAL.md&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once scrutiny is running, you can open your browser to &lt;code&gt;http://localhost:8080&lt;/code&gt; and take a look at the dashboard.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using the omnibus image, the collector should already have run, and your dashboard should be populate with every drive that Scrutiny detected. The collector is configured to run once a day, but you can trigger it manually by running the command below.&lt;/p&gt; &#xA;&lt;p&gt;For users of the docker Hub/Spoke deployment or manual install: initially the dashboard will be empty. After the first collector run, you&#39;ll be greeted with a list of all your hard drives and their current smart status.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker exec scrutiny /opt/scrutiny/bin/scrutiny-collector-metrics run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;By default Scrutiny looks for its YAML configuration files in &lt;code&gt;/opt/scrutiny/config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are two configuration files available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Webapp/API config via &lt;code&gt;scrutiny.yaml&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/example.scrutiny.yaml&#34;&gt;example.scrutiny.yaml&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Collector config via &lt;code&gt;collector.yaml&lt;/code&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/example.collector.yaml&#34;&gt;example.collector.yaml&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neither file is required, however if provided, it allows you to configure how Scrutiny functions.&lt;/p&gt; &#xA;&lt;h2&gt;Cron Schedule&lt;/h2&gt; &#xA;&lt;p&gt;Unfortunately the Cron schedule cannot be configured via the &lt;code&gt;collector.yaml&lt;/code&gt; (as the collector binary needs to be trigged by a scheduler/cron). However, if you are using the official &lt;code&gt;ghcr.io/analogj/scrutiny:master-collector&lt;/code&gt; or &lt;code&gt;ghcr.io/analogj/scrutiny:master-omnibus&lt;/code&gt; docker images, you can use the &lt;code&gt;COLLECTOR_CRON_SCHEDULE&lt;/code&gt; environmental variable to override the default cron schedule (daily @ midnight - &lt;code&gt;0 0 * * *&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run -e COLLECTOR_CRON_SCHEDULE=&#34;0 0 * * *&#34; ...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notifications&lt;/h2&gt; &#xA;&lt;p&gt;Scrutiny supports sending SMART device failure notifications via the following services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Custom Script (data provided via environmental variables)&lt;/li&gt; &#xA; &lt;li&gt;Email&lt;/li&gt; &#xA; &lt;li&gt;Webhooks&lt;/li&gt; &#xA; &lt;li&gt;Discord&lt;/li&gt; &#xA; &lt;li&gt;Gotify&lt;/li&gt; &#xA; &lt;li&gt;Hangouts&lt;/li&gt; &#xA; &lt;li&gt;IFTTT&lt;/li&gt; &#xA; &lt;li&gt;Join&lt;/li&gt; &#xA; &lt;li&gt;Mattermost&lt;/li&gt; &#xA; &lt;li&gt;ntfy&lt;/li&gt; &#xA; &lt;li&gt;Pushbullet&lt;/li&gt; &#xA; &lt;li&gt;Pushover&lt;/li&gt; &#xA; &lt;li&gt;Slack&lt;/li&gt; &#xA; &lt;li&gt;Teams&lt;/li&gt; &#xA; &lt;li&gt;Telegram&lt;/li&gt; &#xA; &lt;li&gt;Tulip&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;notify.urls&lt;/code&gt; section of &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/example.scrutiny.yaml&#34;&gt;example.scrutiny.yml&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;p&gt;For more information and troubleshooting, see the &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/docs/TROUBLESHOOTING_NOTIFICATIONS.md&#34;&gt;TROUBLESHOOTING_NOTIFICATIONS.md&lt;/a&gt; file&lt;/p&gt; &#xA;&lt;h3&gt;Testing Notifications&lt;/h3&gt; &#xA;&lt;p&gt;You can test that your notifications are configured correctly by posting an empty payload to the notifications health check API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST http://localhost:8080/api/health/notify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Debug mode &amp;amp; Log Files&lt;/h1&gt; &#xA;&lt;p&gt;Scrutiny provides various methods to change the log level to debug and generate log files.&lt;/p&gt; &#xA;&lt;h2&gt;Web Server/API&lt;/h2&gt; &#xA;&lt;p&gt;You can use environmental variables to enable debug logging and/or log files for the web server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DEBUG=true&#xA;SCRUTINY_LOG_FILE=/tmp/web.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can configure the log level and log file in the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;log:&#xA;  file: &#39;/tmp/web.log&#39;&#xA;  level: DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you&#39;re not using docker, you can pass CLI arguments to the web server during startup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrutiny start --debug --log-file /tmp/web.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Collector&lt;/h2&gt; &#xA;&lt;p&gt;You can use environmental variables to enable debug logging and/or log files for the collector:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DEBUG=true&#xA;COLLECTOR_LOG_FILE=/tmp/collector.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you&#39;re not using docker, you can pass CLI arguments to the collector during startup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scrutiny-collector-metrics run --debug --log-file /tmp/collector.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Supported Architectures&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecture Name&lt;/th&gt; &#xA;   &lt;th&gt;Binaries&lt;/th&gt; &#xA;   &lt;th&gt;Docker&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;linux-amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;linux-arm-5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;linux-arm-6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;linux-arm-7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;web/collector only. see &lt;a href=&#34;https://github.com/AnalogJ/scrutiny/issues/236&#34;&gt;#236&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;linux-arm64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;freebsd-amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macos-amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macos-arm64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;windows-amd64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WIP, see &lt;a href=&#34;https://github.com/AnalogJ/scrutiny/issues/15&#34;&gt;#15&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;windows-arm64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for instructions for how to develop and contribute to the scrutiny codebase.&lt;/p&gt; &#xA;&lt;p&gt;Work your magic and then submit a pull request. We love pull requests!&lt;/p&gt; &#xA;&lt;p&gt;If you find the documentation lacking, help us out and update this README.md. If you don&#39;t have the time to work on Scrutiny, but found something we should know about, please submit an issue.&lt;/p&gt; &#xA;&lt;h1&gt;Versioning&lt;/h1&gt; &#xA;&lt;p&gt;We use SemVer for versioning. For the versions available, see the tags on this repository.&lt;/p&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;p&gt;Jason Kulatunga - Initial Development - @AnalogJ&lt;/p&gt; &#xA;&lt;h1&gt;Licenses&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MIT&lt;/li&gt; &#xA; &lt;li&gt;Logo: &lt;a href=&#34;https://thenounproject.com/term/glasses/775232&#34;&gt;Glasses by matias porta lezcano&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;Scrutiny is only possible with the help of my &lt;a href=&#34;https://github.com/sponsors/AnalogJ/&#34;&gt;Github Sponsors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/AnalogJ/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AnalogJ/scrutiny/master/docs/sponsors.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;They read a simple &lt;a href=&#34;https://github.com/sponsors/AnalogJ/&#34;&gt;reddit announcement post&lt;/a&gt; and decided to trust &amp;amp; finance a developer they&#39;ve never met. It&#39;s an exciting and incredibly humbling experience.&lt;/p&gt; &#xA;&lt;p&gt;If you found Scrutiny valuable, please consider &lt;a href=&#34;https://github.com/sponsors/AnalogJ/&#34;&gt;supporting my work&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>klothoplatform/klotho</title>
    <updated>2023-04-30T01:35:11Z</updated>
    <id>tag:github.com,2023-04-30:/klothoplatform/klotho</id>
    <link href="https://github.com/klothoplatform/klotho" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Klotho - write AWS applications at lightning speed&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://klo.dev&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/69910109/209406610-c35afa17-7aff-4d44-921c-078d174d30f0.png&#34; width=&#34;300&#34;&gt;&lt;/a&gt; &lt;br&gt; develop for local, deploy for the cloud &lt;br&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/klothoplatform/klotho/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/klothoplatform/klotho/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;test badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/klothoplatform/klotho/actions/workflows/prettier.yaml&#34;&gt;&lt;img src=&#34;https://github.com/klothoplatform/klotho/actions/workflows/prettier.yaml/badge.svg?sanitize=true&#34; alt=&#34;formatting badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/klothoplatform/klotho/actions/workflows/lint.yaml&#34;&gt;&lt;img src=&#34;https://github.com/klothoplatform/klotho/actions/workflows/lint.yaml/badge.svg?sanitize=true&#34; alt=&#34;linter badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/klothoplatform/klotho/actions/workflows/staticcheck.yaml&#34;&gt;&lt;img src=&#34;https://github.com/klothoplatform/klotho/actions/workflows/staticcheck.yaml/badge.svg?sanitize=true&#34; alt=&#34;staticcheck badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CloudCompilers/klotho/actions/workflows/govulncheck.yaml&#34;&gt;&lt;img src=&#34;https://github.com/CloudCompilers/klotho/actions/workflows/govulncheck.yaml/badge.svg?sanitize=true&#34; alt=&#34;govulncheck&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/klothoplatform/klotho/actions/workflows/release.yaml&#34;&gt;&lt;img src=&#34;https://github.com/klothoplatform/klotho/actions/workflows/release.yaml/badge.svg?sanitize=true&#34; alt=&#34;release badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Klotho is an open source tool that transforms plain code into cloud native code.&lt;/p&gt; &#xA;&lt;p&gt;Klotho allows you to quickly and reliably add cloud functionality to your application with minimal modification to your code. In most cases, this is just a handful of klotho annotations.&lt;/p&gt; &#xA;&lt;p&gt;It adds 3 main in-code cloud capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;expose&lt;/code&gt;&lt;/strong&gt; web APIs to the Internet&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;persist&lt;/code&gt;&lt;/strong&gt; multi-modal data into different types of databases&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;static_unit&lt;/code&gt;&lt;/strong&gt; package static assets and upload into a CDN for distribution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#why&#34;&gt;Why?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#adaptive-architectures&#34;&gt;Adaptive Architectures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#infrastructure-from-code&#34;&gt;Infrastructure-from-Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#ide-plugins--extensions&#34;&gt;IDE Plugins &amp;amp; Extensions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#example-usage&#34;&gt;Example usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#additional-resources&#34;&gt;Additional Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#language-support&#34;&gt;Language Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#cloud-providers&#34;&gt;Cloud Providers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/klothoplatform/klotho/main/#developing&#34;&gt;Developing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Klotho is designed to absorb the complexity of building cloud applications, enabling everyone in large-scale organizations and teams to hobbyist developers to write and operate cloud applications at a fraction of the effort.&lt;/p&gt; &#xA;&lt;p&gt;Its design principles are an outcome of industry collaborations focused on mid-sized companies and fast growing startups.&lt;/p&gt; &#xA;&lt;h2&gt;Adaptive Architectures&lt;/h2&gt; &#xA;&lt;p&gt;Klotho builds on a new architecture called &lt;a href=&#34;https://www.youtube.com/watch?v=GHt3FAEDfII&amp;amp;t=40392s&#34;&gt;Adaptive Architecutes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/96867907/213884373-6b33a3e8-c00b-4c86-91c4-f89220f79ba5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a superset of monoliths, microservices and serverless architectures, combining their benefits like a stellar developer experience, immediate productivity, scalability and autonomy of development and deployment as well as a spectrum of NoOps to FullOps. It also introduces a host of &lt;a href=&#34;https://klo.dev/&#34;&gt;new capabilities&lt;/a&gt; that have been out of reach do to their implementation complexity.&lt;/p&gt; &#xA;&lt;h2&gt;Infrastructure-from-Code&lt;/h2&gt; &#xA;&lt;p&gt;Klotho is part of a new generation of cloud tools that implements Infrastructure-from-Code (IfC), a process to automatically create, configure and manage cloud resources from the existing software application&#39;s source code without having describe it explicitly.&lt;/p&gt; &#xA;&lt;p&gt;By annotating the clients, SDKs or language constructs used in the code with Klotho capabilities, they are automatically created, updated and wired into the application.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;font-size: 11px&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://klo.dev&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/69910109/209459034-8478468a-119e-4feb-a963-7201cfc9e360.png&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;span&gt;Exposing a Python FastAPI to the internet with the Klotho &lt;code&gt;klotho::expose&lt;/code&gt; capability. View for &lt;a href=&#34;&#34;&gt;NodeJS&lt;/a&gt;, &lt;a href=&#34;&#34;&gt;Go&lt;/a&gt; &lt;/span&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34; style=&#34;font-size: 11px&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://klo.dev&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/69910109/209459591-5a4cd026-42ec-4a30-8d7a-9047d3760989.png&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;span&gt;Persisting Redis and TypeORM instances in NodeJS with the the Klotho &lt;code&gt;klotho::persist&lt;/code&gt; capability. View for &lt;a href=&#34;&#34;&gt;Python&lt;/a&gt;, Go (soon) &lt;/span&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;Klotho ensures that developers/operators are able to select and adapt the underlying technologies even after their initial setup.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install the latest Klotho release, run the following (see &lt;a href=&#34;https://klo.dev/docs/download-klotho&#34;&gt;full installation instructions&lt;/a&gt; for additional installation options):&lt;/p&gt; &#xA;&lt;p&gt;Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install klothoplatform/tap/klotho&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Linux/WSL2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL &#34;https://github.com/klothoplatform/klotho/releases/latest/download/klotho_linux_amd64&#34; -o klotho&#xA;chmod +x klotho&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;IDE Plugins &amp;amp; Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Get syntax highlighting and snippets for Klotho annotations in your favorite IDE.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klothoplatform/Klotho-vscode&#34;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Intellij IDEA (coming soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The quickest way to get started is with the getting started tutorial for &lt;a href=&#34;https://klo.dev/docs/tutorials/your_first_klotho_app&#34;&gt;Javascript/Typescript&lt;/a&gt;, &lt;a href=&#34;https://klo.dev/docs/tutorials/your_first_klotho_app_python&#34;&gt;Python&lt;/a&gt; and Go (soon).&lt;/p&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;h3&gt;Clone the sample app&lt;/h3&gt; &#xA;&lt;p&gt;Clone our sample apps git repo and install the npm packages for the &lt;a href=&#34;https://github.com/KlothoPlatform/sample-apps/tree/main/js-my-first-app&#34;&gt;js-my-first-app&lt;/a&gt; app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/KlothoPlatform/sample-apps.git&#xA;cd sample-apps/js-my-first-app&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Logging in&lt;/h3&gt; &#xA;&lt;p&gt;First log in to Klotho. This shares telemetry data for compiler improvements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;klotho --login &amp;lt;email&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compile with Klotho&lt;/h3&gt; &#xA;&lt;p&gt;Now compile the application for AWS by running &lt;code&gt;klotho&lt;/code&gt; and passing &lt;code&gt;--provider aws&lt;/code&gt; as an argument on the command line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;klotho . --app my-first-app --provider aws&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will result in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;██╗  ██╗██╗      ██████╗ ████████╗██╗  ██╗ ██████╗&#xA;██║ ██╔╝██║     ██╔═══██╗╚══██╔══╝██║  ██║██╔═══██╗&#xA;█████╔╝ ██║     ██║   ██║   ██║   ███████║██║   ██║&#xA;██╔═██╗ ██║     ██║   ██║   ██║   ██╔══██║██║   ██║&#xA;██║  ██╗███████╗╚██████╔╝   ██║   ██║  ██║╚██████╔╝&#xA;╚═╝  ╚═╝╚══════╝ ╚═════╝    ╚═╝   ╚═╝  ╚═╝ ╚═════╝&#xA;&#xA;Adding resource input_file_dependencies:&#xA;Adding resource exec_unit:main&#xA;Found 2 route(s) on server &#39;app&#39;&#xA;Adding resource gateway:pet-api&#xA;Adding resource persist_kv:petsByOwner&#xA;Adding resource topology:my-first-app&#xA;Adding resource infra_as_code:Pulumi (AWS)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The cloud version of the application is saved to the &lt;code&gt;./compiled&lt;/code&gt; directory, and has everything you need to deploy, run and operate the application.&lt;/p&gt; &#xA;&lt;h3&gt;Examine the result&lt;/h3&gt; &#xA;&lt;p&gt;As part of the compilation, Klotho generates a high-level topology diagram showing the cloud resources that will be used in your application&#39;s cloud deployment and their relationships.&lt;/p&gt; &#xA;&lt;p&gt;Open &lt;code&gt;./compiled/my-first-app.png&lt;/code&gt; to view the application&#39;s topology diagram:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://klo.dev/docs/assets/images/creating_rest_api_topo-d5c9e11b53e45403d374e02e3b28a34d.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;We can see here that Klotho has defined the following AWS topology:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;main&lt;/strong&gt; (&lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;Lambda&lt;/a&gt;) - The main Lambda function serves the Express app defined in js-my-first-app using a Lambda-compatible interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;pet-api&lt;/strong&gt; (&lt;a href=&#34;https://aws.amazon.com/api-gateway/&#34;&gt;API Gateway&lt;/a&gt;) - The pet-api API gateway is used to expose the Express routes defined in the main Lambda function.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;petsByOwner&lt;/strong&gt; (&lt;a href=&#34;https://aws.amazon.com/dynamodb/&#34;&gt;DynamoDB Table&lt;/a&gt;) - The petsByOwner DynamoDB table is used by the main Lambda function to store the relationships between pets and their owners.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://klo.dev/docs/tutorials/your_first_klotho_app&#34;&gt;Continue reading the tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;p&gt;Here are some links to additional resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://klo.dev/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Case Studies: &lt;a href=&#34;https://klo.dev/case-study-amihan-entertainment/&#34;&gt;Amihan Entertainment&lt;/a&gt;, Remedy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://klo.dev/blog/&#34;&gt;Blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Podcasts: &lt;a href=&#34;https://www.devopsparadox.com/episodes/how-to-reduce-cloud-development-complexity-169/&#34;&gt;How to Reduce Cloud Development Complexity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language Support&lt;/h2&gt; &#xA;&lt;h3&gt;Supported&lt;/h3&gt; &#xA;&lt;p&gt;These languages support the majority of capabilities and a wide variety of code styles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://skillicons.dev/icons?i=ts,js,python&#34; alt=&#34;Languages&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Early Access&lt;/h3&gt; &#xA;&lt;p&gt;These languages support only a minority of capabilities and/or small subset of code styles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://skillicons.dev/icons?i=go&#34; alt=&#34;Languages&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;In-development&lt;/h3&gt; &#xA;&lt;p&gt;These languages are not yet supported but are in design and development&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://skillicons.dev/icons?i=cs,java&#34; alt=&#34;Languages&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Cloud Providers&lt;/h2&gt; &#xA;&lt;h3&gt;Supported&lt;/h3&gt; &#xA;&lt;p&gt;These providers support the majority of capabilities and languages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://skillicons.dev/icons?i=aws&#34; alt=&#34;Cloud providers&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;In-development&lt;/h3&gt; &#xA;&lt;p&gt;These providers are not yet supported but are in design and development&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://skillicons.dev/icons?i=gcp,azure&#34; alt=&#34;Cloud providers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/GetKlotho&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-%231DA1F2.svg?style=for-the-badge&amp;amp;logo=Twitter&amp;amp;logoColor=white&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/company/klothoplatform/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/linkedin-%230077B5.svg?style=for-the-badge&amp;amp;logo=linkedin&amp;amp;logoColor=white&#34; alt=&#34;LinkedIn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://klo.dev/discordurl&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%3CServer%3E-%237289DA.svg?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;build: &lt;code&gt;go build ./...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;test: &lt;code&gt;go test ./...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;run without separate build: &lt;code&gt;go run ./cmd/klotho&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;to run CI checks on &lt;code&gt;git push&lt;/code&gt;: &lt;pre&gt;&lt;code&gt;git config --local core.hooksPath .githooks/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;to run integration tests against a branch, navigate to the &lt;a href=&#34;https://github.com/klothoplatform/klotho/actions/workflows/run-integ-tests.yaml&#34;&gt;run-integ-tests.yaml&lt;/a&gt; action and click the &#34;run workflow ▾&#34; button. Select your branch, optionally fill in or change any of the parameters, and then click the &#34;run workflow&#34; button. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For security reasons, only authorized members of the team may do this. You can run integration tests on your own fork, providing your own AWS and Pulumi credentials.&lt;/li&gt; &#xA;   &lt;li&gt;Note that the nightly integration tests are &lt;a href=&#34;https://github.com/klothoplatform/klotho/actions/workflows/nightly-integ-tests.yaml&#34;&gt;a different workflow&lt;/a&gt;. Authorized members of the team can manually kick off a run of that workflow, but it doesn&#39;t take any inputs. The nightly integration tests workflow simply invokes the run-integ-tests.yaml workflow, so they effectively do the same thing.&lt;/li&gt; &#xA;   &lt;li&gt;The tests use a Klothoh login token that&#39;s stored as a GH Action secret within the &lt;code&gt;integ-test&lt;/code&gt; environment. The login credentials are in BitWarden, under the &#34;GitHub CI/CD login&#34; entry.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>