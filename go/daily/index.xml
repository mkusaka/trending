<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-20T01:31:02Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mailru/easyjson</title>
    <updated>2024-12-20T01:31:02Z</updated>
    <id>tag:github.com,2024-12-20:/mailru/easyjson</id>
    <link href="https://github.com/mailru/easyjson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast JSON serializer for golang.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;easyjson &lt;a href=&#34;https://github.com/mailru/easyjson/actions/workflows/easyjson.yml&#34;&gt;&lt;img src=&#34;https://github.com/mailru/easyjson/actions/workflows/easyjson.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/mailru/easyjson&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/mailru/easyjson&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Package easyjson provides a fast and easy way to marshal/unmarshal Go structs to/from JSON without the use of reflection. In performance tests, easyjson outperforms the standard &lt;code&gt;encoding/json&lt;/code&gt; package by a factor of 4-5x, and other JSON encoding packages by a factor of 2-3x.&lt;/p&gt; &#xA;&lt;p&gt;easyjson aims to keep generated Go code simple enough so that it can be easily optimized or fixed. Another goal is to provide users with the ability to customize the generated code by providing options not available with the standard &lt;code&gt;encoding/json&lt;/code&gt; package, such as generating &#34;snake_case&#34; names or enabling &lt;code&gt;omitempty&lt;/code&gt; behavior by default.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Install:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for Go &amp;lt; 1.17&#xA;go get -u github.com/mailru/easyjson/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;or&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# for Go &amp;gt;= 1.17&#xA;go get github.com/mailru/easyjson &amp;amp;&amp;amp; go install github.com/mailru/easyjson/...@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;easyjson -all &amp;lt;file&amp;gt;.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will generate &lt;code&gt;&amp;lt;file&amp;gt;_easyjson.go&lt;/code&gt; containing the appropriate marshaler and unmarshaler funcs for all structs contained in &lt;code&gt;&amp;lt;file&amp;gt;.go&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that easyjson requires a full Go build environment and the &lt;code&gt;GOPATH&lt;/code&gt; environment variable to be set. This is because easyjson code generation invokes &lt;code&gt;go run&lt;/code&gt; on a temporary file (an approach to code generation borrowed from &lt;a href=&#34;https://github.com/pquerna/ffjson&#34;&gt;ffjson&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Serialize&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;someStruct := &amp;amp;SomeStruct{Field1: &#34;val1&#34;, Field2: &#34;val2&#34;}&#xA;rawBytes, err := easyjson.Marshal(someStruct)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deserialize&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;someStruct := &amp;amp;SomeStruct{}&#xA;err := easyjson.Unmarshal(rawBytes, someStruct)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://godoc.org/github.com/mailru/easyjson&#34;&gt;GoDoc&lt;/a&gt; for more information and features.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;Usage of easyjson:&#xA;  -all&#xA;    &#x9;generate marshaler/unmarshalers for all structs in a file&#xA;  -build_tags string&#xA;        build tags to add to generated file&#xA;  -gen_build_flags string&#xA;        build flags when running the generator while bootstrapping&#xA;  -byte&#xA;        use simple bytes instead of Base64Bytes for slice of bytes&#xA;  -leave_temps&#xA;    &#x9;do not delete temporary files&#xA;  -no_std_marshalers&#xA;    &#x9;don&#39;t generate MarshalJSON/UnmarshalJSON funcs&#xA;  -noformat&#xA;    &#x9;do not run &#39;gofmt -w&#39; on output file&#xA;  -omit_empty&#xA;    &#x9;omit empty fields by default&#xA;  -output_filename string&#xA;    &#x9;specify the filename of the output&#xA;  -pkg&#xA;    &#x9;process the whole package instead of just the given file&#xA;  -snake_case&#xA;    &#x9;use snake_case names instead of CamelCase by default&#xA;  -lower_camel_case&#xA;        use lowerCamelCase instead of CamelCase by default&#xA;  -stubs&#xA;    &#x9;only generate stubs for marshaler/unmarshaler funcs&#xA;  -disallow_unknown_fields&#xA;        return error if some unknown field in json appeared&#xA;  -disable_members_unescape&#xA;        disable unescaping of \uXXXX string sequences in member names&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;-all&lt;/code&gt; will generate marshalers/unmarshalers for all Go structs in the file excluding those structs whose preceding comment starts with &lt;code&gt;easyjson:skip&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//easyjson:skip&#xA;type A struct {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;-all&lt;/code&gt; is not provided, then only those structs whose preceding comment starts with &lt;code&gt;easyjson:json&lt;/code&gt; will have marshalers/unmarshalers generated. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//easyjson:json&#xA;type A struct {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additional option notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-snake_case&lt;/code&gt; tells easyjson to generate snake_case field names by default (unless overridden by a field tag). The CamelCase to snake_case conversion algorithm should work in most cases (ie, HTTPVersion will be converted to &#34;http_version&#34;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-build_tags&lt;/code&gt; will add the specified build tags to generated Go sources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;-gen_build_flags&lt;/code&gt; will execute the easyjson bootstapping code to launch the actual generator command with provided flags. Multiple arguments should be separated by space e.g. &lt;code&gt;-gen_build_flags=&#34;-mod=mod -x&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Structure json tag options&lt;/h2&gt; &#xA;&lt;p&gt;Besides standard json tag options like &#39;omitempty&#39; the following are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#39;nocopy&#39; - disables allocation and copying of string values, making them refer to original json buffer memory. This works great for short lived objects which are not hold in memory after decoding and immediate usage. Note if string requires unescaping it will be processed as normally.&lt;/li&gt; &#xA; &lt;li&gt;&#39;intern&#39; - string &#34;interning&#34; (deduplication) to save memory when the very same string dictionary values are often met all over the structure. See below for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Generated Marshaler/Unmarshaler Funcs&lt;/h2&gt; &#xA;&lt;p&gt;For Go struct types, easyjson generates the funcs &lt;code&gt;MarshalEasyJSON&lt;/code&gt; / &lt;code&gt;UnmarshalEasyJSON&lt;/code&gt; for marshaling/unmarshaling JSON. In turn, these satisfy the &lt;code&gt;easyjson.Marshaler&lt;/code&gt; and &lt;code&gt;easyjson.Unmarshaler&lt;/code&gt; interfaces and when used in conjunction with &lt;code&gt;easyjson.Marshal&lt;/code&gt; / &lt;code&gt;easyjson.Unmarshal&lt;/code&gt; avoid unnecessary reflection / type assertions during marshaling/unmarshaling to/from JSON for Go structs.&lt;/p&gt; &#xA;&lt;p&gt;easyjson also generates &lt;code&gt;MarshalJSON&lt;/code&gt; and &lt;code&gt;UnmarshalJSON&lt;/code&gt; funcs for Go struct types compatible with the standard &lt;code&gt;json.Marshaler&lt;/code&gt; and &lt;code&gt;json.Unmarshaler&lt;/code&gt; interfaces. Please be aware that using the standard &lt;code&gt;json.Marshal&lt;/code&gt; / &lt;code&gt;json.Unmarshal&lt;/code&gt; for marshaling/unmarshaling will incur a significant performance penalty when compared to using &lt;code&gt;easyjson.Marshal&lt;/code&gt; / &lt;code&gt;easyjson.Unmarshal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, easyjson exposes utility funcs that use the &lt;code&gt;MarshalEasyJSON&lt;/code&gt; and &lt;code&gt;UnmarshalEasyJSON&lt;/code&gt; for marshaling/unmarshaling to and from standard readers and writers. For example, easyjson provides &lt;code&gt;easyjson.MarshalToHTTPResponseWriter&lt;/code&gt; which marshals to the standard &lt;code&gt;http.ResponseWriter&lt;/code&gt;. Please see the &lt;a href=&#34;https://godoc.org/github.com/mailru/easyjson&#34;&gt;GoDoc listing&lt;/a&gt; for the full listing of utility funcs that are available.&lt;/p&gt; &#xA;&lt;h2&gt;Controlling easyjson Marshaling and Unmarshaling Behavior&lt;/h2&gt; &#xA;&lt;p&gt;Go types can provide their own &lt;code&gt;MarshalEasyJSON&lt;/code&gt; and &lt;code&gt;UnmarshalEasyJSON&lt;/code&gt; funcs that satisfy the &lt;code&gt;easyjson.Marshaler&lt;/code&gt; / &lt;code&gt;easyjson.Unmarshaler&lt;/code&gt; interfaces. These will be used by &lt;code&gt;easyjson.Marshal&lt;/code&gt; and &lt;code&gt;easyjson.Unmarshal&lt;/code&gt; when defined for a Go type.&lt;/p&gt; &#xA;&lt;p&gt;Go types can also satisfy the &lt;code&gt;easyjson.Optional&lt;/code&gt; interface, which allows the type to define its own &lt;code&gt;omitempty&lt;/code&gt; logic.&lt;/p&gt; &#xA;&lt;h2&gt;Type Wrappers&lt;/h2&gt; &#xA;&lt;p&gt;easyjson provides additional type wrappers defined in the &lt;code&gt;easyjson/opt&lt;/code&gt; package. These wrap the standard Go primitives and in turn satisfy the easyjson interfaces.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;easyjson/opt&lt;/code&gt; type wrappers are useful when needing to distinguish between a missing value and/or when needing to specifying a default value. Type wrappers allow easyjson to avoid additional pointers and heap allocations and can significantly increase performance when used properly.&lt;/p&gt; &#xA;&lt;h2&gt;Memory Pooling&lt;/h2&gt; &#xA;&lt;p&gt;easyjson uses a buffer pool that allocates data in increasing chunks from 128 to 32768 bytes. Chunks of 512 bytes and larger will be reused with the help of &lt;code&gt;sync.Pool&lt;/code&gt;. The maximum size of a chunk is bounded to reduce redundant memory allocation and to allow larger reusable buffers.&lt;/p&gt; &#xA;&lt;p&gt;easyjson&#39;s custom allocation buffer pool is defined in the &lt;code&gt;easyjson/buffer&lt;/code&gt; package, and the default behavior pool behavior can be modified (if necessary) through a call to &lt;code&gt;buffer.Init()&lt;/code&gt; prior to any marshaling or unmarshaling. Please see the &lt;a href=&#34;https://godoc.org/github.com/mailru/easyjson/buffer&#34;&gt;GoDoc listing&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;String interning&lt;/h2&gt; &#xA;&lt;p&gt;During unmarshaling, &lt;code&gt;string&lt;/code&gt; field values can be optionally &lt;a href=&#34;https://en.wikipedia.org/wiki/String_interning&#34;&gt;interned&lt;/a&gt; to reduce memory allocations and usage by deduplicating strings in memory, at the expense of slightly increased CPU usage.&lt;/p&gt; &#xA;&lt;p&gt;This will work effectively only for &lt;code&gt;string&lt;/code&gt; fields being decoded that have frequently the same value (e.g. if you have a string field that can only assume a small number of possible values).&lt;/p&gt; &#xA;&lt;p&gt;To enable string interning, add the &lt;code&gt;intern&lt;/code&gt; keyword tag to your &lt;code&gt;json&lt;/code&gt; tag on &lt;code&gt;string&lt;/code&gt; fields, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Foo struct {&#xA;  UUID  string `json:&#34;uuid&#34;`         // will not be interned during unmarshaling&#xA;  State string `json:&#34;state,intern&#34;` // will be interned during unmarshaling&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Issues, Notes, and Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;easyjson is still early in its development. As such, there are likely to be bugs and missing features when compared to &lt;code&gt;encoding/json&lt;/code&gt;. In the case of a missing feature or bug, please create a GitHub issue. Pull requests are welcome!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Unlike &lt;code&gt;encoding/json&lt;/code&gt;, object keys are case-sensitive. Case-insensitive matching is not currently provided due to the significant performance hit when doing case-insensitive key matching. In the future, case-insensitive object key matching may be provided via an option to the generator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;easyjson makes use of &lt;code&gt;unsafe&lt;/code&gt;, which simplifies the code and provides significant performance benefits by allowing no-copy conversion from &lt;code&gt;[]byte&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;. That said, &lt;code&gt;unsafe&lt;/code&gt; is used only when unmarshaling and parsing JSON, and any &lt;code&gt;unsafe&lt;/code&gt; operations / memory allocations done will be safely deallocated by easyjson. Set the build tag &lt;code&gt;easyjson_nounsafe&lt;/code&gt; to compile it without &lt;code&gt;unsafe&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;easyjson is compatible with Google App Engine. The &lt;code&gt;appengine&lt;/code&gt; build tag (set by App Engine&#39;s environment) will automatically disable the use of &lt;code&gt;unsafe&lt;/code&gt;, which is not allowed in App Engine&#39;s Standard Environment. Note that the use with App Engine is still experimental.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Floats are formatted using the default precision from Go&#39;s &lt;code&gt;strconv&lt;/code&gt; package. As such, easyjson will not correctly handle high precision floats when marshaling/unmarshaling JSON. Note, however, that there are very few/limited uses where this behavior is not sufficient for general use. That said, a different package may be needed if precise marshaling/unmarshaling of high precision floats to/from JSON is required.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;While unmarshaling, the JSON parser does the minimal amount of work needed to skip over unmatching parens, and as such full validation is not done for the entire JSON value being unmarshaled/parsed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Currently there is no true streaming support for encoding/decoding as typically for many uses/protocols the final, marshaled length of the JSON needs to be known prior to sending the data. Currently this is not possible with easyjson&#39;s architecture.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;easyjson parser and codegen based on reflection, so it won&#39;t work on &lt;code&gt;package main&lt;/code&gt; files, because they cant be imported by parser.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Most benchmarks were done using the example &lt;a href=&#34;https://dev.twitter.com/rest/reference/get/search/tweets&#34;&gt;13kB example JSON&lt;/a&gt; (9k after eliminating whitespace). This example is similar to real-world data, is well-structured, and contains a healthy variety of different types, making it ideal for JSON serialization benchmarks.&lt;/p&gt; &#xA;&lt;p&gt;Note:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For small request benchmarks, an 80 byte portion of the above example was used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For large request marshaling benchmarks, a struct containing 50 regular samples was used, making a ~500kB output JSON.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Benchmarks are showing the results of easyjson&#39;s default behaviour, which makes use of &lt;code&gt;unsafe&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Benchmarks are available in the repository and can be run by invoking &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;easyjson vs. encoding/json&lt;/h3&gt; &#xA;&lt;p&gt;easyjson is roughly 5-6 times faster than the standard &lt;code&gt;encoding/json&lt;/code&gt; for unmarshaling, and 3-4 times faster for non-concurrent marshaling. Concurrent marshaling is 6-7x faster if marshaling to a writer.&lt;/p&gt; &#xA;&lt;h3&gt;easyjson vs. ffjson&lt;/h3&gt; &#xA;&lt;p&gt;easyjson uses the same approach for JSON marshaling as &lt;a href=&#34;https://github.com/pquerna/ffjson&#34;&gt;ffjson&lt;/a&gt;, but takes a significantly different approach to lexing and parsing JSON during unmarshaling. This means easyjson is roughly 2-3x faster for unmarshaling and 1.5-2x faster for non-concurrent unmarshaling.&lt;/p&gt; &#xA;&lt;p&gt;As of this writing, &lt;code&gt;ffjson&lt;/code&gt; seems to have issues when used concurrently: specifically, large request pooling hurts &lt;code&gt;ffjson&lt;/code&gt;&#39;s performance and causes scalability issues. These issues with &lt;code&gt;ffjson&lt;/code&gt; can likely be fixed, but as of writing remain outstanding/known issues with &lt;code&gt;ffjson&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;easyjson and &lt;code&gt;ffjson&lt;/code&gt; have similar performance for small requests, however easyjson outperforms &lt;code&gt;ffjson&lt;/code&gt; by roughly 2-5x times for large requests when used with a writer.&lt;/p&gt; &#xA;&lt;h3&gt;easyjson vs. go/codec&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ugorji/go&#34;&gt;go/codec&lt;/a&gt; provides compile-time helpers for JSON generation. In this case, helpers do not work like marshalers as they are encoding-independent.&lt;/p&gt; &#xA;&lt;p&gt;easyjson is generally 2x faster than &lt;code&gt;go/codec&lt;/code&gt; for non-concurrent benchmarks and about 3x faster for concurrent encoding (without marshaling to a writer).&lt;/p&gt; &#xA;&lt;p&gt;In an attempt to measure marshaling performance of &lt;code&gt;go/codec&lt;/code&gt; (as opposed to allocations/memcpy/writer interface invocations), a benchmark was done with resetting length of a byte slice rather than resetting the whole slice to nil. However, the optimization in this exact form may not be applicable in practice, since the memory is not freed between marshaling operations.&lt;/p&gt; &#xA;&lt;h3&gt;easyjson vs &#39;ujson&#39; python module&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/esnme/ultrajson&#34;&gt;ujson&lt;/a&gt; is using C code for parsing, so it is interesting to see how plain golang compares to that. It is important to note that the resulting object for python is slower to access, since the library parses JSON object into dictionaries.&lt;/p&gt; &#xA;&lt;p&gt;easyjson is slightly faster for unmarshaling and 2-3x faster than &lt;code&gt;ujson&lt;/code&gt; for marshaling.&lt;/p&gt; &#xA;&lt;h3&gt;Benchmark Results&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;ffjson&lt;/code&gt; results are from February 4th, 2016, using the latest &lt;code&gt;ffjson&lt;/code&gt; and go1.6. &lt;code&gt;go/codec&lt;/code&gt; results are from March 4th, 2016, using the latest &lt;code&gt;go/codec&lt;/code&gt; and go1.6.&lt;/p&gt; &#xA;&lt;h4&gt;Unmarshaling&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;lib&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;json size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;MB/s&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;allocs/op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;B/op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;218&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10229&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9.7&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;720&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;125&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9794&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;67&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;66&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;141&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9985&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17.6&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;488&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;55&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;434&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;19299&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;336&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ujson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;103&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Marshaling, one goroutine.&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;lib&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;json size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;MB/s&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;allocs/op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;B/op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;75&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;23256&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;32&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;328&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;80&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.2M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;213&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10260&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;263&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;742&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;125&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;212&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;33&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;490k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;262&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2879&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;122&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;153&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21340&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson**&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;146&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;152&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4897&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;36&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson**&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;64&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;134&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7317&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;818k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson**&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;125&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7320&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;827k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;80&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;33601&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec***&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;108&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1153&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;42&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;304&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec***&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;56&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;48&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;73&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;483&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.5M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec***&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;103&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;451&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;66007&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ujson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;92&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;N/A&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;* marshaling to a writer, ** using &lt;code&gt;ffjson.Pool()&lt;/code&gt;, *** reusing output slice instead of resetting it to nil&lt;/p&gt; &#xA;&lt;h4&gt;Marshaling, concurrent.&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;lib&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;json size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;MB/s&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;allocs/op&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;B/op&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;252&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;23257&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;124&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;328&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;standard&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;289&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.2M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;792&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;10597&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1748&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;779&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;333&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;718&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;36&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;548k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;easyjson*&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2134&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4957&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;301&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;153&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;21629&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson**&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;707&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;152&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5148&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;62&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;384&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson**&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;282&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;128&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;438&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7330&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.0M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;ffjson**&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;131&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;7319&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;820k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;183&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;33603&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec***&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;regular&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;671&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;9&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1157&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;147&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;304&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec***&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;small&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;299&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;48&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;190&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;483&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.5M&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;codec***&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;large&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;752&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;451&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;77574&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;* marshaling to a writer, ** using &lt;code&gt;ffjson.Pool()&lt;/code&gt;, *** reusing output slice instead of resetting it to nil&lt;/p&gt;</summary>
  </entry>
</feed>