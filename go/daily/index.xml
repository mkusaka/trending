<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-23T01:37:37Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ntt360/pmon2</title>
    <updated>2023-01-23T01:37:37Z</updated>
    <id>tag:github.com,2023-01-23:/ntt360/pmon2</id>
    <link href="https://github.com/ntt360/pmon2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;golang进程管理工具(golang process manager)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pmon2&lt;/h1&gt; &#xA;&lt;p&gt;go进程管理工具(golang process manager)，专门用于 go 常驻进程管理 （daemon manager）&lt;/p&gt; &#xA;&lt;img src=&#34;http://p0.qhimg.com/t017d6cbb68aed4b693.png&#34; style=&#34;max-width:680px&#34;&gt; &#xA;&lt;h2&gt;启动进程&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 run [./二进制进程文件] [参数1]  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;Go官方一直没有提供任何进程管理工具，对于 &lt;code&gt;Go&lt;/code&gt; 服务的部署，简单的服务，我们使用 &lt;code&gt;linux&lt;/code&gt; 内建命令 &lt;code&gt;nohup &amp;amp;&lt;/code&gt;组合，或者使用系统自带进程管理工具, 例如 &lt;code&gt;systemd&lt;/code&gt;，&lt;code&gt;init.d&lt;/code&gt; 配置。或者借助第三方的进程管理工具，如：&lt;code&gt;python&lt;/code&gt; 的 &lt;code&gt;supervisor&lt;/code&gt; 或者 &lt;code&gt;nodejs&lt;/code&gt; 的 &lt;code&gt;pm2&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;每种方式都有一定优劣，我们希望继承 &lt;code&gt;go&lt;/code&gt; 语言部署集成的便捷易用思想，不需要再安装其他依赖软件，并且提升进程管理工具的体验。&lt;/p&gt; &#xA;&lt;p&gt;和 &lt;code&gt;pm2&lt;/code&gt; 不一样的是，&lt;code&gt;pmon2&lt;/code&gt; 直接是启动的系统级常驻进程。进程直接由 &lt;code&gt;init&lt;/code&gt; 来管理，因此，就算&lt;code&gt;pmon2&lt;/code&gt;管理工具异常退出，也不会影响进程本身运行。&lt;/p&gt; &#xA;&lt;p&gt;默认的，&lt;code&gt;pmon2&lt;/code&gt; 所管理的进程如果发生异常崩溃，&lt;code&gt;pmon2&lt;/code&gt; 会尝试重启该进程。如果你不希望某个进程自动重启，那么你可以设置一个 &lt;code&gt;--no-autorestart&lt;/code&gt; 参数即可。具体请参考：常用命令使用章节。&lt;/p&gt; &#xA;&lt;h2&gt;如何安装&lt;/h2&gt; &#xA;&lt;p&gt;目前 &lt;code&gt;Pmon2&lt;/code&gt; 支持 &lt;code&gt;CentOS6&lt;/code&gt;、&lt;code&gt;CentOS7&lt;/code&gt;、&lt;code&gt;CentOS8&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ntt360/pmon2/releases&#34;&gt;Releases&lt;/a&gt; 中已经构建了可以直接安装的&lt;code&gt;rpm&lt;/code&gt;包，可直接选择平台安装：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# CentOS6&#xA;sudo yum install -y https://github.com/ntt360/pmon2/releases/download/v1.12.0/pmon2-1.12.1-1.el6.x86_64.rpm&#xA;&#xA;# CentOS7&#xA;sudo yum install -y https://github.com/ntt360/pmon2/releases/download/v1.12.0/pmon2-1.12.1-1.el7.x86_64.rpm&#xA;&#xA;# CentOS8&#xA;sudo yum install -y https://github.com/ntt360/pmon2/releases/download/v1.12.0/pmon2-1.12.1-1.el8.x86_64.rpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;❗&lt;/span&gt;&lt;span&gt;❗&lt;/span&gt; &lt;strong&gt;注意：&lt;/strong&gt; &lt;span&gt;❗&lt;/span&gt;&lt;span&gt;❗&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;首次安装 &lt;code&gt;pmon2&lt;/code&gt; 后，&lt;code&gt;pmon2&lt;/code&gt; 服务没有自动启动，需要你手动启动该服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# centos6 使用 initctl&#xA;sudo initctl start pmon2&#xA;&#xA;# centos7 使用 systemd&#xA;sudo systemctl start pmon2&#xA;&#xA;# Debian/Ubuntu&#xA;sudo /usr/local/pmon2/bin/pmond &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;命令介绍&lt;/h2&gt; &#xA;&lt;h4&gt;查看帮助&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 查看全局的帮助文档&#xA;sudo pmon2 help&#xA;&#xA;# 查看某个具体命令 help&#xA;sudo pmon2 [command] help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;帮助文档中能查看当前所有命令使用说明&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;  pmon2 [command]&#xA;&#xA;Available Commands:&#xA;  del         del process by id or name&#xA;  desc        print the process detail message&#xA;  exec        run one binary golang process file&#xA;  help        Help about any command&#xA;  ls          list all processes&#xA;  reload      reload some process&#xA;  start       start some process by id or name&#xA;  stop        stop running process&#xA;  log         display process log by id or name&#xA;  logf        display process log dynamic by id or name&#xA;  version     show pmon2 version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;运行进程 [run/exec]&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 run [./二进制文件名] [参数1] [参数2] ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;启动进程，可以传入若干参数，参数说明如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 进程名称，如果不传递，则以二进制文件名作为默认名称&#xA;--name&#xA;&#xA;// 进程运行日志，不配置则使用默认路径：/var/log/pmon2/&#xA;--log   -l&#xA;&#xA;// 仅自定义日志目录，优先级低于 --log&#xA;--log_dir -d&#xA;&#xA;// 进程自定义参数，多个参数以空格分割&#xA;--args  -a &#34;-arg1=val1 -arg2=val2&#34;&#xA;&#xA;// 进程启动用户&#xA;--user  -u&#xA;&#xA;// 不自动重启, 默认自动重启&#xA;--no-autorestart    -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;示例：&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 run ./bin/gin --args &#34;-prjHome=`pwd`&#34; --user ntt360&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;运行 &lt;code&gt;bin/gin&lt;/code&gt; 二进制文件，并且传递参数：&lt;code&gt;-prjHome&lt;/code&gt; 为当前目录，并且制定进程运行的用户为：&lt;code&gt;ntt360&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;!!!warning &#34;注意&#34; pmon2启动的进程会另起一个隔离的上下文环境，自定义参数需要使用绝对路径，不能使用相对路径。&lt;/p&gt; &#xA;&lt;h4&gt;查看列表 [ list/ls ]&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;启动进程 [ start ]&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 start [id or name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;停止进程 [ stop ]&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 stop [id or name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;重载进程 [ reload ]&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 reload [id or name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;插件进程日志&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# 查看最近进程的日志&#xA;sudo pmon2 log [id or name]&#xA;&#xA;# 动态查看进程日志，类似系统tail -f xxx.log&#xA;sudo pmon2 logf [id or name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;仅仅重启配置文件，该命令需要所启动的进程配合使用，&lt;code&gt;reload&lt;/code&gt; 命令默认仅仅发送 &lt;code&gt;SIGUSR2&lt;/code&gt; 信号给启动的进程&lt;/p&gt; &#xA;&lt;p&gt;如果你希望 &lt;code&gt;reload&lt;/code&gt; 时自定义信号，那么请使用 &lt;code&gt;--sig&lt;/code&gt; 参数：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 目前支持的信号：HUP、USR1、USR2&#xA;sudo pmon2 reload --sig HUP [id or name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;删除进程 [ del/delete ]&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 del [id or name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;查看详情 [ show/desc ]&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sudo pmon2 show [id or name]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://jscssimg-img.oss-cn-beijing.aliyuncs.com/89c3f649a583a852.png?t=1506950494&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;h3&gt;1.日志切割？&lt;/h3&gt; &#xA;&lt;p&gt;pmon2 自带一个 &lt;code&gt;logrotate&lt;/code&gt; 日志切割配置文件，会默认切割 &lt;code&gt;/var/log/pmon2&lt;/code&gt; 目录下的日志文件，如果你是自定义日志路径，请自行实现日志切割。&lt;/p&gt; &#xA;&lt;h3&gt;2.进程启动参数必须传绝对路径？&lt;/h3&gt; &#xA;&lt;p&gt;启动进程是，如果你传递的参数中存在路径，请使用绝对路径，&lt;code&gt;pmon2&lt;/code&gt; 启动进程会新起一个新的沙盒环境以避免环境变量污染问题。&lt;/p&gt; &#xA;&lt;h3&gt;3. 平台支持&lt;/h3&gt; &#xA;&lt;p&gt;目前 &lt;code&gt;rpm&lt;/code&gt; 适配 &lt;code&gt;CentOS6&lt;/code&gt; 、 &lt;code&gt;CentOS7&lt;/code&gt;、&lt;code&gt;CentOS8&lt;/code&gt;， &lt;code&gt;Pmon2&lt;/code&gt; 本身可运行在任何 &lt;code&gt;linux&lt;/code&gt; 环境下，如有其它平台打包需求，请联系我们。&lt;/p&gt; &#xA;&lt;h3&gt;4. 命令行自动补全&lt;/h3&gt; &#xA;&lt;p&gt;pmon2 提供 bash 自动补全脚本，如果你发觉在 &lt;code&gt;sudo&lt;/code&gt; 模式下命令无法自动补全，请安装 &lt;code&gt;bash-completion&lt;/code&gt;，退出终端重新进入即可：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo yum intsall -y bash-completion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;5. FATA stat /var/run/pmon2/pmon2.sock: no such file or directory&lt;/h3&gt; &#xA;&lt;p&gt;如果遇到如上报错，请尝试运行：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# centos6 使用 initctl&#xA;sudo initctl start pmon2&#xA;&#xA;# centos7 使用 systemd&#xA;sudo systemctl start pmon2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;原因请参考，安装启动部分说明。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cloudwego/biz-demo</title>
    <updated>2023-01-23T01:37:37Z</updated>
    <id>tag:github.com,2023-01-23:/cloudwego/biz-demo</id>
    <link href="https://github.com/cloudwego/biz-demo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CloudWeGo Demo for Business&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains CloudWeGo demos with business logic, providing valuable references for enterprise user using in production.&lt;/p&gt; &#xA;&lt;p&gt;Each demo should/may contain multiple CloudWeGo subprojects, e.g. Kitex &amp;amp; Hertz, and demonstrate an individual business scenario.&lt;/p&gt; &#xA;&lt;h2&gt;Demo List&lt;/h2&gt; &#xA;&lt;h3&gt;1. Bookinfo&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;h5&gt;What is it about and what problem does it solve?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to use kitex proxyless in istio?&lt;/li&gt; &#xA; &lt;li&gt;How to implement full-process traffic lane using CloudWeGo?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;What is the business scenario?&lt;/h5&gt; &#xA;&lt;p&gt;Rewrite &lt;strong&gt;&lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34;&gt;Bookinfo&lt;/a&gt;&lt;/strong&gt; project using &lt;code&gt;hertz&lt;/code&gt;, &lt;code&gt;kitex&lt;/code&gt;, same as the &lt;strong&gt;&lt;a href=&#34;https://istio.io/latest/docs/examples/bookinfo/&#34;&gt;Bookinfo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The Bookinfo application is broken into four separate microservices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;productpage&lt;/strong&gt;. The productpage microservice calls the details and reviews &lt;strong&gt;microservices&lt;/strong&gt; to populate the page.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;details&lt;/strong&gt;. The details microservice contains book information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;reviews&lt;/strong&gt;. The reviews microservice contains book reviews. It also calls the ratings microservice.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ratings&lt;/strong&gt;. The ratings microservice contains book ranking information that accompanies a book review.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;What are the core technologies/projects used?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;istiod&lt;/code&gt; as xDS server for CRD configuration and distribution&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;wire&lt;/code&gt; for dependency injection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;opentelemetry&lt;/code&gt; for tracing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement proxyless &lt;code&gt;flow lane&lt;/code&gt; with &lt;a href=&#34;https://github.com/kitex-contrib/xds&#34;&gt;&lt;code&gt;Kitex-xds&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;opentelemetry baggage&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement a bookinfo ui using &lt;code&gt;arco-design&lt;/code&gt; react&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Which CloudWeGo subprojects are used? List all technologies used.&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudwego/kitex&#34;&gt;Kitex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudwego/hertz&#34;&gt;Hertz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kitex-contrib/xds&#34;&gt;kitex-xds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kitex-contrib/obs-opentelemetry&#34;&gt;kitex-opentelemetry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hertz-contrib/obs-opentelemetry&#34;&gt;hertz-opentelemetry&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Detailed documentation&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/biz-demo/main/bookinfo/README.md&#34;&gt;bookinfo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Contributors &amp;amp; Maintainers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CoderPoet&#34;&gt;@CoderPoet&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Open Payment Platform&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;h5&gt;What is it about and what problem does it solve?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to use kitex generic call as the http gateway?&lt;/li&gt; &#xA; &lt;li&gt;How to implement Clean Structure of &lt;code&gt;Go&lt;/code&gt; using kitex?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;What is the business scenario?&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The application demonstrates the usage of kitex generic call.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We build the &lt;code&gt;generic call&lt;/code&gt; client for each backend server by traversing IDL in Hertz.&lt;/li&gt; &#xA; &lt;li&gt;Hertz will accept the requests with the query path of prefix &lt;code&gt;/gateway&lt;/code&gt; .&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Gateway&lt;/code&gt; handler will process these requests and route them to backend server by &lt;code&gt;generic call&lt;/code&gt; client.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;payment&lt;/code&gt; server is just a sample server using kitex.This service design pkg with &lt;code&gt;Clean Structure&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;What are the core technologies/projects used?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;Hertz&lt;/code&gt; as Gateway.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;Kitex&lt;/code&gt; generic call client route requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;Kitex&lt;/code&gt; as RPC framework to build micro-services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;Clean Architecture&lt;/code&gt; for design pkg and code layout.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;ent&lt;/code&gt; entity framework for implementing repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;wire&lt;/code&gt; for dependency injection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;Nacos&lt;/code&gt; as service registry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;MySQL&lt;/code&gt; as RDBMS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Which CloudWeGo subprojects are used? List all technologies used.&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudwego/kitex&#34;&gt;Kitex&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudwego/hertz&#34;&gt;Hertz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;kitex-layout(coming soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Detailed documentation&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/biz-demo/main/open-payment-platform/README.md&#34;&gt;Open Payment Platform&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Contributors &amp;amp; Maintainers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/baiyutang&#34;&gt;@baiyutang&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3. Easy Note&lt;/h3&gt; &#xA;&lt;h4&gt;Description&lt;/h4&gt; &#xA;&lt;h5&gt;What is it about and what problem does it solve?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;How to get started with Hertz and Kitex collaboration?&lt;/li&gt; &#xA; &lt;li&gt;How to structure projects when using Hertz and Kitex?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;What is the business scenario?&lt;/h5&gt; &#xA;&lt;p&gt;Migrate &lt;strong&gt;&lt;a href=&#34;https://github.com/cloudwego/kitex-examples/tree/main/bizdemo/easy_note&#34;&gt;easy_note&lt;/a&gt;&lt;/strong&gt; and optimize the project.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The application shows a note service that allows users to create, delete, update, and query notes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The easy_note application is divided into three microservices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;demoapi&lt;/strong&gt; is an HTTP service that handles HTTP requests and calls other services via RPC.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;demouser&lt;/strong&gt; is an RPC service that handles user related operations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;demonote&lt;/strong&gt; is an RPC service that handles note related operations and calls demouser service via RPC.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;What are the core technologies/projects used?&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;hz&lt;/code&gt; and &lt;code&gt;kitex&lt;/code&gt; to generate code&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use Hertz &lt;code&gt;requestid&lt;/code&gt;, &lt;code&gt;jwt&lt;/code&gt;, &lt;code&gt;pprof&lt;/code&gt;, &lt;code&gt;gzip&lt;/code&gt; middlewares&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;go-tagexpr&lt;/code&gt; and &lt;code&gt;thrift-gen-validator&lt;/code&gt; for validating HTTP and RPC request&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;obs-opentelemetry&lt;/code&gt; for tracing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;etcd&lt;/code&gt; as service registry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;GORM&lt;/code&gt; for implementing repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use &lt;code&gt;MySQL&lt;/code&gt; as RDBMS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Which CloudWeGo subprojects are used? List all technologies used.&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudwego/hertz&#34;&gt;Hertz&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hertz-contrib/obs-opentelemetry&#34;&gt;obs-opentelemetry&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hertz-contrib/requestid&#34;&gt;requestid&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hertz-contrib/jwt&#34;&gt;jwt&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hertz-contrib/pprof&#34;&gt;pprof&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hertz-contrib/gzip&#34;&gt;gzip&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudwego/kitex&#34;&gt;Kitex&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kitex-contrib/obs-opentelemetry&#34;&gt;obs-opentelemetry&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kitex-contrib/registry-etcd&#34;&gt;registry-etcd&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cloudwego/thrift-gen-validator&#34;&gt;thrift-gen-validator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Detailed documentation&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cloudwego/biz-demo/main/easy_note/README.md&#34;&gt;easy_note&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Contributors &amp;amp; Maintainers&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justlorain&#34;&gt;@justlorain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/li-jin-gou&#34;&gt;@li-jin-gou&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>burrowers/garble</title>
    <updated>2023-01-23T01:37:37Z</updated>
    <id>tag:github.com,2023-01-23:/burrowers/garble</id>
    <link href="https://github.com/burrowers/garble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Obfuscate Go builds&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;garble&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install mvdan.cc/garble@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Obfuscate Go code by wrapping the Go toolchain. Requires Go 1.18 or later.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;garble build [build flags] [packages]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool also supports &lt;code&gt;garble test&lt;/code&gt; to run tests with obfuscated code, and &lt;code&gt;garble reverse&lt;/code&gt; to de-obfuscate text such as stack traces. See &lt;code&gt;garble -h&lt;/code&gt; for up to date usage information.&lt;/p&gt; &#xA;&lt;h3&gt;Purpose&lt;/h3&gt; &#xA;&lt;p&gt;Produce a binary that works as well as a regular build, but that has as little information about the original source code as possible.&lt;/p&gt; &#xA;&lt;p&gt;The tool is designed to be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Coupled with &lt;code&gt;cmd/go&lt;/code&gt;, to support modules and build caching&lt;/li&gt; &#xA; &lt;li&gt;Deterministic and reproducible, given the same initial source code&lt;/li&gt; &#xA; &lt;li&gt;Reversible given the original source, to de-obfuscate panic stack traces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mechanism&lt;/h3&gt; &#xA;&lt;p&gt;The tool wraps calls to the Go compiler and linker to transform the Go build, in order to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace as many useful identifiers as possible with short base64 hashes&lt;/li&gt; &#xA; &lt;li&gt;Replace package paths with short base64 hashes&lt;/li&gt; &#xA; &lt;li&gt;Replace filenames and position information with short base64 hashes&lt;/li&gt; &#xA; &lt;li&gt;Remove all &lt;a href=&#34;https://go.dev/pkg/runtime/#Version&#34;&gt;build&lt;/a&gt; and &lt;a href=&#34;https://go.dev/pkg/runtime/debug/#ReadBuildInfo&#34;&gt;module&lt;/a&gt; information&lt;/li&gt; &#xA; &lt;li&gt;Strip debugging information and symbol tables via &lt;code&gt;-ldflags=&#34;-w -s&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/burrowers/garble/master/#literal-obfuscation&#34;&gt;Obfuscate literals&lt;/a&gt;, if the &lt;code&gt;-literals&lt;/code&gt; flag is given&lt;/li&gt; &#xA; &lt;li&gt;Remove &lt;a href=&#34;https://raw.githubusercontent.com/burrowers/garble/master/#tiny-mode&#34;&gt;extra information&lt;/a&gt;, if the &lt;code&gt;-tiny&lt;/code&gt; flag is given&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, the tool obfuscates all the packages being built. You can manually specify which packages to obfuscate via &lt;code&gt;GOGARBLE&lt;/code&gt;, a comma-separated list of glob patterns matching package path prefixes. This format is borrowed from &lt;code&gt;GOPRIVATE&lt;/code&gt;; see &lt;code&gt;go help private&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that commands like &lt;code&gt;garble build&lt;/code&gt; will use the &lt;code&gt;go&lt;/code&gt; version found in your &lt;code&gt;$PATH&lt;/code&gt;. To use different versions of Go, you can &lt;a href=&#34;https://go.dev/doc/manage-install#installing-multiple&#34;&gt;install them&lt;/a&gt; and set up &lt;code&gt;$PATH&lt;/code&gt; with them. For example, for Go 1.17.1:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go install golang.org/dl/go1.17.1@latest&#xA;$ go1.17.1 download&#xA;$ PATH=$(go1.17.1 env GOROOT)/bin:${PATH} garble build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Literal obfuscation&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;-literals&lt;/code&gt; flag causes literal expressions such as strings to be replaced with more complex expressions, resolving to the same value at run-time. String literals injected via &lt;code&gt;-ldflags=-X&lt;/code&gt; are also replaced by this flag. This feature is opt-in, as it can cause slow-downs depending on the input code.&lt;/p&gt; &#xA;&lt;p&gt;Literals used in constant expressions cannot be obfuscated, since they are resolved at compile time. This includes any expressions part of a &lt;code&gt;const&lt;/code&gt; declaration, for example.&lt;/p&gt; &#xA;&lt;h3&gt;Tiny mode&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;code&gt;-tiny&lt;/code&gt; flag, even more information is stripped from the Go binary. Position information is removed entirely, rather than being obfuscated. Runtime code which prints panics, fatal errors, and trace/debug info is removed. Many symbol names are also omitted from binary sections at link time. All in all, this can make binaries about 15% smaller.&lt;/p&gt; &#xA;&lt;p&gt;With this flag, no panics or fatal runtime errors will ever be printed, but they can still be handled internally with &lt;code&gt;recover&lt;/code&gt; as normal. In addition, the &lt;code&gt;GODEBUG&lt;/code&gt; environmental variable will be ignored.&lt;/p&gt; &#xA;&lt;p&gt;Note that this flag can make debugging crashes harder, as a panic will simply exit the entire program without printing a stack trace, and source code positions and many names are removed. Similarly, &lt;code&gt;garble reverse&lt;/code&gt; is generally not useful in this mode.&lt;/p&gt; &#xA;&lt;h3&gt;Speed&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;garble build&lt;/code&gt; should take about twice as long as &lt;code&gt;go build&lt;/code&gt;, as it needs to complete two builds. The original build, to be able to load and type-check the input code, and then the obfuscated build.&lt;/p&gt; &#xA;&lt;p&gt;Garble obfuscates one package at a time, mirroring how Go compiles one package at a time. This allows Garble to fully support Go&#39;s build cache; incremental &lt;code&gt;garble build&lt;/code&gt; calls should only re-build and re-obfuscate modified code.&lt;/p&gt; &#xA;&lt;p&gt;Note that the first call to &lt;code&gt;garble build&lt;/code&gt; may be comparatively slow, as it has to obfuscate each package for the first time. This is akin to clearing &lt;code&gt;GOCACHE&lt;/code&gt; with &lt;code&gt;go clean -cache&lt;/code&gt; and running a &lt;code&gt;go build&lt;/code&gt; from scratch.&lt;/p&gt; &#xA;&lt;h3&gt;Determinism and seeds&lt;/h3&gt; &#xA;&lt;p&gt;Just like Go, garble builds are deterministic and reproducible in nature. This has significant benefits, such as caching builds and being able to use &lt;code&gt;garble reverse&lt;/code&gt; to de-obfuscate stack traces.&lt;/p&gt; &#xA;&lt;p&gt;By default, garble will obfuscate each package in a unique way, which will change if its build input changes: the version of garble, the version of Go, the package&#39;s source code, or any build parameter such as GOOS or -tags. This is a reasonable default since guessing those inputs is very hard.&lt;/p&gt; &#xA;&lt;p&gt;However, providing your own obfuscation seed via &lt;code&gt;-seed&lt;/code&gt; brings some advantages. For example, builds sharing the same seed will produce the same obfuscation, even if any of the build parameters or versions vary. It can also make reverse-engineering harder, as an end user could guess what version of Go or garble you&#39;re using.&lt;/p&gt; &#xA;&lt;p&gt;Note that extra care should be taken when using custom seeds. If a seed used to build a binary gets lost, &lt;code&gt;garble reverse&lt;/code&gt; will not work. Rotating the seeds can also help against reverse-engineering in the long run, as otherwise some bits of code may be obfuscated the same way over time.&lt;/p&gt; &#xA;&lt;p&gt;An alternative approach is &lt;code&gt;-seed=random&lt;/code&gt;, where each build is entirely different.&lt;/p&gt; &#xA;&lt;h3&gt;Caveats&lt;/h3&gt; &#xA;&lt;p&gt;Most of these can improve with time and effort. The purpose of this section is to document the current shortcomings of this tool.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Exported methods are never obfuscated at the moment, since they could be required by interfaces. This area is a work in progress; see &lt;a href=&#34;https://github.com/burrowers/garble/issues/3&#34;&gt;#3&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Garble aims to automatically detect which Go types are used with reflection, as obfuscating those types might break your program. Note that Garble obfuscates &lt;a href=&#34;https://raw.githubusercontent.com/burrowers/garble/master/#speed&#34;&gt;one package at a time&lt;/a&gt;, so if your reflection code inspects a type from an imported package, and your program broke, you may need to add a &#34;hint&#34; in the imported package:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Message struct {&#xA;    Command string&#xA;    Args    string&#xA;}&#xA;&#xA;// Never obfuscate the Message type.&#xA;var _ = reflect.TypeOf(Message{})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go plugins are not currently supported; see &lt;a href=&#34;https://github.com/burrowers/garble/issues/87&#34;&gt;#87&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Garble requires &lt;code&gt;git&lt;/code&gt; to patch the linker. That can be avoided once go-gitdiff supports &lt;a href=&#34;https://github.com/bluekeyes/go-gitdiff/issues/30&#34;&gt;non-strict patches&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome new contributors. If you would like to contribute, see &lt;a href=&#34;https://raw.githubusercontent.com/burrowers/garble/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; as a starting point.&lt;/p&gt;</summary>
  </entry>
</feed>