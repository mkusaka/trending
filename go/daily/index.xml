<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-04T01:46:27Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>inancgumus/learngo</title>
    <updated>2022-07-04T01:46:27Z</updated>
    <id>tag:github.com,2022-07-04:/inancgumus/learngo</id>
    <link href="https://github.com/inancgumus/learngo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;1000+ Hand-Crafted Go Examples, Exercises, and Quizzes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;A Huge Number of Go Examples, Exercises and Quizzes&lt;/h1&gt; &#xA;&lt;p&gt;Best way of learning is doing. Inside this repository, you will find thousands of Go examples, exercises and quizzes. I initially created this repository for my &lt;strong&gt;&lt;a href=&#34;https://www.udemy.com/course/learn-go-the-complete-bootcamp-course-golang/?referralCode=5CE6EB34E2B1EF4A7D37&#34;&gt;Go: Bootcamp Course&lt;/a&gt;&lt;/strong&gt;. Later on, I added a lot of exercises, and I wanted every programmer who is not yet enrolled in the course to learn for free as well. So here it is. Enjoy.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Available in the following languages:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/inancgumus/learngo&#34;&gt;English&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inancgumus/learngo/master/translation/spanish&#34;&gt;Spanish&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(WIP: Please Contribute)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/inancgumus/learngo/master/translation/chinese&#34;&gt;Chinese&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;(WIP: Please Contribute)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;❤️ Help other fellow developers&lt;/h2&gt; &#xA;&lt;p&gt;Sharing is free but caring is priceless. &lt;a href=&#34;https://twitter.com/intent/tweet?text=I%27m%20learning%20%23golang%20with%201000%2B%20hand-crafted%20examples%2C%20exercises%2C%20and%20quizzes.&amp;amp;url=https://github.com/inancgumus/learngo&amp;amp;via=inancgumus&#34;&gt;So, now please click here&lt;/a&gt; and share this repository on Twitter.&lt;/p&gt; &#xA;&lt;h2&gt;Stay in touch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/inancgumus&#34;&gt;Follow me on Twitter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;I usually tweet Go tips and tricks.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://twitter.com/inancgumus&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/inancgumus.svg?style=social&amp;amp;label=@inancgumus&#34; alt=&#34;@inancgumus&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://eepurl.com/c4DMNX&#34;&gt;Subscribe to my newsletter&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Get updates from me.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://blog.learngoprogramming.com&#34;&gt;Read my blog&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Followed by 5K+ developers, and contains dozens of illustrated articles about Go.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCYxepZhtnFIVRh8t5H_QAdg?view_as=subscriber&#34;&gt;Watch my Youtube channel&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Whole materials are licensed under the &lt;a rel=&#34;license&#34; href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;.&lt;br&gt; &lt;a rel=&#34;license&#34; href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;Creative Commons License&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FiloSottile/age</title>
    <updated>2022-07-04T01:46:27Z</updated>
    <id>tag:github.com,2022-07-04:/FiloSottile/age</id>
    <link href="https://github.com/FiloSottile/age" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, modern and secure encryption tool (and Go library) with small explicit keys, no config options, and UNIX-style composability.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;The age logo, an wireframe of St. Peters dome in Rome, with the text: age, file encryption&#34; width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/1225294/132245842-fda4da6a-1cea-4738-a3da-2dc860861c98.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/filippo.io/age&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/filippo.io/age.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://filippo.io/age/age.1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/age(1)-man%20page-lightgrey&#34; alt=&#34;man page&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://age-encryption.org/v1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%C2%A7%23-specification-blueviolet&#34; alt=&#34;C2SP specification&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;age is a simple, modern and secure file encryption tool, format, and Go library.&lt;/p&gt; &#xA;&lt;p&gt;It features small explicit keys, no config options, and UNIX-style composability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age-keygen -o key.txt&#xA;Public key: age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p&#xA;$ tar cvz ~/data | age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p &amp;gt; data.tar.gz.age&#xA;$ age --decrypt -i key.txt data.tar.gz.age &amp;gt; data.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The format specification is at &lt;a href=&#34;https://age-encryption.org/v1&#34;&gt;age-encryption.org/v1&lt;/a&gt;. age was designed by &lt;a href=&#34;https://twitter.com/Benjojo12&#34;&gt;@Benjojo12&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/FiloSottile&#34;&gt;@FiloSottile&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An alternative interoperable Rust implementation is available at &lt;a href=&#34;https://github.com/str4d/rage&#34;&gt;github.com/str4d/rage&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The author pronounces it &lt;code&gt;[aɡe̞]&lt;/code&gt;, like the Italian &lt;a href=&#34;https://translate.google.com/?sl=it&amp;amp;text=aghe&#34;&gt;“aghe”&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For the full documentation, read &lt;a href=&#34;https://filippo.io/age/age.1&#34;&gt;the age(1) man page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;    age [--encrypt] (-r RECIPIENT | -R PATH)... [--armor] [-o OUTPUT] [INPUT]&#xA;    age [--encrypt] --passphrase [--armor] [-o OUTPUT] [INPUT]&#xA;    age --decrypt [-i PATH]... [-o OUTPUT] [INPUT]&#xA;&#xA;Options:&#xA;    -e, --encrypt               Encrypt the input to the output. Default if omitted.&#xA;    -d, --decrypt               Decrypt the input to the output.&#xA;    -o, --output OUTPUT         Write the result to the file at path OUTPUT.&#xA;    -a, --armor                 Encrypt to a PEM encoded format.&#xA;    -p, --passphrase            Encrypt with a passphrase.&#xA;    -r, --recipient RECIPIENT   Encrypt to the specified RECIPIENT. Can be repeated.&#xA;    -R, --recipients-file PATH  Encrypt to recipients listed at PATH. Can be repeated.&#xA;    -i, --identity PATH         Use the identity file at PATH. Can be repeated.&#xA;&#xA;INPUT defaults to standard input, and OUTPUT defaults to standard output.&#xA;If OUTPUT exists, it will be overwritten.&#xA;&#xA;RECIPIENT can be an age public key generated by age-keygen (&#34;age1...&#34;)&#xA;or an SSH public key (&#34;ssh-ed25519 AAAA...&#34;, &#34;ssh-rsa AAAA...&#34;).&#xA;&#xA;Recipient files contain one or more recipients, one per line. Empty lines&#xA;and lines starting with &#34;#&#34; are ignored as comments. &#34;-&#34; may be used to&#xA;read recipients from standard input.&#xA;&#xA;Identity files contain one or more secret keys (&#34;AGE-SECRET-KEY-1...&#34;),&#xA;one per line, or an SSH key. Empty lines and lines starting with &#34;#&#34; are&#xA;ignored as comments. Passphrase encrypted age files can be used as&#xA;identity files. Multiple key files can be provided, and any unused ones&#xA;will be ignored. &#34;-&#34; may be used to read identities from standard input.&#xA;&#xA;When --encrypt is specified explicitly, -i can also be used to encrypt to an&#xA;identity file symmetrically, instead or in addition to normal recipients.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple recipients&lt;/h3&gt; &#xA;&lt;p&gt;Files can be encrypted to multiple recipients by repeating &lt;code&gt;-r/--recipient&lt;/code&gt;. Every recipient will be able to decrypt the file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -o example.jpg.age -r age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p \&#xA;    -r age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg example.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Recipient files&lt;/h4&gt; &#xA;&lt;p&gt;Multiple recipients can also be listed one per line in one or more files passed with the &lt;code&gt;-R/--recipients-file&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat recipients.txt&#xA;# Alice&#xA;age1ql3z7hjy54pw3hyww5ayyfg7zqgvc7w3j2elw8zmrj2kg5sfn9aqmcac8p&#xA;# Bob&#xA;age1lggyhqrw2nlhcxprm67z43rta597azn8gknawjehu9d9dl0jq3yqqvfafg&#xA;$ age -R recipients.txt example.jpg &amp;gt; example.jpg.age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the argument to &lt;code&gt;-R&lt;/code&gt; (or &lt;code&gt;-i&lt;/code&gt;) is &lt;code&gt;-&lt;/code&gt;, the file is read from standard input.&lt;/p&gt; &#xA;&lt;h3&gt;Passphrases&lt;/h3&gt; &#xA;&lt;p&gt;Files can be encrypted with a passphrase by using &lt;code&gt;-p/--passphrase&lt;/code&gt;. By default age will automatically generate a secure passphrase. Passphrase protected files are automatically detected at decrypt time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -p secrets.txt &amp;gt; secrets.txt.age&#xA;Enter passphrase (leave empty to autogenerate a secure one):&#xA;Using the autogenerated passphrase &#34;release-response-step-brand-wrap-ankle-pair-unusual-sword-train&#34;.&#xA;$ age -d secrets.txt.age &amp;gt; secrets.txt&#xA;Enter passphrase:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passphrase-protected key files&lt;/h3&gt; &#xA;&lt;p&gt;If an identity file passed to &lt;code&gt;-i&lt;/code&gt; is a passphrase encrypted age file, it will be automatically decrypted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age-keygen | age -p &amp;gt; key.age&#xA;Public key: age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5&#xA;Enter passphrase (leave empty to autogenerate a secure one):&#xA;Using the autogenerated passphrase &#34;hip-roast-boring-snake-mention-east-wasp-honey-input-actress&#34;.&#xA;$ age -r age1yhm4gctwfmrpz87tdslm550wrx6m79y9f2hdzt0lndjnehwj0ukqrjpyx5 secrets.txt &amp;gt; secrets.txt.age&#xA;$ age -d -i key.age secrets.txt.age &amp;gt; secrets.txt&#xA;Enter passphrase for identity file &#34;key.age&#34;:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Passphrase-protected identity files are not necessary for most use cases, where access to the encrypted identity file implies access to the whole system. However, they can be useful if the identity file is stored remotely.&lt;/p&gt; &#xA;&lt;h3&gt;SSH keys&lt;/h3&gt; &#xA;&lt;p&gt;As a convenience feature, age also supports encrypting to &lt;code&gt;ssh-rsa&lt;/code&gt; and &lt;code&gt;ssh-ed25519&lt;/code&gt; SSH public keys, and decrypting with the respective private key file. (&lt;code&gt;ssh-agent&lt;/code&gt; is not supported.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ age -R ~/.ssh/id_ed25519.pub example.jpg &amp;gt; example.jpg.age&#xA;$ age -d -i ~/.ssh/id_ed25519 example.jpg.age &amp;gt; example.jpg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that SSH key support employs more complex cryptography, and embeds a public key tag in the encrypted file, making it possible to track files that are encrypted to a specific public key.&lt;/p&gt; &#xA;&lt;h4&gt;Encrypting to a GitHub user&lt;/h4&gt; &#xA;&lt;p&gt;Combining SSH key support and &lt;code&gt;-R&lt;/code&gt;, you can easily encrypt a file to the SSH keys listed on a GitHub profile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl https://github.com/benjojo.keys | age -R - example.jpg &amp;gt; example.jpg.age&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that people might not protect SSH keys long-term, since they are revokable when used only for authentication, and that SSH keys held on YubiKeys can&#39;t be used to decrypt files.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Homebrew (macOS or Linux)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;brew install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MacPorts&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;port install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alpine Linux v3.15+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apk add age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pacman -S age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debian 11+ (Bullseye)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apt install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fedora 33+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;dnf install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gentoo Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;emerge app-crypt/age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NixOS / Nix&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;nix-env -i age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;openSUSE Tumbleweed&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;zypper install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ubuntu 21.04+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;apt install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Void Linux&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;xbps-install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pkg install age&lt;/code&gt; (security/age) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenBSD 6.7+&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;pkg_add age&lt;/code&gt; (security/age) &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chocolatey (Windows)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;choco install age.portable&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scoop (Windows)&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;scoop bucket add extras; scoop install age&lt;/code&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;On Windows, Linux, macOS, and FreeBSD you can use the pre-built binaries.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://dl.filippo.io/age/latest?for=linux/amd64&#xA;https://dl.filippo.io/age/v1.0.0-rc.1?for=darwin/arm64&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your system has &lt;a href=&#34;https://go.dev/dl/&#34;&gt;a supported version of Go&lt;/a&gt;, you can build from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install filippo.io/age/cmd/...@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Help from new packagers is very welcome.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-rod/rod</title>
    <updated>2022-07-04T01:46:27Z</updated>
    <id>tag:github.com,2022-07-04:/go-rod/rod</id>
    <link href="https://github.com/go-rod/rod" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Devtools driver for web automation and scraping&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-rod/rod&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/go-rod/rod.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/CpevuvY&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/719933559456006165.svg?sanitize=true&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://go-rod.github.io/&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://pkg.go.dev/github.com/go-rod/rod?tab=doc&#34;&gt;API reference&lt;/a&gt; | &lt;a href=&#34;https://github.com/orgs/go-rod/projects/1&#34;&gt;Management&lt;/a&gt; | &lt;a href=&#34;https://go-rod.github.io/#/faq/README&#34;&gt;FAQ&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Rod is a high-level driver directly based on &lt;a href=&#34;https://chromedevtools.github.io/devtools-protocol&#34;&gt;DevTools Protocol&lt;/a&gt;. It&#39;s designed for web automation and scraping for both high-level and low-level use, senior developers can use the low-level packages and functions to easily customize or build up their own version of Rod, the high-level functions are just examples to build a default version of Rod.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chained context design, intuitive to timeout or cancel the long-running task&lt;/li&gt; &#xA; &lt;li&gt;Auto-wait elements to be ready&lt;/li&gt; &#xA; &lt;li&gt;Debugging friendly, auto input tracing, remote monitoring headless browser&lt;/li&gt; &#xA; &lt;li&gt;Thread-safe for all operations&lt;/li&gt; &#xA; &lt;li&gt;Automatically find or download &lt;a href=&#34;https://raw.githubusercontent.com/go-rod/rod/master/lib/launcher&#34;&gt;browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;High-level helpers like WaitStable, WaitRequestIdle, HijackRequests, WaitDownload, etc&lt;/li&gt; &#xA; &lt;li&gt;Two-step WaitEvent design, never miss an event (&lt;a href=&#34;https://github.com/ysmood/goob&#34;&gt;how it works&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Correctly handles nested iframes or shadow DOMs&lt;/li&gt; &#xA; &lt;li&gt;No zombie browser process after the crash (&lt;a href=&#34;https://github.com/ysmood/leakless&#34;&gt;how it works&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-rod/rod/actions&#34;&gt;CI&lt;/a&gt; enforced 100% test coverage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/go-rod/rod/master/examples_test.go&#34;&gt;examples_test.go&lt;/a&gt; file first, then check the &lt;a href=&#34;https://raw.githubusercontent.com/go-rod/rod/master/lib/examples&#34;&gt;examples&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;For more detailed examples, please search the unit tests. Such as the usage of method &lt;code&gt;HandleAuth&lt;/code&gt;, you can search all the &lt;code&gt;*_test.go&lt;/code&gt; files that contain &lt;code&gt;HandleAuth&lt;/code&gt;, for example, use Github online &lt;a href=&#34;https://github.com/go-rod/rod/search?q=HandleAuth&amp;amp;unscoped_q=HandleAuth&#34;&gt;search in repository&lt;/a&gt;. You can also search the GitHub &lt;a href=&#34;https://github.com/go-rod/rod/issues&#34;&gt;issues&lt;/a&gt; or &lt;a href=&#34;https://github.com/go-rod/rod/discussions&#34;&gt;discussions&lt;/a&gt;, a lot of usage examples are recorded there.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-rod/rod/master/lib/examples/compare-chromedp&#34;&gt;Here&lt;/a&gt; is a comparison of the examples between rod and Chromedp.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions, please raise an &lt;a href=&#34;https://github.com/go-rod/rod/issues&#34;&gt;issues&lt;/a&gt;/&lt;a href=&#34;https://github.com/go-rod/rod/discussions&#34;&gt;discussions&lt;/a&gt; or join the &lt;a href=&#34;https://discord.gg/CpevuvY&#34;&gt;chat room&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Join us&lt;/h2&gt; &#xA;&lt;p&gt;Your help is more than welcome! Even just open an issue to ask a question may greatly help others.&lt;/p&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;http://www.catb.org/~esr/faqs/smart-questions.html&#34;&gt;How To Ask Questions The Smart Way&lt;/a&gt; before you ask questions.&lt;/p&gt; &#xA;&lt;p&gt;We use Github Projects to manage tasks, you can see the priority and progress of the issues &lt;a href=&#34;https://github.com/orgs/go-rod/projects/1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to contribute please read the &lt;a href=&#34;https://raw.githubusercontent.com/go-rod/rod/master/.github/CONTRIBUTING.md&#34;&gt;Contributor Guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>