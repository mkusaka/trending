<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-07T01:29:30Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>edoardottt/cariddi</title>
    <updated>2023-10-07T01:29:30Z</updated>
    <id>tag:github.com,2023-10-07:/edoardottt/cariddi</id>
    <link href="https://github.com/edoardottt/cariddi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Take a list of domains, crawl urls and scan for endpoints, secrets, api keys, file extensions, tokens and more&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/images/raw/main/cariddi/logo.png&#34;&gt;&lt;br&gt; &lt;b&gt;Take a list of domains, crawl urls and scan for endpoints, secrets, api keys, file extensions, tokens and more&lt;/b&gt;&lt;br&gt; &lt;br&gt; &#xA; &lt;!-- go-report-card --&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/edoardottt/cariddi&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/edoardottt/cariddi&#34; alt=&#34;go-report-card&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- workflows --&gt; &lt;a href=&#34;https://github.com/edoardottt/cariddi/actions&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/cariddi/workflows/Go/badge.svg?branch=main&#34; alt=&#34;workflows&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- ubuntu-build --&gt; &lt;a href=&#34;https://edoardoottavianelli.it&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/images/raw/main/cariddi/ubuntu-build.svg?sanitize=true&#34; alt=&#34;ubuntu-build&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- win10-build --&gt; &lt;a href=&#34;https://edoardoottavianelli.it&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/images/raw/main/cariddi/win10.svg?sanitize=true&#34; alt=&#34;win10-build&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- pr-welcome --&gt; &lt;a href=&#34;https://edoardoottavianelli.it&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/images/raw/main/cariddi/pr-welcome.svg?sanitize=true&#34; alt=&#34;pr-welcome&#34;&gt; &lt;/a&gt; &lt;br&gt; &#xA; &lt;!-- mainteinance --&gt; &lt;a href=&#34;https://edoardoottavianelli.it&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/images/raw/main/cariddi/maintained-yes.svg?sanitize=true&#34; alt=&#34;Mainteinance yes&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- ask-me-anything --&gt; &lt;a href=&#34;https://edoardoottavianelli.it&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/images/raw/main/cariddi/ask-me-anything.svg?sanitize=true&#34; alt=&#34;ask me anything&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- license GPLv3.0 --&gt; &lt;a href=&#34;https://github.com/edoardottt/cariddi/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/images/raw/main/cariddi/license-GPL3.svg?sanitize=true&#34; alt=&#34;license-GPL3&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;sub&gt; Coded with 💙 by edoardottt &lt;/sub&gt; &lt;br&gt; &#xA; &lt;!--Tweet button--&gt; &lt;a href=&#34;https://twitter.com/intent/tweet?url=https://github.com/edoardottt/cariddi&amp;amp;text=Take%20a%20list%20of%20domains,%20crawl%20urls%20and%20scan%20for%20endpoints,%20secrets,%20api%20keys,%20file%20extensions,%20tokens%20and%20more...%20%23network%20%23security%20%23infosec%20%23oss%20%23github%20%23bugbounty%20%23linux&#34; target=&#34;_blank&#34;&gt;Share on Twitter! &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/edoardottt/cariddi/main/#preview-bar_chart&#34;&gt;Preview&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/edoardottt/cariddi/main/#installation-&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/edoardottt/cariddi/main/#get-started-&#34;&gt;Get Started&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/edoardottt/cariddi/main/#examples-&#34;&gt;Examples&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/edoardottt/cariddi/main/#changelog-&#34;&gt;Changelog&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/edoardottt/cariddi/main/#contributing-&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/edoardottt/cariddi/main/#license-&#34;&gt;License&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Preview 📊&lt;/h2&gt; &#xA;&lt;!--[![asciicast](https://asciinema.org/a/415989.svg)](https://asciinema.org/a/415989)--&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/edoardottt/images/raw/main/cariddi/cariddi.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation 📡&lt;/h2&gt; &#xA;&lt;h3&gt;Using Snap&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install cariddi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Go&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install -v github.com/edoardottt/cariddi/cmd/cariddi@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;You need &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/edoardottt/cariddi.git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd cariddi&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;go get ./...&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;make linux&lt;/code&gt; (to install)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;make unlinux&lt;/code&gt; (to uninstall)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Or in one line: &lt;code&gt;git clone https://github.com/edoardottt/cariddi.git; cd cariddi; go get; make linux&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt; (executable works only in cariddi folder.)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/edoardottt/cariddi.git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd cariddi&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;go get ./...&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.\make.bat windows&lt;/code&gt; (to install)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;.\make.bat unwindows&lt;/code&gt; (to uninstall)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started 🎉&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;cariddi -h&lt;/code&gt; prints the help.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage of cariddi:&#xA;  -c int&#xA;     Concurrency level. (default 20)&#xA;  -cache&#xA;     Use the .cariddi_cache folder as cache.&#xA;  -d int&#xA;     Delay between a page crawled and another.&#xA;  -debug&#xA;     Print debug information while crawling.&#xA;  -e Hunt for juicy endpoints.&#xA;  -ef string&#xA;     Use an external file (txt, one per line) to use custom parameters for endpoints hunting.&#xA;  -err&#xA;     Hunt for errors in websites.&#xA;  -examples&#xA;     Print the examples.&#xA;  -ext int&#xA;     Hunt for juicy file extensions. Integer from 1(juicy) to 7(not juicy).&#xA;  -h Print the help.&#xA;  -headers string&#xA;     Use custom headers for each request E.g. -headers &#34;Cookie: auth=yes;;Client: type=2&#34;.&#xA;  -headersfile string&#xA;     Read from an external file custom headers (same format of headers flag).&#xA;  -json&#xA;     Print the output as JSON in stdout.&#xA;  -i string&#xA;     Ignore the URL containing at least one of the elements of this array.&#xA;  -info&#xA;     Hunt for useful informations in websites.&#xA;  -intensive&#xA;     Crawl searching for resources matching 2nd level domain.&#xA;  -it string&#xA;     Ignore the URL containing at least one of the lines of this file.&#xA;  -oh string&#xA;     Write the output into an HTML file.&#xA;  -ot string&#xA;     Write the output into a TXT file.&#xA;  -plain&#xA;     Print only the results.&#xA;  -proxy string&#xA;     Set a Proxy to be used (http and socks5 supported).&#xA;  -rua&#xA;     Use a random browser user agent on every request.&#xA;  -s Hunt for secrets.&#xA;  -sf string&#xA;     Use an external file (txt, one per line) to use custom regexes for secrets hunting.&#xA;  -sr&#xA;     Store HTTP responses.&#xA;  -t int&#xA;     Set timeout for the requests. (default 10)&#xA;  -ua string&#xA;     Use a custom User Agent.&#xA;  -version&#xA;     Print the version.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples 💡&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cariddi -version&lt;/code&gt; (Print the version)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cariddi -h&lt;/code&gt; (Print the help)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cariddi -examples&lt;/code&gt; (Print the examples)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -s&lt;/code&gt; (Hunt for secrets)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -d 2&lt;/code&gt; (2 seconds between a page crawled and another)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -c 200&lt;/code&gt; (Set the concurrency level to 200)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -e&lt;/code&gt; (Hunt for juicy endpoints)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -plain&lt;/code&gt; (Print only results)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -ot target_name&lt;/code&gt; (Results in txt file)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -oh target_name&lt;/code&gt; (Results in html file)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -ext 2&lt;/code&gt; (Hunt for juicy (level 2 out of 7) files)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -e -ef endpoints_file&lt;/code&gt; (Hunt for custom endpoints)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -s -sf secrets_file&lt;/code&gt; (Hunt for custom secrets)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -i forum,blog,community,open&lt;/code&gt; (Ignore urls containing these words)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -it ignore_file&lt;/code&gt; (Ignore urls containing at least one line in the input file)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -cache&lt;/code&gt; (Use the .cariddi_cache folder as cache)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -t 5&lt;/code&gt; (Set the timeout for the requests)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -intensive&lt;/code&gt; (Crawl searching also subdomains, same as &lt;code&gt;*.target.com&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -rua&lt;/code&gt; (Use a random browser user agent on every request)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -proxy http://127.0.0.1:8080&lt;/code&gt; (Set a Proxy, http and socks5 supported)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -headers &#34;Cookie: auth=admin;type=2;; X-Custom: customHeader&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -headersfile headers.txt&lt;/code&gt; (Read from an external file custom headers)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -err&lt;/code&gt; (Hunt for errors in websites)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -info&lt;/code&gt; (Hunt for useful informations in websites)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -debug&lt;/code&gt; (Print debug information while crawling)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -ua &#34;Custom User Agent&#34;&lt;/code&gt; (Use a custom User Agent)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -json&lt;/code&gt; (Print the output as JSON in stdout)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cat urls | cariddi -sr&lt;/code&gt; (Store HTTP responses)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Windows:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;use &lt;code&gt;powershell.exe -Command &#34;cat urls | .\cariddi.exe&#34;&lt;/code&gt; inside the Command prompt&lt;/li&gt; &#xA;   &lt;li&gt;or just &lt;code&gt;cat urls | cariddi.exe&lt;/code&gt; using PowerShell&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To integrate cariddi with Burpsuite &lt;a href=&#34;https://github.com/edoardottt/cariddi/wiki/BurpSuite-Integration&#34;&gt;make sure to follow these steps&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog 📌&lt;/h2&gt; &#xA;&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&#34;https://github.com/edoardottt/cariddi/releases&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing 🛠&lt;/h2&gt; &#xA;&lt;p&gt;Just open an &lt;a href=&#34;https://github.com/edoardottt/cariddi/issues&#34;&gt;issue&lt;/a&gt;/&lt;a href=&#34;https://github.com/edoardottt/cariddi/pulls&#34;&gt;pull request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before opening a pull request, download &lt;a href=&#34;https://golangci-lint.run/usage/install/&#34;&gt;golangci-lint&lt;/a&gt; and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;golangci-lint run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If there aren&#39;t errors, go ahead :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Help me building this!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to: &lt;a href=&#34;http://go-colly.org/&#34;&gt;go-colly&lt;/a&gt;, &lt;a href=&#34;https://github.com/zricethezav/gitleaks/raw/master/config/default.go&#34;&gt;zricethezav&lt;/a&gt;, &lt;a href=&#34;https://github.com/projectdiscovery/nuclei-templates/tree/master/file/keys&#34;&gt;projectdiscovery&lt;/a&gt;, &lt;a href=&#34;https://github.com/tomnomnom/gf/tree/master/examples&#34;&gt;tomnomnom&lt;/a&gt;, &lt;a href=&#34;https://github.com/hahwul/RegexPassive&#34;&gt;RegexPassive&lt;/a&gt; and &lt;a href=&#34;https://github.com/edoardottt/cariddi/wiki/Contributors&#34;&gt;all the contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License 📝&lt;/h2&gt; &#xA;&lt;p&gt;This repository is under &lt;a href=&#34;https://github.com/edoardottt/cariddi/raw/main/LICENSE&#34;&gt;GNU General Public License v3.0&lt;/a&gt;.&lt;br&gt; &lt;a href=&#34;https://www.edoardoottavianelli.it&#34;&gt;edoardoottavianelli.it&lt;/a&gt; to contact me.&lt;/p&gt;</summary>
  </entry>
</feed>