<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-25T01:35:33Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Edouard127/reddit-placebot-2023</title>
    <updated>2023-07-25T01:35:33Z</updated>
    <id>tag:github.com,2023-07-25:/Edouard127/reddit-placebot-2023</id>
    <link href="https://github.com/Edouard127/reddit-placebot-2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A bot for r/place that doesn&#39;t use the api&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Reddit place bot 2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üëç API-less authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üëç Worker system&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; üëç Place pixels&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.20+&lt;/li&gt; &#xA; &lt;li&gt;The tor expert bundle (&lt;a href=&#34;https://www.torproject.org/download/tor/&#34;&gt;https://www.torproject.org/download/tor/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;A connection to the internet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;You need to download the Tor expert bundle from &lt;a href=&#34;https://www.torproject.org/download/tor/&#34;&gt;https://www.torproject.org/download/tor/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;FOR WINDOWS USERS: You need to add the tor.exe to your PATH, you can do that by following this tutorial: &lt;a href=&#34;https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/&#34;&gt;https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you wish to build, the project, click &lt;a href=&#34;https://raw.githubusercontent.com/Edouard127/reddit-placebot-2023/master/#how-to-build&#34;&gt;here to get the build tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then you need to either &lt;a href=&#34;https://raw.githubusercontent.com/Edouard127/reddit-placebot-2023/master/#how-to-build&#34;&gt;build the project&lt;/a&gt;, or download the latest build from the actions tab, click on the first action and go to the artifacts.&lt;/p&gt; &#xA;&lt;p&gt;Once you have to program, you must add users in the file data/users.json.rename and then rename it to data/users.json&lt;/p&gt; &#xA;&lt;p&gt;After that, you have to put an image in the BMP format in the images folder, named image.bmp&lt;/p&gt; &#xA;&lt;p&gt;Then, you can run the program with &lt;code&gt;./redditplacebot -minX=64 -minY=64&lt;/code&gt; to start the program, the &lt;code&gt;minX&lt;/code&gt; and &lt;code&gt;minY&lt;/code&gt; flags represent the top left of your image in the r/place space.&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;Download and install Golang 1.20+ from &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open a terminal and run &lt;code&gt;go build .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;As simple as that&lt;/p&gt; &#xA;&lt;h2&gt;How does it work&lt;/h2&gt; &#xA;&lt;p&gt;When you put a new user, it will log in using a headless browser by allocating a browser access to that specific client because rod doesn&#39;t support multithreaded browser, and then navigate to the r/place reddit.&lt;/p&gt; &#xA;&lt;p&gt;It will then intercept the websocket to extract the user&#39;s token, free the allocation and give it to the next one.&lt;/p&gt; &#xA;&lt;p&gt;When the process it finished, it will save all the VALID users to the users.json file.&lt;/p&gt; &#xA;&lt;p&gt;When you run the program again, it will load the users from the file without going through the login process.&lt;/p&gt; &#xA;&lt;p&gt;The worker system is pretty straightforward, when a new user joins, it will be added to the queue.&lt;/p&gt; &#xA;&lt;p&gt;At every second, there is a ticker that will invoke a queue checking, it will try to use all the clients to place a pixel.&lt;/p&gt; &#xA;&lt;p&gt;Each client has an assigned pair of point to color, which represents the pixel that must be exchanged for the right one, of your image.&lt;/p&gt; &#xA;&lt;h2&gt;How to avoid getting banned&lt;/h2&gt; &#xA;&lt;p&gt;Use a rotating tor configuration&lt;/p&gt; &#xA;&lt;p&gt;Put this in a file named &lt;code&gt;torrc&lt;/code&gt; on Windows at %APPDATA%\tor\&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CircuitBuildTimeout 30&#xA;LearnCircuitBuildTimeout 0 &#xA;MaxCircuitDirtiness 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will assure a new circuit every 30 seconds&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rystaf/mlmym</title>
    <updated>2023-07-25T01:35:33Z</updated>
    <id>tag:github.com,2023-07-25:/rystaf/mlmym</id>
    <link href="https://github.com/rystaf/mlmym" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a familiar desktop experience for lemmy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mlmym&lt;/h1&gt; &#xA;&lt;p&gt;a familiar desktop experience for &lt;a href=&#34;https://join-lemmy.org&#34;&gt;lemmy&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rystaf/mlmym/main/screenshot1.png?raw=true&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;deployment&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -p &#34;8080:8080&#34; ghcr.io/rystaf/mlmym:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;config&lt;/h3&gt; &#xA;&lt;p&gt;Set the environment variable &lt;code&gt;LEMMY_DOMAIN&lt;/code&gt; to run in single instance mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -e LEMMY_DOMAIN=&#39;lemmydomain.com&#39; -p &#34;8080:8080&#34; ghcr.io/rystaf/mlmym:latest&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>go-nerds/cli-algorithms-visualizer</title>
    <updated>2023-07-25T01:35:33Z</updated>
    <id>tag:github.com,2023-07-25:/go-nerds/cli-algorithms-visualizer</id>
    <link href="https://github.com/go-nerds/cli-algorithms-visualizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple CLI-based Algorithms Visualizer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cli-algorithms-visualizer&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This project is an algorithms visualizer implemented in Go. It allows you to observe various algorithms in action. The visualizer provides a graphical representation of each step, making it easier to understand how the algorithms work.&lt;/p&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository to your local machine:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/go-nerds/cli-algorithms-visualizer.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the project:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the executable file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.\&amp;lt;executable_file_name&amp;gt;.exe // Windows OS&#xA;./&amp;lt;executable_file_name&amp;gt; // Linux || Mac OS&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License. See the &lt;a href=&#34;https://github.com/go-nerds/cli-algorithms-visualizer/raw/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>