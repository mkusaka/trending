<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-22T01:31:57Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>modelcontextprotocol/registry</title>
    <updated>2025-05-22T01:31:57Z</updated>
    <id>tag:github.com,2025-05-22:/modelcontextprotocol/registry</id>
    <link href="https://github.com/modelcontextprotocol/registry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community driven registry service for Model Context Protocol (MCP) servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Registry&lt;/h1&gt; &#xA;&lt;p&gt;A community driven registry service for Model Context Protocol (MCP) servers.&lt;/p&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is being built in the open and is currently in the early stages of development. Please see the &lt;a href=&#34;https://github.com/modelcontextprotocol/registry/discussions/11&#34;&gt;overview discussion&lt;/a&gt; for the project scope and goals. If you would like to contribute, please check out the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/registry/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The MCP Registry service provides a centralized repository for MCP server entries. It allows discovery and management of various MCP implementations with their associated metadata, configurations, and capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RESTful API for managing MCP registry entries (list, get, create, update, delete)&lt;/li&gt; &#xA; &lt;li&gt;Health check endpoint for service monitoring&lt;/li&gt; &#xA; &lt;li&gt;Support for various environment configurations&lt;/li&gt; &#xA; &lt;li&gt;Graceful shutdown handling&lt;/li&gt; &#xA; &lt;li&gt;MongoDB and in-memory database support&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive API documentation&lt;/li&gt; &#xA; &lt;li&gt;Pagination support for listing registry entries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.18 or later&lt;/li&gt; &#xA; &lt;li&gt;MongoDB&lt;/li&gt; &#xA; &lt;li&gt;Docker (optional, but recommended for development)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to get the registry running is to use &lt;code&gt;docker compose&lt;/code&gt;. This will setup the MCP Registry service, import the seed data and run MongoDB in a local Docker environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build the Docker image&#xA;docker build -t registry .&#xA;&#xA;# Run the registry and MongoDB with docker compose&#xA;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the MCP Registry service and MongoDB with Docker, exposing it on port 8080.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;If you prefer to run the service locally without Docker, you can build and run it directly using Go.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build a registry executable&#xA;go build ./cmd/registry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create the &lt;code&gt;registry&lt;/code&gt; binary in the current directory. You&#39;ll need to have MongoDB running locally or with Docker.&lt;/p&gt; &#xA;&lt;p&gt;By default, the service will run on &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── api/           # OpenApi specification&#xA;├── cmd/           # Application entry points&#xA;├── config/        # Configuration files&#xA;├── internal/      # Private application code&#xA;│   ├── api/       # HTTP server and request handlers&#xA;│   ├── config/    # Configuration management&#xA;│   ├── model/     # Data models&#xA;│   └── service/   # Business logic&#xA;├── pkg/           # Public libraries&#xA;├── scripts/       # Utility scripts&#xA;└── tools/         # Command line tools&#xA;    └── publisher/ # Tool to publish MCP servers to the registry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The API is documented using Swagger/OpenAPI. You can access the interactive Swagger UI at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/v0/swagger/index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This provides a complete reference of all endpoints with request/response schemas and allows you to test the API directly from your browser.&lt;/p&gt; &#xA;&lt;h2&gt;API Endpoints&lt;/h2&gt; &#xA;&lt;h3&gt;Health Check&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /v0/health&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Returns the health status of the service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;status&#34;: &#34;ok&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Registry Endpoints&lt;/h3&gt; &#xA;&lt;h4&gt;List Registry Server Entries&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /v0/servers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lists MCP registry server entries with pagination support.&lt;/p&gt; &#xA;&lt;p&gt;Query parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;limit&lt;/code&gt;: Maximum number of entries to return (default: 30, max: 100)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt;: Pagination cursor for retrieving next set of results&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Response example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;servers&#34;: [&#xA;    {&#xA;      &#34;id&#34;: &#34;123e4567-e89b-12d3-a456-426614174000&#34;,&#xA;      &#34;name&#34;: &#34;Example MCP Server&#34;,&#xA;      &#34;url&#34;: &#34;https://example.com/mcp&#34;,&#xA;      &#34;description&#34;: &#34;An example MCP server&#34;,&#xA;      &#34;created_at&#34;: &#34;2025-05-17T17:34:22.912Z&#34;,&#xA;      &#34;updated_at&#34;: &#34;2025-05-17T17:34:22.912Z&#34;&#xA;    }&#xA;  ],&#xA;  &#34;metadata&#34;: {&#xA;    &#34;next_cursor&#34;: &#34;123e4567-e89b-12d3-a456-426614174000&#34;,&#xA;    &#34;count&#34;: 30&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Get Server Details&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /v0/servers/{id}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Retrieves detailed information about a specific MCP server entry.&lt;/p&gt; &#xA;&lt;p&gt;Path parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt;: Unique identifier of the server entry&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Response example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: &#34;01129bff-3d65-4e3d-8e82-6f2f269f818c&#34;,&#xA;  &#34;name&#34;: &#34;io.github.gongrzhe/redis-mcp-server&#34;,&#xA;  &#34;description&#34;: &#34;A Redis MCP server (pushed to https://github.com/modelcontextprotocol/servers/tree/main/src/redis) implementation for interacting with Redis databases. This server enables LLMs to interact with Redis key-value stores through a set of standardized tools.&#34;,&#xA;  &#34;repository&#34;: {&#xA;    &#34;url&#34;: &#34;https://github.com/GongRzhe/REDIS-MCP-Server&#34;,&#xA;    &#34;source&#34;: &#34;github&#34;,&#xA;    &#34;id&#34;: &#34;907849235&#34;&#xA;  },&#xA;  &#34;version_detail&#34;: {&#xA;    &#34;version&#34;: &#34;0.0.1-seed&#34;,&#xA;    &#34;release_date&#34;: &#34;2025-05-16T19:13:21Z&#34;,&#xA;    &#34;is_latest&#34;: true&#xA;  },&#xA;  &#34;package_canonical&#34;: &#34;docker&#34;,&#xA;  &#34;packages&#34;: [&#xA;    {&#xA;      &#34;registry_name&#34;: &#34;docker&#34;,&#xA;      &#34;name&#34;: &#34;@gongrzhe/server-redis-mcp&#34;,&#xA;      &#34;version&#34;: &#34;1.0.0&#34;,&#xA;      &#34;package_arguments&#34;: [&#xA;        {&#xA;          &#34;description&#34;: &#34;Docker image to run&#34;,&#xA;          &#34;is_required&#34;: true,&#xA;          &#34;format&#34;: &#34;string&#34;,&#xA;          &#34;value&#34;: &#34;mcp/redis&#34;,&#xA;          &#34;default&#34;: &#34;mcp/redis&#34;,&#xA;          &#34;type&#34;: &#34;positional&#34;,&#xA;          &#34;value_hint&#34;: &#34;mcp/redis&#34;&#xA;        },&#xA;        {&#xA;          &#34;description&#34;: &#34;Redis server connection string&#34;,&#xA;          &#34;is_required&#34;: true,&#xA;          &#34;format&#34;: &#34;string&#34;,&#xA;          &#34;value&#34;: &#34;redis://host.docker.internal:6379&#34;,&#xA;          &#34;default&#34;: &#34;redis://host.docker.internal:6379&#34;,&#xA;          &#34;type&#34;: &#34;positional&#34;,&#xA;          &#34;value_hint&#34;: &#34;host.docker.internal:6379&#34;&#xA;        }&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Publish a Server Entry&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;POST /v0/publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Publishes a new MCP server entry to the registry. Authentication is required via Bearer token in the Authorization header.&lt;/p&gt; &#xA;&lt;p&gt;Headers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Authorization&lt;/code&gt;: Bearer token for authentication (e.g., &lt;code&gt;Bearer your_token_here&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt;: application/json&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Request body example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;description&#34;: &#34;&amp;lt;your description here&amp;gt;&#34;,&#xA;    &#34;name&#34;: &#34;io.github.&amp;lt;owner&amp;gt;/&amp;lt;server-name&amp;gt;&#34;,&#xA;    &#34;package_canonical&#34;: &#34;&amp;lt;package_registry&#34;,&#xA;    &#34;packages&#34;: [&#xA;        {&#xA;            &#34;registry_name&#34;: &#34;npm&#34;,&#xA;            &#34;name&#34;: &#34;@&amp;lt;owner&amp;gt;/&amp;lt;server-name&amp;gt;&#34;,&#xA;            &#34;version&#34;: &#34;0.2.23&#34;,&#xA;            &#34;package_arguments&#34;: [&#xA;                {&#xA;                    &#34;description&#34;: &#34;Specify services and permissions.&#34;,&#xA;                    &#34;is_required&#34;: true,&#xA;                    &#34;format&#34;: &#34;string&#34;,&#xA;                    &#34;value&#34;: &#34;-s&#34;,&#xA;                    &#34;default&#34;: &#34;-s&#34;,&#xA;                    &#34;type&#34;: &#34;positional&#34;,&#xA;                    &#34;value_hint&#34;: &#34;-s&#34;&#xA;                }&#xA;            ],&#xA;            &#34;environment_variables&#34;: [&#xA;                {&#xA;                    &#34;description&#34;: &#34;API Key to access the server&#34;,&#xA;                    &#34;name&#34;: &#34;API_KEY&#34;&#xA;                }&#xA;            ]&#xA;        },{&#xA;            &#34;registry_name&#34;: &#34;docker&#34;,&#xA;            &#34;name&#34;: &#34;@&amp;lt;owner&amp;gt;/&amp;lt;server-name&amp;gt;-cli&#34;,&#xA;            &#34;version&#34;: &#34;0.123.223&#34;,&#xA;            &#34;runtime_hint&#34;: &#34;docker&#34;,&#xA;            &#34;runtime_arguments&#34;: [&#xA;                {&#xA;                    &#34;description&#34;: &#34;Specify services and permissions.&#34;,&#xA;                    &#34;is_required&#34;: true,&#xA;                    &#34;format&#34;: &#34;string&#34;,&#xA;                    &#34;value&#34;: &#34;--mount&#34;,&#xA;                    &#34;default&#34;: &#34;--mount&#34;,&#xA;                    &#34;type&#34;: &#34;positional&#34;,&#xA;                    &#34;value_hint&#34;: &#34;--mount&#34;&#xA;                }&#xA;            ],&#xA;            &#34;environment_variables&#34;: [&#xA;                {&#xA;                    &#34;description&#34;: &#34;API Key to access the server&#34;,&#xA;                    &#34;name&#34;: &#34;API_KEY&#34;&#xA;                }&#xA;            ]&#xA;        }&#xA;    ],&#xA;    &#34;repository&#34;: {&#xA;        &#34;url&#34;: &#34;https://github.com//&amp;lt;owner&amp;gt;/&amp;lt;server-name&amp;gt;&#34;,&#xA;        &#34;source&#34;: &#34;github&#34;&#xA;    },&#xA;    &#34;version_detail&#34;: {&#xA;        &#34;version&#34;: &#34;0.0.1-&amp;lt;publisher_version&amp;gt;&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;message&#34;: &#34;Server publication successful&#34;,&#xA;  &#34;id&#34;: &#34;1234567890abcdef12345678&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ping Endpoint&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /v0/ping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Simple ping endpoint that returns environment configuration information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;environment&#34;: &#34;dev&#34;,&#xA;  &#34;version&#34;: &#34;registry-&amp;lt;sha&amp;gt;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The service can be configured using environment variables:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_APP_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Application version&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dev&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_COLLECTION_NAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MongoDB collection name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;servers_v2&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_DATABASE_NAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MongoDB database name&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mcp-registry&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_DATABASE_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;MongoDB connection string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mongodb://localhost:27017&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_GITHUB_CLIENT_ID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GitHub App Client ID&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_GITHUB_CLIENT_SECRET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GitHub App Client Secret&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_LOG_LEVEL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Log level&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;info&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_SEED_FILE_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Path to import seed file&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;data/seed.json&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_SEED_IMPORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Import &lt;code&gt;seed.json&lt;/code&gt; on first run&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MCP_REGISTRY_SERVER_ADDRESS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Listen address for the server&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;:8080&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Run the test script to validate API endpoints:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/test_endpoints.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify specific endpoints to test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/test_endpoints.sh --endpoint health&#xA;./scripts/test_endpoints.sh --endpoint servers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/registry/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/modelcontextprotocol/registry/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TencentCloud/tencentcloud-sdk-go</title>
    <updated>2025-05-22T01:31:57Z</updated>
    <id>tag:github.com,2025-05-22:/TencentCloud/tencentcloud-sdk-go</id>
    <link href="https://github.com/TencentCloud/tencentcloud-sdk-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tencent Cloud API 3.0 SDK for Golang&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cloud.tencent.com/&#34;&gt;&lt;img src=&#34;https://imgcache.qq.com/qcloud/tcloud_dtc/static/static_source_business/eec00e38-a178-479f-83d4-853a18575ac4.png&#34; height=&#34;100&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Tencent Cloud SDK for Go&lt;/h1&gt; &#xA;&lt;h1&gt;目录&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E7%AE%80%E4%BB%8B&#34;&gt;简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E8%8E%B7%E5%8F%96%E5%AE%89%E8%A3%85&#34;&gt;安装&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B&#34;&gt;快速开始&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE&#34;&gt;相关配置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D&#34;&gt;功能介绍&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E5%87%AD%E8%AF%81%E7%AE%A1%E7%90%86&#34;&gt;凭证管理&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86&#34;&gt;错误处理&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#Common-Client&#34;&gt;Common Client&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E8%87%AA%E5%AE%9A%E4%B9%89-header&#34;&gt;自定义Header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#http-%E4%BB%A3%E7%90%86&#34;&gt;http代理&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E8%AF%B7%E6%B1%82%E9%87%8D%E8%AF%95&#34;&gt;请求重试&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/#%E7%A9%BA%E6%95%B0%E7%BB%84%E5%92%8Comitempty&#34;&gt;空数组和omitempty&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;简介&lt;/h1&gt; &#xA;&lt;p&gt;欢迎使用腾讯云开发者工具套件（SDK），此 SDK 是云 API 3.0 平台的配套开发工具。&lt;/p&gt; &#xA;&lt;h1&gt;获取安装&lt;/h1&gt; &#xA;&lt;h2&gt;依赖环境&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go 1.9 版本及以上（如使用 go mod 需要 Go 1.14）。&lt;/li&gt; &#xA; &lt;li&gt;部分产品需要在腾讯云控制台开通后，才能正常调用此产品的接口。&lt;/li&gt; &#xA; &lt;li&gt;在腾讯云控制台 &lt;a href=&#34;https://console.cloud.tencent.com/cam/capi&#34;&gt;访问管理&lt;/a&gt; 页面获取密钥 SecretID 和 SecretKey，请务必妥善保管，或者使用更安全的临时安全凭证。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;通过go get安装（推荐）&lt;/h2&gt; &#xA;&lt;p&gt;推荐使用腾讯云镜像加速下载：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Linux 或 MacOS:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GOPROXY=https://mirrors.tencent.com/go/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;set GOPROXY=https://mirrors.tencent.com/go/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;按需安装（推荐）&lt;/h2&gt; &#xA;&lt;p&gt;注意：此安装方式仅支持使用 &lt;strong&gt;Go Modules&lt;/strong&gt; 模式进行依赖管理，即环境变量 &lt;code&gt;GO111MODULE=auto&lt;/code&gt;或者&lt;code&gt;GO111MODULE=on&lt;/code&gt;, 并且在您的项目中执行了 &lt;code&gt;go mod init xxx&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;安装指定产品 SDK（推荐）&lt;/h3&gt; &#xA;&lt;p&gt;v1.0.170后可以按照产品下载，您只需下载基础包和对应的产品包(如cvm)即可，不需要下载全部的产品，从而加快您构建镜像或者编译的速度：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;安装公共基础包：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -v -u github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;安装对应的产品包(如cvm):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get -v -u github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;具体产品的包名缩写请参考 &lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/products.md&#34;&gt;products.md&lt;/a&gt; 中的包名字段。&lt;/p&gt; &#xA;&lt;h3&gt;注意事项&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果同时安装多个产品的包，建议多个产品的包和 common 包保持在同一个版本。&lt;/li&gt; &#xA; &lt;li&gt;为了支持 go mod，SDK 版本号从 v3.x 降到了 v1.x。并于2021.05.10移除了所有&lt;code&gt;v3.0.*&lt;/code&gt;和&lt;code&gt;3.0.*&lt;/code&gt;的tag，如需追溯以前的tag，请参考项目根目录下的 &lt;code&gt;commit2tag&lt;/code&gt; 文件。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;通过源码安装&lt;/h2&gt; &#xA;&lt;p&gt;前往代码托管地址 &lt;a href=&#34;https://github.com/tencentcloud/tencentcloud-sdk-go&#34;&gt;Github&lt;/a&gt; 或者 &lt;a href=&#34;https://gitee.com/tencentcloud/tencentcloud-sdk-go&#34;&gt;Gitee&lt;/a&gt; 下载最新代码，解压后安装到 $GOPATH/src/github.com/tencentcloud 目录下。&lt;/p&gt; &#xA;&lt;h1&gt;快速开始&lt;/h1&gt; &#xA;&lt;p&gt;每个接口都有一个对应的 Request 结构和一个 Response 结构。例如云服务器的查询实例列表接口 DescribeInstances 有对应的请求结构体 DescribeInstancesRequest 和返回结构体 DescribeInstancesResponse 。&lt;/p&gt; &#xA;&lt;p&gt;下面以云服务器查询实例列表接口为例，介绍 SDK 的基础用法。&lt;/p&gt; &#xA;&lt;h2&gt;简化版&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;    &#34;os&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/regions&#34;&#xA;&#x9;cvm &#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// 硬编码密钥到代码中有可能随代码泄露而暴露，有安全隐患，并不推荐。&#xA;&#x9;// 为了保护密钥安全，建议将密钥设置在环境变量中或者配置文件中，请参考本文凭证管理章节。&#xA;&#xA;&#x9;// 1. 可以使用 NewCredential 来创建一个普通的密钥&#xA;&#x9;credential := common.NewCredential(&#xA;&#x9;&#x9;os.Getenv(&#34;TENCENTCLOUD_SECRET_ID&#34;),&#xA;&#x9;&#x9;os.Getenv(&#34;TENCENTCLOUD_SECRET_KEY&#34;),&#xA;&#x9;)&#xA;&#xA;&#x9;// 2. 也可以使用 NewTokenCredential 来创建一个带 Token 的临时密钥&#xA;&#x9;// 请参阅 https://cloud.tencent.com/document/product/1312/48169 来了解如何获得临时密钥&#xA;&#x9;//credential := common.NewTokenCredential(&#xA;&#x9;//&#x9;os.Getenv(&#34;TENCENTCLOUD_SECRET_ID&#34;),&#xA;&#x9;//&#x9;os.Getenv(&#34;TENCENTCLOUD_SECRET_KEY&#34;),&#xA;&#x9;//&#x9;os.Getenv(&#34;TENCENTCLOUD_TOKEN&#34;),&#xA;&#x9;//)&#xA;&#x9;client, _ := cvm.NewClient(credential, regions.Guangzhou, profile.NewClientProfile())&#xA;&#xA;&#x9;request := cvm.NewDescribeInstancesRequest()&#xA;&#x9;response, err := client.DescribeInstances(request)&#xA;&#xA;&#x9;if _, ok := err.(*errors.TencentCloudSDKError); ok {&#xA;&#x9;&#x9;fmt.Printf(&#34;An API error has returned: %s&#34;, err)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;fmt.Printf(&#34;%s\n&#34;, response.ToJsonString())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;详细版&lt;/h2&gt; &#xA;&lt;p&gt;出于演示的目的，有一些非必要的代码，例如对默认配置的修改，以尽量展示 SDK 的功能。在实际编写代码使用 SDK 的时候，建议尽量使用默认配置，酌情修改。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;    &#34;os&#34;&#xA;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/regions&#34;&#xA;&#x9;cvm &#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312&#34;&#xA;)&#xA;&#xA;func main() {&#xA;        // 必要步骤：&#xA;        // 实例化一个认证对象，入参需要传入腾讯云账户密钥对 SecretId，SecretKey。&#xA;        // 硬编码密钥到代码中有可能随代码泄露而暴露，有安全隐患，并不推荐。&#xA;        // 为了保护密钥安全，建议将密钥设置在环境变量中或者配置文件中，请参考本文凭证管理章节。&#xA;        // credential := common.NewCredential(&#34;SecretId&#34;, &#34;SecretKey&#34;)&#xA;        credential := common.NewCredential(&#xA;            os.Getenv(&#34;TENCENTCLOUD_SECRET_ID&#34;),&#xA;            os.Getenv(&#34;TENCENTCLOUD_SECRET_KEY&#34;),&#xA;        )&#xA;&#xA;        // 非必要步骤&#xA;        // 实例化一个客户端配置对象，可以指定超时时间等配置&#xA;        cpf := profile.NewClientProfile()&#xA;        // SDK默认使用POST方法。&#xA;        // 如果您一定要使用GET方法，可以在这里设置。GET方法无法处理一些较大的请求。&#xA;        // 如非必要请不要修改默认设置。&#xA;        cpf.HttpProfile.ReqMethod = &#34;POST&#34;&#xA;        // SDK有默认的超时时间，如非必要请不要修改默认设置。&#xA;        // 如有需要请在代码中查阅以获取最新的默认值。&#xA;        cpf.HttpProfile.ReqTimeout = 30&#xA;        // SDK会自动指定域名。通常是不需要特地指定域名的，但是如果您访问的是金融区的服务，&#xA;        // 则必须手动指定域名，例如云服务器的上海金融区域名： cvm.ap-shanghai-fsi.tencentcloudapi.com&#xA;        cpf.HttpProfile.Endpoint = &#34;cvm.tencentcloudapi.com&#34;&#xA;        // SDK默认用TC3-HMAC-SHA256进行签名，它更安全但是会轻微降低性能。&#xA;        // 如非必要请不要修改默认设置。&#xA;        cpf.SignMethod = &#34;TC3-HMAC-SHA256&#34;&#xA;        // SDK 默认用 zh-CN 调用返回中文。此外还可以设置 en-US 返回全英文。&#xA;        // 但大部分产品或接口并不支持全英文的返回。&#xA;        // 如非必要请不要修改默认设置。&#xA;        cpf.Language = &#34;en-US&#34;&#xA;        //打印日志，默认是false&#xA;        // cpf.Debug = true&#xA;&#xA;&#xA;        // 实例化要请求产品(以cvm为例)的client对象&#xA;        // 第二个参数是地域信息，可以直接填写字符串ap-guangzhou，或者引用预设的常量&#xA;        client, _ := cvm.NewClient(credential, regions.Guangzhou, cpf)&#xA;        // 实例化一个请求对象，根据调用的接口和实际情况，可以进一步设置请求参数&#xA;        // 您可以直接查询SDK源码确定DescribeInstancesRequest有哪些属性可以设置，&#xA;        // 属性可能是基本类型，也可能引用了另一个数据结构。&#xA;        // 推荐使用IDE进行开发，可以方便的跳转查阅各个接口和数据结构的文档说明。&#xA;        request := cvm.NewDescribeInstancesRequest()&#xA;&#xA;        // 基本类型的设置。&#xA;        // 此接口允许设置返回的实例数量。此处指定为只返回一个。&#xA;        // SDK采用的是指针风格指定参数，即使对于基本类型您也需要用指针来对参数赋值。&#xA;        // SDK提供对基本类型的指针引用封装函数&#xA;        request.Limit = common.Int64Ptr(1)&#xA;&#xA;        // 数组类型的设置。&#xA;        // 此接口允许指定实例 ID 进行过滤，但是由于和接下来要演示的 Filter 参数冲突，先注释掉。&#xA;        // request.InstanceIds = common.StringPtrs([]string{&#34;ins-r8hr2upy&#34;})&#xA;&#xA;        // 复杂对象的设置。&#xA;        // 在这个接口中，Filters是数组，数组的元素是复杂对象Filter，Filter的成员Values是string数组。&#xA;        request.Filters = []*cvm.Filter{&#xA;            &amp;amp;cvm.Filter{&#xA;                Name: common.StringPtr(&#34;zone&#34;),&#xA;                Values: common.StringPtrs([]string{&#34;ap-guangzhou-1&#34;}),&#xA;            },&#xA;        }&#xA;&#xA;        // 通过client对象调用想要访问的接口，需要传入请求对象&#xA;        response, err := client.DescribeInstances(request)&#xA;        // 处理异常&#xA;        if _, ok := err.(*errors.TencentCloudSDKError); ok {&#xA;            fmt.Printf(&#34;An API error has returned: %s&#34;, err)&#xA;            return&#xA;        }&#xA;        // 非SDK异常，直接失败。实际代码中可以加入其他的处理。&#xA;        if err != nil {&#xA;            panic(err)&#xA;        }&#xA;        // 打印返回的json字符串&#xA;        fmt.Printf(&#34;%s\n&#34;, response.ToJsonString())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更多示例参见 &lt;a href=&#34;https://github.com/TencentCloud/tencentcloud-sdk-go/tree/master/examples&#34;&gt;examples&lt;/a&gt; 目录。对于复杂接口的 Request 初始化例子，可以参考 &lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/examples/cvm/v20170312/run_instances.go&#34;&gt;例一&lt;/a&gt; 。对于使用json字符串初始化 Request 的例子，可以参考 &lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/examples/cvm/v20170312/describe_instances.go&#34;&gt;例二&lt;/a&gt; 。&lt;/p&gt; &#xA;&lt;h1&gt;相关配置&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;如无特殊需要，建议您使用默认配置。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;在创建客户端前，如有需要，您可以通过修改&lt;code&gt;profile.ClientProfile&lt;/code&gt;中字段的值进行一些配置。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 非必要步骤&#xA;// 实例化一个客户端配置对象，可以指定超时时间等配置&#xA;cpf := profile.NewClientProfile()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;具体的配置项说明如下：&lt;/p&gt; &#xA;&lt;h2&gt;请求方式&lt;/h2&gt; &#xA;&lt;p&gt;SDK默认使用POST方法。 如果您一定要使用GET方法，可以在这里设置。&lt;strong&gt;GET方法无法处理一些较大的请求&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cpf.HttpProfile.ReqMethod = &#34;POST&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;超时时间&lt;/h2&gt; &#xA;&lt;p&gt;SDK有默认的超时时间，如非必要请不要修改默认设置。 如有需要请在代码中查阅以获取最新的默认值。&lt;br&gt; 单位：秒&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cpf.HttpProfile.ReqTimeout = 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;指定域名&lt;/h2&gt; &#xA;&lt;p&gt;SDK会自动指定域名。通常是不需要特地指定域名的，但是如果您访问的是金融区的服务， 则必须手动指定域名，例如云服务器的上海金融区域名： cvm.ap-shanghai-fsi.tencentcloudapi.com&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cpf.HttpProfile.Endpoint = &#34;cvm.tencentcloudapi.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;签名方式&lt;/h2&gt; &#xA;&lt;p&gt;SDK默认用 &lt;code&gt;TC3-HMAC-SHA256&lt;/code&gt; 进行签名，它更安全但是会轻微降低性能。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cpf.SignMethod = &#34;HmacSHA1&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;DEBUG模式&lt;/h2&gt; &#xA;&lt;p&gt;DEBUG模式会打印更详细的日志，当您需要进行详细的排查错误时可以开启。&lt;br&gt; 默认为 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cpf.Debug = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;禁用长连接(Keep-alive)&lt;/h2&gt; &#xA;&lt;p&gt;SDK 的每一个 client 默认使用长连接模式，即请求的头部 Connection 字段的值为 keep-alive.&lt;/p&gt; &#xA;&lt;p&gt;如果您需要使用短连接，可以按照以下方式进行设置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...&#xA;    client, _ := cvm.NewClient(credential, regions.Guangzhou, cpf)&#xA;    tp := &amp;amp;http.Transport{&#xA;        DisableKeepAlives: true,&#xA;    }&#xA;    client.WithHttpTransport(tp)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;则此 client 发出的每个请求头部的 Connection 字段的值为 close&lt;/p&gt; &#xA;&lt;h2&gt;地域容灾&lt;/h2&gt; &#xA;&lt;p&gt;从 &lt;code&gt;v1.0.227&lt;/code&gt;开始，腾讯云 GO SDK 支持地域容灾功能：&lt;/p&gt; &#xA;&lt;p&gt;当请求满足以下条件时：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;失败次数 &amp;gt;= 5 次&lt;/li&gt; &#xA; &lt;li&gt;失败率 &amp;gt;= 75%&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;SDK 会自动将您请求的地域设置为备选地域。&lt;/p&gt; &#xA;&lt;p&gt;相关设置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;    // 开启&#xA;    cpf.DisableRegionBreaker = false&#xA;    // 设置备用请求地址，不需要指定服务，SDK 会自动在头部加上服务名(如cvm)&#xA;    // 例如，设置为 ap-guangzhou.tencentcloudapi.com，则最终的请求为 cvm.ap-guangzhou.tencentcloudapi.com&#xA;    cpf.BackupEndpoint = &#34;ap-guangzhou.tencentcloudapi.com&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此功能仅支持单个客户端的同步请求。&lt;/p&gt; &#xA;&lt;h2&gt;代理&lt;/h2&gt; &#xA;&lt;p&gt;如果是有代理的环境下，需要设置系统环境变量 &lt;code&gt;https_proxy&lt;/code&gt; ，否则可能无法正常调用，抛出连接超时的异常。或者自定义 Transport 指定代理，通过 client.WithHttpTransport 覆盖默认配置。&lt;/p&gt; &#xA;&lt;h2&gt;开启 DNS 缓存&lt;/h2&gt; &#xA;&lt;p&gt;当前 GO SDK 总是会去请求 DNS 服务器，而没有使用到 nscd 的缓存，可以通过导出环境变量&lt;code&gt;GODEBUG=netdns=cgo&lt;/code&gt;，或者&lt;code&gt;go build&lt;/code&gt;编译时指定参数&lt;code&gt;-tags &#39;netcgo&#39;&lt;/code&gt;控制读取 nscd 缓存。&lt;/p&gt; &#xA;&lt;h2&gt;忽略服务器证书校验&lt;/h2&gt; &#xA;&lt;p&gt;虽然使用 SDK 调用公有云服务时，必须校验服务器证书，以识破他人伪装的服务器，确保请求的安全。 但是某些极端情况下，例如测试时，您可能会需要忽略自签名的服务器证书。 以下是其中一种可能的方法：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;import &#34;crypto/tls&#34;&#xA;...&#xA;    client, _ := cvm.NewClient(credential, regions.Guangzhou, cpf)&#xA;    tr := &amp;amp;http.Transport{&#xA;        TLSClientConfig: &amp;amp;tls.Config{InsecureSkipVerify: true},&#xA;    }&#xA;    client.WithHttpTransport(tr)&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;再次强调，除非您知道自己在做什么，并明白由此带来的风险，否则不要尝试关闭服务器证书校验。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;功能介绍&lt;/h1&gt; &#xA;&lt;h2&gt;凭证管理&lt;/h2&gt; &#xA;&lt;p&gt;从版本 &lt;code&gt;v1.0.217&lt;/code&gt; 开始，腾讯云 GO SDK 支持以下几种方式进行凭证管理：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;环境变量&lt;/p&gt; &lt;p&gt;默认读取环境变量 &lt;code&gt;TENCENTCLOUD_SECRET_ID&lt;/code&gt; 和 &lt;code&gt;TENCENTCLOUD_SECRET_KEY&lt;/code&gt; 获取 secretId 和 secretKey. 相关代码如下：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;provider := common.DefaultEnvProvider()&#xA;credential, err := provider.GetCredential()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;配置文件&lt;/p&gt; &lt;p&gt;配置文件路径为：&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;环境变量 &lt;code&gt;TENCENTCLOUD_CREDENTIALS_FILE&lt;/code&gt; 所指定的路径&lt;/li&gt; &#xA;   &lt;li&gt;Linux or MacOS: &lt;code&gt;~/.tencentcloud/credentials&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Windows: &lt;code&gt;c:\Users\NAME\.tencentcloud\credentials&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;配置文件格式如下：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[default]&#xA;secret_id = xxxxx&#xA;secret_key = xxxxx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;相关代码如下：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;provider := common.DefaultProfileProvider()&#xA;credential, err := provider.GetCredential()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;角色扮演&lt;/p&gt; &lt;p&gt;有关角色扮演的相关概念请参阅：&lt;a href=&#34;https://cloud.tencent.com/document/product/598/19420&#34;&gt;腾讯云角色概述&lt;/a&gt;&lt;/p&gt; &lt;p&gt;要使用此种方式，您必须在腾讯云访问管理控制台上创建了一个角色，具体创建过程请参阅：&lt;a href=&#34;https://cloud.tencent.com/document/product/598/19381&#34;&gt;腾讯云角色创建&lt;/a&gt;&lt;/p&gt; &lt;p&gt;在您拥有角色后，可以通过如下方式获取凭证：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;provider := common.DefaultRoleArnProvider(secretId, secretKey, roleArn)&#xA;credential, err := provider.GetCredential()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;实例角色&lt;/p&gt; &lt;p&gt;有关实例角色的相关概念请参阅：&lt;a href=&#34;https://cloud.tencent.com/document/product/213/47668&#34;&gt;腾讯云实例角色&lt;/a&gt;&lt;/p&gt; &lt;p&gt;在您为实例绑定角色后，您可以在实例中访问相关元数据接口获取临时凭证。相关代码如下：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;provider := common.DefaultCvmRoleProvider()&#xA;credential, err := provider.GetCredential()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;TKE OIDC凭证&lt;/p&gt; &lt;p&gt;有关 TKE OIDC 凭证的相关示例请参阅：&lt;a href=&#34;https://cloud.tencent.com/document/product/457/81989&#34;&gt;Pod 使用 CAM 对数据库身份验证&lt;/a&gt;&lt;/p&gt; &lt;p&gt;示例代码请参考 examples/ssm/v20190923/get_secret_value.go&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;provider, err := common.DefaultTkeOIDCRoleArnProvider()&#xA;credential, err := provider.GetCredential()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;凭证提供链&lt;/p&gt; &lt;p&gt;腾讯云 GO SDK 提供了 凭证提供链，它会默认以 &lt;code&gt;环境变量-&amp;gt;配置文件-&amp;gt;实例角色&lt;/code&gt; 的顺序尝试获取凭证，并返回第一个获取到的凭证。相关代码如下：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;provider := common.DefaultProviderChain()&#xA;credential, err := provider.GetCredential()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;您也可以自定义自己的凭证提供链，从而改变其调用顺序：&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;provider1 := common.DefaultCvmRoleProvider()&#xA;provider2 := common.DefaultEnvProvider()&#xA;customProviderChain := []common.Provider{provider1, provider2}&#xA;provider := common.NewProviderChain(customProviderChain)&#xA;credential, err := provider.GetCredential()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;更详细的使用方式请参考示例：&lt;a href=&#34;https://github.com/TencentCloud/tencentcloud-sdk-go/raw/master/testing/integration/provider_chain_test.go&#34;&gt;使用ProviderChain&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;错误处理&lt;/h2&gt; &#xA;&lt;p&gt;从 &lt;code&gt;v1.0.181&lt;/code&gt; 开始，腾讯云 GO SDK 会将各个产品的返回的错误码定义为常量，您可以直接调用处理，无需手动定义。如果您使用 IDE (如 Goland )进行开发，可以使用他们的代码提示功能直接选择。例如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;...//Your other go code&#xA;&#xA;// Handling errors&#xA;response, err := client.DescribeInstances(request)&#xA;if terr, ok := err.(*errors.TencentCloudSDKError); ok {&#xA;    code := terr.GetCode()&#xA;    if code == cvm.FAILEDOPERATION_ILLEGALTAGKEY{&#xA;        fmt.Printf(&#34;Handling error: FailedOperation.IllegalTagKey,%s&#34;, err)&#xA;    }else if code == cvm.UNAUTHORIZEDOPERATION{&#xA;        fmt.Printf(&#34;Handling error: UnauthorizedOperation,%s&#34;, err)&#xA;    }else{&#xA;        fmt.Printf(&#34;An API error has returned: %s&#34;, err)&#xA;    }&#xA;    return&#xA;}&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;同时，各个接口函数的注释部分也列出了此接口可能会返回的错误码，方便您进行处理：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// DescribeInstances&#xA;// 本接口 (DescribeInstances) 用于查询一个或多个实例的详细信息。&#xA;//&#xA;// &#xA;//&#xA;// * 可以根据实例`ID`、实例名称或者实例计费模式等信息来查询实例的详细信息。过滤信息详细请见过滤器`Filter`。&#xA;//&#xA;// * 如果参数为空，返回当前用户一定数量（`Limit`所指定的数量，默认为20）的实例。&#xA;//&#xA;// * 支持查询实例的最新操作（LatestOperation）以及最新操作状态(LatestOperationState)。&#xA;//&#xA;// 可能返回的错误码:&#xA;//  FAILEDOPERATION_ILLEGALTAGKEY = &#34;FailedOperation.IllegalTagKey&#34;&#xA;//  FAILEDOPERATION_ILLEGALTAGVALUE = &#34;FailedOperation.IllegalTagValue&#34;&#xA;//  FAILEDOPERATION_TAGKEYRESERVED = &#34;FailedOperation.TagKeyReserved&#34;&#xA;//  INTERNALSERVERERROR = &#34;InternalServerError&#34;&#xA;//  INVALIDFILTER = &#34;InvalidFilter&#34;&#xA;//  INVALIDFILTERVALUE_LIMITEXCEEDED = &#34;InvalidFilterValue.LimitExceeded&#34;&#xA;//  INVALIDHOSTID_MALFORMED = &#34;InvalidHostId.Malformed&#34;&#xA;//  INVALIDINSTANCEID_MALFORMED = &#34;InvalidInstanceId.Malformed&#34;&#xA;//  INVALIDPARAMETER = &#34;InvalidParameter&#34;&#xA;//  INVALIDPARAMETERVALUE = &#34;InvalidParameterValue&#34;&#xA;//  INVALIDPARAMETERVALUE_IPADDRESSMALFORMED = &#34;InvalidParameterValue.IPAddressMalformed&#34;&#xA;//  INVALIDPARAMETERVALUE_INVALIDIPFORMAT = &#34;InvalidParameterValue.InvalidIpFormat&#34;&#xA;//  INVALIDPARAMETERVALUE_INVALIDVAGUENAME = &#34;InvalidParameterValue.InvalidVagueName&#34;&#xA;//  INVALIDPARAMETERVALUE_LIMITEXCEEDED = &#34;InvalidParameterValue.LimitExceeded&#34;&#xA;//  INVALIDPARAMETERVALUE_SUBNETIDMALFORMED = &#34;InvalidParameterValue.SubnetIdMalformed&#34;&#xA;//  INVALIDPARAMETERVALUE_TAGKEYNOTFOUND = &#34;InvalidParameterValue.TagKeyNotFound&#34;&#xA;//  INVALIDPARAMETERVALUE_VPCIDMALFORMED = &#34;InvalidParameterValue.VpcIdMalformed&#34;&#xA;//  INVALIDSECURITYGROUPID_NOTFOUND = &#34;InvalidSecurityGroupId.NotFound&#34;&#xA;//  INVALIDSGID_MALFORMED = &#34;InvalidSgId.Malformed&#34;&#xA;//  INVALIDZONE_MISMATCHREGION = &#34;InvalidZone.MismatchRegion&#34;&#xA;//  RESOURCENOTFOUND_HPCCLUSTER = &#34;ResourceNotFound.HpcCluster&#34;&#xA;//  UNAUTHORIZEDOPERATION_INVALIDTOKEN = &#34;UnauthorizedOperation.InvalidToken&#34;&#xA;func (c *Client) DescribeInstances(request *DescribeInstancesRequest) (response *DescribeInstancesResponse, err error){&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Common Client&lt;/h2&gt; &#xA;&lt;p&gt;从 &lt;code&gt;v1.0.189&lt;/code&gt;开始，腾讯云 GO SDK 支持使用 &lt;code&gt;泛用型的API调用方式(Common Client)&lt;/code&gt; 进行请求。您只需安装 &lt;code&gt;common&lt;/code&gt; 包, 即可向任何产品发起调用。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意，您必须明确知道您调用接口的参数内容，否则会调用失败。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;目前仅支持使用 POST 方式发送请求，且签名方法必须使用 签名方法 v3。&lt;/p&gt; &#xA;&lt;p&gt;详细使用请参阅示例：&lt;a href=&#34;https://github.com/TencentCloud/tencentcloud-sdk-go/raw/master/examples/common/common_client.go&#34;&gt;使用 Common Client 进行调用&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;自定义 Header&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/examples/cvm/v20170312/run_instances.go&#34;&gt;RunInstancesRequest示例&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    request := cvm.NewRunInstancesRequest()&#xA;&#x9;request.SetHeader(map[string]string{&#xA;        &#34;X-TC-TraceId&#34;: &#34;ffe0c072-8a5d-4e17-8887-a8a60252abca&#34;,&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/examples/common/common_client.go&#34;&gt;CommonRequest示例&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    request := tchttp.NewCommonRequest(&#34;cvm&#34;, &#34;2017-03-12&#34;, &#34;DescribeZones&#34;)&#xA;    request.SetHeader(map[string]string{&#xA;        &#34;X-TC-TraceId&#34;: &#34;ffe0c072-8a5d-4e17-8887-a8a60252abca&#34;,&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;http 代理&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TencentCloud/tencentcloud-sdk-go/master/examples/cvm/v20170312/describe_instances.go&#34;&gt;DescribeInstances示例&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    // with authentication&#xA;    clientProfile.HttpProfile.Proxy = &#34;http://username:password@127.0.0.1:1080&#34;&#xA;    // without authentication&#xA;    clientProfile.HttpProfile.Proxy = &#34;http://127.0.0.1:1080&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;请求重试&lt;/h2&gt; &#xA;&lt;h3&gt;网络错误重试&lt;/h3&gt; &#xA;&lt;p&gt;当发生临时网络错误或超时时，SDK可以被配置为自动重试。默认不开启。 通过 &lt;code&gt;ClientProfile&lt;/code&gt; 配置重试次数和重试间隔时间。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;通过反射检查 &lt;code&gt;Request&lt;/code&gt; 结构体是否存在 &lt;code&gt;ClientToken&lt;/code&gt; 字段，存在该字段则认为是幂等请求。 幂等请求才会在网络错误时自动重试，非幂等请求会抛出异常，防止请求多次重放造成结果不一致。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/regions&#34;&#xA;&#x9;cvm &#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;credential := common.NewCredential(&#34;secretId&#34;, &#34;secretKey&#34;)&#xA;&#x9;prof := profile.NewClientProfile()&#xA;&#x9;prof.NetworkFailureMaxRetries = 3                               // 定义最大重试次数&#xA;&#x9;prof.NetworkFailureRetryDuration = profile.ExponentialBackoff   // 定义重试间隔时间&#xA;&#x9;client, _ := cvm.NewClient(credential, regions.Guangzhou, prof)&#xA;&#xA;&#x9;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更多用法参考&lt;a href=&#34;https://github.com/TencentCloud/tencentcloud-sdk-go/tree/master/tencentcloud/common/netretry_test.go&#34;&gt;测试文件&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;限频重试&lt;/h3&gt; &#xA;&lt;p&gt;当发生API限频时，SDK可以被配置为自动重试。默认不开启。 通过 &lt;code&gt;ClientProfile&lt;/code&gt; 配置重试次数和重试间隔时间。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile&#34;&#xA;&#x9;&#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/regions&#34;&#xA;&#x9;cvm &#34;github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/cvm/v20170312&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// ...&#xA;&#xA;&#x9;prof := profile.NewClientProfile()&#xA;&#x9;prof.RateLimitExceededMaxRetries = 3                               // 定义最大重试次数&#xA;&#x9;prof.RateLimitExceededRetryDuration = profile.ExponentialBackoff   // 定义重试间隔时间&#xA;&#x9;client, _ := cvm.NewClient(credential, regions.Guangzhou, prof)&#xA;&#xA;&#x9;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;幂等标识符&lt;/h3&gt; &#xA;&lt;p&gt;当网络超时重试或限频重试开启时，会自动向请求中注入 &lt;code&gt;ClientToken&lt;/code&gt; 参数（如果请求存在&lt;code&gt;ClientToken&lt;/code&gt;字段且为空）。 当用户手动指定 &lt;code&gt;ClientToken&lt;/code&gt; 时，会跳过注入流程。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注入的 &lt;code&gt;ClientToken&lt;/code&gt; 在 &lt;code&gt;100000/s&lt;/code&gt; 并发量以下提供全局唯一性。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;空数组和omitempty&lt;/h2&gt; &#xA;&lt;p&gt;在 v1.0.738 以及之前的版本, SDK使用&lt;code&gt;omitempty&lt;/code&gt;标签来序列化请求, 这会导致 nil 数组和 长度为0的空数组 都无法被序列化。 这在您希望发送一个空数组的时候会造成不便, 在之前您需要使用 CommonClient 来解决这个问题。&lt;/p&gt; &#xA;&lt;p&gt;在 &amp;gt;= v1.0.739 的版本, SDK使用&lt;code&gt;omitnil&lt;/code&gt;标签来序列化请求, 此时nil数组会被忽略掉, 但是空数组可以被正常发送。&lt;/p&gt; &#xA;&lt;p&gt;在 &amp;gt;= v1.0.885 版本中我们对这一特性增加了开关, 当你不希望发送一个空数组时, 可以通过 &lt;code&gt;json.OmitBehaviour = json.OmitEmpty&lt;/code&gt; 来关闭该特性, 参考&lt;a href=&#34;https://github.com/TencentCloud/tencentcloud-sdk-go/raw/master/examples/common/omitempty.go&#34;&gt;示例&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;支持产品列表&lt;/h1&gt; &#xA;&lt;p&gt;参见&lt;a href=&#34;https://github.com/TencentCloud/tencentcloud-sdk-go/raw/master/products.md&#34;&gt;产品列表文档&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>