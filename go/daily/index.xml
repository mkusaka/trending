<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-21T01:29:52Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>INotGreen/XiebroC2</title>
    <updated>2024-02-21T01:29:52Z</updated>
    <id>tag:github.com,2024-02-21:/INotGreen/XiebroC2</id>
    <link href="https://github.com/INotGreen/XiebroC2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go编写的多人运动渗透测试图形化框架、支持lua插件扩展、自定义多个模块、自定义shellcode、文件管理、进程管理、内存加载、反向代理等功能&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;使用说明（英文）&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/INotGreen/XiebroC2/raw/main/README_EN.md&#34;&gt;XiebroC2-v3.1-README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;更新&lt;/h2&gt; &#xA;&lt;p&gt;[+] 2024.2.18 XiebroC2-3.1发布&lt;/p&gt; &#xA;&lt;p&gt;[+] 2024.2.20 XiebroC2-3.1 修复bug： &lt;a href=&#34;https://github.com/INotGreen/XiebroC2/releases/download/XieBroC2-v3.1/XiebroC2-v3.1.7z&#34;&gt;xiebroc2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;随缘更新中。。。&lt;/p&gt; &#xA;&lt;p&gt;如果您喜欢该项目的话，可以左上角star + fork + follow，非常感谢！&lt;/p&gt; &#xA;&lt;h2&gt;特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;被控端(Client)由Golang编写，兼容WIndows、Linux、MacOS上线（未来会考虑移动端上线）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;团队服务器(Teamserver)由.net 8.0 编写、AOT编译，内存占用低，无需安装任何依赖，几乎可以兼容全平台系统&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;控制端(Controller)支持反弹shell，文件管理、进程管理、网络流量监控、内存加载、自定义UI背景色等功能&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持Windows/Linux内存加载PE文件，即文件不落地执行木马，中转第三方C2/RAT&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持内存执行.net 程序集（execute-assembly、inline-assembly)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持通过lua扩展UI控件、Session命令，载荷生成（类似于CobaltStrike的cna脚本）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持自定义RDIshellcode（仅64位，32位需要手动编译client）或者用&lt;a href=&#34;https://github.com/TheWover/donut&#34;&gt;donut&lt;/a&gt;、&lt;a href=&#34;https://github.com/Binject/go-donut&#34;&gt;Godonut&lt;/a&gt;生成属于自己的shellcode&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持Teamserver托管二进制文件、文本、图片(类似SimpleHttpServer)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持团队服务器自定义配置文件,自定义Telegram的chat ID/Token上线通知&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;控制端(Controller)UI轻量级交互界面，内存占用大约是CobaltStrike的60分之一，是Metasploit的10分之一&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Golang的编译器特征已经被部分AV/EDR厂商标黑了,因此免杀效果较差&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;支持平台&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Client(Session)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows（x86_x64）&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux(x86_x64)&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;MacOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ubuntu&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AMD64&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Debian&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;i386&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows8/8.1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;CentOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;M1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ppc64le&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;M2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windwos-XP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;mips&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Windows Server 2000-2022&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;s390x&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;快速使用&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通过curl下载，密码：123456&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o XiebroC2-v3.1.7z https://github.com/INotGreen/XiebroC2/releases/download/XieBroC2-v3.1/Xiebro-v3.1.7z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;控制端需要运行在.Net Framework4.8以上（Win10/11无需安装，win7需要下载: &lt;a href=&#34;https://dotnet.microsoft.com/zh-cn/download/dotnet-framework/thank-you/net48-offline-installer&#34;&gt;.net framworkd4.8下载&lt;/a&gt;）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;修改TeamServerIP和TeamServerPort为VPS的IP和端口，然后保存为profile.json&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;TeamServerIP&#34;: &#34;192.168.31.81&#34;,&#xA;    &#34;TeamServerPort&#34;: &#34;8880&#34;,&#xA;    &#34;Password&#34;: &#34;123456&#34;,&#xA;    &#34;StagerPort&#34;: &#34;4050&#34;,&#xA;    &#34;Telegram_Token&#34;: &#34;&#34;,&#xA;    &#34;Telegram_chat_ID&#34;: &#34;&#34;,&#xA;    &#34;Fork&#34;: true,&#xA;    &#34;Process64&#34;: &#34;C:\\windows\\system32\\notepad.exe&#34;,&#xA;    &#34;Process86&#34;: &#34;C:\\Windows\\SysWOW64\\notepad.exe&#34;,&#xA;    &#34;WebServers&#34;: [],&#xA;    &#34;listeners&#34;: [],&#xA;    &#34;s_Reflection_dll_x64&#34;: &#34;&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;服务端：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Teamserver.exe -c profile.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;上线演示&lt;/h2&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://private-user-images.githubusercontent.com/89376703/305162512-771c2e88-afd8-493d-a575-7e10149837dd.mp4&#34; width=&#34;640&#34; height=&#34;480&#34; controls&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h2&gt;命令列表&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Commands&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Usage&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;nps&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;nps “powershell command”&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Unmanaged run powershell in memory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Inline-assembly&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;inline-assembly “FilePath” “args”&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Inline execute .net assembly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;execute-assembly&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;execute-assembly “FilePath” ”args”&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Fork child process execute loader .net assembly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;runpe&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;runpe “FilePath” “args”&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;loader C/C++ PE in the memory for Windwos&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;shell&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;shell “cmd command”&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Execute command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;powershell&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;powershell “powershell command”&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Execute powershell command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;checkAV&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;checkAV&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Detect AV/EDR processes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;upload&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;upload “RemotePath” “FilePath”&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Upload File to the target&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;memfd&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;memfd “FilePath” “args”&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PE loader in the memory for Linux&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;help&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;help&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;View command list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cls&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;cls&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Clear screen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;添加插件&lt;/h2&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://private-user-images.githubusercontent.com/89376703/305687743-fb39df88-0f29-4359-9cd4-fc4bfa698270.mp4&#34; width=&#34;640&#34; height=&#34;480&#34; controls&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h2&gt;拖拽式批量上传文件&lt;/h2&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://private-user-images.githubusercontent.com/89376703/306153487-551e96db-9253-4a9f-8c2d-5c99c0280c8a.mp4&#34; width=&#34;640&#34; height=&#34;480&#34; controls&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h2&gt;插件编写&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;学习编写lua插件:&lt;a href=&#34;https://github.com/INotGreen/Xiebro-Plugins?tab=readme-ov-file#executeassembly&#34;&gt;Xiebro-Plugins&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;计划进行&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;用C/C++/C#/Rust编写多阶段加载器（Multi-stage loader），体积尽量控制在150kb以内。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;目前正反向代理和端口转发未开放，未来考虑完善和开发这个功能。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;正在开发WebSocket/RUDP/SMB协议的Session模式，Beacon模式仅考虑开发HTTP/HTTPS/DNS。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;考虑开发shellcode(raw)、Powershell、VBscript、Hta、Jscript等载荷。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;开放更多窗体和API接口，以便lua扩展插件&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;目前Golang的控制台隐藏问题还无法得到很好的方案，如果您知道如何解决这个问题请联系我。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;免责声明&lt;/h2&gt; &#xA;&lt;p&gt;本项目仅用于渗透测试演练的学习交流和研究，强烈不建议您用于任何的实际途径（包括黑灰产交易、非法渗透攻击、割韭菜），网络不是法外之地！如果您使用该工具则应该自觉遵守以上要求&lt;/p&gt; &#xA;&lt;h2&gt;提交Bug和建议&lt;/h2&gt; &#xA;&lt;img src=&#34;Image\Image.jpg&#34;&gt;</summary>
  </entry>
</feed>