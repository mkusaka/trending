<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-02T01:29:51Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Boeing/config-file-validator</title>
    <updated>2023-10-02T01:29:51Z</updated>
    <id>tag:github.com,2023-10-02:/Boeing/config-file-validator</id>
    <link href="https://github.com/Boeing/config-file-validator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cross Platform tool to validate configuration files&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/Boeing/config-file-validator/main/img/logo.png&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &#xA; &lt;h1&gt;Config File Validator&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;Apache 2 License&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/Boeing/config-file-validator&#34;&gt; &lt;img src=&#34;https://pkg.go.dev/badge/github.com/Boeing/config-file-validator.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/Boeing/config-file-validator&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/Boeing/config-file-validator&#34; alt=&#34;Go Report Card&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/boeing/config-file-validator/actions/workflows/go.yml&#34;&gt; &lt;img src=&#34;https://github.com/boeing/config-file-validator/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Pipeline Status&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;How many deployments have you done that needed to be rolled back due to a missing character in a configuration file in your repo? If you&#39;re like most teams that number is greater than zero. The config file validator was created to solve this problem by searching through your project and validating the syntax of all configuration files.&lt;/p&gt; &#xA;&lt;h3&gt;Where can you use this tool?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In a CI/CD pipeline as a quality gate&lt;/li&gt; &#xA; &lt;li&gt;On your desktop to validate configuration files as you write them&lt;/li&gt; &#xA; &lt;li&gt;As a library within your existing go code&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What types of files are supported?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XML&lt;/li&gt; &#xA; &lt;li&gt;JSON&lt;/li&gt; &#xA; &lt;li&gt;YAML&lt;/li&gt; &#xA; &lt;li&gt;TOML&lt;/li&gt; &#xA; &lt;li&gt;INI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to install the config file validator tool&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;go install&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you have a go environment on your desktop you can use &lt;a href=&#34;https://go.dev/doc/go-get-install-deprecation&#34;&gt;go install&lt;/a&gt; to install the validator executable. The validator executable will be installed to the directory named by the GOBIN environment variable, which defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH environment variable is not set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/Boeing/config-file-validator/cmd/validator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Executables&lt;/h3&gt; &#xA;&lt;p&gt;The config-file-validator is built as a statically linked binary which can be downloaded and executed on your target system. Binaries are available for Linux, Windows, and MacOS. Navigate to the &lt;a href=&#34;https://github.com/Boeing/config-file-validator/releases&#34;&gt;releases&lt;/a&gt; page to download the latest version. Once the binary has been downloaded it needs to be installed by moving the downloaded file to a location on your operating system&#39;s PATH.&lt;/p&gt; &#xA;&lt;h2&gt;Using&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: validator [OPTIONS] [search_path]&#xA;&#xA;positional arguments:&#xA;    search_path: The search path on the filesystem for configuration files. Defaults to the current working directory if no search_path provided&#xA;&#xA;optional flags:&#xA;  -exclude-dirs string&#xA;    &#x9;Subdirectories to exclude when searching for configuration files&#xA;  -exclude-file-types string&#xA;    &#x9;A comma separated list of file types to ignore&#xA;  -reporter string&#xA;    &#x9;Format of the printed report. Options are standard and json (default &#34;standard&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Standard Run&lt;/h4&gt; &#xA;&lt;p&gt;If the search path is omitted it will search the current directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;validator /path/to/search&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Boeing/config-file-validator/main/img/standard_run.png&#34; alt=&#34;Standard Run&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Exclude dirs&lt;/h4&gt; &#xA;&lt;p&gt;Exclude subdirectories in the search path&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;validator --exclude-dirs=/path/to/search/tests /path/to/search &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Boeing/config-file-validator/main/img/exclude_dirs.png&#34; alt=&#34;Exclude Dirs Run&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Exclude file types&lt;/h4&gt; &#xA;&lt;p&gt;Exclude file types in the search path. Available file types are &lt;code&gt;ini&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;yaml&lt;/code&gt;, &lt;code&gt;yml&lt;/code&gt;, &lt;code&gt;toml&lt;/code&gt;, and &lt;code&gt;xml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;validator --exclude-file-types=json /path/to/search&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Boeing/config-file-validator/main/img/exclude_file_types.png&#34; alt=&#34;Exclude File Types Run&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Customize report output&lt;/h4&gt; &#xA;&lt;p&gt;Customize the report output. Available options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;validator --reporter=json /path/to/search&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Boeing/config-file-validator/main/img/custom_reporter.png&#34; alt=&#34;Exclude File Types Run&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Container Run&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it --rm -v /path/to/config/files:/test config-file-validator:1.4.0 /test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Boeing/config-file-validator/main/img/docker_run.png&#34; alt=&#34;Docker Standard Run&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;The project can be downloaded and built from source using an environment with golang 1.17+ installed. After successful build, the statically-linked binary can be moved to a location on your operating system PATH.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Build&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;CGO_ENABLED=0 \&#xA;GOOS=linux \&#xA;GOARCH=amd64 \&#xA;go build \&#xA;-ldflags=&#39;-w -s -extldflags &#34;-static&#34;&#39; \&#xA;-tags netgo \&#xA;-o validator \&#xA;cmd/validator/validator.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp ./validator /usr/local/bin/&#xA;chmod +x /usr/local/bin/validator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Build&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;CGO_ENABLED=0 \&#xA;GOOS=windows \&#xA;GOARCH=amd64 \&#xA;go build \&#xA;-ldflags=&#39;-w -s -extldflags &#34;-static&#34;&#39; \&#xA;-tags netgo \&#xA;-o validator.exe \&#xA;cmd/validator/validator.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;mkdir -p &#39;C:\Program Files\validator&#39;&#xA;cp .\validator.exe &#39;C:\Program Files\validator&#39;&#xA;[Environment]::SetEnvironmentVariable(&#34;C:\Program Files\validator&#34;, $env:Path, [System.EnvironmentVariableTarget]::Machine)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the provided Dockerfile to build the config file validator tool in a container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build . -t config-file-validator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions! Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/Boeing/config-file-validator/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Config File Validator is released under the &lt;a href=&#34;https://raw.githubusercontent.com/Boeing/config-file-validator/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt; License&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hybridgroup/gobot</title>
    <updated>2023-10-02T01:29:51Z</updated>
    <id>tag:github.com,2023-10-02:/hybridgroup/gobot</id>
    <link href="https://github.com/hybridgroup/gobot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golang framework for robotics, drones, and the Internet of Things (IoT)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;http://gobot.io/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hybridgroup/gobot-site/master/source/images/elements/gobot-logo-small.png&#34; alt=&#34;Gobot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/gobot.io/x/gobot/v2&#34;&gt;&lt;img src=&#34;https://godoc.org/gobot.io/x/gobot/v2?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/hybridgroup/gobot/tree/dev&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/hybridgroup/gobot/tree/dev.svg?style=svg&#34; alt=&#34;CircleCI Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/deadprogram/gobot/branch/dev&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/ix29evnbdrhkr7ud/branch/dev?svg=true&#34; alt=&#34;Appveyor Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/hybridgroup/gobot&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/hybridgroup/gobot/branch/dev/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/hybridgroup/gobot&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/hybridgroup/gobot&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/raw/master/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gobot (&lt;a href=&#34;https://gobot.io/&#34;&gt;https://gobot.io/&lt;/a&gt;) is a framework using the Go programming language (&lt;a href=&#34;https://golang.org/&#34;&gt;https://golang.org/&lt;/a&gt;) for robotics, physical computing, and the Internet of Things.&lt;/p&gt; &#xA;&lt;p&gt;It provides a simple, yet powerful way to create solutions that incorporate multiple, different hardware devices at the same time.&lt;/p&gt; &#xA;&lt;p&gt;Want to run Go directly on microcontrollers? Check out our sister project TinyGo (&lt;a href=&#34;https://tinygo.org/&#34;&gt;https://tinygo.org/&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Get in touch&lt;/h3&gt; &#xA;&lt;p&gt;Get the Gobot source code by running this commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/hybridgroup/gobot.git&#xA;git checkout release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterwards have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/hybridgroup/gobot/release/examples&#34;&gt;examples directory&lt;/a&gt;. You need to find an example matching your platform for your first test (e.g. &#34;raspi_blink.go&#34;). Than build the binary (cross compile), transfer it to your target and run it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;env GOOS=linux GOARCH=arm GOARM=5 go build -o ./output/my_raspi_bink examples/raspi_blink.go&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Building the code on your local machine with the example code above will create a binary for ARMv5. This is probably not what you need for your specific target platform. Please read also the platform specific documentation in the platform subfolders.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Create your first project&lt;/h3&gt; &#xA;&lt;p&gt;Create a new folder and a new Go module project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir ~/my_gobot_example&#xA;cd ~/my_gobot_example&#xA;go mod init my.gobot.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy your example file besides the go.mod file, import the requirements and build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp /&amp;lt;path to gobot folder&amp;gt;/examples/raspi_blink.go ~/my_gobot_example/&#xA;go mod tidy&#xA;env GOOS=linux GOARCH=arm GOARM=5 go build -o ./output/my_raspi_bink raspi_blink.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you are ready to modify the example and test your changes. Start by removing the build directives at the beginning of the file.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Gobot with Arduino&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;time&#34;&#xA;&#xA;  &#34;gobot.io/x/gobot/v2&#34;&#xA;  &#34;gobot.io/x/gobot/v2/drivers/gpio&#34;&#xA;  &#34;gobot.io/x/gobot/v2/platforms/firmata&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  firmataAdaptor := firmata.NewAdaptor(&#34;/dev/ttyACM0&#34;)&#xA;  led := gpio.NewLedDriver(firmataAdaptor, &#34;13&#34;)&#xA;&#xA;  work := func() {&#xA;    gobot.Every(1*time.Second, func() {&#xA;      led.Toggle()&#xA;    })&#xA;  }&#xA;&#xA;  robot := gobot.NewRobot(&#34;bot&#34;,&#xA;    []gobot.Connection{firmataAdaptor},&#xA;    []gobot.Device{led},&#xA;    work,&#xA;  )&#xA;&#xA;  robot.Start()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Gobot with Sphero&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;  &#34;time&#34;&#xA;&#xA;  &#34;gobot.io/x/gobot/v2&#34;&#xA;  &#34;gobot.io/x/gobot/v2/platforms/sphero&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  adaptor := sphero.NewAdaptor(&#34;/dev/rfcomm0&#34;)&#xA;  driver := sphero.NewSpheroDriver(adaptor)&#xA;&#xA;  work := func() {&#xA;    gobot.Every(3*time.Second, func() {&#xA;      driver.Roll(30, uint16(gobot.Rand(360)))&#xA;    })&#xA;  }&#xA;&#xA;  robot := gobot.NewRobot(&#34;sphero&#34;,&#xA;    []gobot.Connection{adaptor},&#xA;    []gobot.Device{driver},&#xA;    work,&#xA;  )&#xA;&#xA;  robot.Start()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&#34;Metal&#34; Gobot&lt;/h3&gt; &#xA;&lt;p&gt;You can use the entire Gobot framework as shown in the examples above (&#34;Classic&#34; Gobot), or you can pick and choose from the various Gobot packages to control hardware with nothing but pure idiomatic Golang code (&#34;Metal&#34; Gobot). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;gobot.io/x/gobot/v2/drivers/gpio&#34;&#xA;  &#34;gobot.io/x/gobot/v2/platforms/intel-iot/edison&#34;&#xA;  &#34;time&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  e := edison.NewAdaptor()&#xA;  e.Connect()&#xA;&#xA;  led := gpio.NewLedDriver(e, &#34;13&#34;)&#xA;  led.Start()&#xA;&#xA;  for {&#xA;    led.Toggle()&#xA;    time.Sleep(1000 * time.Millisecond)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&#34;Master&#34; Gobot&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the full capabilities of the framework aka &#34;Master Gobot&#34; to control swarms of robots or other features such as the built-in API server. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;  &#34;time&#34;&#xA;&#xA;  &#34;gobot.io/x/gobot/v2&#34;&#xA;  &#34;gobot.io/x/gobot/v2/api&#34;&#xA;  &#34;gobot.io/x/gobot/v2/platforms/sphero&#34;&#xA;)&#xA;&#xA;func NewSwarmBot(port string) *gobot.Robot {&#xA;  spheroAdaptor := sphero.NewAdaptor(port)&#xA;  spheroDriver := sphero.NewSpheroDriver(spheroAdaptor)&#xA;  spheroDriver.SetName(&#34;Sphero&#34; + port)&#xA;&#xA;  work := func() {&#xA;    spheroDriver.Stop()&#xA;&#xA;    spheroDriver.On(sphero.Collision, func(data interface{}) {&#xA;      fmt.Println(&#34;Collision Detected!&#34;)&#xA;    })&#xA;&#xA;    gobot.Every(1*time.Second, func() {&#xA;      spheroDriver.Roll(100, uint16(gobot.Rand(360)))&#xA;    })&#xA;    gobot.Every(3*time.Second, func() {&#xA;      spheroDriver.SetRGB(uint8(gobot.Rand(255)),&#xA;        uint8(gobot.Rand(255)),&#xA;        uint8(gobot.Rand(255)),&#xA;      )&#xA;    })&#xA;  }&#xA;&#xA;  robot := gobot.NewRobot(&#34;sphero&#34;,&#xA;    []gobot.Connection{spheroAdaptor},&#xA;    []gobot.Device{spheroDriver},&#xA;    work,&#xA;  )&#xA;&#xA;  return robot&#xA;}&#xA;&#xA;func main() {&#xA;  master := gobot.NewMaster()&#xA;  api.NewAPI(master).Start()&#xA;&#xA;  spheros := []string{&#xA;    &#34;/dev/rfcomm0&#34;,&#xA;    &#34;/dev/rfcomm1&#34;,&#xA;    &#34;/dev/rfcomm2&#34;,&#xA;    &#34;/dev/rfcomm3&#34;,&#xA;  }&#xA;&#xA;  for _, port := range spheros {&#xA;    master.AddRobot(NewSwarmBot(port))&#xA;  }&#xA;&#xA;  master.Start()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hardware Support&lt;/h2&gt; &#xA;&lt;p&gt;Gobot has a extensible system for connecting to hardware devices. The following robotics and physical computing platforms are currently supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.arduino.cc/&#34;&gt;Arduino&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/firmata&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Audio &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/audio&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://beagleboard.org/boards&#34;&gt;Beaglebone Black&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/beaglebone&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://beagleboard.org/pocket/&#34;&gt;Beaglebone PocketBeagle&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/beaglebone&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bluetooth.com/what-is-bluetooth-technology/bluetooth-technology-basics/low-energy&#34;&gt;Bluetooth LE&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/ble&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nextthing.co/pages/chip&#34;&gt;C.H.I.P&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/chip&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.getchip.com/chip_pro.html&#34;&gt;C.H.I.P Pro&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/chip&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://digistump.com/products/1&#34;&gt;Digispark&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/digispark&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ryzerobotics.com/tello&#34;&gt;DJI Tello&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/dji/tello&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.qualcomm.com/hardware/dragonboard-410c&#34;&gt;DragonBoard&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/dragonboard&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://esp8266.net/&#34;&gt;ESP8266&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/firmata&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.dexterindustries.com/gopigo3/&#34;&gt;GoPiGo 3&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/dexter/gopigo3&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.intel.com/content/www/us/en/products/boards-kits/curie.html&#34;&gt;Intel Curie&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/intel-iot/curie&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.intel.com/content/www/us/en/do-it-yourself/edison.html&#34;&gt;Intel Edison&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/intel-iot/edison&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://intel.com/joule/getstarted&#34;&gt;Intel Joule&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/intel-iot/joule&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/embedded/jetson-nano/&#34;&gt;Jetson Nano&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/jetson&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Joystick&#34;&gt;Joystick&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/joystick&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Computer_keyboard&#34;&gt;Keyboard&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/keyboard&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.leapmotion.com/&#34;&gt;Leap Motion&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/leap&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://qgroundcontrol.org/mavlink/start&#34;&gt;MavLink&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/mavlink&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.makeblock.com/megapi&#34;&gt;MegaPi&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/megapi&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://microbit.org/&#34;&gt;Microbit&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/microbit&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mqtt.org/&#34;&gt;MQTT&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/mqtt&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.friendlyelec.com/wiki/index.php/NanoPi_NEO&#34;&gt;NanoPi NEO&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/nanopi&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nats.io/&#34;&gt;NATS&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/nats&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://neurosky.com/products-markets/eeg-biosensors/hardware/&#34;&gt;Neurosky&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/neurosky&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://opencv.org/&#34;&gt;OpenCV&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/opencv&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.particle.io/&#34;&gt;Particle&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/particle&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ardrone2.parrot.com/&#34;&gt;Parrot ARDrone 2.0&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/parrot/ardrone&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.parrot.com/usa/products/bebop-drone/&#34;&gt;Parrot Bebop&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/parrot/bebop&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.parrot.com/us/minidrones&#34;&gt;Parrot Minidrone&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/parrot/minidrone&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.getpebble.com/&#34;&gt;Pebble&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/pebble&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.radxa.com/Rock4/&#34;&gt;Radxa Rock Pi 4&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/rockpi&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/raspi&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sphero.com/&#34;&gt;Sphero&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/sphero&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sphero.com/bb8&#34;&gt;Sphero BB-8&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/sphero/bb8&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sphero.com/ollie&#34;&gt;Sphero Ollie&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/sphero/ollie&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sphero.com/sprk-plus&#34;&gt;Sphero SPRK+&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/sphero/sprkplus&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.asus.com/us/Single-Board-Computer/Tinker-Board/&#34;&gt;Tinker Board&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/tinkerboard&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.up-board.org/upsquared/&#34;&gt;UP2&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/platforms/upboard/up2&#34;&gt;Package&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Support for many devices that use General Purpose Input/Output (GPIO) have a shared set of drivers provided using the &lt;code&gt;gobot/drivers/gpio&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/General_Purpose_Input/Output&#34;&gt;GPIO&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/drivers/gpio&#34;&gt;Drivers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AIP1640 LED&lt;/li&gt; &#xA;   &lt;li&gt;Button&lt;/li&gt; &#xA;   &lt;li&gt;Buzzer&lt;/li&gt; &#xA;   &lt;li&gt;Direct Pin&lt;/li&gt; &#xA;   &lt;li&gt;EasyDriver&lt;/li&gt; &#xA;   &lt;li&gt;Grove Button&lt;/li&gt; &#xA;   &lt;li&gt;Grove Buzzer&lt;/li&gt; &#xA;   &lt;li&gt;Grove LED&lt;/li&gt; &#xA;   &lt;li&gt;Grove Magnetic Switch&lt;/li&gt; &#xA;   &lt;li&gt;Grove Relay&lt;/li&gt; &#xA;   &lt;li&gt;Grove Touch Sensor&lt;/li&gt; &#xA;   &lt;li&gt;LED&lt;/li&gt; &#xA;   &lt;li&gt;Makey Button&lt;/li&gt; &#xA;   &lt;li&gt;Motor&lt;/li&gt; &#xA;   &lt;li&gt;Proximity Infra Red (PIR) Motion Sensor&lt;/li&gt; &#xA;   &lt;li&gt;Relay&lt;/li&gt; &#xA;   &lt;li&gt;RGB LED&lt;/li&gt; &#xA;   &lt;li&gt;Servo&lt;/li&gt; &#xA;   &lt;li&gt;Stepper Motor&lt;/li&gt; &#xA;   &lt;li&gt;TM1638 LED Controller&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Support for many devices that use Analog Input/Output (AIO) have a shared set of drivers provided using the &lt;code&gt;gobot/drivers/aio&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Analog-to-digital_converter&#34;&gt;AIO&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/drivers/aio&#34;&gt;Drivers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Analog Sensor&lt;/li&gt; &#xA;   &lt;li&gt;Grove Light Sensor&lt;/li&gt; &#xA;   &lt;li&gt;Grove Piezo Vibration Sensor&lt;/li&gt; &#xA;   &lt;li&gt;Grove Rotary Dial&lt;/li&gt; &#xA;   &lt;li&gt;Grove Sound Sensor&lt;/li&gt; &#xA;   &lt;li&gt;Grove Temperature Sensor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Support for devices that use Inter-Integrated Circuit (I2C) have a shared set of drivers provided using the &lt;code&gt;gobot/drivers/i2c&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I2C&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/drivers/i2c&#34;&gt;Drivers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adafruit 2x16 RGB-LCD with 5 keys&lt;/li&gt; &#xA;   &lt;li&gt;Adafruit Motor Hat&lt;/li&gt; &#xA;   &lt;li&gt;ADS1015 Analog to Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;ADS1115 Analog to Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;ADXL345 Digital Accelerometer&lt;/li&gt; &#xA;   &lt;li&gt;BH1750 Digital Luminosity/Lux/Light Sensor&lt;/li&gt; &#xA;   &lt;li&gt;BlinkM LED&lt;/li&gt; &#xA;   &lt;li&gt;BME280 Barometric Pressure/Temperature/Altitude/Humidity Sensor&lt;/li&gt; &#xA;   &lt;li&gt;BMP180 Barometric Pressure/Temperature/Altitude Sensor&lt;/li&gt; &#xA;   &lt;li&gt;BMP280 Barometric Pressure/Temperature/Altitude Sensor&lt;/li&gt; &#xA;   &lt;li&gt;BMP388 Barometric Pressure/Temperature/Altitude Sensor&lt;/li&gt; &#xA;   &lt;li&gt;DRV2605L Haptic Controller&lt;/li&gt; &#xA;   &lt;li&gt;Generic driver for read and write values to/from register address&lt;/li&gt; &#xA;   &lt;li&gt;Grove Digital Accelerometer&lt;/li&gt; &#xA;   &lt;li&gt;GrovePi Expansion Board&lt;/li&gt; &#xA;   &lt;li&gt;Grove RGB LCD&lt;/li&gt; &#xA;   &lt;li&gt;HMC6352 Compass&lt;/li&gt; &#xA;   &lt;li&gt;HMC5883L 3-Axis Digital Compass&lt;/li&gt; &#xA;   &lt;li&gt;INA3221 Voltage Monitor&lt;/li&gt; &#xA;   &lt;li&gt;JHD1313M1 LCD Display w/RGB Backlight&lt;/li&gt; &#xA;   &lt;li&gt;L3GD20H 3-Axis Gyroscope&lt;/li&gt; &#xA;   &lt;li&gt;LIDAR-Lite&lt;/li&gt; &#xA;   &lt;li&gt;MCP23017 Port Expander&lt;/li&gt; &#xA;   &lt;li&gt;MMA7660 3-Axis Accelerometer&lt;/li&gt; &#xA;   &lt;li&gt;MPL115A2 Barometric Pressure/Temperature&lt;/li&gt; &#xA;   &lt;li&gt;MPU6050 Accelerometer/Gyroscope&lt;/li&gt; &#xA;   &lt;li&gt;PCA9501 8-bit I/O port with interrupt, 2-kbit EEPROM&lt;/li&gt; &#xA;   &lt;li&gt;PCA953x LED Dimmer for PCA9530 (2-bit), PCA9533 (4-bit), PCA9531 (8-bit), PCA9532 (16-bit)&lt;/li&gt; &#xA;   &lt;li&gt;PCA9685 16-channel 12-bit PWM/Servo Driver&lt;/li&gt; &#xA;   &lt;li&gt;PCF8583 clock and calendar or event counter, 240 x 8-bit RAM&lt;/li&gt; &#xA;   &lt;li&gt;PCF8591 8-bit 4xA/D &amp;amp; 1xD/A converter&lt;/li&gt; &#xA;   &lt;li&gt;SHT2x Temperature/Humidity&lt;/li&gt; &#xA;   &lt;li&gt;SHT3x-D Temperature/Humidity&lt;/li&gt; &#xA;   &lt;li&gt;SSD1306 OLED Display Controller&lt;/li&gt; &#xA;   &lt;li&gt;TSL2561 Digital Luminosity/Lux/Light Sensor&lt;/li&gt; &#xA;   &lt;li&gt;Wii Nunchuck Controller&lt;/li&gt; &#xA;   &lt;li&gt;YL-40 Brightness/Temperature sensor, Potentiometer, analog input, analog output Driver&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Support for devices that use Serial Peripheral Interface (SPI) have a shared set of drivers provided using the &lt;code&gt;gobot/drivers/spi&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus&#34;&gt;SPI&lt;/a&gt; &amp;lt;=&amp;gt; &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/drivers/spi&#34;&gt;Drivers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;APA102 Programmable LEDs&lt;/li&gt; &#xA;   &lt;li&gt;MCP3002 Analog/Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;MCP3004 Analog/Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;MCP3008 Analog/Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;MCP3202 Analog/Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;MCP3204 Analog/Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;MCP3208 Analog/Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;MCP3304 Analog/Digital Converter&lt;/li&gt; &#xA;   &lt;li&gt;MFRC522 RFID Card Reader&lt;/li&gt; &#xA;   &lt;li&gt;SSD1306 OLED Display Controller&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More platforms and drivers are coming soon...&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Gobot includes a RESTful API to query the status of any robot running within a group, including the connection and device status, and execute device commands.&lt;/p&gt; &#xA;&lt;p&gt;To activate the API, import the &lt;code&gt;gobot.io/x/gobot/v2/api&lt;/code&gt; package and instantiate the &lt;code&gt;API&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  master := gobot.NewMaster()&#xA;  api.NewAPI(master).Start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify the api host and port, and turn on authentication:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  master := gobot.NewMaster()&#xA;  server := api.NewAPI(master)&#xA;  server.Port = &#34;4000&#34;&#xA;  server.AddHandler(api.BasicAuth(&#34;gort&#34;, &#34;klatuu&#34;))&#xA;  server.Start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may access the &lt;a href=&#34;https://github.com/hybridgroup/robeaux&#34;&gt;robeaux&lt;/a&gt; React.js interface with Gobot by navigating to &lt;code&gt;http://localhost:3000/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;p&gt;Gobot uses the Gort &lt;a href=&#34;http://gort.io&#34;&gt;http://gort.io&lt;/a&gt; Command Line Interface (CLI) so you can access important features right from the command line. We call it &#34;RobotOps&#34;, aka &#34;DevOps For Robotics&#34;. You can scan, connect, update device firmware, and more!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re always adding documentation to our web site at &lt;a href=&#34;https://gobot.io/&#34;&gt;https://gobot.io/&lt;/a&gt; please check there as we continue to work on Gobot&lt;/p&gt; &#xA;&lt;p&gt;Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Need help?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Issues: &lt;a href=&#34;https://github.com/hybridgroup/gobot/issues&#34;&gt;https://github.com/hybridgroup/gobot/issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/gobotio&#34;&gt;@gobotio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack: &lt;a href=&#34;https://gophers.slack.com/messages/C0N5HDB08&#34;&gt;https://gophers.slack.com/messages/C0N5HDB08&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;https://groups.google.com/forum/#!forum/gobotio&#34;&gt;https://groups.google.com/forum/#!forum/gobotio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;For our contribution guidelines, please go to &lt;a href=&#34;https://github.com/hybridgroup/gobot/raw/master/CONTRIBUTING.md&#34;&gt;https://github.com/hybridgroup/gobot/blob/master/CONTRIBUTING.md &lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Gobot is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms. &lt;a href=&#34;https://github.com/hybridgroup/gobot/tree/master/CODE_OF_CONDUCT.md&#34;&gt;You can read about it here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2013-2020 The Hybrid Group. Licensed under the Apache 2.0 license.&lt;/p&gt; &#xA;&lt;p&gt;The Contributor Covenant is released under the Creative Commons Attribution 4.0 International Public License, which requires that attribution be included.&lt;/p&gt;</summary>
  </entry>
</feed>