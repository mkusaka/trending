<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-06T01:33:13Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>allanpk716/ChineseSubFinder</title>
    <updated>2022-12-06T01:33:13Z</updated>
    <id>tag:github.com,2022-12-06:/allanpk716/ChineseSubFinder</id>
    <link href="https://github.com/allanpk716/ChineseSubFinder" rel="alternate"></link>
    <summary type="html">&lt;p&gt;自动化中文字幕下载。字幕网站支持 zimuku、subhd、shooter、xunlei 。支持 Emby、Jellyfin、Plex、Sonarr、Radarr、TMM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ChineseSubFinder&lt;/h1&gt; &#xA;&lt;p&gt;本项目的初衷仅仅是想自动化搞定&lt;strong&gt;限定条件&lt;/strong&gt;下 &lt;strong&gt;中文&lt;/strong&gt; 字幕下载。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;CSF 使用交流目前只有一个 telegram 小组，&lt;a href=&#34;https://t.me/chinesesubfinder&#34;&gt;https://t.me/chinesesubfinder&lt;/a&gt; 。&lt;/p&gt; &#xA; &lt;p&gt;个人建议是以使用和讨论为主，bug 的反馈最好去 issue 按模板反馈和提出问题，也好有一个地方追溯。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;暂时下线 subhd、zimuku 的字幕下载支持，再次上线时间不定，请更新到 v0.33 版本及其以上，新增的 a4k 和 csf 字幕源（在“实验室”界面开启“共享字幕”才会使用）也许可以暂时缓解下载需求。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;后续会长期支持两个方向的 Docker 镜像，差异见 &lt;a href=&#34;https://raw.githubusercontent.com/allanpk716/ChineseSubFinder/master/docker/readme.md&#34;&gt;Docker 部署教程&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;全功能版本 &lt;code&gt;allanpk716/chinesesubfinder:latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;轻量化版本 &lt;code&gt;allanpk716/chinesesubfinder:latest-lite&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;如果使用了国内 Docker 镜像源，可能 latest 无法正确拉取到最新，那么请指定具体的 tag 去拉取，举例：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;allanpk716/chinesesubfinder:v0.33.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allanpk716/chinesesubfinder:v0.33.0-lite&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;最新的版本可以查看 &lt;a href=&#34;https://hub.docker.com/repository/docker/allanpk716/chinesesubfinder&#34;&gt;Docker Hub&lt;/a&gt; ，如果不在 telegram 群内，没有特殊的需求请不要选择 &lt;strong&gt;Beta&lt;/strong&gt; 版本使用。&lt;/p&gt; &#xA;&lt;h2&gt;前置要求&lt;/h2&gt; &#xA;&lt;p&gt;如果想顺利的用起来，还是对电影、连续剧的目录有一定的要求的。见文档:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E7%94%B5%E5%BD%B1%E5%92%8C%E8%BF%9E%E7%BB%AD%E5%89%A7%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E7%A4%BA%E4%BE%8B.md&#34;&gt;电影的推荐目录结构&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E8%BF%9E%E7%BB%AD%E5%89%A7%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E8%A6%81%E6%B1%82.md&#34;&gt;连续剧目录结构要求&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;h3&gt;如何部署&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/allanpk716/ChineseSubFinder/master/docker/readme.md&#34;&gt;Docker 部署教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/v0.20%E6%95%99%E7%A8%8B/01.%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E4%B8%8A%E4%BD%BF%E7%94%A8.md&#34;&gt;如何在 Windows 上使用&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sleele.com/2021/06/25/docker-chinesesubfinder-%E4%B8%AD%E6%96%87%E5%AD%97%E5%B9%95%E8%87%AA%E5%8A%A8%E4%B8%8B%E8%BD%BD/&#34;&gt;Docker ChineseSubFinder--中文字幕自动下载 | sleele 的博客 - 第三方教程&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;如何使用&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/tree/docs/DesignFile/%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B&#34;&gt;使用教程&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E4%BC%A0%E5%8F%82%E5%90%AF%E5%8A%A8/%E4%BC%A0%E5%8F%82%E5%90%AF%E5%8A%A8.md&#34;&gt;传参启动（v0.41.x 之后才支持）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API 文档文档&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/tree/docs/DesignFile/ApiKey%E8%AE%BE%E8%AE%A1&#34;&gt;对外的 http api&lt;/a&gt;,以及&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/issues/336&#34;&gt;示例&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;高阶设置&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E5%AD%97%E5%B9%95%E6%97%B6%E9%97%B4%E8%BD%B4%E6%A0%A1%E6%AD%A3V2.md&#34;&gt;字幕时间轴校正 V2&lt;/a&gt;，有待更新 v0.20.x 对应的设置&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;建议了解的文档：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E5%85%B3%E4%BA%8E%E5%AD%97%E5%B9%95%E5%90%8D%E7%A7%B0%E5%91%BD%E5%90%8D%E6%A0%BC%E5%BC%8F%E8%AF%B4%E6%98%8E.md&#34;&gt;关于字幕名称命名格式说明&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果文档没有及时更新，或者描述含糊、歧义的，欢迎提 &lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/issues&#34;&gt;ISSUES&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;问题列表&lt;/h2&gt; &#xA;&lt;p&gt;如果遇到问题了，可以先看看这里总结的问题，如果未能解决，依然可以继续提问。&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E9%97%AE%E9%A2%98%E5%88%97%E8%A1%A8.md&#34;&gt;问题列表&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;其他文档&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E5%89%8A%E5%88%AE%E5%99%A8%E7%9A%84%E6%8E%A8%E8%8D%90%E8%AE%BE%E7%BD%AE.md&#34;&gt;削刮器的推荐设置&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%A7%86%E9%A2%91%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E4%B8%8B%E8%BD%BD%E3%80%81%E6%9B%B4%E6%96%B0%E5%AD%97%E5%B9%95%E7%9A%84.md&#34;&gt;如何判断视频是否需要下载、更新字幕的&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E8%AE%BE%E8%AE%A1.md&#34;&gt;设计&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/raw/docs/DesignFile/%E5%AD%97%E5%B9%95%E6%97%B6%E9%97%B4%E8%BD%B4%E6%A0%A1%E6%AD%A3%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90/%E5%AD%97%E5%B9%95%E6%97%B6%E9%97%B4%E8%BD%B4%E6%A0%A1%E6%AD%A3%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0%E8%A7%A3%E6%9E%90.md&#34;&gt;字幕时间轴校正功能实现解析(有待补全)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;如何编译此项目&lt;/h2&gt; &#xA;&lt;p&gt;首选需要编译 Web 部分，见 frontend/README.md&lt;/p&gt; &#xA;&lt;p&gt;然后才能编译可执行程序部分&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果是 Windows，那么可以从这里下载 [MinGW-w64 - for 32 and 64 bit Windows - Browse /Toolchains targetting Win64 at SourceForge.net](&lt;a href=&#34;https://sourceforge.net/projects/mingw-w64/files/Toolchains&#34;&gt;https://sourceforge.net/projects/mingw-w64/files/Toolchains&lt;/a&gt; targetting Win64/)&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;[x86_64-posix-seh](&lt;a href=&#34;https://sourceforge.net/projects/mingw-w64/files/Toolchains&#34;&gt;https://sourceforge.net/projects/mingw-w64/files/Toolchains&lt;/a&gt; targetting Win64/Personal Builds/mingw-builds/8.1.0/threads-posix/seh/x86_64-8.1.0-release-posix-seh-rt_v6-rev0.7z)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;后面的 CGO 编译需要：&lt;/p&gt; &#xA; &lt;p&gt;1、新建变量: PATH，变量值为：xx\mingw64\bin&lt;/p&gt; &#xA; &lt;p&gt;2、新建变量：LIB，变量值为：xx\mingw64\lib&lt;/p&gt; &#xA; &lt;p&gt;3、新建变量：INCLUDE，变量值为：xx\mingw64\include&lt;/p&gt; &#xA; &lt;p&gt;使用 gcc -v 验证是否生效&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;go mod tidy ，然后需要设置 CGO=1 ，找到 cmd\chinesesubfinder\main.go 这个入口文件就好了。 &lt;span&gt;😂&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;编译代码如下：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;cd ./cmd/chinesesubfinder &lt;br&gt; &amp;amp;&amp;amp; go build -ldflags=&#34;-s -w&#34; -o /app/chinesesubfinder&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;跨平台是没有问题的，作者现在就是 Windows 开发的。因为手头没得 Mac OS ，也懒得整虚拟机去试，应该也是可以直接玩起来的。&lt;/p&gt; &#xA;&lt;h2&gt;如何参与开发&lt;/h2&gt; &#xA;&lt;p&gt;建议看 &lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/issues/20&#34;&gt;关于中文字幕下载器的中长期规划讨论、求助&lt;/a&gt;，里面提及了后续的规划，需要大家的讨论。&lt;/p&gt; &#xA;&lt;p&gt;目前阶段参与开发可以会遇到项目大范围重构，导致合并代码困难的问题。&lt;/p&gt; &#xA;&lt;p&gt;可以协助规划和设计 Web 设置页面的需求，比如 api 接口设计什么的。&lt;/p&gt; &#xA;&lt;p&gt;正式版本发布后，参与开发可以更加容易一些。&lt;/p&gt; &#xA;&lt;h2&gt;版本&lt;/h2&gt; &#xA;&lt;p&gt;请务必使用最新版本，这里忘记（懒得）写更新记录的话，可以去 &lt;a href=&#34;https://github.com/allanpk716/ChineseSubFinder/releases&#34;&gt;Releases&lt;/a&gt; 查看最新到什么版本了。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;因为业余时间不多，都是断断续续做的，基本我只能记得最近两个版本的功能···&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v0.42.x 新增，支持手动上传字幕，以及在 Web 界面即可预览字幕效果，重写“库”的刷新逻辑。 -- 2022年10月31日&lt;/li&gt; &#xA; &lt;li&gt;···&lt;/li&gt; &#xA; &lt;li&gt;完成初版，仅仅支持电影的字幕下载 -- 2021 年 6 月 13 日&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;p&gt;见 &lt;a href=&#34;https://github.com/users/allanpk716/projects/2&#34;&gt;ChineseSubProject&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;业余时间有限，没空更新这个 TODO，有什么想要的直接提 issues，或者加 TG 咨询。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;感谢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iMyon&#34;&gt;iMyon (Myon) &lt;/a&gt; 帮搞定 Web 前端部分&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devome&#34;&gt;devome&lt;/a&gt; 帮解决 Linux 和 Docker 编译、部署相关问题&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://weibo.com/u/2884534224&#34;&gt;宅宅还是度度&lt;/a&gt; 设计 Logo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;感谢下面项目的帮助&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Andyfoo/GoSubTitleSearcher&#34;&gt;Andyfoo/GoSubTitleSearcher: 字幕搜索查询(go 语言版)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-rod/rod&#34;&gt;go-rod/rod: A Devtools driver for web automation and scraping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ausaki/subfinder&#34;&gt;ausaki/subfinder: 字幕查找器&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/golandscape/sat&#34;&gt;golandscape/sat: 高性能简繁体转换&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smacke/ffsubsync&#34;&gt;smacke/ffsubsync: Automagically synchronize subtitles with video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shimberger/gohls&#34;&gt;shimberger/gohls: A server that exposes a directory for video streaming via web interface&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>OffchainLabs/arbitrum</title>
    <updated>2022-12-06T01:33:13Z</updated>
    <id>tag:github.com,2022-12-06:/OffchainLabs/arbitrum</id>
    <link href="https://github.com/OffchainLabs/arbitrum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powers fast, private, decentralized applications&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/OffchainLabs/arbitrum/master/docs/assets/arbitrum_horizontal_logo.png&#34; width=&#34;600&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Arbitrum Monorepo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/OffchainLabs/arbitrum&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/OffchainLabs/arbitrum.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/OffchainLabs/arbitrum&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/OffchainLabs/arbitrum/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Arbitrum is a Layer 2 cryptocurrency platform that makes smart contracts scalable, fast, and private. Arbitrum interoperates closely with Ethereum, so Ethereum developers can easily cross-compile their contracts to run on Arbitrum. Arbitrum achieves these goals through a unique combination of incentives, network protocol design, and virtual machine architecture. Arbitrum has three modes: channels, AnyTrust sidechains, and rollup. Channels and sidechains provide the AnyTrust Guarantee which ensures that the code will run correctly as long as any validator is honest.&lt;/p&gt; &#xA;&lt;p&gt;Want to learn more? Join the team on &lt;a href=&#34;https://discord.gg/ZpZuw7p&#34;&gt;Discord&lt;/a&gt;, follow the &lt;a href=&#34;https://developer.offchainlabs.com&#34;&gt;developer guide&lt;/a&gt;, and read the &lt;a href=&#34;https://developer.offchainlabs.com/docs/inside_arbitrum&#34;&gt;white paper&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;This repository is offered under the Apache 2.0 license. See LICENSE for details.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://developer.offchainlabs.com/docs/Developer_Quickstart/&#34;&gt;the guide&lt;/a&gt; on our developer site to build a demo dapp on Arbitrum.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>go-telegram-bot-api/telegram-bot-api</title>
    <updated>2022-12-06T01:33:13Z</updated>
    <id>tag:github.com,2022-12-06:/go-telegram-bot-api/telegram-bot-api</id>
    <link href="https://github.com/go-telegram-bot-api/telegram-bot-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golang bindings for the Telegram Bot API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Golang bindings for the Telegram Bot API&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-telegram-bot-api/telegram-bot-api/v5&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/go-telegram-bot-api/telegram-bot-api/v5.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-telegram-bot-api/telegram-bot-api/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/go-telegram-bot-api/telegram-bot-api/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All methods are fairly self-explanatory, and reading the &lt;a href=&#34;https://pkg.go.dev/github.com/go-telegram-bot-api/telegram-bot-api/v5&#34;&gt;godoc&lt;/a&gt; page should explain everything. If something isn&#39;t clear, open an issue or submit a pull request.&lt;/p&gt; &#xA;&lt;p&gt;There are more tutorials and high-level information on the website, &lt;a href=&#34;https://go-telegram-bot-api.dev&#34;&gt;go-telegram-bot-api.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The scope of this project is just to provide a wrapper around the API without any additional features. There are other projects for creating something with plugins and command handlers without having to design all that yourself.&lt;/p&gt; &#xA;&lt;p&gt;Join &lt;a href=&#34;https://telegram.me/go_telegram_bot_api&#34;&gt;the development group&lt;/a&gt; if you want to ask questions or discuss development.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;First, ensure the library is installed and up to date by running &lt;code&gt;go get -u github.com/go-telegram-bot-api/telegram-bot-api/v5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a very simple bot that just displays any gotten updates, then replies it to that chat.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;tgbotapi &#34;github.com/go-telegram-bot-api/telegram-bot-api/v5&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;bot, err := tgbotapi.NewBotAPI(&#34;MyAwesomeBotToken&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;bot.Debug = true&#xA;&#xA;&#x9;log.Printf(&#34;Authorized on account %s&#34;, bot.Self.UserName)&#xA;&#xA;&#x9;u := tgbotapi.NewUpdate(0)&#xA;&#x9;u.Timeout = 60&#xA;&#xA;&#x9;updates := bot.GetUpdatesChan(u)&#xA;&#xA;&#x9;for update := range updates {&#xA;&#x9;&#x9;if update.Message != nil { // If we got a message&#xA;&#x9;&#x9;&#x9;log.Printf(&#34;[%s] %s&#34;, update.Message.From.UserName, update.Message.Text)&#xA;&#xA;&#x9;&#x9;&#x9;msg := tgbotapi.NewMessage(update.Message.Chat.ID, update.Message.Text)&#xA;&#x9;&#x9;&#x9;msg.ReplyToMessageID = update.Message.MessageID&#xA;&#xA;&#x9;&#x9;&#x9;bot.Send(msg)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to use webhooks (if you wish to run on Google App Engine), you may use a slightly different method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#xA;&#x9;&#34;github.com/go-telegram-bot-api/telegram-bot-api/v5&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;bot, err := tgbotapi.NewBotAPI(&#34;MyAwesomeBotToken&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;bot.Debug = true&#xA;&#xA;&#x9;log.Printf(&#34;Authorized on account %s&#34;, bot.Self.UserName)&#xA;&#xA;&#x9;wh, _ := tgbotapi.NewWebhookWithCert(&#34;https://www.example.com:8443/&#34;+bot.Token, &#34;cert.pem&#34;)&#xA;&#xA;&#x9;_, err = bot.Request(wh)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;info, err := bot.GetWebhookInfo()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;if info.LastErrorDate != 0 {&#xA;&#x9;&#x9;log.Printf(&#34;Telegram callback failed: %s&#34;, info.LastErrorMessage)&#xA;&#x9;}&#xA;&#xA;&#x9;updates := bot.ListenForWebhook(&#34;/&#34; + bot.Token)&#xA;&#x9;go http.ListenAndServeTLS(&#34;0.0.0.0:8443&#34;, &#34;cert.pem&#34;, &#34;key.pem&#34;, nil)&#xA;&#xA;&#x9;for update := range updates {&#xA;&#x9;&#x9;log.Printf(&#34;%+v\n&#34;, update)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need, you may generate a self-signed certificate, as this requires HTTPS / TLS. The above example tells Telegram that this is your certificate and that it should be trusted, even though it is not properly signed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 3560 -subj &#34;//O=Org\CN=Test&#34; -nodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that &lt;a href=&#34;https://letsencrypt.org&#34;&gt;Let&#39;s Encrypt&lt;/a&gt; is available, you may wish to generate your free TLS certificate there.&lt;/p&gt;</summary>
  </entry>
</feed>