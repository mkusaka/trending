<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-21T01:33:54Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>isaacphi/mcp-language-server</title>
    <updated>2025-08-21T01:33:54Z</updated>
    <id>tag:github.com,2025-08-21:/isaacphi/mcp-language-server</id>
    <link href="https://github.com/isaacphi/mcp-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;mcp-language-server gives MCP enabled clients access semantic tools like get definition, references, rename, and diagnostics.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Language Server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/isaacphi/mcp-language-server/actions/workflows/go.yml&#34;&gt;&lt;img src=&#34;https://github.com/isaacphi/mcp-language-server/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Go Tests&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/isaacphi/mcp-language-server&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/isaacphi/mcp-language-server&#34; alt=&#34;Go Report Card&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/isaacphi/mcp-language-server&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/isaacphi/mcp-language-server&#34; alt=&#34;GoDoc&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/isaacphi/mcp-language-server/raw/main/go.mod&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/isaacphi/mcp-language-server&#34; alt=&#34;Go Version&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an &lt;a href=&#34;https://modelcontextprotocol.io/introduction&#34;&gt;MCP&lt;/a&gt; server that runs and exposes a &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;language server&lt;/a&gt; to LLMs. Not a language server for MCP, whatever that would be.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mcp-language-server&lt;/code&gt; helps MCP enabled clients navigate codebases more easily by giving them access semantic tools like get definition, references, rename, and diagnostics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/isaacphi/mcp-language-server/main/demo.gif&#34; alt=&#34;Demo&#34; /&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Go&lt;/strong&gt;: Follow instructions at &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;https://golang.org/doc/install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install or update this server&lt;/strong&gt;: &lt;code&gt;go install github.com/isaacphi/mcp-language-server@latest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install a language server&lt;/strong&gt;: &lt;em&gt;follow one of the guides below&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: &lt;em&gt;follow one of the guides below&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Go (gopls)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install gopls&lt;/strong&gt;: &lt;code&gt;go install golang.org/x/tools/gopls@latest&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#34;--workspace&#34;, &#34;/Users/you/dev/yourproject/&#34;, &#34;--lsp&#34;, &#34;gopls&#34;],&#xA;      &#34;env&#34;: {&#xA;        &#34;PATH&#34;: &#34;/opt/homebrew/bin:/Users/you/go/bin&#34;,&#xA;        &#34;GOPATH&#34;: &#34;/users/you/go&#34;,&#xA;        &#34;GOCACHE&#34;: &#34;/users/you/Library/Caches/go-build&#34;,&#xA;        &#34;GOMODCACHE&#34;: &#34;/Users/you/go/pkg/mod&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Not all clients will need these environment variables. For Claude Desktop you will need to update the environment variables above based on your machine and username:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;PATH&lt;/code&gt; needs to contain the path to &lt;code&gt;go&lt;/code&gt; and to &lt;code&gt;gopls&lt;/code&gt;. Get this with &lt;code&gt;echo $(which go):$(which gopls)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;GOPATH&lt;/code&gt;, &lt;code&gt;GOCACHE&lt;/code&gt;, and &lt;code&gt;GOMODCACHE&lt;/code&gt; may be different on your machine. These are the defaults.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rust (rust-analyzer)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install rust-analyzer&lt;/strong&gt;: &lt;code&gt;rustup component add rust-analyzer&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/Users/you/dev/yourproject/&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;rust-analyzer&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Python (pyright)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install pyright&lt;/strong&gt;: &lt;code&gt;npm install -g pyright&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/Users/you/dev/yourproject/&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;pyright-langserver&#34;,&#xA;        &#34;--&#34;,&#xA;        &#34;--stdio&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Typescript (typescript-language-server)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install typescript-language-server&lt;/strong&gt;: &lt;code&gt;npm install -g typescript typescript-language-server&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/Users/you/dev/yourproject/&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;typescript-language-server&#34;,&#xA;        &#34;--&#34;,&#xA;        &#34;--stdio&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;C/C++ (clangd)&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Install clangd&lt;/strong&gt;: Download prebuilt binaries from the &lt;a href=&#34;https://github.com/clangd/clangd/releases&#34;&gt;official LLVM releases page&lt;/a&gt; or install via your system&#39;s package manager (e.g., &lt;code&gt;apt install clangd&lt;/code&gt;, &lt;code&gt;brew install clangd&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Configure your MCP client&lt;/strong&gt;: This will be different but similar for each client. For Claude Desktop, add the following to &lt;code&gt;~/Library/Application\\ Support/Claude/claude_desktop_config.json&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;pre&gt;&#xA;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/Users/you/dev/yourproject/&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;/path/to/your/clangd_binary&#34;,&#xA;        &#34;--&#34;,&#xA;        &#34;--compile-commands-dir=/path/to/yourproject/build_or_compile_commands_dir&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/pre&gt; &#xA;  &lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Note&amp;lt;/strong&amp;gt;:&amp;lt;/p&amp;gt;&#xA;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li&amp;gt;Replace &amp;lt;code&amp;gt;/path/to/your/clangd_binary&amp;lt;/code&amp;gt; with the actual path to your clangd executable.&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;&amp;lt;code&amp;gt;--compile-commands-dir&amp;lt;/code&amp;gt; should point to the directory containing your &amp;lt;code&amp;gt;compile_commands.json&amp;lt;/code&amp;gt; file (e.g., &amp;lt;code&amp;gt;./build&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;./cmake-build-debug&amp;lt;/code&amp;gt;).&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;Ensure &amp;lt;code&amp;gt;compile_commands.json&amp;lt;/code&amp;gt; is generated for your project for clangd to work effectively.&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Other&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;p&gt;I have only tested this repo with the servers above but it should be compatible with many more. Note:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The language server must communicate over stdio.&lt;/li&gt; &#xA;   &lt;li&gt;Any aruments after &lt;code&gt;--&lt;/code&gt; are sent as arguments to the language server.&lt;/li&gt; &#xA;   &lt;li&gt;Any env variables are passed on to the language server.&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;definition&lt;/code&gt;: Retrieves the complete source code definition of any symbol (function, type, constant, etc.) from your codebase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;references&lt;/code&gt;: Locates all usages and references of a symbol throughout the codebase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt;: Provides diagnostic information for a specific file, including warnings and errors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hover&lt;/code&gt;: Display documentation, type hints, or other hover information for a given location.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rename_symbol&lt;/code&gt;: Rename a symbol across a project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;edit_file&lt;/code&gt;: Allows making multiple text edits to a file based on line numbers. Provides a more reliable and context-economical way to edit files compared to search and replace based edit tools.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This codebase makes use of edited code from &lt;a href=&#34;https://go.googlesource.com/tools/+/refs/heads/master/gopls/internal/protocol&#34;&gt;gopls&lt;/a&gt; to handle LSP communication. See ATTRIBUTION for details. Everything here is covered by a permissive BSD style license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mark3labs/mcp-go&#34;&gt;mcp-go&lt;/a&gt; is used for MCP communication. Thank you for your service.&lt;/p&gt; &#xA;&lt;p&gt;This is beta software. Please let me know by creating an issue if you run into any problems or have suggestions of any kind.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please keep PRs small and open Issues first for anything substantial. AI slop O.K. as long as it is tested, passes checks, and doesn&#39;t smell too bad.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/isaacphi/mcp-language-server.git&#xA;cd mcp-language-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://just.systems/man/en/&#34;&gt;justfile&lt;/a&gt; is included for convenience:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;just -l&#xA;Available recipes:&#xA;    build    # Build&#xA;    check    # Run code audit checks&#xA;    fmt      # Format code&#xA;    generate # Generate LSP types and methods&#xA;    help     # Help&#xA;    install  # Install locally&#xA;    snapshot # Update snapshot tests&#xA;    test     # Run tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure your Claude Desktop (or similar) to use the local binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;language-server&#34;: {&#xA;      &#34;command&#34;: &#34;/full/path/to/your/clone/mcp-language-server/mcp-language-server&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;--workspace&#34;,&#xA;        &#34;/path/to/workspace&#34;,&#xA;        &#34;--lsp&#34;,&#xA;        &#34;language-server-executable&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;LOG_LEVEL&#34;: &#34;DEBUG&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rebuild after making changes.&lt;/p&gt; &#xA;&lt;h3&gt;Logging&lt;/h3&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;LOG_LEVEL&lt;/code&gt; environment variable to DEBUG enables verbose logging to stderr for all components including messages to and from the language server and the language server&#39;s logs.&lt;/p&gt; &#xA;&lt;h3&gt;LSP interaction&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;internal/lsp/methods.go&lt;/code&gt; contains generated code to make calls to the connected language server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;internal/protocol/tsprotocol.go&lt;/code&gt; contains generated code for LSP types. I borrowed this from &lt;code&gt;gopls&lt;/code&gt;&#39;s source code. Thank you for your service.&lt;/li&gt; &#xA; &lt;li&gt;LSP allows language servers to return different types for the same methods. Go doesn&#39;t like this so there are some ugly workarounds in &lt;code&gt;internal/protocol/interfaces.go&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Local Development and Snapshot Tests&lt;/h3&gt; &#xA;&lt;p&gt;There is a snapshot test suite that makes it a lot easier to try out changes to tools. These run actual language servers on mock workspaces and capture output and logs.&lt;/p&gt; &#xA;&lt;p&gt;You will need the language servers installed locally to run them. There are tests for go, rust, python, and typescript.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;integrationtests/&#xA;├── tests/        # Tests are in this folder&#xA;├── snapshots/    # Snapshots of tool outputs&#xA;├── test-output/  # Gitignored folder showing the final state of each workspace and logs after each test run&#xA;└── workspaces/   # Mock workspaces that the tools run on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update snapshots, run &lt;code&gt;UPDATE_SNAPSHOTS=true go test ./integrationtests/...&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>