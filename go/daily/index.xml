<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-24T01:34:41Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opencontainers/runc</title>
    <updated>2022-11-24T01:34:41Z</updated>
    <id>tag:github.com,2022-11-24:/opencontainers/runc</id>
    <link href="https://github.com/opencontainers/runc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CLI tool for spawning and running containers according to the OCI specification&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;runc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/opencontainers/runc&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/opencontainers/runc&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/opencontainers/runc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/opencontainers/runc.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/588&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/588/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opencontainers/runc/actions?query=workflow%3Avalidate&#34;&gt;&lt;img src=&#34;https://github.com/opencontainers/runc/workflows/validate/badge.svg?sanitize=true&#34; alt=&#34;gha/validate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/opencontainers/runc/actions?query=workflow%3Aci&#34;&gt;&lt;img src=&#34;https://github.com/opencontainers/runc/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;gha/ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/opencontainers/runc&#34;&gt;&lt;img src=&#34;https://api.cirrus-ci.com/github/opencontainers/runc.svg?sanitize=true&#34; alt=&#34;CirrusCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; is a CLI tool for spawning and running containers on Linux according to the OCI specification.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;You can find official releases of &lt;code&gt;runc&lt;/code&gt; on the &lt;a href=&#34;https://github.com/opencontainers/runc/releases&#34;&gt;release&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;The reporting process and disclosure communications are outlined &lt;a href=&#34;https://github.com/opencontainers/org/raw/master/SECURITY.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Security Audit&lt;/h3&gt; &#xA;&lt;p&gt;A third party security audit was performed by Cure53, you can see the full report &lt;a href=&#34;https://github.com/opencontainers/runc/raw/master/docs/Security-Audit.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; only supports Linux. It must be built with Go version 1.18 or higher.&lt;/p&gt; &#xA;&lt;p&gt;In order to enable seccomp support you will need to install &lt;code&gt;libseccomp&lt;/code&gt; on your platform.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;e.g. &lt;code&gt;libseccomp-devel&lt;/code&gt; for CentOS, or &lt;code&gt;libseccomp-dev&lt;/code&gt; for Ubuntu&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create a &#39;github.com/opencontainers&#39; in your GOPATH/src&#xA;cd github.com/opencontainers&#xA;git clone https://github.com/opencontainers/runc&#xA;cd runc&#xA;&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;go get&lt;/code&gt; to install to your &lt;code&gt;GOPATH&lt;/code&gt;, assuming that you have a &lt;code&gt;github.com&lt;/code&gt; parent folder already created under &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/opencontainers/runc&#xA;cd $GOPATH/src/github.com/opencontainers/runc&#xA;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; will be installed to &lt;code&gt;/usr/local/sbin/runc&lt;/code&gt; on your system.&lt;/p&gt; &#xA;&lt;h4&gt;Build Tags&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; supports optional build tags for compiling support of various features, with some of them enabled by default (see &lt;code&gt;BUILDTAGS&lt;/code&gt; in top-level &lt;code&gt;Makefile&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To change build tags from the default, set the &lt;code&gt;BUILDTAGS&lt;/code&gt; variable for make, e.g. to disable seccomp:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make BUILDTAGS=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build Tag&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;Enabled by default&lt;/th&gt; &#xA;   &lt;th&gt;Dependency&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;seccomp&lt;/td&gt; &#xA;   &lt;td&gt;Syscall filtering&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;libseccomp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The following build tags were used earlier, but are now obsoleted:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;nokmem&lt;/strong&gt; (since runc v1.0.0-rc94 kernel memory settings are ignored)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;apparmor&lt;/strong&gt; (since runc v1.0.0-rc93 the feature is always enabled)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;selinux&lt;/strong&gt; (since runc v1.0.0-rc93 the feature is always enabled)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Running the test suite&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; currently supports running its test suite via Docker. To run the suite just type &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are additional make targets for running the tests outside of a container but this is not recommended as the tests are written with the expectation that they can write and remove anywhere.&lt;/p&gt; &#xA;&lt;p&gt;You can run a specific test case by setting the &lt;code&gt;TESTFLAGS&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make test TESTFLAGS=&#34;-run=SomeTestFunction&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a specific integration test by setting the &lt;code&gt;TESTPATH&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make test TESTPATH=&#34;/checkpoint.bats&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a specific rootless integration test by setting the &lt;code&gt;ROOTLESS_TESTPATH&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make test ROOTLESS_TESTPATH=&#34;/checkpoint.bats&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run a test using your container engine&#39;s flags by setting &lt;code&gt;CONTAINER_ENGINE_BUILD_FLAGS&lt;/code&gt; and &lt;code&gt;CONTAINER_ENGINE_RUN_FLAGS&lt;/code&gt; variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# make test CONTAINER_ENGINE_BUILD_FLAGS=&#34;--build-arg http_proxy=http://yourproxy/&#34; CONTAINER_ENGINE_RUN_FLAGS=&#34;-e http_proxy=http://yourproxy/&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies Management&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; uses &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; for dependencies management. Please refer to &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; for how to add or update new dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Update vendored dependencies&#xA;make vendor&#xA;# Verify all dependencies&#xA;make verify-dependencies&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using runc&lt;/h2&gt; &#xA;&lt;p&gt;Please note that runc is a low level tool not designed with an end user in mind. It is mostly employed by other higher level container software.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, unless there is some specific use case that prevents the use of tools like Docker or Podman, it is not recommended to use runc directly.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to use runc, here&#39;s how.&lt;/p&gt; &#xA;&lt;h3&gt;Creating an OCI Bundle&lt;/h3&gt; &#xA;&lt;p&gt;In order to use runc you must have your container in the format of an OCI bundle. If you have Docker installed you can use its &lt;code&gt;export&lt;/code&gt; method to acquire a root filesystem from an existing Docker container.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create the top most bundle directory&#xA;mkdir /mycontainer&#xA;cd /mycontainer&#xA;&#xA;# create the rootfs directory&#xA;mkdir rootfs&#xA;&#xA;# export busybox via Docker into the rootfs directory&#xA;docker export $(docker create busybox) | tar -C rootfs -xvf -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After a root filesystem is populated you just generate a spec in the format of a &lt;code&gt;config.json&lt;/code&gt; file inside your bundle. &lt;code&gt;runc&lt;/code&gt; provides a &lt;code&gt;spec&lt;/code&gt; command to generate a base template spec that you are then able to edit. To find features and documentation for fields in the spec please refer to the &lt;a href=&#34;https://github.com/opencontainers/runtime-spec&#34;&gt;specs&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;runc spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Containers&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you have an OCI bundle from the previous step you can execute the container in two different ways.&lt;/p&gt; &#xA;&lt;p&gt;The first way is to use the convenience command &lt;code&gt;run&lt;/code&gt; that will handle creating, starting, and deleting the container after it exits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run as root&#xA;cd /mycontainer&#xA;runc run mycontainerid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you used the unmodified &lt;code&gt;runc spec&lt;/code&gt; template this should give you a &lt;code&gt;sh&lt;/code&gt; session inside the container.&lt;/p&gt; &#xA;&lt;p&gt;The second way to start a container is using the specs lifecycle operations. This gives you more power over how the container is created and managed while it is running. This will also launch the container in the background so you will have to edit the &lt;code&gt;config.json&lt;/code&gt; to remove the &lt;code&gt;terminal&lt;/code&gt; setting for the simple examples below (see more details about &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/terminals.md&#34;&gt;runc terminal handling&lt;/a&gt;). Your process field in the &lt;code&gt;config.json&lt;/code&gt; should look like this below with &lt;code&gt;&#34;terminal&#34;: false&lt;/code&gt; and &lt;code&gt;&#34;args&#34;: [&#34;sleep&#34;, &#34;5&#34;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;        &#34;process&#34;: {&#xA;                &#34;terminal&#34;: false,&#xA;                &#34;user&#34;: {&#xA;                        &#34;uid&#34;: 0,&#xA;                        &#34;gid&#34;: 0&#xA;                },&#xA;                &#34;args&#34;: [&#xA;                        &#34;sleep&#34;, &#34;5&#34;&#xA;                ],&#xA;                &#34;env&#34;: [&#xA;                        &#34;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&#34;,&#xA;                        &#34;TERM=xterm&#34;&#xA;                ],&#xA;                &#34;cwd&#34;: &#34;/&#34;,&#xA;                &#34;capabilities&#34;: {&#xA;                        &#34;bounding&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ],&#xA;                        &#34;effective&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ],&#xA;                        &#34;inheritable&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ],&#xA;                        &#34;permitted&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ],&#xA;                        &#34;ambient&#34;: [&#xA;                                &#34;CAP_AUDIT_WRITE&#34;,&#xA;                                &#34;CAP_KILL&#34;,&#xA;                                &#34;CAP_NET_BIND_SERVICE&#34;&#xA;                        ]&#xA;                },&#xA;                &#34;rlimits&#34;: [&#xA;                        {&#xA;                                &#34;type&#34;: &#34;RLIMIT_NOFILE&#34;,&#xA;                                &#34;hard&#34;: 1024,&#xA;                                &#34;soft&#34;: 1024&#xA;                        }&#xA;                ],&#xA;                &#34;noNewPrivileges&#34;: true&#xA;        },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can go through the lifecycle operations in your shell.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run as root&#xA;cd /mycontainer&#xA;runc create mycontainerid&#xA;&#xA;# view the container is created and in the &#34;created&#34; state&#xA;runc list&#xA;&#xA;# start the process inside the container&#xA;runc start mycontainerid&#xA;&#xA;# after 5 seconds view that the container has exited and is now in the stopped state&#xA;runc list&#xA;&#xA;# now delete the container&#xA;runc delete mycontainerid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows higher level systems to augment the containers creation logic with setup of various settings after the container is created and/or before it is deleted. For example, the container&#39;s network stack is commonly set up after &lt;code&gt;create&lt;/code&gt; but before &lt;code&gt;start&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Rootless containers&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; has the ability to run containers without root privileges. This is called &lt;code&gt;rootless&lt;/code&gt;. You need to pass some parameters to &lt;code&gt;runc&lt;/code&gt; in order to run rootless containers. See below and compare with the previous version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In order to use this feature, &#34;User Namespaces&#34; must be compiled and enabled in your kernel. There are various ways to do this depending on your distribution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Confirm &lt;code&gt;CONFIG_USER_NS=y&lt;/code&gt; is set in your kernel configuration (normally found in &lt;code&gt;/proc/config.gz&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Arch/Debian: &lt;code&gt;echo 1 &amp;gt; /proc/sys/kernel/unprivileged_userns_clone&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;RHEL/CentOS 7: &lt;code&gt;echo 28633 &amp;gt; /proc/sys/user/max_user_namespaces&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run the following commands as an ordinary user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Same as the first example&#xA;mkdir ~/mycontainer&#xA;cd ~/mycontainer&#xA;mkdir rootfs&#xA;docker export $(docker create busybox) | tar -C rootfs -xvf -&#xA;&#xA;# The --rootless parameter instructs runc spec to generate a configuration for a rootless container, which will allow you to run the container as a non-root user.&#xA;runc spec --rootless&#xA;&#xA;# The --root parameter tells runc where to store the container state. It must be writable by the user.&#xA;runc --root /tmp/runc run mycontainerid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Supervisors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;runc&lt;/code&gt; can be used with process supervisors and init systems to ensure that containers are restarted when they exit. An example systemd unit file looks something like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-systemd&#34;&gt;[Unit]&#xA;Description=Start My Container&#xA;&#xA;[Service]&#xA;Type=forking&#xA;ExecStart=/usr/local/sbin/runc run -d --pid-file /run/mycontainerid.pid mycontainerid&#xA;ExecStopPost=/usr/local/sbin/runc delete mycontainerid&#xA;WorkingDirectory=/mycontainer&#xA;PIDFile=/run/mycontainerid.pid&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/cgroup-v2.md&#34;&gt;cgroup v2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/checkpoint-restore.md&#34;&gt;Checkpoint and restore&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/systemd.md&#34;&gt;systemd cgroup driver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/terminals.md&#34;&gt;Terminals and standard IO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/docs/experimental.md&#34;&gt;Experimental features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code and docs are released under the &lt;a href=&#34;https://raw.githubusercontent.com/opencontainers/runc/main/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>maaslalani/nap</title>
    <updated>2022-11-24T01:34:41Z</updated>
    <id>tag:github.com,2022-11-24:/maaslalani/nap</id>
    <link href="https://github.com/maaslalani/nap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Code snippets in your terminal 🛌&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nap&lt;/h1&gt; &#xA;&lt;img width=&#34;1200&#34; alt=&#34;Nap&#34; src=&#34;https://user-images.githubusercontent.com/42545625/202545409-eb53f92a-233a-4f78-b598-a59c65248ad3.png&#34;&gt; &#xA;&lt;p&gt;&lt;sub&gt;&lt;sub&gt;z&lt;/sub&gt;&lt;/sub&gt;&lt;sub&gt;z&lt;/sub&gt;z&lt;/p&gt; &#xA;&lt;p&gt;Nap is a code snippet manager for your terminal. Create and access new snippets quickly with the command-line interface or browse, manage, and organize them with the text-user interface. Keep your code snippets safe, sound, and well-rested in your terminal.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;1000&#34; src=&#34;https://user-images.githubusercontent.com/42545625/202577549-f2e0887a-b740-41f4-9408-c2f53673503f.gif&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Text-based User Interface&lt;/h2&gt; &#xA;&lt;p&gt;Launch the interactive interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;1000&#34; src=&#34;https://user-images.githubusercontent.com/42545625/202768989-caf2ab62-b69d-4e2d-ac93-1517eab7f2ad.gif&#34;&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Key Bindings&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Action&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Key&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Create a new snippet&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;n&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Edit selected snippet (in &lt;code&gt;$EDITOR&lt;/code&gt;)&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;e&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Copy selected snippet to clipboard&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Paste clipboard to selected snippet&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;p&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Delete selected snippet&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;x&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Rename selected snippet&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;r&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Set folder of selected snippet&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;f&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Set language of selected snippet&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;L&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Move to next pane&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;tab&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Move to previous pane&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;shift+tab&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Search for snippets&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;/&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Toggle help&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;?&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Quit application&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;kbd&gt;q&lt;/kbd&gt; &lt;kbd&gt;ctrl+c&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Command Line Interface&lt;/h2&gt; &#xA;&lt;p&gt;Create new snippets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Quick save an untitled snippet.&#xA;nap &amp;lt; main.go&#xA;&#xA;# From a file, specify Notes/ folder and Go language.&#xA;nap Notes/FizzBuzz.go &amp;lt; main.go&#xA;&#xA;# Save some code from the internet for later.&#xA;curl https://example.com/main.go | nap Notes/FizzBuzz.go&#xA;&#xA;# Works great with GitHub gists&#xA;gh gist view 4ff8a6472247e6dd2315fd4038926522 | nap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/42545625/202767159-134d679f-490f-4ad2-8875-cda604aa7b13.gif&#34;&gt; &#xA;&lt;p&gt;Output saved snippets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Fuzzy find snippet.&#xA;nap fuzzy&#xA;&#xA;# Write snippet to a file.&#xA;nap go/boilerplate &amp;gt; main.go&#xA;&#xA;# Copy snippet to clipboard.&#xA;nap foobar | pbcopy&#xA;nap foobar | xclip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/42545625/202240249-d724fd73-2f90-4036-b9fc-6d2ccef982b3.gif&#34;&gt; &#xA;&lt;p&gt;List snippets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nap list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/42545625/202242653-1696dda6-2527-4c38-b673-74d67ad1517f.gif&#34;&gt; &#xA;&lt;p&gt;Fuzzy find a snippet (with &lt;a href=&#34;https://github.com/charmbracelet/gum&#34;&gt;Gum&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nap $(nap list | gum filter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;600&#34; src=&#34;https://user-images.githubusercontent.com/42545625/202240268-3a71fde6-73c3-4b0a-b129-f87ec1bb1b88.gif&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;!--&#xA;&#xA;Use a package manager:&#xA;&#xA;```bash&#xA;# macOS&#xA;brew install nap&#xA;&#xA;# Arch&#xA;yay -S nap&#xA;&#xA;# Nix&#xA;nix-env -iA nixpkgs.nap&#xA;```&#xA;&#xA;--&gt; &#xA;&lt;p&gt;Install with Go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/maaslalani/nap@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download a binary from the &lt;a href=&#34;https://github.com/maaslalani/nap/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;Nap is customized through environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NAP_HOME&lt;/code&gt;, the folder where your snippets will rest. Defaults to &lt;code&gt;$XDG_DATA_HOME/nap&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NAP_DEFAULT_LANGUAGE&lt;/code&gt;, the language your snippets will use by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NAP_THEME&lt;/code&gt;, the theme to highlight code. Defaults to &lt;code&gt;dracula&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NAP_PRIMARY_COLOR&lt;/code&gt; / &lt;code&gt;NAP_PRIMARY_COLOR_SUBDUED&lt;/code&gt;, the color to use for the active pane title bars.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NAP_RED&lt;/code&gt; / &lt;code&gt;NAP_BRIGHT_RED&lt;/code&gt;, the colors to use for the selected item being deleted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NAP_GREEN&lt;/code&gt; / &lt;code&gt;NAP_BRIGHT_GREEN&lt;/code&gt;, the colors to use for the selected item being copied.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NAP_FOREGROUND&lt;/code&gt; / &lt;code&gt;NAP_BACKGROUND&lt;/code&gt;, the colors to use for the foreground and background colors.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;NAP_BLACK&lt;/code&gt; / &lt;code&gt;NAP_WHITE&lt;/code&gt; / &lt;code&gt;NAP_GRAY&lt;/code&gt;, the colors to use for the unselected items.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;1000&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/42545625/202867429-5bcf8fae-5dd7-478c-b958-638aa5765d97.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/maaslalani/nap/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;d love to hear your feedback on improving &lt;code&gt;nap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to reach out via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;mailto:maas@lalani.dev&#34;&gt;Email&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/maaslalani&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maaslalani/nap/issues/new&#34;&gt;GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;sub&gt;&lt;sub&gt;z&lt;/sub&gt;&lt;/sub&gt;&lt;sub&gt;z&lt;/sub&gt;z&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>docker/cli</title>
    <updated>2022-11-24T01:34:41Z</updated>
    <id>tag:github.com,2022-11-24:/docker/cli</id>
    <link href="https://github.com/docker/cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Docker CLI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Docker CLI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/docker/cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-docs-007d9c?logo=go&amp;amp;logoColor=white&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/docker/cli/actions?query=workflow%3Abuild&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/docker/cli/build?label=build&amp;amp;logo=github&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/docker/cli/actions?query=workflow%3Atest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/docker/cli/test?label=test&amp;amp;logo=github&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/docker/cli&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/docker/cli&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/docker/cli&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/docker/cli/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This repository is the home of the cli used in the Docker CE and Docker EE products.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;docker/cli&lt;/code&gt; is developed using Docker.&lt;/p&gt; &#xA;&lt;p&gt;Build CLI from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker buildx bake&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build binaries for all supported platforms:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker buildx bake cross&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build for a specific platform:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker buildx bake --set binary.platform=linux/arm64 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build dynamic binary for glibc or musl:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;USE_GLIBC=1 docker buildx bake dynbinary &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run all linting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker buildx bake lint shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run test:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker buildx bake test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List all the available targets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In-container development environment&lt;/h3&gt; &#xA;&lt;p&gt;Start an interactive development environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make -f docker.Makefile shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Legal&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Brought to you courtesy of our legal counsel. For more context, please see the &lt;a href=&#34;https://github.com/docker/cli/raw/master/NOTICE&#34;&gt;NOTICE&lt;/a&gt; document in this repo.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use and transfer of Docker may be subject to certain restrictions by the United States and other governments.&lt;/p&gt; &#xA;&lt;p&gt;It is your responsibility to ensure that your use and/or transfer does not violate applicable laws.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://www.bis.doc.gov&#34;&gt;https://www.bis.doc.gov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;docker/cli is licensed under the Apache License, Version 2.0. See &lt;a href=&#34;https://github.com/docker/docker/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for the full license text.&lt;/p&gt;</summary>
  </entry>
</feed>