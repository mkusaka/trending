<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-12T01:36:22Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>acikkaynak/deprem-yardim-backend-go</title>
    <updated>2023-02-12T01:36:22Z</updated>
    <id>tag:github.com,2023-02-12:/acikkaynak/deprem-yardim-backend-go</id>
    <link href="https://github.com/acikkaynak/deprem-yardim-backend-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;deprem-yardim-backend-go&lt;/h1&gt; &#xA;&lt;h1&gt;Proje Mimarisi&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-backend-go/main/docs/architecture.jpeg&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Endpointler&lt;/h1&gt; &#xA;&lt;h3&gt;/feeds/areas&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Query Params&lt;/strong&gt;: &lt;code&gt;sw_lat&lt;/code&gt; &lt;code&gt;sw_lng&lt;/code&gt; &lt;code&gt;ne_lat&lt;/code&gt; &lt;code&gt;ne_lng&lt;/code&gt; &lt;code&gt;time_stamp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;İşlenmiş lokasyon verisini afetharita.com adresine lokasyon ve time_stamp bilgisine döner. Eğer timestamp alanı boş geçilirse son 1 yıla ait kayıtlar döner.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Örnek Request&lt;/strong&gt; : &lt;code&gt;/feeds/areas?ne_lat=37.62633260711298&amp;amp;ne_lng=36.97311401367188&amp;amp;sw_lat=37.558254797440675&amp;amp;sw_lng=36.82479858398438&amp;amp;time_stamp=1675807028&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;/feeds/:id&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Path variable&lt;/strong&gt;: &lt;code&gt;id (int64)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tekil bir işlenmemiş twitter verisini döner.&lt;/p&gt; &#xA;&lt;h3&gt;Run Locally&lt;/h3&gt; &#xA;&lt;p&gt;Redis: &lt;code&gt;docker run -d --name redis-stack-server -p 6379:6379 redis/redis-stack-server:latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Grafana: &lt;code&gt;docker run --name grafana -i -p 3000:3000 grafana/grafana&lt;/code&gt; &lt;a href=&#34;https://grafana.com/grafana/dashboards/6671-go-processes/&#34;&gt;Dashboard&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prometheus: &lt;code&gt;docker run -it -d --name prometheus -p 9090:9090 -v $PWD:/etc/prometheus prom/prometheus --config.file=/etc/prometheus/prometheus.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API vs Consumer Mode&lt;/h2&gt; &#xA;&lt;p&gt;Dockerfile contains 2 executables: &lt;code&gt;api&lt;/code&gt; and &lt;code&gt;consumer&lt;/code&gt;. One of the option can be selected via &lt;code&gt;--entrypoint&lt;/code&gt; parameter.&lt;/p&gt; &#xA;&lt;p&gt;After building docker image, in order to run api that contains fiber endpoints;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --entrypoint &#34;/api&#34; &amp;lt;image_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In same way, if you want to run application in consumer mode, use following&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --entrypoint &#34;/consumer&#34; &amp;lt;image_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;/monitor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-backend-go/main/docs/fiber-monitor.png&#34; alt=&#34;monitor&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;/metrics&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-backend-go/main/docs/metrics.png&#34; alt=&#34;metrics&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Swagger&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/acikkaynak/deprem-yardim-backend-go/main/docs/swagger.png&#34; alt=&#34;swagger&#34;&gt; swagger klasörü altındaki dosyaları güncellemek için bash:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;swag init -g cmd/api/main.go --output swagger&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Leizhenpeng/feishu-chatGpt</title>
    <updated>2023-02-12T01:36:22Z</updated>
    <id>tag:github.com,2023-02-12:/Leizhenpeng/feishu-chatGpt</id>
    <link href="https://github.com/Leizhenpeng/feishu-chatGpt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Feishu ChatGpt 在飞书上与ChatGPT随时对话~&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Leizhenpeng/feishu-chatGpt/master/docs/image.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 在飞书上与ChatGPT随时对话 &lt;br&gt; &lt;br&gt; Feishu ChatGpt &lt;/p&gt; &#xA;&lt;h2&gt;👻 机器人功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持私人对话&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持群聊@机器人回复&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 持续对话联系上下文&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 超时自动结束对话&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 用户主动开启新对话&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 对接&lt;a href=&#34;https://github.com/f/awesome-chatgpt-prompts&#34;&gt;prompts&lt;/a&gt;,允许自定义交流场景&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; markdown格式回复，重点支持代码场景&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Leizhenpeng/feishu-chatGpt/master/docs/image2.png&#34; alt=&#34;&#34; width=&#34;800&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;🌟 项目特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🍏 基于 OpenAI-&lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;Gpt3&lt;/a&gt; 接口&lt;/li&gt; &#xA; &lt;li&gt;🍎 通过 lark，将 ChatGPT 接入&lt;a href=&#34;https://open.feishu.cn/app&#34;&gt;飞书&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🥒 支持&lt;a href=&#34;https://github.com/serverless-devs/serverless-devs&#34;&gt;Serverless云函数&lt;/a&gt;、&lt;a href=&#34;https://dashboard.cpolar.com/login&#34;&gt;本地环境&lt;/a&gt;、&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; 多种渠道部署&lt;/li&gt; &#xA; &lt;li&gt;🍋 基于&lt;a href=&#34;https://github.com/patrickmn/go-cache&#34;&gt;goCache&lt;/a&gt;内存键值对缓存&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目部署&lt;/h2&gt; &#xA;&lt;h6&gt;有关飞书具体的配置文件说明，&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Leizhenpeng/feishu-chatGpt/master/#%E8%AF%A6%E7%BB%86%E9%85%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4&#34;&gt;➡︎ 点击查看&lt;/a&gt;&lt;/strong&gt;&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:Leizhenpeng/feishu-chatGpt.git&#xA;cd feishu-chatGpt/code&#xA;&#xA;# 配置config.yaml&#xA;mv config.example.yaml config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;本地部署&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;如果你的服务器没有公网 IP，可以使用反向代理的方式&lt;/p&gt; &#xA; &lt;p&gt;飞书的服务器在国内对ngrok的访问速度很慢，所以推荐使用一些国内的反向代理服务商&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://dashboard.cpolar.com/&#34;&gt;cpolar&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://natapp.cn/&#34;&gt;natapp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;//测试部署&#xA;go run main.go&#xA;cpolar http 9000&#xA;&#xA;//正式部署&#xA;nohup cpolar http 9000 -log=stdout &amp;amp;&#xA;&#xA;//查看服务器状态&#xA;https://dashboard.cpolar.com/status&#xA;&#xA;// 下线服务&#xA;ps -ef | grep cpolar&#xA;kill -9 PID&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;更多详细介绍，参考&lt;a href=&#34;https://www.bilibili.com/video/BV1nW4y1378T/&#34;&gt;飞书上的小计算器: Go机器人来啦&lt;/a&gt;&lt;/p&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;serverless云函数部署&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;安装&lt;a href=&#34;https://docs.serverless-devs.com/serverless-devs/quick_start&#34;&gt;severless&lt;/a&gt;工具&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @serverless-devs/s -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;一键部署&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ..&#xA;s deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;更多详细介绍，参考&lt;a href=&#34;https://www.bilibili.com/video/BV1nW4y1378T/&#34;&gt;仅需1min，用Serverless部署基于 gin 的飞书机器人&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;docker部署&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 配置config.yaml&#xA;mv config.example.yaml config.yaml&#xA;# 构建运行&#xA;cd ..&#xA;docker build -t feishu-chatgpt:latest .&#xA;docker run -d --name feishu-chatgpt -p 9000:9000 feishu-chatgpt:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;br&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;详细配置步骤&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;获取 &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI&lt;/a&gt; 的 KEY&lt;/li&gt; &#xA; &lt;li&gt;创建 &lt;a href=&#34;https://open.feishu.cn/&#34;&gt;飞书&lt;/a&gt; 机器人 &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;前往&lt;a href=&#34;https://open.feishu.cn/app?lang=zh-CN&#34;&gt;开发者平台&lt;/a&gt;创建应用,并获取到 APPID 和 Secret&lt;/li&gt; &#xA;   &lt;li&gt;前往&lt;code&gt;应用功能-机器人&lt;/code&gt;, 创建机器人&lt;/li&gt; &#xA;   &lt;li&gt;从cpolar或者serverless获得公网地址,在飞书机器人后台的 &lt;code&gt;事件订阅&lt;/code&gt; 板块填写。例如， &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;http://xxxx.r6.cpolar.top&lt;/code&gt;为cpolar暴露的公网地址&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;/webhook/event&lt;/code&gt;为统一的应用路由&lt;/li&gt; &#xA;     &lt;li&gt;最终的回调地址为 &lt;code&gt;http://xxxx.r6.cpolar.top/webhook/event&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;给订阅添加下列回调事件 &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;im:message&lt;/li&gt; &#xA;     &lt;li&gt;im:message.group_at_msg(获取群组中所有消息)&lt;/li&gt; &#xA;     &lt;li&gt;im:message.group_at_msg:readonly(接收群聊中@机器人消息事件)&lt;/li&gt; &#xA;     &lt;li&gt;im:message.p2p_msg(获取用户发给机器人的单聊消息)&lt;/li&gt; &#xA;     &lt;li&gt;im:message.p2p_msg:readonly(读取用户发给机器人的单聊消息)&lt;/li&gt; &#xA;     &lt;li&gt;im:message:send_as_bot(获取用户在群组中@机器人的消息)&lt;/li&gt; &#xA;     &lt;li&gt;im:chat:readonly(获取群组信息)&lt;/li&gt; &#xA;     &lt;li&gt;im:chat(获取与更新群组信息)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;发布版本，等待企业管理员审核通过&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;更多介绍，参考&lt;a href=&#34;https://www.bilibili.com/video/BV12M41187rV/&#34;&gt;飞书上的小计算器: Go机器人来啦&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;相关阅读&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/patrickmn/go-cache&#34;&gt;go-cache&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.liwenzhou.com/posts/Go/zap/&#34;&gt;在Go语言项目中使用Zap日志库&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.feishu.cn/hc/zh-CN/articles/794300086214&#34;&gt;飞书 User_ID、Open_ID 与 Union_ID 区别&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://open.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/im-v1/message/events/receive&#34;&gt;飞书重复接受到消息&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;更多交流&lt;/h3&gt; &#xA;&lt;p&gt;可以加入飞书群~&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Leizhenpeng/feishu-chatGpt/master/docs/talk.png&#34; alt=&#34;&#34; width=&#34;300&#34; align=&#34;left&#34;&gt; &lt;/p&gt;</summary>
  </entry>
</feed>