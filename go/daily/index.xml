<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-08T01:34:43Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PuerkitoBio/goquery</title>
    <updated>2023-08-08T01:34:43Z</updated>
    <id>tag:github.com,2023-08-08:/PuerkitoBio/goquery</id>
    <link href="https://github.com/PuerkitoBio/goquery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A little like that j-thing, only in Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;goquery - a little like that j-thing, only in Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PuerkitoBio/goquery/actions&#34;&gt;&lt;img src=&#34;https://github.com/PuerkitoBio/goquery/actions/workflows/test.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/PuerkitoBio/goquery&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/PuerkitoBio/goquery.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/PuerkitoBio/goquery?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/PuerkitoBio/goquery/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;goquery brings a syntax and a set of features similar to &lt;a href=&#34;http://jquery.com/&#34;&gt;jQuery&lt;/a&gt; to the &lt;a href=&#34;http://golang.org/&#34;&gt;Go language&lt;/a&gt;. It is based on Go&#39;s &lt;a href=&#34;https://pkg.go.dev/golang.org/x/net/html&#34;&gt;net/html package&lt;/a&gt; and the CSS Selector library &lt;a href=&#34;https://github.com/andybalholm/cascadia&#34;&gt;cascadia&lt;/a&gt;. Since the net/html parser returns nodes, and not a full-featured DOM tree, jQuery&#39;s stateful manipulation functions (like height(), css(), detach()) have been left off.&lt;/p&gt; &#xA;&lt;p&gt;Also, because the net/html parser requires UTF-8 encoding, so does goquery: it is the caller&#39;s responsibility to ensure that the source document provides UTF-8 encoded HTML. See the &lt;a href=&#34;https://github.com/PuerkitoBio/goquery/wiki/Tips-and-tricks&#34;&gt;wiki&lt;/a&gt; for various options to do this.&lt;/p&gt; &#xA;&lt;p&gt;Syntax-wise, it is as close as possible to jQuery, with the same function names when possible, and that warm and fuzzy chainable interface. jQuery being the ultra-popular library that it is, I felt that writing a similar HTML-manipulating library was better to follow its API than to start anew (in the same spirit as Go&#39;s &lt;code&gt;fmt&lt;/code&gt; package), even though some of its methods are less than intuitive (looking at you, &lt;a href=&#34;http://api.jquery.com/index/&#34;&gt;index()&lt;/a&gt;...).&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PuerkitoBio/goquery/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PuerkitoBio/goquery/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PuerkitoBio/goquery/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PuerkitoBio/goquery/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PuerkitoBio/goquery/master/#related-projects&#34;&gt;Related Projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PuerkitoBio/goquery/master/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PuerkitoBio/goquery/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please note that because of the net/html dependency, goquery requires Go1.1+ and is tested on Go1.7+.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go get github.com/PuerkitoBio/goquery&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(optional) To run unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/PuerkitoBio/goquery&#xA;$ go test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(optional) To run benchmarks (warning: it runs for a few minutes):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/PuerkitoBio/goquery&#xA;$ go test -bench=&#34;.*&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that goquery&#39;s API is now stable, and will not break.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2023-02-18 (v1.8.1)&lt;/strong&gt; : Update &lt;code&gt;go.mod&lt;/code&gt; dependencies, update CI workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-10-25 (v1.8.0)&lt;/strong&gt; : Add &lt;code&gt;Render&lt;/code&gt; function to render a &lt;code&gt;Selection&lt;/code&gt; to an &lt;code&gt;io.Writer&lt;/code&gt; (thanks &lt;a href=&#34;https://github.com/anthonygedeon&#34;&gt;@anthonygedeon&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-11 (v1.7.1)&lt;/strong&gt; : Update go.mod dependencies and add dependabot config (thanks &lt;a href=&#34;https://github.com/jauderho&#34;&gt;@jauderho&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-06-14 (v1.7.0)&lt;/strong&gt; : Add &lt;code&gt;Single&lt;/code&gt; and &lt;code&gt;SingleMatcher&lt;/code&gt; functions to optimize first-match selection (thanks &lt;a href=&#34;https://github.com/gdollardollar&#34;&gt;@gdollardollar&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-01-11 (v1.6.1)&lt;/strong&gt; : Fix panic when calling &lt;code&gt;{Prepend,Append,Set}Html&lt;/code&gt; on a &lt;code&gt;Selection&lt;/code&gt; that contains non-Element nodes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-10-08 (v1.6.0)&lt;/strong&gt; : Parse html in context of the container node for all functions that deal with html strings (&lt;code&gt;AfterHtml&lt;/code&gt;, &lt;code&gt;AppendHtml&lt;/code&gt;, etc.). Thanks to &lt;a href=&#34;https://github.com/thiemok&#34;&gt;@thiemok&lt;/a&gt; and &lt;a href=&#34;https://github.com/davidjwilkins&#34;&gt;@davidjwilkins&lt;/a&gt; for their work on this.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020-02-04 (v1.5.1)&lt;/strong&gt; : Update module dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2018-11-15 (v1.5.0)&lt;/strong&gt; : Go module support (thanks @Zaba505).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2018-06-07 (v1.4.1)&lt;/strong&gt; : Add &lt;code&gt;NewDocumentFromReader&lt;/code&gt; examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2018-03-24 (v1.4.0)&lt;/strong&gt; : Deprecate &lt;code&gt;NewDocument(url)&lt;/code&gt; and &lt;code&gt;NewDocumentFromResponse(response)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2018-01-28 (v1.3.0)&lt;/strong&gt; : Add &lt;code&gt;ToEnd&lt;/code&gt; constant to &lt;code&gt;Slice&lt;/code&gt; until the end of the selection (thanks to @davidjwilkins for raising the issue).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2018-01-11 (v1.2.0)&lt;/strong&gt; : Add &lt;code&gt;AddBack*&lt;/code&gt; and deprecate &lt;code&gt;AndSelf&lt;/code&gt; (thanks to @davidjwilkins).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2017-02-12 (v1.1.0)&lt;/strong&gt; : Add &lt;code&gt;SetHtml&lt;/code&gt; and &lt;code&gt;SetText&lt;/code&gt; (thanks to @glebtv).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2016-12-29 (v1.0.2)&lt;/strong&gt; : Optimize allocations for &lt;code&gt;Selection.Text&lt;/code&gt; (thanks to @radovskyb).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2016-08-28 (v1.0.1)&lt;/strong&gt; : Optimize performance for large documents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2016-07-27 (v1.0.0)&lt;/strong&gt; : Tag version 1.0.0.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2016-06-15&lt;/strong&gt; : Invalid selector strings internally compile to a &lt;code&gt;Matcher&lt;/code&gt; implementation that never matches any node (instead of a panic). So for example, &lt;code&gt;doc.Find(&#34;~&#34;)&lt;/code&gt; returns an empty &lt;code&gt;*Selection&lt;/code&gt; object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2016-02-02&lt;/strong&gt; : Add &lt;code&gt;NodeName&lt;/code&gt; utility function similar to the DOM&#39;s &lt;code&gt;nodeName&lt;/code&gt; property. It returns the tag name of the first element in a selection, and other relevant values of non-element nodes (see &lt;a href=&#34;https://pkg.go.dev/github.com/PuerkitoBio/goquery&#34;&gt;doc&lt;/a&gt; for details). Add &lt;code&gt;OuterHtml&lt;/code&gt; utility function similar to the DOM&#39;s &lt;code&gt;outerHTML&lt;/code&gt; property (named &lt;code&gt;OuterHtml&lt;/code&gt; in small caps for consistency with the existing &lt;code&gt;Html&lt;/code&gt; method on the &lt;code&gt;Selection&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2015-04-20&lt;/strong&gt; : Add &lt;code&gt;AttrOr&lt;/code&gt; helper method to return the attribute&#39;s value or a default value if absent. Thanks to &lt;a href=&#34;https://github.com/piotrkowalczuk&#34;&gt;piotrkowalczuk&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2015-02-04&lt;/strong&gt; : Add more manipulation functions - Prepend* - thanks again to &lt;a href=&#34;https://github.com/thatguystone&#34;&gt;Andrew Stone&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2014-11-28&lt;/strong&gt; : Add more manipulation functions - ReplaceWith*, Wrap* and Unwrap - thanks again to &lt;a href=&#34;https://github.com/thatguystone&#34;&gt;Andrew Stone&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2014-11-07&lt;/strong&gt; : Add manipulation functions (thanks to &lt;a href=&#34;https://github.com/thatguystone&#34;&gt;Andrew Stone&lt;/a&gt;) and &lt;code&gt;*Matcher&lt;/code&gt; functions, that receive compiled cascadia selectors instead of selector strings, thus avoiding potential panics thrown by goquery via &lt;code&gt;cascadia.MustCompile&lt;/code&gt; calls. This results in better performance (selectors can be compiled once and reused) and more idiomatic error handling (you can handle cascadia&#39;s compilation errors, instead of recovering from panics, which had been bugging me for a long time). Note that the actual type expected is a &lt;code&gt;Matcher&lt;/code&gt; interface, that &lt;code&gt;cascadia.Selector&lt;/code&gt; implements. Other matcher implementations could be used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2014-11-06&lt;/strong&gt; : Change import paths of net/html to golang.org/x/net/html (see &lt;a href=&#34;https://groups.google.com/forum/#!topic/golang-nuts/eD8dh3T9yyA&#34;&gt;https://groups.google.com/forum/#!topic/golang-nuts/eD8dh3T9yyA&lt;/a&gt;). Make sure to update your code to use the new import path too when you call goquery with &lt;code&gt;html.Node&lt;/code&gt;s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;v0.3.2&lt;/strong&gt; : Add &lt;code&gt;NewDocumentFromReader()&lt;/code&gt; (thanks jweir) which allows creating a goquery document from an io.Reader.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;v0.3.1&lt;/strong&gt; : Add &lt;code&gt;NewDocumentFromResponse()&lt;/code&gt; (thanks assassingj) which allows creating a goquery document from an http response.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;v0.3.0&lt;/strong&gt; : Add &lt;code&gt;EachWithBreak()&lt;/code&gt; which allows to break out of an &lt;code&gt;Each()&lt;/code&gt; loop by returning false. This function was added instead of changing the existing &lt;code&gt;Each()&lt;/code&gt; to avoid breaking compatibility.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;v0.2.1&lt;/strong&gt; : Make go-getable, now that &lt;a href=&#34;https://github.com/golang/net/&#34;&gt;go.net/html is Go1.0-compatible&lt;/a&gt; (thanks to @matrixik for pointing this out).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;v0.2.0&lt;/strong&gt; : Add support for negative indices in Slice(). &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt; &lt;code&gt;Document.Root&lt;/code&gt; is removed, &lt;code&gt;Document&lt;/code&gt; is now a &lt;code&gt;Selection&lt;/code&gt; itself (a selection of one, the root element, just like &lt;code&gt;Document.Root&lt;/code&gt; was before). Add jQuery&#39;s Closest() method.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;v0.1.1&lt;/strong&gt; : Add benchmarks to use as baseline for refactorings, refactor Next...() and Prev...() methods to use the new html package&#39;s linked list features (Next/PrevSibling, FirstChild). Good performance boost (40+% in some cases).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;v0.1.0&lt;/strong&gt; : Initial release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;goquery exposes two structs, &lt;code&gt;Document&lt;/code&gt; and &lt;code&gt;Selection&lt;/code&gt;, and the &lt;code&gt;Matcher&lt;/code&gt; interface. Unlike jQuery, which is loaded as part of a DOM document, and thus acts on its containing document, goquery doesn&#39;t know which HTML document to act upon. So it needs to be told, and that&#39;s what the &lt;code&gt;Document&lt;/code&gt; type is for. It holds the root document node as the initial Selection value to manipulate.&lt;/p&gt; &#xA;&lt;p&gt;jQuery often has many variants for the same function (no argument, a selector string argument, a jQuery object argument, a DOM element argument, ...). Instead of exposing the same features in goquery as a single method with variadic empty interface arguments, statically-typed signatures are used following this naming convention:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the jQuery equivalent can be called with no argument, it has the same name as jQuery for the no argument signature (e.g.: &lt;code&gt;Prev()&lt;/code&gt;), and the version with a selector string argument is called &lt;code&gt;XxxFiltered()&lt;/code&gt; (e.g.: &lt;code&gt;PrevFiltered()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;When the jQuery equivalent &lt;strong&gt;requires&lt;/strong&gt; one argument, the same name as jQuery is used for the selector string version (e.g.: &lt;code&gt;Is()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The signatures accepting a jQuery object as argument are defined in goquery as &lt;code&gt;XxxSelection()&lt;/code&gt; and take a &lt;code&gt;*Selection&lt;/code&gt; object as argument (e.g.: &lt;code&gt;FilterSelection()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The signatures accepting a DOM element as argument in jQuery are defined in goquery as &lt;code&gt;XxxNodes()&lt;/code&gt; and take a variadic argument of type &lt;code&gt;*html.Node&lt;/code&gt; (e.g.: &lt;code&gt;FilterNodes()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The signatures accepting a function as argument in jQuery are defined in goquery as &lt;code&gt;XxxFunction()&lt;/code&gt; and take a function as argument (e.g.: &lt;code&gt;FilterFunction()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The goquery methods that can be called with a selector string have a corresponding version that take a &lt;code&gt;Matcher&lt;/code&gt; interface and are defined as &lt;code&gt;XxxMatcher()&lt;/code&gt; (e.g.: &lt;code&gt;IsMatcher()&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Utility functions that are not in jQuery but are useful in Go are implemented as functions (that take a &lt;code&gt;*Selection&lt;/code&gt; as parameter), to avoid a potential naming clash on the &lt;code&gt;*Selection&lt;/code&gt;&#39;s methods (reserved for jQuery-equivalent behaviour).&lt;/p&gt; &#xA;&lt;p&gt;The complete &lt;a href=&#34;https://pkg.go.dev/github.com/PuerkitoBio/goquery&#34;&gt;package reference documentation can be found here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note that Cascadia&#39;s selectors do not necessarily match all supported selectors of jQuery (Sizzle). See the &lt;a href=&#34;https://github.com/andybalholm/cascadia&#34;&gt;cascadia project&lt;/a&gt; for details. Invalid selector strings compile to a &lt;code&gt;Matcher&lt;/code&gt; that fails to match any node. Behaviour of the various functions that take a selector string as argument follows from that fact, e.g. (where &lt;code&gt;~&lt;/code&gt; is an invalid selector string):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Find(&#34;~&#34;)&lt;/code&gt; returns an empty selection because the selector string doesn&#39;t match anything.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Add(&#34;~&#34;)&lt;/code&gt; returns a new selection that holds the same nodes as the original selection, because it didn&#39;t add any node (selector string didn&#39;t match anything).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ParentsFiltered(&#34;~&#34;)&lt;/code&gt; returns an empty selection because the selector string doesn&#39;t match anything.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ParentsUntil(&#34;~&#34;)&lt;/code&gt; returns all parents of the selection because the selector string didn&#39;t match any element to stop before the top element.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See some tips and tricks in the &lt;a href=&#34;https://github.com/PuerkitoBio/goquery/wiki/Tips-and-tricks&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Adapted from example_test.go:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;  &#34;log&#34;&#xA;  &#34;net/http&#34;&#xA;&#xA;  &#34;github.com/PuerkitoBio/goquery&#34;&#xA;)&#xA;&#xA;func ExampleScrape() {&#xA;  // Request the HTML page.&#xA;  res, err := http.Get(&#34;http://metalsucks.net&#34;)&#xA;  if err != nil {&#xA;    log.Fatal(err)&#xA;  }&#xA;  defer res.Body.Close()&#xA;  if res.StatusCode != 200 {&#xA;    log.Fatalf(&#34;status code error: %d %s&#34;, res.StatusCode, res.Status)&#xA;  }&#xA;&#xA;  // Load the HTML document&#xA;  doc, err := goquery.NewDocumentFromReader(res.Body)&#xA;  if err != nil {&#xA;    log.Fatal(err)&#xA;  }&#xA;&#xA;  // Find the review items&#xA;  doc.Find(&#34;.left-content article .post-title&#34;).Each(func(i int, s *goquery.Selection) {&#xA;&#x9;&#x9;// For each item found, get the title&#xA;&#x9;&#x9;title := s.Find(&#34;a&#34;).Text()&#xA;&#x9;&#x9;fmt.Printf(&#34;Review %d: %s\n&#34;, i, title)&#xA;&#x9;})&#xA;}&#xA;&#xA;func main() {&#xA;  ExampleScrape()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andrewstuart/goq&#34;&gt;Goq&lt;/a&gt;, an HTML deserialization and scraping library based on goquery and struct tags.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andybalholm/cascadia&#34;&gt;andybalholm/cascadia&lt;/a&gt;, the CSS selector library used by goquery.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/suntong/cascadia&#34;&gt;suntong/cascadia&lt;/a&gt;, a command-line interface to the cascadia CSS selector library, useful to test selectors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gocolly/colly&#34;&gt;gocolly/colly&lt;/a&gt;, a lightning fast and elegant Scraping Framework&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gnulnx/goperf&#34;&gt;gnulnx/goperf&lt;/a&gt;, a website performance test tool that also fetches static assets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MontFerret/ferret&#34;&gt;MontFerret/ferret&lt;/a&gt;, declarative web scraping.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tacusci/berrycms&#34;&gt;tacusci/berrycms&lt;/a&gt;, a modern simple to use CMS with easy to write plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/slotix/dataflowkit&#34;&gt;Dataflow kit&lt;/a&gt;, Web Scraping framework for Gophers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/geziyor/geziyor&#34;&gt;Geziyor&lt;/a&gt;, a fast web crawling &amp;amp; scraping framework for Go. Supports JS rendering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foolin/pagser&#34;&gt;Pagser&lt;/a&gt;, a simple, easy, extensible, configurable HTML parser to struct based on goquery and struct tags.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vhodges/stitcherd&#34;&gt;stitcherd&lt;/a&gt;, A server for doing server side includes using css selectors and DOM updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jakopako/goskyr&#34;&gt;goskyr&lt;/a&gt;, an easily configurable command-line scraper written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/davemolk/goGetJS&#34;&gt;goGetJS&lt;/a&gt;, a tool for extracting, searching, and saving JavaScript files (with optional headless browser).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways you can support the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use it, star it, build something with it, spread the word! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you do build something open-source or otherwise publicly-visible, let me know so I can add it to the &lt;a href=&#34;https://raw.githubusercontent.com/PuerkitoBio/goquery/master/#related-projects&#34;&gt;Related Projects&lt;/a&gt; section!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Raise issues to improve the project (note: doc typos and clarifications are issues too!) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Please search existing issues before opening a new one - it may have already been addressed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pull requests: please discuss new code in an issue first, unless the fix is really trivial. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Make sure new code is tested.&lt;/li&gt; &#xA;   &lt;li&gt;Be mindful of existing code - PRs that break existing code have a high probability of being declined, unless it fixes a serious issue.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sponsor the developer &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See the Github Sponsor button at the top of the repo on github&lt;/li&gt; &#xA;   &lt;li&gt;or via BuyMeACoffee.com, below&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/mna&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://opensource.org/licenses/BSD-3-Clause&#34;&gt;BSD 3-Clause license&lt;/a&gt;, the same as the &lt;a href=&#34;http://golang.org/LICENSE&#34;&gt;Go language&lt;/a&gt;. Cascadia&#39;s license is &lt;a href=&#34;https://github.com/andybalholm/cascadia/raw/master/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lxc/incus</title>
    <updated>2023-08-08T01:34:43Z</updated>
    <id>tag:github.com,2023-08-08:/lxc/incus</id>
    <link href="https://github.com/lxc/incus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powerful system container and virtual machine manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Incus&lt;/h1&gt; &#xA;&lt;p&gt;Incus is a modern, secure and powerful system container and virtual machine manager.&lt;/p&gt; &#xA;&lt;!-- Include start Incus intro --&gt; &#xA;&lt;p&gt;It provides a unified experience for running and managing full Linux systems inside containers or virtual machines. Incus supports images for a large number of Linux distributions (official Ubuntu images and images provided by the community) and is built around a very powerful, yet pretty simple, REST API. Incus scales from one instance on a single machine to a cluster in a full data center rack, making it suitable for running workloads both for development and in production.&lt;/p&gt; &#xA;&lt;p&gt;Incus allows you to easily set up a system that feels like a small private cloud. You can run any type of workload in an efficient way while keeping your resources optimized.&lt;/p&gt; &#xA;&lt;p&gt;You should consider using Incus if you want to containerize different environments or run virtual machines, or in general run and manage your infrastructure in a cost-effective way.&lt;/p&gt; &#xA;&lt;!-- Include end Incus intro --&gt; &#xA;&lt;h2&gt;Fork of Canonical LXD&lt;/h2&gt; &#xA;&lt;p&gt;Incus, which is named after the &lt;a href=&#34;https://en.wikipedia.org/wiki/Cumulonimbus_incus&#34;&gt;Cumulonimbus incus&lt;/a&gt; or anvil cloud is a community fork of Canonical&#39;s LXD.&lt;/p&gt; &#xA;&lt;p&gt;This fork was made in response to &lt;a href=&#34;https://linuxcontainers.org/lxd/&#34;&gt;Canonical&#39;s takeover&lt;/a&gt; of the LXD project from the Linux Containers community.&lt;/p&gt; &#xA;&lt;p&gt;The main aim of this fork is to provide once again a real community project where everyone&#39;s contributions are welcome and no one single commercial entity is in charge of the project.&lt;/p&gt; &#xA;&lt;p&gt;The fork was done at the LXD 5.16 release, making it possible to upgrade from LXD releases up to and including LXD 5.16. Upgrading from a later LXD release may not work as the two projects are likely to start diverging from this point onwards.&lt;/p&gt; &#xA;&lt;p&gt;Incus will keep monitoring and importing relevant changes from LXD over time though changes and features that are specific to Ubuntu or Canonical&#39;s products are unlikely to be carried over.&lt;/p&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;This is still the very early days of this fork. No packages or even releases currently exist. For production use, you are likely better off sticking with Canonical&#39;s LXD for the time being until stable release of Incus exist.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CI (client)&lt;/td&gt; &#xA;   &lt;td&gt;GitHub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cyphar/incus/actions&#34;&gt;&lt;img src=&#34;https://github.com/cyphar/incus/workflows/Client%20build%20and%20unit%20tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CI (server)&lt;/td&gt; &#xA;   &lt;td&gt;GitHub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cyphar/incus/actions&#34;&gt;&lt;img src=&#34;https://github.com/cyphar/incus/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go documentation&lt;/td&gt; &#xA;   &lt;td&gt;Godoc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://godoc.org/github.com/cyphar/incus/client&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/cyphar/incus/client?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Static analysis&lt;/td&gt; &#xA;   &lt;td&gt;GoReport&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/cyphar/incus&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/cyphar/incus&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;!-- Include start security --&gt; &#xA;&lt;p&gt;Consider the following aspects to ensure that your Incus installation is secure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep your operating system up-to-date and install all available security patches.&lt;/li&gt; &#xA; &lt;li&gt;Use only supported Incus versions.&lt;/li&gt; &#xA; &lt;li&gt;Restrict access to the Incus daemon and the remote API.&lt;/li&gt; &#xA; &lt;li&gt;Do not use privileged containers unless required. If you use privileged containers, put appropriate security measures in place. See the &lt;a href=&#34;https://linuxcontainers.org/lxc/security/&#34;&gt;LXC security page&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;Configure your network interfaces to be secure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Include end security --&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/cyphar/incus/raw/main/doc/explanation/security.md&#34;&gt;Security&lt;/a&gt; for detailed information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- Include start security note --&gt; &#xA;&lt;p&gt;Local access to Incus through the Unix socket always grants full access to Incus. This includes the ability to attach file system paths or devices to any instance as well as tweak the security features on any instance.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, you should only give such access to users who you&#39;d trust with root access to your system.&lt;/p&gt; &#xA;&lt;!-- Include end security note --&gt; &#xA;&lt;!-- Include start support --&gt; &#xA;&lt;h2&gt;Support and community&lt;/h2&gt; &#xA;&lt;p&gt;The following channels are available for you to interact with the Incus community.&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;You can file bug reports and feature requests at: &lt;a href=&#34;https://github.com/cyphar/incus/issues/new&#34;&gt;&lt;code&gt;https://github.com/cyphar/incus/issues/new&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The official documentation is available at: &lt;a href=&#34;https://github.com/cyphar/incus/tree/main/doc&#34;&gt;&lt;code&gt;https://github.com/cyphar/incus/tree/main/doc&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- Include end support --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Fixes and new features are greatly appreciated. Make sure to read our &lt;a href=&#34;https://raw.githubusercontent.com/lxc/incus/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; first!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>uoosef/bepass</title>
    <updated>2023-08-08T01:34:43Z</updated>
    <id>tag:github.com,2023-08-08:/uoosef/bepass</id>
    <link href="https://github.com/uoosef/bepass" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple DPI bypass tool written in go&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Disclamer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚠ WARNING:&lt;/strong&gt; &lt;strong&gt;This is an EXPERIMENTAL Project, use it at your own risk!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Bepass: A DPI bypassing tool and Socks over Cloudflare Worker Proxy!&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple tool that utilizes tls client hello splitting attack in order to bypass the iran&#39;s dpi system. It won&#39;t work if the target machine&#39;s ip is blocked(Yet ?!) &lt;br&gt; &lt;br&gt; It also allow you to deploy a free and fast vless like proxy in cloudflare workers, just copy the worker.js to your worker and fill configs accordingly it will do the rest&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports all Iran&#39;s network careers with some tweaks in tls hello packet length&lt;/li&gt; &#xA; &lt;li&gt;DOH support&lt;/li&gt; &#xA; &lt;li&gt;SDNS support&lt;/li&gt; &#xA; &lt;li&gt;Cross platform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build (CLI)&lt;/h2&gt; &#xA;&lt;p&gt;You can build CLI debug and release version as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/uoosef/bepass.git&#xA;  cd bepass/bepass&#xA;  make # For CLI debug version&#xA;  make release # For CLI Release version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build (GUI) (WIP)&lt;/h2&gt; &#xA;&lt;p&gt;You can build GUI debug and release version as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/uoosef/bepass.git&#xA;  cd bepass/bepass&#xA;  make gui # For GUI debug version&#xA;  make gui-release # For GUI release version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deployment (CLI)&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest build from release or Just install go 1.19+ and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/uoosef/bepass.git&#xA;  cd bepass/bepass&#xA;  go build ./cmd/cli/main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should give you an executable file, or you can simply run it in place.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;  git clone https://github.com/uoosef/bepass.git&#xA;  cd bepass/bepass&#xA;  go run ./cmd/cli/main.go -c config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;In order to deploy this project, you should first find a &#34;DOH&#34; or &#34;SDNS&#34; link that works on your ISP, then edit config.json and fill the &#34;RemoteDNSAddr&#34; field with the dns link that you found! &lt;br&gt; &lt;br&gt; For example, the following configuration will most likely work on IR-MCI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  {&#xA;  &#34;TLSHeaderLength&#34;: 5,&#xA;  &#34;RemoteDNSAddr&#34;: &#34;https://1.1.1.1/dns-query&#34;,&#xA;  &#34;DnsCacheTTL&#34;: 30,&#xA;  &#34;BindAddress&#34;: &#34;127.0.0.1:8085&#34;,&#xA;  &#34;ChunksLengthBeforeSni&#34;: [1, 5],&#xA;  &#34;SniChunksLength&#34;: [1, 5],&#xA;  &#34;ChunksLengthAfterSni&#34;: [1, 5],&#xA;  &#34;DelayBetweenChunks&#34;:   [1, 10],&#xA;  &#34;WorkerAddress&#34;: &#34;https://&amp;lt;YOUR_WORKER_ADDRESS&amp;gt;/dns-query&#34;,&#xA;  &#34;WorkerIPPortAddress&#34;: &#34;&amp;lt;CLEAN_CLOUDFLARE_IP&amp;gt;:443&#34;,&#xA;  &#34;WorkerEnabled&#34;: true,&#xA;  &#34;WorkerDNSOnly&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you cant find any working DOH Servers you can deploy worker.js code to your CF worker and change config.json accordingly &lt;br&gt; &lt;br&gt; If you just want to use the DOH over worker set WorkerDNSOnly, true&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;WorkerDNSOnly&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But if you want a full-fledged tcp socks5 proxy over worker set WorkerDNSOnly, false. please consider that your udp traffic wouldn&#39;t go through worker because cf doesn&#39;t support udp outgoing sockets currently&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;WorkerDNSOnly&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Self-Hosted DOH (DONE)&lt;/li&gt; &#xA; &lt;li&gt;TCP PROXY Over Worker (DONE)&lt;/li&gt; &#xA; &lt;li&gt;A GUI Version (WIP)&lt;/li&gt; &#xA; &lt;li&gt;An Android version (WIP)&lt;/li&gt; &#xA; &lt;li&gt;Finding a way to bypass the blocked ips&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt; go nuts!&lt;/p&gt;</summary>
  </entry>
</feed>