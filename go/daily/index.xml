<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-06T01:34:00Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ginuerzh/gost</title>
    <updated>2022-09-06T01:34:00Z</updated>
    <id>tag:github.com,2022-09-06:/ginuerzh/gost</id>
    <link href="https://github.com/ginuerzh/gost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GO Simple Tunnel - a simple tunnel written in golang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GO Simple Tunnel&lt;/h1&gt; &#xA;&lt;h3&gt;GO语言实现的安全隧道&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/ginuerzh/gost&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/ginuerzh/gost?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/ginuerzh/gost&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/ginuerzh/gost&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ginuerzh/gost/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ginuerzh/gost/branch/master/graphs/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ginuerzh/gost/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/ginuerzh/gost.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/ginuerzh/gost/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/ginuerzh/gost.svg?sanitize=true&#34; alt=&#34;Docker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/gost&#34;&gt;&lt;img src=&#34;https://snapcraft.io/gost/badge.svg?sanitize=true&#34; alt=&#34;gost&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ginuerzh/gost/master/README_en.md&#34;&gt;English README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;！！！&lt;a href=&#34;https://latest.gost.run&#34;&gt;V3版本已经可用，欢迎抢先体验&lt;/a&gt;！！！&lt;/h3&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;多端口监听&lt;/li&gt; &#xA; &lt;li&gt;可设置转发代理，支持多级转发(代理链)&lt;/li&gt; &#xA; &lt;li&gt;支持标准HTTP/HTTPS/HTTP2/SOCKS4(A)/SOCKS5代理协议&lt;/li&gt; &#xA; &lt;li&gt;Web代理支持&lt;a href=&#34;https://v2.gost.run/probe_resist/&#34;&gt;探测防御&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/configuration/&#34;&gt;支持多种隧道类型&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/socks/&#34;&gt;SOCKS5代理支持TLS协商加密&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/socks/&#34;&gt;Tunnel UDP over TCP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/redirect/&#34;&gt;TCP/UDP透明代理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/port-forwarding/&#34;&gt;本地/远程TCP/UDP端口转发&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/ss/&#34;&gt;支持Shadowsocks(TCP/UDP)协议&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/sni/&#34;&gt;支持SNI代理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/permission/&#34;&gt;权限控制&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/load-balancing/&#34;&gt;负载均衡&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/bypass/&#34;&gt;路由控制&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DNS&lt;a href=&#34;https://v2.gost.run/resolver/&#34;&gt;解析&lt;/a&gt;和&lt;a href=&#34;https://v2.gost.run/dns/&#34;&gt;代理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://v2.gost.run/tuntap/&#34;&gt;TUN/TAP设备&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wiki站点: &lt;a href=&#34;https://v2.gost.run&#34;&gt;v2.gost.run&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Telegram讨论群: &lt;a href=&#34;https://t.me/gogost&#34;&gt;https://t.me/gogost&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Google讨论组: &lt;a href=&#34;https://groups.google.com/d/forum/go-gost&#34;&gt;https://groups.google.com/d/forum/go-gost&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;h4&gt;二进制文件&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ginuerzh/gost/releases&#34;&gt;https://github.com/ginuerzh/gost/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;源码编译&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ginuerzh/gost.git&#xA;cd gost/cmd/gost&#xA;go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm ginuerzh/gost -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install gost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ubuntu商店&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install core&#xA;sudo snap install gost&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;快速上手&lt;/h2&gt; &#xA;&lt;h4&gt;不设置转发代理&lt;/h4&gt; &#xA;&lt;img src=&#34;https://ginuerzh.github.io/images/gost_01.png&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作为标准HTTP/SOCKS5代理&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;设置代理认证信息&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=admin:123456@localhost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;多端口监听&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=http2://:443 -L=socks5://:1080 -L=ss://aes-128-cfb:123456@:8338&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;设置转发代理&lt;/h4&gt; &#xA;&lt;img src=&#34;https://ginuerzh.github.io/images/gost_02.png&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=192.168.1.1:8081&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;转发代理认证&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=http://admin:123456@192.168.1.1:8081&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;设置多级转发代理(代理链)&lt;/h4&gt; &#xA;&lt;img src=&#34;https://ginuerzh.github.io/images/gost_03.png&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=quic://192.168.1.1:6121 -F=socks5+wss://192.168.1.2:1080 -F=http2://192.168.1.3:443 ... -F=a.b.c.d:NNNN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gost按照-F设置的顺序通过代理链将请求最终转发给a.b.c.d:NNNN处理，每一个转发代理可以是任意HTTP/HTTPS/HTTP2/SOCKS4/SOCKS5/Shadowsocks类型代理。&lt;/p&gt; &#xA;&lt;h4&gt;本地端口转发(TCP)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=tcp://:2222/192.168.1.1:22 [-F=...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将本地TCP端口2222上的数据(通过代理链)转发到192.168.1.1:22上。当代理链末端(最后一个-F参数)为SSH转发通道类型时，gost会直接使用SSH的本地端口转发功能:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=tcp://:2222/192.168.1.1:22 -F forward+ssh://:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;本地端口转发(UDP)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=udp://:5353/192.168.1.1:53?ttl=60 [-F=...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将本地UDP端口5353上的数据(通过代理链)转发到192.168.1.1:53上。 每条转发通道都有超时时间，当超过此时间，且在此时间段内无任何数据交互，则此通道将关闭。可以通过&lt;code&gt;ttl&lt;/code&gt;参数来设置超时时间，默认值为60秒。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 转发UDP数据时，如果有代理链，则代理链的末端(最后一个-F参数)必须是gost SOCKS5类型代理，gost会使用UDP over TCP方式进行转发。&lt;/p&gt; &#xA;&lt;h4&gt;远程端口转发(TCP)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=rtcp://:2222/192.168.1.1:22 [-F=... -F=socks5://172.24.10.1:1080]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将172.24.10.1:2222上的数据(通过代理链)转发到192.168.1.1:22上。当代理链末端(最后一个-F参数)为SSH转发通道类型时，gost会直接使用SSH的远程端口转发功能:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=rtcp://:2222/192.168.1.1:22 -F forward+ssh://:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;远程端口转发(UDP)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=rudp://:5353/192.168.1.1:53?ttl=60 [-F=... -F=socks5://172.24.10.1:1080]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将172.24.10.1:5353上的数据(通过代理链)转发到192.168.1.1:53上。 每条转发通道都有超时时间，当超过此时间，且在此时间段内无任何数据交互，则此通道将关闭。可以通过&lt;code&gt;ttl&lt;/code&gt;参数来设置超时时间，默认值为60秒。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注:&lt;/strong&gt; 转发UDP数据时，如果有代理链，则代理链的末端(最后一个-F参数)必须是GOST SOCKS5类型代理，gost会使用UDP-over-TCP方式进行转发。&lt;/p&gt; &#xA;&lt;h4&gt;HTTP2&lt;/h4&gt; &#xA;&lt;p&gt;gost的HTTP2支持两种模式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作为标准的HTTP2代理，并向下兼容HTTPS代理。&lt;/li&gt; &#xA; &lt;li&gt;作为通道传输其他协议。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;代理模式&lt;/h5&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=http2://:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=http2://server_ip:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;通道模式&lt;/h5&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=h2://:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=h2://server_ip:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;QUIC&lt;/h4&gt; &#xA;&lt;p&gt;gost对QUIC的支持是基于&lt;a href=&#34;https://github.com/lucas-clemente/quic-go&#34;&gt;quic-go&lt;/a&gt;库。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=quic://:6121&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=quic://server_ip:6121&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; QUIC模式只能作为代理链的第一个节点。&lt;/p&gt; &#xA;&lt;h4&gt;KCP&lt;/h4&gt; &#xA;&lt;p&gt;gost对KCP的支持是基于&lt;a href=&#34;https://github.com/xtaci/kcp-go&#34;&gt;kcp-go&lt;/a&gt;和&lt;a href=&#34;https://github.com/xtaci/kcptun&#34;&gt;kcptun&lt;/a&gt;库。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=kcp://:8388&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=kcp://server_ip:8388&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gost会自动加载当前工作目录中的kcp.json(如果存在)配置文件，或者可以手动通过参数指定配置文件路径：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=kcp://:8388?c=/path/to/conf/file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;注：&lt;/strong&gt; KCP模式只能作为代理链的第一个节点。&lt;/p&gt; &#xA;&lt;h4&gt;SSH&lt;/h4&gt; &#xA;&lt;p&gt;gost的SSH支持两种模式：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作为转发通道，配合本地/远程TCP端口转发使用。&lt;/li&gt; &#xA; &lt;li&gt;作为通道传输其他协议。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;转发模式&lt;/h5&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=forward+ssh://:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=rtcp://:1222/:22 -F=forward+ssh://server_ip:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;通道模式&lt;/h5&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=ssh://:2222&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=ssh://server_ip:2222?ping=60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;可以通过&lt;code&gt;ping&lt;/code&gt;参数设置心跳包发送周期，单位为秒。默认不发送心跳包。&lt;/p&gt; &#xA;&lt;h4&gt;透明代理&lt;/h4&gt; &#xA;&lt;p&gt;基于iptables的透明代理。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=redirect://:12345 -F=http2://server_ip:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;obfs4&lt;/h4&gt; &#xA;&lt;p&gt;此功能由&lt;a href=&#34;https://github.com/isofew&#34;&gt;@isofew&lt;/a&gt;贡献。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=obfs4://:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;当服务端运行后会在控制台打印出连接地址供客户端使用:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;obfs4://:443/?cert=4UbQjIfjJEQHPOs8vs5sagrSXx1gfrDCGdVh2hpIPSKH0nklv1e4f29r7jb91VIrq4q5Jw&amp;amp;iat-mode=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gost -L=:8888 -F=&#39;obfs4://server_ip:443?cert=4UbQjIfjJEQHPOs8vs5sagrSXx1gfrDCGdVh2hpIPSKH0nklv1e4f29r7jb91VIrq4q5Jw&amp;amp;iat-mode=0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;加密机制&lt;/h2&gt; &#xA;&lt;h4&gt;HTTP&lt;/h4&gt; &#xA;&lt;p&gt;对于HTTP可以使用TLS加密整个通讯过程，即HTTPS代理：&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=https://:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=http+tls://server_ip:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;HTTP2&lt;/h4&gt; &#xA;&lt;p&gt;gost的HTTP2代理模式仅支持使用TLS加密的HTTP2协议，不支持明文HTTP2传输。&lt;/p&gt; &#xA;&lt;p&gt;gost的HTTP2通道模式支持加密(h2)和明文(h2c)两种模式。&lt;/p&gt; &#xA;&lt;h4&gt;SOCKS5&lt;/h4&gt; &#xA;&lt;p&gt;gost支持标准SOCKS5协议的no-auth(0x00)和user/pass(0x02)方法，并在此基础上扩展了两个：tls(0x80)和tls-auth(0x82)，用于数据加密。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=socks5://:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=socks5://server_ip:1080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果两端都是gost(如上)则数据传输会被加密(协商使用tls或tls-auth方法)，否则使用标准SOCKS5进行通讯(no-auth或user/pass方法)。&lt;/p&gt; &#xA;&lt;h4&gt;Shadowsocks&lt;/h4&gt; &#xA;&lt;p&gt;gost对shadowsocks的支持是基于&lt;a href=&#34;https://github.com/shadowsocks/shadowsocks-go&#34;&gt;shadowsocks-go&lt;/a&gt;库。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=ss://chacha20:123456@:8338&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;客户端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=ss://chacha20:123456@server_ip:8338&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Shadowsocks UDP relay&lt;/h5&gt; &#xA;&lt;p&gt;目前仅服务端支持UDP Relay。&lt;/p&gt; &#xA;&lt;p&gt;服务端:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=ssu://chacha20:123456@:8338&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TLS&lt;/h4&gt; &#xA;&lt;p&gt;gost内置了TLS证书，如果需要使用其他TLS证书，有两种方法：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;在gost运行目录放置cert.pem(公钥)和key.pem(私钥)两个文件即可，gost会自动加载运行目录下的cert.pem和key.pem文件。&lt;/li&gt; &#xA; &lt;li&gt;使用参数指定证书文件路径：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=&#34;http2://:443?cert=/path/to/my/cert/file&amp;amp;key=/path/to/my/key/file&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;对于客户端可以通过&lt;code&gt;secure&lt;/code&gt;参数开启服务器证书和域名校验:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=&#34;http2://server_domain_name:443?secure=true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;对于客户端可以指定CA证书进行&lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security#Certificate_pinning&#34;&gt;证书锁定&lt;/a&gt;(Certificate Pinning):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gost -L=:8080 -F=&#34;http2://:443?ca=ca.pem&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;证书锁定功能由&lt;a href=&#34;https://github.com/sheerun&#34;&gt;@sheerun&lt;/a&gt;贡献&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alphadose/haxmap</title>
    <updated>2022-09-06T01:34:00Z</updated>
    <id>tag:github.com,2022-09-06:/alphadose/haxmap</id>
    <link href="https://github.com/alphadose/haxmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastest and most memory efficient golang concurrent hashmap&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HaxMap&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alphadose/haxmap/actions&#34;&gt;&lt;img src=&#34;https://github.com/alphadose/haxmap/workflows/Go/badge.svg?sanitize=true&#34; alt=&#34;Main Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/alphadose/haxmap&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/alphadose/haxmap&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/alphadose/haxmap/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A blazing fast concurrent hashmap&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The hashing algorithm used was &lt;a href=&#34;https://github.com/Cyan4973/xxHash&#34;&gt;xxHash&lt;/a&gt; and the hashmap&#39;s buckets were implemented using &lt;a href=&#34;https://www.cl.cam.ac.uk/research/srg/netos/papers/2001-caslists.pdf&#34;&gt;Harris lock-free list&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You need Golang &lt;a href=&#34;https://go.dev/dl/&#34;&gt;1.19.x&lt;/a&gt; or above&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get github.com/alphadose/haxmap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/alphadose/haxmap&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// initialize map with key type `int` and value type `string`&#xA;&#x9;mep := haxmap.New[int, string]()&#xA;&#xA;&#x9;// set a value (overwrites existing value if present)&#xA;&#x9;mep.Set(1, &#34;one&#34;)&#xA;&#xA;&#x9;// get the value and print it&#xA;&#x9;val, ok := mep.Get(1)&#xA;&#x9;if ok {&#xA;&#x9;&#x9;println(val)&#xA;&#x9;}&#xA;&#xA;&#x9;mep.Set(2, &#34;two&#34;)&#xA;&#x9;mep.Set(3, &#34;three&#34;)&#xA;&#xA;&#x9;// ForEach loop to iterate over all key-value pairs and execute the given lambda&#xA;&#x9;mep.ForEach(func(key int, value string) {&#xA;&#x9;&#x9;fmt.Printf(&#34;Key -&amp;gt; %d | Value -&amp;gt; %s\n&#34;, key, value)&#xA;&#x9;})&#xA;&#xA;&#x9;// delete values&#xA;&#x9;mep.Del(1)&#xA;&#x9;mep.Del(2)&#xA;&#x9;mep.Del(3)&#xA;&#x9;mep.Del(0) // delete is safe even if a key doesn&#39;t exists&#xA;&#xA;&#x9;if mep.Len() == 0 {&#xA;&#x9;&#x9;println(&#34;cleanup complete&#34;)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Benchmarks were performed against &lt;a href=&#34;https://pkg.go.dev/sync#Map&#34;&gt;golang sync.Map&lt;/a&gt; and the latest &lt;a href=&#34;https://github.com/cornelk/hashmap&#34;&gt;cornelk-hashmap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;All results were computed from &lt;a href=&#34;https://pkg.go.dev/golang.org/x/perf/cmd/benchstat&#34;&gt;benchstat&lt;/a&gt; of 20 runs (code available &lt;a href=&#34;https://raw.githubusercontent.com/alphadose/haxmap/main/benchmarks&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Concurrent Reads Only&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;name                         time/op&#xA;HaxMapReadsOnly-8            7.13µs ± 5%&#xA;GoSyncMapReadsOnly-8         22.4µs ± 2%&#xA;CornelkMapReadsOnly-8        8.28µs ± 1%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Concurrent Reads with Writes&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;name                         time/op&#xA;HaxMapReadsWithWrites-8      8.44µs ± 5%&#xA;GoSyncMapReadsWithWrites-8   26.1µs ± 2%&#xA;CornelkMapReadsWithWrites-8  9.55µs ± 2%&#xA;&#xA;name                         alloc/op&#xA;HaxMapReadsWithWrites-8      1.22kB ± 6%&#xA;GoSyncMapReadsWithWrites-8   6.06kB ± 6%&#xA;CornelkMapReadsWithWrites-8  1.56kB ± 5%&#xA;&#xA;name                         allocs/op&#xA;HaxMapReadsWithWrites-8         152 ± 6%&#xA;GoSyncMapReadsWithWrites-8      562 ± 6%&#xA;CornelkMapReadsWithWrites-8     195 ± 5%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From the above results it is evident that &lt;code&gt;haxmap&lt;/code&gt; takes the least time, memory and allocations in all cases making it the best golang concurrent hashmap in this period of time&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;HaxMap by default uses &lt;a href=&#34;https://github.com/cespare/xxhash&#34;&gt;xxHash&lt;/a&gt; algorithm, but you can override this and plug-in your own custom hash function. Beneath lies an example for the same.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/alphadose/haxmap&#34;&#xA;)&#xA;&#xA;// your custom hash function&#xA;// the hash function signature must adhere to `func(keyType) uintptr`&#xA;func customStringHasher(s string) uintptr {&#xA;&#x9;return uintptr(len(s))&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;m := haxmap.New[string, string]() // initialize a string-string map&#xA;&#x9;m.SetHasher(customStringHasher) // this overrides the default xxHash algorithm&#xA;&#xA;&#x9;m.Set(&#34;one&#34;, &#34;1&#34;)&#xA;&#x9;val, ok := m.Get(&#34;one&#34;)&#xA;&#x9;if ok {&#xA;&#x9;&#x9;println(val)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;You can pre-allocate the size of the map which will improve performance in some cases.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/alphadose/haxmap&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;const initialSize = 1 &amp;lt;&amp;lt; 10&#xA;&#xA;&#x9;// pre-allocating the size of the map will prevent all grow operations&#xA;&#x9;// until that limit is hit thereby improving performance&#xA;&#x9;m := haxmap.New[int, string](initialSize)&#xA;&#xA;&#x9;m.Set(1, &#34;1&#34;)&#xA;&#x9;val, ok := m.Get(1)&#xA;&#x9;if ok {&#xA;&#x9;&#x9;println(val)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>zyedidia/micro</title>
    <updated>2022-09-06T01:34:00Z</updated>
    <id>tag:github.com,2022-09-06:/zyedidia/micro</id>
    <link href="https://github.com/zyedidia/micro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern and intuitive terminal-based text editor&lt;/p&gt;&lt;hr&gt;&lt;img alt=&#34;micro logo&#34; src=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/assets/micro-logo-drop.svg?sanitize=true&#34; width=&#34;500px&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/zyedidia/micro&#34;&gt;&lt;img src=&#34;https://travis-ci.org/zyedidia/micro.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/zyedidia/micro&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/zyedidia/micro&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zyedidia/micro/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/zyedidia/micro.svg?label=Release&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/zyedidia/micro/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/zyedidia/micro?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/zyedidia/micro.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/zyedidia/micro&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snapcraft.io/micro&#34;&gt;&lt;img src=&#34;https://snapcraft.io/micro/badge.svg?sanitize=true&#34; alt=&#34;Snap Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;micro&lt;/strong&gt; is a terminal-based text editor that aims to be easy to use and intuitive, while also taking advantage of the capabilities of modern terminals. It comes as a single, batteries-included, static binary with no dependencies; you can download and use it right now!&lt;/p&gt; &#xA;&lt;p&gt;As its name indicates, micro aims to be somewhat of a successor to the nano editor by being easy to install and use. It strives to be enjoyable as a full-time editor for people who prefer to work in a terminal, or those who regularly edit files over SSH.&lt;/p&gt; &#xA;&lt;p&gt;Here is a picture of micro editing its source code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/assets/micro-solarized.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To see more screenshots of micro, showcasing some of the default color schemes, see &lt;a href=&#34;https://micro-editor.github.io&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also check out the website for Micro at &lt;a href=&#34;https://micro-editor.github.io&#34;&gt;https://micro-editor.github.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#pre-built-binaries&#34;&gt;Prebuilt binaries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#package-managers&#34;&gt;Package Managers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#building-from-source&#34;&gt;Building from source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#fully-static-binary&#34;&gt;Fully static binary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#macos-terminal&#34;&gt;macOS terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#linux-clipboard-support&#34;&gt;Linux clipboard support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#colors-and-syntax-highlighting&#34;&gt;Colors and syntax highlighting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#cygwin-mingw-plan9&#34;&gt;Cygwin, Mingw, Plan9&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#documentation-and-help&#34;&gt;Documentation and Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use and install.&lt;/li&gt; &#xA; &lt;li&gt;No dependencies or external files are needed — just the binary you can download further down the page.&lt;/li&gt; &#xA; &lt;li&gt;Multiple cursors.&lt;/li&gt; &#xA; &lt;li&gt;Common keybindings (&lt;kbd&gt;Ctrl-s&lt;/kbd&gt;, &lt;kbd&gt;Ctrl-c&lt;/kbd&gt;, &lt;kbd&gt;Ctrl-v&lt;/kbd&gt;, &lt;kbd&gt;Ctrl-z&lt;/kbd&gt;, …). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Keybindings can be rebound to your liking.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Sane defaults. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You shouldn&#39;t have to configure much out of the box (and it is extremely easy to configure).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Splits and tabs.&lt;/li&gt; &#xA; &lt;li&gt;nano-like menu to help you remember the keybindings.&lt;/li&gt; &#xA; &lt;li&gt;Extremely good mouse support. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This means mouse dragging to create a selection, double click to select by word, and triple click to select by line.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Cross-platform (it should work on all the platforms Go runs on). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that while Windows is supported Mingw/Cygwin is not (see below).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Plugin system (plugins are written in Lua). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;micro has a built-in plugin manager to automatically install, remove, and update plugins.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Built-in diff gutter.&lt;/li&gt; &#xA; &lt;li&gt;Simple autocompletion.&lt;/li&gt; &#xA; &lt;li&gt;Persistent undo.&lt;/li&gt; &#xA; &lt;li&gt;Automatic linting and error notifications.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting for over &lt;a href=&#34;https://raw.githubusercontent.com/zyedidia/micro/master/runtime/syntax&#34;&gt;130 languages&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Color scheme support. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;By default, micro comes with 16, 256, and true color themes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;True color support (set the &lt;code&gt;MICRO_TRUECOLOR&lt;/code&gt; environment variable to 1 to enable it).&lt;/li&gt; &#xA; &lt;li&gt;Copy and paste with the system clipboard.&lt;/li&gt; &#xA; &lt;li&gt;Small and simple.&lt;/li&gt; &#xA; &lt;li&gt;Easily configurable.&lt;/li&gt; &#xA; &lt;li&gt;Macros.&lt;/li&gt; &#xA; &lt;li&gt;Common editor features such as undo/redo, line numbers, Unicode support, soft wrapping, …&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install micro, you can download a &lt;a href=&#34;https://github.com/zyedidia/micro/releases&#34;&gt;prebuilt binary&lt;/a&gt;, or you can build it from source.&lt;/p&gt; &#xA;&lt;p&gt;If you want more information about ways to install micro, see this &lt;a href=&#34;https://github.com/zyedidia/micro/wiki/Installing-Micro&#34;&gt;wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;micro -version&lt;/code&gt; to get the version information after installing. It is only guaranteed that you are installing the most recent stable version if you install from the prebuilt binaries, Homebrew, or Snap.&lt;/p&gt; &#xA;&lt;p&gt;A desktop entry file and man page can be found in the &lt;a href=&#34;https://github.com/zyedidia/micro/tree/master/assets/packaging&#34;&gt;assets/packaging&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Pre-built binaries&lt;/h3&gt; &#xA;&lt;p&gt;Pre-built binaries are distributed with &lt;a href=&#34;https://github.com/zyedidia/micro/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To uninstall micro, simply remove the binary, and the configuration directory at &lt;code&gt;~/.config/micro&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Quick-install script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl https://getmic.ro | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The script will place the micro binary in the current directory. From there, you can move it to a directory on your path of your choosing (e.g. &lt;code&gt;sudo mv micro /usr/bin&lt;/code&gt;). See its &lt;a href=&#34;https://github.com/benweissmann/getmic.ro&#34;&gt;GitHub repository&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Eget&lt;/h4&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/zyedidia/eget&#34;&gt;Eget&lt;/a&gt; installed, you can easily get a pre-built binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eget zyedidia/micro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--tag VERSION&lt;/code&gt; to download a specific tagged version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eget --tag nightly zyedidia/micro # download the nightly version (compiled every day at midnight UTC)&#xA;eget --tag v2.0.8 zyedidia/micro  # download version 2.0.8 rather than the latest release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;micro&lt;/code&gt; by adding &lt;code&gt;--to /usr/local/bin&lt;/code&gt; to the &lt;code&gt;eget&lt;/code&gt; command, or move the binary manually to a directory on your &lt;code&gt;$PATH&lt;/code&gt; after the download completes.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/zyedidia/eget&#34;&gt;Eget&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Package managers&lt;/h3&gt; &#xA;&lt;p&gt;You can install micro using Homebrew on Mac:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install micro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note for Mac:&lt;/strong&gt; All micro keybindings use the control or alt (option) key, not the command key. By default, macOS terminals do not forward alt key events. To fix this, please see the section on &lt;a href=&#34;https://github.com/zyedidia/micro#macos-terminal&#34;&gt;macOS terminals&lt;/a&gt; further below.&lt;/p&gt; &#xA;&lt;p&gt;On Linux, you can install micro through &lt;a href=&#34;https://snapcraft.io/docs/core/install&#34;&gt;snap&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install micro --classic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Micro is also available through other package managers on Linux such dnf, AUR, Nix, and package managers for other operating systems. These packages are not guaranteed to be up-to-date.&lt;/p&gt; &#xA;&lt;!-- * `apt install micro` (Ubuntu 20.04 `focal`, and Debian `unstable | testing | buster-backports`). At the moment, this package (2.0.1-1) is outdated and has a known bug where debug mode is enabled. --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux: Available in distro-specific package managers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;dnf install micro&lt;/code&gt; (Fedora).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt install micro&lt;/code&gt; (Ubuntu and Debian).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pacman -S micro&lt;/code&gt; (Arch Linux).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;emerge app-editors/micro&lt;/code&gt; (Gentoo).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;eopkg install micro&lt;/code&gt; (Solus).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pacstall -I micro&lt;/code&gt; (Pacstall).&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://github.com/zyedidia/micro/wiki/Installing-Micro&#34;&gt;wiki&lt;/a&gt; for details about CRUX, Termux.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;https://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt; and &lt;a href=&#34;https://github.com/lukesampson/scoop&#34;&gt;Scoop&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;choco install micro&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;scoop install micro&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;OpenBSD: Available in the ports tree and also available as a binary package. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pkd_add -v micro&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;NetBSD, macOS, Linux, Illumos, etc. with &lt;a href=&#34;http://www.pkgsrc.org/&#34;&gt;pkgsrc&lt;/a&gt;-current: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;pkg_add micro&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;macOS with &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;sudo port install micro&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note for Linux desktop environments:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For interfacing with the local system clipboard, the following tools need to be installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For X11 &lt;code&gt;xclip&lt;/code&gt; or &lt;code&gt;xsel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For &lt;a href=&#34;https://wayland.freedesktop.org/&#34;&gt;Wayland&lt;/a&gt; &lt;code&gt;wl-clipboard&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Without these tools installed, micro will use an internal clipboard for copy and paste, but it won&#39;t be accessible to external applications.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;If your operating system does not have a binary release, but does run Go, you can build from source.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that you have Go version 1.16 or greater and Go modules are enabled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/zyedidia/micro&#xA;cd micro&#xA;make build&#xA;sudo mv micro /usr/local/bin # optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The binary will be placed in the current directory and can be moved to anywhere you like (for example &lt;code&gt;/usr/local/bin&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The command &lt;code&gt;make install&lt;/code&gt; will install the binary to &lt;code&gt;$GOPATH/bin&lt;/code&gt; or &lt;code&gt;$GOBIN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install directly with &lt;code&gt;go get&lt;/code&gt; (&lt;code&gt;go get github.com/zyedidia/micro/cmd/micro&lt;/code&gt;) but this isn&#39;t recommended because it doesn&#39;t build micro with version information (necessary for the plugin manager), and doesn&#39;t disable debug mode.&lt;/p&gt; &#xA;&lt;h3&gt;Fully static binary&lt;/h3&gt; &#xA;&lt;p&gt;By default, the micro binary will dynamically link with core system libraries (this is generally recommended for security and portability). However, there is a fully static prebuilt binary that is provided for amd64 as &lt;code&gt;linux-static.tar.gz&lt;/code&gt;, and to build a fully static binary from source, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CGO_ENABLED=0 make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS terminal&lt;/h3&gt; &#xA;&lt;p&gt;If you are using macOS, you should consider using &lt;a href=&#34;http://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; instead of the default terminal (Terminal.app). The iTerm2 terminal has much better mouse support as well as better handling of key events. For best keybinding behavior, choose &lt;code&gt;xterm defaults&lt;/code&gt; under &lt;code&gt;Preferences-&amp;gt;Profiles-&amp;gt;Keys-&amp;gt;Presets...&lt;/code&gt;, and select &lt;code&gt;Esc+&lt;/code&gt; for &lt;code&gt;Left Option Key&lt;/code&gt; in the same menu. The newest versions also support true color.&lt;/p&gt; &#xA;&lt;p&gt;If you still insist on using the default Mac terminal, be sure to set &lt;code&gt;Use Option key as Meta key&lt;/code&gt; under &lt;code&gt;Preferences-&amp;gt;Profiles-&amp;gt;Keyboard&lt;/code&gt; to use &lt;kbd&gt;option&lt;/kbd&gt; as &lt;kbd&gt;alt&lt;/kbd&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Colors and syntax highlighting&lt;/h3&gt; &#xA;&lt;p&gt;If you open micro and it doesn&#39;t seem like syntax highlighting is working, this is probably because you are using a terminal which does not support 256 color mode. Try changing the color scheme to &lt;code&gt;simple&lt;/code&gt; by pressing &lt;kbd&gt;Ctrl-e&lt;/kbd&gt; in micro and typing &lt;code&gt;set colorscheme simple&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are using the default Ubuntu terminal, to enable 256 make sure your &lt;code&gt;TERM&lt;/code&gt; variable is set to &lt;code&gt;xterm-256color&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Many of the Windows terminals don&#39;t support more than 16 colors, which means that micro&#39;s default color scheme won&#39;t look very good. You can either set the color scheme to &lt;code&gt;simple&lt;/code&gt;, or download and configure a better terminal emulator than the Windows default.&lt;/p&gt; &#xA;&lt;h3&gt;Cygwin, Mingw, Plan9&lt;/h3&gt; &#xA;&lt;p&gt;Cygwin, Mingw, and Plan9 are unfortunately not officially supported. In Cygwin and Mingw, micro will often work when run using the &lt;code&gt;winpty&lt;/code&gt; utility:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;winpty micro.exe ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Micro uses the amazing &lt;a href=&#34;https://github.com/gdamore/tcell&#34;&gt;tcell library&lt;/a&gt;, but this means that micro is restricted to the platforms tcell supports. As a result, micro does not support Plan9, and Cygwin (although this may change in the future). Micro also doesn&#39;t support NaCl (which is deprecated anyway).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have built the editor, start it by running &lt;code&gt;micro path/to/file.txt&lt;/code&gt; or &lt;code&gt;micro&lt;/code&gt; to open an empty buffer.&lt;/p&gt; &#xA;&lt;p&gt;micro also supports creating buffers from &lt;code&gt;stdin&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ip a | micro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can move the cursor around with the arrow keys and mouse.&lt;/p&gt; &#xA;&lt;p&gt;You can also use the mouse to manipulate the text. Simply clicking and dragging will select text. You can also double click to enable word selection, and triple click to enable line selection.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and Help&lt;/h2&gt; &#xA;&lt;p&gt;micro has a built-in help system which you can access by pressing &lt;kbd&gt;Ctrl-e&lt;/kbd&gt; and typing &lt;code&gt;help&lt;/code&gt;. Additionally, you can view the help files here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/micro/tree/master/runtime/help/help.md&#34;&gt;main help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/micro/tree/master/runtime/help/keybindings.md&#34;&gt;keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/micro/tree/master/runtime/help/commands.md&#34;&gt;commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/micro/tree/master/runtime/help/colors.md&#34;&gt;colors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/micro/tree/master/runtime/help/options.md&#34;&gt;options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/micro/tree/master/runtime/help/plugins.md&#34;&gt;plugins&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I also recommend reading the &lt;a href=&#34;https://github.com/zyedidia/micro/tree/master/runtime/help/tutorial.md&#34;&gt;tutorial&lt;/a&gt; for a brief introduction to the more powerful configuration features micro offers.&lt;/p&gt; &#xA;&lt;p&gt;There is also an unofficial Discord, which you can join at &lt;a href=&#34;https://discord.gg/nhWR6armnR&#34;&gt;https://discord.gg/nhWR6armnR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you find any bugs, please report them! I am also happy to accept pull requests from anyone.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;a href=&#34;https://github.com/zyedidia/micro/issues&#34;&gt;GitHub issue tracker&lt;/a&gt; to report bugs, ask questions, or suggest new features.&lt;/p&gt; &#xA;&lt;p&gt;For a more informal setting to discuss the editor, you can join the &lt;a href=&#34;https://gitter.im/zyedidia/micro&#34;&gt;Gitter chat&lt;/a&gt; or the &lt;a href=&#34;https://discord.gg/nhWR6armnR&#34;&gt;Discord&lt;/a&gt;. You can also use the &lt;a href=&#34;https://github.com/zyedidia/micro/discussions&#34;&gt;Discussions&lt;/a&gt; section on Github for a forum-like setting or for Q&amp;amp;A.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes I am unresponsive, and I apologize! If that happens, please ping me.&lt;/p&gt;</summary>
  </entry>
</feed>