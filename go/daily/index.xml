<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-30T01:28:34Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>opusb/tpclash2</title>
    <updated>2024-01-30T01:28:34Z</updated>
    <id>tag:github.com,2024-01-30:/opusb/tpclash2</id>
    <link href="https://github.com/opusb/tpclash2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Transparent proxy tool for Clash&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这是一个用于 Clash Premium 的透明代理辅助工具, 由于众所周知周知的原因(&lt;strong&gt;手笨&lt;/strong&gt;)而创建的.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;一、TPClash 是什么&lt;/h2&gt; &#xA;&lt;p&gt;TPClash 可以自动安装 Clash Premium/Meta, 并自动配置基于 Tun 的透明代理.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TPClash 的透明代理规则、日志配置、Dashboard(UI) 配置等全部从标准的 Clash 配置文件内读取, 并完成自适应; TPClash 暂时不会创建自己的自定义 配置文件(减轻使用负担).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;二、TPClash 使用&lt;/h2&gt; &#xA;&lt;h3&gt;2.1、直接启动&lt;/h3&gt; &#xA;&lt;p&gt;TPClash 只有一个二进制文件, 直接从 Release 页面下载二进制文件运行即可. TPClash 二进制内嵌入了目标平台的 Clash 二进制文件以及其他资源文件(All in one), 启动后会自动释放, 所以无需再下载 Clash.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意: TPClash 默认会读取位于 &lt;code&gt;/etc/clash.yaml&lt;/code&gt; 的 clash 配置文件, 如果 clash 配置文件在其他位置请自行修改.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./tpclash-premium-linux-amd64-v3 -c /etc/clash.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.2、Systemd 安装&lt;/h3&gt; &#xA;&lt;p&gt;除了直接运行之外, 针对于支持 Systemd 的系统 TPClash 也支持 install 命令用于将自身安装为 Systemd 服务; &lt;strong&gt;安装时 TPClash 先将自身复制 到 &lt;code&gt;/usr/local/bin/tpclash&lt;/code&gt;, 然后创建 &lt;code&gt;/etc/systemd/system/tpclash.service&lt;/code&gt; 配置文件, 并且将附加参数也同步写入到 Systemd 配置中.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;root@tpclash ~ # ❯❯❯ ./tpclash-premium-linux-amd64-v3 install --config https://example.com/clash.yaml&#xA;&#xA;████████╗██████╗  ██████╗██╗      █████╗ ███████╗██╗  ██╗&#xA;╚══██╔══╝██╔══██╗██╔════╝██║     ██╔══██╗██╔════╝██║  ██║&#xA;   ██║   ██████╔╝██║     ██║     ███████║███████╗███████║&#xA;   ██║   ██╔═══╝ ██║     ██║     ██╔══██║╚════██║██╔══██║&#xA;   ██║   ██║     ╚██████╗███████╗██║  ██║███████║██║  ██║&#xA;   ╚═╝   ╚═╝      ╚═════╝╚══════╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝&#xA;  👌 TPClash 安装完成, 您可以使用以下命令启动:&#xA;     - 启动服务: systemctl start tpclash&#xA;     - 停止服务: systemctl stop tpclash&#xA;     - 重启服务: systemctl restart tpclash&#xA;     - 开启自启动: systemctl enable tpclash&#xA;     - 关闭自启动: systemctl disable tpclash&#xA;     - 查看日志: journalctl -fu tpclash&#xA;     - 重载服务配置: systemctl daemon-reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2.3、Docker 运行&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注意: 从 &lt;code&gt;v0.1.0&lt;/code&gt; 版本开始, 如果使用 Docker 运行或者宿主机安装了 Docker, &lt;strong&gt;TPClash 会自动尝试使用 nftables 进行修复;&lt;/strong&gt; 如果宿主机不支持 nftables, 请自行使用 &lt;code&gt;iptables -I DOCKER-USER -i src_if -o dst_if -j ACCEPT&lt;/code&gt; 命令修复.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;如果想要在 Docker 中使用 tpclash, 只需要挂载外部配置文件即可:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -dt \&#xA;  --name tpclash \&#xA;  --privileged \&#xA;  --network=host \&#xA;  -v /root/clash.yaml:/etc/clash.yaml \&#xA;  mritd/tpclash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;此命令假设配置文件位于宿主机的 &lt;code&gt;/root/clash.yaml&lt;/code&gt; 位置, 其他位置请自行替换; 该镜像采用 &lt;a href=&#34;https://earthly.dev/&#34;&gt;Earthly&lt;/a&gt; 编译, Earthfile 存储在 &lt;a href=&#34;https://github.com/mritd/autobuild/tree/main/tpclash&#34;&gt;autobuild&lt;/a&gt; 仓库.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.4、容器化虚拟机部署&lt;/h3&gt; &#xA;&lt;p&gt;TPClash 一开始的目标就是作为一个稳定可靠的、可以直接托管配置的内网网关使用, 虽然 TPClash 可以兼容大多数系统, 但特殊系统环境例如 OpenWrt 等可能会出现 一些兼容性问题;为了统一部署环境和更方便使用, 目前已增加了纯容器化系统 Flatcar 系统支持, 该系统支持直接使用单个配置文件完成引导和自动化部署, 且后台自动 滚动升级; 可以持续维持系统的最新状态并且可安全回滚; 以下是在 ESXi 中直接部署说明:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1、下载项目内的 flatcar.butane.yaml&lt;/li&gt; &#xA; &lt;li&gt;2、调整配置文件内的 IP 地址和网关地址, DNS 一般不需要修改&lt;/li&gt; &#xA; &lt;li&gt;3、调整配置文件内 TPClash 的启动命令, 一般需要指定远程 clash 配置文件地址&lt;/li&gt; &#xA; &lt;li&gt;4、参考 &lt;a href=&#34;https://coreos.github.io/butane/getting-started/&#34;&gt;butane&lt;/a&gt; 官方文档安装 butane 工具&lt;/li&gt; &#xA; &lt;li&gt;5、执行 &lt;code&gt;butane --pretty --strict flatcar.butane.yaml | base64 -w0&lt;/code&gt; 生成 base64 编码格式的 Ignition 配置(yaml名称自行替换)&lt;/li&gt; &#xA; &lt;li&gt;6、下载对应系统的 ova &lt;a href=&#34;https://stable.release.flatcar-linux.net/amd64-usr/current/flatcar_production_vmware_ova.ova&#34;&gt;系统部署文件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;7、在 ESXi 内创建虚拟机选择从 &lt;code&gt;OVA&lt;/code&gt; 部署&lt;/li&gt; &#xA; &lt;li&gt;8、部署时 &lt;strong&gt;其他设置/Options&lt;/strong&gt; 中 &lt;code&gt;Ignition/coreos-cloudinit data&lt;/code&gt; 填写第 5 步生成的 base64 字符串, &lt;code&gt;Ignition/coreos-cloudinit data encoding&lt;/code&gt; 填写 &lt;code&gt;base64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;9、最后启动完成, 一个容器化、不可变的可靠 TPClash 网关就启动了&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;关于这个系统以及其配置文件限于篇幅无法做过多说明, 推荐阅读&lt;a href=&#34;https://mritd.com/2023/07/20/containerized-system-test/&#34;&gt;博客文章&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;2.5、设置流量转发&lt;/h3&gt; &#xA;&lt;p&gt;TPClash 启动成功后, 将其他主机的网关指向当前 TPClash 服务器 IP 即可实现透明代理; 对于被代理主机请使用公网 DNS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;请不要将其他主机的 DNS 也设置为 TPClash 服务器 IP, 因为这可能导致一些不可预测的问题, 具体请参考 &lt;a href=&#34;https://github.com/mritd/tpclash/wiki/Clash-DNS-%E7%A7%91%E6%99%AE&#34;&gt;Clash DNS 科普&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2.6、升级 TPClash&lt;/h3&gt; &#xA;&lt;p&gt;对于二进制文件部署的用户, 可以使用以下命令升级到最新版本:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@tpclash ~ # ❯❯❯ tpclash upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果想要升级到特定版本也可以指定版本号:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;root@tpclash ~ # ❯❯❯ tpclash upgrade v0.1.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;升级前请确保关闭了 tpclash 服务, 升级时默认使用 &lt;code&gt;https://ghproxy.com&lt;/code&gt; 进行加速, 如果不想使用可以通过 &lt;code&gt;--with-ghproxy=false&lt;/code&gt; 选项关闭.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;三、TPClash 配置&lt;/h2&gt; &#xA;&lt;p&gt;默认情况下 TPClash 会读取 &lt;code&gt;/etc/clash.yaml&lt;/code&gt; 配置文件启动 Clash; &lt;strong&gt;TPClash 首先会读取该文件并进行模版解析, 解析成功后 TPClash 会将其写入到 Home 目录的 &lt;code&gt;xclash.yaml&lt;/code&gt; 中 (默认为 &lt;code&gt;/data/clash/xclash.yaml&lt;/code&gt;), 然后再使用该配置启动 Clash.&lt;/strong&gt; 由于 TPClash 只是一个辅助工具, 实际代理处理还是由 Clash 完成, 为了避免错误配置导致代理不工作, TPClash 对 Clash 配置文件进行了必要性的配置检测. 下面是一些推荐的配置样例:&lt;/p&gt; &#xA;&lt;h3&gt;3.1、TUN 模式配置&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# 需要开启 TUN 配置&#xA;tun:&#xA;  enable: true&#xA;  stack: system&#xA;  dns-hijack:&#xA;    - any:53&#xA;  #   - 8.8.8.8:53&#xA;  #   - tcp://8.8.8.8:53&#xA;  auto-route: true&#xA;  auto-redir: true&#xA;  auto-detect-interface: true&#xA;&#xA;# 开启 DNS 配置, 且使用 fake-ip 模式&#xA;dns:&#xA;  enable: true&#xA;  listen: 0.0.0.0:1053&#xA;  enhanced-mode: fake-ip&#xA;  fake-ip-range: 198.18.0.1/16&#xA;  default-nameserver:&#xA;    - 223.5.5.5&#xA;    - 119.29.29.29&#xA;  nameserver:&#xA;    - 223.5.5.5&#xA;    - 119.29.29.29&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.2、TUN 配合 eBPF 配置&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# 请指定自己实际的接口名称(ip a 获取)&#xA;interface-name: ens160&#xA;&#xA;tun:&#xA;  enable: true&#xA;  stack: system&#xA;  dns-hijack:&#xA;    - any:53&#xA;  #   - 8.8.8.8:53&#xA;  #   - tcp://8.8.8.8:53&#xA;  # auto-route 与 ebpf 冲突, 不能同时使用&#xA;  #auto-route: true&#xA;  #auto-redir: true&#xA;  #auto-detect-interface: true&#xA;&#xA;# ebpf 需要指定物理网卡&#xA;ebpf:&#xA;  redirect-to-tun:&#xA;    - ens160&#xA;&#xA;# ebpf 需要配置 mark&#xA;routing-mark: 666&#xA;&#xA;# 开启 DNS 配置, 且使用 fake-ip 模式&#xA;dns:&#xA;  enable: true&#xA;  listen: 0.0.0.0:1053&#xA;  enhanced-mode: fake-ip&#xA;  fake-ip-range: 198.18.0.1/16&#xA;  default-nameserver:&#xA;    - 223.5.5.5&#xA;    - 119.29.29.29&#xA;  nameserver:&#xA;    - 223.5.5.5&#xA;    - 119.29.29.29&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.3、Meta 用户&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注意: Meta 版本暂时没有经过严格的测试, 作者并没有使用 Meta 版本的需求.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;从 &lt;code&gt;v0.0.16&lt;/code&gt; 版本开始支持 Clash Meta 分支版本, Meta 用户&lt;strong&gt;需要在配置文件中关闭 iptables 配置&lt;/strong&gt;, 其他配置与默认的 Permium 版本相同:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;iptables:&#xA;  enable: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3.4、订阅用户&lt;/h3&gt; &#xA;&lt;p&gt;如果期望完全不修改订阅配置实现透明代理, 可直接使用 &lt;code&gt;--auto-fix=tun&lt;/code&gt; 参数启动, &lt;strong&gt;该参数将会自动修补远程配置来实现透明代理, 同样带来的 后果是一些参数将会被硬编码:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;root@tpclash ~ # ❯❯❯ tpclash --auto-fix tun -c https://exmaple.com/clash.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;四、高级配置&lt;/h2&gt; &#xA;&lt;h3&gt;4.1、远程配置加载&lt;/h3&gt; &#xA;&lt;p&gt;为了方便使用, 在 &lt;code&gt;v0.0.19&lt;/code&gt; 版本开始支持远程配置加载; 从 &lt;code&gt;v0.0.22&lt;/code&gt; 版本开始进一步优化远程配置加载功能, 目前使用方式如下:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1、使用 &lt;code&gt;-c&lt;/code&gt; 参数指定 http(s) 远程配置文件地址, 例如 &lt;code&gt;-c https://example.com/clash.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;2、使用 &lt;code&gt;-i&lt;/code&gt; 参数指定检查间隔时间, TPClash 会按照这个时间频率去检查远程配置是否与本地一致, 不一致则更新并自动重载&lt;/li&gt; &#xA; &lt;li&gt;3、使用 &lt;code&gt;--http-header&lt;/code&gt; 参数设置下载远程配置的 http 请求头, 用于支持下载公网带认证的托管配置, 例如 &lt;code&gt;--http-header &#34;Authorization=Basic YWRtaW46MTIz&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;4、使用 &lt;code&gt;--config-password&lt;/code&gt; 参数设置配置文件的密码, 改密码用于解密配置文件, 主要用于将配置文件存储在可公共访问的地址(防止泄密)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意: 如果远程配置修改了端口等配置, 那么仍需要重新启动 TPClash, 因为 TPClash 重载无法照顾到底层的端口变更.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4.2、使用加密的配置文件&lt;/h3&gt; &#xA;&lt;p&gt;从 &lt;code&gt;v0.1.6&lt;/code&gt; 版本开始支持配置文件加密, 现在可以使用以下命令对明文的 yaml 配置进行加密:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./tpclash enc --config-password YOUR_PASSWORD clash.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;加密完成后将在本地生成一个被加密过的 &lt;code&gt;clash.yaml.enc&lt;/code&gt; 文件, 该文件可以直接托管到任何可公共访问的 http 地址(也可以本地使用).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;当 TPClash 指定了远程 http 配置, 同时 &lt;code&gt;--config-password&lt;/code&gt; 选项不为空的情况下, 则认为远程地址的配置文件是被加密的, TPClash 将会自动完成解密并加载:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./tpclash --config-password YOUR_PASSWORD -c https://exmaple.com/clash.yaml.enc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4.3、使用模版引擎&lt;/h3&gt; &#xA;&lt;p&gt;为了应对单配置文件多实例的部署情况, TPClash 内置了一些模版函数, 这些函数可以辅助配置生成完成自动化配置:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{{IfName}}&lt;/code&gt;: 自动解析为当前主机的主网卡&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{{DefaultDNS}}&lt;/code&gt;: 自动获取当前主机默认的上游 DNS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;模版函数可能随后续更新继续添加, 使用方法请参考项目内的 &lt;a href=&#34;https://github.com/mritd/tpclash/raw/master/example.yaml&#34;&gt;example.yaml&lt;/a&gt; 配置.&lt;/p&gt; &#xA;&lt;h3&gt;4.4、Premium Tracing&lt;/h3&gt; &#xA;&lt;p&gt;从 &lt;code&gt;v0.1.8&lt;/code&gt; 版本开始提供 Premium 核心的 &lt;a href=&#34;https://github.com/Dreamacro/clash-tracing&#34;&gt;Tracing Dashboard&lt;/a&gt; 自动部署, &lt;strong&gt;此功能需要宿主机安装有 Docker, TPClash 会调用 Docker API 自动创建容器.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;对于采用 Systemd 部署的用户, 宿主机安装好 Docker 后无需其他特殊操作; 对于采用 Docker 部署的用户, 需要增加一个挂载:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;docker run -dt \&#xA;  --name tpclash \&#xA;  --privileged \&#xA;  --network=host \&#xA;  -v /root/clash.yaml:/etc/clash.yaml \&#xA;+ -v /var/run/docker.sock:/var/run/docker.sock \&#xA;  mritd/tpclash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;然后需要在配置文件中开启 Tracing:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;profile:&#xA;    tracing: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;最后启动 TPClash 时增加 Tracing 选项即可:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./tpclash-premium-linux-amd64-v3 --enable-tracing -c /etc/clash.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;启动完成后可访问 &lt;code&gt;http://TPCLASH_IP:3000&lt;/code&gt; 查看 Tracing Dashboard, 其默认账户密码均为 &lt;code&gt;admin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;五、TPClash 做了什么&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;TPClash 在启动后会进行如下动作:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1、创建 &lt;code&gt;/data/clash&lt;/code&gt; 目录(可自行指定成其他目录), 并将其作为 Clash 的 &lt;code&gt;Home Dir&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;2、将 Clash 二进制文件、Dashboard(官方+yacd)、必要的 ruleset、Country.mmdb 释放到 &lt;code&gt;/data/clash&lt;/code&gt; 目录&lt;/li&gt; &#xA; &lt;li&gt;3、从本地或远程读取配置, 进行模版解析后复制到 &lt;code&gt;/data/clash/xclash.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;4、启动官方的 Clash, 并设置必要参数, 比如 &lt;code&gt;-ext-ui&lt;/code&gt;、&lt;code&gt;-d&lt;/code&gt; 等&lt;/li&gt; &#xA; &lt;li&gt;5、选择性进行网络配置, 例如为 Docker 用户自动设置 nftables&lt;/li&gt; &#xA; &lt;li&gt;6、在后台持续监视本地或远程配置文件变动, 然后自动重载&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;六、如何编译 TPClash&lt;/h2&gt; &#xA;&lt;p&gt;由于 TPClash 是一个集成工具, 所以在编译前请安装好以下工具链:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;jq&lt;/li&gt; &#xA; &lt;li&gt;tar&lt;/li&gt; &#xA; &lt;li&gt;gzip&lt;/li&gt; &#xA; &lt;li&gt;nodejs(用于编译 Dashboard)&lt;/li&gt; &#xA; &lt;li&gt;pnpm(Dashboard 编译所需依赖工具, 可通过 &lt;code&gt;npm i -g xxx&lt;/code&gt; 安装)&lt;/li&gt; &#xA; &lt;li&gt;golang 1.21+&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-task/task&#34;&gt;go-task&lt;/a&gt;(类似 Makefile 的替代工具)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TPClash 项目内的 &lt;code&gt;Taskfile.yaml&lt;/code&gt; 内已经写好了自动编译脚本, 只需要执行 &lt;code&gt;task&lt;/code&gt; 命令即可:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/mritd/tpclash.git&#xA;cd tpclash&#xA;task # go-task 安装成功后会包含此命令&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;其他高级编译(例如单独编译特定平台)请执行 &lt;code&gt;task --list&lt;/code&gt; 查看.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;七、其他说明&lt;/h2&gt; &#xA;&lt;p&gt;TPClash 默认释放的文件包含了 &lt;a href=&#34;https://github.com/Loyalsoldier/clash-rules&#34;&gt;Loyalsoldier/clash-rules&lt;/a&gt; 相关文件, 可在规则中直接使用;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;TPClash 同时也释放了 &lt;a href=&#34;https://github.com/Hackl0us/GeoIP2-CN&#34;&gt;Hackl0us/GeoIP2-CN&lt;/a&gt; 项目的 Country.mmdb 文件, 该 GeoIP 数据库 仅包含中国大陆地区 IP, 所以如果使用 &lt;code&gt;GEOIP,US,PROXY&lt;/code&gt; 等其他国家规则会失败.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;八、官方讨论群&lt;/h2&gt; &#xA;&lt;p&gt;Telegram: &lt;a href=&#34;https://t.me/tpclash&#34;&gt;https://t.me/tpclash&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>markbates/goth</title>
    <updated>2024-01-30T01:28:34Z</updated>
    <id>tag:github.com,2024-01-30:/markbates/goth</id>
    <link href="https://github.com/markbates/goth" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Package goth provides a simple, clean, and idiomatic way to write authentication packages for Go web applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Goth: Multi-Provider Authentication for Go &lt;a href=&#34;https://godoc.org/github.com/markbates/goth&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/markbates/goth?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/markbates/goth/actions&#34;&gt;&lt;img src=&#34;https://github.com/markbates/goth/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/markbates/goth&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/markbates/goth&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Package goth provides a simple, clean, and idiomatic way to write authentication packages for Go web applications.&lt;/p&gt; &#xA;&lt;p&gt;Unlike other similar packages, Goth, lets you write OAuth, OAuth2, or any other protocol providers, as long as they implement the &lt;a href=&#34;https://github.com/markbates/goth/raw/master/provider.go#L13-L22&#34;&gt;Provider&lt;/a&gt; and &lt;a href=&#34;https://github.com/markbates/goth/raw/master/session.go#L13-L21&#34;&gt;Session&lt;/a&gt; interfaces.&lt;/p&gt; &#xA;&lt;p&gt;This package was inspired by &lt;a href=&#34;https://github.com/intridea/omniauth&#34;&gt;https://github.com/intridea/omniauth&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get github.com/markbates/goth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Providers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Amazon&lt;/li&gt; &#xA; &lt;li&gt;Apple&lt;/li&gt; &#xA; &lt;li&gt;Auth0&lt;/li&gt; &#xA; &lt;li&gt;Azure AD&lt;/li&gt; &#xA; &lt;li&gt;Battle.net&lt;/li&gt; &#xA; &lt;li&gt;Bitbucket&lt;/li&gt; &#xA; &lt;li&gt;Box&lt;/li&gt; &#xA; &lt;li&gt;Cloud Foundry&lt;/li&gt; &#xA; &lt;li&gt;Dailymotion&lt;/li&gt; &#xA; &lt;li&gt;Deezer&lt;/li&gt; &#xA; &lt;li&gt;DigitalOcean&lt;/li&gt; &#xA; &lt;li&gt;Discord&lt;/li&gt; &#xA; &lt;li&gt;Dropbox&lt;/li&gt; &#xA; &lt;li&gt;Eve Online&lt;/li&gt; &#xA; &lt;li&gt;Facebook&lt;/li&gt; &#xA; &lt;li&gt;Fitbit&lt;/li&gt; &#xA; &lt;li&gt;Gitea&lt;/li&gt; &#xA; &lt;li&gt;GitHub&lt;/li&gt; &#xA; &lt;li&gt;Gitlab&lt;/li&gt; &#xA; &lt;li&gt;Google&lt;/li&gt; &#xA; &lt;li&gt;Google+ (deprecated)&lt;/li&gt; &#xA; &lt;li&gt;Heroku&lt;/li&gt; &#xA; &lt;li&gt;InfluxCloud&lt;/li&gt; &#xA; &lt;li&gt;Instagram&lt;/li&gt; &#xA; &lt;li&gt;Intercom&lt;/li&gt; &#xA; &lt;li&gt;Kakao&lt;/li&gt; &#xA; &lt;li&gt;Lastfm&lt;/li&gt; &#xA; &lt;li&gt;LINE&lt;/li&gt; &#xA; &lt;li&gt;Linkedin&lt;/li&gt; &#xA; &lt;li&gt;Mailru&lt;/li&gt; &#xA; &lt;li&gt;Meetup&lt;/li&gt; &#xA; &lt;li&gt;MicrosoftOnline&lt;/li&gt; &#xA; &lt;li&gt;Naver&lt;/li&gt; &#xA; &lt;li&gt;Nextcloud&lt;/li&gt; &#xA; &lt;li&gt;Okta&lt;/li&gt; &#xA; &lt;li&gt;OneDrive&lt;/li&gt; &#xA; &lt;li&gt;OpenID Connect (auto discovery)&lt;/li&gt; &#xA; &lt;li&gt;Oura&lt;/li&gt; &#xA; &lt;li&gt;Patreon&lt;/li&gt; &#xA; &lt;li&gt;Paypal&lt;/li&gt; &#xA; &lt;li&gt;SalesForce&lt;/li&gt; &#xA; &lt;li&gt;Shopify&lt;/li&gt; &#xA; &lt;li&gt;Slack&lt;/li&gt; &#xA; &lt;li&gt;Soundcloud&lt;/li&gt; &#xA; &lt;li&gt;Spotify&lt;/li&gt; &#xA; &lt;li&gt;Steam&lt;/li&gt; &#xA; &lt;li&gt;Strava&lt;/li&gt; &#xA; &lt;li&gt;Stripe&lt;/li&gt; &#xA; &lt;li&gt;TikTok&lt;/li&gt; &#xA; &lt;li&gt;Tumblr&lt;/li&gt; &#xA; &lt;li&gt;Twitch&lt;/li&gt; &#xA; &lt;li&gt;Twitter&lt;/li&gt; &#xA; &lt;li&gt;Typetalk&lt;/li&gt; &#xA; &lt;li&gt;Uber&lt;/li&gt; &#xA; &lt;li&gt;VK&lt;/li&gt; &#xA; &lt;li&gt;WeCom&lt;/li&gt; &#xA; &lt;li&gt;Wepay&lt;/li&gt; &#xA; &lt;li&gt;Xero&lt;/li&gt; &#xA; &lt;li&gt;Yahoo&lt;/li&gt; &#xA; &lt;li&gt;Yammer&lt;/li&gt; &#xA; &lt;li&gt;Yandex&lt;/li&gt; &#xA; &lt;li&gt;Zoom&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/markbates/goth/master/examples&#34;&gt;examples&lt;/a&gt; folder for a working application that lets users authenticate through Twitter, Facebook, Google Plus etc.&lt;/p&gt; &#xA;&lt;p&gt;To run the example either clone the source from GitHub&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ git clone git@github.com:markbates/goth.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ go get github.com/markbates/goth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cd goth/examples&#xA;$ go get -v&#xA;$ go build&#xA;$ ./examples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now open up your browser and go to &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to see the example.&lt;/p&gt; &#xA;&lt;p&gt;To actually use the different providers, please make sure you set environment variables. Example given in the examples/main.go file&lt;/p&gt; &#xA;&lt;h2&gt;Security Notes&lt;/h2&gt; &#xA;&lt;p&gt;By default, gothic uses a &lt;code&gt;CookieStore&lt;/code&gt; from the &lt;code&gt;gorilla/sessions&lt;/code&gt; package to store session data.&lt;/p&gt; &#xA;&lt;p&gt;As configured, this default store (&lt;code&gt;gothic.Store&lt;/code&gt;) will generate cookies with &lt;code&gt;Options&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&amp;amp;Options{&#xA;   Path:   &#34;/&#34;,&#xA;   Domain: &#34;&#34;,&#xA;   MaxAge: 86400 * 30,&#xA;   HttpOnly: true,&#xA;   Secure: false,&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tailor these fields for your application, you can override the &lt;code&gt;gothic.Store&lt;/code&gt; variable at startup.&lt;/p&gt; &#xA;&lt;p&gt;The following snippet shows one way to do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;key := &#34;&#34;             // Replace with your SESSION_SECRET or similar&#xA;maxAge := 86400 * 30  // 30 days&#xA;isProd := false       // Set to true when serving over https&#xA;&#xA;store := sessions.NewCookieStore([]byte(key))&#xA;store.MaxAge(maxAge)&#xA;store.Options.Path = &#34;/&#34;&#xA;store.Options.HttpOnly = true   // HttpOnly should always be enabled&#xA;store.Options.Secure = isProd&#xA;&#xA;gothic.Store = store&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues always stand a significantly better chance of getting fixed if they are accompanied by a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Would I love to see more providers? Certainly! Would you love to contribute one? Hopefully, yes!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (git checkout -b my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Write Tests!&lt;/li&gt; &#xA; &lt;li&gt;Make sure the codebase adhere to the Go coding standards by executing &lt;code&gt;gofmt -s -w ./&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (git commit -am &#39;Add some feature&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (git push origin my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>vdjagilev/nmap-formatter</title>
    <updated>2024-01-30T01:28:34Z</updated>
    <id>tag:github.com,2024-01-30:/vdjagilev/nmap-formatter</id>
    <link href="https://github.com/vdjagilev/nmap-formatter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool that allows you to convert NMAP results to html, csv, json, markdown, graphviz (dot) or sqlite. Simply put it&#39;s nmap converter.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NMAP-Formatter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/vdjagilev/nmap-formatter/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/vdjagilev/nmap-formatter&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/vdjagilev/nmap-formatter/branch/main/graph/badge.svg?token=8WSYXRKMFA&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/vdjagilev/nmap-formatter/maintainability&#34;&gt;&lt;img src=&#34;https://api.codeclimate.com/v1/badges/7836d3a52439fb1affa0/maintainability&#34; alt=&#34;Maintainability&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;HTML: &lt;img src=&#34;https://user-images.githubusercontent.com/2762286/166215713-02ab3e43-5e89-4f4a-b9f1-64651f2939e1.png&#34; alt=&#34;nmap-example-html&#34;&gt; Graphviz: &lt;img src=&#34;https://raw.githubusercontent.com/vdjagilev/nmap-formatter/main/docs/images/example-dot.png&#34; alt=&#34;nmap-example-graphviz&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tool that allows you to convert NMAP XML output to html/csv/json/markdown/dot/sqlite.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to install it using &lt;code&gt;go install&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/vdjagilev/nmap-formatter/v2@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All other options can be found on &lt;a href=&#34;https://github.com/vdjagilev/nmap-formatter/wiki/Installation&#34;&gt;Installation Wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap-formatter [html|csv|md|json|dot|sqlite] [path-to-nmap.xml] [flags]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or alternatively you can read file from &lt;code&gt;stdin&lt;/code&gt; and parse it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat some.xml | nmap-formatter json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Convert XML output to nicer HTML&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap-formatter html [path-to-nmap.xml] &amp;gt; some-file.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Markdown&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap-formatter md [path-to-nmap.xml] &amp;gt; some-markdown.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or JSON&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nmap-formatter json [path-to-nmap.xml]&#xA;# This approach is also possible&#xA;cat nmap.xml | nmap-formatter json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or Graphviz (dot)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat example.xml | nmap-formatter dot | dot -Tsvg &amp;gt; test.svg&#xA;# open test.svg with browser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or SQLite&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat example.xml | nmap-formatter sqlite --sqlite-dsn nmap.sqlite&#xA;# open nmap.sqlite with any database tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples can be found on &lt;a href=&#34;https://github.com/vdjagilev/nmap-formatter/wiki/Usage&#34;&gt;Usage Wiki page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Flags&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-f, --file [filename]&lt;/code&gt; outputs result to the file (by default output goes to STDOUT)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--help&lt;/code&gt; display help message&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt; display version (also can be used: &lt;code&gt;./nmap-formatter version&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s also possible to change various output options. More examples on &lt;a href=&#34;https://github.com/vdjagilev/nmap-formatter/wiki/Usage#flags-and-output-options&#34;&gt;Usage Wiki Page - Flags&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Screenshots of various formats available &lt;a href=&#34;https://github.com/vdjagilev/nmap-formatter/wiki/Examples&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use as a library&lt;/h2&gt; &#xA;&lt;p&gt;Examples on how to use this project as a library in golang: &lt;a href=&#34;https://github.com/vdjagilev/nmap-formatter/wiki/Use-as-a-library&#34;&gt;Use as a library Wiki page&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>