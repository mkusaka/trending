<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-28T01:31:37Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mark3labs/mcp-filesystem-server</title>
    <updated>2025-05-28T01:31:37Z</updated>
    <id>tag:github.com,2025-05-28:/mark3labs/mcp-filesystem-server</id>
    <link href="https://github.com/mark3labs/mcp-filesystem-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go server implementing Model Context Protocol (MCP) for filesystem operations.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Filesystem Server&lt;/h1&gt; &#xA;&lt;p&gt;This MCP server provides secure access to the local filesystem via the Model Context Protocol (MCP).&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;h4&gt;File Operations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;read_file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Read the complete contents of a file from the file system&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;path&lt;/code&gt; (required): Path to the file to read&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;read_multiple_files&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Read the contents of multiple files in a single operation&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;paths&lt;/code&gt; (required): List of file paths to read&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;write_file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create a new file or overwrite an existing file with new content&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;path&lt;/code&gt; (required): Path where to write the file, &lt;code&gt;content&lt;/code&gt; (required): Content to write to the file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;copy_file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copy files and directories&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;source&lt;/code&gt; (required): Source path of the file or directory, &lt;code&gt;destination&lt;/code&gt; (required): Destination path&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;move_file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Move or rename files and directories&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;source&lt;/code&gt; (required): Source path of the file or directory, &lt;code&gt;destination&lt;/code&gt; (required): Destination path&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;delete_file&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Delete a file or directory from the file system&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;path&lt;/code&gt; (required): Path to the file or directory to delete, &lt;code&gt;recursive&lt;/code&gt; (optional): Whether to recursively delete directories (default: false)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Directory Operations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_directory&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get a detailed listing of all files and directories in a specified path&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;path&lt;/code&gt; (required): Path of the directory to list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;create_directory&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Create a new directory or ensure a directory exists&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;path&lt;/code&gt; (required): Path of the directory to create&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tree&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Returns a hierarchical JSON representation of a directory structure&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;path&lt;/code&gt; (required): Path of the directory to traverse, &lt;code&gt;depth&lt;/code&gt; (optional): Maximum depth to traverse (default: 3), &lt;code&gt;follow_symlinks&lt;/code&gt; (optional): Whether to follow symbolic links (default: false)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Search and Information&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;search_files&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recursively search for files and directories matching a pattern&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;path&lt;/code&gt; (required): Starting path for the search, &lt;code&gt;pattern&lt;/code&gt; (required): Search pattern to match against file names&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;get_file_info&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Retrieve detailed metadata about a file or directory&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: &lt;code&gt;path&lt;/code&gt; (required): Path to the file or directory&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;list_allowed_directories&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Returns the list of directories that this server is allowed to access&lt;/li&gt; &#xA;   &lt;li&gt;Parameters: None&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Secure access to specified directories&lt;/li&gt; &#xA; &lt;li&gt;Path validation to prevent directory traversal attacks&lt;/li&gt; &#xA; &lt;li&gt;Symlink resolution with security checks&lt;/li&gt; &#xA; &lt;li&gt;MIME type detection&lt;/li&gt; &#xA; &lt;li&gt;Support for text, binary, and image files&lt;/li&gt; &#xA; &lt;li&gt;Size limits for inline content and base64 encoding&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h4&gt;Using Go Install&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/mark3labs/mcp-filesystem-server@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;As a standalone server&lt;/h4&gt; &#xA;&lt;p&gt;Start the MCP server with allowed directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mcp-filesystem-server /path/to/allowed/directory [/another/allowed/directory ...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;As a library in your Go project&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#xA;&#x9;&#34;github.com/mark3labs/mcp-filesystem-server/filesystemserver&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Create a new filesystem server with allowed directories&#xA;&#x9;allowedDirs := []string{&#34;/path/to/allowed/directory&#34;, &#34;/another/allowed/directory&#34;}&#xA;&#x9;fs, err := filesystemserver.NewFilesystemServer(allowedDirs)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;Failed to create server: %v&#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;// Serve requests&#xA;&#x9;if err := fs.Serve(); err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;Server error: %v&#34;, err)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage with Model Context Protocol&lt;/h3&gt; &#xA;&lt;p&gt;To integrate this server with apps that support MCP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;filesystem&#34;: {&#xA;      &#34;command&#34;: &#34;mcp-filesystem-server&#34;,&#xA;      &#34;args&#34;: [&#34;/path/to/allowed/directory&#34;, &#34;/another/allowed/directory&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;h4&gt;Running with Docker&lt;/h4&gt; &#xA;&lt;p&gt;You can run the Filesystem MCP server using Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -i --rm ghcr.io/mark3labs/mcp-filesystem-server:latest /path/to/allowed/directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Configuration with MCP&lt;/h4&gt; &#xA;&lt;p&gt;To integrate the Docker image with apps that support MCP:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;filesystem&#34;: {&#xA;      &#34;command&#34;: &#34;docker&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;-i&#34;,&#xA;        &#34;--rm&#34;,&#xA;        &#34;ghcr.io/mark3labs/mcp-filesystem-server:latest&#34;,&#xA;        &#34;/path/to/allowed/directory&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mark3labs/mcp-filesystem-server/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>