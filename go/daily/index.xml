<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-17T01:33:32Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>etcd-io/etcd</title>
    <updated>2022-09-17T01:33:32Z</updated>
    <id>tag:github.com,2022-09-17:/etcd-io/etcd</id>
    <link href="https://github.com/etcd-io/etcd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Distributed reliable key-value store for the most critical data of a distributed system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;etcd&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/etcd-io/etcd&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/etcd-io/etcd?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/etcd-io/etcd&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/etcd-io/etcd/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/etcd-io/etcd/actions/workflows/tests.yaml&#34;&gt;&lt;img src=&#34;https://github.com/etcd-io/etcd/actions/workflows/tests.yaml/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/etcd-io/etcd/actions/workflows/codeql-analysis.yml&#34;&gt;&lt;img src=&#34;https://github.com/etcd-io/etcd/actions/workflows/codeql-analysis.yml/badge.svg?sanitize=true&#34; alt=&#34;codeql-analysis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://etcd.io/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-green.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/etcd-io/etcd&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/go-documentation-blue.svg?style=flat-square&#34; alt=&#34;Godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/etcd-io/etcd/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/etcd-io/etcd/all.svg?style=flat-square&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/etcd-io/etcd/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/etcd-io/etcd.svg?style=flat-square&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;main&lt;/code&gt; branch may be in an &lt;em&gt;unstable or even broken state&lt;/em&gt; during development. For stable versions, see &lt;a href=&#34;https://github.com/etcd-io/etcd/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/logos/etcd-horizontal-color.svg?sanitize=true&#34; alt=&#34;etcd Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;etcd is a distributed reliable key-value store for the most critical data of a distributed system, with a focus on being:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Simple&lt;/em&gt;: well-defined, user-facing API (gRPC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Secure&lt;/em&gt;: automatic TLS with optional client cert authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Fast&lt;/em&gt;: benchmarked 10,000 writes/sec&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Reliable&lt;/em&gt;: properly distributed using Raft&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;etcd is written in Go and uses the &lt;a href=&#34;https://raft.github.io/&#34;&gt;Raft&lt;/a&gt; consensus algorithm to manage a highly-available replicated log.&lt;/p&gt; &#xA;&lt;p&gt;etcd is used &lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/ADOPTERS.md&#34;&gt;in production by many companies&lt;/a&gt;, and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as &lt;a href=&#34;http://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&#34;https://github.com/coreos/locksmith&#34;&gt;locksmith&lt;/a&gt;, &lt;a href=&#34;https://github.com/vulcand/vulcand&#34;&gt;vulcand&lt;/a&gt;, &lt;a href=&#34;https://github.com/youtube/doorman&#34;&gt;Doorman&lt;/a&gt;, and many others. Reliability is further ensured by &lt;a href=&#34;https://github.com/etcd-io/etcd/tree/main/tests/functional&#34;&gt;&lt;strong&gt;rigorous testing&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/etcd-io/etcd/tree/main/etcdctl&#34;&gt;etcdctl&lt;/a&gt; for a simple command line client.&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/MAINTAINERS&#34;&gt;MAINTAINERS&lt;/a&gt; strive to shape an inclusive open source project culture where users are heard and contributors feel respected and empowered. MAINTAINERS maintain productive relationships across different companies and disciplines. Read more about &lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/GOVERNANCE.md#maintainers&#34;&gt;MAINTAINERS role and responsibilities&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Getting etcd&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, and Docker on the &lt;a href=&#34;https://github.com/etcd-io/etcd/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more installation guides, please check out &lt;a href=&#34;http://play.etcd.io&#34;&gt;play.etcd.io&lt;/a&gt; and &lt;a href=&#34;https://etcd.io/docs/latest/op-guide&#34;&gt;operating etcd&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running etcd&lt;/h3&gt; &#xA;&lt;p&gt;First start a single-member cluster of etcd.&lt;/p&gt; &#xA;&lt;p&gt;If etcd is installed using the &lt;a href=&#34;https://github.com/etcd-io/etcd/releases&#34;&gt;pre-built release binaries&lt;/a&gt;, run it from the installation location as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/tmp/etcd-download-test/etcd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The etcd command can be simply run as such if it is moved to the system path as below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv /tmp/etcd-download-test/etcd /usr/local/bin/&#xA;etcd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will bring up etcd listening on port 2379 for client communication and on port 2380 for server-to-server communication.&lt;/p&gt; &#xA;&lt;p&gt;Next, let&#39;s set a single key, and then retrieve it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;etcdctl put mykey &#34;this is awesome&#34;&#xA;etcdctl get mykey&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;etcd is now running and serving client requests. For more, please check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://play.etcd.io&#34;&gt;Interactive etcd playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://etcd.io/docs/latest/demo&#34;&gt;Animated quick demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;etcd TCP ports&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt&#34;&gt;official etcd ports&lt;/a&gt; are 2379 for client requests, and 2380 for peer communication.&lt;/p&gt; &#xA;&lt;h3&gt;Running a local etcd cluster&lt;/h3&gt; &#xA;&lt;p&gt;First install &lt;a href=&#34;https://github.com/mattn/goreman&#34;&gt;goreman&lt;/a&gt;, which manages Procfile-based applications.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/Procfile&#34;&gt;Procfile script&lt;/a&gt; will set up a local example cluster. Start it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;goreman start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will bring up 3 etcd members &lt;code&gt;infra1&lt;/code&gt;, &lt;code&gt;infra2&lt;/code&gt; and &lt;code&gt;infra3&lt;/code&gt; and optionally etcd &lt;code&gt;grpc-proxy&lt;/code&gt;, which runs locally and composes a cluster.&lt;/p&gt; &#xA;&lt;p&gt;Every cluster member and proxy accepts key value reads and key value writes.&lt;/p&gt; &#xA;&lt;p&gt;Follow the steps in &lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/Procfile.learner&#34;&gt;Procfile.learner&lt;/a&gt; to add a learner node to the cluster. Start the learner node with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;goreman -f ./Procfile.learner start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install etcd client v3&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get go.etcd.io/etcd/client/v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Next steps&lt;/h3&gt; &#xA;&lt;p&gt;Now it&#39;s time to dig into the full etcd API and other guides.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read the full &lt;a href=&#34;https://etcd.io/docs/latest&#34;&gt;documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Explore the full gRPC &lt;a href=&#34;https://etcd.io/docs/latest/learning/api&#34;&gt;API&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set up a &lt;a href=&#34;https://etcd.io/docs/latest/op-guide/clustering&#34;&gt;multi-machine cluster&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Learn the &lt;a href=&#34;https://etcd.io/docs/latest/op-guide/configuration&#34;&gt;config format, env variables and flags&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Find &lt;a href=&#34;https://etcd.io/docs/latest/integrations&#34;&gt;language bindings and tools&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use TLS to &lt;a href=&#34;https://etcd.io/docs/latest/op-guide/security&#34;&gt;secure an etcd cluster&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://etcd.io/docs/latest/tuning&#34;&gt;Tune etcd&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;https://groups.google.com/forum/?hl=en#!forum/etcd-dev&#34;&gt;etcd-dev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Slack: &lt;a href=&#34;https://kubernetes.slack.com/messages/C3HD8ARJ5/details/&#34;&gt;#etcd&lt;/a&gt; channel on Kubernetes (&lt;a href=&#34;http://slack.kubernetes.io/&#34;&gt;get an invite&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/#Community-meetings&#34;&gt;Community meetings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Community meetings&lt;/h3&gt; &#xA;&lt;p&gt;etcd contributors and maintainers have monthly (every four weeks) meetings at 11:00 AM (USA Pacific) on Thursday.&lt;/p&gt; &#xA;&lt;p&gt;An initial agenda will be posted to the &lt;a href=&#34;https://docs.google.com/document/d/16XEGyPBisZvmmoIHSZzv__LoyOeluC5a4x353CX0SIM/edit&#34;&gt;shared Google docs&lt;/a&gt; a day before each meeting, and everyone is welcome to suggest additional topics or other agendas.&lt;/p&gt; &#xA;&lt;p&gt;Meeting recordings are uploaded to official etcd &lt;a href=&#34;https://www.youtube.com/channel/UC7tUWR24I5AR9NMsG-NYBlg&#34;&gt;YouTube channel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Get calendar invitation by joining &lt;a href=&#34;https://groups.google.com/forum/?hl=en#!forum/etcd-dev&#34;&gt;etcd-dev&lt;/a&gt; mailing group.&lt;/p&gt; &#xA;&lt;p&gt;Join Hangouts Meet: &lt;a href=&#34;https://meet.google.com/umg-nrxn-qvs&#34;&gt;meet.google.com/umg-nrxn-qvs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join by phone: +1 405-792-0633‬ PIN: ‪299 906‬#&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/etcd-io/etcd/raw/main/Documentation/contributor-guide/reporting_bugs.md&#34;&gt;reporting bugs&lt;/a&gt; for details about reporting any issues.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting a security vulnerability&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/security/README.md&#34;&gt;security disclosure and release process&lt;/a&gt; for details on how to report a security vulnerability and how the etcd team manages it.&lt;/p&gt; &#xA;&lt;h2&gt;Issue and PR management&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/etcd-io/etcd/raw/main/Documentation/contributor-guide/triage_issues.md&#34;&gt;issue triage guidelines&lt;/a&gt; for details on how issues are managed.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/etcd-io/etcd/raw/main/Documentation/contributor-guide/triage_prs.md&#34;&gt;PR management&lt;/a&gt; for guidelines on how pull requests are managed.&lt;/p&gt; &#xA;&lt;h2&gt;etcd Emeritus Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;These emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs and pushed the project forward over a substantial period of time. Their contribution is greatly appreciated.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fanmin Shi&lt;/li&gt; &#xA; &lt;li&gt;Anthony Romano&lt;/li&gt; &#xA; &lt;li&gt;Brandon Philips&lt;/li&gt; &#xA; &lt;li&gt;Joe Betz&lt;/li&gt; &#xA; &lt;li&gt;Gyuho Lee&lt;/li&gt; &#xA; &lt;li&gt;Jingyi Hu&lt;/li&gt; &#xA; &lt;li&gt;Wenjia Zhang&lt;/li&gt; &#xA; &lt;li&gt;Xiang Li&lt;/li&gt; &#xA; &lt;li&gt;Ben Darnell&lt;/li&gt; &#xA; &lt;li&gt;Tobias Grieger&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;etcd is under the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/etcd-io/etcd/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>v2ray/domain-list-community</title>
    <updated>2022-09-17T01:33:32Z</updated>
    <id>tag:github.com,2022-09-17:/v2ray/domain-list-community</id>
    <link href="https://github.com/v2ray/domain-list-community" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community managed domain list&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Move To &lt;a href=&#34;https://github.com/v2fly/domain-list-community&#34;&gt;https://github.com/v2fly/domain-list-community&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Domain list community&lt;/h1&gt; &#xA;&lt;p&gt;This project manages a list of domains, to be used as geosites for routing purpose in Project V.&lt;/p&gt; &#xA;&lt;h2&gt;Announcement&lt;/h2&gt; &#xA;&lt;p&gt;Due to a lack of members capable of code review, this repository has been moved to &lt;a href=&#34;https://github.com/v2fly/domain-list-community&#34;&gt;v2fly/domain-list-community&lt;/a&gt;. This also means that more contributors can have manager access to the new repository after a few successful PRs, which will make the project healthier and more active for good.&lt;/p&gt; &#xA;&lt;p&gt;From now on, this repo will only be used to release &lt;code&gt;dlc.dat&lt;/code&gt;. Other matters (issues and pull requests) will be handled at the new repository.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose of this project&lt;/h2&gt; &#xA;&lt;p&gt;This project is not opinionated. In other words, it does NOT endorse, claim or imply that a domain should be blocked or proxied. It can be used to generate routing rules on demand.&lt;/p&gt; &#xA;&lt;h2&gt;Download links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;dlc.dat&lt;/strong&gt;：&lt;a href=&#34;https://github.com/v2ray/domain-list-community/raw/release/dlc.dat&#34;&gt;https://github.com/v2ray/domain-list-community/raw/release/dlc.dat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dlc.dat.sha256sum&lt;/strong&gt;：&lt;a href=&#34;https://github.com/v2ray/domain-list-community/raw/release/dlc.dat.sha256sum&#34;&gt;https://github.com/v2ray/domain-list-community/raw/release/dlc.dat.sha256sum&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage example&lt;/h2&gt; &#xA;&lt;p&gt;Each file in the &lt;code&gt;data&lt;/code&gt; directory can be used as a rule in this format: &lt;code&gt;geosite:filename&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;routing&#34;: {&#xA;  &#34;domainStrategy&#34;: &#34;IPIfNonMatch&#34;,&#xA;  &#34;rules&#34;: [&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Reject&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;geosite:category-ads-all&#34;,&#xA;        &#34;geosite:category-porn&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Direct&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;domain:icloud.com&#34;,&#xA;        &#34;domain:icloud-content.com&#34;,&#xA;        &#34;domain:cdn-apple.com&#34;,&#xA;        &#34;geosite:cn&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Proxy-1&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;geosite:category-anticensorship&#34;,&#xA;        &#34;geosite:category-media&#34;,&#xA;        &#34;geosite:category-vpnservices&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Proxy-2&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;geosite:category-dev&#34;&#xA;      ]&#xA;    },&#xA;    {&#xA;      &#34;type&#34;: &#34;field&#34;,&#xA;      &#34;outboundTag&#34;: &#34;Proxy-3&#34;,&#xA;      &#34;domain&#34;: [&#xA;        &#34;geosite:geolocation-!cn&#34;&#xA;      ]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generate &lt;code&gt;dlc.dat&lt;/code&gt; manually&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;code&gt;golang&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download and install project code: &lt;code&gt;go get -u -v --insecure github.com/v2ray/domain-list-community&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generate &lt;code&gt;dlc.dat&lt;/code&gt; (without &lt;code&gt;datapath&lt;/code&gt; option means to use &lt;code&gt;data&lt;/code&gt; directory of this repository in &lt;code&gt;$GOPATH&lt;/code&gt;): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;$(go env GOPATH)/bin/domain-list-community&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;$(go env GOPATH)/bin/domain-list-community --datapath=/path/to/your/custom/data/directory&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Structure of data&lt;/h2&gt; &#xA;&lt;p&gt;All data are under &lt;code&gt;data&lt;/code&gt; directory. Each file in the directory represents a sub-list of domains, named by the file name. File content is in the following format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# comments&#xA;include:another-file&#xA;domain:google.com @attr1 @attr2&#xA;keyword:google&#xA;regex:www\.google\.com&#xA;full:www.google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comment begins with &lt;code&gt;#&lt;/code&gt;. It may begin anywhere in the file. The content in the line after &lt;code&gt;#&lt;/code&gt; is treated as comment and ignored in production.&lt;/li&gt; &#xA; &lt;li&gt;Inclusion begins with &lt;code&gt;include:&lt;/code&gt;, followed by the file name of an existing file in the same directory.&lt;/li&gt; &#xA; &lt;li&gt;Subdomain begins with &lt;code&gt;domain:&lt;/code&gt;, followed by a valid domain name. The prefix &lt;code&gt;domain:&lt;/code&gt; may be omitted.&lt;/li&gt; &#xA; &lt;li&gt;Keyword begins with &lt;code&gt;keyword:&lt;/code&gt;, followed by a string.&lt;/li&gt; &#xA; &lt;li&gt;Regular expression begins with &lt;code&gt;regex:&lt;/code&gt;, followed by a valid regular expression (per Golang&#39;s standard).&lt;/li&gt; &#xA; &lt;li&gt;Full domain begins with &lt;code&gt;full:&lt;/code&gt;, followed by a complete and valid domain name.&lt;/li&gt; &#xA; &lt;li&gt;Domains (including &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;keyword&lt;/code&gt;, &lt;code&gt;regex&lt;/code&gt; and &lt;code&gt;full&lt;/code&gt;) may have one or more attributes. Each attribute begins with &lt;code&gt;@&lt;/code&gt; and followed by the name of the attribute.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The entire &lt;code&gt;data&lt;/code&gt; directory will be built into an external &lt;code&gt;geosite&lt;/code&gt; file for Project V. Each file in the directory represents a section in the generated file.&lt;/p&gt; &#xA;&lt;p&gt;To generate a section:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Remove all the comments in the file.&lt;/li&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;include:&lt;/code&gt; lines with the actual content of the file.&lt;/li&gt; &#xA; &lt;li&gt;Omit all empty lines.&lt;/li&gt; &#xA; &lt;li&gt;Generate each &lt;code&gt;domain:&lt;/code&gt; line into a &lt;a href=&#34;https://github.com/v2ray/v2ray-core/raw/master/app/router/config.proto#L21&#34;&gt;sub-domain routing rule&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate each &lt;code&gt;keyword:&lt;/code&gt; line into a &lt;a href=&#34;https://github.com/v2ray/v2ray-core/raw/master/app/router/config.proto#L17&#34;&gt;plain domain routing rule&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate each &lt;code&gt;regex:&lt;/code&gt; line into a &lt;a href=&#34;https://github.com/v2ray/v2ray-core/raw/master/app/router/config.proto#L19&#34;&gt;regex domain routing rule&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate each &lt;code&gt;full:&lt;/code&gt; line into a &lt;a href=&#34;https://github.com/v2ray/v2ray-core/raw/master/app/router/config.proto#L23&#34;&gt;full domain routing rule&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to organize domains&lt;/h2&gt; &#xA;&lt;h3&gt;File name&lt;/h3&gt; &#xA;&lt;p&gt;Theoretically any string can be used as the name, as long as it is a valid file name. In practice, we prefer names for determinic group of domains, such as the owner (usually a company name) of the domains, e.g., &#34;google&#34;, &#34;netflix&#34;. Names with unclear scope are generally unrecommended, such as &#34;evil&#34;, or &#34;local&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Attributes&lt;/h3&gt; &#xA;&lt;p&gt;Attribute is useful for sub-group of domains, especially for filtering purpose. For example, the list of &lt;code&gt;google&lt;/code&gt; domains may contains its main domains, as well as domains that serve ads. The ads domains may be marked by attribute &lt;code&gt;@ads&lt;/code&gt;, and can be used as &lt;code&gt;geosite:google@ads&lt;/code&gt; in V2Ray routing.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution guideline&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please begin with small size PRs, say modification in a single file.&lt;/li&gt; &#xA; &lt;li&gt;A PR must be reviewed and approved by another member.&lt;/li&gt; &#xA; &lt;li&gt;After a few successful PRs, you may apply for manager access of this repository.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>devploit/dontgo403</title>
    <updated>2022-09-17T01:33:32Z</updated>
    <id>tag:github.com,2022-09-17:/devploit/dontgo403</id>
    <link href="https://github.com/devploit/dontgo403" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tool to bypass 40X response codes.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.imgur.com/T5P5ZG0.png&#34; width=&#34;600&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dwyl/esta/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34; alt=&#34;contributions welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;dontgo403 is a tool to bypass 40X errors.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Grab the latest release for your OS from &lt;a href=&#34;https://github.com/devploit/dontgo403/releases&#34;&gt;RELEASES&lt;/a&gt; (Outdated atm)&lt;/p&gt; &#xA;&lt;p&gt;Or compile by your own (RECOMMENDED):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/devploit/dontgo403; cd dontgo403; go get; go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Customization&lt;/h3&gt; &#xA;&lt;p&gt;If you want to edit or add new bypasses, you can add it directly to the specific file in &lt;a href=&#34;https://github.com/devploit/dontgo403/tree/main/payloads&#34;&gt;payloads&lt;/a&gt; folder and the tool will use it.&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./dontgo403 -h&#xA;&#xA;Command line application that automates different ways to bypass 40X codes.&#xA;&#xA;Usage:&#xA;  dontgo403 [flags]&#xA;&#xA;Flags:&#xA;  -b, --bypassIp string     Try bypass tests with a specific IP address (or hostname). i.e.: &#39;X-Forwarded-For: 192.168.0.1&#39; instead of &#39;X-Forwarded-For: 127.0.0.1&#39;&#xA;  -m, --max_goroutines int  Set the max number of goroutines working at same time. Default: 50&#xA;  -d, --delay int           Set a delay (in ms) between each request. Default: 0ms&#xA;  -H, --header strings      Add a custom header to the requests (can be specified multiple times)&#xA;  -h, --help                help for dontgo403&#xA;  -p, --proxy string        Proxy URL. For example: http://127.0.0.1:8080&#xA;  -u, --uri string          Target URL&#xA;  -a, --useragent string    Set the User-Agent string (default &#39;dontgo403&#39;)&#xA;  -f, --folder string       Set payloads folder path in case the binary is not in the same path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example of usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/xtD6Zcx2fZj5JgRdXEUi4rdqJ&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/xtD6Zcx2fZj5JgRdXEUi4rdqJ.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/devploit/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/-Twitter-blue?style=flat-square&amp;amp;logo=Twitter&amp;amp;logoColor=white&amp;amp;link=https://twitter.com/devploit/&#34; alt=&#34;Twitter: devploit&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>