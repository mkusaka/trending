<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-15T01:42:07Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uptrace/bun</title>
    <updated>2022-06-15T01:42:07Z</updated>
    <id>tag:github.com,2022-06-15:/uptrace/bun</id>
    <link href="https://github.com/uptrace/bun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQL-first Golang ORM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SQL-first Golang ORM for PostgreSQL, MySQL, MSSQL, and SQLite&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/uptrace/bun/actions&#34;&gt;&lt;img src=&#34;https://github.com/uptrace/bun/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/uptrace/bun&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/uptrace/bun&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bun.uptrace.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/bun-documentation-informational&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rWtp5Aj&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/752070105847955518/widget.png&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Bun is brought to you by &lt;span&gt;‚≠ê&lt;/span&gt; &lt;a href=&#34;https://github.com/uptrace/uptrace&#34;&gt;&lt;strong&gt;uptrace/uptrace&lt;/strong&gt;&lt;/a&gt;. Uptrace is an open source and blazingly fast &lt;a href=&#34;https://get.uptrace.dev/compare/distributed-tracing-tools.html&#34;&gt;distributed tracing tool&lt;/a&gt; powered by OpenTelemetry and ClickHouse. Give it a star as well!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works with &lt;a href=&#34;https://bun.uptrace.dev/guide/drivers.html#postgresql&#34;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&#34;https://bun.uptrace.dev/guide/drivers.html#mysql&#34;&gt;MySQL&lt;/a&gt; (including MariaDB), &lt;a href=&#34;https://bun.uptrace.dev/guide/drivers.html#mssql&#34;&gt;MSSQL&lt;/a&gt;, &lt;a href=&#34;https://bun.uptrace.dev/guide/drivers.html#sqlite&#34;&gt;SQLite&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uptrace/bun/master/example/basic/&#34;&gt;ORM-like&lt;/a&gt; experience using good old SQL. Bun supports structs, map, scalars, and slices of map/structs/scalars.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/guide/query-insert.html&#34;&gt;Bulk inserts&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/guide/query-update.html&#34;&gt;Bulk updates&lt;/a&gt; using common table expressions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/guide/query-delete.html&#34;&gt;Bulk deletes&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/guide/fixtures.html&#34;&gt;Fixtures&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/guide/migrations.html&#34;&gt;Migrations&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/guide/soft-deletes.html&#34;&gt;Soft deletes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bun.uptrace.dev/guide/golang-orm.html&#34;&gt;&lt;strong&gt;Get started&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uptrace/bun/tree/master/example&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uptrace/bun/discussions&#34;&gt;Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/rWtp5Aj&#34;&gt;Chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/uptrace/bun&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-bun/bun-starter-kit&#34;&gt;Starter kit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Projects using Bun:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/superseriousbusiness/gotosocial&#34;&gt;gotosocial&lt;/a&gt; - Golang fediverse server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alexedwards/scs&#34;&gt;alexedwards/scs&lt;/a&gt; - HTTP Session Management for Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oasisprotocol/emerald-web3-gateway&#34;&gt;emerald-web3-gateway&lt;/a&gt; - Web3 Gateway for the Oasis Emerald paratime.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getAlby/lndhub.go&#34;&gt;lndhub.go&lt;/a&gt; - accounting wrapper for the Lightning Network.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-bun/bun-realworld-app&#34;&gt;RealWorld app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And hundreds more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/davars/dbeval&#34;&gt;https://github.com/davars/dbeval&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;results&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;BenchmarkInsert&#xA;BenchmarkInsert/*dbeval.Memory/Authors&#xA;BenchmarkInsert/*dbeval.Memory/Authors-4         &#x9;   84450&#x9;     12104 ns/op&#x9;    2623 B/op&#x9;      70 allocs/op&#xA;BenchmarkInsert/*dbeval.Xorm/Authors&#xA;BenchmarkInsert/*dbeval.Xorm/Authors-4           &#x9;    7291&#x9;    153505 ns/op&#x9;    9024 B/op&#x9;     311 allocs/op&#xA;BenchmarkInsert/*dbeval.UpperDB/Authors&#xA;BenchmarkInsert/*dbeval.UpperDB/Authors-4        &#x9;    4608&#x9;    223672 ns/op&#x9;   24160 B/op&#x9;    1100 allocs/op&#xA;BenchmarkInsert/*dbeval.Bun/Authors&#xA;BenchmarkInsert/*dbeval.Bun/Authors-4            &#x9;    6034&#x9;    186439 ns/op&#x9;    6818 B/op&#x9;      80 allocs/op&#xA;BenchmarkInsert/*dbeval.PQ/Authors&#xA;BenchmarkInsert/*dbeval.PQ/Authors-4             &#x9;    1141&#x9;    907494 ns/op&#x9;    6487 B/op&#x9;     193 allocs/op&#xA;BenchmarkInsert/*dbeval.SQLX/Authors&#xA;BenchmarkInsert/*dbeval.SQLX/Authors-4           &#x9;    1165&#x9;    916987 ns/op&#x9;   10089 B/op&#x9;     271 allocs/op&#xA;BenchmarkInsert/*dbeval.Ozzo/Authors&#xA;BenchmarkInsert/*dbeval.Ozzo/Authors-4           &#x9;    1105&#x9;   1058082 ns/op&#x9;   27826 B/op&#x9;     588 allocs/op&#xA;BenchmarkInsert/*dbeval.PGXStdlib/Authors&#xA;BenchmarkInsert/*dbeval.PGXStdlib/Authors-4      &#x9;    1228&#x9;    900207 ns/op&#x9;    6032 B/op&#x9;     180 allocs/op&#xA;BenchmarkInsert/*dbeval.Gorm/Authors&#xA;BenchmarkInsert/*dbeval.Gorm/Authors-4           &#x9;     946&#x9;   1184285 ns/op&#x9;   35634 B/op&#x9;     918 allocs/op&#xA;BenchmarkInsert/*dbeval.PGX/Authors&#xA;BenchmarkInsert/*dbeval.PGX/Authors-4            &#x9;    1116&#x9;    923728 ns/op&#x9;    3839 B/op&#x9;     130 allocs/op&#xA;BenchmarkInsert/*dbeval.DBR/Authors&#xA;BenchmarkInsert/*dbeval.DBR/Authors-4            &#x9;    5800&#x9;    183982 ns/op&#x9;    8646 B/op&#x9;     230 allocs/op&#xA;BenchmarkInsert/*dbeval.GoPG/Authors&#xA;BenchmarkInsert/*dbeval.GoPG/Authors-4           &#x9;    6110&#x9;    173923 ns/op&#x9;    2906 B/op&#x9;      87 allocs/op&#xA;&#xA;BenchmarkInsert/*dbeval.DBR/Articles&#xA;BenchmarkInsert/*dbeval.DBR/Articles-4           &#x9;    1706&#x9;    684466 ns/op&#x9;  133346 B/op&#x9;    1614 allocs/op&#xA;BenchmarkInsert/*dbeval.PQ/Articles&#xA;BenchmarkInsert/*dbeval.PQ/Articles-4            &#x9;     884&#x9;   1249791 ns/op&#x9;  100403 B/op&#x9;    1491 allocs/op&#xA;BenchmarkInsert/*dbeval.PGX/Articles&#xA;BenchmarkInsert/*dbeval.PGX/Articles-4           &#x9;     916&#x9;   1288143 ns/op&#x9;   83539 B/op&#x9;    1392 allocs/op&#xA;BenchmarkInsert/*dbeval.GoPG/Articles&#xA;BenchmarkInsert/*dbeval.GoPG/Articles-4          &#x9;    1726&#x9;    622639 ns/op&#x9;   78638 B/op&#x9;    1359 allocs/op&#xA;BenchmarkInsert/*dbeval.SQLX/Articles&#xA;BenchmarkInsert/*dbeval.SQLX/Articles-4          &#x9;     860&#x9;   1262599 ns/op&#x9;   92030 B/op&#x9;    1574 allocs/op&#xA;BenchmarkInsert/*dbeval.Gorm/Articles&#xA;BenchmarkInsert/*dbeval.Gorm/Articles-4          &#x9;     782&#x9;   1421550 ns/op&#x9;  136534 B/op&#x9;    2411 allocs/op&#xA;BenchmarkInsert/*dbeval.PGXStdlib/Articles&#xA;BenchmarkInsert/*dbeval.PGXStdlib/Articles-4     &#x9;     938&#x9;   1230576 ns/op&#x9;   86743 B/op&#x9;    1441 allocs/op&#xA;BenchmarkInsert/*dbeval.Bun/Articles&#xA;BenchmarkInsert/*dbeval.Bun/Articles-4           &#x9;    1843&#x9;    626681 ns/op&#x9;  101610 B/op&#x9;    1323 allocs/op&#xA;BenchmarkInsert/*dbeval.Xorm/Articles&#xA;BenchmarkInsert/*dbeval.Xorm/Articles-4          &#x9;    1677&#x9;    650244 ns/op&#x9;  126677 B/op&#x9;    1752 allocs/op&#xA;BenchmarkInsert/*dbeval.Memory/Articles&#xA;BenchmarkInsert/*dbeval.Memory/Articles-4        &#x9;    1988&#x9;   1223308 ns/op&#x9;   77576 B/op&#x9;    1310 allocs/op&#xA;BenchmarkInsert/*dbeval.UpperDB/Articles&#xA;BenchmarkInsert/*dbeval.UpperDB/Articles-4       &#x9;    1696&#x9;    687130 ns/op&#x9;  139680 B/op&#x9;    2862 allocs/op&#xA;BenchmarkInsert/*dbeval.Ozzo/Articles&#xA;BenchmarkInsert/*dbeval.Ozzo/Articles-4          &#x9;     697&#x9;   1496859 ns/op&#x9;  114780 B/op&#x9;    1950 allocs/op&#xA;&#xA;BenchmarkFindAuthorByID&#xA;BenchmarkFindAuthorByID/*dbeval.UpperDB&#xA;BenchmarkFindAuthorByID/*dbeval.UpperDB-4        &#x9;   10184&#x9;    117527 ns/op&#x9;    9953 B/op&#x9;     441 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.Bun&#xA;BenchmarkFindAuthorByID/*dbeval.Bun-4            &#x9;   20716&#x9;     54261 ns/op&#x9;    5096 B/op&#x9;      15 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.Ozzo&#xA;BenchmarkFindAuthorByID/*dbeval.Ozzo-4           &#x9;   11166&#x9;     91043 ns/op&#x9;    3088 B/op&#x9;      64 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.PQ&#xA;BenchmarkFindAuthorByID/*dbeval.PQ-4             &#x9;   13875&#x9;     86171 ns/op&#x9;     844 B/op&#x9;      24 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.PGX&#xA;BenchmarkFindAuthorByID/*dbeval.PGX-4            &#x9;   13846&#x9;     79983 ns/op&#x9;     719 B/op&#x9;      15 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.Memory&#xA;BenchmarkFindAuthorByID/*dbeval.Memory-4         &#x9;14113720&#x9;        82.33 ns/op&#x9;       0 B/op&#x9;       0 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.Xorm&#xA;BenchmarkFindAuthorByID/*dbeval.Xorm-4           &#x9;   12027&#x9;     98519 ns/op&#x9;    3633 B/op&#x9;     106 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.Gorm&#xA;BenchmarkFindAuthorByID/*dbeval.Gorm-4           &#x9;   11521&#x9;    102241 ns/op&#x9;    6592 B/op&#x9;     143 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.PGXStdlib&#xA;BenchmarkFindAuthorByID/*dbeval.PGXStdlib-4      &#x9;   13933&#x9;     82626 ns/op&#x9;    1174 B/op&#x9;      28 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.DBR&#xA;BenchmarkFindAuthorByID/*dbeval.DBR-4            &#x9;   21920&#x9;     51175 ns/op&#x9;    1756 B/op&#x9;      39 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.SQLX&#xA;BenchmarkFindAuthorByID/*dbeval.SQLX-4           &#x9;   13603&#x9;     80788 ns/op&#x9;    1327 B/op&#x9;      32 allocs/op&#xA;BenchmarkFindAuthorByID/*dbeval.GoPG&#xA;BenchmarkFindAuthorByID/*dbeval.GoPG-4           &#x9;   23174&#x9;     50042 ns/op&#x9;     869 B/op&#x9;      17 allocs/op&#xA;&#xA;BenchmarkFindAuthorByName&#xA;BenchmarkFindAuthorByName/*dbeval.SQLX&#xA;BenchmarkFindAuthorByName/*dbeval.SQLX-4         &#x9;    1070&#x9;   1065272 ns/op&#x9;  126348 B/op&#x9;    4018 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.Bun&#xA;BenchmarkFindAuthorByName/*dbeval.Bun-4          &#x9;     877&#x9;   1231377 ns/op&#x9;  115803 B/op&#x9;    5005 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.Xorm&#xA;BenchmarkFindAuthorByName/*dbeval.Xorm-4         &#x9;     471&#x9;   2345445 ns/op&#x9;  455711 B/op&#x9;   19080 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.DBR&#xA;BenchmarkFindAuthorByName/*dbeval.DBR-4          &#x9;     954&#x9;   1089977 ns/op&#x9;  120070 B/op&#x9;    6023 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.PQ&#xA;BenchmarkFindAuthorByName/*dbeval.PQ-4           &#x9;    1333&#x9;    784400 ns/op&#x9;   87159 B/op&#x9;    4006 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.GoPG&#xA;BenchmarkFindAuthorByName/*dbeval.GoPG-4         &#x9;    1580&#x9;    770966 ns/op&#x9;   87525 B/op&#x9;    3028 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.UpperDB&#xA;BenchmarkFindAuthorByName/*dbeval.UpperDB-4      &#x9;     789&#x9;   1314164 ns/op&#x9;  190689 B/op&#x9;    6428 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.Ozzo&#xA;BenchmarkFindAuthorByName/*dbeval.Ozzo-4         &#x9;     948&#x9;   1255282 ns/op&#x9;  238764 B/op&#x9;    6053 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.PGXStdlib&#xA;BenchmarkFindAuthorByName/*dbeval.PGXStdlib-4    &#x9;    1279&#x9;    920391 ns/op&#x9;  126163 B/op&#x9;    4014 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.PGX&#xA;BenchmarkFindAuthorByName/*dbeval.PGX-4          &#x9;    1364&#x9;    780970 ns/op&#x9;  101967 B/op&#x9;    2028 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.Gorm&#xA;BenchmarkFindAuthorByName/*dbeval.Gorm-4         &#x9;     340&#x9;   3445818 ns/op&#x9; 1573637 B/op&#x9;   27102 allocs/op&#xA;BenchmarkFindAuthorByName/*dbeval.Memory&#xA;BenchmarkFindAuthorByName/*dbeval.Memory-4       &#x9;38081223&#x9;        31.24 ns/op&#x9;       0 B/op&#x9;       0 allocs/op&#xA;&#xA;BenchmarkRecentArticles&#xA;BenchmarkRecentArticles/*dbeval.PGXStdlib&#xA;BenchmarkRecentArticles/*dbeval.PGXStdlib-4      &#x9;     358&#x9;   3344119 ns/op&#x9; 3425578 B/op&#x9;   14177 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.GoPG&#xA;BenchmarkRecentArticles/*dbeval.GoPG-4           &#x9;     364&#x9;   3156372 ns/op&#x9; 1794091 B/op&#x9;   10032 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.Xorm&#xA;BenchmarkRecentArticles/*dbeval.Xorm-4           &#x9;     157&#x9;   7567835 ns/op&#x9; 5018011 B/op&#x9;   81425 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.Gorm&#xA;BenchmarkRecentArticles/*dbeval.Gorm-4           &#x9;     139&#x9;   7980084 ns/op&#x9; 6776277 B/op&#x9;   85418 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.SQLX&#xA;BenchmarkRecentArticles/*dbeval.SQLX-4           &#x9;     338&#x9;   3289802 ns/op&#x9; 3425890 B/op&#x9;   14181 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.Ozzo&#xA;BenchmarkRecentArticles/*dbeval.Ozzo-4           &#x9;     320&#x9;   3508322 ns/op&#x9; 4025966 B/op&#x9;   18207 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.DBR&#xA;BenchmarkRecentArticles/*dbeval.DBR-4            &#x9;     237&#x9;   5248644 ns/op&#x9; 3331003 B/op&#x9;   21370 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.Bun&#xA;BenchmarkRecentArticles/*dbeval.Bun-4            &#x9;     280&#x9;   4528582 ns/op&#x9; 1864362 B/op&#x9;   15965 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.UpperDB&#xA;BenchmarkRecentArticles/*dbeval.UpperDB-4        &#x9;     297&#x9;   3704663 ns/op&#x9; 3607287 B/op&#x9;   18542 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.PQ&#xA;BenchmarkRecentArticles/*dbeval.PQ-4             &#x9;     308&#x9;   3489229 ns/op&#x9; 3277050 B/op&#x9;   17359 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.Memory&#xA;BenchmarkRecentArticles/*dbeval.Memory-4         &#x9;29590380&#x9;        42.27 ns/op&#x9;       0 B/op&#x9;       0 allocs/op&#xA;BenchmarkRecentArticles/*dbeval.PGX&#xA;BenchmarkRecentArticles/*dbeval.PGX-4            &#x9;     356&#x9;   3345500 ns/op&#x9; 3297316 B/op&#x9;    6226 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/frederikhors/orm-benchmark&#34;&gt;https://github.com/frederikhors/orm-benchmark&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;results&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;  4000 times - Insert&#xA;  raw_stmt:     0.38s        94280 ns/op     718 B/op     14 allocs/op&#xA;       raw:     0.39s        96719 ns/op     718 B/op     13 allocs/op&#xA; beego_orm:     0.48s       118994 ns/op    2411 B/op     56 allocs/op&#xA;       bun:     0.57s       142285 ns/op     918 B/op     12 allocs/op&#xA;        pg:     0.58s       145496 ns/op    1235 B/op     12 allocs/op&#xA;      gorm:     0.70s       175294 ns/op    6665 B/op     88 allocs/op&#xA;      xorm:     0.76s       189533 ns/op    3032 B/op     94 allocs/op&#xA;&#xA;  4000 times - MultiInsert 100 row&#xA;       raw:     4.59s      1147385 ns/op  135155 B/op    916 allocs/op&#xA;  raw_stmt:     4.59s      1148137 ns/op  131076 B/op    916 allocs/op&#xA; beego_orm:     5.50s      1375637 ns/op  179962 B/op   2747 allocs/op&#xA;       bun:     6.18s      1544648 ns/op    4265 B/op    214 allocs/op&#xA;        pg:     7.01s      1753495 ns/op    5039 B/op    114 allocs/op&#xA;      gorm:     9.52s      2379219 ns/op  293956 B/op   3729 allocs/op&#xA;      xorm:    11.66s      2915478 ns/op  286140 B/op   7422 allocs/op&#xA;&#xA;  4000 times - Update&#xA;  raw_stmt:     0.26s        65781 ns/op     773 B/op     14 allocs/op&#xA;       raw:     0.31s        77209 ns/op     757 B/op     13 allocs/op&#xA; beego_orm:     0.43s       107064 ns/op    1802 B/op     47 allocs/op&#xA;       bun:     0.56s       139839 ns/op     589 B/op      4 allocs/op&#xA;        pg:     0.60s       149608 ns/op     896 B/op     11 allocs/op&#xA;      gorm:     0.74s       185970 ns/op    6604 B/op     81 allocs/op&#xA;      xorm:     0.81s       203240 ns/op    2994 B/op    119 allocs/op&#xA;&#xA;  4000 times - Read&#xA;       raw:     0.33s        81671 ns/op    2081 B/op     49 allocs/op&#xA;  raw_stmt:     0.34s        85847 ns/op    2112 B/op     50 allocs/op&#xA; beego_orm:     0.38s        94777 ns/op    2106 B/op     75 allocs/op&#xA;        pg:     0.42s       106148 ns/op    1526 B/op     22 allocs/op&#xA;       bun:     0.43s       106904 ns/op    1319 B/op     18 allocs/op&#xA;      gorm:     0.65s       162221 ns/op    5240 B/op    108 allocs/op&#xA;      xorm:     1.13s       281738 ns/op    8326 B/op    237 allocs/op&#xA;&#xA;  4000 times - MultiRead limit 100&#xA;       raw:     1.52s       380351 ns/op   38356 B/op   1037 allocs/op&#xA;  raw_stmt:     1.54s       385541 ns/op   38388 B/op   1038 allocs/op&#xA;        pg:     1.86s       465468 ns/op   24045 B/op    631 allocs/op&#xA;       bun:     2.58s       645354 ns/op   30009 B/op   1122 allocs/op&#xA; beego_orm:     2.93s       732028 ns/op   55280 B/op   3077 allocs/op&#xA;      gorm:     4.97s      1241831 ns/op   71628 B/op   3877 allocs/op&#xA;      xorm:     doesn&#39;t work&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Why another database client?&lt;/h2&gt; &#xA;&lt;p&gt;So you can elegantly write complex queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;regionalSales := db.NewSelect().&#xA;&#x9;ColumnExpr(&#34;region&#34;).&#xA;&#x9;ColumnExpr(&#34;SUM(amount) AS total_sales&#34;).&#xA;&#x9;TableExpr(&#34;orders&#34;).&#xA;&#x9;GroupExpr(&#34;region&#34;)&#xA;&#xA;topRegions := db.NewSelect().&#xA;&#x9;ColumnExpr(&#34;region&#34;).&#xA;&#x9;TableExpr(&#34;regional_sales&#34;).&#xA;&#x9;Where(&#34;total_sales &amp;gt; (SELECT SUM(total_sales) / 10 FROM regional_sales)&#34;)&#xA;&#xA;var items []map[string]interface{}&#xA;err := db.NewSelect().&#xA;&#x9;With(&#34;regional_sales&#34;, regionalSales).&#xA;&#x9;With(&#34;top_regions&#34;, topRegions).&#xA;&#x9;ColumnExpr(&#34;region&#34;).&#xA;&#x9;ColumnExpr(&#34;product&#34;).&#xA;&#x9;ColumnExpr(&#34;SUM(quantity) AS product_units&#34;).&#xA;&#x9;ColumnExpr(&#34;SUM(amount) AS product_sales&#34;).&#xA;&#x9;TableExpr(&#34;orders&#34;).&#xA;&#x9;Where(&#34;region IN (SELECT region FROM top_regions)&#34;).&#xA;&#x9;GroupExpr(&#34;region&#34;).&#xA;&#x9;GroupExpr(&#34;product&#34;).&#xA;&#x9;Scan(ctx, &amp;amp;items)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;WITH regional_sales AS (&#xA;    SELECT region, SUM(amount) AS total_sales&#xA;    FROM orders&#xA;    GROUP BY region&#xA;), top_regions AS (&#xA;    SELECT region&#xA;    FROM regional_sales&#xA;    WHERE total_sales &amp;gt; (SELECT SUM(total_sales)/10 FROM regional_sales)&#xA;)&#xA;SELECT region,&#xA;       product,&#xA;       SUM(quantity) AS product_units,&#xA;       SUM(amount) AS product_sales&#xA;FROM orders&#xA;WHERE region IN (SELECT region FROM top_regions)&#xA;GROUP BY region, product&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And scan results into scalars, structs, maps, slices of structs/maps/scalars:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;users := make([]User, 0)&#xA;if err := db.NewSelect().Model(&amp;amp;users).OrderExpr(&#34;id ASC&#34;).Scan(ctx); err != nil {&#xA;&#x9;panic(err)&#xA;}&#xA;&#xA;user1 := new(User)&#xA;if err := db.NewSelect().Model(user1).Where(&#34;id = ?&#34;, 1).Scan(ctx); err != nil {&#xA;&#x9;panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://bun.uptrace.dev/guide/golang-orm.html&#34;&gt;&lt;strong&gt;Getting started&lt;/strong&gt;&lt;/a&gt; guide and check &lt;a href=&#34;https://raw.githubusercontent.com/uptrace/bun/master/example&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uptrace/bunrouter&#34;&gt;Golang HTTP router&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uptrace/go-clickhouse&#34;&gt;Golang ClickHouse ORM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vmihailenco/msgpack&#34;&gt;Golang msgpack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/uptrace/bun/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=uptrace/bun&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>IceWhaleTech/CasaOS</title>
    <updated>2022-06-15T01:42:07Z</updated>
    <id>tag:github.com,2022-06-15:/IceWhaleTech/CasaOS</id>
    <link href="https://github.com/IceWhaleTech/CasaOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CasaOS - A simple, easy-to-use, elegant open-source Home Cloud system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CasaOS - A simple, easy-to-use, elegant open-source Home Cloud system.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IceWhaleTech/logo/main/casaos/casaos_banner_aldeyjarfoss.png&#34; alt=&#34;CasaOS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/IceWhaleTech/CasaOS&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/IceWhaleTech/CasaOS?color=162453&amp;amp;label=CasaOS&amp;amp;style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IceWhaleTech/CasaOS/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/IceWhaleTech/CasaOS?color=162453&amp;amp;style=flat-square&#34; alt=&#34;Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IceWhaleTech/CasaOS/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/IceWhaleTech/CasaOS?color=162453&amp;amp;style=flat-square&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/IceWhaleTech/CasaOS/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/IceWhaleTech/CasaOS?color=162453&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;GitHub Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/knqAbbBbeX&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/884667213326463016?color=162453&amp;amp;label=Chat&amp;amp;logo=discord&amp;amp;logoColor=fff&amp;amp;style=flat-square&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CasaOS is an open-source Home Cloud system based on the Docker ecosystem and designed for home scenarios. It is committed to building the world&#39;s most simple, easy-to-use, and elegant Home Cloud system.&lt;/p&gt; &#xA;&lt;p&gt;IceWhale team believes that through community-driven collaborative innovation and open communication with global developers, we can reshape the digital home experience like never before.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/snapshot.png&#34; alt=&#34;CasaOS Snapshot&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/IceWhaleTech/CasaOS/main/snapshot-mobile.png&#34; alt=&#34;CasaOS Snapshot Mobile&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è Note:&lt;/p&gt; &#xA; &lt;p&gt;CasaOS is still in the early development stage and may vary significantly with the final release. Feel free to test run and share your feedback in the &lt;a href=&#34;https://discord.gg/knqAbbBbeX&#34;&gt;Discord server&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Quick Setup CasaOS&lt;/h3&gt; &#xA;&lt;p&gt;Fresh install a system from the list below and run the this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -qO- https://get.icewhale.io/casaos.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://get.icewhale.io/casaos.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Uninstall CasaOS&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://get.icewhale.io/casaos-uninstall.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System Compatibility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu Server 20.04 amd64 (‚úÖ Recommend, Tested)&lt;/li&gt; &#xA; &lt;li&gt;Armbian 22.02 armhf/arm64/amd64 (‚úÖ Recommend, Tested)&lt;/li&gt; &#xA; &lt;li&gt;Elementary OS 6.1 J√≥lnir amd64 (‚úÖ Recommend, Tested)&lt;/li&gt; &#xA; &lt;li&gt;Deepin 20.4 amd64 (‚ö†Ô∏è Not Fully Tested Yet)&lt;/li&gt; &#xA; &lt;li&gt;Raspberry Pi Lite OS aarch64/arm64 (‚ö†Ô∏è Not Fully Tested Yet)&lt;/li&gt; &#xA; &lt;li&gt;Debian 11 amd64 (‚ö†Ô∏è Not Fully Tested Yet)&lt;/li&gt; &#xA; &lt;li&gt;OpenWrt 21.02 amd64 (‚ö†Ô∏è Not Fully Tested Yet)&lt;/li&gt; &#xA; &lt;li&gt;OpenWrt 21.02 aarch64/arm64 (‚ö†Ô∏è Not Fully Tested Yet)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UI designed for home scenarios - simple, elegant, and easy-to-use&lt;/li&gt; &#xA; &lt;li&gt;Quick Docker app installation with only three steps, plus automatic management&lt;/li&gt; &#xA; &lt;li&gt;App Store for Home Cloud üöß&lt;/li&gt; &#xA; &lt;li&gt;Home data/digital asset management üöß&lt;/li&gt; &#xA; &lt;li&gt;Smart home manager üöß&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;üöß is under development.&lt;/p&gt; &#xA;&lt;p&gt;We are actively moving forward with development, and you are more than welcome to share any idea with us!&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The word Casa comes from the Spanish word for &#34;home&#34;. Project CasaOS originated as a pre-installed system for crowdfunded product &lt;a href=&#34;https://www.zimaboard.com&#34;&gt;ZimaBoard&lt;/a&gt; on Kickstarter.&lt;/p&gt; &#xA;&lt;p&gt;After looking at many systems and software on the market, the team found no server system designed for home scenarios, sadly true.&lt;/p&gt; &#xA;&lt;p&gt;So, we set out to build this open source project to develop CasaOS with our own hands, everyone in the community, and you.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A warm welcome for you to share and discuss your great ideas in the &lt;a href=&#34;https://discord.gg/knqAbbBbeX&#34;&gt;Discord server&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/knqAbbBbeX&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/884667213326463016/widget.png?style=banner2&#34; alt=&#34;Discord Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Jerry Liu&lt;/li&gt; &#xA; &lt;li&gt;Link Liang&lt;/li&gt; &#xA; &lt;li&gt;Ober Zhang&lt;/li&gt; &#xA; &lt;li&gt;Zyaire Ann&lt;/li&gt; &#xA; &lt;li&gt;John Guan&lt;/li&gt; &#xA; &lt;li&gt;Right here, waiting for YOU!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jmoiron/sqlx</title>
    <updated>2022-06-15T01:42:07Z</updated>
    <id>tag:github.com,2022-06-15:/jmoiron/sqlx</id>
    <link href="https://github.com/jmoiron/sqlx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;general purpose extensions to golang&#39;s database/sql&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sqlx&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/jmoiron/sqlx&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jmoiron/sqlx.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/jmoiron/sqlx?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/jmoiron/sqlx/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/jmoiron/sqlx&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/godoc-reference-blue.svg?style=flat&#34; alt=&#34;Godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/jmoiron/sqlx/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-red.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;sqlx is a library which provides a set of extensions on go&#39;s standard &lt;code&gt;database/sql&lt;/code&gt; library. The sqlx versions of &lt;code&gt;sql.DB&lt;/code&gt;, &lt;code&gt;sql.TX&lt;/code&gt;, &lt;code&gt;sql.Stmt&lt;/code&gt;, et al. all leave the underlying interfaces untouched, so that their interfaces are a superset on the standard ones. This makes it relatively painless to integrate existing codebases using database/sql with sqlx.&lt;/p&gt; &#xA;&lt;p&gt;Major additional concepts are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Marshal rows into structs (with embedded struct support), maps, and slices&lt;/li&gt; &#xA; &lt;li&gt;Named parameter support including prepared statements&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Get&lt;/code&gt; and &lt;code&gt;Select&lt;/code&gt; to go quickly from query to struct/slice&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to the &lt;a href=&#34;http://godoc.org/github.com/jmoiron/sqlx&#34;&gt;godoc API documentation&lt;/a&gt;, there is also some &lt;a href=&#34;http://jmoiron.github.io/sqlx/&#34;&gt;user documentation&lt;/a&gt; that explains how to use &lt;code&gt;database/sql&lt;/code&gt; along with sqlx.&lt;/p&gt; &#xA;&lt;h2&gt;Recent Changes&lt;/h2&gt; &#xA;&lt;p&gt;1.3.0:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlx.DB.Connx(context.Context) *sqlx.Conn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sqlx.BindDriver(driverName, bindType)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;support for &lt;code&gt;[]map[string]interface{}&lt;/code&gt; to do &#34;batch&#34; insertions&lt;/li&gt; &#xA; &lt;li&gt;allocation &amp;amp; perf improvements for &lt;code&gt;sqlx.In&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;DB.Connx returns an &lt;code&gt;sqlx.Conn&lt;/code&gt;, which is an &lt;code&gt;sql.Conn&lt;/code&gt;-alike consistent with sqlx&#39;s wrapping of other types.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;BindDriver&lt;/code&gt; allows users to control the bindvars that sqlx will use for drivers, and add new drivers at runtime. This results in a very slight performance hit when resolving the driver into a bind type (~40ns per call), but it allows users to specify what bindtype their driver uses even when sqlx has not been updated to know about it by default.&lt;/p&gt; &#xA;&lt;h3&gt;Backwards Compatibility&lt;/h3&gt; &#xA;&lt;p&gt;Compatibility with the most recent two versions of Go is a requirement for any new changes. Compatibility beyond that is not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;Versioning is done with Go modules. Breaking changes (eg. removing deprecated API) will get major version number bumps.&lt;/p&gt; &#xA;&lt;h2&gt;install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/jmoiron/sqlx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;issues&lt;/h2&gt; &#xA;&lt;p&gt;Row headers can be ambiguous (&lt;code&gt;SELECT 1 AS a, 2 AS a&lt;/code&gt;), and the result of &lt;code&gt;Columns()&lt;/code&gt; does not fully qualify column names in queries like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT a.id, a.name, b.id, b.name FROM foos AS a JOIN foos AS b ON a.parent = b.id;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;making a struct or map destination ambiguous. Use &lt;code&gt;AS&lt;/code&gt; in your queries to give columns distinct names, &lt;code&gt;rows.Scan&lt;/code&gt; to scan them manually, or &lt;code&gt;SliceScan&lt;/code&gt; to get a slice of results.&lt;/p&gt; &#xA;&lt;h2&gt;usage&lt;/h2&gt; &#xA;&lt;p&gt;Below is an example which shows some common use cases for sqlx. Check &lt;a href=&#34;https://github.com/jmoiron/sqlx/raw/master/sqlx_test.go&#34;&gt;sqlx_test.go&lt;/a&gt; for more usage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;database/sql&#34;&#xA;    &#34;fmt&#34;&#xA;    &#34;log&#34;&#xA;    &#xA;    _ &#34;github.com/lib/pq&#34;&#xA;    &#34;github.com/jmoiron/sqlx&#34;&#xA;)&#xA;&#xA;var schema = `&#xA;CREATE TABLE person (&#xA;    first_name text,&#xA;    last_name text,&#xA;    email text&#xA;);&#xA;&#xA;CREATE TABLE place (&#xA;    country text,&#xA;    city text NULL,&#xA;    telcode integer&#xA;)`&#xA;&#xA;type Person struct {&#xA;    FirstName string `db:&#34;first_name&#34;`&#xA;    LastName  string `db:&#34;last_name&#34;`&#xA;    Email     string&#xA;}&#xA;&#xA;type Place struct {&#xA;    Country string&#xA;    City    sql.NullString&#xA;    TelCode int&#xA;}&#xA;&#xA;func main() {&#xA;    // this Pings the database trying to connect&#xA;    // use sqlx.Open() for sql.Open() semantics&#xA;    db, err := sqlx.Connect(&#34;postgres&#34;, &#34;user=foo dbname=bar sslmode=disable&#34;)&#xA;    if err != nil {&#xA;        log.Fatalln(err)&#xA;    }&#xA;&#xA;    // exec the schema or fail; multi-statement Exec behavior varies between&#xA;    // database drivers;  pq will exec them all, sqlite3 won&#39;t, ymmv&#xA;    db.MustExec(schema)&#xA;    &#xA;    tx := db.MustBegin()&#xA;    tx.MustExec(&#34;INSERT INTO person (first_name, last_name, email) VALUES ($1, $2, $3)&#34;, &#34;Jason&#34;, &#34;Moiron&#34;, &#34;jmoiron@jmoiron.net&#34;)&#xA;    tx.MustExec(&#34;INSERT INTO person (first_name, last_name, email) VALUES ($1, $2, $3)&#34;, &#34;John&#34;, &#34;Doe&#34;, &#34;johndoeDNE@gmail.net&#34;)&#xA;    tx.MustExec(&#34;INSERT INTO place (country, city, telcode) VALUES ($1, $2, $3)&#34;, &#34;United States&#34;, &#34;New York&#34;, &#34;1&#34;)&#xA;    tx.MustExec(&#34;INSERT INTO place (country, telcode) VALUES ($1, $2)&#34;, &#34;Hong Kong&#34;, &#34;852&#34;)&#xA;    tx.MustExec(&#34;INSERT INTO place (country, telcode) VALUES ($1, $2)&#34;, &#34;Singapore&#34;, &#34;65&#34;)&#xA;    // Named queries can use structs, so if you have an existing struct (i.e. person := &amp;amp;Person{}) that you have populated, you can pass it in as &amp;amp;person&#xA;    tx.NamedExec(&#34;INSERT INTO person (first_name, last_name, email) VALUES (:first_name, :last_name, :email)&#34;, &amp;amp;Person{&#34;Jane&#34;, &#34;Citizen&#34;, &#34;jane.citzen@example.com&#34;})&#xA;    tx.Commit()&#xA;&#xA;    // Query the database, storing results in a []Person (wrapped in []interface{})&#xA;    people := []Person{}&#xA;    db.Select(&amp;amp;people, &#34;SELECT * FROM person ORDER BY first_name ASC&#34;)&#xA;    jason, john := people[0], people[1]&#xA;&#xA;    fmt.Printf(&#34;%#v\n%#v&#34;, jason, john)&#xA;    // Person{FirstName:&#34;Jason&#34;, LastName:&#34;Moiron&#34;, Email:&#34;jmoiron@jmoiron.net&#34;}&#xA;    // Person{FirstName:&#34;John&#34;, LastName:&#34;Doe&#34;, Email:&#34;johndoeDNE@gmail.net&#34;}&#xA;&#xA;    // You can also get a single result, a la QueryRow&#xA;    jason = Person{}&#xA;    err = db.Get(&amp;amp;jason, &#34;SELECT * FROM person WHERE first_name=$1&#34;, &#34;Jason&#34;)&#xA;    fmt.Printf(&#34;%#v\n&#34;, jason)&#xA;    // Person{FirstName:&#34;Jason&#34;, LastName:&#34;Moiron&#34;, Email:&#34;jmoiron@jmoiron.net&#34;}&#xA;&#xA;    // if you have null fields and use SELECT *, you must use sql.Null* in your struct&#xA;    places := []Place{}&#xA;    err = db.Select(&amp;amp;places, &#34;SELECT * FROM place ORDER BY telcode ASC&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    usa, singsing, honkers := places[0], places[1], places[2]&#xA;    &#xA;    fmt.Printf(&#34;%#v\n%#v\n%#v\n&#34;, usa, singsing, honkers)&#xA;    // Place{Country:&#34;United States&#34;, City:sql.NullString{String:&#34;New York&#34;, Valid:true}, TelCode:1}&#xA;    // Place{Country:&#34;Singapore&#34;, City:sql.NullString{String:&#34;&#34;, Valid:false}, TelCode:65}&#xA;    // Place{Country:&#34;Hong Kong&#34;, City:sql.NullString{String:&#34;&#34;, Valid:false}, TelCode:852}&#xA;&#xA;    // Loop through rows using only one struct&#xA;    place := Place{}&#xA;    rows, err := db.Queryx(&#34;SELECT * FROM place&#34;)&#xA;    for rows.Next() {&#xA;        err := rows.StructScan(&amp;amp;place)&#xA;        if err != nil {&#xA;            log.Fatalln(err)&#xA;        } &#xA;        fmt.Printf(&#34;%#v\n&#34;, place)&#xA;    }&#xA;    // Place{Country:&#34;United States&#34;, City:sql.NullString{String:&#34;New York&#34;, Valid:true}, TelCode:1}&#xA;    // Place{Country:&#34;Hong Kong&#34;, City:sql.NullString{String:&#34;&#34;, Valid:false}, TelCode:852}&#xA;    // Place{Country:&#34;Singapore&#34;, City:sql.NullString{String:&#34;&#34;, Valid:false}, TelCode:65}&#xA;&#xA;    // Named queries, using `:name` as the bindvar.  Automatic bindvar support&#xA;    // which takes into account the dbtype based on the driverName on sqlx.Open/Connect&#xA;    _, err = db.NamedExec(`INSERT INTO person (first_name,last_name,email) VALUES (:first,:last,:email)`, &#xA;        map[string]interface{}{&#xA;            &#34;first&#34;: &#34;Bin&#34;,&#xA;            &#34;last&#34;: &#34;Smuth&#34;,&#xA;            &#34;email&#34;: &#34;bensmith@allblacks.nz&#34;,&#xA;    })&#xA;&#xA;    // Selects Mr. Smith from the database&#xA;    rows, err = db.NamedQuery(`SELECT * FROM person WHERE first_name=:fn`, map[string]interface{}{&#34;fn&#34;: &#34;Bin&#34;})&#xA;&#xA;    // Named queries can also use structs.  Their bind names follow the same rules&#xA;    // as the name -&amp;gt; db mapping, so struct fields are lowercased and the `db` tag&#xA;    // is taken into consideration.&#xA;    rows, err = db.NamedQuery(`SELECT * FROM person WHERE first_name=:first_name`, jason)&#xA;    &#xA;    &#xA;    // batch insert&#xA;    &#xA;    // batch insert with structs&#xA;    personStructs := []Person{&#xA;        {FirstName: &#34;Ardie&#34;, LastName: &#34;Savea&#34;, Email: &#34;asavea@ab.co.nz&#34;},&#xA;        {FirstName: &#34;Sonny Bill&#34;, LastName: &#34;Williams&#34;, Email: &#34;sbw@ab.co.nz&#34;},&#xA;        {FirstName: &#34;Ngani&#34;, LastName: &#34;Laumape&#34;, Email: &#34;nlaumape@ab.co.nz&#34;},&#xA;    }&#xA;&#xA;    _, err = db.NamedExec(`INSERT INTO person (first_name, last_name, email)&#xA;        VALUES (:first_name, :last_name, :email)`, personStructs)&#xA;&#xA;    // batch insert with maps&#xA;    personMaps := []map[string]interface{}{&#xA;        {&#34;first_name&#34;: &#34;Ardie&#34;, &#34;last_name&#34;: &#34;Savea&#34;, &#34;email&#34;: &#34;asavea@ab.co.nz&#34;},&#xA;        {&#34;first_name&#34;: &#34;Sonny Bill&#34;, &#34;last_name&#34;: &#34;Williams&#34;, &#34;email&#34;: &#34;sbw@ab.co.nz&#34;},&#xA;        {&#34;first_name&#34;: &#34;Ngani&#34;, &#34;last_name&#34;: &#34;Laumape&#34;, &#34;email&#34;: &#34;nlaumape@ab.co.nz&#34;},&#xA;    }&#xA;&#xA;    _, err = db.NamedExec(`INSERT INTO person (first_name, last_name, email)&#xA;        VALUES (:first_name, :last_name, :email)`, personMaps)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>