<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T01:35:03Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>uber-go/nilaway</title>
    <updated>2023-11-19T01:35:03Z</updated>
    <id>tag:github.com,2023-11-19:/uber-go/nilaway</id>
    <link href="https://github.com/uber-go/nilaway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Static Analysis tool to detect potential Nil panics in Go code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NilAway&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/go.uber.org/nilaway&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/go.uber.org/nilaway.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/uber-go/nilaway/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/uber-go/nilaway/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/uber-go/nilaway&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/uber-go/nilaway/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br&gt; NilAway is currently under active development: false positives and breaking changes can happen. We highly appreciate any feedback and contributions!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;NilAway is a static analysis tool that seeks to help developers avoid nil panics in production by catching them at compile time rather than runtime. NilAway is similar to the standard &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/analysis/passes/nilness&#34;&gt;nilness analyzer&lt;/a&gt;, however, it employs much more sophisticated and powerful static analysis techniques to track nil flows within a package as well &lt;em&gt;across&lt;/em&gt; packages, and report errors providing users with the nilness flows for easier debugging.&lt;/p&gt; &#xA;&lt;p&gt;NilAway enjoys three key properties that make it stand out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;It is &lt;strong&gt;fully-automated&lt;/strong&gt;: NilAway is equipped with an inference engine, making it require &lt;em&gt;no&lt;/em&gt; any additional information from the developers (e.g., annotations) besides standard Go code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is &lt;strong&gt;fast&lt;/strong&gt;: we have designed NilAway to be fast and scalable, making it suitable for large codebases. In our measurements, we have observed less than 5% build-time overhead when NilAway is enabled. We are also constantly applying optimizations to further reduce its footprint.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is &lt;strong&gt;practical&lt;/strong&gt;: it does not prevent &lt;em&gt;all&lt;/em&gt; possible nil panics in your code, but it catches most of the potential nil panics we have observed in production, allowing NilAway to maintain a good balance between usefulness and build-time overhead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;NilAway is implemented using the standard &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/analysis&#34;&gt;go/analysis&lt;/a&gt; framework, making it easy to integrate with existing analyzer drivers (e.g., &lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;&gt;golangci-lint&lt;/a&gt;, &lt;a href=&#34;https://github.com/bazelbuild/rules_go/raw/master/go/nogo.rst&#34;&gt;nogo&lt;/a&gt;, or &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/analysis/singlechecker&#34;&gt;running as a standalone checker&lt;/a&gt;). Here, we list the instructions for running NilAway as a standalone checker. More integration supports will be added soon.&lt;/p&gt; &#xA;&lt;h3&gt;Standalone Checker&lt;/h3&gt; &#xA;&lt;p&gt;Install the binary from source by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install go.uber.org/nilaway/cmd/nilaway@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, run the linter by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nilaway ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Examples&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s look at a few examples to see how NilAway can help prevent nil panics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Example 1:&#xA;var p *P&#xA;if someCondition {&#xA;      p = &amp;amp;P{}&#xA;}&#xA;print(p.f) // nilness reports NO error here, but NilAway does.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the local variable &lt;code&gt;p&lt;/code&gt; is only initialized when &lt;code&gt;someCondition&lt;/code&gt; is true. At the field access &lt;code&gt;p.f&lt;/code&gt;, a panic may occur if &lt;code&gt;someCondition&lt;/code&gt; is false. NilAway is able to catch this potential nil flow and reports the following error showing this nilness flow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go.uber.org/example.go:12:9: error: Potential nil panic detected. Observed nil flow from source to dereference point:&#xA;    -&amp;gt; go.uber.org/example.go:12:9: unassigned variable `p` accessed field `f`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If we guard this dereference with a nilness check (&lt;code&gt;if p != nil&lt;/code&gt;), the error goes away.&lt;/p&gt; &#xA;&lt;p&gt;NilAway is also able to catch nil flows across functions. For example, consider the following code snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Example 2:&#xA;func foo() *int {&#xA;      return nil&#xA;}&#xA;func bar() {&#xA;     print(*foo()) // nilness reports NO error here, but NilAway does.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, the function &lt;code&gt;foo&lt;/code&gt; returns a nil pointer, which is directly dereferenced in &lt;code&gt;bar&lt;/code&gt;, resulting in a panic whenever &lt;code&gt;bar&lt;/code&gt; is called. NilAway is able to catch this potential nil flow and reports the following error, describing the nilness flow across function boundaries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go.uber.org/example.go:23:13: error: Potential nil panic detected. Observed nil flow from source to dereference point:&#xA;    -&amp;gt; go.uber.org/example.go:20:14: literal `nil` returned from `foo()` in position 0&#xA;    -&amp;gt; go.uber.org/example.go:23:13: result 0 of `foo()` dereferenced&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that in the above example, &lt;code&gt;foo&lt;/code&gt; does not necessarily have to reside in the same package as &lt;code&gt;bar&lt;/code&gt;. NilAway is able to track nil flows across packages as well. Moreover, NilAway handles Go-specific language constructs such as receivers, interfaces, type assertions, type switches, and more. For more detailed discussion, please check our paper.&lt;/p&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;p&gt;We expose a set of flags via the standard flag passing mechanism in &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/analysis&#34;&gt;go/analysis&lt;/a&gt;. Please check &lt;a href=&#34;https://github.com/uber-go/nilaway/wiki/Configuration&#34;&gt;wiki/Configuration&lt;/a&gt; to see the available flags and how to pass them using different linter drivers.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;We follow the same &lt;a href=&#34;https://go.dev/doc/devel/release#policy&#34;&gt;version support policy&lt;/a&gt; as the &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; project: we support and test the last two major versions of Go.&lt;/p&gt; &#xA;&lt;p&gt;Please feel free to &lt;a href=&#34;https://github.com/uber-go/nilaway/issues&#34;&gt;open a GitHub issue&lt;/a&gt; if you have any questions, bug reports, and feature requests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love for you to contribute to NilAway! Please note that once you create a pull request, you will be asked to sign our &lt;a href=&#34;https://cla-assistant.io/uber-go/nilaway&#34;&gt;Uber Contributor License Agreement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is copyright 2023 Uber Technologies, Inc., and licensed under Apache 2.0.&lt;/p&gt;</summary>
  </entry>
</feed>