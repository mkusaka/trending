<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-24T01:33:57Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>beeper/imessage</title>
    <updated>2023-12-24T01:33:57Z</updated>
    <id>tag:github.com,2023-12-24:/beeper/imessage</id>
    <link href="https://github.com/beeper/imessage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Matrix-iMessage puppeting bridge.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;beeper-imessage&lt;/h1&gt; &#xA;&lt;p&gt;A Matrix-iMessage puppeting bridge.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The bridge works like any other mautrix-go bridge, so the instructions at &lt;a href=&#34;https://docs.mau.fi/bridges/go/setup.html&#34;&gt;https://docs.mau.fi/bridges/go/setup.html&lt;/a&gt; can be applied directly. You can find precompiled binaries from the GitLab CI at &lt;a href=&#34;https://mau.dev/mautrix/imessagego&#34;&gt;https://mau.dev/mautrix/imessagego&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the bridge requires a registration provider running on a &lt;a href=&#34;https://github.com/beeper/mac-registration-provider&#34;&gt;Mac&lt;/a&gt; or &lt;a href=&#34;https://github.com/beeper/phone-registration-provider&#34;&gt;jailbroken iPhone&lt;/a&gt;, as well as a &lt;a href=&#34;https://github.com/beeper/registration-relay&#34;&gt;relay server&lt;/a&gt; to help the bridge and registration provider connect to each other.&lt;/p&gt; &#xA;&lt;p&gt;When connecting the bridge to your Beeper account with bbctl, you don&#39;t need to self-host the relay, you only need to run the provider.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Matrix room: &lt;a href=&#34;https://matrix.to/#/#imessage:maunium.net&#34;&gt;#imessage:maunium.net&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>algorand/go-algorand</title>
    <updated>2023-12-24T01:33:57Z</updated>
    <id>tag:github.com,2023-12-24:/algorand/go-algorand</id>
    <link href="https://github.com/algorand/go-algorand" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Algorand&#39;s official implementation in Go.&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;rel/stable &lt;br&gt; &lt;a href=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fstable&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fstable.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;rel/beta &lt;br&gt; &lt;a href=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fbeta&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fbeta.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;rel/nightly &lt;br&gt; &lt;a href=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fnightly&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/algorand/go-algorand/tree/rel%2Fnightly.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;go-algorand&lt;/h1&gt; &#xA;&lt;p&gt;Algorand&#39;s official implementation in Go.&lt;/p&gt; &#xA;&lt;p&gt;Algorand is a permissionless, pure proof-of-stake blockchain that delivers decentralization, scalability, security, and transaction finality.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://developer.algorand.org/&#34;&gt;developer website&lt;/a&gt; has the most up to date information about using and installing the Algorand platform.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Development is done using the &lt;a href=&#34;https://golang.org/&#34;&gt;Go Programming Language&lt;/a&gt;. The version of go is specified in the project&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/go.mod&#34;&gt;go.mod&lt;/a&gt; file. This document assumes that you have a functioning environment setup. If you need assistance setting up an environment please visit the &lt;a href=&#34;https://golang.org/doc/&#34;&gt;official Go documentation website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux / OSX&lt;/h3&gt; &#xA;&lt;p&gt;We currently strive to support Debian-based distributions with Ubuntu 20.04 being our official release target. Building on Arch Linux works as well. Our core engineering team uses Linux and OSX, so both environments are well supported for development.&lt;/p&gt; &#xA;&lt;p&gt;OSX only: &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew (brew)&lt;/a&gt; must be installed before continuing. &lt;a href=&#34;https://docs.brew.sh/Installation&#34;&gt;Here&lt;/a&gt; are the installation requirements.&lt;/p&gt; &#xA;&lt;p&gt;Initial environment setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/algorand/go-algorand&#xA;cd go-algorand&#xA;./scripts/configure_dev.sh&#xA;./scripts/buildtools/install_buildtools.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, you are ready to build go-algorand. We use &lt;code&gt;make&lt;/code&gt; and have a number of targets to automate common tasks.&lt;/p&gt; &#xA;&lt;h4&gt;build&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;test&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# unit tests&#xA;make test&#xA;&#xA;# integration tests&#xA;make integration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;style and checks&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make fmt&#xA;make lint&#xA;make fix&#xA;make vet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or alternatively&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make sanity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running a node&lt;/h3&gt; &#xA;&lt;p&gt;Once the software is built you&#39;ll find binaries in &lt;code&gt;${GOPATH}/bin&lt;/code&gt;, and a data directory will be initialized at &lt;code&gt;~/.algorand&lt;/code&gt;. Start your node with &lt;code&gt;${GOPATH}/bin/goal node start -d ~/.algorand&lt;/code&gt;, use &lt;code&gt;${GOPATH}/bin/carpenter -d ~/.algorand&lt;/code&gt; to see activity. Refer to the &lt;a href=&#34;https://developer.algorand.org/&#34;&gt;developer website&lt;/a&gt; for how to use the different tools.&lt;/p&gt; &#xA;&lt;h4&gt;Providing your own data directory&lt;/h4&gt; &#xA;&lt;p&gt;You can run a node out of other directories than &lt;code&gt;~/.algorand&lt;/code&gt; and join networks other than mainnet. Just make a new directory and copy into it the &lt;code&gt;genesis.json&lt;/code&gt; file for the network. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/testnet_data&#xA;cp installer/genesis/testnet/genesis.json ~/testnet_data/genesis.json&#xA;${GOPATH}/bin/goal node start -d ~/testnet_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Genesis files for mainnet, testnet, and betanet can be found in &lt;code&gt;installer/genesis/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h2&gt;Project Layout&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;go-algorand&lt;/code&gt; is split into various subsystems containing various packages.&lt;/p&gt; &#xA;&lt;h3&gt;Core&lt;/h3&gt; &#xA;&lt;p&gt;Provides core functionality to the &lt;code&gt;algod&lt;/code&gt; and &lt;code&gt;kmd&lt;/code&gt; daemons, as well as other tools and commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;crypto&lt;/code&gt; contains the cryptographic constructions we&#39;re using for hashing, signatures, and VRFs. There are also some Algorand-specific details here about spending keys, protocols keys, one-time-use signing keys, and how they relate to each other.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt; holds configuration parameters. These include parameters used locally by the node as well as parameters that must be agreed upon by the protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt; defines various types used throughout the codebase. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;basics&lt;/code&gt; hold basic types such as MicroAlgos, account data, and addresses.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;account&lt;/code&gt; defines accounts, including &#34;root&#34; accounts (which can spend money) and &#34;participation&#34; accounts (which can participate in the agreement protocol).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;transactions&lt;/code&gt; define transactions that accounts can issue against the Algorand state. These include standard payments and also participation key registration transactions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bookkeeping&lt;/code&gt; defines blocks, which are batches of transactions atomically committed to Algorand.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;pools&lt;/code&gt; implement the transaction pool. The transaction pool holds transactions seen by a node in memory before they are proposed in a block.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;committee&lt;/code&gt; implements the credentials that authenticate a participating account&#39;s membership in the agreement protocol.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ledger&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/ledger/README.md&#34;&gt;README&lt;/a&gt;) contains the Algorand Ledger state machine, which holds the sequence of blocks. The Ledger executes the state transitions that result from applying these blocks. It answers queries on blocks (e.g., what transactions were in the last committed block?) and on accounts (e.g., what is my balance?).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protocol&lt;/code&gt; declares constants used to identify protocol versions, tags for routing network messages, and prefixes for domain separation of cryptographic inputs. It also implements the canonical encoder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;network&lt;/code&gt; contains the code for participating in a mesh network based on WebSockets. Maintains connection to some number of peers, (optionally) accepts connections from peers, sends point to point and broadcast messages, and receives messages routing them to various handler code (e.g. agreement/gossip/network.go registers three handlers). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;rpcs&lt;/code&gt; contains the HTTP RPCs used by &lt;code&gt;algod&lt;/code&gt; processes to query one another.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;agreement&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/agreement/README.md&#34;&gt;README&lt;/a&gt;) contains the agreement service, which implements Algorand&#39;s Byzantine Agreement protocol. This protocol allows participating accounts to quickly confirm blocks in a fork-safe manner, provided that sufficient account stake is correctly executing the protocol.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt; integrates the components above and handles initialization and shutdown. It provides queries into these components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Daemon&lt;/h3&gt; &#xA;&lt;p&gt;Contains the two daemons which provide Algorand clients with services:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;daemon/algod&lt;/code&gt; holds the &lt;code&gt;algod&lt;/code&gt; daemon, which implements a participating node. &lt;code&gt;algod&lt;/code&gt; allows a node to participate in the agreement protocol, submit and confirm transactions, and view the state of the Algorand Ledger. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;daemon/algod/api&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/daemon/algod/api/README.md&#34;&gt;README&lt;/a&gt;) is the REST interface used for interactions with algod.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;daemon/kmd&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/daemon/kmd/README.md&#34;&gt;README&lt;/a&gt;) holds the &lt;code&gt;kmd&lt;/code&gt; daemon. This daemon allows a node to sign transactions. Because &lt;code&gt;kmd&lt;/code&gt; is separate from &lt;code&gt;algod&lt;/code&gt;, &lt;code&gt;kmd&lt;/code&gt; allows a user to sign transactions on an air-gapped computer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interfacing&lt;/h3&gt; &#xA;&lt;p&gt;Allows developers to interface with the Algorand system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd&lt;/code&gt; holds the primary commands defining entry points into the system. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;cmd/catchupsrv&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/cmd/catchupsrv/README.md&#34;&gt;README&lt;/a&gt;) is a tool to assist with processing historic blocks on a new node.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libgoal&lt;/code&gt; exports a Go interface useful for developers of Algorand clients.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/tools/README.md&#34;&gt;README&lt;/a&gt;) various tools and utilities without a better place to go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools/debug&lt;/code&gt; holds secondary commands which assist developers during debugging.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tools/misc&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/tools/misc/README.md&#34;&gt;README&lt;/a&gt;) small tools that are sometimes handy in a pinch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;Help Algorand developers deploy networks of their own:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nodecontrol&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;commandandcontrol&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/test/commandandcontrol/README.md&#34;&gt;README&lt;/a&gt;) is a tool to automate a network of algod instances.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;components&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;netdeploy&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Utilities&lt;/h3&gt; &#xA;&lt;p&gt;Provides utilities for the various components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;logging&lt;/code&gt; is a wrapper around &lt;code&gt;logrus&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;util&lt;/code&gt; contains a variety of utilities, including a codec, a SQLite wrapper, a goroutine pool, a timer interface, node metrics, and more.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;test&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/test/README.md&#34;&gt;README&lt;/a&gt;) contains end-to-end tests and utilities for the above components.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;License: AGPL v3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/algorand/go-algorand/master/COPYING_FAQ&#34;&gt;COPYING_FAQ&lt;/a&gt; for details about how to apply our license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (C) 2019-2023, Algorand Inc.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>beeper/mac-registration-provider</title>
    <updated>2023-12-24T01:33:57Z</updated>
    <id>tag:github.com,2023-12-24:/beeper/mac-registration-provider</id>
    <link href="https://github.com/beeper/mac-registration-provider" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small service that generates iMessage registration data on a Mac&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mac-registration-provider&lt;/h1&gt; &#xA;&lt;p&gt;A small service that generates iMessage registration data on a Mac. If you do not have access to Beeper Cloud, you can use this to generate an iMessage registration code and use it in Beeper Mini.&lt;/p&gt; &#xA;&lt;h2&gt;Supported MacOS versions&lt;/h2&gt; &#xA;&lt;p&gt;The tool is currently quite hacky, so it only works on specific versions of macOS.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intel: 11.5 - 11.7, 13.3.1, 13.5 - 13.6, 14.0 - 14.3&lt;/li&gt; &#xA; &lt;li&gt;Apple Silicon: 13.3.1, 13.5 - 13.6, 14.0 - 14.3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On unsupported versions, it will tell you that it&#39;s unsupported and exit. A future version may work in less hacky ways to support more OS versions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;On your Mac, download the latest &lt;code&gt;mac-registration-provider&lt;/code&gt; file from the latest &lt;a href=&#34;https://github.com/beeper/mac-registration-provider/releases&#34;&gt;release&lt;/a&gt; &lt;img src=&#34;https://github.com/beeper/mac-registration-provider/assets/1048265/4a419ae1-8996-4af4-876e-5723db088816&#34; alt=&#34;screenshot&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open Terminal app (&lt;kbd&gt;⌘&lt;/kbd&gt; + &lt;kbd&gt;space&lt;/kbd&gt; -&amp;gt; Terminal), type &lt;code&gt;cd Downloads&lt;/code&gt;, hit enter&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;chmod +x mac-registration-provider&lt;/code&gt;, hit enter&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;./mac-registration-provider&lt;/code&gt;, hit enter&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Future improvements&lt;/h2&gt; &#xA;&lt;p&gt;If anyone wants to package this into an app that lives in your dock and runs at startup, we&#39;d appreciate it!&lt;/p&gt; &#xA;&lt;h2&gt;Modes of operation&lt;/h2&gt; &#xA;&lt;p&gt;The service has three different modes of operation, and various flags associated with each mode. Only one mode can be used at a time. The only mode that works with Beeper is Relay, which is the default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Relay (default) - connect to a websocket and return registration data when the server requests it. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;-relay-server&lt;/code&gt; Use a different relay server (defaults to &lt;code&gt;https://registration-relay.beeper.com&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Submit - periodically generate registration data and push it to a server. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The list of addresses to submit to must be provided as arguments after the flags.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-submit-interval&lt;/code&gt; - The interval to submit data at (required).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;-submit-token&lt;/code&gt; - A bearer token to include when submitting data (defaults to no auth).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-once&lt;/code&gt; - generate a single registration data, print it to stdout and exit&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>