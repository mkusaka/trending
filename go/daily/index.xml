<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-11T01:28:55Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>flipt-io/reverst</title>
    <updated>2024-04-11T01:28:55Z</updated>
    <id>tag:github.com,2024-04-11:/flipt-io/reverst</id>
    <link href="https://github.com/flipt-io/reverst" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reverse Tunnels in Go over HTTP/3 and QUIC&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;reverst: HTTP reverse tunnels over QUIC&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Ti esrever dna ti pilf nwod gnaht ym tup i&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Reverst is a (load-balanced) reverse-tunnel server and Go server-client library built on QUIC and HTTP/3.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go Powered: Written in Go using &lt;a href=&#34;https://github.com/quic-go/quic-go&#34;&gt;quic-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compatible: The Go &lt;code&gt;client&lt;/code&gt; package is built on &lt;code&gt;net/http&lt;/code&gt; standard-library abstractions&lt;/li&gt; &#xA; &lt;li&gt;Load-balanced: Run multiple instances of your services behind the same tunnel&lt;/li&gt; &#xA; &lt;li&gt;Performant: Built on top of QUIC and HTTP/3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use-case&lt;/h2&gt; &#xA;&lt;p&gt;Reverst is for exposing services on the public internet from within restrictive networks (e.g. behind NAT gateways). The tunnel binary is intended to be deployed on the public internet. Client servers then dial out to the tunnels and register themselves on target tunnel groups. A tunnel group is a load-balanced set of client-servers, which is exposed through the reverst tunnel HTTP interface.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;800&#34; height=&#34;1199&#34; src=&#34;https://raw.githubusercontent.com/flipt-io/reverst/main/diagram.png&#34; alt=&#34;Tunnel Lifecycle&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;reverst&lt;/code&gt; tunnel server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;âžœ  reverst -h&#xA;COMMAND&#xA;  reverst&#xA;&#xA;USAGE&#xA;  reverst [FLAGS]&#xA;&#xA;FLAGS&#xA;  -l, --log LEVEL                    debug, info, warn or error (default: INFO)&#xA;  -a, --tunnel-address STRING        address for accepting tunnelling quic connections (default: 127.0.0.1:7171)&#xA;  -s, --http-address STRING          address for serving HTTP requests (default: 127.0.0.1:8181)&#xA;  -g, --tunnel-groups STRING         path to tunnel groups configuration file (default: groups.yml)&#xA;  -n, --server-name STRING           server name used to identify tunnel via TLS (required)&#xA;  -k, --private-key-path STRING      path to TLS private key PEM file (required)&#xA;  -c, --certificate-path STRING      path to TLS certificate PEM file (required)&#xA;      --max-idle-timeout DURATION    maximum time a connection can be idle (default: 1m0s)&#xA;      --keep-alive-period DURATION   period between keep-alive events (default: 30s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Client&lt;/h2&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;go install ./client/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/flipt-io/reverst/main/client&#34;&gt;./client&lt;/a&gt; directory for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Server&lt;/h2&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;go install ./cmd/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;p&gt;Reverst uses Dagger to setup and run an integration test suite.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;dagger call test --source=.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The test suite sets up a tunnel, registers a server-client to the tunnel and then requests the service through the tunnels HTTP interface.&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;The following walks through experimenting with the &lt;a href=&#34;https://raw.githubusercontent.com/flipt-io/reverst/main/examples/simple&#34;&gt;./examples/simple&lt;/a&gt; server example. This directory contains a number of things needed to stand up reverst and a registering client server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The example service in &lt;a href=&#34;https://raw.githubusercontent.com/flipt-io/reverst/main/examples/simple/main.go&#34;&gt;./examples/simple/main.go&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Simple self-signed TLS private key and certificate.&lt;/li&gt; &#xA; &lt;li&gt;A tunnel-groups file for routing decisions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Running &lt;code&gt;reverst&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The following runs the tunnel server with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The QUIC tunnel listener on &lt;code&gt;127.0.0.1:7171&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The HTTP serving listener on &lt;code&gt;127.0.0.1:8181&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logging with &lt;code&gt;debug&lt;/code&gt; level&lt;/li&gt; &#xA; &lt;li&gt;A TLS server-name of &lt;code&gt;flipt.dev.local&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Some tunnel group definitions with a single tunnel group &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The group has the name &lt;code&gt;flipt.dev.local&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The group is reachable under the same host name&lt;/li&gt; &#xA;   &lt;li&gt;The group requires basic username and password authentication&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The dummy TLS certificates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;go run ./cmd/reverst/... -l debug \&#xA;    -n flipt.dev.local \&#xA;    -g examples/simple/group.yml \&#xA;    -k examples/simple/server.key \&#xA;    -c examples/simple/server.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running example server&lt;/h4&gt; &#xA;&lt;p&gt;Now you can run the example server. This is a simple HTTP server that responds to all requests with &lt;code&gt;PONG&lt;/code&gt;. It is setup to use the server client to register as a listener on the tunnel.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;go run ./examples/simple/main.go --username user --password pass&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Making requests&lt;/h4&gt; &#xA;&lt;p&gt;You can now curl the tunnel and requests will be forward all the way through to the example server. Be sure to include the &lt;code&gt;Host&lt;/code&gt; header, as this is used to route requests to the respective tunnel-group.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-curl&#34;&gt;curl -H &#39;Host: flipt.dev.local&#39; 127.0.0.1:8181/fo&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>