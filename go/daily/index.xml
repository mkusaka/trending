<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-13T01:36:40Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-git/go-git</title>
    <updated>2023-01-13T01:36:40Z</updated>
    <id>tag:github.com,2023-01-13:/go-git/go-git</id>
    <link href="https://github.com/go-git/go-git" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A highly extensible Git implementation in pure Go.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.rawgit.com/src-d/artwork/02036484/go-git/files/go-git-github-readme-header.png&#34; alt=&#34;go-git logo&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/go-git/go-git/v5&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-git/go-git/v5?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-git/go-git/actions&#34;&gt;&lt;img src=&#34;https://github.com/go-git/go-git/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/go-git/go-git&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/go-git/go-git&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;go-git&lt;/em&gt; is a highly extensible git implementation library written in &lt;strong&gt;pure Go&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can be used to manipulate git repositories at low level &lt;em&gt;(plumbing)&lt;/em&gt; or high level &lt;em&gt;(porcelain)&lt;/em&gt;, through an idiomatic Go API. It also supports several types of storage, such as in-memory filesystems, or custom implementations, thanks to the &lt;a href=&#34;https://pkg.go.dev/github.com/go-git/go-git/v5/plumbing/storer&#34;&gt;&lt;code&gt;Storer&lt;/code&gt;&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s being actively developed since 2015 and is being used extensively by &lt;a href=&#34;https://keybase.io/blog/encrypted-git-for-everyone&#34;&gt;Keybase&lt;/a&gt;, &lt;a href=&#34;https://gitea.io/en-us/&#34;&gt;Gitea&lt;/a&gt; or &lt;a href=&#34;https://github.com/search?q=org%3Apulumi+go-git&amp;amp;type=Code&#34;&gt;Pulumi&lt;/a&gt;, and by many other libraries and tools.&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;After the legal issues with the &lt;a href=&#34;https://github.com/src-d&#34;&gt;&lt;code&gt;src-d&lt;/code&gt;&lt;/a&gt; organization, the lack of update for four months and the requirement to make a hard fork, the project is &lt;strong&gt;now back to normality&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The project is currently actively maintained by individual contributors, including several of the original authors, but also backed by a new company, &lt;a href=&#34;https://github.com/gitsight&#34;&gt;gitsight&lt;/a&gt;, where &lt;code&gt;go-git&lt;/code&gt; is a critical component used at scale.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with git&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;go-git&lt;/em&gt; aims to be fully compatible with &lt;a href=&#34;https://github.com/git/git&#34;&gt;git&lt;/a&gt;, all the &lt;em&gt;porcelain&lt;/em&gt; operations are implemented to work exactly as &lt;em&gt;git&lt;/em&gt; does.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;git&lt;/em&gt; is a humongous project with years of development by thousands of contributors, making it challenging for &lt;em&gt;go-git&lt;/em&gt; to implement all the features. You can find a comparison of &lt;em&gt;go-git&lt;/em&gt; vs &lt;em&gt;git&lt;/em&gt; in the &lt;a href=&#34;https://raw.githubusercontent.com/go-git/go-git/master/COMPATIBILITY.md&#34;&gt;compatibility documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to install &lt;em&gt;go-git&lt;/em&gt; is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/go-git/go-git/v5&#34; // with go modules enabled (GO111MODULE=on or outside GOPATH)&#xA;import &#34;github.com/go-git/go-git&#34; // with go modules disabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please note that the &lt;code&gt;CheckIfError&lt;/code&gt; and &lt;code&gt;Info&lt;/code&gt; functions used in the examples are from the &lt;a href=&#34;https://github.com/go-git/go-git/raw/master/_examples/common.go#L19&#34;&gt;examples package&lt;/a&gt; just to be used in the examples.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Basic example&lt;/h3&gt; &#xA;&lt;p&gt;A basic example that mimics the standard &lt;code&gt;git clone&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Clone the given repository to the given directory&#xA;Info(&#34;git clone https://github.com/go-git/go-git&#34;)&#xA;&#xA;_, err := git.PlainClone(&#34;/tmp/foo&#34;, false, &amp;amp;git.CloneOptions{&#xA;    URL:      &#34;https://github.com/go-git/go-git&#34;,&#xA;    Progress: os.Stdout,&#xA;})&#xA;&#xA;CheckIfError(err)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Counting objects: 4924, done.&#xA;Compressing objects: 100% (1333/1333), done.&#xA;Total 4924 (delta 530), reused 6 (delta 6), pack-reused 3533&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In-memory example&lt;/h3&gt; &#xA;&lt;p&gt;Cloning a repository into memory and printing the history of HEAD, just like &lt;code&gt;git log&lt;/code&gt; does&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Clones the given repository in memory, creating the remote, the local&#xA;// branches and fetching the objects, exactly as:&#xA;Info(&#34;git clone https://github.com/go-git/go-billy&#34;)&#xA;&#xA;r, err := git.Clone(memory.NewStorage(), nil, &amp;amp;git.CloneOptions{&#xA;    URL: &#34;https://github.com/go-git/go-billy&#34;,&#xA;})&#xA;&#xA;CheckIfError(err)&#xA;&#xA;// Gets the HEAD history from HEAD, just like this command:&#xA;Info(&#34;git log&#34;)&#xA;&#xA;// ... retrieves the branch pointed by HEAD&#xA;ref, err := r.Head()&#xA;CheckIfError(err)&#xA;&#xA;&#xA;// ... retrieves the commit history&#xA;cIter, err := r.Log(&amp;amp;git.LogOptions{From: ref.Hash()})&#xA;CheckIfError(err)&#xA;&#xA;// ... just iterates over the commits, printing it&#xA;err = cIter.ForEach(func(c *object.Commit) error {&#xA;&#x9;fmt.Println(c)&#xA;&#x9;return nil&#xA;})&#xA;CheckIfError(err)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;commit ded8054fd0c3994453e9c8aacaf48d118d42991e&#xA;Author: Santiago M. Mola &amp;lt;santi@mola.io&amp;gt;&#xA;Date:   Sat Nov 12 21:18:41 2016 +0100&#xA;&#xA;    index: ReadFrom/WriteTo returns IndexReadError/IndexWriteError. (#9)&#xA;&#xA;commit df707095626f384ce2dc1a83b30f9a21d69b9dfc&#xA;Author: Santiago M. Mola &amp;lt;santi@mola.io&amp;gt;&#xA;Date:   Fri Nov 11 13:23:22 2016 +0100&#xA;&#xA;    readwriter: fix bug when writing index. (#10)&#xA;&#xA;    When using ReadWriter on an existing siva file, absolute offset for&#xA;    index entries was not being calculated correctly.&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find this &lt;a href=&#34;https://raw.githubusercontent.com/go-git/go-git/master/_examples/log/main.go&#34;&gt;example&lt;/a&gt; and many others in the &lt;a href=&#34;https://raw.githubusercontent.com/go-git/go-git/master/_examples&#34;&gt;examples&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-git/go-git/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;Contributions&lt;/a&gt; are more than welcome, if you are interested please take a look to our &lt;a href=&#34;https://raw.githubusercontent.com/go-git/go-git/master/CONTRIBUTING.md&#34;&gt;Contributing Guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache License Version 2.0, see &lt;a href=&#34;https://raw.githubusercontent.com/go-git/go-git/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>docker/buildx</title>
    <updated>2023-01-13T01:36:40Z</updated>
    <id>tag:github.com,2023-01-13:/docker/buildx</id>
    <link href="https://github.com/docker/buildx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker CLI plugin for extended build capabilities with BuildKit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;buildx&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/docker/buildx/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/docker/buildx.svg?style=flat-square&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/docker/buildx&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-docs-007d9c?style=flat-square&amp;amp;logo=go&amp;amp;logoColor=white&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/docker/buildx/actions?query=workflow%3Abuild&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/docker/buildx/build.yml?branch=master&amp;amp;label=build&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/docker/buildx&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/docker/buildx?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/docker/buildx&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/docker/buildx?logo=codecov&amp;amp;style=flat-square&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;buildx&lt;/code&gt; is a Docker CLI plugin for extended build capabilities with &lt;a href=&#34;https://github.com/moby/buildkit&#34;&gt;BuildKit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Familiar UI from &lt;code&gt;docker build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Full BuildKit capabilities with container driver&lt;/li&gt; &#xA; &lt;li&gt;Multiple builder instance support&lt;/li&gt; &#xA; &lt;li&gt;Multi-node builds for cross-platform images&lt;/li&gt; &#xA; &lt;li&gt;Compose build support&lt;/li&gt; &#xA; &lt;li&gt;High-level build constructs (&lt;code&gt;bake&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;In-container driver support (both Docker and Kubernetes)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#installing&#34;&gt;Installing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#windows-and-macos&#34;&gt;Windows and macOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#linux-packages&#34;&gt;Linux packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#manual-download&#34;&gt;Manual download&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#dockerfile&#34;&gt;Dockerfile&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#set-buildx-as-the-default-builder&#34;&gt;Set buildx as the default builder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#building&#34;&gt;Building&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#building-with-buildx&#34;&gt;Building with buildx&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#working-with-builder-instances&#34;&gt;Working with builder instances&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#building-multi-platform-images&#34;&gt;Building multi-platform images&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals&#34;&gt;Manuals&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/bake/index.md&#34;&gt;High-level build options with Bake&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/drivers/index.md&#34;&gt;Drivers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/exporters/index.md&#34;&gt;Exporters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/cache/backends/index.md&#34;&gt;Cache backends&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/guides&#34;&gt;Guides&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/guides/cicd.md&#34;&gt;CI/CD&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/guides/cni-networking.md&#34;&gt;CNI networking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/guides/custom-network.md&#34;&gt;Using a custom network&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/guides/custom-registry-config.md&#34;&gt;Using a custom registry configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/guides/opentelemetry.md&#34;&gt;OpenTelemetry support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/guides/registry-mirror.md&#34;&gt;Registry mirror&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/guides/resource-limiting.md&#34;&gt;Resource limiting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx.md&#34;&gt;Reference&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_bake.md&#34;&gt;&lt;code&gt;buildx bake&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_build.md&#34;&gt;&lt;code&gt;buildx build&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_create.md&#34;&gt;&lt;code&gt;buildx create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_du.md&#34;&gt;&lt;code&gt;buildx du&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_imagetools.md&#34;&gt;&lt;code&gt;buildx imagetools&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_imagetools_create.md&#34;&gt;&lt;code&gt;buildx imagetools create&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_imagetools_inspect.md&#34;&gt;&lt;code&gt;buildx imagetools inspect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_inspect.md&#34;&gt;&lt;code&gt;buildx inspect&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_install.md&#34;&gt;&lt;code&gt;buildx install&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_ls.md&#34;&gt;&lt;code&gt;buildx ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_prune.md&#34;&gt;&lt;code&gt;buildx prune&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_rm.md&#34;&gt;&lt;code&gt;buildx rm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_stop.md&#34;&gt;&lt;code&gt;buildx stop&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_uninstall.md&#34;&gt;&lt;code&gt;buildx uninstall&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_use.md&#34;&gt;&lt;code&gt;buildx use&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_version.md&#34;&gt;&lt;code&gt;buildx version&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;p&gt;Using &lt;code&gt;buildx&lt;/code&gt; as a docker CLI plugin requires using Docker 19.03 or newer. A limited set of functionality works with older versions of Docker when invoking the binary directly.&lt;/p&gt; &#xA;&lt;h2&gt;Windows and macOS&lt;/h2&gt; &#xA;&lt;p&gt;Docker Buildx is included in &lt;a href=&#34;https://docs.docker.com/desktop/&#34;&gt;Docker Desktop&lt;/a&gt; for Windows and macOS.&lt;/p&gt; &#xA;&lt;h2&gt;Linux packages&lt;/h2&gt; &#xA;&lt;p&gt;Docker Linux packages also include Docker Buildx when installed using the &lt;a href=&#34;https://docs.docker.com/engine/install/&#34;&gt;DEB or RPM packages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manual download&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This section is for unattended installation of the buildx component. These instructions are mostly suitable for testing purposes. We do not recommend installing buildx using manual download in production environments as they will not be updated automatically with security updates.&lt;/p&gt; &#xA; &lt;p&gt;On Windows and macOS, we recommend that you install &lt;a href=&#34;https://docs.docker.com/desktop/&#34;&gt;Docker Desktop&lt;/a&gt; instead. For Linux, we recommend that you follow the &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/#linux-packages&#34;&gt;instructions specific for your distribution&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also download the latest binary from the &lt;a href=&#34;https://github.com/docker/buildx/releases/latest&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rename the relevant binary and copy it to the destination matching your OS:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Binary name&lt;/th&gt; &#xA;   &lt;th&gt;Destination folder&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;docker-buildx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME/.docker/cli-plugins&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;docker-buildx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;$HOME/.docker/cli-plugins&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;docker-buildx.exe&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;%USERPROFILE%\.docker\cli-plugins&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Or copy it into one of these folders for installing it system-wide.&lt;/p&gt; &#xA;&lt;p&gt;On Unix environments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/local/lib/docker/cli-plugins&lt;/code&gt; OR &lt;code&gt;/usr/local/libexec/docker/cli-plugins&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/usr/lib/docker/cli-plugins&lt;/code&gt; OR &lt;code&gt;/usr/libexec/docker/cli-plugins&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;C:\ProgramData\Docker\cli-plugins&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;C:\Program Files\Docker\cli-plugins&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;On Unix environments, it may also be necessary to make it executable with &lt;code&gt;chmod +x&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ chmod +x ~/.docker/cli-plugins/docker-buildx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Dockerfile&lt;/h2&gt; &#xA;&lt;p&gt;Here is how to install and use Buildx inside a Dockerfile through the &lt;a href=&#34;https://hub.docker.com/r/docker/buildx-bin&#34;&gt;&lt;code&gt;docker/buildx-bin&lt;/code&gt;&lt;/a&gt; image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# syntax=docker/dockerfile:1&#xA;FROM docker&#xA;COPY --from=docker/buildx-bin /buildx /usr/libexec/docker/cli-plugins/docker-buildx&#xA;RUN docker buildx version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Set buildx as the default builder&lt;/h1&gt; &#xA;&lt;p&gt;Running the command &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_install.md&#34;&gt;&lt;code&gt;docker buildx install&lt;/code&gt;&lt;/a&gt; sets up docker builder command as an alias to &lt;code&gt;docker buildx build&lt;/code&gt;. This results in the ability to have &lt;code&gt;docker build&lt;/code&gt; use the current buildx builder.&lt;/p&gt; &#xA;&lt;p&gt;To remove this alias, run &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_uninstall.md&#34;&gt;&lt;code&gt;docker buildx uninstall&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Buildx 0.6+&#xA;$ docker buildx bake &#34;https://github.com/docker/buildx.git&#34;&#xA;$ mkdir -p ~/.docker/cli-plugins&#xA;$ mv ./bin/build/buildx ~/.docker/cli-plugins/docker-buildx&#xA;&#xA;# Docker 19.03+&#xA;$ DOCKER_BUILDKIT=1 docker build --platform=local -o . &#34;https://github.com/docker/buildx.git&#34;&#xA;$ mkdir -p ~/.docker/cli-plugins&#xA;$ mv buildx ~/.docker/cli-plugins/docker-buildx&#xA;&#xA;# Local &#xA;$ git clone https://github.com/docker/buildx.git &amp;amp;&amp;amp; cd buildx&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;Building with buildx&lt;/h2&gt; &#xA;&lt;p&gt;Buildx is a Docker CLI plugin that extends the &lt;code&gt;docker build&lt;/code&gt; command with the full support of the features provided by &lt;a href=&#34;https://github.com/moby/buildkit&#34;&gt;Moby BuildKit&lt;/a&gt; builder toolkit. It provides the same user experience as &lt;code&gt;docker build&lt;/code&gt; with many new features like creating scoped builder instances and building against multiple nodes concurrently.&lt;/p&gt; &#xA;&lt;p&gt;After installation, buildx can be accessed through the &lt;code&gt;docker buildx&lt;/code&gt; command with Docker 19.03. &lt;code&gt;docker buildx build&lt;/code&gt; is the command for starting a new build. With Docker versions older than 19.03 buildx binary can be called directly to access the &lt;code&gt;docker buildx&lt;/code&gt; subcommands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker buildx build .&#xA;[+] Building 8.4s (23/32)&#xA; =&amp;gt; ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Buildx will always build using the BuildKit engine and does not require &lt;code&gt;DOCKER_BUILDKIT=1&lt;/code&gt; environment variable for starting builds.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;docker buildx build&lt;/code&gt; command supports features available for &lt;code&gt;docker build&lt;/code&gt;, including features such as outputs configuration, inline build caching, and specifying target platform. In addition, Buildx also supports new features that are not yet available for regular &lt;code&gt;docker build&lt;/code&gt; like building manifest lists, distributed caching, and exporting build results to OCI image tarballs.&lt;/p&gt; &#xA;&lt;p&gt;Buildx is flexible and can be run in different configurations that are exposed through various &#34;drivers&#34;. Each driver defines how and where a build should run, and have different feature sets.&lt;/p&gt; &#xA;&lt;p&gt;We currently support the following drivers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;docker&lt;/code&gt; driver (&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/drivers/docker.md&#34;&gt;guide&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_create/#driver&#34;&gt;reference&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;docker-container&lt;/code&gt; driver (&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/drivers/docker-container.md&#34;&gt;guide&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_create/#driver&#34;&gt;reference&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;kubernetes&lt;/code&gt; driver (&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/drivers/kubernetes.md&#34;&gt;guide&lt;/a&gt;, &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/buildx_create/#driver&#34;&gt;reference&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;remote&lt;/code&gt; driver (&lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/drivers/remote.md&#34;&gt;guide&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information on drivers, see the &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/drivers/index.md&#34;&gt;drivers guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Working with builder instances&lt;/h2&gt; &#xA;&lt;p&gt;By default, buildx will initially use the &lt;code&gt;docker&lt;/code&gt; driver if it is supported, providing a very similar user experience to the native &lt;code&gt;docker build&lt;/code&gt;. Note that you must use a local shared daemon to build your applications.&lt;/p&gt; &#xA;&lt;p&gt;Buildx allows you to create new instances of isolated builders. This can be used for getting a scoped environment for your CI builds that does not change the state of the shared daemon or for isolating the builds for different projects. You can create a new instance for a set of remote nodes, forming a build farm, and quickly switch between them.&lt;/p&gt; &#xA;&lt;p&gt;You can create new instances using the &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_create.md&#34;&gt;&lt;code&gt;docker buildx create&lt;/code&gt;&lt;/a&gt; command. This creates a new builder instance with a single node based on your current configuration.&lt;/p&gt; &#xA;&lt;p&gt;To use a remote node you can specify the &lt;code&gt;DOCKER_HOST&lt;/code&gt; or the remote context name while creating the new builder. After creating a new instance, you can manage its lifecycle using the &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_inspect.md&#34;&gt;&lt;code&gt;docker buildx inspect&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_stop.md&#34;&gt;&lt;code&gt;docker buildx stop&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_rm.md&#34;&gt;&lt;code&gt;docker buildx rm&lt;/code&gt;&lt;/a&gt; commands. To list all available builders, use &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_ls.md&#34;&gt;&lt;code&gt;buildx ls&lt;/code&gt;&lt;/a&gt;. After creating a new builder you can also append new nodes to it.&lt;/p&gt; &#xA;&lt;p&gt;To switch between different builders, use &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/reference/buildx_use.md&#34;&gt;&lt;code&gt;docker buildx use &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/a&gt;. After running this command, the build commands will automatically use this builder.&lt;/p&gt; &#xA;&lt;p&gt;Docker also features a &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/context/&#34;&gt;&lt;code&gt;docker context&lt;/code&gt;&lt;/a&gt; command that can be used for giving names for remote Docker API endpoints. Buildx integrates with &lt;code&gt;docker context&lt;/code&gt; so that all of your contexts automatically get a default builder instance. While creating a new builder instance or when adding a node to it you can also set the context name as the target.&lt;/p&gt; &#xA;&lt;h2&gt;Building multi-platform images&lt;/h2&gt; &#xA;&lt;p&gt;BuildKit is designed to work well for building for multiple platforms and not only for the architecture and operating system that the user invoking the build happens to run.&lt;/p&gt; &#xA;&lt;p&gt;When you invoke a build, you can set the &lt;code&gt;--platform&lt;/code&gt; flag to specify the target platform for the build output, (for example, &lt;code&gt;linux/amd64&lt;/code&gt;, &lt;code&gt;linux/arm64&lt;/code&gt;, or &lt;code&gt;darwin/amd64&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;When the current builder instance is backed by the &lt;code&gt;docker-container&lt;/code&gt; or &lt;code&gt;kubernetes&lt;/code&gt; driver, you can specify multiple platforms together. In this case, it builds a manifest list which contains images for all specified architectures. When you use this image in &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/&#34;&gt;&lt;code&gt;docker run&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/service/&#34;&gt;&lt;code&gt;docker service&lt;/code&gt;&lt;/a&gt;, Docker picks the correct image based on the node&#39;s platform.&lt;/p&gt; &#xA;&lt;p&gt;You can build multi-platform images using three different strategies that are supported by Buildx and Dockerfiles:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using the QEMU emulation support in the kernel&lt;/li&gt; &#xA; &lt;li&gt;Building on multiple native nodes using the same builder instance&lt;/li&gt; &#xA; &lt;li&gt;Using a stage in Dockerfile to cross-compile to different architectures&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;QEMU is the easiest way to get started if your node already supports it (for example. if you are using Docker Desktop). It requires no changes to your Dockerfile and BuildKit automatically detects the secondary architectures that are available. When BuildKit needs to run a binary for a different architecture, it automatically loads it through a binary registered in the &lt;code&gt;binfmt_misc&lt;/code&gt; handler.&lt;/p&gt; &#xA;&lt;p&gt;For QEMU binaries registered with &lt;code&gt;binfmt_misc&lt;/code&gt; on the host OS to work transparently inside containers they must be registered with the &lt;code&gt;fix_binary&lt;/code&gt; flag. This requires a kernel &amp;gt;= 4.8 and binfmt-support &amp;gt;= 2.1.7. You can check for proper registration by checking if &lt;code&gt;F&lt;/code&gt; is among the flags in &lt;code&gt;/proc/sys/fs/binfmt_misc/qemu-*&lt;/code&gt;. While Docker Desktop comes preconfigured with &lt;code&gt;binfmt_misc&lt;/code&gt; support for additional platforms, for other installations it likely needs to be installed using &lt;a href=&#34;https://github.com/tonistiigi/binfmt&#34;&gt;&lt;code&gt;tonistiigi/binfmt&lt;/code&gt;&lt;/a&gt; image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run --privileged --rm tonistiigi/binfmt --install all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using multiple native nodes provide better support for more complicated cases that are not handled by QEMU and generally have better performance. You can add additional nodes to the builder instance using the &lt;code&gt;--append&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Assuming contexts &lt;code&gt;node-amd64&lt;/code&gt; and &lt;code&gt;node-arm64&lt;/code&gt; exist in &lt;code&gt;docker context ls&lt;/code&gt;;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker buildx create --use --name mybuild node-amd64&#xA;mybuild&#xA;$ docker buildx create --append --name mybuild node-arm64&#xA;$ docker buildx build --platform linux/amd64,linux/arm64 .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, depending on your project, the language that you use may have good support for cross-compilation. In that case, multi-stage builds in Dockerfiles can be effectively used to build binaries for the platform specified with &lt;code&gt;--platform&lt;/code&gt; using the native architecture of the build node. A list of build arguments like &lt;code&gt;BUILDPLATFORM&lt;/code&gt; and &lt;code&gt;TARGETPLATFORM&lt;/code&gt; is available automatically inside your Dockerfile and can be leveraged by the processes running as part of your build.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# syntax=docker/dockerfile:1&#xA;FROM --platform=$BUILDPLATFORM golang:alpine AS build&#xA;ARG TARGETPLATFORM&#xA;ARG BUILDPLATFORM&#xA;RUN echo &#34;I am running on $BUILDPLATFORM, building for $TARGETPLATFORM&#34; &amp;gt; /log&#xA;FROM alpine&#xA;COPY --from=build /log /log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;a href=&#34;https://github.com/tonistiigi/xx&#34;&gt;&lt;code&gt;tonistiigi/xx&lt;/code&gt;&lt;/a&gt; Dockerfile cross-compilation helpers for more advanced use-cases.&lt;/p&gt; &#xA;&lt;h2&gt;High-level build options&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/docs/manuals/bake/index.md&#34;&gt;&lt;code&gt;docs/manuals/bake/index.md&lt;/code&gt;&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Want to contribute to Buildx? Awesome! You can find information about contributing to this project in the &lt;a href=&#34;https://raw.githubusercontent.com/docker/buildx/master/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>