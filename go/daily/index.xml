<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-22T01:30:54Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lucaslorentz/caddy-docker-proxy</title>
    <updated>2024-10-22T01:30:54Z</updated>
    <id>tag:github.com,2024-10-22:/lucaslorentz/caddy-docker-proxy</id>
    <link href="https://github.com/lucaslorentz/caddy-docker-proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Caddy as a reverse proxy for Docker&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Caddy-Docker-Proxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dev.azure.com/lucaslorentzlara/lucaslorentzlara/_build/latest?definitionId=1&#34;&gt;&lt;img src=&#34;https://dev.azure.com/lucaslorentzlara/lucaslorentzlara/_apis/build/status/lucaslorentz.caddy-docker-proxy?branchName=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/lucaslorentz/caddy-docker-proxy&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/lucaslorentz/caddy-docker-proxy&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;NEW MODULE NAME!&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve renamed our go module, from version 2.7.0 forward you should import caddy-docker-proxy using &lt;code&gt;github.com/lucaslorentz/caddy-docker-proxy/v2&lt;/code&gt; or a specific version &lt;code&gt;github.com/lucaslorentz/caddy-docker-proxy/v2@v2.7.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The old name &lt;code&gt;github.com/lucaslorentz/caddy-docker-proxy/plugin&lt;/code&gt; will be a available for backwards compatibility, but it will not have the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This plugin enables Caddy to be used as a reverse proxy for Docker containers via labels.&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;The plugin scans Docker metadata, looking for labels indicating that the service or container should be served by Caddy.&lt;/p&gt; &#xA;&lt;p&gt;Then, it generates an in-memory Caddyfile with site entries and proxies pointing to each Docker service by their DNS name or container IP.&lt;/p&gt; &#xA;&lt;p&gt;Every time a Docker object changes, the plugin updates the Caddyfile and triggers Caddy to gracefully reload, with zero-downtime.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#basic-usage-example-using-docker-compose&#34;&gt;Basic usage example, using docker-compose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#labels-to-caddyfile-conversion&#34;&gt;Labels to Caddyfile conversion&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#tokens-and-arguments&#34;&gt;Tokens and arguments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#ordering-and-isolation&#34;&gt;Ordering and isolation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#sites-snippets-and-global-options&#34;&gt;Sites, snippets and global options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#go-templates&#34;&gt;Go templates&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#template-functions&#34;&gt;Template functions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#upstreams&#34;&gt;upstreams&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#docker-configs&#34;&gt;Docker configs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#proxying-services-vs-containers&#34;&gt;Proxying services vs containers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#services&#34;&gt;Services&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#containers&#34;&gt;Containers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#execution-modes&#34;&gt;Execution modes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#server&#34;&gt;Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#controller&#34;&gt;Controller&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#standalone-default&#34;&gt;Standalone (default)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#caddy-cli&#34;&gt;Caddy CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#docker-images&#34;&gt;Docker images&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#choosing-the-version-numbers&#34;&gt;Choosing the version numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#chosing-between-default-or-alpine-images&#34;&gt;Chosing between default or alpine images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#ci-images&#34;&gt;CI images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#arm-architecture-images&#34;&gt;ARM architecture images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#windows-images&#34;&gt;Windows images&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#custom-images&#34;&gt;Custom images&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#connecting-to-docker-host&#34;&gt;Connecting to Docker Host&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#volumes&#34;&gt;Volumes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#trying-it&#34;&gt;Trying it&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#with-docker-compose-file&#34;&gt;With docker-compose file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#with-run-commands&#34;&gt;With run commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/#building-it&#34;&gt;Building it&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic usage example, using docker-compose&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker network create caddy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;caddy/docker-compose.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#34;3.7&#34;&#xA;services:&#xA;  caddy:&#xA;    image: lucaslorentz/caddy-docker-proxy:ci-alpine&#xA;    ports:&#xA;      - 80:80&#xA;      - 443:443&#xA;    environment:&#xA;      - CADDY_INGRESS_NETWORKS=caddy&#xA;    networks:&#xA;      - caddy&#xA;    volumes:&#xA;      - /var/run/docker.sock:/var/run/docker.sock&#xA;      - caddy_data:/data&#xA;    restart: unless-stopped&#xA;&#xA;networks:&#xA;  caddy:&#xA;    external: true&#xA;&#xA;volumes:&#xA;  caddy_data: {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;whoami/docker-compose.yml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#39;3.7&#39;&#xA;services:&#xA;  whoami:&#xA;    image: traefik/whoami&#xA;    networks:&#xA;      - caddy&#xA;    labels:&#xA;      caddy: whoami.example.com&#xA;      caddy.reverse_proxy: &#34;{{upstreams 80}}&#34;&#xA;&#xA;networks:&#xA;  caddy:&#xA;    external: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, visit &lt;code&gt;https://whoami.example.com&lt;/code&gt;. The site will be served &lt;a href=&#34;https://caddyserver.com/docs/automatic-https&#34;&gt;automatically over HTTPS&lt;/a&gt; with a certificate issued by Let&#39;s Encrypt or ZeroSSL.&lt;/p&gt; &#xA;&lt;h2&gt;Labels to Caddyfile conversion&lt;/h2&gt; &#xA;&lt;p&gt;Please first read the &lt;a href=&#34;https://caddyserver.com/docs/caddyfile/concepts&#34;&gt;Caddyfile Concepts&lt;/a&gt; documentation to understand the structure of a Caddyfile.&lt;/p&gt; &#xA;&lt;p&gt;Any label prefixed with &lt;code&gt;caddy&lt;/code&gt; will be converted into a Caddyfile config, following these rules:&lt;/p&gt; &#xA;&lt;h3&gt;Tokens and arguments&lt;/h3&gt; &#xA;&lt;p&gt;Keys are the directive name, and values are whitespace separated arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.directive: arg1 arg2&#xA;↓&#xA;{&#xA;&#x9;directive arg1 arg2&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need whitespace or line-breaks inside one of the arguments, use double-quotes or backticks around it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.respond: / &#34;Hello World&#34; 200&#xA;↓&#xA;{&#xA;&#x9;respond / &#34;Hello World&#34; 200&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.respond: / `Hello\nWorld` 200&#xA;↓&#xA;{&#xA;&#x9;respond / `Hello&#xA;World` 200&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.respond: |&#xA;&#x9;/ `Hello&#xA;&#x9;World` 200&#xA;↓&#xA;{&#xA;&#x9;respond / `Hello&#xA;World` 200&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dots represent nesting, and grouping is done automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.directive: argA  &#xA;caddy.directive.subdirA: valueA  &#xA;caddy.directive.subdirB: valueB1 valueB2&#xA;↓&#xA;{&#xA;&#x9;directive argA {  &#xA;&#x9;&#x9;subdirA valueA  &#xA;&#x9;&#x9;subdirB valueB1 valueB2  &#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments for the parent directive are optional (e.g. no arguments to &lt;code&gt;directive&lt;/code&gt;, setting subdirective &lt;code&gt;subdirA&lt;/code&gt; directly):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.directive.subdirA: valueA&#xA;↓&#xA;{&#xA;&#x9;directive {&#xA;&#x9;&#x9;subdirA valueA&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Labels with empty values generate a directive without any arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.directive:&#xA;↓&#xA;{&#xA;&#x9;directive&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ordering and isolation&lt;/h3&gt; &#xA;&lt;p&gt;Be aware that directives are subject to be sorted according to the default &lt;a href=&#34;https://caddyserver.com/docs/caddyfile/directives#directive-order&#34;&gt;directive order&lt;/a&gt; defined by Caddy, when the Caddyfile is parsed (after the Caddyfile is generated from labels).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://caddyserver.com/docs/caddyfile/directives&#34;&gt;Directives&lt;/a&gt; from labels are ordered alphabetically by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.bbb: value&#xA;caddy.aaa: value&#xA;↓&#xA;{&#xA;&#x9;aaa value &#xA;&#x9;bbb value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Suffix _&amp;lt;number&amp;gt; isolates directives that otherwise would be grouped:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.route_0.a: value&#xA;caddy.route_1.b: value&#xA;↓&#xA;{&#xA;&#x9;route {&#xA;&#x9;&#x9;a value&#xA;&#x9;}&#xA;&#x9;route {&#xA;&#x9;&#x9;b value&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prefix &amp;lt;number&amp;gt;_ isolates directives but also defines a custom ordering for directives (mainly relevant within &lt;a href=&#34;https://caddyserver.com/docs/caddyfile/directives/route&#34;&gt;&lt;code&gt;route&lt;/code&gt;&lt;/a&gt; blocks), and directives without order prefix will go last:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.1_bbb: value&#xA;caddy.2_aaa: value&#xA;caddy.3_aaa: value&#xA;↓&#xA;{&#xA;&#x9;bbb value&#xA;&#x9;aaa value&#xA;&#x9;aaa value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sites, snippets and global options&lt;/h3&gt; &#xA;&lt;p&gt;A label &lt;code&gt;caddy&lt;/code&gt; creates a &lt;a href=&#34;https://caddyserver.com/docs/caddyfile/concepts&#34;&gt;site block&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy: example.com&#xA;caddy.respond: &#34;Hello World&#34; 200&#xA;↓&#xA;example.com {&#xA;&#x9;respond &#34;Hello World&#34; 200&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or a &lt;a href=&#34;https://caddyserver.com/docs/caddyfile/concepts#snippets&#34;&gt;snippet&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy: (encode)&#xA;caddy.encode: zstd gzip&#xA;↓&#xA;(encode) {&#xA;&#x9;encode zstd gzip&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to isolate Caddy configurations using suffix _&amp;lt;number&amp;gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy_0: (snippet)&#xA;caddy_0.tls: internal&#xA;caddy_1: site-a.com&#xA;caddy_1.import: snippet&#xA;caddy_2: site-b.com&#xA;caddy_2.import: snippet&#xA;↓&#xA;(snippet) {&#xA;&#x9;tls internal&#xA;}&#xA;site_a {&#xA;&#x9;import snippet&#xA;}&#xA;site_b {&#xA;&#x9;import snippet&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://caddyserver.com/docs/caddyfile/options&#34;&gt;Global options&lt;/a&gt; can be defined by not setting any value for &lt;code&gt;caddy&lt;/code&gt;. They can be set in any container/service, including caddy-docker-proxy itself. &lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/examples/standalone.yaml#L19&#34;&gt;Here is an example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.email: you@example.com&#xA;↓&#xA;{&#xA;&#x9;email you@example.com&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://caddyserver.com/docs/caddyfile/matchers#named-matchers&#34;&gt;Named matchers&lt;/a&gt; can be created using &lt;code&gt;@&lt;/code&gt; inside labels:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy: localhost&#xA;caddy.@match.path: /sourcepath /sourcepath/*&#xA;caddy.reverse_proxy: @match localhost:6001&#xA;↓&#xA;localhost {&#xA;&#x9;@match {&#xA;&#x9;&#x9;path /sourcepath /sourcepath/*&#xA;&#x9;}&#xA;&#x9;reverse_proxy @match localhost:6001&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Go templates&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/text/template/&#34;&gt;Golang templates&lt;/a&gt; can be used inside label values to increase flexibility. From templates, you have access to current Docker resource information. But, keep in mind that the structure that describes a Docker container is different from a service.&lt;/p&gt; &#xA;&lt;p&gt;While you can access a service name like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.respond: /info &#34;{{.Spec.Name}}&#34;&#xA;↓&#xA;respond /info &#34;myservice&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The equivalent to access a container name would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.respond: /info &#34;{{index .Names 0}}&#34;&#xA;↓&#xA;respond /info &#34;mycontainer&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sometimes it&#39;s not possile to have labels with empty values, like when using some UI to manage Docker. If that&#39;s the case, you can also use our support for go lang templates to generate empty labels.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.directive: {{&#34;&#34;}}&#xA;↓&#xA;directive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Template functions&lt;/h2&gt; &#xA;&lt;p&gt;The following functions are available for use inside templates:&lt;/p&gt; &#xA;&lt;h3&gt;upstreams&lt;/h3&gt; &#xA;&lt;p&gt;Returns all addresses for the current Docker resource separated by whitespace.&lt;/p&gt; &#xA;&lt;p&gt;For services, that would be the service DNS name when &lt;strong&gt;proxy-service-tasks&lt;/strong&gt; is &lt;strong&gt;false&lt;/strong&gt;, or all running tasks IPs when &lt;strong&gt;proxy-service-tasks&lt;/strong&gt; is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For containers, that would be the container IPs.&lt;/p&gt; &#xA;&lt;p&gt;Only containers/services that are connected to Caddy ingress networks are used.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; caddy docker proxy does a best effort to automatically detect what are the ingress networks. But that logic fails on some scenarios: &lt;a href=&#34;https://github.com/lucaslorentz/caddy-docker-proxy/issues/207&#34;&gt;#207&lt;/a&gt;. To have a more resilient solution, you can manually configure Caddy ingress network using CLI option &lt;code&gt;ingress-networks&lt;/code&gt;, environment variable &lt;code&gt;CADDY_INGRESS_NETWORKS&lt;/code&gt;. You can also specify the ingress network per container/service by adding to it a label &lt;code&gt;caddy_ingress_network&lt;/code&gt; with the network name.&lt;/p&gt; &#xA;&lt;p&gt;Usage: &lt;code&gt;upstreams [http|https] [port]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.reverse_proxy: {{upstreams}}&#xA;↓&#xA;reverse_proxy 192.168.0.1 192.168.0.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.reverse_proxy: {{upstreams https}}&#xA;↓&#xA;reverse_proxy https://192.168.0.1 https://192.168.0.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.reverse_proxy: {{upstreams 8080}}&#xA;↓&#xA;reverse_proxy 192.168.0.1:8080 192.168.0.2:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.reverse_proxy: {{upstreams http 8080}}&#xA;↓&#xA;reverse_proxy http://192.168.0.1:8080 http://192.168.0.2:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; Be carefull with quotes around upstreams. Quotes should only be added when using yaml.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;caddy.reverse_proxy: &#34;{{upstreams}}&#34;&#xA;↓&#xA;reverse_proxy &#34;192.168.0.1 192.168.0.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Proxying all requests to a domain to the container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;caddy: example.com&#xA;caddy.reverse_proxy: {{upstreams}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Proxying all requests to a domain to a subpath in the container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;caddy: example.com&#xA;caddy.rewrite: * /target{path}&#xA;caddy.reverse_proxy: {{upstreams}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Proxying requests matching a path, while stripping that path prefix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;caddy: example.com&#xA;caddy.handle_path: /source/*&#xA;caddy.handle_path.0_reverse_proxy: {{upstreams}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Proxying requests matching a path, rewriting to different path prefix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;caddy: example.com&#xA;caddy.handle_path: /source/*&#xA;caddy.handle_path.0_rewrite: * /target{uri}&#xA;caddy.handle_path.1_reverse_proxy: {{upstreams}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Proxying all websocket requests, and all requests to &lt;code&gt;/api*&lt;/code&gt;, to the container&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;caddy: example.com&#xA;caddy.@ws.0_header: Connection *Upgrade*&#xA;caddy.@ws.1_header: Upgrade websocket&#xA;caddy.0_reverse_proxy: @ws {{upstreams}}&#xA;caddy.1_reverse_proxy: /api* {{upstreams}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Proxying multiple domains, with certificates for each&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;caddy: example.com, example.org, www.example.com, www.example.org&#xA;caddy.reverse_proxy: {{upstreams}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;More community-maintained examples are available in the &lt;a href=&#34;https://github.com/lucaslorentz/caddy-docker-proxy/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docker configs&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: This is for Docker Swarm only. Alternatively, use &lt;code&gt;CADDY_DOCKER_CADDYFILE_PATH&lt;/code&gt; or &lt;code&gt;-caddyfile-path&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also add raw text to your Caddyfile using Docker configs. Just add Caddy label prefix to your configs and the whole config content will be inserted at the beginning of the generated Caddyfile, outside any server blocks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/examples/standalone.yaml#L4&#34;&gt;Here is an example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Proxying services vs containers&lt;/h2&gt; &#xA;&lt;p&gt;Caddy docker proxy is able to proxy to swarm services or raw containers. Both features are always enabled, and what will differentiate the proxy target is where you define your labels.&lt;/p&gt; &#xA;&lt;h3&gt;Services&lt;/h3&gt; &#xA;&lt;p&gt;To proxy swarm services, labels should be defined at service level. In a docker-compose file, labels should be &lt;em&gt;inside&lt;/em&gt; &lt;code&gt;deploy&lt;/code&gt;, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;services:&#xA;  foo:&#xA;    deploy:&#xA;      labels:&#xA;        caddy: service.example.com&#xA;        caddy.reverse_proxy: {{upstreams}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Caddy will use service DNS name as target or all service tasks IPs, depending on configuration &lt;strong&gt;proxy-service-tasks&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Containers&lt;/h3&gt; &#xA;&lt;p&gt;To proxy containers, labels should be defined at container level. In a docker-compose file, labels should be &lt;em&gt;outside&lt;/em&gt; &lt;code&gt;deploy&lt;/code&gt;, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;services:&#xA;  foo:&#xA;    labels:&#xA;      caddy: service.example.com&#xA;      caddy.reverse_proxy: {{upstreams}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Execution modes&lt;/h2&gt; &#xA;&lt;p&gt;Each caddy docker proxy instance can be executed in one of the following modes.&lt;/p&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;Acts as a proxy to your Docker resources. The server starts without any configuration, and will not serve anything until it is configured by a &#34;controller&#34;.&lt;/p&gt; &#xA;&lt;p&gt;In order to make a server discoverable and configurable by controllers, you need to mark it with label &lt;code&gt;caddy_controlled_server&lt;/code&gt; and define the controller network via CLI option &lt;code&gt;controller-network&lt;/code&gt; or environment variable &lt;code&gt;CADDY_CONTROLLER_NETWORK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Server instances doesn&#39;t need access to Docker host socket and you can run it in manager or worker nodes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/examples/distributed.yaml#L5&#34;&gt;Configuration example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Controller&lt;/h3&gt; &#xA;&lt;p&gt;Controller monitors your Docker cluster, generates Caddy configuration and pushes to all servers it finds in your Docker cluster.&lt;/p&gt; &#xA;&lt;p&gt;When controller instances are connected to more than one network, it is also necessary to define the controller network via CLI option &lt;code&gt;controller-network&lt;/code&gt; or environment variable &lt;code&gt;CADDY_CONTROLLER_NETWORK&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Controller instances require access to Docker host socket.&lt;/p&gt; &#xA;&lt;p&gt;A single controller instance can configure all server instances in your cluster.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/examples/distributed.yaml#L21&#34;&gt;Configuration example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Standalone (default)&lt;/h3&gt; &#xA;&lt;p&gt;This mode executes a controller and a server in the same instance and doesn&#39;t require additional configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/lucaslorentz/caddy-docker-proxy/master/examples/standalone.yaml#L11&#34;&gt;Configuration example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Caddy CLI&lt;/h2&gt; &#xA;&lt;p&gt;This plugin extends caddy&#39;s CLI with the command &lt;code&gt;caddy docker-proxy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;caddy help docker-proxy&lt;/code&gt; to see all available flags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage of docker-proxy:&#xA;  --caddyfile-path string&#xA;        Path to a base Caddyfile that will be extended with Docker sites&#xA;  --envfile&#xA;        Path to an environment file with environment variables in the KEY=VALUE format to load into the Caddy process&#xA;  --controller-network string&#xA;        Network allowed to configure Caddy server in CIDR notation. Ex: 10.200.200.0/24&#xA;  --ingress-networks string&#xA;        Comma separated name of ingress networks connecting Caddy servers to containers.&#xA;        When not defined, networks attached to controller container are considered ingress networks&#xA;  --docker-sockets&#xA;        Comma separated docker sockets&#xA;        When not defined, DOCKER_HOST (or default docker socket if DOCKER_HOST not defined)&#xA;  --docker-certs-path&#xA;        Comma separated cert path, you could use empty value when no cert path for the concern index docker socket like cert_path0,,cert_path2&#xA;  --docker-apis-version&#xA;        Comma separated apis version, you could use empty value when no api version for the concern index docker socket like cert_path0,,cert_path2&#xA;  --label-prefix string&#xA;        Prefix for Docker labels (default &#34;caddy&#34;)&#xA;  --mode&#xA;        Which mode this instance should run: standalone | controller | server&#xA;  --polling-interval duration&#xA;        Interval Caddy should manually check Docker for a new Caddyfile (default 30s)&#xA;  --event-throttle-interval duration&#xA;        Interval to throttle caddyfile updates triggered by docker events (default 100ms)&#xA;  --process-caddyfile&#xA;        Process Caddyfile before loading it, removing invalid servers (default true)&#xA;  --proxy-service-tasks&#xA;        Proxy to service tasks instead of service load balancer (default true)&#xA;  --scan-stopped-containers&#xA;        Scan stopped containers and use their labels for Caddyfile generation (default false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Those flags can also be set via environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CADDY_DOCKER_CADDYFILE_PATH=&amp;lt;string&amp;gt;&#xA;CADDY_DOCKER_ENVFILE=&amp;lt;string&amp;gt;&#xA;CADDY_CONTROLLER_NETWORK=&amp;lt;string&amp;gt;&#xA;CADDY_INGRESS_NETWORKS=&amp;lt;string&amp;gt;&#xA;CADDY_DOCKER_SOCKETS=&amp;lt;string&amp;gt;&#xA;CADDY_DOCKER_CERTS_PATH=&amp;lt;string&amp;gt;&#xA;CADDY_DOCKER_APIS_VERSION=&amp;lt;string&amp;gt;&#xA;CADDY_DOCKER_LABEL_PREFIX=&amp;lt;string&amp;gt;&#xA;CADDY_DOCKER_MODE=&amp;lt;string&amp;gt;&#xA;CADDY_DOCKER_POLLING_INTERVAL=&amp;lt;duration&amp;gt;&#xA;CADDY_DOCKER_PROCESS_CADDYFILE=&amp;lt;bool&amp;gt;&#xA;CADDY_DOCKER_PROXY_SERVICE_TASKS=&amp;lt;bool&amp;gt;&#xA;CADDY_DOCKER_SCAN_STOPPED_CONTAINERS=&amp;lt;bool&amp;gt;&#xA;CADDY_DOCKER_NO_SCOPE=&amp;lt;bool, default scope used&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;strong&gt;examples&lt;/strong&gt; folder to see how to set them on a Docker Compose file.&lt;/p&gt; &#xA;&lt;h2&gt;Docker images&lt;/h2&gt; &#xA;&lt;p&gt;Docker images are available at Docker hub: &lt;a href=&#34;https://hub.docker.com/r/lucaslorentz/caddy-docker-proxy/&#34;&gt;https://hub.docker.com/r/lucaslorentz/caddy-docker-proxy/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Choosing the version numbers&lt;/h3&gt; &#xA;&lt;p&gt;The safest approach is to use a full version numbers like 0.1.3. That way you lock to a specific build version that works well for you.&lt;/p&gt; &#xA;&lt;p&gt;But you can also use partial version numbers like 0.1. That means you will receive the most recent 0.1.x image. You will automatically receive updates without breaking changes.&lt;/p&gt; &#xA;&lt;h3&gt;Chosing between default or alpine images&lt;/h3&gt; &#xA;&lt;p&gt;Our default images are very small and safe because they only contain Caddy executable. But they&#39;re also quite hard to troubleshoot because they don&#39;t have shell or any other Linux utilities like curl or dig.&lt;/p&gt; &#xA;&lt;p&gt;The alpine images variant are based on the Linux Alpine image, a very small Linux distribution with shell and basic utilities tools. Use &lt;code&gt;-alpine&lt;/code&gt; images if you want to trade security and small size for a better troubleshooting experience.&lt;/p&gt; &#xA;&lt;h3&gt;CI images&lt;/h3&gt; &#xA;&lt;p&gt;Images with the &lt;code&gt;ci&lt;/code&gt; tag suffix means they were automatically generated by automated builds. CI images reflect the current state of master branch and their stability is not guaranteed. You may use CI images if you want to help testing the latest features before they&#39;re officially released.&lt;/p&gt; &#xA;&lt;h3&gt;ARM architecture images&lt;/h3&gt; &#xA;&lt;p&gt;Currently we provide linux x86_64 images by default.&lt;/p&gt; &#xA;&lt;p&gt;You can also find images for other architectures like &lt;code&gt;arm32v6&lt;/code&gt; images that can be used on Raspberry Pi.&lt;/p&gt; &#xA;&lt;h3&gt;Windows images&lt;/h3&gt; &#xA;&lt;p&gt;We recently introduced experimental windows containers images with the tag suffix &lt;code&gt;nanoserver-ltsc2022&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Be aware that this needs to be tested further.&lt;/p&gt; &#xA;&lt;p&gt;This is an example of how to mount the windows Docker pipe using CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm -it -v //./pipe/docker_engine://./pipe/docker_engine lucaslorentz/caddy-docker-proxy:ci-nanoserver-ltsc2022&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom images&lt;/h3&gt; &#xA;&lt;p&gt;If you need additional Caddy plugins, or need to use a specific version of Caddy, then you may use the &lt;code&gt;builder&lt;/code&gt; variant of the &lt;a href=&#34;https://hub.docker.com/_/caddy&#34;&gt;official Caddy Docker image&lt;/a&gt; to make your own &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The main difference from the instructions on the official image is that you must override &lt;code&gt;CMD&lt;/code&gt; to have the container run using the &lt;code&gt;caddy docker-proxy&lt;/code&gt; command provided by this plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;ARG CADDY_VERSION=2.6.1&#xA;FROM caddy:${CADDY_VERSION}-builder AS builder&#xA;&#xA;RUN xcaddy build \&#xA;    --with github.com/lucaslorentz/caddy-docker-proxy/v2 \&#xA;    --with &amp;lt;additional-plugins&amp;gt;&#xA;&#xA;FROM caddy:${CADDY_VERSION}-alpine&#xA;&#xA;COPY --from=builder /usr/bin/caddy /usr/bin/caddy&#xA;&#xA;CMD [&#34;caddy&#34;, &#34;docker-proxy&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Connecting to Docker Host&lt;/h2&gt; &#xA;&lt;p&gt;The default connection to Docker host varies per platform:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;At Unix: &lt;code&gt;unix:///var/run/docker.sock&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;At Windows: &lt;code&gt;npipe:////./pipe/docker_engine&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can modify Docker connection using the following environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;DOCKER_HOST&lt;/strong&gt;: to set the URL to the Docker server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DOCKER_API_VERSION&lt;/strong&gt;: to set the version of the API to reach, leave empty for latest.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DOCKER_CERT_PATH&lt;/strong&gt;: to load the TLS certificates from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DOCKER_TLS_VERIFY&lt;/strong&gt;: to enable or disable TLS verification; off by default.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Volumes&lt;/h2&gt; &#xA;&lt;p&gt;On a production Docker swarm cluster, it&#39;s &lt;strong&gt;very important&lt;/strong&gt; to store Caddy folder on persistent storage. Otherwise Caddy will re-issue certificates every time it is restarted, exceeding Let&#39;s Encrypt&#39;s quota.&lt;/p&gt; &#xA;&lt;p&gt;To do that, map a persistent Docker volume to &lt;code&gt;/data&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;For resilient production deployments, use multiple Caddy replicas and map &lt;code&gt;/data&lt;/code&gt; folder to a volume that supports multiple mounts, like Network File Sharing Docker volumes plugins.&lt;/p&gt; &#xA;&lt;p&gt;Multiple Caddy instances automatically orchestrate certificate issuing between themselves when sharing &lt;code&gt;/data&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Trying it&lt;/h2&gt; &#xA;&lt;h3&gt;With docker-compose file&lt;/h3&gt; &#xA;&lt;p&gt;Clone this repository.&lt;/p&gt; &#xA;&lt;p&gt;Deploy the compose file to swarm cluster:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker stack deploy -c examples/standalone.yaml caddy-docker-demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wait a bit for services to startup...&lt;/p&gt; &#xA;&lt;p&gt;Now you can access each service/container using different URLs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -k --resolve whoami0.example.com:443:127.0.0.1 https://whoami0.example.com&#xA;$ curl -k --resolve whoami1.example.com:443:127.0.0.1 https://whoami1.example.com&#xA;$ curl -k --resolve whoami2.example.com:443:127.0.0.1 https://whoami2.example.com&#xA;$ curl -k --resolve whoami3.example.com:443:127.0.0.1 https://whoami3.example.com&#xA;$ curl -k --resolve config.example.com:443:127.0.0.1 https://config.example.com&#xA;$ curl -k --resolve echo0.example.com:443:127.0.0.1 https://echo0.example.com/sourcepath/something&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After testing, delete the demo stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker stack rm caddy-docker-demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With run commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ docker run --name caddy -d -p 443:443 -v /var/run/docker.sock:/var/run/docker.sock lucaslorentz/caddy-docker-proxy:ci-alpine&#xA;&#xA;$ docker run --name whoami0 -d -l caddy=whoami0.example.com -l &#34;caddy.reverse_proxy={{upstreams 80}}&#34; -l caddy.tls=internal traefik/whoami&#xA;&#xA;$ docker run --name whoami1 -d -l caddy=whoami1.example.com -l &#34;caddy.reverse_proxy={{upstreams 80}}&#34; -l caddy.tls=internal traefik/whoami&#xA;&#xA;$ curl -k --resolve whoami0.example.com:443:127.0.0.1 https://whoami0.example.com&#xA;$ curl -k --resolve whoami1.example.com:443:127.0.0.1 https://whoami1.example.com&#xA;&#xA;$ docker rm -f caddy whoami0 whoami1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building it&lt;/h2&gt; &#xA;&lt;p&gt;You can build Caddy using &lt;a href=&#34;https://github.com/caddyserver/xcaddy&#34;&gt;xcaddy&lt;/a&gt; or &lt;a href=&#34;https://hub.docker.com/_/caddy&#34;&gt;caddy docker builder&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use module name &lt;strong&gt;github.com/lucaslorentz/caddy-docker-proxy/v2&lt;/strong&gt; to add this plugin to your build.&lt;/p&gt;</summary>
  </entry>
</feed>