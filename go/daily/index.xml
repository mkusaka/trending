<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-01T01:37:49Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>a1phaboy/FastjsonScan</title>
    <updated>2022-10-01T01:37:49Z</updated>
    <id>tag:github.com,2022-10-01:/a1phaboy/FastjsonScan</id>
    <link href="https://github.com/a1phaboy/FastjsonScan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastjson扫描器，可识别版本、依赖库、autoType状态等。A tool to distinguish fastjson ,version and dependency&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://socialify.git.ci/a1phaboy/FastjsonScan/image?font=Source%20Code%20Pro&amp;amp;forks=1&amp;amp;issues=1&amp;amp;language=1&amp;amp;name=1&amp;amp;owner=1&amp;amp;pattern=Circuit%20Board&amp;amp;stargazers=1&amp;amp;theme=Light&#34; alt=&#34;FastjsonScan&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FastjsonScan&lt;/h1&gt; &#xA;&lt;p&gt;A tool to fast detect fastjson‘s deserialize vuln&lt;/p&gt; &#xA;&lt;h2&gt;0x00 FastjsonScan now is public 🎉🎉🎉&lt;/h2&gt; &#xA;&lt;h3&gt;WHAT?&lt;/h3&gt; &#xA;&lt;p&gt;FastjsonExpFramework一共分为探测、利用、混淆、bypass JDK等多个模块，而FastjsonScan 是其中一部分，通过报错、请求、依赖库等探测实现多方面定位fastjson版本&lt;/p&gt; &#xA;&lt;h3&gt;WHY?&lt;/h3&gt; &#xA;&lt;p&gt;现有的fastjson扫描器无法满足迭代速度如此快的fastjson版本，大部分扫描器早已无人维护，已不适配高版本。我将持续优化此系列项目。&lt;/p&gt; &#xA;&lt;h3&gt;HOW?&lt;/h3&gt; &#xA;&lt;p&gt;目前fastjsonScan支持&lt;br&gt; ☑️支持批量接口探测&lt;br&gt; ☑️1.2.83及以下的区间探测(主要分为48,68,80三大安全版本)&lt;br&gt; ☑️支持报错回显探测&lt;br&gt; ☑️DNS出网检测&lt;br&gt; ☑️支持AutoType状态检测&lt;br&gt; ☑️依赖库检测&lt;br&gt; ☑️延迟检测&lt;/p&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;p&gt;适配内网环境下的探测&lt;br&gt; 适配webpack做自动化扫描&lt;br&gt; 完善DNS回显探测依赖库的探测&lt;br&gt; 完善在61版本以上并且不出网的检测方式&lt;br&gt; 完善其他不同json解析库的探测 完善相关依赖库检测&lt;/p&gt; &#xA;&lt;h3&gt;如果在使用过程中有任何问题欢迎提出issues👏&lt;/h3&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/a1phaboy/FastjsonScan/master/img.png&#34; alt=&#34;img.png&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/a1phaboy/FastjsonScan/master/img_1.png&#34; alt=&#34;img_1.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;FastjsonScan [-u] url [-f] urls.txt [-o] result.txt&lt;/strong&gt;&lt;br&gt; -u 目标url，注意需要加上http/https&lt;br&gt; -f 目标url文件，可以扫描多条url&lt;br&gt; -o 结果保存文件，默认在当前文件夹下的results.txt文件&lt;/p&gt; &#xA;&lt;h2&gt;0x01 Dev Notes&lt;/h2&gt; &#xA;&lt;h3&gt;2022-09-05 0.5&lt;/h3&gt; &#xA;&lt;p&gt;Framework分离出scan模块&lt;/p&gt; &#xA;&lt;h3&gt;2022-09-05 0.4 beta&lt;/h3&gt; &#xA;&lt;p&gt;☑️重构版本探测模块，将判断fastjson,jackson,org.json,gson分离出来做识别模块&lt;/p&gt; &#xA;&lt;p&gt;TODO:&lt;br&gt; 利用dnslog探测依赖库&lt;br&gt; 利用模块编写&lt;/p&gt; &#xA;&lt;h3&gt;2022-09-04 0.35 beta&lt;/h3&gt; &#xA;&lt;p&gt;☑️修复了48版本的探测payload,该payload在进行80版本的payload探测之后，会触发tojavaobject从而将java.net.InetAddress类加入白名单，当进行第二次版本探测时会产生误报&lt;br&gt; ☑️版本检测会优先判断AutoType是否开启，如果开启只能模糊区分48以下及以上&lt;/p&gt; &#xA;&lt;h3&gt;2022-09-03 0.34 beta&lt;/h3&gt; &#xA;&lt;p&gt;☑️重构了版本探测模块，由之前精确探测分成了3块（48，68，80）&lt;br&gt; ☑️重写了判断版本的逻辑&lt;br&gt; ☑️补充了80版本与83版本的探测&lt;/p&gt; &#xA;&lt;p&gt;TODO:&lt;br&gt; 目标依赖库环境的探测&lt;br&gt; AutoType的状态对版本探测有影响，需要做处理&lt;/p&gt; &#xA;&lt;h3&gt;2022-09-02 0.33 beta&lt;/h3&gt; &#xA;&lt;p&gt;☑️修改了含有jackson字段的报错检测逻辑&lt;br&gt; ☑️DNS检测新增10秒的等待时间，防止网络原因导致误报&lt;/p&gt; &#xA;&lt;h3&gt;2022-09-01 0.32 beta&lt;/h3&gt; &#xA;&lt;p&gt;☑️添加多条gadget，部分gadget复现不成功，根据目标的环境添加&lt;br&gt; ☑️修改了延迟探测的bug&lt;br&gt; ☑️添加了URLReader的探测链&lt;/p&gt; &#xA;&lt;h3&gt;2022-08-07 0.31 beta&lt;/h3&gt; &#xA;&lt;p&gt;☑️增加了几条gadgets&lt;/p&gt; &#xA;&lt;h3&gt;2022-08-06 0.3 beta&lt;/h3&gt; &#xA;&lt;p&gt;☑️完成了AutoType探测模块&lt;/p&gt; &#xA;&lt;h3&gt;2022-08-05 0.2 beta&lt;/h3&gt; &#xA;&lt;p&gt;☑️完成了探测模块的主要部分：包括报错探测，DNS探测和延迟探测&lt;/p&gt; &#xA;&lt;h2&gt;0x02参考&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/safe6Sec/Fastjson&#34;&gt;https://github.com/safe6Sec/Fastjson&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/hosch3n/FastjsonVulns&#34;&gt;https://github.com/hosch3n/FastjsonVulns&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/iSafeBlue/fastjson-autotype-bypass-demo&#34;&gt;https://github.com/iSafeBlue/fastjson-autotype-bypass-demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0x03鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;非常感谢 &lt;a href=&#34;https://github.com/iSafeBlue&#34;&gt;blue&lt;/a&gt; 浅蓝师傅在kcon上的精彩分享&lt;br&gt; 非常感谢 &lt;a href=&#34;https://github.com/hosch3n&#34;&gt;hosch3n&lt;/a&gt; 李师傅的答疑解惑&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qax-os/excelize</title>
    <updated>2022-10-01T01:37:49Z</updated>
    <id>tag:github.com,2022-10-01:/qax-os/excelize</id>
    <link href="https://github.com/qax-os/excelize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go language library for reading and writing Microsoft Excel™ (XLAM / XLSM / XLSX / XLTM / XLTX) spreadsheets&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;650&#34; src=&#34;https://raw.githubusercontent.com/qax-os/excelize/master/excelize.svg?sanitize=true&#34; alt=&#34;Excelize logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/xuri/excelize/actions/workflows/go.yml&#34;&gt;&lt;img src=&#34;https://github.com/xuri/excelize/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/qax-os/excelize&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/qax-os/excelize/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/xuri/excelize/v2&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/xuri/excelize/v2&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/xuri/excelize/v2&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&#34; alt=&#34;go.dev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-bsd-orange.svg?sanitize=true&#34; alt=&#34;Licenses&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/paypalme/xuri&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Excelize&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Excelize is a library written in pure Go providing a set of functions that allow you to write to and read from XLAM / XLSM / XLSX / XLTM / XLTX files. Supports reading and writing spreadsheet documents generated by Microsoft Excel™ 2007 and later. Supports complex components by high compatibility, and provided streaming API for generating or reading data from a worksheet with huge amounts of data. This library needs Go version 1.15 or later. The full API docs can be seen using go&#39;s built-in documentation tool, or online at &lt;a href=&#34;https://pkg.go.dev/github.com/xuri/excelize/v2&#34;&gt;go.dev&lt;/a&gt; and &lt;a href=&#34;https://xuri.me/excelize/&#34;&gt;docs reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/xuri/excelize&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If your packages are managed using &lt;a href=&#34;https://go.dev/blog/using-go-modules&#34;&gt;Go Modules&lt;/a&gt;, please install with following command.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/xuri/excelize/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create spreadsheet&lt;/h3&gt; &#xA;&lt;p&gt;Here is a minimal example usage that will create spreadsheet file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/xuri/excelize/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    f := excelize.NewFile()&#xA;    // Create a new sheet.&#xA;    index := f.NewSheet(&#34;Sheet2&#34;)&#xA;    // Set value of a cell.&#xA;    f.SetCellValue(&#34;Sheet2&#34;, &#34;A2&#34;, &#34;Hello world.&#34;)&#xA;    f.SetCellValue(&#34;Sheet1&#34;, &#34;B2&#34;, 100)&#xA;    // Set active sheet of the workbook.&#xA;    f.SetActiveSheet(index)&#xA;    // Save spreadsheet by the given path.&#xA;    if err := f.SaveAs(&#34;Book1.xlsx&#34;); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading spreadsheet&lt;/h3&gt; &#xA;&lt;p&gt;The following constitutes the bare to read a spreadsheet document.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/xuri/excelize/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    f, err := excelize.OpenFile(&#34;Book1.xlsx&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    defer func() {&#xA;        // Close the spreadsheet.&#xA;        if err := f.Close(); err != nil {&#xA;            fmt.Println(err)&#xA;        }&#xA;    }()&#xA;    // Get value from cell by given worksheet name and cell reference.&#xA;    cell, err := f.GetCellValue(&#34;Sheet1&#34;, &#34;B2&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    fmt.Println(cell)&#xA;    // Get all the rows in the Sheet1.&#xA;    rows, err := f.GetRows(&#34;Sheet1&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    for _, row := range rows {&#xA;        for _, colCell := range row {&#xA;            fmt.Print(colCell, &#34;\t&#34;)&#xA;        }&#xA;        fmt.Println()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add chart to spreadsheet file&lt;/h3&gt; &#xA;&lt;p&gt;With Excelize chart generation and management is as easy as a few lines of code. You can build charts based on data in your worksheet or generate charts without any data in your worksheet at all.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img width=&#34;650&#34; src=&#34;https://raw.githubusercontent.com/qax-os/excelize/master/test/images/chart.png&#34; alt=&#34;Excelize&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/xuri/excelize/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    categories := map[string]string{&#xA;        &#34;A2&#34;: &#34;Small&#34;, &#34;A3&#34;: &#34;Normal&#34;, &#34;A4&#34;: &#34;Large&#34;,&#xA;        &#34;B1&#34;: &#34;Apple&#34;, &#34;C1&#34;: &#34;Orange&#34;, &#34;D1&#34;: &#34;Pear&#34;}&#xA;    values := map[string]int{&#xA;        &#34;B2&#34;: 2, &#34;C2&#34;: 3, &#34;D2&#34;: 3, &#34;B3&#34;: 5, &#34;C3&#34;: 2, &#34;D3&#34;: 4, &#34;B4&#34;: 6, &#34;C4&#34;: 7, &#34;D4&#34;: 8}&#xA;    f := excelize.NewFile()&#xA;    for k, v := range categories {&#xA;        f.SetCellValue(&#34;Sheet1&#34;, k, v)&#xA;    }&#xA;    for k, v := range values {&#xA;        f.SetCellValue(&#34;Sheet1&#34;, k, v)&#xA;    }&#xA;    if err := f.AddChart(&#34;Sheet1&#34;, &#34;E1&#34;, `{&#xA;        &#34;type&#34;: &#34;col3DClustered&#34;,&#xA;        &#34;series&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;Sheet1!$A$2&#34;,&#xA;            &#34;categories&#34;: &#34;Sheet1!$B$1:$D$1&#34;,&#xA;            &#34;values&#34;: &#34;Sheet1!$B$2:$D$2&#34;&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;Sheet1!$A$3&#34;,&#xA;            &#34;categories&#34;: &#34;Sheet1!$B$1:$D$1&#34;,&#xA;            &#34;values&#34;: &#34;Sheet1!$B$3:$D$3&#34;&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;Sheet1!$A$4&#34;,&#xA;            &#34;categories&#34;: &#34;Sheet1!$B$1:$D$1&#34;,&#xA;            &#34;values&#34;: &#34;Sheet1!$B$4:$D$4&#34;&#xA;        }],&#xA;        &#34;title&#34;:&#xA;        {&#xA;            &#34;name&#34;: &#34;Fruit 3D Clustered Column Chart&#34;&#xA;        }&#xA;    }`); err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    // Save spreadsheet by the given path.&#xA;    if err := f.SaveAs(&#34;Book1.xlsx&#34;); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add picture to spreadsheet file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;    _ &#34;image/gif&#34;&#xA;    _ &#34;image/jpeg&#34;&#xA;    _ &#34;image/png&#34;&#xA;&#xA;    &#34;github.com/xuri/excelize/v2&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    f, err := excelize.OpenFile(&#34;Book1.xlsx&#34;)&#xA;    if err != nil {&#xA;        fmt.Println(err)&#xA;        return&#xA;    }&#xA;    defer func() {&#xA;        // Close the spreadsheet.&#xA;        if err := f.Close(); err != nil {&#xA;            fmt.Println(err)&#xA;        }&#xA;    }()&#xA;    // Insert a picture.&#xA;    if err := f.AddPicture(&#34;Sheet1&#34;, &#34;A2&#34;, &#34;image.png&#34;, &#34;&#34;); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    // Insert a picture to worksheet with scaling.&#xA;    if err := f.AddPicture(&#34;Sheet1&#34;, &#34;D2&#34;, &#34;image.jpg&#34;,&#xA;        `{&#34;x_scale&#34;: 0.5, &#34;y_scale&#34;: 0.5}`); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    // Insert a picture offset in the cell with printing support.&#xA;    if err := f.AddPicture(&#34;Sheet1&#34;, &#34;H2&#34;, &#34;image.gif&#34;, `{&#xA;        &#34;x_offset&#34;: 15,&#xA;        &#34;y_offset&#34;: 10,&#xA;        &#34;print_obj&#34;: true,&#xA;        &#34;lock_aspect_ratio&#34;: false,&#xA;        &#34;locked&#34;: false&#xA;    }`); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;    // Save the spreadsheet with the origin path.&#xA;    if err = f.Save(); err != nil {&#xA;        fmt.Println(err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Open a pull request to fix a bug, or open an issue to discuss a new feature or change. XML is compliant with &lt;a href=&#34;https://www.ecma-international.org/publications-and-standards/standards/ecma-376/&#34;&gt;part 1 of the 5th edition of the ECMA-376 Standard for Office Open XML&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licenses&lt;/h2&gt; &#xA;&lt;p&gt;This program is under the terms of the BSD 3-Clause License. See &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;https://opensource.org/licenses/BSD-3-Clause&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The Excel logo is a trademark of &lt;a href=&#34;https://aka.ms/trademarks-usage&#34;&gt;Microsoft Corporation&lt;/a&gt;. This artwork is an adaptation.&lt;/p&gt; &#xA;&lt;p&gt;gopher.{ai,svg,png} was created by &lt;a href=&#34;https://twitter.com/tenntenn&#34;&gt;Takuya Ueda&lt;/a&gt;. Licensed under the &lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons 3.0 Attributions license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trufflesecurity/trufflehog</title>
    <updated>2022-10-01T01:37:49Z</updated>
    <id>tag:github.com,2022-10-01:/trufflesecurity/trufflehog</id>
    <link href="https://github.com/trufflesecurity/trufflehog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Find credentials all over the place&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GoReleaser Logo&#34; src=&#34;https://storage.googleapis.com/trufflehog-static-sources/pixel_pig.png&#34; height=&#34;140&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;TruffleHog&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Find leaked credentials.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/actions&#34;&gt;&lt;img src=&#34;https://github.com/trufflesecurity/trufflehog/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/trufflesecurity/trufflehog/v3&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/trufflesecurity/trufflehog/v3&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-AGPL--3.0-brightgreen&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/directory-file-count/trufflesecurity/truffleHog/pkg/detectors?label=Total%20Detectors&amp;amp;type=dir&#34; alt=&#34;Total Detectors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Join The Slack&lt;/h2&gt; &#xA;&lt;p&gt;Have questions? Feedback? Jump in slack and hang out with us&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/trufflehog-community/shared_invite/zt-pw2qbi43-Aa86hkiimstfdKH9UCpPzQ&#34;&gt;https://join.slack.com/t/trufflehog-community/shared_invite/zt-pw2qbi43-Aa86hkiimstfdKH9UCpPzQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://storage.googleapis.com/truffle-demos/non-interactive.svg?sanitize=true&#34; alt=&#34;GitHub scanning demo&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --org=trufflesecurity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;What&#39;s new in v3?&lt;/h1&gt; &#xA;&lt;p&gt;TruffleHog v3 is a complete rewrite in Go with many new powerful features.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We&#39;ve &lt;strong&gt;added over 700 credential detectors that support active verification against their respective APIs&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;ve also added native &lt;strong&gt;support for scanning GitHub, GitLab, filesystems, and S3&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instantly verify private keys&lt;/strong&gt; against millions of github users and &lt;strong&gt;billions&lt;/strong&gt; of TLS certificates using our &lt;a href=&#34;https://trufflesecurity.com/blog/driftwood&#34;&gt;Driftwood&lt;/a&gt; technology.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is credential verification?&lt;/h2&gt; &#xA;&lt;p&gt;For every potential credential that is detected, we&#39;ve painstakingly implemented programatic verification against the API that we think it belongs to. Verification eliminates false positives. For example, the &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/pkg/detectors/aws/aws.go&#34;&gt;AWS credential detector&lt;/a&gt; performs a &lt;code&gt;GetCallerIdentity&lt;/code&gt; API call against the AWS API to verify if an AWS credential is active.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Several options:&lt;/p&gt; &#xA;&lt;h3&gt;1. Go&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/trufflesecurity/trufflehog.git&#xA;&#xA;cd trufflehog; go install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. &lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/releases&#34;&gt;Release binaries&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;3. Docker&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Apple M1 hardware users should run with &lt;code&gt;docker run --platform linux/arm64&lt;/code&gt; for better performance.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Most users&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Apple M1 users&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;linux/arm64&lt;/code&gt; image is better to run on the M1 than the amd64 image. Even better is running the native darwin binary avilable, but there is not container image for that.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --platform linux/arm64 -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --repo https://github.com/trufflesecurity/test_keys &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. Pip (help wanted)&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to distribute binaries in pip wheels.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a &lt;a href=&#34;https://github.com/Yelp/dumb-init&#34;&gt;project that does it&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Help with setting up this packaging would be appreciated!&lt;/p&gt; &#xA;&lt;h3&gt;5. Brew&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap trufflesecurity/trufflehog&#xA;brew install trufflehog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;TruffleHog has a sub-command for each source of data that you may want to scan:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA; &lt;li&gt;github&lt;/li&gt; &#xA; &lt;li&gt;gitlab&lt;/li&gt; &#xA; &lt;li&gt;S3&lt;/li&gt; &#xA; &lt;li&gt;filesystem&lt;/li&gt; &#xA; &lt;li&gt;syslog&lt;/li&gt; &#xA; &lt;li&gt;file and stdin (coming soon)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each subcommand can have options that you can see with the &lt;code&gt;-h&lt;/code&gt; flag provided to the sub command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ trufflehog git --help&#xA;usage: TruffleHog git [&amp;lt;flags&amp;gt;] &amp;lt;uri&amp;gt;&#xA;&#xA;Find credentials in git repositories.&#xA;&#xA;Flags:&#xA;      --help                     Show context-sensitive help (also try --help-long and --help-man).&#xA;      --debug                    Run in debug mode&#xA;      --version                  Prints trufflehog version.&#xA;  -j, --json                     Output in JSON format.&#xA;      --json-legacy              Use the pre-v3.0 JSON format. Only works with git, gitlab, and github sources.&#xA;      --concurrency=1            Number of concurrent workers.&#xA;      --no-verification          Don&#39;t verify the results.&#xA;      --only-verified            Only output verified results.&#xA;      --print-avg-detector-time  Print the average time spent on each detector.&#xA;      --no-update                Don&#39;t check for updates.&#xA;  -i, --include-paths=INCLUDE-PATHS&#xA;                                 Path to file with newline separated regexes for files to include in scan.&#xA;  -x, --exclude-paths=EXCLUDE-PATHS&#xA;                                 Path to file with newline separated regexes for files to exclude in scan.&#xA;      --since-commit=SINCE-COMMIT&#xA;                                 Commit to start scan from.&#xA;      --branch=BRANCH            Branch to scan.&#xA;      --max-depth=MAX-DEPTH      Maximum depth of commits to scan.&#xA;      --allow                    No-op flag for backwards compat.&#xA;      --entropy                  No-op flag for backwards compat.&#xA;      --regex                    No-op flag for backwards compat.&#xA;&#xA;Args:&#xA;  &amp;lt;uri&amp;gt;  Git repository URL. https://, file://, or ssh:// schema expected.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, to scan a &lt;code&gt;git&lt;/code&gt; repository, start with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ trufflehog git https://github.com/trufflesecurity/trufflehog.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exit Codes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0: No errors and no results were found.&lt;/li&gt; &#xA; &lt;li&gt;1: An error was encountered. Sources may not have completed scans.&lt;/li&gt; &#xA; &lt;li&gt;183: No errors were encountered, but results were found. Will only be returned if &lt;code&gt;--fail&lt;/code&gt; flag is used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Scanning an organization&lt;/h4&gt; &#xA;&lt;p&gt;Try scanning an entire GitHub organization with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -v &#34;$PWD:/pwd&#34; trufflesecurity/trufflehog:latest github --org=trufflesecurity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TruffleHog OSS Github Action&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: TruffleHog OSS&#xA;  uses: trufflesecurity/trufflehog@main&#xA;  with:&#xA;    # Repository path&#xA;    path: &#xA;    # Start scanning from here (usually main branch).&#xA;    base: &#xA;    # Scan commits until here (usually dev branch).&#xA;    head: # optional&#xA;    # Extra args to be passed to the trufflehog cli.&#xA;    extra_args: --debug --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The TruffleHog OSS Github Action can be used to scan a range of commits for leaked credentials. The action will fail if any results are found.&lt;/p&gt; &#xA;&lt;p&gt;For example, to scan the contents of pull requests you could use the following workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Leaked Secrets Scan&#xA;on: [pull_request]&#xA;jobs:&#xA;  TruffleHog:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - name: Checkout code&#xA;        uses: actions/checkout@v3&#xA;        with:&#xA;          fetch-depth: 0&#xA;      - name: TruffleHog OSS&#xA;        uses: trufflesecurity/trufflehog@main&#xA;        with:&#xA;          path: ./&#xA;          base: ${{ github.event.repository.default_branch }}&#xA;          head: HEAD&#xA;          extra_args: --debug --only-verified&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Precommit Hook&lt;/h3&gt; &#xA;&lt;p&gt;Trufflehog can be used in a precommit hook to prevent credentials from leaking before they ever leave your computer. An example &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; is provided (see &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit.com&lt;/a&gt; for installation).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;- repo: local&#xA;  hooks:&#xA;    - id: trufflehog&#xA;      name: TruffleHog&#xA;      description: Detect secrets in your data.&#xA;      entry: bash -c &#39;trufflehog git file://. --only-verified --fail&#39;&#xA;      # For running trufflehog in docker, use the following entry instead:&#xA;      # entry: bash -c &#39;docker run -v &#34;$(pwd):/workdir&#34; -i --rm trufflesecurity/trufflehog:latest git file:///workdir --only-verified --fail&#39;&#xA;      language: system&#xA;      stages: [&#34;commit&#34;, &#34;push&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/trufflesecurity/trufflehog/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=trufflesecurity/trufflehog&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/CONTRIBUTING.md&#34;&gt;contribution guidelines first&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We no longer accept contributions to TruffleHog v2, but that code is available in the &lt;code&gt;v2&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h3&gt;Adding new secret detectors&lt;/h3&gt; &#xA;&lt;p&gt;We have published some &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/hack/docs/Adding_Detectors_external.md&#34;&gt;documentation and tooling to get started on adding new secret detectors&lt;/a&gt;. Let&#39;s improve detection together!&lt;/p&gt; &#xA;&lt;h2&gt;License Change&lt;/h2&gt; &#xA;&lt;p&gt;Since v3.0, TruffleHog is released under a AGPL 3 license, included in &lt;a href=&#34;https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/LICENSE&#34;&gt;&lt;code&gt;LICENSE&lt;/code&gt;&lt;/a&gt;. TruffleHog v3.0 uses none of the previous codebase, but care was taken to preserve backwards compatibility on the command line interface. The work previous to this release is still available licensed under GPL 2.0 in the history of this repository and the previous package releases and tags. A completed CLA is required for us to accept contributions going forward.&lt;/p&gt;</summary>
  </entry>
</feed>