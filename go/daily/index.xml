<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-26T01:30:36Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hacdias/webdav</title>
    <updated>2024-10-26T01:30:36Z</updated>
    <id>tag:github.com,2024-10-26:/hacdias/webdav</id>
    <link href="https://github.com/hacdias/webdav" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and standalone WebDAV server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;webdav&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/hacdias/webdav&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/hacdias/webdav?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hacdias/webdav/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/hacdias/webdav.svg?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/hacdias/webdav&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/hacdias/webdav?style=flat-square&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple and standalone &lt;a href=&#34;https://en.wikipedia.org/wiki/WebDAV&#34;&gt;WebDAV&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;For a manual install, please refer to the &lt;a href=&#34;https://github.com/hacdias/webdav/releases&#34;&gt;releases&lt;/a&gt; page and download the correct binary for your system. Alternatively, you can build or install it from source using the Go toolchain. You can either clone the repository and execute &lt;code&gt;go build&lt;/code&gt;, or directly install it, using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/hacdias/webdav/v5@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Docker images are provided on both &lt;a href=&#34;https://github.com/hacdias/webdav/pkgs/container/webdav&#34;&gt;GitHub&#39;s registry&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/r/hacdias/webdav&#34;&gt;Docker Hub&lt;/a&gt;. You can pull the images using one of the following two commands. Note that this commands pull the latest released version. You can use specific tags to pin specific versions, or use &lt;code&gt;main&lt;/code&gt; for the development branch.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# GitHub Registry&#xA;docker pull ghcr.io/hacdias/webdav:latest&#xA;&#xA;# Docker Hub&#xA;docker pull hacdias/webdav:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For usage information regarding the CLI, run &lt;code&gt;webdav --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;To use with Docker, you need to provide a configuration file and mount the data directories. For example, let&#39;s take the following configuration file that simply sets the port to &lt;code&gt;6060&lt;/code&gt; and the directory to &lt;code&gt;/data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;port: 6060&#xA;directory: /data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now run with the following Docker command, where you mount the configuration file inside the container, and the data directory too, as well as forwarding the port 6060. You will need to change this to match your own configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run \&#xA;  -p 6060:6060 \&#xA;  -v $(pwd)/config.yml:/config.yml:ro \&#xA;  -v $(pwd)/data:/data \&#xA;  ghcr.io/hacdias/webdav -c /config.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration can be provided as a YAML, JSON or TOML file. Below is an example of a YAML configuration file with all the options available, as well as what they mean.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;address: 0.0.0.0&#xA;port: 6065&#xA;&#xA;# TLS-related settings if you want to enable TLS directly.&#xA;tls: false&#xA;cert: cert.pem&#xA;key: key.pem&#xA;&#xA;# Prefix to apply to the WebDAV path-ing. Default is &#39;/&#39;.&#xA;prefix: /&#xA;&#xA;# Enable or disable debug logging. Default is &#39;false&#39;.&#xA;debug: false&#xA;&#xA;# Disable sniffing the files to detect their content type. Default is &#39;false&#39;.&#xA;noSniff: false&#xA;&#xA;# Whether the server runs behind a trusted proxy or not. When this is true,&#xA;# the header X-Forwarded-For will be used for logging the remote addresses&#xA;# of logging attempts (if available).&#xA;behindProxy: false&#xA;&#xA;# The directory that will be able to be accessed by the users when connecting.&#xA;# This directory will be used by users unless they have their own &#39;directory&#39; defined.&#xA;# Default is &#39;.&#39; (current directory).&#xA;directory: .&#xA;&#xA;# The default permissions for users. This is a case insensitive option. Possible&#xA;# permissions: C (Create), R (Read), U (Update), D (Delete). You can combine multiple&#xA;# permissions. For example, to allow to read and create, set &#34;RC&#34;. Default is &#34;R&#34;.&#xA;permissions: R&#xA;&#xA;# The default permissions rules for users. Default is none.&#xA;rules: []&#xA;&#xA;# Logging configuration&#xA;log:&#xA;  # Logging format (&#39;console&#39;, &#39;json&#39;). Default is &#39;console&#39;.&#xA;  format: console&#xA;  # Enable or disable colors. Default is &#39;true&#39;. Only applied if format is &#39;console&#39;.&#xA;  colors: true&#xA;  # Logging outputs. You can have more than one output. Default is only &#39;stderr&#39;.&#xA;  outputs:&#xA;  - stderr&#xA;&#xA;# CORS configuration&#xA;cors:&#xA;  # Whether or not CORS configuration should be applied. Default is &#39;false&#39;.&#xA;  enabled: true&#xA;  credentials: true&#xA;  allowed_headers:&#xA;    - Depth&#xA;  allowed_hosts:&#xA;    - http://localhost:8080&#xA;  allowed_methods:&#xA;    - GET&#xA;  exposed_headers:&#xA;    - Content-Length&#xA;    - Content-Range&#xA;&#xA;# The list of users. If the list is empty, then there will be no authentication.&#xA;# Otherwise, basic authentication will automatically be configured.&#xA;#&#xA;# If you&#39;re delegating the authentication to a different service, you can proxy&#xA;# the username using basic authentication, and then disable webdav&#39;s password&#xA;# check using the option:&#xA;#&#xA;# noPassword: true&#xA;users:&#xA;  # Example &#39;admin&#39; user with plaintext password.&#xA;  - username: admin&#xA;    password: admin&#xA;  # Example &#39;john&#39; user with bcrypt encrypted password, with custom directory.&#xA;  - username: john&#xA;    password: &#34;{bcrypt}$2y$10$zEP6oofmXFeHaeMfBNLnP.DO8m.H.Mwhd24/TOX2MWLxAExXi4qgi&#34;&#xA;    directory: /another/path&#xA;  # Example user whose details will be picked up from the environment.&#xA;  - username: &#34;{env}ENV_USERNAME&#34;&#xA;    password: &#34;{env}ENV_PASSWORD&#34;&#xA;  - username: basic&#xA;    password: basic&#xA;    # Override default permissions.&#xA;    permissions: CRUD&#xA;    rules:&#xA;      # With this rule, the user CANNOT access /some/files.&#xA;      - path: /some/file&#xA;        permissions: none&#xA;      # With this rule, the user CAN create, read, update and delete within /public/access.&#xA;      - path: /public/access/&#xA;        permissions: CRUD&#xA;      # With this rule, the user CAN read and update all files ending with .js. It uses&#xA;      # a regular expression.&#xA;      - regex: &#34;^.+.js$&#34;&#xA;        permissions: RU&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CORS&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;allowed_*&lt;/code&gt; properties are optional, the default value for each of them will be &lt;code&gt;*&lt;/code&gt;. &lt;code&gt;exposed_headers&lt;/code&gt; is optional as well, but is not set if not defined. Setting &lt;code&gt;credentials&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will allow you to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Use &lt;code&gt;withCredentials = true&lt;/code&gt; in javascript.&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;username:password@host&lt;/code&gt; syntax.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;h3&gt;Reverse Proxy Service&lt;/h3&gt; &#xA;&lt;p&gt;When using a reverse proxy implementation, like Caddy, Nginx, or Apache, note that you need to forward the correct headers in order to avoid 502 errors. Here&#39;s a Nginx configuration example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;location / {&#xA;  proxy_pass http://127.0.0.1:8080;&#xA;  proxy_set_header X-Real-IP $remote_addr;&#xA;  proxy_set_header REMOTE-HOST $remote_addr;&#xA;  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;  proxy_set_header Host $host;&#xA;  proxy_redirect off;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Systemd&lt;/h3&gt; &#xA;&lt;p&gt;Example configuration of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Systemd&#34;&gt;&lt;code&gt;systemd&lt;/code&gt;&lt;/a&gt; service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;[Unit]&#xA;Description=WebDAV&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;User=root&#xA;ExecStart=/usr/bin/webdav --config /opt/webdav.yml&#xA;Restart=on-failure&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fail2Ban Setup&lt;/h3&gt; &#xA;&lt;p&gt;To add security against brute-force attacks in your WebDAV server, you can configure Fail2Ban to ban IP addresses after a set number of failed login attempts.&lt;/p&gt; &#xA;&lt;h4&gt;Filter Configuration&lt;/h4&gt; &#xA;&lt;p&gt;Create a new filter rule under &lt;code&gt;filter.d/webdav.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[INCLUDES]&#xA;before = common.conf&#xA;&#xA;[Definition]&#xA;# Failregex to match &#34;invalid password&#34; and extract remote_address only&#xA;failregex = ^.*invalid password\s*\{.*&#34;remote_address&#34;:\s*&#34;&amp;lt;HOST&amp;gt;&#34;\s*\}&#xA;&#xA;# Failregex to match &#34;invalid username&#34; and extract remote_address only (if applicable)&#xA;failregex += ^.*invalid username\s*\{.*&#34;remote_address&#34;:\s*&#34;&amp;lt;HOST&amp;gt;&#34;\s*\}&#xA;&#xA;ignoreregex =&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configuration will capture invalid login attempts and extract the IP address to ban.&lt;/p&gt; &#xA;&lt;h4&gt;Jail Configuration&lt;/h4&gt; &#xA;&lt;p&gt;In &lt;code&gt;jail.d/webdav.conf&lt;/code&gt;, define the jail that monitors your WebDAV log for failed login attempts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[webdav]&#xA;&#xA;enabled = true&#xA;port = [your_port]&#xA;filter = webdav&#xA;logpath = [your_log_path]&#xA;banaction = iptables-allports&#xA;ignoreself = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;[your_port]&lt;/code&gt; with the port your WebDAV server is running on.&lt;/li&gt; &#xA; &lt;li&gt;Replace &lt;code&gt;[your_log_path]&lt;/code&gt; with the path to your WebDAV log file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Final Steps&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Restart Fail2Ban to apply these configurations:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl restart fail2ban&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Verify that Fail2Ban is running and monitoring your WebDAV logs:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo fail2ban-client status webdav&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;With this setup, Fail2Ban will automatically block IP addresses that exceed the allowed number of failed login attempts.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open an issue or a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hacdias/webdav/main/LICENSE&#34;&gt;MIT License&lt;/a&gt; © &lt;a href=&#34;https://hacdias.com&#34;&gt;Henrique Dias&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>