<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-14T01:31:03Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Project-HAMi/HAMi</title>
    <updated>2024-10-14T01:31:03Z</updated>
    <id>tag:github.com,2024-10-14:/Project-HAMi/HAMi</id>
    <link href="https://github.com/Project-HAMi/HAMi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Heterogeneous AI Computing Virtualization Middleware&lt;/p&gt;&lt;hr&gt;&lt;p&gt;English version|&lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/README_cn.md&#34;&gt;中文版&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/hami-horizontal-colordark.png&#34; width=&#34;600px&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Project-HAMi/HAMi.svg?sanitize=true&#34; alt=&#34;LICENSE&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Project-HAMi/HAMi/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/Project-HAMi/HAMi/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Project-HAMi/HAMi/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/Project-HAMi/HAMi&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.bestpractices.dev/en/projects/9416&#34;&gt;&lt;img src=&#34;https://www.bestpractices.dev/projects/9416/badge&#34; alt=&#34;OpenSSF Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/Project-HAMi/HAMi&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/Project-HAMi/HAMi&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/Project-HAMi/HAMi&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/Project-HAMi/HAMi/branch/master/graph/badge.svg?token=ROM8CMPXZ6&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2FProject-HAMi%2FHAMi?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2FProject-HAMi%2FHAMi.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/4pdosc/k8s-vgpu&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/4pdosc/k8s-vgpu.svg?sanitize=true&#34; alt=&#34;docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/hami-hsf3791/shared_invite/zt-2gcteqiph-Ls8Atnpky6clrspCAQ_eGQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Slack-Join%20Slack-blue&#34; alt=&#34;slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Project-HAMi/HAMi/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discuss-Ask%20Questions-blue&#34; alt=&#34;discuss&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://project-hami.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/website-blue&#34; alt=&#34;website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Project-HAMi/HAMi#contact&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contact%20Me-blue&#34; alt=&#34;Contact Me&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project-HAMi: Heterogeneous AI Computing Virtualization Middleware&lt;/h2&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;HAMi, formerly known as &#39;k8s-vGPU-scheduler&#39;, is a Heterogeneous device management middleware for Kubernetes. It can manage different types of heterogeneous devices(like GPU,NPU,etc...), share heterogeneous devices among pods, make better scheduling decision based on topology of devices and schedule policies.&lt;/p&gt; &#xA;&lt;p&gt;It aims to remove the gap between different Heterogeneous devices, and provide a unified interface for user to manage with no change to your application. Until June 2024, HAMi has been widely used around the world at a variety of industries such as Internet/Cloud/Finance/ Manufacturing. More than 40 companies or institutions are not only end users but also active contributors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/cncf-logo.png&#34; alt=&#34;cncf_logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;HAMi is a sandbox and &lt;a href=&#34;https://landscape.cncf.io/?item=orchestration-management--scheduling-orchestration--hami&#34;&gt;landscape&lt;/a&gt; project of&lt;br&gt; &lt;a href=&#34;https://cncf.io/&#34;&gt;Cloud Native Computing Foundation&lt;/a&gt;(CNCF), &lt;a href=&#34;https://landscape.cncf.io/?group=cnai&amp;amp;item=cnai--general-orchestration--hami&#34;&gt;CNAI Landscape project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Device virtualization&lt;/h2&gt; &#xA;&lt;p&gt;HAMi provides device virtualization for several heterogeneous devices including GPU, by supporting device sharing and device resource isolation. For the list of devices supporting device virtualization, see &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/#supported-devices&#34;&gt;supported devices&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Device sharing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allows partial device allocation by specifying device memory.&lt;/li&gt; &#xA; &lt;li&gt;Imposes a hard limit on streaming multiprocessors.&lt;/li&gt; &#xA; &lt;li&gt;Permits partial device allocation by specifying device core usage.&lt;/li&gt; &#xA; &lt;li&gt;Requires zero changes to existing programs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/example.png&#34; width=&#34;500&#34;&gt; &#xA;&lt;h3&gt;Device Resources Isolation&lt;/h3&gt; &#xA;&lt;p&gt;A simple demostration for device isolation: A task with the following resources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;      resources:&#xA;        limits:&#xA;          nvidia.com/gpu: 1 # requesting 1 vGPU&#xA;          nvidia.com/gpumem: 3000 # Each vGPU contains 3000m device memory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will see 3G device memory inside container&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/hard_limit.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Supported devices&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Project-HAMi/HAMi#preparing-your-gpu-nodes&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Nvidia-GPU-blue&#34; alt=&#34;nvidia GPU&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/cambricon-mlu-support.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Cambricon-Mlu-blue&#34; alt=&#34;cambricon MLU&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/hygon-dcu-support.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Hygon-DCU-blue&#34; alt=&#34;hygon DCU&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/iluvatar-gpu-support.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Iluvatar-GPU-blue&#34; alt=&#34;iluvatar GPU&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Architect&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/imgs/hami-arch.png&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;HAMi consists of several components, including a unified mutatingwebhook, a unified scheduler extender, different device-plugins and different in-container virtualization technics for each heterogeneous AI devices.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Choose your orchestrator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/#prerequisites&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/kube-scheduler-blue&#34; alt=&#34;kube-scheduler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/how-to-use-volcano-vgpu.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/volcano-scheduler-orange&#34; alt=&#34;volcano-scheduler&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;The list of prerequisites for running the NVIDIA device plugin is described below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NVIDIA drivers &amp;gt;= 440&lt;/li&gt; &#xA; &lt;li&gt;nvidia-docker version &amp;gt; 2.0&lt;/li&gt; &#xA; &lt;li&gt;config default runtime is nvidia for containerd/docker/cri-o container runtime.&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes version &amp;gt;= 1.16&lt;/li&gt; &#xA; &lt;li&gt;glibc &amp;gt;= 2.17 &amp;amp; glibc &amp;lt; 2.3.0&lt;/li&gt; &#xA; &lt;li&gt;kernel version &amp;gt;= 3.10&lt;/li&gt; &#xA; &lt;li&gt;helm &amp;gt; 3.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;First, Label your GPU nodes for scheduling with HAMi by adding the label &#34;gpu=on&#34;. Without this label, the nodes cannot be managed by our scheduler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl label nodes {nodeid} gpu=on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add our repo in helm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;helm repo add hami-charts https://project-hami.github.io/HAMi/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check your Kubernetes version by using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During installation, set the Kubernetes scheduler image version to match your Kubernetes server version. For instance, if your cluster server version is 1.16.8, use the following command for deployment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;helm install hami hami-charts/hami --set scheduler.kubeScheduler.imageTag=v1.16.8 -n kube-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Customize your installation by adjusting the &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/config.md&#34;&gt;configs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Verify your installation using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubectl get pods -n kube-system&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If both &lt;code&gt;vgpu-device-plugin&lt;/code&gt; and &lt;code&gt;vgpu-scheduler&lt;/code&gt; pods are in the &lt;em&gt;Running&lt;/em&gt; state, your installation is successful. You can try examples &lt;a href=&#34;https://github.com/Project-HAMi/HAMi/raw/newprofile/examples/nvidia/default_use.yaml&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Monitor&lt;/h3&gt; &#xA;&lt;p&gt;Monitoring is automatically enabled after installation. Obtain an overview of cluster information by visiting the following URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://{scheduler ip}:{monitorPort}/metrics&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default monitorPort is 31993; other values can be set using &lt;code&gt;--set devicePlugin.service.httpPort&lt;/code&gt; during installation.&lt;/p&gt; &#xA;&lt;p&gt;Grafana dashboard &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/dashboard.md&#34;&gt;example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The status of a node won&#39;t be collected before you submit a task&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you don&#39;t request vGPUs when using the device plugin with NVIDIA images all the GPUs on the machine may be exposed inside your container&lt;/li&gt; &#xA; &lt;li&gt;Currently, A100 MIG can be supported in only &#34;none&#34; and &#34;mixed&#34; modes.&lt;/li&gt; &#xA; &lt;li&gt;Tasks with the &#34;nodeName&#34; field cannot be scheduled at the moment; please use &#34;nodeSelector&#34; instead.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;RoadMap, Governance &amp;amp; Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The project is governed by a group of &lt;a href=&#34;https://github.com/Project-HAMi/HAMi/raw/master/AUTHORS&#34;&gt;Maintainers and Committers&lt;/a&gt;. How they are selected and govern is outlined in our &lt;a href=&#34;https://github.com/Project-HAMi/community/raw/main/governance.md&#34;&gt;Governance Document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in being a contributor and want to get involved in developing the HAMi code, please see &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for details on submitting patches and the contribution workflow.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/docs/develop/roadmap.md&#34;&gt;RoadMap&lt;/a&gt; to see anything you interested.&lt;/p&gt; &#xA;&lt;h2&gt;Meeting &amp;amp; Contact&lt;/h2&gt; &#xA;&lt;p&gt;The HAMi community is committed to fostering an open and welcoming environment, with several ways to engage with other users and developers.&lt;/p&gt; &#xA;&lt;p&gt;If you have any questions, please feel free to reach out to us through the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Regular Community Meeting: Friday at 16:00 UTC+8 (Chinese)(weekly). &lt;a href=&#34;https://www.thetimezoneconverter.com/?t=14%3A30&amp;amp;tz=GMT%2B8&amp;amp;&#34;&gt;Convert to your timezone&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1YC6hco03_oXbF9IOUPJ29VWEddmITIKIfSmBX8JtGBw/edit#heading=h.g61sgp7w0d0c&#34;&gt;Meeting Notes and Agenda&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://meeting.tencent.com/dm/Ntiwq1BICD1P&#34;&gt;Meeting Link&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Email: refer to the &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/MAINTAINERS.md&#34;&gt;MAINTAINERS.md&lt;/a&gt; to find the email addresses of all maintainers. Feel free to contact them via email to report any issues or ask questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/hami-project&#34;&gt;mailing list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/hami-hsf3791/shared_invite/zt-2gcteqiph-Ls8Atnpky6clrspCAQ_eGQ&#34;&gt;slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;HAMi is under the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/Project-HAMi/HAMi/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>henrygd/beszel</title>
    <updated>2024-10-14T01:31:03Z</updated>
    <id>tag:github.com,2024-10-14:/henrygd/beszel</id>
    <link href="https://github.com/henrygd/beszel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight server monitoring hub with historical data, docker stats, and alerts.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beszel&lt;/h1&gt; &#xA;&lt;p&gt;A lightweight server resource monitoring hub with historical data, docker stats, and alerts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/henrygd/beszel-agent&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/henrygd/beszel-agent/0.1.0?logo=docker&amp;amp;label=agent%20image%20size&#34; alt=&#34;Docker Image Size (tag)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/henrygd/beszel&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/henrygd/beszel/0.1.0?logo=docker&amp;amp;label=hub%20image%20size&#34; alt=&#34;Docker Image Size (tag)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://henrygd-assets.b-cdn.net/beszel/screenshot.png&#34; alt=&#34;Screenshot of the hub&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;: Smaller and less resource-intensive than leading solutions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt;: Easy setup, no need for public internet exposure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker stats&lt;/strong&gt;: Tracks CPU, memory, and network usage history for each container.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Alerts&lt;/strong&gt;: Configurable alerts for CPU, memory, disk usage, and system status.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt;: Each user manages their own systems. Admins can share systems across users.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OAuth / OIDC&lt;/strong&gt;: Supports multiple OAuth2 providers. Password authentication can be disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automatic backups&lt;/strong&gt;: Save and restore data from disk or S3-compatible storage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;REST API&lt;/strong&gt;: Use or update your data in your own scripts and applications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Beszel consists of two main components: the hub and the agent.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hub:&lt;/strong&gt; A web application that provides a dashboard for viewing and managing connected systems. Built on &lt;a href=&#34;https://pocketbase.io/&#34;&gt;PocketBase&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Agent:&lt;/strong&gt; Runs on each system you want to monitor, creating a minimal SSH server to communicate system metrics to the hub.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;If not using docker, skip steps 4-5 and run the agent using the binary.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the hub (see &lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/#installation&#34;&gt;installation&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:8090&#34;&gt;http://localhost:8090&lt;/a&gt; and create an admin user.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Add system.&#34; Enter the name and host of the system you want to monitor.&lt;/li&gt; &#xA; &lt;li&gt;Click &#34;Copy docker compose&#34; to copy the agent&#39;s docker-compose.yml file to your clipboard.&lt;/li&gt; &#xA; &lt;li&gt;On the agent system, create the compose file and run &lt;code&gt;docker compose up&lt;/code&gt; to start the agent.&lt;/li&gt; &#xA; &lt;li&gt;Back in the hub, click the &#34;Add system&#34; button in the dialog to finish adding the system.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If all goes well, the system should flip to green. If it turns red, check the Logs page and refer to &lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/#faq--troubleshooting&#34;&gt;troubleshooting tips&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tutoriel en français&lt;/h3&gt; &#xA;&lt;p&gt;Pour le tutoriel en français, consultez &lt;a href=&#34;https://belginux.com/installer-beszel-avec-docker/&#34;&gt;https://belginux.com/installer-beszel-avec-docker/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the hub and agent as single binaries or using Docker.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hub&lt;/strong&gt;: See the example &lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/docker/hub/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Agent&lt;/strong&gt;: The hub provides compose content for the agent, but you can also reference the example &lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/docker/agent/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;The agent uses host network mode to access network interface stats, which automatically exposes the port. Change the port using an environment variable if needed.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t require network stats, remove that line from the compose file and map the port manually.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If disk I/O stats are missing or incorrect, try using the &lt;code&gt;FILESYSTEM&lt;/code&gt; environment variable (&lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/#finding-the-correct-filesystem&#34;&gt;instructions here&lt;/a&gt;). Check agent logs to see the current device being used.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Binary&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If using Linux, see &lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/guides/systemd.md&#34;&gt;guides/systemd.md&lt;/a&gt; for a script to install the hub or agent as a system service. The agent installer will be built into the web UI in the future.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Download and run the latest binaries from the &lt;a href=&#34;https://github.com/henrygd/beszel/releases&#34;&gt;releases page&lt;/a&gt; or use the commands below.&lt;/p&gt; &#xA;&lt;h4&gt;Hub&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL &#34;https://github.com/henrygd/beszel/releases/latest/download/beszel_$(uname -s)_$(uname -m | sed &#39;s/x86_64/amd64/&#39; | sed &#39;s/armv7l/arm/&#39; | sed &#39;s/aarch64/arm64/&#39;).tar.gz&#34; | tar -xz -O beszel | tee ./beszel &amp;gt;/dev/null &amp;amp;&amp;amp; chmod +x beszel &amp;amp;&amp;amp; ls beszel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the hub directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./beszel serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Agent&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sL &#34;https://github.com/henrygd/beszel/releases/latest/download/beszel-agent_$(uname -s)_$(uname -m | sed &#39;s/x86_64/amd64/&#39; | sed &#39;s/armv7l/arm/&#39; | sed &#39;s/aarch64/arm64/&#39;).tar.gz&#34; | tar -xz -O beszel-agent | tee ./beszel-agent &amp;gt;/dev/null &amp;amp;&amp;amp; chmod +x beszel-agent &amp;amp;&amp;amp; ls beszel-agent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running the agent directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT=45876 KEY=&#34;{PASTE_YOUR_KEY}&#34; ./beszel-agent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Updating&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;./beszel update&lt;/code&gt; and &lt;code&gt;./beszel-agent update&lt;/code&gt; to update to the latest version.&lt;/p&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;h3&gt;Hub&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CSP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;Adds a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy&#34;&gt;Content-Security-Policy&lt;/a&gt; header with this value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DISABLE_PASSWORD_AUTH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Disables password authentication.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Agent&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DOCKER_HOST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;Overrides the docker host (docker.sock) if using a proxy.[^socket]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;EXTRA_FILESYSTEMS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/#monitoring-additional-disks-partitions-or-remote-mounts&#34;&gt;Monitoring additional disks, partitions, or remote mounts&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;FILESYSTEM&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;Device, partition, or mount point to use for root disk stats.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;Public SSH key to use for authentication. Provided in hub.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOG_LEVEL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;info&lt;/td&gt; &#xA;   &lt;td&gt;Logging level. Valid values: &#34;debug&#34;, &#34;info&#34;, &#34;warn&#34;, &#34;error&#34;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MEM_CALC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;Overrides the default memory calculation.[^memcalc]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NICS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;Whitelist of network interfaces to monitor for bandwidth chart.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PORT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;45876&lt;/td&gt; &#xA;   &lt;td&gt;Port or address:port to listen on.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SENSORS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;Whitelist of temperature sensors to monitor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SYS_SENSORS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;unset&lt;/td&gt; &#xA;   &lt;td&gt;Overrides sys path for sensors. See &lt;a href=&#34;https://github.com/henrygd/beszel/discussions/160&#34;&gt;#160&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;[^socket]: Beszel only needs access to read container information. For &lt;a href=&#34;https://github.com/linuxserver/docker-socket-proxy&#34;&gt;linuxserver/docker-socket-proxy&lt;/a&gt; you would set &lt;code&gt;CONTAINERS=1&lt;/code&gt;. [^memcalc]: The default value for used memory is based on gopsutil&#39;s &lt;a href=&#34;https://pkg.go.dev/github.com/shirou/gopsutil/v4@v4.24.6/mem#VirtualMemoryStat&#34;&gt;Used&lt;/a&gt; calculation, which should align fairly closely with &lt;code&gt;free&lt;/code&gt;. Set &lt;code&gt;MEM_CALC&lt;/code&gt; to &lt;code&gt;htop&lt;/code&gt; to align with htop&#39;s calculation.&lt;/p&gt; &#xA;&lt;h2&gt;OAuth / OIDC Setup&lt;/h2&gt; &#xA;&lt;p&gt;Beszel supports OpenID Connect and many OAuth2 authentication providers (see list below).&lt;/p&gt; &#xA;&lt;p&gt;Visit the &#34;Auth providers&#34; page to enable your provider. The redirect / callback URL should be &lt;code&gt;&amp;lt;your-beszel-url&amp;gt;/api/oauth2-redirect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Supported provider list&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Apple&lt;/li&gt; &#xA;  &lt;li&gt;Bitbucket&lt;/li&gt; &#xA;  &lt;li&gt;Discord&lt;/li&gt; &#xA;  &lt;li&gt;Facebook&lt;/li&gt; &#xA;  &lt;li&gt;Gitea&lt;/li&gt; &#xA;  &lt;li&gt;Gitee&lt;/li&gt; &#xA;  &lt;li&gt;GitHub&lt;/li&gt; &#xA;  &lt;li&gt;GitLab&lt;/li&gt; &#xA;  &lt;li&gt;Google&lt;/li&gt; &#xA;  &lt;li&gt;Instagram&lt;/li&gt; &#xA;  &lt;li&gt;Kakao&lt;/li&gt; &#xA;  &lt;li&gt;LiveChat&lt;/li&gt; &#xA;  &lt;li&gt;mailcow&lt;/li&gt; &#xA;  &lt;li&gt;Microsoft&lt;/li&gt; &#xA;  &lt;li&gt;OpenID Connect&lt;/li&gt; &#xA;  &lt;li&gt;Patreon (v2)&lt;/li&gt; &#xA;  &lt;li&gt;Spotify&lt;/li&gt; &#xA;  &lt;li&gt;Strava&lt;/li&gt; &#xA;  &lt;li&gt;Twitch&lt;/li&gt; &#xA;  &lt;li&gt;Twitter&lt;/li&gt; &#xA;  &lt;li&gt;VK&lt;/li&gt; &#xA;  &lt;li&gt;Yandex&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Monitoring additional disks, partitions, or remote mounts&lt;/h2&gt; &#xA;&lt;p&gt;The method for adding additional disks differs depending on your deployment method.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;lsblk&lt;/code&gt; to find the names and mount points of your partitions. If you have trouble, check the agent logs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The charts will use the name of the device or partition if available, and fall back to the folder name. You will not get I/O stats for network mounted drives.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Mount a folder from the target filesystem in the container&#39;s &lt;code&gt;/extra-filesystems&lt;/code&gt; directory. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;volumes:&#xA;  - /mnt/disk1/.beszel:/extra-filesystems/disk1:ro&#xA;  - /dev/mmcblk0/.beszel:/extra-filesystems/sd-card:ro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Binary&lt;/h3&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;EXTRA_FILESYSTEMS&lt;/code&gt; environment variable to a comma-separated list of devices, partitions, or mount points to monitor. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;EXTRA_FILESYSTEMS=&#34;sdb,sdc1,mmcblk0,/mnt/network-share&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;REST API&lt;/h2&gt; &#xA;&lt;p&gt;Because Beszel is built on PocketBase, you can use the PocketBase &lt;a href=&#34;https://pocketbase.io/docs/api-records/&#34;&gt;web APIs&lt;/a&gt; and &lt;a href=&#34;https://pocketbase.io/docs/client-side-sdks/&#34;&gt;client-side SDKs&lt;/a&gt; to read or update data from outside Beszel itself.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;The hub and agent communicate over SSH, so they don&#39;t need to be exposed to the internet. Even if you place an external auth gateway, such as Authelia, in front of the hub, it won&#39;t disrupt or break the connection between the hub and agent.&lt;/p&gt; &#xA;&lt;p&gt;When the hub is started for the first time, it generates an ED25519 key pair.&lt;/p&gt; &#xA;&lt;p&gt;The agent&#39;s SSH server is configured to accept connections using this key only. It does not provide a pseudo-terminal or accept input, so it&#39;s impossible to execute commands on the agent even if your private key is compromised.&lt;/p&gt; &#xA;&lt;h2&gt;User roles&lt;/h2&gt; &#xA;&lt;h3&gt;Admin&lt;/h3&gt; &#xA;&lt;p&gt;Admins have access to additional links in the hub, such as backups, SMTP settings, etc. The first user created is automatically an admin and can log into PocketBase.&lt;/p&gt; &#xA;&lt;p&gt;Changing a user&#39;s role does not create a PocketBase admin account for them. To do that, go to Settings &amp;gt; Admins in PocketBase and add them manually.&lt;/p&gt; &#xA;&lt;h3&gt;User&lt;/h3&gt; &#xA;&lt;p&gt;Users can create their own systems and alerts. Links to PocketBase settings are not shown in the hub.&lt;/p&gt; &#xA;&lt;h3&gt;Read only&lt;/h3&gt; &#xA;&lt;p&gt;Read-only users cannot create systems but can view any system shared with them by an admin and create alerts.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ / Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Agent is not connecting&lt;/h3&gt; &#xA;&lt;p&gt;Assuming the agent is running, the connection is probably being blocked by a firewall. You have two options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add an inbound rule to the agent system&#39;s firewall(s) to allow TCP connections to the port. Check any active firewalls, like iptables, and your cloud provider&#39;s firewall settings if applicable.&lt;/li&gt; &#xA; &lt;li&gt;Alternatively, use software like &lt;a href=&#34;https://www.cloudflare.com/products/tunnel/&#34;&gt;Cloudflare Tunnel&lt;/a&gt;, &lt;a href=&#34;https://www.wireguard.com/&#34;&gt;WireGuard&lt;/a&gt;, or &lt;a href=&#34;https://tailscale.com/&#34;&gt;Tailscale&lt;/a&gt; to securely bypass your firewall.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can test connectivity by running &lt;code&gt;telnet &amp;lt;agent-ip&amp;gt; &amp;lt;port&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Connecting the hub and agent on the same system using Docker&lt;/h3&gt; &#xA;&lt;p&gt;If using host network mode for the agent but not the hub, add your system using the hostname &lt;code&gt;host.docker.internal&lt;/code&gt;, which resolves to the internal IP address used by the host. See the &lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/supplemental/docker/same-system/docker-compose.yml&#34;&gt;example docker-compose.yml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If using host network mode for both, you can use &lt;code&gt;localhost&lt;/code&gt; as the hostname.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, use the agent&#39;s &lt;code&gt;container_name&lt;/code&gt; as the hostname if both are in the same Docker network.&lt;/p&gt; &#xA;&lt;h3&gt;Finding the correct filesystem&lt;/h3&gt; &#xA;&lt;p&gt;Specify the filesystem/device/partition for root disk stats using the &lt;code&gt;FILESYSTEM&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;If not set, the agent will try to find the partition mounted on &lt;code&gt;/&lt;/code&gt; and use that. This may not work correctly in a container, so it&#39;s recommended to set this value. Use one of the following methods to find the correct filesystem:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;lsblk&lt;/code&gt; and choose an option under &#34;NAME.&#34;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;df -h&lt;/code&gt; and choose an option under &#34;Filesystem.&#34;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sudo fdisk -l&lt;/code&gt; and choose an option under &#34;Device.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker container charts are empty or missing&lt;/h3&gt; &#xA;&lt;p&gt;If container charts show empty data or don&#39;t appear at all, you may need to enable cgroup memory accounting. To verify, run &lt;code&gt;docker stats&lt;/code&gt;. If that shows zero memory usage, follow this guide to fix the issue:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://akashrajpurohit.com/blog/resolving-missing-memory-stats-in-docker-stats-on-raspberry-pi/&#34;&gt;https://akashrajpurohit.com/blog/resolving-missing-memory-stats-in-docker-stats-on-raspberry-pi/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Containers Are Not Populating Reliably&lt;/h3&gt; &#xA;&lt;p&gt;Try upgrading your Docker version on the agent system. This issue was observed on a machine running version 24 and was resolved by upgrading to version 27.&lt;/p&gt; &#xA;&lt;h3&gt;Month / week records are not populating reliably&lt;/h3&gt; &#xA;&lt;p&gt;Records for longer time periods are created by averaging stats from shorter periods. The agent must run uninterrupted for a full set of data to populate these records.&lt;/p&gt; &#xA;&lt;p&gt;Pausing/unpausing the agent for longer than one minute will result in incomplete data, resetting the timing for the current interval.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Both the hub and agent are written in Go, so you can easily build them yourself, or cross-compile for different platforms. Please &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;install Go&lt;/a&gt; first if you haven&#39;t already.&lt;/p&gt; &#xA;&lt;h3&gt;Prepare dependencies&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd beszel &amp;amp;&amp;amp; go mod tidy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Agent&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;code&gt;beszel/cmd/agent&lt;/code&gt; and run the following command to create a binary in the current directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CGO_ENABLED=0 go build -ldflags &#34;-w -s&#34; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hub&lt;/h3&gt; &#xA;&lt;p&gt;The hub embeds the web UI in the binary, so you must build the website first. I use &lt;a href=&#34;https://bun.sh/&#34;&gt;Bun&lt;/a&gt;, but you may use Node.js if you prefer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd beszel/site&#xA;bun install&#xA;bun run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in &lt;code&gt;beszel/cmd/hub&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;CGO_ENABLED=0 go build -ldflags &#34;-w -s&#34; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cross-compiling&lt;/h3&gt; &#xA;&lt;p&gt;You can cross-compile for different platforms using the &lt;code&gt;GOOS&lt;/code&gt; and &lt;code&gt;GOARCH&lt;/code&gt; environment variables.&lt;/p&gt; &#xA;&lt;p&gt;For example, to build for FreeBSD ARM64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;GOOS=freebsd GOARCH=arm64 CGO_ENABLED=0 go build -ldflags &#34;-w -s&#34; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see a list of valid options by running &lt;code&gt;go tool dist list&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Beszel is licensed under the MIT License. See the &lt;a href=&#34;https://raw.githubusercontent.com/henrygd/beszel/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more details.&lt;/p&gt;</summary>
  </entry>
</feed>