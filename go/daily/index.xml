<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-26T01:35:30Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>teslamotors/vehicle-command</title>
    <updated>2023-11-26T01:35:30Z</updated>
    <id>tag:github.com,2023-11-26:/teslamotors/vehicle-command</id>
    <link href="https://github.com/teslamotors/vehicle-command" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tesla Vehicle Command SDK&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/teslamotors/vehicle-command/pkg&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/teslamotors/vehicle-command/pkg.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tesla vehicles now support a protocol that provides end-to-end command authentication. This Golang package uses the new protocol to control vehicle functions, such as climate control and charging.&lt;/p&gt; &#xA;&lt;p&gt;Among the included tools is an HTTP proxy server that converts REST API calls to the new vehicle-command protocol.&lt;/p&gt; &#xA;&lt;p&gt;Some developers may be familiar with Tesla&#39;s Owner API. Owner API will stop working as vehicles begin requiring end-to-end command authentication. If you are one of these developers, you can set up the proxy server or refactor your application to use this library directly. Pre-2021 Model S and X vehicles do not support this new protocol. &lt;a href=&#34;https://developer.tesla.com/docs/tesla-fleet-api#fleet-api&#34;&gt;Fleet API&lt;/a&gt; will continue to work on these vehicles.&lt;/p&gt; &#xA;&lt;h2&gt;System overview&lt;/h2&gt; &#xA;&lt;p&gt;Command authentication takes place in two steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Tesla&#39;s servers will only forward messages to a vehicle if the client has a valid &lt;a href=&#34;https://oauth.net/2/&#34;&gt;OAuth token&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The vehicle will only execute the command if it can be authenticated using a public key from the vehicle&#39;s keychain.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;So in order to send a command to a vehicle, a third-party application must obtain a valid OAuth token from the user, and the user must enroll the application&#39;s public key in the vehicle.&lt;/p&gt; &#xA;&lt;p&gt;Tesla&#39;s website has &lt;a href=&#34;https://developer.tesla.com/docs/fleet-api&#34;&gt;instructions for obtaining OAuth tokens&lt;/a&gt;. This README has instructions for generating private keys and directing the user to the public-key enrollment flow. The tools in this repository can use the OAuth token and the private key to send commands to vehicles.&lt;/p&gt; &#xA;&lt;p&gt;For example, the repository includes a &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/vehicle-command/main/cmd/tesla-control/README.md&#34;&gt;command-line interface&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tesla-control -ble -key-file private_key.pem lock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And a REST API proxy server (which is provided with a private key on launch and uses OAuth tokens sent by clients):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --cacert cert.pem \&#xA;    --header &#39;Content-Type: application/json&#39; \&#xA;    --header &#34;Authorization: Bearer $TESLA_AUTH_TOKEN&#34; \&#xA;    --data &#39;{}&#39; \&#xA;    &#34;https://localhost:4443/api/1/vehicles/$VIN/command/door_lock&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation and configuration&lt;/h2&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;ve &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;installed Golang&lt;/a&gt;. The package was tested with Go 1.20.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re using macOS or Linux. (Everything except BLE should run on Windows, but Windows is not officially supported).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Installation steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download dependencies: &lt;code&gt;go get ./...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile tools and examples: &lt;code&gt;go build ./...&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install tools to your PATH: &lt;code&gt;go install ./...&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The final command installs the following utilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;tesla-keygen&lt;/strong&gt;: Generate a command-authentication private key and save it to your system keyring.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tesla-control&lt;/strong&gt;: Send commands to a vehicle over BLE or the Internet. See &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/vehicle-command/main/cmd/tesla-control/README.md&#34;&gt;tool&#39;s README file&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tesla-http-proxy&lt;/strong&gt;: An HTTP proxy that exposes a REST API for sending vehicle commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tesla-auth-token&lt;/strong&gt;: Write an OAuth token to your system keyring. This utility does not fetch tokens. Read the &lt;a href=&#34;https://developer.tesla.com/docs/fleet-api#authentication&#34;&gt;Fleet API documentation&lt;/a&gt; for information on fetching OAuth tokens.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Configure environment variables (optional):&lt;/p&gt; &#xA;&lt;p&gt;For convenience, you can define the following environment variables to be used in lieu of command-line flags when using the above applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;TESLA_KEY_NAME&lt;/code&gt; used to derive the entry name for your command authentication private key in your system keyring.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TESLA_TOKEN_NAME&lt;/code&gt; used to derive the entry name for your OAuth token in your system keyring.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TESLA_KEYRING_TYPE&lt;/code&gt; used override the default system keyring type for your OS. Run &lt;code&gt;tesla-keygen -h&lt;/code&gt; to see supported values listed in the &lt;code&gt;-keyring-type&lt;/code&gt; flag documentation. Consult &lt;a href=&#34;https://github.com/99designs/keyring/#readme&#34;&gt;keyring documentation&lt;/a&gt; for details on each option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TESLA_VIN&lt;/code&gt; specifies a vehicle identification number. You can find your VIN under Controls &amp;gt; Software in your vehicle&#39;s UI. (Despite the name, VINs contain both letters and numbers).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export TESLA_KEY_NAME=$(whoami)&#xA;export TESLA_TOKEN_NAME=$(whoami)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, you&#39;re ready to go use the &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/vehicle-command/main/cmd/tesla-control&#34;&gt;the command-line tool&lt;/a&gt; to start sending commands to your personal vehicle over BLE! Alternatively, continue reading below to learn how to build an application that can send commands over the Internet using a REST API.&lt;/p&gt; &#xA;&lt;h2&gt;Using the HTTP proxy&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to set up and use the HTTP proxy, which allows clients to send vehicle commands using a REST API.&lt;/p&gt; &#xA;&lt;p&gt;As discussed above, your HTTP proxy will need to authenticate both with Tesla (using OAuth tokens) and with individual vehicles (using a private key).&lt;/p&gt; &#xA;&lt;h3&gt;Obtaining OAuth access tokens&lt;/h3&gt; &#xA;&lt;p&gt;Tesla&#39;s servers require your client to provide an OAuth access token before they will forward commands to a vehicle. You must obtain the OAuth token from the vehicle&#39;s owner. See &lt;a href=&#34;https://developer.tesla.com/docs/fleet-api&#34;&gt;Tesla&#39;s website&lt;/a&gt; for instructions on registering a developer account and obtaining OAuth tokens.&lt;/p&gt; &#xA;&lt;h3&gt;Generating a command-authentication private key&lt;/h3&gt; &#xA;&lt;p&gt;Even if your client has a valid token, the vehicle only accepts commands that are authorized by your client&#39;s private key.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;tesla-keygen&lt;/code&gt; utility included in this repository generates a private key, stores it in your system keyring, and prints the corresponding public key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export TESLA_KEY_NAME=$(whoami)&#xA;tesla-keygen create &amp;gt; public_key.pem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The system keyring uses your OS-dependent credential storage as the system keyring. On macOS, for example, it defaults to using your login keychain. Run &lt;code&gt;tesla-keygen -h&lt;/code&gt; for more options.&lt;/p&gt; &#xA;&lt;p&gt;Re-running the &lt;code&gt;tesla-keygen&lt;/code&gt; command will print out the same public key without overwriting the private key. You can force the utility to overwrite an existing public key with &lt;code&gt;-f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Distributing your public key&lt;/h3&gt; &#xA;&lt;p&gt;Vehicles verify commands using public keys. Your public key must be enrolled on your users&#39; vehicles before they will accept commands sent by your application.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the enrollment process from the owner&#39;s perspective:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your website or app provides a link, as described below.&lt;/li&gt; &#xA; &lt;li&gt;The user taps the link, which opens the Tesla app.&lt;/li&gt; &#xA; &lt;li&gt;The Tesla app asks the user to approve the request.&lt;/li&gt; &#xA; &lt;li&gt;If the user approves, then the Tesla app sends a command to the vehicle to enroll your public key. This requires the vehicle to be online and paired with the phone.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In order for this process to work, you must register a domain name that identifies your application. The Tesla app will display this domain name to the user when it asks if they wish to approve your request.&lt;/p&gt; &#xA;&lt;p&gt;Follow the instructions to &lt;a href=&#34;https://developer.tesla.com/docs/fleet-api#register&#34;&gt;register your public key and domain&lt;/a&gt;. The public key referred to in those instructions is the &lt;code&gt;public_key.pem&lt;/code&gt; file in the above example.&lt;/p&gt; &#xA;&lt;p&gt;Once your public key is successfully registered, provide vehicle owners with a link to &lt;code&gt;https://tesla.com/_ak/&amp;lt;your_domain_name&amp;gt;&lt;/code&gt;. For example, if you registered &lt;code&gt;example.com&lt;/code&gt;, provide a link to &lt;code&gt;https://tesla.com/_ak/example.com&lt;/code&gt;. The official Tesla iPhone or Android mobile app (version 4.25.5 or above) will handle the rest. Customers with more than one Tesla product must select the desired vehicle before clicking the link or scanning the QR code.&lt;/p&gt; &#xA;&lt;h3&gt;Generating a server TLS key and certificate&lt;/h3&gt; &#xA;&lt;p&gt;The HTTP Proxy requires a TLS server certificate. For testing and development purposes, you can create a self-signed localhost server certificate using OpenSSL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;openssl req -x509 -nodes -newkey ec -pkeyopt ec_paramgen_curve:secp521r1 \&#xA;    -subj &#39;/CN=localhost&#39; \&#xA;    -keyout key.pem -out cert.pem -sha256 -days 3650 \&#xA;    -addext &#34;extendedKeyUsage = serverAuth&#34; \&#xA;    -addext &#34;keyUsage = digitalSignature, keyCertSign, keyAgreement&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command creates an unencrypted private key, &lt;code&gt;key.pem&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running the proxy server&lt;/h3&gt; &#xA;&lt;p&gt;You can start the proxy server using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tesla-http-proxy -tls-key key.pem -cert cert.pem -port 4443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; In production, you&#39;ll likely want to omit the &lt;code&gt;-port 4443&lt;/code&gt; and listen on the standard port 443.&lt;/p&gt; &#xA;&lt;h3&gt;Sending commands to the proxy server&lt;/h3&gt; &#xA;&lt;p&gt;This section illustrates how clients can reach the server using &lt;code&gt;curl&lt;/code&gt;. Clients are responsible for obtaining OAuth tokens. Obtain an OAuth token as described as above.&lt;/p&gt; &#xA;&lt;p&gt;Endpoints that do not support end-to-end authentication are proxied to Tesla&#39;s REST API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export TESLA_AUTH_TOKEN=&amp;lt;access-token&amp;gt;&#xA;export VIN=&amp;lt;vin&amp;gt;&#xA;curl --cacert cert.pem \&#xA;    --header &#34;Authorization: Bearer $TESLA_AUTH_TOKEN&#34; \&#xA;    &#34;https://localhost:4443/api/1/vehicles/$VIN/vehicle_data&#34; \&#xA;    | jq -r .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Endpoints that support end-to-end authentication are intercepted and re-written by the proxy, which handles session state and retries. After copying &lt;code&gt;cert.pem&lt;/code&gt; to your client, running the following command from a client will cause the proxy to send a &lt;code&gt;flash_lights&lt;/code&gt; command to the vehicle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export TESLA_AUTH_TOKEN=&amp;lt;access-token&amp;gt;&#xA;export VIN=&amp;lt;vin&amp;gt;&#xA;curl --cacert cert.pem \&#xA;    --header &#39;Content-Type: application/json&#39; \&#xA;    --header &#34;Authorization: Bearer $TESLA_AUTH_TOKEN&#34; \&#xA;    --data &#39;{}&#39; \&#xA;    &#34;https://localhost:4443/api/1/vehicles/$VIN/command/flash_lights&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;REST API documentation&lt;/h3&gt; &#xA;&lt;p&gt;The HTTP proxy implements the &lt;a href=&#34;https://developer.tesla.com/docs/fleet-api#vehicle-commands&#34;&gt;Tesla Fleet API vehicle command endpoints&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Golang library&lt;/h2&gt; &#xA;&lt;p&gt;You can read package &lt;a href=&#34;https://pkg.go.dev/github.com/teslamotors/vehicle-command/pkg&#34;&gt;documentation on pkg.go.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository supports &lt;code&gt;go mod&lt;/code&gt; and follows &lt;a href=&#34;https://go.dev/doc/modules/version-numbers&#34;&gt;Go version semantics&lt;/a&gt;. Note that v0.x.x releases do not guarantee API stability.&lt;/p&gt;</summary>
  </entry>
</feed>