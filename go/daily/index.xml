<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-20T01:33:58Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>linweiyuan/go-chatgpt-api</title>
    <updated>2023-04-20T01:33:58Z</updated>
    <id>tag:github.com,2023-04-20:/linweiyuan/go-chatgpt-api</id>
    <link href="https://github.com/linweiyuan/go-chatgpt-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Unofficial API in Go (bypass Cloudflare 403).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go-chatgpt-api&lt;/h1&gt; &#xA;&lt;p&gt;Bypass Cloudflare using &lt;a href=&#34;https://github.com/ultrafunkamsterdam/undetected-chromedriver&#34;&gt;undetected_chromedriver&lt;/a&gt; to use ChatGPT API.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linweiyuan.github.io/2023/03/14/%E4%B8%80%E7%A7%8D%E5%8F%96%E5%B7%A7%E7%9A%84%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87-Cloudflare-v2-%E9%AA%8C%E8%AF%81.html&#34;&gt;一种取巧的方式绕过 Cloudflare v2 验证&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linweiyuan.github.io/2023/04/08/ChatGPT-%E5%A6%82%E4%BD%95%E8%87%AA%E5%BB%BA%E4%BB%A3%E7%90%86.html&#34;&gt;ChatGPT 如何自建代理&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linweiyuan.github.io/2023/04/15/%E4%B8%80%E7%A7%8D%E8%A7%A3%E5%86%B3-ChatGPT-Access-denied-%E7%9A%84%E6%96%B9%E6%B3%95.html&#34;&gt;一种解决 ChatGPT Access denied 的方法&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Also support official API (the way which using API key):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chat completion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Use both ChatGPT mode and API mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  go-chatgpt-api:&#xA;    container_name: go-chatgpt-api&#xA;    image: linweiyuan/go-chatgpt-api&#xA;    ports:&#xA;      - 8080:8080&#xA;    environment:&#xA;      - GIN_MODE=release&#xA;      - CHATGPT_PROXY_SERVER=http://chatgpt-proxy-server:9515&#xA;#      - NETWORK_PROXY_SERVER=http://host:port&#xA;#      - NETWORK_PROXY_SERVER=socks5://host:port&#xA;    depends_on:&#xA;      - chatgpt-proxy-server&#xA;    restart: unless-stopped&#xA;&#xA;  chatgpt-proxy-server:&#xA;    container_name: chatgpt-proxy-server&#xA;    image: linweiyuan/chatgpt-proxy-server&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Use API mode only:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  go-chatgpt-api:&#xA;    container_name: go-chatgpt-api&#xA;    image: linweiyuan/go-chatgpt-api&#xA;    ports:&#xA;      - 8080:8080&#xA;    environment:&#xA;      - GIN_MODE=release&#xA;#      - NETWORK_PROXY_SERVER=http://host:port&#xA;#      - NETWORK_PROXY_SERVER=socks5://host:port&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If your IP is blocked, like &#34;Access denied&#34;, try this (with &lt;a href=&#34;https://developers.cloudflare.com/warp-client/get-started/linux&#34;&gt;Cloudflare WARP&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;services:&#xA;  go-chatgpt-api:&#xA;    container_name: go-chatgpt-api&#xA;    image: linweiyuan/go-chatgpt-api&#xA;    ports:&#xA;      - 8080:8080&#xA;    environment:&#xA;      - GIN_MODE=release&#xA;      - CHATGPT_PROXY_SERVER=http://chatgpt-proxy-server:9515&#xA;      - NETWORK_PROXY_SERVER=socks5://chatgpt-proxy-server-warp:65535&#xA;    depends_on:&#xA;      - chatgpt-proxy-server&#xA;      - chatgpt-proxy-server-warp&#xA;    restart: unless-stopped&#xA;&#xA;  chatgpt-proxy-server:&#xA;    container_name: chatgpt-proxy-server&#xA;    image: linweiyuan/chatgpt-proxy-server&#xA;    restart: unless-stopped&#xA;&#xA;  chatgpt-proxy-server-warp:&#xA;    container_name: chatgpt-proxy-server-warp&#xA;    image: linweiyuan/chatgpt-proxy-server-warp&#xA;    restart: unless-stopped&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;Java Swing GUI application: &lt;a href=&#34;https://github.com/linweiyuan/ChatGPT-Swing&#34;&gt;ChatGPT-Swing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Golang TUI application: &lt;a href=&#34;https://github.com/linweiyuan/go-chatgpt&#34;&gt;go-chatgpt&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kubernetes/kubectl</title>
    <updated>2023-04-20T01:33:58Z</updated>
    <id>tag:github.com,2023-04-20:/kubernetes/kubectl</id>
    <link href="https://github.com/kubernetes/kubectl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Issue tracker and mirror of kubectl code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kubectl&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubernetes/kubectl/master/images/kubectl-logo-medium.png&#34; alt=&#34;kubectl logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/kubernetes/kubectl&#34;&gt;&lt;img src=&#34;https://travis-ci.org/kubernetes/kubectl.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/k8s.io/kubectl&#34;&gt;&lt;img src=&#34;https://godoc.org/k8s.io/kubectl?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;k8s.io/kubectl&lt;/code&gt; repo is used to track issues for the kubectl cli distributed with &lt;code&gt;k8s.io/kubernetes&lt;/code&gt;. It also contains packages intended for use by client programs. E.g. these packages are vendored into &lt;code&gt;k8s.io/kubernetes&lt;/code&gt; for use in the &lt;a href=&#34;https://github.com/kubernetes/kubernetes/tree/master/cmd/kubectl&#34;&gt;kubectl&lt;/a&gt; cli client. That client will eventually move here too.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Full unit-test coverage.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go tools compliant (&lt;code&gt;go get&lt;/code&gt;, &lt;code&gt;go test&lt;/code&gt;, etc.). It needs to be vendorable somewhere else.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;No dependence on &lt;code&gt;k8s.io/kubernetes&lt;/code&gt;. Dependence on other repositories is fine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Code must be usefully &lt;a href=&#34;https://go.dev/doc/effective_go#commentary&#34;&gt;commented&lt;/a&gt;. Not only for developers on the project, but also for external users of these packages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When reviewing PRs, you are encouraged to use Golang&#39;s &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;code review comments&lt;/a&gt; page.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Packages in this repository should aspire to implement sensible, small interfaces and import a limited set of dependencies.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community, discussion, contribution, and support&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/kubernetes/community/tree/master/sig-cli&#34;&gt;this document&lt;/a&gt; for how to reach the maintainers of this project.&lt;/p&gt; &#xA;&lt;h3&gt;Code of conduct&lt;/h3&gt; &#xA;&lt;p&gt;Participation in the Kubernetes community is governed by the &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes/kubectl/master/code-of-conduct.md&#34;&gt;Kubernetes Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ConnectAI-E/Dingtalk-OpenAI</title>
    <updated>2023-04-20T01:33:58Z</updated>
    <id>tag:github.com,2023-04-20:/ConnectAI-E/Dingtalk-OpenAI</id>
    <link href="https://github.com/ConnectAI-E/Dingtalk-OpenAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔔 钉钉 &amp; 🤖 GPT-3.5 让你的工作效率直接起飞 🚀 私聊群聊方式、单聊串聊模式、角色扮演、图片创作 🚀&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;ChatGPT Dingtalk&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/eryajf&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Auth-eryajf-ff69b4&#34; alt=&#34;Auth&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/eryajf/chatgpt-dingtalk&#34; alt=&#34;Go Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub Pull Requests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://views.whatilearened.today/views/github/eryajf/chatgpt-dingtalk.svg?sanitize=true&#34; alt=&#34;HitCount&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/eryajf/chatgpt-dingtalk&#34; alt=&#34;Docker Image Size (latest by date)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/eryajf/chatgpt-dingtalk&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/eryajf/chatgpt-dingtalk&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/eryajf/chatgpt-dingtalk&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt; 🌉 基于GO语言实现的钉钉集成ChatGPT机器人 🌉&lt;/p&gt; &#xA; &lt;img src=&#34;https://camo.githubusercontent.com/82291b0fe831bfc6781e07fc5090cbd0a8b912bb8b8d4fec0696c881834f81ac/68747470733a2f2f70726f626f742e6d656469612f394575424971676170492e676966&#34; width=&#34;800&#34; height=&#34;3&#34;&gt; &#xA;&lt;/div&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/33259379/223607306-2ac836a2-7ce5-4a12-a16e-bec40b22d8d6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🥁 号外号外!&lt;/h2&gt; &#xA;&lt;p&gt;大家好呀！我是&lt;a href=&#34;https://github.com/ConnectAI-E/Feishu-OpenAI&#34;&gt;feishu-OpenAI&lt;/a&gt;的作者River。非常兴奋地欢迎大家加入我们的&lt;a href=&#34;https://fork-way.feishu.cn/base/LzPObR5YQaHSAssauDAcZdS3nuo?table=tblvKqjRYNfmoLMo&amp;amp;view=vewsekmPW4&#34;&gt;Connect-AI开源马拉松&lt;/a&gt;活动！&lt;/p&gt; &#xA;&lt;p&gt;AIGC的热潮正在各行各业掀起巨大的变革，我们看到各大社群以”知识xx“为代表的”割韭菜“行为，不禁感到无奈。身为互联网行业的从业者,与其指点江山激扬文字，不如参与其中，感受发展。为此我们成立了下面10个课题组，并从技术可行性的基础上进行了调研，现并欢迎大家自由选择组队并加入相关的项目推进群。&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;1200&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/50035229/232206534-0260de35-b0e0-4777-ae8b-0e87f14c8e9f.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;无论您是设计师、前端工程师、后端工程师、算法工程师还是测试小伙伴，只要您对GPT技术充满热情，就可以参与到我们的开源项目中来。设计师们可以参与多个repo，优化项目的交互体验和设计风格；前端工程师可以参与每个项目的UI搭建；后端和算法工程师们则可以积极学习AI能力的使用。我们还诚邀测试小伙伴参与每次发版前的功能内测。&lt;/p&gt; &#xA;&lt;p&gt;每个项目都需要招募一个项目负责人，我们会将其指定为repo的owner。如果您愿意深度参与，可以找我报名成为负责人。当然，如果项目表上有队长名称，则代表已经招募完成。其他同学可以在业余时间参与一个或多个项目。&lt;/p&gt; &#xA;&lt;p&gt;我们的目标是为AI开源社区提供一个可持续性的生态系统，并且鼓励更多的人参与其中，共同推进AI技术的发展。后续遇到企业的定制AI开发需求，我们会优先邀请相关课题的同学参与，这样既可以帮助他们获取不错的收入，也符合开源的精神和原则。我们希望通过这样的方式，让我们的开源项目更有可持续性，让更多人愿意加入我们，共同推进AI技术的发展！&lt;/p&gt; &#xA;&lt;p&gt;预期奖励内容包括：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A奖励：小队完成度奖励，鼓励小队长参与项目，能够在指定时间内完成课题规定的基本内容，队长应获得一定的奖励。&lt;/li&gt; &#xA; &lt;li&gt;B奖励：项目优秀度奖励，根据项目复杂度、组内配合度、产品创意度，以及期中和期末用户体验打分，评选出部分优秀项目的队长和核心队员，并给予相应奖励。&lt;/li&gt; &#xA; &lt;li&gt;C奖励：成员活跃度奖励，考虑到设计和测试身份的特殊性，无法单独带领项目。因此，我们将评选出优秀设计师和优秀测试反馈员，以表彰他们在项目中的积极参与和贡献。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;做出下面奖励安排&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A奖励项目完成度：京东E卡300 * 10&lt;/li&gt; &#xA; &lt;li&gt;B奖励项目优秀度： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;杰出奖: iPhone14 * 1 + 京东E卡300 * 3&lt;/li&gt; &#xA;   &lt;li&gt;优秀奖: PS5 * 1 + 京东E卡300 * 3&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;C奖励成员活跃度：京东E卡300 * 4&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;我们队员有&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/circlestarzero/EX-chatGPT&#34;&gt;EX-chatGPT&lt;/a&gt;和&lt;a href=&#34;https://github.com/kaixindelele/ChatPaper&#34;&gt;ChatPaper的维护者&lt;/a&gt;--&amp;gt;&lt;a href=&#34;https://github.com/circlestarzero&#34;&gt;cc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk&#34;&gt;钉钉GPT的维护者&lt;/a&gt;--&amp;gt;&lt;a href=&#34;https://github.com/eryajf&#34;&gt;eryajf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Leizhenpeng/feishu-chatgpt&#34;&gt;飞书GPT的维护者&lt;/a&gt;--&amp;gt;&lt;a href=&#34;https://space.bilibili.com/66891783&#34;&gt;river&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastergo.com/community/profile/72319417503384?tab=plugin&#34;&gt;上百款在线设计插件的开发者&lt;/a&gt;--&amp;gt;山山&lt;/li&gt; &#xA; &lt;li&gt;正在心动的你！&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果您对Connect-AI开源马拉松感兴趣，请随时加入项目推进群，一起为AI技术的未来贡献力量！&lt;/p&gt; &#xA;&lt;img width=&#34;200&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/50035229/232762781-e89e01ec-2ba1-48c3-a1fc-9c230a9a169c.png&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;p&gt;&lt;strong&gt;目录&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E5%89%8D%E8%A8%80&#34;&gt;前言&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D&#34;&gt;功能介绍&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E4%BD%BF%E7%94%A8%E5%89%8D%E6%8F%90&#34;&gt;使用前提&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B&#34;&gt;使用教程&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E7%AC%AC%E4%B8%80%E6%AD%A5%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8&#34;&gt;第一步，部署应用&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#docker%E9%83%A8%E7%BD%B2&#34;&gt;docker部署&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%83%A8%E7%BD%B2&#34;&gt;二进制部署&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E5%88%9B%E5%BB%BA%E6%9C%BA%E5%99%A8%E4%BA%BA&#34;&gt;第二步，创建机器人&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E6%96%B9%E6%A1%88%E4%B8%80outgoing%E7%B1%BB%E5%9E%8B%E6%9C%BA%E5%99%A8%E4%BA%BA&#34;&gt;方案一：outgoing类型机器人&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E6%96%B9%E6%A1%88%E4%BA%8C%E4%BC%81%E4%B8%9A%E5%86%85%E9%83%A8%E5%BA%94%E7%94%A8&#34;&gt;方案二：企业内部应用&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E4%BA%AE%E7%82%B9%E7%89%B9%E8%89%B2&#34;&gt;亮点特色&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E4%B8%8E%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%A7%81%E8%81%8A&#34;&gt;与机器人私聊&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E5%B8%AE%E5%8A%A9%E5%88%97%E8%A1%A8&#34;&gt;帮助列表&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E5%88%87%E6%8D%A2%E6%A8%A1%E5%BC%8F&#34;&gt;切换模式&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E6%9F%A5%E8%AF%A2%E4%BD%99%E9%A2%9D&#34;&gt;查询余额&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E6%97%A5%E5%B8%B8%E9%97%AE%E9%A2%98&#34;&gt;日常问题&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E9%80%9A%E8%BF%87%E5%86%85%E7%BD%AEprompt%E8%81%8A%E5%A4%A9&#34;&gt;通过内置prompt聊天&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87&#34;&gt;生成图片&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E6%94%AF%E6%8C%81-gpt-4&#34;&gt;支持 gpt-4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91&#34;&gt;本地开发&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E&#34;&gt;配置文件说明&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98&#34;&gt;常见问题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E8%BF%9B%E7%BE%A4%E4%BA%A4%E6%B5%81&#34;&gt;进群交流&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E6%84%9F%E8%B0%A2&#34;&gt;感谢&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E8%B5%9E%E8%B5%8F&#34;&gt;赞赏&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E9%AB%98%E5%85%89%E6%97%B6%E5%88%BB&#34;&gt;高光时刻&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#star%E5%8E%86%E5%8F%B2&#34;&gt;Star历史&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E8%B4%A1%E7%8C%AE%E8%80%85%E5%88%97%E8%A1%A8&#34;&gt;贡献者列表&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;本项目可以助你将GPT机器人集成到钉钉群聊当中。当前默认模型为&lt;code&gt;gpt-3.5&lt;/code&gt;，支持&lt;code&gt;gpt-4&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;📢 注意&lt;/code&gt;：当下部署以及配置流程都已非常成熟，文档和issue中基本都覆盖到了，因此不再回答任何项目安装部署与配置使用上的问题，如果完全不懂，可考虑通过 &lt;strong&gt;&lt;a href=&#34;mailto:eryajf@163.com&#34;&gt;邮箱&lt;/a&gt;&lt;/strong&gt; 联系我进行付费的技术支持。&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;📢 注意&lt;/code&gt;：这个项目所有的功能，都汇聚在&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/docs/userGuide.md&#34;&gt;使用指南&lt;/a&gt;中，请务必仔细阅读，以体验其完整精髓。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;🥳 &lt;strong&gt;欢迎关注我的其他开源项目：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/go-ldap-admin&#34;&gt;Go-Ldap-Admin&lt;/a&gt;：🌉 基于Go+Vue实现的openLDAP后台管理项目。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/learning-weekly&#34;&gt;learning-weekly&lt;/a&gt;：📝 周刊内容以运维技术和Go语言周边为主，辅以GitHub上优秀项目或他人优秀经验。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/HowToStartOpenSource&#34;&gt;HowToStartOpenSource&lt;/a&gt;：🌈 GitHub开源项目维护协同指南。&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/read-list&#34;&gt;read-list&lt;/a&gt;：📖 优质内容订阅，阅读方为根本&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/eryajf/awesome-github-profile-readme-chinese&#34;&gt;awesome-github-profile-readme-chinese&lt;/a&gt;：🦩 优秀的中文区个人主页搜集&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;🚜 我还创建了一个项目 &lt;strong&gt;&lt;a href=&#34;https://github.com/eryajf/awesome-chatgpt-answer&#34;&gt;awesome-chatgpt-answer&lt;/a&gt;&lt;/strong&gt; ：记录那些问得好，答得妙的时刻，欢迎提交你与ChatGPT交互过程中遇到的那些精妙对话。&lt;/p&gt; &#xA;&lt;p&gt;⚗️ openai官方提供了一个 &lt;strong&gt;&lt;a href=&#34;https://status.openai.com/&#34;&gt;状态页&lt;/a&gt;&lt;/strong&gt; 来呈现当前openAI服务的状态，同时如果有问题发布公告也会在这个页面，如果你感觉它有问题了，可以在这个页面看看。&lt;/p&gt; &#xA;&lt;h2&gt;功能介绍&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚀 帮助菜单：通过发送 &lt;code&gt;帮助&lt;/code&gt; 将看到帮助列表，&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E5%B8%AE%E5%8A%A9%E5%88%97%E8%A1%A8&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🥷 私聊：支持与机器人单独私聊(无需艾特)，&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E4%B8%8E%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%A7%81%E8%81%8A&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;💬 群聊：支持在群里艾特机器人进行对话&lt;/li&gt; &#xA; &lt;li&gt;🙋 单聊模式：每次对话都是一次新的对话，没有历史聊天上下文联系&lt;/li&gt; &#xA; &lt;li&gt;🗣 串聊模式：带上下文理解的对话模式&lt;/li&gt; &#xA; &lt;li&gt;🎨 图片生成：通过发送 &lt;code&gt;#图片&lt;/code&gt;关键字开头的内容进行生成图片，&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎭 角色扮演：支持场景模式，通过 &lt;code&gt;#周报&lt;/code&gt; 的方式触发内置prompt模板 &lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E9%80%9A%E8%BF%87%E5%86%85%E7%BD%AEprompt%E8%81%8A%E5%A4%A9&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🧑‍💻 频率限制：通过配置指定，自定义单个用户单日最大对话次数&lt;/li&gt; &#xA; &lt;li&gt;💵 余额查询：通过发送 &lt;code&gt;余额&lt;/code&gt; 关键字查询当前key所剩额度，&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E6%9F%A5%E8%AF%A2%E4%BD%99%E9%A2%9D&#34;&gt;🖼 查看示例&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🔗 自定义api域名：通过配置指定，解决国内服务器无法直接访问openai的问题&lt;/li&gt; &#xA; &lt;li&gt;🪜 添加代理：通过配置指定，通过给应用注入代理解决国内服务器无法访问的问题&lt;/li&gt; &#xA; &lt;li&gt;👐 默认模式：支持自定义默认的聊天模式，通过配置化指定&lt;/li&gt; &#xA; &lt;li&gt;📝 查询对话：通过发送&lt;code&gt;#查对话 username:xxx&lt;/code&gt;查询xxx的对话历史，可在线预览，可下载到本地&lt;/li&gt; &#xA; &lt;li&gt;👹 白名单机制：通过配置指定，支持指定群组名称和用户名称作为白名单，从而实现可控范围与机器人对话&lt;/li&gt; &#xA; &lt;li&gt;💂‍♀️ 管理员机制：通过配置指定管理员，部分敏感操作，以及一些应用配置，管理员有权限进行操作&lt;/li&gt; &#xA; &lt;li&gt;㊙️ 敏感词过滤：通过配置指定敏感词，提问时触发，则不允许提问，回答的内容中触发，则以&lt;code&gt;*&lt;/code&gt;代替&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用前提&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;有Openai账号，并且创建好&lt;code&gt;api_key&lt;/code&gt;，注册相关事项可以参考&lt;a href=&#34;https://juejin.cn/post/7173447848292253704&#34;&gt;此文章&lt;/a&gt; 。访问&lt;a href=&#34;https://beta.openai.com/account/api-keys&#34;&gt;这里&lt;/a&gt;，申请个人秘钥。&lt;/li&gt; &#xA; &lt;li&gt;在钉钉开发者后台创建机器人，配置应用程序回调。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用教程&lt;/h2&gt; &#xA;&lt;h3&gt;第一步，部署应用&lt;/h3&gt; &#xA;&lt;h4&gt;docker部署&lt;/h4&gt; &#xA;&lt;p&gt;推荐你使用docker快速运行本项目。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;第一种：基于环境变量运行&#xA;# 运行项目&#xA;$ docker run -itd --name chatgpt -p 8090:8090 \&#xA;  -v ./data:/app/data --add-host=&#34;host.docker.internal:host-gateway&#34; \&#xA;  -e LOG_LEVEL=&#34;info&#34; -e APIKEY=换成你的key -e BASE_URL=&#34;&#34; \&#xA;  -e MODEL=&#34;gpt-3.5-turbo&#34; -e SESSION_TIMEOUT=600 \&#xA;  -e HTTP_PROXY=&#34;http://host.docker.internal:15732&#34; \&#xA;  -e DEFAULT_MODE=&#34;单聊&#34; -e MAX_REQUEST=0 -e PORT=8090 \&#xA;  -e SERVICE_URL=&#34;你当前服务外网可访问的URL&#34; -e CHAT_TYPE=&#34;0&#34; \&#xA;  -e ALLOW_GROUPS=a,b -e ALLOW_OUTGOING_GROUPS=a,b -e ALLOW_USERS=a,b -e DENY_USERS=a,b -e VIP_USERS=a,b -e ADMIN_USERS=a,b -e APP_SECRETS=&#34;xxx,yyy&#34; \&#xA;  -e SENSITIVE_WORDS=&#34;aa,bb&#34; \&#xA;  -e AZURE_ON=&#34;false&#34; -e AZURE_API_VERSION=&#34;&#34; -e AZURE_RESOURCE_NAME=&#34;&#34; \&#xA;  -e AZURE_DEPLOYMENT_NAME=&#34;&#34; -e AZURE_OPENAI_TOKEN=&#34;&#34; \&#xA;  -e HELP=&#34;欢迎使用本工具\n\n你可以查看：[用户指南](https://github.com/eryajf/chatgpt-dingtalk/blob/main/docs/userGuide.md)\n\n这是一个[开源项目](https://github.com/eryajf/chatgpt-dingtalk/)&#xA;  ，觉得不错你可以来波素质三连.&#34;  \&#xA;  --restart=always  dockerproxy.com/eryajf/chatgpt-dingtalk:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;运行命令中映射的配置文件参考下边的&lt;a href=&#34;https://raw.githubusercontent.com/ConnectAI-E/Dingtalk-OpenAI/main/#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E&#34;&gt;配置文件说明&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;📢 注意：&lt;/code&gt;如果使用docker部署，那么PORT参数不需要进行任何调整。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;📢 注意：&lt;/code&gt;ALLOW_GROUPS,ALLOW_USERS,DENY_USERS,VIP_USERS,ADMIN_USERS 参数为数组，如果需要指定多个，可用英文逗号分割。outgoing机器人模式下这些参数无效。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;📢 注意：&lt;/code&gt;如果服务器节点本身就在国外或者自定义了&lt;code&gt;BASE_URL&lt;/code&gt;，那么就把&lt;code&gt;HTTP_PROXY&lt;/code&gt;参数留空即可。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;📢 注意：&lt;/code&gt;如果使用docker部署，那么proxy地址可以直接使用如上方式部署，&lt;code&gt;host.docker.internal&lt;/code&gt;会指向容器所在宿主机的IP，只需要更改端口为你的代理端口即可。参见：&lt;a href=&#34;https://wiki.eryajf.net/pages/674f53/&#34;&gt;Docker容器如何优雅地访问宿主机网络&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;第二种：基于配置文件挂载运行&#xA;# 复制配置文件，根据自己实际情况，调整配置里的内容&#xA;$ cp config.example.yml config.yml  # 其中 config.example.yml 从项目的根目录获取&#xA;&#xA;# 运行项目&#xA;$ docker run -itd --name chatgpt -p 8090:8090  -v `pwd`/config.yml:/app/config.yml --restart=always  dockerproxy.com/eryajf/chatgpt-dingtalk:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;其中配置文件参考下边的配置文件说明。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;第三种：使用 docker compose 运行&#xA;$ wget https://raw.githubusercontent.com/eryajf/chatgpt-dingtalk/main/docker-compose.yml&#xA;&#xA;$ vim docker-compose.yml # 编辑 APIKEY 等信息&#xA;&#xA;$ docker compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;部署完成之后，通过Nginx代理本服务：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {&#xA;    listen       80;&#xA;    server_name  chat.eryajf.net;&#xA;&#xA;    client_header_timeout 120s;&#xA;    client_body_timeout 120s;&#xA;&#xA;    location / {&#xA;        proxy_set_header Host $host;&#xA;        proxy_set_header X-Real-IP $remote_addr;&#xA;        proxy_set_header X-Forwarded-Proto $scheme;&#xA;        proxy_set_header X-Forwarded-For $remote_addr;&#xA;        proxy_pass http://localhost:8090;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;部署完成之后，就可以在群里艾特机器人进行体验了。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;📢 注意:&lt;/code&gt; 配置Nginx代理步骤是个可选步骤，你也可以直接通过服务器外网IP:PORT作为回调地址。&lt;/p&gt; &#xA;&lt;p&gt;Nginx配置完毕之后，可以先手动请求一下，通过服务日志输出判断服务是否正常可用：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl -s &#39;http://chat.eryajf.net/&#39;&#xA;{&#xA;  &#34;msg&#34;: &#34;欢迎使用钉钉机器人&#34;,&#xA;  &#34;status&#34;: &#34;ok&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果手动请求没有问题，那么就可以在钉钉群里与机器人进行对话了。&lt;/p&gt; &#xA;&lt;h4&gt;二进制部署&lt;/h4&gt; &#xA;&lt;p&gt;如果你想通过命令行直接部署，可以直接下载release中的&lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/releases&#34;&gt;压缩包&lt;/a&gt; ，请根据自己系统以及架构选择合适的压缩包，下载之后直接解压运行。&lt;/p&gt; &#xA;&lt;p&gt;下载之后，在本地解压，即可看到可执行程序，与配置文件：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ tar xf chatgpt-dingtalk-v0.0.4-darwin-arm64.tar.gz&#xA;$ cd chatgpt-dingtalk-v0.0.4-darwin-arm64&#xA;$ cp config.example.yml  config.yml # 然后根据情况调整配置文件内容,宿主机如遇端口冲突,可通过调整config.yml中的port参数自定义服务端口&#xA;$ ./chatgpt-dingtalk  # 直接运行&#xA;&#xA;# 如果要守护在后台运行&#xA;$ nohup ./chatgpt-dingtalk &amp;amp;&amp;gt; run.log &amp;amp;&#xA;$ tail -f run.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;第二步，创建机器人&lt;/h3&gt; &#xA;&lt;h4&gt;方案一：outgoing类型机器人&lt;/h4&gt; &#xA;&lt;p&gt;钉钉群内的机器人有一个outgoing模式，当你创建机器人的时候，可以选择启用这个模式，然后直接配置回调地址，免去在管理后台创建应用的步骤，就可以直接投入使用。&lt;/p&gt; &#xA;&lt;p&gt;官方文档：&lt;a href=&#34;https://open.dingtalk.com/document/orgapp/custom-robot-access&#34;&gt;自定义机器人接入&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;但是这个模式貌似是部分开放的(目前来看貌似是部分人有创建这个类型的白名单)，所以如果你在钉钉群聊中添加&lt;code&gt;自定义机器人&lt;/code&gt;的时候，看到和我一样的信息，则说明无法使用这种方式：&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230325_162017.jpg&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;code&gt;📢 注意&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果你的和我一样，那么就只能放弃这种方案，往下看第二种对接方案。&lt;/li&gt; &#xA; &lt;li&gt;如果使用这种方案，那么就不能与机器人私聊对话，只能局限在群聊当中艾特机器人聊天。&lt;/li&gt; &#xA; &lt;li&gt;如果使用这种方案，则在群聊当中并不能达到真正的艾特发消息人的效果，因为这种机器人回调过来的关键信息为空。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;方案二：企业内部应用&lt;/h4&gt; &#xA;&lt;p&gt;创建步骤参考文档：&lt;a href=&#34;https://open.dingtalk.com/document/robots/enterprise-created-chatbot&#34;&gt;企业内部开发机器人&lt;/a&gt;，或者根据如下步骤进行配置。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;创建机器人。&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA;   &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163616.png&#34;&gt; &#xA;  &lt;/details&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;📢 注意1：&lt;/code&gt;可能现在创建机器人的时候名字为&lt;code&gt;chatgpt&lt;/code&gt;会被钉钉限制，请用其他名字命名。&lt;/p&gt; &#xA;   &lt;p&gt;&lt;code&gt;📢 注意2：&lt;/code&gt;第四步骤点击创建应用的时候，务必选择使用旧版，从而创建旧版机器人，如果选择新版，则机器人的功能集成在了应用当中的消息推送模块儿。&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;步骤比较简单，这里就不赘述了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;配置机器人回调接口。&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA;   &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163652.png&#34;&gt; &#xA;  &lt;/details&gt; &lt;p&gt;创建完毕之后，点击机器人开发管理，然后配置将要部署的服务所在服务器的出口IP，以及将要给服务配置的域名。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;📢 注意：&lt;/code&gt; 添加消息接收地址的时候，务必确保服务在正常运行且可通过回调地址访问，否则保存时将会失败。&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;📢 如果提示：&lt;/code&gt; 消息接收地址校验失败（请确保公网可访问该地址，如无有效SSL证书，可选择禁用证书校验），那么可以先输入一个&lt;code&gt;https://&lt;/code&gt;，然后就能看到&lt;code&gt;禁用https&lt;/code&gt;的选项了，选择禁用，然后再把地址改成&lt;code&gt;http&lt;/code&gt;就好了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;发布机器人。&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA;   &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163709.png&#34;&gt; &#xA;  &lt;/details&gt; &lt;p&gt;点击版本管理与发布，然后点击上线，这个时候就能在钉钉的群里中添加这个机器人了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;群聊添加机器人。&lt;/p&gt; &#xA;  &lt;details&gt; &#xA;   &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA;   &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163724.png&#34;&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;亮点特色&lt;/h2&gt; &#xA;&lt;h3&gt;与机器人私聊&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;2023-03-08&lt;/code&gt;补充，我发现也可以不在群里艾特机器人聊天，还可点击机器人，然后点击发消息，通过与机器人直接对话进行聊天：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;由 &lt;a href=&#34;https://github.com/Raytow&#34;&gt;@Raytow&lt;/a&gt; 同学发现，在机器人自动生成的测试群里无法直接私聊机器人，在其他群里单独添加这个机器人，然后再点击就可以跟它私聊了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/33259379/223607306-2ac836a2-7ce5-4a12-a16e-bec40b22d8d6.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;帮助列表&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;艾特机器人发送空内容或者帮助，会返回帮助列表。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230216_221253.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;切换模式&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;发送指定关键字，可以切换不同的模式。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230215_184655.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;📢 注意：串聊模式下，群里每个人的聊天上下文是独立的。 📢 注意：默认对话模式为单聊，因此不必发送单聊即可进入单聊模式，而要进入串聊，则需要发送串聊关键字进行切换，当串聊内容超过最大限制的时候，你可以发送重置，然后再次进入串聊模式。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;查询余额&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;艾特机器人发送 &lt;code&gt;余额&lt;/code&gt; 二字，会返回当前key对应的账号的剩余额度以及可用日期。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230304_222522.jpg&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;日常问题&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20221209_163739.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;通过内置prompt聊天&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;发送模板两个字，会返回当前内置支持的prompt列表。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230323_152703.jpg&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果你发现有比较优秀的prompt，欢迎PR。注意：一些与钉钉使用场景不是很匹配的，就不要提交了。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;生成图片&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;发送以 &lt;code&gt;#图片&lt;/code&gt;开头的内容，将会触发绘画能力，图片生成之后，将会保存在程序根目录下的&lt;code&gt;images目录&lt;/code&gt;下。&lt;/p&gt; &#xA; &lt;p&gt;如果你绘图没有思路，可以在&lt;a href=&#34;https://www.clickprompt.org/zh-CN/&#34;&gt;这里&lt;/a&gt;以及&lt;a href=&#34;https://lexica.art/&#34;&gt;这里&lt;/a&gt;找到一些不错的prompt。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230323_150547.jpg&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;支持 gpt-4&lt;/h3&gt; &#xA;&lt;p&gt;如果你的账号通过了官方的白名单，那么可以将模型配置为：&lt;code&gt;gpt-4-0314&lt;/code&gt;或&lt;code&gt;gpt-4&lt;/code&gt;，目前gpt-4的余额查询以及图片生成功能暂不可用，可能是接口限制，也可能是其他原因，等我有条件的时候，会对这些功能进行测试验证。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;以下是gpt-3.5与gpt-4对数学计算方面的区别。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🖼 点我查看示例图&lt;/summary&gt; &#xA; &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230330_180308.jpg&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;感谢&lt;a href=&#34;https://github.com/PIRANHACHAN&#34;&gt;@PIRANHACHAN&lt;/a&gt;同学提供的gpt-4的key，使得项目在gpt-4的对接上能够进行验证测试，达到了可用状态。&lt;/p&gt; &#xA;&lt;h2&gt;本地开发&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# 获取项目&#xA;$ git clone https://github.com/eryajf/chatgpt-dingtalk.git&#xA;&#xA;# 进入项目目录&#xA;$ cd chatgpt-dingtalk&#xA;&#xA;# 复制配置文件，根据个人实际情况进行配置&#xA;$ cp config.example.yml config.yml&#xA;&#xA;# 启动项目&#xA;$ go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置文件说明&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# 应用的日志级别，info or debug&#xA;log_level: &#34;info&#34;&#xA;# openai api_key&#xA;api_key: &#34;xxxxxxxxx&#34;&#xA;# 如果你使用官方的接口地址 https://api.openai.com，则留空即可，如果你想指定请求url的地址，可通过这个参数进行配置，注意需要带上 http 协议&#xA;base_url: &#34;&#34;&#xA;# 指定模型，默认为 gpt-3.5-turbo , 可选参数有： &#34;gpt-4-0314&#34;, &#34;gpt-4&#34;, &#34;gpt-3.5-turbo-0301&#34;, &#34;gpt-3.5-turbo&#34;，如果使用gpt-4，请确认自己是否有接口调用白名单&#xA;model: &#34;gpt-3.5-turbo&#34;&#xA;# 会话超时时间,默认600秒,在会话时间内所有发送给机器人的信息会作为上下文&#xA;session_timeout: 600&#xA;# 指定请求时使用的代理，如果为空，则不使用代理，注意需要带上 http 协议 或 socks5 协议&#xA;http_proxy: &#34;&#34;&#xA;# 指定默认的对话模式，可根据实际需求进行自定义，如果不设置，默认为单聊，即无上下文关联的对话模式&#xA;default_mode: &#34;单聊&#34;&#xA;# 单人单日请求次数上限，默认为0，即不限制&#xA;max_request: 0&#xA;# 指定服务启动端口，默认为 8090，一般在二进制宿主机部署时，遇到端口冲突时使用&#xA;port: &#34;8090&#34;&#xA;# 指定服务的地址，就是当前服务可供外网访问的地址(或者直接理解为你配置在钉钉回调那里的地址)，用于生成图片时给钉钉做渲染&#xA;service_url: &#34;http://chat.eryajf.net&#34;&#xA;# 限定对话类型 0：不限 1：只能单聊 2：只能群聊&#xA;chat_type: &#34;0&#34;&#xA;# 哪些群组可以进行对话（仅在chat_type为0、2时有效），如果留空，则表示允许所有群组，如果要限制，则列表中写群ID（ConversationID）&#xA;# 群ID，可在群组中 @机器人 群ID 来查看日志获取，例如日志会输出：[🙋 企业内部机器人 在『测试』群的ConversationID为: &#34;cidrabcdefgh1234567890AAAAA&#34;]，获取后可填写该参数并重启程序&#xA;allow_groups: []&#xA;# 哪些普通群（使用outgoing机器人）可以进行对话，如果留空，则表示允许所有群组，如果要限制，则列表中写群ID（ConversationID）&#xA;# 群ID，可在群组中 @机器人 群ID 来查看日志获取，例如日志会输出：[🙋 outgoing机器人 在『测试』群的ConversationID为: &#34;cidrabcdefgh1234567890AAAAA&#34;]，获取后可填写该参数并重启程序&#xA;# 如果不想支持outgoing机器人功能，这里可以随意设置一个内部群组，例如：cidrabcdefgh1234567890AAAAA；或随意一个字符串，例如：disabled&#xA;# 建议该功能默认关闭：除非你必须要用到outgoing机器人&#xA;allow_outgoing_groups: [&#34;disabled&#34;]&#xA;# 以下 allow_users、deny_users、vip_users、admin_users 配置中填写的是用户的userid，outgoing机器人模式下不适用这些配置&#xA;# 比如 [&#34;1301691029702722&#34;,&#34;1301691029702733&#34;]，这个信息需要在钉钉管理后台的通讯录当中获取：https://oa.dingtalk.com/contacts.htm#/contacts&#xA;# 哪些用户可以进行对话，如果留空，则表示允许所有用户，如果要限制，则列表中写用户的userid&#xA;allow_users: []&#xA;# 哪些用户不可以进行对话，如果留空，则表示允许所有用户（如allow_user有配置，需满足相应条件），如果要限制，则列表中写用户的userid，黑名单优先级高于白名单&#xA;deny_users: []&#xA;# 哪些用户可以进行无限对话，如果留空，则表示只允许管理员（如max_request配置为0，则允许所有人）&#xA;# 如果要针对指定VIP用户放开限制（如max_request配置不为0），则列表中写用户的userid&#xA;vip_users: []&#xA;# 指定哪些人为此系统的管理员，如果留空，则表示没有人是管理员，如果要限制，则列表中写用户的userid&#xA;# 注意：如果下边的app_secrets为空，以及使用outgoing的方式配置机器人，这两种情况下，都表示没有人是管理员&#xA;admin_users: []&#xA;# 钉钉机器人在应用信息中的AppSecret，为了校验回调的请求是否合法，如果留空，将会忽略校验，则该接口将会存在其他人也能随意调用的安全隐患，因此强烈建议配置正确的secret，如果你的服务对接给多个机器人，这里可以配置多个机器人的secret&#xA;app_secrets: []&#xA;# 敏感词，提问时触发，则不允许提问，回答的内容中触发，则以 *** 代替&#xA;sensitive_words: []&#xA;# 帮助信息，放在配置文件，可供自定义&#xA;help: &#34;欢迎使用本工具\n\n你可以查看：[用户指南](https://github.com/eryajf/chatgpt-dingtalk/blob/main/docs/userGuide.md)\n\n这是一个[开源项目](https://github.com/eryajf/chatgpt-dingtalk/)，觉得不错你可以来波素质三连.&#34;&#xA;&#xA;# Azure OpenAI 配置&#xA;# 例如 curl https://forkway-test.openai.azure.com/openai/deployments/test-dev/chat/completions\?api-version\=2023-03-15-preview \&#xA;# azure_api_version: &#34;2023-03-15-preview&#34;&#xA;# azure_resource_name: &#34;forkway-test&#34;&#xA;# azure_deployment_name: &#34;test-dev&#34;&#xA;azure_on: false # 如果是true，则会走azure的openai接口&#xA;azure_api_version: &#34;2023-03-15-preview&#34;&#xA;azure_resource_name: &#34;xxxx&#34;&#xA;azure_deployment_name: &#34;xxxx&#34;&#xA;azure_openai_token: &#34;xxxx&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;常见问题&lt;/h2&gt; &#xA;&lt;p&gt;如何更好地使用ChatGPT：这里有&lt;a href=&#34;https://github.com/f/awesome-chatgpt-prompts&#34;&gt;许多案例&lt;/a&gt;可供参考。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;🗣 重要重要&lt;/code&gt; 一些常见的问题，我单独开issue放在这里：&lt;a href=&#34;https://github.com/eryajf/chatgpt-dingtalk/issues/44&#34;&gt;👉点我👈&lt;/a&gt;，可以查看这里辅助你解决问题，如果里边没有，请对历史issue进行搜索(不要提交重复的issue)，也欢迎大家补充。&lt;/p&gt; &#xA;&lt;h2&gt;进群交流&lt;/h2&gt; &#xA;&lt;p&gt;我创建了一个钉钉的交流群，欢迎进群交流。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230405_191425.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;感谢&lt;/h2&gt; &#xA;&lt;p&gt;这个项目能够成立，离不开这些开源项目：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-resty/resty&#34;&gt;go-resty/resty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patrickmn/go-cache&#34;&gt;patrickmn/go-cache&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/solywsh/chatgpt&#34;&gt;solywsh/chatgpt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xgfone/ship&#34;&gt;xgfone/ship&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avast/retry-go&#34;&gt;avast/retry-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sashabaranov/go-openai&#34;&gt;sashabaranov/go-openapi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/log&#34;&gt;charmbracelet/log&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;赞赏&lt;/h2&gt; &#xA;&lt;p&gt;如果觉得这个项目对你有帮助，你可以请作者&lt;a href=&#34;https://wiki.eryajf.net/reward/&#34;&gt;喝杯咖啡 ☕️&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;高光时刻&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目曾在 | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2022/2022-12-12.md#go&#34;&gt;2022-12-12&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2022/2022-12-18.md#go&#34;&gt;2022-12-18&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2022/2022-12-19.md#go&#34;&gt;2022-12-19&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2022/2022-12-20.md#go&#34;&gt;2022-12-20&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-09.md#go&#34;&gt;2023-02-09&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-10.md#go&#34;&gt;2023-02-10&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-11.md#go&#34;&gt;2023-02-11&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-12.md#go&#34;&gt;2023-02-12&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-13.md#go&#34;&gt;2023-02-13&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-14.md#go&#34;&gt;2023-02-14&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-02-15.md#go&#34;&gt;2023-02-15&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-04.md#go&#34;&gt;2023-03-04&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-05.md#go&#34;&gt;2023-03-05&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-19.md#go&#34;&gt;2023-03-19&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-22.md#go&#34;&gt;2023-03-22&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-25.md#go&#34;&gt;2023-03-25&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-26.md#go&#34;&gt;2023-03-26&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-27.md#go&#34;&gt;2023-03-27&lt;/a&gt; | &lt;a href=&#34;https://github.com/bonfy/github-trending/raw/master/2023-03-29.md#go&#34;&gt;2023-03-29&lt;/a&gt;, 这些天里，登上GitHub Trending。而且还在持续登榜中，可见最近openai的热度。 &lt;img src=&#34;https://cdn.staticaly.com/gh/eryajf/tu/main/img/image_20230316_114915.jpg&#34; alt=&#34;image_20230316_114915&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Star历史&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#ConnectAI-E/Dingtalk-OpenAI&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=ConnectAI-E/Dingtalk-OpenAI&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;贡献者列表&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- readme: collaborators,contributors -start --&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/eryajf&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/33259379?v=4&#34; width=&#34;75;&#34; alt=&#34;eryajf&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;二丫讲梵&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/ffinly&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/29793346?v=4&#34; width=&#34;75;&#34; alt=&#34;ffinly&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Finly&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Leizhenpeng&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/50035229?v=4&#34; width=&#34;75;&#34; alt=&#34;Leizhenpeng&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;RiverRay&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/laorange&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/68316902?v=4&#34; width=&#34;75;&#34; alt=&#34;laorange&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;辣橙&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/AydenLii&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/90502440?v=4&#34; width=&#34;75;&#34; alt=&#34;AydenLii&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;AydenLii&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/luoxufeiyan&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6621172?v=4&#34; width=&#34;75;&#34; alt=&#34;luoxufeiyan&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Hugh Gao&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/fantasticmao&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/20675747?v=4&#34; width=&#34;75;&#34; alt=&#34;fantasticmao&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Mao Mao&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/iblogc&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/3283023?v=4&#34; width=&#34;75;&#34; alt=&#34;iblogc&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Iblogc&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt;&#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/cnmill&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/21098695?v=4&#34; width=&#34;75;&#34; alt=&#34;cnmill&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Mill Peng&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/WinMin&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/18380453?v=4&#34; width=&#34;75;&#34; alt=&#34;WinMin&#34;&gt; &lt;br&gt; &lt;sub&gt;&lt;b&gt;Swing&lt;/b&gt;&lt;/sub&gt; &lt;/a&gt; &lt;/td&gt;&#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA; &lt;!-- readme: collaborators,contributors -end --&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>