<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-15T01:34:05Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vmware-tanzu/velero</title>
    <updated>2022-09-15T01:34:05Z</updated>
    <id>tag:github.com,2022-09-15:/vmware-tanzu/velero</id>
    <link href="https://github.com/vmware-tanzu/velero" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Backup and migrate Kubernetes applications and their persistent volumes&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://velero.io/docs/main/img/velero.png&#34; alt=&#34;100&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vmware-tanzu/velero/actions?query=workflow%3A%22Main+CI%22&#34;&gt;&lt;img src=&#34;https://github.com/vmware-tanzu/velero/workflows/Main%20CI/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/3811&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/3811/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Velero (formerly Heptio Ark) gives you tools to back up and restore your Kubernetes cluster resources and persistent volumes. You can run Velero with a public cloud platform or on-premises. Velero lets you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Take backups of your cluster and restore in case of loss.&lt;/li&gt; &#xA; &lt;li&gt;Migrate cluster resources to other clusters.&lt;/li&gt; &#xA; &lt;li&gt;Replicate your production cluster to development and testing clusters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Velero consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A server that runs on your cluster&lt;/li&gt; &#xA; &lt;li&gt;A command-line client that runs locally&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://velero.io/docs/&#34;&gt;The documentation&lt;/a&gt; provides a getting started guide and information about building from source, architecture, extending Velero, and more.&lt;/p&gt; &#xA;&lt;p&gt;Please use the version selector at the top of the site to ensure you are using the appropriate documentation for your version of Velero.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter issues, review the &lt;a href=&#34;https://velero.io/docs/troubleshooting&#34;&gt;troubleshooting docs&lt;/a&gt;, &lt;a href=&#34;https://github.com/vmware-tanzu/velero/issues&#34;&gt;file an issue&lt;/a&gt;, or talk to us on the &lt;a href=&#34;https://kubernetes.slack.com/messages/velero&#34;&gt;#velero channel&lt;/a&gt; on the Kubernetes Slack server.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are ready to jump in and test, add code, or help with documentation, follow the instructions on our &lt;a href=&#34;https://velero.io/docs/start-contributing&#34;&gt;Start contributing&lt;/a&gt; documentation for guidance on how to setup Velero for development.&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/vmware-tanzu/velero/releases&#34;&gt;the list of releases&lt;/a&gt; to find out about feature changes.&lt;/p&gt; &#xA;&lt;h3&gt;Velero compatibility matrix&lt;/h3&gt; &#xA;&lt;p&gt;The following is a list of the supported Kubernetes versions for each Velero version.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Velero version&lt;/th&gt; &#xA;   &lt;th&gt;Expected Kubernetes version compatibility&lt;/th&gt; &#xA;   &lt;th&gt;Tested on Kubernetes version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.9&lt;/td&gt; &#xA;   &lt;td&gt;1.16-latest&lt;/td&gt; &#xA;   &lt;td&gt;1.20.5, 1.21.2, 1.22.5, 1.23, and 1.24&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.8&lt;/td&gt; &#xA;   &lt;td&gt;1.16-latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.6.3-1.7.1&lt;/td&gt; &#xA;   &lt;td&gt;1.12-latest&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.60-1.6.2&lt;/td&gt; &#xA;   &lt;td&gt;1.12-1.21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.5&lt;/td&gt; &#xA;   &lt;td&gt;1.12-1.21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.4&lt;/td&gt; &#xA;   &lt;td&gt;1.10-1.21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Velero supports IPv4, IPv6, and dual stack environments. Support for this was tested against Velero v1.8.&lt;/p&gt; &#xA;&lt;p&gt;The Velero maintainers are continuously working to expand testing coverage, but are not able to test every combination of Velero and supported Kubernetes versions for each Velero release. The table above is meant to track the current testing coverage and the expected supported Kubernetes versions for each Velero version. If you have a question about test coverage before v1.9, please reach out in the &lt;a href=&#34;https://kubernetes.slack.com/archives/C6VCGP4MT&#34;&gt;#velero-users&lt;/a&gt; Slack channel.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in using a different version of Kubernetes with a given Velero version, we&#39;d recommend that you perform testing before installing or upgrading your environment. For full information around capabilities within a release, also see the Velero &lt;a href=&#34;https://github.com/vmware-tanzu/velero/releases&#34;&gt;release notes&lt;/a&gt; or Kubernetes &lt;a href=&#34;https://github.com/kubernetes/kubernetes/tree/master/CHANGELOG&#34;&gt;release notes&lt;/a&gt;. See the Velero &lt;a href=&#34;https://velero.io/docs/latest/support-process/&#34;&gt;support page&lt;/a&gt; for information about supported versions of Velero.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wgpsec/ENScan_GO</title>
    <updated>2022-09-15T01:34:05Z</updated>
    <id>tag:github.com,2022-09-15:/wgpsec/ENScan_GO</id>
    <link href="https://github.com/wgpsec/ENScan_GO" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款基于各大企业信息API的工具，解决在遇到的各种针对国内企业信息收集难题。一键收集控股公司ICP备案、APP、小程序、微信公众号等信息聚合导出。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ENScan_GO&lt;/h1&gt; &#xA;&lt;p&gt;ENScanGo 是现有开源项目 &lt;a href=&#34;https://github.com/wgpsec/ENScan&#34;&gt;ENScan&lt;/a&gt; 的GO升级版本&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;仅用于学习参考，请勿遵守相关法律规定&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://shields.io/badge/Go-1.17-green?logo=go&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wgpsec/ENScan_GO&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/wgpsec/ENScan_GO/master/README/logo.png&#34; alt=&#34;Logo&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h3 align=&#34;center&#34;&gt;ENScan的Go版本实现&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; 解决遇到的各种针对国内企业信息收集难题 &lt;br&gt; &lt;a href=&#34;https://github.com/wgpsec/ENScan_GO&#34;&gt;&lt;strong&gt;探索更多Tricks »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/wgpsec/ENScan_GO/releases&#34;&gt;下载可执行文件&lt;/a&gt; · &lt;a href=&#34;https://github.com/wgpsec/ENScan_GO/issues&#34;&gt;反馈Bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/wgpsec/ENScan_GO/issues&#34;&gt;提交需求&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;使用本程序可能导致账号被封，请谨慎操作&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;功能列表&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;使用支持以下API，并支持合并数据导出&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;爱企查&lt;/li&gt; &#xA;   &lt;li&gt;天眼查&lt;/li&gt; &#xA;   &lt;li&gt;阿拉丁&lt;/li&gt; &#xA;   &lt;li&gt;酷安&lt;/li&gt; &#xA;   &lt;li&gt;七麦数据&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;查询信息&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ICP备案&lt;/li&gt; &#xA;   &lt;li&gt;APP&lt;/li&gt; &#xA;   &lt;li&gt;微博&lt;/li&gt; &#xA;   &lt;li&gt;微信公众号&lt;/li&gt; &#xA;   &lt;li&gt;控股公司&lt;/li&gt; &#xA;   &lt;li&gt;供应商&lt;/li&gt; &#xA;   &lt;li&gt;客户信息&lt;/li&gt; &#xA;   &lt;li&gt;小程序&lt;/li&gt; &#xA;   &lt;li&gt;控股X的公司的以上所有信息&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;通过APK市场收集使用信息&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;使用指南&lt;/h3&gt; &#xA;&lt;p&gt;命令行参数如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  -branch 查询分支机构（分公司）信息&#xA;  -delay int 每个请求延迟（S）-1为随机延迟1-5S (default 1)&#xA;  -f string 包含公司关键词的文件一行一个&#xA;  -field string 获取字段信息 eg website&#xA;  -i string 公司ID（根据你查询的type不同ID不同）&#xA;  -invest int 投资比例 eg 100&#xA;  -invest-rd 投资比例不明确（可能不是完全控股）&#xA;  -is-branch 查询分支机构（分公司）详细信息ICP备案APP等&#xA;  -is-debug 是否显示debug详细信息&#xA;  -is-group 查询集团信息&#xA;  -is-merge 是否合并导出&#xA;  -is-pid 批量查询文件是否为PID&#xA;  -n string 公司名称关键词 eg 小米&#xA;  -o string 结果输出的文件夹位置(可选)&#xA;  -type string 收集渠道信息（默认爱企查）eg qcc (default &#34;aqc&#34;) all为收集全部&#xA;  -v    版本信息&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;字段支持:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;icp&#34;, &#34;weibo&#34;, &#34;wechat&#34;, &#34;app&#34;, &#34;weibo&#34;, &#34;job&#34;, &#34;wp&#34;, &#34;copyright&#34;&#xA;v0.0.4 开始 website已改为icp！！！&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;快速使用&lt;/h4&gt; &#xA;&lt;p&gt;首先需要生成配置文件，在目录下会生成 &lt;code&gt;config.yaml&lt;/code&gt; 的配置文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ENScanPublic_amd64_linux -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;配置信息如下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: 0.1 &#x9;&#x9;&#x9;# 请勿修改版本号！&#xA;common:&#xA;  output: &#34;&#34;            # 导出文件位置&#xA;  field: [ ]&#x9;&#x9;&#x9;# 查询字段 如[&#34;website&#34;]&#xA;cookies:&#xA;  aiqicha: &#39;&#39;           # 爱企查   Cookie&#xA;  tianyancha: &#39;&#39;        # 天眼查   Cookie&#xA;  qcc: &#39;&#39;               # 企查查   Cookie&#xA;  aldzs: &#39;&#39;             # 阿拉神灯 Token&#xA;  xlb: &#39;&#39;               # 小蓝本   Token&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;生成配置文件之后即可开始信息收集&lt;/p&gt; &#xA;&lt;p&gt;Eg：快速收集小米相关信息 默认收集：企业基本信息、微博、ICP备案、APP、微信公众号&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ENScanPublic_amd64_linux -n 小米&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wgpsec/ENScan_GO/master/README/image-20220106220045213.png&#34; alt=&#34;image-20220106220045213&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;你可能会遇到如下情况，需要填写Cookie 以爱企查（默认收集源）为例&lt;/p&gt; &#xA;&lt;p&gt;打开 aiqicha.baidu.com&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wgpsec/ENScan_GO/master/README/image-20220106220211277.png&#34; alt=&#34;image-20220106220211277&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;通过滑动验证后可以正常打开网站，在console（控制台）输入 &lt;code&gt;console.log(document.cookie)&lt;/code&gt; 或其他方式获取全部Cookie并粘贴至配置文件 &lt;code&gt;&#39;&#39;&lt;/code&gt;中&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wgpsec/ENScan_GO/master/README/image-20220106220402445.png&#34; alt=&#34;image-20220106220402445&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;这时候再重复命令即可查看到结果，注意如果信息中含有 &lt;code&gt;*&lt;/code&gt;，你需要登陆后获取Cookie才能去除&lt;code&gt;*&lt;/code&gt;信息&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wgpsec/ENScan_GO/master/README/image-20220106220603809.png&#34; alt=&#34;image-20220106220603809&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/460250&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/460250.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wgpsec/ENScan_GO/master/README/image-20220106224656577.png&#34; alt=&#34;image-20220106224656577&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;场景使用&lt;/h3&gt; &#xA;&lt;h4&gt;只想获取备案信息&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;./ENScanPublic_amd64_linux -n 小米  -field icp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/460252&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/460252.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;获取占股100的子公司下所有ICP备案网站&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;./ENScanPublic_amd64_linux -n 小米通讯 -invest-num 100 -field icp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wgpsec/ENScan_GO/master/README/image-20220106224603776.png&#34; alt=&#34;image-20220106224603776&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/460255&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/460255.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;使用天眼查数据源&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt; ./ENScanPublic_amd64_linux -n 小米 -type tyc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;交流&lt;/h3&gt; &#xA;&lt;p&gt;关注公众号 &lt;code&gt;WgpSec狼组安全团队&lt;/code&gt; 回复&lt;code&gt;加群&lt;/code&gt;一起交流~&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://assets.wgpsec.org/www/images/wechat.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/wgpsec/ENScan_GO&#34;&gt;&lt;img src=&#34;https://starchart.cc/wgpsec/ENScan_GO.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheAlgorithms/Go</title>
    <updated>2022-09-15T01:34:05Z</updated>
    <id>tag:github.com,2022-09-15:/TheAlgorithms/Go</id>
    <link href="https://github.com/TheAlgorithms/Go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Algorithms implemented in Go for beginners, following best practices.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Algorithms - Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/TheAlgorithms/Go&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&amp;amp;style=flat-square&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&amp;nbsp; &lt;img src=&#34;https://github.com/TheAlgorithms/Go/workflows/golangci-lint/badge.svg?sanitize=true&#34; alt=&#34;golangci-lint&#34;&gt; &lt;img src=&#34;https://github.com/tjgurwara99/Go/workflows/godocmd/badge.svg?sanitize=true&#34; alt=&#34;godocmd&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/TheAlgorithms/Go.svg?label=Repo%20size&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&amp;nbsp; &lt;img src=&#34;https://github.com/TheAlgorithms/Go/workflows/update_directory_md/badge.svg?sanitize=true&#34; alt=&#34;update_directory_md&#34;&gt; &lt;a href=&#34;https://discord.gg/c7MnfGFGa6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/808045925556682782.svg?logo=discord&amp;amp;colorB=7289DA&amp;amp;style=flat-square&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Algorithms implemented in Go (for education)&lt;/h3&gt; &#xA;&lt;p&gt;The repository is a collection of open-source implementation of a variety of algorithms implemented in Go and licensed under &lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; before you contribute.&lt;/p&gt; &#xA;&lt;h2&gt;List of Algorithms&lt;/h2&gt; &#xA;&lt;!-- GODOCMD BEGIN ---&gt; &#xA;&lt;h1&gt;Packages:&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; ahocorasick &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/advancedahocorasick.go#L10&#34;&gt;&lt;code&gt;Advanced&lt;/code&gt;&lt;/a&gt;: Advanced Function performing the Advanced Aho-Corasick algorithm. Finds and prints occurrences of each pattern.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/ahocorasick.go#L15&#34;&gt;&lt;code&gt;AhoCorasick&lt;/code&gt;&lt;/a&gt;: AhoCorasick Function performing the Basic Aho-Corasick algorithm. Finds and prints occurrences of each pattern.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L86&#34;&gt;&lt;code&gt;ArrayUnion&lt;/code&gt;&lt;/a&gt;: ArrayUnion Concats two arrays of int&#39;s into one.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L78&#34;&gt;&lt;code&gt;BoolArrayCapUp&lt;/code&gt;&lt;/a&gt;: BoolArrayCapUp Dynamically increases an array size of bool&#39;s by 1.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/ahocorasick.go#L54&#34;&gt;&lt;code&gt;BuildAc&lt;/code&gt;&lt;/a&gt;: Functions that builds Aho Corasick automaton.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/advancedahocorasick.go#L46&#34;&gt;&lt;code&gt;BuildExtendedAc&lt;/code&gt;&lt;/a&gt;: BuildExtendedAc Functions that builds extended Aho Corasick automaton.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L61&#34;&gt;&lt;code&gt;ComputeAlphabet&lt;/code&gt;&lt;/a&gt;: ComputeAlphabet Function that returns string of all the possible characters in given patterns.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L4&#34;&gt;&lt;code&gt;ConstructTrie&lt;/code&gt;&lt;/a&gt;: ConstructTrie Function that constructs Trie as an automaton for a set of reversed &amp;amp; trimmed strings.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L39&#34;&gt;&lt;code&gt;Contains&lt;/code&gt;&lt;/a&gt;: Contains Returns &#39;true&#39; if array of int&#39;s &#39;s&#39; contains int &#39;e&#39;, &#39;false&#39; otherwise.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L111&#34;&gt;&lt;code&gt;CreateNewState&lt;/code&gt;&lt;/a&gt;: CreateNewState Automaton function for creating a new state &#39;state&#39;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L116&#34;&gt;&lt;code&gt;CreateTransition&lt;/code&gt;&lt;/a&gt;: CreateTransition Creates a transition for function σ(state,letter) = end.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L99&#34;&gt;&lt;code&gt;GetParent&lt;/code&gt;&lt;/a&gt;: GetParent Function that finds the first previous state of a state and returns it. Used for trie where there is only one parent.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L121&#34;&gt;&lt;code&gt;GetTransition&lt;/code&gt;&lt;/a&gt;: GetTransition Returns ending state for transition σ(fromState,overChar), &#39;-1&#39; if there is none.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L49&#34;&gt;&lt;code&gt;GetWord&lt;/code&gt;&lt;/a&gt;: GetWord Function that returns word found in text &#39;t&#39; at position range &#39;begin&#39; to &#39;end&#39;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L70&#34;&gt;&lt;code&gt;IntArrayCapUp&lt;/code&gt;&lt;/a&gt;: IntArrayCapUp Dynamically increases an array size of int&#39;s by 1.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/shared.go#L133&#34;&gt;&lt;code&gt;StateExists&lt;/code&gt;&lt;/a&gt;: StateExists Checks if state &#39;state&#39; exists. Returns &#39;true&#39; if it does, &#39;false&#39; otherwise.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/ahocorasick/ahocorasick.go#L9&#34;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; armstrong &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/armstrong/isarmstrong.go#L14&#34;&gt;&lt;code&gt;IsArmstrong&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; avl &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package avl is a Adelson-Velskii and Landis tree implemnation avl is self-balancing tree, i.e for all node in a tree, height difference between its left and right child will not exceed 1 more information : &lt;a href=&#34;https://en.wikipedia.org/wiki/AVL_tree&#34;&gt;https://en.wikipedia.org/wiki/AVL_tree&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L72&#34;&gt;&lt;code&gt;Delete&lt;/code&gt;&lt;/a&gt;: Delete : remove given key from the tree&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L20&#34;&gt;&lt;code&gt;Get&lt;/code&gt;&lt;/a&gt;: Get : return node with given key&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L35&#34;&gt;&lt;code&gt;Insert&lt;/code&gt;&lt;/a&gt;: Insert a new item&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L15&#34;&gt;&lt;code&gt;NewTree&lt;/code&gt;&lt;/a&gt;: NewTree create a new AVL tree&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/avl/avl.go#L8&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; binary &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package binary describes algorithms that use binary operations for different calculations.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/abs.go#L10&#34;&gt;&lt;code&gt;Abs&lt;/code&gt;&lt;/a&gt;: Abs returns absolute value using binary operation Principle of operation: 1) Get the mask by right shift by the base 2) Base is the size of an integer variable in bits, for example, for int32 it will be 32, for int64 it will be 64 3) For negative numbers, above step sets mask as 1 1 1 1 1 1 1 1 and 0 0 0 0 0 0 0 0 for positive numbers. 4) Add the mask to the given number. 5) XOR of mask + n and mask gives the absolute value.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/bitcounter.go#L11&#34;&gt;&lt;code&gt;BitCounter&lt;/code&gt;&lt;/a&gt;: BitCounter - The function returns the number of set bits for an unsigned integer number&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/checkisnumberpoweroftwo.go#L21&#34;&gt;&lt;code&gt;IsPowerOfTwo&lt;/code&gt;&lt;/a&gt;: IsPowerOfTwo This function uses the fact that powers of 2 are represented like 10...0 in binary, and numbers one less than the power of 2 are represented like 11...1. Therefore, using the and function: 10...0 &amp;amp; 01...1 00...0 -&amp;gt; 0 This is also true for 0, which is not a power of 2, for which we have to add and extra condition.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/checkisnumberpoweroftwo.go#L28&#34;&gt;&lt;code&gt;IsPowerOfTwoLeftShift&lt;/code&gt;&lt;/a&gt;: IsPowerOfTwoLeftShift This function takes advantage of the fact that left shifting a number by 1 is equivalent to multiplying by 2. For example, binary 00000001 when shifted by 3 becomes 00001000, which in decimal system is 8 or = 2 * 2 * 2&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/logarithm.go#L7&#34;&gt;&lt;code&gt;LogBase2&lt;/code&gt;&lt;/a&gt;: LogBase2 Finding the exponent of n = 2**x using bitwise operations (logarithm in base 2 of n) &lt;a href=&#34;https://en.wikipedia.org/wiki/Logarithm&#34;&gt;See more&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/arithmeticmean.go#L12&#34;&gt;&lt;code&gt;MeanUsingAndXor&lt;/code&gt;&lt;/a&gt;: MeanUsingAndXor This function finds arithmetic mean using &#34;AND&#34; and &#34;XOR&#34; operations&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/arithmeticmean.go#L17&#34;&gt;&lt;code&gt;MeanUsingRightShift&lt;/code&gt;&lt;/a&gt;: MeanUsingRightShift This function finds arithmetic mean using right shift&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/reversebits.go#L14&#34;&gt;&lt;code&gt;ReverseBits&lt;/code&gt;&lt;/a&gt;: ReverseBits This function initialized the result by 0 (all bits 0) and process the given number starting from its least significant bit. If the current bit is 1, set the corresponding most significant bit in the result and finally move on to the next bit in the input number. Repeat this till all its bits are processed.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/rbc.go#L11&#34;&gt;&lt;code&gt;SequenceGrayCode&lt;/code&gt;&lt;/a&gt;: SequenceGrayCode The function generates an &#34;Gray code&#34; sequence of length n&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/sqrt.go#L16&#34;&gt;&lt;code&gt;Sqrt&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/binary/xorsearch.go#L11&#34;&gt;&lt;code&gt;XorSearchMissingNumber&lt;/code&gt;&lt;/a&gt;: XorSearchMissingNumber This function finds a missing number in a sequence&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; binarytree &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L145&#34;&gt;&lt;code&gt;AccessNodesByLayer&lt;/code&gt;&lt;/a&gt;: AccessNodesByLayer Function that access nodes layer by layer instead of printing the results as one line.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L44&#34;&gt;&lt;code&gt;BstDelete&lt;/code&gt;&lt;/a&gt;: BstDelete removes the node&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L79&#34;&gt;&lt;code&gt;InOrder&lt;/code&gt;&lt;/a&gt;: Travers the tree in the following order left --&amp;gt; root --&amp;gt; right&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L35&#34;&gt;&lt;code&gt;InOrderSuccessor&lt;/code&gt;&lt;/a&gt;: InOrderSuccessor Goes to the left&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L17&#34;&gt;&lt;code&gt;Insert&lt;/code&gt;&lt;/a&gt;: Insert a value in the BSTree&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L138&#34;&gt;&lt;code&gt;LevelOrder&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L174&#34;&gt;&lt;code&gt;Max&lt;/code&gt;&lt;/a&gt;: Max Function that returns max of two numbers - possibly already declared.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/node.go#L11&#34;&gt;&lt;code&gt;NewNode&lt;/code&gt;&lt;/a&gt;: NewNode Returns a new pointer to an empty Node&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L113&#34;&gt;&lt;code&gt;PostOrder&lt;/code&gt;&lt;/a&gt;: Travers the tree in the following order left --&amp;gt; right --&amp;gt; root&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L96&#34;&gt;&lt;code&gt;PreOrder&lt;/code&gt;&lt;/a&gt;: Travers the tree in the following order root --&amp;gt; left --&amp;gt; right&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/bstree.go#L4&#34;&gt;&lt;code&gt;BSTree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/binarysearchtree/node.go#L4&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; caesar &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package caesar is the shift cipher ref: &lt;a href=&#34;https://en.wikipedia.org/wiki/Caesar_cipher&#34;&gt;https://en.wikipedia.org/wiki/Caesar_cipher&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/caesar/caesar.go#L27&#34;&gt;&lt;code&gt;Decrypt&lt;/code&gt;&lt;/a&gt;: Decrypt decrypts by left shift of &#34;key&#34; each character of &#34;input&#34;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/caesar/caesar.go#L6&#34;&gt;&lt;code&gt;Encrypt&lt;/code&gt;&lt;/a&gt;: Encrypt encrypts by right shift of &#34;key&#34; each character of &#34;input&#34;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; catalan &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/catalan/catalannumber.go#L16&#34;&gt;&lt;code&gt;CatalanNumber&lt;/code&gt;&lt;/a&gt;: CatalanNumber This function returns the &lt;code&gt;nth&lt;/code&gt; Catalan number&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; checksum &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package checksum describes algorithms for finding various checksums&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/checksum/crc8.go#L25&#34;&gt;&lt;code&gt;CRC8&lt;/code&gt;&lt;/a&gt;: CRC8 calculates CRC8 checksum of the given data.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/checksum/luhn.go#L11&#34;&gt;&lt;code&gt;Luhn&lt;/code&gt;&lt;/a&gt;: Luhn validates the provided data using the Luhn algorithm.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/checksum/crc8.go#L15&#34;&gt;&lt;code&gt;CRCModel&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; coloring &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package coloring provides implementation of different graph coloring algorithms, e.g. coloring using BFS, using Backtracking, using greedy approach. Author(s): &lt;a href=&#34;https://github.com/Shivam010&#34;&gt;Shivam&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/coloring/bipartite.go#L40&#34;&gt;&lt;code&gt;BipartiteCheck&lt;/code&gt;&lt;/a&gt;: basically tries to color the graph in two colors if each edge connects 2 differently colored nodes the graph can be considered bipartite&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/coloring/graph.go#L14&#34;&gt;&lt;code&gt;Graph&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; combination &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package combination ...&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/combination/combination.go#L13&#34;&gt;&lt;code&gt;Start&lt;/code&gt;&lt;/a&gt;: Start ...&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/combination/combination.go#L7&#34;&gt;&lt;code&gt;Combinations&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; conversion &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package conversion is a package of implementations which converts one data structure to another.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/base64.go#L57&#34;&gt;&lt;code&gt;Base64Decode&lt;/code&gt;&lt;/a&gt;: Base64Decode decodes the received input base64 string into a byte slice. The implementation follows the RFC4648 standard, which is documented at &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4648#section-4&#34;&gt;https://datatracker.ietf.org/doc/html/rfc4648#section-4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/base64.go#L19&#34;&gt;&lt;code&gt;Base64Encode&lt;/code&gt;&lt;/a&gt;: Base64Encode encodes the received input bytes slice into a base64 string. The implementation follows the RFC4648 standard, which is documented at &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4648#section-4&#34;&gt;https://datatracker.ietf.org/doc/html/rfc4648#section-4&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/binarytodecimal.go#L25&#34;&gt;&lt;code&gt;BinaryToDecimal&lt;/code&gt;&lt;/a&gt;: BinaryToDecimal() function that will take Binary number as string, and return it&#39;s Decimal equivalent as integer.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/decimaltobinary.go#L32&#34;&gt;&lt;code&gt;DecimalToBinary&lt;/code&gt;&lt;/a&gt;: DecimalToBinary() function that will take Decimal number as int, and return it&#39;s Binary equivalent as string.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/base64_test.go#L113&#34;&gt;&lt;code&gt;FuzzBase64Encode&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/rgbhex.go#L10&#34;&gt;&lt;code&gt;HEXToRGB&lt;/code&gt;&lt;/a&gt;: HEXToRGB splits an RGB input (e.g. a color in hex format; 0x&#xA;   &lt;color-code&gt;&#xA;    ) into the individual components: red, green and blue&#xA;   &lt;/color-code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/integertoroman.go#L17&#34;&gt;&lt;code&gt;IntToRoman&lt;/code&gt;&lt;/a&gt;: IntToRoman converts an integer value to a roman numeral string. An error is returned if the integer is not between 1 and 3999.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/rgbhex.go#L41&#34;&gt;&lt;code&gt;RGBToHEX&lt;/code&gt;&lt;/a&gt;: RGBToHEX does exactly the opposite of HEXToRGB: it combines the three components red, green and blue to an RGB value, which can be converted to e.g. Hex&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/decimaltobinary.go#L22&#34;&gt;&lt;code&gt;Reverse&lt;/code&gt;&lt;/a&gt;: Reverse() function that will take string, and returns the reverse of that string.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/conversion/romantointeger.go#L40&#34;&gt;&lt;code&gt;RomanToInteger&lt;/code&gt;&lt;/a&gt;: RomanToInteger converts a roman numeral string to an integer. Roman numerals for numbers outside the range 1 to 3,999 will return an error. Nil or empty string return 0 with no error thrown.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; diffiehellman &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package diffiehellman implements Diffie-Hellman Key Exchange Algorithm for more information watch : &lt;a href=&#34;https://www.youtube.com/watch?v=NmM9HA2MQGI&#34;&gt;https://www.youtube.com/watch?v=NmM9HA2MQGI&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/diffiehellman/diffiehellmankeyexchange.go#L19&#34;&gt;&lt;code&gt;GenerateMutualKey&lt;/code&gt;&lt;/a&gt;: GenerateMutualKey : generates a mutual key that can be used by only alice and bob mutualKey = (shareKey^prvKey)%primeNumber&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/diffiehellman/diffiehellmankeyexchange.go#L13&#34;&gt;&lt;code&gt;GenerateShareKey&lt;/code&gt;&lt;/a&gt;: GenerateShareKey : generates a key using client private key , generator and primeNumber this key can be made public shareKey = (g^key)%primeNumber&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; dynamic &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package dynamic is a package of certain implementations of dynamically run algorithms.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/abbreviation.go#L24&#34;&gt;&lt;code&gt;Abbreviation&lt;/code&gt;&lt;/a&gt;: Returns true if it is possible to make a equals b (if b is an abbreviation of a), returns false otherwise&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/binomialcoefficient.go#L21&#34;&gt;&lt;code&gt;Bin2&lt;/code&gt;&lt;/a&gt;: Bin2 function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/coinchange.go#L5&#34;&gt;&lt;code&gt;CoinChange&lt;/code&gt;&lt;/a&gt;: CoinChange finds the number of possible combinations of coins of different values which can get to the target amount.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/rodcutting.go#L21&#34;&gt;&lt;code&gt;CutRodDp&lt;/code&gt;&lt;/a&gt;: CutRodDp solve the same problem using dynamic programming&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/rodcutting.go#L8&#34;&gt;&lt;code&gt;CutRodRec&lt;/code&gt;&lt;/a&gt;: CutRodRec solve the problem recursively: initial approach&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/editdistance.go#L35&#34;&gt;&lt;code&gt;EditDistanceDP&lt;/code&gt;&lt;/a&gt;: EditDistanceDP is an optimised implementation which builds on the ideas of the recursive implementation. We use dynamic programming to compute the DP table where dp[i][j] denotes the edit distance value of first[0..i-1] and second[0..j-1]. Time complexity is O(m * n) where m and n are lengths of the strings, first and second respectively.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/editdistance.go#L10&#34;&gt;&lt;code&gt;EditDistanceRecursive&lt;/code&gt;&lt;/a&gt;: EditDistanceRecursive is a naive implementation with exponential time complexity.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/subsetsum.go#L14&#34;&gt;&lt;code&gt;IsSubsetSum&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/knapsack.go#L17&#34;&gt;&lt;code&gt;Knapsack&lt;/code&gt;&lt;/a&gt;: Knapsack solves knapsack problem return maxProfit&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestcommonsubsequence.go#L8&#34;&gt;&lt;code&gt;LongestCommonSubsequence&lt;/code&gt;&lt;/a&gt;: LongestCommonSubsequence function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestincreasingsubsequence.go#L9&#34;&gt;&lt;code&gt;LongestIncreasingSubsequence&lt;/code&gt;&lt;/a&gt;: LongestIncreasingSubsequence returns the longest increasing subsequence where all elements of the subsequence are sorted in increasing order&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestincreasingsubsequencegreedy.go#L9&#34;&gt;&lt;code&gt;LongestIncreasingSubsequenceGreedy&lt;/code&gt;&lt;/a&gt;: LongestIncreasingSubsequenceGreedy is a function to find the longest increasing subsequence in a given array using a greedy approach. The dynamic programming approach is implemented alongside this one. Worst Case Time Complexity: O(nlogn) Auxiliary Space: O(n), where n is the length of the array(slice). Reference: &lt;a href=&#34;https://www.geeksforgeeks.org/construction-of-longest-monotonically-increasing-subsequence-n-log-n/&#34;&gt;https://www.geeksforgeeks.org/construction-of-longest-monotonically-increasing-subsequence-n-log-n/&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestpalindromicsubsequence.go#L21&#34;&gt;&lt;code&gt;LpsDp&lt;/code&gt;&lt;/a&gt;: LpsDp function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/longestpalindromicsubsequence.go#L7&#34;&gt;&lt;code&gt;LpsRec&lt;/code&gt;&lt;/a&gt;: LpsRec function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/matrixmultiplication.go#L24&#34;&gt;&lt;code&gt;MatrixChainDp&lt;/code&gt;&lt;/a&gt;: MatrixChainDp function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/matrixmultiplication.go#L10&#34;&gt;&lt;code&gt;MatrixChainRec&lt;/code&gt;&lt;/a&gt;: MatrixChainRec function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/knapsack.go#L11&#34;&gt;&lt;code&gt;Max&lt;/code&gt;&lt;/a&gt;: Max function - possible duplicate&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/catalan.go#L13&#34;&gt;&lt;code&gt;NthCatalanNumber&lt;/code&gt;&lt;/a&gt;: NthCatalan returns the n-th Catalan Number Complexity: O(n²)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/dynamic/fibonacci.go#L6&#34;&gt;&lt;code&gt;NthFibonacci&lt;/code&gt;&lt;/a&gt;: NthFibonacci returns the nth Fibonacci Number&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; dynamicarray &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package dynamicarray A dynamic array is quite similar to a regular array, but its Size is modifiable during program runtime, very similar to how a slice in Go works. The implementation is for educational purposes and explains how one might go about implementing their own version of slices. For more details check out those links below here: GeeksForGeeks article : &lt;a href=&#34;https://www.geeksforgeeks.org/how-do-dynamic-arrays-work/&#34;&gt;https://www.geeksforgeeks.org/how-do-dynamic-arrays-work/&lt;/a&gt; Go blog: &lt;a href=&#34;https://blog.golang.org/slices-intro&#34;&gt;https://blog.golang.org/slices-intro&lt;/a&gt; Go blog: &lt;a href=&#34;https://blog.golang.org/slices&#34;&gt;https://blog.golang.org/slices&lt;/a&gt; authors &lt;a href=&#34;https://github.com/wesllhey&#34;&gt;Wesllhey Holanda&lt;/a&gt;, &lt;a href=&#34;https://github.com/miraddo&#34;&gt;Milad&lt;/a&gt; see dynamicarray.go, dynamicarray_test.go&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/dynamicarray/dynamicarray.go#L21&#34;&gt;&lt;code&gt;DynamicArray&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; factorial &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package factorial describes algorithms Factorials calculations.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/factorial/factorial.go#L12&#34;&gt;&lt;code&gt;Iterative&lt;/code&gt;&lt;/a&gt;: Iterative returns the iteratively brute forced factorial of n&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/factorial/factorial.go#L21&#34;&gt;&lt;code&gt;Recursive&lt;/code&gt;&lt;/a&gt;: Recursive This function recursively computes the factorial of a number&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/factorial/factorial.go#L30&#34;&gt;&lt;code&gt;UsingTree&lt;/code&gt;&lt;/a&gt;: UsingTree This function finds the factorial of a number using a binary tree&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; fibonacci &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/fibonacci/fibonacci.go#L42&#34;&gt;&lt;code&gt;Formula&lt;/code&gt;&lt;/a&gt;: Formula This function calculates the n-th fibonacci number using the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number#Relation_to_the_golden_ratio&#34;&gt;formula&lt;/a&gt; Attention! Tests for large values fall due to rounding error of floating point numbers, works well, only on small numbers&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/fibonacci/fibonacci.go#L15&#34;&gt;&lt;code&gt;Matrix&lt;/code&gt;&lt;/a&gt;: Matrix This function calculates the n-th fibonacci number using the matrix method. &lt;a href=&#34;https://en.wikipedia.org/wiki/Fibonacci_number#Matrix_form&#34;&gt;See&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; gcd &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extended.go#L12&#34;&gt;&lt;code&gt;Extended&lt;/code&gt;&lt;/a&gt;: Extended simple extended gcd&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extendedgcditerative.go#L4&#34;&gt;&lt;code&gt;ExtendedIterative&lt;/code&gt;&lt;/a&gt;: ExtendedIterative finds and returns gcd(a, b), x, y satisfying a&lt;em&gt;x + b&lt;/em&gt;y = gcd(a, b).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extendedgcd.go#L4&#34;&gt;&lt;code&gt;ExtendedRecursive&lt;/code&gt;&lt;/a&gt;: ExtendedRecursive finds and returns gcd(a, b), x, y satisfying a&lt;em&gt;x + b&lt;/em&gt;y = gcd(a, b).&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/gcditerative.go#L4&#34;&gt;&lt;code&gt;Iterative&lt;/code&gt;&lt;/a&gt;: Iterative Faster iterative version of GcdRecursive without holding up too much of the stack&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/gcd.go#L4&#34;&gt;&lt;code&gt;Recursive&lt;/code&gt;&lt;/a&gt;: Recursive finds and returns the greatest common divisor of a given integer.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extendedgcd_test.go#L44&#34;&gt;&lt;code&gt;TemplateBenchmarkExtendedGCD&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/gcd_test.go#L37&#34;&gt;&lt;code&gt;TemplateBenchmarkGCD&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/extendedgcd_test.go#L7&#34;&gt;&lt;code&gt;TemplateTestExtendedGCD&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/gcd/gcd_test.go#L18&#34;&gt;&lt;code&gt;TemplateTestGCD&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; generateparentheses &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/generateparentheses/generateparentheses.go#L12&#34;&gt;&lt;code&gt;GenerateParenthesis&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; genetic &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package genetic provides functions to work with strings using genetic algorithm. &lt;a href=&#34;https://en.wikipedia.org/wiki/Genetic_algorithm&#34;&gt;https://en.wikipedia.org/wiki/Genetic_algorithm&lt;/a&gt; Author: D4rkia&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/genetic/genetic.go#L71&#34;&gt;&lt;code&gt;GeneticString&lt;/code&gt;&lt;/a&gt;: GeneticString generates PopultaionItem based on the imputed target string, and a set of possible runes to build a string with. In order to optimise string generation additional configurations can be provided with Conf instance. Empty instance of Conf (&amp;amp;Conf{}) can be provided, then default values would be set. Link to the same algorithm implemented in python: &lt;a href=&#34;https://github.com/TheAlgorithms/Python/raw/master/genetic_algorithm/basic_string.py&#34;&gt;https://github.com/TheAlgorithms/Python/blob/master/genetic_algorithm/basic_string.py&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/genetic/genetic.go#L32&#34;&gt;&lt;code&gt;Conf&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/genetic/genetic.go#L26&#34;&gt;&lt;code&gt;PopulationItem&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/genetic/genetic.go#L52&#34;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; geometry &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package geometry contains geometric algorithms&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L18&#34;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt;: Distance calculates the shortest distance between two points.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L42&#34;&gt;&lt;code&gt;IsParallel&lt;/code&gt;&lt;/a&gt;: IsParallel checks if two lines are parallel or not.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L47&#34;&gt;&lt;code&gt;IsPerpendicular&lt;/code&gt;&lt;/a&gt;: IsPerpendicular checks if two lines are perpendicular or not.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L53&#34;&gt;&lt;code&gt;PointDistance&lt;/code&gt;&lt;/a&gt;: PointDistance calculates the distance of a given Point from a given line. The slice should contain the coefficiet of x, the coefficient of y and the constant in the respective order.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L24&#34;&gt;&lt;code&gt;Section&lt;/code&gt;&lt;/a&gt;: Section calculates the Point that divides a line in specific ratio. DO NOT specify the ratio in the form m:n, specify it as r, where r = m / n.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L32&#34;&gt;&lt;code&gt;Slope&lt;/code&gt;&lt;/a&gt;: Slope calculates the slope (gradient) of a line.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L37&#34;&gt;&lt;code&gt;YIntercept&lt;/code&gt;&lt;/a&gt;: YIntercept calculates the Y-Intercept of a line from a specific Point.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L13&#34;&gt;&lt;code&gt;Line&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/geometry/straightlines.go#L9&#34;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; graph &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package graph demonstrates Graph search algorithms reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/Tree_traversal&#34;&gt;https://en.wikipedia.org/wiki/Tree_traversal&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/articulationpoints.go#L19&#34;&gt;&lt;code&gt;ArticulationPoint&lt;/code&gt;&lt;/a&gt;: ArticulationPoint is a function to identify articulation points in a graph. The function takes the graph as an argument and returns a boolean slice which indicates whether a vertex is an articulation point or not. Worst Case Time Complexity: O(|V| + |E|) Auxiliary Space: O(|V|) reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/Biconnected_component&#34;&gt;https://en.wikipedia.org/wiki/Biconnected_component&lt;/a&gt; and &lt;a href=&#34;https://cptalks.quora.com/Cut-Vertex-Articulation-point&#34;&gt;https://cptalks.quora.com/Cut-Vertex-Articulation-point&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/breadthfirstsearch.go#L9&#34;&gt;&lt;code&gt;BreadthFirstSearch&lt;/code&gt;&lt;/a&gt;: BreadthFirstSearch is an algorithm for traversing and searching graph data structures. It starts at an arbitrary node of a graph, and explores all of the neighbor nodes at the present depth prior to moving on to the nodes at the next depth level. Worst-case performance O(|V|+|E|)=O(b^{d})}O(|V|+|E|)=O(b^{d}) Worst-case space complexity O(|V|)=O(b^{d})}O(|V|)=O(b^{d}) reference: &lt;a href=&#34;https://en.wikipedia.org/wiki/Breadth-first_search&#34;&gt;https://en.wikipedia.org/wiki/Breadth-first_search&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/depthfirstsearch.go#L53&#34;&gt;&lt;code&gt;DepthFirstSearch&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/depthfirstsearch.go#L21&#34;&gt;&lt;code&gt;DepthFirstSearchHelper&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/floydwarshall.go#L15&#34;&gt;&lt;code&gt;FloydWarshall&lt;/code&gt;&lt;/a&gt;: FloydWarshall Returns all pair&#39;s shortest path using Floyd Warshall algorithm&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/depthfirstsearch.go#L3&#34;&gt;&lt;code&gt;GetIdx&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L87&#34;&gt;&lt;code&gt;KruskalMST&lt;/code&gt;&lt;/a&gt;: KruskalMST will return a minimum spanning tree along with its total cost to using Kruskal&#39;s algorithm. Time complexity is O(m * log (n)) where m is the number of edges in the graph and n is number of nodes in it.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor.go#L111&#34;&gt;&lt;code&gt;LowestCommonAncestor&lt;/code&gt;&lt;/a&gt;: For each node, we will precompute its ancestor above him, its ancestor two nodes above, its ancestor four nodes above, etc. Let&#39;s call &lt;code&gt;jump[j][u]&lt;/code&gt; is the &lt;code&gt;2^j&lt;/code&gt;-th ancestor above the node &lt;code&gt;u&lt;/code&gt; with &lt;code&gt;u&lt;/code&gt; in range &lt;code&gt;[0, numbersVertex)&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt; in range &lt;code&gt;[0,MAXLOG)&lt;/code&gt;. These information allow us to jump from any node to any ancestor above it in &lt;code&gt;O(MAXLOG)&lt;/code&gt; time.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/graph.go#L16&#34;&gt;&lt;code&gt;New&lt;/code&gt;&lt;/a&gt;: Constructor functions for graphs (undirected by default)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L34&#34;&gt;&lt;code&gt;NewDSU&lt;/code&gt;&lt;/a&gt;: NewDSU will return an initialised DSU using the value of n which will be treated as the number of elements out of which the DSU is being made&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor.go#L84&#34;&gt;&lt;code&gt;NewTree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/depthfirstsearch.go#L12&#34;&gt;&lt;code&gt;NotExist&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/topological.go#L7&#34;&gt;&lt;code&gt;Topological&lt;/code&gt;&lt;/a&gt;: Assumes that graph given is valid and possible to get a topo ordering. constraints are array of []int{a, b}, representing an edge going from a to b&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L29&#34;&gt;&lt;code&gt;DisjointSetUnion&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L21&#34;&gt;&lt;code&gt;DisjointSetUnionElement&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/kruskal.go#L14&#34;&gt;&lt;code&gt;Edge&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/graph.go#L9&#34;&gt;&lt;code&gt;Graph&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/dijkstra.go#L5&#34;&gt;&lt;code&gt;Item&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor_test.go#L9&#34;&gt;&lt;code&gt;Query&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor.go#L25&#34;&gt;&lt;code&gt;Tree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/lowestcommonancestor.go#L12&#34;&gt;&lt;code&gt;TreeEdge&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/graph/floydwarshall.go#L9&#34;&gt;&lt;code&gt;WeightedGraph&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; hashmap &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/hashmap/hashmap.go#L32&#34;&gt;&lt;code&gt;Make&lt;/code&gt;&lt;/a&gt;: Make creates a new HashMap instance with input size and capacity&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/hashmap/hashmap.go#L24&#34;&gt;&lt;code&gt;New&lt;/code&gt;&lt;/a&gt;: New return new HashMap instance&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/hashmap/hashmap.go#L17&#34;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; kmp &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/kmp/kmp.go#L70&#34;&gt;&lt;code&gt;Kmp&lt;/code&gt;&lt;/a&gt;: Kmp Function kmp performing the Knuth-Morris-Pratt algorithm. Prints whether the word/pattern was found and on what position in the text or not. m - current match in text, i - current character in w, c - amount of comparisons.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/kmp/kmp.go#L15&#34;&gt;&lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; lcm &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/lcm/lcm.go#L10&#34;&gt;&lt;code&gt;Lcm&lt;/code&gt;&lt;/a&gt;: Lcm returns the lcm of two numbers using the fact that lcm(a,b) * gcd(a,b) = | a * b |&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; levenshtein &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/levenshtein/levenshteindistance.go#L10&#34;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt;: Distance Function that gives Levenshtein Distance&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; linkedlist &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package linkedlist demonstrates different implementations on linkedlists.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/cyclic.go#L120&#34;&gt;&lt;code&gt;JosephusProblem&lt;/code&gt;&lt;/a&gt;: &lt;a href=&#34;https://en.wikipedia.org/wiki/Josephus_problem&#34;&gt;https://en.wikipedia.org/wiki/Josephus_problem&lt;/a&gt; This is a struct-based solution for Josephus problem.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/cyclic.go#L12&#34;&gt;&lt;code&gt;NewCyclic&lt;/code&gt;&lt;/a&gt;: Create new list.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/doubly.go#L22&#34;&gt;&lt;code&gt;NewDoubly&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/shared.go#L12&#34;&gt;&lt;code&gt;NewNode&lt;/code&gt;&lt;/a&gt;: Create new node.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/singlylinkedlist.go#L19&#34;&gt;&lt;code&gt;NewSingly&lt;/code&gt;&lt;/a&gt;: NewSingly returns a new instance of a linked list&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/cyclic.go#L6&#34;&gt;&lt;code&gt;Cyclic&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/doubly.go#L18&#34;&gt;&lt;code&gt;Doubly&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/shared.go#L5&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/singlylinkedlist.go#L10&#34;&gt;&lt;code&gt;Singly&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/linkedlist/cyclic_test.go#L105&#34;&gt;&lt;code&gt;testCase&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; manacher &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/manacher/longestpalindrome.go#L37&#34;&gt;&lt;code&gt;LongestPalindrome&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; math &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package math is a package that contains mathematical algorithms and its different implementations.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/abs.go#L11&#34;&gt;&lt;code&gt;Abs&lt;/code&gt;&lt;/a&gt;: Abs returns absolute value&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/cos.go#L10&#34;&gt;&lt;code&gt;Cos&lt;/code&gt;&lt;/a&gt;: Cos returns the cosine of the radian argument x. &lt;a href=&#34;https://en.wikipedia.org/wiki/Sine_and_cosine&#34;&gt;See more&lt;/a&gt; &lt;a href=&#34;https://math.stackexchange.com/questions/3886552/bhaskara-approximation-of-cosx&#34;&gt;Based on the idea of Bhaskara approximation of cos(x)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/kthnumber.go#L11&#34;&gt;&lt;code&gt;FindKthMax&lt;/code&gt;&lt;/a&gt;: FindKthMax returns the kth large element given an integer slice with nil &lt;code&gt;error&lt;/code&gt; if found and returns -1 with &lt;code&gt;error&lt;/code&gt; &lt;code&gt;search.ErrNotFound&lt;/code&gt; if not found. NOTE: The &lt;code&gt;nums&lt;/code&gt; slice gets mutated in the process.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/kthnumber.go#L19&#34;&gt;&lt;code&gt;FindKthMin&lt;/code&gt;&lt;/a&gt;: FindKthMin returns kth small element given an integer slice with nil &lt;code&gt;error&lt;/code&gt; if found and returns -1 with &lt;code&gt;error&lt;/code&gt; &lt;code&gt;search.ErrNotFound&lt;/code&gt; if not found. NOTE: The &lt;code&gt;nums&lt;/code&gt; slice gets mutated in the process.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/checkisnumberpoweroftwo.go#L10&#34;&gt;&lt;code&gt;IsPowOfTwoUseLog&lt;/code&gt;&lt;/a&gt;: IsPowOfTwoUseLog This function checks if a number is a power of two using the logarithm. The limiting degree can be from 0 to 63. See alternatives in the binary package.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/mean.go#L7&#34;&gt;&lt;code&gt;Mean&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/median.go#L12&#34;&gt;&lt;code&gt;Median&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/mode.go#L19&#34;&gt;&lt;code&gt;Mode&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/eulertotient.go#L5&#34;&gt;&lt;code&gt;Phi&lt;/code&gt;&lt;/a&gt;: Phi is the Euler totient function. This function computes the number of numbers less then n that are coprime with n.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/sin.go#L9&#34;&gt;&lt;code&gt;Sin&lt;/code&gt;&lt;/a&gt;: Sin returns the sine of the radian argument x. &lt;a href=&#34;https://en.wikipedia.org/wiki/Sine_and_cosine&#34;&gt;See more&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; max &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/max/bitwisemax.go#L11&#34;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt;: Bitwise computes using bitwise operator the maximum of all the integer input and returns it&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/max/max.go#L4&#34;&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/a&gt;: Int is a function which returns the maximum of all the integers provided as arguments.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; maxsubarraysum &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package maxsubarraysum is a package containing a solution to a common problem of finding max contiguous sum within a array of ints.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/other/maxsubarraysum/maxsubarraysum.go#L13&#34;&gt;&lt;code&gt;MaxSubarraySum&lt;/code&gt;&lt;/a&gt;: MaxSubarraySum returns the maximum subarray sum&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; min &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/min/bitwisemin.go#L11&#34;&gt;&lt;code&gt;Bitwise&lt;/code&gt;&lt;/a&gt;: Bitwise This function returns the minimum integer using bit operations&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/min/min.go#L4&#34;&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/a&gt;: Int is a function which returns the minimum of all the integers provided as arguments.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; modular &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/modular/exponentiation.go#L22&#34;&gt;&lt;code&gt;Exponentiation&lt;/code&gt;&lt;/a&gt;: Exponentiation returns base^exponent % mod&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/modular/inverse.go#L20&#34;&gt;&lt;code&gt;Inverse&lt;/code&gt;&lt;/a&gt;: Inverse Modular function&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/modular/exponentiation.go#L51&#34;&gt;&lt;code&gt;Multiply64BitInt&lt;/code&gt;&lt;/a&gt;: Multiply64BitInt Checking if the integer multiplication overflows&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; moserdebruijnsequence &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/moserdebruijnsequence/sequence.go#L7&#34;&gt;&lt;code&gt;MoserDeBruijnSequence&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; nested &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package nested provides functions for testing strings proper brackets nesting.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/other/nested/nestedbrackets.go#L20&#34;&gt;&lt;code&gt;IsBalanced&lt;/code&gt;&lt;/a&gt;: IsBalanced returns true if provided input string is properly nested. Input is a sequence of brackets: &#39;(&#39;, &#39;)&#39;, &#39;[&#39;, &#39;]&#39;, &#39;{&#39;, &#39;}&#39;. A sequence of brackets &lt;code&gt;s&lt;/code&gt; is considered properly nested if any of the following conditions are true: - &lt;code&gt;s&lt;/code&gt; is empty; - &lt;code&gt;s&lt;/code&gt; has the form (U) or [U] or {U} where U is a properly nested string; - &lt;code&gt;s&lt;/code&gt; has the form VW where V and W are properly nested strings. For example, the string &#34;()()[()]&#34; is properly nested but &#34;[(()]&#34; is not. &lt;strong&gt;Note&lt;/strong&gt; Providing characters other then brackets would return false, despite brackets sequence in the string. Make sure to filter input before usage.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; palindrome &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/palindrome/ispalindrome.go#L26&#34;&gt;&lt;code&gt;IsPalindrome&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/palindrome/ispalindrome.go#L39&#34;&gt;&lt;code&gt;IsPalindromeRecursive&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; pangram &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/pangram/ispangram.go#L21&#34;&gt;&lt;code&gt;IsPangram&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; parenthesis &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/parenthesis/parenthesis.go#L12&#34;&gt;&lt;code&gt;Parenthesis&lt;/code&gt;&lt;/a&gt;: parcounter will be 0 if all open parenthesis are closed correctly&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; pascal &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pascal/pascaltriangle.go#L24&#34;&gt;&lt;code&gt;GenerateTriangle&lt;/code&gt;&lt;/a&gt;: GenerateTriangle This function generates a Pascal&#39;s triangle of n lines&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; password &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package password contains functions to help generate random passwords&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/other/password/generator.go#L15&#34;&gt;&lt;code&gt;Generate&lt;/code&gt;&lt;/a&gt;: Generate returns a newly generated password&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; permutation &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/permutation/heaps.go#L37&#34;&gt;&lt;code&gt;GenerateElementSet&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/permutation/heaps.go#L8&#34;&gt;&lt;code&gt;Heaps&lt;/code&gt;&lt;/a&gt;: Heap&#39;s Algorithm for generating all permutations of n objects&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; pi &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;spigotpi_test.go description: Test for Spigot Algorithm for the Digits of Pi author(s) &lt;a href=&#34;https://github.com/i-redbyte&#34;&gt;red_byte&lt;/a&gt; see spigotpi.go&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pi/montecarlopi.go#L17&#34;&gt;&lt;code&gt;MonteCarloPi&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pi/montecarlopi.go#L36&#34;&gt;&lt;code&gt;MonteCarloPiConcurrent&lt;/code&gt;&lt;/a&gt;: MonteCarloPiConcurrent approximates the value of pi using the Monte Carlo method. Unlike the MonteCarloPi function (first version), this implementation uses goroutines and channels to parallelize the computation. More details on the Monte Carlo method available at &lt;a href=&#34;https://en.wikipedia.org/wiki/Monte_Carlo_method&#34;&gt;https://en.wikipedia.org/wiki/Monte_Carlo_method&lt;/a&gt;. More details on goroutines parallelization available at &lt;a href=&#34;https://go.dev/doc/effective_go#parallel&#34;&gt;https://go.dev/doc/effective_go#parallel&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pi/spigotpi.go#L12&#34;&gt;&lt;code&gt;Spigot&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; polybius &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package polybius is encrypting method with polybius square ref: &lt;a href=&#34;https://en.wikipedia.org/wiki/Polybius_square#Hybrid_Polybius_Playfair_Cipher&#34;&gt;https://en.wikipedia.org/wiki/Polybius_square#Hybrid_Polybius_Playfair_Cipher&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/polybius/polybius.go#L21&#34;&gt;&lt;code&gt;NewPolybius&lt;/code&gt;&lt;/a&gt;: NewPolybius returns a pointer to object of Polybius. If the size of &#34;chars&#34; is longer than &#34;size&#34;, &#34;chars&#34; are truncated to &#34;size&#34;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/polybius/polybius.go#L12&#34;&gt;&lt;code&gt;Polybius&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; power &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/power/fastexponent.go#L4&#34;&gt;&lt;code&gt;IterativePower&lt;/code&gt;&lt;/a&gt;: IterativePower is iterative O(logn) function for pow(x, y)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/power/fastexponent.go#L18&#34;&gt;&lt;code&gt;RecursivePower&lt;/code&gt;&lt;/a&gt;: RecursivePower is recursive O(logn) function for pow(x, y)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/power/fastexponent.go#L30&#34;&gt;&lt;code&gt;RecursivePower1&lt;/code&gt;&lt;/a&gt;: RecursivePower1 is recursive O(n) function for pow(x, y)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/power/powvialogarithm.go#L14&#34;&gt;&lt;code&gt;UsingLog&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; prime &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/primefactorization.go#L5&#34;&gt;&lt;code&gt;Factorize&lt;/code&gt;&lt;/a&gt;: Factorize is a function that computes the exponents of each prime in the prime factorization of n&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/sieve.go#L26&#34;&gt;&lt;code&gt;Generate&lt;/code&gt;&lt;/a&gt;: Generate returns a int slice of prime numbers up to the limit&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/sieve.go#L9&#34;&gt;&lt;code&gt;GenerateChannel&lt;/code&gt;&lt;/a&gt;: Generate generates the sequence of integers starting at 2 and sends it to the channel &lt;code&gt;ch&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L121&#34;&gt;&lt;code&gt;MillerRabinDeterministic&lt;/code&gt;&lt;/a&gt;: MillerRabinDeterministic is a Deterministic version of the Miller-Rabin test, which returns correct results for all valid int64 numbers.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L101&#34;&gt;&lt;code&gt;MillerRabinProbabilistic&lt;/code&gt;&lt;/a&gt;: MillerRabinProbabilistic is a probabilistic test for primality of an integer based of the algorithm devised by Miller and Rabin.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L77&#34;&gt;&lt;code&gt;MillerRandomTest&lt;/code&gt;&lt;/a&gt;: MillerRandomTest This is the intermediate step that repeats within the miller rabin primality test for better probabilitic chances of receiving the correct result with random witnesses.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L49&#34;&gt;&lt;code&gt;MillerTest&lt;/code&gt;&lt;/a&gt;: MillerTest tests whether num is a strong probable prime to a witness. Formally: a^d ≡ 1 (mod n) or a^(2^r * d) ≡ -1 (mod n), 0 &amp;lt;= r &amp;lt;= s&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/millerrabintest.go#L84&#34;&gt;&lt;code&gt;MillerTestMultiple&lt;/code&gt;&lt;/a&gt;: MillerTestMultiple is like MillerTest but runs the test for multiple witnesses.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/primecheck.go#L26&#34;&gt;&lt;code&gt;OptimizedTrialDivision&lt;/code&gt;&lt;/a&gt;: OptimizedTrialDivision checks primality of an integer using an optimized trial division method. The optimizations include not checking divisibility by the even numbers and only checking up to the square root of the given number.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/sieve.go#L16&#34;&gt;&lt;code&gt;Sieve&lt;/code&gt;&lt;/a&gt;: Sieve Sieving the numbers that are not prime from the channel - basically removing them from the channels&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/prime/primecheck.go#L9&#34;&gt;&lt;code&gt;TrialDivision&lt;/code&gt;&lt;/a&gt;: TrialDivision tests whether a number is prime by trying to divide it by the numbers less than it.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; pythagoras &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pythagoras/pythagoras.go#L15&#34;&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/a&gt;: Distance calculates the distance between to vectors with the Pythagoras theorem&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/math/pythagoras/pythagoras.go#L8&#34;&gt;&lt;code&gt;Vector&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; queue &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L32&#34;&gt;&lt;code&gt;BackQueue&lt;/code&gt;&lt;/a&gt;: BackQueue return the Back value&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L20&#34;&gt;&lt;code&gt;DeQueue&lt;/code&gt;&lt;/a&gt;: DeQueue it will be removed the first value that added into the list&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L15&#34;&gt;&lt;code&gt;EnQueue&lt;/code&gt;&lt;/a&gt;: EnQueue it will be added new value into our list&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L27&#34;&gt;&lt;code&gt;FrontQueue&lt;/code&gt;&lt;/a&gt;: FrontQueue return the Front value&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L42&#34;&gt;&lt;code&gt;IsEmptyQueue&lt;/code&gt;&lt;/a&gt;: IsEmptyQueue check our list is empty or not&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuearray.go#L37&#34;&gt;&lt;code&gt;LenQueue&lt;/code&gt;&lt;/a&gt;: LenQueue will return the length of the queue list&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuelinklistwithlist.go#L20&#34;&gt;&lt;code&gt;LQueue&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuelinkedlist.go#L13&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/queue/queuelinkedlist.go#L19&#34;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; rsa &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package rsa shows a simple implementation of RSA algorithm&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/rsa/rsa.go#L43&#34;&gt;&lt;code&gt;Decrypt&lt;/code&gt;&lt;/a&gt;: Decrypt decrypts encrypted rune slice based on the RSA algorithm&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/rsa/rsa.go#L28&#34;&gt;&lt;code&gt;Encrypt&lt;/code&gt;&lt;/a&gt;: Encrypt encrypts based on the RSA algorithm - uses modular exponentitation in math directory&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; search &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/search/boyermoore.go#L5&#34;&gt;&lt;code&gt;BoyerMoore&lt;/code&gt;&lt;/a&gt;: Implementation of boyer moore string search O(l) where l=len(text)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/strings/search/naive.go#L5&#34;&gt;&lt;code&gt;Naive&lt;/code&gt;&lt;/a&gt;: Implementation of naive string search O(n*m) where n=len(txt) and m=len(pattern)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; segmenttree &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/segmenttree/segmenttree.go#L116&#34;&gt;&lt;code&gt;NewSegmentTree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/segmenttree/segmenttree.go#L17&#34;&gt;&lt;code&gt;SegmentTree&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; set &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;package set implements a Set using a golang map. This implies that only the types that are accepted as valid map keys can be used as set elements. For instance, do not try to Add a slice, or the program will panic.&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/set/set.go#L7&#34;&gt;&lt;code&gt;New&lt;/code&gt;&lt;/a&gt;: New gives new set.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; sha256 &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/hashing/sha256/sha256.go#L50&#34;&gt;&lt;code&gt;Hash&lt;/code&gt;&lt;/a&gt;: Hash hashes the input message using the sha256 hashing function, and return a 32 byte array. The implementation follows the RGC6234 standard, which is documented at &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6234&#34;&gt;https://datatracker.ietf.org/doc/html/rfc6234&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; sort &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package sort a package for demonstrating sorting algorithms in Go Package sort Patience sorting is a sorting algorithm inspired by the card game patience. For more details check out those links below here: GeeksForGeeks article : &lt;a href=&#34;https://www.geeksforgeeks.org/patience-sorting/&#34;&gt;https://www.geeksforgeeks.org/patience-sorting/&lt;/a&gt; Wikipedia article: &lt;a href=&#34;https://en.wikipedia.org/wiki/Patience_sorting&#34;&gt;https://en.wikipedia.org/wiki/Patience_sorting&lt;/a&gt; authors &lt;a href=&#34;https://github.com/guuzaa&#34;&gt;guuzaa&lt;/a&gt; see patiencesort.go&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/bubblesort.go#L9&#34;&gt;&lt;code&gt;Bubble&lt;/code&gt;&lt;/a&gt;: Bubble is a simple generic definition of Bubble sort algorithm.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/combSort.go#L17&#34;&gt;&lt;code&gt;Comb&lt;/code&gt;&lt;/a&gt;: Comb is a simple sorting algorithm which is an improvement of the bubble sorting algorithm.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/countingsort.go#L11&#34;&gt;&lt;code&gt;Count&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/exchangesort.go#L8&#34;&gt;&lt;code&gt;Exchange&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/heapsort.go#L121&#34;&gt;&lt;code&gt;HeapSort&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/simplesort.go#L27&#34;&gt;&lt;code&gt;ImprovedSimple&lt;/code&gt;&lt;/a&gt;: ImprovedSimple is a improve SimpleSort by skipping an unnecessary comparison of the first and last. This improved version is more similar to implementation of insertion sort&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/insertionsort.go#L5&#34;&gt;&lt;code&gt;Insertion&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/mergesort.go#L40&#34;&gt;&lt;code&gt;Merge&lt;/code&gt;&lt;/a&gt;: Merge Perform merge sort on a slice&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/mergesort.go#L54&#34;&gt;&lt;code&gt;MergeIter&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/quicksort.go#L12&#34;&gt;&lt;code&gt;Partition&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/patiencesort.go#L13&#34;&gt;&lt;code&gt;Patience&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/pigeonholesort.go#L12&#34;&gt;&lt;code&gt;Pigeonhole&lt;/code&gt;&lt;/a&gt;: Pigeonhole sorts a slice using pigeonhole sorting algorithm.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/quicksort.go#L39&#34;&gt;&lt;code&gt;Quicksort&lt;/code&gt;&lt;/a&gt;: Quicksort Sorts the entire array&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/quicksort.go#L26&#34;&gt;&lt;code&gt;QuicksortRange&lt;/code&gt;&lt;/a&gt;: QuicksortRange Sorts the specified range within the array&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/radixsort.go#L35&#34;&gt;&lt;code&gt;RadixSort&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/selectionsort.go#L5&#34;&gt;&lt;code&gt;Selection&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/shellsort.go#L5&#34;&gt;&lt;code&gt;Shell&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/simplesort.go#L13&#34;&gt;&lt;code&gt;Simple&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/#L0&#34;&gt;&lt;code&gt;Int&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;Methods:&lt;/p&gt; &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/heapsort.go#L114&#34;&gt;&lt;code&gt;More&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;   &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/sort/heapsort.go#L3&#34;&gt;&lt;code&gt;MaxHeap&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; stack &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/stack/stacklinkedlist.go#L13&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/stack/stacklinkedlistwithlist.go#L18&#34;&gt;&lt;code&gt;SList&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/stack/stacklinkedlist.go#L19&#34;&gt;&lt;code&gt;Stack&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; transposition &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/transposition/transposition.go#L82&#34;&gt;&lt;code&gt;Decrypt&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/transposition/transposition.go#L54&#34;&gt;&lt;code&gt;Encrypt&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/transposition/transposition.go#L16&#34;&gt;&lt;code&gt;KeyMissingError&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/transposition/transposition.go#L15&#34;&gt;&lt;code&gt;NoTextToEncryptError&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; trie &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package trie provides Trie data structures in golang. Wikipedia: &lt;a href=&#34;https://en.wikipedia.org/wiki/Trie&#34;&gt;https://en.wikipedia.org/wiki/Trie&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/trie/trie.go#L14&#34;&gt;&lt;code&gt;NewNode&lt;/code&gt;&lt;/a&gt;: NewNode creates a new Trie node with initialized children map.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Types&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/structure/trie/trie.go#L7&#34;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt;: No description provided.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt; &lt;strong&gt; xor &lt;/strong&gt; &lt;/summary&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Package xor is an encryption algorithm that operates the exclusive disjunction(XOR) ref: &lt;a href=&#34;https://en.wikipedia.org/wiki/XOR_cipher&#34;&gt;https://en.wikipedia.org/wiki/XOR_cipher&lt;/a&gt;&lt;/h5&gt; &#xA; &lt;hr&gt; &#xA; &lt;h5&gt;Functions:&lt;/h5&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/xor/xor.go#L19&#34;&gt;&lt;code&gt;Decrypt&lt;/code&gt;&lt;/a&gt;: Decrypt decrypts with Xor encryption&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TheAlgorithms/Go/master/cipher/xor/xor.go#L10&#34;&gt;&lt;code&gt;Encrypt&lt;/code&gt;&lt;/a&gt;: Encrypt encrypts with Xor encryption after converting each character to byte The returned value might not be readable because there is no guarantee which is within the ASCII range If using other type such as string, []int, or some other types, add the statements for converting the type to []byte.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;hr&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- GODOCMD END ---&gt;</summary>
  </entry>
</feed>