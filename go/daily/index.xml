<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-18T01:32:52Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PRC20/PRC20Miner</title>
    <updated>2023-12-18T01:32:52Z</updated>
    <id>tag:github.com,2023-12-18:/PRC20/PRC20Miner</id>
    <link href="https://github.com/PRC20/PRC20Miner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blockchain PRC20 Mining Tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PRC20 Mining Tool&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This Go project is a fully-functional tool for participating in Ethereum&#39;s PRC20Miner mining process. It provides a practical implementation for connecting to the Ethereum blockchain, generating nonces, and submitting transactions once a valid nonce is found. This tool is ideal for those looking to engage in Ethereum mining or understand the underlying mechanics in a real-world scenario.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mining Functionality&lt;/strong&gt;: Generates nonces and compares the resulting hash against a target, mimicking the actual mining process in Ethereum.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Parallel Mining Workers&lt;/strong&gt;: Utilizes Go&#39;s concurrency capabilities to deploy multiple mining workers, increasing the chance of finding a valid nonce.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Smart Contract Interaction&lt;/strong&gt;: Retrieves the current mining challenge and difficulty from a specified Ethereum smart contract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Nonce Submission and Transaction Handling&lt;/strong&gt;: Submits the mining solution to the Ethereum network and handles the transaction process once a valid nonce is discovered.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Go&lt;/strong&gt;: Ensure Go 1.21.x is installed on your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clone the Repository&lt;/strong&gt;: Download this repository to your local machine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency Installation&lt;/strong&gt;: Run &lt;code&gt;go get&lt;/code&gt; to install the necessary dependencies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build the Project&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Navigate to the project directory.&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;go build -o PRC20Miner&lt;/code&gt; to build the executable.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configuration&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Customize your Ethereum private key and the contract address in the &lt;code&gt;init()&lt;/code&gt; function.&lt;/li&gt; &#xA;   &lt;li&gt;Adjust the number of mining workers as needed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Running the Tool&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Launch the tool by executing &lt;code&gt;./PRC20Miner&lt;/code&gt; in your terminal.&lt;/li&gt; &#xA;   &lt;li&gt;You can use optional flags for specific configurations, for example: &lt;code&gt;./PRC20Miner -privateKey YOUR_PRIVATE_KEY -contractAddress CONTRACT_ADDRESS -workerCount NUMBER_OF_WORKERS&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Declare&lt;/h2&gt; &#xA;&lt;p&gt;The project code is completely open source. The released version is compiled using Github Actions. If you have any questions about the code, please feel free to raise them or submit the code for security auditing anywhere.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Your contributions are welcome. Please adhere to the project&#39;s coding standards and include tests for any new features or fixes.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lkarlslund/ldapnomnom</title>
    <updated>2023-12-18T01:32:52Z</updated>
    <id>tag:github.com,2023-12-18:/lkarlslund/ldapnomnom</id>
    <link href="https://github.com/lkarlslund/ldapnomnom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quietly and anonymously bruteforce Active Directory usernames at insane speeds from Domain Controllers by (ab)using LDAP Ping requests (cLDAP)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LDAP Nom Nom&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Quietly and anonymously bruteforce Active Directory usernames at insane speeds from Domain Controllers by (ab)using LDAP Ping requests (cLDAP)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Looks for enabled normal user accounts. No Windows audit logs generated. High speed ~ up to 10K/sec - go beyond 25K/sec with multiple servers!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lkarlslund/ldapnomnom/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/lkarlslund/ldapnomnom/total&#34; alt=&#34;GitHub all releases&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/lkarlslund/ldapnomnom/prerelease.yml?branch=main&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tries to autodetect DC from environment variables on domain joined machines or falls back to machine hostname FQDN DNS suffix&lt;/li&gt; &#xA; &lt;li&gt;Reads usernames to test from stdin (default) or file&lt;/li&gt; &#xA; &lt;li&gt;Outputs to stdout (default) or file&lt;/li&gt; &#xA; &lt;li&gt;Parallelized, multiple connections to multiple servers (defaults to 8 servers, 8 connections per server)&lt;/li&gt; &#xA; &lt;li&gt;Shows progressbar if you&#39;re using both input and output files&lt;/li&gt; &#xA; &lt;li&gt;Evasive maneuvers: Use --throttle 20 for a 20ms delay between each request (slows everything down to a crawl)&lt;/li&gt; &#xA; &lt;li&gt;Evasive maneuvers: Use --maxrequests 1000 to close connection and reconnect after 1000 requests in each connection (try to avoid detection based on traffic volume)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Download auto built binaries from &lt;a href=&#34;https://github.com/lkarlslund/ldapnomnom/releases&#34;&gt;releases&lt;/a&gt; or build and install with this Go command&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;go install github.com/lkarlslund/ldapnomnom@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ldapnomnom [--server dc1.domain.suffix[,dc2.domain.suffix] | --dnsdomain domain.suffix] [--port number] [--tlsmode notls|tls|starttls] [--input filename] [--output filename] [--parallel number-of-connections] [--maxservers number-of-servers] [--maxstrategy fastest|random] [--throttle n] [--maxrequests n]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bruteforcing examples&lt;/h3&gt; &#xA;&lt;p&gt;Connect to up to 32 servers from contoso.local with 16 connections to each - FAAAAAAAST&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ldapnomnom --input 10m_usernames.txt --output multiservers.txt --dnsdomain contoso.local --maxservers 32 --parallel 16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect to one named server with 4 connections&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ldapnomnom --input 10m_usernames.txt --output results.txt --server 192.168.0.11 --parallel 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Look for username lists to feed into this elsewhere - for instance the 10M list from &lt;a href=&#34;https://github.com/danielmiessler/SecLists/tree/master/Usernames&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Extract rootDSE attributes&lt;/h3&gt; &#xA;&lt;p&gt;You can also use LDAP Nom Nom to dump attributes from the rootDSE object, by adding the &#34;--dump&#34; option.&lt;/p&gt; &#xA;&lt;p&gt;Connect to all servers you can find, and output all readable attributes to JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ldapnomnom --output rootDSEs.json --dump&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Detection&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No Windows event logs are generated (tested on Windows 2016 / 2019)&lt;/li&gt; &#xA; &lt;li&gt;Requires custom network level monitoring (unencrypted LDAP analysis or traffic volume for LDAPS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mitigation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;None, this is part of the dcLocator stuff&lt;/li&gt; &#xA; &lt;li&gt;Rename your administrator account&lt;/li&gt; &#xA; &lt;li&gt;Audit accounts for having same password as the username&lt;/li&gt; &#xA; &lt;li&gt;Prevent kerberoasting by removing SPNs on as many accounts as possible&lt;/li&gt; &#xA; &lt;li&gt;Use long and complex passwords on accounts with SPNs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;During a discussion on Twitter about locating Kerberos services, someone hinted the existance of LDAP Ping requests. They&#39;re documented on &lt;a href=&#34;https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-adts/895a7744-aff3-4f64-bcfa-f8c05915d2e9&#34;&gt;Microsofts Open Specifications Pages&lt;/a&gt;, and it contains pseudo code for how you initiate a LDAP Ping, what parameters it takes and the data returned. It immediately seemed obvious that there is an information leak here that can be abused.&lt;/p&gt; &#xA;&lt;p&gt;After having released the tool, I can see I&#39;m not the only one to spot this &#34;mistake&#34; which is clearly still around for historic backwards compatibility reasons.&lt;/p&gt; &#xA;&lt;p&gt;If you want to avoid network level detection as an attacker you should use TLS on port 636 (tool defaults to unencrypted LDAP on port 389).&lt;/p&gt; &#xA;&lt;p&gt;If you like Active Directory you might also like my attack graph tool &lt;a href=&#34;https://github.com/lkarlslund/Adalanche&#34;&gt;Adalanche&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>