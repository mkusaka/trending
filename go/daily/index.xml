<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:34:20Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tencentmusic/evhub</title>
    <updated>2022-10-16T01:34:20Z</updated>
    <id>tag:github.com,2022-10-16:/tencentmusic/evhub</id>
    <link href="https://github.com/tencentmusic/evhub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;EvHub supports the distribution of delayed, transaction, real-time and cyclic events. It is used in scenarios such as system decoupling, asynchronous calling and distributed transactions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Evhub&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/tencentmusic/evhub/main/README_CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Infra&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tencentmusic/evhub/main/docs/img/evhub.png&#34; alt=&#34;img.png&#34;&gt; EvHub is an event-driven runtime that provides unified event model, retrieves asynchronous events, and distributes events to application scenarios to decouple upstream and downstream systems. Support real-time, delay, loop and transaction event scenarios, to achieve high real-time, high reliable general event components. It makes it easy for developers to build event-driven architecture stateless microservices.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-protocol: Supports multiple protocols, such as HTTP and gRPC&lt;/li&gt; &#xA; &lt;li&gt;Support for transactional messages&lt;/li&gt; &#xA; &lt;li&gt;Supports delay events, including normal delay events and delay processing events&lt;/li&gt; &#xA; &lt;li&gt;Recurring events are supported, including regular recurring events and crontab events&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple event stores: Kafka, Pulsar, Mysql, Redis, etc&lt;/li&gt; &#xA; &lt;li&gt;Support for multiple microservice architectures&lt;/li&gt; &#xA; &lt;li&gt;Supports high availability and easy horizontal expansion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Application scenarios.&lt;/h2&gt; &#xA;&lt;p&gt;EvHub can be applied to data consistency problems in a large number of scenarios,here are a few common ones&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Peak cut&lt;/li&gt; &#xA; &lt;li&gt;Broadcast&lt;/li&gt; &#xA; &lt;li&gt;Cache management&lt;/li&gt; &#xA; &lt;li&gt;System decoupling, event driven: Greatly simplifying the architectural complexity&lt;/li&gt; &#xA; &lt;li&gt;Distributed transaction&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;run EvHub&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;stop EvHub&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request POST &#39;127.0.0.1:8081/v1/producer&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;    &#34;producer_conf_info&#34;:{&#xA;        &#34;app_id&#34;:&#34;eh&#34;,&#xA;        &#34;topic_id&#34;:&#34;test&#34;,&#xA;        &#34;tx_protocol_type&#34;:0,&#xA;        &#34;tx_address&#34;:&#34;addr&#34;,&#xA;        &#34;tx_callback_interval&#34;:5000&#xA;    }&#xA;}&#39;&#xA;&#xA;curl --location --request POST &#39;127.0.0.1:8081/v1/processor&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;    &#34;processor_conf_info&#34;:{&#xA;        &#34;dispatcher_id&#34;:&#34;evhub_eh_test_addr1&#34;,&#xA;        &#34;app_id&#34;:&#34;eh&#34;,&#xA;        &#34;topic_id&#34;:&#34;test&#34;,&#xA;        &#34;timeout&#34;:5000,&#xA;        &#34;protocol_type&#34;:&#34;grpcSend&#34;,&#xA;        &#34;addr&#34;:&#34;ip:6001&#34;,&#xA;        &#34;retry_strategy&#34;:{&#xA;            &#34;retry_interval&#34;: 5000,&#xA;            &#34;retry_count&#34;:3&#xA;        }&#xA;    }&#xA;}&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-GO&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/tencentmusic/evhub/pkg/gen/proto/comm&#34;&#xA;&#x9;&#34;github.com/tencentmusic/evhub/pkg/grpc&#34;&#xA;&#x9;&#34;github.com/tencentmusic/evhub/pkg/grpc/interceptor&#34;&#xA;&#x9;&#34;github.com/tencentmusic/evhub/pkg/log&#34;&#xA;&#xA;&#x9;eh_pc &#34;github.com/tencentmusic/evhub/pkg/gen/proto/processor&#34;&#xA;&#x9;eh_pd &#34;github.com/tencentmusic/evhub/pkg/gen/proto/producer&#34;&#xA;&#x9;ggrpc &#34;google.golang.org/grpc&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;serverAddr := &#34;:6001&#34;&#xA;&#x9;addr := &#34;127.0.0.1:9000&#34;&#xA;&#x9;timeout := time.Second * 5&#xA;&#x9;conn, err := grpc.Dial(&amp;amp;grpc.ClientConfig{Addr: addr, Timeout: timeout})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Panicf(&#34;dial err:%v&#34;, err)&#xA;&#x9;}&#xA;&#x9;defer conn.Close()&#xA;&#x9;// grpc client&#xA;&#x9;rsp, err := eh_pd.NewevhubProducerClient(conn).Report(context.Background(), &amp;amp;eh_pd.ReportReq{&#xA;&#x9;&#x9;Event: &amp;amp;comm.Event{&#xA;&#x9;&#x9;&#x9;AppId:   &#34;eh&#34;,&#xA;&#x9;&#x9;&#x9;TopicId: &#34;test&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;Trigger: &amp;amp;comm.EventTrigger{&#xA;&#x9;&#x9;&#x9;TriggerType: comm.EventTriggerType_EVENT_TRIGGER_TYPE_REAL_TIME,&#xA;&#x9;&#x9;},&#xA;&#x9;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Panicf(&#34;report err:%v&#34;, err)&#xA;&#x9;}&#xA;&#x9;if rsp.Ret != nil &amp;amp;&amp;amp; rsp.Ret.Code != 0 {&#xA;&#x9;&#x9;log.Panicf(&#34;report failed rsp:%+v&#34;, rsp)&#xA;&#x9;}&#xA;&#x9;log.Infof(&#34;report success rsp:%+v&#34;, rsp)&#xA;&#x9;StartGrpcServer(serverAddr, &amp;amp;Svc{})&#xA;}&#xA;&#xA;type Svc struct{}&#xA;&#xA;func (s *Svc) Dispatch(ctx context.Context, req *eh_pc.DispatchReq) (*eh_pc.DispatchRsp, error) {&#xA;&#x9;log.Infof(&#34;ctx:%v req:%+v&#34;, ctx, req)&#xA;&#x9;return &amp;amp;eh_pc.DispatchRsp{}, nil&#xA;}&#xA;&#xA;func StartGrpcServer(serverAddr string, s *Svc) {&#xA;&#x9;opts := []ggrpc.ServerOption{&#xA;&#x9;&#x9;ggrpc.ChainUnaryInterceptor(interceptor.DefaultUnaryServerInterceptors()...),&#xA;&#x9;}&#xA;&#x9;server := grpc.NewServer(&amp;amp;grpc.ServerConfig{&#xA;&#x9;&#x9;Addr: serverAddr,&#xA;&#x9;}, opts...)&#xA;&#xA;&#x9;eh_pc.RegisterevhubProcessorServer(server.Server(), s)&#xA;&#x9;if err := server.Serve(); err != nil {&#xA;&#x9;&#x9;log.Panicf(&#34;grpc failed to serve: %v&#34;, err)&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More examples&lt;/h3&gt; &#xA;&lt;p&gt;If you want more quick start examples, please refer to &lt;a href=&#34;https://github.com/tencentmusic/evhub/tree/main/example&#34;&gt;quick-start-sample&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Give a star! ⭐&lt;/h2&gt; &#xA;&lt;p&gt;If you think this project is interesting, or helpful to you, please give a star!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tidwall/gjson</title>
    <updated>2022-10-16T01:34:20Z</updated>
    <id>tag:github.com,2022-10-16:/tidwall/gjson</id>
    <link href="https://github.com/tidwall/gjson" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get JSON values quickly - JSON parser for Go&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/logo.png&#34; width=&#34;240&#34; height=&#34;78&#34; border=&#34;0&#34; alt=&#34;GJSON&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://godoc.org/github.com/tidwall/gjson&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/api-reference-blue.svg?style=flat-square&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tidwall.com/gjson-play&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%8F%90-playground-9900cc.svg?style=flat-square&#34; alt=&#34;GJSON Playground&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/SYNTAX.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/{}-syntax-33aa33.svg?style=flat-square&#34; alt=&#34;GJSON Syntax&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;get json values quickly&lt;/p&gt; &#xA;&lt;p&gt;GJSON is a Go package that provides a &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/#performance&#34;&gt;fast&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/#get-a-value&#34;&gt;simple&lt;/a&gt; way to get values from a json document. It has features such as &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/#get-a-value&#34;&gt;one line retrieval&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/#path-syntax&#34;&gt;dot notation paths&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/#iterate-through-an-object-or-array&#34;&gt;iteration&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/#json-lines&#34;&gt;parsing json lines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also check out &lt;a href=&#34;https://github.com/tidwall/sjson&#34;&gt;SJSON&lt;/a&gt; for modifying json, and the &lt;a href=&#34;https://github.com/tidwall/jj&#34;&gt;JJ&lt;/a&gt; command line tool.&lt;/p&gt; &#xA;&lt;p&gt;This README is a quick overview of how to use GJSON, for more information check out &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/SYNTAX.md&#34;&gt;GJSON Syntax&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;GJSON is also available for &lt;a href=&#34;https://github.com/volans-/gjson-py&#34;&gt;Python&lt;/a&gt; and &lt;a href=&#34;https://github.com/tidwall/gjson.rs&#34;&gt;Rust&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;To start using GJSON, install Go and run &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get -u github.com/tidwall/gjson&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will retrieve the library.&lt;/p&gt; &#xA;&lt;h2&gt;Get a value&lt;/h2&gt; &#xA;&lt;p&gt;Get searches json for the specified path. A path is in dot syntax, such as &#34;name.last&#34; or &#34;age&#34;. When the value is found it&#39;s returned immediately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/tidwall/gjson&#34;&#xA;&#xA;const json = `{&#34;name&#34;:{&#34;first&#34;:&#34;Janet&#34;,&#34;last&#34;:&#34;Prichard&#34;},&#34;age&#34;:47}`&#xA;&#xA;func main() {&#xA;&#x9;value := gjson.Get(json, &#34;name.last&#34;)&#xA;&#x9;println(value.String())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will print:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Prichard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;There&#39;s also the &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/#get-multiple-values-at-once&#34;&gt;GetMany&lt;/a&gt; function to get multiple values at once, and &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/#working-with-bytes&#34;&gt;GetBytes&lt;/a&gt; for working with JSON byte slices.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Path Syntax&lt;/h2&gt; &#xA;&lt;p&gt;Below is a quick overview of the path syntax, for more complete information please check out &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/SYNTAX.md&#34;&gt;GJSON Syntax&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A path is a series of keys separated by a dot. A key may contain special wildcard characters &#39;*&#39; and &#39;?&#39;. To access an array value use the index as the key. To get the number of elements in an array or to access a child path, use the &#39;#&#39; character. The dot and wildcard characters can be escaped with &#39;\&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: {&#34;first&#34;: &#34;Tom&#34;, &#34;last&#34;: &#34;Anderson&#34;},&#xA;  &#34;age&#34;:37,&#xA;  &#34;children&#34;: [&#34;Sara&#34;,&#34;Alex&#34;,&#34;Jack&#34;],&#xA;  &#34;fav.movie&#34;: &#34;Deer Hunter&#34;,&#xA;  &#34;friends&#34;: [&#xA;    {&#34;first&#34;: &#34;Dale&#34;, &#34;last&#34;: &#34;Murphy&#34;, &#34;age&#34;: 44, &#34;nets&#34;: [&#34;ig&#34;, &#34;fb&#34;, &#34;tw&#34;]},&#xA;    {&#34;first&#34;: &#34;Roger&#34;, &#34;last&#34;: &#34;Craig&#34;, &#34;age&#34;: 68, &#34;nets&#34;: [&#34;fb&#34;, &#34;tw&#34;]},&#xA;    {&#34;first&#34;: &#34;Jane&#34;, &#34;last&#34;: &#34;Murphy&#34;, &#34;age&#34;: 47, &#34;nets&#34;: [&#34;ig&#34;, &#34;tw&#34;]}&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;name.last&#34;          &amp;gt;&amp;gt; &#34;Anderson&#34;&#xA;&#34;age&#34;                &amp;gt;&amp;gt; 37&#xA;&#34;children&#34;           &amp;gt;&amp;gt; [&#34;Sara&#34;,&#34;Alex&#34;,&#34;Jack&#34;]&#xA;&#34;children.#&#34;         &amp;gt;&amp;gt; 3&#xA;&#34;children.1&#34;         &amp;gt;&amp;gt; &#34;Alex&#34;&#xA;&#34;child*.2&#34;           &amp;gt;&amp;gt; &#34;Jack&#34;&#xA;&#34;c?ildren.0&#34;         &amp;gt;&amp;gt; &#34;Sara&#34;&#xA;&#34;fav\.movie&#34;         &amp;gt;&amp;gt; &#34;Deer Hunter&#34;&#xA;&#34;friends.#.first&#34;    &amp;gt;&amp;gt; [&#34;Dale&#34;,&#34;Roger&#34;,&#34;Jane&#34;]&#xA;&#34;friends.1.last&#34;     &amp;gt;&amp;gt; &#34;Craig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also query an array for the first match by using &lt;code&gt;#(...)&lt;/code&gt;, or find all matches with &lt;code&gt;#(...)#&lt;/code&gt;. Queries support the &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt; comparison operators and the simple pattern matching &lt;code&gt;%&lt;/code&gt; (like) and &lt;code&gt;!%&lt;/code&gt; (not like) operators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;friends.#(last==&#34;Murphy&#34;).first    &amp;gt;&amp;gt; &#34;Dale&#34;&#xA;friends.#(last==&#34;Murphy&#34;)#.first   &amp;gt;&amp;gt; [&#34;Dale&#34;,&#34;Jane&#34;]&#xA;friends.#(age&amp;gt;45)#.last            &amp;gt;&amp;gt; [&#34;Craig&#34;,&#34;Murphy&#34;]&#xA;friends.#(first%&#34;D*&#34;).last         &amp;gt;&amp;gt; &#34;Murphy&#34;&#xA;friends.#(first!%&#34;D*&#34;).last        &amp;gt;&amp;gt; &#34;Craig&#34;&#xA;friends.#(nets.#(==&#34;fb&#34;))#.first   &amp;gt;&amp;gt; [&#34;Dale&#34;,&#34;Roger&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note that prior to v1.3.0, queries used the &lt;code&gt;#[...]&lt;/code&gt; brackets. This was changed in v1.3.0 as to avoid confusion with the new &lt;a href=&#34;https://raw.githubusercontent.com/tidwall/gjson/master/SYNTAX.md#multipaths&#34;&gt;multipath&lt;/a&gt; syntax. For backwards compatibility, &lt;code&gt;#[...]&lt;/code&gt; will continue to work until the next major release.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Result Type&lt;/h2&gt; &#xA;&lt;p&gt;GJSON supports the json types &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;. Arrays and Objects are returned as their raw json types.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Result&lt;/code&gt; type holds one of these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bool, for JSON booleans&#xA;float64, for JSON numbers&#xA;string, for JSON string literals&#xA;nil, for JSON null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To directly access the value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;result.Type           // can be String, Number, True, False, Null, or JSON&#xA;result.Str            // holds the string&#xA;result.Num            // holds the float64 number&#xA;result.Raw            // holds the raw json&#xA;result.Index          // index of raw value in original json, zero means index unknown&#xA;result.Indexes        // indexes of all the elements that match on a path containing the &#39;#&#39; query character.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are a variety of handy functions that work on a result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;result.Exists() bool&#xA;result.Value() interface{}&#xA;result.Int() int64&#xA;result.Uint() uint64&#xA;result.Float() float64&#xA;result.String() string&#xA;result.Bool() bool&#xA;result.Time() time.Time&#xA;result.Array() []gjson.Result&#xA;result.Map() map[string]gjson.Result&#xA;result.Get(path string) Result&#xA;result.ForEach(iterator func(key, value Result) bool)&#xA;result.Less(token Result, caseSensitive bool) bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;result.Value()&lt;/code&gt; function returns an &lt;code&gt;interface{}&lt;/code&gt; which requires type assertion and is one of the following Go types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;boolean &amp;gt;&amp;gt; bool&#xA;number  &amp;gt;&amp;gt; float64&#xA;string  &amp;gt;&amp;gt; string&#xA;null    &amp;gt;&amp;gt; nil&#xA;array   &amp;gt;&amp;gt; []interface{}&#xA;object  &amp;gt;&amp;gt; map[string]interface{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;result.Array()&lt;/code&gt; function returns back an array of values. If the result represents a non-existent value, then an empty array will be returned. If the result is not a JSON array, the return value will be an array containing one result.&lt;/p&gt; &#xA;&lt;h3&gt;64-bit integers&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;result.Int()&lt;/code&gt; and &lt;code&gt;result.Uint()&lt;/code&gt; calls are capable of reading all 64 bits, allowing for large JSON integers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;result.Int() int64    // -9223372036854775808 to 9223372036854775807&#xA;result.Uint() int64   // 0 to 18446744073709551615&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modifiers and path chaining&lt;/h2&gt; &#xA;&lt;p&gt;New in version 1.2 is support for modifier functions and path chaining.&lt;/p&gt; &#xA;&lt;p&gt;A modifier is a path component that performs custom processing on the json.&lt;/p&gt; &#xA;&lt;p&gt;Multiple paths can be &#34;chained&#34; together using the pipe character. This is useful for getting results from a modified query.&lt;/p&gt; &#xA;&lt;p&gt;For example, using the built-in &lt;code&gt;@reverse&lt;/code&gt; modifier on the above json document, we&#39;ll get &lt;code&gt;children&lt;/code&gt; array and reverse the order:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;children|@reverse&#34;           &amp;gt;&amp;gt; [&#34;Jack&#34;,&#34;Alex&#34;,&#34;Sara&#34;]&#xA;&#34;children|@reverse|0&#34;         &amp;gt;&amp;gt; &#34;Jack&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are currently the following built-in modifiers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@reverse&lt;/code&gt;: Reverse an array or the members of an object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@ugly&lt;/code&gt;: Remove all whitespace from a json document.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@pretty&lt;/code&gt;: Make the json document more human readable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@this&lt;/code&gt;: Returns the current element. It can be used to retrieve the root element.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@valid&lt;/code&gt;: Ensure the json document is valid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@flatten&lt;/code&gt;: Flattens an array.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@join&lt;/code&gt;: Joins multiple objects into a single object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@keys&lt;/code&gt;: Returns an array of keys for an object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@values&lt;/code&gt;: Returns an array of values for an object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@tostr&lt;/code&gt;: Converts json to a string. Wraps a json string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@fromstr&lt;/code&gt;: Converts a string from json. Unwraps a json string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@group&lt;/code&gt;: Groups arrays of objects. See &lt;a href=&#34;https://github.com/tidwall/gjson/commit/e4fc67c92aeebf2089fabc7872f010e340d105db&#34;&gt;e4fc67c&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modifier arguments&lt;/h3&gt; &#xA;&lt;p&gt;A modifier may accept an optional argument. The argument can be a valid JSON document or just characters.&lt;/p&gt; &#xA;&lt;p&gt;For example, the &lt;code&gt;@pretty&lt;/code&gt; modifier takes a json object as its argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@pretty:{&#34;sortKeys&#34;:true} &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which makes the json pretty and orders all of its keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;age&#34;:37,&#xA;  &#34;children&#34;: [&#34;Sara&#34;,&#34;Alex&#34;,&#34;Jack&#34;],&#xA;  &#34;fav.movie&#34;: &#34;Deer Hunter&#34;,&#xA;  &#34;friends&#34;: [&#xA;    {&#34;age&#34;: 44, &#34;first&#34;: &#34;Dale&#34;, &#34;last&#34;: &#34;Murphy&#34;},&#xA;    {&#34;age&#34;: 68, &#34;first&#34;: &#34;Roger&#34;, &#34;last&#34;: &#34;Craig&#34;},&#xA;    {&#34;age&#34;: 47, &#34;first&#34;: &#34;Jane&#34;, &#34;last&#34;: &#34;Murphy&#34;}&#xA;  ],&#xA;  &#34;name&#34;: {&#34;first&#34;: &#34;Tom&#34;, &#34;last&#34;: &#34;Anderson&#34;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The full list of &lt;code&gt;@pretty&lt;/code&gt; options are &lt;code&gt;sortKeys&lt;/code&gt;, &lt;code&gt;indent&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, and &lt;code&gt;width&lt;/code&gt;. Please see &lt;a href=&#34;https://github.com/tidwall/pretty#customized-output&#34;&gt;Pretty Options&lt;/a&gt; for more information.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom modifiers&lt;/h3&gt; &#xA;&lt;p&gt;You can also add custom modifiers.&lt;/p&gt; &#xA;&lt;p&gt;For example, here we create a modifier that makes the entire json document upper or lower case.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;gjson.AddModifier(&#34;case&#34;, func(json, arg string) string {&#xA;  if arg == &#34;upper&#34; {&#xA;    return strings.ToUpper(json)&#xA;  }&#xA;  if arg == &#34;lower&#34; {&#xA;    return strings.ToLower(json)&#xA;  }&#xA;  return json&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;children|@case:upper&#34;           &amp;gt;&amp;gt; [&#34;SARA&#34;,&#34;ALEX&#34;,&#34;JACK&#34;]&#xA;&#34;children|@case:lower|@reverse&#34;  &amp;gt;&amp;gt; [&#34;jack&#34;,&#34;alex&#34;,&#34;sara&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JSON Lines&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s support for &lt;a href=&#34;http://jsonlines.org/&#34;&gt;JSON Lines&lt;/a&gt; using the &lt;code&gt;..&lt;/code&gt; prefix, which treats a multilined document as an array.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#34;name&#34;: &#34;Gilbert&#34;, &#34;age&#34;: 61}&#xA;{&#34;name&#34;: &#34;Alexa&#34;, &#34;age&#34;: 34}&#xA;{&#34;name&#34;: &#34;May&#34;, &#34;age&#34;: 57}&#xA;{&#34;name&#34;: &#34;Deloise&#34;, &#34;age&#34;: 44}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;..#                   &amp;gt;&amp;gt; 4&#xA;..1                   &amp;gt;&amp;gt; {&#34;name&#34;: &#34;Alexa&#34;, &#34;age&#34;: 34}&#xA;..3                   &amp;gt;&amp;gt; {&#34;name&#34;: &#34;Deloise&#34;, &#34;age&#34;: 44}&#xA;..#.name              &amp;gt;&amp;gt; [&#34;Gilbert&#34;,&#34;Alexa&#34;,&#34;May&#34;,&#34;Deloise&#34;]&#xA;..#(name=&#34;May&#34;).age   &amp;gt;&amp;gt; 57&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ForEachLines&lt;/code&gt; function will iterate through JSON lines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;gjson.ForEachLine(json, func(line gjson.Result) bool{&#xA;    println(line.String())&#xA;    return true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get nested array values&lt;/h2&gt; &#xA;&lt;p&gt;Suppose you want all the last names from the following json:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;programmers&#34;: [&#xA;    {&#xA;      &#34;firstName&#34;: &#34;Janet&#34;, &#xA;      &#34;lastName&#34;: &#34;McLaughlin&#34;, &#xA;    }, {&#xA;      &#34;firstName&#34;: &#34;Elliotte&#34;, &#xA;      &#34;lastName&#34;: &#34;Hunter&#34;, &#xA;    }, {&#xA;      &#34;firstName&#34;: &#34;Jason&#34;, &#xA;      &#34;lastName&#34;: &#34;Harold&#34;, &#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You would use the path &#34;programmers.#.lastName&#34; like such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;result := gjson.Get(json, &#34;programmers.#.lastName&#34;)&#xA;for _, name := range result.Array() {&#xA;&#x9;println(name.String())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also query an object inside an array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;name := gjson.Get(json, `programmers.#(lastName=&#34;Hunter&#34;).firstName`)&#xA;println(name.String())  // prints &#34;Elliotte&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Iterate through an object or array&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;ForEach&lt;/code&gt; function allows for quickly iterating through an object or array. The key and value are passed to the iterator function for objects. Only the value is passed for arrays. Returning &lt;code&gt;false&lt;/code&gt; from an iterator will stop iteration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;result := gjson.Get(json, &#34;programmers&#34;)&#xA;result.ForEach(func(key, value gjson.Result) bool {&#xA;&#x9;println(value.String()) &#xA;&#x9;return true // keep iterating&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Simple Parse and Get&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a &lt;code&gt;Parse(json)&lt;/code&gt; function that will do a simple parse, and &lt;code&gt;result.Get(path)&lt;/code&gt; that will search a result.&lt;/p&gt; &#xA;&lt;p&gt;For example, all of these will return the same result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;gjson.Parse(json).Get(&#34;name&#34;).Get(&#34;last&#34;)&#xA;gjson.Get(json, &#34;name&#34;).Get(&#34;last&#34;)&#xA;gjson.Get(json, &#34;name.last&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check for the existence of a value&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you just want to know if a value exists.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;value := gjson.Get(json, &#34;name.last&#34;)&#xA;if !value.Exists() {&#xA;&#x9;println(&#34;no last name&#34;)&#xA;} else {&#xA;&#x9;println(value.String())&#xA;}&#xA;&#xA;// Or as one step&#xA;if gjson.Get(json, &#34;name.last&#34;).Exists() {&#xA;&#x9;println(&#34;has a last name&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validate JSON&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Get*&lt;/code&gt; and &lt;code&gt;Parse*&lt;/code&gt; functions expects that the json is well-formed. Bad json will not panic, but it may return back unexpected results.&lt;/p&gt; &#xA;&lt;p&gt;If you are consuming JSON from an unpredictable source then you may want to validate prior to using GJSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if !gjson.Valid(json) {&#xA;&#x9;return errors.New(&#34;invalid json&#34;)&#xA;}&#xA;value := gjson.Get(json, &#34;name.last&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unmarshal to a map&lt;/h2&gt; &#xA;&lt;p&gt;To unmarshal to a &lt;code&gt;map[string]interface{}&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;m, ok := gjson.Parse(json).Value().(map[string]interface{})&#xA;if !ok {&#xA;&#x9;// not a map&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working with Bytes&lt;/h2&gt; &#xA;&lt;p&gt;If your JSON is contained in a &lt;code&gt;[]byte&lt;/code&gt; slice, there&#39;s the &lt;a href=&#34;https://godoc.org/github.com/tidwall/gjson#GetBytes&#34;&gt;GetBytes&lt;/a&gt; function. This is preferred over &lt;code&gt;Get(string(data), path)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var json []byte = ...&#xA;result := gjson.GetBytes(json, path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;gjson.GetBytes(json, path)&lt;/code&gt; function and you want to avoid converting &lt;code&gt;result.Raw&lt;/code&gt; to a &lt;code&gt;[]byte&lt;/code&gt;, then you can use this pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var json []byte = ...&#xA;result := gjson.GetBytes(json, path)&#xA;var raw []byte&#xA;if result.Index &amp;gt; 0 {&#xA;    raw = json[result.Index:result.Index+len(result.Raw)]&#xA;} else {&#xA;    raw = []byte(result.Raw)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a best-effort no allocation sub slice of the original json. This method utilizes the &lt;code&gt;result.Index&lt;/code&gt; field, which is the position of the raw data in the original json. It&#39;s possible that the value of &lt;code&gt;result.Index&lt;/code&gt; equals zero, in which case the &lt;code&gt;result.Raw&lt;/code&gt; is converted to a &lt;code&gt;[]byte&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get multiple values at once&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;GetMany&lt;/code&gt; function can be used to get multiple values at the same time.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;results := gjson.GetMany(json, &#34;name.first&#34;, &#34;name.last&#34;, &#34;age&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The return value is a &lt;code&gt;[]Result&lt;/code&gt;, which will always contain exactly the same number of items as the input paths.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Benchmarks of GJSON alongside &lt;a href=&#34;https://golang.org/pkg/encoding/json/&#34;&gt;encoding/json&lt;/a&gt;, &lt;a href=&#34;https://github.com/pquerna/ffjson&#34;&gt;ffjson&lt;/a&gt;, &lt;a href=&#34;https://github.com/mailru/easyjson&#34;&gt;EasyJSON&lt;/a&gt;, &lt;a href=&#34;https://github.com/buger/jsonparser&#34;&gt;jsonparser&lt;/a&gt;, and &lt;a href=&#34;https://github.com/json-iterator/go&#34;&gt;json-iterator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BenchmarkGJSONGet-16                11644512       311 ns/op       0 B/op&#x9;       0 allocs/op&#xA;BenchmarkGJSONUnmarshalMap-16        1122678      3094 ns/op    1920 B/op&#x9;      26 allocs/op&#xA;BenchmarkJSONUnmarshalMap-16          516681      6810 ns/op    2944 B/op&#x9;      69 allocs/op&#xA;BenchmarkJSONUnmarshalStruct-16       697053      5400 ns/op     928 B/op&#x9;      13 allocs/op&#xA;BenchmarkJSONDecoder-16               330450     10217 ns/op    3845 B/op&#x9;     160 allocs/op&#xA;BenchmarkFFJSONLexer-16              1424979      2585 ns/op     880 B/op&#x9;       8 allocs/op&#xA;BenchmarkEasyJSONLexer-16            3000000       729 ns/op     501 B/op&#x9;       5 allocs/op&#xA;BenchmarkJSONParserGet-16            3000000       366 ns/op      21 B/op&#x9;       0 allocs/op&#xA;BenchmarkJSONIterator-16             3000000       869 ns/op     693 B/op&#x9;      14 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JSON document used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;widget&#34;: {&#xA;    &#34;debug&#34;: &#34;on&#34;,&#xA;    &#34;window&#34;: {&#xA;      &#34;title&#34;: &#34;Sample Konfabulator Widget&#34;,&#xA;      &#34;name&#34;: &#34;main_window&#34;,&#xA;      &#34;width&#34;: 500,&#xA;      &#34;height&#34;: 500&#xA;    },&#xA;    &#34;image&#34;: { &#xA;      &#34;src&#34;: &#34;Images/Sun.png&#34;,&#xA;      &#34;hOffset&#34;: 250,&#xA;      &#34;vOffset&#34;: 250,&#xA;      &#34;alignment&#34;: &#34;center&#34;&#xA;    },&#xA;    &#34;text&#34;: {&#xA;      &#34;data&#34;: &#34;Click Here&#34;,&#xA;      &#34;size&#34;: 36,&#xA;      &#34;style&#34;: &#34;bold&#34;,&#xA;      &#34;vOffset&#34;: 100,&#xA;      &#34;alignment&#34;: &#34;center&#34;,&#xA;      &#34;onMouseUp&#34;: &#34;sun1.opacity = (sun1.opacity / 100) * 90;&#34;&#xA;    }&#xA;  }&#xA;}    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each operation was rotated through one of the following search paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;widget.window.name&#xA;widget.image.hOffset&#xA;widget.text.onMouseUp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;These benchmarks were run on a MacBook Pro 16&#34; 2.4 GHz Intel Core i9 using Go 1.17 and can be found &lt;a href=&#34;https://github.com/tidwall/gjson-benchmarks&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>concourse/concourse</title>
    <updated>2022-10-16T01:34:20Z</updated>
    <id>tag:github.com,2022-10-16:/concourse/concourse</id>
    <link href="https://github.com/concourse/concourse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Concourse is a container-based continuous thing-doer written in Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Concourse: the continuous thing-doer.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/MeRxXKW&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/219899946617274369.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.concourse-ci.org/teams/main/pipelines/concourse&#34;&gt;&lt;img src=&#34;https://ci.concourse-ci.org/api/v1/teams/main/pipelines/concourse/badge&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/concourse/concourse/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/concourse/concourse&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/concourse/concourse/labels/help%20wanted&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/labels/concourse/concourse/help%20wanted&#34; alt=&#34;Help Wanted&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Concourse is an automation system written in Go. It is most commonly used for CI/CD, and is built to scale to any kind of automation pipeline, from simple to complex.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/concourse/concourse/master/screenshots/booklit-pipeline.png&#34; alt=&#34;booklit pipeline&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Concourse is very opinionated about a few things: idempotency, immutability, declarative config, stateless workers, and reproducible builds.&lt;/p&gt; &#xA;&lt;h2&gt;The road to Concourse v10&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.concourse-ci.org/core-roadmap-towards-v10/&#34;&gt;Concourse v10&lt;/a&gt; is the code name for a set of features which, when used in combination, will have a massive impact on Concourse&#39;s capabilities as a generic continuous thing-doer. These features, and how they interact, are described in detail in the &lt;a href=&#34;https://blog.concourse-ci.org/core-roadmap-towards-v10/&#34;&gt;Core roadmap: towards v10&lt;/a&gt; and &lt;a href=&#34;https://blog.concourse-ci.org/reinventing-resource-types/&#34;&gt;Re-inventing resource types&lt;/a&gt; blog posts. (These posts are &lt;em&gt;slightly&lt;/em&gt; out of date, but they get the idea across.)&lt;/p&gt; &#xA;&lt;p&gt;Notably, &lt;strong&gt;v10 will make Concourse not suck for multi-branch and/or pull-request driven workflows&lt;/strong&gt; - examples of &lt;em&gt;spatial&lt;/em&gt; change, where the set of things to automate grows and shrinks over time.&lt;/p&gt; &#xA;&lt;p&gt;Because v10 is really an alias for a ton of separate features, there&#39;s a lot to keep track of - here&#39;s an overview:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;RFC&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;set_pipeline&lt;/code&gt; step&lt;/td&gt; &#xA;   &lt;td&gt;✔ &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/031-set-pipeline-step/proposal.md&#34;&gt;#31&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔ v5.8.0 (experimental)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Var sources for creds&lt;/td&gt; &#xA;   &lt;td&gt;✔ &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/039-var-sources/proposal.md&#34;&gt;#39&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔ v5.8.0 (experimental), TODO: &lt;a href=&#34;https://github.com/concourse/concourse/issues/5813&#34;&gt;#5813&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Archiving pipelines&lt;/td&gt; &#xA;   &lt;td&gt;✔ &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/033-archiving-pipelines/proposal.md&#34;&gt;#33&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔ v6.5.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Instanced pipelines&lt;/td&gt; &#xA;   &lt;td&gt;✔ &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/034-instanced-pipelines/proposal.md&#34;&gt;#34&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔ v7.0.0 (experimental)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Static &lt;code&gt;across&lt;/code&gt; step&lt;/td&gt; &#xA;   &lt;td&gt;🚧 &lt;a href=&#34;https://github.com/concourse/rfcs/pull/29&#34;&gt;#29&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔ v6.5.0 (experimental)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dynamic &lt;code&gt;across&lt;/code&gt; step&lt;/td&gt; &#xA;   &lt;td&gt;🚧 &lt;a href=&#34;https://github.com/concourse/rfcs/pull/29&#34;&gt;#29&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔ v7.4.0 (experimental, not released yet)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Projects&lt;/td&gt; &#xA;   &lt;td&gt;🚧 &lt;a href=&#34;https://github.com/concourse/rfcs/pull/32&#34;&gt;#32&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🙏 RFC needs feedback!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;load_var&lt;/code&gt; step&lt;/td&gt; &#xA;   &lt;td&gt;✔ &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/027-var-steps/proposal.md&#34;&gt;#27&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔ v6.0.0 (experimental)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_var&lt;/code&gt; step&lt;/td&gt; &#xA;   &lt;td&gt;✔ &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/027-var-steps/proposal.md&#34;&gt;#27&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🚧 &lt;a href=&#34;https://github.com/concourse/concourse/issues/5815&#34;&gt;#5815&lt;/a&gt; in progress!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://blog.concourse-ci.org/reinventing-resource-types/&#34;&gt;Prototypes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✔ &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/037-prototypes/proposal.md&#34;&gt;#37&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⚠ Pending first use of protocol (any of the below)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;run&lt;/code&gt; step&lt;/td&gt; &#xA;   &lt;td&gt;🚧 &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/037-prototypes/proposal.md&#34;&gt;#37&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⚠ Pending its own RFC, but feel free to experiment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Resource prototypes&lt;/td&gt; &#xA;   &lt;td&gt;✔ &lt;a href=&#34;https://github.com/concourse/rfcs/raw/master/038-resource-prototypes/proposal.md&#34;&gt;#38&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🙏 &lt;a href=&#34;https://github.com/concourse/concourse/issues/5870&#34;&gt;#5870&lt;/a&gt; looking for volunteers!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Var source prototypes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;🚧 &lt;a href=&#34;https://github.com/concourse/concourse/issues/6275&#34;&gt;#6275&lt;/a&gt; planned, may lead to RFC&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Notifier prototypes&lt;/td&gt; &#xA;   &lt;td&gt;🚧 &lt;a href=&#34;https://github.com/concourse/rfcs/pull/28&#34;&gt;#28&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;⚠ RFC not ready&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The Concourse team at VMware will be working on these features, however in the interest of growing a healthy community of contributors we would really appreciate any volunteers. This roadmap is very easy to parallelize, as it is comprised of many orthogonal features, so the faster we can power through it, the faster we can all benefit. We want these for our own pipelines too! 😆&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to get involved, hop in &lt;a href=&#34;https://discord.gg/MeRxXKW&#34;&gt;Discord&lt;/a&gt; or leave a comment on any of the issues linked above so we can coordinate. We&#39;re more than happy to help figure things out or pick up any work that you don&#39;t feel comfortable doing (e.g. UI, unfamiliar parts, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Thanks to everyone who has contributed so far, whether in code or in the community, and thanks to everyone for their patience while we figure out how to support such common functionality the &#34;Concoursey way!&#34; 🙏&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Concourse is distributed as a single &lt;code&gt;concourse&lt;/code&gt; binary, available on the &lt;a href=&#34;https://github.com/concourse/concourse/releases/latest&#34;&gt;Releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to just kick the tires, jump ahead to the &lt;a href=&#34;https://raw.githubusercontent.com/concourse/concourse/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition to the &lt;code&gt;concourse&lt;/code&gt; binary, there are a few other supported formats. Consult their GitHub repos for more information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/concourse/concourse-docker&#34;&gt;Docker image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/concourse/concourse-bosh-release&#34;&gt;BOSH release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/concourse/concourse-chart&#34;&gt;Kubernetes Helm chart&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ wget https://concourse-ci.org/docker-compose.yml&#xA;$ docker-compose up&#xA;Creating docs_concourse-db_1 ... done&#xA;Creating docs_concourse_1    ... done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Concourse will be running at &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;127.0.0.1:8080&lt;/a&gt;. You can log in with the username/password as &lt;code&gt;test&lt;/code&gt;/&lt;code&gt;test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;If you are using an M1 mac&lt;/strong&gt;: M1 macs are incompatible with the &lt;code&gt;containerd&lt;/code&gt; runtime. After downloading the docker-compose file, change &lt;code&gt;CONCOURSE_WORKER_RUNTIME: &#34;containerd&#34;&lt;/code&gt; to &lt;code&gt;CONCOURSE_WORKER_RUNTIME: &#34;houdini&#34;&lt;/code&gt;. &lt;strong&gt;This feature is experimental&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Next, install &lt;code&gt;fly&lt;/code&gt; by downloading it from the web UI and target your local Concourse as the &lt;code&gt;test&lt;/code&gt; user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ fly -t ci login -c http://127.0.0.1:8080 -u test -p test&#xA;logging in to team &#39;main&#39;&#xA;&#xA;target saved&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring a Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;There is no GUI for configuring Concourse. Instead, pipelines are configured as declarative YAML files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;resources:&#xA;- name: booklit&#xA;  type: git&#xA;  source: {uri: &#34;https://github.com/vito/booklit&#34;}&#xA;&#xA;jobs:&#xA;- name: unit&#xA;  plan:&#xA;  - get: booklit&#xA;    trigger: true&#xA;  - task: test&#xA;    file: booklit/ci/test.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Most operations are done via the accompanying &lt;code&gt;fly&lt;/code&gt; CLI. If you&#39;ve got Concourse &lt;a href=&#34;https://concourse-ci.org/install.html&#34;&gt;installed&lt;/a&gt;, try saving the above example as &lt;code&gt;booklit.yml&lt;/code&gt;, &lt;a href=&#34;https://concourse-ci.org/fly.html#fly-login&#34;&gt;target your Concourse instance&lt;/a&gt;, and then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fly -t ci set-pipeline -p booklit -c booklit.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These pipeline files are self-contained, maximizing portability from one Concourse instance to the next.&lt;/p&gt; &#xA;&lt;h3&gt;Learn More&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://concourse-ci.org&#34;&gt;Official Site&lt;/a&gt; for documentation, reference material, and example pipelines (which no longer live in this repository).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://concoursetutorial.com&#34;&gt;Concourse Tutorial&lt;/a&gt; by Stark &amp;amp; Wayne is great for a guided introduction to all the core concepts.&lt;/li&gt; &#xA; &lt;li&gt;See Concourse in action with our &lt;a href=&#34;https://ci.concourse-ci.org/&#34;&gt;production pipelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hang around in the &lt;a href=&#34;https://github.com/concourse/concourse/discussions&#34;&gt;GitHub discussions&lt;/a&gt; or in &lt;a href=&#34;https://discord.gg/MeRxXKW&#34;&gt;Discord&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See what we&#39;re working on on the &lt;a href=&#34;https://github.com/orgs/concourse/projects&#34;&gt;project board&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Our user base is basically everyone that develops software (and wants it to work).&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a lot of work, and we need your help! If you&#39;re interested, check out our &lt;a href=&#34;https://raw.githubusercontent.com/concourse/concourse/master/CONTRIBUTING.md&#34;&gt;contributing docs&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>