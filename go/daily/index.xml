<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-21T01:33:00Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cilium/ebpf</title>
    <updated>2022-10-21T01:33:00Z</updated>
    <id>tag:github.com,2022-10-21:/cilium/ebpf</id>
    <link href="https://github.com/cilium/ebpf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ebpf-go is a pure-Go library to read, modify and load eBPF programs and attach them to various hooks in the Linux kernel.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eBPF&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/cilium/ebpf&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/cilium/ebpf&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cilium/ebpf/master/.github/images/cilium-ebpf.png&#34; alt=&#34;HoneyGopher&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ebpf-go is a pure Go library that provides utilities for loading, compiling, and debugging eBPF programs. It has minimal external dependencies and is intended to be used in long running processes.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ebpf.io&#34;&gt;ebpf.io&lt;/a&gt; for complementary projects from the wider eBPF ecosystem.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;A small collection of Go and eBPF programs that serve as examples for building your own tools can be found under &lt;a href=&#34;https://raw.githubusercontent.com/cilium/ebpf/master/examples/&#34;&gt;examples/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Contributions are highly encouraged, as they highlight certain use cases of eBPF and the library, and help shape the future of the project.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;The community actively monitors our &lt;a href=&#34;https://raw.githubusercontent.com/cilium/ebpf/master/discussions/&#34;&gt;GitHub Discussions&lt;/a&gt; page. Please search for existing threads before starting a new one. Refrain from opening issues on the bug tracker if you&#39;re just starting out or if you&#39;re not sure if something is a bug in the library code.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;a href=&#34;https://ebpf.io/slack&#34;&gt;join&lt;/a&gt; the &lt;a href=&#34;https://cilium.slack.com/messages/ebpf-go&#34;&gt;#ebpf-go&lt;/a&gt; channel on Slack if you have other questions regarding the project. Note that this channel is ephemeral and has its history erased past a certain point, which is less helpful for others running into the same problem later.&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;This library includes the following packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/cilium/ebpf/asm&#34;&gt;asm&lt;/a&gt; contains a basic assembler, allowing you to write eBPF assembly instructions directly within your Go code. (You don&#39;t need to use this if you prefer to write your eBPF program in C.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/cilium/ebpf/cmd/bpf2go&#34;&gt;cmd/bpf2go&lt;/a&gt; allows compiling and embedding eBPF programs written in C within Go code. As well as compiling the C code, it auto-generates Go code for loading and manipulating the eBPF program and map objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/cilium/ebpf/link&#34;&gt;link&lt;/a&gt; allows attaching eBPF to various hooks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/cilium/ebpf/perf&#34;&gt;perf&lt;/a&gt; allows reading from a &lt;code&gt;PERF_EVENT_ARRAY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/cilium/ebpf/ringbuf&#34;&gt;ringbuf&lt;/a&gt; allows reading from a &lt;code&gt;BPF_MAP_TYPE_RINGBUF&lt;/code&gt; map&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/cilium/ebpf/features&#34;&gt;features&lt;/a&gt; implements the equivalent of &lt;code&gt;bpftool feature probe&lt;/code&gt; for discovering BPF-related kernel features using native Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/cilium/ebpf/rlimit&#34;&gt;rlimit&lt;/a&gt; provides a convenient API to lift the &lt;code&gt;RLIMIT_MEMLOCK&lt;/code&gt; constraint on kernels before 5.11.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A version of Go that is &lt;a href=&#34;https://golang.org/doc/devel/release.html#policy&#34;&gt;supported by upstream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux &amp;gt;= 4.9. CI is run against kernel.org LTS releases. 4.4 should work but is not tested against.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Regenerating Testdata&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;make&lt;/code&gt; in the root of this repository to rebuild testdata in all subpackages. This requires Docker, as it relies on a standardized build environment to keep the build output stable.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to regenerate data using Podman by overriding the &lt;code&gt;CONTAINER_*&lt;/code&gt; variables: &lt;code&gt;CONTAINER_ENGINE=podman CONTAINER_RUN_ARGS= make&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The toolchain image build files are kept in &lt;a href=&#34;https://raw.githubusercontent.com/cilium/ebpf/master/testdata/docker/&#34;&gt;testdata/docker/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;h3&gt;eBPF Gopher&lt;/h3&gt; &#xA;&lt;p&gt;The eBPF honeygopher is based on the Go gopher designed by Renee French.&lt;/p&gt;</summary>
  </entry>
</feed>