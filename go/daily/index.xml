<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-25T02:18:54Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antonmedv/walk</title>
    <updated>2023-08-25T02:18:54Z</updated>
    <id>tag:github.com,2023-08-25:/antonmedv/walk</id>
    <link href="https://github.com/antonmedv/walk" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal file manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸ¥¾ walk&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://raw.githubusercontent.com/antonmedv/walk/master/.github/images/demo.gif&#34; width=&#34;600&#34; alt=&#34;walk demo&#34;&gt; &lt;br&gt; &lt;/p&gt; &#xA;&lt;p&gt;Walk â€” a terminal navigator.&lt;/p&gt; &#xA;&lt;p&gt;Why another terminal navigator? I wanted something simple and minimalistic. Something to help me with faster navigation in the filesystem; a &lt;code&gt;cd&lt;/code&gt; and &lt;code&gt;ls&lt;/code&gt; replacement. So I build &#34;walk&#34;. It allows for quick navigation with fuzzy searching. &lt;code&gt;cd&lt;/code&gt; integration is quite simple. And you can open &lt;code&gt;vim&lt;/code&gt; right from the walk. That&#39;s it.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install walk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install walk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add walk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/antonmedv/walk@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download &lt;a href=&#34;https://github.com/antonmedv/walk/releases&#34;&gt;prebuild binaries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Put the next function into the &lt;strong&gt;.bashrc&lt;/strong&gt; or a similar config:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt; Bash/Zsh &lt;/th&gt; &#xA;   &lt;th&gt; Fish &lt;/th&gt; &#xA;   &lt;th&gt; PowerShell &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;function lk {&#xA;  cd &#34;$(walk &#34;$@&#34;)&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;function lk&#xA;  set loc (walk $argv); and cd $loc;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;function lk() {&#xA;  cd $(walk $args)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;Now use &lt;code&gt;lk&lt;/code&gt; command to start walking.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key binding&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Arrows&lt;/code&gt;, &lt;code&gt;hjkl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Enter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enter directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Backspace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exit directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Space&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle preview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Esc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exit with cd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ctrl+C&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exit without cd&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fuzzy search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete file or dir&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The &lt;code&gt;EDITOR&lt;/code&gt; or &lt;code&gt;WALK_EDITOR&lt;/code&gt; environment variable used for opening files from the walk.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export EDITOR=vim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preview mode:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/antonmedv/walk/master/.github/images/preview-mode.gif&#34; width=&#34;600&#34; alt=&#34;Walk Preview Mode&#34;&gt; &#xA;&lt;p&gt;Delete file or directory:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/antonmedv/walk/master/.github/images/rm-demo.gif&#34; width=&#34;600&#34; alt=&#34;Walk Deletes a File&#34;&gt; &#xA;&lt;h2&gt;Command-line options&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;code&gt;--icons&lt;/code&gt; display icons&lt;/h5&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://www.nerdfonts.com&#34;&gt;Nerd Fonts&lt;/a&gt; to get the icons to render properly.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/antonmedv/walk/master/.github/images/demo-icons.gif&#34; width=&#34;600&#34; alt=&#34;Walk Icons Support&#34;&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/antonmedv/walk/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>juicity/juicity</title>
    <updated>2023-08-25T02:18:54Z</updated>
    <id>tag:github.com,2023-08-25:/juicity/juicity</id>
    <link href="https://github.com/juicity/juicity" rel="alternate"></link>
    <summary type="html">&lt;p&gt;juicity is a quic-based proxy protocol implementation.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Juicity&lt;/h1&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;img src=&#34;https://github.com/juicity/juicity/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/github/license/juicity/juicity?logo=law&amp;amp;color=blue&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fjuicity%2Fjuicity&amp;amp;count_bg=%23493DC8&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/github/v/release/juicity/juicity?logo=rocket&#34; alt=&#34;version&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/github/issues-pr-closed/juicity/juicity?color=purple&amp;amp;logo=git-pull-request&amp;amp;logoColor=white&#34;&gt; &lt;img src=&#34;https://custom-icon-badges.herokuapp.com/github/last-commit/juicity/juicity?logo=history&amp;amp;logoColor=white&#34; alt=&#34;lastcommit&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Juicity is a quic-based proxy protocol and implementation, inspired by tuic (with many thanks).&lt;/p&gt; &#xA;&lt;p&gt;Juicity is implemented with the following goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More stable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More actively maintained.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Better UDP implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Better compatibility and consistency with clients in Golang.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juicity/juicity/main/cmd/server/README.md&#34;&gt;juicity-server&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Client&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/juicity/juicity/main/cmd/client/README.md&#34;&gt;juicity/juicity-client&lt;/a&gt; &lt;img src=&#34;https://www.v2fly.org/tools/win.svg?sanitize=true&#34; height=&#34;16/&#34;&gt;&lt;img src=&#34;https://www.v2fly.org/tools/linux.svg?sanitize=true&#34; height=&#34;16/&#34;&gt;&lt;img src=&#34;https://www.v2fly.org/tools/apple.svg?sanitize=true&#34; height=&#34;16/&#34;&gt; (CLI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daeuniverse/dae&#34;&gt;daeuniverse/dae&lt;/a&gt; &lt;img src=&#34;https://www.v2fly.org/tools/linux.svg?sanitize=true&#34; height=&#34;16/&#34;&gt; (CLI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daeuniverse/daed&#34;&gt;daeuniverse/daed&lt;/a&gt; &lt;img src=&#34;https://www.v2fly.org/tools/linux.svg?sanitize=true&#34; height=&#34;16/&#34;&gt; (Web UI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/v2rayA/v2rayA&#34;&gt;v2rayA/v2rayA&lt;/a&gt; &lt;img src=&#34;https://www.v2fly.org/tools/win.svg?sanitize=true&#34; height=&#34;16/&#34;&gt;&lt;img src=&#34;https://www.v2fly.org/tools/linux.svg?sanitize=true&#34; height=&#34;16/&#34;&gt;&lt;img src=&#34;https://www.v2fly.org/tools/apple.svg?sanitize=true&#34; height=&#34;16/&#34;&gt; (Web UI)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Link Format&lt;/h2&gt; &#xA;&lt;p&gt;Full parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;juicity://uuid:password@122.12.31.66:port?congestion_control=bbr&amp;amp;sni=www.example.com&amp;amp;allow_insecure=0&amp;amp;pinned_certchain_sha256=CERT_HASH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mini parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;juicity://uuid:password@example.com:port?congestion_control=bbr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Juicity Specification&lt;/h2&gt; &#xA;&lt;p&gt;About the specification of the protocol, you can find it &lt;a href=&#34;https://raw.githubusercontent.com/juicity/juicity/main/docs/spec_en.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/juicity/juicity/raw/main/LICENSE&#34;&gt;AGPL-3.0 (C) juicity&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/juicity/juicity&#34;&gt;&lt;img src=&#34;https://starchart.cc/juicity/juicity.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>argoproj-labs/argocd-autopilot</title>
    <updated>2023-08-25T02:18:54Z</updated>
    <id>tag:github.com,2023-08-25:/argoproj-labs/argocd-autopilot</id>
    <link href="https://github.com/argoproj-labs/argocd-autopilot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Argo-CD Autopilot&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/argoproj-labs/argocd-autopilot/main/docs/assets/argo_autopilot.png&#34; alt=&#34;Argo Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://g.codefresh.io/public/accounts/codefresh-inc/pipelines/new/60881f8199c9564ef31aac61&#34;&gt;&lt;img src=&#34;https://g.codefresh.io/api/badges/pipeline/codefresh-inc/argocd-autopilot%2Frelease?type=cf-1&#34; alt=&#34;Codefresh build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/argoproj-labs/argocd-autopilot&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/argoproj-labs/argocd-autopilot/branch/main/graph/badge.svg?token=IDyZNfRUfY&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://argocd-autopilot.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/argocd-autopilot/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://argoproj.github.io/community/join-slack/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-argoproj-brightgreen.svg?logo=slack&#34; alt=&#34;slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;New users to GitOps and Argo CD are not often sure how they should structure their repos, add applications, promote apps across environments, and manage the Argo CD installation itself using GitOps.&lt;/p&gt; &#xA;&lt;p&gt;Argo CD Autopilot saves operators time by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installing and managing the Argo CD application using GitOps.&lt;/li&gt; &#xA; &lt;li&gt;Providing a clear structure for how applications are to be added and updated, all from git.&lt;/li&gt; &#xA; &lt;li&gt;Creating a simple pattern for making updates to applications and promoting those changes across environments.&lt;/li&gt; &#xA; &lt;li&gt;Enabling better disaster recovery by being able to bootstrap new clusters with all the applications previously installed.&lt;/li&gt; &#xA; &lt;li&gt;Handling secrets for Argo CD to prevent them from spilling into plaintext git. (Soon to come)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Argo-CD Autopilot is a tool which offers an opinionated way of installing Argo-CD and managing GitOps repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using brew:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install&#xA;brew install argocd-autopilot&#xA;&#xA;# check the installation&#xA;argocd-autopilot version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using scoop:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# update&#xA;scoop update&#xA;&#xA;# install&#xA;scoop install argocd-autopilot&#xA;&#xA;# check the installation&#xA;argocd-autopilot version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using chocolatey:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install&#xA;choco install argocd-autopilot&#xA;&#xA;# check the installation&#xA;argocd-autopilot version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux AUR:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install&#xA;yay -S argocd-autopilot-bin&#xA;# or&#xA;sudo pacman -S argocd-autopilot-bin&#xA;&#xA;# check the installation&#xA;argocd-autopilot version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux and WSL (using curl):&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# get the latest version or change to a specific version&#xA;VERSION=$(curl --silent &#34;https://api.github.com/repos/argoproj-labs/argocd-autopilot/releases/latest&#34; | grep &#39;&#34;tag_name&#34;&#39; | sed -E &#39;s/.*&#34;([^&#34;]+)&#34;.*/\1/&#39;)&#xA;&#xA;# download and extract the binary&#xA;curl -L --output - https://github.com/argoproj-labs/argocd-autopilot/releases/download/$VERSION/argocd-autopilot-linux-amd64.tar.gz | tar zx&#xA;&#xA;# move the binary to your $PATH&#xA;mv ./argocd-autopilot-* /usr/local/bin/argocd-autopilot&#xA;&#xA;# check the installation&#xA;argocd-autopilot version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mac (using curl):&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# get the latest version or change to a specific version&#xA;VERSION=$(curl --silent &#34;https://api.github.com/repos/argoproj-labs/argocd-autopilot/releases/latest&#34; | grep &#39;&#34;tag_name&#34;&#39; | sed -E &#39;s/.*&#34;([^&#34;]+)&#34;.*/\1/&#39;)&#xA;&#xA;# download and extract the binary&#xA;curl -L --output - https://github.com/argoproj-labs/argocd-autopilot/releases/download/$VERSION/argocd-autopilot-darwin-amd64.tar.gz | tar zx&#xA;&#xA;# move the binary to your $PATH&#xA;mv ./argocd-autopilot-* /usr/local/bin/argocd-autopilot&#xA;&#xA;# check the installation&#xA;argocd-autopilot version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;When using the Docker image, you have to provide the &lt;code&gt;.kube&lt;/code&gt; and &lt;code&gt;.gitconfig&lt;/code&gt; directories as mounts to the running container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run \&#xA;  -v ~/.kube:/home/autopilot/.kube \&#xA;  -v ~/.gitconfig:/home/autopilot/.gitconfig \&#xA;  -it quay.io/argoprojlabs/argocd-autopilot &amp;lt;cmd&amp;gt; &amp;lt;flags&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# All of the commands need your git token with the --git-token flag,&#xA;# or the GIT_TOKEN env variable:&#xA;&#xA;    export GIT_TOKEN=&amp;lt;YOUR_TOKEN&amp;gt;&#xA;&#xA;# The commands will also need your repo clone URL with the --repo flag,&#xA;# or the GIT_REPO env variable:&#xA;&#xA;    export GIT_REPO=&amp;lt;REPO_URL&amp;gt;&#xA;&#xA;# 1. Run the bootstrap installation on your current kubernetes context.&#xA;# This will install argo-cd as well as the application-set controller.&#xA;&#xA;    argocd-autopilot repo bootstrap&#xA;&#xA;# Please note that this will automatically attempt to create a private repository,&#xA;# if the clone URL references a non-existing one. If the repository already exists,&#xA;# the command will just clone it.&#xA;&#xA;# 2. Create your first project&#xA;&#xA;    argocd-autopilot project create my-project&#xA;&#xA;# 3. Install your first application on your project&#xA;&#xA;    argocd-autopilot app create demoapp --app github.com/argoproj-labs/argocd-autopilot/examples/demo-app/ -p my-project&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, if you go to your Argo-CD UI, you should see something similar to this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/argoproj-labs/argocd-autopilot/main/docs/assets/getting_started_apps_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Head over to our &lt;a href=&#34;https://raw.githubusercontent.com/argoproj-labs/argocd-autopilot/main/docs/Getting-Started.md&#34;&gt;Getting Started&lt;/a&gt; guide for further details.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The autopilot bootstrap command will deploy an Argo-CD manifest to a target k8s cluster, and will commit an Argo-CD Application manifest under a specific directory in your GitOps repository. This Application will manage the Argo-CD installation itself - so after running this command, you will have an Argo-CD deployment that manages itself through GitOps.&lt;/p&gt; &#xA;&lt;p&gt;From that point on, the user can create Projects and Applications that belong to them. Autopilot will commit the required manifests to the repository. Once committed, Argo-CD will do its magic and apply the Applications to the cluster.&lt;/p&gt; &#xA;&lt;p&gt;An application can be added to a project from a public git repo + path, or from a directory in the local filesystem.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/argoproj-labs/argocd-autopilot/main/docs/assets/architecture.png&#34; alt=&#34;Argo-CD Autopilot Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Autopilot communicates with the cluster directly &lt;strong&gt;only&lt;/strong&gt; during the bootstrap phase, when it deploys Argo-CD. After that, most commands will only require access to the GitOps repository. When adding a Project or Application to a remote k8s cluster, autopilot will require access to the Argo-CD server.&lt;/p&gt; &#xA;&lt;p&gt;You can read more about it in the &lt;a href=&#34;https://docs.google.com/document/d/1gxKxaMQzH9nNDWW9mZV5_cS7EO4S-pm1s_u5aMK-PZQ/edit?usp=sharing&#34;&gt;official proposal doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Opinionated way to build a multi-project multi-application system, using GitOps principles.&lt;/li&gt; &#xA; &lt;li&gt;Create a new GitOps repository, or use an existing one.&lt;/li&gt; &#xA; &lt;li&gt;Supports creating the entire directory structure under any path the user requires.&lt;/li&gt; &#xA; &lt;li&gt;When adding applications from a public repo, allow committing as either a kustomization that references the public repo, or as a &#34;flat&#34; manifest file containing all the required resources.&lt;/li&gt; &#xA; &lt;li&gt;Use a different cluster from the one Argo-CD is running on, as a default cluster for a Project, or a target cluster for a specific Application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Slack Channel&lt;/h2&gt; &#xA;&lt;p&gt;Join us in channel #argo-autopilot in CNCF slack workspace.&lt;/p&gt; &#xA;&lt;p&gt;Click here to join: &lt;a href=&#34;https://slack.cncf.io/&#34;&gt;https://slack.cncf.io/&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>