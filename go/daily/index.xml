<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-07T01:19:34Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>trap-bytes/403jump</title>
    <updated>2024-03-07T01:19:34Z</updated>
    <id>tag:github.com,2024-03-07:/trap-bytes/403jump</id>
    <link href="https://github.com/trap-bytes/403jump" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP 403 bypass tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;403JUMP&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/trap-bytes/403jump&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/trap-bytes/403jump&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;403JUMP is a tool designed for penetration testers and bug bounty hunters to audit the security of web applications. It aims to bypass HTTP 403 (Forbidden) pages using various techniques.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trap-bytes/403jump/bd50f22b15d13670947ea732e1a14f7a33253106/static/tool.png&#34; alt=&#34;403JUMP Image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple Bypass Techniques Including:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Different HTTP Verbs&lt;/li&gt; &#xA;   &lt;li&gt;Different Headers&lt;/li&gt; &#xA;   &lt;li&gt;Path Fuzzing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customization:&lt;/strong&gt; Allows customization of headers and cookies for more targeted testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concurrency:&lt;/strong&gt; Performs actions concurrently using goroutines for efficient and fast scanning.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/trap-bytes/403jump@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;403jump -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will display help for the tool. Here are all the arguments it supports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;  403jump [arguments]&#xA;&#xA;The arguments are:&#xA;  -t string    Specify the target URL (e.g., domain.com or https://domain.com)&#xA;  -f string    Specify the file (e.g., domain.txt)&#xA;  -p string    Specify the proxy URL (e.g., 127.0.0.1:8080)&#xA;  -c string    Specify cookies (e.g., user_token=g3p21ip21h; &#xA;  -r string    Specify headers (e.g., Myheader: test&#xA;  -timeout     Specify connection timeout in seconds&#xA;  -h           Display help&#xA;&#xA;Examples:&#xA;  403jump -t domain.com&#xA;  403jump -t https://domain.com -p 127.0.0.1:8080&#xA;  403jump -f domains.txt&#xA;  403jump -c &#34;user_token=hjljkklpo&#34;&#xA;  403jump -r &#34;Myheader: test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>AndreyMashukov/go-crypto-bot</title>
    <updated>2024-03-07T01:19:34Z</updated>
    <id>tag:github.com,2024-03-07:/AndreyMashukov/go-crypto-bot</id>
    <link href="https://github.com/AndreyMashukov/go-crypto-bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multithread crypto bot implemented on Golang&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/AndreyMashukov/go-crypto-bot/actions/workflows/docker-image.yml&#34;&gt;&lt;img src=&#34;https://github.com/AndreyMashukov/go-crypto-bot/actions/workflows/docker-image.yml/badge.svg?sanitize=true&#34; alt=&#34;Docker Image CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Go Multithreading Crypto Trading Bot&lt;/h3&gt; &#xA;&lt;p&gt;This is production ready crypto trading bot, supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Classic trading (no margin, long only)&lt;/li&gt; &#xA; &lt;li&gt;Triangular arbitrage&lt;/li&gt; &#xA; &lt;li&gt;ML (Linear regression on history data) integration&lt;/li&gt; &#xA; &lt;li&gt;API access for management system&lt;/li&gt; &#xA; &lt;li&gt;Docker support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported crypto exchange:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binance (ready, well tested)&lt;/li&gt; &#xA; &lt;li&gt;ByBit (under development) branch &lt;a href=&#34;https://github.com/AndreyMashukov/go-crypto-bot/tree/bybit-api&#34;&gt;bybit-api&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BOT_UUID&lt;/td&gt; &#xA;   &lt;td&gt;Uniq bot UUID (from database table &lt;code&gt;bot&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;6c26e421-06fd-4c61-84d9-caf36b8966af&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DATABASE_DSN&lt;/td&gt; &#xA;   &lt;td&gt;MySQL connection string&lt;/td&gt; &#xA;   &lt;td&gt;root:go_crypto_bot@tcp(mysql:3306)/go_crypto_bot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_DSN&lt;/td&gt; &#xA;   &lt;td&gt;Redis connection string&lt;/td&gt; &#xA;   &lt;td&gt;redis:6379&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REDIS_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;Redis password (can be empty, depends on your infrastructure)&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BINANCE_API_KEY&lt;/td&gt; &#xA;   &lt;td&gt;Personal binance API Key&lt;/td&gt; &#xA;   &lt;td&gt;See binance doc: &lt;a href=&#34;https://testnet.binance.vision/&#34;&gt;testnet&lt;/a&gt;, &lt;a href=&#34;https://www.binance.com/en/support/faq/how-to-create-api-keys-on-binance-360002502072&#34;&gt;prod&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BINANCE_API_SECRET&lt;/td&gt; &#xA;   &lt;td&gt;Personal binance API Secret&lt;/td&gt; &#xA;   &lt;td&gt;See binance doc: &lt;a href=&#34;https://testnet.binance.vision/&#34;&gt;testnet&lt;/a&gt;, &lt;a href=&#34;https://www.binance.com/en/support/faq/how-to-create-api-keys-on-binance-360002502072&#34;&gt;prod&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BINANCE_WS_DSN&lt;/td&gt; &#xA;   &lt;td&gt;Websocket API Destination URL&lt;/td&gt; &#xA;   &lt;td&gt;testnet &lt;code&gt;wss://testnet.binance.vision/ws-api/v3&lt;/code&gt; prod &lt;code&gt;wss://ws-api.binance.com:443/ws-api/v3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BINANCE_STREAM_DSN&lt;/td&gt; &#xA;   &lt;td&gt;Websocket Stream (price updates) Destination URL&lt;/td&gt; &#xA;   &lt;td&gt;testnet &lt;code&gt;wss://stream.binance.com&lt;/code&gt; prod &lt;code&gt;wss://stream.binance.com&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;For development or testing mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp docker-compose.yaml.dist docker-compose.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SETUP your ENV variables in docker-compose.yaml&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose build --no-cache&#xA;docker-compose up mysql&#xA;make init-db-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect to database and verify all migrations is executed, you will see one row in database table &lt;code&gt;bot&lt;/code&gt; with UUID = &lt;code&gt;6c26e421-06fd-4c61-84d9-caf36b8966af&lt;/code&gt; (you can change it)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Setup &lt;code&gt;BOT_UUID&lt;/code&gt; variable in &lt;code&gt;docker-compose.yaml&lt;/code&gt; and start the Bot&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d &#xA;docker ps # find your container ID&#xA;docker logs -f {container_id} # see logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Bot API for setting up trading symbols (trade limits)&lt;/h4&gt; &#xA;&lt;p&gt;UPDATE BOT CONFIG&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request PUT &#39;http://localhost:8090/bot/update?botUuid={BOT_UUID}&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;    &#34;isMasterBot&#34;: true,&#xA;    &#34;isSwapEnabled&#34;: true,&#xA;    &#34;swapConfig&#34;: {&#xA;      &#34;swapMinPercent&#34;: 2.00, &#xA;      &#34;swapOrderProfitTrigger&#34;: -5.00, &#xA;      &#34;orderTimeTrigger&#34;: 36000, &#xA;      &#34;useSwapCapital&#34;: true, &#xA;      &#34;historyInterval&#34;: &#34;1d&#34;, &#xA;      &#34;historyPeriod&#34;: 14&#xA;    }&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;What is Master bot?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you use multiple bots on one machine, you can set one of them as &lt;code&gt;master bot&lt;/code&gt; - master bot is able to update some extra data which is static and can be used by others bots&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;What is swap?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;We call &lt;code&gt;SWAP&lt;/code&gt; is triangular arbitrage, if &lt;code&gt;SWAP&lt;/code&gt; is enabled, bot will try to do triangular arbitrage with negative profit positions (to gain coin amount). SwapConfig:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;swapMinPercent&lt;/code&gt; - Minimum profit percent for swap&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;swapOrderProfitTrigger&lt;/code&gt; - Swap will be activated on orders with negative profit from this value&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;orderTimeTrigger&lt;/code&gt; - Swap will be only activated from this position time&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;useSwapCapital&lt;/code&gt; - Use swap capital for position profit calculation&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;historyInterval&lt;/code&gt; - Swap history check interval&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;historyPeriod&lt;/code&gt; - Swap history check period&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;CREATE YOUR FIRST TRADE LIMIT (Symbol) &lt;code&gt;PERPUSDT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request POST &#39;http://localhost:8090/trade/limit/create?botUuid={BOT_UUID}&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;        &#34;symbol&#34;: &#34;PERPUSDT&#34;,&#xA;        &#34;USDTLimit&#34;: 100,&#xA;        &#34;minPrice&#34;: 0.00001,&#xA;        &#34;minQuantity&#34;: 0.01,&#xA;        &#34;minNotional&#34;: 5,&#xA;        &#34;isEnabled&#34;: true,&#xA;        &#34;USDTExtraBudget&#34;: 80,&#xA;        &#34;buyOnFallPercent&#34;: -3.5,&#xA;        &#34;minPriceMinutesPeriod&#34;: 200,&#xA;        &#34;frameInterval&#34;: &#34;2h&#34;,&#xA;        &#34;framePeriod&#34;: 20,&#xA;        &#34;buyPriceHistoryCheckInterval&#34;: &#34;1d&#34;,&#xA;        &#34;buyPriceHistoryCheckPeriod&#34;: 14,&#xA;        &#34;profitOptions&#34;: [&#xA;            {&#xA;                &#34;index&#34;: 0,&#xA;                &#34;optionValue&#34;: 1,&#xA;                &#34;optionUnit&#34;: &#34;h&#34;,&#xA;                &#34;optionPercent&#34;: 2.40,&#xA;                &#34;isTriggerOption&#34;: true&#xA;            }&#xA;        ],&#xA;        &#34;extraChargeOptions&#34;: [&#xA;            {&#xA;                &#34;index&#34;: 0,&#xA;                &#34;percent&#34;: -4.50,&#xA;                &#34;amountUsdt&#34;: 20.00&#xA;            }&#xA;        ]&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;UPDATING TRADE LIMIT FOR &lt;code&gt;PERPUSDT&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request PUT &#39;http://localhost:8090/trade/limit/update?botUuid={BOT_UUID}&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;        &#34;symbol&#34;: &#34;PERPUSDT&#34;,&#xA;        &#34;USDTLimit&#34;: 100,&#xA;        &#34;minPrice&#34;: 0.00001,&#xA;        &#34;minQuantity&#34;: 0.01,&#xA;        &#34;minNotional&#34;: 5,&#xA;        &#34;isEnabled&#34;: true,&#xA;        &#34;USDTExtraBudget&#34;: 80,&#xA;        &#34;buyOnFallPercent&#34;: -3.5,&#xA;        &#34;minPriceMinutesPeriod&#34;: 200,&#xA;        &#34;frameInterval&#34;: &#34;2h&#34;,&#xA;        &#34;framePeriod&#34;: 20,&#xA;        &#34;buyPriceHistoryCheckInterval&#34;: &#34;1d&#34;,&#xA;        &#34;buyPriceHistoryCheckPeriod&#34;: 14,&#xA;        &#34;profitOptions&#34;: [&#xA;            {&#xA;                &#34;index&#34;: 0,&#xA;                &#34;optionValue&#34;: 1,&#xA;                &#34;optionUnit&#34;: &#34;h&#34;,&#xA;                &#34;optionPercent&#34;: 2.40,&#xA;                &#34;isTriggerOption&#34;: true&#xA;            }&#xA;        ],&#xA;        &#34;extraChargeOptions&#34;: [&#xA;            {&#xA;                &#34;index&#34;: 0,&#xA;                &#34;percent&#34;: -4.50,&#xA;                &#34;amountUsdt&#34;: 20.00&#xA;            }&#xA;        ]&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GETTING TRADE LIMIT LIST &lt;code&gt;ALL&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request GET &#39;http://localhost:8090/trade/limit/list?botUuid={BOT_UUID}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GETTING TRADE STACK&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request GET &#39;http://localhost:8090/trade/stack?botUuid={BOT_UUID}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GETTING OPENED POSITION LIST&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request GET &#39;http://localhost:8090/order/position/list?botUuid={BOT_UUID}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GETTING PENDING POSITION LIST (Current limit orders for BUY)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request GET &#39;http://localhost:8090/order/pending/list?botUuid={BOT_UUID}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;UPDATING EXTRA CHARGE CONFIGURATION FOR OPENED POSITION (Order)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request PUT &#39;http://localhost:8090/order/extra/charge/update?botUuid={BOT_UUID}&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;    &#34;orderId&#34;: 92,&#xA;    &#34;extraChargeOptions&#34;: [&#xA;        {&#xA;            &#34;index&#34;: 3,&#xA;            &#34;percent&#34;: -14.50,&#xA;            &#34;amountUsdt&#34;: 120.00&#xA;        },&#xA;        {&#xA;            &#34;index&#34;: 2,&#xA;            &#34;percent&#34;: -4.00,&#xA;            &#34;amountUsdt&#34;: 10.00&#xA;        },&#xA;        {&#xA;            &#34;index&#34;: 1,&#xA;            &#34;percent&#34;: -2.00,&#xA;            &#34;amountUsdt&#34;: 30.00&#xA;        },&#xA;        {&#xA;            &#34;index&#34;: 0,&#xA;            &#34;percent&#34;: -1.0,&#xA;            &#34;amountUsdt&#34;: 30.00&#xA;        }&#xA;    ]&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GETTING CHART FOR TRADE LIMITS (Symbols)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request GET &#39;http://localhost:8090/chart/list?botUuid={BOT_UUID}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GETTING HEALTH CHECK&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request GET &#39;http://localhost:8090/health/check?botUuid={BOT_UUID}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;Docker image&lt;/h3&gt; &#xA;&lt;p&gt;For production you can use docker image &lt;a href=&#34;https://hub.docker.com/r/amashukov/go-crypto-bot/tags&#34;&gt;amashukov/go-crypto-bot:latest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull amashukov/go-crypto-bot:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Do not forget to set &lt;a href=&#34;https://github.com/AndreyMashukov/go-crypto-bot?tab=readme-ov-file#setup&#34;&gt;env variables&lt;/a&gt; for started container&lt;/p&gt; &#xA;&lt;h3&gt;Donation:&lt;/h3&gt; &#xA;&lt;p&gt;USDT (TRC-20) address &lt;code&gt;TTdHsHxfPUxdcn3wJ3o9hGAKF2Te7epM46&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>