<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-26T01:32:32Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-jet/jet</title>
    <updated>2024-02-26T01:32:32Z</updated>
    <id>tag:github.com,2024-02-26:/go-jet/jet</id>
    <link href="https://github.com/go-jet/jet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Type safe SQL builder with code generation and automatic query result data mapping&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.circleci.com/pipelines/github/go-jet/jet?branch=master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/go-jet/jet.svg?style=svg&#34; alt=&#34;go-jet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/go-jet/jet&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/go-jet/jet/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/go-jet/jet/v2&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/go-jet/jet&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/go-jet/jet/v2&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-jet/jet?status.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-jet/jet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/go-jet/jet.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Jet is a complete solution for efficient and high performance database access, consisting of type-safe SQL builder with code generation and automatic query result data mapping.&lt;br&gt; Jet currently supports &lt;code&gt;PostgreSQL&lt;/code&gt;, &lt;code&gt;MySQL&lt;/code&gt;, &lt;code&gt;CockroachDB&lt;/code&gt;, &lt;code&gt;MariaDB&lt;/code&gt; and &lt;code&gt;SQLite&lt;/code&gt;. Future releases will add support for additional databases.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/go-jet/jet/wiki/image/jet.png&#34; alt=&#34;jet&#34;&gt;&lt;br&gt; Jet is the easiest, and the fastest way to write complex type-safe SQL queries as a Go code and map database query result into complex object composition. &lt;strong&gt;It is not an ORM.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@go.jet/jet-5f3667efa0cc&#34;&gt;https://medium.com/@go.jet/jet-5f3667efa0cc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#generate-sql-builder-and-model-types&#34;&gt;Generate sql builder and model types&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#lets-write-some-sql-queries-in-go&#34;&gt;Lets write some SQL queries in Go&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#execute-query-and-store-result&#34;&gt;Execute query and store result&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#benefits&#34;&gt;Benefits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Auto-generated type-safe SQL Builder. Statements supported:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/go-jet/jet/wiki/SELECT&#34;&gt;SELECT&lt;/a&gt; &lt;code&gt;(DISTINCT, FROM, WHERE, GROUP BY, HAVING, ORDER BY, LIMIT, OFFSET, FOR, LOCK_IN_SHARE_MODE, UNION, INTERSECT, EXCEPT, WINDOW, sub-queries)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/go-jet/jet/wiki/INSERT&#34;&gt;INSERT&lt;/a&gt; &lt;code&gt;(VALUES, MODEL, MODELS, QUERY, ON_CONFLICT/ON_DUPLICATE_KEY_UPDATE, RETURNING)&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/go-jet/jet/wiki/UPDATE&#34;&gt;UPDATE&lt;/a&gt; &lt;code&gt;(SET, MODEL, WHERE, RETURNING)&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/go-jet/jet/wiki/DELETE&#34;&gt;DELETE&lt;/a&gt; &lt;code&gt;(WHERE, ORDER_BY, LIMIT, RETURNING)&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/go-jet/jet/wiki/LOCK&#34;&gt;LOCK&lt;/a&gt; &lt;code&gt;(IN, NOWAIT)&lt;/code&gt;, &lt;code&gt;(READ, WRITE)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/go-jet/jet/wiki/WITH&#34;&gt;WITH&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Auto-generated Data Model types - Go types mapped to database type (table, view or enum), used to store result of database queries. Can be combined to create complex query result destination.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Query execution with result mapping to arbitrary destination.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;To install Jet package, you need to install Go and set your Go workspace first.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; &lt;strong&gt;version 1.9+ is required&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Use the command bellow to add jet as a dependency into &lt;code&gt;go.mod&lt;/code&gt; project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ go get -u github.com/go-jet/jet/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Jet generator can be installed in one of the following ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Go1.16+) Install jet generator using go install:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/go-jet/jet/v2/cmd/jet@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Jet generator is installed to the directory named by the GOBIN environment variable, which defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH environment variable is not set.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install jet generator to specific folder:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/go-jet/jet.git&#xA;cd jet &amp;amp;&amp;amp; go build -o dir_path ./cmd/jet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Make sure &lt;code&gt;dir_path&lt;/code&gt; folder is added to the PATH environment variable.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick Start&lt;/h3&gt; &#xA;&lt;p&gt;For this quick start example we will use PostgreSQL sample &lt;em&gt;&#39;dvd rental&#39;&lt;/em&gt; database. Full database dump can be found in &lt;a href=&#34;https://github.com/go-jet/jet-test-data/raw/master/init/postgres/dvds.sql&#34;&gt;./tests/testdata/init/postgres/dvds.sql&lt;/a&gt;. Schema diagram of interest can be found &lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/examples/quick-start/diagram.png&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Generate SQL Builder and Model types&lt;/h4&gt; &#xA;&lt;p&gt;To generate jet SQL Builder and Data Model types from running postgres database, we need to call &lt;code&gt;jet&lt;/code&gt; generator with postgres connection parameters and destination folder path. Assuming we are running local postgres database, with user &lt;code&gt;user&lt;/code&gt;, user password &lt;code&gt;pass&lt;/code&gt;, database &lt;code&gt;jetdb&lt;/code&gt; and schema &lt;code&gt;dvds&lt;/code&gt; we will use this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jet -dsn=postgresql://user:pass@localhost:5432/jetdb?sslmode=disable -schema=dvds -path=./.gen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Connecting to postgres database: postgresql://user:pass@localhost:5432/jetdb?sslmode=disable &#xA;Retrieving schema information...&#xA;&#x9;FOUND 15 table(s), 7 view(s), 1 enum(s)&#xA;Cleaning up destination directory...&#xA;Generating table sql builder files...&#xA;Generating view sql builder files...&#xA;Generating enum sql builder files...&#xA;Generating table model files...&#xA;Generating view model files...&#xA;Generating enum model files...&#xA;Done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Procedure is similar for MySQL, CockroachDB, MariaDB and SQLite. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;jet -source=mysql -dsn=&#34;user:pass@tcp(localhost:3306)/dbname&#34; -path=./.gen&#xA;jet -dsn=postgres://user:pass@localhost:26257/jetdb?sslmode=disable -schema=dvds -path=./.gen  #cockroachdb&#xA;jet -dsn=&#34;mariadb://user:pass@tcp(localhost:3306)/dvds&#34; -path=./.gen              # source flag can be omitted if data source appears in dsn&#xA;jet -source=sqlite -dsn=&#34;/path/to/sqlite/database/file&#34; -schema=dvds -path=./.gen&#xA;jet -dsn=&#34;file:///path/to/sqlite/database/file&#34; -schema=dvds -path=./.gen         # sqlite database assumed for &#39;file&#39; data sources&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;*User has to have a permission to read information schema tables.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;As command output suggest, Jet will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;connect to postgres database and retrieve information about the &lt;em&gt;tables&lt;/em&gt;, &lt;em&gt;views&lt;/em&gt; and &lt;em&gt;enums&lt;/em&gt; of &lt;code&gt;dvds&lt;/code&gt; schema&lt;/li&gt; &#xA; &lt;li&gt;delete everything in schema destination folder - &lt;code&gt;./.gen/jetdb/dvds&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;and finally generate SQL Builder and Model types for each schema table, view and enum.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Generated files folder structure will look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;|-- .gen                              # path&#xA;|   -- jetdb                          # database name&#xA;|       -- dvds                       # schema name&#xA;|           |-- enum                  # sql builder package for enums&#xA;|           |   |-- mpaa_rating.go&#xA;|           |-- table                 # sql builder package for tables&#xA;|               |-- actor.go&#xA;|               |-- address.go&#xA;|               |-- category.go&#xA;|               ...&#xA;|           |-- view                  # sql builder package for views&#xA;|               |-- actor_info.go&#xA;|               |-- film_list.go&#xA;|               ...&#xA;|           |-- model                 # data model types for each table, view and enum&#xA;|           |   |-- actor.go&#xA;|           |   |-- address.go&#xA;|           |   |-- mpaa_rating.go&#xA;|           |   ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Types from &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt; are used to write type safe SQL in Go, and &lt;code&gt;model&lt;/code&gt; types are combined to store results of the SQL queries.&lt;/p&gt; &#xA;&lt;h4&gt;Let&#39;s write some SQL queries in Go&lt;/h4&gt; &#xA;&lt;p&gt;First we need to import postgres SQLBuilder and generated packages from the previous step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;// dot import so go code would resemble as much as native SQL&#xA;&#x9;// dot import is not mandatory&#xA;&#x9;. &#34;github.com/go-jet/jet/v2/examples/quick-start/.gen/jetdb/dvds/table&#34;&#xA;&#x9;. &#34;github.com/go-jet/jet/v2/postgres&#34;&#xA;&#xA;&#x9;&#34;github.com/go-jet/jet/v2/examples/quick-start/.gen/jetdb/dvds/model&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s say we want to retrieve the list of all &lt;em&gt;actors&lt;/em&gt; that acted in &lt;em&gt;films&lt;/em&gt; longer than 180 minutes, &lt;em&gt;film language&lt;/em&gt; is &#39;English&#39; and &lt;em&gt;film category&lt;/em&gt; is not &#39;Action&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;stmt := SELECT(&#xA;    Actor.ActorID, Actor.FirstName, Actor.LastName, Actor.LastUpdate,  // or just Actor.AllColumns&#xA;    Film.AllColumns,                                                  &#xA;    Language.AllColumns.Except(Language.LastUpdate),  // all language columns except last_update &#xA;    Category.AllColumns,&#xA;).FROM(&#xA;    Actor.&#xA;        INNER_JOIN(FilmActor, Actor.ActorID.EQ(FilmActor.ActorID)).  &#xA;        INNER_JOIN(Film, Film.FilmID.EQ(FilmActor.FilmID)).          &#xA;        INNER_JOIN(Language, Language.LanguageID.EQ(Film.LanguageID)).&#xA;        INNER_JOIN(FilmCategory, FilmCategory.FilmID.EQ(Film.FilmID)).&#xA;        INNER_JOIN(Category, Category.CategoryID.EQ(FilmCategory.CategoryID)),&#xA;).WHERE(&#xA;    Language.Name.EQ(String(&#34;English&#34;)).             &#xA;        AND(Category.Name.NOT_EQ(String(&#34;Action&#34;))).  &#xA;        AND(Film.Length.GT(Int(180))),               &#xA;).ORDER_BY(&#xA;    Actor.ActorID.ASC(),&#xA;    Film.FilmID.ASC(),&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Package(dot) import is used, so the statements look as close as possible to the native SQL.&lt;/em&gt;&lt;br&gt; Note that every column has a type. String column &lt;code&gt;Language.Name&lt;/code&gt; and &lt;code&gt;Category.Name&lt;/code&gt; can be compared only with string columns and expressions. &lt;code&gt;Actor.ActorID&lt;/code&gt;, &lt;code&gt;FilmActor.ActorID&lt;/code&gt;, &lt;code&gt;Film.Length&lt;/code&gt; are integer columns and can be compared only with integer columns and expressions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to get a parametrized SQL query from the statement?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;query, args := stmt.Sql()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;query - parametrized query&lt;br&gt; args - query parameters&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see `query` and `args`&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT actor.actor_id AS &#34;actor.actor_id&#34;,&#xA;     actor.first_name AS &#34;actor.first_name&#34;,&#xA;     actor.last_name AS &#34;actor.last_name&#34;,&#xA;     actor.last_update AS &#34;actor.last_update&#34;,&#xA;     film.film_id AS &#34;film.film_id&#34;,&#xA;     film.title AS &#34;film.title&#34;,&#xA;     film.description AS &#34;film.description&#34;,&#xA;     film.release_year AS &#34;film.release_year&#34;,&#xA;     film.language_id AS &#34;film.language_id&#34;,&#xA;     film.rental_duration AS &#34;film.rental_duration&#34;,&#xA;     film.rental_rate AS &#34;film.rental_rate&#34;,&#xA;     film.length AS &#34;film.length&#34;,&#xA;     film.replacement_cost AS &#34;film.replacement_cost&#34;,&#xA;     film.rating AS &#34;film.rating&#34;,&#xA;     film.last_update AS &#34;film.last_update&#34;,&#xA;     film.special_features AS &#34;film.special_features&#34;,&#xA;     film.fulltext AS &#34;film.fulltext&#34;,&#xA;     language.language_id AS &#34;language.language_id&#34;,&#xA;     language.name AS &#34;language.name&#34;,&#xA;     language.last_update AS &#34;language.last_update&#34;,&#xA;     category.category_id AS &#34;category.category_id&#34;,&#xA;     category.name AS &#34;category.name&#34;,&#xA;     category.last_update AS &#34;category.last_update&#34;&#xA;FROM dvds.actor&#xA;     INNER JOIN dvds.film_actor ON (actor.actor_id = film_actor.actor_id)&#xA;     INNER JOIN dvds.film ON (film.film_id = film_actor.film_id)&#xA;     INNER JOIN dvds.language ON (language.language_id = film.language_id)&#xA;     INNER JOIN dvds.film_category ON (film_category.film_id = film.film_id)&#xA;     INNER JOIN dvds.category ON (category.category_id = film_category.category_id)&#xA;WHERE ((language.name = $1) AND (category.name != $2)) AND (film.length &amp;gt; $3)&#xA;ORDER BY actor.actor_id ASC, film.film_id ASC;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[English Action 180]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;How to get debug SQL from statement?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;debugSql := stmt.DebugSql()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;debugSql - this query string can be copy-pasted to sql editor and executed. &lt;strong&gt;It is not intended to be used in production. For debug purposes only!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see debug sql&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT actor.actor_id AS &#34;actor.actor_id&#34;,&#xA;     actor.first_name AS &#34;actor.first_name&#34;,&#xA;     actor.last_name AS &#34;actor.last_name&#34;,&#xA;     actor.last_update AS &#34;actor.last_update&#34;,&#xA;     film.film_id AS &#34;film.film_id&#34;,&#xA;     film.title AS &#34;film.title&#34;,&#xA;     film.description AS &#34;film.description&#34;,&#xA;     film.release_year AS &#34;film.release_year&#34;,&#xA;     film.language_id AS &#34;film.language_id&#34;,&#xA;     film.rental_duration AS &#34;film.rental_duration&#34;,&#xA;     film.rental_rate AS &#34;film.rental_rate&#34;,&#xA;     film.length AS &#34;film.length&#34;,&#xA;     film.replacement_cost AS &#34;film.replacement_cost&#34;,&#xA;     film.rating AS &#34;film.rating&#34;,&#xA;     film.last_update AS &#34;film.last_update&#34;,&#xA;     film.special_features AS &#34;film.special_features&#34;,&#xA;     film.fulltext AS &#34;film.fulltext&#34;,&#xA;     language.language_id AS &#34;language.language_id&#34;,&#xA;     language.name AS &#34;language.name&#34;,&#xA;     language.last_update AS &#34;language.last_update&#34;,&#xA;     category.category_id AS &#34;category.category_id&#34;,&#xA;     category.name AS &#34;category.name&#34;,&#xA;     category.last_update AS &#34;category.last_update&#34;&#xA;FROM dvds.actor&#xA;     INNER JOIN dvds.film_actor ON (actor.actor_id = film_actor.actor_id)&#xA;     INNER JOIN dvds.film ON (film.film_id = film_actor.film_id)&#xA;     INNER JOIN dvds.language ON (language.language_id = film.language_id)&#xA;     INNER JOIN dvds.film_category ON (film_category.film_id = film.film_id)&#xA;     INNER JOIN dvds.category ON (category.category_id = film_category.category_id)&#xA;WHERE ((language.name = &#39;English&#39;) AND (category.name != &#39;Action&#39;)) AND (film.length &amp;gt; 180)&#xA;ORDER BY actor.actor_id ASC, film.film_id ASC;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Execute query and store result&lt;/h4&gt; &#xA;&lt;p&gt;Well-formed SQL is just a first half of the job. Let&#39;s see how can we make some sense of result set returned executing above statement. Usually this is the most complex and tedious work, but with Jet it is the easiest.&lt;/p&gt; &#xA;&lt;p&gt;First we have to create desired structure to store query result. This is done be combining autogenerated model types, or it can be done by combining custom model types(see &lt;a href=&#34;https://github.com/go-jet/jet/wiki/Query-Result-Mapping-(QRM)#custom-model-types&#34;&gt;wiki&lt;/a&gt; for more information).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that it&#39;s possible to overwrite default jet generator behavior. All the aspects of generated model and SQLBuilder types can be tailor-made(&lt;a href=&#34;https://github.com/go-jet/jet/wiki/Generator#generator-customization&#34;&gt;wiki&lt;/a&gt;).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say this is our desired structure made of autogenerated types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var dest []struct {&#xA;    model.Actor&#xA;    &#xA;    Films []struct {&#xA;        model.Film&#xA;        &#xA;        Language    model.Language&#xA;        Categories  []model.Category&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;Films&lt;/code&gt; field is a slice because one actor can act in multiple films, and because each film belongs to one language &lt;code&gt;Langauge&lt;/code&gt; field is just a single model struct. &lt;code&gt;Film&lt;/code&gt; can belong to multiple categories.&lt;br&gt; &lt;em&gt;*There is no limitation of how big or nested destination can be.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now let&#39;s execute above statement on open database connection (or transaction) db and store result into &lt;code&gt;dest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := stmt.Query(db, &amp;amp;dest)&#xA;handleError(err)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;And that&#39;s it.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dest&lt;/code&gt; now contains the list of all actors(with list of films acted, where each film has information about language and list of belonging categories) that acted in films longer than 180 minutes, film language is &#39;English&#39; and film category is not &#39;Action&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Lets print &lt;code&gt;dest&lt;/code&gt; as a json to see:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;jsonText, _ := json.MarshalIndent(dest, &#34;&#34;, &#34;\t&#34;)&#xA;fmt.Println(string(jsonText))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[&#xA;&#x9;{&#xA;&#x9;&#x9;&#34;ActorID&#34;: 1,&#xA;&#x9;&#x9;&#34;FirstName&#34;: &#34;Penelope&#34;,&#xA;&#x9;&#x9;&#34;LastName&#34;: &#34;Guiness&#34;,&#xA;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;,&#xA;&#x9;&#x9;&#34;Films&#34;: [&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FilmID&#34;: 499,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Title&#34;: &#34;King Evolution&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Description&#34;: &#34;A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ReleaseYear&#34;: 2006,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LanguageID&#34;: 1,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;RentalDuration&#34;: 3,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;RentalRate&#34;: 4.99,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Length&#34;: 184,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ReplacementCost&#34;: 24.99,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Rating&#34;: &#34;NC-17&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:50:58.951Z&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;SpecialFeatures&#34;: &#34;{Trailers,\&#34;Deleted Scenes\&#34;,\&#34;Behind the Scenes\&#34;}&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Fulltext&#34;: &#34;&#39;action&#39;:5 &#39;action-pack&#39;:4 &#39;baloon&#39;:21 &#39;boy&#39;:10 &#39;chase&#39;:16 &#39;evolut&#39;:2 &#39;king&#39;:1 &#39;lumberjack&#39;:13 &#39;madman&#39;:18 &#39;must&#39;:15 &#39;pack&#39;:6 &#39;tale&#39;:7&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Language&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;LanguageID&#34;: 1,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;Name&#34;: &#34;English             &#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;0001-01-01T00:00:00Z&#34;&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Categories&#34;: [&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;CategoryID&#34;: 8,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;Name&#34;: &#34;Family&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2006-02-15T09:46:27Z&#34;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;]&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;]&#xA;&#x9;},&#xA;&#x9;{&#xA;&#x9;&#x9;&#34;ActorID&#34;: 3,&#xA;&#x9;&#x9;&#34;FirstName&#34;: &#34;Ed&#34;,&#xA;&#x9;&#x9;&#34;LastName&#34;: &#34;Chase&#34;,&#xA;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;,&#xA;&#x9;&#x9;&#34;Films&#34;: [&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FilmID&#34;: 996,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Title&#34;: &#34;Young Language&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Description&#34;: &#34;A Unbelieveable Yarn of a Boat And a Database Administrator who must Meet a Boy in The First Manned Space Station&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ReleaseYear&#34;: 2006,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LanguageID&#34;: 1,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;RentalDuration&#34;: 6,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;RentalRate&#34;: 0.99,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Length&#34;: 183,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ReplacementCost&#34;: 9.99,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Rating&#34;: &#34;G&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:50:58.951Z&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;SpecialFeatures&#34;: &#34;{Trailers,\&#34;Behind the Scenes\&#34;}&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Fulltext&#34;: &#34;&#39;administr&#39;:12 &#39;boat&#39;:8 &#39;boy&#39;:17 &#39;databas&#39;:11 &#39;first&#39;:20 &#39;languag&#39;:2 &#39;man&#39;:21 &#39;meet&#39;:15 &#39;must&#39;:14 &#39;space&#39;:22 &#39;station&#39;:23 &#39;unbeliev&#39;:4 &#39;yarn&#39;:5 &#39;young&#39;:1&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Language&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;LanguageID&#34;: 1,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;Name&#34;: &#34;English             &#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;0001-01-01T00:00:00Z&#34;&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Categories&#34;: [&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;CategoryID&#34;: 6,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;Name&#34;: &#34;Documentary&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2006-02-15T09:46:27Z&#34;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;]&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;]&#xA;&#x9;},&#xA;&#x9;//...(125 more items)&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What if, we also want to have list of films per category and actors per category, where films are longer than 180 minutes, film language is &#39;English&#39; and film category is not &#39;Action&#39;.&lt;br&gt; In that case we can reuse above statement &lt;code&gt;stmt&lt;/code&gt;, and just change our destination:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var dest2 []struct {&#xA;    model.Category&#xA;&#xA;    Films []model.Film&#xA;    Actors []model.Actor&#xA;}&#xA;&#xA;err = stmt.Query(db, &amp;amp;dest2)&#xA;handleError(err)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see `dest2` json&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[&#xA;&#x9;{&#xA;&#x9;&#x9;&#34;CategoryID&#34;: 8,&#xA;&#x9;&#x9;&#34;Name&#34;: &#34;Family&#34;,&#xA;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2006-02-15T09:46:27Z&#34;,&#xA;&#x9;&#x9;&#34;Films&#34;: [&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FilmID&#34;: 499,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Title&#34;: &#34;King Evolution&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Description&#34;: &#34;A Action-Packed Tale of a Boy And a Lumberjack who must Chase a Madman in A Baloon&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ReleaseYear&#34;: 2006,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LanguageID&#34;: 1,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;RentalDuration&#34;: 3,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;RentalRate&#34;: 4.99,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Length&#34;: 184,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ReplacementCost&#34;: 24.99,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Rating&#34;: &#34;NC-17&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:50:58.951Z&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;SpecialFeatures&#34;: &#34;{Trailers,\&#34;Deleted Scenes\&#34;,\&#34;Behind the Scenes\&#34;}&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Fulltext&#34;: &#34;&#39;action&#39;:5 &#39;action-pack&#39;:4 &#39;baloon&#39;:21 &#39;boy&#39;:10 &#39;chase&#39;:16 &#39;evolut&#39;:2 &#39;king&#39;:1 &#39;lumberjack&#39;:13 &#39;madman&#39;:18 &#39;must&#39;:15 &#39;pack&#39;:6 &#39;tale&#39;:7&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FilmID&#34;: 50,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Title&#34;: &#34;Baked Cleopatra&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Description&#34;: &#34;A Stunning Drama of a Forensic Psychologist And a Husband who must Overcome a Waitress in A Monastery&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ReleaseYear&#34;: 2006,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LanguageID&#34;: 1,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;RentalDuration&#34;: 3,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;RentalRate&#34;: 2.99,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Length&#34;: 182,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ReplacementCost&#34;: 20.99,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Rating&#34;: &#34;G&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:50:58.951Z&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;SpecialFeatures&#34;: &#34;{Commentaries,\&#34;Behind the Scenes\&#34;}&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;Fulltext&#34;: &#34;&#39;bake&#39;:1 &#39;cleopatra&#39;:2 &#39;drama&#39;:5 &#39;forens&#39;:8 &#39;husband&#39;:12 &#39;monasteri&#39;:20 &#39;must&#39;:14 &#39;overcom&#39;:15 &#39;psychologist&#39;:9 &#39;stun&#39;:4 &#39;waitress&#39;:17&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;],&#xA;&#x9;&#x9;&#34;Actors&#34;: [&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ActorID&#34;: 1,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FirstName&#34;: &#34;Penelope&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastName&#34;: &#34;Guiness&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ActorID&#34;: 20,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FirstName&#34;: &#34;Lucille&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastName&#34;: &#34;Tracy&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ActorID&#34;: 36,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FirstName&#34;: &#34;Burt&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastName&#34;: &#34;Dukakis&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ActorID&#34;: 70,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FirstName&#34;: &#34;Michelle&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastName&#34;: &#34;Mcconaughey&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ActorID&#34;: 118,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FirstName&#34;: &#34;Cuba&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastName&#34;: &#34;Allen&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ActorID&#34;: 187,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FirstName&#34;: &#34;Renee&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastName&#34;: &#34;Ball&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;ActorID&#34;: 198,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;FirstName&#34;: &#34;Mary&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastName&#34;: &#34;Keitel&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;LastUpdate&#34;: &#34;2013-05-26T14:47:57.62Z&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;]&#xA;&#x9;},&#xA;    //...&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Complete code example can be found at &lt;a href=&#34;https://raw.githubusercontent.com/go-jet/jet/master/examples/quick-start/quick-start.go&#34;&gt;./examples/quick-start/quick-start.go&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This example represent probably the most common use case. Detail info about additional statements, features and use cases can be found at project &lt;a href=&#34;https://github.com/go-jet/jet/wiki&#34;&gt;Wiki&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Benefits&lt;/h2&gt; &#xA;&lt;p&gt;What are the benefits of writing SQL in Go using Jet?&lt;br&gt; The biggest benefit is speed. Speed is being improved in 3 major areas:&lt;/p&gt; &#xA;&lt;h5&gt;Speed of development&lt;/h5&gt; &#xA;&lt;p&gt;Writing SQL queries is faster and easier, as developers will have help of SQL code completion and SQL type safety directly from Go code. Automatic scan to arbitrary structure removes a lot of headache and boilerplate code needed to structure database query result.&lt;/p&gt; &#xA;&lt;h5&gt;Speed of execution&lt;/h5&gt; &#xA;&lt;p&gt;While ORM libraries can introduce significant performance penalties due to number of round-trips to the database(N+1 query problem), &lt;code&gt;jet&lt;/code&gt; will always perform better as developers can write complex query and retrieve result with a single database call. Thus handler time lost on latency between server and database can be constant. Handler execution will be proportional only to the query complexity and the number of rows returned from database.&lt;/p&gt; &#xA;&lt;p&gt;With Jet, it is even possible to join the whole database and store the whole structured result in one database call. This is exactly what is being done in one of the tests: &lt;a href=&#34;https://github.com/go-jet/jet/raw/6706f4b228f51cf810129f57ba90bbdb60b85fe7/tests/postgres/chinook_db_test.go#L187&#34;&gt;TestJoinEverything&lt;/a&gt;. The whole test database is joined and query result(~10,000 rows) is stored in a structured variable in less than 0.5s.&lt;/p&gt; &#xA;&lt;h5&gt;How quickly bugs are found&lt;/h5&gt; &#xA;&lt;p&gt;The most expensive bugs are the one discovered on the production, and the least expensive are those found during development. With automatically generated type safe SQL, not only queries are written faster but bugs are found sooner.&lt;br&gt; Let&#39;s return to quick start example, and take closer look at a line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;AND(Film.Length.GT(Int(180))),&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s say someone changes column &lt;code&gt;length&lt;/code&gt; to &lt;code&gt;duration&lt;/code&gt; from &lt;code&gt;film&lt;/code&gt; table. The next go build will fail at that line, and the bug will be caught at compile time.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say someone changes the type of &lt;code&gt;length&lt;/code&gt; column to some non integer type. Build will also fail at the same line because integer columns and expressions can be only compared to other integer columns and expressions.&lt;/p&gt; &#xA;&lt;p&gt;Build will also fail if someone removes &lt;code&gt;length&lt;/code&gt; column from &lt;code&gt;film&lt;/code&gt; table. &lt;code&gt;Film&lt;/code&gt; field will be omitted from SQL Builder and Model types, next time &lt;code&gt;jet&lt;/code&gt; generator is run.&lt;/p&gt; &#xA;&lt;p&gt;Without Jet these bugs will have to be either caught by some test or by manual testing.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;At the moment Jet dependence only of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/lib/pq&lt;/code&gt; &lt;em&gt;(Used by jet generator to read &lt;code&gt;PostgreSQL&lt;/code&gt; database information)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/go-sql-driver/mysql&lt;/code&gt; &lt;em&gt;(Used by jet generator to read &lt;code&gt;MySQL&lt;/code&gt; and &lt;code&gt;MariaDB&lt;/code&gt; database information)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/mattn/go-sqlite3&lt;/code&gt; &lt;em&gt;(Used by jet generator to read &lt;code&gt;SQLite&lt;/code&gt; database information)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/google/uuid&lt;/code&gt; &lt;em&gt;(Used in data model files and for debug purposes)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the tests, additional dependencies are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/pkg/profile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/stretchr/testify&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/google/go-cmp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/jackc/pgx/v4&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/shopspring/decimal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;github.com/volatiletech/null/v8&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://semver.org/&#34;&gt;SemVer&lt;/a&gt; is used for versioning. For the versions available, take a look at the &lt;a href=&#34;https://github.com/go-jet/jet/releases&#34;&gt;releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright 2019-2024 Goran Bjelanovic&lt;br&gt; Licensed under the Apache License, Version 2.0.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ra2web/ra2web-proxy</title>
    <updated>2024-02-26T01:32:32Z</updated>
    <id>tag:github.com,2024-02-26:/ra2web/ra2web-proxy</id>
    <link href="https://github.com/ra2web/ra2web-proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;网页红警边缘合规安全网关，用于对Chronodivide官方客户端进行转发，并对代码和内容动态注入，实现区域合规要求&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ra2web-proxy&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;ra2web-proxy&lt;/strong&gt; 是一个用于网页红警（品牌名 红色井界™）的边缘合规安全网关。它用于转发官方的 Chronodivide 客户端，并动态注入代码和内容，以满足区域合规要求。&lt;/p&gt; &#xA;&lt;h2&gt;功能&lt;/h2&gt; &#xA;&lt;p&gt;该项目的目的是提供一键启动网页红警代理转发网关的解决方案，使用户能够拥有自己的网页红警站点。&lt;/p&gt; &#xA;&lt;h2&gt;开始使用&lt;/h2&gt; &#xA;&lt;p&gt;要开始使用，请按照以下步骤进行操作：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;使用 &lt;code&gt;go build&lt;/code&gt; 命令构建项目。&lt;/li&gt; &#xA; &lt;li&gt;在您的机器上运行 &lt;code&gt;ra2web-proxy&lt;/code&gt; 可执行文件。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;开发&lt;/h2&gt; &#xA;&lt;p&gt;要参与项目的开发，请按照以下步骤进行操作：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;将仓库克隆到本地。&lt;/li&gt; &#xA; &lt;li&gt;在您的主机（Host）文件中配置以下条目：&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;127.0.0.1 game.ra2web.cn&#xA;127.0.0.1 res.ra2web.cn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;接下来以 /cmd/main.go 为入口启动工程，访问 &lt;a href=&#34;http://game.ra2web.cn&#34;&gt;http://game.ra2web.cn&lt;/a&gt; 即可&lt;/p&gt; &#xA;&lt;h2&gt;下一步计划&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 实现自动化的覆盖操作，例如 JSON 合并和配置文件 INI 合并。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 添加可视化管理界面。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 改进可观测性功能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; 实现自动化的功能注入。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;贡献&lt;/h2&gt; &#xA;&lt;p&gt;请直接提交issue或者是提交pull request，项目依然在持续迭代中&lt;/p&gt;</summary>
  </entry>
</feed>