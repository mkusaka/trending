<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-27T01:35:39Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>joho/godotenv</title>
    <updated>2023-04-27T01:35:39Z</updated>
    <id>tag:github.com,2023-04-27:/joho/godotenv</id>
    <link href="https://github.com/joho/godotenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Go port of Ruby&#39;s dotenv library (Loads environment variables from .env files)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GoDotEnv &lt;img src=&#34;https://github.com/joho/godotenv/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/joho/godotenv&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/joho/godotenv&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A Go (golang) port of the Ruby &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv&lt;/a&gt; project (which loads env vars from a .env file).&lt;/p&gt; &#xA;&lt;p&gt;From the original Library:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Storing configuration in the environment is one of the tenets of a twelve-factor app. Anything that is likely to change between deployment environments–such as resource handles for databases or credentials for external services–should be extracted from the code into environment variables.&lt;/p&gt; &#xA; &lt;p&gt;But it is not always practical to set environment variables on development machines or continuous integration servers where multiple projects are run. Dotenv load variables from a .env file into ENV when the environment is bootstrapped.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It can be used as a library (for loading in env for your own daemons etc.) or as a bin command.&lt;/p&gt; &#xA;&lt;p&gt;There is test coverage and CI for both linuxish and Windows environments, but I make no guarantees about the bin version working on Windows.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;As a library&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/joho/godotenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or if you want to use it as a bin command&lt;/p&gt; &#xA;&lt;p&gt;go &amp;gt;= 1.17&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/joho/godotenv/cmd/godotenv@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;go &amp;lt; 1.17&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/joho/godotenv/cmd/godotenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add your application configuration to your &lt;code&gt;.env&lt;/code&gt; file in the root of your project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;S3_BUCKET=YOURS3BUCKET&#xA;SECRET_KEY=YOURSECRETKEYGOESHERE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in your Go app you can do something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;log&#34;&#xA;    &#34;os&#34;&#xA;&#xA;    &#34;github.com/joho/godotenv&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  err := godotenv.Load()&#xA;  if err != nil {&#xA;    log.Fatal(&#34;Error loading .env file&#34;)&#xA;  }&#xA;&#xA;  s3Bucket := os.Getenv(&#34;S3_BUCKET&#34;)&#xA;  secretKey := os.Getenv(&#34;SECRET_KEY&#34;)&#xA;&#xA;  // now do something with s3 or whatever&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re even lazier than that, you can just take advantage of the autoload package which will read in &lt;code&gt;.env&lt;/code&gt; on import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import _ &#34;github.com/joho/godotenv/autoload&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While &lt;code&gt;.env&lt;/code&gt; in the project root is the default, you don&#39;t have to be constrained, both examples below are 100% legit&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;godotenv.Load(&#34;somerandomfile&#34;)&#xA;godotenv.Load(&#34;filenumberone.env&#34;, &#34;filenumbertwo.env&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to be really fancy with your env file you can do comments and exports (below is a valid env file)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# I am a comment and that is OK&#xA;SOME_VAR=someval&#xA;FOO=BAR # comments at line end are OK too&#xA;export BAR=BAZ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or finally you can do YAML(ish) style&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;FOO: bar&#xA;BAR: baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as a final aside, if you don&#39;t want godotenv munging your env you can just get a map back instead&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var myEnv map[string]string&#xA;myEnv, err := godotenv.Read()&#xA;&#xA;s3Bucket := myEnv[&#34;S3_BUCKET&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or from an &lt;code&gt;io.Reader&lt;/code&gt; instead of a local file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;reader := getRemoteFile()&#xA;myEnv, err := godotenv.Parse(reader)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or from a &lt;code&gt;string&lt;/code&gt; if you so desire&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;content := getRemoteFileContent()&#xA;myEnv, err := godotenv.Unmarshal(content)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Precedence &amp;amp; Conventions&lt;/h3&gt; &#xA;&lt;p&gt;Existing envs take precedence of envs that are loaded later.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use&#34;&gt;convention&lt;/a&gt; for managing multiple environments (i.e. development, test, production) is to create an env named &lt;code&gt;{YOURAPP}_ENV&lt;/code&gt; and load envs in this order:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;env := os.Getenv(&#34;FOO_ENV&#34;)&#xA;if &#34;&#34; == env {&#xA;  env = &#34;development&#34;&#xA;}&#xA;&#xA;godotenv.Load(&#34;.env.&#34; + env + &#34;.local&#34;)&#xA;if &#34;test&#34; != env {&#xA;  godotenv.Load(&#34;.env.local&#34;)&#xA;}&#xA;godotenv.Load(&#34;.env.&#34; + env)&#xA;godotenv.Load() // The Original .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to, you can also use &lt;code&gt;godotenv.Overload()&lt;/code&gt; to defy this convention and overwrite existing envs instead of only supplanting them. Use with caution.&lt;/p&gt; &#xA;&lt;h3&gt;Command Mode&lt;/h3&gt; &#xA;&lt;p&gt;Assuming you&#39;ve installed the command as above and you&#39;ve got &lt;code&gt;$GOPATH/bin&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;godotenv -f /some/path/to/.env some_command with some args&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t specify &lt;code&gt;-f&lt;/code&gt; it will fall back on the default of loading &lt;code&gt;.env&lt;/code&gt; in &lt;code&gt;PWD&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;By default, it won&#39;t override existing environment variables; you can do that with the &lt;code&gt;-o&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h3&gt;Writing Env Files&lt;/h3&gt; &#xA;&lt;p&gt;Godotenv can also write a map representing the environment to a correctly-formatted and escaped file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;env, err := godotenv.Unmarshal(&#34;KEY=value&#34;)&#xA;err := godotenv.Write(env, &#34;./.env&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or to a string&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;env, err := godotenv.Unmarshal(&#34;KEY=value&#34;)&#xA;content, err := godotenv.Marshal(env)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome, but with some caveats.&lt;/p&gt; &#xA;&lt;p&gt;This library has been declared feature complete (see &lt;a href=&#34;https://github.com/joho/godotenv/issues/182&#34;&gt;#182&lt;/a&gt; for background) and will not be accepting issues or pull requests adding new functionality or breaking the library API.&lt;/p&gt; &#xA;&lt;p&gt;Contributions would be gladly accepted that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bring this library&#39;s parsing into closer compatibility with the mainline dotenv implementations, in particular &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;Ruby&#39;s dotenv&lt;/a&gt; and &lt;a href=&#34;https://github.com/motdotla/dotenv&#34;&gt;Node.js&#39; dotenv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;keep the library up to date with the go ecosystem (ie CI bumps, documentation changes, changes in the core libraries)&lt;/li&gt; &#xA; &lt;li&gt;bug fixes for use cases that pertain to the library&#39;s purpose of easing development of codebases deployed into twelve factor environments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;code changes without tests and references to peer dotenv implementations will not be accepted&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;Added some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Releases should follow &lt;a href=&#34;http://semver.org/&#34;&gt;Semver&lt;/a&gt; though the first couple of releases are &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v1.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/joho/godotenv/issues/30&#34;&gt;annotated tags for all releases&lt;/a&gt;. Example &lt;code&gt;git tag -a v1.2.1&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Who?&lt;/h2&gt; &#xA;&lt;p&gt;The original library &lt;a href=&#34;https://github.com/bkeepers/dotenv&#34;&gt;dotenv&lt;/a&gt; was written by &lt;a href=&#34;http://opensoul.org/&#34;&gt;Brandon Keepers&lt;/a&gt;, and this port was done by &lt;a href=&#34;https://johnbarton.co/&#34;&gt;John Barton&lt;/a&gt; based off the tests/fixtures in the original library.&lt;/p&gt;</summary>
  </entry>
</feed>