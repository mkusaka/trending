<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-11T01:27:37Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Ehco1996/ehco</title>
    <updated>2024-03-11T01:27:37Z</updated>
    <id>tag:github.com,2024-03-11:/Ehco1996/ehco</id>
    <link href="https://github.com/Ehco1996/ehco" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ehco is a network ʚrelayɞ tool and a typo :)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ehco is a network relay tool and a typo :)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/Ehco1996/ehco&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/Ehco1996/ehco&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/Ehco1996/ehco&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;go.dev reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/ehco1996/ehco&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/ehco1996/ehco&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/README_EN.md&#34;&gt;see Readme in English here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用场景&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;连接内网服务&lt;/summary&gt; &#xA; &lt;p&gt;本地无法链接集群内的服务,可以通过 ehco 将本地流量转发到集群内,方便本地开发和调试&lt;/p&gt; &#xA; &lt;p&gt;e.g. 本地开发调试连接内网服务 db, db host: xxx-rds.xxx.us-east-1.rds.amazonaws.com&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;在 k8s 内 启动一个 ehco pod. 启动命令如下: &lt;code&gt;ehco -l 0.0.0.0:3306 -r xxx-rds.xxx.us-east-1.rds.amazonaws.com:3306&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;使用 kube port-forward 将本地的 3306 端口转发到 ehco pod 的 3306 端口 &lt;code&gt;kubectl port-forward pod/ehco-pod 3306:3306&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;本地使用客户端连接 &lt;code&gt;mysql -h 127.0.0.1:3306 -u root -p&lt;/code&gt; &lt;/p&gt;&lt;/li&gt;&#xA; &lt;/ol&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;&lt;/p&gt;   &#xA;&lt;details&gt; &#xA; &lt;summary&gt;中转 proxy 客户端,提供负载均衡功能&lt;/summary&gt; &#xA; &lt;p&gt;从 &lt;strong&gt;v1.1.4-dev(nightly)&lt;/strong&gt; 开始, ehco 支持了从 clash proxy provider 读取 proxy 配置并复写成 ehco 的 relay 配置 从而实现了 ehco 作为代理客户端的前置代理,提供负载均衡,流量监控等功能&lt;/p&gt; &#xA; &lt;p&gt;e.g.&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;配置 ehco 的 config.json 并启动&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;web_host&#34;: &#34;12.0.0.1&#34;,&#xA;    &#34;web_port&#34;: 9000,&#xA;    &#34;sub_configs&#34;: [&#xA;        {&#xA;            &#34;name&#34;: &#34;nas&#34;,&#xA;            &#34;url&#34;: &#34;your url&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;code&gt;ehco -c config.json&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ol start=&#34;2&#34;&gt; &#xA;  &lt;li&gt;访问 ehco 的 web 界面 获取 ehco 的 proxy provider url&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;&lt;code&gt;http://&amp;lt;web_host&amp;gt;:&amp;lt;web_port&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/monitor/web.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;ehco 会将每个 clash proxy provider 转换成两个新 clash provider&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;会将每个的 proxy 转换成一个 relay&lt;/li&gt; &#xA;  &lt;li&gt;会将 proxy 按最长前缀&lt;strong&gt;分组&lt;/strong&gt;,并将每个分组转换成开启负载均衡的 relay&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;举个例子&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;proxies:&#xA;    - name: us-1&#xA;      server: s1&#xA;      password:&#xA;      port: 1&#xA;    - name: us-2&#xA;      server: s2&#xA;      port: 2&#xA;    - name: jb-1&#xA;      server: s3&#xA;      password: pass&#xA;      port: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;上面这个包含 3 个 proxy 的会被转换成 5 个 relay:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;us-1 relay to s1:1&lt;/li&gt; &#xA;  &lt;li&gt;us-2 relay to s2:2&lt;/li&gt; &#xA;  &lt;li&gt;jb-1 relay to s3:3 us-lb relay to s1:1,s2:2&lt;/li&gt; &#xA;  &lt;li&gt;jb-1-lb relay to s3:3&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;将 ehco 的 proxy provider url 配置到 clash 的配置文件中&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;proxy-providers:&#xA;    ehco:&#xA;        type: http&#xA;        url: http://&amp;lt;web_host&amp;gt;:&amp;lt;web_port&amp;gt;/clash_proxy_provider/?sub_name=&amp;lt;name&amp;gt;&#xA;    ehco-lb:&#xA;        type: http&#xA;        url: http://&amp;lt;web_host&amp;gt;:&amp;lt;web_port&amp;gt;/clash_proxy_provider/?sub_name=name&amp;amp;grouped=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;你就能得到一个支持负载均衡的 clash proxy client 了,并且还能在 dashboard 上看到流量监控哟 &lt;img src=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/monitor/proxy-traffic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;WIP: 隧道连接到 proxy 集群&lt;/summary&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ehco 提供预编译的的二进制 &lt;a href=&#34;https://github.com/Ehco1996/ehco/releases&#34;&gt;release&lt;/a&gt; 页面下载&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ehco 提供 &lt;a href=&#34;https://github.com/Ehco1996/ehco/releases/tag/nightly&#34;&gt;nightly build&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ehco 提供 docker 镜像 &lt;code&gt;docker pull ehco1996/ehco&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;主要功能&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tcp/udp relay&lt;/li&gt; &#xA; &lt;li&gt;tunnel relay (ws/wss/mwss/mtcp)&lt;/li&gt; &#xA; &lt;li&gt;proxy server (内嵌了完整班版本的 xray)&lt;/li&gt; &#xA; &lt;li&gt;监控报警 (prometheus/grafana)&lt;/li&gt; &#xA; &lt;li&gt;WebAPI (http://web_host:web_port)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;中转使用介绍&lt;/h2&gt; &#xA;&lt;p&gt;使用隧道需要至少两台主机, 并且在两台主机上都安装了 ehco&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;中转机器 A 假设机器 A 的 IP 是 1.1.1.1&lt;/li&gt; &#xA; &lt;li&gt;落地机器 B 假设机器 B 的 IP 是 2.2.2.2 并且落地机器 B 的 5555 端口跑着一个 SS/v2ray/任意 tcp/udp 服务&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;案例一 不用隧道直接通过中转机器中转用户流量&lt;/summary&gt; 直接在中转机器 A 上输入: `ehco -l 0.0.0.0:1234 -r 2.2.2.2:5555` &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;该命令表示将所有从中转机器 A 的 1234 端口进入的流量直接转发到落地机器 B 的 5555 端口&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;用户即可通过 中转机器 A 的 1234 端口访问到落地机器 B 的 5555 端口的 SS/v2ray 服务了&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;案例二 用 mwss 隧道中转用户流量&lt;/summary&gt; 在落地机器 B 上输入: `ehco -l 0.0.0.0:443 -lt mwss -r 127.0.0.1:5555` &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;该命令表示将所有从落地机器 B 的 443 端口进入的 wss 流量解密后转发到落地机器 B 的 5555 端口&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;在中转机器 A 上输入: &lt;code&gt;ehco -l 0.0.0.0:1234 -r wss://2.2.2.2:443 -tt mwss&lt;/code&gt;&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;该命令表示将所有从 A 的 1234 端口进入的流量通过 wss 加密后转发到落地机器 B 的 443 端口&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;用户即可通过 中转机器 A 的 1234 端口访问到落地机器 B 的 5555 端口的 SS/v2ray 服务了&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;内嵌 Xray 功能介绍&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;ehco 内的 xray 服务端&lt;/summary&gt; 从 `v1.1.2` 开始，ehco 内置了完整版本的 [xray](https://github.com/XTLS/Xray-core) 后端，可以通过标准的 xray 配置文件来启动内置的 xray server, 配置的 key 为 `xray_config`： &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;单端口多用户的 ss &lt;a href=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/examples/xray_ss.json&#34;&gt;xray_ss.json&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;单端口多用户的 trojan &lt;a href=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/examples/xray_trojan.json&#34;&gt;xray_trojan.json&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;用户流量统计&lt;/summary&gt; &#xA; &lt;p&gt;从 &lt;code&gt;v1.1.2&lt;/code&gt; 开始，ehco 支持通过 api 下方用户配置和上报用户流量，配置的 key 为 &lt;code&gt;sync_traffic_endpoint&lt;/code&gt;：&lt;/p&gt; &#xA; &lt;p&gt;ehco 会每隔 60s 发送一次 GET 请求，从 &lt;code&gt;sync_traffic_endpoint&lt;/code&gt; 同步一次用户配置，到 xray server 里，期望的 API 返回格式如下：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;users&#34;: [&#xA;        {&#xA;            &#34;user_id&#34;: 1,&#xA;            &#34;method&#34;: &#34;user1&#34;,&#xA;            &#34;password&#34;: 1024,&#xA;            &#34;level&#34;: 1024,&#xA;            &#34;upload_traffic&#34;: 1024,&#xA;            &#34;download_traffic&#34;: 1024,&#xA;            &#34;protocol&#34;: &#34;trojan/ss&#34;&#xA;        },&#xA;        {&#xA;            &#34;user_id&#34;: 2,&#xA;            &#34;method&#34;: &#34;user1&#34;,&#xA;            &#34;password&#34;: 1024,&#xA;            &#34;level&#34;: 1024,&#xA;            &#34;upload_traffic&#34;: 1024,&#xA;            &#34;download_traffic&#34;: 1024,&#xA;            &#34;protocol&#34;: &#34;trojan/ss&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;ehco 会每隔 60s 发送一次 POST 请求至 &lt;code&gt;sync_traffic_endpoint&lt;/code&gt; ，上报当前 xray server 所有用户的流量使用情况，发送的请求格式如下：&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;data&#34;: [&#xA;        {&#xA;            &#34;user_id&#34;: 1,&#xA;            &#34;upload_traffic&#34;: 1024,&#xA;            &#34;download_traffic&#34;: 1024&#xA;        },&#xA;        {&#xA;            &#34;user_id&#34;: 2,&#xA;            &#34;upload_traffic&#34;: 1024,&#xA;            &#34;download_traffic&#34;: 1024&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;需要注意的是，如果想使用此功能，对 xray 的完整配置文件有如下限制&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;的配置文件必须包开启 &lt;code&gt;stats&lt;/code&gt; 和 &lt;code&gt;api&lt;/code&gt; 功能&lt;/li&gt; &#xA;  &lt;li&gt;ss inbound 的 &lt;code&gt;tag&lt;/code&gt; 必须为 &lt;code&gt;ss_proxy&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;trojan inbound 的 &lt;code&gt;tag&lt;/code&gt; 必须为 &lt;code&gt;trojan_proxy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;一个完整的例子可以参考 &lt;a href=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/examples/xray_ss.json&#34;&gt;xray_ss.json&lt;/a&gt; 和 &lt;a href=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/examples/xray_trojan.json&#34;&gt;xray_trojan.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;配置文件格式&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ehco 支持从 &lt;code&gt;配置文件&lt;/code&gt; / &lt;code&gt;http接口&lt;/code&gt; 里读取 &lt;code&gt;json&lt;/code&gt; 格式的配置并启动 (更多例子可以参考项目里的 &lt;a href=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/examples/config.json&#34;&gt;config.json&lt;/a&gt; 文件):&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;热重载配置&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;大于 1.1.0 版本的 ehco 支持热重载配置&lt;/li&gt; &#xA;  &lt;li&gt;通过 &lt;code&gt;kill -HUP pid&lt;/code&gt; 信号来热重载配置&lt;/li&gt; &#xA;  &lt;li&gt;通过配置 &lt;code&gt;reload_interval&lt;/code&gt; 来指定配置文件的路径&lt;/li&gt; &#xA;  &lt;li&gt;通过访问 POST &lt;code&gt;http://web_host:web_port/reload/&lt;/code&gt; 接口来热重载配置&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;监控报警&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;dashboard 和 prometheus 规则可以从&lt;code&gt;monitor&lt;/code&gt;文件夹下找到，可以自行导入&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;类似 Smokeing Ping 的延迟监控&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/monitor/ping.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;流量监控&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Ehco1996/ehco/master/monitor/traffic.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark(Apple m1)&lt;/h2&gt; &#xA;&lt;p&gt;iperf:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run iperf server on 5201&#xA;iperf3 -s&#xA;&#xA;# 直接转发&#xA;# run relay server listen 1234 to 9001 (raw)&#xA;go run cmd/ehco/main.go -l 0.0.0.0:1234 -r 0.0.0.0:5201&#xA;&#xA;# 直接转发END&#xA;&#xA;# 通过ws隧道转发&#xA;# listen 1235 relay over ws to 1236&#xA;go run cmd/ehco/main.go -l 0.0.0.0:1235  -r ws://0.0.0.0:1236 -tt ws&#xA;&#xA;# listen 1236 through ws relay to 5201&#xA;go run cmd/ehco/main.go -l 0.0.0.0:1236 -lt ws -r 0.0.0.0:5201&#xA;# 通过ws隧道转发END&#xA;&#xA;# 通过wss隧道转发&#xA;# listen 1234 relay over wss to 1236&#xA;go run cmd/ehco/main.go -l 0.0.0.0:1235  -r wss://0.0.0.0:1236 -tt wss&#xA;&#xA;# listen 1236 through wss relay to 5201&#xA;go run cmd/ehco/main.go -l 0.0.0.0:1236 -lt wss -r 0.0.0.0:5201&#xA;# 通过wss隧道转发END&#xA;&#xA;# 通过mwss隧道转发 和wss相比 速度会慢，但是能减少延迟&#xA;# listen 1237 relay over mwss to 1238&#xA;go run cmd/ehco/main.go -l 0.0.0.0:1237  -r wss://0.0.0.0:1238 -tt mwss&#xA;&#xA;# listen 1238 through mwss relay to 5201&#xA;go run cmd/ehco/main.go -l 0.0.0.0:1238 -lt mwss -r 0.0.0.0:5201&#xA;# 通过mwss隧道转发END&#xA;&#xA;# run through file&#xA;go run cmd/ehco/main.go -c config.json&#xA;&#xA;# benchmark tcp&#xA;iperf3 -c 0.0.0.0 -p 1234&#xA;&#xA;# benchmark tcp through wss&#xA;iperf3 -c 0.0.0.0 -p 1235&#xA;&#xA;# benchmark upd&#xA;iperf3 -c 0.0.0.0 -p 1234 -u -b 1G --length 1024&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;| iperf | raw            | relay(raw)    | relay(ws)    | relay(wss)   | relay(mwss)    | relay(mtcp)    |&#xA;| ----- | -------------- | ------------- | ------------ | ------------ | -------------- | -------------- |&#xA;| tcp   | 123 Gbits/sec  | 55 Gbits/sec  | 41 Gbits/sec | 10 Gbits/sec | 5.78 Gbits/sec | 22.2 Gbits/sec |&#xA;| udp   | 14.5 Gbits/sec | 3.3 Gbits/sec | 直接转发     | 直接转发     | 直接转发       | 直接转发       |&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>