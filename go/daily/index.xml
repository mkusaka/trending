<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-26T01:33:43Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ffuf/ffuf</title>
    <updated>2022-09-26T01:33:43Z</updated>
    <id>tag:github.com,2022-09-26:/ffuf/ffuf</id>
    <link href="https://github.com/ffuf/ffuf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast web fuzzer written in Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ffuf/ffuf/master/_img/ffuf_run_logo_600.png&#34; alt=&#34;ffuf mascot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ffuf - Fuzz Faster U Fool&lt;/h1&gt; &#xA;&lt;p&gt;A fast web fuzzer written in Go.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#example-usage&#34;&gt;Example usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#typical-directory-discovery&#34;&gt;Content discovery&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#virtual-host-discovery-without-dns-records&#34;&gt;Vhost discovery&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#get-parameter-fuzzing&#34;&gt;Parameter fuzzing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#post-data-fuzzing&#34;&gt;POST data fuzzing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#using-external-mutator-to-produce-test-cases&#34;&gt;Using external mutator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#configuration-files&#34;&gt;Configuration files&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#usage&#34;&gt;Help&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#interactive-mode&#34;&gt;Interactive mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf#sponsorware&#34;&gt;Sponsorware?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.offensive-security.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ffuf/ffuf/master/_img/offsec-logo.png&#34; alt=&#34;Offensive Security&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Official Discord Channel&lt;/h2&gt; &#xA;&lt;p&gt;ffuf has a channel at Porchetta Industries Discord server alongside of channels for many other tools.&lt;/p&gt; &#xA;&lt;p&gt;Come to hang out &amp;amp; to discuss about ffuf, it&#39;s usage and development!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/VWcdZCUsQP&#34;&gt;&lt;img src=&#34;https://discordapp.com/api/guilds/736724457258745996/widget.png?style=banner2&#34; alt=&#34;Porchetta Industries&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ffuf/ffuf/releases/latest&#34;&gt;Download&lt;/a&gt; a prebuilt binary from &lt;a href=&#34;https://github.com/ffuf/ffuf/releases/latest&#34;&gt;releases page&lt;/a&gt;, unpack and run!&lt;/p&gt; &lt;p&gt;&lt;em&gt;or&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have recent go compiler installed: &lt;code&gt;go install github.com/ffuf/ffuf@latest&lt;/code&gt; (the same command works for updating)&lt;/p&gt; &lt;p&gt;&lt;em&gt;or&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;git clone https://github.com/ffuf/ffuf ; cd ffuf ; go get ; go build&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ffuf depends on Go 1.16 or greater.&lt;/p&gt; &#xA;&lt;h2&gt;Example usage&lt;/h2&gt; &#xA;&lt;p&gt;The usage examples below show just the simplest tasks you can accomplish using &lt;code&gt;ffuf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more extensive documentation, with real life usage examples and tips, be sure to check out the awesome guide: &#34;&lt;a href=&#34;https://codingo.io/tools/ffuf/bounty/2020/09/17/everything-you-need-to-know-about-ffuf.html&#34;&gt;Everything you need to know about FFUF&lt;/a&gt;&#34; by Michael Skelton (&lt;a href=&#34;https://github.com/codingo&#34;&gt;@codingo&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;You can also practise your ffuf scans against a live host with different lessons and use cases either locally by using the docker container &lt;a href=&#34;https://github.com/adamtlangley/ffufme&#34;&gt;https://github.com/adamtlangley/ffufme&lt;/a&gt; or against the live hosted version at &lt;a href=&#34;http://ffuf.me&#34;&gt;http://ffuf.me&lt;/a&gt; created by Adam Langley &lt;a href=&#34;https://twitter.com/adamtlangley&#34;&gt;@adamtlangley&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Typical directory discovery&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/211350&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/211350.png&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;By using the FUZZ keyword at the end of URL (&lt;code&gt;-u&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffuf -w /path/to/wordlist -u https://target/FUZZ&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Virtual host discovery (without DNS records)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/211360&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/211360.png&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Assuming that the default virtualhost response size is 4242 bytes, we can filter out all the responses of that size (&lt;code&gt;-fs 4242&lt;/code&gt;)while fuzzing the Host - header:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffuf -w /path/to/vhost/wordlist -u https://target -H &#34;Host: FUZZ&#34; -fs 4242&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GET parameter fuzzing&lt;/h3&gt; &#xA;&lt;p&gt;GET parameter name fuzzing is very similar to directory discovery, and works by defining the &lt;code&gt;FUZZ&lt;/code&gt; keyword as a part of the URL. This also assumes an response size of 4242 bytes for invalid GET parameter name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffuf -w /path/to/paramnames.txt -u https://target/script.php?FUZZ=test_value -fs 4242&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the parameter name is known, the values can be fuzzed the same way. This example assumes a wrong parameter value returning HTTP response code 401.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffuf -w /path/to/values.txt -u https://target/script.php?valid_name=FUZZ -fc 401&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;POST data fuzzing&lt;/h3&gt; &#xA;&lt;p&gt;This is a very straightforward operation, again by using the &lt;code&gt;FUZZ&lt;/code&gt; keyword. This example is fuzzing only part of the POST request. We&#39;re again filtering out the 401 responses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffuf -w /path/to/postdata.txt -X POST -d &#34;username=admin\&amp;amp;password=FUZZ&#34; -u https://target/login.php -fc 401&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Maximum execution time&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want ffuf to run indefinitely, you can use the &lt;code&gt;-maxtime&lt;/code&gt;. This stops &lt;strong&gt;the entire&lt;/strong&gt; process after a given time (in seconds).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffuf -w /path/to/wordlist -u https://target/FUZZ -maxtime 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When working with recursion, you can control the maxtime &lt;strong&gt;per job&lt;/strong&gt; using &lt;code&gt;-maxtime-job&lt;/code&gt;. This will stop the current job after a given time (in seconds) and continue with the next one. New jobs are created when the recursion functionality detects a subdirectory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffuf -w /path/to/wordlist -u https://target/FUZZ -maxtime-job 60 -recursion -recursion-depth 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to combine both flags limiting the per job maximum execution time as well as the overall execution time. If you do not use recursion then both flags behave equally.&lt;/p&gt; &#xA;&lt;h3&gt;Using external mutator to produce test cases&lt;/h3&gt; &#xA;&lt;p&gt;For this example, we&#39;ll fuzz JSON data that&#39;s sent over POST. &lt;a href=&#34;https://gitlab.com/akihe/radamsa&#34;&gt;Radamsa&lt;/a&gt; is used as the mutator.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;--input-cmd&lt;/code&gt; is used, ffuf will display matches as their position. This same position value will be available for the callee as an environment variable &lt;code&gt;$FFUF_NUM&lt;/code&gt;. We&#39;ll use this position value as the seed for the mutator. Files example1.txt and example2.txt contain valid JSON payloads. We are matching all the responses, but filtering out response code &lt;code&gt;400 - Bad request&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ffuf --input-cmd &#39;radamsa --seed $FFUF_NUM example1.txt example2.txt&#39; -H &#34;Content-Type: application/json&#34; -X POST -u https://ffuf.io.fi/FUZZ -mc all -fc 400&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It of course isn&#39;t very efficient to call the mutator for each payload, so we can also pre-generate the payloads, still using &lt;a href=&#34;https://gitlab.com/akihe/radamsa&#34;&gt;Radamsa&lt;/a&gt; as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Generate 1000 example payloads&#xA;radamsa -n 1000 -o %n.txt example1.txt example2.txt&#xA;&#xA;# This results into files 1.txt ... 1000.txt&#xA;# Now we can just read the payload data in a loop from file for ffuf&#xA;&#xA;ffuf --input-cmd &#39;cat $FFUF_NUM.txt&#39; -H &#34;Content-Type: application/json&#34; -X POST -u https://ffuf.io.fi/ -mc all -fc 400&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration files&lt;/h3&gt; &#xA;&lt;p&gt;When running ffuf, it first checks if a default configuration file exists. The file path for it is &lt;code&gt;~/.ffufrc&lt;/code&gt; / &lt;code&gt;$HOME/.ffufrc&lt;/code&gt; for most *nixes (for example &lt;code&gt;/home/joohoi/.ffufrc&lt;/code&gt;) and &lt;code&gt;%USERPROFILE%\.ffufrc&lt;/code&gt; for Windows. You can configure one or multiple options in this file, and they will be applied on every subsequent ffuf job. An example of .ffufrc file can be found &lt;a href=&#34;https://github.com/ffuf/ffuf/raw/master/ffufrc.example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The configuration options provided on the command line override the ones loaded from &lt;code&gt;~/.ffufrc&lt;/code&gt;. Note: this does not apply for CLI flags that can be provided more than once. One of such examples is &lt;code&gt;-H&lt;/code&gt; (header) flag. In this case, the &lt;code&gt;-H&lt;/code&gt; values provided on the command line will be &lt;em&gt;appended&lt;/em&gt; to the ones from the config file instead.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, in case you wish to use bunch of configuration files for different use cases, you can do this by defining the configuration file path using &lt;code&gt;-config&lt;/code&gt; command line flag that takes the file path to the configuration file as its parameter.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;250&#34; src=&#34;https://raw.githubusercontent.com/ffuf/ffuf/master/_img/ffuf_juggling_250.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To define the test case for ffuf, use the keyword &lt;code&gt;FUZZ&lt;/code&gt; anywhere in the URL (&lt;code&gt;-u&lt;/code&gt;), headers (&lt;code&gt;-H&lt;/code&gt;), or POST data (&lt;code&gt;-d&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Fuzz Faster U Fool - v1.3.0-dev&#xA;&#xA;HTTP OPTIONS:&#xA;  -H                  Header `&#34;Name: Value&#34;`, separated by colon. Multiple -H flags are accepted.&#xA;  -X                  HTTP method to use&#xA;  -b                  Cookie data `&#34;NAME1=VALUE1; NAME2=VALUE2&#34;` for copy as curl functionality.&#xA;  -d                  POST data&#xA;  -ignore-body        Do not fetch the response content. (default: false)&#xA;  -r                  Follow redirects (default: false)&#xA;  -recursion          Scan recursively. Only FUZZ keyword is supported, and URL (-u) has to end in it. (default: false)&#xA;  -recursion-depth    Maximum recursion depth. (default: 0)&#xA;  -recursion-strategy Recursion strategy: &#34;default&#34; for a redirect based, and &#34;greedy&#34; to recurse on all matches (default: default)&#xA;  -replay-proxy       Replay matched requests using this proxy.&#xA;  -sni                Target TLS SNI, does not support FUZZ keyword&#xA;  -timeout            HTTP request timeout in seconds. (default: 10)&#xA;  -u                  Target URL&#xA;  -x                  Proxy URL (SOCKS5 or HTTP). For example: http://127.0.0.1:8080 or socks5://127.0.0.1:8080&#xA;&#xA;GENERAL OPTIONS:&#xA;  -V                  Show version information. (default: false)&#xA;  -ac                 Automatically calibrate filtering options (default: false)&#xA;  -acc                Custom auto-calibration string. Can be used multiple times. Implies -ac&#xA;  -c                  Colorize output. (default: false)&#xA;  -config             Load configuration from a file&#xA;  -maxtime            Maximum running time in seconds for entire process. (default: 0)&#xA;  -maxtime-job        Maximum running time in seconds per job. (default: 0)&#xA;  -noninteractive     Disable the interactive console functionality (default: false)&#xA;  -p                  Seconds of `delay` between requests, or a range of random delay. For example &#34;0.1&#34; or &#34;0.1-2.0&#34;&#xA;  -rate               Rate of requests per second (default: 0)&#xA;  -s                  Do not print additional information (silent mode) (default: false)&#xA;  -sa                 Stop on all error cases. Implies -sf and -se. (default: false)&#xA;  -se                 Stop on spurious errors (default: false)&#xA;  -sf                 Stop when &amp;gt; 95% of responses return 403 Forbidden (default: false)&#xA;  -t                  Number of concurrent threads. (default: 40)&#xA;  -v                  Verbose output, printing full URL and redirect location (if any) with the results. (default: false)&#xA;&#xA;MATCHER OPTIONS:&#xA;  -mc                 Match HTTP status codes, or &#34;all&#34; for everything. (default: 200,204,301,302,307,401,403,405,500)&#xA;  -ml                 Match amount of lines in response&#xA;  -mr                 Match regexp&#xA;  -ms                 Match HTTP response size&#xA;  -mt                 Match how many milliseconds to the first response byte, either greater or less than. EG: &amp;gt;100 or &amp;lt;100&#xA;  -mw                 Match amount of words in response&#xA;&#xA;FILTER OPTIONS:&#xA;  -fc                 Filter HTTP status codes from response. Comma separated list of codes and ranges&#xA;  -fl                 Filter by amount of lines in response. Comma separated list of line counts and ranges&#xA;  -fr                 Filter regexp&#xA;  -fs                 Filter HTTP response size. Comma separated list of sizes and ranges&#xA;  -ft                 Filter by number of milliseconds to the first response byte, either greater or less than. EG: &amp;gt;100 or &amp;lt;100&#xA;  -fw                 Filter by amount of words in response. Comma separated list of word counts and ranges&#xA;&#xA;INPUT OPTIONS:&#xA;  -D                  DirSearch wordlist compatibility mode. Used in conjunction with -e flag. (default: false)&#xA;  -e                  Comma separated list of extensions. Extends FUZZ keyword.&#xA;  -ic                 Ignore wordlist comments (default: false)&#xA;  -input-cmd          Command producing the input. --input-num is required when using this input method. Overrides -w.&#xA;  -input-num          Number of inputs to test. Used in conjunction with --input-cmd. (default: 100)&#xA;  -input-shell        Shell to be used for running command&#xA;  -mode               Multi-wordlist operation mode. Available modes: clusterbomb, pitchfork, sniper (default: clusterbomb)&#xA;  -request            File containing the raw http request&#xA;  -request-proto      Protocol to use along with raw request (default: https)&#xA;  -w                  Wordlist file path and (optional) keyword separated by colon. eg. &#39;/path/to/wordlist:KEYWORD&#39;&#xA;&#xA;OUTPUT OPTIONS:&#xA;  -debug-log          Write all of the internal logging to the specified file.&#xA;  -o                  Write output to file&#xA;  -od                 Directory path to store matched results to.&#xA;  -of                 Output file format. Available formats: json, ejson, html, md, csv, ecsv (or, &#39;all&#39; for all formats) (default: json)&#xA;  -or                 Don&#39;t create the output file if we don&#39;t have results (default: false)&#xA;&#xA;EXAMPLE USAGE:&#xA;  Fuzz file paths from wordlist.txt, match all responses but filter out those with content-size 42.&#xA;  Colored, verbose output.&#xA;    ffuf -w wordlist.txt -u https://example.org/FUZZ -mc all -fs 42 -c -v&#xA;&#xA;  Fuzz Host-header, match HTTP 200 responses.&#xA;    ffuf -w hosts.txt -u https://example.org/ -H &#34;Host: FUZZ&#34; -mc 200&#xA;&#xA;  Fuzz POST JSON data. Match all responses not containing text &#34;error&#34;.&#xA;    ffuf -w entries.txt -u https://example.org/ -X POST -H &#34;Content-Type: application/json&#34; \&#xA;      -d &#39;{&#34;name&#34;: &#34;FUZZ&#34;, &#34;anotherkey&#34;: &#34;anothervalue&#34;}&#39; -fr &#34;error&#34;&#xA;&#xA;  Fuzz multiple locations. Match only responses reflecting the value of &#34;VAL&#34; keyword. Colored.&#xA;    ffuf -w params.txt:PARAM -w values.txt:VAL -u https://example.org/?PARAM=VAL -mr &#34;VAL&#34; -c&#xA;&#xA;  More information and examples: https://github.com/ffuf/ffuf&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Interactive mode&lt;/h3&gt; &#xA;&lt;p&gt;By pressing &lt;code&gt;ENTER&lt;/code&gt; during ffuf execution, the process is paused and user is dropped to a shell-like interactive mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;entering interactive mode&#xA;type &#34;help&#34; for a list of commands, or ENTER to resume.&#xA;&amp;gt; help&#xA;&#xA;available commands:&#xA; fc [value]             - (re)configure status code filter &#xA; fl [value]             - (re)configure line count filter &#xA; fw [value]             - (re)configure word count filter &#xA; fs [value]             - (re)configure size filter &#xA; queueshow              - show recursive job queue&#xA; queuedel [number]      - delete a recursion job in the queue&#xA; queueskip              - advance to the next queued recursion job&#xA; restart                - restart and resume the current ffuf job&#xA; resume                 - resume current ffuf job (or: ENTER) &#xA; show                   - show results for the current job&#xA; savejson [filename]    - save current matches to a file&#xA; help                   - you are looking at it&#xA;&amp;gt; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in this mode, filters can be reconfigured, queue managed and the current state saved to disk.&lt;/p&gt; &#xA;&lt;p&gt;When (re)configuring the filters, they get applied posthumously and all the false positive matches from memory that would have been filtered out by the newly added filters get deleted.&lt;/p&gt; &#xA;&lt;p&gt;The new state of matches can be printed out with a command &lt;code&gt;show&lt;/code&gt; that will print out all the matches as like they would have been found by &lt;code&gt;ffuf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As &#34;negative&#34; matches are not stored to memory, relaxing the filters cannot unfortunately bring back the lost matches. For this kind of scenario, the user is able to use the command &lt;code&gt;restart&lt;/code&gt;, which resets the state and starts the current job from the beginning.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;250&#34; src=&#34;https://raw.githubusercontent.com/ffuf/ffuf/master/_img/ffuf_waving_250.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Sponsorware&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ffuf&lt;/code&gt; employs a sponsorware model. This means that all new features developed by its author are initially exclusively available for their sponsors. 30 days after the exclusive release, all the new features will be released at the freely available open source repository at &lt;a href=&#34;https://github.com/ffuf/ffuf&#34;&gt;https://github.com/ffuf/ffuf&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;This model enables me to provide concrete benefits for the generous individuals and companies that enable me to work on &lt;code&gt;ffuf&lt;/code&gt;. The different sponsorship tiers can be seen &lt;a href=&#34;https://github.com/sponsors/joohoi&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All the community contributions are and will be available directly in the freely available open source repository. The exclusive version benefits only include new features created by &lt;a href=&#34;https://github.com/joohoi&#34;&gt;@joohoi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Access the sponsorware through code contributions&lt;/h3&gt; &#xA;&lt;p&gt;People that create significant contributions to the &lt;code&gt;ffuf&lt;/code&gt; project itself should and will have access to the sponsorware as well. If you are planning to create such a contribution, please contact &lt;a href=&#34;https://github.com/joohoi&#34;&gt;@joohoi&lt;/a&gt; first to ensure that there aren&#39;t other people working on the same feature.&lt;/p&gt; &#xA;&lt;h2&gt;Helper scripts and advanced payloads&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/ffuf/ffuf-scripts&#34;&gt;ffuf-scripts&lt;/a&gt; repository for helper scripts and payload generators for different workflows and usage scenarios.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ffuf is released under MIT license. See &lt;a href=&#34;https://github.com/ffuf/ffuf/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>junegunn/fzf</title>
    <updated>2022-09-26T01:33:43Z</updated>
    <id>tag:github.com,2022-09-26:/junegunn/fzf</id>
    <link href="https://github.com/junegunn/fzf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌸 A command-line fuzzy finder&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/fzf.png&#34; height=&#34;170&#34; alt=&#34;fzf - a command-line fuzzy finder&#34;&gt; &lt;a href=&#34;https://github.com/junegunn/fzf/actions&#34;&gt;&lt;img src=&#34;https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg?sanitize=true&#34; alt=&#34;github-actions&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;fzf is a general-purpose command-line fuzzy finder.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png&#34; width=&#34;640&#34;&gt; &#xA;&lt;p&gt;It&#39;s an interactive Unix filter for command-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Pros&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Portable, no dependencies&lt;/li&gt; &#xA; &lt;li&gt;Blazingly fast&lt;/li&gt; &#xA; &lt;li&gt;The most comprehensive feature set&lt;/li&gt; &#xA; &lt;li&gt;Flexible layout&lt;/li&gt; &#xA; &lt;li&gt;Batteries included &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Vim/Neovim plugin, key bindings, and fuzzy auto-completion&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-homebrew&#34;&gt;Using Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-git&#34;&gt;Using git&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-linux-package-managers&#34;&gt;Using Linux package managers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#as-vim-plugin&#34;&gt;As Vim plugin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#upgrading-fzf&#34;&gt;Upgrading fzf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#building-fzf&#34;&gt;Building fzf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#using-the-finder&#34;&gt;Using the finder&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#layout&#34;&gt;Layout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#search-syntax&#34;&gt;Search syntax&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#environment-variables&#34;&gt;Environment variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fzf-tmux-script&#34;&gt;&lt;code&gt;fzf-tmux&lt;/code&gt; script&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#key-bindings-for-command-line&#34;&gt;Key bindings for command-line&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fuzzy-completion-for-bash-and-zsh&#34;&gt;Fuzzy completion for bash and zsh&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#files-and-directories&#34;&gt;Files and directories&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#process-ids&#34;&gt;Process IDs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#host-names&#34;&gt;Host names&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#environment-variables--aliases&#34;&gt;Environment variables / Aliases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#settings&#34;&gt;Settings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#supported-commands&#34;&gt;Supported commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#custom-fuzzy-completion&#34;&gt;Custom fuzzy completion&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#vim-plugin&#34;&gt;Vim plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#advanced-topics&#34;&gt;Advanced topics&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#executing-external-programs&#34;&gt;Executing external programs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#reloading-the-candidate-list&#34;&gt;Reloading the candidate list&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#1-update-the-list-of-processes-by-pressing-ctrl-r&#34;&gt;1. Update the list of processes by pressing CTRL-R&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#2-switch-between-sources-by-pressing-ctrl-d-or-ctrl-f&#34;&gt;2. Switch between sources by pressing CTRL-D or CTRL-F&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#3-interactive-ripgrep-integration&#34;&gt;3. Interactive ripgrep integration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#preview-window&#34;&gt;Preview window&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#tips&#34;&gt;Tips&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#respecting-gitignore&#34;&gt;Respecting &lt;code&gt;.gitignore&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#fish-shell&#34;&gt;Fish shell&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#related-projects&#34;&gt;Related projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;fzf project consists of the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;fzf&lt;/code&gt; executable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fzf-tmux&lt;/code&gt; script for launching fzf in a tmux pane&lt;/li&gt; &#xA; &lt;li&gt;Shell extensions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Key bindings (&lt;code&gt;CTRL-T&lt;/code&gt;, &lt;code&gt;CTRL-R&lt;/code&gt;, and &lt;code&gt;ALT-C&lt;/code&gt;) (bash, zsh, fish)&lt;/li&gt; &#xA;   &lt;li&gt;Fuzzy auto-completion (bash, zsh)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vim/Neovim plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://github.com/junegunn/fzf/releases&#34;&gt;download fzf executable&lt;/a&gt; alone if you don&#39;t need the extra stuff.&lt;/p&gt; &#xA;&lt;h3&gt;Using Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; (on macOS or Linux) to install fzf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install fzf&#xA;&#xA;# To install useful key bindings and fuzzy completion:&#xA;$(brew --prefix)/opt/fzf/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;fzf is also available &lt;a href=&#34;https://github.com/macports/macports-ports/raw/master/sysutils/fzf/Portfile&#34;&gt;via MacPorts&lt;/a&gt;: &lt;code&gt;sudo port install fzf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using git&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can &#34;git clone&#34; this repository to any directory and run &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/install&#34;&gt;install&lt;/a&gt; script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf&#xA;~/.fzf/install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using Linux package managers&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package Manager&lt;/th&gt; &#xA;   &lt;th&gt;Linux Distribution&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APK&lt;/td&gt; &#xA;   &lt;td&gt;Alpine Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apk add fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;APT&lt;/td&gt; &#xA;   &lt;td&gt;Debian 9+/Ubuntu 19.10+&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo apt-get install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Conda&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;conda install -c conda-forge fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DNF&lt;/td&gt; &#xA;   &lt;td&gt;Fedora&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo dnf install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nix&lt;/td&gt; &#xA;   &lt;td&gt;NixOS, etc.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix-env -iA nixpkgs.fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pacman&lt;/td&gt; &#xA;   &lt;td&gt;Arch Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo pacman -S fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkg&lt;/td&gt; &#xA;   &lt;td&gt;FreeBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkgin&lt;/td&gt; &#xA;   &lt;td&gt;NetBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkgin install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pkg_add&lt;/td&gt; &#xA;   &lt;td&gt;OpenBSD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pkg_add fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XBPS&lt;/td&gt; &#xA;   &lt;td&gt;Void Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo xbps-install -S fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zypper&lt;/td&gt; &#xA;   &lt;td&gt;openSUSE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sudo zypper install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; &lt;strong&gt;Key bindings (CTRL-T / CTRL-R / ALT-C) and fuzzy auto-completion may not be enabled by default.&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Refer to the package documentation for more information. (e.g. &lt;code&gt;apt-cache show fzf&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/fzf/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/fzf.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Pre-built binaries for Windows can be downloaded &lt;a href=&#34;https://github.com/junegunn/fzf/releases&#34;&gt;here&lt;/a&gt;. fzf is also available via &lt;a href=&#34;https://chocolatey.org/packages/fzf&#34;&gt;Chocolatey&lt;/a&gt; and &lt;a href=&#34;https://github.com/ScoopInstaller/Main/raw/master/bucket/fzf.json&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package manager&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chocolatey&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;choco install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scoop&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scoop install fzf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Known issues and limitations on Windows can be found on &lt;a href=&#34;https://github.com/junegunn/fzf/wiki/Windows&#34;&gt;the wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;As Vim plugin&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;, add this line to your Vim configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;junegunn/fzf&#39;, { &#39;do&#39;: { -&amp;gt; fzf#install() } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fzf#install()&lt;/code&gt; makes sure that you have the latest binary, but it&#39;s optional, so you can omit it if you use a plugin manager that doesn&#39;t support hooks.&lt;/p&gt; &#xA;&lt;p&gt;For more installation options, see &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/README-VIM.md&#34;&gt;README-VIM.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading fzf&lt;/h2&gt; &#xA;&lt;p&gt;fzf is being actively developed, and you might want to upgrade it once in a while. Please follow the instruction below depending on the installation method used.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;git: &lt;code&gt;cd ~/.fzf &amp;amp;&amp;amp; git pull &amp;amp;&amp;amp; ./install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;brew: &lt;code&gt;brew update; brew upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;macports: &lt;code&gt;sudo port upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;chocolatey: &lt;code&gt;choco upgrade fzf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;vim-plug: &lt;code&gt;:PlugUpdate fzf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building fzf&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/BUILD.md&#34;&gt;BUILD.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;fzf will launch interactive finder, read the list from STDIN, and write the selected item to STDOUT.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;find * -type f | fzf &amp;gt; selected&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Without STDIN pipe, fzf will use find command to fetch the list of files excluding hidden ones. (You can override the default command with &lt;code&gt;FZF_DEFAULT_COMMAND&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim $(fzf)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using the finder&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-K&lt;/code&gt; / &lt;code&gt;CTRL-J&lt;/code&gt; (or &lt;code&gt;CTRL-P&lt;/code&gt; / &lt;code&gt;CTRL-N&lt;/code&gt;) to move cursor up and down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Enter&lt;/code&gt; key to select the item, &lt;code&gt;CTRL-C&lt;/code&gt; / &lt;code&gt;CTRL-G&lt;/code&gt; / &lt;code&gt;ESC&lt;/code&gt; to exit&lt;/li&gt; &#xA; &lt;li&gt;On multi-select mode (&lt;code&gt;-m&lt;/code&gt;), &lt;code&gt;TAB&lt;/code&gt; and &lt;code&gt;Shift-TAB&lt;/code&gt; to mark multiple items&lt;/li&gt; &#xA; &lt;li&gt;Emacs style key bindings&lt;/li&gt; &#xA; &lt;li&gt;Mouse: scroll, click, double-click; shift-click and shift-scroll on multi-select mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Layout&lt;/h4&gt; &#xA;&lt;p&gt;fzf by default starts in fullscreen mode, but you can make it start below the cursor with &lt;code&gt;--height&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim $(fzf --height 40%)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, check out &lt;code&gt;--reverse&lt;/code&gt; and &lt;code&gt;--layout&lt;/code&gt; options if you prefer &#34;top-down&#34; layout instead of the default &#34;bottom-up&#34; layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim $(fzf --height 40% --reverse)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add these options to &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt; so that they&#39;re applied by default. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export FZF_DEFAULT_OPTS=&#39;--height 40% --layout=reverse --border&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Search syntax&lt;/h4&gt; &#xA;&lt;p&gt;Unless otherwise specified, fzf starts in &#34;extended-search mode&#34; where you can type in multiple search terms delimited by spaces. e.g. &lt;code&gt;^music .mp3$ sbtrkt !fire&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Token&lt;/th&gt; &#xA;   &lt;th&gt;Match type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sbtrkt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;fuzzy-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that match &lt;code&gt;sbtrkt&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;wild&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;exact-match (quoted)&lt;/td&gt; &#xA;   &lt;td&gt;Items that include &lt;code&gt;wild&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;^music&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;prefix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.mp3$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;suffix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!fire&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not include &lt;code&gt;fire&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!^music&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-prefix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not start with &lt;code&gt;music&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;!.mp3$&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;inverse-suffix-exact-match&lt;/td&gt; &#xA;   &lt;td&gt;Items that do not end with &lt;code&gt;.mp3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If you don&#39;t prefer fuzzy matching and do not wish to &#34;quote&#34; every word, start fzf with &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;--exact&lt;/code&gt; option. Note that when &lt;code&gt;--exact&lt;/code&gt; is set, &lt;code&gt;&#39;&lt;/code&gt;-prefix &#34;unquotes&#34; the term.&lt;/p&gt; &#xA;&lt;p&gt;A single bar character term acts as an OR operator. For example, the following query matches entries that start with &lt;code&gt;core&lt;/code&gt; and end with either &lt;code&gt;go&lt;/code&gt;, &lt;code&gt;rb&lt;/code&gt;, or &lt;code&gt;py&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;^core go$ | rb$ | py$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environment variables&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FZF_DEFAULT_COMMAND&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default command to use when input is tty&lt;/li&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type f&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;&lt;span&gt;⚠&lt;/span&gt; This variable is not used by shell extensions due to the slight difference in requirements.&lt;/p&gt; &#xA;     &lt;p&gt;(e.g. &lt;code&gt;CTRL-T&lt;/code&gt; runs &lt;code&gt;$FZF_CTRL_T_COMMAND&lt;/code&gt; instead, &lt;code&gt;vim **&amp;lt;tab&amp;gt;&lt;/code&gt; runs &lt;code&gt;_fzf_compgen_path()&lt;/code&gt;, and &lt;code&gt;cd **&amp;lt;tab&amp;gt;&lt;/code&gt; runs &lt;code&gt;_fzf_compgen_dir()&lt;/code&gt;)&lt;/p&gt; &#xA;     &lt;p&gt;The available options are described later in this document.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FZF_DEFAULT_OPTS&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default options&lt;/li&gt; &#xA;   &lt;li&gt;e.g. &lt;code&gt;export FZF_DEFAULT_OPTS=&#34;--layout=reverse --inline-info&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Options&lt;/h4&gt; &#xA;&lt;p&gt;See the man page (&lt;code&gt;man fzf&lt;/code&gt;) for the full list of options.&lt;/p&gt; &#xA;&lt;h4&gt;Demo&lt;/h4&gt; &#xA;&lt;p&gt;If you learn by watching videos, check out this screencast by &lt;a href=&#34;https://github.com/samoshkin&#34;&gt;@samoshkin&lt;/a&gt; to explore &lt;code&gt;fzf&lt;/code&gt; features.&lt;/p&gt; &#xA;&lt;a title=&#34;fzf - command-line fuzzy finder&#34; href=&#34;https://www.youtube.com/watch?v=qgG5Jhi_Els&#34;&gt; &lt;img src=&#34;https://i.imgur.com/vtG8olE.png&#34; width=&#34;640&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/wiki/examples&#34;&gt;Wiki page of examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;Disclaimer: The examples on this page are maintained by the community and are not thoroughly tested&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md&#34;&gt;Advanced fzf examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;fzf-tmux&lt;/code&gt; script&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/bin/fzf-tmux&#34;&gt;fzf-tmux&lt;/a&gt; is a bash script that opens fzf in a tmux pane.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# usage: fzf-tmux [LAYOUT OPTIONS] [--] [FZF OPTIONS]&#xA;&#xA;# See available options&#xA;fzf-tmux --help&#xA;&#xA;# select git branches in horizontal split below (15 lines)&#xA;git branch | fzf-tmux -d 15&#xA;&#xA;# select multiple words in vertical split on the left (20% of screen width)&#xA;cat /usr/share/dict/words | fzf-tmux -l 20% --multi --reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will still work even when you&#39;re not on tmux, silently ignoring &lt;code&gt;-[pudlr]&lt;/code&gt; options, so you can invariably use &lt;code&gt;fzf-tmux&lt;/code&gt; in your scripts.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;--height HEIGHT[%]&lt;/code&gt; option not to start fzf in fullscreen mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fzf --height 40%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Key bindings for command-line&lt;/h2&gt; &#xA;&lt;p&gt;The install script will setup the following key bindings for bash, zsh, and fish.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-T&lt;/code&gt; - Paste the selected files and directories onto the command-line &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt; to override the default command&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_T_OPTS&lt;/code&gt; to pass additional options&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CTRL-R&lt;/code&gt; - Paste the selected command from history onto the command-line &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you want to see the commands in chronological order, press &lt;code&gt;CTRL-R&lt;/code&gt; again which toggles sorting by relevance&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_CTRL_R_OPTS&lt;/code&gt; to pass additional options&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALT-C&lt;/code&gt; - cd into the selected directory &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_ALT_C_COMMAND&lt;/code&gt; to override the default command&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;FZF_ALT_C_OPTS&lt;/code&gt; to pass additional options&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re on a tmux session, you can start fzf in a tmux split-pane or in a tmux popup window by setting &lt;code&gt;FZF_TMUX_OPTS&lt;/code&gt; (e.g. &lt;code&gt;-d 40%&lt;/code&gt;). See &lt;code&gt;fzf-tmux --help&lt;/code&gt; for available options.&lt;/p&gt; &#xA;&lt;p&gt;More tips can be found on &lt;a href=&#34;https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings&#34;&gt;the wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Fuzzy completion for bash and zsh&lt;/h2&gt; &#xA;&lt;h4&gt;Files and directories&lt;/h4&gt; &#xA;&lt;p&gt;Fuzzy completion for files and directories can be triggered if the word before the cursor ends with the trigger sequence, which is by default &lt;code&gt;**&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;COMMAND [DIRECTORY/][FUZZY_PATTERN]**&amp;lt;TAB&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Files under the current directory&#xA;# - You can select multiple items with TAB key&#xA;vim **&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under parent directory&#xA;vim ../**&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under parent directory that match `fzf`&#xA;vim ../fzf**&amp;lt;TAB&amp;gt;&#xA;&#xA;# Files under your home directory&#xA;vim ~/**&amp;lt;TAB&amp;gt;&#xA;&#xA;&#xA;# Directories under current directory (single-selection)&#xA;cd **&amp;lt;TAB&amp;gt;&#xA;&#xA;# Directories under ~/github that match `fzf`&#xA;cd ~/github/fzf**&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Process IDs&lt;/h4&gt; &#xA;&lt;p&gt;Fuzzy completion for PIDs is provided for kill command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Can select multiple processes with &amp;lt;TAB&amp;gt; or &amp;lt;Shift-TAB&amp;gt; keys&#xA;kill -9 **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Host names&lt;/h4&gt; &#xA;&lt;p&gt;For ssh and telnet commands, fuzzy completion for hostnames is provided. The names are extracted from /etc/hosts and ~/.ssh/config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh **&amp;lt;TAB&amp;gt;&#xA;telnet **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environment variables / Aliases&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;unset **&amp;lt;TAB&amp;gt;&#xA;export **&amp;lt;TAB&amp;gt;&#xA;unalias **&amp;lt;TAB&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Settings&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Use ~~ as the trigger sequence instead of the default **&#xA;export FZF_COMPLETION_TRIGGER=&#39;~~&#39;&#xA;&#xA;# Options to fzf command&#xA;export FZF_COMPLETION_OPTS=&#39;--border --info=inline&#39;&#xA;&#xA;# Use fd (https://github.com/sharkdp/fd) instead of the default find&#xA;# command for listing path candidates.&#xA;# - The first argument to the function ($1) is the base path to start traversal&#xA;# - See the source code (completion.{bash,zsh}) for the details.&#xA;_fzf_compgen_path() {&#xA;  fd --hidden --follow --exclude &#34;.git&#34; . &#34;$1&#34;&#xA;}&#xA;&#xA;# Use fd to generate the list for directory completion&#xA;_fzf_compgen_dir() {&#xA;  fd --type d --hidden --follow --exclude &#34;.git&#34; . &#34;$1&#34;&#xA;}&#xA;&#xA;# (EXPERIMENTAL) Advanced customization of fzf options via _fzf_comprun function&#xA;# - The first argument to the function is the name of the command.&#xA;# - You should make sure to pass the rest of the arguments to fzf.&#xA;_fzf_comprun() {&#xA;  local command=$1&#xA;  shift&#xA;&#xA;  case &#34;$command&#34; in&#xA;    cd)           fzf &#34;$@&#34; --preview &#39;tree -C {} | head -200&#39; ;;&#xA;    export|unset) fzf &#34;$@&#34; --preview &#34;eval &#39;echo \$&#39;{}&#34; ;;&#xA;    ssh)          fzf &#34;$@&#34; --preview &#39;dig {}&#39; ;;&#xA;    *)            fzf &#34;$@&#34; ;;&#xA;  esac&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Supported commands&lt;/h4&gt; &#xA;&lt;p&gt;On bash, fuzzy completion is enabled only for a predefined set of commands (&lt;code&gt;complete | grep _fzf&lt;/code&gt; to see the list). But you can enable it for other commands as well by using &lt;code&gt;_fzf_setup_completion&lt;/code&gt; helper function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# usage: _fzf_setup_completion path|dir|var|alias|host COMMANDS...&#xA;_fzf_setup_completion path ag git kubectl&#xA;_fzf_setup_completion dir tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom fuzzy completion&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;(Custom completion API is experimental and subject to change)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a command named &lt;em&gt;&#34;COMMAND&#34;&lt;/em&gt;, define &lt;code&gt;_fzf_complete_COMMAND&lt;/code&gt; function using &lt;code&gt;_fzf_complete&lt;/code&gt; helper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Custom fuzzy completion for &#34;doge&#34; command&#xA;#   e.g. doge **&amp;lt;TAB&amp;gt;&#xA;_fzf_complete_doge() {&#xA;  _fzf_complete --multi --reverse --prompt=&#34;doge&amp;gt; &#34; -- &#34;$@&#34; &amp;lt; &amp;lt;(&#xA;    echo very&#xA;    echo wow&#xA;    echo such&#xA;    echo doge&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The arguments before &lt;code&gt;--&lt;/code&gt; are the options to fzf.&lt;/li&gt; &#xA; &lt;li&gt;After &lt;code&gt;--&lt;/code&gt;, simply pass the original completion arguments unchanged (&lt;code&gt;&#34;$@&#34;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Then, write a set of commands that generates the completion candidates and feed its output to the function using process substitution (&lt;code&gt;&amp;lt; &amp;lt;(...)&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;zsh will automatically pick up the function using the naming convention but in bash you have to manually associate the function with the command using the &lt;code&gt;complete&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[ -n &#34;$BASH&#34; ] &amp;amp;&amp;amp; complete -F _fzf_complete_doge -o default -o bashdefault doge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to post-process the output from fzf, define &lt;code&gt;_fzf_complete_COMMAND_post&lt;/code&gt; as follows.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;_fzf_complete_foo() {&#xA;  _fzf_complete --multi --reverse --header-lines=3 -- &#34;$@&#34; &amp;lt; &amp;lt;(&#xA;    ls -al&#xA;  )&#xA;}&#xA;&#xA;_fzf_complete_foo_post() {&#xA;  awk &#39;{print $NF}&#39;&#xA;}&#xA;&#xA;[ -n &#34;$BASH&#34; ] &amp;amp;&amp;amp; complete -F _fzf_complete_foo -o default -o bashdefault foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Vim plugin&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/README-VIM.md&#34;&gt;README-VIM.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced topics&lt;/h2&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;fzf is fast and is &lt;a href=&#34;https://junegunn.kr/images/fzf-0.17.0.png&#34;&gt;getting even faster&lt;/a&gt;. Performance should not be a problem in most use cases. However, you might want to be aware of the options that affect performance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--ansi&lt;/code&gt; tells fzf to extract and parse ANSI color codes in the input, and it makes the initial scanning slower. So it&#39;s not recommended that you add it to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--nth&lt;/code&gt; makes fzf slower because it has to tokenize each line.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--with-nth&lt;/code&gt; makes fzf slower as fzf has to tokenize and reassemble each line.&lt;/li&gt; &#xA; &lt;li&gt;If you absolutely need better performance, you can consider using &lt;code&gt;--algo=v1&lt;/code&gt; (the default being &lt;code&gt;v2&lt;/code&gt;) to make fzf use a faster greedy algorithm. However, this algorithm is not guaranteed to find the optimal ordering of the matches and is not recommended.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Executing external programs&lt;/h3&gt; &#xA;&lt;p&gt;You can set up key bindings for starting external processes without leaving fzf (&lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;execute-silent&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Press F1 to open the file with less without leaving fzf&#xA;# Press CTRL-Y to copy the line to clipboard and aborts fzf (requires pbcopy)&#xA;fzf --bind &#39;f1:execute(less -f {}),ctrl-y:execute-silent(echo {} | pbcopy)+abort&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;em&gt;KEY BINDINGS&lt;/em&gt; section of the man page for details.&lt;/p&gt; &#xA;&lt;h3&gt;Reloading the candidate list&lt;/h3&gt; &#xA;&lt;p&gt;By binding &lt;code&gt;reload&lt;/code&gt; action to a key or an event, you can make fzf dynamically reload the candidate list. See &lt;a href=&#34;https://github.com/junegunn/fzf/issues/1750&#34;&gt;https://github.com/junegunn/fzf/issues/1750&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h4&gt;1. Update the list of processes by pressing CTRL-R&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;FZF_DEFAULT_COMMAND=&#39;ps -ef&#39; \&#xA;  fzf --bind &#39;ctrl-r:reload(eval &#34;$FZF_DEFAULT_COMMAND&#34;)&#39; \&#xA;      --header &#39;Press CTRL-R to reload&#39; --header-lines=1 \&#xA;      --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Switch between sources by pressing CTRL-D or CTRL-F&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;FZF_DEFAULT_COMMAND=&#39;find . -type f&#39; \&#xA;  fzf --bind &#39;ctrl-d:reload(find . -type d),ctrl-f:reload(eval &#34;$FZF_DEFAULT_COMMAND&#34;)&#39; \&#xA;      --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Interactive ripgrep integration&lt;/h4&gt; &#xA;&lt;p&gt;The following example uses fzf as the selector interface for ripgrep. We bound &lt;code&gt;reload&lt;/code&gt; action to &lt;code&gt;change&lt;/code&gt; event, so every time you type on fzf, the ripgrep process will restart with the updated query string denoted by the placeholder expression &lt;code&gt;{q}&lt;/code&gt;. Also, note that we used &lt;code&gt;--disabled&lt;/code&gt; option so that fzf doesn&#39;t perform any secondary filtering.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;INITIAL_QUERY=&#34;&#34;&#xA;RG_PREFIX=&#34;rg --column --line-number --no-heading --color=always --smart-case &#34;&#xA;FZF_DEFAULT_COMMAND=&#34;$RG_PREFIX &#39;$INITIAL_QUERY&#39;&#34; \&#xA;  fzf --bind &#34;change:reload:$RG_PREFIX {q} || true&#34; \&#xA;      --ansi --disabled --query &#34;$INITIAL_QUERY&#34; \&#xA;      --height=50% --layout=reverse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If ripgrep doesn&#39;t find any matches, it will exit with a non-zero exit status, and fzf will warn you about it. To suppress the warning message, we added &lt;code&gt;|| true&lt;/code&gt; to the command, so that it always exits with 0.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md#using-fzf-as-interative-ripgrep-launcher&#34;&gt;&#34;Using fzf as interative Ripgrep launcher&#34;&lt;/a&gt; for a fuller example with preview window options.&lt;/p&gt; &#xA;&lt;h3&gt;Preview window&lt;/h3&gt; &#xA;&lt;p&gt;When the &lt;code&gt;--preview&lt;/code&gt; option is set, fzf automatically starts an external process with the current line as the argument and shows the result in the split window. Your &lt;code&gt;$SHELL&lt;/code&gt; is used to execute the command with &lt;code&gt;$SHELL -c COMMAND&lt;/code&gt;. The window can be scrolled using the mouse or custom key bindings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# {} is replaced with the single-quoted string of the focused line&#xA;fzf --preview &#39;cat {}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preview window supports ANSI colors, so you can use any program that syntax-highlights the content of a file, such as &lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;Bat&lt;/a&gt; or &lt;a href=&#34;http://www.andre-simon.de/doku/highlight/en/highlight.php&#34;&gt;Highlight&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fzf --preview &#39;bat --style=numbers --color=always --line-range :500 {}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can customize the size, position, and border of the preview window using &lt;code&gt;--preview-window&lt;/code&gt; option, and the foreground and background color of it with &lt;code&gt;--color&lt;/code&gt; option. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fzf --height 40% --layout reverse --info inline --border \&#xA;    --preview &#39;file {}&#39; --preview-window up,1,border-horizontal \&#xA;    --color &#39;fg:#bbccdd,fg+:#ddeeff,bg:#334455,preview-bg:#223344,border:#778899&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the man page (&lt;code&gt;man fzf&lt;/code&gt;) for the full list of options.&lt;/p&gt; &#xA;&lt;p&gt;More advanced examples can be found &lt;a href=&#34;https://github.com/junegunn/fzf/raw/master/ADVANCED.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Since fzf is a general-purpose text filter rather than a file finder, &lt;strong&gt;it is not a good idea to add &lt;code&gt;--preview&lt;/code&gt; option to your &lt;code&gt;$FZF_DEFAULT_OPTS&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# *********************&#xA;# ** DO NOT DO THIS! **&#xA;# *********************&#xA;export FZF_DEFAULT_OPTS=&#39;--preview &#34;bat --style=numbers --color=always --line-range :500 {}&#34;&#39;&#xA;&#xA;# bat doesn&#39;t work with any input other than the list of files&#xA;ps -ef | fzf&#xA;seq 100 | fzf&#xA;history | fzf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h4&gt;Respecting &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt;, &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;, or &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;the silver searcher&lt;/a&gt; instead of the default find command to traverse the file system while respecting &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Feed the output of fd into fzf&#xA;fd --type f --strip-cwd-prefix | fzf&#xA;&#xA;# Setting fd as the default source for fzf&#xA;export FZF_DEFAULT_COMMAND=&#39;fd --type f --strip-cwd-prefix&#39;&#xA;&#xA;# Now fzf (w/o pipe) will use fd instead of find&#xA;fzf&#xA;&#xA;# To apply the command to CTRL-T as well&#xA;export FZF_CTRL_T_COMMAND=&#34;$FZF_DEFAULT_COMMAND&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the command to follow symbolic links and don&#39;t want it to exclude hidden files, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export FZF_DEFAULT_COMMAND=&#39;fd --type f --strip-cwd-prefix --hidden --follow --exclude .git&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fish shell&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;CTRL-T&lt;/code&gt; key binding of fish, unlike those of bash and zsh, will use the last token on the command-line as the root directory for the recursive search. For instance, hitting &lt;code&gt;CTRL-T&lt;/code&gt; at the end of the following command-line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ls /var/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will list all files and directories under &lt;code&gt;/var/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using a custom &lt;code&gt;FZF_CTRL_T_COMMAND&lt;/code&gt;, use the unexpanded &lt;code&gt;$dir&lt;/code&gt; variable to make use of this feature. &lt;code&gt;$dir&lt;/code&gt; defaults to &lt;code&gt;.&lt;/code&gt; when the last token is not a valid directory. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set -g FZF_CTRL_T_COMMAND &#34;command find -L \$dir -type f 2&amp;gt; /dev/null | sed &#39;1d; s#^\./##&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/fzf/wiki/Related-projects&#34;&gt;https://github.com/junegunn/fzf/wiki/Related-projects&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/junegunn/fzf/master/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013-2021 Junegunn Choi&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>filebrowser/filebrowser</title>
    <updated>2022-09-26T01:33:43Z</updated>
    <id>tag:github.com,2022-09-26:/filebrowser/filebrowser</id>
    <link href="https://github.com/filebrowser/filebrowser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📂 Web File Browser&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/filebrowser/logo/master/banner.png&#34; width=&#34;550&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5447088/50716739-ebd26700-107a-11e9-9817-14230c53efd2.gif&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/filebrowser/filebrowser/actions/workflows/main.yaml&#34;&gt;&lt;img src=&#34;https://github.com/filebrowser/filebrowser/actions/workflows/main.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/filebrowser/filebrowser&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/filebrowser/filebrowser?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/filebrowser/filebrowser&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-reference-blue.svg?style=flat-square&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/filebrowser/filebrowser/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/filebrowser/filebrowser.svg?style=flat-square&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://webchat.freenode.net/?channels=%23filebrowser&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/freenode-%23filebrowser-blue.svg?style=flat-square&#34; alt=&#34;Chat IRC&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;filebrowser provides a file managing interface within a specified directory and it can be used to upload, delete, preview, rename and edit your files. It allows the creation of multiple users and each user can have its own directory. It can be used as a standalone app.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our docs at &lt;a href=&#34;https://filebrowser.org/features&#34;&gt;https://filebrowser.org/features&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;For installation instructions please refer to our docs at &lt;a href=&#34;https://filebrowser.org/installation&#34;&gt;https://filebrowser.org/installation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://filebrowser.org/configuration/authentication-method&#34;&gt;Authentication Method&lt;/a&gt; - You can change the way the user authenticates with the filebrowser server&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://filebrowser.org/configuration/command-runner&#34;&gt;Command Runner&lt;/a&gt; - The command runner is a feature that enables you to execute any shell command you want before or after a certain event.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://filebrowser.org/configuration/custom-branding&#34;&gt;Custom Branding&lt;/a&gt; - You can customize your File Browser installation by change its name to any other you want, by adding a global custom style sheet and by using your own logotype if you want.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing to this project, our docs are best places to start &lt;a href=&#34;https://filebrowser.org/contributing&#34;&gt;https://filebrowser.org/contributing&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>