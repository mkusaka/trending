<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:43:05Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-chi/chi</title>
    <updated>2022-08-02T01:43:05Z</updated>
    <id>tag:github.com,2022-08-02:/go-chi/chi</id>
    <link href="https://github.com/go-chi/chi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lightweight, idiomatic and composable router for building Go HTTP services&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img alt=&#34;chi&#34; src=&#34;https://cdn.rawgit.com/go-chi/chi/master/_examples/chi.svg?sanitize=true&#34; width=&#34;220&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi?tab=versions&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-chi/chi?status.svg?sanitize=true&#34; alt=&#34;GoDoc Widget&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/go-chi/chi&#34;&gt;&lt;img src=&#34;https://travis-ci.org/go-chi/chi.svg?branch=master&#34; alt=&#34;Travis Widget&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;chi&lt;/code&gt; is a lightweight, idiomatic and composable router for building Go HTTP services. It&#39;s especially good at helping you write large REST API services that are kept maintainable as your project grows and changes. &lt;code&gt;chi&lt;/code&gt; is built on the new &lt;code&gt;context&lt;/code&gt; package introduced in Go 1.7 to handle signaling, cancelation and request-scoped values across a handler chain.&lt;/p&gt; &#xA;&lt;p&gt;The focus of the project has been to seek out an elegant and comfortable design for writing REST API servers, written during the development of the Pressly API service that powers our public API service, which in turn powers all of our client-side applications.&lt;/p&gt; &#xA;&lt;p&gt;The key considerations of chi&#39;s design are: project structure, maintainability, standard http handlers (stdlib-only), developer productivity, and deconstructing a large system into many small parts. The core router &lt;code&gt;github.com/go-chi/chi&lt;/code&gt; is quite small (less than 1000 LOC), but we&#39;ve also included some useful/optional subpackages: &lt;a href=&#34;https://raw.githubusercontent.com/go-chi/chi/master/middleware&#34;&gt;middleware&lt;/a&gt;, &lt;a href=&#34;https://github.com/go-chi/render&#34;&gt;render&lt;/a&gt; and &lt;a href=&#34;https://github.com/go-chi/docgen&#34;&gt;docgen&lt;/a&gt;. We hope you enjoy it too!&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;go get -u github.com/go-chi/chi/v5&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt; - cloc&#39;d in ~1000 LOC for the chi router&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; - yes, see &lt;a href=&#34;https://raw.githubusercontent.com/go-chi/chi/master/#benchmarks&#34;&gt;benchmarks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;100% compatible with net/http&lt;/strong&gt; - use any http or middleware pkg in the ecosystem that is also compatible with &lt;code&gt;net/http&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Designed for modular/composable APIs&lt;/strong&gt; - middlewares, inline middlewares, route groups and sub-router mounting&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Context control&lt;/strong&gt; - built on new &lt;code&gt;context&lt;/code&gt; package, providing value chaining, cancellations and timeouts&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robust&lt;/strong&gt; - in production at Pressly, Cloudflare, Heroku, 99Designs, and many others (see &lt;a href=&#34;https://github.com/go-chi/chi/issues/91&#34;&gt;discussion&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Doc generation&lt;/strong&gt; - &lt;code&gt;docgen&lt;/code&gt; auto-generates routing documentation from your source to JSON or Markdown&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go.mod support&lt;/strong&gt; - as of v5, go.mod support (see &lt;a href=&#34;https://github.com/go-chi/chi/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No external dependencies&lt;/strong&gt; - plain ol&#39; Go stdlib + net/http&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/go-chi/chi/raw/master/_examples/&#34;&gt;_examples/&lt;/a&gt; for a variety of examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;As easy as:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;net/http&#34;&#xA;&#xA;&#x9;&#34;github.com/go-chi/chi/v5&#34;&#xA;&#x9;&#34;github.com/go-chi/chi/v5/middleware&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;r := chi.NewRouter()&#xA;&#x9;r.Use(middleware.Logger)&#xA;&#x9;r.Get(&#34;/&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;&#x9;w.Write([]byte(&#34;welcome&#34;))&#xA;&#x9;})&#xA;&#x9;http.ListenAndServe(&#34;:3000&#34;, r)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;REST Preview:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a little preview of how routing looks like with chi. Also take a look at the generated routing docs in JSON (&lt;a href=&#34;https://github.com/go-chi/chi/raw/master/_examples/rest/routes.json&#34;&gt;routes.json&lt;/a&gt;) and in Markdown (&lt;a href=&#34;https://github.com/go-chi/chi/raw/master/_examples/rest/routes.md&#34;&gt;routes.md&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;I highly recommend reading the source of the &lt;a href=&#34;https://github.com/go-chi/chi/raw/master/_examples/&#34;&gt;examples&lt;/a&gt; listed above, they will show you all the features of chi and serve as a good form of documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;  //...&#xA;  &#34;context&#34;&#xA;  &#34;github.com/go-chi/chi/v5&#34;&#xA;  &#34;github.com/go-chi/chi/v5/middleware&#34;&#xA;)&#xA;&#xA;func main() {&#xA;  r := chi.NewRouter()&#xA;&#xA;  // A good base middleware stack&#xA;  r.Use(middleware.RequestID)&#xA;  r.Use(middleware.RealIP)&#xA;  r.Use(middleware.Logger)&#xA;  r.Use(middleware.Recoverer)&#xA;&#xA;  // Set a timeout value on the request context (ctx), that will signal&#xA;  // through ctx.Done() that the request has timed out and further&#xA;  // processing should be stopped.&#xA;  r.Use(middleware.Timeout(60 * time.Second))&#xA;&#xA;  r.Get(&#34;/&#34;, func(w http.ResponseWriter, r *http.Request) {&#xA;    w.Write([]byte(&#34;hi&#34;))&#xA;  })&#xA;&#xA;  // RESTy routes for &#34;articles&#34; resource&#xA;  r.Route(&#34;/articles&#34;, func(r chi.Router) {&#xA;    r.With(paginate).Get(&#34;/&#34;, listArticles)                           // GET /articles&#xA;    r.With(paginate).Get(&#34;/{month}-{day}-{year}&#34;, listArticlesByDate) // GET /articles/01-16-2017&#xA;&#xA;    r.Post(&#34;/&#34;, createArticle)                                        // POST /articles&#xA;    r.Get(&#34;/search&#34;, searchArticles)                                  // GET /articles/search&#xA;&#xA;    // Regexp url parameters:&#xA;    r.Get(&#34;/{articleSlug:[a-z-]+}&#34;, getArticleBySlug)                // GET /articles/home-is-toronto&#xA;&#xA;    // Subrouters:&#xA;    r.Route(&#34;/{articleID}&#34;, func(r chi.Router) {&#xA;      r.Use(ArticleCtx)&#xA;      r.Get(&#34;/&#34;, getArticle)                                          // GET /articles/123&#xA;      r.Put(&#34;/&#34;, updateArticle)                                       // PUT /articles/123&#xA;      r.Delete(&#34;/&#34;, deleteArticle)                                    // DELETE /articles/123&#xA;    })&#xA;  })&#xA;&#xA;  // Mount the admin sub-router&#xA;  r.Mount(&#34;/admin&#34;, adminRouter())&#xA;&#xA;  http.ListenAndServe(&#34;:3333&#34;, r)&#xA;}&#xA;&#xA;func ArticleCtx(next http.Handler) http.Handler {&#xA;  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;    articleID := chi.URLParam(r, &#34;articleID&#34;)&#xA;    article, err := dbGetArticle(articleID)&#xA;    if err != nil {&#xA;      http.Error(w, http.StatusText(404), 404)&#xA;      return&#xA;    }&#xA;    ctx := context.WithValue(r.Context(), &#34;article&#34;, article)&#xA;    next.ServeHTTP(w, r.WithContext(ctx))&#xA;  })&#xA;}&#xA;&#xA;func getArticle(w http.ResponseWriter, r *http.Request) {&#xA;  ctx := r.Context()&#xA;  article, ok := ctx.Value(&#34;article&#34;).(*Article)&#xA;  if !ok {&#xA;    http.Error(w, http.StatusText(422), 422)&#xA;    return&#xA;  }&#xA;  w.Write([]byte(fmt.Sprintf(&#34;title:%s&#34;, article.Title)))&#xA;}&#xA;&#xA;// A completely separate router for administrator routes&#xA;func adminRouter() http.Handler {&#xA;  r := chi.NewRouter()&#xA;  r.Use(AdminOnly)&#xA;  r.Get(&#34;/&#34;, adminIndex)&#xA;  r.Get(&#34;/accounts&#34;, adminListAccounts)&#xA;  return r&#xA;}&#xA;&#xA;func AdminOnly(next http.Handler) http.Handler {&#xA;  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;    ctx := r.Context()&#xA;    perm, ok := ctx.Value(&#34;acl.permission&#34;).(YourPermissionType)&#xA;    if !ok || !perm.IsAdmin() {&#xA;      http.Error(w, http.StatusText(403), 403)&#xA;      return&#xA;    }&#xA;    next.ServeHTTP(w, r)&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Router interface&lt;/h2&gt; &#xA;&lt;p&gt;chi&#39;s router is based on a kind of &lt;a href=&#34;https://en.wikipedia.org/wiki/Radix_tree&#34;&gt;Patricia Radix trie&lt;/a&gt;. The router is fully compatible with &lt;code&gt;net/http&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Built on top of the tree is the &lt;code&gt;Router&lt;/code&gt; interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Router consisting of the core routing methods used by chi&#39;s Mux,&#xA;// using only the standard net/http.&#xA;type Router interface {&#xA;&#x9;http.Handler&#xA;&#x9;Routes&#xA;&#xA;&#x9;// Use appends one or more middlewares onto the Router stack.&#xA;&#x9;Use(middlewares ...func(http.Handler) http.Handler)&#xA;&#xA;&#x9;// With adds inline middlewares for an endpoint handler.&#xA;&#x9;With(middlewares ...func(http.Handler) http.Handler) Router&#xA;&#xA;&#x9;// Group adds a new inline-Router along the current routing&#xA;&#x9;// path, with a fresh middleware stack for the inline-Router.&#xA;&#x9;Group(fn func(r Router)) Router&#xA;&#xA;&#x9;// Route mounts a sub-Router along a `pattern`` string.&#xA;&#x9;Route(pattern string, fn func(r Router)) Router&#xA;&#xA;&#x9;// Mount attaches another http.Handler along ./pattern/*&#xA;&#x9;Mount(pattern string, h http.Handler)&#xA;&#xA;&#x9;// Handle and HandleFunc adds routes for `pattern` that matches&#xA;&#x9;// all HTTP methods.&#xA;&#x9;Handle(pattern string, h http.Handler)&#xA;&#x9;HandleFunc(pattern string, h http.HandlerFunc)&#xA;&#xA;&#x9;// Method and MethodFunc adds routes for `pattern` that matches&#xA;&#x9;// the `method` HTTP method.&#xA;&#x9;Method(method, pattern string, h http.Handler)&#xA;&#x9;MethodFunc(method, pattern string, h http.HandlerFunc)&#xA;&#xA;&#x9;// HTTP-method routing along `pattern`&#xA;&#x9;Connect(pattern string, h http.HandlerFunc)&#xA;&#x9;Delete(pattern string, h http.HandlerFunc)&#xA;&#x9;Get(pattern string, h http.HandlerFunc)&#xA;&#x9;Head(pattern string, h http.HandlerFunc)&#xA;&#x9;Options(pattern string, h http.HandlerFunc)&#xA;&#x9;Patch(pattern string, h http.HandlerFunc)&#xA;&#x9;Post(pattern string, h http.HandlerFunc)&#xA;&#x9;Put(pattern string, h http.HandlerFunc)&#xA;&#x9;Trace(pattern string, h http.HandlerFunc)&#xA;&#xA;&#x9;// NotFound defines a handler to respond whenever a route could&#xA;&#x9;// not be found.&#xA;&#x9;NotFound(h http.HandlerFunc)&#xA;&#xA;&#x9;// MethodNotAllowed defines a handler to respond whenever a method is&#xA;&#x9;// not allowed.&#xA;&#x9;MethodNotAllowed(h http.HandlerFunc)&#xA;}&#xA;&#xA;// Routes interface adds two methods for router traversal, which is also&#xA;// used by the github.com/go-chi/docgen package to generate documentation for Routers.&#xA;type Routes interface {&#xA;&#x9;// Routes returns the routing tree in an easily traversable structure.&#xA;&#x9;Routes() []Route&#xA;&#xA;&#x9;// Middlewares returns the list of middlewares in use by the router.&#xA;&#x9;Middlewares() Middlewares&#xA;&#xA;&#x9;// Match searches the routing tree for a handler that matches&#xA;&#x9;// the method/path - similar to routing a http request, but without&#xA;&#x9;// executing the handler thereafter.&#xA;&#x9;Match(rctx *Context, method, path string) bool&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each routing method accepts a URL &lt;code&gt;pattern&lt;/code&gt; and chain of &lt;code&gt;handlers&lt;/code&gt;. The URL pattern supports named params (ie. &lt;code&gt;/users/{userID}&lt;/code&gt;) and wildcards (ie. &lt;code&gt;/admin/*&lt;/code&gt;). URL parameters can be fetched at runtime by calling &lt;code&gt;chi.URLParam(r, &#34;userID&#34;)&lt;/code&gt; for named parameters and &lt;code&gt;chi.URLParam(r, &#34;*&#34;)&lt;/code&gt; for a wildcard parameter.&lt;/p&gt; &#xA;&lt;h3&gt;Middleware handlers&lt;/h3&gt; &#xA;&lt;p&gt;chi&#39;s middlewares are just stdlib net/http middleware handlers. There is nothing special about them, which means the router and all the tooling is designed to be compatible and friendly with any middleware in the community. This offers much better extensibility and reuse of packages and is at the heart of chi&#39;s purpose.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of a standard net/http middleware where we assign a context key &lt;code&gt;&#34;user&#34;&lt;/code&gt; the value of &lt;code&gt;&#34;123&#34;&lt;/code&gt;. This middleware sets a hypothetical user identifier on the request context and calls the next handler in the chain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// HTTP middleware setting a value on the request context&#xA;func MyMiddleware(next http.Handler) http.Handler {&#xA;  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;    // create new context from `r` request context, and assign key `&#34;user&#34;`&#xA;    // to value of `&#34;123&#34;`&#xA;    ctx := context.WithValue(r.Context(), &#34;user&#34;, &#34;123&#34;)&#xA;&#xA;    // call the next handler in the chain, passing the response writer and&#xA;    // the updated request object with the new context value.&#xA;    //&#xA;    // note: context.Context values are nested, so any previously set&#xA;    // values will be accessible as well, and the new `&#34;user&#34;` key&#xA;    // will be accessible from this point forward.&#xA;    next.ServeHTTP(w, r.WithContext(ctx))&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request handlers&lt;/h3&gt; &#xA;&lt;p&gt;chi uses standard net/http request handlers. This little snippet is an example of a http.Handler func that reads a user identifier from the request context - hypothetically, identifying the user sending an authenticated request, validated+set by a previous middleware handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// HTTP handler accessing data from the request context.&#xA;func MyRequestHandler(w http.ResponseWriter, r *http.Request) {&#xA;  // here we read from the request context and fetch out `&#34;user&#34;` key set in&#xA;  // the MyMiddleware example above.&#xA;  user := r.Context().Value(&#34;user&#34;).(string)&#xA;&#xA;  // respond to the client&#xA;  w.Write([]byte(fmt.Sprintf(&#34;hi %s&#34;, user)))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;URL parameters&lt;/h3&gt; &#xA;&lt;p&gt;chi&#39;s router parses and stores URL parameters right onto the request context. Here is an example of how to access URL params in your net/http handlers. And of course, middlewares are able to access the same information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// HTTP handler accessing the url routing parameters.&#xA;func MyRequestHandler(w http.ResponseWriter, r *http.Request) {&#xA;  // fetch the url parameter `&#34;userID&#34;` from the request of a matching&#xA;  // routing pattern. An example routing pattern could be: /users/{userID}&#xA;  userID := chi.URLParam(r, &#34;userID&#34;)&#xA;&#xA;  // fetch `&#34;key&#34;` from the request context&#xA;  ctx := r.Context()&#xA;  key := ctx.Value(&#34;key&#34;).(string)&#xA;&#xA;  // respond to the client&#xA;  w.Write([]byte(fmt.Sprintf(&#34;hi %v, %v&#34;, userID, key)))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Middlewares&lt;/h2&gt; &#xA;&lt;p&gt;chi comes equipped with an optional &lt;code&gt;middleware&lt;/code&gt; package, providing a suite of standard &lt;code&gt;net/http&lt;/code&gt; middlewares. Please note, any middleware in the ecosystem that is also compatible with &lt;code&gt;net/http&lt;/code&gt; can be used with chi&#39;s mux.&lt;/p&gt; &#xA;&lt;h3&gt;Core middlewares&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;chi/middleware Handler&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#AllowContentEncoding&#34;&gt;AllowContentEncoding&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforces a whitelist of request Content-Encoding headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#AllowContentType&#34;&gt;AllowContentType&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Explicit whitelist of accepted request Content-Types&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#BasicAuth&#34;&gt;BasicAuth&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Basic HTTP authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Compress&#34;&gt;Compress&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Gzip compression for clients that accept compressed responses&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#ContentCharset&#34;&gt;ContentCharset&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure charset for Content-Type request headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#CleanPath&#34;&gt;CleanPath&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Clean double slashes from request path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#GetHead&#34;&gt;GetHead&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Automatically route undefined HEAD requests to GET handlers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Heartbeat&#34;&gt;Heartbeat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Monitoring endpoint to check the servers pulse&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Logger&#34;&gt;Logger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Logs the start and end of each request with the elapsed processing time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#NoCache&#34;&gt;NoCache&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets response headers to prevent clients from caching&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Profiler&#34;&gt;Profiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Easily attach net/http/pprof to your routers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#RealIP&#34;&gt;RealIP&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets a http.Request&#39;s RemoteAddr to either X-Real-IP or X-Forwarded-For&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Recoverer&#34;&gt;Recoverer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Gracefully absorb panics and prints the stack trace&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#RequestID&#34;&gt;RequestID&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Injects a request ID into the context of each request&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#RedirectSlashes&#34;&gt;RedirectSlashes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Redirect slashes on routing paths&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#RouteHeaders&#34;&gt;RouteHeaders&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Route handling for request headers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#SetHeader&#34;&gt;SetHeader&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Short-hand middleware to set a response header key/value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#StripSlashes&#34;&gt;StripSlashes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Strip slashes on routing paths&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Throttle&#34;&gt;Throttle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Puts a ceiling on the number of concurrent requests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#Timeout&#34;&gt;Timeout&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Signals to the request context when the timeout deadline is reached&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#URLFormat&#34;&gt;URLFormat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Parse extension from url and put it on request context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-chi/chi/middleware#WithValue&#34;&gt;WithValue&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Short-hand middleware to set a key/value on the request context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Extra middlewares &amp;amp; packages&lt;/h3&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://github.com/go-chi&#34;&gt;https://github.com/go-chi&lt;/a&gt; for additional packages.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;package&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/cors&#34;&gt;cors&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Cross-origin resource sharing (CORS)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/docgen&#34;&gt;docgen&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Print chi.Router routes at runtime&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/jwtauth&#34;&gt;jwtauth&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JWT authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/hostrouter&#34;&gt;hostrouter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Domain/host based request routing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/httplog&#34;&gt;httplog&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Small but powerful structured HTTP request logging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/httprate&#34;&gt;httprate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP request rate limiter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/httptracer&#34;&gt;httptracer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP request performance tracing library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/httpvcr&#34;&gt;httpvcr&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Write deterministic tests for external sources&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/go-chi/stampede&#34;&gt;stampede&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;HTTP request coalescer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;context?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;context&lt;/code&gt; is a tiny pkg that provides simple interface to signal context across call stacks and goroutines. It was originally written by &lt;a href=&#34;https://github.com/Sajmani&#34;&gt;Sameer Ajmani&lt;/a&gt; and is available in stdlib since go1.7.&lt;/p&gt; &#xA;&lt;p&gt;Learn more at &lt;a href=&#34;https://blog.golang.org/context&#34;&gt;https://blog.golang.org/context&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;and..&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docs: &lt;a href=&#34;https://golang.org/pkg/context&#34;&gt;https://golang.org/pkg/context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source: &lt;a href=&#34;https://github.com/golang/go/tree/master/src/context&#34;&gt;https://github.com/golang/go/tree/master/src/context&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The benchmark suite: &lt;a href=&#34;https://github.com/pkieltyka/go-http-routing-benchmark&#34;&gt;https://github.com/pkieltyka/go-http-routing-benchmark&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Results as of Nov 29, 2020 with Go 1.15.5 on Linux AMD 3950x&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;BenchmarkChi_Param          &#x9;3075895&#x9;        384 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_Param5         &#x9;2116603&#x9;        566 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_Param20        &#x9; 964117&#x9;       1227 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_ParamWrite     &#x9;2863413&#x9;        420 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GithubStatic   &#x9;3045488&#x9;        395 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GithubParam    &#x9;2204115&#x9;        540 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GithubAll      &#x9;  10000&#x9;     113811 ns/op&#x9;    81203 B/op    406 allocs/op&#xA;BenchmarkChi_GPlusStatic    &#x9;3337485&#x9;        359 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GPlusParam     &#x9;2825853&#x9;        423 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GPlus2Params   &#x9;2471697&#x9;        483 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_GPlusAll       &#x9; 194220&#x9;       5950 ns/op&#x9;     5200 B/op     26 allocs/op&#xA;BenchmarkChi_ParseStatic    &#x9;3365324&#x9;        356 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_ParseParam     &#x9;2976614&#x9;        404 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_Parse2Params   &#x9;2638084&#x9;        439 ns/op&#x9;      400 B/op      2 allocs/op&#xA;BenchmarkChi_ParseAll       &#x9; 109567&#x9;      11295 ns/op&#x9;    10400 B/op     52 allocs/op&#xA;BenchmarkChi_StaticAll      &#x9;  16846&#x9;      71308 ns/op&#x9;    62802 B/op    314 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Comparison with other routers: &lt;a href=&#34;https://gist.github.com/pkieltyka/123032f12052520aaccab752bd3e78cc&#34;&gt;https://gist.github.com/pkieltyka/123032f12052520aaccab752bd3e78cc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;NOTE: the allocs in the benchmark above are from the calls to http.Request&#39;s &lt;code&gt;WithContext(context.Context)&lt;/code&gt; method that clones the http.Request, sets the &lt;code&gt;Context()&lt;/code&gt; on the duplicated (alloc&#39;d) request and returns it the new request object. This is just how setting context on a request in Go works.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Carl Jackson for &lt;a href=&#34;https://github.com/zenazn/goji&#34;&gt;https://github.com/zenazn/goji&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parts of chi&#39;s thinking comes from goji, and chi&#39;s middleware package sources from goji.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Armon Dadgar for &lt;a href=&#34;https://github.com/armon/go-radix&#34;&gt;https://github.com/armon/go-radix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Contributions: &lt;a href=&#34;https://github.com/VojtechVitek&#34;&gt;@VojtechVitek&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We&#39;ll be more than happy to see &lt;a href=&#34;https://raw.githubusercontent.com/go-chi/chi/master/CONTRIBUTING.md&#34;&gt;your contributions&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Beyond REST&lt;/h2&gt; &#xA;&lt;p&gt;chi is just a http router that lets you decompose request handling into many smaller layers. Many companies use chi to write REST services for their public APIs. But, REST is just a convention for managing state via HTTP, and there&#39;s a lot of other pieces required to write a complete client-server system or network of microservices.&lt;/p&gt; &#xA;&lt;p&gt;Looking beyond REST, I also recommend some newer works in the field:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/webrpc/webrpc&#34;&gt;webrpc&lt;/a&gt; - Web-focused RPC client+server framework with code-gen&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go&#34;&gt;gRPC&lt;/a&gt; - Google&#39;s RPC framework via protobufs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/99designs/gqlgen&#34;&gt;graphql&lt;/a&gt; - Declarative query language&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nats.io&#34;&gt;NATS&lt;/a&gt; - lightweight pub-sub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2015-present &lt;a href=&#34;https://github.com/pkieltyka&#34;&gt;Peter Kieltyka&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/go-chi/chi/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>siderolabs/talos</title>
    <updated>2022-08-02T01:43:05Z</updated>
    <id>tag:github.com,2022-08-02:/siderolabs/talos</id>
    <link href="https://github.com/siderolabs/talos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Talos Linux is a modern Linux distribution built for Kubernetes.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Talos Linux&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;A modern OS for Kubernetes.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/talos-systems/talos/releases/latest&#34;&gt; &lt;img alt=&#34;Release&#34; src=&#34;https://img.shields.io/github/release/talos-systems/talos.svg?logo=github&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/talos-systems/talos/releases/latest&#34;&gt; &lt;img alt=&#34;Pre-release&#34; src=&#34;https://img.shields.io/github/release-pre/talos-systems/talos.svg?label=pre-release&amp;amp;logo=GitHub&amp;amp;logoColor=white&amp;amp;style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Talos&lt;/strong&gt; is a modern OS for running Kubernetes: secure, immutable, and minimal. Talos is fully open source, production-ready, and supported by the people at &lt;a href=&#34;https://www.SideroLabs.com/&#34;&gt;Sidero Labs&lt;/a&gt; All system management is done via an API - there is no shell or interactive console. Benefits include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Talos reduces your attack surface: It&#39;s minimal, hardened, and immutable. All API access is secured with mutual TLS (mTLS) authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Predictability&lt;/strong&gt;: Talos eliminates configuration drift, reduces unknown factors by employing immutable infrastructure ideology, and delivers atomic updates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evolvability&lt;/strong&gt;: Talos simplifies your architecture, increases your agility, and always delivers current stable Kubernetes and Linux versions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For instructions on deploying and managing Talos, see the &lt;a href=&#34;https://www.talos.dev/docs/latest/&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Slack: Join our &lt;a href=&#34;https://slack.dev.talos-systems.io&#34;&gt;slack channel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Support: Questions, bugs, feature requests &lt;a href=&#34;https://github.com/talos-systems/talos/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://groups.google.com/a/SideroLabs.com/forum/#!forum/community&#34;&gt;community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/SideroLabs&#34;&gt;@SideroLabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email: &lt;a href=&#34;mailto:info@SideroLabs.com&#34;&gt;info@SideroLabs.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re interested in this project and would like to help in engineering efforts or have general usage questions, we are happy to have you! We hold a weekly meeting that all audiences are welcome to attend.&lt;/p&gt; &#xA;&lt;p&gt;We would appreciate your feedback so that we can make Talos even better! To do so, you can take our &lt;a href=&#34;https://docs.google.com/forms/d/1TUna5YTYGCKot68Y9YN_CLobY6z9JzLVCq1G7DoyNjA/edit&#34;&gt;survey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Office Hours&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When: Mondays at 16:30 UTC.&lt;/li&gt; &#xA; &lt;li&gt;Where: &lt;a href=&#34;https://meet.google.com/day-pxhv-zky&#34;&gt;Google Meet&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can subscribe to this meeting by joining the community forum above.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You can convert the meeting hours to your &lt;a href=&#34;https://everytimezone.com/s/6bb1045a&#34;&gt;local time&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcomed and appreciated! See &lt;a href=&#34;https://raw.githubusercontent.com/siderolabs/talos/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for our guidelines.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/talos-systems/talos/raw/master/LICENSE&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/talos-systems/talos?style=flat-square&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Some software we distribute is under the General Public License family of licenses or other licenses that require we provide you with the source code. If you would like a copy of the source code for this software, please contact us via email: info at SideroLabs.com.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>charmbracelet/bubbles</title>
    <updated>2022-08-02T01:43:05Z</updated>
    <id>tag:github.com,2022-08-02:/charmbracelet/bubbles</id>
    <link href="https://github.com/charmbracelet/bubbles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TUI components for Bubble Tea 🍡&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bubbles&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://stuff.charm.sh/bubbles/bubbles-github.png&#34; width=&#34;233&#34; alt=&#34;The Bubbles Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbles/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/bubbles.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/bubbles&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/bubbles/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/bubbles/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/charmbracelet/bubbles&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/charmbracelet/bubbles&#34; alt=&#34;Go ReportCard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some components for &lt;a href=&#34;https://github.com/charmbracelet/bubbletea&#34;&gt;Bubble Tea&lt;/a&gt; applications. These components are used in production in &lt;a href=&#34;https://github.com/charmbracelet/glow&#34;&gt;Glow&lt;/a&gt;, &lt;a href=&#34;https://github.com/charmbracelet/charm&#34;&gt;Charm&lt;/a&gt; and &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/#bubble-tea-in-the-wild&#34;&gt;many other applications&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Spinner&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/spinner.gif&#34; width=&#34;400&#34; alt=&#34;Spinner Example&#34;&gt; &#xA;&lt;p&gt;A spinner, useful for indicating that some kind an operation is happening. There are a couple default ones, but you can also pass your own ”frames.”&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/spinner/main.go&#34;&gt;Example code, basic spinner&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/spinners/main.go&#34;&gt;Example code, various spinners&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Text Input&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/textinput.gif&#34; width=&#34;400&#34; alt=&#34;Text Input Example&#34;&gt; &#xA;&lt;p&gt;A text input field, akin to an &lt;code&gt;&amp;lt;input type=&#34;text&#34;&amp;gt;&lt;/code&gt; in HTML. Supports unicode, pasting, in-place scrolling when the value exceeds the width of the element and the common, and many customization options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/textinput/main.go&#34;&gt;Example code, one field&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/textinputs/main.go&#34;&gt;Example code, many fields&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Text Area&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/textarea.gif&#34; width=&#34;400&#34; alt=&#34;Text Area Example&#34;&gt; &#xA;&lt;p&gt;A text area field, akin to an &lt;code&gt;&amp;lt;textarea /&amp;gt;&lt;/code&gt; in HTML. Allows for input that spans multiple lines. Supports unicode, pasting, vertical scrolling when the value exceeds the width and height of the element, and many customization options.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/chat/main.go&#34;&gt;Example code, chat input&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/textarea/main.go&#34;&gt;Example code, story time input&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Progress&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/progress.gif&#34; width=&#34;800&#34; alt=&#34;Progressbar Example&#34;&gt; &#xA;&lt;p&gt;A simple, customizable progress meter, with optional animation via &lt;a href=&#34;https://github.com/charmbracelet/harmonica&#34;&gt;Harmonica&lt;/a&gt;. Supports solid and gradient fills. The empty and filled runes can be set to whatever you&#39;d like. The percentage readout is customizable and can also be omitted entirely.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbletea/raw/master/examples/progress-animated/main.go&#34;&gt;Animated example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbletea/raw/master/examples/progress-static/main.go&#34;&gt;Static example&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Paginator&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/pagination.gif&#34; width=&#34;200&#34; alt=&#34;Paginator Example&#34;&gt; &#xA;&lt;p&gt;A component for handling pagination logic and optionally drawing pagination UI. Supports &#34;dot-style&#34; pagination (similar to what you might see on iOS) and numeric page numbering, but you could also just use this component for the logic and visualize pagination however you like.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbletea/raw/master/examples/paginator/main.go&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Viewport&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/viewport.gif?0&#34; width=&#34;600&#34; alt=&#34;Viewport Example&#34;&gt; &#xA;&lt;p&gt;A viewport for vertically scrolling content. Optionally includes standard pager keybindings and mouse wheel support. A high performance mode is available for applications which make use of the alternate screen buffer.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/pager/main.go&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This component is well complemented with &lt;a href=&#34;https://github.com/muesli/reflow&#34;&gt;Reflow&lt;/a&gt; for ANSI-aware indenting and text wrapping.&lt;/p&gt; &#xA;&lt;h2&gt;List&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/list.gif&#34; width=&#34;600&#34; alt=&#34;List Example&#34;&gt; &#xA;&lt;p&gt;A customizable, batteries-included component for browsing a set of items. Features pagination, fuzzy filtering, auto-generated help, an activity spinner, and status messages, all of which can be enabled and disabled as needed. Extrapolated from &lt;a href=&#34;https://github.com/charmbracelet/glow&#34;&gt;Glow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/list-default/main.go&#34;&gt;Example code, default list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/list-simple/main.go&#34;&gt;Example code, simple list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/tea/tree/master/examples/list-fancy/main.go&#34;&gt;Example code, all features&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Timer&lt;/h2&gt; &#xA;&lt;p&gt;A simple, flexible component for counting down. The update frequency and output can be customized as you like.&lt;/p&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/timer.gif&#34; width=&#34;400&#34; alt=&#34;Timer example&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbletea/raw/master/examples/timer/main.go&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stopwatch&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/stopwatch.gif&#34; width=&#34;400&#34; alt=&#34;Stopwatch example&#34;&gt; &#xA;&lt;p&gt;A simple, flexible component for counting up. The update frequency and output can be customized as you see fit.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbletea/raw/master/examples/stopwatch/main.go&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/help.gif&#34; width=&#34;500&#34; alt=&#34;Help Example&#34;&gt; &#xA;&lt;p&gt;A customizable horizontal mini help view that automatically generates itself from your keybindings. It features single and multi-line modes, which the user can optionally toggle between. It will truncate gracefully if the terminal is too wide for the content.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbletea/raw/master/examples/help/main.go&#34;&gt;Example code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key&lt;/h2&gt; &#xA;&lt;p&gt;A non-visual component for managing keybindings. It’s useful for allowing users to remap keybindings as well as generating help views corresponding to your keybindings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type KeyMap struct {&#xA;    Up key.Binding&#xA;    Down key.Binding&#xA;}&#xA;&#xA;var DefaultKeyMap = KeyMap{&#xA;    Up: key.NewBinding(&#xA;        key.WithKeys(&#34;k&#34;, &#34;up&#34;),        // actual keybindings&#xA;        key.WithHelp(&#34;↑/k&#34;, &#34;move up&#34;), // corresponding help text&#xA;    ),&#xA;    Down: key.NewBinding(&#xA;        key.WithKeys(&#34;j&#34;, &#34;down&#34;),&#xA;        key.WithHelp(&#34;↓/j&#34;, &#34;move down&#34;),&#xA;    ),&#xA;}&#xA;&#xA;func (m Model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {&#xA;    switch msg := msg.(type) {&#xA;    case tea.KeyMsg:&#xA;        switch {&#xA;        case key.Matches(msg, DefaultKeyMap.Up):&#xA;            // The user pressed up&#xA;        case key.Matches(msg, DefaultKeyMap.Down):&#xA;            // The user pressed down&#xA;        }&#xA;    }&#xA;    return m, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional Bubbles&lt;/h2&gt; &#xA;&lt;!-- in alphabetical order by author --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/76creates/stickers&#34;&gt;76creates/stickers&lt;/a&gt;: Responsive flexbox and table components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/calyptia/go-bubble-table&#34;&gt;calyptia/go-bubble-table&lt;/a&gt;: An interactive, customizable, scrollable table component.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/erikgeiser/promptkit&#34;&gt;erikgeiser/promptkit&lt;/a&gt;: A collection of common prompts for cases like selection, text input, and confirmation. Each prompt comes with sensible defaults, remappable keybindings, any many customization options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Evertras/bubble-table&#34;&gt;evertras/bubble-table&lt;/a&gt;: Interactive, customizable, paginated tables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/knipferrc/teacup&#34;&gt;knipferrc/teacup&lt;/a&gt;: Various handy bubbles and utilities for building Bubble Tea applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mritd/bubbles&#34;&gt;mritd/bubbles&lt;/a&gt;: Some general-purpose bubbles. Inputs with validation, menu selection, a modified progressbar, and so on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/treilik/bubbleboxer&#34;&gt;treilik/bubbleboxer&lt;/a&gt;: Layout multiple bubbles side-by-side in a layout-tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/treilik/bubblelister&#34;&gt;treilik/bubblelister&lt;/a&gt;: An alternate list that is scrollable without pagination and has the ability to contain other bubbles as list items.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you’ve built a Bubble you think should be listed here, &lt;a href=&#34;mailto:vt100@charm.sh&#34;&gt;let us know&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/teaparty/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://charm.sh/&#34;&gt;&lt;img alt=&#34;The Charm logo&#34; src=&#34;https://stuff.charm.sh/charm-badge.jpg&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Charm热爱开源 • Charm loves open source&lt;/p&gt;</summary>
  </entry>
</feed>