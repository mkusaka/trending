<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-10T01:33:10Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sqlc-dev/sqlc</title>
    <updated>2023-09-10T01:33:10Z</updated>
    <id>tag:github.com,2023-09-10:/sqlc-dev/sqlc</id>
    <link href="https://github.com/sqlc-dev/sqlc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate type-safe code from SQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sqlc: A SQL Compiler&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/sqlc-dev/sqlc/workflows/go/badge.svg?sanitize=true&#34; alt=&#34;go&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/sqlc-dev/sqlc&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/sqlc-dev/sqlc&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;sqlc generates &lt;strong&gt;type-safe code&lt;/strong&gt; from SQL. Here&#39;s how it works:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You write queries in SQL.&lt;/li&gt; &#xA; &lt;li&gt;You run sqlc to generate code with type-safe interfaces to those queries.&lt;/li&gt; &#xA; &lt;li&gt;You write application code that calls the generated code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://play.sqlc.dev/&#34;&gt;an interactive example&lt;/a&gt; to see it in action, and the &lt;a href=&#34;https://conroy.org/introducing-sqlc&#34;&gt;introductory blog post&lt;/a&gt; for the motivation behind sqlc.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sqlc.dev&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.sqlc.dev/en/latest/overview/install.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.sqlc.dev&#34;&gt;Playground&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sqlc.dev&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://downloads.sqlc.dev/&#34;&gt;Downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/EcXzGe5SEs&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;sqlc development is funded by our &lt;a href=&#34;https://github.com/sponsors/kyleconroy&#34;&gt;generous sponsors&lt;/a&gt;, including the following companies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://context.app&#34;&gt;Context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ngrok.com&#34;&gt;ngrok&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.rstudio.com/&#34;&gt;RStudio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://shiguredo.jp/&#34;&gt;時雨堂&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use sqlc at your company, please consider &lt;a href=&#34;https://github.com/sponsors/kyleconroy&#34;&gt;becoming a sponsor&lt;/a&gt; today.&lt;/p&gt; &#xA;&lt;p&gt;Sponsors receive priority support via the sqlc Slack organization.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;sqlc was inspired by &lt;a href=&#34;https://pugsql.org/&#34;&gt;PugSQL&lt;/a&gt; and &lt;a href=&#34;https://www.hugsql.org/&#34;&gt;HugSQL&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vektra/mockery</title>
    <updated>2023-09-10T01:33:10Z</updated>
    <id>tag:github.com,2023-09-10:/vektra/mockery</id>
    <link href="https://github.com/vektra/mockery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A mock code autogenerator for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mockery&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vektra/mockery/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/vektra/mockery/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/vektra/mockery/v2?tab=overview&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&amp;amp;style=flat-square&#34; alt=&#34;go.dev reference&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/vektra/mockery&#34; alt=&#34;GitHub go.mod Go version&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/vektra/mockery&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/vektra/mockery&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/vektra/mockery&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/vektra/mockery&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/vektra/mockery/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;mockery provides the ability to easily generate mocks for Golang interfaces using the &lt;a href=&#34;https://pkg.go.dev/github.com/stretchr/testify/mock?tab=doc&#34;&gt;stretchr/testify/mock&lt;/a&gt; package. It removes the boilerplate coding required to use mocks.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation is found at out &lt;a href=&#34;https://vektra.github.io/mockery/&#34;&gt;GitHub Pages site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;taskfile.dev is used for build tasks. Initialize all go build tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go mod download -x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run any of the steps listed in &lt;code&gt;Taskfile.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ task test&#xA;task: [test] go test -v -coverprofile=coverage.txt ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development Efforts&lt;/h2&gt; &#xA;&lt;h3&gt;v1&lt;/h3&gt; &#xA;&lt;p&gt;v1 is the original version of the software, and is no longer supported.&lt;/p&gt; &#xA;&lt;h3&gt;v2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;mockery&lt;/code&gt; is currently in v2, which originally included cosmetic and configuration improvements over v1, but also implements a number of quality-of-life additions.&lt;/p&gt; &#xA;&lt;h3&gt;v3&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vektra/mockery/projects/3&#34;&gt;v3&lt;/a&gt; will include a ground-up overhaul of the entire codebase and will completely change how mockery works internally and externally. The highlights of the project are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Moving towards a package-based model instead of a file-based model. &lt;code&gt;mockery&lt;/code&gt; currently iterates over every file in a project and calls &lt;code&gt;package.Load&lt;/code&gt; on each one, which is time-consuming. Moving towards a model where the entire package is loaded at once will dramatically reduce runtime, and will simplify logic. Additionally, supporting only a single mode of operation (package mode) will greatly increase the intuitiveness of the software.&lt;/li&gt; &#xA; &lt;li&gt;Configuration-driven generation. &lt;code&gt;v3&lt;/code&gt; will be entirely driven by configuration, meaning: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You specify the packages you want mocked, instead of relying on it auto-discovering your package. Auto-discovery in theory sounds great, but in practice it leads to a great amount of complexity for very little benefit.&lt;/li&gt; &#xA;   &lt;li&gt;Package- or interface-specific overrides can be given that change mock generation settings on a granular level. This will allow your mocks to be generated in a heterogeneous manner, and will be made explicit by YAML configuration.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Proper error reporting. Errors across the board will be done in accordance with modern Golang practices&lt;/li&gt; &#xA; &lt;li&gt;Variables in generated mocks will be given meaningful names.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stargazers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/vektra/mockery&#34;&gt;&lt;img src=&#34;https://starchart.cc/vektra/mockery.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>