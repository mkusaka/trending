<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-07T01:28:58Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gabotechs/dep-tree</title>
    <updated>2024-02-07T01:28:58Z</updated>
    <id>tag:github.com,2024-02-07:/gabotechs/dep-tree</id>
    <link href="https://github.com/gabotechs/dep-tree" rel="alternate"></link>
    <summary type="html">&lt;p&gt;tool for helping developers keep their code bases clean and decoupled. It allows visualising a &#34;code base entropy&#34; using a 3d force-directed graph of files and the dependencies between.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;96&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/dep-tree.svg?sanitize=true&#34;&gt; &lt;img height=&#34;74&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/dep-tree-name.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/github/gabotechs/dep-tree/badge.svg?branch=main&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/gabotechs/dep-tree&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/gabotechs/dep-tree?color=%e535abff&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Visualize the &lt;strong&gt;entropy&lt;/strong&gt; of a code base with a 3d force-directed graph. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The more decoupled and modular a code base is, the more spread the graph will look like. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;819&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/demo.gif&#34; alt=&#34;File structure&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Ensure your code base decoupling by creating your own rules and enforcing them with &lt;code&gt;dep-tree check&lt;/code&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Checkout the entropy graph of well-known projects&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Ts/Js&lt;/th&gt; &#xA;   &lt;th&gt;Python&lt;/th&gt; &#xA;   &lt;th&gt;Rust&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fmicrosoft%2FTypeScript&amp;amp;entrypoint=src%2Ftypescript%2Ftypescript.ts&#34;&gt;typescript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Flangchain-ai%2Flangchain&amp;amp;entrypoint=libs%2Flangchain%2Flangchain%2F__init__.py&#34;&gt;langchain&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fdenoland%2Fdeno&amp;amp;entrypoint=cli%2Fmain.rs&#34;&gt;deno&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Ffacebook%2Freact&amp;amp;entrypoint=packages%2Freact-dom%2Findex.js&#34;&gt;react&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fpytorch%2Fpytorch&amp;amp;entrypoint=torch%2Fnn%2F__init__.py&#34;&gt;pytorch&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fpola-rs%2Fpolars&amp;amp;entrypoint=crates%2Fpolars-core%2Fsrc%2Flib.rs&#34;&gt;polars&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fsveltejs%2Fsvelte&amp;amp;entrypoint=packages%2Fsvelte%2Fsrc%2Fcompiler%2Findex.js&#34;&gt;svelte&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Ftensorflow%2Ftensorflow&amp;amp;entrypoint=tensorflow%2Fpython%2Fkeras%2Fmodels.py&#34;&gt;tensorflow&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Falacritty%2Falacritty&amp;amp;entrypoint=alacritty%2Fsrc%2Fmain.rs&#34;&gt;alacritty&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue&amp;amp;entrypoint=src%2Fcore%2Findex.ts&#34;&gt;vuejs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Ftiangolo%2Ffastapi&amp;amp;entrypoint=fastapi%2F__init__.py&#34;&gt;fastapi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fbevyengine%2Fbevy&amp;amp;entrypoint=crates%2Fbevy_ecs%2Fsrc%2Flib.rs&#34;&gt;bevy (ecs)&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fangular%2Fangular&amp;amp;entrypoint=packages%2Fcompiler%2Findex.ts&#34;&gt;angular&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fnumpy%2Fnumpy&amp;amp;entrypoint=numpy%2F__init__.py&#34;&gt;numpy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Frwf2%2FRocket&amp;amp;entrypoint=core%2Flib%2Fsrc%2Flib.rs&#34;&gt;rocket&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fstorybookjs%2Fstorybook&amp;amp;entrypoint=code%2Fui%2Fblocks%2Fsrc%2Findex.ts&#34;&gt;storybook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fscikit-learn%2Fscikit-learn&amp;amp;entrypoint=sklearn%2F__init__.py&#34;&gt;scikit-learn&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Ftokio-rs%2Faxum&amp;amp;entrypoint=axum%2Fsrc%2Flib.rs&#34;&gt;axum&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fmrdoob%2Fthree.js&amp;amp;entrypoint=src%2FThree.js&#34;&gt;three.js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fexpressjs%2Fexpress&amp;amp;entrypoint=lib%2Fexpress.js&#34;&gt;expressjs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fmui%2Fmaterial-ui&amp;amp;entrypoint=packages%2Fmui-material%2Fsrc%2Findex.js&#34;&gt;material-ui&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Feslint%2Feslint&amp;amp;entrypoint=lib%2Fcli.js&#34;&gt;eslint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dep-tree-explorer.vercel.app/api?repo=https%3A%2F%2Fgithub.com%2Fprettier%2Fprettier&amp;amp;entrypoint=index.js&#34;&gt;prettier&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;On Mac and Linux, it can be installed using brew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install gabotechs/taps/dep-tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, on any platform including Windows it can be installed with &lt;code&gt;pip&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pip install python-dep-tree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;...or &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install @dep-tree/cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;div&gt; &#xA; &lt;img height=&#34;40px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/js-logo.png&#34;&gt; &#xA; &lt;img height=&#34;40px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/ts-logo.png&#34;&gt; &#xA; &lt;img height=&#34;40px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/python-logo.png&#34;&gt; &#xA; &lt;img height=&#34;40px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/rust-logo.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About Dep Tree&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;dep-tree&lt;/code&gt; is a cli tool for visualizing the complexity of a code base, and creating rules for ensuring its loosely coupling.&lt;/p&gt; &#xA;&lt;p&gt;It works with files, meaning that each file is a node in the dependency tree:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It starts from one or more entrypoints, which are usually the main executable files in a program or the files that expose the contents of a library (like &lt;code&gt;package/main.py&lt;/code&gt;, &lt;code&gt;src/index.ts&lt;/code&gt;, &lt;code&gt;src/lib.rs&lt;/code&gt;...).&lt;/li&gt; &#xA; &lt;li&gt;It makes a parent node out of the root file, and one child node for each imported file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] it only takes into account local files, not files imported from external libraries.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;That process is repeated recursively with all the imported files, until the file dependency graph is formed.&lt;/li&gt; &#xA; &lt;li&gt;If rendering the &lt;strong&gt;code base entropy&lt;/strong&gt;, the nodes will be rendered using a 3d force-directed graph in the browser.&lt;/li&gt; &#xA; &lt;li&gt;If rendering the &lt;strong&gt;dependency tree&lt;/strong&gt; in the terminal, the nodes will be placed in a human-readable way, and users can navigate through the graph using the keyboard.&lt;/li&gt; &#xA; &lt;li&gt;If validating the &lt;strong&gt;dependency rules&lt;/strong&gt; in a CI system, it will check that the dependencies between files match some boundaries declared in a &lt;code&gt;.dep-tree.yml&lt;/code&gt; file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Entropy&lt;/h3&gt; &#xA;&lt;p&gt;Choose the file that will act as the root of the dependency graph (for example &lt;code&gt;src/index.ts&lt;/code&gt;), and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dep-tree entropy src/index.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass multiple files if you don&#39;t have a single entrypoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dep-tree entropy src/*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will open a browser window and will render your file dependency graph using a 3d force-directed graph.&lt;/p&gt; &#xA;&lt;p&gt;The spheres (files) will be placed mimicking some attraction/repulsion forces. Some parts of your code base will tend to gravitate together if they are tightly coupled, and will tend to be separated if they are loosely coupled.&lt;/p&gt; &#xA;&lt;p&gt;The 3d graph for a clean code base will have groups of nodes clustered together and clearly separated from other clusters:&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img height=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/decoupled-code-base.png&#34;&gt; &#xA; &lt;img height=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/decoupled-code-base-2.png&#34;&gt; &#xA; &lt;img height=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/decoupled-code-base-3.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;The 3d graph for a tightly coupled code base will have all the nodes grouped together with no clustering and no clear separation between them:&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img height=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/coupled-code-base.png&#34;&gt; &#xA; &lt;img height=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/coupled-code-base-2.png&#34;&gt; &#xA; &lt;img height=&#34;200px&#34; src=&#34;https://raw.githubusercontent.com/gabotechs/dep-tree/main/docs/coupled-code-base-3.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Tree&lt;/h3&gt; &#xA;&lt;p&gt;Choose the file that will act as the root of the dependency graph (for example &lt;code&gt;my-file.py&lt;/code&gt;), and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dep-tree tree my-file.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see the controls for navigating through the graph pressing &lt;code&gt;h&lt;/code&gt; at any time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;j      -&amp;gt; move one step down&#xA;k      -&amp;gt; move one step up&#xA;Ctrl d -&amp;gt; move half page down&#xA;Ctrl u -&amp;gt; move half page up&#xA;Enter  -&amp;gt; select the current node as the root node&#xA;q      -&amp;gt; navigate backwards on selected nodes or quit&#xA;h      -&amp;gt; show this help section&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check&lt;/h3&gt; &#xA;&lt;p&gt;The dependency linting can be executed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dep-tree check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is specially useful for CI systems, for ensuring that parts of an application that should not be coupled remain decoupled as the project evolves.&lt;/p&gt; &#xA;&lt;p&gt;These are the parameters that can be configured in the &lt;code&gt;.dep-tree.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;entrypoints&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;List of entrypoints that will act as root nodes for evaluating multiple dependency trees. Some applications might expose more than one entrypoint, for that reason, this parameter is a list. The most typical thing is that there is only one entrypoint.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;allow&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Map from glob pattern to list of glob patterns that define, using a &#34;white list&#34; logic, what files can depend on what other files. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;allow:&#xA;  &#34;src/products/**&#34;:&#xA;    - &#34;src/products/**&#34;&#xA;    - &#34;src/common/**&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above, any file under the &lt;code&gt;src/products&lt;/code&gt; folder has the restriction of only being able to import files that live either in the same &lt;code&gt;src/products&lt;/code&gt; folder, or in the &lt;code&gt;src/common&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;deny&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Map from glob pattern to list of glob patterns that define, using a &#34;black list&#34; logic, what dependencies are forbidden. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;deny:&#xA;  &#34;api/routes.py&#34;:&#xA;    - &#34;adapters/**&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above, the file &lt;code&gt;api/routes.py&lt;/code&gt; can import from anywhere but the &lt;code&gt;adapters&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;allowCircularDependencies&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Boolean parameter that defines whether circular dependencies are allowed or not. By default they are not allowed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;allowCircularDependencies: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;aliases&lt;/code&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Map from string to glob pattern that gathers utility groups of glob patterns that can be reused in the &lt;code&gt;deny&lt;/code&gt; and &lt;code&gt;allow&lt;/code&gt; fields. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;aliases:&#xA;  &#34;common-stuff&#34;:&#xA;    - &#34;src/common/**&#34;&#xA;    - &#34;src/utils/**&#34;&#xA;    - &#34;src/helpers/**&#34;&#xA;allow:&#xA;  &#34;src/function.py&#34;:&#xA;    - &#34;common-stuff&#34;&#xA;    - &#34;src/class.py&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is the same as saying:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;allow:&#xA;  &#34;src/function.py&#34;:&#xA;    - &#34;src/common/**&#34;&#xA;    - &#34;src/utils/**&#34;&#xA;    - &#34;src/helpers/**&#34;&#xA;    - &#34;src/class.py&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example configuration file&lt;/h3&gt; &#xA;&lt;p&gt;Dep Tree by default will read the configuration file in &lt;code&gt;.dep-tree.yml&lt;/code&gt;, which is expected to be a file that contains the following settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;# Files that should be completely ignored by dep-tree. It&#39;s fine to ignore&#xA;# some big files that everyone depends on and that don&#39;t add&#xA;# value to the visualization, like auto generated code.&#xA;exclude:&#xA;  - &#39;some-glob-pattern/**/*.ts&#39;&#xA;&#xA;# Whether to unwrap re-exports to the target file or not.&#xA;# Imagine that you have the following setup:&#xA;#&#xA;#  src/index.ts     -&amp;gt; import { foo } from &#39;./foo&#39;&#xA;#  src/foo/index.ts -&amp;gt; export { bar as foo } from &#39;./bar&#39;&#xA;#  src/foo/bar.ts   -&amp;gt; export function bar() {}&#xA;#&#xA;# If `unwrapExports` is true, a dependency will be created from&#xA;# `src/index.ts` to `src/foo/bar.ts`, and the middle file `src/foo/index.ts`&#xA;# will be ignored, as it&#39;s just there for re-exporting the `bar` symbol,&#xA;# which is actually declared on `src/foo/bar.ts`&#xA;#&#xA;# If `unwrapExports` is false, re-exported symbols will not be traced back&#xA;# to where they are declared, and instead two dependencies will be created:&#xA;# - from `src/index.ts` to `src/foo/index.ts`&#xA;# - from `src/foo/index.ts` to `src/foo/bar.ts`&#xA;#&#xA;# Entropy visualization tends to lead to better results if this is set to `false`,&#xA;# but CLI rendering is slightly better with this set to `true`.&#xA;unwrapExports: false&#xA;&#xA;# Check configuration for the `dep-tree check` command. Dep Tree will check for dependency&#xA;# violation rules declared here, and fail if there is at least one unsatisfied rule.&#xA;check:&#xA;  # These are the entrypoints to your application. Dependencies will be checked with&#xA;  # these files as root nodes. Typically, an application has only one entrypoint, which&#xA;  # is the executable file (`src/index.ts`, `main.py`, `src/lib.rs`, ...), but here&#xA;  # you can declare as many as you want.&#xA;  entrypoints:&#xA;    - src/index.ts&#xA;&#xA;  # Whether to allow circular dependencies or not. Languages typically allow&#xA;  # having circular dependencies, but that has an impact in execution path&#xA;  # traceability, so you might want to disallow it.&#xA;  allowCircularDependencies: false&#xA;&#xA;  # map from glob pattern to array of glob patterns that determines the exclusive allowed&#xA;  # dependencies that a file matching a key glob pattern might have. If file that&#xA;  # matches a key glob pattern depends on another file that does not match any of&#xA;  # the glob patterns declared in the values array, the check will fail.&#xA;  allow:&#xA;    # example: any file in `src/products` can only depend on files that are also&#xA;    # in the `src/products` folder or in the `src/helpers` folder.&#xA;    &#39;src/products/**&#39;:&#xA;      - &#39;src/products/**&#39;&#xA;      - &#39;src/helpers/**&#39;&#xA;&#xA;  # map from glob pattern to array of glob patterns that determines forbidden&#xA;  # dependencies. If a file that matches a key glob pattern depends on another&#xA;  # file that matches at least one of the glob patterns declared in the values&#xA;  # array, the check will fail.&#xA;  deny:&#xA;    # example: files inside `src/products` cannot depend on files inside `src/users`,&#xA;    # as they are supposed to belong to different domains.&#xA;    &#39;src/products/**&#39;:&#xA;      - &#39;src/users/**&#39;&#xA;&#xA;  # typically, in a project, there is a set of files that are always good to depend&#xA;  # on, because they are supposed to be common helpers, or parts that are actually&#xA;  # designed to be widely depended on. This allows you to create aliases to group&#xA;  # of files that are meant to be widely depended on, so that you can reference&#xA;  # them afterward in the `allow` or `deny` sections.&#xA;  aliases:&#xA;    # example: this &#39;common&#39; entry will be available in the other sections:&#xA;    #&#xA;    # check:&#xA;    #   allow:&#xA;    #     &#39;src/products/**&#39;:&#xA;    #       - &#39;common&#39;&#xA;    &#39;common&#39;:&#xA;      - &#39;src/helpers/**&#39;&#xA;      - &#39;src/utils/**&#39;&#xA;      - &#39;src/generated/**&#39;&#xA;&#xA;# JavaScript and TypeScript specific settings.&#xA;js:&#xA;  # Whether to take package.json workspaces into account while resolving paths&#xA;  # or not. You might want to disable it if you only want to analyze one workspace&#xA;  # in a monorepo.&#xA;  workspaces: true&#xA;  # Whether to follow tsconfig.json paths or not. You will typically want to&#xA;  # enable this, but for some monorepo setups, it might be better to leave this off&#xA;  # if you want to analyze only one package.&#xA;  tsConfigPaths: true&#xA;&#xA;# Python specific settings.&#xA;python:&#xA;  # Whether to take into account conditional imports as dependencies between files or not.&#xA;  # A conditional import is an `import` statement that is wrapped inside an `if` block or&#xA;  # a function, for example:&#xA;  #&#xA;  # if SHOULD_IMPORT:&#xA;  #     from foo import *&#xA;  #&#xA;  # by default these statements introduce a dependency between importing and imported file,&#xA;  # but depending on your use case you might want to disable it.&#xA;  excludeConditionalImports: false&#xA;&#xA;# Rust specific settings.&#xA;rust:&#xA;# None available at the moment.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;As codebases expand and teams grow, complexity inevitably creeps in. While maintaining a cohesive and organized structure is key to a project&#39;s scalability and maintainability, the current developer toolbox often falls short in one critical area: file structure and dependency management.&lt;/p&gt; &#xA;&lt;p&gt;Luckily, the community has come up with very useful tools for keeping our projects in check:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type checkers&lt;/strong&gt; ensure correct interactions between code segments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linters&lt;/strong&gt; elevate code quality and maintain a consistent style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Formatters&lt;/strong&gt; guarantee a uniform code format throughout.&lt;/li&gt; &#xA; &lt;li&gt;But what about file structure and file dependency management...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dep Tree is a dedicated tool addressing this very challenge, it aids developers in preserving a project&#39;s structural integrity throughout its lifecycle. And with integration capabilities in CI systems, the tool ensures that this architectural &#34;harmony&#34; remains undisturbed.&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;JavaScript/TypeScript (es imports/exports)&lt;/li&gt; &#xA; &lt;li&gt;Rust (beta)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>