<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-08T01:35:29Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yaklang/yaklang</title>
    <updated>2023-05-08T01:35:29Z</updated>
    <id>tag:github.com,2023-05-08:/yaklang/yaklang</id>
    <link href="https://github.com/yaklang/yaklang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A programming language exclusively designed for cybersecurity&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yaklang/yaklang/main/imgs/yaklang-logo.png&#34; style=&#34;width: 400px&#34;&gt; &#xA;&lt;h1&gt;CDSL-Yaklang: Cybersecurity Domain-Specific Language&lt;/h1&gt; &#xA;&lt;p&gt;为了加速安全产品和安全工具的工程化研发，我们创建了一门新的语言（Yaklang），并且同时实现了一个栈虚拟机（YakVM）。&lt;/p&gt; &#xA;&lt;p&gt;In order to improve the development process of security products and hacking tools, we have created a new language ( Yaklang) and implemented a stack-based virtual machine (YakVM) for this language.&lt;/p&gt; &#xA;&lt;p&gt;Yaklang 是一门图灵完备的编程语言，其语法由上下文无关文法定义。它运行在 YakVM 上。&lt;/p&gt; &#xA;&lt;p&gt;Yaklang is a Turing-complete procedural language defined by context-free grammar. It runs on YakVM.&lt;/p&gt; &#xA;&lt;h2&gt;为什么要做 DSL? (Why DSL?)&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;提高生产力。DSL 设计简洁高效,专注于解决特定问题,可以大大提高开发效率和生产力。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;改善抽象能力。DSL 可以帮助开发者利用高层抽象构建解决方案,不需要处理底层细节,提高开发效率。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可维护性好。DSL 语言简单明了,代码也更加清晰易读,这有利于代码的维护和扩展。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;可靠性高。DSL 专注一定领域,语言和语义都更加精确,这有助于编写出更加可靠的程序。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;易于嵌入。DSL可以很容易地嵌入到一门宿主语言中,实现起来非常方便。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Translation:&lt;/h3&gt; &#xA;&lt;p&gt;Improved productivity. DSL is designed to be concise and efficient, focusing on solving specific problems, which can greatly improve development efficiency and productivity.&lt;/p&gt; &#xA;&lt;p&gt;Improved abstraction. DSL can help developers build solutions using high-level abstractions without dealing with low-level details, improving development efficiency.&lt;/p&gt; &#xA;&lt;p&gt;High maintainability. DSL languages are simple and clear, and the code is also more readable, which is beneficial for code maintenance and expansion.&lt;/p&gt; &#xA;&lt;p&gt;High reliability. DSL focuses on a certain field, the language and semantics are more precise, which helps to write more reliable programs.&lt;/p&gt; &#xA;&lt;p&gt;Easy to embed. DSL can be easily embedded in a host language, which is very convenient to implement.&lt;/p&gt; &#xA;&lt;h2&gt;项目架构 / Project Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yaklang/yaklang/main/imgs/yaklang-arch.jpg&#34; alt=&#34;yaklang-architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;快速开始 / Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;（推荐中文用户）通过 Yakit 来使用 Yaklang / Use Yaklang via Yakit&lt;/h3&gt; &#xA;&lt;p&gt;Yakit (&lt;a href=&#34;https://github.com/yaklang/yakit&#34;&gt;https://github.com/yaklang/yakit&lt;/a&gt;) 是 Yaklang.io 团队官方出品的开源 Yaklang IDE，它可以帮助你快速上手 Yaklang 语言。&lt;/p&gt; &#xA;&lt;p&gt;Yakit (&lt;a href=&#34;https://github.com/yaklang/yakit&#34;&gt;https://github.com/yaklang/yakit&lt;/a&gt;) is the official open source Yaklang IDE released by the Yaklang.io team. It can help you get started with the Yaklang language quickly.&lt;/p&gt; &#xA;&lt;p&gt;同时 Yakit 也能将绝大部分安全工程师需要的核心功能图形化。他是免费的，你可以通过 &lt;a href=&#34;https://www.yaklang.com/products/download_and_install&#34;&gt;下载安装 Yakit&lt;/a&gt;，来开始使用 Yaklang。&lt;/p&gt; &#xA;&lt;p&gt;At the same time, Yakit can also visualize most of the core functions needed by security engineers. It is free, you can start using Yaklang by [downloading and installing Yakit] (&lt;a href=&#34;https://www.yaklang.com/products/download_and_install&#34;&gt;https://www.yaklang.com/products/download_and_install&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;通过命令行来安装使用&lt;/h3&gt; &#xA;&lt;p&gt;通过命令行来安装使用 Yaklang 请遵循：&lt;strong&gt;&lt;a href=&#34;https://www.yaklang.com/&#34;&gt;https://www.yaklang.com/&lt;/a&gt;&lt;/strong&gt; 或 &lt;strong&gt;&lt;a href=&#34;https://www.yaklang.io/&#34;&gt;https://www.yaklang.io/&lt;/a&gt;&lt;/strong&gt; 的指引，或直接执行&lt;/p&gt; &#xA;&lt;p&gt;Install and use Yaklang via the command line, please follow: &lt;strong&gt;&lt;a href=&#34;https://www.yaklang.com/&#34;&gt;https://www.yaklang.com/&lt;/a&gt;&lt;/strong&gt; or &lt;strong&gt;&lt;a href=&#34;https://www.yaklang.io/&#34;&gt;https://www.yaklang.io/&lt;/a&gt;&lt;/strong&gt;, or directly execute&lt;/p&gt; &#xA;&lt;h4&gt;MacOS / Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash &amp;lt;(curl -sS -L http://oss.yaklang.io/install-latest-yak.sh)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;powershell (new-object System.Net.WebClient).DownloadFile(&#39;https://yaklang.oss-cn-beijing.aliyuncs.com/yak/latest/yak_windows_amd64.exe&#39;,&#39;yak_windows_amd64.exe&#39;) &amp;amp;&amp;amp; yak_windows_amd64.exe install &amp;amp;&amp;amp; del /f yak_windows_amd64.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;社区 / Community&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;你可以在 yaklang 或者 yakit 的 issues 中添加你想讨论的内容或者你想表达的东西，英文或中文均可，我们会尽快回复&lt;/li&gt; &#xA; &lt;li&gt;国内用户可以使用 WeChat 加入群组&lt;/li&gt; &#xA; &lt;li&gt;国际用户可以使用 Discord 加入社区&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Translation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You can add the topics you want to discuss or express in Yaklang or Yakit&#39;s issues, in either English or Chinese, and we will reply as soon as possible.&lt;/li&gt; &#xA; &lt;li&gt;Chinese users can join the group through WeChat.&lt;/li&gt; &#xA; &lt;li&gt;International users can join the community through Discord.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;贡献你的代码 / Contribute your code&lt;/h2&gt; &#xA;&lt;p&gt;这是一个高级话题，在贡献你的代码之前，确保你对 Yaklang 整个项目结构有所了解。&lt;/p&gt; &#xA;&lt;p&gt;This is an advanced topic. Before contributing your code, make sure you have an understanding of the entire Yaklang project structure.&lt;/p&gt; &#xA;&lt;p&gt;在贡献代码时，如果你希望修改 Yaklang 或 YakVM 本身的核心语法部分，最好与研发团队取得联系。&lt;/p&gt; &#xA;&lt;p&gt;When contributing code, if you want to modify the core syntax part of Yaklang or YakVM itself, it is best to contact the R&amp;amp;D team.&lt;/p&gt; &#xA;&lt;p&gt;如果您仅仅想要增加库的功能，或者修复一些库的 Bug，那么您可以直接提交 PR，当然 PR 中最好包含对应的单元测试，这很有助于提升我们的代码质量。&lt;/p&gt; &#xA;&lt;p&gt;If you just want to add functionality to the library, or fix some bugs in the library, then you can submit a PR directly. Of course, the PR should preferably include the corresponding unit test, which is very helpful to improve our code quality.&lt;/p&gt; &#xA;&lt;h2&gt;项目成员 / Project Members&lt;/h2&gt; &#xA;&lt;h3&gt;Maintainer&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VillanCh&#34;&gt;v1ll4n&lt;/a&gt;: Yak Project Maintainer.&lt;/p&gt; &#xA;&lt;h3&gt;yaklang 核心开发者 / Active yaklang core developers&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OrangeWatermelon&#34;&gt;z3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/way29&#34;&gt;Longlone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Go0p&#34;&gt;Go0p&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Matrix-Cain&#34;&gt;zwh-china&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bcy2007&#34;&gt;bcy2007&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/naiquann&#34;&gt;naiquan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Rookie-is&#34;&gt;Rookie-is&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;开源许可证 / Open Source LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;本仓库代码版本使用 AGPL 开源协议，这是一个严格的开源协议，且具有传染性，如果您使用了本仓库的代码，那么您的代码也必须开源。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;强制开源网络服务:要求提供网络服务的源代码必须开源。保证开源理念在网络环境下的实践。&lt;/li&gt; &#xA; &lt;li&gt;其他条款与 GPL 相同:开源免费、开源修改、衍生开源等。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;本项目开源仓库仅应该作为个人开源和学习使用。&lt;/p&gt; &#xA;&lt;p&gt;The code version in this repository uses the AGPL open source license, which is a strict open source license and is infectious. If you use the code in this repository, your code must also be open source.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Mandatory open source network services: Requires the source code of network services to be open source. Ensures the practice of open source philosophy in network environments.&lt;/li&gt; &#xA; &lt;li&gt;Other terms are the same as GPL: open source free, open source modification, derived open source, etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This open source repository should only be used for personal open source and learning.&lt;/p&gt; &#xA;&lt;h2&gt;鸣谢 / Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;本项目经由&lt;a href=&#34;https://www.uestc.edu.cn&#34;&gt;电子科技大学&lt;/a&gt;张小松(&lt;a href=&#34;https://www.scse.uestc.edu.cn/&#34;&gt;网络空间安全学院&lt;/a&gt;)教授学术指导。&lt;/p&gt; &#xA;&lt;p&gt;This project is academically guided by Professor Zhang Xiaosong (&lt;a href=&#34;https://www.scse.uestc.edu.cn/&#34;&gt;scse.uestc.edu.cn&lt;/a&gt;), &lt;a href=&#34;https://www.uestc.edu.cn&#34;&gt;University of Electronic Science and Technology of China&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yaklang/yaklang/main/imgs/lab-logo.png&#34; style=&#34;width: 180px&#34;&gt; &#xA;&lt;h3&gt;基础理论学科 / Basic theoretical disciplines&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Alonzo Church, &#34;A set of postulates for the foundation of logic&#34;, Annals of Mathematics, 33(2), 346-366, 1932.&lt;/li&gt; &#xA; &lt;li&gt;Dana Scott, Christopher Strachey, &#34;Toward a mathematical semantics for computer languages&#34;, Proceedings of the Symposium on Computers and Automata, Microwave Research Institute Symposia Series Vol. 21, New York, 1971.&lt;/li&gt; &#xA; &lt;li&gt;Henk Barendregt, Wil Dekkers, Richard Statman, lambda Calculus with Types, Perspectives in Logic. Cambridge University Press, 2013.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;工程技术 / Engineering Technology&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Terence Parr, &#34;The Definitive ANTLR 4 Reference&#34;, Pragmatic Bookshelf, 2013.&lt;/li&gt; &#xA; &lt;li&gt;Terence Parr, &#34;Simplifying Complex Networks Using Temporal Pattern Mining: The Case of AT&amp;amp;T&#39;s Observed Data Network&#34;, Dissertation, 1995.&lt;/li&gt; &#xA; &lt;li&gt;Terence Parr, Russell Quong, &#34;ANTLR: A Predicated-LL(k) Parser Generator&#34;, Journal of Software Practice and Experience, July 1995.&lt;/li&gt; &#xA; &lt;li&gt;Google Ins, &#34;Protocol Buffers&#34;, &lt;a href=&#34;https://developers.google.com/protocol-buffers&#34;&gt;https://developers.google.com/protocol-buffers&lt;/a&gt;, 2020.&lt;/li&gt; &#xA; &lt;li&gt;Google Ins, &#34;gRPC&#34;, &lt;a href=&#34;https://grpc.io/&#34;&gt;https://grpc.io/&lt;/a&gt;, 2020.&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Ins, &#34;Monaco Editor&#34;, &lt;a href=&#34;https://microsoft.github.io/monaco-editor/&#34;&gt;https://microsoft.github.io/monaco-editor/&lt;/a&gt;, 2020.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>hahwul/dalfox</title>
    <updated>2023-05-08T01:35:29Z</updated>
    <id>tag:github.com,2023-05-08:/hahwul/dalfox</id>
    <link href="https://github.com/hahwul/dalfox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌙🦊 Dalfox is a powerful open-source XSS scanner and utility focused on automation.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13212227/120111054-49ffc780-c1ab-11eb-974e-e198d53ddb48.png&#34; alt=&#34;&#34; width=&#34;300px;&#34;&gt;&lt;/a&gt; &lt;br&gt;🌙🦊=XSS&lt;br&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/hahwul/dalfox/actions/workflows/go.yml&#34;&gt;&lt;img src=&#34;https://github.com/hahwul/dalfox/actions/workflows/go.yml/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://api.codacy.com/project/badge/Grade/17cac7b8d1e849a688577f2bbdd6ecd0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/hahwul/dalfox&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/hahwul/dalfox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/hahwul/dalfox&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/hahwul/dalfox/branch/main/graph/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=hahwul&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/hahwul?style=flat&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;DalFox is a powerful open-source tool that focuses on automation, making it ideal for quickly scanning for XSS flaws and analyzing parameters. Its advanced testing engine and niche features are designed to streamline the process of detecting and verifying vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;As for the name, Dal(&lt;a href=&#34;https://en.wiktionary.org/wiki/%EB%8B%AC&#34;&gt;달&lt;/a&gt;) is the Korean word for &#34;moon,&#34; while &#34;Fox&#34; stands for &#34;Finder Of XSS&#34; or 🦊&lt;/p&gt; &#xA;&lt;h2&gt;TOC&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#key-features&#34;&gt;Key features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#how-to-install&#34;&gt;How to Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#poc-format&#34;&gt;POC format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#in-the-code&#34;&gt;In the Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#wiki&#34;&gt;Wiki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#question&#34;&gt;Question&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;p&gt;Mode: &lt;code&gt;url&lt;/code&gt; &lt;code&gt;sxss&lt;/code&gt; &lt;code&gt;pipe&lt;/code&gt; &lt;code&gt;file&lt;/code&gt; &lt;code&gt;server&lt;/code&gt; &lt;code&gt;payload&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Class&lt;/th&gt; &#xA;   &lt;th&gt;Key Feature&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Discovery&lt;/td&gt; &#xA;   &lt;td&gt;Parameter analysis&lt;/td&gt; &#xA;   &lt;td&gt;- Find reflected param&lt;br&gt;- Find alive/bad special chars, event handler and attack code &lt;br&gt;- Identification of injection points(HTML/JS/Attribute) &lt;br&gt; &lt;code&gt;inHTML-none&lt;/code&gt; &lt;code&gt;inJS-none&lt;/code&gt; &lt;code&gt;inJS-double&lt;/code&gt; &lt;code&gt;inJS-single&lt;/code&gt; &lt;code&gt;inJS-backtick&lt;/code&gt; &lt;code&gt;inATTR-none&lt;/code&gt; &lt;code&gt;inATTR-double&lt;/code&gt; &lt;code&gt;inATTR-single&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Static analysis&lt;/td&gt; &#xA;   &lt;td&gt;- Check bad-header like CSP, XFO, etc.. with req/res base&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;BAV analysis&lt;/td&gt; &#xA;   &lt;td&gt;- Testing BAV(Basic Another Vulnerability) , e.g &lt;code&gt;sqli&lt;/code&gt; &lt;code&gt;ssti&lt;/code&gt; &lt;code&gt;open-redirects&lt;/code&gt;, &lt;code&gt;crlf&lt;/code&gt;, &lt;code&gt;esii&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parameter Mining&lt;/td&gt; &#xA;   &lt;td&gt;- Find new param with Dictionary attack (default is &lt;a href=&#34;https://github.com/1ndianl33t/Gf-Patterns&#34;&gt;GF-Patterns&lt;/a&gt;)&lt;br&gt;- Support custom dictionary file (&lt;code&gt;--mining-dict-word&lt;/code&gt;)&lt;br&gt;- Find new param with DOM&lt;br&gt;- Use remote wordlist to mining (&lt;code&gt;--remote-wordlists&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Built-in Grepping&lt;/td&gt; &#xA;   &lt;td&gt;- It Identify the basic info leak of SSTi, Credential, SQL Error, and so on&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;WAF Detection and Evasion&lt;/td&gt; &#xA;   &lt;td&gt;- Detect to WAF(Web Application Firewall). &lt;br&gt;- if found waf and using special flag, evasion using slow request&lt;br&gt;- &lt;code&gt;--waf-evasion&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Scanning&lt;/td&gt; &#xA;   &lt;td&gt;XSS Scanning&lt;/td&gt; &#xA;   &lt;td&gt;- Reflected XSS / Stored XSS / DOM XSS&lt;br&gt;- DOM base verifying&lt;br&gt;- Headless base verifying&lt;br&gt;- Blind XSS testing with param, header(&lt;code&gt;-b&lt;/code&gt; , &lt;code&gt;--blind&lt;/code&gt; options)&lt;br&gt;- Only testing selected parameters (&lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;--param&lt;/code&gt;)&lt;br&gt;- Only testing parameter analysis (&lt;code&gt;--only-discovery&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Friendly Pipeline&lt;/td&gt; &#xA;   &lt;td&gt;- Single url mode (&lt;code&gt;dalfox url&lt;/code&gt;)&lt;br&gt;- From file mode (&lt;code&gt;dalfox file urls.txt&lt;/code&gt;)&lt;br&gt;- From IO(pipeline) mode (&lt;code&gt;dalfox pipe&lt;/code&gt;)&lt;br&gt;- From raw http request file mode (&lt;code&gt;dalfox file raw.txt --rawdata&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optimization query of payloads&lt;/td&gt; &#xA;   &lt;td&gt;- Check the injection point through abstraction and generated the fit payload.&lt;br&gt;- Eliminate unnecessary payloads based on badchar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Encoder&lt;/td&gt; &#xA;   &lt;td&gt;- All test payloads(build-in, your custom/blind) are tested in parallel with the encoder.&lt;br&gt;- To Double URL Encoder&lt;br&gt;- To HTML Hex Encoder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sequence&lt;/td&gt; &#xA;   &lt;td&gt;- Auto-check the special page for stored xss (&lt;code&gt;--trigger&lt;/code&gt;) &lt;br&gt;- Support (&lt;code&gt;--sequence&lt;/code&gt;) options for Stored XSS , only &lt;code&gt;sxss&lt;/code&gt; mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP&lt;/td&gt; &#xA;   &lt;td&gt;HTTP Options&lt;/td&gt; &#xA;   &lt;td&gt;- Overwrite HTTP Method (&lt;code&gt;-X&lt;/code&gt;, &lt;code&gt;--method&lt;/code&gt;)&lt;br&gt;- Follow redirects (&lt;code&gt;--follow-redirects&lt;/code&gt;)&lt;br&gt;- Add header (&lt;code&gt;-H&lt;/code&gt;, &lt;code&gt;--header&lt;/code&gt;)&lt;br&gt;- Add cookie (&lt;code&gt;-C&lt;/code&gt;, &lt;code&gt;--cookie&lt;/code&gt;)&lt;br&gt;- Add User-Agent (&lt;code&gt;--user-agent&lt;/code&gt;)&lt;br&gt;- Set timeout (&lt;code&gt;--timeout&lt;/code&gt;)&lt;br&gt;- Set Delay (&lt;code&gt;--delay&lt;/code&gt;)&lt;br&gt;- Set Proxy (&lt;code&gt;--proxy&lt;/code&gt;)&lt;br&gt;- Set ignore return codes (&lt;code&gt;--ignore-return&lt;/code&gt;)&lt;br&gt;- Load cookie from raw request (&lt;code&gt;--cookie-from-raw&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Concurrency&lt;/td&gt; &#xA;   &lt;td&gt;Worker&lt;/td&gt; &#xA;   &lt;td&gt;- Set worker&#39;s number(&lt;code&gt;-w&lt;/code&gt;, &lt;code&gt;--worker&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N * hosts&lt;/td&gt; &#xA;   &lt;td&gt;- Use multicast mode (&lt;code&gt;--multicast&lt;/code&gt;) , only &lt;code&gt;file&lt;/code&gt; / &lt;code&gt;pipe&lt;/code&gt; mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Output&lt;/td&gt; &#xA;   &lt;td&gt;Output&lt;/td&gt; &#xA;   &lt;td&gt;- Only the PoC code and useful information is write as Stdout&lt;br&gt;- Save output (&lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;--output&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format&lt;/td&gt; &#xA;   &lt;td&gt;- JSON / Plain (&lt;code&gt;--format&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Printing&lt;/td&gt; &#xA;   &lt;td&gt;- Silence mode (&lt;code&gt;--silence&lt;/code&gt;)&lt;br&gt;- You may choose not to print the color (&lt;code&gt;--no-color&lt;/code&gt;)&lt;br&gt;- You may choose not to print the spinner (&lt;code&gt;--no-spinner&lt;/code&gt;)&lt;br&gt;- You may choose show only special poc code (&lt;code&gt;--only-poc&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Report&lt;/td&gt; &#xA;   &lt;td&gt;- Show detail report (&lt;code&gt;--report&lt;/code&gt; and &lt;code&gt;--report-format=&amp;lt;plain/json&amp;gt;&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Extensibility&lt;/td&gt; &#xA;   &lt;td&gt;REST API&lt;/td&gt; &#xA;   &lt;td&gt;- API Server and Swagger (&lt;code&gt;dalfox server&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Payload Mode&lt;/td&gt; &#xA;   &lt;td&gt;- Generate and Enumerate Payloads for XSS Testing (&lt;code&gt;dalfox payload&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Found Action&lt;/td&gt; &#xA;   &lt;td&gt;- Lets you specify the actions to take when detected. &lt;br&gt;- Notify, for example (&lt;code&gt;--found-action&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom Grepping&lt;/td&gt; &#xA;   &lt;td&gt;- Can grep with custom regular expressions on response&lt;br&gt;- If duplicate detection, it performs deduplication (&lt;code&gt;--grep&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom Payloads&lt;/td&gt; &#xA;   &lt;td&gt;- Use custom payloads list file (&lt;code&gt;--custom-payload&lt;/code&gt;) &lt;br&gt;- Custom alert value (&lt;code&gt;--custom-alert-value&lt;/code&gt;) &lt;br&gt;- Custom alert type (&lt;code&gt;--custom-alert-type&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remote Payloads&lt;/td&gt; &#xA;   &lt;td&gt;- Use remote payloads from portswigger, payloadbox, etc.. (&lt;code&gt;--remote-payloads&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Package&lt;/td&gt; &#xA;   &lt;td&gt;Package manager&lt;/td&gt; &#xA;   &lt;td&gt;- &lt;a href=&#34;https://pkg.go.dev/github.com/hahwul/dalfox/v2&#34;&gt;pkg.go.dev&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://github.com/hahwul/homebrew-dalfox&#34;&gt;homebrew with tap&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://snapcraft.io/dalfox&#34;&gt;snapcraft&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Docker ENV&lt;/td&gt; &#xA;   &lt;td&gt;- &lt;a href=&#34;https://hub.docker.com/repository/docker/hahwul/dalfox&#34;&gt;docker hub&lt;/a&gt;&lt;br&gt;- &lt;a href=&#34;https://github.com/hahwul/dalfox/packages&#34;&gt;github package of docker&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Other&lt;/td&gt; &#xA;   &lt;td&gt;- &lt;a href=&#34;https://github.com/marketplace/actions/xss-scan-with-dalfox&#34;&gt;github action&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And the various options required for the testing :D&lt;/p&gt; &#xA;&lt;h2&gt;How to Install&lt;/h2&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;go1.17&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/hahwul/dalfox/v2@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;go1.16&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GO111MODULE=on go get github.com/hahwul/dalfox/v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using homebrew (macos)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap hahwul/dalfox&#xA;brew install dalfox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using snapcraft (ubuntu)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo snap install dalfox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information? please read &lt;a href=&#34;https://dalfox.hahwul.com/docs/installation/&#34;&gt;Installation guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;dalfox [mode] [target] [flags] &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Single target mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dalfox url http://testphp.vulnweb.com/listproducts.php\?cat\=123\&amp;amp;artist\=123\&amp;amp;asdf\=ff \&#xA;&#x9;-b https://your-callback-url&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple target mode from file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dalfox file urls_file --custom-payload ./mypayloads.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pipeline mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat urls_file | dalfox pipe -H &#34;AuthToken: bbadsfkasdfadsf87&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other tips, See &lt;a href=&#34;https://github.com/hahwul/dalfox/wiki&#34;&gt;wiki&lt;/a&gt; for detailed instructions!&lt;/p&gt; &#xA;&lt;h2&gt;POC format&lt;/h2&gt; &#xA;&lt;p&gt;Sample poc log&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[POC][G][BUILT-IN/dalfox-error-mysql/GET] http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123DalFox&#xA;[POC][V][GET] http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123%22%3E%3Csvg%2Fclass%3D%22dalfox%22onLoad%3Dalert%2845%29%3E&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Format&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Identity&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Information&lt;/th&gt; &#xA;   &lt;th&gt;BLANK&lt;/th&gt; &#xA;   &lt;th&gt;PoC Code&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POC&lt;/td&gt; &#xA;   &lt;td&gt;G&lt;/td&gt; &#xA;   &lt;td&gt;BUILT-IN/dalfox-error-mysql/GET&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123DalFox&#34;&gt;http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123DalFox&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POC&lt;/td&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123%22%3E%3Csvg%2Fclass%3D%22dalfox%22onLoad%3Dalert%2845%29%3E&#34;&gt;http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123%22%3E%3Csvg%2Fclass%3D%22dalfox%22onLoad%3Dalert%2845%29%3E&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POC&lt;/td&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123%22%3E%3Csvg%2Fclass%3D%22dalfox%22onLoad%3Dalert%2845%29%3E&#34;&gt;http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123%22%3E%3Csvg%2Fclass%3D%22dalfox%22onLoad%3Dalert%2845%29%3E&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;G&lt;/code&gt;(Grep) , &lt;code&gt;R&lt;/code&gt;(Reflected) , &lt;code&gt; V&lt;/code&gt;(Verify)&lt;/li&gt; &#xA; &lt;li&gt;Information: Method, grepping name, etc..&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Why is there a gap? It is a method to make it easier to parse only the poc code through cut etc. For example, you can do this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dalfox url http://testphp.vulnweb.com/listproducts.php\?cat\=123\&amp;amp;artist\=123\&amp;amp;asdf\=ff \&#xA;&#x9;| cut -d &#34; &#34; -f 2 &amp;gt; output&#xA;cat output&#xA;# http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123DalFox&#xA;# http://testphp.vulnweb.com/listproducts.php?artist=123&amp;amp;asdf=ff&amp;amp;cat=123%22%3E%3Csvg%2FOnLoad%3D%22%60%24%7Bprompt%60%60%7D%60%22+class%3Ddalfox%3E&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;In the code&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;dalfox &#34;github.com/hahwul/dalfox/v2/lib&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;opt := dalfox.Options{&#xA;&#x9;&#x9;Cookie:     &#34;ABCD=1234&#34;,&#xA;&#x9;}&#xA;&#x9;result, err := dalfox.NewScan(dalfox.Target{&#xA;&#x9;&#x9;URL:     &#34;https://xss-game.appspot.com/level1/frame&#34;,&#xA;&#x9;&#x9;Method:  &#34;GET&#34;,&#xA;&#x9;&#x9;Options: opt,&#xA;&#x9;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(result)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -o xssapp ; ./xssapp&#xA;# [] [{V GET https://xss-game.appspot.com/level1/frame?query=%3Ciframe+srcdoc%3D%22%3Cinput+onauxclick%3Dprint%281%29%3E%22+class%3Ddalfox%3E%3C%2Fiframe%3E}] 2.618998247s 2021-07-11 10:59:26.508483153 +0900 KST m=+0.000794230 2021-07-11 10:59:29.127481217 +0900 KST m=+2.619792477}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13212227/108603497-7a390c80-73eb-11eb-92c1-b31bd9574861.jpg&#34; alt=&#34;1414&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13212227/108603373-ebc48b00-73ea-11eb-9651-7ce4617845f6.jpg&#34; alt=&#34;1415&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Single URL Scanning&lt;/td&gt; &#xA;   &lt;td&gt;Massive(Multicast/Mass) Scanning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13212227/108603375-ec5d2180-73ea-11eb-8e6e-d59d915c0291.jpg&#34; alt=&#34;1416&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13212227/108613244-66b19400-7433-11eb-87fc-2f195f9011b3.jpg&#34; alt=&#34;1417&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;REST API Server Mode&lt;/td&gt; &#xA;   &lt;td&gt;Output and Customizing (found-action / grepping)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Wiki&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dalfox.hahwul.com/docs/home/&#34;&gt;Wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Question&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;a href=&#34;https://github.com/hahwul/dalfox/discussions&#34;&gt;discussions&lt;/a&gt; actively!&lt;/p&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Detailed changes for each release are documented in the &lt;a href=&#34;https://github.com/hahwul/dalfox/releases&#34;&gt;release notes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;DalFox&#39;s open-source project and made it with ❤️ if you want contribute this project, please see &lt;a href=&#34;https://github.com/hahwul/dalfox/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; and Pull-Request with cool your contents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hahwul/dalfox/graphs/contributors&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hahwul/dalfox/main/CONTRIBUTORS.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wwengg/douyin</title>
    <updated>2023-05-08T01:35:29Z</updated>
    <id>tag:github.com,2023-05-08:/wwengg/douyin</id>
    <link href="https://github.com/wwengg/douyin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;抖音[直播伴侣]推流密钥获取工具 抖音直播间弹幕、进入房间等数据通过Websocket对接Fay&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;douyin&lt;/h1&gt; &#xA;&lt;p&gt;抖音[直播伴侣]推流密钥获取工具 抖音直播间弹幕、进入房间等数据获取，通过Websocket对接Fay&lt;/p&gt; &#xA;&lt;h3&gt;大概思路&lt;/h3&gt; &#xA;&lt;p&gt;通过中间人代理获取开播返回的rtmp地址&lt;/p&gt; &#xA;&lt;h3&gt;实现流程&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;用户安装CA证书&lt;/li&gt; &#xA; &lt;li&gt;启动代理服务器&lt;/li&gt; &#xA; &lt;li&gt;检测到开播&lt;/li&gt; &#xA; &lt;li&gt;解析得出RTMP地址&lt;/li&gt; &#xA; &lt;li&gt;强制结束直播伴侣(不能点断开)&lt;/li&gt; &#xA; &lt;li&gt;OBS介入推流&lt;/li&gt; &#xA; &lt;li&gt;关闭代理服务器&lt;/li&gt; &#xA; &lt;li&gt;退出本进程&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;OpenSSL生成证书&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./certificates/generate-certificates.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;MacOS信任证书&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ./certificates/proxy-ca.crt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows信任证书&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;双击打开./certificates/proxy-ca.crt,点击【安装证书】&lt;/li&gt; &#xA; &lt;li&gt;选择【本地计算机】并单击下一步&lt;/li&gt; &#xA; &lt;li&gt;选择【将所有的证书都放入下列存储(P)】-&amp;gt; 点击【浏览】&lt;/li&gt; &#xA; &lt;li&gt;选中第二个【受信任的根证书颁发机构】-&amp;gt; 点击【确定】-&amp;gt; 选择【下一步】&lt;/li&gt; &#xA; &lt;li&gt;选择【完成】-&amp;gt; 点击【确定】-&amp;gt; 点击【确定】&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Android信任证书&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;将proxy-ca.crt发至手机&lt;/li&gt; &#xA; &lt;li&gt;。。。。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Ios信任证书&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;将proxy-ca.crt发至手机&lt;/li&gt; &#xA; &lt;li&gt;。。。。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;注意事项&lt;/h2&gt; &#xA;&lt;p&gt;要关直播请再次运行直播伴侣 点 继续直播 然后再关闭直播 否则就算不推流了也不会立刻下播（懒得写下播了）&lt;/p&gt; &#xA;&lt;h3&gt;Fay中需将json的大写首字母改成小写&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wwengg/douyin/master/fay/fay.pic.jpg&#34; alt=&#34;Fay中需修改的代码&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;运行说明&lt;/h2&gt; &#xA;&lt;h3&gt;Docker运行&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;需要先生成证书&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./certificates/generate-certificates.sh&#xA;cd ./docker&#xA;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;release下载可执行文件运行&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/wwengg/douyin/releases&#34;&gt;下载&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;生成证书&lt;/li&gt; &#xA;  &lt;li&gt;信任证书&lt;/li&gt; &#xA;  &lt;li&gt;打开可执行文件&lt;/li&gt; &#xA;  &lt;li&gt;将证书发给需要代理的设备&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;感谢&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elazarl/goproxy&#34;&gt;goproxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheRamU/Fay&#34;&gt;Fay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cloud370/get-douyin-rtmp&#34;&gt;get-douyin-rtmp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>