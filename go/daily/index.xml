<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-30T01:35:48Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>charmbracelet/vhs</title>
    <updated>2022-10-30T01:35:48Z</updated>
    <id>tag:github.com,2022-10-30:/charmbracelet/vhs</id>
    <link href="https://github.com/charmbracelet/vhs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your CLI home video recorder 📼&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VHS&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/42545625/198402537-12ca2f6c-0779-4eb8-a67c-8db9cb3df13c.png#gh-dark-mode-only&#34; width=&#34;500&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/42545625/198402542-a305f669-a05a-4d91-b18b-ca76e72b655a.png#gh-light-mode-only&#34; width=&#34;500&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/charmbracelet/vhs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/vhs.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/vhs?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;Go Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/vhs/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/vhs/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Write terminal GIFs as code for integration testing and demoing your CLI tools.&lt;/p&gt; &#xA;&lt;img alt=&#34;Welcome to VHS&#34; src=&#34;https://stuff.charm.sh/vhs/examples/neofetch_3.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;The above example was generated with VHS (&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/examples/neofetch/neofetch.tape&#34;&gt;view source&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;To get started, &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#installation&#34;&gt;install VHS&lt;/a&gt; and create a new &lt;code&gt;.tape&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vhs new demo.tape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the &lt;code&gt;.tape&lt;/code&gt; file with your favorite &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vim demo.tape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Tape files consist of a series of &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#vhs-command-reference&#34;&gt;commands&lt;/a&gt;. The commands are instructions for VHS to perform on its virtual terminal. For a list of all possible commands see &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#vhs-command-reference&#34;&gt;the command reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# Where should we write the GIF?&#xA;Output demo.gif&#xA;&#xA;# Set up a 1200x600 terminal with 46px font.&#xA;Set FontSize 46&#xA;Set Width 1200&#xA;Set Height 600&#xA;&#xA;# Type a command in the terminal.&#xA;Type &#34;echo &#39;Welcome to VHS!&#39;&#34;&#xA;&#xA;# Pause for dramatic effect...&#xA;Sleep 500ms&#xA;&#xA;# Run the command by pressing enter.&#xA;Enter&#xA;&#xA;# Admire the output for a bit.&#xA;Sleep 5s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you&#39;ve finished, save the file and feed it into VHS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vhs &amp;lt; demo.tape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All done! You should see a new file called &lt;code&gt;demo.gif&lt;/code&gt; (or whatever you named the &lt;code&gt;Output&lt;/code&gt;) in the directory.&lt;/p&gt; &#xA;&lt;img alt=&#34;A GIF produced by the VHS code above&#34; src=&#34;https://stuff.charm.sh/vhs/examples/demo.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;For more examples see the &lt;a href=&#34;https://github.com/charmbracelet/vhs/tree/main/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; VHS requires &lt;a href=&#34;https://github.com/tsl0922/ttyd&#34;&gt;&lt;code&gt;ttyd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://ffmpeg.org&#34;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; to be installed and available on your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Use a package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# macOS or Linux&#xA;brew install charmbracelet/tap/vhs ffmpeg&#xA;brew install ttyd --HEAD&#xA;&#xA;# Arch Linux (btw)&#xA;yay -S vhs-bin&#xA;&#xA;# Nix&#xA;nix-env -iA nixpkgs.vhs&#xA;&#xA;# Debian/Ubuntu&#xA;sudo mkdir -p /etc/apt/keyrings&#xA;curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg&#xA;echo &#34;deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *&#34; | sudo tee /etc/apt/sources.list.d/charm.list&#xA;# Install ttyd from https://github.com/tsl0922/ttyd/releases&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install vhs ffmpeg&#xA;&#xA;# Fedora/RHEL&#xA;echo &#39;[charm]&#xA;name=Charm&#xA;baseurl=https://repo.charm.sh/yum/&#xA;enabled=1&#xA;gpgcheck=1&#xA;gpgkey=https://repo.charm.sh/yum/gpg.key&#39; | sudo tee /etc/yum.repos.d/charm.repo&#xA;# Install ttyd from https://github.com/tsl0922/ttyd/releases&#xA;sudo yum install vhs ffmpeg&#xA;&#xA;# Void Linux&#xA;sudo xbps-install vhs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, use Docker to run VHS directly, dependencies included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v $PWD:/vhs ghcr.io/charmbracelet/vhs &amp;lt;cassette&amp;gt;.tape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, download it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs/releases&#34;&gt;Packages&lt;/a&gt; are available in Debian and RPM formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs/releases&#34;&gt;Binaries&lt;/a&gt; are available for Linux, macOS, and Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or, just install it with &lt;code&gt;go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/charmbracelet/vhs@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The VHS Server&lt;/h2&gt; &#xA;&lt;p&gt;VHS has an SSH server built in! When you self host VHS you can access it as though it were installed locally. VHS will have access to commands and applications on the host so you don&#39;t need to install them on your machine.&lt;/p&gt; &#xA;&lt;p&gt;To start the server run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vhs serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Configuration Options&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_PORT&lt;/code&gt;: The port to listen on (&lt;code&gt;1976&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_HOST&lt;/code&gt;: The host to listen on (&lt;code&gt;localhost&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_GID&lt;/code&gt;: The Group ID to run the server as (current user&#39;s GID)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_UID&lt;/code&gt;: The User ID to run the server as (current user&#39;s UID)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_KEY_PATH&lt;/code&gt;: The path to the SSH key to use (&lt;code&gt;.ssh/vhs_ed25519&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;VHS_AUTHORIZED_KEYS_PATH&lt;/code&gt;: The path to the authorized keys file (empty, publicly accessible)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Then, simply access VHS from a different machine via &lt;code&gt;ssh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ssh vhs.example.com &amp;lt; demo.tape &amp;gt; demo.gif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VHS Command Reference&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; You can view all VHS documentation on the command line with &lt;code&gt;vhs manual&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are a few basic types of VHS commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#output&#34;&gt;&lt;code&gt;Output &amp;lt;path&amp;gt;&lt;/code&gt;&lt;/a&gt;: specify file output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#settings&#34;&gt;&lt;code&gt;Set &amp;lt;Setting&amp;gt; Value&lt;/code&gt;&lt;/a&gt;: set recording settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#type&#34;&gt;&lt;code&gt;Type &#34;&amp;lt;characters&amp;gt;&#34;&lt;/code&gt;&lt;/a&gt;: emulate typing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#arrow-keys&#34;&gt;&lt;code&gt;Left&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#arrow-keys&#34;&gt;&lt;code&gt;Right&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#arrow-keys&#34;&gt;&lt;code&gt;Up&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#arrow-keys&#34;&gt;&lt;code&gt;Down&lt;/code&gt;&lt;/a&gt;: arrow keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#backspace&#34;&gt;&lt;code&gt;Backspace&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#enter&#34;&gt;&lt;code&gt;Enter&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#tab&#34;&gt;&lt;code&gt;Tab&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#space&#34;&gt;&lt;code&gt;Space&lt;/code&gt;&lt;/a&gt;: special keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#ctrl&#34;&gt;&lt;code&gt;Ctrl+&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/a&gt;: press control + key&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#sleep&#34;&gt;&lt;code&gt;Sleep &amp;lt;time&amp;gt;&lt;/code&gt;&lt;/a&gt;: wait for a certain amount of time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#hide&#34;&gt;&lt;code&gt;Hide&lt;/code&gt;&lt;/a&gt;: hide commands from output&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#show&#34;&gt;&lt;code&gt;Show&lt;/code&gt;&lt;/a&gt;: stop hiding commands from output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Output&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Output&lt;/code&gt; command allows you to specify the location and file format of the render. You can specify more than one output in a tape file which will render them to the respective locations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Output out.gif&#xA;Output out.mp4&#xA;Output out.webm&#xA;Output frames/ # a directory of frames as a PNG sequence&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Set&lt;/code&gt; command allows you to change global aspects of the terminal, such as the font settings, window dimensions, and GIF output location.&lt;/p&gt; &#xA;&lt;p&gt;Setting must be administered at the top of the tape file. Any setting (except &lt;code&gt;TypingSpeed&lt;/code&gt;) applied after a non-setting or non-output command will be ignored.&lt;/p&gt; &#xA;&lt;h4&gt;Set Font Size&lt;/h4&gt; &#xA;&lt;p&gt;Set the font size with the &lt;code&gt;Set FontSize &amp;lt;number&amp;gt;&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set FontSize 10&#xA;Set FontSize 20&#xA;Set FontSize 40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of setting the font size to 10 pixels&#34; src=&#34;https://stuff.charm.sh/vhs/examples/font-size-10.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;img alt=&#34;Example of setting the font size to 20 pixels&#34; src=&#34;https://stuff.charm.sh/vhs/examples/font-size-20.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;img alt=&#34;Example of setting the font size to 40 pixels&#34; src=&#34;https://stuff.charm.sh/vhs/examples/font-size-40.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Font Family&lt;/h4&gt; &#xA;&lt;p&gt;Set the font family with the &lt;code&gt;Set FontFamily &#34;&amp;lt;font&amp;gt;&#34;&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set FontFamily &#34;Monoflow&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the font family to Monoflow&#34; src=&#34;https://stuff.charm.sh/vhs/examples/font-family.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Width&lt;/h4&gt; &#xA;&lt;p&gt;Set the width of the terminal with the &lt;code&gt;Set Width&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Width 300&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the width of the terminal&#34; src=&#34;https://stuff.charm.sh/vhs/examples/width.gif&#34; width=&#34;300&#34;&gt; &#xA;&lt;h4&gt;Set Height&lt;/h4&gt; &#xA;&lt;p&gt;Set the height of the terminal with the &lt;code&gt;Set Height&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Height 1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the height of the terminal&#34; src=&#34;https://stuff.charm.sh/vhs/examples/height.gif&#34; width=&#34;300&#34;&gt; &#xA;&lt;h4&gt;Set Letter Spacing&lt;/h4&gt; &#xA;&lt;p&gt;Set the spacing between letters (tracking) with the &lt;code&gt;Set LetterSpacing&lt;/code&gt; Command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set LetterSpacing 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the letter spacing to 20 pixels between characters&#34; src=&#34;https://stuff.charm.sh/vhs/examples/letter-spacing.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Line Height&lt;/h4&gt; &#xA;&lt;p&gt;Set the spacing between lines with the &lt;code&gt;Set LineHeight&lt;/code&gt; Command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set LineHeight 1.8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the line height to 1.8&#34; src=&#34;https://stuff.charm.sh/vhs/examples/line-height.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Typing Speed&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set TypingSpeed 500ms # 500ms&#xA;Set TypingSpeed 1s    # 1s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the typing speed of seconds per key press. For example, a typing speed of &lt;code&gt;0.1&lt;/code&gt; would result in a &lt;code&gt;0.1s&lt;/code&gt; (&lt;code&gt;100ms&lt;/code&gt;) delay between each character being typed.&lt;/p&gt; &#xA;&lt;p&gt;This setting can also be overwritten per command with the &lt;code&gt;@&amp;lt;time&amp;gt;&lt;/code&gt; syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set TypingSpeed 0.1&#xA;Type &#34;100ms delay per character&#34;&#xA;Type@500ms &#34;500ms delay per character&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the typing speed to type different words&#34; src=&#34;https://stuff.charm.sh/vhs/examples/typing-speed.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Theme&lt;/h4&gt; &#xA;&lt;p&gt;Set the theme of the terminal with the &lt;code&gt;Set Theme&lt;/code&gt; command. The theme value should be a JSON string with the base 16 colors and foreground + background.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Theme { &#34;name&#34;: &#34;Whimsy&#34;, &#34;black&#34;: &#34;#535178&#34;, &#34;red&#34;: &#34;#ef6487&#34;, &#34;green&#34;: &#34;#5eca89&#34;, &#34;yellow&#34;: &#34;#fdd877&#34;, &#34;blue&#34;: &#34;#65aef7&#34;, &#34;purple&#34;: &#34;#aa7ff0&#34;, &#34;cyan&#34;: &#34;#43c1be&#34;, &#34;white&#34;: &#34;#ffffff&#34;, &#34;brightBlack&#34;: &#34;#535178&#34;, &#34;brightRed&#34;: &#34;#ef6487&#34;, &#34;brightGreen&#34;: &#34;#5eca89&#34;, &#34;brightYellow&#34;: &#34;#fdd877&#34;, &#34;brightBlue&#34;: &#34;#65aef7&#34;, &#34;brightPurple&#34;: &#34;#aa7ff0&#34;, &#34;brightCyan&#34;: &#34;#43c1be&#34;, &#34;brightWhite&#34;: &#34;#ffffff&#34;, &#34;background&#34;: &#34;#29283b&#34;, &#34;foreground&#34;: &#34;#b3b0d6&#34;, &#34;selectionBackground&#34;: &#34;#3d3c58&#34;, &#34;cursorColor&#34;: &#34;#b3b0d6&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of changing the theme to Whimsy&#34; src=&#34;https://stuff.charm.sh/vhs/examples/theme.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Padding&lt;/h4&gt; &#xA;&lt;p&gt;Set the padding (in pixels) of the terminal frame with the &lt;code&gt;Set Padding&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Padding 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of setting padding to 0&#34; src=&#34;https://stuff.charm.sh/vhs/examples/padding.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Set Framerate&lt;/h4&gt; &#xA;&lt;p&gt;Set the rate at which VHS captures frames with the &lt;code&gt;Set Framerate&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set Framerate 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Set Playback Speed&lt;/h4&gt; &#xA;&lt;p&gt;Set the playback speed of the final render.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Set PlaybackSpeed 0.5 # Make output 2 times slower&#xA;Set PlaybackSpeed 1.0 # Keep output at normal speed (default)&#xA;Set PlaybackSpeed 2.0 # Make output 2 times faster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Type&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Type&lt;/code&gt; to emulate key presses. That is, you can use &lt;code&gt;Type&lt;/code&gt; to script typing in a terminal. Type is handy for both entering commands and interacting with prompts and TUIs in the terminal. The command takes a string argument of the characters to type.&lt;/p&gt; &#xA;&lt;p&gt;You can set the standard typing speed with &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/vhs/main/#set-typing-speed&#34;&gt;&lt;code&gt;Set TypingSpeed&lt;/code&gt;&lt;/a&gt; and override it in places with a &lt;code&gt;@time&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;# Type something&#xA;Type &#34;Whatever you want&#34;&#xA;&#xA;# Type something really slowly!&#xA;Type@500ms &#34;Slow down there, partner.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of using the Type command in VHS&#34; src=&#34;https://stuff.charm.sh/vhs/examples/type.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Keys&lt;/h3&gt; &#xA;&lt;p&gt;Key commands take an optional &lt;code&gt;@time&lt;/code&gt; and optional repeat &lt;code&gt;count&lt;/code&gt; for repeating the key press every interval of &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Key[@&amp;lt;time&amp;gt;] [count]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Backspace&lt;/h4&gt; &#xA;&lt;p&gt;Press the backspace key with the &lt;code&gt;Backspace&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Backspace 18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the Backspace key 18 times&#34; src=&#34;https://stuff.charm.sh/vhs/examples/backspace.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Ctrl&lt;/h4&gt; &#xA;&lt;p&gt;You can access the control modifier and send control sequences with the &lt;code&gt;Ctrl&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Ctrl+R&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the Ctrl+R key to reverse search&#34; src=&#34;https://stuff.charm.sh/vhs/examples/ctrl.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Enter&lt;/h4&gt; &#xA;&lt;p&gt;Press the enter key with the &lt;code&gt;Enter&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Enter 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the Enter key twice&#34; src=&#34;https://stuff.charm.sh/vhs/examples/enter.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Arrow Keys&lt;/h4&gt; &#xA;&lt;p&gt;Press any of the arrow keys with the &lt;code&gt;Up&lt;/code&gt;, &lt;code&gt;Down&lt;/code&gt;, &lt;code&gt;Left&lt;/code&gt;, &lt;code&gt;Right&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Up 2&#xA;Down 2&#xA;Left&#xA;Right&#xA;Left&#xA;Right&#xA;Type &#34;B&#34;&#xA;Type &#34;A&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the arrow keys to navigate text&#34; src=&#34;https://stuff.charm.sh/vhs/examples/arrow.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Tab&lt;/h4&gt; &#xA;&lt;p&gt;Enter a tab with the &lt;code&gt;Tab&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Tab@500ms 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the tab key twice for autocomplete&#34; src=&#34;https://stuff.charm.sh/vhs/examples/tab.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h4&gt;Space&lt;/h4&gt; &#xA;&lt;p&gt;Press the space bar with the &lt;code&gt;Space&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Space 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of pressing the space key&#34; src=&#34;https://stuff.charm.sh/vhs/examples/space.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;h3&gt;Sleep&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Sleep&lt;/code&gt; command allows you to continue capturing frames without interacting with the terminal. This is useful when you need to wait on something to complete while including it in the recording like a spinner or loading state. The command takes a number argument in seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Sleep 0.5   # 500ms&#xA;Sleep 2     # 2s&#xA;Sleep 100ms # 100ms&#xA;Sleep 1s    # 1s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hide&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Hide&lt;/code&gt; command allows you to exclude commands from the output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Hide&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command is helpful for performing any setup and cleanup required to record a GIF, such as building the latest version of a binary and removing the binary once the demo is recorded.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Output example.gif&#xA;&#xA;# Setup&#xA;Hide&#xA;Type &#34;go build -o example . &amp;amp;&amp;amp; clear&#34;&#xA;Enter&#xA;Show&#xA;&#xA;# Recording...&#xA;Type &#39;Running ./example&#39;&#xA;...&#xA;Enter&#xA;&#xA;# Cleanup&#xA;Hide&#xA;Type &#39;rm example&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Show&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Show&lt;/code&gt; command allows you to specify that the following commands should be un-hidden in the output. Since commands are shown by default, this command is really only useful after using the &lt;code&gt;Hide&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Hide&#xA;Type &#34;You won&#39;t see this being typed.&#34;&#xA;Show&#xA;Type &#34;You will see this being typed.&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img alt=&#34;Example of typing something while hidden&#34; src=&#34;https://stuff.charm.sh/vhs/examples/hide.gif&#34; width=&#34;600&#34;&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;You can hook up VHS to your CI pipeline to keep your GIFs up-to-date with the official VHS GitHub Action:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs-action&#34;&gt;⚙️ charmbracelet/vhs-action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;VHS can also be used for integration testing. Use the &lt;code&gt;.txt&lt;/code&gt; or &lt;code&gt;.ascii&lt;/code&gt; output to generate golden files. Store these files in a git repository to ensure there are no diffs between runs of the tape file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Output golden.ascii&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Syntax Highlighting&lt;/h2&gt; &#xA;&lt;p&gt;There’s a tree-sitter grammar for &lt;code&gt;.tape&lt;/code&gt; files available for editors that support syntax highlighting with tree-sitter:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/tree-sitter-vhs&#34;&gt;🌳 charmbracelet/tree-sitter-vhs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It works great with Neovim, Emacs, and so on!&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We’d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/charmcli&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.social/@charmcli&#34;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charm.sh/chat&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/vhs/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://charm.sh/&#34;&gt; &lt;img alt=&#34;The Charm logo&#34; width=&#34;400&#34; src=&#34;https://stuff.charm.sh/charm-badge.jpg&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Charm热爱开源 • Charm loves open source&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>younglifestyle/seg-server</title>
    <updated>2022-10-30T01:35:48Z</updated>
    <id>tag:github.com,2022-10-30:/younglifestyle/seg-server</id>
    <link href="https://github.com/younglifestyle/seg-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;golang leaf，REF. Meituan-Dianping Leaf，ID发号器&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;Go实现的号段模式以及雪花（Snowflake）发号器，基于Kratos框架，适用于此微服务框架以及服务发现服务&lt;/p&gt; &#xA;&lt;p&gt;gRPC访问性能与Leaf同&lt;/p&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;h3&gt;号段模式&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;创建表&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;CREATE DATABASE leaf;&#xA;CREATE TABLE `leaf_alloc` (&#xA;    `biz_tag` varchar(128)  NOT NULL DEFAULT &#39;&#39;, -- your biz unique name&#xA;    `max_id` bigint(20) NOT NULL DEFAULT &#39;1&#39;,&#xA;    `step` int(11) NOT NULL,&#xA;    `description` varchar(256)  DEFAULT NULL,&#xA;    `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,&#xA;    `created_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,&#xA;    PRIMARY KEY (`biz_tag`)&#xA;) ENGINE=InnoDB;&#xA;&#xA;insert into leaf_alloc(biz_tag, max_id, step, description) values(&#39;leaf-segment-test&#39;, 1, 2000, &#39;Test leaf Segment Mode Get Id&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;配置&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;data:&#xA;  database:&#xA;    segment_enable: true&#xA;    table_name: &#34;leaf_alloc&#34;&#xA;    driver: mysql&#xA;    source: root:123@tcp(127.0.0.1:3306)/leaf?charset=utf8&amp;amp;parseTime=True&amp;amp;loc=Local&#xA;    open_conn: 50&#xA;    idle: 10&#xA;    idle_timeout: 14400s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;启动服务&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;make build&#xA;bin/seq-server -conf configs/config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;请求接口&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:8000/api/segment/get/leaf-segment-test&#xA;&#xA;// 查看cache中号段的状态&#xA;http://localhost:8000/monitor/cache&#xA;// 查看DB中号段的数据&#xA;http://localhost:8000/monitor/db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;雪花模式&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;配置&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;data:&#xA;  etcd:&#xA;    snowflake_enable: true&#xA;    endpoints: [&#34;127.0.0.1:2379&#34;]&#xA;    dial_timeout: 2s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;请求接口&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:8000/api/snowflake/get&#xA;&#xA;// 解析雪花ID&#xA;http://localhost:8000/decodeSnowflakeId&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>ipfs/kubo</title>
    <updated>2022-10-30T01:35:48Z</updated>
    <id>tag:github.com,2022-10-30:/ipfs/kubo</id>
    <link href="https://github.com/ipfs/kubo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An IPFS implementation in Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://ipfs.io/ipfs/bafykbzacecaesuqmivkauix25v6i6xxxsvsrtxknhgb5zak3xxsg2nb4dhs2u/ipfs.go.png&#34; alt=&#34;kubo, an IPFS node in Go&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://protocol.ai&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/ipfs/kubo&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-reference-5272B4.svg?style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/ipfs/kubo&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/build/github/ipfs/kubo?style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Kubo?&lt;/h2&gt; &#xA;&lt;p&gt;Kubo was the first IPFS implementation and is the most widely used one today. Implementing the &lt;em&gt;Interplanetary Filesystem&lt;/em&gt; - the Web3 standard and contender to replace https. Thus powered by IPLD&#39;s data models and the libp2p for network communication. Kubo is written in Go.&lt;/p&gt; &#xA;&lt;p&gt;Featureset&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runs an IPFS-Node as a network service&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.ipfs.tech/reference/kubo/cli/&#34;&gt;Command Line Interface&lt;/a&gt; to IPFS-Nodes&lt;/li&gt; &#xA; &lt;li&gt;Local &lt;a href=&#34;https://github.com/ipfs/specs/tree/main/http-gateways#readme&#34;&gt;Web2-to-Web3 HTTP Gateway functionality&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP RPC API (&lt;code&gt;/api/v0&lt;/code&gt;) to access and control the daemon&lt;/li&gt; &#xA; &lt;li&gt;IPFS&#39;s internal Webgui can be used to manage the Kubo nodes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other implementations&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.ipfs.tech/basics/ipfs-implementations/&#34;&gt;List&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is IPFS?&lt;/h2&gt; &#xA;&lt;p&gt;IPFS is a global, versioned, peer-to-peer filesystem. It combines good ideas from previous systems such as Git, BitTorrent, Kademlia, SFS, and the Web. It is like a single BitTorrent swarm, exchanging git objects. IPFS provides an interface as simple as the HTTP web, but with permanence built-in. You can also mount the world at /ipfs.&lt;/p&gt; &#xA;&lt;p&gt;For more info see: &lt;a href=&#34;https://docs.ipfs.tech/concepts/what-is-ipfs/&#34;&gt;https://docs.ipfs.tech/concepts/what-is-ipfs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Before opening an issue, consider using one of the following locations to ensure you are opening your thread in the right place:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;kubo (previously named go-ipfs) &lt;em&gt;implementation&lt;/em&gt; bugs in &lt;a href=&#34;https://github.com/ipfs/kubo/issues&#34;&gt;this repo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Documentation issues in &lt;a href=&#34;https://github.com/ipfs/ipfs-docs/issues&#34;&gt;ipfs/docs issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;IPFS &lt;em&gt;design&lt;/em&gt; in &lt;a href=&#34;https://github.com/ipfs/specs/issues&#34;&gt;ipfs/specs issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Exploration of new ideas in &lt;a href=&#34;https://github.com/ipfs/notes/issues&#34;&gt;ipfs/notes issues&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Ask questions and meet the rest of the community at the &lt;a href=&#34;https://discuss.ipfs.tech&#34;&gt;IPFS Forum&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Or &lt;a href=&#34;https://docs.ipfs.tech/community/chat/&#34;&gt;chat with us&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCdjsUXJ3QawK4O5L1kqqsew&#34;&gt;&lt;img src=&#34;https://img.shields.io/youtube/channel/subscribers/UCdjsUXJ3QawK4O5L1kqqsew?label=Subscribe%20IPFS&amp;amp;style=social&amp;amp;cacheSeconds=3600&#34; alt=&#34;YouTube Channel Subscribers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/IPFS&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/IPFS?style=social&amp;amp;cacheSeconds=3600&#34; alt=&#34;Follow @IPFS on Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Next milestones&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ipfs/kubo/milestones&#34;&gt;Milestones on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#what-is-kubo&#34;&gt;What is Kubo?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#what-is-ipfs&#34;&gt;What is IPFS?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#next-milestones&#34;&gt;Next milestones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#security-issues&#34;&gt;Security Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#install&#34;&gt;Install&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#system-requirements&#34;&gt;System Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#official-prebuilt-binaries&#34;&gt;Official prebuilt binaries&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#updating&#34;&gt;Updating&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#using-ipfs-update&#34;&gt;Using ipfs-update&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#downloading-builds-using-ipfs&#34;&gt;Downloading builds using IPFS&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#unofficial-linux-packages&#34;&gt;Unofficial Linux packages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#arch-linux&#34;&gt;ArchLinux&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#nix&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#solus&#34;&gt;Solus&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#opensuse&#34;&gt;openSUSE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#guix&#34;&gt;Guix&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#snap&#34;&gt;Snap&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#unofficial-macos-packages&#34;&gt;Unofficial MacOS packages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#macports&#34;&gt;MacPorts&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#nix-1&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#unofficial-windows-packages&#34;&gt;Unofficial Windows packages&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#chocolatey&#34;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#scoop&#34;&gt;Scoop&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#build-from-source&#34;&gt;Build from Source&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#install-go&#34;&gt;Install Go&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#download-and-compile-ipfs&#34;&gt;Download and Compile IPFS&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#cross-compiling&#34;&gt;Cross Compiling&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#openssl&#34;&gt;OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#some-things-to-try&#34;&gt;Some things to try&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#troubleshooting-1&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#packages&#34;&gt;Packages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#development&#34;&gt;Development&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#map-of-implemented-subsystems&#34;&gt;Map of Implemented Subsystems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#cli-http-api-architecture-diagram&#34;&gt;CLI, HTTP-API, Architecture Diagram&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#development-dependencies&#34;&gt;Development Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#developer-notes&#34;&gt;Developer Notes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#maintainer-info&#34;&gt;Maintainer Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security Issues&lt;/h2&gt; &#xA;&lt;p&gt;Please follow &lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/SECURITY.md&#34;&gt;&lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;The canonical download instructions for IPFS are over at: &lt;a href=&#34;https://docs.ipfs.tech/install/&#34;&gt;https://docs.ipfs.tech/install/&lt;/a&gt;. It is &lt;strong&gt;highly recommended&lt;/strong&gt; you follow those instructions if you are not interested in working on IPFS development.&lt;/p&gt; &#xA;&lt;h3&gt;System Requirements&lt;/h3&gt; &#xA;&lt;p&gt;IPFS can run on most Linux, macOS, and Windows systems. We recommend running it on a machine with at least 2 GB of RAM and 2 CPU cores (kubo is highly parallel). On systems with less memory, it may not be completely stable.&lt;/p&gt; &#xA;&lt;p&gt;If your system is resource-constrained, we recommend:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Installing OpenSSL and rebuilding kubo manually with &lt;code&gt;make build GOTAGS=openssl&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#download-and-compile-ipfs&#34;&gt;download and compile&lt;/a&gt; section for more information on compiling kubo.&lt;/li&gt; &#xA; &lt;li&gt;Initializing your daemon with &lt;code&gt;ipfs init --profile=lowpower&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Official images are published at &lt;a href=&#34;https://hub.docker.com/r/ipfs/kubo/&#34;&gt;https://hub.docker.com/r/ipfs/kubo/&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/ipfs/kubo/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/ipfs/kubo?color=blue&amp;amp;label=kubo%20docker%20image&amp;amp;logo=docker&amp;amp;sort=semver&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;Docker Image Version (latest semver)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More info on how to run Kubo (go-ipfs) inside Docker can be found &lt;a href=&#34;https://docs.ipfs.tech/how-to/run-ipfs-inside-docker/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Official prebuilt binaries&lt;/h3&gt; &#xA;&lt;p&gt;The official binaries are published at &lt;a href=&#34;https://dist.ipfs.tech#kubo&#34;&gt;https://dist.ipfs.tech#kubo&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dist.ipfs.tech#kubo&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/ipfs/kubo?label=dist.ipfs.tech&amp;amp;logo=ipfs&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;dist.ipfs.tech Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;From there:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click the blue &#34;Download Kubo&#34; on the right side of the page.&lt;/li&gt; &#xA; &lt;li&gt;Open/extract the archive.&lt;/li&gt; &#xA; &lt;li&gt;Move kubo (&lt;code&gt;ipfs&lt;/code&gt;) to your path (&lt;code&gt;install.sh&lt;/code&gt; can do it for you).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are unable to access &lt;a href=&#34;https://dist.ipfs.tech#kubo&#34;&gt;dist.ipfs.tech&lt;/a&gt;, you can also download kubo (go-ipfs) from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;this project&#39;s GitHub &lt;a href=&#34;https://github.com/ipfs/kubo/releases/latest&#34;&gt;releases&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/ipns/dist.ipfs.tech&lt;/code&gt; at &lt;a href=&#34;https://dweb.link/ipns/dist.ipfs.tech#kubo&#34;&gt;dweb.link&lt;/a&gt; gateway&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Updating&lt;/h4&gt; &#xA;&lt;h5&gt;Using ipfs-update&lt;/h5&gt; &#xA;&lt;p&gt;IPFS has an updating tool that can be accessed through &lt;code&gt;ipfs update&lt;/code&gt;. The tool is not installed alongside IPFS in order to keep that logic independent of the main codebase. To install &lt;code&gt;ipfs-update&lt;/code&gt; tool, &lt;a href=&#34;https://dist.ipfs.tech/#ipfs-update&#34;&gt;download it here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Downloading builds using IPFS&lt;/h5&gt; &#xA;&lt;p&gt;List the available versions of Kubo (go-ipfs) implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ipfs cat /ipns/dist.ipfs.tech/kubo/versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, to view available builds for a version from the previous command (&lt;code&gt;$VERSION&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ipfs ls /ipns/dist.ipfs.tech/kubo/$VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To download a given build of a version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_darwin-386.tar.gz    # darwin 32-bit build&#xA;$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_darwin-amd64.tar.gz  # darwin 64-bit build&#xA;$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_freebsd-amd64.tar.gz # freebsd 64-bit build&#xA;$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_linux-386.tar.gz     # linux 32-bit build&#xA;$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_linux-amd64.tar.gz   # linux 64-bit build&#xA;$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_linux-arm.tar.gz     # linux arm build&#xA;$ ipfs get /ipns/dist.ipfs.tech/kubo/$VERSION/kubo_$VERSION_windows-amd64.zip    # windows 64-bit build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unofficial Linux packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#arch-linux&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#nix-linux&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#solus&#34;&gt;Solus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#opensuse&#34;&gt;openSUSE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.archlinux.org/title/IPFS&#34;&gt;&lt;img src=&#34;https://img.shields.io/archlinux/v/community/x86_64/kubo?color=1793d1&amp;amp;label=kubo&amp;amp;logo=arch-linux&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;kubo via Community Repo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# pacman -S kubo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/kubo/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=kubo-git&amp;amp;message=latest%40master&amp;amp;color=1793d1&amp;amp;logo=arch-linux&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;kubo-git via AUR&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;nix-linux&#34;&gt;Nix&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;With the purely functional package manager &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; you can install kubo (go-ipfs) like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-env -i ipfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install the Package by using its attribute name, which is also &lt;code&gt;ipfs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Solus&lt;/h4&gt; &#xA;&lt;p&gt;In solus, kubo (go-ipfs) is available in the main repository as &lt;a href=&#34;https://dev.getsol.us/source/go-ipfs/repository/master/&#34;&gt;go-ipfs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo eopkg install go-ipfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install it through the Solus software center.&lt;/p&gt; &#xA;&lt;h4&gt;openSUSE&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://software.opensuse.org/package/go-ipfs&#34;&gt;Community Package for go-ipfs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Guix&lt;/h4&gt; &#xA;&lt;p&gt;GNU&#39;s functional package manager, &lt;a href=&#34;https://www.gnu.org/software/guix/&#34;&gt;Guix&lt;/a&gt;, also provides a go-ipfs package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ guix package -i go-ipfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Snap&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ &lt;strong&gt;SNAP USE IS DISCOURAGED&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you want something more sophisticated to escape the Snap confinement, we recommend using a different method to install Kubo so that it is not subject to snap confinement.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;With snap, in any of the &lt;a href=&#34;https://snapcraft.io/docs/core/install&#34;&gt;supported Linux distributions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo snap install ipfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The snap sets &lt;code&gt;IPFS_PATH&lt;/code&gt; to &lt;code&gt;SNAP_USER_COMMON&lt;/code&gt;, which is usually &lt;code&gt;~/snap/ipfs/common&lt;/code&gt;. If you want to use &lt;code&gt;~/.ipfs&lt;/code&gt; instead, you can bind-mount it to &lt;code&gt;~/snap/ipfs/common&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo mount --bind ~/.ipfs ~/snap/ipfs/common&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MacPorts&lt;/h4&gt; &#xA;&lt;p&gt;The package &lt;a href=&#34;https://ports.macports.org/port/ipfs&#34;&gt;ipfs&lt;/a&gt; currently points to kubo (go-ipfs) and is being maintained.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ sudo port install ipfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a name=&#34;nix-macos&#34;&gt;Nix&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In macOS you can use the purely functional package manager &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix-env -i ipfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also install the Package by using its attribute name, which is also &lt;code&gt;ipfs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;p&gt;A Homebrew formula &lt;a href=&#34;https://formulae.brew.sh/formula/ipfs&#34;&gt;ipfs&lt;/a&gt; is maintained too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install --formula ipfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unofficial Windows packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#chocolatey&#34;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#scoop&#34;&gt;Scoop&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Chocolatey&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chocolatey.org/packages/go-ipfs&#34;&gt;&lt;img src=&#34;https://img.shields.io/chocolatey/v/go-ipfs?color=00a4ef&amp;amp;label=go-ipfs&amp;amp;logo=windows&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;Chocolatey Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;PS&amp;gt; choco install go-ipfs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scoop&lt;/h4&gt; &#xA;&lt;p&gt;Scoop provides kubo as &lt;code&gt;kubo&lt;/code&gt; in its &#39;extras&#39; bucket.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Powershell&#34;&gt;PS&amp;gt; scoop bucket add extras&#xA;PS&amp;gt; scoop install kubo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Unofficial macOS packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#macports&#34;&gt;MacPorts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#nix-macos&#34;&gt;Nix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/#homebrew&#34;&gt;Homebrew&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Build from Source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/ipfs/kubo?label=Requires%20Go&amp;amp;logo=go&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;GitHub go.mod Go version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;kubo&#39;s build system requires Go and some standard POSIX build tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU make&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;GCC (or some other go compatible C Compiler) (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build without GCC, build with &lt;code&gt;CGO_ENABLED=0&lt;/code&gt; (e.g., &lt;code&gt;make build CGO_ENABLED=0&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Install Go&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/ipfs/kubo?label=Requires%20Go&amp;amp;logo=go&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;GitHub go.mod Go version&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need to update: &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Download latest version of Go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need to add Go&#39;s bin directories to your &lt;code&gt;$PATH&lt;/code&gt; environment variable e.g., by adding these lines to your &lt;code&gt;/etc/profile&lt;/code&gt; (for a system-wide installation) or &lt;code&gt;$HOME/.profile&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PATH=$PATH:/usr/local/go/bin&#xA;export PATH=$PATH:$GOPATH/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(If you run into trouble, see the &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go install instructions&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Download and Compile IPFS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ipfs/kubo.git&#xA;&#xA;$ cd kubo&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can run &lt;code&gt;make build&lt;/code&gt; to build the go-ipfs binary (storing it in &lt;code&gt;cmd/ipfs/ipfs&lt;/code&gt;) without installing it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you get an error along the lines of &#34;fatal error: stdlib.h: No such file or directory&#34;, you&#39;re missing a C compiler. Either re-run &lt;code&gt;make&lt;/code&gt; with &lt;code&gt;CGO_ENABLED=0&lt;/code&gt; or install GCC.&lt;/p&gt; &#xA;&lt;h5&gt;Cross Compiling&lt;/h5&gt; &#xA;&lt;p&gt;Compiling for a different platform is as simple as running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make build GOOS=myTargetOS GOARCH=myTargetArchitecture&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;OpenSSL&lt;/h5&gt; &#xA;&lt;p&gt;To build go-ipfs with OpenSSL support, append &lt;code&gt;GOTAGS=openssl&lt;/code&gt; to your &lt;code&gt;make&lt;/code&gt; invocation. Building with OpenSSL should significantly reduce the background CPU usage on nodes that frequently make or receive new connections.&lt;/p&gt; &#xA;&lt;p&gt;Note: OpenSSL requires CGO support and, by default, CGO is disabled when cross-compiling. To cross-compile with OpenSSL support, you must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install a compiler toolchain for the target platform.&lt;/li&gt; &#xA; &lt;li&gt;Set the &lt;code&gt;CGO_ENABLED=1&lt;/code&gt; environment variable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Troubleshooting&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Separate &lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/docs/windows.md&#34;&gt;instructions are available for building on Windows&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt; is required in order for &lt;code&gt;go get&lt;/code&gt; to fetch all dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Package managers often contain out-of-date &lt;code&gt;golang&lt;/code&gt; packages. Ensure that &lt;code&gt;go version&lt;/code&gt; reports at least 1.10. See above for how to install go.&lt;/li&gt; &#xA; &lt;li&gt;If you are interested in development, please install the development dependencies as well.&lt;/li&gt; &#xA; &lt;li&gt;Shell command completions can be generated with one of the &lt;code&gt;ipfs commands completion&lt;/code&gt; subcommands. Read &lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/docs/command-completion.md&#34;&gt;docs/command-completion.md&lt;/a&gt; to learn more.&lt;/li&gt; &#xA; &lt;li&gt;See the &lt;a href=&#34;https://github.com/ipfs/kubo/tree/master/misc&#34;&gt;misc folder&lt;/a&gt; for how to connect IPFS to systemd or whatever init system your distro uses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.ipfs.tech/how-to/command-line-quick-start/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=docs&amp;amp;message=Command-line%20quick%20start&amp;amp;color=blue&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;docs: Command-line quick start&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.ipfs.tech/reference/kubo/cli/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=docs&amp;amp;message=Command-line%20reference&amp;amp;color=blue&amp;amp;style=flat-square&amp;amp;cacheSeconds=3600&#34; alt=&#34;docs: Command-line reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To start using IPFS, you must first initialize IPFS&#39;s config files on your system, this is done with &lt;code&gt;ipfs init&lt;/code&gt;. See &lt;code&gt;ipfs init --help&lt;/code&gt; for information on the optional arguments it takes. After initialization is complete, you can use &lt;code&gt;ipfs mount&lt;/code&gt;, &lt;code&gt;ipfs add&lt;/code&gt; and any of the other commands to explore!&lt;/p&gt; &#xA;&lt;h3&gt;Some things to try&lt;/h3&gt; &#xA;&lt;p&gt;Basic proof of &#39;ipfs working&#39; locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;hello world&#34; &amp;gt; hello&#xA;ipfs add hello&#xA;# This should output a hash string that looks something like:&#xA;# QmT78zSuBmuS4z925WZfrqQ1qHaJ56DQaTfyMUF7F8ff5o&#xA;ipfs cat &amp;lt;that hash&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If you have previously installed IPFS before and you are running into problems getting a newer version to work, try deleting (or backing up somewhere else) your IPFS config directory (~/.ipfs by default) and rerunning &lt;code&gt;ipfs init&lt;/code&gt;. This will reinitialize the config file to its defaults and clear out the local datastore of any bad entries.&lt;/p&gt; &#xA;&lt;p&gt;Please direct general questions and help requests to our &lt;a href=&#34;https://discuss.ipfs.tech&#34;&gt;forums&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you believe you&#39;ve found a bug, check the &lt;a href=&#34;https://github.com/ipfs/kubo/issues&#34;&gt;issues list&lt;/a&gt; and, if you don&#39;t see your problem there, either come talk to us on &lt;a href=&#34;https://docs.ipfs.tech/community/chat/&#34;&gt;Matrix chat&lt;/a&gt;, or file an issue of your own!&lt;/p&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.ipfs.tech/reference/go/api/&#34;&gt;IPFS in GO&lt;/a&gt; documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Some places to get you started on the codebase:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Main file: &lt;a href=&#34;https://github.com/ipfs/kubo/raw/master/cmd/ipfs/main.go&#34;&gt;./cmd/ipfs/main.go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CLI Commands: &lt;a href=&#34;https://github.com/ipfs/kubo/tree/master/core/commands&#34;&gt;./core/commands/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bitswap (the data trading engine): &lt;a href=&#34;https://github.com/ipfs/go-bitswap&#34;&gt;go-bitswap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;libp2p &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;libp2p: &lt;a href=&#34;https://github.com/libp2p/go-libp2p&#34;&gt;https://github.com/libp2p/go-libp2p&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;DHT: &lt;a href=&#34;https://github.com/libp2p/go-libp2p-kad-dht&#34;&gt;https://github.com/libp2p/go-libp2p-kad-dht&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;PubSub: &lt;a href=&#34;https://github.com/libp2p/go-libp2p-pubsub&#34;&gt;https://github.com/libp2p/go-libp2p-pubsub&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ipfs/kubo/tree/master/docs/add-code-flow.md&#34;&gt;IPFS : The &lt;code&gt;Add&lt;/code&gt; command demystified&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Map of Implemented Subsystems&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;WIP&lt;/strong&gt;: This is a high-level architecture diagram of the various sub-systems of this specific implementation. To be updated with how they interact. Anyone who has suggestions is welcome to comment &lt;a href=&#34;https://docs.google.com/drawings/d/1OVpBT2q-NtSJqlPX3buvjYhOnWfdzb85YEsM_njesME/edit&#34;&gt;here&lt;/a&gt; on how we can improve this! &lt;img src=&#34;https://docs.google.com/drawings/d/e/2PACX-1vS_n1FvSu6mdmSirkBrIIEib2gqhgtatD9awaP2_WdrGN4zTNeg620XQd9P95WT-IvognSxIIdCM5uE/pub?w=1446&amp;amp;h=1036&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CLI, HTTP-API, Architecture Diagram&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/docs/cli-http-api-core-diagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/ipfs/pm/pull/678#discussion_r210410924&#34;&gt;Origin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Description: Dotted means &#34;likely going away&#34;. The &#34;Legacy&#34; parts are thin wrappers around some commands to translate between the new system and the old system. The grayed-out parts on the &#34;daemon&#34; diagram are there to show that the code is all the same, it&#39;s just that we turn some pieces on and some pieces off depending on whether we&#39;re running on the client or the server.&lt;/p&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If you make changes to the protocol buffers, you will need to install the &lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;protoc compiler&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Developer Notes&lt;/h3&gt; &#xA;&lt;p&gt;Find more documentation for developers on &lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/docs&#34;&gt;docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Maintainer Info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pl-strflt.notion.site/Kubo-GitHub-Project-Board-c68f9192e48e4e9eba185fa697bf0570&#34;&gt;Project Board for active and upcoming work&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pl-strflt.notion.site/Kubo-Release-Process-5a5d066264704009a28a79cff93062c4&#34;&gt;Release Process&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pl-strflt.notion.site/Kubo-go-ipfs-4a484aeeaa974dcf918027c300426c05&#34;&gt;Additional PL EngRes Kubo maintainer info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ipfs/community/raw/master/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/jbenet/contribute-ipfs-gif/master/img/contribute.gif&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We ❤️ all &lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/docs/AUTHORS&#34;&gt;our contributors&lt;/a&gt;; this project wouldn’t be what it is without you! If you want to help out, please see &lt;a href=&#34;https://raw.githubusercontent.com/ipfs/kubo/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This repository falls under the IPFS &lt;a href=&#34;https://github.com/ipfs/community/raw/master/code-of-conduct.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please reach out to us in one &lt;a href=&#34;https://docs.ipfs.tech/community/chat/&#34;&gt;chat&lt;/a&gt; rooms.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is dual-licensed under Apache 2.0 and MIT terms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache License, Version 2.0, (&lt;a href=&#34;https://github.com/ipfs/kubo/raw/master/LICENSE-APACHE&#34;&gt;LICENSE-APACHE&lt;/a&gt; or &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;MIT license (&lt;a href=&#34;https://github.com/ipfs/kubo/raw/master/LICENSE-MIT&#34;&gt;LICENSE-MIT&lt;/a&gt; or &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;http://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>