<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-04T01:34:45Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>olivere/elastic</title>
    <updated>2023-08-04T01:34:45Z</updated>
    <id>tag:github.com,2023-08-04:/olivere/elastic</id>
    <link href="https://github.com/olivere/elastic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Deprecated: Use the official Elasticsearch client for Go at https://github.com/elastic/go-elasticsearch&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elastic&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a development branch that is actively being worked on. DO NOT USE IN PRODUCTION! If you want to use stable versions of Elastic, please use Go modules for the 7.x release (or later) or a dependency manager like &lt;a href=&#34;https://github.com/golang/dep&#34;&gt;dep&lt;/a&gt; for earlier releases.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Elastic is an &lt;a href=&#34;http://www.elasticsearch.org/&#34;&gt;Elasticsearch&lt;/a&gt; client for the &lt;a href=&#34;http://www.golang.org/&#34;&gt;Go&lt;/a&gt; programming language.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/olivere/elastic/actions&#34;&gt;&lt;img src=&#34;https://github.com/olivere/elastic/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/olivere/elastic/v7?tab=doc&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/godoc-reference-blue.svg?style=flat&#34; alt=&#34;Godoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/olivere/elastic/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-red.svg?style=flat&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/olivere/elastic/wiki&#34;&gt;wiki&lt;/a&gt; for additional information about Elastic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/Bjd96U8fm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The release branches (e.g. &lt;a href=&#34;https://github.com/olivere/elastic/tree/release-branch.v7&#34;&gt;&lt;code&gt;release-branch.v7&lt;/code&gt;&lt;/a&gt;) are actively being worked on and can break at any time. If you want to use stable versions of Elastic, please use Go modules.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the version matrix:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Elasticsearch version&lt;/th&gt; &#xA;   &lt;th&gt;Elastic version&lt;/th&gt; &#xA;   &lt;th&gt;Package URL&lt;/th&gt; &#xA;   &lt;th&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7.x &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;7.0 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/olivere/elastic&#34;&gt;&lt;code&gt;github.com/olivere/elastic/v7&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/olivere/elastic/tree/release-branch.v7&#34;&gt;source&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/olivere/elastic&#34;&gt;doc&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Use Go modules.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6.x &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;6.0 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/olivere/elastic&#34;&gt;&lt;code&gt;github.com/olivere/elastic&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/olivere/elastic/tree/release-branch.v6&#34;&gt;source&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/olivere/elastic&#34;&gt;doc&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Use a dependency manager (see below).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5.x&lt;/td&gt; &#xA;   &lt;td&gt;5.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gopkg.in/olivere/elastic.v5&#34;&gt;&lt;code&gt;gopkg.in/olivere/elastic.v5&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/olivere/elastic/tree/release-branch.v5&#34;&gt;source&lt;/a&gt; &lt;a href=&#34;http://godoc.org/gopkg.in/olivere/elastic.v5&#34;&gt;doc&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Actively maintained.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2.x&lt;/td&gt; &#xA;   &lt;td&gt;3.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gopkg.in/olivere/elastic.v3&#34;&gt;&lt;code&gt;gopkg.in/olivere/elastic.v3&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/olivere/elastic/tree/release-branch.v3&#34;&gt;source&lt;/a&gt; &lt;a href=&#34;http://godoc.org/gopkg.in/olivere/elastic.v3&#34;&gt;doc&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Deprecated. Please update.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1.x&lt;/td&gt; &#xA;   &lt;td&gt;2.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gopkg.in/olivere/elastic.v2&#34;&gt;&lt;code&gt;gopkg.in/olivere/elastic.v2&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/olivere/elastic/tree/release-branch.v2&#34;&gt;source&lt;/a&gt; &lt;a href=&#34;http://godoc.org/gopkg.in/olivere/elastic.v2&#34;&gt;doc&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Deprecated. Please update.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.9-1.3&lt;/td&gt; &#xA;   &lt;td&gt;1.0&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gopkg.in/olivere/elastic.v1&#34;&gt;&lt;code&gt;gopkg.in/olivere/elastic.v1&lt;/code&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/olivere/elastic/tree/release-branch.v1&#34;&gt;source&lt;/a&gt; &lt;a href=&#34;http://godoc.org/gopkg.in/olivere/elastic.v1&#34;&gt;doc&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;Deprecated. Please update.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You have installed Elasticsearch 7.0.0 and want to use Elastic. As listed above, you should use Elastic 7.0 (code is in &lt;code&gt;release-branch.v7&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To use the required version of Elastic in your application, you should use &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go modules&lt;/a&gt; to manage dependencies. Make sure to use a version such as &lt;code&gt;7.0.0&lt;/code&gt; or later.&lt;/p&gt; &#xA;&lt;p&gt;To use Elastic, import:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/olivere/elastic/v7&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Elastic 7.0&lt;/h3&gt; &#xA;&lt;p&gt;Elastic 7.0 targets Elasticsearch 7.x which &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.0/release-notes-7.0.0.html&#34;&gt;was released on April 10th 2019&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;As always with major version, there are a lot of &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/7.0/release-notes-7.0.0.html#breaking-7.0.0&#34;&gt;breaking changes&lt;/a&gt;. We will use this as an opportunity to &lt;a href=&#34;https://github.com/olivere/elastic/raw/release-branch.v7/CHANGELOG-7.0.md&#34;&gt;clean up and refactor Elastic&lt;/a&gt;, as we already did in earlier (major) releases.&lt;/p&gt; &#xA;&lt;h3&gt;Elastic 6.0&lt;/h3&gt; &#xA;&lt;p&gt;Elastic 6.0 targets Elasticsearch 6.x which was &lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-6-0-0-released&#34;&gt;released on 14th November 2017&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notice that there are a lot of &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/6.7/breaking-changes-6.0.html&#34;&gt;breaking changes in Elasticsearch 6.0&lt;/a&gt; and we used this as an opportunity to &lt;a href=&#34;https://github.com/olivere/elastic/raw/release-branch.v6/CHANGELOG-6.0.md&#34;&gt;clean up and refactor Elastic&lt;/a&gt; as we did in the transition from earlier versions of Elastic.&lt;/p&gt; &#xA;&lt;h3&gt;Elastic 5.0&lt;/h3&gt; &#xA;&lt;p&gt;Elastic 5.0 targets Elasticsearch 5.0.0 and later. Elasticsearch 5.0.0 was &lt;a href=&#34;https://www.elastic.co/blog/elasticsearch-5-0-0-released&#34;&gt;released on 26th October 2016&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Notice that there are will be a lot of &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/5.0/breaking-changes-5.0.html&#34;&gt;breaking changes in Elasticsearch 5.0&lt;/a&gt; and we used this as an opportunity to &lt;a href=&#34;https://github.com/olivere/elastic/raw/release-branch.v5/CHANGELOG-5.0.md&#34;&gt;clean up and refactor Elastic&lt;/a&gt; as we did in the transition from Elastic 2.0 (for Elasticsearch 1.x) to Elastic 3.0 (for Elasticsearch 2.x).&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, the jump in version numbers will give us a chance to be in sync with the Elastic Stack.&lt;/p&gt; &#xA;&lt;h3&gt;Elastic 3.0&lt;/h3&gt; &#xA;&lt;p&gt;Elastic 3.0 targets Elasticsearch 2.x and is published via &lt;a href=&#34;https://gopkg.in/olivere/elastic.v3&#34;&gt;&lt;code&gt;gopkg.in/olivere/elastic.v3&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Elastic 3.0 will only get critical bug fixes. You should update to a recent version.&lt;/p&gt; &#xA;&lt;h3&gt;Elastic 2.0&lt;/h3&gt; &#xA;&lt;p&gt;Elastic 2.0 targets Elasticsearch 1.x and is published via &lt;a href=&#34;https://gopkg.in/olivere/elastic.v2&#34;&gt;&lt;code&gt;gopkg.in/olivere/elastic.v2&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Elastic 2.0 will only get critical bug fixes. You should update to a recent version.&lt;/p&gt; &#xA;&lt;h3&gt;Elastic 1.0&lt;/h3&gt; &#xA;&lt;p&gt;Elastic 1.0 is deprecated. You should really update Elasticsearch and Elastic to a recent version.&lt;/p&gt; &#xA;&lt;p&gt;However, if you cannot update for some reason, don&#39;t worry. Version 1.0 is still available. All you need to do is go-get it and change your import path as described above.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;We use Elastic in production since 2012. Elastic is stable but the API changes now and then. We strive for API compatibility. However, Elasticsearch sometimes introduces &lt;a href=&#34;https://www.elastic.co/guide/en/elasticsearch/reference/master/breaking-changes.html&#34;&gt;breaking changes&lt;/a&gt; and we sometimes have to adapt.&lt;/p&gt; &#xA;&lt;p&gt;Having said that, there have been no big API changes that required you to rewrite your application big time. More often than not it&#39;s renaming APIs and adding/removing features so that Elastic is in sync with Elasticsearch.&lt;/p&gt; &#xA;&lt;p&gt;Elastic has been used in production starting with Elasticsearch 0.90 up to recent 7.x versions. We recently switched to &lt;a href=&#34;https://github.com/olivere/elastic/actions&#34;&gt;GitHub Actions for testing&lt;/a&gt;. Before that, we used &lt;a href=&#34;https://travis-ci.org/olivere/elastic&#34;&gt;Travis CI&lt;/a&gt; successfully for years).&lt;/p&gt; &#xA;&lt;p&gt;Elasticsearch has quite a few features. Most of them are implemented by Elastic. I add features and APIs as required. It&#39;s straightforward to implement missing pieces. I&#39;m accepting pull requests :-)&lt;/p&gt; &#xA;&lt;p&gt;Having said that, I hope you find the project useful.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The first thing you do is to create a &lt;a href=&#34;https://github.com/olivere/elastic/raw/master/client.go&#34;&gt;Client&lt;/a&gt;. The client connects to Elasticsearch on &lt;code&gt;http://127.0.0.1:9200&lt;/code&gt; by default.&lt;/p&gt; &#xA;&lt;p&gt;You typically create one client for your app. Here&#39;s a complete example of creating a client, creating an index, adding a document, executing a search etc.&lt;/p&gt; &#xA;&lt;p&gt;An example is available &lt;a href=&#34;https://olivere.github.io/elastic/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;a href=&#34;https://gist.github.com/olivere/e4a376b4783c0914e44ea4f745ce2ebf&#34;&gt;link to a complete working example for v6&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are a few tips on how to get used to Elastic:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Head over to the &lt;a href=&#34;https://github.com/olivere/elastic/wiki&#34;&gt;Wiki&lt;/a&gt; for detailed information and topics like e.g. &lt;a href=&#34;https://github.com/olivere/elastic/wiki/HttpTransport&#34;&gt;how to add a middleware&lt;/a&gt; or how to &lt;a href=&#34;https://github.com/olivere/elastic/wiki/Using-with-AWS-Elasticsearch-Service&#34;&gt;connect to AWS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you are unsure how to implement something, read the tests (all &lt;code&gt;_test.go&lt;/code&gt; files). They not only serve as a guard against changes, but also as a reference.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/olivere/elastic/tree/release-branch.v6/recipes&#34;&gt;recipes&lt;/a&gt; contains small examples on how to implement something, e.g. bulk indexing, scrolling etc.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;API Status&lt;/h2&gt; &#xA;&lt;h3&gt;Document APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Index API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delete API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delete By Query API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update By Query API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi Get API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bulk API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reindex API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Term Vectors&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi termvectors API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Search APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search Template&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multi Search Template&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Search Shards API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Suggesters &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Term Suggester&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Phrase Suggester&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Completion Suggester&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Context Suggester&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi Search API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Count API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Validate API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Explain API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Profile API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Field Capabilities API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Aggregations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Metrics Aggregations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Avg&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Boxplot (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cardinality&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extended Stats&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geo Bounds&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geo Centroid&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Matrix stats&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Max&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Median absolute deviation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Min&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Percentile Ranks&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Percentiles&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Rate (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Scripted Metric&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stats&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; String stats (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sum&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; T-test (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Top Hits&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Top metrics (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Value Count&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Weighted avg&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Bucket Aggregations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Adjacency Matrix&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto-interval Date Histogram&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Children&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Composite&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Date Histogram&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Date Range&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Diversified Sampler&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Filter&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Filters&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geo Distance&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geohash Grid&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geotile grid&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Global&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Histogram&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IP Range&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Missing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nested&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Parent&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Range&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Rare terms&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Reverse Nested&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sampler&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Significant Terms&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Significant Text&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Terms&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Variable width histogram&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pipeline Aggregations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Avg Bucket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bucket Script&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bucket Selector&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bucket Sort&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cumulative cardinality (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cumulative Sum&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Derivative&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extended Stats Bucket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Inference bucket (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Max Bucket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Min Bucket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Moving Average&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Moving function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Moving percentiles (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Normalize (X-pack)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Percentiles Bucket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Serial Differencing&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stats Bucket&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sum Bucket&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Aggregation Metadata&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Indices APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create Index&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delete Index&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get Index&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Indices Exists&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Open / Close Index&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Shrink Index&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rollover Index&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Put Mapping&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get Mapping&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get Field Mapping&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Types Exists&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Index Aliases&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update Indices Settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get Settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Analyze &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Explain Analyze&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Index Templates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Indices Stats&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Indices Segments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Indices Recovery&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Indices Shard Stores&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Clear Cache&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Flush &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Synced Flush&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Refresh&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Force Merge&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Index Lifecycle Management APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create Policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get Policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delete Policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Move to Step&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Remove Policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Retry Policy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Get Ilm Status&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Explain Lifecycle&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Start Ilm&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Stop Ilm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;cat APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cat aliases&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cat allocation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cat count&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cat fielddata&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cat health&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cat indices&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cat master&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat nodeattrs&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat nodes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat pending tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat recovery&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat repositories&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat thread pool&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat shards&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat segments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; cat snapshots&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; cat templates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Cluster APIs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cluster Health&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cluster State&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cluster Stats&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Pending Cluster Tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cluster Reroute&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cluster Update Settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nodes Stats&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nodes Info&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Nodes Feature Usage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Remote Cluster Info&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Task Management API&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Nodes hot_threads&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Cluster Allocation Explain API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Rollup APIs (XPack)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create Job&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delete Job&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Get Job&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Start Job&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stop Job&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Query DSL&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Match All Query&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Inner hits&lt;/li&gt; &#xA; &lt;li&gt;Full text queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Match Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Match Boolean Prefix Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Match Phrase Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Match Phrase Prefix Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi Match Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Common Terms Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Query String Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Simple Query String Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Combined Fields Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Intervals Query&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Term level queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Term Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Terms Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Terms Set Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Range Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Exists Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Prefix Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Wildcard Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Regexp Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fuzzy Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Type Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ids Query&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compound queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Constant Score Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bool Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Dis Max Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Function Score Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Boosting Query&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Joining queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nested Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Has Child Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Has Parent Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Parent Id Query&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Geo queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GeoShape Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geo Bounding Box Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geo Distance Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Geo Polygon Query&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Specialized queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Distance Feature Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; More Like This Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Script Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Script Score Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Percolate Query&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Span queries &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Span Term Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Span Multi Term Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Span First Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Span Near Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Span Or Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Span Not Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Span Containing Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Span Within Query&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Span Field Masking Query&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Minimum Should Match&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Multi Term Query Rewrite&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snapshot and Restore &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Repositories&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Snapshot get&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Snapshot create&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Snapshot delete&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Restore&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Snapshot status&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Monitoring snapshot/restore status&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Stopping currently running snapshot and restore&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Scripting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GetScript&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PutScript&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DeleteScript&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sorting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sort by score&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sort by field&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sort by geo distance&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sort by script&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sort by doc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Scrolling&lt;/h3&gt; &#xA;&lt;p&gt;Scrolling is supported via a &lt;code&gt;ScrollService&lt;/code&gt;. It supports an iterator-like interface. The &lt;code&gt;ClearScroll&lt;/code&gt; API is implemented as well.&lt;/p&gt; &#xA;&lt;p&gt;A pattern for &lt;a href=&#34;https://github.com/olivere/elastic/wiki/ScrollParallel&#34;&gt;efficiently scrolling in parallel&lt;/a&gt; is described in the &lt;a href=&#34;https://github.com/olivere/elastic/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://github.com/olivere/elastic/raw/master/CONTRIBUTING.md&#34;&gt;the contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks a lot for the great folks working hard on &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;Elasticsearch&lt;/a&gt; and &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Elastic uses portions of the &lt;a href=&#34;https://github.com/jtacoma/uritemplates&#34;&gt;uritemplates&lt;/a&gt; library by Joshua Tacoma, &lt;a href=&#34;https://github.com/cenkalti/backoff&#34;&gt;backoff&lt;/a&gt; by Cenk Altı and &lt;a href=&#34;https://github.com/fortytw2/leaktest&#34;&gt;leaktest&lt;/a&gt; by Ian Chiles.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;MIT-LICENSE. See &lt;a href=&#34;http://olivere.mit-license.org/&#34;&gt;LICENSE&lt;/a&gt; or the LICENSE file provided in the repository for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bazelbuild/bazel-gazelle</title>
    <updated>2023-08-04T01:34:45Z</updated>
    <id>tag:github.com,2023-08-04:/bazelbuild/bazel-gazelle</id>
    <link href="https://github.com/bazelbuild/bazel-gazelle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gazelle is a Bazel build file generator for Bazel projects. It natively supports Go and protobuf, and it may be extended to support new languages and custom rule sets.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gazelle build file generator&lt;/h1&gt; &#xA;&lt;p&gt;.. All external links are here .. _a gazelle extension: &lt;a href=&#34;https://github.com/bazel-contrib/rules_jvm/tree/main/java/gazelle&#34;&gt;https://github.com/bazel-contrib/rules_jvm/tree/main/java/gazelle&lt;/a&gt; .. _Architecture of Gazelle: Design.rst .. _Repository rules: repository.md .. _go_repository: repository.md#go_repository .. _fix: #fix-and-update .. _update: #fix-and-update .. _Avoiding conflicts with proto rules: &lt;a href=&#34;https://github.com/bazelbuild/rules_go/raw/master/proto/core.rst#avoiding-conflicts&#34;&gt;https://github.com/bazelbuild/rules_go/blob/master/proto/core.rst#avoiding-conflicts&lt;/a&gt; .. _gazelle rule: #bazel-rule .. _doublestar.Match: &lt;a href=&#34;https://github.com/bmatcuk/doublestar#match&#34;&gt;https://github.com/bmatcuk/doublestar#match&lt;/a&gt; .. _Extending Gazelle: extend.md .. &lt;em&gt;extended: &lt;code&gt;Extending Gazelle&lt;/code&gt;&lt;/em&gt; .. _gazelle_binary: extend.md#gazelle_binary .. _import_prefix: &lt;a href=&#34;https://docs.bazel.build/versions/master/be/protocol-buffer.html#proto_library.import_prefix&#34;&gt;https://docs.bazel.build/versions/master/be/protocol-buffer.html#proto_library.import_prefix&lt;/a&gt; .. _strip_import_prefix: &lt;a href=&#34;https://docs.bazel.build/versions/master/be/protocol-buffer.html#proto_library.strip_import_prefix&#34;&gt;https://docs.bazel.build/versions/master/be/protocol-buffer.html#proto_library.strip_import_prefix&lt;/a&gt; .. _buildozer: &lt;a href=&#34;https://github.com/bazelbuild/buildtools/tree/master/buildozer&#34;&gt;https://github.com/bazelbuild/buildtools/tree/master/buildozer&lt;/a&gt; .. _Go Release Policy: &lt;a href=&#34;https://golang.org/doc/devel/release.html#policy&#34;&gt;https://golang.org/doc/devel/release.html#policy&lt;/a&gt; .. _bazel-go-discuss: &lt;a href=&#34;https://groups.google.com/forum/#!forum/bazel-go-discuss&#34;&gt;https://groups.google.com/forum/#!forum/bazel-go-discuss&lt;/a&gt; .. _#bazel on Go Slack: &lt;a href=&#34;https://gophers.slack.com/archives/C1SCQE54N&#34;&gt;https://gophers.slack.com/archives/C1SCQE54N&lt;/a&gt; .. _#go on Bazel Slack: &lt;a href=&#34;https://bazelbuild.slack.com/archives/CDBP88Z0D&#34;&gt;https://bazelbuild.slack.com/archives/CDBP88Z0D&lt;/a&gt; .. _#514: &lt;a href=&#34;https://github.com/bazelbuild/rules_python/pull/514&#34;&gt;https://github.com/bazelbuild/rules_python/pull/514&lt;/a&gt; .. _#1030: &lt;a href=&#34;https://github.com/bazelbuild/bazel-gazelle/issues/1030&#34;&gt;https://github.com/bazelbuild/bazel-gazelle/issues/1030&lt;/a&gt; .. _rules_jvm: &lt;a href=&#34;https://github.com/bazel-contrib/rules_jvm&#34;&gt;https://github.com/bazel-contrib/rules_jvm&lt;/a&gt; .. _rules_python: &lt;a href=&#34;https://github.com/bazelbuild/rules_python&#34;&gt;https://github.com/bazelbuild/rules_python&lt;/a&gt; .. _rules_r: &lt;a href=&#34;https://github.com/grailbio/rules_r&#34;&gt;https://github.com/grailbio/rules_r&lt;/a&gt; .. _rules_haskell: &lt;a href=&#34;https://github.com/tweag/rules_haskell&#34;&gt;https://github.com/tweag/rules_haskell&lt;/a&gt; .. _rules_nodejs_gazelle: &lt;a href=&#34;https://github.com/benchsci/rules_nodejs_gazelle&#34;&gt;https://github.com/benchsci/rules_nodejs_gazelle&lt;/a&gt; .. _bazel-skylib: &lt;a href=&#34;https://github.com/bazelbuild/bazel-skylib&#34;&gt;https://github.com/bazelbuild/bazel-skylib&lt;/a&gt; .. _bazel_skylib/gazelle/bzl: &lt;a href=&#34;https://github.com/bazelbuild/bazel-skylib/tree/master/gazelle/bzl&#34;&gt;https://github.com/bazelbuild/bazel-skylib/tree/master/gazelle/bzl&lt;/a&gt; .. _gazelle_cabal: &lt;a href=&#34;https://github.com/tweag/gazelle_cabal&#34;&gt;https://github.com/tweag/gazelle_cabal&lt;/a&gt; .. _gazelle_haskell_modules: &lt;a href=&#34;https://github.com/tweag/gazelle_haskell_modules&#34;&gt;https://github.com/tweag/gazelle_haskell_modules&lt;/a&gt; .. _stackb/rules_proto: &lt;a href=&#34;https://github.com/stackb/rules_proto&#34;&gt;https://github.com/stackb/rules_proto&lt;/a&gt; .. _Open a PR: &lt;a href=&#34;https://github.com/bazelbuild/bazel-gazelle/edit/master/README.rst&#34;&gt;https://github.com/bazelbuild/bazel-gazelle/edit/master/README.rst&lt;/a&gt; .. _Bazel Slack: &lt;a href=&#34;https://slack.bazel.build&#34;&gt;https://slack.bazel.build&lt;/a&gt; .. _swift_bazel: &lt;a href=&#34;https://github.com/cgrindel/swift_bazel&#34;&gt;https://github.com/cgrindel/swift_bazel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. role:: cmd(code) .. role:: flag(code) .. role:: direc(code) .. role:: param(kbd) .. role:: type(emphasis) .. role:: value(code) .. |mandatory| replace:: &lt;strong&gt;mandatory value&lt;/strong&gt; .. End of directives&lt;/p&gt; &#xA;&lt;p&gt;Gazelle is a build file generator for Bazel projects. It can create new BUILD.bazel files for a project that follows language conventions, and it can update existing build files to include new sources, dependencies, and options. Gazelle natively supports Go and protobuf, and it may be extended_ to support new languages and custom rule sets.&lt;/p&gt; &#xA;&lt;p&gt;Gazelle may be run by Bazel using the &lt;code&gt;gazelle rule&lt;/code&gt;&lt;em&gt;, or it may be installed and run as a command line tool. Gazelle can also generate build files for external repositories as part of the &lt;code&gt;go_repository&lt;/code&gt;&lt;/em&gt; rule.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Gazelle is under active development. Its interface and the rules it generates may change. Gazelle is not an official Google product.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mailing list: &lt;code&gt;bazel-go-discuss&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;Slack: &lt;code&gt;#go on Bazel Slack&lt;/code&gt;&lt;em&gt;, &lt;code&gt;#bazel on Go Slack&lt;/code&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;rules_go and Gazelle are getting community maintainers! If you are a regular user of either project and are interested in helping out with development, code reviews, and issue triage, please drop by our Slack channels (linked above) and say hello!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. contents:: &lt;strong&gt;Contents&lt;/strong&gt; :depth: 2&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;See also:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Architecture of Gazelle&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Repository rules&lt;/code&gt;_&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;go_repository&lt;/code&gt;_&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Extending Gazelle&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Avoiding conflicts with proto rules&lt;/code&gt;_&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;p&gt;Gazelle can generate Bazel BUILD files for many languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Go&lt;/p&gt; &lt;p&gt;Go supported is included here in bazel-gazelle, see below.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Haskell&lt;/p&gt; &lt;p&gt;Tweag&#39;s &lt;code&gt;rules_haskell&lt;/code&gt;_ has two extensions: &lt;code&gt;gazelle_cabal&lt;/code&gt;&lt;em&gt;, for generating rules from Cabal files and &lt;code&gt;gazelle_haskell_modules&lt;/code&gt;&lt;/em&gt; for even more fine-grained build definitions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Java&lt;/p&gt; &lt;p&gt;bazel-contrib&#39;s &lt;code&gt;rules_jvm&lt;/code&gt;_ extensions include &lt;code&gt;a gazelle extension&lt;/code&gt;_ for generating &lt;code&gt;java_library&lt;/code&gt;, &lt;code&gt;java_binary&lt;/code&gt;, &lt;code&gt;java_test&lt;/code&gt;, and &lt;code&gt;java_test_suite&lt;/code&gt; rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;JavaScript / TypeScript&lt;/p&gt; &lt;p&gt;BenchSci&#39;s &lt;code&gt;rules_nodejs_gazelle&lt;/code&gt;_ supports generating &lt;code&gt;ts_project&lt;/code&gt;, &lt;code&gt;js_library&lt;/code&gt;, &lt;code&gt;jest_test&lt;/code&gt;, and &lt;code&gt;web_asset&lt;/code&gt; rules, and is able to support module bundlers like Webpack and Next.js&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Kotlin&lt;/p&gt; &lt;p&gt;Aspect Build provides some &lt;a href=&#34;https://github.com/aspect-build/aspect-cli/raw/main/gazelle/kotlin/&#34;&gt;Kotlin Support&lt;/a&gt; in the repo of their aspect-cli (also usable separately). Still under development, please check the README for currently available features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Protocol Buffers&lt;/p&gt; &lt;p&gt;Support for the &lt;code&gt;proto_library&lt;/code&gt; rule, as well as &lt;code&gt;go_proto_library&lt;/code&gt; is in this repository, see below. Other language-specific proto rules are not supported here. &lt;code&gt;stackb/rules_proto&lt;/code&gt;_ is a good resource for these rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Python&lt;/p&gt; &lt;p&gt;&lt;code&gt;rules_python&lt;/code&gt;_ has an extension for generating &lt;code&gt;py_library&lt;/code&gt;, &lt;code&gt;py_binary&lt;/code&gt;, and &lt;code&gt;py_test&lt;/code&gt; rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;R&lt;/p&gt; &lt;p&gt;&lt;code&gt;rules_r&lt;/code&gt;_ has an extension for generating rules for R package builds and tests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Starlark&lt;/p&gt; &lt;p&gt;&lt;code&gt;bazel-skylib&lt;/code&gt;_ has an extension for generating &lt;code&gt;bzl_library&lt;/code&gt; rules. See &lt;code&gt;bazel_skylib//gazelle/bzl&lt;/code&gt;_.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Swift&lt;/p&gt; &lt;p&gt;&lt;code&gt;swift_bazel&lt;/code&gt;_ has an extension for generating &lt;code&gt;swift_library&lt;/code&gt;, &lt;code&gt;swift_binary&lt;/code&gt;, and &lt;code&gt;swift_test&lt;/code&gt; rules. It also includes facilities for resolving, downloading and building external Swift packages for a Bazel workspace.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you know of an extension which could be linked here, please &lt;code&gt;open a PR&lt;/code&gt;_!&lt;/p&gt; &#xA;&lt;p&gt;More languages can be added by &lt;code&gt;Extending Gazelle&lt;/code&gt;&lt;em&gt;. Chat with us in the &lt;code&gt;#gazelle&lt;/code&gt; channel on &lt;code&gt;Bazel Slack&lt;/code&gt;&lt;/em&gt; if you&#39;d like to discuss your design.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve written your own extension, please consider open-sourcing it for use by the rest of the community. Note that such extensions belong in a language-specific repository, not in bazel-gazelle. See discussion in &lt;code&gt;#1030&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Running Gazelle with Bazel&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;To use Gazelle in a new project, add the ``bazel_gazelle`` repository and its&#xA;dependencies to your WORKSPACE file and call ``gazelle_dependencies``. It&#xA;should look like this:&#xA;&#xA;.. code:: bzl&#xA;&#xA;    load(&#34;@bazel_tools//tools/build_defs/repo:http.bzl&#34;, &#34;http_archive&#34;)&#xA;&#xA;    http_archive(&#xA;        name = &#34;io_bazel_rules_go&#34;,&#xA;        sha256 = &#34;6dc2da7ab4cf5d7bfc7c949776b1b7c733f05e56edc4bcd9022bb249d2e2a996&#34;,&#xA;        urls = [&#xA;            &#34;https://mirror.bazel.build/github.com/bazelbuild/rules_go/releases/download/v0.39.1/rules_go-v0.39.1.zip&#34;,&#xA;            &#34;https://github.com/bazelbuild/rules_go/releases/download/v0.39.1/rules_go-v0.39.1.zip&#34;,&#xA;        ],&#xA;    )&#xA;&#xA;    http_archive(&#xA;        name = &#34;bazel_gazelle&#34;,&#xA;        sha256 = &#34;727f3e4edd96ea20c29e8c2ca9e8d2af724d8c7778e7923a854b2c80952bc405&#34;,&#xA;        urls = [&#xA;            &#34;https://mirror.bazel.build/github.com/bazelbuild/bazel-gazelle/releases/download/v0.30.0/bazel-gazelle-v0.30.0.tar.gz&#34;,&#xA;            &#34;https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.30.0/bazel-gazelle-v0.30.0.tar.gz&#34;,&#xA;        ],&#xA;    )&#xA;&#xA;&#xA;    load(&#34;@io_bazel_rules_go//go:deps.bzl&#34;, &#34;go_register_toolchains&#34;, &#34;go_rules_dependencies&#34;)&#xA;    load(&#34;@bazel_gazelle//:deps.bzl&#34;, &#34;gazelle_dependencies&#34;, &#34;go_repository&#34;)&#xA;&#xA;    ############################################################&#xA;    # Define your own dependencies here using go_repository.&#xA;    # Else, dependencies declared by rules_go/gazelle will be used.&#xA;    # The first declaration of an external repository &#34;wins&#34;.&#xA;    ############################################################&#xA;&#xA;    go_rules_dependencies()&#xA;&#xA;    go_register_toolchains(version = &#34;1.20.5&#34;)&#xA;&#xA;    gazelle_dependencies()&#xA;&#xA;``gazelle_dependencies`` supports optional argument ``go_env`` (dict-mapping)&#xA;to set project specific go environment variables. If you are using a&#xA;`WORKSPACE.bazel` file, you will need to specify that using:&#xA;&#xA;.. code:: bzl&#xA;&#xA;    gazelle_dependencies(go_repository_default_config = &#34;//:WORKSPACE.bazel&#34;)&#xA;&#xA;Add the code below to the BUILD or BUILD.bazel file in the root directory&#xA;of your repository.&#xA;&#xA;**Important:** For Go projects, replace the string after ``prefix`` with&#xA;the portion of your import path that corresponds to your repository.&#xA;&#xA;.. code:: bzl&#xA;&#xA;  load(&#34;@bazel_gazelle//:def.bzl&#34;, &#34;gazelle&#34;)&#xA;&#xA;  # gazelle:prefix github.com/example/project&#xA;  gazelle(name = &#34;gazelle&#34;)&#xA;&#xA;After adding this code, you can run Gazelle with Bazel.&#xA;&#xA;.. code::&#xA;&#xA;  $ bazel run //:gazelle&#xA;&#xA;This will generate new BUILD.bazel files for your project. You can run the same&#xA;command in the future to update existing BUILD.bazel files to include new source&#xA;files or options.&#xA;&#xA;You can write other ``gazelle`` rules to run alternate commands like ``update-repos``.&#xA;&#xA;.. code:: bzl&#xA;&#xA;  gazelle(&#xA;      name = &#34;gazelle-update-repos&#34;,&#xA;      args = [&#xA;          &#34;-from_file=go.mod&#34;,&#xA;          &#34;-to_macro=deps.bzl%go_dependencies&#34;,&#xA;          &#34;-prune&#34;,&#xA;      ],&#xA;      command = &#34;update-repos&#34;,&#xA;  )&#xA;&#xA;You can also pass additional arguments to Gazelle after a ``--`` argument.&#xA;&#xA;.. code::&#xA;&#xA;  $ bazel run //:gazelle -- update-repos -from_file=go.mod -to_macro=deps.bzl%go_dependencies&#xA;&#xA;After running ``update-repos``, you might want to run ``bazel run //:gazelle`` again, as the&#xA;``update-repos`` command can affect the output of a normal run of Gazelle.&#xA;&#xA;Running Gazelle with Go&#xA;~~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;If you have a Go toolchain installed, you can install Gazelle with the&#xA;command below:&#xA;&#xA;.. code::&#xA;&#xA;  go install github.com/bazelbuild/bazel-gazelle/cmd/gazelle@latest&#xA;&#xA;Make sure to re-run this command to upgrade Gazelle whenever you upgrade&#xA;rules_go in your repository.&#xA;&#xA;To generate BUILD.bazel files in a new project, run the command below, replacing&#xA;the prefix with the portion of your import path that corresponds to your&#xA;repository.&#xA;&#xA;.. code::&#xA;&#xA;  gazelle -go_prefix github.com/example/project&#xA;&#xA;Most of Gazelle&#39;s command-line arguments can be expressed as special comments&#xA;in build files. See Directives_ below. You may want to copy this line into&#xA;your root build files to avoid having to type ``-go_prefix`` every time.&#xA;&#xA;.. code:: bzl&#xA;&#xA;  # gazelle:prefix github.com/example/project&#xA;&#xA;Compatibility with Go&#xA;---------------------&#xA;&#xA;Gazelle is compatible with supported releases of Go, per the&#xA;`Go Release Policy`_. The Go Team officially supports the current and previous&#xA;minor releases. Older releases are not supported and don&#39;t receive bug fixes&#xA;or security updates.&#xA;&#xA;Gazelle may use language and library features from the oldest supported release.&#xA;&#xA;Compatibility with rules_go&#xA;---------------------------&#xA;&#xA;Gazelle generates build files that use features in newer versions of&#xA;``rules_go``. Newer versions of Gazelle *may* generate build files that work&#xA;with older versions of ``rules_go``, but check the table below to ensure&#xA;you&#39;re using a compatible version.&#xA;&#xA;+---------------------+------------------------------+------------------------------+&#xA;| **Gazelle version** | **Minimum rules_go version** | **Maximum rules_go version** |&#xA;+=====================+==============================+==============================+&#xA;| 0.8                 | 0.8                          | n/a                          |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.9                 | 0.9                          | n/a                          |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.10                | 0.9                          | 0.11                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.11                | 0.11                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.12                | 0.11                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.13                | 0.13                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.14                | 0.13                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.15                | 0.13                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.16                | 0.13                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.17                | 0.13                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.18                | 0.19                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.19                | 0.19                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.20                | 0.20                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.21                | 0.20                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.22                | 0.20                         | 0.24                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.23                | 0.26                         | 0.28                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.24                | 0.29                         | 0.40                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.25                | 0.29                         | 0.40                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.26                | 0.29                         | 0.40                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.27                | 0.29                         | 0.40                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.28                | 0.35                         | 0.40                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.29                | 0.35                         | 0.40                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.30                | 0.35                         | 0.40                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.31                | 0.35                         | 0.40                         |&#xA;+---------------------+------------------------------+------------------------------+&#xA;| 0.32                | 0.41                         | n/a                          |&#xA;+---------------------+------------------------------+------------------------------+&#xA;&#xA;Usage&#xA;-----&#xA;&#xA;Command line&#xA;~~~~~~~~~~~~&#xA;&#xA;.. code::&#xA;&#xA;  gazelle &amp;lt;command&amp;gt; [flags...] [package-dirs...]&#xA;&#xA;The first argument to Gazelle may be one of the commands below. If no command&#xA;is specified, ``update`` is assumed. The remaining arguments are specific&#xA;to each command and are documented below.&#xA;&#xA;update_&#xA;  Scans sources files, then generates and updates build files.&#xA;&#xA;fix_&#xA;  Same as the ``update`` command, but it also fixes deprecated usage of rules.&#xA;&#xA;update-repos_&#xA;  Adds and updates repository rules in the WORKSPACE file.&#xA;&#xA;Bazel rule&#xA;~~~~~~~~~~&#xA;&#xA;Gazelle may be run via a rule. See `Running Gazelle with Bazel`_ for setup&#xA;instructions. This rule builds Gazelle and generates a wrapper script that&#xA;executes Gazelle with baked-in set of arguments. You can run this script&#xA;with ``bazel run``, or you can copy it into your workspace and run it directly.&#xA;&#xA;The following attributes are available on the ``gazelle`` rule.&#xA;&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| **Name**             | **Type**            | **Default value**                    |&#xA;+======================+=====================+======================================+&#xA;| :param:`gazelle`     | :type:`label`       | :value:`@bazel_gazelle//cmd/gazelle` |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| The `gazelle_binary`_ rule that builds Gazelle. You can substitute a modified     |&#xA;| version of Gazelle with this. See `Extending Gazelle`_.                           |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| :param:`external`    | :type:`string`      | :value:`external`                    |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| The method for resolving unknown imports to Bazel dependencies. May be            |&#xA;| :value:`external`, :value:`static` or :value:`vendored`.                          |&#xA;| See `Dependency resolution`_.                                                     |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| :param:`build_tags`  | :type:`string_list` | :value:`[]`                          |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| The list of Go build tags that Gazelle should consider to always be true.         |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| :param:`prefix`      | :type:`string`      | :value:`&#34;&#34;`                          |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| The import path that corresponds to the repository root directory.                |&#xA;|                                                                                   |&#xA;| Note: It&#39;s usually better to write a directive like                               |&#xA;| ``# gazelle:prefix example.com/repo`` in your build file instead of setting       |&#xA;| this attribute.                                                                   |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| :param:`extra_args`  | :type:`string_list` | :value:`[]`                          |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| A list of extra command line arguments passed to Gazelle.  Note that              |&#xA;| ``extra_args`` are suppressed by extra command line args (e.g.                    |&#xA;| ``bazel run //:gazelle -- subdir``).                                              |&#xA;| See https://github.com/bazelbuild/bazel-gazelle/issues/536 for explanation.       |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| :param:`command`     | :type:`string`      | :value:`update`                      |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;| The Gazelle command to use. May be :value:`fix`, :value:`update` or               |&#xA;| :value:`update-repos`.                                                            |&#xA;+----------------------+---------------------+--------------------------------------+&#xA;&#xA;``fix`` and ``update``&#xA;~~~~~~~~~~~~~~~~~~~~~~&#xA;&#xA;The ``update`` command is the most common way of running Gazelle. Gazelle&#xA;scans sources in directories throughout the repository, then creates and updates&#xA;build files.&#xA;&#xA;The ``fix`` command does everything ``update`` does, but it also fixes&#xA;deprecated usage of rules, analogous to ``go fix``. For example, ``cgo_library``&#xA;will be consolidated with ``go_library``. This command may delete or rename&#xA;rules, so it&#39;s not on by default. See `Fix command transformations`_&#xA;for details.&#xA;&#xA;Both commands accept a list of directories to process as positional arguments.&#xA;If no directories are specified, Gazelle will process the current directory.&#xA;Subdirectories will be processed recursively.&#xA;&#xA;The following flags are accepted:&#xA;&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| **Name**                                                          | **Default value**                      |&#xA;+===================================================================+========================================+&#xA;| :flag:`-build_file_name file1,file2,...`                          | :value:`BUILD.bazel,BUILD`             |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Comma-separated list of file names. Gazelle recognizes these files as Bazel                                |&#xA;| build files. New files will use the first name in this list. Use this if                                   |&#xA;| your project contains non-Bazel files named ``BUILD`` (or ``build`` on                                     |&#xA;| case-insensitive file systems).                                                                            |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-build_tags tag1,tag2`                                     |                                        |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| List of Go build tags Gazelle will consider to be true. Gazelle applies                                    |&#xA;| constraints when generating Go rules. It assumes certain tags are true on                                  |&#xA;| certain platforms (for example, ``amd64,linux``). It assumes all Go release                                |&#xA;| tags are true (for example, ``go1.8``). It considers other tags to be false                                |&#xA;| (for example, ``ignore``). This flag overrides that behavior.                                              |&#xA;|                                                                                                            |&#xA;| Bazel may still filter sources with these tags. Use                                                        |&#xA;| ``bazel build --define gotags=foo,bar`` to set tags at build time.                                         |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-exclude pattern`                                          |                                        |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Prevents Gazelle from processing a file or directory if the given                                          |&#xA;| `doublestar.Match`_ pattern matches. If the pattern refers to a source file,                               |&#xA;| Gazelle won&#39;t include it in any rules. If the pattern refers to a directory,                               |&#xA;| Gazelle won&#39;t recurse into it.                                                                             |&#xA;|                                                                                                            |&#xA;| This option may be repeated. Patterns must be slash-separated, relative to the                             |&#xA;| repository root. This is equivalent to the ``# gazelle:exclude pattern``                                   |&#xA;| directive.                                                                                                 |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-external external|static|vendored`                        | :value:`external`                      |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Determines how Gazelle resolves import paths that cannot be resolve in the                                 |&#xA;| current repository. May be :value:`external`, :value:`static` or :value:`vendored`. See                    |&#xA;| `Dependency resolution`_.                                                                                  |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-index true|false`                                         | :value:`true`                          |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Determines whether Gazelle should index the libraries in the current repository and whether it             |&#xA;| should use the index to resolve dependencies. If this is switched off, Gazelle would rely on               |&#xA;| ``# gazelle:prefix`` directive or ``-go_prefix`` flag to resolve dependencies.                             |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-go_grpc_compiler`                                         | ``@io_bazel_rules_go//proto:go_grpc``  |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| The protocol buffers compiler to use for building go bindings for gRPC. May be repeated.                   |&#xA;|                                                                                                            |&#xA;| See `Predefined plugins`_ for available options; commonly used options include                             |&#xA;| ``@io_bazel_rules_go//proto:gofast_grpc`` and ``@io_bazel_rules_go//proto:gogofaster_grpc``.               |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-go_naming_convention`                                     |                                        |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Controls the names of generated Go targets. Equivalent to the                                              |&#xA;| ``# gazelle:go_naming_convention`` directive. See details in                                               |&#xA;| `Directives`_ below.                                                                                       |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-go_naming_convention_external`                            |                                        |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Controls the default naming convention used when resolving libraries in                                    |&#xA;| external repositories with unknown naming conventions. Equivalent to the                                   |&#xA;| ``# gazelle:go_naming_convention_external`` directive.                                                     |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-go_prefix example.com/repo`                               |                                        |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| A prefix of import paths for libraries in the repository that corresponds to                               |&#xA;| the repository root. Equivalent to setting the ``# gazelle:prefix`` directive                              |&#xA;| in the root BUILD.bazel file or the ``prefix`` attribute of the ``gazelle`` rule. If                       |&#xA;| neither of those are set, this option is mandatory.                                                        |&#xA;|                                                                                                            |&#xA;| This prefix is used to determine whether an import path refers to a library                                |&#xA;| in the current repository or an external dependency.                                                       |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-go_proto_compiler`                                        | ``@io_bazel_rules_go//proto:go_proto`` |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| The protocol buffers compiler to use for building go bindings. May be repeated.                            |&#xA;|                                                                                                            |&#xA;| See `Predefined plugins`_ for available options; commonly used options include                             |&#xA;| ``@io_bazel_rules_go//proto:gofast_proto`` and ``@io_bazel_rules_go//proto:gogofaster_proto``.             |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-known_import example.com`                                 |                                        |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Skips import path resolution for a known domain. May be repeated.                                          |&#xA;|                                                                                                            |&#xA;| When Gazelle resolves an import path to an external dependency, it attempts                                |&#xA;| to discover the remote repository root over HTTP. Gazelle skips this                                       |&#xA;| discovery step for a few well-known domains with predictable structure, like                               |&#xA;| golang.org and github.com. This flag specifies additional domains to skip,                                 |&#xA;| which is useful in situations where the lookup would fail for some reason.                                 |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-mode fix|print|diff`                                      | :value:`fix`                           |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Method for emitting merged build files.                                                                    |&#xA;|                                                                                                            |&#xA;| In ``fix`` mode, Gazelle writes generated and merged files to disk. In                                     |&#xA;| ``print`` mode, it prints them to stdout. In ``diff`` mode, it prints a                                    |&#xA;| unified diff.                                                                                              |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-proto default|file|package|legacy|disable|disable_global` | :value:`default`                       |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Determines how Gazelle should generate rules for .proto files. See details                                 |&#xA;| in `Directives`_ below.                                                                                    |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-proto_group group`                                        | :value:`&#34;&#34;`                            |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Determines the proto option Gazelle uses to group .proto files into rules                                  |&#xA;| when in ``package`` mode. See details in `Directives`_ below.                                              |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-proto_import_prefix path`                                 |                                        |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Sets the `import_prefix`_ attribute of generated ``proto_library`` rules.                                  |&#xA;| This adds a prefix to the string used to import ``.proto`` files listed in                                 |&#xA;| the ``srcs`` attribute of generated rules. Equivalent to the                                               |&#xA;| ``# gazelle:proto_import_prefix`` directive. See details in `Directives`_ below.                           |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-repo_root dir`                                            |                                        |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| The root directory of the repository. Gazelle normally infers this to be the                               |&#xA;| directory containing the WORKSPACE file.                                                                   |&#xA;|                                                                                                            |&#xA;| Gazelle will not process packages outside this directory.                                                  |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| :flag:`-lang lang1,lang2,...`                                     | :value:`&#34;&#34;`                            |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;| Selects languages for which to compose and index rules.                                                    |&#xA;|                                                                                                            |&#xA;| By default, all languages that this Gazelle was built with are processed.                                  |&#xA;+-------------------------------------------------------------------+----------------------------------------+&#xA;&#xA;.. _Predefined plugins: https://github.com/bazelbuild/rules_go/blob/master/proto/core.rst#predefined-plugins&#xA;&#xA;``update-repos``&#xA;~~~~~~~~~~~~~~~~&#xA;&#xA;The ``update-repos`` command updates repository rules.  It can write the rules&#xA;to either the WORKSPACE (by default) or a .bzl file macro function.  It can be&#xA;used to add new repository rules or update existing rules to the specified&#xA;version. It can also import repository rules from a ``go.mod`` or a ``go.work``&#xA;file.&#xA;&#xA;.. code:: bash&#xA;&#xA;  # Add or update a repository to latest version by import path&#xA;  $ gazelle update-repos example.com/new/repo&#xA;&#xA;  # Add or update a repository to specified version/commit by import path&#xA;  $ gazelle update-repos example.com/new/repo@v1.3.1&#xA;&#xA;  # Import repositories from go.mod&#xA;  $ gazelle update-repos -from_file=go.mod&#xA;&#xA;  # Import repositories from go.work&#xA;  $ gazelle update-repos -from_file=go.work&#xA;&#xA;  # Import repositories from go.mod and update macro&#xA;  $ gazelle update-repos -from_file=go.mod -to_macro=repositories.bzl%go_repositories&#xA;&#xA;  # Import repositories from go.work and update macro&#xA;  $ gazelle update-repos -from_file=go.work -to_macro=repositories.bzl%go_repositories&#xA;&#xA;The following flags are accepted:&#xA;&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| **Name**                                                                                                 | **Default value**                            |&#xA;+==========================================================================================================+==============================================+&#xA;| :flag:`-from_file lock-file`                                                                             |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Import repositories from a file as `go_repository`_ rules. These rules will be added to the bottom of the WORKSPACE file or merged with existing rules. |&#xA;|                                                                                                                                                         |&#xA;| The lock file format is inferred from the file name. ``go.mod`` and ``go.work` are all supported.                                                       |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-repo_root dir`                                                                                   |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| The root directory of the repository. Gazelle normally infers this to be the directory containing the WORKSPACE file.                                   |&#xA;|                                                                                                                                                         |&#xA;| Gazelle will not process packages outside this directory.                                                                                               |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-to_macro macroFile%defName`                                                                      |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Tells Gazelle to write new repository rules into a .bzl macro function rather than the WORKSPACE file.                                                  |&#xA;|                                                                                                                                                         |&#xA;| The ``repository_macro`` directive should be added to the WORKSPACE in order for future Gazelle calls to recognize the repos defined in the macro file. |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-prune true|false`                                                                                | :value:`false`                               |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| When true, Gazelle will remove `go_repository`_ rules that no longer have equivalent repos in the ``go.mod`` file.                                      |&#xA;|                                                                                                                                                         |&#xA;| This flag can only be used with ``-from_file``.                                                                                                         |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-build_directives arg1,arg2,...`                                                                  |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Sets the ``build_directives attribute`` for the generated `go_repository`_ rule(s).                                                                     |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-build_external external|vendored`                                                                |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Sets the ``build_external`` attribute for the generated `go_repository`_ rule(s).                                                                       |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-build_extra_args arg1,arg2,...`                                                                  |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Sets the ``build_extra_args attribute`` for the generated `go_repository`_ rule(s).                                                                     |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-build_file_generation auto|on|off`                                                               |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Sets the ``build_file_generation`` attribute for the generated `go_repository`_ rule(s).                                                                |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-build_file_names file1,file2,...`                                                                |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Sets the ``build_file_name`` attribute for the generated `go_repository`_ rule(s).                                                                      |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-build_file_proto_mode default|package|legacy|disable|disable_global`                             |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Sets the ``build_file_proto_mode`` attribute for the generated `go_repository`_ rule(s).                                                                |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| :flag:`-build_tags tag1,tag2,...`                                                                        |                                              |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;| Sets the ``build_tags`` attribute for the generated `go_repository`_ rule(s).                                                                           |&#xA;+----------------------------------------------------------------------------------------------------------+----------------------------------------------+&#xA;&#xA;Directives&#xA;~~~~~~~~~~&#xA;&#xA;Gazelle can be configured with *directives*, which are written as top-level&#xA;comments in build files. Most options that can be set on the command line&#xA;can also be set using directives. Some options can only be set with&#xA;directives.&#xA;&#xA;Directive comments have the form ``# gazelle:key value``. For example:&#xA;&#xA;.. code:: bzl&#xA;&#xA;  load(&#34;@io_bazel_rules_go//go:def.bzl&#34;, &#34;go_library&#34;)&#xA;&#xA;  # gazelle:prefix github.com/example/project&#xA;  # gazelle:build_file_name BUILD,BUILD.bazel&#xA;&#xA;  go_library(&#xA;      name = &#34;go_default_library&#34;,&#xA;      srcs = [&#34;example.go&#34;],&#xA;      importpath = &#34;github.com/example/project&#34;,&#xA;      visibility = [&#34;//visibility:public&#34;],&#xA;  )&#xA;&#xA;Directives apply in the directory where they are set *and* in subdirectories.&#xA;This means, for example, if you set ``# gazelle:prefix`` in the build file&#xA;in your project&#39;s root directory, it affects your whole project. If you&#xA;set it in a subdirectory, it only affects rules in that subtree.&#xA;&#xA;The following directives are recognized:&#xA;&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| **Directive**                                     | **Default value**                      |&#xA;+===================================================+========================================+&#xA;| :direc:`# gazelle:build_file_name names`          | :value:`BUILD.bazel,BUILD`             |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Comma-separated list of file names. Gazelle recognizes these files as Bazel                |&#xA;| build files. New files will use the first name in this list. Use this if                   |&#xA;| your project contains non-Bazel files named ``BUILD`` (or ``build`` on                     |&#xA;| case-insensitive file systems).                                                            |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:build_tags foo,bar`             | none                                   |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| List of Go build tags Gazelle will consider to be true. Gazelle applies                    |&#xA;| constraints when generating Go rules. It assumes certain tags are true on                  |&#xA;| certain platforms (for example, ``amd64,linux``). It assumes all Go release                |&#xA;| tags are true (for example, ``go1.8``). It considers other tags to be false                |&#xA;| (for example, ``ignore``). This flag overrides that behavior.                              |&#xA;|                                                                                            |&#xA;| Bazel may still filter sources with these tags. Use                                        |&#xA;| ``bazel build --define gotags=foo,bar`` to set tags at build time.                         |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:exclude pattern`                | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Prevents Gazelle from processing a file or directory if the given                          |&#xA;| `doublestar.Match`_ pattern matches. If the pattern refers to a source file,               |&#xA;| Gazelle won&#39;t include it in any rules. If the pattern refers to a directory,               |&#xA;| Gazelle won&#39;t recurse into it. This directive may be repeated to exclude                   |&#xA;| multiple patterns, one per line.                                                           |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:follow pattern`                 | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Instructs Gazelle to follow a symbolic link to a directory within the repository if the    |&#xA;| given `doublestar.Match`_ pattern matches. Normally, Gazelle does not follow symbolic      |&#xA;| links unless they point outside of the repository root.                                    |&#xA;|                                                                                            |&#xA;| Care must be taken to avoid visiting a directory more than once.                           |&#xA;| The ``# gazelle:exclude`` directive may be used to prevent Gazelle from                    |&#xA;| recursing into a directory.                                                                |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:go_generate_proto`              | ``true``                               |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Instructs Gazelle&#39;s Go extension whether to generate ``go_proto_library`` rules for        |&#xA;| ``proto_library`` rules generated by the Proto extension. When this directive is ``true``  |&#xA;| Gazelle will generate ``go_proto_library`` and ``go_library`` according to                 |&#xA;| ``# gazelle:proto``. When this directive is ``false``, the Go extension will ignore any    |&#xA;| ``proto_library`` rules. If there are any pre-generated Go files, they will be treated as  |&#xA;| regular Go files.                                                                          |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:go_grpc_compilers`              | ``@io_bazel_rules_go//proto:go_grpc``  |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| The protocol buffers compiler(s) to use for building go bindings for gRPC.                 |&#xA;| Multiple compilers, separated by commas, may be specified.                                 |&#xA;| Omit the directive value to reset ``go_grpc_compilers`` back to the default.               |&#xA;|                                                                                            |&#xA;| See `Predefined plugins`_ for available options; commonly used options include             |&#xA;| ``@io_bazel_rules_go//proto:gofast_grpc`` and                                              |&#xA;| ``@io_bazel_rules_go//proto:gogofaster_grpc``.                                             |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:go_naming_convention`           | inferred automatically                 |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Controls the names of generated Go targets.                                                |&#xA;|                                                                                            |&#xA;| Valid values are:                                                                          |&#xA;|                                                                                            |&#xA;| * ``go_default_library``: Library targets are named ``go_default_library``, test targets   |&#xA;|   are named ``go_default_test``.                                                           |&#xA;| * ``import``: Library and test targets are named after the last segment of their import    |&#xA;|   path.                                                                                    |&#xA;|   For example, ``example.repo/foo`` is named ``foo``, and the test target is ``foo_test``. |&#xA;|   Major version suffixes like ``/v2`` are dropped.                                         |&#xA;|   For a main package with a binary ``foobin``, the names are instead ``foobin_lib`` and    |&#xA;|   ``foobin_test``.                                                                         |&#xA;| * ``import_alias``: Same as ``import``, but an ``alias`` target is generated named         |&#xA;|   ``go_default_library`` to ensure backwards compatibility.                                |&#xA;|                                                                                            |&#xA;| If no naming convention is set, Gazelle attempts to infer the convention in                |&#xA;| use by reading the root build file and build files in immediate                            |&#xA;| subdirectories. If no Go targets are found, Gazelle defaults to ``import``.                |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:go_naming_convention_external`  | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Controls the default naming convention used when resolving libraries in                    |&#xA;| external repositories with unknown naming conventions. Accepts the same values             |&#xA;| as ``go_naming_convention``.                                                               |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:go_proto_compilers`             | ``@io_bazel_rules_go//proto:go_proto`` |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| The protocol buffers compiler(s) to use for building go bindings.                          |&#xA;| Multiple compilers, separated by commas, may be specified.                                 |&#xA;| Omit the directive value to reset ``go_proto_compilers`` back to the default.              |&#xA;|                                                                                            |&#xA;| See `Predefined plugins`_ for available options; commonly used options include             |&#xA;| ``@io_bazel_rules_go//proto:gofast_proto`` and                                             |&#xA;| ``@io_bazel_rules_go//proto:gogofaster_proto``.                                            |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:ignore`                         | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Prevents Gazelle from modifying the build file. Gazelle will still read                    |&#xA;| rules in the build file and may modify build files in subdirectories.                      |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:importmap_prefix path`          | See below                              |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| A prefix for ``importmap`` attributes in library rules. Gazelle will set                   |&#xA;| an ``importmap`` on a ``go_library`` or ``go_proto_library`` by                            |&#xA;| concatenating this with the relative path from the directory where the                     |&#xA;| prefix is set to the library. For example, if ``importmap_prefix`` is set                  |&#xA;| to ``&#34;x/example.com/repo&#34;`` in the build file ``//foo/bar:BUILD.bazel``,                   |&#xA;| then a library in ``foo/bar/baz`` will have the ``importmap`` of                           |&#xA;| ``&#34;x/example.com/repo/baz&#34;``.                                                              |&#xA;|                                                                                            |&#xA;| ``importmap`` is not set when it matches ``importpath``.                                   |&#xA;|                                                                                            |&#xA;| As a special case, when Gazelle enters a directory named ``vendor``, it                    |&#xA;| sets ``importmap_prefix`` to a string based on the repository name and the                 |&#xA;| location of the vendor directory. If you wish to override this, you&#39;ll need                |&#xA;| to set ``importmap_prefix`` explicitly in the vendor directory.                            |&#xA;+------------------------------------------------------------+-------------------------------+&#xA;| :direc:`# gazelle:map_kind from_kind to_kind to_kind_load` | n/a                           |&#xA;+------------------------------------------------------------+-------------------------------+&#xA;| Customizes the kind of rules generated by Gazelle.                                         |&#xA;|                                                                                            |&#xA;| As a separate step after generating rules, any new rules of kind ``from_kind`` have their  |&#xA;| kind replaced with ``to_kind``. This means that ``to_kind`` must accept the same           |&#xA;| parameters and behave similarly.                                                           |&#xA;|                                                                                            |&#xA;| Most commonly, this would be used to replace the rules provided by ``rules_go`` with       |&#xA;| custom macros. For example,                                                                |&#xA;| ``gazelle:map_kind go_binary go_deployable //tools/go:def.bzl`` would configure Gazelle to |&#xA;| produce rules of kind ``go_deployable`` as loaded from ``//tools/go:def.bzl`` instead of   |&#xA;| ``go_binary``, for this directory or within.                                               |&#xA;|                                                                                            |&#xA;| Existing rules of the old kind will be ignored. To switch your codebase from a builtin     |&#xA;| kind to a mapped kind, use `buildozer`_.                                                   |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:prefix path`                    | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| A prefix for ``importpath`` attributes on library rules. Gazelle will set                  |&#xA;| an ``importpath`` on a ``go_library`` or ``go_proto_library`` by                           |&#xA;| concatenating this with the relative path from the directory where the                     |&#xA;| prefix is set to the library. Most commonly, ``prefix`` is set to the                      |&#xA;| name of a repository in the root directory of a repository. For example,                   |&#xA;| in this repository, ``prefix`` is set in ``//:BUILD.bazel`` to                             |&#xA;| ``github.com/bazelbuild/bazel-gazelle``. The ``go_library`` in                             |&#xA;| ``//cmd/gazelle`` is assigned the ``importpath``                                           |&#xA;| ``&#34;github.com/bazelbuild/bazel-gazelle/cmd/gazelle&#34;``.                                     |&#xA;|                                                                                            |&#xA;| As a special case, when Gazelle enters a directory named ``vendor``, it sets               |&#xA;| ``prefix`` to the empty string. This automatically gives vendored libraries                |&#xA;| an intuitive ``importpath``.                                                               |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:proto mode`                     | :value:`default`                       |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Tells Gazelle how to generate rules for .proto files. Valid values are:                    |&#xA;|                                                                                            |&#xA;| * ``default``: ``proto_library``, ``go_proto_library``, and ``go_library``                 |&#xA;|   rules are generated using ``@io_bazel_rules_go//proto:def.bzl``. Only one                |&#xA;|   of each rule may be generated per directory. This is the default mode.                   |&#xA;| * ``file``: a ``proto_library`` rule is generated for every .proto file.                   |&#xA;| * ``package``: multiple ``proto_library`` and ``go_proto_library`` rules                   |&#xA;|   may be generated in the same directory. .proto files are grouped into                    |&#xA;|   rules based on their package name or another option (see ``proto_group``).               |&#xA;| * ``legacy``: ``filegroup`` rules are generated for use by                                 |&#xA;|   ``@io_bazel_rules_go//proto:go_proto_library.bzl``. ``go_proto_library``                 |&#xA;|   rules must be written by hand. Gazelle will run in this mode automatically               |&#xA;|   if ``go_proto_library.bzl`` is loaded to avoid disrupting existing                       |&#xA;|   projects, but this can be overridden with a directive.                                   |&#xA;| * ``disable``: .proto files are ignored. Gazelle will run in this mode                     |&#xA;|   automatically if ``go_proto_library`` is loaded from any other source,                   |&#xA;|   but this can be overridden with a directive.                                             |&#xA;| * ``disable_global``: like ``disable`` mode, but also prevents Gazelle from                |&#xA;|   using any special cases in dependency resolution for Well Known Types and                |&#xA;|   Google APIs. Useful for avoiding build-time dependencies on protoc.                      |&#xA;|                                                                                            |&#xA;| This directive applies to the current directory and subdirectories. As a                   |&#xA;| special case, when Gazelle enters a directory named ``vendor``, if the proto               |&#xA;| mode isn&#39;t set explicitly in a parent directory or on the command line,                    |&#xA;| Gazelle will run in ``disable`` mode. Additionally, if the file                            |&#xA;| ``@io_bazel_rules_go//proto:go_proto_library.bzl`` is loaded, Gazelle                      |&#xA;| will run in ``legacy`` mode.                                                               |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:proto_group option`             | :value:`&#34;&#34;`                            |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| *This directive is only effective in* ``package`` *mode (see above).*                      |&#xA;|                                                                                            |&#xA;| Specifies an option that Gazelle can use to group .proto files into rules.                 |&#xA;| For example, when set to ``go_package``, .proto files with the same                        |&#xA;| ``option go_package`` will be grouped together.                                            |&#xA;|                                                                                            |&#xA;| When this directive is set to the empty string, Gazelle will group packages                |&#xA;| by their proto package statement.                                                          |&#xA;|                                                                                            |&#xA;| Rule names are generated based on the last run of identifier characters                    |&#xA;| in the package name. For example, if the package is ``&#34;foo/bar/baz&#34;``, the                 |&#xA;| ``proto_library`` rule will be named ``baz_proto``.                                        |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:proto_import_prefix path`       | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Sets the `import_prefix`_ attribute of generated ``proto_library`` rules.                  |&#xA;| This adds a prefix to the string used to import ``.proto`` files listed in                 |&#xA;| the ``srcs`` attribute of generated rules.                                                 |&#xA;|                                                                                            |&#xA;| For example, if the target ``//a:b_proto`` has ``srcs = [&#34;b.proto&#34;]`` and                  |&#xA;| ``import_prefix = &#34;github.com/x/y&#34;``, then ``b.proto`` should be imported                  |&#xA;| with the string ``&#34;github.com/x/y/a/b.proto&#34;``.                                            |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:proto_strip_import_prefix path` | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Sets the `strip_import_prefix`_ attribute of generated ``proto_library`` rules.            |&#xA;| This is a prefix to strip from the strings used to import ``.proto`` files.                |&#xA;|                                                                                            |&#xA;| If the prefix starts with a slash, it&#39;s intepreted relative to the repository              |&#xA;| root. Otherwise, it&#39;s relative to the directory containing the build file.                 |&#xA;| The package-relative form is only useful when a single build file covers                   |&#xA;| ``.proto`` files in subdirectories. Gazelle doesn&#39;t generate build files like              |&#xA;| this, so only paths with a leading slash should be used. Gazelle will print                |&#xA;| a warning when the package-relative form is used.                                          |&#xA;|                                                                                            |&#xA;| For example, if the target ``//proto/a:b_proto`` has ``srcs = [&#34;b.proto&#34;]``                |&#xA;| and ``strip_import_prefix = &#34;/proto&#34;``, then ``b.proto`` should be imported                |&#xA;| with the string ``&#34;a/b.proto&#34;``.                                                           |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:resolve ...`                    | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Specifies an explicit mapping from an import string to a label for                         |&#xA;| `Dependency resolution`_. The format for a resolve directive is:                           |&#xA;|                                                                                            |&#xA;| ``# gazelle:resolve source-lang import-lang import-string label``                          |&#xA;|                                                                                            |&#xA;| * ``source-lang`` is the language of the source code being imported.                       |&#xA;| * ``import-lang`` is the language importing the library. This is usually                   |&#xA;|   the same as ``source-lang`` but may differ with generated code. For                      |&#xA;|   example, when resolving dependencies for a ``go_proto_library``,                         |&#xA;|   ``source-lang`` would be ``&#34;proto&#34;`` and ``import-lang`` would be ``&#34;go&#34;``.              |&#xA;|   ``import-lang`` may be omitted if it is the same as ``source-lang``.                     |&#xA;| * ``import-string`` is the string used in source code to import a library.                 |&#xA;| * ``label`` is the Bazel label that Gazelle should write in ``deps``.                      |&#xA;|                                                                                            |&#xA;| For example:                                                                               |&#xA;|                                                                                            |&#xA;| .. code:: bzl                                                                              |&#xA;|                                                                                            |&#xA;|   # gazelle:resolve go example.com/foo //foo:go_default_library                            |&#xA;|   # gazelle:resolve proto go foo/foo.proto //foo:foo_go_proto                              |&#xA;|                                                                                            |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:resolve_regexp ...`             | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Specifies an explicit mapping from an import regex to a label for                          |&#xA;| `Dependency resolution`_. The format for a resolve directive is:                           |&#xA;|                                                                                            |&#xA;| ``# gazelle:resolve source-lang import-lang import-string-regex label``                    |&#xA;|                                                                                            |&#xA;| Specifies an explicit mapping from an import regex to a label for                          |&#xA;| `Dependency resolution`_. The format for a resolve directive is:                           |&#xA;|                                                                                            |&#xA;| ``# gazelle:resolve source-lang import-lang import-string-regex label``                    |&#xA;|                                                                                            |&#xA;| * ``source-lang`` is the language of the source code being imported.                       |&#xA;| * ``import-lang`` is the language importing the library. This is usually                   |&#xA;|   the same as ``source-lang`` but may differ with generated code. For                      |&#xA;|   example, when resolving dependencies for a ``go_proto_library``,                         |&#xA;|   ``source-lang`` would be ``&#34;proto&#34;`` and ``import-lang`` would be ``&#34;go&#34;``.              |&#xA;|   ``import-lang`` may be omitted if it is the same as ``source-lang``.                     |&#xA;| * ``import-string-regex`` is the regex applied to the import in the source code.           |&#xA;|   If it matches, that import will be resolved to the label specified below.                |&#xA;| * ``label`` is the Bazel label that Gazelle should write in ``deps``.                      |&#xA;|                                                                                            |&#xA;| For example:                                                                               |&#xA;|                                                                                            |&#xA;| .. code:: bzl                                                                              |&#xA;|                                                                                            |&#xA;|   # gazelle:resolve_regexp go example.com/.* //foo:go_default_library                      |&#xA;|   # gazelle:resolve_regexp proto go foo/.*\.proto //foo:foo_go_proto                       |&#xA;|                                                                                            |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:go_visibility label`            | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| By default, internal packages are only visible to its siblings. This directive adds a label|&#xA;| internal packages should be visible to additionally. This directive can be used several    |&#xA;| times, adding a list of labels.                                                            |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:lang lang1,lang2,...`           | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Sets the language selection flag for this and descendent packages, which causes gazelle to |&#xA;| index and generate rules for only the languages named in this directive.                   |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:default_visibility visibility`  | n/a                                    |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;| Comma-separated list of visibility specifications.                                         |&#xA;| This directive adds the visibility specifications for this and descendant packages.        |&#xA;|                                                                                            |&#xA;| For example:                                                                               |&#xA;|                                                                                            |&#xA;| .. code:: bzl                                                                              |&#xA;|                                                                                            |&#xA;|   # gazelle:default_visibility //foo:__subpackages__,//src:__subpackages__                 |&#xA;+---------------------------------------------------+----------------------------------------+&#xA;&#xA;Gazelle also reads directives from the WORKSPACE file. They may be used to&#xA;discover custom repository names and known prefixes. The ``fix`` and ``update``&#xA;commands use these directives for dependency resolution. ``update-repos`` uses&#xA;them to learn about repository rules defined in alternate locations.&#xA;&#xA;+--------------------------------------------------------------------+----------------------------------------+&#xA;| **WORKSPACE Directive**                                            | **Default value**                      |&#xA;+====================================================================+========================================+&#xA;| :direc:`# gazelle:repository_macro [+]macroFile%defName`           | n/a                                    |&#xA;+--------------------------------------------------------------------+----------------------------------------+&#xA;| Tells Gazelle to look for repository rules in a macro in a .bzl file. The directive can be                  |&#xA;| repeated multiple times.                                                                                    |&#xA;| The macro can be generated by calling ``update-repos`` with the ``to_macro`` flag.                          |&#xA;|                                                                                                             |&#xA;| The directive can be prepended with a &#34;+&#34;, which will tell Gazelle to also look for repositories            |&#xA;| within any macros called by the specified macro.                                                            |&#xA;+--------------------------------------------------------------------+----------------------------------------+&#xA;| :direc:`# gazelle:repository rule_kind attr1_name=attr1_value ...` | n/a                                    |&#xA;+--------------------------------------------------------------------+----------------------------------------+&#xA;| Specifies a repository rule that Gazelle should know about. The directive can be repeated multiple times,   |&#xA;| and can be declared from within a macro definition that Gazelle knows about. At the very least the          |&#xA;| directive must define a rule kind and a name attribute, but it can define extra attributes after that.      |&#xA;|                                                                                                             |&#xA;| This is useful for teaching Gazelle about repos declared in external macros. The directive can also be used |&#xA;| to override an actual repository rule. For example, a ``git_repository`` rule for ``org_golang_x_tools``    |&#xA;| could be overriden with the directive:                                                                      |&#xA;|                                                                                                             |&#xA;| .. code:: bzl                                                                                               |&#xA;|                                                                                                             |&#xA;|   # gazelle:repository go_repository name=org_golang_x_tools importpath=golang.org/x/tools                  |&#xA;|                                                                                                             |&#xA;| Gazelle would then proceed as if ``org_golang_x_tools`` was declared as a ``go_repository`` rule.           |&#xA;+--------------------------------------------------------------------+----------------------------------------+&#xA;&#xA;Keep comments&#xA;~~~~~~~~~~~~~&#xA;&#xA;In addition to directives, Gazelle supports ``# keep`` comments that protect&#xA;parts of build files from being modified. ``# keep`` may be written before&#xA;a rule, before an attribute, or after a string within a list.&#xA;&#xA;``# keep`` comments might take one of 2 forms; the ``# keep`` literal or a&#xA;description prefixed by ``# keep: ``.&#xA;&#xA;Example&#xA;^^^^^^^&#xA;&#xA;Suppose you have a library that includes a generated .go file. Gazelle won&#39;t&#xA;know what imports to resolve, so you may need to add dependencies manually with&#xA;``# keep`` comments.&#xA;&#xA;.. code:: bzl&#xA;&#xA;  load(&#34;@io_bazel_rules_go//go:def.bzl&#34;, &#34;go_library&#34;)&#xA;  load(&#34;@com_github_example_gen//:gen.bzl&#34;, &#34;gen_go_file&#34;)&#xA;&#xA;  gen_go_file(&#xA;      name = &#34;magic&#34;,&#xA;      srcs = [&#34;magic.go.in&#34;],&#xA;      outs = [&#34;magic.go&#34;],&#xA;  )&#xA;&#xA;  go_library(&#xA;      name = &#34;go_default_library&#34;,&#xA;      srcs = [&#34;magic.go&#34;],&#xA;      visibility = [&#34;//visibility:public&#34;],&#xA;      deps = [&#xA;          &#34;@com_github_example_gen//:go_default_library&#34;,  # keep&#xA;          &#34;@com_github_example_gen//a/b/c:go_default_library&#34;,  # keep: this is also important&#xA;      ],&#xA;  )&#xA;&#xA;Dependency resolution&#xA;---------------------&#xA;&#xA;One of Gazelle&#39;s most important jobs is resolving library import strings&#xA;(like ``import &#34;golang.org/x/sys/unix&#34;``) to Bazel labels (like&#xA;``@org_golang_x_sys//unix:go_default_library``). Gazelle follows the rules&#xA;below to resolve dependencies:&#xA;&#xA;1. If the import to be resolved is part of a standard library, no explicit&#xA;   dependency is written. For example, in Go, you don&#39;t need to declare&#xA;   that you depend on ``&#34;fmt&#34;``.&#xA;2. If a ``# gazelle:resolve`` directive matches the import to be resolved,&#xA;   the label at the end of the directive will be used.&#xA;3. If proto rule generation is enabled, special rules will be used when&#xA;   importing certain libraries. These rules may be disabled by adding&#xA;   ``# gazelle:proto disable_global`` to a build file (this will affect&#xA;   subdirectories, too) or by passing ``-proto disable_global`` on the&#xA;   command line.&#xA;&#xA;   a) Imports of Well Known Types are mapped to rules in&#xA;      ``@io_bazel_rules_go//proto/wkt``.&#xA;   b) Imports of Google APIs are mapped to ``@go_googleapis``.&#xA;   c) Imports of ``github.com/golang/protobuf/ptypes``, ``descriptor``, and&#xA;      ``jsonpb`` are mapped to special rules in ``@com_github_golang_protobuf``.&#xA;      See `Avoiding conflicts with proto rules`_.&#xA;&#xA;4. If the import to be resolved is in the library index, the import will be resolved&#xA;   to that library. If ``-index=true``, Gazelle builds an index of library rules in&#xA;   the current repository before starting dependency resolution, and this is how&#xA;   most dependencies are resolved.&#xA;&#xA;   a) For Go, the match is based on the ``importpath`` attribute.&#xA;   b) For proto, the match is based on the ``srcs`` attribute.&#xA;&#xA;5. If ``-index=false`` and a package is imported that has the current ``go_prefix``&#xA;   as a prefix, Gazelle generates a label following a convention. For example, if&#xA;   the build file in ``//src`` set the prefix with&#xA;   ``# gazelle:prefix example.com/repo/foo``, and you import the library&#xA;   ``&#34;example.com/repo/foo/bar``, the dependency will be&#xA;   ``&#34;//src/foo/bar:go_default_library&#34;``.&#xA;6. Otherwise, Gazelle will use the current ``external`` mode to resolve&#xA;   the dependency.&#xA;&#xA;   a) In ``external`` mode (the default), Gazelle will transform the import&#xA;      string into an external repository label. For example,&#xA;      ``&#34;golang.org/x/sys/unix&#34;`` would be resolved to&#xA;      ``&#34;@org_golang_x_sys//unix:go_default_library&#34;``. Gazelle does not confirm&#xA;      whether the external repository is actually declared in WORKSPACE,&#xA;      but if there *is* a ``go_repository`` in WORKSPACE with a matching&#xA;      ``importpath``, Gazelle will use its name. Gazelle does not index&#xA;      rules in external repositories, so it&#39;s possible the resolved dependency&#xA;      does not exist.&#xA;   b) In ``static`` mode, Gazelle has the same behavior as ``external`` mode,&#xA;      except that it will not call out to the network for resolution when no&#xA;      matching import is found within WORKSPACE. Instead, it will skip the&#xA;      unknown import. This is the default mode for ``go_repository`` rules.&#xA;   c) In ``vendored`` mode, Gazelle will transform the import string into&#xA;      a label in the vendor directory. For example, ``&#34;golang.org/x/sys/unix&#34;``&#xA;      would be resolved to&#xA;      ``&#34;//vendor/golang.org/x/sys/unix:go_default_library&#34;``. This mode is&#xA;      usually not necessary, since vendored libraries will be indexed and&#xA;      resolved using rule 4.&#xA;&#xA;Fix command transformations&#xA;---------------------------&#xA;&#xA;Gazelle will generate and update build files when invoked with either&#xA;``gazelle update`` or ``gazelle fix`` (``update`` is the default). Both commands&#xA;perform several transformations to fix deprecated usage of the Go rules.&#xA;``update`` performs a safe set of tranformations, while ``fix`` performs some&#xA;additional transformations that may delete or rename rules.&#xA;&#xA;The following transformations are performed:&#xA;&#xA;**Migrate library to embed (fix and update):** Gazelle replaces ``library``&#xA;attributes with ``embed`` attributes.&#xA;&#xA;**Migrate gRPC compilers (fix and update):** Gazelle converts&#xA;``go_grpc_library`` rules to ``go_proto_library`` rules with&#xA;``compilers = [&#34;@io_bazel_rules_go//proto:go_grpc&#34;]``.&#xA;&#xA;**Flatten srcs (fix and update):** Gazelle converts ``srcs`` attributes that&#xA;use OS and architecture-specific ``select`` expressions to flat lists.&#xA;rules_go filters these sources anyway.&#xA;&#xA;**Squash cgo libraries (fix only)**: Gazelle will remove `cgo_library` rules&#xA;named ``cgo_default_library`` and merge their attributes with a ``go_library``&#xA;rule in the same package named ``go_default_library``. If no such ``go_library``&#xA;rule exists, a new one will be created. Other ``cgo_library`` rules will not be&#xA;removed.&#xA;&#xA;**Squash external tests (fix only)**: Gazelle will squash ``go_test`` rules&#xA;named ``go_default_xtest`` into ``go_default_test``. Earlier versions of&#xA;rules_go required internal and external tests to be built separately, but&#xA;this is no longer needed.&#xA;&#xA;**Remove legacy protos (fix only)**: Gazelle will remove usage of&#xA;``go_proto_library`` rules loaded from&#xA;``@io_bazel_rules_go//proto:go_proto_library.bzl`` and ``filegroup`` rules named&#xA;``go_default_library_protos``. Newly generated proto rules will take their&#xA;place. Since ``filegroup`` isn&#39;t needed anymore and ``go_proto_library`` has&#xA;different attributes and was always written by hand, Gazelle will not attempt to&#xA;merge anything from these rules with the newly generated rules.&#xA;&#xA;This transformation is only applied in the default proto mode. Since Gazelle&#xA;will run in legacy proto mode if ``go_proto_library.bzl`` is loaded, this&#xA;transformation is not usually applied. You can set the proto mode explicitly&#xA;using the directive ``# gazelle:proto default``.&#xA;&#xA;**Update loads of gazelle rule (fix and update)**: Gazelle will remove loads&#xA;of ``gazelle`` from ``@io_bazel_rules_go//go:def.bzl``. It will automatically&#xA;add a load from ``@bazel_gazelle//:def.bzl`` if ``gazelle`` is not loaded&#xA;from another location.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>