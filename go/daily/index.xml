<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-27T01:26:53Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>QuilibriumNetwork/ceremonyclient</title>
    <updated>2024-02-27T01:26:53Z</updated>
    <id>tag:github.com,2024-02-27:/QuilibriumNetwork/ceremonyclient</id>
    <link href="https://github.com/QuilibriumNetwork/ceremonyclient" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of Quilibrium git repo: ceremonyclient&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Quilibrium - Dawn&lt;/h1&gt; &#xA;&lt;p&gt;Quilibrium is a decentralized alternative to platform as a service providers. This release, mirrored to GitHub, is the Dawn release, which contains the initial application, the MPC Powers-of-Tau Ceremony. Documentation for the underlying technology can be found at &lt;a href=&#34;https://www.quilibrium.com/&#34;&gt;https://www.quilibrium.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;All commands are to be run in the &lt;code&gt;node/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If you have a voucher from the offline ceremony, first run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GOEXPERIMENT=arenas go run ./... -import-priv-key `cat /path/to/voucher.hex`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not, or have already run the above, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GOEXPERIMENT=arenas go run ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Peer ID&lt;/h2&gt; &#xA;&lt;p&gt;In order to find the peer id of a running node, execute the following command from the &lt;code&gt;node/&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GOEXPERIMENT=arenas go run ./... -peer-id&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The peer id will be printed to stdout.&lt;/p&gt; &#xA;&lt;h2&gt;EXPERIMENTAL ‚Äì gRPC/REST Support&lt;/h2&gt; &#xA;&lt;p&gt;If you want to enable gRPC/REST, add the following entries to your config.yml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;listenGrpcMultiaddr: &amp;lt;multiaddr&amp;gt; &#xA;listenRESTMultiaddr: &amp;lt;multiaddr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note: this interface, while read-only, is unauthenticated and not rate- limited. It is recommended that you only enable if you are properly controlling access via firewall or only query via localhost.&lt;/p&gt; &#xA;&lt;h2&gt;Token Balance&lt;/h2&gt; &#xA;&lt;p&gt;In order to query the token balance of a running node, execute the following command from the &lt;code&gt;node/&lt;/code&gt; folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GOEXPERIMENT=arenas go run ./... -balance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The confirmed token balance will be printed to stdout in QUILs.&lt;/p&gt; &#xA;&lt;p&gt;Note that this feature requires that &lt;a href=&#34;https://raw.githubusercontent.com/QuilibriumNetwork/ceremonyclient/main/#experimental--grpcrest-support&#34;&gt;gRPC support&lt;/a&gt; is enabled.&lt;/p&gt; &#xA;&lt;h2&gt;Stats Collection&lt;/h2&gt; &#xA;&lt;p&gt;In order to opt-in to stats collection about the health of the network, edit your &lt;code&gt;config.yml&lt;/code&gt; in the &lt;code&gt;node/.config&lt;/code&gt; directory to have a new section under &lt;code&gt;engine&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;&amp;lt;earlier parts of config&amp;gt;&#xA;engine:&#xA;  statsMultiaddr: &#34;/dns/stats.quilibrium.com/tcp/443&#34;&#xA;  &amp;lt;rest of config continues below&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The ceremony application provides a secure reference string (SRS) from which KZG proofs can be constructed for the network. This yields applicability for a number of proof systems, in particular for the release after Dawn, the ability to provide proofs of execution, and proofs of data availability for the network.&lt;/p&gt; &#xA;&lt;h3&gt;Rewards&lt;/h3&gt; &#xA;&lt;p&gt;For participating in a round of the ceremony, nodes will be allocated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;reward = 161 * log_2(participant_count) QUIL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Basic Flow&lt;/h3&gt; &#xA;&lt;p&gt;Rounds of the ceremony follow the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OPEN: Nodes can join in for the round, deferring preference to nodes that could not join in on the prior round&lt;/li&gt; &#xA; &lt;li&gt;IN PROGRESS: The MPC ceremony round is in progress, nodes are engaging in a logarithmic collection of Multiplication-to-Add Oblivious Transfer circuits, each sub round producing a new collection of values, until the sub rounds have completed, producing a collection of public G1 and G2 BLS48-581 points for each peer.&lt;/li&gt; &#xA; &lt;li&gt;FINALIZING: The collection of points are broadcasted, and added together, producing a singular ceremony transcript contribution.&lt;/li&gt; &#xA; &lt;li&gt;VALIDATING: The updated ceremony transcript is validated against the predecessor, and is confirmed to be the new state, issuing rewards to the participant set. The next round can begin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pull Requests&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome ‚Äì a new network is rife with opportunities. We are in the process of updating our JIRA board so that it can be made public. The repository has basic coding guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;80 character line limit, with the exception where gofmt or the syntax is impossible to achieve otherwise&lt;/li&gt; &#xA; &lt;li&gt;Error wrapping matching function names&lt;/li&gt; &#xA; &lt;li&gt;Interface composition and dependency injection with Wire&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Minimum System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;For the Dawn phase, a server must have a minimum of 16GB of RAM, preferably 32 GB, 250GB of storage, preferably via SSD, and 50MBps symmetric bandwidth. For Intel/AMD, the baseline processor is a Skylake processor @ 3.4GHz with 12 dedicated cores. For ARM, the M1 line of Apple is a good reference.&lt;/p&gt; &#xA;&lt;p&gt;With Dusk, these minimum requirements will reduce significantly.&lt;/p&gt; &#xA;&lt;h2&gt;License + Interpretation&lt;/h2&gt; &#xA;&lt;p&gt;Significant portions of Quilibrium&#39;s codebase depends on GPL-licensed code, mandating a minimum license of GPL, however Quilibrium is licensed as AGPL to accomodate the scenario in which a cloud provider may wish to coopt the network software. The AGPL allows such providers to do so, provided they are willing to contribute back the management code that interacts with the protocol and node software. To provide clarity, our interpretation is with respect to node provisioning and management tooling for deploying alternative networks, and not applications which are deployed to the network, mainnet status monitors, or container deployments of mainnet nodes from the public codebase.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shraddhaag/1brc</title>
    <updated>2024-02-27T01:26:53Z</updated>
    <id>tag:github.com,2024-02-27:/shraddhaag/1brc</id>
    <link href="https://github.com/shraddhaag/1brc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Solution to One Billion Rows Challenge in Golang.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;1BRC&lt;/h1&gt; &#xA;&lt;p&gt;1Ô∏è‚É£üêùüèéÔ∏è &lt;a href=&#34;https://github.com/gunnarmorling/1brc&#34;&gt;The One Billion Row Challenge&lt;/a&gt; -- A fun exploration of how quickly 1B rows from a text file can be aggregated. The challenge was primarily foces on Java but I decided to solve it in Golang!&lt;/p&gt; &#xA;&lt;p&gt;I wrote a detailed blog about my implementation approach, you can check it out &lt;a href=&#34;https://www.bytesizego.com/blog/one-billion-row-challenge-go&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Record of iterations&lt;/h2&gt; &#xA;&lt;p&gt;Final implementation approach looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shraddhaag/1brc/main/excalidraw/final-iteration.png&#34; alt=&#34;final iteration visualised&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is a more detailed record of each individual iteration:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Attempt Number&lt;/th&gt; &#xA;   &lt;th&gt;Approach&lt;/th&gt; &#xA;   &lt;th&gt;Execution Time&lt;/th&gt; &#xA;   &lt;th&gt;Diff&lt;/th&gt; &#xA;   &lt;th&gt;Commit&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Naive Implementation: Read temperatures into a map of cities. Iterate serially over each key (city) in map to find min, max and average temperatures.&lt;/td&gt; &#xA;   &lt;td&gt;6:13.15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Evaluate each city in map concurrently using goroutines.&lt;/td&gt; &#xA;   &lt;td&gt;4:32.80&lt;/td&gt; &#xA;   &lt;td&gt;-100.35&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/8bd5f437e8cc231e3ee18348b83f4dc694137546&#34;&gt;8bd5f43&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;Remove sorting float64 slices. Calculate min, max and average by iterating.&lt;/td&gt; &#xA;   &lt;td&gt;4:25.59&lt;/td&gt; &#xA;   &lt;td&gt;-7.21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/830e5dfacff9fb7a41d12027e21399736bc34701&#34;&gt;830e5df&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Decouple reading and processing of file content. A buffered goroutine is used to communicate between the two processes.&lt;/td&gt; &#xA;   &lt;td&gt;5:22.83&lt;/td&gt; &#xA;   &lt;td&gt;+57.24&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/2babf7dda72d92c72722b220b8b663e747075bd7&#34;&gt;2babf7d&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Instead of sending each line to the channel, now sending 100 lines chunked together. Also, to minimise garbage collection, not freeing up memory when resetting a slice.&lt;/td&gt; &#xA;   &lt;td&gt;3:41.76&lt;/td&gt; &#xA;   &lt;td&gt;-161.07&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/b7b1781f58fd258a06940bd6c05eb404c8a14af6&#34;&gt;b7b1781&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;Read file in chunks of 100 MB instead of reading line by line.&lt;/td&gt; &#xA;   &lt;td&gt;3:32.62&lt;/td&gt; &#xA;   &lt;td&gt;-9.14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/c26fea40019552a7e4fc1c864236f433b1b686f0&#34;&gt;c26fea4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;Convert temperature from &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;int64&lt;/code&gt;, process in &lt;code&gt;int64&lt;/code&gt; and convert to &lt;code&gt;float64&lt;/code&gt; at the end.&lt;/td&gt; &#xA;   &lt;td&gt;2:51.50&lt;/td&gt; &#xA;   &lt;td&gt;-41.14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/7812da4d0be07dd4686d5f9b9df1e93b08cd0dd1&#34;&gt;7812da4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;In the city &amp;lt;&amp;gt; temperatures map, replaced the value for each key (city) to preprocessed min, max, count and sum of all temperatures instead of storing all recorded temperatures for the city.&lt;/td&gt; &#xA;   &lt;td&gt;1:39.81&lt;/td&gt; &#xA;   &lt;td&gt;-71.79&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/e5213a836b17bec0a858474a11f07c902e724bba&#34;&gt;e5213a8&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;Use producer consumer pattern to read file in chunks and process the chunks in parallel.&lt;/td&gt; &#xA;   &lt;td&gt;1:43.82&lt;/td&gt; &#xA;   &lt;td&gt;+14.01&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/067f2a44c0d6b3bb7cc073639364f733bce09e3e&#34;&gt;067f2a4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;Reduce memory allocation by processing each read chunk into a map. Result channel now can collate the smaller processed chunk maps.&lt;/td&gt; &#xA;   &lt;td&gt;0:28.544&lt;/td&gt; &#xA;   &lt;td&gt;-75.286&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/d4153ac7a841170a5ceee47d930e97738b5a19f6&#34;&gt;d4153ac&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Avoid string concatenation overhead by not reading the decimal point when processing city temperature.&lt;/td&gt; &#xA;   &lt;td&gt;0:24.571&lt;/td&gt; &#xA;   &lt;td&gt;-3.973&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/90f2fe121f454f3f1b5cdaeaaebe639bb86d4578&#34;&gt;90f2fe1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;Convert byte slice to string directly instead of using a &lt;code&gt;strings.Builder&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;0:18.910&lt;/td&gt; &#xA;   &lt;td&gt;-5.761&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/88bb6da8b85424d46a8c836f3c35a49466df1ea4&#34;&gt;88bb6da&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;Replace &lt;code&gt;strconv.ParseInt&lt;/code&gt; with a custom &lt;code&gt;string&lt;/code&gt; to &lt;code&gt;int&lt;/code&gt; parser.&lt;/td&gt; &#xA;   &lt;td&gt;0:14.008&lt;/td&gt; &#xA;   &lt;td&gt;-4.902&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shraddhaag/1brc/commit/17d575fd0f143aed18d285713d030a5b52b478df&#34;&gt;17d575f&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;Reduce map access calls when constructing final result string.&lt;/td&gt; &#xA;   &lt;td&gt;0:12.017&lt;/td&gt; &#xA;   &lt;td&gt;-1.9991&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>anacrolix/torrent</title>
    <updated>2024-02-27T01:26:53Z</updated>
    <id>tag:github.com,2024-02-27:/anacrolix/torrent</id>
    <link href="https://github.com/anacrolix/torrent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full-featured BitTorrent client package and utilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;torrent&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/anacrolix/torrent&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/anacrolix/torrent&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository implements BitTorrent-related packages and command-line utilities in Go. The emphasis is on use as a library from other projects. It&#39;s been used 24/7 in production by downstream services since late 2014. The implementation was specifically created to explore Go&#39;s concurrency capabilities, and to include the ability to stream data directly from the BitTorrent network. To this end it &lt;a href=&#34;https://godoc.org/github.com/anacrolix/torrent#Reader&#34;&gt;supports seeking, readaheads and other features&lt;/a&gt; exposing torrents and their files with the various Go idiomatic &lt;code&gt;io&lt;/code&gt; package interfaces. This is also demonstrated through &lt;a href=&#34;https://raw.githubusercontent.com/anacrolix/torrent/master/#torrentfs&#34;&gt;torrentfs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There is &lt;a href=&#34;https://godoc.org/github.com/anacrolix/torrent&#34;&gt;support for protocol encryption, DHT, PEX, uTP, and various extensions&lt;/a&gt;. There are &lt;a href=&#34;https://godoc.org/github.com/anacrolix/torrent/storage&#34;&gt;several data storage backends provided&lt;/a&gt;: blob, file, bolt, mmap, and sqlite, to name a few. You can &lt;a href=&#34;https://godoc.org/github.com/anacrolix/torrent/storage#ClientImpl&#34;&gt;write your own&lt;/a&gt; to store data for example on S3, or in a database.&lt;/p&gt; &#xA;&lt;p&gt;Some noteworthy package dependencies that can be used for other purposes include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anacrolix/go-libutp&#34;&gt;go-libutp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anacrolix/dht&#34;&gt;dht&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/anacrolix/torrent/bencode&#34;&gt;bencode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/anacrolix/torrent/tracker&#34;&gt;tracker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the library package with &lt;code&gt;go get github.com/anacrolix/torrent&lt;/code&gt;, or the provided cmds with &lt;code&gt;go install github.com/anacrolix/torrent/cmd/...@latest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Library examples&lt;/h2&gt; &#xA;&lt;p&gt;There are some small &lt;a href=&#34;https://godoc.org/github.com/anacrolix/torrent#pkg-examples&#34;&gt;examples&lt;/a&gt; in the package documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Mentions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anacrolix&#34;&gt;@anacrolix&lt;/a&gt; is interviewed about this repo in &lt;a href=&#34;https://console.substack.com/p/console-32&#34;&gt;Console 32&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Downstream projects&lt;/h3&gt; &#xA;&lt;p&gt;There are several web-frontends, sites, Android clients, storage backends and supporting services among the known public projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coveapp.info&#34;&gt;cove&lt;/a&gt;: Personal torrent browser with streaming, DHT search, video transcoding and casting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anacrolix/confluence&#34;&gt;confluence&lt;/a&gt;: torrent client as a HTTP service &#xA;  &lt;!-- Well of course I know him... He&#39;s me --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GopeedLab/gopeed&#34;&gt;Gopeed&lt;/a&gt;: Gopeed (full name Go Speed), a high-speed downloader developed by Golang + Flutter, supports (HTTP, BitTorrent, Magnet) protocol, and supports all platforms. &#xA;  &lt;!-- 7.7k stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ledgerwatch/erigon&#34;&gt;Erigon&lt;/a&gt;: an implementation of Ethereum (execution layer with embeddable consensus layer), on the efficiency frontier. &#xA;  &lt;!-- 2.7k stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/varbhat/exatorrent&#34;&gt;exatorrent&lt;/a&gt;: Elegant self-hostable torrent client &#xA;  &lt;!-- 1.5k stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bitmagnet-io/bitmagnet&#34;&gt;bitmagnet&lt;/a&gt;: A self-hosted BitTorrent indexer, DHT crawler, content classifier and torrent search engine with web UI, GraphQL API and Servarr stack integration. &#xA;  &lt;!-- 1.1k stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YouROK/TorrServer&#34;&gt;TorrServer&lt;/a&gt;: Torrent streaming server over http &#xA;  &lt;!-- 984 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/distribyted/distribyted&#34;&gt;distribyted&lt;/a&gt;: Distribyted is an alternative torrent client. It can expose torrent files as a standard FUSE, webDAV or HTTP endpoint and download them on demand, allowing random reads using a fixed amount of disk space. &#xA;  &lt;!-- 982 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/boypt/simple-torrent&#34;&gt;Simple Torrent&lt;/a&gt;: self-hosted HTTP remote torrent client &#xA;  &lt;!-- 876 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/autobrr/autobrr&#34;&gt;autobrr&lt;/a&gt;: autobrr redefines download automation for torrents and Usenet, drawing inspiration from tools like trackarr, autodl-irssi, and flexget. &#xA;  &lt;!-- 855 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smmr-software/mabel&#34;&gt;mabel&lt;/a&gt;: Fancy BitTorrent client for the terminal &#xA;  &lt;!-- 412 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webtor.io/&#34;&gt;webtor.io&lt;/a&gt;: free cloud BitTorrent-client &#xA;  &lt;!-- not exclusively anacrolix/torrent maybe? 40-200 stars? --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/axet/android-torrent-client&#34;&gt;Android Torrent Client&lt;/a&gt;: Android torrent client &#xA;  &lt;!-- 29 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/axet/libtorrent&#34;&gt;libtorrent&lt;/a&gt;: gomobile wrapper &#xA;  &lt;!-- 15 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WinPooh32/peerstohttp&#34;&gt;Go-PeersToHTTP&lt;/a&gt;: Simple torrent proxy to http stream controlled over REST-like api &#xA;  &lt;!-- 28 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CortexFoundation/torrentfs&#34;&gt;CortexFoundation/torrentfs&lt;/a&gt;: Independent HTTP service for file seeding and P2P file system of cortex full node &#xA;  &lt;!-- 21 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deranjer/goTorrent&#34;&gt;goTorrent&lt;/a&gt;: torrenting server with a React web frontend &#xA;  &lt;!-- 156 stars, inactive since 2020 --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Sioro-Neoku/go-peerflix&#34;&gt;Go Peerflix&lt;/a&gt;: Start watching the movie while your torrent is still downloading! &#xA;  &lt;!-- 449 stars, inactive since 2019 --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pojntfx/htorrent&#34;&gt;hTorrent&lt;/a&gt;: HTTP to BitTorrent gateway with seeking support. &#xA;  &lt;!-- 102 stars --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BruceWangNo1/remote-torrent&#34;&gt;Remote-Torrent&lt;/a&gt;: Download Remotely and Retrieve Files Over HTTP &#xA;  &lt;!-- 57 stars, inactive since 2019 --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arranlomas/Trickl&#34;&gt;Trickl&lt;/a&gt;: torrent client for android &#xA;  &lt;!-- 48 stars, inactive since 2018 --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anatasluo/ant&#34;&gt;ANT-Downloader&lt;/a&gt;: ANT Downloader is a BitTorrent Client developed by golang, angular 7, and electron &#xA;  &lt;!-- archived --&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://elementum.surge.sh/&#34;&gt;Elementum&lt;/a&gt; (up to version 0.0.71)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;Communication about the project is primarily through &lt;a href=&#34;https://github.com/anacrolix/torrent/discussions&#34;&gt;Discussions&lt;/a&gt; and the &lt;a href=&#34;https://github.com/anacrolix/torrent/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command packages&lt;/h2&gt; &#xA;&lt;p&gt;Here I&#39;ll describe what some of the packages in &lt;code&gt;./cmd&lt;/code&gt; do. See &lt;a href=&#34;https://raw.githubusercontent.com/anacrolix/torrent/master/#installation&#34;&gt;installation&lt;/a&gt; to make them available.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;torrent&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;torrent download&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Downloads torrents from the command-line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ torrent download &#39;magnet:?xt=urn:btih:KRWPCX3SJUM4IMM4YF5RPHL6ANPYTQPU&#39;&#xA;... lots of jibber jabber ...&#xA;downloading &#34;ubuntu-14.04.2-desktop-amd64.iso&#34;: 1.0 GB/1.0 GB, 1989/1992 pieces completed (1 partial)&#xA;2015/04/01 02:08:20 main.go:137: downloaded ALL the torrents&#xA;$ md5sum ubuntu-14.04.2-desktop-amd64.iso&#xA;1b305d585b1918f297164add46784116  ubuntu-14.04.2-desktop-amd64.iso&#xA;$ echo such amaze&#xA;wow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;torrent metainfo magnet&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Creates a magnet link from a torrent file. Note the extracted trackers, display name, and info hash.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ torrent metainfo testdata/debian-10.8.0-amd64-netinst.iso.torrent magnet&#xA;magnet:?xt=urn:btih:4090c3c2a394a49974dfbbf2ce7ad0db3cdeddd7&amp;amp;dn=debian-10.8.0-amd64-netinst.iso&amp;amp;tr=http%3A%2F%2Fbttracker.debian.org%3A6969%2Fannounce&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;torrent metainfo --help&lt;/code&gt; for other metainfo related commands.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;torrentfs&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;torrentfs mounts a FUSE filesystem at &lt;code&gt;-mountDir&lt;/code&gt;. The contents are the torrents described by the torrent files and magnet links at &lt;code&gt;-metainfoDir&lt;/code&gt;. Data for read requests is fetched only as required from the torrent network, and stored at &lt;code&gt;-downloadDir&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir mnt torrents&#xA;$ torrentfs -mountDir=mnt -metainfoDir=torrents &amp;amp;&#xA;$ cd torrents&#xA;$ wget http://releases.ubuntu.com/14.04.2/ubuntu-14.04.2-desktop-amd64.iso.torrent&#xA;$ cd ..&#xA;$ ls mnt&#xA;ubuntu-14.04.2-desktop-amd64.iso&#xA;$ pv mnt/ubuntu-14.04.2-desktop-amd64.iso | md5sum&#xA;996MB 0:04:40 [3.55MB/s] [========================================&amp;gt;] 100%&#xA;1b305d585b1918f297164add46784116  -&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>