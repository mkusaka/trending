<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-22T01:41:23Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>livekit/livekit</title>
    <updated>2022-06-22T01:41:23Z</updated>
    <id>tag:github.com,2022-06-22:/livekit/livekit</id>
    <link href="https://github.com/livekit/livekit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scalable, high-performance WebRTC SFU. SDKs in JavaScript, React, React Native, Flutter, Swift, Kotlin, Unity/C#, Go, Ruby and Node.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LiveKit - Open source, high performance WebRTC infrastructure&lt;/h1&gt; &#xA;&lt;p&gt;LiveKit is an open source project that provides scalable, multi-user conferencing over WebRTC. It&#39;s designed to give you everything you need to build real time video/audio/data capabilities in your applications.&lt;/p&gt; &#xA;&lt;p&gt;LiveKit is written in Go, using the awesome &lt;a href=&#34;https://github.com/pion/webrtc&#34;&gt;Pion WebRTC&lt;/a&gt; implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scalable, distributed WebRTC SFU (Selective Forwarding Unit)&lt;/li&gt; &#xA; &lt;li&gt;Modern, full-featured &lt;a href=&#34;https://docs.livekit.io/references/client-sdks/&#34;&gt;client SDKs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built for production - JWT authentication and &lt;a href=&#34;https://docs.livekit.io/guides/server-api&#34;&gt;server APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Robust networking &amp;amp; connectivity. UDP/TCP/TURN&lt;/li&gt; &#xA; &lt;li&gt;Easy to deploy - single binary, docker &amp;amp; kubernetes&lt;/li&gt; &#xA; &lt;li&gt;Advanced features - speaker detection, simulcast, selective subscription, moderation APIs, and webhooks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation &amp;amp; Guides&lt;/h2&gt; &#xA;&lt;p&gt;Docs &amp;amp; Guides at: &lt;a href=&#34;https://docs.livekit.io&#34;&gt;https://docs.livekit.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Try it live&lt;/h2&gt; &#xA;&lt;p&gt;Head to &lt;a href=&#34;https://livekit.io/playground&#34;&gt;our playground&lt;/a&gt; and give it a spin. Build a Zoom-like conferencing app in under 100 lines of code!&lt;/p&gt; &#xA;&lt;h2&gt;SDKs &amp;amp; Tools&lt;/h2&gt; &#xA;&lt;p&gt;Client SDKs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/client-sdk-js&#34;&gt;Javascript&lt;/a&gt; (&lt;a href=&#34;https://docs.livekit.io/client-sdk-js/&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/livekit-react&#34;&gt;React&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/client-sdk-swift&#34;&gt;iOS &amp;amp; MacOS - Swift&lt;/a&gt; (&lt;a href=&#34;https://docs.livekit.io/client-sdk-swift/&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/client-sdk-android&#34;&gt;Android - Kotlin&lt;/a&gt; (&lt;a href=&#34;https://docs.livekit.io/client-sdk-android/&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/client-sdk-flutter&#34;&gt;Flutter&lt;/a&gt; (&lt;a href=&#34;https://docs.livekit.io/client-sdk-flutter/&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/client-sdk-unity-web&#34;&gt;Unity (WebGL)&lt;/a&gt; (&lt;a href=&#34;https://livekit.github.io/client-sdk-unity-web/&#34;&gt;docs&lt;/a&gt; &lt;a href=&#34;https://unity.livekit.io&#34;&gt;demo&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/client-sdk-react-native&#34;&gt;React Native&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Server SDKs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-js&#34;&gt;Javascript&lt;/a&gt; (&lt;a href=&#34;https://docs.livekit.io/server-sdk-js/&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-go&#34;&gt;Go&lt;/a&gt; (&lt;a href=&#34;https://pkg.go.dev/github.com/livekit/server-sdk-go&#34;&gt;docs&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/server-sdk-ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tradablebits/livekit-server-sdk-python&#34;&gt;Python (community)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/egress&#34;&gt;Egress&lt;/a&gt;: export and record your rooms&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/livekit-cli&#34;&gt;livekit-cli&lt;/a&gt;: command line admin &amp;amp; tools&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/livekit-cli#livekit-load-tester&#34;&gt;livekit-load-tester&lt;/a&gt;: load testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/livekit/livekit-server&#34;&gt;Docker image&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/livekit/livekit-helm&#34;&gt;Helm charts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Generate config file and keys&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -v$PWD:/output livekit/generate --local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command generates a &lt;code&gt;livekit.yaml&lt;/code&gt; you can use to start LiveKit. It&#39;ll contain an API key/secret pair you can use with your LiveKit install.&lt;/p&gt; &#xA;&lt;h3&gt;Starting with docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -p 7880:7880 \&#xA;    -p 7881:7881 \&#xA;    -p 7882:7882/udp \&#xA;    -v $PWD/livekit.yaml:/livekit.yaml \&#xA;    livekit/livekit-server \&#xA;    --config /livekit.yaml \&#xA;    --node-ip &amp;lt;machine-ip&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running with docker, &lt;code&gt;--node-ip&lt;/code&gt; needs to be set to your machine&#39;s IP address. If the service will be exposed to the public Internet, this should the machine&#39;s public IP.&lt;/p&gt; &#xA;&lt;h3&gt;Test with example app&lt;/h3&gt; &#xA;&lt;p&gt;Head over to the &lt;a href=&#34;https://example.livekit.io&#34;&gt;example app&lt;/a&gt; and enter the generated token to connect to your LiveKit server. This app is built with our &lt;a href=&#34;https://github.com/livekit/livekit-react&#34;&gt;React SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once connected, your video and audio are now published to your new LiveKit instance!&lt;/p&gt; &#xA;&lt;h3&gt;Generating access tokens (JWT)&lt;/h3&gt; &#xA;&lt;p&gt;To add more users to a room, you&#39;ll have to create a token for each participant. &lt;a href=&#34;https://docs.livekit.io/guides/access-tokens/&#34;&gt;Learn more about access tokens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;livekit-server&lt;/code&gt; provides a convenient sub-command to create a development token. This token has an expiration of a month, which is useful for development and testing, but not appropriate for production use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -e LIVEKIT_KEYS=&#34;&amp;lt;api-key&amp;gt;: &amp;lt;api-secret&amp;gt;&#34; \&#xA;    livekit/livekit-server create-join-token \&#xA;    --room &#34;&amp;lt;room-name&amp;gt;&#34; \&#xA;    --identity &#34;&amp;lt;participant-identity&amp;gt;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploying to server&lt;/h2&gt; &#xA;&lt;p&gt;Deployment Docs: &lt;a href=&#34;https://docs.livekit.io/deploy/&#34;&gt;https://docs.livekit.io/deploy/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Single node server&lt;/h3&gt; &#xA;&lt;p&gt;Use our deploy config generator to set up a single node deployment with automatic TLS termination and built-in TURN.&lt;/p&gt; &#xA;&lt;p&gt;It includes a cloud-init/setup script that&#39;s supported by most cloud environments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm -it -v$PWD:/output livekit/generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;We publish a &lt;a href=&#34;https://github.com/livekit/livekit-helm&#34;&gt;helm chart&lt;/a&gt; that helps you to set up a cluster with high availability. For detailed instructions, see &lt;a href=&#34;https://docs.livekit.io/deploy/kubernetes&#34;&gt;Kubernetes guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing your deployment&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://livekit.io/connection-test&#34;&gt;connection tester&lt;/a&gt; to ensure your installation is set up properly for user traffic.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Pre-requisites:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.15+ is installed&lt;/li&gt; &#xA; &lt;li&gt;GOPATH/bin is in your PATH&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Then run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/livekit/livekit&#xA;cd livekit&#xA;./bootstrap.sh&#xA;mage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome your contributions to make LiveKit better! Please join us &lt;a href=&#34;http://livekit.io/join-slack&#34;&gt;on Slack&lt;/a&gt; to discuss your ideas and/or submit PRs.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;LiveKit server is licensed under Apache License v2.0.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alajmo/sake</title>
    <updated>2022-06-22T01:41:23Z</updated>
    <id>tag:github.com,2022-06-22:/alajmo/sake</id>
    <link href="https://github.com/alajmo/sake" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤖 sake is a task runner for local and remote hosts&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;&lt;code&gt;sake&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/alajmo/sake/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release-pre/alajmo/sake.svg?sanitize=true&#34; alt=&#34;version&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/alajmo/sake/actions&#34;&gt; &lt;img src=&#34;https://github.com/alajmo/sake/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://img.shields.io/badge/license-MIT-green&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-green&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://goreportcard.com/report/github.com/alajmo/sake&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/alajmo/sake&#34; alt=&#34;Go Report Card&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://pkg.go.dev/github.com/alajmo/sake&#34;&gt; &lt;img src=&#34;https://pkg.go.dev/badge/github.com/alajmo/sake.svg?sanitize=true&#34; alt=&#34;reference&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;code&gt;sake&lt;/code&gt; is a command runner for local and remote hosts. You define servers and tasks in a &lt;code&gt;sake.yaml&lt;/code&gt; config file and then run the tasks on the servers.&lt;/p&gt; &#xA;&lt;p&gt;This readme is also accessible on &lt;a href=&#34;https://sakecli.com/&#34;&gt;sakecli.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;sake&lt;/code&gt; has tons of features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;auto-completion of tasks, servers and tags&lt;/li&gt; &#xA; &lt;li&gt;SSH into servers or docker containers &lt;code&gt;sake ssh &amp;lt;server&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;list servers/tasks via &lt;code&gt;sake list servers|tasks&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;present task output in a compact table format &lt;code&gt;sake run &amp;lt;task&amp;gt; --output table&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;open task/server in your preferred editor &lt;code&gt;sake edit task &amp;lt;task&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;import other &lt;code&gt;sake.yaml&lt;/code&gt; configs&lt;/li&gt; &#xA; &lt;li&gt;and &lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/recipes.md&#34;&gt;many more!&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alajmo/sake/main/res/output.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Interested in managing your git repositiories in a similar way? Check out &lt;a href=&#34;https://github.com/alajmo/mani&#34;&gt;mani&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/#building-from-source&#34;&gt;Building From Source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/#create-a-new-sake-config&#34;&gt;Create a New Sake Config&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/#run-some-commands&#34;&gt;Run Some Commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;sake&lt;/code&gt; is available on Linux and Mac.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Binaries are available on the &lt;a href=&#34;https://github.com/alajmo/sake/releases&#34;&gt;release&lt;/a&gt; page&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;via cURL&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sfL https://raw.githubusercontent.com/alajmo/sake/main/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;via Homebrew&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew tap alajmo/sake&#xA;brew install sake&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Via GO install&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/alajmo/sake@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Auto-completion is available via &lt;code&gt;sake completion bash|zsh|fish&lt;/code&gt; and man page via &lt;code&gt;sake gen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building From Source&lt;/h3&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;go 1.18 or above&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo&lt;/li&gt; &#xA; &lt;li&gt;Build and run the executable &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make build &amp;amp;&amp;amp; ./dist/sake&#xA;&#xA;# To build for all target platforms run (requires goreleaser CLI)&#xA;make build-all&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Create a New Sake Config&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sake init&#xA;&#xA;Initialized sake in /tmp/sake&#xA;- Created sake.yaml&#xA;&#xA;Following servers were added to sake.yaml&#xA;&#xA; Server    | Host&#xA;-----------+---------&#xA; localhost | 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run Some Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List all servers&#xA;$ sake list servers&#xA;&#xA; Server    | Host&#xA;-----------+---------&#xA; localhost | 0.0.0.0&#xA;&#xA;# List all tasks&#xA;$ sake list tasks&#xA;&#xA; Task | Description&#xA;------+-------------&#xA; ping | Pong&#xA;&#xA;# Run Task&#xA;$ sake run ping --all&#xA;&#xA;TASK ping: Pong ************&#xA;&#xA;0.0.0.0 | pong&#xA;&#xA;# Count number of files in each server in parallel&#xA;$ sake exec --all --output table --parallel &#39;find . -type f | wc -l&#39;&#xA;&#xA; Server    | Output&#xA;-----------+--------&#xA; localhost | 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;What&#39;s Next&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/examples.md&#34;&gt;examples page&lt;/a&gt; for more advanced examples and the &lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/recipes.md&#34;&gt;recipes page&lt;/a&gt; for a list of useful recipes.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/examples.md&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/recipes.md&#34;&gt;Recipes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/config-reference.md&#34;&gt;Config Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/command-reference.md&#34;&gt;Command Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/project-background.md&#34;&gt;Project Background&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/changelog.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/docs/contributing.md&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alajmo/sake/main/LICENSE&#34;&gt;License&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The MIT License (MIT)&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2022 Samir Alajmovic&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gookit/validate</title>
    <updated>2022-06-22T01:41:23Z</updated>
    <id>tag:github.com,2022-06-22:/gookit/validate</id>
    <link href="https://github.com/gookit/validate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚔ Go package for data validation and filtering. support Map, Struct, Form data. Go通用的数据验证与过滤库，使用简单，内置大部分常用验证、过滤器，支持自定义验证器、自定义消息、字段翻译。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Validate&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gookit/validate&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/gookit/validate&#34; alt=&#34;GitHub tag (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/gookit/validate&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/gookit/validate?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/gookit/validate&#34;&gt;&lt;img src=&#34;https://travis-ci.org/gookit/validate.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/gookit/validate?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/gookit/validate/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gookit/validate&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gookit/validate&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gookit/validate/actions&#34;&gt;&lt;img src=&#34;https://github.com/gookit/validate/workflows/Unit-Tests/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;validate&lt;/code&gt; is a generic Go data validate and filter tool library.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support quick validate &lt;code&gt;Map&lt;/code&gt;, &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;Request&lt;/code&gt;(&lt;code&gt;Form&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, &lt;code&gt;url.Values&lt;/code&gt;, &lt;code&gt;UploadedFile&lt;/code&gt;) data &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports checking each child value in a slice. eg: &lt;code&gt;v.StringRule(&#34;tags.*&#34;, &#34;required|string|minlen:1&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Validating &lt;code&gt;http.Request&lt;/code&gt; automatically collects data based on the request &lt;code&gt;Content-Type&lt;/code&gt; value&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Support filter/sanitize/convert data before validate&lt;/li&gt; &#xA; &lt;li&gt;Support add custom filter/validator func&lt;/li&gt; &#xA; &lt;li&gt;Support scene settings, verify different fields in different scenes&lt;/li&gt; &#xA; &lt;li&gt;Support custom error messages, field translates. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can use &lt;code&gt;message&lt;/code&gt;, &lt;code&gt;label&lt;/code&gt; tags in struct&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Customizable i18n aware error messages, built in &lt;code&gt;en&lt;/code&gt;, &lt;code&gt;zh-CN&lt;/code&gt;, &lt;code&gt;zh-TW&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Built-in common data type filter/converter. see &lt;a href=&#34;https://raw.githubusercontent.com/gookit/validate/master/#built-in-filters&#34;&gt;Built In Filters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Many commonly used validators have been built in(&lt;strong&gt;&amp;gt; 70&lt;/strong&gt;), see &lt;a href=&#34;https://raw.githubusercontent.com/gookit/validate/master/#built-in-validators&#34;&gt;Built In Validators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Can use &lt;code&gt;validate&lt;/code&gt; in any frameworks, such as Gin, Echo, Chi and more&lt;/li&gt; &#xA; &lt;li&gt;Supports direct use of rules to validate value. eg: &lt;code&gt;validate.Val(&#34;xyz@mail.com&#34;, &#34;required|email&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Inspired the projects &lt;a href=&#34;https://github.com/albrow/forms&#34;&gt;albrow/forms&lt;/a&gt; and &lt;a href=&#34;https://github.com/asaskevich/govalidator&#34;&gt;asaskevich/govalidator&lt;/a&gt; and &lt;a href=&#34;https://github.com/inhere/php-validate&#34;&gt;inhere/php-validate&lt;/a&gt;. Thank you very much&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/validate/master/README.zh-CN.md&#34;&gt;中文说明&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;中文说明请查看 &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/validate/master/README.zh-CN.md&#34;&gt;README.zh-CN&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Go Doc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/gopkg.in/gookit/validate.v1&#34;&gt;godoc for gopkg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/gookit/validate&#34;&gt;godoc for github&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Validate Struct&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;validate&lt;/code&gt; tag of the structure, you can quickly config a structure.&lt;/p&gt; &#xA;&lt;h3&gt;Config the struct use tags&lt;/h3&gt; &#xA;&lt;p&gt;Field translations and error messages for structs can be quickly configured using the &lt;code&gt;message&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; tags.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support configuration field mapping through structure tag, read the value of &lt;code&gt;json&lt;/code&gt; tag by default&lt;/li&gt; &#xA; &lt;li&gt;Support configuration error message via structure&#39;s &lt;code&gt;message&lt;/code&gt; tag&lt;/li&gt; &#xA; &lt;li&gt;Support configuration field translation via structure&#39;s &lt;code&gt;label&lt;/code&gt; tag&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/gookit/validate&#34;&#xA;)&#xA;&#xA;// UserForm struct&#xA;type UserForm struct {&#xA;&#x9;Name     string    `validate:&#34;required|min_len:7&#34; message:&#34;required:{field} is required&#34; label:&#34;User Name&#34;`&#xA;&#x9;Email    string    `validate:&#34;email&#34; message:&#34;email is invalid&#34; label:&#34;User Email&#34;`&#xA;&#x9;Age      int       `validate:&#34;required|int|min:1|max:99&#34; message:&#34;int:age must int|min:age min value is 1&#34;`&#xA;&#x9;CreateAt int       `validate:&#34;min:1&#34;`&#xA;&#x9;Safe     int       `validate:&#34;-&#34;`&#xA;&#x9;UpdateAt time.Time `validate:&#34;required&#34; message:&#34;update time is required&#34;`&#xA;&#x9;Code     string    `validate:&#34;customValidator&#34;`&#xA;&#x9;// ExtInfo nested struct&#xA;&#x9;ExtInfo struct{&#xA;&#x9;&#x9;Homepage string `validate:&#34;required&#34; label:&#34;Home Page&#34;`&#xA;&#x9;&#x9;CityName string&#xA;&#x9;} `validate:&#34;required&#34; label:&#34;Home Page&#34;`&#xA;}&#xA;&#xA;// CustomValidator custom validator in the source struct.&#xA;func (f UserForm) CustomValidator(val string) bool {&#xA;&#x9;return len(val) == 4&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config validate use struct methods&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;validate&lt;/code&gt; provides extended functionality:&lt;/p&gt; &#xA;&lt;p&gt;The struct can implement three interfaces methods, which is convenient to do some customization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ConfigValidation(v *Validation)&lt;/code&gt; will be called after the validator instance is created&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Messages() map[string]string&lt;/code&gt; can customize the validator error message&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Translates() map[string]string&lt;/code&gt; can customize field translation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/gookit/validate&#34;&#xA;)&#xA;&#xA;// UserForm struct&#xA;type UserForm struct {&#xA;&#x9;Name     string    `validate:&#34;required|min_len:7&#34;`&#xA;&#x9;Email    string    `validate:&#34;email&#34;`&#xA;&#x9;Age      int       `validate:&#34;required|int|min:1|max:99&#34;`&#xA;&#x9;CreateAt int       `validate:&#34;min:1&#34;`&#xA;&#x9;Safe     int       `validate:&#34;-&#34;`&#xA;&#x9;UpdateAt time.Time `validate:&#34;required&#34;`&#xA;&#x9;Code     string    `validate:&#34;customValidator&#34;`&#xA;&#x9;// ExtInfo nested struct&#xA;&#x9;ExtInfo struct{&#xA;&#x9;&#x9;Homepage string `validate:&#34;required&#34;`&#xA;&#x9;&#x9;CityName string&#xA;&#x9;} `validate:&#34;required&#34;`&#xA;}&#xA;&#xA;// CustomValidator custom validator in the source struct.&#xA;func (f UserForm) CustomValidator(val string) bool {&#xA;&#x9;return len(val) == 4&#xA;}&#xA;&#xA;// ConfigValidation config the Validation&#xA;// eg:&#xA;// - define validate scenes&#xA;func (f UserForm) ConfigValidation(v *validate.Validation) {&#xA;&#x9;v.WithScenes(validate.SValues{&#xA;&#x9;&#x9;&#34;add&#34;:    []string{&#34;ExtInfo.Homepage&#34;, &#34;Name&#34;, &#34;Code&#34;},&#xA;&#x9;&#x9;&#34;update&#34;: []string{&#34;ExtInfo.CityName&#34;, &#34;Name&#34;},&#xA;&#x9;})&#xA;}&#xA;&#xA;// Messages you can custom validator error messages. &#xA;func (f UserForm) Messages() map[string]string {&#xA;&#x9;return validate.MS{&#xA;&#x9;&#x9;&#34;required&#34;: &#34;oh! the {field} is required&#34;,&#xA;&#x9;&#x9;&#34;email&#34;: &#34;email is invalid&#34;,&#xA;&#x9;&#x9;&#34;Name.required&#34;: &#34;message for special field&#34;,&#xA;&#x9;&#x9;&#34;Age.int&#34;: &#34;age must int&#34;,&#xA;&#x9;&#x9;&#34;Age.min&#34;: &#34;age min value is 1&#34;,&#xA;&#x9;}&#xA;}&#xA;&#xA;// Translates you can custom field translates. &#xA;func (f UserForm) Translates() map[string]string {&#xA;&#x9;return validate.MS{&#xA;&#x9;&#x9;&#34;Name&#34;: &#34;User Name&#34;,&#xA;&#x9;&#x9;&#34;Email&#34;: &#34;User Email&#34;,&#xA;&#x9;&#x9;&#34;ExtInfo.Homepage&#34;: &#34;Home Page&#34;,&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create and validating&lt;/h3&gt; &#xA;&lt;p&gt;Can use &lt;code&gt;validate.Struct(ptr)&lt;/code&gt; quick create a validation instance. then call &lt;code&gt;v.Validate()&lt;/code&gt; for validating.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &#34;fmt&#34;&#xA;&#xA;  &#34;github.com/gookit/validate&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;u := &amp;amp;UserForm{&#xA;&#x9;&#x9;Name: &#34;inhere&#34;,&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;v := validate.Struct(u)&#xA;&#x9;// v := validate.New(u)&#xA;&#xA;&#x9;if v.Validate() { // validate ok&#xA;&#x9;&#x9;// do something ...&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(v.Errors) // all error messages&#xA;&#x9;&#x9;fmt.Println(v.Errors.One()) // returns a random error message text&#xA;&#x9;&#x9;fmt.Println(v.Errors.OneError()) // returns a random error&#xA;&#x9;&#x9;fmt.Println(v.Errors.Field(&#34;Name&#34;)) // returns error messages of the field &#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validate Map&lt;/h2&gt; &#xA;&lt;p&gt;You can also validate a MAP data directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#34;fmt&#34;&#xA;&#xA;&#34;github.com/gookit/validate&#34;&#xA;)&#xA;&#xA;func main()  {&#xA;&#x9;m := map[string]interface{}{&#xA;&#x9;&#x9;&#34;name&#34;:  &#34;inhere&#34;,&#xA;&#x9;&#x9;&#34;age&#34;:   100,&#xA;&#x9;&#x9;&#34;oldSt&#34;: 1,&#xA;&#x9;&#x9;&#34;newSt&#34;: 2,&#xA;&#x9;&#x9;&#34;email&#34;: &#34;some@email.com&#34;,&#xA;&#x9;&#x9;&#34;tags&#34;: []string{&#34;go&#34;, &#34;php&#34;, &#34;java&#34;},&#xA;&#x9;}&#xA;&#xA;&#x9;v := validate.Map(m)&#xA;&#x9;// v := validate.New(m)&#xA;&#x9;v.AddRule(&#34;name&#34;, &#34;required&#34;)&#xA;&#x9;v.AddRule(&#34;name&#34;, &#34;minLen&#34;, 7)&#xA;&#x9;v.AddRule(&#34;age&#34;, &#34;max&#34;, 99)&#xA;&#x9;v.AddRule(&#34;age&#34;, &#34;min&#34;, 1)&#xA;&#x9;v.AddRule(&#34;email&#34;, &#34;email&#34;)&#xA;&#x9;&#xA;&#x9;// can also&#xA;&#x9;v.StringRule(&#34;age&#34;, &#34;required|int|min:1|max:99&#34;)&#xA;&#x9;v.StringRule(&#34;name&#34;, &#34;required|minLen:7&#34;)&#xA;&#x9;v.StringRule(&#34;tags&#34;, &#34;required|slice|minlen:1&#34;)&#xA;&#x9;// feat: support check sub-item in slice&#xA;&#x9;v.StringRule(&#34;tags.*&#34;, &#34;required|string|min_len:7&#34;)&#xA;&#xA;&#x9;// v.WithScenes(map[string]string{&#xA;&#x9;//&#x9; &#34;create&#34;: []string{&#34;name&#34;, &#34;email&#34;},&#xA;&#x9;//&#x9; &#34;update&#34;: []string{&#34;name&#34;},&#xA;&#x9;// })&#xA;&#x9;&#xA;&#x9;if v.Validate() { // validate ok&#xA;&#x9;&#x9;safeData := v.SafeData()&#xA;&#x9;&#x9;// do something ...&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(v.Errors) // all error messages&#xA;&#x9;&#x9;fmt.Println(v.Errors.One()) // returns a random error message text&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validate Request&lt;/h2&gt; &#xA;&lt;p&gt;If it is an HTTP request, you can quickly validate the data and pass the verification. Then bind the secure data to the structure.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/gookit/validate&#34;&#xA;)&#xA;&#xA;// UserForm struct&#xA;type UserForm struct {&#xA;&#x9;Name     string&#xA;&#x9;Email    string&#xA;&#x9;Age      int&#xA;&#x9;CreateAt int&#xA;&#x9;Safe     int&#xA;&#x9;UpdateAt time.Time&#xA;&#x9;Code     string&#xA;}&#xA;&#xA;func main()  {&#xA;&#x9;handler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;&#x9;data, err := validate.FromRequest(r)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;v := data.Create()&#xA;&#x9;&#x9;// setting rules&#xA;&#x9;&#x9;v.FilterRule(&#34;age&#34;, &#34;int&#34;) // convert value to int&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;v.AddRule(&#34;name&#34;, &#34;required&#34;)&#xA;&#x9;&#x9;v.AddRule(&#34;name&#34;, &#34;minLen&#34;, 7)&#xA;&#x9;&#x9;v.AddRule(&#34;age&#34;, &#34;max&#34;, 99)&#xA;&#x9;&#x9;v.StringRule(&#34;code&#34;, `required|regex:\d{4,6}`)&#xA;&#xA;&#x9;&#x9;if v.Validate() { // validate ok&#xA;&#x9;&#x9;&#x9;// safeData := v.SafeData()&#xA;&#x9;&#x9;&#x9;userForm := &amp;amp;UserForm{}&#xA;&#x9;&#x9;&#x9;v.BindSafeData(userForm)&#xA;&#xA;&#x9;&#x9;&#x9;// do something ...&#xA;&#x9;&#x9;&#x9;fmt.Println(userForm.Name)&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;fmt.Println(v.Errors) // all error messages&#xA;&#x9;&#x9;&#x9;fmt.Println(v.Errors.One()) // returns a random error message text&#xA;&#x9;&#x9;}&#xA;&#x9;})&#xA;&#xA;&#x9;http.ListenAndServe(&#34;:8090&#34;, handler)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Method&lt;/h2&gt; &#xA;&lt;p&gt;Quick create &lt;code&gt;Validation&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;New(data interface{}, scene ...string) *Validation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Request(r *http.Request) *Validation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JSON(s string, scene ...string) *Validation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Struct(s interface{}, scene ...string) *Validation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Map(m map[string]interface{}, scene ...string) *Validation&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Quick create &lt;code&gt;DataFace&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FromMap(m map[string]interface{}) *MapData&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FromStruct(s interface{}) (*StructData, error)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FromJSON(s string) (*MapData, error)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FromJSONBytes(bs []byte) (*MapData, error)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FromURLValues(values url.Values) *FormData&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FromRequest(r *http.Request, maxMemoryLimit ...int64) (DataFace, error)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Create &lt;code&gt;Validation&lt;/code&gt; by &lt;code&gt;DataFace&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;d := FromMap(map[string]interface{}{&#34;key&#34;: &#34;val&#34;})&#xA;v := d.Validation()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Validate Error&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;v.Errors&lt;/code&gt; is map data, top key is field name, value is &lt;code&gt;map[string]string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// do validating&#xA;if v.Validate() {&#xA;&#x9;return nil&#xA;}&#xA;&#xA;// get errors&#xA;es := v.Errors&#xA;&#xA;// check&#xA;es.Empty() // bool&#xA;&#xA;// returns an random error, if no error returns nil&#xA;fmt.Println(v.Errors.OneError())&#xA;fmt.Println(v.Errors.ErrOrNil())&#xA;&#xA;fmt.Println(v.Errors) // all error messages&#xA;fmt.Println(v.Errors.One()) // returns a random error message text&#xA;fmt.Println(v.Errors.Field(&#34;Name&#34;)) // returns error messages of the field &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Encode to JSON&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;StopOnError=true&lt;/code&gt;(default), will only one error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;field1&#34;: {&#xA;        &#34;required&#34;: &#34;error msg0&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if &lt;code&gt;StopOnError=false&lt;/code&gt;, will get multi error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;field1&#34;: {&#xA;        &#34;minLen&#34;: &#34;error msg1&#34;,&#xA;        &#34;required&#34;: &#34;error msg0&#34;&#xA;    },&#xA;    &#34;field2&#34;: {&#xA;        &#34;min&#34;: &#34;error msg2&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Global Option&lt;/h3&gt; &#xA;&lt;p&gt;You can adjust some processing logic of the validator by changing the global option settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// GlobalOption settings for validate&#xA;type GlobalOption struct {&#xA;&#x9;// FilterTag name in the struct tags.&#xA;&#x9;//&#xA;&#x9;// default: filter&#xA;&#x9;FilterTag string&#xA;&#x9;// ValidateTag in the struct tags.&#xA;&#x9;//&#xA;&#x9;// default: validate&#xA;&#x9;ValidateTag string&#xA;&#x9;// FieldTag the output field name in the struct tags.&#xA;&#x9;// it as placeholder on error message.&#xA;&#x9;//&#xA;&#x9;// default: json&#xA;&#x9;FieldTag string&#xA;&#x9;// LabelTag the display name in the struct tags.&#xA;&#x9;// use for define field translate name on error.&#xA;&#x9;//&#xA;&#x9;// default: label&#xA;&#x9;LabelTag string&#xA;&#x9;// MessageTag define error message for the field.&#xA;&#x9;//&#xA;&#x9;// default: message&#xA;&#x9;MessageTag string&#xA;&#x9;// StopOnError If true: An error occurs, it will cease to continue to verify&#xA;&#x9;StopOnError bool&#xA;&#x9;// SkipOnEmpty Skip check on field not exist or value is empty&#xA;&#x9;SkipOnEmpty bool&#xA;&#x9;// UpdateSource Whether to update source field value, useful for struct validate&#xA;&#x9;UpdateSource bool&#xA;&#x9;// CheckDefault Whether to validate the default value set by the user&#xA;&#x9;CheckDefault bool&#xA;&#x9;// CheckZero Whether validate the default zero value. (intX,uintX: 0, string: &#34;&#34;)&#xA;&#x9;CheckZero bool&#xA;&#x9;// CheckSubOnParentMarked True: only collect sub-struct rule on current field has rule.&#xA;&#x9;CheckSubOnParentMarked bool&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// change global opts&#xA;validate.Config(func(opt *validate.GlobalOption) {&#xA;&#x9;opt.StopOnError = false&#xA;&#x9;opt.SkipOnEmpty = false&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Error Messages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register language messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/gookit/validate/locales/zhcn&#34;&#xA;&#xA;// for all Validation.&#xA;// NOTICE: must be registered before on validate.New(), it only need call at once.&#xA;zhcn.RegisterGlobal()&#xA;&#xA;// ... ...&#xA;&#xA;v := validate.New()&#xA;&#xA;// only for current Validation&#xA;zhcn.Register(v)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manual add global messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;validate.AddGlobalMessages(map[string]string{&#xA;    &#34;minLength&#34;: &#34;OO! {field} min length is %d&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add messages for current validation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;v := validate.New(map[string]interface{}{&#xA;    &#34;name&#34;: &#34;inhere&#34;,&#xA;})&#xA;v.StringRule(&#34;name&#34;, &#34;required|string|minLen:7|maxLen:15&#34;)&#xA;&#xA;v.AddMessages(map[string]string{&#xA;    &#34;minLength&#34;: &#34;OO! {field} min length is %d&#34;,&#xA;    &#34;name.minLen&#34;: &#34;OO! username min length is %d&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use struct tags: &lt;code&gt;message, label&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type UserForm struct {&#xA;    Name  string `validate:&#34;required|minLen:7&#34; label:&#34;User Name&#34;`&#xA;    Email string `validate:&#34;email&#34; message:&#34;email is invalid&#34; label:&#34;User Email&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use struct method &lt;code&gt;Messages()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Messages you can custom validator error messages. &#xA;func (f UserForm) Messages() map[string]string {&#xA;&#x9;return validate.MS{&#xA;&#x9;&#x9;&#34;required&#34;: &#34;oh! the {field} is required&#34;,&#xA;&#x9;&#x9;&#34;Name.required&#34;: &#34;message for special field&#34;,&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add Custom Validator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;validate&lt;/code&gt; supports adding custom validators, and supports adding &lt;code&gt;global validator&lt;/code&gt; and &lt;code&gt;temporary validator&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Validator&lt;/strong&gt; is globally valid and can be used everywhere&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Temporary Validator&lt;/strong&gt; added to the current validation instance, only the current validation is available&lt;/li&gt; &#xA; &lt;li&gt;Add verification method to the structure. How to use please see the structure verification example above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The validator method must return a &lt;code&gt;bool&lt;/code&gt; to indicate whether the validation was successful. The first parameter is the corresponding field value. If there are additional parameters, they will be appended automatically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Add Global Validator&lt;/h4&gt; &#xA;&lt;p&gt;You can add one or more custom validators at once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;validate.AddValidator(&#34;myCheck0&#34;, func(val interface{}) bool {&#xA;&#x9;// do validate val ...&#xA;&#x9;return true&#xA;})&#xA;validate.AddValidators(validate.M{&#xA;&#x9;&#34;myCheck1&#34;: func(val interface{}) bool {&#xA;&#x9;&#x9;// do validate val ...&#xA;&#x9;&#x9;return true&#xA;&#x9;},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add Temporary Validator&lt;/h4&gt; &#xA;&lt;p&gt;Again, you can add one or more custom validators at once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;v := validate.Struct(u)&#xA;v.AddValidator(&#34;myFunc3&#34;, func(val interface{}) bool {&#xA;&#x9;// do validate val ...&#xA;&#x9;return true&#xA;})&#xA;v.AddValidators(validate.M{&#xA;&#x9;&#34;myFunc4&#34;: func(val interface{}) bool {&#xA;&#x9;&#x9;// do validate val ...&#xA;&#x9;&#x9;return true&#xA;&#x9;},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add Custom Filter&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;validate&lt;/code&gt; can also support adding custom filters, and supports adding &lt;code&gt;global filter&lt;/code&gt; and &lt;code&gt;temporary filter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Global Filter&lt;/strong&gt; is globally valid and can be used everywhere&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Temporary Filter&lt;/strong&gt; added to the current validation instance, only the current validation is available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;TIP: for filter func, we allow functions with 1 result or 2 results where the second is an error.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Add Global Filter&lt;/h4&gt; &#xA;&lt;p&gt;You can add one or more custom validators at once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/gookit/validate&#34;&#xA;&#xA;func init() {&#xA;&#x9;validate.AddFilter(&#34;myToIntFilter0&#34;, func(val interface{}) int {&#xA;&#x9;&#x9;// do filtering val ...&#xA;&#x9;&#x9;return 1&#xA;&#x9;})&#xA;&#x9;validate.AddFilters(validate.M{&#xA;&#x9;&#x9;&#34;myToIntFilter1&#34;: func(val interface{}) (int, error) {&#xA;&#x9;&#x9;&#x9;// do filtering val ...&#xA;&#x9;&#x9;&#x9;return 1, nil&#xA;&#x9;&#x9;},&#xA;&#x9;})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Add Temporary Filter&lt;/h4&gt; &#xA;&lt;p&gt;Again, you can add one or more custom filters at once.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/gookit/validate&#34;&#xA;&#xA;func main() {&#xA;&#x9;v := validate.New(&amp;amp;someStrcut{})&#xA;&#xA;&#x9;v.AddFilter(&#34;myToIntFilter0&#34;, func(val interface{}) int {&#xA;&#x9;&#x9;// do filtering val ...&#xA;&#x9;&#x9;return 1&#xA;&#x9;})&#xA;&#x9;v.AddFilters(validate.M{&#xA;&#x9;&#x9;&#34;myToIntFilter1&#34;: func(val interface{}) (int, error) {&#xA;&#x9;&#x9;&#x9;// do filtering val ...&#xA;&#x9;&#x9;&#x9;return 1, nil&#xA;&#x9;&#x9;},&#xA;&#x9;})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use on gin framework&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;import (&#xA;    &#34;github.com/gin-gonic/gin/binding&#34;&#xA;    &#34;github.com/gookit/validate&#34;&#xA;)&#xA;&#xA;// implements the binding.StructValidator&#xA;type customValidator struct {}&#xA;&#xA;func (c *customValidator) ValidateStruct(ptr interface{}) error {&#xA;    v := validate.Struct(ptr)&#xA;    v.Validate() // do validating&#xA;    &#xA;    if v.Errors.Empty() {&#xA;&#x9;return nil&#xA;    }&#xA;&#xA;    return v.Errors&#xA;}&#xA;&#xA;func (c *customValidator) Engine() interface{} {&#xA;    return nil&#xA;}&#xA;&#xA;func main()  {&#xA;&#x9;// ...&#xA;&#xA;    // after init gin, set custom validator&#xA;    binding.Validator = &amp;amp;customValidator{}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;built-in-validators&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Built In Validators&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Camel-style validator names now have underlined aliases. &lt;code&gt;endsWith&lt;/code&gt; can also be written as &lt;code&gt;ends_with&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;validator/aliases&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;required&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is required and cannot be empty.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;required_if/requiredIf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;required_if:anotherfield,value,...&lt;/code&gt; The field under validation must be present and not empty if the &lt;code&gt;anotherField&lt;/code&gt; field is equal to any value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;requiredUnless&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;required_unless:anotherfield,value,...&lt;/code&gt; The field under validation must be present and not empty unless the &lt;code&gt;anotherField&lt;/code&gt; field is equal to any value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;requiredWith&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;required_with:foo,bar,...&lt;/code&gt; The field under validation must be present and not empty only if any of the other specified fields are present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;requiredWithAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;required_with_all:foo,bar,...&lt;/code&gt; The field under validation must be present and not empty only if all of the other specified fields are present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;requiredWithout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;required_without:foo,bar,...&lt;/code&gt; The field under validation must be present and not empty only when any of the other specified fields are not present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;requiredWithoutAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;required_without_all:foo,bar,...&lt;/code&gt; The field under validation must be present and not empty only when all of the other specified fields are not present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;-/safe&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The field values are safe and do not require validation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int/integer/isInt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is &lt;code&gt;intX&lt;/code&gt; &lt;code&gt;uintX&lt;/code&gt; type, And support size checking. eg: &lt;code&gt;&#34;int&#34;&lt;/code&gt; &lt;code&gt;&#34;int:2&#34;&lt;/code&gt; &lt;code&gt;&#34;int:2,12&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uint/isUint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is uint(&lt;code&gt;uintX&lt;/code&gt;) type, &lt;code&gt;value &amp;gt;= 0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool/isBool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is bool string(&lt;code&gt;true&lt;/code&gt;: &#34;1&#34;, &#34;on&#34;, &#34;yes&#34;, &#34;true&#34;, &lt;code&gt;false&lt;/code&gt;: &#34;0&#34;, &#34;off&#34;, &#34;no&#34;, &#34;false&#34;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string/isString&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is string type.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;float/isFloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is float(&lt;code&gt;floatX&lt;/code&gt;) type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slice/isSlice&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is slice type(&lt;code&gt;[]intX&lt;/code&gt; &lt;code&gt;[]uintX&lt;/code&gt; &lt;code&gt;[]byte&lt;/code&gt; &lt;code&gt;[]string&lt;/code&gt; ...).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;in/enum&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the value is in the given enumeration &lt;code&gt;&#34;in:a,b&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;not_in/notIn&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the value is not in the given enumeration &lt;code&gt;&#34;contains:b&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the input value contains the given value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;not_contains/notContains&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the input value not contains the given value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string_contains/stringContains&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the input string value is contains the given sub-string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;starts_with/startsWith&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the input string value is starts with the given sub-string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ends_with/endsWith&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the input string value is ends with the given sub-string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;range/between&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the value is a number and is within the given range&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max/lte&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is less than or equal to the given value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;min/gte&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is greater than or equal to the given value(for &lt;code&gt;intX&lt;/code&gt; &lt;code&gt;uintX&lt;/code&gt; &lt;code&gt;floatX&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;eq/equal/isEqual&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the input value is equal to the given value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ne/notEq/notEqual&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the input value is not equal to the given value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lt/lessThan&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is less than the given value(use for &lt;code&gt;intX&lt;/code&gt; &lt;code&gt;uintX&lt;/code&gt; &lt;code&gt;floatX&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gt/greaterThan&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is greater than the given value(use for &lt;code&gt;intX&lt;/code&gt; &lt;code&gt;uintX&lt;/code&gt; &lt;code&gt;floatX&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;email/isEmail&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is email address string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intEq/intEqual&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is int and equals to the given value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;len/length&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value length is equals to the given size(use for &lt;code&gt;string&lt;/code&gt; &lt;code&gt;array&lt;/code&gt; &lt;code&gt;slice&lt;/code&gt; &lt;code&gt;map&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;regex/regexp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the value can pass the regular verification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arr/list/array/isArray&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is array, slice type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;map/isMap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is a MAP type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;strings/isStrings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is string slice type(only allow &lt;code&gt;[]string&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ints/isInts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is int slice type(only allow &lt;code&gt;[]int&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;min_len/minLen/minLength&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check the minimum length of the value is the given size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;max_len/maxLen/maxLength&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check the maximum length of the value is the given size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;eq_field/eqField&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the field value is equals to the value of another field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ne_field/neField&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the field value is not equals to the value of another field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gte_field/gteField&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the field value is greater than or equal to the value of another field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gt_field/gtField&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the field value is greater than the value of another field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lte_field/lteField&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if the field value is less than or equal to the value of another field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lt_field/ltField&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the field value is less than the value of another field&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file/isFile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Verify if it is an uploaded file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;image/isImage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check if it is an uploaded image file and support suffix check&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mime/mimeType/inMimeTypes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that it is an uploaded file and is in the specified MIME type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;date/isDate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check the field value is date string. eg &lt;code&gt;2018-10-25&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gt_date/gtDate/afterDate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the input value is greater than the given date string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lt_date/ltDate/beforeDate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the input value is less than the given date string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gte_date/gteDate/afterOrEqualDate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the input value is greater than or equal to the given date string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lte_date/lteDate/beforeOrEqualDate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that the input value is less than or equal to the given date string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;has_whitespace/hasWhitespace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value string has Whitespace.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ascii/ASCII/isASCII&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is ASCII string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alpha/isAlpha&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Verify that the value contains only alphabetic characters&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alphaNum/isAlphaNum&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check that only letters, numbers are included&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alphaDash/isAlphaDash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check to include only letters, numbers, dashes ( - ), and underscores ( _ )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;multiByte/isMultiByte&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is MultiByte string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;base64/isBase64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is Base64 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dns_name/dnsName/DNSName/isDNSName&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is DNSName string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;data_uri/dataURI/isDataURI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is DataURI string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;empty/isEmpty&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is Empty string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hex_color/hexColor/isHexColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is Hex color string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hexadecimal/isHexadecimal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is Hexadecimal string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;json/JSON/isJSON&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is JSON string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lat/latitude/isLatitude&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is Latitude string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lon/longitude/isLongitude&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is Longitude string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mac/isMAC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is MAC string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;num/number/isNumber&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is number string. &lt;code&gt;&amp;gt;= 0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cn_mobile/cnMobile/isCnMobile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is china mobile number string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;printableASCII/isPrintableASCII&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is PrintableASCII string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rgb_color/rgbColor/RGBColor/isRGBColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is RGB color string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;url/isURL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is URL string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fullUrl/isFullURL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is full URL string(&lt;em&gt;must start with http,https&lt;/em&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ip/isIP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is IP(v4 or v6) string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ipv4/isIPv4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is IPv4 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ipv6/isIPv6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is IPv6 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CIDR/isCIDR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is CIDR string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CIDRv4/isCIDRv4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is CIDRv4 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CIDRv6/isCIDRv6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is CIDRv6 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid/isUUID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is UUID string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid3/isUUID3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is UUID3 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid4/isUUID4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is UUID4 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uuid5/isUUID5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is UUID5 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;filePath/isFilePath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is an existing file path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unixPath/isUnixPath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is Unix Path string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;winPath/isWinPath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is Windows Path string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isbn10/ISBN10/isISBN10&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is ISBN10 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isbn13/ISBN13/isISBN13&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Check value is ISBN13 string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;intX&lt;/code&gt; is contains: int, int8, int16, int32, int64&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uintX&lt;/code&gt; is contains: uint, uint8, uint16, uint32, uint64&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;floatX&lt;/code&gt; is contains: float32, float64&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a id=&#34;built-in-filters&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Built In Filters&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Filters powered by: &lt;a href=&#34;https://github.com/gookit/filter&#34;&gt;gookit/filter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;filter/aliases&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int/toInt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert value(string/intX/floatX) to &lt;code&gt;int&lt;/code&gt; type &lt;code&gt;v.FilterRule(&#34;id&#34;, &#34;int&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;uint/toUint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert value(string/intX/floatX) to &lt;code&gt;uint&lt;/code&gt; type &lt;code&gt;v.FilterRule(&#34;id&#34;, &#34;uint&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int64/toInt64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert value(string/intX/floatX) to &lt;code&gt;int64&lt;/code&gt; type &lt;code&gt;v.FilterRule(&#34;id&#34;, &#34;int64&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;float/toFloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert value(string/intX/floatX) to &lt;code&gt;float&lt;/code&gt; type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bool/toBool&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert string value to bool. (&lt;code&gt;true&lt;/code&gt;: &#34;1&#34;, &#34;on&#34;, &#34;yes&#34;, &#34;true&#34;, &lt;code&gt;false&lt;/code&gt;: &#34;0&#34;, &#34;off&#34;, &#34;no&#34;, &#34;false&#34;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;trim/trimSpace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean up whitespace characters on both sides of the string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ltrim/trimLeft&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean up whitespace characters on left sides of the string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rtrim/trimRight&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clean up whitespace characters on right sides of the string&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;int/integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert value(string/intX/floatX) to int type &lt;code&gt;v.FilterRule(&#34;id&#34;, &#34;int&#34;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lower/lowercase&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert string to lowercase&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;upper/uppercase&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert string to uppercase&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lcFirst/lowerFirst&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert the first character of a string to lowercase&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ucFirst/upperFirst&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert the first character of a string to uppercase&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ucWord/upperWord&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert the first character of each word to uppercase&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;camel/camelCase&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert string to camel naming style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;snake/snakeCase&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert string to snake naming style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;escapeJs/escapeJS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Escape JS string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;escapeHtml/escapeHTML&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Escape HTML string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;str2ints/strToInts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert string to int slice &lt;code&gt;[]int&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;str2time/strToTime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert date string to &lt;code&gt;time.Time&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;str2arr/str2array/strToArray&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert string to string slice &lt;code&gt;[]string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Gookit packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/ini&#34;&gt;gookit/ini&lt;/a&gt; Go config management, use INI files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/rux&#34;&gt;gookit/rux&lt;/a&gt; Simple and fast request router for golang HTTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/gcli&#34;&gt;gookit/gcli&lt;/a&gt; build CLI application, tool library, running CLI commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/event&#34;&gt;gookit/event&lt;/a&gt; Lightweight event manager and dispatcher implements by Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/cache&#34;&gt;gookit/cache&lt;/a&gt; Generic cache use and cache manager for golang. support File, Memory, Redis, Memcached.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/config&#34;&gt;gookit/config&lt;/a&gt; Go config management. support JSON, YAML, TOML, INI, HCL, ENV and Flags&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/color&#34;&gt;gookit/color&lt;/a&gt; A command-line color library with true color support, universal API methods and Windows support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/filter&#34;&gt;gookit/filter&lt;/a&gt; Provide filtering, sanitizing, and conversion of golang data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/validate&#34;&gt;gookit/validate&lt;/a&gt; Use for data validation and filtering. support Map, Struct, Form data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/goutil&#34;&gt;gookit/goutil&lt;/a&gt; Some utils for the Go: string, array/slice, map, format, cli, env, filesystem, test and more&lt;/li&gt; &#xA; &lt;li&gt;More please see &lt;a href=&#34;https://github.com/gookit&#34;&gt;https://github.com/gookit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/albrow/forms&#34;&gt;https://github.com/albrow/forms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/asaskevich/govalidator&#34;&gt;https://github.com/asaskevich/govalidator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-playground/validator&#34;&gt;https://github.com/go-playground/validator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inhere/php-validate&#34;&gt;https://github.com/inhere/php-validate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/validate/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>