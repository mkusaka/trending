<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-20T01:40:36Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kevwan/tproxy</title>
    <updated>2022-07-20T01:40:36Z</updated>
    <id>tag:github.com,2022-07-20:/kevwan/tproxy</id>
    <link href="https://github.com/kevwan/tproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cli tool to proxy and analyze TCP connections.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tproxy&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/kevwan/tproxy/main/readme-cn.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kevwan/tproxy/actions&#34;&gt;&lt;img src=&#34;https://github.com/kevwan/tproxy/workflows/Go/badge.svg?branch=main&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/kevwan/tproxy&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/kevwan/tproxy&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kevwan/tproxy&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kevwan/tproxy.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/kevwan&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why I wrote this tool&lt;/h2&gt; &#xA;&lt;p&gt;When I develop backend services and write &lt;a href=&#34;https://github.com/zeromicro/go-zero&#34;&gt;go-zero&lt;/a&gt;, I often need to monitor the network traffic. For example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;monitoring gRPC connections, when to connect and when to reconnect&lt;/li&gt; &#xA; &lt;li&gt;monitoring MySQL connection pools, how many connections and figure out the lifetime policy&lt;/li&gt; &#xA; &lt;li&gt;monitoring any TCP connections on the fly&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go install github.com/kevwan/tproxy@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use docker images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm -it -p &amp;lt;listen-port&amp;gt;:&amp;lt;listen-port&amp;gt; -p &amp;lt;remote-port&amp;gt;:&amp;lt;remote-port&amp;gt; kevinwan/tproxy:v1 tproxy -l 0.0.0.0 -p &amp;lt;listen-port&amp;gt; -r host.docker.internal:&amp;lt;remote-port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For arm64:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run --rm -it -p &amp;lt;listen-port&amp;gt;:&amp;lt;listen-port&amp;gt; -p &amp;lt;remote-port&amp;gt;:&amp;lt;remote-port&amp;gt; kevinwan/tproxy:v1-arm64 tproxy -l 0.0.0.0 -p &amp;lt;listen-port&amp;gt; -r host.docker.internal:&amp;lt;remote-port&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you can use &lt;a href=&#34;https://scoop.sh/&#34;&gt;scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ scoop install tproxy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tproxy --help&#xA;Usage of tproxy:&#xA;  -d duration&#xA;    &#x9;the delay to relay packets&#xA;  -l string&#xA;    &#x9;Local address to listen on (default &#34;localhost&#34;)&#xA;  -p int&#xA;    &#x9;Local port to listen on, default to pick a random port&#xA;  -q&#x9;Quiet mode, only prints connection open/close and stats, default false&#xA;  -r string&#xA;    &#x9;Remote address (host:port) to connect&#xA;  -s&#x9;Enable statistics&#xA;  -t string&#xA;    &#x9;The type of protocol, currently support grpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Monitor gRPC connections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tproxy -p 8088 -r localhost:8081 -t grpc -d 100ms&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;listen on localhost and port 8088&lt;/li&gt; &#xA; &lt;li&gt;redirect the traffic to &lt;code&gt;localhost:8081&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;protocol type to be gRPC&lt;/li&gt; &#xA; &lt;li&gt;delay 100ms for each packets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img width=&#34;561&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1918356/174335713-259de707-c9f5-40f1-a96f-780232d23f43.png&#34;&gt; &#xA;&lt;h3&gt;Monitor MySQL connections&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ tproxy -p 3307 -r localhost:3306&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1918356/173970130-944e4265-8ba6-4d2e-b091-1f6a5de81070.png&#34;&gt; &#xA;&lt;h2&gt;Give a Star! ⭐&lt;/h2&gt; &#xA;&lt;p&gt;If you like or are using this project, please give it a &lt;strong&gt;star&lt;/strong&gt;. Thanks!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dominikbraun/graph</title>
    <updated>2022-07-20T01:40:36Z</updated>
    <id>tag:github.com,2022-07-20:/dominikbraun/graph</id>
    <link href="https://github.com/dominikbraun/graph" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A generic library for creating graph data structures and performing operations on them. It supports different kinds of graphs such as directed graphs, acyclic graphs, or trees.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/img/logo.svg?sanitize=true&#34; alt=&#34;dominikbraun/graph&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;graph&lt;/code&gt; is a generic library for creating graph data structures and performing operations on them. It supports different kinds of graphs such as directed graphs, acyclic graphs, or trees.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertices of any data type, such as &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;City&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Optionally combinable graph types and traits.&lt;/li&gt; &#xA; &lt;li&gt;Validations considering the graph type, such as cycle detection in acyclic graphs.&lt;/li&gt; &#xA; &lt;li&gt;Determination of graph and vertex properties, such as degree or tree-depth.&lt;/li&gt; &#xA; &lt;li&gt;Non-recursive walks, DFS, and BFS.&lt;/li&gt; &#xA; &lt;li&gt;Pathfinding algorithms, considering edge weights where appropriate: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Hamiltonian paths and cycles&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Eulerian paths and cycles&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Shortest path (Dijkstra)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Strongly connected components (Tarjan)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Status: Work in progress. Multigraphs aren&#39;t supported.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/dominikbraun/graph&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick examples&lt;/h1&gt; &#xA;&lt;h2&gt;Create a graph of integers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/img/simple.svg?sanitize=true&#34; alt=&#34;graph of integers&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(graph.IntHash)&#xA;&#xA;g.Vertex(1)&#xA;g.Vertex(2)&#xA;g.Vertex(3)&#xA;g.Vertex(4)&#xA;g.Vertex(5)&#xA;&#xA;_ = g.Edge(1, 2)&#xA;_ = g.Edge(1, 4)&#xA;_ = g.Edge(2, 3)&#xA;_ = g.Edge(2, 4)&#xA;_ = g.Edge(2, 5)&#xA;_ = g.Edge(3, 5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create a directed acyclic graph of integers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/img/dag.svg?sanitize=true&#34; alt=&#34;directed acyclic graph&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(graph.IntHash, graph.Directed(), graph.Acyclic())&#xA;&#xA;g.Vertex(1)&#xA;g.Vertex(2)&#xA;g.Vertex(3)&#xA;g.Vertex(4)&#xA;&#xA;_ = g.Edge(1, 2)&#xA;_ = g.Edge(1, 3)&#xA;_ = g.Edge(2, 3)&#xA;_ = g.Edge(2, 4)&#xA;_ = g.Edge(3, 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create a graph of a custom type&lt;/h2&gt; &#xA;&lt;p&gt;To understand this example in detail, see the &lt;a href=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/#hashes&#34;&gt;concept of hashes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type City struct {&#xA;    Name string&#xA;}&#xA;&#xA;cityHash := func(c City) string {&#xA;    return c.Name&#xA;}&#xA;&#xA;g := graph.New(cityHash)&#xA;&#xA;g.Vertex(london)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create a weighted graph&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/img/cities.svg?sanitize=true&#34; alt=&#34;weighted graph&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(cityHash, graph.Weighted())&#xA;&#xA;g.Vertex(london)&#xA;g.Vertex(munich)&#xA;g.Vertex(paris)&#xA;g.Vertex(madrid)&#xA;&#xA;_ = g.WeightedEdge(london, munich, 3)&#xA;_ = g.WeightedEdge(london, paris, 2)&#xA;_ = g.WeightedEdge(london, madrid, 5)&#xA;_ = g.WeightedEdge(munich, madrid, 6)&#xA;_ = g.WeightedEdge(munich, paris, 2)&#xA;_ = g.WeightedEdge(paris, madrid, 4)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Perform a Depth-First Search&lt;/h2&gt; &#xA;&lt;p&gt;This example traverses and prints all vertices in the graph in DFS order.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/img/dfs.svg?sanitize=true&#34; alt=&#34;depth-first search&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(graph.IntHash, graph.Directed())&#xA;&#xA;g.Vertex(1)&#xA;g.Vertex(2)&#xA;g.Vertex(3)&#xA;g.Vertex(4)&#xA;&#xA;_ = g.Edge(1, 2)&#xA;_ = g.Edge(1, 3)&#xA;_ = g.Edge(3, 4)&#xA;&#xA;_ = g.DFS(1, func(value int) bool {&#xA;    fmt.Println(value)&#xA;    return false&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;1 3 4 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Find strongly connected components&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/img/scc.svg?sanitize=true&#34; alt=&#34;strongly connected components&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(graph.IntHash)&#xA;&#xA;// Add vertices and edges ...&#xA;&#xA;scc, _ := g.StronglyConnectedComponents()&#xA;&#xA;fmt.Println(scc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[[1 2 5] [3 4 8] [6 7]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Find the shortest path&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/img/dijkstra.svg?sanitize=true&#34; alt=&#34;shortest path algorithm&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(graph.StringHash, graph.Weighted())&#xA;&#xA;// Add vertices and weighted edges ...&#xA;&#xA;path, _ := g.ShortestPath(&#34;A&#34;, &#34;B&#34;)&#xA;&#xA;fmt.Println(path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;[A C E B]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cycle checks for acyclic graphs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dominikbraun/graph/main/img/cycles.svg?sanitize=true&#34; alt=&#34;cycle checks&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(graph.IntHash, graph.Acyclic())&#xA;&#xA;g.Vertex(1)&#xA;g.Vertex(2)&#xA;g.Vertex(3)&#xA;&#xA;_ = g.Edge(1, 2)&#xA;_ = g.Edge(1, 3)&#xA;&#xA;if err := g.Edge(2, 3); err != nil {&#xA;    panic(err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;panic: an edge between 2 and 3 would introduce a cycle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Concepts&lt;/h1&gt; &#xA;&lt;h2&gt;Hashes&lt;/h2&gt; &#xA;&lt;p&gt;A graph consists of nodes (or vertices) of type &lt;code&gt;T&lt;/code&gt;, which are identified by a hash value of type &lt;code&gt;K&lt;/code&gt;. The hash value is obtained using the hashing function passed to &lt;code&gt;graph.New&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Primitive types&lt;/h3&gt; &#xA;&lt;p&gt;For primitive types such as &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;int&lt;/code&gt;, you may use a predefined hashing function such as &lt;code&gt;graph.IntHash&lt;/code&gt; – a function that takes an integer and uses it as a hash value at the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(graph.IntHash)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This also means that only one vertex with a value like &lt;code&gt;5&lt;/code&gt; can exist in the graph if &lt;code&gt;graph.IntHash&lt;/code&gt; used.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Custom types&lt;/h3&gt; &#xA;&lt;p&gt;For storing custom data types, you need to provide your own hashing function. This example function takes a &lt;code&gt;City&lt;/code&gt; and returns the city name as an unique hash value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cityHash := func(c City) string {&#xA;    return c.Name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Creating a graph using this hashing function will yield a graph with vertices of type &lt;code&gt;City&lt;/code&gt; identified by hash values of type &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(cityHash)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Traits&lt;/h2&gt; &#xA;&lt;p&gt;The behavior of a graph, for example when adding or retrieving edges, depends on its traits. You can set the graph&#39;s traits using the functional options provided by this library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;g := graph.New(graph.IntHash, graph.Directed(), graph.Weighted())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The full documentation is available at &lt;a href=&#34;https://pkg.go.dev/github.com/dominikbraun/graph&#34;&gt;pkg.go.dev&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bytebase/bytebase</title>
    <updated>2022-07-20T01:40:36Z</updated>
    <id>tag:github.com,2022-07-20:/bytebase/bytebase</id>
    <link href="https://github.com/bytebase/bytebase" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Safe database schema change and version control tool for teams. Public demo: https://demo.bytebase.com&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://bytebase.com?source=github&#34;&gt;&lt;img alt=&#34;Bytebase&#34; src=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/docs/assets/illustration/banner.webp&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/docs/assets/db-and-vcs.png&#34; width=&#34;60%&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://demo.bytebase.com?source=github&#34; target=&#34;_blank&#34;&gt;Live Demo&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/#installation&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/#-docs&#34;&gt;Help&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/#-development&#34;&gt;Development&lt;/a&gt; • &lt;a href=&#34;https://github.com/bytebase/bytebase/tree/main/docs/design&#34;&gt;Design Doc&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;status&#34; src=&#34;https://img.shields.io/badge/status-beta-blue&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/bytebase/bytebase&#34;&gt; &lt;img alt=&#34;go report&#34; src=&#34;https://goreportcard.com/badge/github.com/bytebase/bytebase&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/bytebase/bytebase&#34;&gt; &lt;img alt=&#34;Docker pulls&#34; src=&#34;https://img.shields.io/docker/pulls/bytebase/bytebase.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/bytebase/bytebase&#34;&gt; &lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bytebase.com/?source=github&#34;&gt;Bytebase&lt;/a&gt; is a web-based, zero-config, dependency-free database schema change and version control management tool for the &lt;strong&gt;DevOps&lt;/strong&gt; team.&lt;/p&gt; &#xA;&lt;h2&gt;For Developer and DevOps Engineer - Holistic view of database schema changes&lt;/h2&gt; &#xA;&lt;p&gt;Regardless of working as an IC in a team or managing your own side project, developers using Bytebase will have a holistic view of all the related database info, the ongoing database schema change tasks and the past database migration history.&lt;/p&gt; &#xA;&lt;h2&gt;For DBA - 10x operational efficiency&lt;/h2&gt; &#xA;&lt;p&gt;A collaborative web-console to allow DBAs to manage database tasks and handle developer tickets much more efficiently than traditonal tools.&lt;/p&gt; &#xA;&lt;h2&gt;For Tech Lead - Improve team velocity and reduce risk&lt;/h2&gt; &#xA;&lt;p&gt;Teams using Bytebase will naturally adopt industry best practice for managing database schema changes. Tech leads will see an improved development velocity and reduced outages caused by database changes.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Web-based database change and management workspace for teams&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SQL Review &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.bytebase.com/docs/change-database/change-workflow&#34;&gt;UI based change workflow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.bytebase.com/docs/vcs-integration/overview&#34;&gt;Version control based change workflow&lt;/a&gt; (Database-as-Code)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.bytebase.com/docs/sql-review/review-rules/overview&#34;&gt;SQL Review Rules&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built-in SQL Editor&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Detailed migration history&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multi-tenancy (rollout change to homogeneous databases belonged to different tenants)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Backup and restore&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Point-in-time recovery (PITR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Anomaly center&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Environment policy &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Approval policy&lt;/li&gt; &#xA;   &lt;li&gt;Backup schedule enforcement&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Schema drift detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Backward compatibility schema change check&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Role-based access control (RBAC)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MySQL support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; PostgreSQL support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TiDB support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Snowflake support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; ClickHouse support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; GitLab CE/EE support (Database-as-Code, login with GitLab account, project membership sync)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Webhook integration for Slack, Discord, MS Teams, DingTalk(钉钉), Feishu(飞书), WeCom(企业微信)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GitLab.com support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; GitHub support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;figcaption align=&#34;center&#34;&gt;&#xA; Fig.1 - Dashboard&#xA;&lt;/figcaption&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/docs/assets/overview1.webp&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;figcaption align=&#34;center&#34;&gt;&#xA; Fig.2 - SQL review issue pipeline&#xA;&lt;/figcaption&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/docs/assets/overview2.webp&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;figcaption align=&#34;center&#34;&gt;&#xA; Fig.3 - GitLab based schema migration (Database-as-code)&#xA;&lt;/figcaption&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/docs/assets/versioncontrol.webp&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;figcaption align=&#34;center&#34;&gt;&#xA; Fig.4 - Built-in SQL Editor&#xA;&lt;/figcaption&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/docs/assets/sql-editor.webp&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📕 Docs&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.bytebase.com/docs/get-started/deploy-to-production/deploy-with-docker?source=github&#34;&gt;Installation&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://bytebase.com/docs?source=github&#34;&gt;User doc&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In particular, get familar with various product concept such as &lt;a href=&#34;https://bytebase.com/docs/concepts/data-model?source=github&#34;&gt;data model&lt;/a&gt;, &lt;a href=&#34;https://bytebase.com/docs/concepts/roles-and-permissions?source=github&#34;&gt;roles and permissions&lt;/a&gt; and etc.&lt;/p&gt; &#xA;&lt;h3&gt;Design doc&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bytebase/bytebase/tree/main/docs/design&#34;&gt;https://github.com/bytebase/bytebase/tree/main/docs/design&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Version upgrade policy&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bytebase/bytebase/tree/main/docs/version-management.md&#34;&gt;https://github.com/bytebase/bytebase/tree/main/docs/version-management.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🕊 Interested in contributing?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Checkout issues tagged with &lt;a href=&#34;https://github.com/bytebase/bytebase/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;good first issue&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We are maintaining an &lt;a href=&#34;https://bytebase.com/database-glossary/?source=github&#34;&gt;online database glossary list&lt;/a&gt;, you can add/improve content there.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: We are quite disciplined on &lt;a href=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/#installation&#34;&gt;tech stack&lt;/a&gt;. If you consider bringing a new programming language, framework and any non-trivial external dependency, please open a discussion first.&lt;/p&gt; &#xA;&lt;h2&gt;🏗 Development&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/bytebase/bytebase&#34;&gt; &lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Bytebase is built with a curated tech stack. It is optimized for &lt;strong&gt;developer experience&lt;/strong&gt; and is very easy to start working on the code:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;It has no external dependency.&lt;/li&gt; &#xA; &lt;li&gt;It requires zero config.&lt;/li&gt; &#xA; &lt;li&gt;1 command to start backend and 1 command to start frontend, both with live reload support.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/bytebase/bytebase/tree/main/docs/dev-guide.md&#34;&gt;Coding guideline&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tech Stack&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/docs/assets/techstack.webp&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Data Model&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/bytebase/bytebase/main/docs/assets/datamodel_v1.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go&lt;/a&gt; (1.18 or later)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pnpm.io/installation&#34;&gt;pnpm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cosmtrek/air#installation&#34;&gt;Air&lt;/a&gt; (1.27.10 or later). This is for backend live reload.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/cosmtrek/air#installation&#34;&gt;Air&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull source.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/bytebase/bytebase&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up pre-commit hooks.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Install &lt;a href=&#34;https://pre-commit.com/index.html#install&#34;&gt;pre-commit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; cd bytebase&#xA; pre-commit install&#xA; pre-commit install --hook-type commit-msg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start backend using air (with live reload).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;air -c scripts/.air.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Change the open file limit if you encounter &#34;error: too many open files&#34;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ulimit -n 10240&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start frontend (with live reload).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd frontend &amp;amp;&amp;amp; pnpm i &amp;amp;&amp;amp; pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Bytebase should now be running at &lt;a href=&#34;https://localhost:3000&#34;&gt;https://localhost:3000&lt;/a&gt; and change either frontend or backend code would trigger live reload.&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#bytebase/bytebase&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=bytebase/bytebase&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;We are hiring&lt;/h2&gt; &#xA;&lt;p&gt;We are looking for engineers and developer advocates, interns are also welcomed. Check out our &lt;a href=&#34;https://bytebase.com/jobs?source=github&#34;&gt;jobs page&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>