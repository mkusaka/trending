<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-11T01:30:39Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openbao/openbao</title>
    <updated>2024-02-11T01:30:39Z</updated>
    <id>tag:github.com,2024-02-11:/openbao/openbao</id>
    <link href="https://github.com/openbao/openbao" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenBao exists to provide a software solution to manage, store, and distribute sensitive data including secrets, certificates, and keys.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenBao&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt;: We take OpenBao&#39;s security and our users&#39; trust very seriously. If you believe you have found a security issue in OpenBao, &lt;em&gt;please responsibly disclose&lt;/em&gt; by contacting us at &lt;a href=&#34;https://raw.githubusercontent.com/openbao/openbao/main/openbao-security@lists.lfedge.org&#34;&gt;openbao-security@lists.lfedge.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- -&#x9;Website: https://www.openbao.org --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lists.lfedge.org/g/openbao&#34;&gt;Mailing List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openbao/openbao/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chat.lfx.linuxfoundation.org/&#34;&gt;Chat Server&lt;/a&gt; -- look for &lt;code&gt;openbao-&lt;/code&gt; prefixed rooms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; alt=&#34;OpenBao Mascot&#34; src=&#34;https://raw.githubusercontent.com/openbao/openbao/main/bao.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;OpenBao exists to provide a software solution to manage, store, and distribute sensitive data including secrets, certificates, and keys. The OpenBao community intends to provide this software under an OSI-approved open-source license, led by a community run under open governance principles.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A modern system requires access to a multitude of secrets: database credentials, API keys for external services, credentials for service-oriented architecture communication, etc. Understanding who is accessing what secrets is already very difficult and platform-specific. Adding on key rolling, secure storage, and detailed audit logs is almost impossible without a custom solution. This is where OpenBao steps in.&lt;/p&gt; &#xA;&lt;p&gt;The key features of OpenBao are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Secure Secret Storage&lt;/strong&gt;: Arbitrary key/value secrets can be stored in OpenBao. OpenBao encrypts these secrets prior to writing them to persistent storage, so gaining access to the raw storage isn&#39;t enough to access your secrets. OpenBao can write to disk, &lt;a href=&#34;https://www.consul.io&#34;&gt;Consul&lt;/a&gt;, and more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dynamic Secrets&lt;/strong&gt;: OpenBao can generate secrets on-demand for some systems, such as AWS or SQL databases. For example, when an application needs to access an S3 bucket, it asks OpenBao for credentials, and OpenBao will generate an AWS keypair with valid permissions on demand. After creating these dynamic secrets, OpenBao will also automatically revoke them after the lease is up.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Encryption&lt;/strong&gt;: OpenBao can encrypt and decrypt data without storing it. This allows security teams to define encryption parameters and developers to store encrypted data in a location such as a SQL database without having to design their own encryption methods.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Leasing and Renewal&lt;/strong&gt;: All secrets in OpenBao have a &lt;em&gt;lease&lt;/em&gt; associated with them. At the end of the lease, OpenBao will automatically revoke that secret. Clients are able to renew leases via built-in renew APIs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Revocation&lt;/strong&gt;: OpenBao has built-in support for secret revocation. OpenBao can revoke not only single secrets, but a tree of secrets, for example, all secrets read by a specific user, or all secrets of a particular type. Revocation assists in key rolling as well as locking down systems in the case of an intrusion.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation, Getting Started, and Certification Exams&lt;/h2&gt; &#xA;&lt;!-- Documentation is available on the [OpenBao website](https://www.openbao.org/docs/). --&gt; &#xA;&lt;h2&gt;Developing OpenBao&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to work on OpenBao itself or any of its built-in systems, you&#39;ll first need &lt;a href=&#34;https://www.golang.org&#34;&gt;Go&lt;/a&gt; installed on your machine.&lt;/p&gt; &#xA;&lt;p&gt;For local dev first make sure Go is properly installed, including setting up a &lt;a href=&#34;https://golang.org/doc/code.html#GOPATH&#34;&gt;GOPATH&lt;/a&gt;. Ensure that &lt;code&gt;$GOPATH/bin&lt;/code&gt; is in your path as some distributions bundle the old version of build tools. Next, clone this repository. OpenBao uses &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt;, so it is recommended that you clone the repository &lt;em&gt;&lt;strong&gt;outside&lt;/strong&gt;&lt;/em&gt; of the GOPATH. You can then download any required build tools by bootstrapping your environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make bootstrap&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile a development version of OpenBao, run &lt;code&gt;make&lt;/code&gt; or &lt;code&gt;make dev&lt;/code&gt;. This will put the OpenBao binary in the &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;$GOPATH/bin&lt;/code&gt; folders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make dev&#xA;...&#xA;$ bin/bao&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile a development version of OpenBao with the UI, run &lt;code&gt;make static-dist dev-ui&lt;/code&gt;. This will put the OpenBao binary in the &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;$GOPATH/bin&lt;/code&gt; folders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make static-dist dev-ui&#xA;...&#xA;$ bin/bao&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests, type &lt;code&gt;make test&lt;/code&gt;. Note: this requires Docker to be installed. If this exits with exit status 0, then everything is working!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make test&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re developing a specific package, you can run tests for just that package by specifying the &lt;code&gt;TEST&lt;/code&gt; variable. For example below, only &lt;code&gt;vault&lt;/code&gt; package tests will be run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make test TEST=./vault&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing OpenBao&lt;/h3&gt; &#xA;&lt;p&gt;This repository publishes two libraries that may be imported by other projects: &lt;code&gt;github.com/openbao/openbao/api&lt;/code&gt; and &lt;code&gt;github.com/openbao/openbao/sdk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that this repository also contains OpenBao (the product), and as with most Go projects, OpenBao uses Go modules to manage its dependencies. The mechanism to do that is the &lt;a href=&#34;https://raw.githubusercontent.com/openbao/openbao/main/go.mod&#34;&gt;go.mod&lt;/a&gt; file. As it happens, the presence of that file also makes it theoretically possible to import OpenBao as a dependency into other projects. Some other projects have made a practice of doing so in order to take advantage of testing tooling that was developed for testing OpenBao itself. This is not, and has never been, a supported way to use the OpenBao project. We aren&#39;t likely to fix bugs relating to failure to import &lt;code&gt;github.com/openbao/openbao&lt;/code&gt; into your project.&lt;/p&gt; &#xA;&lt;p&gt;See also the section &#34;Docker-based tests&#34; below.&lt;/p&gt; &#xA;&lt;h3&gt;Acceptance Tests&lt;/h3&gt; &#xA;&lt;p&gt;OpenBao has comprehensive &lt;a href=&#34;https://en.wikipedia.org/wiki/Acceptance_testing&#34;&gt;acceptance tests&lt;/a&gt; covering most of the features of the secret and auth methods.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re working on a feature of a secret or auth method and want to verify it is functioning (and also hasn&#39;t broken anything else), we recommend running the acceptance tests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The acceptance tests create/destroy/modify &lt;em&gt;real resources&lt;/em&gt;, which may incur real costs in some cases. In the presence of a bug, it is technically possible that broken backends could leave dangling data behind. Therefore, please run the acceptance tests at your own risk. At the very least, we recommend running them in their own private account for whatever backend you&#39;re testing.&lt;/p&gt; &#xA;&lt;p&gt;To run the acceptance tests, invoke &lt;code&gt;make testacc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ make testacc TEST=./builtin/logical/consul&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;TEST&lt;/code&gt; variable is required, and you should specify the folder where the backend is. The &lt;code&gt;TESTARGS&lt;/code&gt; variable is recommended to filter down to a specific resource to test, since testing all of them at once can sometimes take a very long time.&lt;/p&gt; &#xA;&lt;p&gt;Acceptance tests typically require other environment variables to be set for things such as access keys. The test itself should error early and tell you what to set, so it is not documented here.&lt;/p&gt; &#xA;&lt;!--&#xA;TODO: verify this works in OpenBao&#xA;&#xA;### Docker-based Tests&#xA;&#xA;We have created an experimental new testing mechanism inspired by NewTestCluster.&#xA;An example of how to use it:&#xA;&#xA;```go&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/openbao/openbao/sdk/helper/testcluster/docker&#34;&#xA;)&#xA;&#xA;func Test_Something_With_Docker(t *testing.T) {&#xA;  opts := &amp;docker.DockerClusterOptions{&#xA;    ImageRepo: &#34;openbao/openbao&#34;,&#xA;    ImageTag:    &#34;latest&#34;,&#xA;  }&#xA;  cluster := docker.NewTestDockerCluster(t, opts)&#xA;  defer cluster.Cleanup()&#xA;  &#xA;  client := cluster.Nodes()[0].APIClient()&#xA;  _, err := client.Logical().Read(&#34;sys/storage/raft/configuration&#34;)&#xA;  if err != nil {&#xA;    t.Fatal(err)&#xA;  }&#xA;}&#xA;```&#xA;&#xA;Or for Enterprise:&#xA;&#xA;```go&#xA;import (&#xA;  &#34;testing&#34;&#xA;  &#34;github.com/openbao/openbao/sdk/helper/testcluster/docker&#34;&#xA;)&#xA;&#xA;func Test_Something_With_Docker(t *testing.T) {&#xA;  opts := &amp;docker.DockerClusterOptions{&#xA;    ImageRepo: &#34;hashicorp/vault-enterprise&#34;,&#xA;    ImageTag:  &#34;latest&#34;,&#xA;&#x9;VaultLicense: licenseString, // not a path, the actual license bytes&#xA;  }&#xA;  cluster := docker.NewTestDockerCluster(t, opts)&#xA;  defer cluster.Cleanup()&#xA;}&#xA;```&#xA;&#xA;Here is a more realistic example of how we use it in practice.  DefaultOptions uses &#xA;`openbao/openbao`:`latest` as the repo and tag, but it also looks at the environment&#xA;variable OPENBAO_BINARY. If populated, it will copy the local file referenced by&#xA;OPENBAO_BINARY into the container. This is useful when testing local changes.&#xA;&#xA;Optionally you can set COMMIT_SHA, which will be appended to the image name we&#xA;build as a debugging convenience.&#xA;&#xA;```go&#xA;func Test_Custom_Build_With_Docker(t *testing.T) {&#xA;  opts := docker.DefaultOptions(t)&#xA;  cluster := docker.NewTestDockerCluster(t, opts)&#xA;  defer cluster.Cleanup()&#xA;}&#xA;```&#xA;&#xA;There are a variety of helpers in the `github.com/openbao/openbao/sdk/helper/testcluster`&#xA;package, e.g. these tests below will create a pair of 3-node clusters and link them using&#xA;PR or DR replication respectively, and fail if the replication state doesn&#39;t become healthy&#xA;before the passed context expires.&#xA;&#xA;Again, as written, these depend on having a Vault Enterprise binary locally and the env&#xA;var VAULT_BINARY set to point to it, as well as having VAULT_LICENSE_CI set.&#xA;&#xA;```go&#xA;func TestStandardPerfReplication_Docker(t *testing.T) {&#xA;  opts := docker.DefaultOptions(t)&#xA;  r, err := docker.NewReplicationSetDocker(t, opts)&#xA;  if err != nil {&#xA;      t.Fatal(err)&#xA;  }&#xA;  defer r.Cleanup()&#xA;&#xA;  ctx, cancel := context.WithTimeout(context.Background(), time.Minute)&#xA;  defer cancel()&#xA;  err = r.StandardPerfReplication(ctx)&#xA;  if err != nil {&#xA;    t.Fatal(err)&#xA;  }&#xA;}&#xA;&#xA;func TestStandardDRReplication_Docker(t *testing.T) {&#xA;  opts := docker.DefaultOptions(t)&#xA;  r, err := docker.NewReplicationSetDocker(t, opts)&#xA;  if err != nil {&#xA;    t.Fatal(err)&#xA;  }&#xA;  defer r.Cleanup()&#xA;&#xA;  ctx, cancel := context.WithTimeout(context.Background(), time.Minute)&#xA;  defer cancel()&#xA;  err = r.StandardDRReplication(ctx)&#xA;  if err != nil {&#xA;    t.Fatal(err)&#xA;  }&#xA;}&#xA;```&#xA;&#xA;Finally, here&#39;s an example of running an existing OSS docker test with a custom binary:&#xA;&#xA;```bash&#xA;$ GOOS=linux make dev&#xA;$ VAULT_BINARY=$(pwd)/bin/bao go test -run &#39;TestRaft_Configuration_Docker&#39; ./vault/external_tests/raft/raft_binary&#xA;ok      github.com/openbao/openbao/vault/external_tests/raft/raft_binary        20.960s&#xA;```&#xA;--&gt;</summary>
  </entry>
</feed>