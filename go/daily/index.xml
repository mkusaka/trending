<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-14T01:34:37Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nats-io/nats.go</title>
    <updated>2022-10-14T01:34:37Z</updated>
    <id>tag:github.com,2022-10-14:/nats-io/nats.go</id>
    <link href="https://github.com/nats-io/nats.go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Golang client for NATS, the cloud native messaging system.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NATS - Go Client&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;http://golang.org&#34;&gt;Go&lt;/a&gt; client for the &lt;a href=&#34;https://nats.io&#34;&gt;NATS messaging system&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache2-blue.svg?sanitize=true&#34; alt=&#34;License Apache 2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/nats-io/nats.go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/nats-io/nats.go&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/github/nats-io/nats.go&#34;&gt;&lt;img src=&#34;https://travis-ci.com/nats-io/nats.go.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/nats-io/nats.go&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/GoDoc-reference-007d9c&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/nats-io/nats.go?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/nats-io/nats.go/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go client&#xA;go get github.com/nats-io/nats.go/&#xA;&#xA;# Server&#xA;go get github.com/nats-io/nats-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using or transitioning to Go modules support:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go client latest or explicit version&#xA;go get github.com/nats-io/nats.go/@latest&#xA;go get github.com/nats-io/nats.go/@v1.18.0&#xA;&#xA;# For latest NATS Server, add /v2 at the end&#xA;go get github.com/nats-io/nats-server/v2&#xA;&#xA;# NATS Server v1 is installed otherwise&#xA;# go get github.com/nats-io/nats-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/nats-io/nats.go&#34;&#xA;&#xA;// Connect to a server&#xA;nc, _ := nats.Connect(nats.DefaultURL)&#xA;&#xA;// Simple Publisher&#xA;nc.Publish(&#34;foo&#34;, []byte(&#34;Hello World&#34;))&#xA;&#xA;// Simple Async Subscriber&#xA;nc.Subscribe(&#34;foo&#34;, func(m *nats.Msg) {&#xA;    fmt.Printf(&#34;Received a message: %s\n&#34;, string(m.Data))&#xA;})&#xA;&#xA;// Responding to a request message&#xA;nc.Subscribe(&#34;request&#34;, func(m *nats.Msg) {&#xA;    m.Respond([]byte(&#34;answer is 42&#34;))&#xA;})&#xA;&#xA;// Simple Sync Subscriber&#xA;sub, err := nc.SubscribeSync(&#34;foo&#34;)&#xA;m, err := sub.NextMsg(timeout)&#xA;&#xA;// Channel Subscriber&#xA;ch := make(chan *nats.Msg, 64)&#xA;sub, err := nc.ChanSubscribe(&#34;foo&#34;, ch)&#xA;msg := &amp;lt;- ch&#xA;&#xA;// Unsubscribe&#xA;sub.Unsubscribe()&#xA;&#xA;// Drain&#xA;sub.Drain()&#xA;&#xA;// Requests&#xA;msg, err := nc.Request(&#34;help&#34;, []byte(&#34;help me&#34;), 10*time.Millisecond)&#xA;&#xA;// Replies&#xA;nc.Subscribe(&#34;help&#34;, func(m *nats.Msg) {&#xA;    nc.Publish(m.Reply, []byte(&#34;I can help!&#34;))&#xA;})&#xA;&#xA;// Drain connection (Preferred for responders)&#xA;// Close() not needed if this is called.&#xA;nc.Drain()&#xA;&#xA;// Close connection&#xA;nc.Close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JetStream Basic Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/nats-io/nats.go&#34;&#xA;&#xA;// Connect to NATS&#xA;nc, _ := nats.Connect(nats.DefaultURL)&#xA;&#xA;// Create JetStream Context&#xA;js, _ := nc.JetStream(nats.PublishAsyncMaxPending(256))&#xA;&#xA;// Simple Stream Publisher&#xA;js.Publish(&#34;ORDERS.scratch&#34;, []byte(&#34;hello&#34;))&#xA;&#xA;// Simple Async Stream Publisher&#xA;for i := 0; i &amp;lt; 500; i++ {&#xA;&#x9;js.PublishAsync(&#34;ORDERS.scratch&#34;, []byte(&#34;hello&#34;))&#xA;}&#xA;select {&#xA;case &amp;lt;-js.PublishAsyncComplete():&#xA;case &amp;lt;-time.After(5 * time.Second):&#xA;&#x9;fmt.Println(&#34;Did not resolve in time&#34;)&#xA;}&#xA;&#xA;// Simple Async Ephemeral Consumer&#xA;js.Subscribe(&#34;ORDERS.*&#34;, func(m *nats.Msg) {&#xA;&#x9;fmt.Printf(&#34;Received a JetStream message: %s\n&#34;, string(m.Data))&#xA;})&#xA;&#xA;// Simple Sync Durable Consumer (optional SubOpts at the end)&#xA;sub, err := js.SubscribeSync(&#34;ORDERS.*&#34;, nats.Durable(&#34;MONITOR&#34;), nats.MaxDeliver(3))&#xA;m, err := sub.NextMsg(timeout)&#xA;&#xA;// Simple Pull Consumer&#xA;sub, err := js.PullSubscribe(&#34;ORDERS.*&#34;, &#34;MONITOR&#34;)&#xA;msgs, err := sub.Fetch(10)&#xA;&#xA;// Unsubscribe&#xA;sub.Unsubscribe()&#xA;&#xA;// Drain&#xA;sub.Drain()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;JetStream Basic Management&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/nats-io/nats.go&#34;&#xA;&#xA;// Connect to NATS&#xA;nc, _ := nats.Connect(nats.DefaultURL)&#xA;&#xA;// Create JetStream Context&#xA;js, _ := nc.JetStream()&#xA;&#xA;// Create a Stream&#xA;js.AddStream(&amp;amp;nats.StreamConfig{&#xA;&#x9;Name:     &#34;ORDERS&#34;,&#xA;&#x9;Subjects: []string{&#34;ORDERS.*&#34;},&#xA;})&#xA;&#xA;// Update a Stream&#xA;js.UpdateStream(&amp;amp;nats.StreamConfig{&#xA;&#x9;Name:     &#34;ORDERS&#34;,&#xA;&#x9;MaxBytes: 8,&#xA;})&#xA;&#xA;// Create a Consumer&#xA;js.AddConsumer(&#34;ORDERS&#34;, &amp;amp;nats.ConsumerConfig{&#xA;&#x9;Durable: &#34;MONITOR&#34;,&#xA;})&#xA;&#xA;// Delete Consumer&#xA;js.DeleteConsumer(&#34;ORDERS&#34;, &#34;MONITOR&#34;)&#xA;&#xA;// Delete Stream&#xA;js.DeleteStream(&#34;ORDERS&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Encoded Connections&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;nc, _ := nats.Connect(nats.DefaultURL)&#xA;c, _ := nats.NewEncodedConn(nc, nats.JSON_ENCODER)&#xA;defer c.Close()&#xA;&#xA;// Simple Publisher&#xA;c.Publish(&#34;foo&#34;, &#34;Hello World&#34;)&#xA;&#xA;// Simple Async Subscriber&#xA;c.Subscribe(&#34;foo&#34;, func(s string) {&#xA;    fmt.Printf(&#34;Received a message: %s\n&#34;, s)&#xA;})&#xA;&#xA;// EncodedConn can Publish any raw Go type using the registered Encoder&#xA;type person struct {&#xA;     Name     string&#xA;     Address  string&#xA;     Age      int&#xA;}&#xA;&#xA;// Go type Subscriber&#xA;c.Subscribe(&#34;hello&#34;, func(p *person) {&#xA;    fmt.Printf(&#34;Received a person: %+v\n&#34;, p)&#xA;})&#xA;&#xA;me := &amp;amp;person{Name: &#34;derek&#34;, Age: 22, Address: &#34;140 New Montgomery Street, San Francisco, CA&#34;}&#xA;&#xA;// Go type Publisher&#xA;c.Publish(&#34;hello&#34;, me)&#xA;&#xA;// Unsubscribe&#xA;sub, err := c.Subscribe(&#34;foo&#34;, nil)&#xA;// ...&#xA;sub.Unsubscribe()&#xA;&#xA;// Requests&#xA;var response string&#xA;err = c.Request(&#34;help&#34;, &#34;help me&#34;, &amp;amp;response, 10*time.Millisecond)&#xA;if err != nil {&#xA;    fmt.Printf(&#34;Request failed: %v\n&#34;, err)&#xA;}&#xA;&#xA;// Replying&#xA;c.Subscribe(&#34;help&#34;, func(subj, reply string, msg string) {&#xA;    c.Publish(reply, &#34;I can help!&#34;)&#xA;})&#xA;&#xA;// Close connection&#xA;c.Close();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;New Authentication (Nkeys and User Credentials)&lt;/h2&gt; &#xA;&lt;p&gt;This requires server with version &amp;gt;= 2.0.0&lt;/p&gt; &#xA;&lt;p&gt;NATS servers have a new security and authentication mechanism to authenticate with user credentials and Nkeys. The simplest form is to use the helper method UserCredentials(credsFilepath).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;nc, err := nats.Connect(url, nats.UserCredentials(&#34;user.creds&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The helper methods creates two callback handlers to present the user JWT and sign the nonce challenge from the server. The core client library never has direct access to your private key and simply performs the callback for signing the server challenge. The helper will load and wipe and erase memory it uses for each connect or reconnect.&lt;/p&gt; &#xA;&lt;p&gt;The helper also can take two entries, one for the JWT and one for the NKey seed file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;nc, err := nats.Connect(url, nats.UserCredentials(&#34;user.jwt&#34;, &#34;user.nk&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set the callback handlers directly and manage challenge signing directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;nc, err := nats.Connect(url, nats.UserJWT(jwtCB, sigCB))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bare Nkeys are also supported. The nkey seed should be in a read only file, e.g. seed.txt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; cat seed.txt&#xA;# This is my seed nkey!&#xA;SUAGMJH5XLGZKQQWAWKRZJIGMOU4HPFUYLXJMXOO5NLFEO2OOQJ5LPRDPM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a helper function which will load and decode and do the proper signing for the server nonce. It will clear memory in between invocations. You can choose to use the low level option and provide the public key and a signature callback on your own.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;opt, err := nats.NkeyOptionFromSeed(&#34;seed.txt&#34;)&#xA;nc, err := nats.Connect(serverUrl, opt)&#xA;&#xA;// Direct&#xA;nc, err := nats.Connect(serverUrl, nats.Nkey(pubNkey, sigCB))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TLS&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// tls as a scheme will enable secure connections by default. This will also verify the server name.&#xA;nc, err := nats.Connect(&#34;tls://nats.demo.io:4443&#34;)&#xA;&#xA;// If you are using a self-signed certificate, you need to have a tls.Config with RootCAs setup.&#xA;// We provide a helper method to make this case easier.&#xA;nc, err = nats.Connect(&#34;tls://localhost:4443&#34;, nats.RootCAs(&#34;./configs/certs/ca.pem&#34;))&#xA;&#xA;// If the server requires client certificate, there is an helper function for that too:&#xA;cert := nats.ClientCert(&#34;./configs/certs/client-cert.pem&#34;, &#34;./configs/certs/client-key.pem&#34;)&#xA;nc, err = nats.Connect(&#34;tls://localhost:4443&#34;, cert)&#xA;&#xA;// You can also supply a complete tls.Config&#xA;&#xA;certFile := &#34;./configs/certs/client-cert.pem&#34;&#xA;keyFile := &#34;./configs/certs/client-key.pem&#34;&#xA;cert, err := tls.LoadX509KeyPair(certFile, keyFile)&#xA;if err != nil {&#xA;    t.Fatalf(&#34;error parsing X509 certificate/key pair: %v&#34;, err)&#xA;}&#xA;&#xA;config := &amp;amp;tls.Config{&#xA;    ServerName: &#x9;opts.Host,&#xA;    Certificates: &#x9;[]tls.Certificate{cert},&#xA;    RootCAs:    &#x9;pool,&#xA;    MinVersion: &#x9;tls.VersionTLS12,&#xA;}&#xA;&#xA;nc, err = nats.Connect(&#34;nats://localhost:4443&#34;, nats.Secure(config))&#xA;if err != nil {&#xA;&#x9;t.Fatalf(&#34;Got an error on Connect with Secure Options: %+v\n&#34;, err)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Go Channels (netchan)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;nc, _ := nats.Connect(nats.DefaultURL)&#xA;ec, _ := nats.NewEncodedConn(nc, nats.JSON_ENCODER)&#xA;defer ec.Close()&#xA;&#xA;type person struct {&#xA;     Name     string&#xA;     Address  string&#xA;     Age      int&#xA;}&#xA;&#xA;recvCh := make(chan *person)&#xA;ec.BindRecvChan(&#34;hello&#34;, recvCh)&#xA;&#xA;sendCh := make(chan *person)&#xA;ec.BindSendChan(&#34;hello&#34;, sendCh)&#xA;&#xA;me := &amp;amp;person{Name: &#34;derek&#34;, Age: 22, Address: &#34;140 New Montgomery Street&#34;}&#xA;&#xA;// Send via Go channels&#xA;sendCh &amp;lt;- me&#xA;&#xA;// Receive via Go channels&#xA;who := &amp;lt;- recvCh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Wildcard Subscriptions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;// &#34;*&#34; matches any token, at any level of the subject.&#xA;nc.Subscribe(&#34;foo.*.baz&#34;, func(m *Msg) {&#xA;    fmt.Printf(&#34;Msg received on [%s] : %s\n&#34;, m.Subject, string(m.Data));&#xA;})&#xA;&#xA;nc.Subscribe(&#34;foo.bar.*&#34;, func(m *Msg) {&#xA;    fmt.Printf(&#34;Msg received on [%s] : %s\n&#34;, m.Subject, string(m.Data));&#xA;})&#xA;&#xA;// &#34;&amp;gt;&#34; matches any length of the tail of a subject, and can only be the last token&#xA;// E.g. &#39;foo.&amp;gt;&#39; will match &#39;foo.bar&#39;, &#39;foo.bar.baz&#39;, &#39;foo.foo.bar.bax.22&#39;&#xA;nc.Subscribe(&#34;foo.&amp;gt;&#34;, func(m *Msg) {&#xA;    fmt.Printf(&#34;Msg received on [%s] : %s\n&#34;, m.Subject, string(m.Data));&#xA;})&#xA;&#xA;// Matches all of the above&#xA;nc.Publish(&#34;foo.bar.baz&#34;, []byte(&#34;Hello World&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Queue Groups&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// All subscriptions with the same queue name will form a queue group.&#xA;// Each message will be delivered to only one subscriber per queue group,&#xA;// using queuing semantics. You can have as many queue groups as you wish.&#xA;// Normal subscribers will continue to work as expected.&#xA;&#xA;nc.QueueSubscribe(&#34;foo&#34;, &#34;job_workers&#34;, func(_ *Msg) {&#xA;  received += 1;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;// Normally, the library will return an error when trying to connect and&#xA;// there is no server running. The RetryOnFailedConnect option will set&#xA;// the connection in reconnecting state if it failed to connect right away.&#xA;nc, err := nats.Connect(nats.DefaultURL,&#xA;    nats.RetryOnFailedConnect(true),&#xA;    nats.MaxReconnects(10),&#xA;    nats.ReconnectWait(time.Second),&#xA;    nats.ReconnectHandler(func(_ *nats.Conn) {&#xA;        // Note that this will be invoked for the first asynchronous connect.&#xA;    }))&#xA;if err != nil {&#xA;    // Should not return an error even if it can&#39;t connect, but you still&#xA;    // need to check in case there are some configuration errors.&#xA;}&#xA;&#xA;// Flush connection to server, returns when all messages have been processed.&#xA;nc.Flush()&#xA;fmt.Println(&#34;All clear!&#34;)&#xA;&#xA;// FlushTimeout specifies a timeout value as well.&#xA;err := nc.FlushTimeout(1*time.Second)&#xA;if err != nil {&#xA;    fmt.Println(&#34;All clear!&#34;)&#xA;} else {&#xA;    fmt.Println(&#34;Flushed timed out!&#34;)&#xA;}&#xA;&#xA;// Auto-unsubscribe after MAX_WANTED messages received&#xA;const MAX_WANTED = 10&#xA;sub, err := nc.Subscribe(&#34;foo&#34;)&#xA;sub.AutoUnsubscribe(MAX_WANTED)&#xA;&#xA;// Multiple connections&#xA;nc1 := nats.Connect(&#34;nats://host1:4222&#34;)&#xA;nc2 := nats.Connect(&#34;nats://host2:4222&#34;)&#xA;&#xA;nc1.Subscribe(&#34;foo&#34;, func(m *Msg) {&#xA;    fmt.Printf(&#34;Received a message: %s\n&#34;, string(m.Data))&#xA;})&#xA;&#xA;nc2.Publish(&#34;foo&#34;, []byte(&#34;Hello World!&#34;));&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Clustered Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;var servers = &#34;nats://localhost:1222, nats://localhost:1223, nats://localhost:1224&#34;&#xA;&#xA;nc, err := nats.Connect(servers)&#xA;&#xA;// Optionally set ReconnectWait and MaxReconnect attempts.&#xA;// This example means 10 seconds total per backend.&#xA;nc, err = nats.Connect(servers, nats.MaxReconnects(5), nats.ReconnectWait(2 * time.Second))&#xA;&#xA;// You can also add some jitter for the reconnection.&#xA;// This call will add up to 500 milliseconds for non TLS connections and 2 seconds for TLS connections.&#xA;// If not specified, the library defaults to 100 milliseconds and 1 second, respectively.&#xA;nc, err = nats.Connect(servers, nats.ReconnectJitter(500*time.Millisecond, 2*time.Second))&#xA;&#xA;// You can also specify a custom reconnect delay handler. If set, the library will invoke it when it has tried&#xA;// all URLs in its list. The value returned will be used as the total sleep time, so add your own jitter.&#xA;// The library will pass the number of times it went through the whole list.&#xA;nc, err = nats.Connect(servers, nats.CustomReconnectDelay(func(attempts int) time.Duration {&#xA;    return someBackoffFunction(attempts)&#xA;}))&#xA;&#xA;// Optionally disable randomization of the server pool&#xA;nc, err = nats.Connect(servers, nats.DontRandomize())&#xA;&#xA;// Setup callbacks to be notified on disconnects, reconnects and connection closed.&#xA;nc, err = nats.Connect(servers,&#xA;&#x9;nats.DisconnectErrHandler(func(nc *nats.Conn, err error) {&#xA;&#x9;&#x9;fmt.Printf(&#34;Got disconnected! Reason: %q\n&#34;, err)&#xA;&#x9;}),&#xA;&#x9;nats.ReconnectHandler(func(nc *nats.Conn) {&#xA;&#x9;&#x9;fmt.Printf(&#34;Got reconnected to %v!\n&#34;, nc.ConnectedUrl())&#xA;&#x9;}),&#xA;&#x9;nats.ClosedHandler(func(nc *nats.Conn) {&#xA;&#x9;&#x9;fmt.Printf(&#34;Connection closed. Reason: %q\n&#34;, nc.LastError())&#xA;&#x9;})&#xA;)&#xA;&#xA;// When connecting to a mesh of servers with auto-discovery capabilities,&#xA;// you may need to provide a username/password or token in order to connect&#xA;// to any server in that mesh when authentication is required.&#xA;// Instead of providing the credentials in the initial URL, you will use&#xA;// new option setters:&#xA;nc, err = nats.Connect(&#34;nats://localhost:4222&#34;, nats.UserInfo(&#34;foo&#34;, &#34;bar&#34;))&#xA;&#xA;// For token based authentication:&#xA;nc, err = nats.Connect(&#34;nats://localhost:4222&#34;, nats.Token(&#34;S3cretT0ken&#34;))&#xA;&#xA;// You can even pass the two at the same time in case one of the server&#xA;// in the mesh requires token instead of user name and password.&#xA;nc, err = nats.Connect(&#34;nats://localhost:4222&#34;,&#xA;    nats.UserInfo(&#34;foo&#34;, &#34;bar&#34;),&#xA;    nats.Token(&#34;S3cretT0ken&#34;))&#xA;&#xA;// Note that if credentials are specified in the initial URLs, they take&#xA;// precedence on the credentials specified through the options.&#xA;// For instance, in the connect call below, the client library will use&#xA;// the user &#34;my&#34; and password &#34;pwd&#34; to connect to localhost:4222, however,&#xA;// it will use username &#34;foo&#34; and password &#34;bar&#34; when (re)connecting to&#xA;// a different server URL that it got as part of the auto-discovery.&#xA;nc, err = nats.Connect(&#34;nats://my:pwd@localhost:4222&#34;, nats.UserInfo(&#34;foo&#34;, &#34;bar&#34;))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Context support (+Go 1.7)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ctx, cancel := context.WithTimeout(context.Background(), 2*time.Second)&#xA;defer cancel()&#xA;&#xA;nc, err := nats.Connect(nats.DefaultURL)&#xA;&#xA;// Request with context&#xA;msg, err := nc.RequestWithContext(ctx, &#34;foo&#34;, []byte(&#34;bar&#34;))&#xA;&#xA;// Synchronous subscriber with context&#xA;sub, err := nc.SubscribeSync(&#34;foo&#34;)&#xA;msg, err := sub.NextMsgWithContext(ctx)&#xA;&#xA;// Encoded Request with context&#xA;c, err := nats.NewEncodedConn(nc, nats.JSON_ENCODER)&#xA;type request struct {&#xA;&#x9;Message string `json:&#34;message&#34;`&#xA;}&#xA;type response struct {&#xA;&#x9;Code int `json:&#34;code&#34;`&#xA;}&#xA;req := &amp;amp;request{Message: &#34;Hello&#34;}&#xA;resp := &amp;amp;response{}&#xA;err := c.RequestWithContext(ctx, &#34;foo&#34;, req, resp)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless otherwise noted, the NATS source files are distributed under the Apache Version 2.0 license found in the LICENSE file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fnats-io%2Fgo-nats?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fnats-io%2Fgo-nats.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>shirou/gopsutil</title>
    <updated>2022-10-14T01:34:37Z</updated>
    <id>tag:github.com,2022-10-14:/shirou/gopsutil</id>
    <link href="https://github.com/shirou/gopsutil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;psutil for golang&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gopsutil: psutil for golang&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shirou/gopsutil/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/shirou/gopsutil/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/shirou/gopsutil?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/shirou/gopsutil/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/shirou/gopsutil/v3&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/shirou/gopsutil/v3.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godocs.io/github.com/shirou/gopsutil/v3&#34;&gt;&lt;img src=&#34;https://godocs.io/github.com/shirou/gopsutil/v3?status.svg?sanitize=true&#34; alt=&#34;Go Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://calver.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/calver-vMAJOR.YY.MM-22bfda.svg?sanitize=true&#34; alt=&#34;Calendar Versioning&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a port of psutil (&lt;a href=&#34;https://github.com/giampaolo/psutil&#34;&gt;https://github.com/giampaolo/psutil&lt;/a&gt;). The challenge is porting all psutil functions on some architectures.&lt;/p&gt; &#xA;&lt;h2&gt;v3 migration&lt;/h2&gt; &#xA;&lt;p&gt;From v3.20.10, gopsutil becomes v3 which breaks backwards compatibility. See &lt;a href=&#34;https://raw.githubusercontent.com/shirou/gopsutil/master/_tools/v3migration/v3Changes.md&#34;&gt;v3Changes.md&lt;/a&gt; for more detailed changes.&lt;/p&gt; &#xA;&lt;h2&gt;Tag semantics&lt;/h2&gt; &#xA;&lt;p&gt;gopsutil tag policy is almost same as Semantic Versioning, but automatically increases like &lt;a href=&#34;https://calver.org/&#34;&gt;Ubuntu versioning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, v2.17.04 means&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v2: major version&lt;/li&gt; &#xA; &lt;li&gt;17: release year, 2017&lt;/li&gt; &#xA; &lt;li&gt;04: release month&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;gopsutil aims to keep backwards compatibility until major version change.&lt;/p&gt; &#xA;&lt;p&gt;Tagged at every end of month, but if there are only a few commits, it can be skipped.&lt;/p&gt; &#xA;&lt;h2&gt;Available Architectures&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FreeBSD i386/amd64/arm&lt;/li&gt; &#xA; &lt;li&gt;Linux i386/amd64/arm(raspberry pi)&lt;/li&gt; &#xA; &lt;li&gt;Windows i386/amd64/arm/arm64&lt;/li&gt; &#xA; &lt;li&gt;Darwin amd64/arm64&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD amd64 (Thank you @mpfz0r!)&lt;/li&gt; &#xA; &lt;li&gt;Solaris amd64 (developed and tested on SmartOS/Illumos, Thank you @jen20!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These have partial support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU on DragonFly BSD (#893, Thank you @gballet!)&lt;/li&gt; &#xA; &lt;li&gt;host on Linux RISC-V (#896, Thank you @tklauser!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All works are implemented without cgo by porting C structs to golang structs.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;&#xA;    &#34;github.com/shirou/gopsutil/v3/mem&#34;&#xA;    // &#34;github.com/shirou/gopsutil/mem&#34;  // to use v2&#xA;)&#xA;&#xA;func main() {&#xA;    v, _ := mem.VirtualMemory()&#xA;&#xA;    // almost every return value is a struct&#xA;    fmt.Printf(&#34;Total: %v, Free:%v, UsedPercent:%f%%\n&#34;, v.Total, v.Free, v.UsedPercent)&#xA;&#xA;    // convert to JSON. String() is also implemented&#xA;    fmt.Println(v)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output is below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Total: 3179569152, Free:284233728, UsedPercent:84.508194%&#xA;{&#34;total&#34;:3179569152,&#34;available&#34;:492572672,&#34;used&#34;:2895335424,&#34;usedPercent&#34;:84.50819439828305, (snip...)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set an alternative location to &lt;code&gt;/proc&lt;/code&gt; by setting the &lt;code&gt;HOST_PROC&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;You can set an alternative location to &lt;code&gt;/sys&lt;/code&gt; by setting the &lt;code&gt;HOST_SYS&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;You can set an alternative location to &lt;code&gt;/etc&lt;/code&gt; by setting the &lt;code&gt;HOST_ETC&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;You can set an alternative location to &lt;code&gt;/var&lt;/code&gt; by setting the &lt;code&gt;HOST_VAR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;You can set an alternative location to &lt;code&gt;/run&lt;/code&gt; by setting the &lt;code&gt;HOST_RUN&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;You can set an alternative location to &lt;code&gt;/dev&lt;/code&gt; by setting the &lt;code&gt;HOST_DEV&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;You can set an alternative location to &lt;code&gt;/proc/N/mountinfo&lt;/code&gt; by setting the &lt;code&gt;HOST_PROC_MOUNTINFO&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://pkg.go.dev/github.com/shirou/gopsutil/v3&#34;&gt;https://pkg.go.dev/github.com/shirou/gopsutil/v3&lt;/a&gt; or &lt;a href=&#34;https://godocs.io/github.com/shirou/gopsutil/v3&#34;&gt;https://godocs.io/github.com/shirou/gopsutil/v3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go1.16 or above is required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More Info&lt;/h2&gt; &#xA;&lt;p&gt;Several methods have been added which are not present in psutil, but will provide useful information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;host/HostInfo() (linux) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Hostname&lt;/li&gt; &#xA;   &lt;li&gt;Uptime&lt;/li&gt; &#xA;   &lt;li&gt;Procs&lt;/li&gt; &#xA;   &lt;li&gt;OS (ex: &#34;linux&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;Platform (ex: &#34;ubuntu&#34;, &#34;arch&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;PlatformFamily (ex: &#34;debian&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;PlatformVersion (ex: &#34;Ubuntu 13.10&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;VirtualizationSystem (ex: &#34;LXC&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;VirtualizationRole (ex: &#34;guest&#34;/&#34;host&#34;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;IOCounters &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Label (linux only) The registered &lt;a href=&#34;https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-block-dm&#34;&gt;device mapper name&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;cpu/CPUInfo() (linux, freebsd) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CPU (ex: 0, 1, ...)&lt;/li&gt; &#xA;   &lt;li&gt;VendorID (ex: &#34;GenuineIntel&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;Family&lt;/li&gt; &#xA;   &lt;li&gt;Model&lt;/li&gt; &#xA;   &lt;li&gt;Stepping&lt;/li&gt; &#xA;   &lt;li&gt;PhysicalID&lt;/li&gt; &#xA;   &lt;li&gt;CoreID&lt;/li&gt; &#xA;   &lt;li&gt;Cores (ex: 2)&lt;/li&gt; &#xA;   &lt;li&gt;ModelName (ex: &#34;Intel(R) Core(TM) i7-2640M CPU @ 2.80GHz&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;Mhz&lt;/li&gt; &#xA;   &lt;li&gt;CacheSize&lt;/li&gt; &#xA;   &lt;li&gt;Flags (ex: &#34;fpu vme de pse tsc msr pae mce cx8 ...&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;Microcode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;load/Avg() (linux, freebsd, solaris) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Load1&lt;/li&gt; &#xA;   &lt;li&gt;Load5&lt;/li&gt; &#xA;   &lt;li&gt;Load15&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;docker/GetDockerIDList() (linux only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;container id list ([]string)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;docker/CgroupCPU() (linux only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;user&lt;/li&gt; &#xA;   &lt;li&gt;system&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;docker/CgroupMem() (linux only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;various status&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;net_protocols (linux only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;system wide stats on network protocols (i.e IP, TCP, UDP, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;sourced from /proc/net/snmp&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;iptables nf_conntrack (linux only) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;system wide stats on netfilter conntrack module&lt;/li&gt; &#xA;   &lt;li&gt;sourced from /proc/sys/net/netfilter/nf_conntrack_count&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some code is ported from Ohai. many thanks.&lt;/p&gt; &#xA;&lt;h2&gt;Current Status&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;x: works&lt;/li&gt; &#xA; &lt;li&gt;b: almost works, but something is broken&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;th&gt;FreeBSD&lt;/th&gt; &#xA;   &lt;th&gt;OpenBSD&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;Solaris&lt;/th&gt; &#xA;   &lt;th&gt;Plan 9&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cpu_times&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;b&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cpu_count&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cpu_percent&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cpu_times_percent&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;virtual_memory&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;b&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;swap_memory&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disk_partitions&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disk_io_counters&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disk_usage&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;net_io_counters&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;b&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;boot_time&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;users&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pids&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pid_exists&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;net_connections&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;net_protocols&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;net_if_addrs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;net_if_stats&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;netfilter_conntrack&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Process class&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;name&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;th&gt;FreeBSD&lt;/th&gt; &#xA;   &lt;th&gt;OpenBSD&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pid&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ppid&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cmdline&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;create_time&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;status&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cwd&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exe&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uids&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;gids&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;terminal&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;io_counters&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nice&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;num_fds&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;num_ctx_switches&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;num_threads&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cpu_times&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;memory_info&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;memory_info_ex&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;memory_maps&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;open_files&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;send_signal&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;suspend&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;resume&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;terminate&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kill&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;username&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ionice&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rlimit&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;num_handlers&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;threads&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cpu_percent&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cpu_affinity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;memory_percent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;parent&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;children&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;connections&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;is_running&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;page_faults&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Original Metrics&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;item&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;th&gt;FreeBSD&lt;/th&gt; &#xA;   &lt;th&gt;OpenBSD&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;Solaris&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;HostInfo&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hostname&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uptime&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;process&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;os&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;platform&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;platformfamily&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;virtualization&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CPU&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VendorID&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Family&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Model&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stepping&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PhysicalID&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CoreID&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cores&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ModelName&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Microcode&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;LoadAvg&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Load1&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Load5&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Load15&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;GetDockerID&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;container id&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CgroupsCPU&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;user&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;system&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CgroupsMem&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;various&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;future work &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;process_iter&lt;/li&gt; &#xA;   &lt;li&gt;wait_procs&lt;/li&gt; &#xA;   &lt;li&gt;Process class &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;as_dict&lt;/li&gt; &#xA;     &lt;li&gt;wait&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;New BSD License (same as psutil)&lt;/p&gt; &#xA;&lt;h2&gt;Related Works&lt;/h2&gt; &#xA;&lt;p&gt;I have been influenced by the following great works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;psutil: &lt;a href=&#34;https://github.com/giampaolo/psutil&#34;&gt;https://github.com/giampaolo/psutil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dstat: &lt;a href=&#34;https://github.com/dagwieers/dstat&#34;&gt;https://github.com/dagwieers/dstat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;gosigar: &lt;a href=&#34;https://github.com/cloudfoundry/gosigar/&#34;&gt;https://github.com/cloudfoundry/gosigar/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;goprocinfo: &lt;a href=&#34;https://github.com/c9s/goprocinfo&#34;&gt;https://github.com/c9s/goprocinfo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;go-ps: &lt;a href=&#34;https://github.com/mitchellh/go-ps&#34;&gt;https://github.com/mitchellh/go-ps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;ohai: &lt;a href=&#34;https://github.com/opscode/ohai/&#34;&gt;https://github.com/opscode/ohai/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;bosun: &lt;a href=&#34;https://github.com/bosun-monitor/bosun/tree/master/cmd/scollector/collectors&#34;&gt;https://github.com/bosun-monitor/bosun/tree/master/cmd/scollector/collectors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;mackerel: &lt;a href=&#34;https://github.com/mackerelio/mackerel-agent/tree/master/metrics&#34;&gt;https://github.com/mackerelio/mackerel-agent/tree/master/metrics&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to Contribute&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (git checkout -b my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (git commit -am &#39;Add some feature&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (git push origin my-new-feature)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;English is not my native language, so PRs correcting grammar or spelling are welcome and appreciated.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cilium/cilium</title>
    <updated>2022-10-14T01:34:37Z</updated>
    <id>tag:github.com,2022-10-14:/cilium/cilium</id>
    <link href="https://github.com/cilium/cilium" rel="alternate"></link>
    <summary type="html">&lt;p&gt;eBPF-based Networking, Security, and Observability&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://cdn.jsdelivr.net/gh/cilium/cilium@master/Documentation/images/logo.png&#34; width=&#34;350&#34; alt=&#34;Cilium Logo&#34;&gt; &#xA; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/cilium/cilium@master/Documentation/images/logo-dark.png&#34; width=&#34;350&#34; alt=&#34;Cilium Logo&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;|cii| |go-report| |clomonitor| |artifacthub| |slack| |go-doc| |rtd| |apache| |bsd| |gpl|&lt;/p&gt; &#xA;&lt;p&gt;Cilium is a networking, observability, and security solution with an eBPF-based dataplane. It provides a simple flat Layer 3 network with the ability to span multiple clusters in either a native routing or overlay mode. It is L7-protocol aware and can enforce network policies on L3-L7 using an identity based security model that is decoupled from network addressing.&lt;/p&gt; &#xA;&lt;p&gt;Cilium implements distributed load balancing for traffic between pods and to external services, and is able to fully replace kube-proxy, using efficient hash tables in eBPF allowing for almost unlimited scale. It also supports advanced functionality like integrated ingress and egress gateway, bandwidth management and service mesh, and provides deep network and security visibility and monitoring.&lt;/p&gt; &#xA;&lt;p&gt;A new Linux kernel technology called eBPF_ is at the foundation of Cilium. It supports dynamic insertion of eBPF bytecode into the Linux kernel at various integration points such as: network IO, application sockets, and tracepoints to implement security, networking and visibility logic. eBPF is highly efficient and flexible. To learn more about eBPF, visit &lt;code&gt;eBPF.io&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: Documentation/images/cilium-overview.png :alt: Overview of Cilium features for networking, observability, service mesh, and runtime security&lt;/p&gt; &#xA;&lt;h1&gt;Stable Releases&lt;/h1&gt; &#xA;&lt;p&gt;The Cilium community maintains minor stable releases for the last three major Cilium versions. Older Cilium stable versions from major releases prior to that are considered EOL.&lt;/p&gt; &#xA;&lt;p&gt;For upgrades to new major releases please consult the &lt;code&gt;Cilium Upgrade Guide &amp;lt;https://docs.cilium.io/en/stable/operations/upgrade/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;Listed below are the actively maintained release branches along with their latest minor release, corresponding image pull tags and their release notes:&lt;/p&gt; &#xA;&lt;p&gt;+---------------------------------------------------------+------------+------------------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------+ | &lt;code&gt;v1.12 &amp;lt;https://github.com/cilium/cilium/tree/v1.12&amp;gt;&lt;/code&gt;__ | 2022-09-14 | &lt;code&gt;quay.io/cilium/cilium:v1.12.2&lt;/code&gt; | &lt;code&gt;Release Notes &amp;lt;https://github.com/cilium/cilium/releases/tag/v1.12.2&amp;gt;&lt;/code&gt;__ | &lt;code&gt;General Announcement &amp;lt;https://isovalent.com/blog/post/cilium-release-112&amp;gt;&lt;/code&gt;__ | +---------------------------------------------------------+------------+------------------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------+ | &lt;code&gt;v1.11 &amp;lt;https://github.com/cilium/cilium/tree/v1.11&amp;gt;&lt;/code&gt;__ | 2022-09-14 | &lt;code&gt;quay.io/cilium/cilium:v1.11.9&lt;/code&gt; | &lt;code&gt;Release Notes &amp;lt;https://github.com/cilium/cilium/releases/tag/v1.11.9&amp;gt;&lt;/code&gt;__ | &lt;code&gt;General Announcement &amp;lt;https://isovalent.com/blog/post/2021-12-release-111&amp;gt;&lt;/code&gt;__ | +---------------------------------------------------------+------------+------------------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------+ | &lt;code&gt;v1.10 &amp;lt;https://github.com/cilium/cilium/tree/v1.10&amp;gt;&lt;/code&gt;__ | 2022-09-14 | &lt;code&gt;quay.io/cilium/cilium:v1.10.15&lt;/code&gt; | &lt;code&gt;Release Notes &amp;lt;https://github.com/cilium/cilium/releases/tag/v1.10.15&amp;gt;&lt;/code&gt;__ | &lt;code&gt;General Announcement &amp;lt;https://cilium.io/blog/2021/05/20/cilium-110&amp;gt;&lt;/code&gt;__ | +---------------------------------------------------------+------------+------------------------------------+----------------------------------------------------------------------------+--------------------------------------------------------------------------------+&lt;/p&gt; &#xA;&lt;h1&gt;Functionality Overview&lt;/h1&gt; &#xA;&lt;p&gt;.. begin-functionality-overview&lt;/p&gt; &#xA;&lt;h2&gt;Protect and secure APIs transparently&lt;/h2&gt; &#xA;&lt;p&gt;Ability to secure modern application protocols such as REST/HTTP, gRPC and Kafka. Traditional firewalls operates at Layer 3 and 4. A protocol running on a particular port is either completely trusted or blocked entirely. Cilium provides the ability to filter on individual application protocol requests such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Allow all HTTP requests with method &lt;code&gt;GET&lt;/code&gt; and path &lt;code&gt;/public/.*&lt;/code&gt;. Deny all other requests.&lt;/li&gt; &#xA; &lt;li&gt;Allow &lt;code&gt;service1&lt;/code&gt; to produce on Kafka topic &lt;code&gt;topic1&lt;/code&gt; and &lt;code&gt;service2&lt;/code&gt; to consume on &lt;code&gt;topic1&lt;/code&gt;. Reject all other Kafka messages.&lt;/li&gt; &#xA; &lt;li&gt;Require the HTTP header &lt;code&gt;X-Token: [0-9]+&lt;/code&gt; to be present in all REST calls.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See the section &lt;code&gt;Layer 7 Policy&lt;/code&gt;_ in our documentation for the latest list of supported protocols and examples on how to use it.&lt;/p&gt; &#xA;&lt;h2&gt;Secure service to service communication based on identities&lt;/h2&gt; &#xA;&lt;p&gt;Modern distributed applications rely on technologies such as application containers to facilitate agility in deployment and scale out on demand. This results in a large number of application containers to be started in a short period of time. Typical container firewalls secure workloads by filtering on source IP addresses and destination ports. This concept requires the firewalls on all servers to be manipulated whenever a container is started anywhere in the cluster.&lt;/p&gt; &#xA;&lt;p&gt;In order to avoid this situation which limits scale, Cilium assigns a security identity to groups of application containers which share identical security policies. The identity is then associated with all network packets emitted by the application containers, allowing to validate the identity at the receiving node. Security identity management is performed using a key-value store.&lt;/p&gt; &#xA;&lt;h2&gt;Secure access to and from external services&lt;/h2&gt; &#xA;&lt;p&gt;Label based security is the tool of choice for cluster internal access control. In order to secure access to and from external services, traditional CIDR based security policies for both ingress and egress are supported. This allows to limit access to and from application containers to particular IP ranges.&lt;/p&gt; &#xA;&lt;h2&gt;Simple Networking&lt;/h2&gt; &#xA;&lt;p&gt;A simple flat Layer 3 network with the ability to span multiple clusters connects all application containers. IP allocation is kept simple by using host scope allocators. This means that each host can allocate IPs without any coordination between hosts.&lt;/p&gt; &#xA;&lt;p&gt;The following multi node networking models are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Overlay:&lt;/strong&gt; Encapsulation-based virtual network spanning all hosts. Currently VXLAN and Geneve are baked in but all encapsulation formats supported by Linux can be enabled.&lt;/p&gt; &lt;p&gt;When to use this mode: This mode has minimal infrastructure and integration requirements. It works on almost any network infrastructure as the only requirement is IP connectivity between hosts which is typically already given.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Native Routing:&lt;/strong&gt; Use of the regular routing table of the Linux host. The network is required to be capable to route the IP addresses of the application containers.&lt;/p&gt; &lt;p&gt;When to use this mode: This mode is for advanced users and requires some awareness of the underlying networking infrastructure. This mode works well with:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Native IPv6 networks&lt;/li&gt; &#xA;   &lt;li&gt;In conjunction with cloud network routers&lt;/li&gt; &#xA;   &lt;li&gt;If you are already running routing daemons&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Load Balancing&lt;/h2&gt; &#xA;&lt;p&gt;Cilium implements distributed load balancing for traffic between application containers and to external services and is able to fully replace components such as kube-proxy. The load balancing is implemented in eBPF using efficient hashtables allowing for almost unlimited scale.&lt;/p&gt; &#xA;&lt;p&gt;For north-south type load balancing, Cilium&#39;s eBPF implementation is optimized for maximum performance, can be attached to XDP (eXpress Data Path), and supports direct server return (DSR) as well as Maglev consistent hashing if the load balancing operation is not performed on the source host.&lt;/p&gt; &#xA;&lt;p&gt;For east-west type load balancing, Cilium performs efficient service-to-backend translation right in the Linux kernel&#39;s socket layer (e.g. at TCP connect time) such that per-packet NAT operations overhead can be avoided in lower layers.&lt;/p&gt; &#xA;&lt;h2&gt;Bandwidth Management&lt;/h2&gt; &#xA;&lt;p&gt;Cilium implements bandwidth management through efficient EDT-based (Earliest Departure Time) rate-limiting with eBPF for container traffic that is egressing a node. This allows to significantly reduce transmission tail latencies for applications and to avoid locking under multi-queue NICs compared to traditional approaches such as HTB (Hierarchy Token Bucket) or TBF (Token Bucket Filter) as used in the bandwidth CNI plugin, for example.&lt;/p&gt; &#xA;&lt;h2&gt;Monitoring and Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The ability to gain visibility and to troubleshoot issues is fundamental to the operation of any distributed system. While we learned to love tools like &lt;code&gt;tcpdump&lt;/code&gt; and &lt;code&gt;ping&lt;/code&gt; and while they will always find a special place in our hearts, we strive to provide better tooling for troubleshooting. This includes tooling to provide:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Event monitoring with metadata: When a packet is dropped, the tool doesn&#39;t just report the source and destination IP of the packet, the tool provides the full label information of both the sender and receiver among a lot of other information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Metrics export via Prometheus: Key metrics are exported via Prometheus for integration with your existing dashboards.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Hubble_: An observability platform specifically written for Cilium. It provides service dependency maps, operational monitoring and alerting, and application and security visibility based on flow logs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;.. _Hubble: &lt;a href=&#34;https://github.com/cilium/hubble/&#34;&gt;https://github.com/cilium/hubble/&lt;/a&gt; .. _&lt;code&gt;Layer 7 Policy&lt;/code&gt;: &lt;a href=&#34;http://docs.cilium.io/en/stable/policy/#layer-7&#34;&gt;http://docs.cilium.io/en/stable/policy/#layer-7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. end-functionality-overview&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Why Cilium?&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Getting Started&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Architecture and Concepts&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Installing Cilium&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Frequently Asked Questions&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;Contributing_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What is eBPF and XDP?&lt;/h1&gt; &#xA;&lt;p&gt;Berkeley Packet Filter (BPF) is a Linux kernel bytecode interpreter originally introduced to filter network packets, e.g. for tcpdump and socket filters. The BPF instruction set and surrounding architecture has recently been significantly reworked with additional data structures such as hash tables and arrays for keeping state as well as additional actions to support packet mangling, forwarding, encapsulation, etc. Furthermore, a compiler back end for LLVM allows for programs to be written in C and compiled into BPF instructions. An in-kernel verifier ensures that BPF programs are safe to run and a JIT compiler converts the BPF bytecode to CPU architecture specific instructions for native execution efficiency. BPF programs can be run at various hooking points in the kernel such as for incoming packets, outgoing packets, system calls, kprobes, uprobes, tracepoints, etc.&lt;/p&gt; &#xA;&lt;p&gt;BPF continues to evolve and gain additional capabilities with each new Linux release. Cilium leverages BPF to perform core data path filtering, mangling, monitoring and redirection, and requires BPF capabilities that are in any Linux kernel version 4.8.0 or newer (the latest current stable Linux kernel is 4.14.x).&lt;/p&gt; &#xA;&lt;p&gt;Many Linux distributions including CoreOS, Debian, Docker&#39;s LinuxKit, Fedora, openSUSE and Ubuntu already ship kernel versions &amp;gt;= 4.8.x. You can check your Linux kernel version by running &lt;code&gt;uname -a&lt;/code&gt;. If you are not yet running a recent enough kernel, check the Documentation of your Linux distribution on how to run Linux kernel 4.9.x or later.&lt;/p&gt; &#xA;&lt;p&gt;To read up on the necessary kernel versions to run the BPF runtime, see the section Prerequisites_.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://cdn.jsdelivr.net/gh/cilium/cilium@master/Documentation/images/bpf-overview.png&#34;&gt;https://cdn.jsdelivr.net/gh/cilium/cilium@master/Documentation/images/bpf-overview.png&lt;/a&gt; :align: center&lt;/p&gt; &#xA;&lt;p&gt;XDP is a further step in evolution and enables to run a specific flavor of BPF programs from the network driver with direct access to the packet&#39;s DMA buffer. This is, by definition, the earliest possible point in the software stack, where programs can be attached to in order to allow for a programmable, high performance packet processor in the Linux kernel networking data path.&lt;/p&gt; &#xA;&lt;p&gt;Further information about BPF and XDP targeted for developers can be found in the &lt;code&gt;BPF and XDP Reference Guide&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;To know more about Cilium, it&#39;s extensions and use cases around Cilium and BPF take a look at &lt;code&gt;Further Readings &amp;lt;FURTHER_READINGS.rst&amp;gt;&lt;/code&gt;_ section.&lt;/p&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;h2&gt;Slack&lt;/h2&gt; &#xA;&lt;p&gt;Join the Cilium &lt;code&gt;Slack channel &amp;lt;https://cilium.herokuapp.com/&amp;gt;&lt;/code&gt;_ to chat with Cilium developers and other Cilium users. This is a good place to learn about Cilium, ask questions, and share your experiences.&lt;/p&gt; &#xA;&lt;h2&gt;Special Interest Groups (SIG)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;Special Interest groups &amp;lt;https://docs.cilium.io/en/stable/community/community/#special-interest-groups&amp;gt;&lt;/code&gt;_ for a list of all SIGs and their meeting times.&lt;/p&gt; &#xA;&lt;h2&gt;Weekly Developer meeting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The developer community is hanging out on zoom on a weekly basis to chat. Everybody is welcome.&lt;/li&gt; &#xA; &lt;li&gt;Weekly, Wednesday, 8:00 am PT, 11:00 am ET, 5:00 pm CEST&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Join zoom &amp;lt;https://zoom.us/j/596609673&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;eBPF &amp;amp; Cilium Office Hours livestream&lt;/h2&gt; &#xA;&lt;p&gt;We host a weekly community &lt;code&gt;YouTube livestream called eCHO &amp;lt;https://www.youtube.com/channel/UCJFUxkVQTBJh3LD1wYBWvuQ&amp;gt;&lt;/code&gt;_ which (very loosely!) stands for eBPF &amp;amp; Cilium Office Hours. Join us live, catch up with past episodes, or head over to the &lt;code&gt;eCHO repo &amp;lt;https://github.com/isovalent/eCHO&amp;gt;&lt;/code&gt;_ and let us know your ideas for topics we should cover.&lt;/p&gt; &#xA;&lt;h2&gt;Governance&lt;/h2&gt; &#xA;&lt;p&gt;The Cilium project is governed by a group of &lt;code&gt;Maintainers and Committers &amp;lt;https://raw.githubusercontent.com/cilium/cilium/master/MAINTAINERS.md&amp;gt;&lt;/code&gt;&lt;strong&gt;. How they are selected and govern is outlined in our &lt;code&gt;governance document &amp;lt;https://docs.cilium.io/en/latest/community/governance/commit_access/&amp;gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Adopters&lt;/h2&gt; &#xA;&lt;p&gt;A list of adopters of the Cilium project who are deploying it in production, and of their use cases, can be found in file &lt;code&gt;USERS.md &amp;lt;https://raw.githubusercontent.com/cilium/cilium/master/USERS.md&amp;gt;&lt;/code&gt;__.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Cilium maintains a &lt;code&gt;public roadmap &amp;lt;https://docs.cilium.io/en/latest/community/roadmap/&amp;gt;&lt;/code&gt;__. It gives a a high-level view of the main priorities for the project, the maturity of different features and projects, and how to influence the project direction.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;.. _apache-license: LICENSE .. _bsd-license: bpf/LICENSE.BSD-2-Clause .. _gpl-license: bpf/LICENSE.GPL-2.0&lt;/p&gt; &#xA;&lt;p&gt;The Cilium user space components are licensed under the &lt;code&gt;Apache License, Version 2.0 &amp;lt;apache-license_&amp;gt;&lt;/code&gt;&lt;strong&gt;. The BPF code templates are dual-licensed under the &lt;code&gt;General Public License, Version 2.0 (only) &amp;lt;gpl-license_&amp;gt;&lt;/code&gt;&lt;/strong&gt; and the &lt;code&gt;2-Clause BSD License &amp;lt;bsd-license_&amp;gt;&lt;/code&gt;__ (you can use the terms of either license, at your option).&lt;/p&gt; &#xA;&lt;p&gt;.. _&lt;code&gt;Why Cilium?&lt;/code&gt;: &lt;a href=&#34;http://docs.cilium.io/en/stable/intro/#why-cilium&#34;&gt;http://docs.cilium.io/en/stable/intro/#why-cilium&lt;/a&gt; .. _&lt;code&gt;Getting Started&lt;/code&gt;: &lt;a href=&#34;http://docs.cilium.io/en/stable/gettingstarted/&#34;&gt;http://docs.cilium.io/en/stable/gettingstarted/&lt;/a&gt; .. _&lt;code&gt;Architecture and Concepts&lt;/code&gt;: &lt;a href=&#34;http://docs.cilium.io/en/stable/concepts/&#34;&gt;http://docs.cilium.io/en/stable/concepts/&lt;/a&gt; .. _&lt;code&gt;Installing Cilium&lt;/code&gt;: &lt;a href=&#34;http://docs.cilium.io/en/stable/gettingstarted/#installation&#34;&gt;http://docs.cilium.io/en/stable/gettingstarted/#installation&lt;/a&gt; .. _&lt;code&gt;Frequently Asked Questions&lt;/code&gt;: &lt;a href=&#34;https://github.com/cilium/cilium/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+label%3Akind%2Fquestion+&#34;&gt;https://github.com/cilium/cilium/issues?utf8=%E2%9C%93&amp;amp;q=is%3Aissue+label%3Akind%2Fquestion+&lt;/a&gt; .. _Contributing: &lt;a href=&#34;http://docs.cilium.io/en/stable/contributing/development/&#34;&gt;http://docs.cilium.io/en/stable/contributing/development/&lt;/a&gt; .. _Prerequisites: &lt;a href=&#34;http://docs.cilium.io/en/stable/operations/system_requirements&#34;&gt;http://docs.cilium.io/en/stable/operations/system_requirements&lt;/a&gt; .. _&lt;code&gt;BPF and XDP Reference Guide&lt;/code&gt;: &lt;a href=&#34;http://docs.cilium.io/en/stable/bpf/&#34;&gt;http://docs.cilium.io/en/stable/bpf/&lt;/a&gt; .. _&lt;code&gt;eBPF&lt;/code&gt;: &lt;a href=&#34;https://ebpf.io&#34;&gt;https://ebpf.io&lt;/a&gt; .. _&lt;code&gt;eBPF.io&lt;/code&gt;: &lt;a href=&#34;https://ebpf.io&#34;&gt;https://ebpf.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |go-report| image:: &lt;a href=&#34;https://goreportcard.com/badge/github.com/cilium/cilium&#34;&gt;https://goreportcard.com/badge/github.com/cilium/cilium&lt;/a&gt; :alt: Go Report Card :target: &lt;a href=&#34;https://goreportcard.com/report/github.com/cilium/cilium&#34;&gt;https://goreportcard.com/report/github.com/cilium/cilium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |go-doc| image:: &lt;a href=&#34;https://godoc.org/github.com/cilium/cilium?status.svg&#34;&gt;https://godoc.org/github.com/cilium/cilium?status.svg&lt;/a&gt; :alt: GoDoc :target: &lt;a href=&#34;https://godoc.org/github.com/cilium/cilium&#34;&gt;https://godoc.org/github.com/cilium/cilium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |rtd| image:: &lt;a href=&#34;https://readthedocs.org/projects/docs/badge/?version=latest&#34;&gt;https://readthedocs.org/projects/docs/badge/?version=latest&lt;/a&gt; :alt: Read the Docs :target: &lt;a href=&#34;http://docs.cilium.io/&#34;&gt;http://docs.cilium.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |apache| image:: &lt;a href=&#34;https://img.shields.io/badge/license-Apache-blue.svg&#34;&gt;https://img.shields.io/badge/license-Apache-blue.svg&lt;/a&gt; :alt: Apache licensed :target: apache-license_&lt;/p&gt; &#xA;&lt;p&gt;.. |bsd| image:: &lt;a href=&#34;https://img.shields.io/badge/license-BSD-blue.svg&#34;&gt;https://img.shields.io/badge/license-BSD-blue.svg&lt;/a&gt; :alt: BSD licensed :target: bsd-license_&lt;/p&gt; &#xA;&lt;p&gt;.. |gpl| image:: &lt;a href=&#34;https://img.shields.io/badge/license-GPL-blue.svg&#34;&gt;https://img.shields.io/badge/license-GPL-blue.svg&lt;/a&gt; :alt: GPL licensed :target: gpl-license_&lt;/p&gt; &#xA;&lt;p&gt;.. |slack| image:: &lt;a href=&#34;https://cilium.herokuapp.com/badge.svg&#34;&gt;https://cilium.herokuapp.com/badge.svg&lt;/a&gt; :alt: Join the Cilium slack channel :target: &lt;a href=&#34;https://cilium.herokuapp.com/&#34;&gt;https://cilium.herokuapp.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |cii| image:: &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1269/badge&#34;&gt;https://bestpractices.coreinfrastructure.org/projects/1269/badge&lt;/a&gt; :alt: CII Best Practices :target: &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1269&#34;&gt;https://bestpractices.coreinfrastructure.org/projects/1269&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |clomonitor| image:: &lt;a href=&#34;https://img.shields.io/endpoint?url=https://clomonitor.io/api/projects/cncf/cilium/badge&#34;&gt;https://img.shields.io/endpoint?url=https://clomonitor.io/api/projects/cncf/cilium/badge&lt;/a&gt; :alt: CLOMonitor :target: &lt;a href=&#34;https://clomonitor.io/projects/cncf/cilium&#34;&gt;https://clomonitor.io/projects/cncf/cilium&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;.. |artifacthub| image:: &lt;a href=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/cilium&#34;&gt;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/cilium&lt;/a&gt; :alt: Artifact Hub :target: &lt;a href=&#34;https://artifacthub.io/packages/helm/cilium/cilium&#34;&gt;https://artifacthub.io/packages/helm/cilium/cilium&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>