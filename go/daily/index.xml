<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-04T01:41:37Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ledgerwatch/erigon</title>
    <updated>2022-08-04T01:41:37Z</updated>
    <id>tag:github.com,2022-08-04:/ledgerwatch/erigon</id>
    <link href="https://github.com/ledgerwatch/erigon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ethereum implementation on the efficiency frontier&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Erigon&lt;/h1&gt; &#xA;&lt;p&gt;Erigon is an implementation of Ethereum (aka &#34;Ethereum client&#34;), on the efficiency frontier, written in Go.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ledgerwatch/erigon/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gist.githubusercontent.com/revittm/ee38e9beb22353eef6b88f2ad6ed7aa9/raw/badge.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gist.githubusercontent.com/revittm/dc492845ba6eb694e6c7279224634b20/raw/badge.svg?sanitize=true&#34; alt=&#34;Hive&#34;&gt;&lt;/p&gt; &#xA;&lt;!--ts--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#system-requirements&#34;&gt;System Requirements&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#testnets&#34;&gt;Testnets&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#mining&#34;&gt;Mining&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/ledgerwatch/erigon&#34;&gt;GoDoc&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#beacon-chain-consensus-layer&#34;&gt;Beacon Chain&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#dev-chain&#34;&gt;Dev Chain&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#key-features&#34;&gt;Key features&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#more-efficient-state-storage&#34;&gt;More Efficient State Storage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#faster-initial-sync&#34;&gt;Faster Initial Sync&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#json-rpc-daemon&#34;&gt;JSON-RPC daemon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#run-all-components-by-docker-compose&#34;&gt;Run all components by docker-compose&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#grafana-dashboard&#34;&gt;Grafana dashboard&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#getting-in-touch&#34;&gt;Getting in touch&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#erigon-discord-server&#34;&gt;Erigon Discord Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#reporting-security-issues/concerns&#34;&gt;Reporting security issues/concerns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#team&#34;&gt;Team&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#known-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#htop-shows-incorrect-memory-usage&#34;&gt;&lt;code&gt;htop&lt;/code&gt; shows incorrect memory usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--te--&gt; &#xA;&lt;p&gt;NB! &lt;code&gt;In-depth links are marked by the microscope sign (🔬) &lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer: this software is currently a tech preview. We will do our best to keep it stable and make no breaking changes but we don&#39;t guarantee anything. Things can and will break.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;🔬 Alpha/Beta versions difference: &lt;a href=&#34;https://erigon.substack.com/p/erigon-2-three-upgrades?s=r&#34;&gt;here&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;System Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For an Archive node of Ethereum Mainnet we recommend &amp;gt;=3TB storage space: 1.8TB state (as of March 2022), 200GB temp files (can symlink or mount folder &lt;code&gt;&amp;lt;datadir&amp;gt;/etl-tmp&lt;/code&gt; to another disk). Ethereum Mainnet Full node (see &lt;code&gt;--prune*&lt;/code&gt; flags): 400Gb (April 2022).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Goerli Full node (see &lt;code&gt;--prune*&lt;/code&gt; flags): 189GB on Beta, 114GB on Alpha (April 2022).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;BSC Archive: 7TB. BSC Full: 1TB.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Polygon Mainnet Archive: 5TB. Polygon Mumbai Archive: 1TB.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SSD or NVMe. Do not recommend HDD - on HDD Erigon will always stay N blocks behind chain tip, but not fall behind. Bear in mind that SSD performance deteriorates when close to capacity.&lt;/p&gt; &#xA;&lt;p&gt;RAM: &amp;gt;=16GB, 64-bit architecture, &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Golang version &amp;gt;= 1.18&lt;/a&gt;, GCC 10+&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;🔬 more details on disk storage &lt;a href=&#34;https://erigon.substack.com/p/disk-footprint-changes-in-new-erigon?s=r&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://ledgerwatch.github.io/turbo_geth_release.html#Disk-space&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules -j8 https://github.com/ledgerwatch/erigon.git&#xA;cd erigon&#xA;make erigon&#xA;./build/bin/erigon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default &lt;code&gt;--snapshots&lt;/code&gt; for &lt;code&gt;mainnet&lt;/code&gt;, &lt;code&gt;goerli&lt;/code&gt;, &lt;code&gt;bsc&lt;/code&gt;. Other networks now have default &lt;code&gt;--snapshots=false&lt;/code&gt;. Increase download speed by flag &lt;code&gt;--torrent.download.rate=20mb&lt;/code&gt;. &lt;code&gt;🔬 See &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/cmd/downloader/readme.md&#34;&gt;Downloader docs&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--datadir&lt;/code&gt; to choose where to store data.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--chain=bor-mainnet&lt;/code&gt; for Polygon Mainnet and &lt;code&gt;--chain=mumbai&lt;/code&gt; for Polygon Mumbai.&lt;/p&gt; &#xA;&lt;p&gt;Running &lt;code&gt;make help&lt;/code&gt; will list and describe the convenience commands available in the &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/Makefile&#34;&gt;Makefile&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Modularity&lt;/h3&gt; &#xA;&lt;p&gt;Erigon by default is &#34;all in one binary&#34; solution, but it&#39;s possible start TxPool as separated processes. Same true about: JSON RPC layer (RPCDaemon), p2p layer (Sentry), history download layer (Downloader), consensus. Don&#39;t start services as separated processes unless you have clear reason for it: resource limiting, scale, replace by your own implementation, security. How to start Erigon&#39;s services as separated processes, see in &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Optional stages&lt;/h3&gt; &#xA;&lt;p&gt;There is an optional stage that can be enabled through flags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--watch-the-burn&lt;/code&gt;, Enable WatchTheBurn stage which keeps track of ETH issuance and is required to use &lt;code&gt;erigon_watchTheBurn&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Testnets&lt;/h3&gt; &#xA;&lt;p&gt;If you would like to give Erigon a try, but do not have spare 2TB on your drive, a good option is to start syncing one of the public testnets, Görli. It syncs much quicker, and does not take so much disk space:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules -j8 https://github.com/ledgerwatch/erigon.git&#xA;cd erigon&#xA;make erigon&#xA;./build/bin/erigon --datadir=&amp;lt;your_datadir&amp;gt; --chain=goerli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note the &lt;code&gt;--datadir&lt;/code&gt; option that allows you to store Erigon files in a non-default location, in this example, in &lt;code&gt;goerli&lt;/code&gt; subdirectory of the current directory. Name of the directory &lt;code&gt;--datadir&lt;/code&gt; does not have to match the name of the chain in &lt;code&gt;--chain&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Mining&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer: Not supported/tested for Polygon Network (In Progress)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Support only remote-miners.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To enable, add &lt;code&gt;--mine --miner.etherbase=...&lt;/code&gt; or &lt;code&gt;--mine --miner.miner.sigkey=...&lt;/code&gt; flags.&lt;/li&gt; &#xA; &lt;li&gt;Other supported options: &lt;code&gt;--miner.extradata&lt;/code&gt;, &lt;code&gt;--miner.notify&lt;/code&gt;, &lt;code&gt;--miner.gaslimit&lt;/code&gt;, &lt;code&gt;--miner.gasprice&lt;/code&gt; , &lt;code&gt;--miner.gastarget&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSON-RPC supports methods: eth_coinbase , eth_hashrate, eth_mining, eth_getWork, eth_submitWork, eth_submitHashrate&lt;/li&gt; &#xA; &lt;li&gt;JSON-RPC supports websocket methods: newPendingTransaction&lt;/li&gt; &#xA; &lt;li&gt;TODO: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;we don&#39;t broadcast mined blocks to p2p-network yet, &lt;a href=&#34;https://github.com/ledgerwatch/erigon/raw/9b8cdc0f2289a7cef78218a15043de5bdff4465e/eth/downloader/downloader.go#L673&#34;&gt;but it&#39;s easy to accomplish&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;eth_newPendingTransactionFilter&lt;/li&gt; &#xA;   &lt;li&gt;eth_newBlockFilter&lt;/li&gt; &#xA;   &lt;li&gt;eth_newFilter&lt;/li&gt; &#xA;   &lt;li&gt;websocket Logs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt; 🔬 Detailed mining explanation is &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/docs/mining.md&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Windows users may run erigon in 3 possible ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Build executable binaries natively for Windows using provided &lt;code&gt;wmake.ps1&lt;/code&gt; PowerShell script. Usage syntax is the same as &lt;code&gt;make&lt;/code&gt; command so you have to run &lt;code&gt;.\wmake.ps1 [-target] &amp;lt;targetname&amp;gt;&lt;/code&gt;. Example: &lt;code&gt;.\wmake.ps1 erigon&lt;/code&gt; builds erigon executable. All binaries are placed in &lt;code&gt;.\build\bin\&lt;/code&gt; subfolder. There are some requirements for a successful native build on windows :&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;Git&lt;/a&gt; for Windows must be installed. If you&#39;re cloning this repository is very likely you already have it&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://golang.org/dl/&#34;&gt;GO Programming Language&lt;/a&gt; must be installed. Minimum required version is 1.18&lt;/li&gt; &#xA;   &lt;li&gt;GNU CC Compiler at least version 10 (is highly suggested that you install &lt;code&gt;chocolatey&lt;/code&gt; package manager - see following point)&lt;/li&gt; &#xA;   &lt;li&gt;If you need to build MDBX tools (i.e. &lt;code&gt;.\wmake.ps1 db-tools&lt;/code&gt;) then &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey package manager&lt;/a&gt; for Windows must be installed. By Chocolatey you need to install the following components : &lt;code&gt;cmake&lt;/code&gt;, &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;mingw&lt;/code&gt; by &lt;code&gt;choco install cmake make mingw&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Important note about Anti-Viruses&lt;/strong&gt; During MinGW&#39;s compiler detection phase some temporary executables are generated to test compiler capabilities. It&#39;s been reported some anti-virus programs detect those files as possibly infected by &lt;code&gt;Win64/Kryptic.CIS&lt;/code&gt; trojan horse (or a variant of it). Although those are false positives we have no control over 100+ vendors of security products for Windows and their respective detection algorythms and we understand this might make your experience with Windows builds uncomfortable. To workaround the issue you might either set exclusions for your antivirus specifically for &lt;code&gt;build\bin\mdbx\CMakeFiles&lt;/code&gt; sub-folder of the cloned repo or you can run erigon using the following other two options&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Docker : see &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use WSL (Windows Subsystem for Linux) &lt;strong&gt;strictly on version 2&lt;/strong&gt;. Under this option you can build Erigon just as you would on a regular Linux distribution. You can point your data also to any of the mounted Windows partitions ( eg. &lt;code&gt;/mnt/c/[...]&lt;/code&gt;, &lt;code&gt;/mnt/d/[...]&lt;/code&gt; etc) but in such case be advised performance is impacted: this is due to the fact those mount points use &lt;code&gt;DrvFS&lt;/code&gt; which is a &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#blocks-execution-is-slow-on-cloud-network-drives&#34;&gt;network file system&lt;/a&gt; and, additionally, MDBX locks the db for exclusive access which implies only one process at a time can access data. This has consequences on the running of &lt;code&gt;rpcdaemon&lt;/code&gt; which has to be configured as &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/#for-remote-db&#34;&gt;Remote DB&lt;/a&gt; even if it is executed on the very same computer. If instead your data is hosted on the native Linux filesystem non limitations apply. &lt;strong&gt;Please also note the default WSL2 environment has its own IP address which does not match the one of the network interface of Windows host: take this into account when configuring NAT for port 30303 on your router.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Beacon Chain (Consensus Layer)&lt;/h3&gt; &#xA;&lt;p&gt;Erigon can be used as an Execution Layer (EL) for Consensus Layer clients (CL). Default configuration is OK. CL relies on availability of receipts – don&#39;t prune them: don&#39;t add character &lt;code&gt;r&lt;/code&gt; to &lt;code&gt;--prune&lt;/code&gt; flag. However, old receipts are not needed for CL and you can safely prune them with &lt;code&gt;--prune.r.before=&amp;lt;old block number&amp;gt;&lt;/code&gt; in combination with &lt;code&gt;--prune htc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If your CL client is on a different device, add &lt;code&gt;--authrpc.addr 0.0.0.0&lt;/code&gt; (&lt;a href=&#34;https://github.com/ethereum/execution-apis/raw/main/src/engine/specification.md&#34;&gt;Engine API&lt;/a&gt; listens on localhost by default) as well as &lt;code&gt;--authrpc.vhosts &amp;lt;CL host&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to establish a secure connection between the Consensus Layer and the Execution Layer, a JWT secret key is automatically generated.&lt;/p&gt; &#xA;&lt;p&gt;The JWT secret key will be present in the datadir by default under the name of &lt;code&gt;jwt.hex&lt;/code&gt; and its path can be specified with the flag &lt;code&gt;--authrpc.jwtsecret&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This piece of info needs to be specified in the Consensus Layer as well in order to establish connection successfully. More information can be found &lt;a href=&#34;https://github.com/ethereum/execution-apis/raw/main/src/engine/authentication.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once Erigon is running, you need to point your CL client to &lt;code&gt;&amp;lt;erigon address&amp;gt;:8551&lt;/code&gt;, where &lt;code&gt;&amp;lt;erigon address&amp;gt;&lt;/code&gt; is either &lt;code&gt;localhost&lt;/code&gt; or the IP address of the device running Erigon, and also point to the JWT secret path created by Erigon.&lt;/p&gt; &#xA;&lt;h3&gt;Multiple Instances / One Machine&lt;/h3&gt; &#xA;&lt;p&gt;Define 5 flags to avoid conflicts: &lt;code&gt;--datadir --port --http.port --torrent.port --private.api.addr&lt;/code&gt;. Example of multiple chains on the same machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# mainnet&#xA;./build/bin/erigon --datadir=&#34;&amp;lt;your_mainnet_data_path&amp;gt;&#34; --chain=mainnet --port=30303 --http.port=8545 --torrent.port=42069 --private.api.addr=127.0.0.1:9090 --http --ws --http.api=eth,debug,net,trace,web3,erigon&#xA;&#xA;&#xA;# rinkeby&#xA;./build/bin/erigon --datadir=&#34;&amp;lt;your_rinkeby_data_path&amp;gt;&#34; --chain=rinkeby --port=30304 --http.port=8546 --torrent.port=42068 --private.api.addr=127.0.0.1:9091 --http --ws --http.api=eth,debug,net,trace,web3,erigon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Quote your path if it has spaces.&lt;/p&gt; &#xA;&lt;h3&gt;Dev Chain&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; 🔬 Detailed explanation is &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/DEV_CHAIN.md&#34;&gt;DEV_CHAIN&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Key features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;🔬 See more detailed &lt;a href=&#34;https://ledgerwatch.github.io/turbo_geth_release.html&#34;&gt;overview of functionality and current limitations&lt;/a&gt;. It is being updated on recurring basis.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;More Efficient State Storage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Flat KV storage.&lt;/strong&gt; Erigon uses a key-value database and storing accounts and storage in a simple way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; 🔬 See our detailed DB walkthrough &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/docs/programmers_guide/db_walkthrough.MD&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preprocessing&lt;/strong&gt;. For some operations, Erigon uses temporary files to preprocess data before inserting it into the main DB. That reduces write amplification and DB inserts are orders of magnitude quicker.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt; 🔬 See our detailed ETL explanation &lt;a href=&#34;https://github.com/ledgerwatch/erigon-lib/raw/main/etl/README.md&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Plain state&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Single accounts/state trie&lt;/strong&gt;. Erigon uses a single Merkle trie for both accounts and the storage.&lt;/p&gt; &#xA;&lt;h3&gt;Faster Initial Sync&lt;/h3&gt; &#xA;&lt;p&gt;Erigon uses a rearchitected full sync algorithm from &lt;a href=&#34;https://github.com/ethereum/go-ethereum&#34;&gt;Go-Ethereum&lt;/a&gt; that is split into &#34;stages&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;🔬 See more detailed explanation in the &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/eth/stagedsync/README.md&#34;&gt;Staged Sync Readme&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It uses the same network primitives and is compatible with regular go-ethereum nodes that are using full sync, you do not need any special sync capabilities for Erigon to sync.&lt;/p&gt; &#xA;&lt;p&gt;When reimagining the full sync, with focus on batching data together and minimize DB overwrites. That makes it possible to sync Ethereum mainnet in under 2 days if you have a fast enough network connection and an SSD drive.&lt;/p&gt; &#xA;&lt;p&gt;Examples of stages are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Downloading headers;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Downloading block bodies;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Recovering senders&#39; addresses;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Executing blocks;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Validating root hashes and building intermediate hashes for the state Merkle trie;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[...]&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JSON-RPC daemon&lt;/h3&gt; &#xA;&lt;p&gt;Most of Erigon&#39;s components (sentry, txpool, snapshots&amp;nbsp;downloader, can work inside Erigon and as independent process.&lt;/p&gt; &#xA;&lt;p&gt;To enable built-in RPC server: &lt;code&gt;--http&lt;/code&gt; and &lt;code&gt;--ws&lt;/code&gt; (sharing same port with http)&lt;/p&gt; &#xA;&lt;p&gt;Run RPCDaemon as separated process: this daemon can use local DB (with running Erigon or on snapshot of a database) or remote DB (run on another server). &lt;code&gt;🔬 See &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/cmd/rpcdaemon/README.md&#34;&gt;RPC-Daemon docs&lt;/a&gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;For remote DB&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This works regardless of whether RPC daemon is on the same computer with Erigon, or on a different one. They use TPC socket connection to pass data between them. To use this mode, run Erigon in one terminal window&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make erigon&#xA;./build/bin/erigon --private.api.addr=localhost:9090 --http=false&#xA;make rpcdaemon&#xA;./build/bin/rpcdaemon --private.api.addr=localhost:9090 --http.api=eth,erigon,web3,net,debug,trace,txpool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;strong&gt;gRPC ports&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;9090&lt;/code&gt; erigon, &lt;code&gt;9091&lt;/code&gt; sentry, &lt;code&gt;9092&lt;/code&gt; consensus engine, &lt;code&gt;9093&lt;/code&gt; torrent downloader, &lt;code&gt;9094&lt;/code&gt; transactions pool&lt;/p&gt; &#xA;&lt;p&gt;Supported JSON-RPC calls (&lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/cmd/rpcdaemon/commands/eth_api.go&#34;&gt;eth&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/cmd/rpcdaemon/commands/debug_api.go&#34;&gt;debug&lt;/a&gt; , &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/cmd/rpcdaemon/commands/net_api.go&#34;&gt;net&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/cmd/rpcdaemon/commands/web3_api.go&#34;&gt;web3&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;p&gt;For a details on the implementation status of each command, &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/cmd/rpcdaemon/README.md#rpc-implementation-status&#34;&gt;see this table&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Run all components by docker-compose&lt;/h3&gt; &#xA;&lt;p&gt;Docker allows for building and running Erigon via containers. This alleviates the need for installing build dependencies onto the host OS.&lt;/p&gt; &#xA;&lt;h4&gt;Optional: Setup dedicated user&lt;/h4&gt; &#xA;&lt;p&gt;User UID/GID need to be synchronized between the host OS and container so files are written with correct permission.&lt;/p&gt; &#xA;&lt;p&gt;You may wish to setup a dedicated user/group on the host OS, in which case the following &lt;code&gt;make&lt;/code&gt; targets are available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# create &#34;erigon&#34; user&#xA;make user_linux&#xA;# or&#xA;make user_macos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Environment Variables&lt;/h4&gt; &#xA;&lt;p&gt;There is a &lt;code&gt;.env.example&lt;/code&gt; file in the root of the repo.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_UID&lt;/code&gt; - The UID of the docker user&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_GID&lt;/code&gt; - The GID of the docker user&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;XDG_DATA_HOME&lt;/code&gt; - The data directory which will be mounted to the docker containers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If not specified, the UID/GID will use the current user.&lt;/p&gt; &#xA;&lt;p&gt;A good choice for &lt;code&gt;XDG_DATA_HOME&lt;/code&gt; is to use the &lt;code&gt;~erigon/.ethereum&lt;/code&gt; directory created by helper targets &lt;code&gt;make user_linux&lt;/code&gt; or &lt;code&gt;make user_macos&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Check: Permissions&lt;/h4&gt; &#xA;&lt;p&gt;In all cases, &lt;code&gt;XDG_DATA_HOME&lt;/code&gt; (specified or default) must be writeable by the user UID/GID in docker, which will be determined by the &lt;code&gt;DOCKER_UID&lt;/code&gt; and &lt;code&gt;DOCKER_GID&lt;/code&gt; at build time.&lt;/p&gt; &#xA;&lt;p&gt;If a build or service startup is failing due to permissions, check that all the directories, UID, and GID controlled by these environment variables are correct.&lt;/p&gt; &#xA;&lt;h4&gt;Run&lt;/h4&gt; &#xA;&lt;p&gt;Next command starts: Erigon on port 30303, rpcdaemon on port 8545, prometheus on port 9090, and grafana on port 3000.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#&#xA;# Will mount ~/.local/share/erigon to /home/erigon/.local/share/erigon inside container&#xA;#&#xA;make docker-compose&#xA;&#xA;#&#xA;# or&#xA;#&#xA;# if you want to use a custom data directory&#xA;# or, if you want to use different uid/gid for a dedicated user&#xA;#&#xA;# To solve this, pass in the uid/gid parameters into the container.&#xA;#&#xA;# DOCKER_UID: the user id&#xA;# DOCKER_GID: the group id&#xA;# XDG_DATA_HOME: the data directory (default: ~/.local/share)&#xA;#&#xA;# Note: /preferred/data/folder must be read/writeable on host OS by user with UID/GID given&#xA;#       if you followed above instructions&#xA;#&#xA;# Note: uid/gid syntax below will automatically use uid/gid of running user so this syntax&#xA;#       is intended to be ran via the dedicated user setup earlier&#xA;#&#xA;DOCKER_UID=$(id -u) DOCKER_GID=$(id -g) XDG_DATA_HOME=/preferred/data/folder DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 make docker-compose&#xA;&#xA;#&#xA;# if you want to run the docker, but you are not logged in as the $ERIGON_USER&#xA;# then you&#39;ll need to adjust the syntax above to grab the correct uid/gid&#xA;#&#xA;# To run the command via another user, use&#xA;#&#xA;ERIGON_USER=erigon&#xA;sudo -u ${ERIGON_USER} DOCKER_UID=$(id -u ${ERIGON_USER}) DOCKER_GID=$(id -g ${ERIGON_USER}) XDG_DATA_HOME=~${ERIGON_USER}/.ethereum DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 make docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Makefile creates the initial directories for erigon, prometheus and grafana. The PID namespace is shared between erigon and rpcdaemon which is required to open Erigon&#39;s DB from another process (RPCDaemon local-mode). See: &lt;a href=&#34;https://github.com/ledgerwatch/erigon/pull/2392/files&#34;&gt;https://github.com/ledgerwatch/erigon/pull/2392/files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your docker installation requires the docker daemon to run as root (which is by default), you will need to prefix the command above with &lt;code&gt;sudo&lt;/code&gt;. However, it is sometimes recommended running docker (and therefore its containers) as a non-root user for security reasons. For more information about how to do this, refer to &lt;a href=&#34;https://docs.docker.com/engine/install/linux-postinstall/#manage-docker-as-a-non-root-user&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Windows support for docker-compose is not ready yet. Please help us with .ps1 port.&lt;/p&gt; &#xA;&lt;h3&gt;Grafana dashboard&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;docker-compose up prometheus grafana&lt;/code&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/cmd/prometheus/Readme.md&#34;&gt;detailed docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prune old data&lt;/h3&gt; &#xA;&lt;p&gt;Disabled by default. To enable see &lt;code&gt;./build/bin/erigon --help&lt;/code&gt; for flags &lt;code&gt;--prune&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;./docs&lt;/code&gt; directory includes a lot of useful but outdated documentation. For code located in the &lt;code&gt;./cmd&lt;/code&gt; directory, their respective documentation can be found in &lt;code&gt;./cmd/*/README.md&lt;/code&gt;. A more recent collation of developments and happenings in Erigon can be found in the &lt;a href=&#34;https://erigon.substack.com/&#34;&gt;Erigon Blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h3&gt;How much RAM do I need&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Baseline (ext4 SSD): 16Gb RAM sync takes 6 days, 32Gb - 5 days, 64Gb - 4 days&lt;/li&gt; &#xA; &lt;li&gt;+1 day on &#34;zfs compression=off&#34;. +2 days on &#34;zfs compression=on&#34; (2x compression ratio). +3 days on btrfs.&lt;/li&gt; &#xA; &lt;li&gt;-1 day on NVMe&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Detailed explanation: &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/docs/programmers_guide/db_faq.md&#34;&gt;./docs/programmers_guide/db_faq.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Default Ports and Protocols / Firewalls?&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;erigon&lt;/code&gt; ports&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Port&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Protocol&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Purpose&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Expose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;30303&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP &amp;amp; UDP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;eth/66 or 67 peering&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9090&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;gRPC Connections&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;42069&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP &amp;amp; UDP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Snap sync (Bittorrent)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6060&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Metrics or Pprof&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Typically, 30303 is exposed to the internet to allow incoming peering connections. 9090 is exposed only internally for rpcdaemon or other connections, (e.g. rpcdaemon -&amp;gt; erigon).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;RPC&lt;/code&gt; ports&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Port&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Protocol&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Purpose&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Expose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8545&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HTTP &amp;amp; WebSockets&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8551&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;HTTP with JWT auth&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Typically, 8545 is exposed only internally for JSON-RPC queries. Both HTTP and WebSocket connections are on the same port. Typically, 8551 (JWT authenticated) is exposed only internally for the &lt;a href=&#34;https://github.com/ethereum/execution-apis/raw/main/src/engine/specification.md&#34;&gt;Engine API&lt;/a&gt; JSON-RPC queries.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;sentry&lt;/code&gt; ports&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Port&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Protocol&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Purpose&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Expose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;30303&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP &amp;amp; UDP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Peering&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Public&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;9091&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;gRPC Connections&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Typically, a sentry process will run one eth/xx protocol (e.g. eth/66) and will be exposed to the internet on 30303. Port 9091 is for internal gRCP connections (e.g erigon -&amp;gt; sentry).&lt;/p&gt; &#xA;&lt;h4&gt;Other ports&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Port&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Protocol&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Purpose&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Expose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6060&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;pprof&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6060&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;TCP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;metrics&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Private&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Optional flags can be enabled that enable pprof or metrics (or both) - however, they both run on 6060 by default, so you&#39;ll have to change one if you want to run both at the same time. use &lt;code&gt;--help&lt;/code&gt; with the binary for more info.&lt;/p&gt; &#xA;&lt;p&gt;Reserved for future use: &lt;strong&gt;gRPC ports&lt;/strong&gt;: &lt;code&gt;9092&lt;/code&gt; consensus engine, &lt;code&gt;9093&lt;/code&gt; snapshot downloader, &lt;code&gt;9094&lt;/code&gt; TxPool&lt;/p&gt; &#xA;&lt;h3&gt;How to get diagnostic for bug report?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get stack trace: &lt;code&gt;kill -SIGUSR1 &amp;lt;pid&amp;gt;&lt;/code&gt;, get trace and stop: &lt;code&gt;kill -6 &amp;lt;pid&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get CPU profiling: add &lt;code&gt;--pprof flag&lt;/code&gt; run &lt;code&gt;go tool pprof -png http://127.0.0.1:6060/debug/pprof/profile\?seconds\=20 &amp;gt; cpu.png&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get RAM profiling: add &lt;code&gt;--pprof flag&lt;/code&gt; run &lt;code&gt;go tool pprof -inuse_space -png http://127.0.0.1:6060/debug/pprof/heap &amp;gt; mem.png&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to run local devnet?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt; 🔬 Detailed explanation is &lt;a href=&#34;https://raw.githubusercontent.com/ledgerwatch/erigon/devel/DEV_CHAIN.md&#34;&gt;here&lt;/a&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker permissions error&lt;/h3&gt; &#xA;&lt;p&gt;Docker uses user erigon with UID/GID 1000 (for security reasons). You can see this user being created in the Dockerfile. Can fix by giving a host&#39;s user ownership of the folder, where the host&#39;s user UID/GID is the same as the docker&#39;s user UID/GID (1000). More details in &lt;a href=&#34;https://www.fullstaq.com/knowledge-hub/blogs/docker-and-the-host-filesystem-owner-matching-problem&#34;&gt;post&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run RaspberyPI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mathMakesArt/Erigon-on-RPi-4&#34;&gt;https://github.com/mathMakesArt/Erigon-on-RPi-4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting in touch&lt;/h1&gt; &#xA;&lt;h3&gt;Erigon Discord Server&lt;/h3&gt; &#xA;&lt;p&gt;The main discussions are happening on our Discord server. To get an invite, send an email to &lt;code&gt;tg [at] torquem.ch&lt;/code&gt; with your name, occupation, a brief explanation of why you want to join the Discord, and how you heard about Erigon.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting security issues/concerns&lt;/h3&gt; &#xA;&lt;p&gt;Send an email to &lt;code&gt;security [at] torquem.ch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Team&lt;/h3&gt; &#xA;&lt;p&gt;Core contributors (in alpabetical order of first names):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Alex Sharov (&lt;a href=&#34;https://twitter.com/AskAlexSharov&#34;&gt;AskAlexSharov&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alexey Akhunov (&lt;a href=&#34;https://twitter.com/realLedgerwatch&#34;&gt;@realLedgerwatch&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Andrea Lanfranchi(&lt;a href=&#34;https://github.com/AndreaLanfranchi&#34;&gt;@AndreaLanfranchi&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Andrew Ashikhmin (&lt;a href=&#34;https://github.com/yperbasis&#34;&gt;yperbasis&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Artem Vorotnikov (&lt;a href=&#34;https://github.com/vorot93&#34;&gt;vorot93&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Boris Petrov (&lt;a href=&#34;https://github.com/b00ris&#34;&gt;b00ris&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Eugene Danilenko (&lt;a href=&#34;https://github.com/JekaMas&#34;&gt;JekaMas&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Igor Mandrigin (&lt;a href=&#34;https://twitter.com/mandrigin&#34;&gt;@mandrigin&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Giulio Rebuffo (&lt;a href=&#34;https://github.com/Giulio2002&#34;&gt;Giulio2002&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Thomas Jay Rush (&lt;a href=&#34;https://twitter.com/tjayrush&#34;&gt;@tjayrush&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;All contributors of Erigon&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All contributors of Go-Ethereum&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Our special respect and graditude is to the core team of &lt;a href=&#34;https://github.com/ethereum/go-ethereum&#34;&gt;Go-Ethereum&lt;/a&gt;. Keep up the great job!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Happy testing! 🥤&lt;/p&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;code&gt;htop&lt;/code&gt; shows incorrect memory usage&lt;/h3&gt; &#xA;&lt;p&gt;Erigon&#39;s internal DB (MDBX) using &lt;code&gt;MemoryMap&lt;/code&gt; - when OS does manage all &lt;code&gt;read, write, cache&lt;/code&gt; operations instead of Application (&lt;a href=&#34;https://linux-kernel-labs.github.io/refs/heads/master/labs/memory_mapping.html&#34;&gt;linux&lt;/a&gt; , &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/memory/file-mapping&#34;&gt;windows&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;htop&lt;/code&gt; on column &lt;code&gt;res&lt;/code&gt; shows memory of &#34;App + OS used to hold page cache for given App&#34;, but it&#39;s not informative, because if &lt;code&gt;htop&lt;/code&gt; says that app using 90% of memory you still can run 3 more instances of app on the same machine - because most of that &lt;code&gt;90%&lt;/code&gt; is &#34;OS pages cache&#34;. OS automatically free this cache any time it needs memory. Smaller &#34;page cache size&#34; may not impact performance of Erigon at all.&lt;/p&gt; &#xA;&lt;p&gt;Next tools show correct memory usage of Erigon:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;vmmap -summary PID | grep -i &#34;Physical footprint&#34;&lt;/code&gt;. Without &lt;code&gt;grep&lt;/code&gt; you can see details &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;section MALLOC ZONE column Resident Size&lt;/code&gt; shows App memory usage, &lt;code&gt;section REGION TYPE column Resident Size&lt;/code&gt; shows OS pages cache size.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Prometheus&lt;/code&gt; dashboard shows memory of Go app without OS pages cache (&lt;code&gt;make prometheus&lt;/code&gt;, open in browser &lt;code&gt;localhost:3000&lt;/code&gt;, credentials &lt;code&gt;admin/admin&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cat /proc/&amp;lt;PID&amp;gt;/smaps&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Erigon uses ~4Gb of RAM during genesis sync and ~1Gb during normal work. OS pages cache can utilize unlimited amount of memory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Multiple instances of Erigon on same machine will touch Disk concurrently, it impacts performance - one of main Erigon optimisations: &#34;reduce Disk random access&#34;. &#34;Blocks Execution stage&#34; still does much random reads - this is reason why it&#39;s slowest stage. We do not recommend run multiple genesis syncs on same Disk. If genesis sync passed, then it&#39;s fine to run multiple Erigon on same Disk.&lt;/p&gt; &#xA;&lt;h3&gt;Blocks Execution is slow on cloud-network-drives&lt;/h3&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://github.com/ledgerwatch/erigon/issues/1516#issuecomment-811958891&#34;&gt;https://github.com/ledgerwatch/erigon/issues/1516#issuecomment-811958891&lt;/a&gt; In short: network-disks are bad for blocks execution - because blocks execution reading data from db non-parallel non-batched way.&lt;/p&gt; &#xA;&lt;h3&gt;Filesystem&#39;s background features are expensive&lt;/h3&gt; &#xA;&lt;p&gt;For example: btrfs&#39;s autodefrag option - may increase write IO 100x times&lt;/p&gt; &#xA;&lt;h3&gt;Gnome Tracker can kill Erigon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.gnome.org/Projects/Tracker&#34;&gt;Gnome Tracker&lt;/a&gt; - detecting miners and kill them.&lt;/p&gt; &#xA;&lt;h3&gt;the --mount option requires BuildKit error&lt;/h3&gt; &#xA;&lt;p&gt;For anyone else that was getting the BuildKit error when trying to start Erigon the old way you can use the below...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;XDG_DATA_HOME=/preferred/data/folder DOCKER_BUILDKIT=1 COMPOSE_DOCKER_CLI_BUILD=1 make docker-compose&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>httprunner/httprunner</title>
    <updated>2022-08-04T01:41:37Z</updated>
    <id>tag:github.com,2022-08-04:/httprunner/httprunner</id>
    <link href="https://github.com/httprunner/httprunner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HttpRunner 是一个开源的 API 测试工具，支持 HTTP(S) / HTTP2 / WebSocket / RPC 等网络协议，涵盖接口测试、性能测试、数字体验监测等测试类型。简单易用，功能强大，具有丰富的插件化机制和高度的可扩展能力。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HttpRunner&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/httprunner/httprunner/actions&#34;&gt;&lt;img src=&#34;https://github.com/httprunner/httprunner/actions/workflows/unittest.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/httprunner/httprunner&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/httprunner/httprunner/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/httprunner/httprunner&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/httprunner/httprunner.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pepy.tech/project/httprunner&#34;&gt;&lt;img src=&#34;https://pepy.tech/badge/httprunner&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/httprunner&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/v/httprunner.svg?sanitize=true&#34; alt=&#34;pypi version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pypi.python.org/pypi/httprunner&#34;&gt;&lt;img src=&#34;https://img.shields.io/pypi/pyversions/httprunner.svg?sanitize=true&#34; alt=&#34;pyversions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://testerhome.com/github_statistics&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/TTF-TesterHome-2955C5.svg?sanitize=true&#34; alt=&#34;TesterHome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HttpRunner&lt;/code&gt; 是一个开源的 API 测试工具，支持 HTTP(S)/HTTP2/WebSocket/RPC 等网络协议，涵盖接口测试、性能测试、数字体验监测等测试类型。简单易用，功能强大，具有丰富的插件化机制和高度的可扩展能力。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;HttpRunner &lt;a href=&#34;https://wj.qq.com/s2/9699514/0d19/&#34;&gt;用户调研问卷&lt;/a&gt; 持续收集中，我们将基于用户反馈动态调整产品特性和需求优先级。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://httprunner.com/image/hrp-flow.jpg&#34; alt=&#34;flow chart&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/httprunner/httprunner/master/docs/CHANGELOG.md&#34;&gt;版本发布日志&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/httprunner/httprunner/master/README.en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;设计理念&lt;/h2&gt; &#xA;&lt;p&gt;相比于其它 API 测试工具，HttpRunner 最大的不同在于设计理念。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;约定大于配置：测试用例是标准结构化的，格式统一，方便协作和维护&lt;/li&gt; &#xA; &lt;li&gt;标准开放：基于开放的标准，支持与 &lt;a href=&#34;https://en.wikipedia.org/wiki/HAR_(file_format)&#34;&gt;HAR&lt;/a&gt;/Postman/Swagger/Curl/JMeter 等工具对接，轻松实现用例生成和转换&lt;/li&gt; &#xA; &lt;li&gt;一次投入多维复用：一套脚本可同时支持接口自动化测试、性能测试、数字体验监测等多种 API 测试需求&lt;/li&gt; &#xA; &lt;li&gt;融入最佳工程实践：不仅仅是一款测试工具，在功能中融入最佳工程实践，实现面向网络协议的一站式测试解决方案&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;核心特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;网络协议：完整支持 HTTP(S)/HTTP2/WebSocket，可扩展支持 TCP/UDP/RPC 等更多协议&lt;/li&gt; &#xA; &lt;li&gt;多格式可选：测试用例支持 YAML/JSON/go test/pytest 格式，并且支持格式互相转换&lt;/li&gt; &#xA; &lt;li&gt;双执行引擎：同时支持 golang/python 两个执行引擎，兼具 go 的高性能和 &lt;a href=&#34;https://docs.pytest.org/&#34;&gt;pytest&lt;/a&gt; 的丰富生态&lt;/li&gt; &#xA; &lt;li&gt;录制 &amp;amp; 生成：可使用 &lt;a href=&#34;https://en.wikipedia.org/wiki/HAR_(file_format)&#34;&gt;HAR&lt;/a&gt;/Postman/Swagger/curl 等生成测试用例；基于链式调用的方法提示也可快速编写测试用例&lt;/li&gt; &#xA; &lt;li&gt;复杂场景：基于 variables/extract/validate/hooks 机制可以方便地创建任意复杂的测试场景&lt;/li&gt; &#xA; &lt;li&gt;插件化机制：内置丰富的函数库，同时可以基于主流编程语言（go/python/java）编写自定义函数轻松实现更多能力&lt;/li&gt; &#xA; &lt;li&gt;性能测试：无需额外工作即可实现压力测试；单机可轻松支撑 &lt;code&gt;1w+&lt;/code&gt; VUM，结合分布式负载能力可实现海量发压&lt;/li&gt; &#xA; &lt;li&gt;网络性能采集：在场景化接口测试的基础上，可额外采集网络链路性能指标（DNS 解析、TCP 连接、SSL 握手、网络传输等）&lt;/li&gt; &#xA; &lt;li&gt;一键部署：采用二进制命令行工具分发，无需环境依赖，一条命令即可在 macOS/Linux/Windows 快速完成安装部署&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;用户声音&lt;/h2&gt; &#xA;&lt;p&gt;基于 252 份调研问卷的统计结果，HttpRunner 用户的整体满意度评分 &lt;code&gt;4.3/5&lt;/code&gt;，最喜欢的特性包括：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;简单易用：测试用例支持 YAML/JSON 标准化格式，可通过录制的方式快速生成用例，上手简单，使用方便&lt;/li&gt; &#xA; &lt;li&gt;功能强大：支持灵活的自定义函数和 hook 机制，参数变量、数据驱动、结果断言等机制一应俱全，轻松适应各种复杂场景&lt;/li&gt; &#xA; &lt;li&gt;设计理念：测试用例组织支持分层设计，格式统一，易于实现测试用例的维护和复用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多内容详见 &lt;a href=&#34;https://httprunner.com/blog/user-survey-report/&#34;&gt;HttpRunner 首轮用户调研报告（2022.02）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;一键部署&lt;/h2&gt; &#xA;&lt;p&gt;HttpRunner 二进制命令行工具已上传至阿里云 OSS，在系统终端中执行如下命令可完成安装部署。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bash -c &#34;$(curl -ksSL https://httprunner.com/script/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装成功后，你将获得一个 &lt;code&gt;hrp&lt;/code&gt; 命令行工具，执行 &lt;code&gt;hrp -h&lt;/code&gt; 即可查看到参数帮助说明。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ hrp -h&#xA;&#xA;██╗  ██╗████████╗████████╗██████╗ ██████╗ ██╗   ██╗███╗   ██╗███╗   ██╗███████╗██████╗&#xA;██║  ██║╚══██╔══╝╚══██╔══╝██╔══██╗██╔══██╗██║   ██║████╗  ██║████╗  ██║██╔════╝██╔══██╗&#xA;███████║   ██║      ██║   ██████╔╝██████╔╝██║   ██║██╔██╗ ██║██╔██╗ ██║█████╗  ██████╔╝&#xA;██╔══██║   ██║      ██║   ██╔═══╝ ██╔══██╗██║   ██║██║╚██╗██║██║╚██╗██║██╔══╝  ██╔══██╗&#xA;██║  ██║   ██║      ██║   ██║     ██║  ██║╚██████╔╝██║ ╚████║██║ ╚████║███████╗██║  ██║&#xA;╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝&#xA;&#xA;HttpRunner is an open source API testing tool that supports HTTP(S)/HTTP2/WebSocket/RPC&#xA;network protocols, covering API testing, performance testing and digital experience&#xA;monitoring (DEM) test types. Enjoy! ✨ 🚀 ✨&#xA;&#xA;License: Apache-2.0&#xA;Website: https://httprunner.com&#xA;Github: https://github.com/httprunner/httprunner&#xA;Copyright 2017 debugtalk&#xA;&#xA;Usage:&#xA;  hrp [command]&#xA;&#xA;Available Commands:&#xA;  boom         run load test with boomer&#xA;  build        build plugin for testing&#xA;  completion   generate the autocompletion script for the specified shell&#xA;  convert      convert to JSON/YAML/gotest/pytest testcases&#xA;  help         Help about any command&#xA;  pytest       run API test with pytest&#xA;  run          run API test with go engine&#xA;  startproject create a scaffold project&#xA;  wiki         visit https://httprunner.com&#xA;&#xA;Flags:&#xA;  -h, --help               help for hrp&#xA;      --log-json           set log to json format&#xA;  -l, --log-level string   set log level (default &#34;INFO&#34;)&#xA;      --venv string        specify python3 venv path&#xA;  -v, --version            version for hrp&#xA;&#xA;Use &#34;hrp [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;用户案例&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://httprunner.com/docs/cases/dji-ibg&#34;&gt;&lt;img src=&#34;https://httprunner.com/image/logo/dji.jpeg&#34; title=&#34;大疆 - 基于 HttpRunner 构建完整的自动化测试体系&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://httprunner.com/docs/cases/youmi&#34;&gt;&lt;img src=&#34;https://httprunner.com/image/logo/youmi.png&#34; title=&#34;有米科技 - 基于 HttpRunner 建设自动化测试平台&#34; width=&#34;60&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://httprunner.com/docs/cases/umcare&#34;&gt;&lt;img src=&#34;https://httprunner.com/image/logo/umcare.png&#34; title=&#34;通用环球医疗 - 使用 HttpRunner 实践接口自动化测试&#34; width=&#34;100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://httprunner.com/docs/cases/mihoyo&#34;&gt;&lt;img src=&#34;https://httprunner.com/image/logo/miHoYo.png&#34; title=&#34;米哈游 - 基于 HttpRunner 搭建接口自动化测试体系&#34; width=&#34;100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;赞助商&lt;/h2&gt; &#xA;&lt;h3&gt;金牌赞助商&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ceshiren.com/&#34;&gt;&lt;img src=&#34;https://httprunner.com/image/hogwarts.jpeg&#34; alt=&#34;霍格沃兹测试开发学社&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://qrcode.testing-studio.com/f?from=httprunner&amp;amp;url=https://ceshiren.com&#34;&gt;霍格沃兹测试开发学社&lt;/a&gt;是业界领先的测试开发技术高端教育品牌，隶属于&lt;a href=&#34;http://qrcode.testing-studio.com/f?from=httprunner&amp;amp;url=https://www.testing-studio.com&#34;&gt;测吧（北京）科技有限公司&lt;/a&gt; 。学院课程由一线大厂测试经理与资深测试开发专家参与研发，实战驱动。课程涵盖 web/app 自动化测试、接口测试、性能测试、安全测试、持续集成/持续交付/DevOps，测试左移&amp;amp;右移、精准测试、测试平台开发、测试管理等内容，帮助测试工程师实现测试开发技术转型。通过优秀的学社制度（奖学金、内推返学费、行业竞赛等多种方式）来实现学员、学社及用人企业的三方共赢。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://qrcode.testing-studio.com/f?from=httprunner&amp;amp;url=https://ceshiren.com/t/topic/14940&#34;&gt;进入测试开发技术能力测评!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;开源服务赞助商&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sentry.io/_/open-source/&#34;&gt;&lt;img src=&#34;https://httprunner.com/image/sentry-logo-black.svg?sanitize=true&#34; alt=&#34;Sentry&#34; width=&#34;150&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HttpRunner is in Sentry Sponsored plan.&lt;/p&gt; &#xA;&lt;h2&gt;Subscribe&lt;/h2&gt; &#xA;&lt;p&gt;关注 HttpRunner 的微信公众号，第一时间获得最新资讯。&lt;/p&gt; &#xA;&lt;img src=&#34;https://httprunner.com/image/qrcode.png&#34; alt=&#34;HttpRunner&#34; width=&#34;400&#34;&gt; &#xA;&lt;p&gt;如果你期望加入 HttpRunner 用户群，请看这里：&lt;a href=&#34;https://httprunner.com/blog/join-chat-group&#34;&gt;HttpRunner v4 用户交流群，它来啦！&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ahmetb/kubectx</title>
    <updated>2022-08-04T01:41:37Z</updated>
    <id>tag:github.com,2022-08-04:/ahmetb/kubectx</id>
    <link href="https://github.com/ahmetb/kubectx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Faster way to switch between clusters and namespaces in kubectl&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;kubectx&lt;/code&gt; + &lt;code&gt;kubens&lt;/code&gt;: Power tools for kubectl&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/release/ahmetb/kubectx.svg?sanitize=true&#34; alt=&#34;Latest GitHub release&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/ahmetb/kubectx.svg?label=github%20stars&#34; alt=&#34;GitHub stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/homebrew/installs/dy/kubectx?label=macOS%20installs&#34; alt=&#34;Homebrew downloads&#34;&gt; &lt;a href=&#34;https://github.com/ahmetb/kubectx/actions?query=workflow%3A%22Go+implementation+(CI)%22&#34;&gt;&lt;img src=&#34;https://github.com/ahmetb/kubectx/workflows/Go%20implementation%20(CI)/badge.svg?sanitize=true&#34; alt=&#34;Go implementation (CI)&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/written%20in-bash-ff69b4.svg?sanitize=true&#34; alt=&#34;Proudly written in Bash&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository provides both &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; tools. &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#installation&#34;&gt;Install →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What are &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt;?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;kubectx&lt;/strong&gt; is a tool to switch between contexts (clusters) on kubectl faster.&lt;br&gt; &lt;strong&gt;kubens&lt;/strong&gt; is a tool to switch between Kubernetes namespaces (and configure them for kubectl) easily.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a &lt;strong&gt;&lt;code&gt;kubectx&lt;/code&gt;&lt;/strong&gt; demo: &lt;img src=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/img/kubectx-demo.gif&#34; alt=&#34;kubectx demo GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;...and here&#39;s a &lt;strong&gt;&lt;code&gt;kubens&lt;/code&gt;&lt;/strong&gt; demo: &lt;img src=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/img/kubens-demo.gif&#34; alt=&#34;kubens demo GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# switch to another cluster that&#39;s in kubeconfig&#xA;$ kubectx minikube&#xA;Switched to context &#34;minikube&#34;.&#xA;&#xA;# switch back to previous cluster&#xA;$ kubectx -&#xA;Switched to context &#34;oregon&#34;.&#xA;&#xA;# create an alias for the context&#xA;$ kubectx dublin=gke_ahmetb_europe-west1-b_dublin&#xA;Context &#34;dublin&#34; set.&#xA;Aliased &#34;gke_ahmetb_europe-west1-b_dublin&#34; as &#34;dublin&#34;.&#xA;&#xA;# change the active namespace on kubectl&#xA;$ kubens kube-system&#xA;Context &#34;test&#34; set.&#xA;Active namespace is &#34;kube-system&#34;.&#xA;&#xA;# go back to the previous namespace&#xA;$ kubens -&#xA;Context &#34;test&#34; set.&#xA;Active namespace is &#34;default&#34;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;&lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; installed, you can also &lt;strong&gt;interactively&lt;/strong&gt; select a context or cluster, or fuzzy-search by typing a few characters. To learn more, read &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#interactive-mode&#34;&gt;interactive mode →&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Both &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; support &lt;kbd&gt;Tab&lt;/kbd&gt; completion on bash/zsh/fish shells to help with long context names. You don&#39;t have to remember full context names anymore.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Stable versions of &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; are small bash scripts that you can find in this repository.&lt;/p&gt; &#xA;&lt;p&gt;Starting with v0.9.0, &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; &lt;strong&gt;are now rewritten in Go&lt;/strong&gt;. They should work the same way (and we&#39;ll keep the bash-based implementations around) but the new features will be added to the new Go programs. Please help us test this new Go implementation by downloading the binaries from the &lt;a href=&#34;https://github.com/ahmetb/kubectx/releases&#34;&gt;&lt;strong&gt;Releases page →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation options:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#kubectl-plugins-macos-and-linux&#34;&gt;as kubectl plugins (macOS &amp;amp; Linux)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#homebrew-macos-and-linux&#34;&gt;with Homebrew (macOS &amp;amp; Linux)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#macports-macos&#34;&gt;with MacPorts (macOS)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#apt-debian&#34;&gt;with apt (Debian)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#pacman-arch-linux&#34;&gt;with pacman (Arch Linux)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#windows-installation-using-chocolatey&#34;&gt;with Chocolatey (Windows)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#manual-installation-macos-and-linux&#34;&gt;manually (macOS &amp;amp; Linux)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you like to add context/namespace information to your shell prompt (&lt;code&gt;$PS1&lt;/code&gt;), you can try out &lt;a href=&#34;https://github.com/jonmosco/kube-ps1&#34;&gt;kube-ps1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Kubectl Plugins (macOS and Linux)&lt;/h3&gt; &#xA;&lt;p&gt;You can install and use the &lt;a href=&#34;https://github.com/kubernetes-sigs/krew/&#34;&gt;Krew&lt;/a&gt; kubectl plugin manager to get &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This will not install the shell completion scripts. If you want them, *choose another installation method or install the scripts &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#manual-installation-macos-and-linux&#34;&gt;manually&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kubectl krew install ctx&#xA;kubectl krew install ns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing, the tools will be available as &lt;code&gt;kubectl ctx&lt;/code&gt; and &lt;code&gt;kubectl ns&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew (macOS and Linux)&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; you can install like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install kubectx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will set up bash/zsh/fish completion scripts automatically.&lt;/p&gt; &#xA;&lt;h3&gt;MacPorts (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;a href=&#34;https://www.macports.org&#34;&gt;MacPorts&lt;/a&gt; you can install like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo port install kubectx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;apt (Debian)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install kubectx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Newer versions might be available on repos like &lt;a href=&#34;https://packages.debian.org/buster/kubectx&#34;&gt;Debian Buster (testing)&lt;/a&gt;, &lt;a href=&#34;https://packages.debian.org/sid/kubectx&#34;&gt;Sid (unstable)&lt;/a&gt; (&lt;em&gt;if you are unfamiliar with the Debian release process and how to enable testing/unstable repos, check out the &lt;a href=&#34;https://wiki.debian.org/DebianReleases&#34;&gt;Debian Wiki&lt;/a&gt;&lt;/em&gt;):&lt;/p&gt; &#xA;&lt;h3&gt;pacman (Arch Linux)&lt;/h3&gt; &#xA;&lt;p&gt;Available as official Arch Linux package. Install it via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S kubectx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Windows Installation (using Chocolatey)&lt;/h3&gt; &#xA;&lt;p&gt;Available as packages on &lt;a href=&#34;https://chocolatey.org/why-chocolatey&#34;&gt;Chocolatey&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-pwsh&#34;&gt;choco install kubens kubectx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual Installation (macOS and Linux)&lt;/h3&gt; &#xA;&lt;p&gt;Since &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; are written in Bash, you should be able to install them to any POSIX environment that has Bash installed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the &lt;code&gt;kubectx&lt;/code&gt;, and &lt;code&gt;kubens&lt;/code&gt; scripts.&lt;/li&gt; &#xA; &lt;li&gt;Either: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;save them all to somewhere in your &lt;code&gt;PATH&lt;/code&gt;,&lt;/li&gt; &#xA;   &lt;li&gt;or save them to a directory, then create symlinks to &lt;code&gt;kubectx&lt;/code&gt;/&lt;code&gt;kubens&lt;/code&gt; from somewhere in your &lt;code&gt;PATH&lt;/code&gt;, like &lt;code&gt;/usr/local/bin&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Make &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; executable (&lt;code&gt;chmod +x ...&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example installation steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo git clone https://github.com/ahmetb/kubectx /opt/kubectx&#xA;sudo ln -s /opt/kubectx/kubectx /usr/local/bin/kubectx&#xA;sudo ln -s /opt/kubectx/kubens /usr/local/bin/kubens&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you also want to have shell completions, pick an installation method for the &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/completion/&#34;&gt;completion scripts&lt;/a&gt; that fits your system best: &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#completion-scripts-for-zsh-with-antibody&#34;&gt;&lt;code&gt;zsh&lt;/code&gt; with &lt;code&gt;antibody&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#completion-scripts-for-plain-zsh&#34;&gt;plain &lt;code&gt;zsh&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#completion-scripts-for-bash&#34;&gt;&lt;code&gt;bash&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#completion-scripts-for-fish&#34;&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Completion scripts for &lt;code&gt;zsh&lt;/code&gt; with &lt;a href=&#34;https://getantibody.github.io&#34;&gt;antibody&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Add this line to your &lt;a href=&#34;https://getantibody.github.io/usage/&#34;&gt;Plugins File&lt;/a&gt; (e.g. &lt;code&gt;~/.zsh_plugins.txt&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ahmetb/kubectx path:completion kind:fpath&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on your setup, you might or might not need to call &lt;code&gt;compinit&lt;/code&gt; or &lt;code&gt;autoload -U compinit &amp;amp;&amp;amp; compinit&lt;/code&gt; in your &lt;code&gt;~/.zshrc&lt;/code&gt; after you load the Plugins file. If you use &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;oh-my-zsh&lt;/a&gt;, load the completions before you load &lt;code&gt;oh-my-zsh&lt;/code&gt; because &lt;code&gt;oh-my-zsh&lt;/code&gt; will call &lt;code&gt;compinit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Completion scripts for plain &lt;code&gt;zsh&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The completion scripts have to be in a path that belongs to &lt;code&gt;$fpath&lt;/code&gt;. Either link or copy them to an existing folder.&lt;/p&gt; &#xA;&lt;p&gt;Example with &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;&lt;code&gt;oh-my-zsh&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/.oh-my-zsh/completions&#xA;chmod -R 755 ~/.oh-my-zsh/completions&#xA;ln -s /opt/kubectx/completion/_kubectx.zsh ~/.oh-my-zsh/completions/_kubectx.zsh&#xA;ln -s /opt/kubectx/completion/_kubens.zsh ~/.oh-my-zsh/completions/_kubens.zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If completion doesn&#39;t work, add &lt;code&gt;autoload -U compinit &amp;amp;&amp;amp; compinit&lt;/code&gt; to your &lt;code&gt;.zshrc&lt;/code&gt; (similar to &lt;a href=&#34;https://github.com/zsh-users/zsh-completions/raw/master/README.md#oh-my-zsh&#34;&gt;&lt;code&gt;zsh-completions&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you are not using &lt;a href=&#34;https://github.com/ohmyzsh/ohmyzsh&#34;&gt;&lt;code&gt;oh-my-zsh&lt;/code&gt;&lt;/a&gt;, you could link to &lt;code&gt;/usr/share/zsh/functions/Completion&lt;/code&gt; (might require sudo), depending on the &lt;code&gt;$fpath&lt;/code&gt; of your zsh installation.&lt;/p&gt; &#xA;&lt;p&gt;In case of errors, calling &lt;code&gt;compaudit&lt;/code&gt; might help.&lt;/p&gt; &#xA;&lt;h4&gt;Completion scripts for &lt;code&gt;bash&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ahmetb/kubectx.git ~/.kubectx&#xA;COMPDIR=$(pkg-config --variable=completionsdir bash-completion)&#xA;ln -sf ~/.kubectx/completion/kubens.bash $COMPDIR/kubens&#xA;ln -sf ~/.kubectx/completion/kubectx.bash $COMPDIR/kubectx&#xA;cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; ~/.bashrc&#xA;&#xA;&#xA;#kubectx and kubens&#xA;export PATH=~/.kubectx:\$PATH&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Completion scripts for &lt;code&gt;fish&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fish&#34;&gt;mkdir -p ~/.config/fish/completions&#xA;ln -s /opt/kubectx/completion/kubectx.fish ~/.config/fish/completions/&#xA;ln -s /opt/kubectx/completion/kubens.fish ~/.config/fish/completions/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Interactive mode&lt;/h3&gt; &#xA;&lt;p&gt;If you want &lt;code&gt;kubectx&lt;/code&gt; and &lt;code&gt;kubens&lt;/code&gt; commands to present you an interactive menu with fuzzy searching, you just need to &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;install &lt;code&gt;fzf&lt;/code&gt;&lt;/a&gt; in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/img/kubectx-interactive.gif&#34; alt=&#34;kubectx interactive search with fzf&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;fzf&lt;/code&gt; installed, but want to opt out of using this feature, set the environment variable &lt;code&gt;KUBECTX_IGNORE_FZF=1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to keep &lt;code&gt;fzf&lt;/code&gt; interactive mode but need the default behavior of the command, you can do it by piping the output to another command (e.g. &lt;code&gt;kubectx | cat &lt;/code&gt;).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Customizing colors&lt;/h3&gt; &#xA;&lt;p&gt;If you like to customize the colors indicating the current namespace or context, set the environment variables &lt;code&gt;KUBECTX_CURRENT_FGCOLOR&lt;/code&gt; and &lt;code&gt;KUBECTX_CURRENT_BGCOLOR&lt;/code&gt; (refer color codes &lt;a href=&#34;https://linux.101hacks.com/ps1-examples/prompt-color-using-tput/&#34;&gt;here&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # blue text&#xA;export KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) # white background&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Colors in the output can be disabled by setting the &lt;a href=&#34;https://no-color.org/&#34;&gt;&lt;code&gt;NO_COLOR&lt;/code&gt;&lt;/a&gt; environment variable.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you liked &lt;code&gt;kubectx&lt;/code&gt;, you may like my &lt;a href=&#34;https://github.com/ahmetb/kubectl-aliases&#34;&gt;&lt;code&gt;kubectl-aliases&lt;/code&gt;&lt;/a&gt; project, too. I recommend pairing kubectx and kubens with &lt;a href=&#34;https://raw.githubusercontent.com/ahmetb/kubectx/master/#interactive-mode&#34;&gt;fzf&lt;/a&gt; and &lt;a href=&#34;https://github.com/jonmosco/kube-ps1&#34;&gt;kube-ps1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Stargazers over time&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/ahmetb/kubectx&#34;&gt;&lt;img src=&#34;https://starchart.cc/ahmetb/kubectx.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://ga-beacon.appspot.com/UA-2609286-17/kubectx/README?pixel&#34; alt=&#34;Google Analytics&#34;&gt; &#xA; &lt;!-- TODO broken since Aug 2021 as igrigorik left Google --&gt;&lt;/p&gt;</summary>
  </entry>
</feed>