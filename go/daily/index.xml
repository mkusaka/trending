<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-26T01:37:32Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cilium/hubble</title>
    <updated>2023-01-26T01:37:32Z</updated>
    <id>tag:github.com,2023-01-26:/cilium/hubble</id>
    <link href="https://github.com/cilium/hubble" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hubble - Network, Service &amp; Security Observability for Kubernetes using eBPF&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://cdn.jsdelivr.net/gh/cilium/hubble@master/Documentation/images/hubble_logo.png&#34; width=&#34;350&#34; alt=&#34;Hubble Logo&#34;&gt; &#xA; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/cilium/hubble@master/Documentation/images/hubble_logo-dark.png&#34; width=&#34;350&#34; alt=&#34;Hubble Logo&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Network, Service &amp;amp; Security Observability for Kubernetes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/#what-is-hubble&#34;&gt;What is Hubble?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/#service-dependency-graph&#34;&gt;Service Dependency Graph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/#metrics--monitoring&#34;&gt;Metrics &amp;amp; Monitoring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/#flow-visibility&#34;&gt;Flow Visibility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/#community&#34;&gt;Get in touch / Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/#authors&#34;&gt;Authors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What is Hubble?&lt;/h1&gt; &#xA;&lt;p&gt;Hubble is a fully distributed networking and security observability platform for cloud native workloads. It is built on top of &lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;Cilium&lt;/a&gt; and &lt;a href=&#34;https://ebpf.io&#34;&gt;eBPF&lt;/a&gt; to enable deep visibility into the communication and behavior of services as well as the networking infrastructure in a completely transparent manner.&lt;/p&gt; &#xA;&lt;p&gt;Hubble can answer questions such as:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Service dependencies &amp;amp; communication map:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What services are communicating with each other? How frequently? What does the service dependency graph look like?&lt;/li&gt; &#xA; &lt;li&gt;What HTTP calls are being made? What Kafka topics does a service consume from or produce to?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Operational monitoring &amp;amp; alerting:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Is any network communication failing? Why is communication failing? Is it DNS? Is it an application or network problem? Is the communication broken on layer 4 (TCP) or layer 7 (HTTP)?&lt;/li&gt; &#xA; &lt;li&gt;Which services have experienced a DNS resolution problems in the last 5 minutes? Which services have experienced an interrupted TCP connection recently or have seen connections timing out? What is the rate of unanswered TCP SYN requests?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Application monitoring:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is the rate of 5xx or 4xx HTTP response codes for a particular service or across all clusters?&lt;/li&gt; &#xA; &lt;li&gt;What is the 95th and 99th percentile latency between HTTP requests and responses in my cluster? Which services are performing the worst? What is the latency between two services?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Security observability:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Which services had connections blocked due to network policy? What services have been accessed from outside the cluster? Which services have resolved a particular DNS name?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why Hubble?&lt;/h2&gt; &#xA;&lt;p&gt;The Linux kernel technology &lt;a href=&#34;https://ebpf.io&#34;&gt;eBPF&lt;/a&gt; is enabling visibility into systems and applications at a granularity and efficiency that was not possible before. It does so in a completely transparent way, without requiring the application to change or for the application to hide information. By building on top of &lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;Cilium&lt;/a&gt;, Hubble can leverage &lt;a href=&#34;https://ebpf.io&#34;&gt;eBPF&lt;/a&gt; for visibility. By leveraging &lt;a href=&#34;https://ebpf.io&#34;&gt;eBPF&lt;/a&gt;, all visibility is programmable and allows for a dynamic approach that minimizes overhead while providing deep and detailed insight where required. Hubble has been created and specifically designed to make best use of these new &lt;a href=&#34;https://ebpf.io&#34;&gt;eBPF&lt;/a&gt; powers.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Since the release of v0.8, the Hubble CLI is backward compatible with all supported Cilium releases. For this reason, only the latest Hubble CLI version is maintained.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Release Date&lt;/th&gt; &#xA;   &lt;th&gt;Maintained&lt;/th&gt; &#xA;   &lt;th&gt;Supported Cilium Version&lt;/th&gt; &#xA;   &lt;th&gt;Artifacts&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/tree/v0.11&#34;&gt;v0.11&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2023-01-24 (v0.11.1)&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;Cilium 1.13 and older&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/releases/tag/v0.11.1&#34;&gt;GitHub Release&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/tree/v0.10&#34;&gt;v0.10&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2022-06-22 (v0.10.0)&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Cilium 1.12 and older&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/releases/tag/v0.10.0&#34;&gt;GitHub Release&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/tree/v0.9&#34;&gt;v0.9&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-11-30 (v0.9.0)&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Cilium 1.11 and older&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/releases/tag/v0.9.0&#34;&gt;GitHub Release&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/tree/v0.8&#34;&gt;v0.8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2021-09-10 (v0.8.2)&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Cilium 1.10 and older&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/releases/tag/v0.8.2&#34;&gt;GitHub Release&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/tree/v0.7&#34;&gt;v0.7&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-10-22 (v0.7.1)&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Cilium 1.9 and older&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/releases/tag/v0.7.1&#34;&gt;GitHub Release&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/tree/v0.6&#34;&gt;v0.6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-05-29 (v0.6.1)&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Cilium 1.8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/releases/tag/v0.6.1&#34;&gt;GitHub Release&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/tree/v0.5&#34;&gt;v0.5&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;2020-07-28 (v0.5.2)&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;Cilium 1.7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cilium/hubble/releases/tag/v0.5.2&#34;&gt;GitHub Release&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Component Stability&lt;/h2&gt; &#xA;&lt;p&gt;Hubble project consists of several components (see Architecture section).&lt;/p&gt; &#xA;&lt;p&gt;While the core Hubble components have been running in production in multiple environments, new components continue to emerge as the project grows and expands in scope.&lt;/p&gt; &#xA;&lt;p&gt;Some components, due to their relatively young age, are still considered beta and have to be used with caution in critical production workloads.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Component&lt;/th&gt; &#xA;   &lt;th&gt;Area&lt;/th&gt; &#xA;   &lt;th&gt;State&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hubble CLI&lt;/td&gt; &#xA;   &lt;td&gt;Core&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hubble Server&lt;/td&gt; &#xA;   &lt;td&gt;Core&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hubble Metrics&lt;/td&gt; &#xA;   &lt;td&gt;Core&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hubble Relay&lt;/td&gt; &#xA;   &lt;td&gt;Multinode&lt;/td&gt; &#xA;   &lt;td&gt;Stable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hubble UI&lt;/td&gt; &#xA;   &lt;td&gt;UI&lt;/td&gt; &#xA;   &lt;td&gt;Beta&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cilium/hubble/master/Documentation/images/hubble_arch.png&#34; alt=&#34;Hubble Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/intro/&#34;&gt;Introduction to Cilium &amp;amp; Hubble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.cilium.io/en/stable/gettingstarted/hubble/&#34;&gt;Networking and Security Observability with Hubble&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h2&gt;Service Dependency Graph&lt;/h2&gt; &#xA;&lt;p&gt;Troubleshooting microservices application connectivity is a challenging task. Simply looking at &#34;kubectl get pods&#34; does not indicate dependencies between each service or external APIs or databases.&lt;/p&gt; &#xA;&lt;p&gt;Hubble enables zero-effort automatic discovery of the service dependency graph for Kubernetes Clusters at L3/L4 and even L7, allowing user-friendly visualization and filtering of those dataflows as a Service Map.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://docs.cilium.io/en/stable/gettingstarted/hubble/&#34;&gt;Hubble Service Map Tutorial&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cilium/hubble/master/Documentation/images/servicemap.png&#34; alt=&#34;Service Map&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Metrics &amp;amp; Monitoring&lt;/h2&gt; &#xA;&lt;p&gt;The metrics and monitoring functionality provides an overview of the state of systems and allow to recognize patterns indicating failure and other scenarios that require action. The following is a short list of example metrics, for a more detailed list of examples, see the &lt;a href=&#34;https://docs.cilium.io/en/stable/operations/metrics/#hubble-metrics&#34;&gt;Metrics Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Networking Behavior&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cilium/hubble/master/Documentation/images/network_and_tcp.png&#34; alt=&#34;Networking&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Network Policy Observation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cilium/hubble/master/Documentation/images/network_policy_pod.png&#34; alt=&#34;Network Policy&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;HTTP Request/Response Rate &amp;amp; Latency&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cilium/hubble/master/Documentation/images/http.png&#34; alt=&#34;HTTP&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;DNS Request/Response Monitoring&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cilium/hubble/master/Documentation/images/dns.png&#34; alt=&#34;DNS&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Flow Visibility&lt;/h2&gt; &#xA;&lt;p&gt;Flow visibility provides visibility into flow information on the network and application protocol level. This enables visibility into individual TCP connections, DNS queries, HTTP requests, Kafka communication, and much more.&lt;/p&gt; &#xA;&lt;h3&gt;DNS Resolution&lt;/h3&gt; &#xA;&lt;p&gt;Identifying pods which have received DNS response indicating failure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hubble observe --since=1m -t l7 -j \&#xA;   | jq &#39;select(.l7.dns.rcode==3) | .destination.namespace + &#34;/&#34; + .destination.pod_name&#39; \&#xA;   | sort | uniq -c | sort -r&#xA;  42 &#34;starwars/jar-jar-binks-6f5847c97c-qmggv&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Successful query &amp;amp; response:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;starwars/x-wing-bd86d75c5-njv8k            kube-system/coredns-5c98db65d4-twwdg      DNS Query deathstar.starwars.svc.cluster.local. A&#xA;kube-system/coredns-5c98db65d4-twwdg       starwars/x-wing-bd86d75c5-njv8k           DNS Answer &#34;10.110.126.213&#34; TTL: 3 (Query deathstar.starwars.svc.cluster.local. A)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Non-existent domain:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;starwars/jar-jar-binks-789c4b695d-ltrzm    kube-system/coredns-5c98db65d4-f4m8n      DNS Query unknown-galaxy.svc.cluster.local. A&#xA;starwars/jar-jar-binks-789c4b695d-ltrzm    kube-system/coredns-5c98db65d4-f4m8n      DNS Query unknown-galaxy.svc.cluster.local. AAAA&#xA;kube-system/coredns-5c98db65d4-twwdg       starwars/jar-jar-binks-789c4b695d-ltrzm   DNS Answer RCode: Non-Existent Domain TTL: 4294967295 (Query unknown-galaxy.starwars.svc.cluster.local. A)&#xA;kube-system/coredns-5c98db65d4-twwdg       starwars/jar-jar-binks-789c4b695d-ltrzm   DNS Answer RCode: Non-Existent Domain TTL: 4294967295 (Query unknown-galaxy.starwars.svc.cluster.local. AAAA)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;HTTP Protocol&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Successful request &amp;amp; response with latency information:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;starwars/x-wing-bd86d75c5-njv8k:53410      starwars/deathstar-695d8f7ddc-lvj84:80    HTTP/1.1 GET http://deathstar/&#xA;starwars/deathstar-695d8f7ddc-lvj84:80     starwars/x-wing-bd86d75c5-njv8k:53410     HTTP/1.1 200 1ms (GET http://deathstar/)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TCP/UDP Packets&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Successful TCP connection:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;starwars/x-wing-bd86d75c5-njv8k:53410      starwars/deathstar-695d8f7ddc-lvj84:80    TCP Flags: SYN&#xA;deathstar.starwars.svc.cluster.local:80    starwars/x-wing-bd86d75c5-njv8k:53410     TCP Flags: SYN, ACK&#xA;starwars/x-wing-bd86d75c5-njv8k:53410      starwars/deathstar-695d8f7ddc-lvj84:80    TCP Flags: ACK, FIN&#xA;deathstar.starwars.svc.cluster.local:80    starwars/x-wing-bd86d75c5-njv8k:53410     TCP Flags: ACK, FIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Connection timeout:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;starwars/r2d2-6694d57947-xwhtz:60948   deathstar.starwars.svc.cluster.local:8080     TCP Flags: SYN&#xA;starwars/r2d2-6694d57947-xwhtz:60948   deathstar.starwars.svc.cluster.local:8080     TCP Flags: SYN&#xA;starwars/r2d2-6694d57947-xwhtz:60948   deathstar.starwars.svc.cluster.local:8080     TCP Flags: SYN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Network Policy Behavior&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Denied connection attempt:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;starwars/enterprise-5775b56c4b-thtwl:37800   starwars/deathstar-695d8f7ddc-lvj84:80(http)   Policy denied (L3)   TCP Flags: SYN&#xA;starwars/enterprise-5775b56c4b-thtwl:37800   starwars/deathstar-695d8f7ddc-lvj84:80(http)   Policy denied (L3)   TCP Flags: SYN&#xA;starwars/enterprise-5775b56c4b-thtwl:37800   starwars/deathstar-695d8f7ddc-lvj84:80(http)   Policy denied (L3)   TCP Flags: SYN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Specifying Raw Flow Filters&lt;/h3&gt; &#xA;&lt;p&gt;Hubble supports extensive set of filtering options that can be specified as a combination of allowlist and denylist. Hubble applies these filters as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;for each flow:&#xA;  if flow does not match any of the allowlist filters:&#xA;    continue&#xA;  if flow matches any of the denylist filters:&#xA;    continue&#xA;  send flow to client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass these filters to &lt;code&gt;hubble observe&lt;/code&gt; command as &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto3#json&#34;&gt;JSON-encoded&lt;/a&gt; &lt;a href=&#34;https://github.com/cilium/cilium/raw/v1.10.5/api/v1/flow/flow.proto#L348&#34;&gt;FlowFilters&lt;/a&gt;. For example, to observe flows that match the following conditions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Either the source or destination identity contains &lt;code&gt;k8s:io.kubernetes.pod.namespace=kube-system&lt;/code&gt; or &lt;code&gt;reserved:host&lt;/code&gt; label, AND&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neither the source nor destination identity contains &lt;code&gt;k8s:k8s-app=kube-dns&lt;/code&gt; label:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;hubble observe \&#xA;  --allowlist &#39;{&#34;source_label&#34;:[&#34;k8s:io.kubernetes.pod.namespace=kube-system&#34;,&#34;reserved:host&#34;]}&#39; \&#xA;  --allowlist &#39;{&#34;destination_label&#34;:[&#34;k8s:io.kubernetes.pod.namespace=kube-system&#34;,&#34;reserved:host&#34;]}&#39; \&#xA;  --denylist &#39;{&#34;source_label&#34;:[&#34;k8s:k8s-app=kube-dns&#34;]}&#39; \&#xA;  --denylist &#39;{&#34;destination_label&#34;:[&#34;k8s:k8s-app=kube-dns&#34;]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatively, you can also specify these flags as &lt;code&gt;HUBBLE_{ALLOWLIST,DENYLIST}&lt;/code&gt; environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat &amp;gt; allowlist.txt &amp;lt;&amp;lt;EOF&#xA;{&#34;source_label&#34;:[&#34;k8s:io.kubernetes.pod.namespace=kube-system&#34;,&#34;reserved:host&#34;]}&#xA;{&#34;destination_label&#34;:[&#34;k8s:io.kubernetes.pod.namespace=kube-system&#34;,&#34;reserved:host&#34;]}&#xA;EOF&#xA;&#xA;cat &amp;gt; denylist.txt &amp;lt;&amp;lt;EOF&#xA;{&#34;source_label&#34;:[&#34;k8s:k8s-app=kube-dns&#34;]}&#xA;{&#34;destination_label&#34;:[&#34;k8s:k8s-app=kube-dns&#34;]}&#xA;EOF&#xA;&#xA;HUBBLE_ALLOWLIST=$(cat allowlist.txt)&#xA;HUBBLE_DENYLIST=$(cat denylist.txt)&#xA;export HUBBLE_ALLOWLIST&#xA;export HUBBLE_DENYLIST&#xA;&#xA;hubble observe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;--allowlist&lt;/code&gt; and &lt;code&gt;--denylist&lt;/code&gt; filters get included in the request &lt;strong&gt;in addition to&lt;/strong&gt; regular flow filters like &lt;code&gt;--label&lt;/code&gt; or &lt;code&gt;--namespace&lt;/code&gt;. Use &lt;code&gt;--print-raw-filters&lt;/code&gt; flag to verify the exact filters that the Hubble CLI generates. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% hubble observe --print-raw-filters \&#xA;    -t drop \&#xA;    -n kube-system \&#xA;    --not --label &#34;k8s:k8s-app=kube-dns&#34; \&#xA;    --allowlist &#39;{&#34;source_label&#34;:[&#34;k8s:k8s-app=my-app&#34;]}&#39;&#xA;allowlist:&#xA;- &#39;{&#34;source_pod&#34;:[&#34;kube-system/&#34;],&#34;event_type&#34;:[{&#34;type&#34;:1}]}&#39;&#xA;- &#39;{&#34;destination_pod&#34;:[&#34;kube-system/&#34;],&#34;event_type&#34;:[{&#34;type&#34;:1}]}&#39;&#xA;- &#39;{&#34;source_label&#34;:[&#34;k8s:k8s-app=my-app&#34;]}&#39;&#xA;denylist:&#xA;- &#39;{&#34;source_label&#34;:[&#34;k8s:k8s-app=kube-dns&#34;]}&#39;&#xA;- &#39;{&#34;destination_label&#34;:[&#34;k8s:k8s-app=kube-dns&#34;]}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output YAML can be saved to a file and passed to &lt;code&gt;hubble observe&lt;/code&gt; command with &lt;code&gt;--config&lt;/code&gt; flag. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% hubble observe --print-raw-filters --allowlist &#39;{&#34;source_label&#34;:[&#34;k8s:k8s-app=my-app&#34;]}&#39; &amp;gt; filters.yaml&#xA;% hubble observe --config ./filters.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://cilium.herokuapp.com/&#34;&gt;Cilium Slack #hubble channel&lt;/a&gt; to chat with Cilium Hubble developers and other Cilium / Hubble users. This is a good place to learn about Hubble and Cilium, ask questions, and share your experiences.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about &lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;Cilium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Authors&lt;/h1&gt; &#xA;&lt;p&gt;Hubble is an open source project licensed under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License&lt;/a&gt;. Everybody is welcome to contribute. The project is following the &lt;a href=&#34;https://docs.cilium.io/en/stable/contributing/contributing/#developer-contributor-guide&#34;&gt;Governance Rules&lt;/a&gt; of the &lt;a href=&#34;https://github.com/cilium/cilium&#34;&gt;Cilium&lt;/a&gt; project. See &lt;a href=&#34;https://raw.githubusercontent.com/cilium/hubble/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for instructions on how to contribute and details of the Code of Conduct.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>99designs/gqlgen</title>
    <updated>2023-01-26T01:37:32Z</updated>
    <id>tag:github.com,2023-01-26:/99designs/gqlgen</id>
    <link href="https://github.com/99designs/gqlgen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;go generate based graphql server library&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/980499/133180111-d064b38c-6eb9-444b-a60f-7005a6e68222.png&#34; alt=&#34;gqlgen&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;gqlgen &lt;a href=&#34;https://github.com/99designs/gqlgen/actions&#34;&gt;&lt;img src=&#34;https://github.com/99designs/gqlgen/actions/workflows/integration.yml/badge.svg?sanitize=true&#34; alt=&#34;Integration&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/99designs/gqlgen?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/99designs/gqlgen/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/99designs/gqlgen&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/99designs/gqlgen&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/99designs/gqlgen&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/99designs/gqlgen.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://gqlgen.com/&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/docs/available/green&#34; alt=&#34;Read the Docs&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;What is gqlgen?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/99designs/gqlgen&#34;&gt;gqlgen&lt;/a&gt; is a Go library for building GraphQL servers without any fuss.&lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;gqlgen is based on a Schema first approach&lt;/strong&gt; — You get to Define your API using the GraphQL &lt;a href=&#34;http://graphql.org/learn/schema/&#34;&gt;Schema Definition Language&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gqlgen prioritizes Type safety&lt;/strong&gt; — You should never see &lt;code&gt;map[string]interface{}&lt;/code&gt; here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gqlgen enables Codegen&lt;/strong&gt; — We generate the boring bits, so you can focus on building your app quickly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Still not convinced enough to use &lt;strong&gt;gqlgen&lt;/strong&gt;? Compare &lt;strong&gt;gqlgen&lt;/strong&gt; with other Go graphql &lt;a href=&#34;https://gqlgen.com/feature-comparison/&#34;&gt;implementations&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://golang.org/doc/tutorial/create-module&#34;&gt;Initialise a new go module&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;mkdir example&#xA;cd example&#xA;go mod init example&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add &lt;code&gt;github.com/99designs/gqlgen&lt;/code&gt; to your &lt;a href=&#34;https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module&#34;&gt;project&#39;s tools.go&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;printf &#39;// +build tools\npackage tools\nimport (_ &#34;github.com/99designs/gqlgen&#34;\n _ &#34;github.com/99designs/gqlgen/graphql/introspection&#34;)&#39; | gofmt &amp;gt; tools.go&#xA;&#xA;go mod tidy&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Initialise gqlgen config and generate models&lt;/p&gt; &lt;pre&gt;&lt;code&gt;go run github.com/99designs/gqlgen init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the graphql server&lt;/p&gt; &lt;pre&gt;&lt;code&gt;go run server.go&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More help to get started:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gqlgen.com/getting-started/&#34;&gt;Getting started tutorial&lt;/a&gt; - a comprehensive guide to help you get started&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/99designs/gqlgen/tree/master/_examples&#34;&gt;Real-world examples&lt;/a&gt; show how to create GraphQL applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/99designs/gqlgen&#34;&gt;Reference docs&lt;/a&gt; for the APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you think you&#39;ve found a bug, or something isn&#39;t behaving the way you think it should, please raise an &lt;a href=&#34;https://github.com/99designs/gqlgen/issues&#34;&gt;issue&lt;/a&gt; on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions, Read our &lt;a href=&#34;https://github.com/99designs/gqlgen/raw/master/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; to learn more about contributing to &lt;strong&gt;gqlgen&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Frequently asked questions&lt;/h2&gt; &#xA;&lt;h3&gt;How do I prevent fetching child objects that might not be used?&lt;/h3&gt; &#xA;&lt;p&gt;When you have nested or recursive schema like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;type User {&#xA;  id: ID!&#xA;  name: String!&#xA;  friends: [User!]!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to tell gqlgen that it should only fetch friends if the user requested it. There are two ways to do this;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;Using Custom Models&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Write a custom model that omits the friends field:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type User struct {&#xA;  ID int&#xA;  Name string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And reference the model in &lt;code&gt;gqlgen.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# gqlgen.yml&#xA;models:&#xA;  User:&#xA;    model: github.com/you/pkg/model.User # go import path to the User struct above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;Using Explicit Resolvers&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to Keep using the generated model, mark the field as requiring a resolver explicitly in &lt;code&gt;gqlgen.yml&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# gqlgen.yml&#xA;models:&#xA;  User:&#xA;    fields:&#xA;      friends:&#xA;        resolver: true # force a resolver to be generated&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After doing either of the above and running generate we will need to provide a resolver for friends:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (r *userResolver) Friends(ctx context.Context, obj *User) ([]*User, error) {&#xA;  // select * from user where friendid = obj.ID&#xA;  return friends,  nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use inline config with directives to achieve the same result&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;directive @goModel(model: String, models: [String!]) on OBJECT&#xA;    | INPUT_OBJECT&#xA;    | SCALAR&#xA;    | ENUM&#xA;    | INTERFACE&#xA;    | UNION&#xA;&#xA;directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION&#xA;    | FIELD_DEFINITION&#xA;&#xA;type User @goModel(model: &#34;github.com/you/pkg/model.User&#34;) {&#xA;    id: ID!         @goField(name: &#34;todoId&#34;)&#xA;    friends: [User!]!   @goField(forceResolver: true)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Can I change the type of the ID from type String to Type Int?&lt;/h3&gt; &#xA;&lt;p&gt;Yes! You can by remapping it in config as seen below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;models:&#xA;  ID: # The GraphQL type ID is backed by&#xA;    model:&#xA;      - github.com/99designs/gqlgen/graphql.IntID # a go integer&#xA;      - github.com/99designs/gqlgen/graphql.ID # or a go string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means gqlgen will be able to automatically bind to strings or ints for models you have written yourself, but the first model in this list is used as the default type and it will always be used when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generating models based on schema&lt;/li&gt; &#xA; &lt;li&gt;As arguments in resolvers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There isn&#39;t any way around this, gqlgen has no way to know what you want in a given context.&lt;/p&gt; &#xA;&lt;h3&gt;Why do my interfaces have getters? Can I disable these?&lt;/h3&gt; &#xA;&lt;p&gt;These were added in v0.17.14 to allow accessing common interface fields without casting to a concrete type. However, certain fields, like Relay-style Connections, cannot be implemented with simple getters.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d prefer to not have getters generated in your interfaces, you can add the following in your &lt;code&gt;gqlgen.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# gqlgen.yml&#xA;omit_getters: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/FdURVezcdcw&#34;&gt;Christopher Biscardi @ Gophercon UK 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://99designs.com.au/blog/engineering/gqlgen-a-graphql-server-generator-for-go/&#34;&gt;Introducing gqlgen: a GraphQL Server Generator for Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@ivan.corrales.solera/dive-into-graphql-9bfedf22e1a&#34;&gt;Dive into GraphQL by Iván Corrales Solera&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oshalygin/gqlgen-pg-todo-example&#34;&gt;Sample Project built on gqlgen with Postgres by Oleg Shalygin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.howtographql.com/graphql-go/0-introduction/&#34;&gt;Hackernews GraphQL Server with gqlgen by Shayegan Hooshyari&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>