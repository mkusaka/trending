<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-12T02:25:15Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>spf13/cast</title>
    <updated>2023-04-12T02:25:15Z</updated>
    <id>tag:github.com,2023-04-12:/spf13/cast</id>
    <link href="https://github.com/spf13/cast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;safe and easy casting from one type to another in Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cast&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/cast/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/spf13/cast/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/mod/github.com/spf13/cast&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/mod/github.com/spf13/cast&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/go%20version-%3E=1.16-61CFDD.svg?style=flat-square&#34; alt=&#34;Go Version&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/spf13/cast&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/spf13/cast&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Easy and safe casting from one type to another in Go&lt;/p&gt; &#xA;&lt;p&gt;Don’t Panic! ... Cast&lt;/p&gt; &#xA;&lt;h2&gt;What is Cast?&lt;/h2&gt; &#xA;&lt;p&gt;Cast is a library to convert between different go types in a consistent and easy way.&lt;/p&gt; &#xA;&lt;p&gt;Cast provides simple functions to easily convert a number to a string, an interface into a bool, etc. Cast does this intelligently when an obvious conversion is possible. It doesn’t make any attempts to guess what you meant, for example you can only convert a string to an int when it is a string representation of an int such as “8”. Cast was developed for use in &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;, a website engine which uses YAML, TOML or JSON for meta data.&lt;/p&gt; &#xA;&lt;h2&gt;Why use Cast?&lt;/h2&gt; &#xA;&lt;p&gt;When working with dynamic data in Go you often need to cast or convert the data from one type into another. Cast goes beyond just using type assertion (though it uses that when possible) to provide a very straightforward and convenient library.&lt;/p&gt; &#xA;&lt;p&gt;If you are working with interfaces to handle things like dynamic content you’ll need an easy way to convert an interface into a given type. This is the library for you.&lt;/p&gt; &#xA;&lt;p&gt;If you are taking in data from YAML, TOML or JSON or other formats which lack full types, then Cast is the library for you.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Cast provides a handful of To_____ methods. These methods will always return the desired type. &lt;strong&gt;If input is provided that will not convert to that type, the 0 or nil value for that type will be returned&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Cast also provides identical methods To_____E. These return the same result as the To_____ methods, plus an additional error which tells you if it successfully converted. Using these methods you can tell the difference between when the input matched the zero value or when the conversion failed and the zero value was returned.&lt;/p&gt; &#xA;&lt;p&gt;The following examples are merely a sample of what is available. Please review the code for a complete set.&lt;/p&gt; &#xA;&lt;h3&gt;Example ‘ToString’:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cast.ToString(&#34;mayonegg&#34;)         // &#34;mayonegg&#34;&#xA;cast.ToString(8)                  // &#34;8&#34;&#xA;cast.ToString(8.31)               // &#34;8.31&#34;&#xA;cast.ToString([]byte(&#34;one time&#34;)) // &#34;one time&#34;&#xA;cast.ToString(nil)                // &#34;&#34;&#xA;&#xA;var foo interface{} = &#34;one more time&#34;&#xA;cast.ToString(foo)                // &#34;one more time&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example ‘ToInt’:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cast.ToInt(8)                  // 8&#xA;cast.ToInt(8.31)               // 8&#xA;cast.ToInt(&#34;8&#34;)                // 8&#xA;cast.ToInt(true)               // 1&#xA;cast.ToInt(false)              // 0&#xA;&#xA;var eight interface{} = 8&#xA;cast.ToInt(eight)              // 8&#xA;cast.ToInt(nil)                // 0&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>