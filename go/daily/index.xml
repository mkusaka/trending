<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-05T01:31:59Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tomnomnom/gron</title>
    <updated>2023-12-05T01:31:59Z</updated>
    <id>tag:github.com,2023-12-05:/tomnomnom/gron</id>
    <link href="https://github.com/tomnomnom/gron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make JSON greppable!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gron&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/tomnomnom/gron&#34;&gt;&lt;img src=&#34;https://travis-ci.org/tomnomnom/gron.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make JSON greppable!&lt;/p&gt; &#xA;&lt;p&gt;gron transforms JSON into discrete assignments to make it easier to &lt;code&gt;grep&lt;/code&gt; for what you want and see the absolute &#39;path&#39; to it. It eases the exploration of APIs that return large blobs of JSON but have terrible documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;▶ &lt;b&gt;gron&lt;/b&gt; &#34;https://api.github.com/repos/tomnomnom/gron/commits?per_page=1&#34; | fgrep &#34;commit.author&#34;&#xA;json[0].commit.author = {};&#xA;json[0].commit.author.date = &#34;2016-07-02T10:51:21Z&#34;;&#xA;json[0].commit.author.email = &#34;mail@tomnomnom.com&#34;;&#xA;json[0].commit.author.name = &#34;Tom Hudson&#34;;&#xA;&lt;/pre&gt; &#xA;&lt;p&gt;gron can work backwards too, enabling you to turn your filtered data back into JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&#xA;▶ gron &#34;https://api.github.com/repos/tomnomnom/gron/commits?per_page=1&#34; | fgrep &#34;commit.author&#34; | &lt;b&gt;gron --ungron&lt;/b&gt;&#xA;[&#xA;  {&#xA;    &#34;commit&#34;: {&#xA;      &#34;author&#34;: {&#xA;        &#34;date&#34;: &#34;2016-07-02T10:51:21Z&#34;,&#xA;        &#34;email&#34;: &#34;mail@tomnomnom.com&#34;,&#xA;        &#34;name&#34;: &#34;Tom Hudson&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;]&#xA;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Disclaimer: the GitHub API has fantastic documentation, but it makes for a good example.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;gron has no runtime dependencies. You can just &lt;a href=&#34;https://github.com/tomnomnom/gron/releases&#34;&gt;download a binary for Linux, Mac, Windows or FreeBSD and run it&lt;/a&gt;. Put the binary in your &lt;code&gt;$PATH&lt;/code&gt; (e.g. in &lt;code&gt;/usr/local/bin&lt;/code&gt;) to make it easy to use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ tar xzf gron-linux-amd64-0.1.5.tgz&#xA;▶ sudo mv gron /usr/local/bin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re a Mac user you can also &lt;a href=&#34;http://braumeister.org/formula/gron&#34;&gt;install gron via brew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ brew install gron&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you&#39;re a Go user you can use &lt;code&gt;go install&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ go install github.com/tomnomnom/gron@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s recommended that you alias &lt;code&gt;ungron&lt;/code&gt; or &lt;code&gt;norg&lt;/code&gt; (or both!) to &lt;code&gt;gron --ungron&lt;/code&gt;. Put something like this in your shell profile (e.g. in &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;alias norg=&#34;gron --ungron&#34;&#xA;alias ungron=&#34;gron --ungron&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you could create a shell script in your $PATH named &lt;code&gt;ungron&lt;/code&gt; or &lt;code&gt;norg&lt;/code&gt; to affect all users:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gron --ungron &#34;$@&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Get JSON from a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron testdata/two.json &#xA;json = {};&#xA;json.contact = {};&#xA;json.contact.email = &#34;mail@tomnomnom.com&#34;;&#xA;json.contact.twitter = &#34;@TomNomNom&#34;;&#xA;json.github = &#34;https://github.com/tomnomnom/&#34;;&#xA;json.likes = [];&#xA;json.likes[0] = &#34;code&#34;;&#xA;json.likes[1] = &#34;cheese&#34;;&#xA;json.likes[2] = &#34;meat&#34;;&#xA;json.name = &#34;Tom&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From a URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron http://headers.jsontest.com/&#xA;json = {};&#xA;json.Host = &#34;headers.jsontest.com&#34;;&#xA;json[&#34;User-Agent&#34;] = &#34;gron/0.1&#34;;&#xA;json[&#34;X-Cloud-Trace-Context&#34;] = &#34;6917a823919477919dbc1523584ba25d/11970839830843610056&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or from &lt;code&gt;stdin&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ curl -s http://headers.jsontest.com/ | gron&#xA;json = {};&#xA;json.Accept = &#34;*/*&#34;;&#xA;json.Host = &#34;headers.jsontest.com&#34;;&#xA;json[&#34;User-Agent&#34;] = &#34;curl/7.43.0&#34;;&#xA;json[&#34;X-Cloud-Trace-Context&#34;] = &#34;c70f7bf26661c67d0b9f2cde6f295319/13941186890243645147&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Grep for something and easily see the path to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron testdata/two.json | grep twitter&#xA;json.contact.twitter = &#34;@TomNomNom&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gron makes diffing JSON easy too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ diff &amp;lt;(gron two.json) &amp;lt;(gron two-b.json)&#xA;3c3&#xA;&amp;lt; json.contact.email = &#34;mail@tomnomnom.com&#34;;&#xA;---&#xA;&amp;gt; json.contact.email = &#34;contact@tomnomnom.com&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output of &lt;code&gt;gron&lt;/code&gt; is valid JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron testdata/two.json &amp;gt; tmp.js&#xA;▶ echo &#34;console.log(json);&#34; &amp;gt;&amp;gt; tmp.js&#xA;▶ nodejs tmp.js&#xA;{ contact: { email: &#39;mail@tomnomnom.com&#39;, twitter: &#39;@TomNomNom&#39; },&#xA;  github: &#39;https://github.com/tomnomnom/&#39;,&#xA;  likes: [ &#39;code&#39;, &#39;cheese&#39;, &#39;meat&#39; ],&#xA;  name: &#39;Tom&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also possible to obtain the &lt;code&gt;gron&lt;/code&gt; output as JSON stream via the &lt;code&gt;--json&lt;/code&gt; switch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ curl -s http://headers.jsontest.com/ | gron --json&#xA;[[],{}]&#xA;[[&#34;Accept&#34;],&#34;*/*&#34;]&#xA;[[&#34;Host&#34;],&#34;headers.jsontest.com&#34;]&#xA;[[&#34;User-Agent&#34;],&#34;curl/7.43.0&#34;]&#xA;[[&#34;X-Cloud-Trace-Context&#34;],&#34;c70f7bf26661c67d0b9f2cde6f295319/13941186890243645147&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ungronning&lt;/h2&gt; &#xA;&lt;p&gt;gron can also turn its output back into JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron testdata/two.json | gron -u&#xA;{&#xA;  &#34;contact&#34;: {&#xA;    &#34;email&#34;: &#34;mail@tomnomnom.com&#34;,&#xA;    &#34;twitter&#34;: &#34;@TomNomNom&#34;&#xA;  },&#xA;  &#34;github&#34;: &#34;https://github.com/tomnomnom/&#34;,&#xA;  &#34;likes&#34;: [&#xA;    &#34;code&#34;,&#xA;    &#34;cheese&#34;,&#xA;    &#34;meat&#34;&#xA;  ],&#xA;  &#34;name&#34;: &#34;Tom&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This means you use can use gron with &lt;code&gt;grep&lt;/code&gt; and other tools to modify JSON:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron testdata/two.json | grep likes | gron --ungron&#xA;{&#xA;  &#34;likes&#34;: [&#xA;    &#34;code&#34;,&#xA;    &#34;cheese&#34;,&#xA;    &#34;meat&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron --json testdata/two.json | grep likes | gron  --json --ungron&#xA;{&#xA;  &#34;likes&#34;: [&#xA;    &#34;code&#34;,&#xA;    &#34;cheese&#34;,&#xA;    &#34;meat&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To preserve array keys, arrays are padded with &lt;code&gt;null&lt;/code&gt; when values are missing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron testdata/two.json | grep likes | grep -v cheese&#xA;json.likes = [];&#xA;json.likes[0] = &#34;code&#34;;&#xA;json.likes[2] = &#34;meat&#34;;&#xA;▶ gron testdata/two.json | grep likes | grep -v cheese | gron --ungron&#xA;{&#xA;  &#34;likes&#34;: [&#xA;    &#34;code&#34;,&#xA;    null,&#xA;    &#34;meat&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you get creative you can do &lt;a href=&#34;https://raw.githubusercontent.com/tomnomnom/gron/master/ADVANCED.mkd&#34;&gt;some pretty neat tricks with gron&lt;/a&gt;, and then ungron the output back into JSON.&lt;/p&gt; &#xA;&lt;h2&gt;Get Help&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;▶ gron --help&#xA;Transform JSON (from a file, URL, or stdin) into discrete assignments to make it greppable&#xA;&#xA;Usage:&#xA;  gron [OPTIONS] [FILE|URL|-]&#xA;&#xA;Options:&#xA;  -u, --ungron     Reverse the operation (turn assignments back into JSON)&#xA;  -v, --values     Print just the values of provided assignments&#xA;  -c, --colorize   Colorize output (default on tty)&#xA;  -m, --monochrome Monochrome (don&#39;t colorize output)&#xA;  -s, --stream     Treat each line of input as a separate JSON object&#xA;  -k, --insecure   Disable certificate validation&#xA;  -j, --json       Represent gron data as JSON stream&#xA;      --no-sort    Don&#39;t sort output (faster)&#xA;      --version    Print version information&#xA;&#xA;Exit Codes:&#xA;  0&#x9;OK&#xA;  1&#x9;Failed to open file&#xA;  2&#x9;Failed to read input&#xA;  3&#x9;Failed to form statements&#xA;  4&#x9;Failed to fetch URL&#xA;  5&#x9;Failed to parse statements&#xA;  6&#x9;Failed to encode JSON&#xA;&#xA;Examples:&#xA;  gron /tmp/apiresponse.json&#xA;  gron http://jsonplaceholder.typicode.com/users/1 &#xA;  curl -s http://jsonplaceholder.typicode.com/users/1 | gron&#xA;  gron http://jsonplaceholder.typicode.com/users/1 | grep company | gron --ungron&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Wasn&#39;t this written in PHP before?&lt;/h3&gt; &#xA;&lt;p&gt;Yes it was! The original version is &lt;a href=&#34;https://github.com/tomnomnom/gron/raw/master/original-gron.php&#34;&gt;preserved here for posterity&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Why the change to Go?&lt;/h3&gt; &#xA;&lt;p&gt;Mostly to remove PHP as a dependency. There&#39;s a lot of people who work with JSON who don&#39;t have PHP installed.&lt;/p&gt; &#xA;&lt;h3&gt;Why shouldn&#39;t I just use jq?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; is &lt;em&gt;awesome&lt;/em&gt;, and a lot more powerful than gron, but with that power comes complexity. gron aims to make it easier to use the tools you already know, like &lt;code&gt;grep&lt;/code&gt; and &lt;code&gt;sed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;gron&#39;s primary purpose is to make it easy to find the path to a value in a deeply nested JSON blob when you don&#39;t already know the structure; much of jq&#39;s power is unlocked only once you know that structure.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>siglens/siglens</title>
    <updated>2023-12-05T01:31:59Z</updated>
    <id>tag:github.com,2023-12-05:/siglens/siglens</id>
    <link href="https://github.com/siglens/siglens" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Observability at 100x Efficiency&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SigLens&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/siglens/siglens/develop/README_ZH_CN.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;SigLens is an Open Source Observability solution that is 💥💥 &lt;b&gt;100x&lt;/b&gt; 💥💥 more efficient than Splunk, Elastic.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;SigLens is a &lt;b&gt;single binary&lt;/b&gt; solution for Logs 🎯, Metrics 🎯 and Traces 🎯.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Reduce your observability bill by more than ⚡⚡ &lt;b&gt;90%&lt;/b&gt; ⚡⚡ using SigLens.&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Why SigLens:&lt;/h1&gt; &#xA;&lt;p&gt;Our experience servicing 10,000+ engineers with Observability tools taught us a few things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Developers have to jump through different tools for logs, metrics, traces 🏃💦&lt;/li&gt; &#xA; &lt;li&gt;Splunk, DataDog, NewRelic are very expensive 💸 💸 💸&lt;/li&gt; &#xA; &lt;li&gt;ElasticSearch takes too many machines, cluster maintenance is hard 👩‍💻👩‍💻&lt;/li&gt; &#xA; &lt;li&gt;Grafana Loki has slow query performance 🐌🐌&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Armed with decades of experience in monitoring domain, we set out to build a observability DB from the ground up, uniquely suited for logs, metrics and traces with &lt;strong&gt;&lt;code&gt;zero&lt;/code&gt;&lt;/strong&gt; external dependencies. A &lt;strong&gt;&lt;code&gt;single binary&lt;/code&gt;&lt;/strong&gt; that you can run on your laptop and process &lt;strong&gt;&lt;code&gt;8 TB/day&lt;/code&gt;&lt;/strong&gt;.&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Join our Community&lt;/h2&gt; &#xA;&lt;p&gt;Come say Hi to us on &lt;a href=&#34;https://www.siglens.com/slack&#34; target=&#34;_blank&#34;&gt;Slack&lt;/a&gt; 👋&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h3&gt;Install Using Git Repo&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the steps listed &lt;a href=&#34;https://siglens.github.io/siglens-docs/installation/git&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install Using Binary&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the steps listed &lt;a href=&#34;https://siglens.github.io/siglens-docs/installation/binary&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the steps listed &lt;a href=&#34;https://siglens.github.io/siglens-docs/installation/docker&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install Using Helm&lt;/h3&gt; &#xA;&lt;p&gt;Please follow the steps listed &lt;a href=&#34;https://siglens.github.io/siglens-docs/installation/helm&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Multiple Ingestion formats: Open Telemetry, Elastic, Splunk HEC, Loki&lt;/li&gt; &#xA; &lt;li&gt;Multiple Query Languages: Splunk SPL, SQL and Loki LogQL&lt;/li&gt; &#xA; &lt;li&gt;Simple architecture, easy to get started.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Differentiators&lt;/h1&gt; &#xA;&lt;h3&gt;SigLens v/s Splunk,Elastic,Loki&lt;/h3&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://www.sigscalr.io/blog/petabyte-of-observability-data.html&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; where SigLens ingested data at 1 PB/day rate for 24 hours on a mere &lt;code&gt;32 EC2 instances&lt;/code&gt; compared to &lt;code&gt;3000 EC2 instances&lt;/code&gt; required for Splunk, Elastic, Grafana Loki&lt;/p&gt; &#xA;&lt;h3&gt;SigLens v/s Elasticsearch&lt;/h3&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://www.sigscalr.io/blog/sigscalr-vs-elasticsearch.html&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; where SigLens is &lt;strong&gt;&lt;code&gt;8x&lt;/code&gt;&lt;/strong&gt; Faster than Elasticsearch 🚀🚀&lt;/p&gt; &#xA;&lt;h3&gt;SigLens v/s ClickHouse&lt;/h3&gt; &#xA;&lt;p&gt;Check out this &lt;a href=&#34;https://www.sigscalr.io/blog/sigscalr-vs-clickhouse.html&#34; target=&#34;_blank&#34;&gt;blog&lt;/a&gt; where SigLens is &lt;strong&gt;&lt;code&gt;4x-37x&lt;/code&gt;&lt;/strong&gt; Faster than ClickHouse 🚀🚀&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/siglens/siglens/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to get started with making contributions to SigLens.&lt;/p&gt; &#xA;&lt;h1&gt;Usability&lt;/h1&gt; &#xA;&lt;h4&gt;Searching Logs&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siglens/siglens/develop/static/assets/readme-assets/log-searching.png&#34; alt=&#34;Searching Logs&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Creating Dashboards&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siglens/siglens/develop/static/assets/readme-assets/dashboards.png&#34; alt=&#34;Creating Dashboards&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Creating Alerts&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siglens/siglens/develop/static/assets/readme-assets/alerting.png&#34; alt=&#34;Creating Alerts&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Live Tail&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siglens/siglens/develop/static/assets/readme-assets/live-tail.png&#34; alt=&#34;Live Tail&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Minion Searches&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/siglens/siglens/develop/static/assets/readme-assets/minion-searches.png&#34; alt=&#34;Minion Searches&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;TBD&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>0xERR0R/blocky</title>
    <updated>2023-12-05T01:31:59Z</updated>
    <id>tag:github.com,2023-12-05:/0xERR0R/blocky</id>
    <link href="https://github.com/0xERR0R/blocky" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and lightweight DNS proxy as ad-blocker for local network with many features&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/0xERR0R/blocky/actions/workflows/makefile.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/0xERR0R/blocky/makefile.yml&#34; alt=&#34;GitHub Workflow Status&#34; title=&#34;Make&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0xERR0R/blocky/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/0xERR0R/blocky/release.yml&#34; alt=&#34;GitHub Workflow Status&#34; title=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0xERR0R/blocky/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/0xERR0R/blocky&#34; alt=&#34;GitHub latest version&#34; title=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/0xERR0R/blocky/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-date/0xERR0R/blocky&#34; alt=&#34;GitHub Release Date&#34; title=&#34;Latest release date&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/0xERR0R/blocky/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/0xERR0R/blocky&#34; alt=&#34;GitHub go.mod Go version&#34; title=&#34;Go version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/spx01/blocky&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/spx01/blocky&#34; alt=&#34;Docker pulls&#34; title=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/spx01/blocky&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/image-size/spx01/blocky/latest&#34; alt=&#34;Docker Image Size (latest)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/0xERR0R/blocky&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/0xERR0R/blocky&#34; alt=&#34;Codecov&#34; title=&#34;Code coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/0xERR0R/blocky/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/codacy/grade/8fcd8f8420b8419c808c47af58ed9282&#34; alt=&#34;Codacy grade&#34; title=&#34;Codacy grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/0xERR0R/blocky&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/0xERR0R/blocky&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ko-fi.com/0xerr0r&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/buy%20me%20a%20coffee-donate-blueviolet.svg?sanitize=true&#34; alt=&#34;Donation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;200&#34; src=&#34;https://github.com/0xERR0R/blocky/raw/main/docs/blocky.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Blocky&lt;/h1&gt; &#xA;&lt;p&gt;Blocky is a DNS proxy and ad-blocker for the local network written in Go with following features:&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Blocking&lt;/strong&gt; - Blocking of DNS queries with external lists (Ad-block, malware) and whitelisting&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Definition of black and white lists per client group (Kids, Smart home devices, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;Periodical reload of external black and white lists&lt;/li&gt; &#xA;   &lt;li&gt;Regex support&lt;/li&gt; &#xA;   &lt;li&gt;Blocking of request domain, response CNAME (deep CNAME inspection) and response IP addresses (against IP lists)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Advanced DNS configuration&lt;/strong&gt; - not just an ad-blocker&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Custom DNS resolution for certain domain names&lt;/li&gt; &#xA;   &lt;li&gt;Conditional forwarding to external DNS server&lt;/li&gt; &#xA;   &lt;li&gt;Upstream resolvers can be defined per client group&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt; - Improves speed and performance in your network&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Customizable caching of DNS answers for queries -&amp;gt; improves DNS resolution speed and reduces amount of external DNS queries&lt;/li&gt; &#xA;   &lt;li&gt;Prefetching and caching of often used queries&lt;/li&gt; &#xA;   &lt;li&gt;Using multiple external resolver simultaneously&lt;/li&gt; &#xA;   &lt;li&gt;Low memory footprint&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Various Protocols&lt;/strong&gt; - Supports modern DNS protocols&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;DNS over UDP and TCP&lt;/li&gt; &#xA;   &lt;li&gt;DNS over HTTPS (aka DoH)&lt;/li&gt; &#xA;   &lt;li&gt;DNS over TLS (aka DoT)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security and Privacy&lt;/strong&gt; - Secure communication&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Supports modern DNS extensions: DNSSEC, eDNS, ...&lt;/li&gt; &#xA;   &lt;li&gt;Free configurable blocking lists - no hidden filtering etc.&lt;/li&gt; &#xA;   &lt;li&gt;Provides DoH Endpoint&lt;/li&gt; &#xA;   &lt;li&gt;Uses random upstream resolvers from the configuration - increases your privacy through the distribution of your DNS traffic over multiple provider&lt;/li&gt; &#xA;   &lt;li&gt;Blocky does &lt;strong&gt;NOT&lt;/strong&gt; collect any user data, telemetry, statistics etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Integration&lt;/strong&gt; - various integration&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; metrics&lt;/li&gt; &#xA;   &lt;li&gt;Prepared &lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; dashboards (Prometheus and database)&lt;/li&gt; &#xA;   &lt;li&gt;Logging of DNS queries per day / per client in CSV format or MySQL/MariaDB/PostgreSQL database - easy to analyze&lt;/li&gt; &#xA;   &lt;li&gt;Various REST API endpoints&lt;/li&gt; &#xA;   &lt;li&gt;CLI tool&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simple configuration&lt;/strong&gt; - single or multiple configuration files in YAML format&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Simple to maintain&lt;/li&gt; &#xA;   &lt;li&gt;Simple to backup&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simple installation/configuration&lt;/strong&gt; - blocky was designed for simple installation&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stateless (no database, no temporary files)&lt;/li&gt; &#xA;   &lt;li&gt;Docker image with Multi-arch support&lt;/li&gt; &#xA;   &lt;li&gt;Single binary&lt;/li&gt; &#xA;   &lt;li&gt;Supports x86-64 and ARM architectures -&amp;gt; runs fine on Raspberry PI&lt;/li&gt; &#xA;   &lt;li&gt;Community supported Helm chart for k8s deployment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;You can jump to &lt;a href=&#34;https://0xerr0r.github.io/blocky/latest/installation/&#34;&gt;Installation&lt;/a&gt; chapter in the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Full documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find full documentation and configuration examples at: &lt;a href=&#34;https://0xERR0R.github.io/blocky/&#34;&gt;https://0xERR0R.github.io/blocky/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Issues, feature suggestions and pull requests are welcome!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/G2G25XZQG&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;ko-fi&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>