<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-15T01:32:29Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gookit/goutil</title>
    <updated>2022-12-15T01:32:29Z</updated>
    <id>tag:github.com,2022-12-15:/gookit/goutil</id>
    <link href="https://github.com/gookit/goutil" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💪 Helper Utils For Go: int, byte, string, array/slice, map, struct, dump, convert/format, error, web/http, cli/flag, OS/ENV, filesystem, system, test/assert, time and more. Go 常用的一些工具函数：数字，字符串，数组，Map，结构体，反射，文本，文件，错误，时间日期，特殊处理，格式化，常用信息获取等等&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go Util&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/gookit/goutil?style=flat-square&#34; alt=&#34;GitHub go.mod Go version&#34;&gt; &lt;a href=&#34;https://github.com/gookit/goutil&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/gookit/goutil&#34; alt=&#34;GitHub tag (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/gookit/goutil&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/gookit/goutil&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gookit/goutil/actions&#34;&gt;&lt;img src=&#34;https://github.com/gookit/goutil/workflows/Unit-Tests/badge.svg?sanitize=true&#34; alt=&#34;Unit-Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/gookit/goutil?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/gookit/goutil/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/gookit/goutil&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/gookit/goutil.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;💪 Useful utils package for the Go: int, string, array/slice, map, error, time, format, CLI, ENV, filesystem, system, testing and more.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/README.zh-CN.md&#34;&gt;中文说明&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Basic packages:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/arrutil&#34;&gt;&lt;code&gt;arrutil&lt;/code&gt;&lt;/a&gt;: Array/Slice util functions. eg: check, convert, formatting, enum, collections&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/cliutil&#34;&gt;&lt;code&gt;cliutil&lt;/code&gt;&lt;/a&gt; Command-line util functions. eg: colored print, read input, exec command&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/envutil&#34;&gt;&lt;code&gt;envutil&lt;/code&gt;&lt;/a&gt; ENV util for current runtime env information. eg: get one, get info, parse var&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/fmtutil&#34;&gt;&lt;code&gt;fmtutil&lt;/code&gt;&lt;/a&gt; Format data util functions. eg: data, size, time&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/fsutil&#34;&gt;&lt;code&gt;fsutil&lt;/code&gt;&lt;/a&gt; Filesystem util functions, quick create, read and write file. eg: file and dir check, operate&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/jsonutil&#34;&gt;&lt;code&gt;jsonutil&lt;/code&gt;&lt;/a&gt; some util functions for quick read, write, encode, decode JSON data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/maputil&#34;&gt;&lt;code&gt;maputil&lt;/code&gt;&lt;/a&gt; Map data util functions. eg: convert, sub-value get, simple merge&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/mathutil&#34;&gt;&lt;code&gt;mathutil&lt;/code&gt;&lt;/a&gt; Math(int, number) util functions. eg: convert, math calc, random&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;netutil&lt;/code&gt; Network util functions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/reflects&#34;&gt;&lt;code&gt;reflects&lt;/code&gt;&lt;/a&gt; Provide extends reflect util functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/stdutil&#34;&gt;&lt;code&gt;stdutil&lt;/code&gt;&lt;/a&gt; Provide some commonly std util functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/structs&#34;&gt;&lt;code&gt;structs&lt;/code&gt;&lt;/a&gt; Provide some extends util functions for struct. eg: tag parse, struct data init&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/strutil&#34;&gt;&lt;code&gt;strutil&lt;/code&gt;&lt;/a&gt; String util functions. eg: bytes, check, convert, encode, format and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/sysutil&#34;&gt;&lt;code&gt;sysutil&lt;/code&gt;&lt;/a&gt; System util functions. eg: sysenv, exec, user, process &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/sysutil/process&#34;&gt;process&lt;/a&gt; Provide some process handle util functions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Advance packages:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/cflag&#34;&gt;&lt;code&gt;cflag&lt;/code&gt;&lt;/a&gt;: Wraps and extends go &lt;code&gt;flag.FlagSet&lt;/code&gt; to build simple command line applications&lt;/li&gt; &#xA; &lt;li&gt;cli util: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/cliutil/cmdline&#34;&gt;cmdline&lt;/a&gt; Provide cmdline parse, args build to cmdline&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/dump&#34;&gt;&lt;code&gt;dump&lt;/code&gt;&lt;/a&gt;: GO value printing tool. print slice, map will auto wrap each element and display the call location&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/errorx&#34;&gt;&lt;code&gt;errorx&lt;/code&gt;&lt;/a&gt; Provide an enhanced error implements for go, allow with stacktrace and wrap another error.&lt;/li&gt; &#xA; &lt;li&gt;net util: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/netutil/httpreq&#34;&gt;httpreq&lt;/a&gt; An easier-to-use HTTP client that wraps http.Client&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;string util: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/strutil/textscan&#34;&gt;textscan&lt;/a&gt; Implemented a parser that quickly scans and analyzes text content. It can be used to parse INI, Properties and other formats&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;sys util: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/sysutil/clipboard&#34;&gt;clipboard&lt;/a&gt; Provide a simple clipboard read and write operations.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/sysutil/cmdr&#34;&gt;cmdr&lt;/a&gt; Provide for quick build and run a cmd, batch run multi cmd tasks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/testutil&#34;&gt;&lt;code&gt;testutil&lt;/code&gt;&lt;/a&gt; Test help util functions. eg: http test, mock ENV value &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/testutil/assert&#34;&gt;assert&lt;/a&gt; Asserts functions for help testing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/timex&#34;&gt;&lt;code&gt;timex&lt;/code&gt;&lt;/a&gt; Provides an enhanced time.Time implementation. Add more commonly used functional methods &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;such as: DayStart(), DayAfter(), DayAgo(), DateFormat() and more.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Go Doc&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://pkg.go.dev/github.com/gookit/goutil&#34;&gt;Go doc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/gookit/goutil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// github.com/gookit/goutil&#xA;is.True(goutil.IsEmpty(nil))&#xA;is.False(goutil.IsEmpty(&#34;abc&#34;))&#xA;&#xA;is.True(goutil.IsEqual(&#34;a&#34;, &#34;a&#34;))&#xA;is.True(goutil.IsEqual([]string{&#34;a&#34;}, []string{&#34;a&#34;}))&#xA;is.True(goutil.IsEqual(23, 23))&#xA;&#xA;is.True(goutil.Contains(&#34;abc&#34;, &#34;a&#34;))&#xA;is.True(goutil.Contains([]string{&#34;abc&#34;, &#34;def&#34;}, &#34;abc&#34;))&#xA;is.True(goutil.Contains(map[int]string{2: &#34;abc&#34;, 4: &#34;def&#34;}, 4))&#xA;&#xA;// convert type&#xA;str = goutil.String(23) // &#34;23&#34;&#xA;iVal = goutil.Int(&#34;-2&#34;) // 2&#xA;i64Val = goutil.Int64(&#34;-2&#34;) // -2&#xA;u64Val = goutil.Uint(&#34;2&#34;) // 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;h3&gt;Array and Slice&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/arrutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at arrutil/arrutil.go&#xA;func Reverse(ss []string) &#xA;func StringsRemove(ss []string, s string) []string &#xA;func StringsFilter(ss []string, filter ...func(s string) bool) []string &#xA;func StringsMap(ss []string, mapFn func(s string) string) []string &#xA;func TrimStrings(ss []string, cutSet ...string) []string &#xA;// source at arrutil/check.go&#xA;func IntsHas(ints []int, val int) bool &#xA;func Int64sHas(ints []int64, val int64) bool &#xA;func InStrings(elem string, ss []string) bool &#xA;func StringsHas(ss []string, val string) bool &#xA;func HasValue(arr, val any) bool &#xA;func Contains(arr, val any) bool &#xA;func NotContains(arr, val any) bool &#xA;// source at arrutil/collection.go&#xA;func TwowaySearch(data any, item any, fn Comparer) (int, error) &#xA;func MakeEmptySlice(itemType reflect.Type) any &#xA;func CloneSlice(data any) any &#xA;func Excepts(first, second any, fn Comparer) any &#xA;func Intersects(first any, second any, fn Comparer) any &#xA;func Union(first, second any, fn Comparer) any &#xA;func Find(source any, fn Predicate) (any, error) &#xA;func FindOrDefault(source any, fn Predicate, defaultValue any) any &#xA;func TakeWhile(data any, fn Predicate) any &#xA;func ExceptWhile(data any, fn Predicate) any &#xA;// source at arrutil/convert.go&#xA;func JoinStrings(sep string, ss ...string) string &#xA;func StringsJoin(sep string, ss ...string) string &#xA;func StringsToInts(ss []string) (ints []int, err error) &#xA;func MustToStrings(arr any) []string &#xA;func StringsToSlice(ss []string) []any &#xA;func ToInt64s(arr any) (ret []int64, err error) &#xA;func MustToInt64s(arr any) []int64 &#xA;func SliceToInt64s(arr []any) []int64 &#xA;func ToStrings(arr any) (ret []string, err error) &#xA;func SliceToStrings(arr []any) []string &#xA;func AnyToString(arr any) string &#xA;func SliceToString(arr ...any) string &#xA;func ToString(arr []any) string &#xA;func JoinSlice(sep string, arr ...any) string &#xA;// source at arrutil/format.go&#xA;func NewFormatter(arr any) *ArrFormatter &#xA;func FormatIndent(arr any, indent string) string &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ArrUtil Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;check value&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;arrutil.IntsHas([]int{2, 4, 5}, 2) // True&#xA;arrutil.Int64sHas([]int64{2, 4, 5}, 2) // True&#xA;arrutil.StringsHas([]string{&#34;a&#34;, &#34;b&#34;}, &#34;a&#34;) // True&#xA;&#xA;// list and val interface{}&#xA;arrutil.Contains(list, val)&#xA;arrutil.Contains([]uint32{9, 2, 3}, 9) // True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;convert&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ints, err := arrutil.ToInt64s([]string{&#34;1&#34;, &#34;2&#34;}) // ints: []int64{1, 2} &#xA;ss, err := arrutil.ToStrings([]int{1, 2}) // ss: []string{&#34;1&#34;, &#34;2&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bytes Utils&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/byteutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at byteutil/buffer.go&#xA;func NewBuffer() *Buffer &#xA;// source at byteutil/bytex.go&#xA;func Md5(src any) []byte &#xA;// source at byteutil/encoder.go&#xA;func NewStdEncoder(encFn func(src []byte) []byte, decFn func(src []byte) ([]byte, error)) *StdEncoder &#xA;// source at byteutil/pool.go&#xA;func NewChanPool(maxSize int, width int, capWidth int) *ChanPool &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cflag&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/cflag&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at cflag/app.go&#xA;func NewApp(fns ...func(app *App)) *App &#xA;func NewCmd(name, desc string) *Cmd &#xA;// source at cflag/cflag.go&#xA;func SetDebug(open bool) &#xA;func New(fns ...func(c *CFlags)) *CFlags &#xA;func NewEmpty(fns ...func(c *CFlags)) *CFlags &#xA;func WithDesc(desc string) func(c *CFlags) &#xA;func WithVersion(version string) func(c *CFlags) &#xA;// source at cflag/optarg.go&#xA;func NewArg(name, desc string, required bool) *FlagArg &#xA;// source at cflag/util.go&#xA;func IsZeroValue(opt *flag.Flag, value string) (bool, bool) &#xA;func AddPrefix(name string) string &#xA;func AddPrefixes(name string, shorts []string) string &#xA;func AddPrefixes2(name string, shorts []string, nameAtEnd bool) string &#xA;func SplitShortcut(shortcut string) []string &#xA;func FilterNames(names []string) []string &#xA;func IsFlagHelpErr(err error) bool &#xA;func WrapColorForCode(s string) string &#xA;func ReplaceShorts(args []string, shortsMap map[string]string) []string &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;cflag&lt;/code&gt; Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;cflag&lt;/code&gt; usage please see &lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/cflag/README.md&#34;&gt;cflag/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CLI/Console&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/cliutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at cliutil/cliutil.go&#xA;func LineBuild(binFile string, args []string) string &#xA;func BuildLine(binFile string, args []string) string &#xA;func String2OSArgs(line string) []string &#xA;func StringToOSArgs(line string) []string &#xA;func ParseLine(line string) []string &#xA;func QuickExec(cmdLine string, workDir ...string) (string, error) &#xA;func ExecLine(cmdLine string, workDir ...string) (string, error) &#xA;func ExecCmd(binName string, args []string, workDir ...string) (string, error) &#xA;func ExecCommand(binName string, args []string, workDir ...string) (string, error) &#xA;func ShellExec(cmdLine string, shells ...string) (string, error) &#xA;func CurrentShell(onlyName bool) (path string) &#xA;func HasShellEnv(shell string) bool &#xA;func BuildOptionHelpName(names []string) string &#xA;func ShellQuote(s string) string &#xA;func OutputLines(output string) []string &#xA;func FirstLine(output string) string &#xA;// source at cliutil/color_print.go&#xA;func Redp(a ...any) &#xA;func Redf(format string, a ...any) &#xA;func Redln(a ...any) &#xA;func Bluep(a ...any) &#xA;func Bluef(format string, a ...any) &#xA;func Blueln(a ...any) &#xA;func Cyanp(a ...any) &#xA;func Cyanf(format string, a ...any) &#xA;func Cyanln(a ...any) &#xA;func Grayp(a ...any) &#xA;func Grayf(format string, a ...any) &#xA;func Grayln(a ...any) &#xA;func Greenp(a ...any) &#xA;func Greenf(format string, a ...any) &#xA;func Greenln(a ...any) &#xA;func Yellowp(a ...any) &#xA;func Yellowf(format string, a ...any) &#xA;func Yellowln(a ...any) &#xA;func Magentap(a ...any) &#xA;func Magentaf(format string, a ...any) &#xA;func Magentaln(a ...any) &#xA;func Infop(a ...any) &#xA;func Infof(format string, a ...any) &#xA;func Infoln(a ...any) &#xA;func Successp(a ...any) &#xA;func Successf(format string, a ...any) &#xA;func Successln(a ...any) &#xA;func Errorp(a ...any) &#xA;func Errorf(format string, a ...any) &#xA;func Errorln(a ...any) &#xA;func Warnp(a ...any) &#xA;func Warnf(format string, a ...any) &#xA;func Warnln(a ...any) &#xA;// source at cliutil/info.go&#xA;func Workdir() string &#xA;func BinDir() string &#xA;func BinFile() string &#xA;func BinName() string &#xA;func GetTermSize(refresh ...bool) (w int, h int) &#xA;// source at cliutil/read.go&#xA;func ReadInput(question string) (string, error) &#xA;func ReadLine(question string) (string, error) &#xA;func ReadFirst(question string) (string, error) &#xA;func ReadFirstByte(question string) (byte, error) &#xA;func ReadFirstRune(question string) (rune, error) &#xA;func ReadPassword(question ...string) string &#xA;func InputIsYes(ans string) bool &#xA;func ByteIsYes(ans byte) bool &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;CLI Util Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;helper functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cliutil.Workdir() // current workdir&#xA;cliutil.BinDir() // the program exe file dir&#xA;&#xA;cliutil.ReadInput(&#34;Your name?&#34;)&#xA;cliutil.ReadPassword(&#34;Input password:&#34;)&#xA;ans, _ := cliutil.ReadFirstByte(&#34;continue?[y/n] &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;cmdline parse:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;&#34;github.com/gookit/goutil/cliutil&#34;&#xA;&#x9;&#34;github.com/gookit/goutil/dump&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;args := cliutil.ParseLine(`./app top sub --msg &#34;has multi words&#34;`)&#xA;&#x9;dump.P(args)&#xA;&#xA;&#x9;s := cliutil.BuildLine(&#34;./myapp&#34;, []string{&#xA;&#x9;&#x9;&#34;-a&#34;, &#34;val0&#34;,&#xA;&#x9;&#x9;&#34;-m&#34;, &#34;this is message&#34;,&#xA;&#x9;&#x9;&#34;arg0&#34;,&#xA;&#x9;})&#xA;&#x9;fmt.Println(&#34;Build line:&#34;, s)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;output&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PRINT AT github.com/gookit/goutil/cliutil_test.TestParseLine(line_parser_test.go:30)&#xA;[]string [ #len=5&#xA;  string(&#34;./app&#34;), #len=5&#xA;  string(&#34;top&#34;), #len=3&#xA;  string(&#34;sub&#34;), #len=3&#xA;  string(&#34;--msg&#34;), #len=5&#xA;  string(&#34;has multi words&#34;), #len=15&#xA;]&#xA;&#xA;Build line: ./myapp -a val0 -m &#34;this is message&#34; arg0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;More, please see &lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/cliutil/README.md&#34;&gt;./cliutil/README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Dumper&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/dump&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at dump/dump.go&#xA;func Std() *Dumper &#xA;func Reset() &#xA;func Config(fns ...OptionFunc) &#xA;func Print(vs ...any) &#xA;func Println(vs ...any) &#xA;func Fprint(w io.Writer, vs ...any) &#xA;func Std2() *Dumper &#xA;func Reset2() &#xA;func Format(vs ...any) string &#xA;func NoLoc(vs ...any) &#xA;func Clear(vs ...any) &#xA;// source at dump/dumper.go&#xA;func NewDumper(out io.Writer, skip int) *Dumper &#xA;func NewWithOptions(fns ...OptionFunc) *Dumper &#xA;// source at dump/options.go&#xA;func NewDefaultOptions(out io.Writer, skip int) *Options &#xA;func SkipNilField() OptionFunc &#xA;func SkipPrivate() OptionFunc &#xA;func BytesAsString() OptionFunc &#xA;func WithCallerSkip(skip int) OptionFunc &#xA;func WithoutPosition() OptionFunc &#xA;func WithoutOutput(out io.Writer) OptionFunc &#xA;func WithoutColor() OptionFunc &#xA;func WithoutType() OptionFunc &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;p&gt;example code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;github.com/gookit/goutil/dump&#34;&#xA;&#xA;// rum demo:&#xA;// &#x9;go run ./dump/_examples/demo1.go&#xA;func main() {&#xA;&#x9;otherFunc1()&#xA;}&#xA;&#xA;func otherFunc1() {&#xA;&#x9;dump.P(&#xA;&#x9;&#x9;23,&#xA;&#x9;&#x9;[]string{&#34;ab&#34;, &#34;cd&#34;},&#xA;&#x9;&#x9;[]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, // len &amp;gt; 10&#xA;&#x9;&#x9;map[string]interface{}{&#xA;&#x9;&#x9;&#x9;&#34;key&#34;: &#34;val&#34;, &#34;sub&#34;: map[string]string{&#34;k&#34;: &#34;v&#34;},&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;struct {&#xA;&#x9;&#x9;&#x9;ab string&#xA;&#x9;&#x9;&#x9;Cd int&#xA;&#x9;&#x9;}{&#xA;&#x9;&#x9;&#x9;&#34;ab&#34;, 23,&#xA;&#x9;&#x9;},&#xA;&#x9;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Preview:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gookit/goutil/master/dump/_examples/preview-demo1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;nested struct&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;source code at &lt;code&gt;dump/dumper_test.TestStruct_WithNested&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gookit/goutil/master/dump/_examples/preview-nested-struct.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ENV/Environment&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/envutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at envutil/envutil.go&#xA;func VarReplace(s string) string &#xA;func VarParse(val string) string &#xA;func ParseEnvValue(val string) string &#xA;func ParseValue(val string) (newVal string) &#xA;func SetEnvs(mp map[string]string) &#xA;// source at envutil/get.go&#xA;func Getenv(name string, def ...string) string &#xA;func GetInt(name string, def ...int) int &#xA;func GetBool(name string, def ...bool) bool &#xA;func Environ() map[string]string &#xA;// source at envutil/info.go&#xA;func IsWin() bool &#xA;func IsWindows() bool &#xA;func IsMac() bool &#xA;func IsLinux() bool &#xA;func IsMSys() bool &#xA;func IsWSL() bool &#xA;func IsTerminal(fd uintptr) bool &#xA;func StdIsTerminal() bool &#xA;func IsConsole(out io.Writer) bool &#xA;func HasShellEnv(shell string) bool &#xA;func IsSupportColor() bool &#xA;func IsSupport256Color() bool &#xA;func IsSupportTrueColor() bool &#xA;func IsGithubActions() bool &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ENV Util Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;helper functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;envutil.IsWin()&#xA;envutil.IsMac()&#xA;envutil.IsLinux()&#xA;&#xA;// get ENV value by key, can with default value&#xA;envutil.Getenv(&#34;APP_ENV&#34;, &#34;dev&#34;)&#xA;envutil.GetInt(&#34;LOG_LEVEL&#34;, 1)&#xA;envutil.GetBool(&#34;APP_DEBUG&#34;, true)&#xA;&#xA;// parse ENV var value from input string, support default value.&#xA;envutil.ParseValue(&#34;${ENV_NAME | defValue}&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Errorx&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/errorx&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Package errorx provide a enhanced error implements, allow with call stack and wrap another error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at errorx/errors.go&#xA;func NewR(code int, msg string) ErrorR &#xA;func Fail(code int, msg string) ErrorR &#xA;func Suc(msg string) ErrorR &#xA;// source at errorx/errorx.go&#xA;func New(msg string) error &#xA;func Newf(tpl string, vars ...any) error &#xA;func Errorf(tpl string, vars ...any) error &#xA;func With(err error, msg string) error &#xA;func Withf(err error, tpl string, vars ...any) error &#xA;func WithPrev(err error, msg string) error &#xA;func WithPrevf(err error, tpl string, vars ...any) error &#xA;func WithStack(err error) error &#xA;func Traced(err error) error &#xA;func Stacked(err error) error &#xA;func WithOptions(msg string, fns ...func(opt *ErrStackOpt)) error &#xA;func Wrap(err error, msg string) error &#xA;func Wrapf(err error, tpl string, vars ...any) error &#xA;// source at errorx/stack.go&#xA;func FuncForPC(pc uintptr) *Func &#xA;func ResetStdOpt() &#xA;func Config(fns ...func(opt *ErrStackOpt)) &#xA;func SkipDepth(skipDepth int) func(opt *ErrStackOpt) &#xA;func TraceDepth(traceDepth int) func(opt *ErrStackOpt) &#xA;// source at errorx/util.go&#xA;func Raw(msg string) error &#xA;func Rawf(tpl string, vars ...any) error &#xA;func Cause(err error) error &#xA;func Unwrap(err error) error &#xA;func Previous(err error) error &#xA;func ToErrorX(err error) (ex *ErrorX, ok bool) &#xA;func Has(err, target error) bool &#xA;func Is(err, target error) bool &#xA;func To(err error, target any) bool &#xA;func As(err error, target any) bool &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Errorx Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create error with call stack info&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the &lt;code&gt;errorx.New&lt;/code&gt; instead &lt;code&gt;errors.New&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func doSomething() error {&#xA;    if false {&#xA;&#x9;    // return errors.New(&#34;a error happen&#34;)&#xA;&#x9;    return errorx.New(&#34;a error happen&#34;)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use the &lt;code&gt;errorx.Newf&lt;/code&gt; or &lt;code&gt;errorx.Errorf&lt;/code&gt; instead &lt;code&gt;fmt.Errorf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func doSomething() error {&#xA;    if false {&#xA;&#x9;    // return fmt.Errorf(&#34;a error %s&#34;, &#34;happen&#34;)&#xA;&#x9;    return errorx.Newf(&#34;a error %s&#34;, &#34;happen&#34;)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wrap the previous error&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;used like this before:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    if err := SomeFunc(); err != nil {&#xA;&#x9;    return err&#xA;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;can be replaced with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    if err := SomeFunc(); err != nil {&#xA;&#x9;    return errors.Stacked(err)&#xA;&#x9;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Print the errorx.New() error&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples for use &lt;code&gt;errorx&lt;/code&gt; package, more please see &lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/errorx/README.md&#34;&gt;./errorx/README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    err := errorx.New(&#34;the error message&#34;)&#xA;&#xA;    fmt.Println(err)&#xA;    // fmt.Printf(&#34;%v\n&#34;, err)&#xA;    // fmt.Printf(&#34;%#v\n&#34;, err)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;from the test: &lt;code&gt;errorx/errorx_test.TestNew()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;the error message&#xA;STACK:&#xA;github.com/gookit/goutil/errorx_test.returnXErr()&#xA;  /Users/inhere/Workspace/godev/gookit/goutil/errorx/errorx_test.go:21&#xA;github.com/gookit/goutil/errorx_test.returnXErrL2()&#xA;  /Users/inhere/Workspace/godev/gookit/goutil/errorx/errorx_test.go:25&#xA;github.com/gookit/goutil/errorx_test.TestNew()&#xA;  /Users/inhere/Workspace/godev/gookit/goutil/errorx/errorx_test.go:29&#xA;testing.tRunner()&#xA;  /usr/local/Cellar/go/1.18/libexec/src/testing/testing.go:1439&#xA;runtime.goexit()&#xA;  /usr/local/Cellar/go/1.18/libexec/src/runtime/asm_amd64.s:1571&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format Utils&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/fmtutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at fmtutil/format.go&#xA;func DataSize(size uint64) string &#xA;func SizeToString(size uint64) string &#xA;func StringToByte(sizeStr string) uint64 &#xA;func ParseByte(sizeStr string) uint64 &#xA;func PrettyJSON(v any) (string, error) &#xA;func StringsToInts(ss []string) (ints []int, err error) &#xA;func ArgsWithSpaces(args []any) (message string) &#xA;// source at fmtutil/time.go&#xA;func HowLongAgo(sec int64) string &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File System&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/fsutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at fsutil/check.go&#xA;func PathExists(path string) bool &#xA;func IsDir(path string) bool &#xA;func FileExists(path string) bool &#xA;func IsFile(path string) bool &#xA;func IsAbsPath(aPath string) bool &#xA;func IsImageFile(path string) bool &#xA;func IsZipFile(filepath string) bool &#xA;// source at fsutil/fsutil.go&#xA;func OSTempFile(pattern string) (*os.File, error) &#xA;func TempFile(dir, pattern string) (*os.File, error) &#xA;func OSTempDir(pattern string) (string, error) &#xA;func TempDir(dir, pattern string) (string, error) &#xA;func MimeType(path string) (mime string) &#xA;func ReaderMimeType(r io.Reader) (mime string) &#xA;// source at fsutil/info.go&#xA;func Dir(fpath string) string &#xA;func PathName(fpath string) string &#xA;func Name(fpath string) string &#xA;func FileExt(fpath string) string &#xA;func Suffix(fpath string) string &#xA;func Expand(pathStr string) string &#xA;func ExpandPath(pathStr string) string &#xA;func Realpath(pathStr string) string &#xA;func SplitPath(pathStr string) (dir, name string) &#xA;func GlobWithFunc(pattern string, fn func(filePath string) error) (err error) &#xA;func FindInDir(dir string, handleFn HandleFunc, filters ...FilterFunc) (e error) &#xA;// source at fsutil/operate.go&#xA;func Mkdir(dirPath string, perm os.FileMode) error &#xA;func MkParentDir(fpath string) error &#xA;func DiscardReader(src io.Reader) &#xA;func MustReadFile(filePath string) []byte &#xA;func MustReadReader(r io.Reader) []byte &#xA;func GetContents(in any) []byte &#xA;func ReadExistFile(filePath string) []byte &#xA;func OpenFile(filepath string, flag int, perm os.FileMode) (*os.File, error) &#xA;func QuickOpenFile(filepath string, fileFlag ...int) (*os.File, error) &#xA;func OpenReadFile(filepath string) (*os.File, error) &#xA;func CreateFile(fpath string, filePerm, dirPerm os.FileMode, fileFlag ...int) (*os.File, error) &#xA;func MustCreateFile(filePath string, filePerm, dirPerm os.FileMode) *os.File &#xA;func PutContents(filePath string, data any, fileFlag ...int) (int, error) &#xA;func WriteFile(filePath string, data any, perm os.FileMode, fileFlag ...int) error &#xA;func CopyFile(srcPath, dstPath string) error &#xA;func MustCopyFile(srcPath, dstPath string) &#xA;func Remove(fPath string) error &#xA;func MustRemove(fPath string) &#xA;func QuietRemove(fPath string) &#xA;func RmIfExist(fPath string) error &#xA;func DeleteIfExist(fPath string) error &#xA;func RmFileIfExist(fPath string) error &#xA;func DeleteIfFileExist(fPath string) error &#xA;func Unzip(archive, targetDir string) (err error) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FsUtil Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;files finder:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#xA;&#x9;&#34;github.com/gookit/goutil/fsutil/finder&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;f := finder.EmptyFinder()&#xA;&#xA;&#x9;f.&#xA;&#x9;&#x9;AddDir(&#34;./testdata&#34;).&#xA;&#x9;&#x9;AddFile(&#34;finder.go&#34;).&#xA;&#x9;&#x9;NoDotFile().&#xA;&#x9;&#x9;// NoDotDir().&#xA;&#x9;&#x9;Find().&#xA;&#x9;&#x9;Each(func(filePath string) {&#xA;&#x9;&#x9;&#x9;fmt.Println(filePath)&#xA;&#x9;&#x9;})&#xA;&#xA;&#x9;finder.NewFinder([]string{&#34;./testdata&#34;}).&#xA;&#x9;&#x9;AddFile(&#34;finder.go&#34;).&#xA;&#x9;&#x9;NoDotDir().&#xA;&#x9;&#x9;EachStat(func(fi os.FileInfo, filePath string) {&#xA;&#x9;&#x9;&#x9;fmt.Println(filePath, &#34;=&amp;gt;&#34;, fi.ModTime())&#xA;&#x9;&#x9;})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON Utils&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/jsonutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at jsonutil/jsonutil.go&#xA;func WriteFile(filePath string, data any) error &#xA;func ReadFile(filePath string, v any) error &#xA;func Pretty(v any) (string, error) &#xA;func Encode(v any) ([]byte, error) &#xA;func EncodePretty(v any) ([]byte, error) &#xA;func EncodeToWriter(v any, w io.Writer) error &#xA;func EncodeUnescapeHTML(v any) ([]byte, error) &#xA;func Decode(bts []byte, ptr any) error &#xA;func DecodeString(str string, ptr any) error &#xA;func DecodeReader(r io.Reader, ptr any) error &#xA;func Mapping(src, dst any) error &#xA;func StripComments(src string) string &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Map&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/maputil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at maputil/check.go&#xA;func HasKey(mp, key any) (ok bool) &#xA;func HasAllKeys(mp any, keys ...any) (ok bool, noKey any) &#xA;// source at maputil/convert.go&#xA;func KeyToLower(src map[string]string) map[string]string &#xA;func ToStringMap(src map[string]any) map[string]string &#xA;func HTTPQueryString(data map[string]any) string &#xA;func ToString(mp map[string]any) string &#xA;func ToString2(mp any) string &#xA;func FormatIndent(mp any, indent string) string &#xA;func Flatten(mp map[string]any) map[string]any &#xA;func FlatWithFunc(mp map[string]any, fn reflects.FlatFunc) &#xA;// source at maputil/format.go&#xA;func NewFormatter(mp any) *MapFormatter &#xA;// source at maputil/get.go&#xA;func DeepGet(mp map[string]any, path string) (val any) &#xA;func QuietGet(mp map[string]any, path string) (val any) &#xA;func GetByPath(path string, mp map[string]any) (val any, ok bool) &#xA;func Keys(mp any) (keys []string) &#xA;func Values(mp any) (values []any) &#xA;// source at maputil/maputil.go&#xA;func MergeSMap(src, dst map[string]string, ignoreCase bool) map[string]string &#xA;func MergeStringMap(src, dst map[string]string, ignoreCase bool) map[string]string &#xA;func MakeByPath(path string, val any) (mp map[string]any) &#xA;func MakeByKeys(keys []string, val any) (mp map[string]any) &#xA;// source at maputil/setval.go&#xA;func SetByPath(mp *map[string]any, path string, val any) error &#xA;func SetByKeys(mp *map[string]any, keys []string, val any) (err error) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Math/Number&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/mathutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at mathutil/check.go&#xA;func Compare(srcVal, dstVal any, op string) (ok bool) &#xA;func CompInt64(srcI64, dstI64 int64, op string) (ok bool) &#xA;func CompFloat(srcF64, dstF64 float64, op string) (ok bool) &#xA;// source at mathutil/convert.go&#xA;func Int(in any) (int, error) &#xA;func QuietInt(in any) int &#xA;func MustInt(in any) int &#xA;func IntOrPanic(in any) int &#xA;func IntOrErr(in any) (iVal int, err error) &#xA;func ToInt(in any) (iVal int, err error) &#xA;func StrInt(s string) int &#xA;func Uint(in any) (uint64, error) &#xA;func QuietUint(in any) uint64 &#xA;func MustUint(in any) uint64 &#xA;func UintOrErr(in any) (uint64, error) &#xA;func ToUint(in any) (u64 uint64, err error) &#xA;func Int64(in any) (int64, error) &#xA;func QuietInt64(in any) int64 &#xA;func MustInt64(in any) int64 &#xA;func Int64OrErr(in any) (int64, error) &#xA;func ToInt64(in any) (i64 int64, err error) &#xA;func QuietFloat(in any) float64 &#xA;func FloatOrPanic(in any) float64 &#xA;func MustFloat(in any) float64 &#xA;func Float(in any) (float64, error) &#xA;func FloatOrErr(in any) (float64, error) &#xA;func ToFloat(in any) (f64 float64, err error) &#xA;func StringOrPanic(val any) string &#xA;func MustString(val any) string &#xA;func ToString(val any) (string, error) &#xA;func StringOrErr(val any) (string, error) &#xA;func QuietString(val any) string &#xA;func String(val any) string &#xA;func TryToString(val any, defaultAsErr bool) (str string, err error) &#xA;// source at mathutil/mathutil.go&#xA;func MaxFloat(x, y float64) float64 &#xA;func MaxInt(x, y int) int &#xA;func SwapMaxInt(x, y int) (int, int) &#xA;func MaxI64(x, y int64) int64 &#xA;func SwapMaxI64(x, y int64) (int64, int64) &#xA;// source at mathutil/number.go&#xA;func IsNumeric(c byte) bool &#xA;func Percent(val, total int) float64 &#xA;func ElapsedTime(startTime time.Time) string &#xA;func DataSize(size uint64) string &#xA;func HowLongAgo(sec int64) string &#xA;// source at mathutil/random.go&#xA;func RandomInt(min, max int) int &#xA;func RandInt(min, max int) int &#xA;func RandIntWithSeed(min, max int, seed int64) int &#xA;func RandomIntWithSeed(min, max int, seed int64) int &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reflects&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/reflects&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at reflects/check.go&#xA;func HasChild(v reflect.Value) bool &#xA;func IsNil(v reflect.Value) bool &#xA;func IsFunc(val any) bool &#xA;func IsEqual(src, dst any) bool &#xA;func IsEmpty(v reflect.Value) bool &#xA;func IsEmptyValue(v reflect.Value) bool &#xA;// source at reflects/conv.go&#xA;func BaseTypeVal(v reflect.Value) (value any, err error) &#xA;func ValueByType(val any, typ reflect.Type) (rv reflect.Value, err error) &#xA;func ValueByKind(val any, kind reflect.Kind) (rv reflect.Value, err error) &#xA;func String(rv reflect.Value) string &#xA;func ToString(rv reflect.Value) (str string, err error) &#xA;func ValToString(rv reflect.Value, defaultAsErr bool) (str string, err error) &#xA;// source at reflects/type.go&#xA;func ToBaseKind(kind reflect.Kind) BKind &#xA;func ToBKind(kind reflect.Kind) BKind &#xA;func TypeOf(v any) Type &#xA;// source at reflects/util.go&#xA;func Elem(v reflect.Value) reflect.Value &#xA;func Indirect(v reflect.Value) reflect.Value &#xA;func Len(v reflect.Value) int &#xA;func SliceSubKind(typ reflect.Type) reflect.Kind &#xA;func SetValue(rv reflect.Value, val any) error &#xA;func FlatMap(rv reflect.Value, fn FlatFunc) &#xA;// source at reflects/value.go&#xA;func Wrap(rv reflect.Value) Value &#xA;func ValueOf(v any) Value &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Stdio&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/stdio&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at stdio/ioutil.go&#xA;func QuietFprint(w io.Writer, ss ...string) &#xA;func QuietFprintf(w io.Writer, tpl string, vs ...any) &#xA;func QuietFprintln(w io.Writer, ss ...string) &#xA;func QuietWriteString(w io.Writer, ss ...string) &#xA;func DiscardReader(src io.Reader) &#xA;func MustReadReader(r io.Reader) []byte &#xA;// source at stdio/writer.go&#xA;func NewWriteWrapper(w io.Writer) *WriteWrapper &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Standard&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/stdutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at stdutil/chan.go&#xA;func WaitCloseSignals(closer io.Closer) error &#xA;func Go(f func() error) error &#xA;func SignalHandler(ctx context.Context, signals ...os.Signal) (execute func() error, interrupt func(error)) &#xA;// source at stdutil/check.go&#xA;func IsNil(v any) bool &#xA;func IsEmpty(v any) bool &#xA;func IsFunc(val any) bool &#xA;func IsEqual(src, dst any) bool &#xA;func Contains(data, elem any) bool &#xA;func IsContains(data, elem any) bool &#xA;func CheckContains(data, elem any) (valid, found bool) &#xA;func ValueIsEmpty(v reflect.Value) bool &#xA;func ValueLen(v reflect.Value) int &#xA;// source at stdutil/conv.go&#xA;func ToString(v any) string &#xA;func MustString(v any) string &#xA;func TryString(v any) (string, error) &#xA;func BaseTypeVal(val any) (value any, err error) &#xA;func BaseTypeVal2(v reflect.Value) (value any, err error) &#xA;// source at stdutil/gofunc.go&#xA;func FuncName(fn any) string &#xA;func CutFuncName(fullFcName string) (pkgPath, shortFnName string) &#xA;func PkgName(fullFcName string) string &#xA;// source at stdutil/stack.go&#xA;func GetCallStacks(all bool) []byte &#xA;func GetCallerInfo(skip int) string &#xA;func SimpleCallersInfo(skip, num int) []string &#xA;func GetCallersInfo(skip, max int) []string &#xA;// source at stdutil/stdutil.go&#xA;func DiscardE(_ error) &#xA;func PanicIfErr(err error) &#xA;func PanicIf(err error) &#xA;func Panicf(format string, v ...any) &#xA;func GoVersion() string &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Structs&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/structs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at structs/alias.go&#xA;func NewAliases(checker func(alias string)) *Aliases &#xA;// source at structs/convert.go&#xA;func ToMap(st any, optFns ...MapOptFunc) map[string]any &#xA;func MustToMap(st any, optFns ...MapOptFunc) map[string]any &#xA;func TryToMap(st any, optFns ...MapOptFunc) (map[string]any, error) &#xA;func StructToMap(st any, optFns ...MapOptFunc) (map[string]any, error) &#xA;// source at structs/data.go&#xA;func NewData() *Data &#xA;// source at structs/setval.go&#xA;func InitDefaults(ptr any, optFns ...InitOptFunc) error &#xA;func SetValues(ptr any, data map[string]any, optFns ...SetOptFunc) error &#xA;// source at structs/structs.go&#xA;func MapStruct(srcSt, dstSt any) &#xA;func IsExported(fieldName string) bool &#xA;func IsUnexported(fieldName string) bool &#xA;// source at structs/tags.go&#xA;func ParseTags(st any, tagNames []string) (map[string]maputil.SMap, error) &#xA;func ParseReflectTags(rt reflect.Type, tagNames []string) (map[string]maputil.SMap, error) &#xA;func NewTagParser(tagNames ...string) *TagParser &#xA;func ParseTagValueDefault(field, tagVal string) (mp maputil.SMap, err error) &#xA;func ParseTagValueDefine(sep string, defines []string) TagValFunc &#xA;func ParseTagValueNamed(field, tagVal string, keys ...string) (mp maputil.SMap, err error) &#xA;// source at structs/value.go&#xA;func NewValue(val any) *Value &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Strings&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/strutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at strutil/bytes.go&#xA;func NewBuffer() *Buffer &#xA;func NewByteChanPool(maxSize, width, capWidth int) *ByteChanPool &#xA;// source at strutil/check.go&#xA;func NoCaseEq(s, t string) bool &#xA;func IsNumChar(c byte) bool &#xA;func IsNumeric(s string) bool &#xA;func IsAlphabet(char uint8) bool &#xA;func IsAlphaNum(c uint8) bool &#xA;func StrPos(s, sub string) int &#xA;func BytePos(s string, bt byte) int &#xA;func HasOneSub(s string, subs []string) bool &#xA;func HasAllSubs(s string, subs []string) bool &#xA;func IsStartsOf(s string, prefixes []string) bool &#xA;func HasOnePrefix(s string, prefixes []string) bool &#xA;func HasPrefix(s string, prefix string) bool &#xA;func IsStartOf(s, prefix string) bool &#xA;func HasSuffix(s string, suffix string) bool &#xA;func IsEndOf(s, suffix string) bool &#xA;func IsValidUtf8(s string) bool &#xA;func IsSpace(c byte) bool &#xA;func IsEmpty(s string) bool &#xA;func IsBlank(s string) bool &#xA;func IsNotBlank(s string) bool &#xA;func IsBlankBytes(bs []byte) bool &#xA;func IsSymbol(r rune) bool &#xA;func IsVersion(s string) bool &#xA;func Compare(s1, s2, op string) bool &#xA;func VersionCompare(v1, v2, op string) bool &#xA;// source at strutil/convert.go&#xA;func Quote(s string) string &#xA;func Unquote(s string) string &#xA;func Join(sep string, ss ...string) string &#xA;func JoinList(sep string, ss []string) string &#xA;func Implode(sep string, ss ...string) string &#xA;func String(val any) (string, error) &#xA;func QuietString(in any) string &#xA;func MustString(in any) string &#xA;func StringOrErr(val any) (string, error) &#xA;func ToString(val any) (string, error) &#xA;func AnyToString(val any, defaultAsErr bool) (str string, err error) &#xA;func Byte2str(b []byte) string &#xA;func Byte2string(b []byte) string &#xA;func ToBytes(s string) (b []byte) &#xA;func ToBool(s string) (bool, error) &#xA;func QuietBool(s string) bool &#xA;func MustBool(s string) bool &#xA;func Bool(s string) (bool, error) &#xA;func Int(s string) (int, error) &#xA;func ToInt(s string) (int, error) &#xA;func QuietInt(s string) int &#xA;func MustInt(s string) int &#xA;func IntOrPanic(s string) int &#xA;func Int64(s string) int64 &#xA;func QuietInt64(s string) int64 &#xA;func ToInt64(s string) (int64, error) &#xA;func Int64OrErr(s string) (int64, error) &#xA;func MustInt64(s string) int64 &#xA;func Int64OrPanic(s string) int64 &#xA;func Ints(s string, sep ...string) []int &#xA;func ToInts(s string, sep ...string) ([]int, error) &#xA;func ToIntSlice(s string, sep ...string) (ints []int, err error) &#xA;func ToArray(s string, sep ...string) []string &#xA;func Strings(s string, sep ...string) []string &#xA;func ToStrings(s string, sep ...string) []string &#xA;func ToSlice(s string, sep ...string) []string &#xA;func ToOSArgs(s string) []string &#xA;func MustToTime(s string, layouts ...string) time.Time &#xA;func ToTime(s string, layouts ...string) (t time.Time, err error) &#xA;func ToDuration(s string) (time.Duration, error) &#xA;// source at strutil/crypto.go&#xA;func Md5(src any) string &#xA;func MD5(src any) string &#xA;func GenMd5(src any) string &#xA;func Md5Bytes(src any) []byte &#xA;func HashPasswd(pwd, key string) string &#xA;func VerifyPasswd(pwdMAC, pwd, key string) bool &#xA;// source at strutil/encode.go&#xA;func EscapeJS(s string) string &#xA;func EscapeHTML(s string) string &#xA;func AddSlashes(s string) string &#xA;func StripSlashes(s string) string &#xA;func URLEncode(s string) string &#xA;func URLDecode(s string) string &#xA;func B32Encode(str string) string &#xA;func B32Decode(str string) string &#xA;func B64Encode(str string) string &#xA;func B64EncodeBytes(src []byte) []byte &#xA;func B64Decode(str string) string &#xA;func B64DecodeBytes(str string) []byte &#xA;func Encoding(base int, typ BaseType) BaseEncoder &#xA;// source at strutil/filter.go&#xA;func Trim(s string, cutSet ...string) string &#xA;func Ltrim(s string, cutSet ...string) string &#xA;func LTrim(s string, cutSet ...string) string &#xA;func TrimLeft(s string, cutSet ...string) string &#xA;func Rtrim(s string, cutSet ...string) string &#xA;func RTrim(s string, cutSet ...string) string &#xA;func TrimRight(s string, cutSet ...string) string &#xA;func FilterEmail(s string) string &#xA;// source at strutil/format.go&#xA;func Title(s string) string &#xA;func Lower(s string) string &#xA;func Lowercase(s string) string &#xA;func Upper(s string) string &#xA;func Uppercase(s string) string &#xA;func UpperWord(s string) string &#xA;func LowerFirst(s string) string &#xA;func UpperFirst(s string) string &#xA;func SnakeCase(s string, sep ...string) string &#xA;func Camel(s string, sep ...string) string &#xA;func CamelCase(s string, sep ...string) string &#xA;func Indent(s, prefix string) string &#xA;func IndentBytes(b, prefix []byte) []byte &#xA;// source at strutil/id.go&#xA;func MicroTimeID() string &#xA;func MicroTimeHexID() string &#xA;// source at strutil/padding.go&#xA;func Padding(s, pad string, length int, pos PosFlag) string &#xA;func PadLeft(s, pad string, length int) string &#xA;func PadRight(s, pad string, length int) string &#xA;func Resize(s string, length int, align PosFlag) string &#xA;func PadBytes(bs []byte, pad byte, length int, pos PosFlag) []byte &#xA;func PadBytesLeft(bs []byte, pad byte, length int) []byte &#xA;func PadBytesRight(bs []byte, pad byte, length int) []byte &#xA;func PadRunes(rs []rune, pad rune, length int, pos PosFlag) []rune &#xA;func PadRunesLeft(rs []rune, pad rune, length int) []rune &#xA;func PadRunesRight(rs []rune, pad rune, length int) []rune &#xA;func Repeat(s string, times int) string &#xA;func RepeatRune(char rune, times int) []rune &#xA;func RepeatBytes(char byte, times int) []byte &#xA;// source at strutil/random.go&#xA;func RandomChars(ln int) string &#xA;func RandomCharsV2(ln int) string &#xA;func RandomCharsV3(ln int) string &#xA;func RandomBytes(length int) ([]byte, error) &#xA;func RandomString(length int) (string, error) &#xA;// source at strutil/runes.go&#xA;func RuneIsWord(c rune) bool &#xA;func RuneIsLower(c rune) bool &#xA;func RuneIsUpper(c rune) bool &#xA;func RunePos(s string, ru rune) int &#xA;func IsSpaceRune(r rune) bool &#xA;func Utf8Len(s string) int &#xA;func Utf8len(s string) int &#xA;func RuneCount(s string) int &#xA;func RuneWidth(r rune) int &#xA;func TextWidth(s string) int &#xA;func Utf8Width(s string) int &#xA;func RunesWidth(rs []rune) (w int) &#xA;func TextTruncate(s string, w int, tail string) string &#xA;func Utf8Truncate(s string, w int, tail string) string &#xA;func TextSplit(s string, w int) []string &#xA;func Utf8Split(s string, w int) []string &#xA;func TextWrap(s string, w int) string &#xA;func WidthWrap(s string, w int) string &#xA;func WordWrap(s string, w int) string &#xA;// source at strutil/similar_find.go&#xA;func NewComparator(src, dst string) *SimilarComparator &#xA;func Similarity(s, t string, rate float32) (float32, bool) &#xA;// source at strutil/split.go&#xA;func Cut(s, sep string) (before string, after string, found bool) &#xA;func MustCut(s, sep string) (before string, after string) &#xA;func TrimCut(s, sep string) (string, string) &#xA;func SplitValid(s, sep string) (ss []string) &#xA;func Split(s, sep string) (ss []string) &#xA;func SplitNValid(s, sep string, n int) (ss []string) &#xA;func SplitN(s, sep string, n int) (ss []string) &#xA;func SplitTrimmed(s, sep string) (ss []string) &#xA;func SplitNTrimmed(s, sep string, n int) (ss []string) &#xA;func Substr(s string, pos, length int) string &#xA;func SplitInlineComment(val string) (string, string) &#xA;// source at strutil/strutil.go&#xA;func Replaces(str string, pairs map[string]string) string &#xA;func PrettyJSON(v any) (string, error) &#xA;func RenderTemplate(input string, data any, fns template.FuncMap, isFile ...bool) string &#xA;func RenderText(input string, data any, fns template.FuncMap, isFile ...bool) string &#xA;func WrapTag(s, tag string) string &#xA;func SubstrCount(s string, substr string, params ...uint64) (int, error) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;System Utils&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/sysutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at sysutil/exec.go&#xA;func NewCmd(bin string, args ...string) *cmdr.Cmd &#xA;func FlushExec(bin string, args ...string) error &#xA;func QuickExec(cmdLine string, workDir ...string) (string, error) &#xA;func ExecLine(cmdLine string, workDir ...string) (string, error) &#xA;func ExecCmd(binName string, args []string, workDir ...string) (string, error) &#xA;func ShellExec(cmdLine string, shells ...string) (string, error) &#xA;// source at sysutil/stack.go&#xA;func CallersInfos(skip, num int, filters ...func(file string, fc *runtime.Func) bool) []*CallerInfo &#xA;// source at sysutil/sysenv.go&#xA;func IsMSys() bool &#xA;func IsConsole(out io.Writer) bool &#xA;func IsTerminal(fd uintptr) bool &#xA;func StdIsTerminal() bool &#xA;func Hostname() string &#xA;func CurrentShell(onlyName bool) (path string) &#xA;func HasShellEnv(shell string) bool &#xA;func IsShellSpecialVar(c uint8) bool &#xA;func EnvPaths() []string &#xA;func FindExecutable(binName string) (string, error) &#xA;func Executable(binName string) (string, error) &#xA;func HasExecutable(binName string) bool &#xA;func SearchPath(keywords string) []string &#xA;// source at sysutil/sysgo.go&#xA;func GoVersion() string &#xA;func ParseGoVersion(line string) (*GoInfo, error) &#xA;func OsGoInfo() (*GoInfo, error) &#xA;// source at sysutil/sysutil.go&#xA;func Workdir() string &#xA;func BinDir() string &#xA;func BinFile() string &#xA;// source at sysutil/sysutil_nonwin.go&#xA;func IsWin() bool &#xA;func IsWindows() bool &#xA;func IsMac() bool &#xA;func IsDarwin() bool &#xA;func IsLinux() bool &#xA;func Kill(pid int, signal syscall.Signal) error &#xA;func ProcessExists(pid int) bool &#xA;func OpenBrowser(URL string) error &#xA;// source at sysutil/user.go&#xA;func MustFindUser(uname string) *user.User &#xA;func LoginUser() *user.User &#xA;func CurrentUser() *user.User &#xA;func UHomeDir() string &#xA;func UserHomeDir() string &#xA;func HomeDir() string &#xA;func UserDir(subPath string) string &#xA;func UserCacheDir(subPath string) string &#xA;func UserConfigDir(subPath string) string &#xA;func ExpandPath(path string) string &#xA;// source at sysutil/user_nonwin.go&#xA;func ChangeUserByName(newUname string) (err error) &#xA;func ChangeUserUidGid(newUid int, newGid int) (err error) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing Utils&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/testutil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at testutil/buffer.go&#xA;func NewBuffer() *Buffer &#xA;// source at testutil/envmock.go&#xA;func MockEnvValue(key, val string, fn func(nv string)) &#xA;func MockEnvValues(kvMap map[string]string, fn func()) &#xA;func MockOsEnvByText(envText string, fn func()) &#xA;func MockOsEnv(mp map[string]string, fn func()) &#xA;func ClearOSEnv() &#xA;func RevertOSEnv() &#xA;func MockCleanOsEnv(mp map[string]string, fn func()) &#xA;// source at testutil/httpmock.go&#xA;func NewHttpRequest(method, path string, data *MD) *http.Request &#xA;func MockRequest(h http.Handler, method, path string, data *MD) *httptest.ResponseRecorder &#xA;// source at testutil/testutil.go&#xA;func DiscardStdout() error &#xA;func ReadOutput() (s string) &#xA;func RewriteStdout() &#xA;func RestoreStdout(printData ...bool) (s string) &#xA;func RewriteStderr() &#xA;func RestoreStderr(printData ...bool) (s string) &#xA;// source at testutil/writer.go&#xA;func NewTestWriter() *TestWriter &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Timex&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Package &lt;code&gt;github.com/gookit/goutil/timex&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Provides an enhanced time.Time implementation, and add more commonly used functional methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// source at timex/template.go&#xA;func ToLayout(template string) string &#xA;// source at timex/timex.go&#xA;func Now() *Time &#xA;func New(t time.Time) *Time &#xA;func Wrap(t time.Time) *Time &#xA;func FromTime(t time.Time) *Time &#xA;func Local() *Time &#xA;func FromUnix(sec int64) *Time &#xA;func FromDate(s string, template ...string) (*Time, error) &#xA;func FromString(s string, layouts ...string) (*Time, error) &#xA;func LocalByName(tzName string) *Time &#xA;// source at timex/util.go&#xA;func NowUnix() int64 &#xA;func SetLocalByName(tzName string) error &#xA;func Format(t time.Time) string &#xA;func FormatBy(t time.Time, layout string) string &#xA;func Date(t time.Time, template string) string &#xA;func DateFormat(t time.Time, template string) string &#xA;func FormatByTpl(t time.Time, template string) string &#xA;func FormatUnix(sec int64) string &#xA;func FormatUnixBy(sec int64, layout string) string &#xA;func FormatUnixByTpl(sec int64, template string) string &#xA;func NowAddDay(day int) time.Time &#xA;func NowAddHour(hour int) time.Time &#xA;func NowAddMinutes(minutes int) time.Time &#xA;func NowAddSeconds(seconds int) time.Time &#xA;func NowHourStart() time.Time &#xA;func NowHourEnd() time.Time &#xA;func AddDay(t time.Time, day int) time.Time &#xA;func AddHour(t time.Time, hour int) time.Time &#xA;func AddMinutes(t time.Time, minutes int) time.Time &#xA;func AddSeconds(t time.Time, seconds int) time.Time &#xA;func HourStart(t time.Time) time.Time &#xA;func HourEnd(t time.Time) time.Time &#xA;func DayStart(t time.Time) time.Time &#xA;func DayEnd(t time.Time) time.Time &#xA;func TodayStart() time.Time &#xA;func TodayEnd() time.Time &#xA;func HowLongAgo(sec int64) string &#xA;func ToDuration(s string) (time.Duration, error) &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Timex Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Create timex instance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;now := timex.Now()&#xA;&#xA;// from time.Time&#xA;tx := timex.New(time.Now())&#xA;tx := timex.FromTime(time.Now())&#xA;&#xA;// from time unix&#xA;tx := timex.FromUnix(1647411580)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create from datetime string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// auto match layout by datetime&#xA;tx, err  := timex.FromString(&#34;2022-04-20 19:40:34&#34;)&#xA;// custom set the datetime layout&#xA;tx, err  := timex.FromString(&#34;2022-04-20 19:40:34&#34;, &#34;2006-01-02 15:04:05&#34;)&#xA;// use date template as layout&#xA;tx, err  := timex.FromDate(&#34;2022-04-20 19:40:34&#34;, &#34;Y-m-d H:I:S&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Use timex instance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx := timex.Now()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;change time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx.Yesterday()&#xA;tx.Tomorrow()&#xA;&#xA;tx.DayStart() // get time at Y-m-d 00:00:00&#xA;tx.DayEnd() // get time at Y-m-d 23:59:59&#xA;tx.HourStart() // get time at Y-m-d H:00:00&#xA;tx.HourEnd() // get time at Y-m-d H:59:59&#xA;&#xA;tx.AddDay(2)&#xA;tx.AddHour(1)&#xA;tx.AddMinutes(15)&#xA;tx.AddSeconds(120)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;compare time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// before compare&#xA;tx.IsBefore(u time.Time)&#xA;tx.IsBeforeUnix(1647411580)&#xA;// after compare&#xA;tx.IsAfter(u time.Time)&#xA;tx.IsAfterUnix(1647411580)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Helper functions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ts := timex.NowUnix() // current unix timestamp&#xA;&#xA;t := NowAddDay(1) // from now add 1 day&#xA;t := NowAddHour(1) // from now add 1 hour&#xA;t := NowAddMinutes(3) // from now add 3 minutes&#xA;t := NowAddSeconds(180) // from now add 180 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Convert time to date by template&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Template Chars:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; Y,y - year&#xA;  Y - year 2006&#xA;  y - year 06&#xA; m - month 01-12&#xA; d - day 01-31&#xA; H,h - hour&#xA;  H - hour 00-23&#xA;  h - hour 01-12&#xA; I,i - minute&#xA;  I - minute 00-59&#xA;  i - minute 0-59&#xA; S,s - second&#xA;  S - second 00-59&#xA;  s - second 0-59&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;More, please see &lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/timex/template.go&#34;&gt;char map&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Examples, use timex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx := timex.Now()&#xA;date := tx.DateFormat(&#34;Y-m-d H:I:S&#34;) // Output: 2022-04-20 19:09:03&#xA;date = tx.DateFormat(&#34;y-m-d h:i:s&#34;) // Output: 22-04-20 07:9:3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Format time.Time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx := time.Now()&#xA;date := timex.DateFormat(tx, &#34;Y-m-d H:I:S&#34;) // Output: 2022-04-20 19:40:34&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ts := timex.NowUnix() // current unix timestamp&#xA;&#xA;date := FormatUnix(ts, &#34;2006-01-02 15:04:05&#34;) // Get: 2022-04-20 19:40:34&#xA;date := FormatUnixByTpl(ts, &#34;Y-m-d H:I:S&#34;) // Get: 2022-04-20 19:40:34&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Check &amp;amp; Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gofmt -w -l ./&#xA;golint ./...&#xA;&#xA;# testing&#xA;go test -v ./...&#xA;go test -v -run ^TestErr$&#xA;go test -v -run ^TestErr$ ./testutil/assert/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing in docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd goutil&#xA;docker run -ti -v $(pwd):/go/work golang:1.18&#xA;root@xx:/go/work# go test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/duke-git/lancet&#34;&gt;https://github.com/duke-git/lancet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samber/lo&#34;&gt;https://github.com/samber/lo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/generic&#34;&gt;https://github.com/zyedidia/generic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thoas/go-funk&#34;&gt;https://github.com/thoas/go-funk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gookit packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/ini&#34;&gt;gookit/ini&lt;/a&gt; Go config management, use INI files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/rux&#34;&gt;gookit/rux&lt;/a&gt; Simple and fast request router for golang HTTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/gcli&#34;&gt;gookit/gcli&lt;/a&gt; Build CLI application, tool library, running CLI commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/slog&#34;&gt;gookit/slog&lt;/a&gt; Lightweight, easy to extend, configurable logging library written in Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/color&#34;&gt;gookit/color&lt;/a&gt; A command-line color library with true color support, universal API methods and Windows support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/event&#34;&gt;gookit/event&lt;/a&gt; Lightweight event manager and dispatcher implements by Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/cache&#34;&gt;gookit/cache&lt;/a&gt; Generic cache use and cache manager for golang. support File, Memory, Redis, Memcached.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/config&#34;&gt;gookit/config&lt;/a&gt; Go config management. support JSON, YAML, TOML, INI, HCL, ENV and Flags&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/filter&#34;&gt;gookit/filter&lt;/a&gt; Provide filtering, sanitizing, and conversion of golang data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/validate&#34;&gt;gookit/validate&lt;/a&gt; Use for data validation and filtering. support Map, Struct, Form data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/goutil&#34;&gt;gookit/goutil&lt;/a&gt; Some utils for the Go: string, array/slice, map, format, cli, env, filesystem, test and more&lt;/li&gt; &#xA; &lt;li&gt;More, please see &lt;a href=&#34;https://github.com/gookit&#34;&gt;https://github.com/gookit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/LICENSE&#34;&gt;MIT&lt;/a&gt; on of golang data&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/validate&#34;&gt;gookit/validate&lt;/a&gt; Use for data validation and filtering. support Map, Struct, Form data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/goutil&#34;&gt;gookit/goutil&lt;/a&gt; Some utils for the Go: string, array/slice, map, format, cli, env, filesystem, test and more&lt;/li&gt; &#xA; &lt;li&gt;More, please see &lt;a href=&#34;https://github.com/gookit&#34;&gt;https://github.com/gookit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/LICENSE&#34;&gt;MIT&lt;/a&gt; ore compare tx.IsBefore(u time.Time) tx.IsBeforeUnix(1647411580) // after compare tx.IsAfter(u time.Time) tx.IsAfterUnix(1647411580)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;**Helper functions**&#xA;&#xA;```go&#xA;ts := timex.NowUnix() // current unix timestamp&#xA;&#xA;t := NowAddDay(1) // from now add 1 day&#xA;t := NowAddHour(1) // from now add 1 hour&#xA;t := NowAddMinutes(3) // from now add 3 minutes&#xA;t := NowAddSeconds(180) // from now add 180 seconds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Convert time to date by template&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Template Chars:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; Y,y - year&#xA;  Y - year 2006&#xA;  y - year 06&#xA; m - month 01-12&#xA; d - day 01-31&#xA; H,h - hour&#xA;  H - hour 00-23&#xA;  h - hour 01-12&#xA; I,i - minute&#xA;  I - minute 00-59&#xA;  i - minute 0-59&#xA; S,s - second&#xA;  S - second 00-59&#xA;  s - second 0-59&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;More, please see &lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/timex/template.go&#34;&gt;char map&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Examples, use timex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx := timex.Now()&#xA;date := tx.DateFormat(&#34;Y-m-d H:I:S&#34;) // Output: 2022-04-20 19:09:03&#xA;date = tx.DateFormat(&#34;y-m-d h:i:s&#34;) // Output: 22-04-20 07:9:3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Format time.Time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;tx := time.Now()&#xA;date := timex.DateFormat(tx, &#34;Y-m-d H:I:S&#34;) // Output: 2022-04-20 19:40:34&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;ts := timex.NowUnix() // current unix timestamp&#xA;&#xA;date := FormatUnix(ts, &#34;2006-01-02 15:04:05&#34;) // Get: 2022-04-20 19:40:34&#xA;date := FormatUnixByTpl(ts, &#34;Y-m-d H:I:S&#34;) // Get: 2022-04-20 19:40:34&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Check &amp;amp; Testing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gofmt -w -l ./&#xA;golint ./...&#xA;&#xA;# testing&#xA;go test -v ./...&#xA;go test -v -run ^TestErr$&#xA;go test -v -run ^TestErr$ ./testutil/assert/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing in docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd goutil&#xA;docker run -ti -v $(pwd):/go/work golang:1.18&#xA;root@xx:/go/work# go test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/duke-git/lancet&#34;&gt;https://github.com/duke-git/lancet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/samber/lo&#34;&gt;https://github.com/samber/lo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/generic&#34;&gt;https://github.com/zyedidia/generic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thoas/go-funk&#34;&gt;https://github.com/thoas/go-funk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Gookit packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/ini&#34;&gt;gookit/ini&lt;/a&gt; Go config management, use INI files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/rux&#34;&gt;gookit/rux&lt;/a&gt; Simple and fast request router for golang HTTP&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/gcli&#34;&gt;gookit/gcli&lt;/a&gt; Build CLI application, tool library, running CLI commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/slog&#34;&gt;gookit/slog&lt;/a&gt; Lightweight, easy to extend, configurable logging library written in Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/color&#34;&gt;gookit/color&lt;/a&gt; A command-line color library with true color support, universal API methods and Windows support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/event&#34;&gt;gookit/event&lt;/a&gt; Lightweight event manager and dispatcher implements by Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/cache&#34;&gt;gookit/cache&lt;/a&gt; Generic cache use and cache manager for golang. support File, Memory, Redis, Memcached.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/config&#34;&gt;gookit/config&lt;/a&gt; Go config management. support JSON, YAML, TOML, INI, HCL, ENV and Flags&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/filter&#34;&gt;gookit/filter&lt;/a&gt; Provide filtering, sanitizing, and conversion of golang data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/validate&#34;&gt;gookit/validate&lt;/a&gt; Use for data validation and filtering. support Map, Struct, Form data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gookit/goutil&#34;&gt;gookit/goutil&lt;/a&gt; Some utils for the Go: string, array/slice, map, format, cli, env, filesystem, test and more&lt;/li&gt; &#xA; &lt;li&gt;More, please see &lt;a href=&#34;https://github.com/gookit&#34;&gt;https://github.com/gookit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gookit/goutil/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mongodb/mongodb-kubernetes-operator</title>
    <updated>2022-12-15T01:32:29Z</updated>
    <id>tag:github.com,2022-12-15:/mongodb/mongodb-kubernetes-operator</id>
    <link href="https://github.com/mongodb/mongodb-kubernetes-operator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MongoDB Community Kubernetes Operator&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MongoDB Community Kubernetes Operator&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; src=&#34;https://mongodb-kubernetes-operator.s3.amazonaws.com/img/Leaf-Forest%402x.png&#34;&gt; &#xA;&lt;h3&gt;v0.6.0 has introduced breaking changes. If you are upgrading from a previous version, follow the upgrade instructions outlined &lt;a href=&#34;https://github.com/mongodb/mongodb-kubernetes-operator/releases/tag/v0.6.0&#34;&gt;in the release notes&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is a &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/operator/&#34;&gt;Kubernetes Operator&lt;/a&gt; which deploys MongoDB Community into Kubernetes clusters.&lt;/p&gt; &#xA;&lt;p&gt;If you are a MongoDB Enterprise customer, or need Enterprise features such as Backup, you can use the &lt;a href=&#34;https://github.com/mongodb/mongodb-enterprise-kubernetes&#34;&gt;MongoDB Enterprise Operator for Kubernetes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is a talk from MongoDB Live 2020 about the Community Operator:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2Xszdg-4T6A&amp;amp;t=1368s&#34;&gt;Run it in Kubernetes! Community and Enterprise MongoDB in Containers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/#supported-features&#34;&gt;Supported Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/#planned-features&#34;&gt;Planned Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/docs&#34;&gt;documentation&lt;/a&gt; to learn how to:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/docs/install-upgrade.md&#34;&gt;Install or upgrade&lt;/a&gt; the Operator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/docs/deploy-configure.md&#34;&gt;Deploy and configure&lt;/a&gt; MongoDB resources.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/docs/users.md&#34;&gt;Create a database user&lt;/a&gt; with SCRAM authentication.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/docs/secure.md&#34;&gt;Secure MongoDB resource connections&lt;/a&gt; using TLS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: &lt;a href=&#34;https://www.mongodb.com/docs/kubernetes-operator/master/&#34;&gt;MongoDB Enterprise Kubernetes Operator&lt;/a&gt; docs are for the enterprise operator use case and NOT for the community operator. In addition to the docs mentioned above, you can refer to this &lt;a href=&#34;https://www.mongodb.com/blog/post/run-secure-containerized-mongodb-deployments-using-the-mongo-db-community-kubernetes-oper&#34;&gt;blog post&lt;/a&gt; as well to learn more about community operator deployment&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;p&gt;The MongoDB Community Kubernetes Operator supports the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create &lt;a href=&#34;https://www.mongodb.com/docs/manual/replication/&#34;&gt;replica sets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Upgrade and downgrade MongoDB server version&lt;/li&gt; &#xA; &lt;li&gt;Scale replica sets up and down&lt;/li&gt; &#xA; &lt;li&gt;Read from and write to the replica set while scaling, upgrading, and downgrading. These operations are done in an &#34;always up&#34; manner.&lt;/li&gt; &#xA; &lt;li&gt;Report MongoDB server state via the &lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/config/crd/bases/mongodbcommunity.mongodb.com_mongodbcommunity.yaml&#34;&gt;MongoDBCommunity resource&lt;/a&gt; &lt;code&gt;status&lt;/code&gt; field&lt;/li&gt; &#xA; &lt;li&gt;Use any of the available &lt;a href=&#34;https://hub.docker.com/_/mongo/&#34;&gt;Docker MongoDB images&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connect to the replica set from inside the Kubernetes cluster (no external connectivity)&lt;/li&gt; &#xA; &lt;li&gt;Secure client-to-server and server-to-server connections with TLS&lt;/li&gt; &#xA; &lt;li&gt;Create users with &lt;a href=&#34;https://www.mongodb.com/docs/manual/core/security-scram/&#34;&gt;SCRAM&lt;/a&gt; authentication&lt;/li&gt; &#xA; &lt;li&gt;Create custom roles&lt;/li&gt; &#xA; &lt;li&gt;Enable a &lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/docs/prometheus/README.md&#34;&gt;metrics target that can be used with Prometheus&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Planned Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Server internal authentication via keyfile&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Before you contribute to the MongoDB Community Kubernetes Operator, please read:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/docs/architecture.md&#34;&gt;MongoDB Community Kubernetes Operator Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/docs/contributing.md&#34;&gt;Contributing to MongoDB Community Kubernetes Operator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please file issues before filing PRs. For PRs to be accepted, contributors must sign our &lt;a href=&#34;https://www.mongodb.com/legal/contributor-agreement&#34;&gt;CLA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Reviewers, please ensure that the CLA has been signed by referring to &lt;a href=&#34;https://contributors.corp.mongodb.com/&#34;&gt;the contributors tool&lt;/a&gt; (internal link).&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/mongodb/mongodb-kubernetes-operator/master/LICENSE.md&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>actions/actions-runner-controller</title>
    <updated>2022-12-15T01:32:29Z</updated>
    <id>tag:github.com,2022-12-15:/actions/actions-runner-controller</id>
    <link href="https://github.com/actions/actions-runner-controller" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kubernetes controller for GitHub Actions self-hosted runners&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Actions Runner Controller (ARC)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6061&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6061/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jonico/awesome-runners&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/listed%20on-awesome--runners-blue.svg?sanitize=true&#34; alt=&#34;awesome-runners&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/search?repo=actions-runner-controller&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/actions-runner-controller&#34; alt=&#34;Artifact Hub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;GitHub Actions automates the deployment of code to different environments, including production. The environments contain the &lt;code&gt;GitHub Runner&lt;/code&gt; software which executes the automation. &lt;code&gt;GitHub Runner&lt;/code&gt; can be run in GitHub-hosted cloud or self-hosted environments. Self-hosted environments offer more control of hardware, operating system, and software tools. They can be run on physical machines, virtual machines, or in a container. Containerized environments are lightweight, loosely coupled, highly efficient and can be managed centrally. However, they are not straightforward to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Actions Runner Controller (ARC)&lt;/code&gt; makes it simpler to run self hosted environments on Kubernetes(K8s) cluster.&lt;/p&gt; &#xA;&lt;p&gt;With ARC you can :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Deploy self hosted runners on Kubernetes cluster&lt;/strong&gt; with a simple set of commands.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auto scale runners&lt;/strong&gt; based on demand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Setup across GitHub editions&lt;/strong&gt; including GitHub Enterprise editions and GitHub Enterprise Cloud.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;For an overview of ARC, please refer to &#34;&lt;a href=&#34;https://github.com/actions-runner-controller/actions-runner-controller/raw/master/docs/Actions-Runner-Controller-Overview.md&#34;&gt;ARC Overview&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;ARC can be setup with just a few steps.&lt;/p&gt; &#xA;&lt;p&gt;In this section we will setup prerequisites, deploy ARC into a K8s cluster, and then run GitHub Action workflows on that cluster.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;sub&gt;Create a K8s cluster, if not available.&lt;/sub&gt;&lt;/summary&gt; &#xA; &lt;sub&gt; If you don&#39;t have a K8s cluster, you can install a local environment using minikube. For more information, see &lt;a href=&#34;https://minikube.sigs.k8s.io/docs/start/&#34;&gt;&#34;Installing minikube.&#34;&lt;/a&gt; &lt;/sub&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;span&gt;1⃣&lt;/span&gt; Install cert-manager in your cluster. For more information, see &#34;&lt;a href=&#34;https://cert-manager.io/docs/installation/&#34;&gt;cert-manager&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.8.2/cert-manager.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt; *note:- This command uses v1.8.2. Please replace with a later version, if available.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You may also install cert-manager using Helm. For instructions, see &#34;&lt;a href=&#34;https://cert-manager.io/docs/installation/helm/#installing-with-helm&#34;&gt;Installing with Helm&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;span&gt;2⃣&lt;/span&gt; Next, Generate a Personal Access Token (PAT) for ARC to authenticate with GitHub.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Login to your GitHub account and Navigate to &#34;&lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;Create new Token&lt;/a&gt;.&#34;&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;repo&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;strong&gt;Generate Token&lt;/strong&gt; and then copy the token locally ( we’ll need it later).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deploy and Configure ARC&lt;/h3&gt; &#xA;&lt;p&gt;1️⃣ Deploy and configure ARC on your K8s cluster. You may use Helm or Kubectl.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Helm deployment&lt;/summary&gt; &#xA; &lt;h5&gt;Add repository&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;helm repo add actions-runner-controller https://actions-runner-controller.github.io/actions-runner-controller&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h5&gt;Install Helm chart&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;helm upgrade --install --namespace actions-runner-system --create-namespace\&#xA;  --set=authSecret.create=true\&#xA;  --set=authSecret.github_token=&#34;REPLACE_YOUR_TOKEN_HERE&#34;\&#xA;  --wait actions-runner-controller actions-runner-controller/actions-runner-controller&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;sub&gt; *note:- Replace REPLACE_YOUR_TOKEN_HERE with your PAT that was generated previously. &lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Kubectl deployment&lt;/summary&gt; &#xA; &lt;h5&gt;Deploy ARC&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl apply -f \&#xA;https://github.com/actions-runner-controller/actions-runner-controller/\&#xA;releases/download/v0.22.0/actions-runner-controller.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;sub&gt; *note:- Replace &#34;v0.22.0&#34; with the version you wish to deploy &lt;/sub&gt;&lt;/p&gt; &#xA; &lt;h5&gt;Configure Personal Access Token&lt;/h5&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl create secret generic controller-manager \&#xA;    -n actions-runner-system \&#xA;    --from-literal=github_token=REPLACE_YOUR_TOKEN_HERE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;sub&gt; *note:- Replace REPLACE_YOUR_TOKEN_HERE with your PAT that was generated previously.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;2️⃣ Create the GitHub self hosted runners and configure to run against your repository.&lt;/p&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;runnerdeployment.yaml&lt;/code&gt; file and copy the following YAML contents into it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;apiVersion: actions.summerwind.dev/v1alpha1&#xA;kind: RunnerDeployment&#xA;metadata:&#xA;  name: example-runnerdeploy&#xA;spec:&#xA;  replicas: 1&#xA;  template:&#xA;    spec:&#xA;      repository: mumoshu/actions-runner-controller-ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt; *note:- Replace &#34;mumoshu/actions-runner-controller-ci&#34; with your repository name. &lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Apply this file to your K8s cluster.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;kubectl apply -f runnerdeployment.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;🎉 We are done - now we should have self hosted runners running in K8s configured to your repository. 🎉&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next - lets verify our setup and execute some workflows.&lt;/p&gt; &#xA;&lt;h3&gt;Verify and Execute Workflows&lt;/h3&gt; &#xA;&lt;p&gt;&lt;span&gt;1⃣&lt;/span&gt; Verify that your setup is successful:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;&#xA;$ kubectl get runners&#xA;NAME                             REPOSITORY                             STATUS&#xA;example-runnerdeploy2475h595fr   mumoshu/actions-runner-controller-ci   Running&#xA;&#xA;$ kubectl get pods&#xA;NAME                           READY   STATUS    RESTARTS   AGE&#xA;example-runnerdeploy2475ht2qbr 2/2     Running   0          1m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, this runner has been registered directly to the specified repository, you can see it in repository settings. For more information, see &#34;&lt;a href=&#34;https://docs.github.com/en/actions/hosting-your-own-runners/monitoring-and-troubleshooting-self-hosted-runners#checking-the-status-of-a-self-hosted-runner&#34;&gt;Checking the status of a self-hosted runner - GitHub Docs&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;2⃣&lt;/span&gt; You are ready to execute workflows against this self-hosted runner. For more information, see &#34;&lt;a href=&#34;https://docs.github.com/en/actions/hosting-your-own-runners/using-self-hosted-runners-in-a-workflow#using-self-hosted-runners-in-a-workflow&#34;&gt;Using self-hosted runners in a workflow - GitHub Docs&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;p&gt;There is also a quick start guide to get started on Actions, For more information, please refer to &#34;&lt;a href=&#34;https://docs.github.com/en/actions/quickstart&#34;&gt;Quick start Guide to GitHub Actions&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;p&gt;For more detailed documentation, please refer to &#34;&lt;a href=&#34;https://github.com/actions-runner-controller/actions-runner-controller/raw/master/docs/detailed-docs.md&#34;&gt;Detailed Documentation&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome contributions from the community. For more details on contributing to the project (including requirements), please refer to &#34;&lt;a href=&#34;https://github.com/actions-runner-controller/actions-runner-controller/raw/master/CONTRIBUTING.md&#34;&gt;Getting Started with Contributing&lt;/a&gt;.&#34;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;We are very happy to help you with any issues you have. Please refer to the &#34;&lt;a href=&#34;https://github.com/actions-runner-controller/actions-runner-controller/raw/master/TROUBLESHOOTING.md&#34;&gt;Troubleshooting&lt;/a&gt;&#34; section for common issues.&lt;/p&gt;</summary>
  </entry>
</feed>