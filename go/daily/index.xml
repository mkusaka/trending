<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-27T01:36:29Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hibiken/asynq</title>
    <updated>2022-08-27T01:36:29Z</updated>
    <id>tag:github.com,2022-08-27:/hibiken/asynq</id>
    <link href="https://github.com/hibiken/asynq" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple, reliable, and efficient distributed task queue in Go&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/114697792-ffbfa580-9d26-11eb-8e5b-33bef69476dc.png&#34; alt=&#34;Asynq logo&#34; width=&#34;360px&#34;&gt; &#xA;&lt;h1&gt;Simple, reliable &amp;amp; efficient distributed task queue in Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/hibiken/asynq&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/hibiken/asynq?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/hibiken/asynq&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/hibiken/asynq&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/hibiken/asynq/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/go-asynq/community&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/go-asynq/gitter.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Asynq is a Go library for queueing tasks and processing them asynchronously with workers. It&#39;s backed by &lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt; and is designed to be scalable yet easy to get started.&lt;/p&gt; &#xA;&lt;p&gt;Highlevel overview of how Asynq works:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Client puts tasks on a queue&lt;/li&gt; &#xA; &lt;li&gt;Server pulls tasks off queues and starts a worker goroutine for each task&lt;/li&gt; &#xA; &lt;li&gt;Tasks are processed concurrently by multiple workers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Task queues are used as a mechanism to distribute work across multiple machines. A system can consist of multiple worker servers and brokers, giving way to high availability and horizontal scaling.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example use case&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/116358505-656f5f80-a806-11eb-9c16-94e49dab0f99.jpg&#34; alt=&#34;Task Queue Diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Guaranteed &lt;a href=&#34;https://www.cloudcomputingpatterns.org/at_least_once_delivery/&#34;&gt;at least one execution&lt;/a&gt; of a task&lt;/li&gt; &#xA; &lt;li&gt;Scheduling of tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Task-Retry&#34;&gt;Retries&lt;/a&gt; of failed tasks&lt;/li&gt; &#xA; &lt;li&gt;Automatic recovery of tasks in the event of a worker crash&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Queue-Priority#weighted-priority&#34;&gt;Weighted priority queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Queue-Priority#strict-priority&#34;&gt;Strict priority queues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Low latency to add a task since writes are fast in Redis&lt;/li&gt; &#xA; &lt;li&gt;De-duplication of tasks using &lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Unique-Tasks&#34;&gt;unique option&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Allow &lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Task-Timeout-and-Cancelation&#34;&gt;timeout and deadline per task&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Allow &lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Task-aggregation&#34;&gt;aggregating group of tasks&lt;/a&gt; to batch multiple successive operations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Handler-Deep-Dive&#34;&gt;Flexible handler interface with support for middlewares&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/tools/asynq/README.md#pause&#34;&gt;Ability to pause queue&lt;/a&gt; to stop processing tasks from the queue&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Periodic-Tasks&#34;&gt;Periodic Tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Redis-Cluster&#34;&gt;Support Redis Cluster&lt;/a&gt; for automatic sharding and high availability&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Automatic-Failover&#34;&gt;Support Redis Sentinels&lt;/a&gt; for high availability&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://prometheus.io/&#34;&gt;Prometheus&lt;/a&gt; to collect and visualize queue metrics&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/#web-ui&#34;&gt;Web UI&lt;/a&gt; to inspect and remote-control queues and tasks&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/#command-line-tool&#34;&gt;CLI&lt;/a&gt; to inspect and remote-control queues and tasks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Stability and Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Status&lt;/strong&gt;: The library is currently undergoing &lt;strong&gt;heavy development&lt;/strong&gt; with frequent, breaking API changes.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;☝️ &lt;strong&gt;Important Note&lt;/strong&gt;: Current major version is zero (&lt;code&gt;v0.x.x&lt;/code&gt;) to accomodate rapid development and fast iteration while getting early feedback from users (&lt;em&gt;feedback on APIs are appreciated!&lt;/em&gt;). The public API could change without a major version update before &lt;code&gt;v1.0.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have Go installed (&lt;a href=&#34;https://golang.org/dl/&#34;&gt;download&lt;/a&gt;). Version &lt;code&gt;1.14&lt;/code&gt; or higher is required.&lt;/p&gt; &#xA;&lt;p&gt;Initialize your project by creating a folder and then running &lt;code&gt;go mod init github.com/your/repo&lt;/code&gt; (&lt;a href=&#34;https://blog.golang.org/using-go-modules&#34;&gt;learn more&lt;/a&gt;) inside the folder. Then install Asynq library with the &lt;a href=&#34;https://golang.org/cmd/go/#hdr-Add_dependencies_to_current_module_and_install_them&#34;&gt;&lt;code&gt;go get&lt;/code&gt;&lt;/a&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/hibiken/asynq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you&#39;re running a Redis server locally or from a &lt;a href=&#34;https://hub.docker.com/_/redis&#34;&gt;Docker&lt;/a&gt; container. Version &lt;code&gt;4.0&lt;/code&gt; or higher is required.&lt;/p&gt; &#xA;&lt;p&gt;Next, write a package that encapsulates task creation and task handling.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package tasks&#xA;&#xA;import (&#xA;    &#34;context&#34;&#xA;    &#34;encoding/json&#34;&#xA;    &#34;fmt&#34;&#xA;    &#34;log&#34;&#xA;    &#34;time&#34;&#xA;    &#34;github.com/hibiken/asynq&#34;&#xA;)&#xA;&#xA;// A list of task types.&#xA;const (&#xA;    TypeEmailDelivery   = &#34;email:deliver&#34;&#xA;    TypeImageResize     = &#34;image:resize&#34;&#xA;)&#xA;&#xA;type EmailDeliveryPayload struct {&#xA;    UserID     int&#xA;    TemplateID string&#xA;}&#xA;&#xA;type ImageResizePayload struct {&#xA;    SourceURL string&#xA;}&#xA;&#xA;//----------------------------------------------&#xA;// Write a function NewXXXTask to create a task.&#xA;// A task consists of a type and a payload.&#xA;//----------------------------------------------&#xA;&#xA;func NewEmailDeliveryTask(userID int, tmplID string) (*asynq.Task, error) {&#xA;    payload, err := json.Marshal(EmailDeliveryPayload{UserID: userID, TemplateID: tmplID})&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    return asynq.NewTask(TypeEmailDelivery, payload), nil&#xA;}&#xA;&#xA;func NewImageResizeTask(src string) (*asynq.Task, error) {&#xA;    payload, err := json.Marshal(ImageResizePayload{SourceURL: src})&#xA;    if err != nil {&#xA;        return nil, err&#xA;    }&#xA;    // task options can be passed to NewTask, which can be overridden at enqueue time.&#xA;    return asynq.NewTask(TypeImageResize, payload, asynq.MaxRetry(5), asynq.Timeout(20 * time.Minute)), nil&#xA;}&#xA;&#xA;//---------------------------------------------------------------&#xA;// Write a function HandleXXXTask to handle the input task.&#xA;// Note that it satisfies the asynq.HandlerFunc interface.&#xA;//&#xA;// Handler doesn&#39;t need to be a function. You can define a type&#xA;// that satisfies asynq.Handler interface. See examples below.&#xA;//---------------------------------------------------------------&#xA;&#xA;func HandleEmailDeliveryTask(ctx context.Context, t *asynq.Task) error {&#xA;    var p EmailDeliveryPayload&#xA;    if err := json.Unmarshal(t.Payload(), &amp;amp;p); err != nil {&#xA;        return fmt.Errorf(&#34;json.Unmarshal failed: %v: %w&#34;, err, asynq.SkipRetry)&#xA;    }&#xA;    log.Printf(&#34;Sending Email to User: user_id=%d, template_id=%s&#34;, p.UserID, p.TemplateID)&#xA;    // Email delivery code ...&#xA;    return nil&#xA;}&#xA;&#xA;// ImageProcessor implements asynq.Handler interface.&#xA;type ImageProcessor struct {&#xA;    // ... fields for struct&#xA;}&#xA;&#xA;func (processor *ImageProcessor) ProcessTask(ctx context.Context, t *asynq.Task) error {&#xA;    var p ImageResizePayload&#xA;    if err := json.Unmarshal(t.Payload(), &amp;amp;p); err != nil {&#xA;        return fmt.Errorf(&#34;json.Unmarshal failed: %v: %w&#34;, err, asynq.SkipRetry)&#xA;    }&#xA;    log.Printf(&#34;Resizing image: src=%s&#34;, p.SourceURL)&#xA;    // Image resizing code ...&#xA;    return nil&#xA;}&#xA;&#xA;func NewImageProcessor() *ImageProcessor {&#xA;&#x9;return &amp;amp;ImageProcessor{}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your application code, import the above package and use &lt;a href=&#34;https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Client&#34;&gt;&lt;code&gt;Client&lt;/code&gt;&lt;/a&gt; to put tasks on queues.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;log&#34;&#xA;    &#34;time&#34;&#xA;&#xA;    &#34;github.com/hibiken/asynq&#34;&#xA;    &#34;your/app/package/tasks&#34;&#xA;)&#xA;&#xA;const redisAddr = &#34;127.0.0.1:6379&#34;&#xA;&#xA;func main() {&#xA;    client := asynq.NewClient(asynq.RedisClientOpt{Addr: redisAddr})&#xA;    defer client.Close()&#xA;&#xA;    // ------------------------------------------------------&#xA;    // Example 1: Enqueue task to be processed immediately.&#xA;    //            Use (*Client).Enqueue method.&#xA;    // ------------------------------------------------------&#xA;&#xA;    task, err := tasks.NewEmailDeliveryTask(42, &#34;some:template:id&#34;)&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not create task: %v&#34;, err)&#xA;    }&#xA;    info, err := client.Enqueue(task)&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not enqueue task: %v&#34;, err)&#xA;    }&#xA;    log.Printf(&#34;enqueued task: id=%s queue=%s&#34;, info.ID, info.Queue)&#xA;&#xA;&#xA;    // ------------------------------------------------------------&#xA;    // Example 2: Schedule task to be processed in the future.&#xA;    //            Use ProcessIn or ProcessAt option.&#xA;    // ------------------------------------------------------------&#xA;&#xA;    info, err = client.Enqueue(task, asynq.ProcessIn(24*time.Hour))&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not schedule task: %v&#34;, err)&#xA;    }&#xA;    log.Printf(&#34;enqueued task: id=%s queue=%s&#34;, info.ID, info.Queue)&#xA;&#xA;&#xA;    // ----------------------------------------------------------------------------&#xA;    // Example 3: Set other options to tune task processing behavior.&#xA;    //            Options include MaxRetry, Queue, Timeout, Deadline, Unique etc.&#xA;    // ----------------------------------------------------------------------------&#xA;&#xA;    task, err = tasks.NewImageResizeTask(&#34;https://example.com/myassets/image.jpg&#34;)&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not create task: %v&#34;, err)&#xA;    }&#xA;    info, err = client.Enqueue(task, asynq.MaxRetry(10), asynq.Timeout(3 * time.Minute))&#xA;    if err != nil {&#xA;        log.Fatalf(&#34;could not enqueue task: %v&#34;, err)&#xA;    }&#xA;    log.Printf(&#34;enqueued task: id=%s queue=%s&#34;, info.ID, info.Queue)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, start a worker server to process these tasks in the background. To start the background workers, use &lt;a href=&#34;https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Server&#34;&gt;&lt;code&gt;Server&lt;/code&gt;&lt;/a&gt; and provide your &lt;a href=&#34;https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#Handler&#34;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; to process the tasks.&lt;/p&gt; &#xA;&lt;p&gt;You can optionally use &lt;a href=&#34;https://pkg.go.dev/github.com/hibiken/asynq?tab=doc#ServeMux&#34;&gt;&lt;code&gt;ServeMux&lt;/code&gt;&lt;/a&gt; to create a handler, just as you would with &lt;a href=&#34;https://golang.org/pkg/net/http/&#34;&gt;&lt;code&gt;net/http&lt;/code&gt;&lt;/a&gt; Handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;log&#34;&#xA;&#xA;    &#34;github.com/hibiken/asynq&#34;&#xA;    &#34;your/app/package/tasks&#34;&#xA;)&#xA;&#xA;const redisAddr = &#34;127.0.0.1:6379&#34;&#xA;&#xA;func main() {&#xA;    srv := asynq.NewServer(&#xA;        asynq.RedisClientOpt{Addr: redisAddr},&#xA;        asynq.Config{&#xA;            // Specify how many concurrent workers to use&#xA;            Concurrency: 10,&#xA;            // Optionally specify multiple queues with different priority.&#xA;            Queues: map[string]int{&#xA;                &#34;critical&#34;: 6,&#xA;                &#34;default&#34;:  3,&#xA;                &#34;low&#34;:      1,&#xA;            },&#xA;            // See the godoc for other configuration options&#xA;        },&#xA;    )&#xA;&#xA;    // mux maps a type to a handler&#xA;    mux := asynq.NewServeMux()&#xA;    mux.HandleFunc(tasks.TypeEmailDelivery, tasks.HandleEmailDeliveryTask)&#xA;    mux.Handle(tasks.TypeImageResize, tasks.NewImageProcessor())&#xA;    // ...register other handlers...&#xA;&#xA;    if err := srv.Run(mux); err != nil {&#xA;        log.Fatalf(&#34;could not run server: %v&#34;, err)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more detailed walk-through of the library, see our &lt;a href=&#34;https://github.com/hibiken/asynq/wiki/Getting-Started&#34;&gt;Getting Started&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about &lt;code&gt;asynq&lt;/code&gt; features and APIs, see the package &lt;a href=&#34;https://godoc.org/github.com/hibiken/asynq&#34;&gt;godoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Web UI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hibiken/asynqmon&#34;&gt;Asynqmon&lt;/a&gt; is a web based tool for monitoring and administrating Asynq queues and tasks.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a few screenshots of the Web UI:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Queues view&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/114697016-07327f00-9d26-11eb-808c-0ac841dc888e.png&#34; alt=&#34;Web UI Queues View&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tasks view&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/114697070-1f0a0300-9d26-11eb-855c-d3ec263865b7.png&#34; alt=&#34;Web UI TasksView&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Metrics view&lt;/strong&gt; &lt;img width=&#34;1532&#34; alt=&#34;Screen Shot 2021-12-19 at 4 37 19 PM&#34; src=&#34;https://user-images.githubusercontent.com/10953044/146777420-cae6c476-bac6-469c-acce-b2f6584e8707.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Settings and adaptive dark mode&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11155743/114697149-3517c380-9d26-11eb-9f7a-ae2dd00aad5b.png&#34; alt=&#34;Web UI Settings and adaptive dark mode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For details on how to use the tool, refer to the tool&#39;s &lt;a href=&#34;https://github.com/hibiken/asynqmon#readme&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Command Line Tool&lt;/h2&gt; &#xA;&lt;p&gt;Asynq ships with a command line tool to inspect the state of queues and tasks.&lt;/p&gt; &#xA;&lt;p&gt;To install the CLI tool, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/hibiken/asynq/tools/asynq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an example of running the &lt;code&gt;asynq dash&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/docs/assets/dash.gif&#34; alt=&#34;Gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For details on how to use the tool, refer to the tool&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/tools/asynq/README.md&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We are open to, and grateful for, any contributions (GitHub issues/PRs, feedback on &lt;a href=&#34;https://gitter.im/go-asynq/community&#34;&gt;Gitter channel&lt;/a&gt;, etc) made by the community.&lt;/p&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hibiken/asynq/master/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt; before contributing.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (c) 2019-present &lt;a href=&#34;https://github.com/hibiken&#34;&gt;Ken Hibino&lt;/a&gt; and &lt;a href=&#34;https://github.com/hibiken/asynq/graphs/contributors&#34;&gt;Contributors&lt;/a&gt;. &lt;code&gt;Asynq&lt;/code&gt; is free and open-source software licensed under the &lt;a href=&#34;https://github.com/hibiken/asynq/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;. Official logo was created by &lt;a href=&#34;https://github.com/koddr&#34;&gt;Vic Shóstak&lt;/a&gt; and distributed under &lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;Creative Commons&lt;/a&gt; license (CC0 1.0 Universal).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>minio/minio</title>
    <updated>2022-08-27T01:36:29Z</updated>
    <id>tag:github.com,2022-08-27:/minio/minio</id>
    <link href="https://github.com/minio/minio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Multi-Cloud ☁️ Object Storage&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MinIO Quickstart Guide&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://slack.min.io&#34;&gt;&lt;img src=&#34;https://slack.min.io/slack?type=svg&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/minio/minio/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/minio/minio.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/minio/minio/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-AGPL%20V3-blue&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://min.io&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/minio/minio/master/.github/logo.svg?sanitize=true&#34; alt=&#34;MinIO&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MinIO is a High Performance Object Storage released under GNU Affero General Public License v3.0. It is API compatible with Amazon S3 cloud storage service. Use MinIO to build high performance infrastructure for machine learning, analytics and application data workloads.&lt;/p&gt; &#xA;&lt;p&gt;This README provides quickstart instructions on running MinIO on bare metal hardware, including container-based installations. For Kubernetes environments, use the &lt;a href=&#34;https://github.com/minio/operator/raw/master/README.md&#34;&gt;MinIO Kubernetes Operator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Container Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use the following commands to run a standalone MinIO server as a container.&lt;/p&gt; &#xA;&lt;p&gt;Standalone MinIO servers are best suited for early development and evaluation. Certain features such as versioning, object locking, and bucket replication require distributed deploying MinIO with Erasure Coding. For extended development and production, deploy MinIO with Erasure Coding enabled - specifically, with a &lt;em&gt;minimum&lt;/em&gt; of 4 drives per MinIO server. See &lt;a href=&#34;https://docs.min.io/docs/minio-erasure-code-quickstart-guide.html&#34;&gt;MinIO Erasure Code Quickstart Guide&lt;/a&gt; for more complete documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Stable&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to run the latest stable image of MinIO as a container using an ephemeral data volume:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;podman run -p 9000:9000 -p 9001:9001 \&#xA;  quay.io/minio/minio server /data --console-address &#34;:9001&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MinIO deployment starts using default root credentials &lt;code&gt;minioadmin:minioadmin&lt;/code&gt;. You can test the deployment using the MinIO Console, an embedded object browser built into MinIO Server. Point a web browser running on the host machine to &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt; and log in with the root credentials. You can use the Browser to create buckets, upload objects, and browse the contents of the MinIO server.&lt;/p&gt; &#xA;&lt;p&gt;You can also connect using any S3-compatible tool, such as the MinIO Client &lt;code&gt;mc&lt;/code&gt; commandline tool. See &lt;a href=&#34;https://raw.githubusercontent.com/minio/minio/master/#test-using-minio-client-mc&#34;&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/a&gt; for more information on using the &lt;code&gt;mc&lt;/code&gt; commandline tool. For application developers, see &lt;a href=&#34;https://docs.min.io/docs/&#34;&gt;https://docs.min.io/docs/&lt;/a&gt; and click &lt;strong&gt;MinIO SDKs&lt;/strong&gt; in the navigation to view MinIO SDKs for supported languages.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: To deploy MinIO on with persistent storage, you must map local persistent directories from the host OS to the container using the &lt;code&gt;podman -v&lt;/code&gt; option. For example, &lt;code&gt;-v /mnt/data:/data&lt;/code&gt; maps the host OS drive at &lt;code&gt;/mnt/data&lt;/code&gt; to &lt;code&gt;/data&lt;/code&gt; on the container.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;macOS&lt;/h2&gt; &#xA;&lt;p&gt;Use the following commands to run a standalone MinIO server on macOS.&lt;/p&gt; &#xA;&lt;p&gt;Standalone MinIO servers are best suited for early development and evaluation. Certain features such as versioning, object locking, and bucket replication require distributed deploying MinIO with Erasure Coding. For extended development and production, deploy MinIO with Erasure Coding enabled - specifically, with a &lt;em&gt;minimum&lt;/em&gt; of 4 drives per MinIO server. See &lt;a href=&#34;https://docs.min.io/docs/minio-erasure-code-quickstart-guide.html&#34;&gt;MinIO Erasure Code Quickstart Guide&lt;/a&gt; for more complete documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Homebrew (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to install the latest stable MinIO package using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. Replace &lt;code&gt;/data&lt;/code&gt; with the path to the drive or directory in which you want MinIO to store data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install minio/stable/minio&#xA;minio server /data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: If you previously installed minio using &lt;code&gt;brew install minio&lt;/code&gt; then it is recommended that you reinstall minio from &lt;code&gt;minio/stable/minio&lt;/code&gt; official repo instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew uninstall minio&#xA;brew install minio/stable/minio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MinIO deployment starts using default root credentials &lt;code&gt;minioadmin:minioadmin&lt;/code&gt;. You can test the deployment using the MinIO Console, an embedded web-based object browser built into MinIO Server. Point a web browser running on the host machine to &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt; and log in with the root credentials. You can use the Browser to create buckets, upload objects, and browse the contents of the MinIO server.&lt;/p&gt; &#xA;&lt;p&gt;You can also connect using any S3-compatible tool, such as the MinIO Client &lt;code&gt;mc&lt;/code&gt; commandline tool. See &lt;a href=&#34;https://raw.githubusercontent.com/minio/minio/master/#test-using-minio-client-mc&#34;&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/a&gt; for more information on using the &lt;code&gt;mc&lt;/code&gt; commandline tool. For application developers, see &lt;a href=&#34;https://docs.min.io/docs/&#34;&gt;https://docs.min.io/docs/&lt;/a&gt; and click &lt;strong&gt;MinIO SDKs&lt;/strong&gt; in the navigation to view MinIO SDKs for supported languages.&lt;/p&gt; &#xA;&lt;h3&gt;Binary Download&lt;/h3&gt; &#xA;&lt;p&gt;Use the following command to download and run a standalone MinIO server on macOS. Replace &lt;code&gt;/data&lt;/code&gt; with the path to the drive or directory in which you want MinIO to store data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://dl.min.io/server/minio/release/darwin-amd64/minio&#xA;chmod +x minio&#xA;./minio server /data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MinIO deployment starts using default root credentials &lt;code&gt;minioadmin:minioadmin&lt;/code&gt;. You can test the deployment using the MinIO Console, an embedded web-based object browser built into MinIO Server. Point a web browser running on the host machine to &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt; and log in with the root credentials. You can use the Browser to create buckets, upload objects, and browse the contents of the MinIO server.&lt;/p&gt; &#xA;&lt;p&gt;You can also connect using any S3-compatible tool, such as the MinIO Client &lt;code&gt;mc&lt;/code&gt; commandline tool. See &lt;a href=&#34;https://raw.githubusercontent.com/minio/minio/master/#test-using-minio-client-mc&#34;&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/a&gt; for more information on using the &lt;code&gt;mc&lt;/code&gt; commandline tool. For application developers, see &lt;a href=&#34;https://docs.min.io/docs/&#34;&gt;https://docs.min.io/docs/&lt;/a&gt; and click &lt;strong&gt;MinIO SDKs&lt;/strong&gt; in the navigation to view MinIO SDKs for supported languages.&lt;/p&gt; &#xA;&lt;h2&gt;GNU/Linux&lt;/h2&gt; &#xA;&lt;p&gt;Use the following command to run a standalone MinIO server on Linux hosts running 64-bit Intel/AMD architectures. Replace &lt;code&gt;/data&lt;/code&gt; with the path to the drive or directory in which you want MinIO to store data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget https://dl.min.io/server/minio/release/linux-amd64/minio&#xA;chmod +x minio&#xA;./minio server /data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;/data&lt;/code&gt; with the path to the drive or directory in which you want MinIO to store data.&lt;/p&gt; &#xA;&lt;p&gt;The following table lists supported architectures. Replace the &lt;code&gt;wget&lt;/code&gt; URL with the architecture for your Linux host.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Architecture&lt;/th&gt; &#xA;   &lt;th&gt;URL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;64-bit Intel/AMD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.min.io/server/minio/release/linux-amd64/minio&#34;&gt;https://dl.min.io/server/minio/release/linux-amd64/minio&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;64-bit ARM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.min.io/server/minio/release/linux-arm64/minio&#34;&gt;https://dl.min.io/server/minio/release/linux-arm64/minio&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;64-bit PowerPC LE (ppc64le)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.min.io/server/minio/release/linux-ppc64le/minio&#34;&gt;https://dl.min.io/server/minio/release/linux-ppc64le/minio&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IBM Z-Series (S390X)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://dl.min.io/server/minio/release/linux-s390x/minio&#34;&gt;https://dl.min.io/server/minio/release/linux-s390x/minio&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The MinIO deployment starts using default root credentials &lt;code&gt;minioadmin:minioadmin&lt;/code&gt;. You can test the deployment using the MinIO Console, an embedded web-based object browser built into MinIO Server. Point a web browser running on the host machine to &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt; and log in with the root credentials. You can use the Browser to create buckets, upload objects, and browse the contents of the MinIO server.&lt;/p&gt; &#xA;&lt;p&gt;You can also connect using any S3-compatible tool, such as the MinIO Client &lt;code&gt;mc&lt;/code&gt; commandline tool. See &lt;a href=&#34;https://raw.githubusercontent.com/minio/minio/master/#test-using-minio-client-mc&#34;&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/a&gt; for more information on using the &lt;code&gt;mc&lt;/code&gt; commandline tool. For application developers, see &lt;a href=&#34;https://docs.min.io/docs/&#34;&gt;https://docs.min.io/docs/&lt;/a&gt; and click &lt;strong&gt;MinIO SDKs&lt;/strong&gt; in the navigation to view MinIO SDKs for supported languages.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Standalone MinIO servers are best suited for early development and evaluation. Certain features such as versioning, object locking, and bucket replication require distributed deploying MinIO with Erasure Coding. For extended development and production, deploy MinIO with Erasure Coding enabled - specifically, with a &lt;em&gt;minimum&lt;/em&gt; of 4 drives per MinIO server. See &lt;a href=&#34;https://docs.min.io/docs/minio-erasure-code-quickstart-guide.html&#34;&gt;MinIO Erasure Code Quickstart Guide&lt;/a&gt; for more complete documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Microsoft Windows&lt;/h2&gt; &#xA;&lt;p&gt;To run MinIO on 64-bit Windows hosts, download the MinIO executable from the following URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;https://dl.min.io/server/minio/release/windows-amd64/minio.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the following command to run a standalone MinIO server on the Windows host. Replace &lt;code&gt;D:\&lt;/code&gt; with the path to the drive or directory in which you want MinIO to store data. You must change the terminal or powershell directory to the location of the &lt;code&gt;minio.exe&lt;/code&gt; executable, &lt;em&gt;or&lt;/em&gt; add the path to that directory to the system &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;minio.exe server D:\&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MinIO deployment starts using default root credentials &lt;code&gt;minioadmin:minioadmin&lt;/code&gt;. You can test the deployment using the MinIO Console, an embedded web-based object browser built into MinIO Server. Point a web browser running on the host machine to &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt; and log in with the root credentials. You can use the Browser to create buckets, upload objects, and browse the contents of the MinIO server.&lt;/p&gt; &#xA;&lt;p&gt;You can also connect using any S3-compatible tool, such as the MinIO Client &lt;code&gt;mc&lt;/code&gt; commandline tool. See &lt;a href=&#34;https://raw.githubusercontent.com/minio/minio/master/#test-using-minio-client-mc&#34;&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/a&gt; for more information on using the &lt;code&gt;mc&lt;/code&gt; commandline tool. For application developers, see &lt;a href=&#34;https://docs.min.io/docs/&#34;&gt;https://docs.min.io/docs/&lt;/a&gt; and click &lt;strong&gt;MinIO SDKs&lt;/strong&gt; in the navigation to view MinIO SDKs for supported languages.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Standalone MinIO servers are best suited for early development and evaluation. Certain features such as versioning, object locking, and bucket replication require distributed deploying MinIO with Erasure Coding. For extended development and production, deploy MinIO with Erasure Coding enabled - specifically, with a &lt;em&gt;minimum&lt;/em&gt; of 4 drives per MinIO server. See &lt;a href=&#34;https://docs.min.io/docs/minio-erasure-code-quickstart-guide.html&#34;&gt;MinIO Erasure Code Quickstart Guide&lt;/a&gt; for more complete documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Install from Source&lt;/h2&gt; &#xA;&lt;p&gt;Use the following commands to compile and run a standalone MinIO server from source. Source installation is only intended for developers and advanced users. If you do not have a working Golang environment, please follow &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;How to install Golang&lt;/a&gt;. Minimum version required is &lt;a href=&#34;https://golang.org/dl/#stable&#34;&gt;go1.18&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;GO111MODULE=on go install github.com/minio/minio@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The MinIO deployment starts using default root credentials &lt;code&gt;minioadmin:minioadmin&lt;/code&gt;. You can test the deployment using the MinIO Console, an embedded web-based object browser built into MinIO Server. Point a web browser running on the host machine to &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt; and log in with the root credentials. You can use the Browser to create buckets, upload objects, and browse the contents of the MinIO server.&lt;/p&gt; &#xA;&lt;p&gt;You can also connect using any S3-compatible tool, such as the MinIO Client &lt;code&gt;mc&lt;/code&gt; commandline tool. See &lt;a href=&#34;https://raw.githubusercontent.com/minio/minio/master/#test-using-minio-client-mc&#34;&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/a&gt; for more information on using the &lt;code&gt;mc&lt;/code&gt; commandline tool. For application developers, see &lt;a href=&#34;https://docs.min.io/docs/&#34;&gt;https://docs.min.io/docs/&lt;/a&gt; and click &lt;strong&gt;MinIO SDKs&lt;/strong&gt; in the navigation to view MinIO SDKs for supported languages.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: Standalone MinIO servers are best suited for early development and evaluation. Certain features such as versioning, object locking, and bucket replication require distributed deploying MinIO with Erasure Coding. For extended development and production, deploy MinIO with Erasure Coding enabled - specifically, with a &lt;em&gt;minimum&lt;/em&gt; of 4 drives per MinIO server. See &lt;a href=&#34;https://docs.min.io/docs/minio-erasure-code-quickstart-guide.html&#34;&gt;MinIO Erasure Code Quickstart Guide&lt;/a&gt; for more complete documentation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;MinIO strongly recommends &lt;em&gt;against&lt;/em&gt; using compiled-from-source MinIO servers for production environments.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment Recommendations&lt;/h2&gt; &#xA;&lt;h3&gt;Allow port access for Firewalls&lt;/h3&gt; &#xA;&lt;p&gt;By default MinIO uses the port 9000 to listen for incoming connections. If your platform blocks the port by default, you may need to enable access to the port.&lt;/p&gt; &#xA;&lt;h3&gt;ufw&lt;/h3&gt; &#xA;&lt;p&gt;For hosts with ufw enabled (Debian based distros), you can use &lt;code&gt;ufw&lt;/code&gt; command to allow traffic to specific ports. Use below command to allow access to port 9000&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ufw allow 9000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below command enables all incoming traffic to ports ranging from 9000 to 9010.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ufw allow 9000:9010/tcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;firewall-cmd&lt;/h3&gt; &#xA;&lt;p&gt;For hosts with firewall-cmd enabled (CentOS), you can use &lt;code&gt;firewall-cmd&lt;/code&gt; command to allow traffic to specific ports. Use below commands to allow access to port 9000&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;firewall-cmd --get-active-zones&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command gets the active zone(s). Now, apply port rules to the relevant zones returned above. For example if the zone is &lt;code&gt;public&lt;/code&gt;, use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;firewall-cmd --zone=public --add-port=9000/tcp --permanent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;permanent&lt;/code&gt; makes sure the rules are persistent across firewall start, restart or reload. Finally reload the firewall for changes to take effect.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;firewall-cmd --reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iptables&lt;/h3&gt; &#xA;&lt;p&gt;For hosts with iptables enabled (RHEL, CentOS, etc), you can use &lt;code&gt;iptables&lt;/code&gt; command to enable all traffic coming to specific ports. Use below command to allow access to port 9000&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;iptables -A INPUT -p tcp --dport 9000 -j ACCEPT&#xA;service iptables restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below command enables all incoming traffic to ports ranging from 9000 to 9010.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;iptables -A INPUT -p tcp --dport 9000:9010 -j ACCEPT&#xA;service iptables restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test MinIO Connectivity&lt;/h2&gt; &#xA;&lt;h3&gt;Test using MinIO Console&lt;/h3&gt; &#xA;&lt;p&gt;MinIO Server comes with an embedded web based object browser. Point your web browser to &lt;a href=&#34;http://127.0.0.1:9000&#34;&gt;http://127.0.0.1:9000&lt;/a&gt; to ensure your server has started successfully.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: MinIO runs console on random port by default if you wish choose a specific port use &lt;code&gt;--console-address&lt;/code&gt; to pick a specific interface and port.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Things to consider&lt;/h3&gt; &#xA;&lt;p&gt;MinIO redirects browser access requests to the configured server port (i.e. &lt;code&gt;127.0.0.1:9000&lt;/code&gt;) to the configured Console port. MinIO uses the hostname or IP address specified in the request when building the redirect URL. The URL and port &lt;em&gt;must&lt;/em&gt; be accessible by the client for the redirection to work.&lt;/p&gt; &#xA;&lt;p&gt;For deployments behind a load balancer, proxy, or ingress rule where the MinIO host IP address or port is not public, use the &lt;code&gt;MINIO_BROWSER_REDIRECT_URL&lt;/code&gt; environment variable to specify the external hostname for the redirect. The LB/Proxy must have rules for directing traffic to the Console port specifically.&lt;/p&gt; &#xA;&lt;p&gt;For example, consider a MinIO deployment behind a proxy &lt;code&gt;https://minio.example.net&lt;/code&gt;, &lt;code&gt;https://console.minio.example.net&lt;/code&gt; with rules for forwarding traffic on port :9000 and :9001 to MinIO and the MinIO Console respectively on the internal network. Set &lt;code&gt;MINIO_BROWSER_REDIRECT_URL&lt;/code&gt; to &lt;code&gt;https://console.minio.example.net&lt;/code&gt; to ensure the browser receives a valid reachable URL.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, if your TLS certificates do not have the IP SAN for the MinIO server host, the MinIO Console may fail to validate the connection to the server. Use the &lt;code&gt;MINIO_SERVER_URL&lt;/code&gt; environment variable and specify the proxy-accessible hostname of the MinIO server to allow the Console to use the MinIO server API using the TLS certificate.&lt;/p&gt; &#xA;&lt;p&gt;For example: &lt;code&gt;export MINIO_SERVER_URL=&#34;https://minio.example.net&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dashboard&lt;/th&gt; &#xA;   &lt;th&gt;Creating a bucket&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/minio/minio/raw/master/docs/screenshots/pic1.png?raw=true&#34; alt=&#34;Dashboard&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/minio/minio/raw/master/docs/screenshots/pic2.png?raw=true&#34; alt=&#34;Dashboard&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Test using MinIO Client &lt;code&gt;mc&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;mc&lt;/code&gt; provides a modern alternative to UNIX commands like ls, cat, cp, mirror, diff etc. It supports filesystems and Amazon S3 compatible cloud storage services. Follow the MinIO Client &lt;a href=&#34;https://docs.min.io/docs/minio-client-quickstart-guide&#34;&gt;Quickstart Guide&lt;/a&gt; for further instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading MinIO&lt;/h2&gt; &#xA;&lt;p&gt;Upgrades require zero downtime in MinIO, all upgrades are non-disruptive, all transactions on MinIO are atomic. So upgrading all the servers simultaneously is the recommended way to upgrade MinIO.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: requires internet access to update directly from &lt;a href=&#34;https://dl.min.io&#34;&gt;https://dl.min.io&lt;/a&gt;, optionally you can host any mirrors at &lt;a href=&#34;https://my-artifactory.example.com/minio/&#34;&gt;https://my-artifactory.example.com/minio/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For deployments that installed the MinIO server binary by hand, use &lt;a href=&#34;https://docs.min.io/minio/baremetal/reference/minio-mc-admin/mc-admin-update.html&#34;&gt;&lt;code&gt;mc admin update&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mc admin update &amp;lt;minio alias, e.g., myminio&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For deployments without external internet access (e.g. airgapped environments), download the binary from &lt;a href=&#34;https://dl.min.io&#34;&gt;https://dl.min.io&lt;/a&gt; and replace the existing MinIO binary let&#39;s say for example &lt;code&gt;/opt/bin/minio&lt;/code&gt;, apply executable permissions &lt;code&gt;chmod +x /opt/bin/minio&lt;/code&gt; and proceed to perform &lt;code&gt;mc admin service restart alias/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For installations using Systemd MinIO service, upgrade via RPM/DEB packages &lt;strong&gt;parallelly&lt;/strong&gt; on all servers or replace the binary lets say &lt;code&gt;/opt/bin/minio&lt;/code&gt; on all nodes, apply executable permissions &lt;code&gt;chmod +x /opt/bin/minio&lt;/code&gt; and process to perform &lt;code&gt;mc admin service restart alias/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Upgrade Checklist&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Test all upgrades in a lower environment (DEV, QA, UAT) before applying to production. Performing blind upgrades in production environments carries significant risk.&lt;/li&gt; &#xA; &lt;li&gt;Read the release notes for MinIO &lt;em&gt;before&lt;/em&gt; performing any upgrade, there is no forced requirement to upgrade to latest releases upon every releases. Some releases may not be relevant to your setup, avoid upgrading production environments unnecessarily.&lt;/li&gt; &#xA; &lt;li&gt;If you plan to use &lt;code&gt;mc admin update&lt;/code&gt;, MinIO process must have write access to the parent directory where the binary is present on the host system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mc admin update&lt;/code&gt; is not supported and should be avoided in kubernetes/container environments, please upgrade containers by upgrading relevant container images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;We do not recommend upgrading one MinIO server at a time, the product is designed to support parallel upgrades please follow our recommended guidelines.&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Explore Further&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.min.io/docs/minio-erasure-code-quickstart-guide&#34;&gt;MinIO Erasure Code QuickStart Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.min.io/docs/minio-client-quickstart-guide&#34;&gt;Use &lt;code&gt;mc&lt;/code&gt; with MinIO Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.min.io/docs/aws-cli-with-minio&#34;&gt;Use &lt;code&gt;aws-cli&lt;/code&gt; with MinIO Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.min.io/docs/s3cmd-with-minio&#34;&gt;Use &lt;code&gt;s3cmd&lt;/code&gt; with MinIO Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.min.io/docs/golang-client-quickstart-guide&#34;&gt;Use &lt;code&gt;minio-go&lt;/code&gt; SDK with MinIO Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.min.io&#34;&gt;The MinIO documentation website&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute to MinIO Project&lt;/h2&gt; &#xA;&lt;p&gt;Please follow MinIO &lt;a href=&#34;https://github.com/minio/minio/raw/master/CONTRIBUTING.md&#34;&gt;Contributor&#39;s Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MinIO source is licensed under the GNU AGPLv3 license that can be found in the &lt;a href=&#34;https://github.com/minio/minio/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;MinIO &lt;a href=&#34;https://github.com/minio/minio/tree/master/docs&#34;&gt;Documentation&lt;/a&gt; © 2021 by MinIO, Inc is licensed under &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minio/minio/raw/master/COMPLIANCE.md&#34;&gt;License Compliance&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>chen3feng/stl4go</title>
    <updated>2022-08-27T01:36:29Z</updated>
    <id>tag:github.com,2022-08-27:/chen3feng/stl4go</id>
    <link href="https://github.com/chen3feng/stl4go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generic Container and Algorithm Library for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;stl4go -- STL for Golang&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/chen3feng/stl4go/master/README_zh.md&#34;&gt;简体中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library contains generic containers and algorithms, it is designed to be STL for Golang.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chen3feng/stl4go/master/COPYING&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache_2.0-red.svg?sanitize=true&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://go.dev/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Language-go1.18+-blue.svg?sanitize=true&#34; alt=&#34;Golang&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/chen3feng/stl4go/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://coveralls.io/github/chen3feng/stl4go?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/chen3feng/stl4go/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/chen3feng/stl4go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/securego/gosec&#34; alt=&#34;GoReport&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/chen3feng/stl4go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/chen3feng/stl4go.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This library depends on go generics, which is introduced in 1.18+.&lt;/p&gt; &#xA;&lt;!-- gomarkdoc:embed:start --&gt; &#xA;&lt;!-- Code generated by gomarkdoc. DO NOT EDIT --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/chen3feng/stl4go&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Package stl4go is a generic container and algo rithm library for go.&lt;/p&gt; &#xA;&lt;h2&gt;Introduce&lt;/h2&gt; &#xA;&lt;p&gt;This library is a general container and algorithm library that attempts to learn from the C++ STL implementation after Go 1.18 began to support generics. (Personally I&#39;s totally unacceptable for me use to languages without generics, so I didn&#39;t try it until go 1.18).&lt;/p&gt; &#xA;&lt;p&gt;The code quality of this library is quite high and follows the latest best practices in the industry. Test coverage is close💯%, ✅，CI, and &lt;a href=&#34;https://securego.io/&#34;&gt;gosec&lt;/a&gt; check are both set up, got &lt;a href=&#34;https://goreportcard.com/report/github.com/chen3feng/stl4go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/securego/gosec&#34; alt=&#34;GoReport&#34;&gt;&lt;/a&gt; score。&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;As we all know, C++&#39;s STL includes containers, algorithms, and iterators relate the two.&lt;/p&gt; &#xA;&lt;p&gt;Due to language limitations, it is impossible and unnecessary to completely imitate the interface of C++ STL in Go, so C++ users may feel familiar, and sometimes (maybe) feel more convenient.&lt;/p&gt; &#xA;&lt;h3&gt;Containers&lt;/h3&gt; &#xA;&lt;p&gt;Currently implemented containers are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;BuiltinSet&lt;/code&gt; provided a set funtionality based on Go&#39;s own &lt;code&gt;map&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Vector&lt;/code&gt; is a thin encapsulation based on &lt;code&gt;slice&lt;/code&gt;. It provides functions such as insertion and deletion in the middle, range deletion, etc., and is still compatible with slices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;DList&lt;/code&gt; is a doubly linked list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://raw.githubusercontent.com/chen3feng/stl4go/master/skiplist.md&#34;&gt;SkipList&lt;/a&gt; is an ordered associative container that fills the gap where Go &lt;code&gt;map&lt;/code&gt; only supports unordered. This is currently the fastest skip list I tested in GitHub, see &lt;a href=&#34;https://github.com/chen3feng/skiplist-survey&#34;&gt;skiplist-survey&lt;/a&gt; for performance comparison&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Stack&lt;/code&gt;, is a FILO container based on Slice implementation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Queue&lt;/code&gt; is a bidirectional FIFO queue, implemented based on linked list.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Different containers support different methods. The following are the methods supported by all containers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IsEmpty() bool&lt;/code&gt; Returns whether the container is empty&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Len() int&lt;/code&gt; returns the number of elements in the container&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Clear()&lt;/code&gt; to clear the container&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Iterators&lt;/h3&gt; &#xA;&lt;p&gt;DList and SkipList support simple iterators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;l := stl4go.NewDListOf(Range(1, 10000)...)&#xA;sum := 0&#xA;for i := 0; i &amp;lt; b.N; i++ {&#xA;    for it := l.Iterate(); it.IsNotEnd(); it.MoveToNext() {&#xA;        sum += it.Value()&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;SkipList also supports range iteration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;sl := stl4go.NewSkipList[int, int]()&#xA;for i := 0; i &amp;lt; 1000; i++ {&#xA;    sl.Insert(i, 0)&#xA;}&#xA;it := sl.FindRange(120, 350)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Iterating over &lt;code&gt;it&lt;/code&gt; only yields the keys between 120 and 349.&lt;/p&gt; &#xA;&lt;p&gt;In many cases, it is more convenient to use the &lt;code&gt;ForEach&lt;/code&gt; and &lt;code&gt;ForEachIf&lt;/code&gt; methods provided by the container, and the performance is often better:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TestSkipList_ForEach(t *testing.T) {&#xA;    sl := newSkipListN(100)&#xA;    a := []int{}&#xA;    sl.ForEach(func(k int, v int) {&#xA;        a = append(a, k)&#xA;    })&#xA;    expectEq(t, len(a), 100)&#xA;    expectTrue(t, IsSorted(a))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;ForEachIf&lt;/code&gt; is used for scenarios that you want to end early during the iteration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func Test_DList_ForEachIf(t *testing.T) {&#xA;   l := NewDListOf(1, 2, 3)&#xA;   c := 0&#xA;   l.ForEachIf(func(n int) bool {&#xA;       c = n&#xA;       return n != 2&#xA;   })&#xA;   expectEq(t, c, 2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;ForEachMutable&lt;/code&gt; or &lt;code&gt;ForEachMutable&lt;/code&gt; to modify the value of an element during the iteration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TestSkipList_ForEachMutable(t *testing.T) {&#xA;    sl := newSkipListN(100)&#xA;    sl.ForEachMutable(func(k int, v *int) {&#xA;        *v = -*v&#xA;    })&#xA;    for i := 0; i &amp;lt; sl.Len(); i++ {&#xA;        expectEq(t, *sl.Find(i), -i)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Algorithms&lt;/h3&gt; &#xA;&lt;p&gt;Due to the limitations of language, most algorithms only support Slice. The functions name of the algorithms ends with &lt;code&gt;If&lt;/code&gt;, &lt;code&gt;Func&lt;/code&gt;, indicating that a custom comparison function can be passed.&lt;/p&gt; &#xA;&lt;h4&gt;Generate&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Range&lt;/code&gt; returns a Slice of contains integers in the range of &lt;code&gt;[begin, end)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Generate&lt;/code&gt; generates a sequence with the given function to fill the Slice&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compute&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Sum&lt;/code&gt; Sum&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SumAs&lt;/code&gt; sums and returns a result as another type (eg. use &lt;code&gt;int64&lt;/code&gt; to return the sum of &lt;code&gt;[]int32&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Average&lt;/code&gt; finds the average value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AverageAs&lt;/code&gt; averages and returns the result as another type (eg. use &lt;code&gt;float64&lt;/code&gt; to return the sum of &lt;code&gt;[]int&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Count&lt;/code&gt; returns the number equivalent to the specified value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CountIf&lt;/code&gt; returns the number of elements for which the specified function returns &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Compare&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Equal&lt;/code&gt; checks whether two sequences are equal&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Compare&lt;/code&gt; compares two sequences and returns &lt;code&gt;-1&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;1&lt;/code&gt; in lexicographical order, respectively indicating the relationship of 2 slices.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Lookup&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt; find the maximum and minimum&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MinN&lt;/code&gt;, &lt;code&gt;MaxN&lt;/code&gt;, &lt;code&gt;MinMax&lt;/code&gt; return the maximum and minimum values in the slice&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Find&lt;/code&gt; linearly finds the first specified value and returns its index&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FindIf&lt;/code&gt; linearly finds the first value that make specified function returns &lt;code&gt;true&lt;/code&gt; and returns its index&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AllOf&lt;/code&gt;, &lt;code&gt;AnyOf&lt;/code&gt;, &lt;code&gt;NoneOf&lt;/code&gt; return whether all, any, or none of the elements in the range can make the passed function return &lt;code&gt;true&lt;/code&gt; accordingly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Binary Search&lt;/h4&gt; &#xA;&lt;p&gt;See C++ STL.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;BinarySearch&lt;/li&gt; &#xA; &lt;li&gt;LowerBound&lt;/li&gt; &#xA; &lt;li&gt;UpperBound&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Sort&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Sort&lt;/code&gt; sorting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DescSort&lt;/code&gt; descending sorting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;StableSort&lt;/code&gt; stable sorting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DescStableSort&lt;/code&gt; descending stable sorting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IsSorted&lt;/code&gt; check whether the slice is sorted&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IsDescSorted&lt;/code&gt; check whether the slice is sorted in descending order&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Interface Design and Naming&lt;/h3&gt; &#xA;&lt;p&gt;The design leart much from the C++ STL. The &lt;code&gt;T&lt;/code&gt; here represents &lt;code&gt;template&lt;/code&gt;. Yes, Go&#39;s generic is not template. but who made C++ so influential and STL so famous?&lt;/p&gt; &#xA;&lt;p&gt;Many libraries are designed for small code repositories or split into multiple subpackages in one repository. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;github.com/someone/awesomelib/skiplist&#34;&#xA;    &#34;github.com/someone/awesomelib/binarysearch&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    sl := skiplist.New()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This way of writing seems elegant, but because everyone likes good names, import renaming has to be introduced in use in case of package name conflict, and different users have different renaming style, which increases the mental burden of code reading and writing.&lt;/p&gt; &#xA;&lt;p&gt;I don&#39;t like this style, especially in a larger repository.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, this library is all under the &lt;code&gt;stl4go&lt;/code&gt; package, and it is expected that it will not namesake in other people&#39;s libraries.&lt;/p&gt; &#xA;&lt;h3&gt;TODO&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/chen3feng/stl4go/issues&#34;&gt;Issue&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;And add more detailed documents.&lt;/p&gt; &#xA;&lt;h2&gt;Go Doc&lt;/h2&gt; &#xA;&lt;p&gt;Clock to view the &lt;a href=&#34;https://raw.githubusercontent.com/chen3feng/stl4go/master/generated_doc.md&#34;&gt;generated doc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Standard_Template_Library&#34;&gt;C++ STL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liyue201/gostl&#34;&gt;liyue201/gostl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zyedidia/generic&#34;&gt;zyedidia/generic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hlccd/goSTL&#34;&gt;hlccd/goSTL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>