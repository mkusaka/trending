<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-14T01:35:07Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mudler/LocalAGI</title>
    <updated>2025-08-14T01:35:07Z</updated>
    <id>tag:github.com,2025-08-14:/mudler/LocalAGI</id>
    <link href="https://github.com/mudler/LocalAGI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LocalAGI is a powerful, self-hostable AI Agent platform designed for maximum privacy and flexibility. A complete drop-in replacement for OpenAI&#39;s Responses APIs with advanced agentic capabilities. No clouds. No data leaks. Just pure local AI that works on consumer-grade hardware (CPU and GPU).&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/webui/react-ui/public/logo_1.png&#34; alt=&#34;LocalAGI Logo&#34; width=&#34;220&#34; /&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;em&gt;Your AI. Your Hardware. Your Rules&lt;/em&gt;&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/mudler/LocalAGI&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/mudler/LocalAGI&#34; alt=&#34;Go Report Card&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mudler/LocalAGI/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/mudler/LocalAGI&#34; alt=&#34;GitHub stars&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mudler/LocalAGI/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/mudler/LocalAGI&#34; alt=&#34;GitHub issues&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Try on &lt;a href=&#34;https://t.me/LocalAGI_bot&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-2CA5E0?style=for-the-badge&amp;amp;logo=telegram&amp;amp;logoColor=white&#34; alt=&#34;Telegram&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Create customizable AI assistants, automations, chat bots and agents that run 100% locally. No need for agentic Python libraries or cloud service keys, just bring your GPU (or even just CPU) and a web browser.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LocalAGI&lt;/strong&gt; is a powerful, self-hostable AI Agent platform that allows you to design AI automations without writing code. A complete drop-in replacement for OpenAI&#39;s Responses APIs with advanced agentic capabilities. No clouds. No data leaks. Just pure local AI that works on consumer-grade hardware (CPU and GPU).&lt;/p&gt; &#xA;&lt;h2&gt;üõ°Ô∏è Take Back Your Privacy&lt;/h2&gt; &#xA;&lt;p&gt;Are you tired of AI wrappers calling out to cloud APIs, risking your privacy? So were we.&lt;/p&gt; &#xA;&lt;p&gt;LocalAGI ensures your data stays exactly where you want it‚Äîon your hardware. No API keys, no cloud subscriptions, no compromise.&lt;/p&gt; &#xA;&lt;h2&gt;üåü Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üéõ &lt;strong&gt;No-Code Agents&lt;/strong&gt;: Easy-to-configure multiple agents via Web UI.&lt;/li&gt; &#xA; &lt;li&gt;üñ• &lt;strong&gt;Web-Based Interface&lt;/strong&gt;: Simple and intuitive agent management.&lt;/li&gt; &#xA; &lt;li&gt;ü§ñ &lt;strong&gt;Advanced Agent Teaming&lt;/strong&gt;: Instantly create cooperative agent teams from a single prompt.&lt;/li&gt; &#xA; &lt;li&gt;üì° &lt;strong&gt;Connectors&lt;/strong&gt;: Built-in integrations with Discord, Slack, Telegram, GitHub Issues, and IRC.&lt;/li&gt; &#xA; &lt;li&gt;üõ† &lt;strong&gt;Comprehensive REST API&lt;/strong&gt;: Seamless integration into your workflows. Every agent created will support OpenAI Responses API out of the box.&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;strong&gt;Short &amp;amp; Long-Term Memory&lt;/strong&gt;: Powered by &lt;a href=&#34;https://github.com/mudler/LocalRecall&#34;&gt;LocalRecall&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;üß† &lt;strong&gt;Planning &amp;amp; Reasoning&lt;/strong&gt;: Agents intelligently plan, reason, and adapt.&lt;/li&gt; &#xA; &lt;li&gt;üîÑ &lt;strong&gt;Periodic Tasks&lt;/strong&gt;: Schedule tasks with cron-like syntax.&lt;/li&gt; &#xA; &lt;li&gt;üíæ &lt;strong&gt;Memory Management&lt;/strong&gt;: Control memory usage with options for long-term and summary memory.&lt;/li&gt; &#xA; &lt;li&gt;üñº &lt;strong&gt;Multimodal Support&lt;/strong&gt;: Ready for vision, text, and more.&lt;/li&gt; &#xA; &lt;li&gt;üîß &lt;strong&gt;Extensible Custom Actions&lt;/strong&gt;: Easily script dynamic agent behaviors in Go (interpreted, no compilation!).&lt;/li&gt; &#xA; &lt;li&gt;üõ† &lt;strong&gt;Fully Customizable Models&lt;/strong&gt;: Use your own models or integrate seamlessly with &lt;a href=&#34;https://github.com/mudler/LocalAI&#34;&gt;LocalAI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;üìä &lt;strong&gt;Observability&lt;/strong&gt;: Monitor agent status and view detailed observable updates in real-time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Quickstart&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the repository&#xA;git clone https://github.com/mudler/LocalAGI&#xA;cd LocalAGI&#xA;&#xA;# CPU setup (default)&#xA;docker compose up&#xA;&#xA;# NVIDIA GPU setup&#xA;docker compose -f docker-compose.nvidia.yaml up&#xA;&#xA;# Intel GPU setup (for Intel Arc and integrated GPUs)&#xA;docker compose -f docker-compose.intel.yaml up&#xA;&#xA;# AMD GPU setup&#xA;docker compose -f docker-compose.amd.yaml up&#xA;&#xA;# Start with a specific model (see available models in models.localai.io, or localai.io to use any model in huggingface)&#xA;MODEL_NAME=gemma-3-12b-it docker compose up&#xA;&#xA;# NVIDIA GPU setup with custom multimodal and image models&#xA;MODEL_NAME=gemma-3-12b-it \&#xA;MULTIMODAL_MODEL=moondream2-20250414 \&#xA;IMAGE_MODEL=flux.1-dev-ggml \&#xA;docker compose -f docker-compose.nvidia.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can access and manage your agents at &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Still having issues? see this Youtube video: &lt;a href=&#34;https://youtu.be/HtVwIxW3ePg&#34;&gt;https://youtu.be/HtVwIxW3ePg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Videos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/HtVwIxW3ePg&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/HtVwIxW3ePg/mqdefault.jpg&#34; alt=&#34;Creating a basic agent&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://youtu.be/v82rswGJt_M&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/v82rswGJt_M/mqdefault.jpg&#34; alt=&#34;Agent Observability&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://youtu.be/d_we-AYksSw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/d_we-AYksSw/mqdefault.jpg&#34; alt=&#34;Filters and Triggers&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://youtu.be/2Xvx78i5oBs&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/2Xvx78i5oBs/mqdefault.jpg&#34; alt=&#34;RAG and Matrix&#34; /&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìöüÜï Local Stack Family&lt;/h2&gt; &#xA;&lt;p&gt;üÜï LocalAI is now part of a comprehensive suite of AI tools designed to work together:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;50%&#34; valign=&#34;top&#34;&gt; &lt;a href=&#34;https://github.com/mudler/LocalAI&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mudler/LocalAI/refs/heads/master/core/http/static/logo_horizontal.png&#34; width=&#34;300&#34; alt=&#34;LocalAI Logo&#34; /&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34; valign=&#34;top&#34;&gt; &lt;h3&gt;&lt;a href=&#34;https://github.com/mudler/LocalAI&#34;&gt;LocalAI&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;LocalAI is the free, Open Source OpenAI alternative. LocalAI act as a drop-in replacement REST API that&#39;s compatible with OpenAI API specifications for local AI inferencing. Does not require GPU.&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;50%&#34; valign=&#34;top&#34;&gt; &lt;a href=&#34;https://github.com/mudler/LocalRecall&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mudler/LocalRecall/refs/heads/main/static/localrecall_horizontal.png&#34; width=&#34;300&#34; alt=&#34;LocalRecall Logo&#34; /&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34; valign=&#34;top&#34;&gt; &lt;h3&gt;&lt;a href=&#34;https://github.com/mudler/LocalRecall&#34;&gt;LocalRecall&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;A REST-ful API and knowledge base management system that provides persistent memory and storage capabilities for AI agents.&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üñ•Ô∏è Hardware Configurations&lt;/h2&gt; &#xA;&lt;p&gt;LocalAGI supports multiple hardware configurations through Docker Compose profiles:&lt;/p&gt; &#xA;&lt;h3&gt;CPU (Default)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No special configuration needed&lt;/li&gt; &#xA; &lt;li&gt;Runs on any system with Docker&lt;/li&gt; &#xA; &lt;li&gt;Best for testing and development&lt;/li&gt; &#xA; &lt;li&gt;Supports text models only&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NVIDIA GPU&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires NVIDIA GPU and drivers&lt;/li&gt; &#xA; &lt;li&gt;Uses CUDA for acceleration&lt;/li&gt; &#xA; &lt;li&gt;Best for high-performance inference&lt;/li&gt; &#xA; &lt;li&gt;Supports text, multimodal, and image generation models&lt;/li&gt; &#xA; &lt;li&gt;Run with: &lt;code&gt;docker compose -f docker-compose.nvidia.yaml up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default models: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Text: &lt;code&gt;gemma-3-4b-it-qat&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Multimodal: &lt;code&gt;moondream2-20250414&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Image: &lt;code&gt;sd-1.5-ggml&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environment variables: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MODEL_NAME&lt;/code&gt;: Text model to use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MULTIMODAL_MODEL&lt;/code&gt;: Multimodal model to use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;IMAGE_MODEL&lt;/code&gt;: Image generation model to use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;LOCALAI_SINGLE_ACTIVE_BACKEND&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; to enable single active backend mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Intel GPU&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Intel Arc and integrated GPUs&lt;/li&gt; &#xA; &lt;li&gt;Uses SYCL for acceleration&lt;/li&gt; &#xA; &lt;li&gt;Best for Intel-based systems&lt;/li&gt; &#xA; &lt;li&gt;Supports text, multimodal, and image generation models&lt;/li&gt; &#xA; &lt;li&gt;Run with: &lt;code&gt;docker compose -f docker-compose.intel.yaml up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default models: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Text: &lt;code&gt;gemma-3-4b-it-qat&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Multimodal: &lt;code&gt;moondream2-20250414&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Image: &lt;code&gt;sd-1.5-ggml&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Environment variables: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;MODEL_NAME&lt;/code&gt;: Text model to use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MULTIMODAL_MODEL&lt;/code&gt;: Multimodal model to use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;IMAGE_MODEL&lt;/code&gt;: Image generation model to use&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;LOCALAI_SINGLE_ACTIVE_BACKEND&lt;/code&gt;: Set to &lt;code&gt;true&lt;/code&gt; to enable single active backend mode&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customize models&lt;/h2&gt; &#xA;&lt;p&gt;You can customize the models used by LocalAGI by setting environment variables when running docker-compose. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# CPU with custom model&#xA;MODEL_NAME=gemma-3-12b-it docker compose up&#xA;&#xA;# NVIDIA GPU with custom models&#xA;MODEL_NAME=gemma-3-12b-it \&#xA;MULTIMODAL_MODEL=moondream2-20250414 \&#xA;IMAGE_MODEL=flux.1-dev-ggml \&#xA;docker compose -f docker-compose.nvidia.yaml up&#xA;&#xA;# Intel GPU with custom models&#xA;MODEL_NAME=gemma-3-12b-it \&#xA;MULTIMODAL_MODEL=moondream2-20250414 \&#xA;IMAGE_MODEL=sd-1.5-ggml \&#xA;docker compose -f docker-compose.intel.yaml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If no models are specified, it will use the defaults:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Text model: &lt;code&gt;gemma-3-4b-it-qat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multimodal model: &lt;code&gt;moondream2-20250414&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Image model: &lt;code&gt;sd-1.5-ggml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Good (relatively small) models that have been tested are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;qwen_qwq-32b&lt;/code&gt; (best in co-ordinating agents)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gemma-3-12b-it&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gemma-3-27b-it&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üèÜ Why Choose LocalAGI?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;‚úì Ultimate Privacy&lt;/strong&gt;: No data ever leaves your hardware.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;‚úì Flexible Model Integration&lt;/strong&gt;: Supports GGUF, GGML, and more thanks to &lt;a href=&#34;https://github.com/mudler/LocalAI&#34;&gt;LocalAI&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;‚úì Developer-Friendly&lt;/strong&gt;: Rich APIs and intuitive interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;‚úì Effortless Setup&lt;/strong&gt;: Simple Docker compose setups and pre-built binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;‚úì Feature-Rich&lt;/strong&gt;: From planning to multimodal capabilities, connectors for Slack, MCP support, LocalAGI has it all.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üåü Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;Powerful Web UI&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/a40194f9-af3a-461f-8b39-5f4612fbf221&#34; alt=&#34;Web UI Dashboard&#34; /&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/fb3c3e2a-cd53-4ca8-97aa-c5da51ff1f83&#34; alt=&#34;Web UI Agent Settings&#34; /&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/102189a2-0fba-4a1e-b0cb-f99268ef8062&#34; alt=&#34;Web UI Create Group&#34; /&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/f7359048-9d28-4cf1-9151-1f5556ce9235&#34; alt=&#34;Web UI Agent Observability&#34; /&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Connectors Ready-to-Go&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/4171072f-e4bf-4485-982b-55d55086f8fc&#34; alt=&#34;Telegram&#34; width=&#34;60&#34; /&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/9235da84-0187-4f26-8482-32dcc55702ef&#34; alt=&#34;Discord&#34; width=&#34;220&#34; /&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/a88c3d88-a387-4fb5-b513-22bdd5da7413&#34; alt=&#34;Slack&#34; width=&#34;220&#34; /&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/d249cdf5-ab34-4ab1-afdf-b99e2db182d2&#34; alt=&#34;IRC&#34; width=&#34;220&#34; /&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/52c852b0-4b50-4926-9fa0-aa50613ac622&#34; alt=&#34;GitHub&#34; width=&#34;220&#34; /&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üìñ Full Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Explore detailed documentation including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#installation-options&#34;&gt;Installation Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#rest-api&#34;&gt;REST API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#connectors&#34;&gt;Connector Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#agent-configuration-reference&#34;&gt;Agent Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environment Configuration&lt;/h3&gt; &#xA;&lt;p&gt;LocalAGI supports environment configurations. Note that these environment variables needs to be specified in the localagi container in the docker-compose file to have effect.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;What It Does&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_MODEL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Your go-to model&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_MULTIMODAL_MODEL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional model for multimodal capabilities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_LLM_API_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenAI-compatible API server URL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_LLM_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;API authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Request timeout settings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_STATE_DIR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Where state gets stored&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_LOCALRAG_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;LocalRecall connection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_ENABLE_CONVERSATIONS_LOGGING&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle conversation logs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCALAGI_API_KEYS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A comma separated list of api keys used for authentication&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation Options&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-Built Binaries&lt;/h3&gt; &#xA;&lt;p&gt;Download ready-to-run binaries from the &lt;a href=&#34;https://github.com/mudler/LocalAGI/releases&#34;&gt;Releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;Source Build&lt;/h3&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.20+&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;Bun 1.2+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone repo&#xA;git clone https://github.com/mudler/LocalAGI.git&#xA;cd LocalAGI&#xA;&#xA;# Build it&#xA;cd webui/react-ui &amp;amp;&amp;amp; bun i &amp;amp;&amp;amp; bun run build&#xA;cd ../..&#xA;go build -o localagi&#xA;&#xA;# Run it&#xA;./localagi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using as a Library&lt;/h3&gt; &#xA;&lt;p&gt;LocalAGI can be used as a Go library to programmatically create and manage AI agents. Let&#39;s start with a simple example of creating a single agent:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Basic Usage: Single Agent&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;github.com/mudler/LocalAGI/core/agent&#34;&#xA;    &#34;github.com/mudler/LocalAGI/core/types&#34;&#xA;)&#xA;&#xA;// Create a new agent with basic configuration&#xA;agent, err := agent.New(&#xA;    agent.WithModel(&#34;gpt-4&#34;),&#xA;    agent.WithLLMAPIURL(&#34;http://localhost:8080&#34;),&#xA;    agent.WithLLMAPIKey(&#34;your-api-key&#34;),&#xA;    agent.WithSystemPrompt(&#34;You are a helpful assistant.&#34;),&#xA;    agent.WithCharacter(agent.Character{&#xA;        Name: &#34;my-agent&#34;,&#xA;    }),&#xA;    agent.WithActions(&#xA;        // Add your custom actions here&#xA;    ),&#xA;    agent.WithStateFile(&#34;./state/my-agent.state.json&#34;),&#xA;    agent.WithCharacterFile(&#34;./state/my-agent.character.json&#34;),&#xA;    agent.WithTimeout(&#34;10m&#34;),&#xA;    agent.EnableKnowledgeBase(),&#xA;    agent.EnableReasoning(),&#xA;)&#xA;&#xA;if err != nil {&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;// Start the agent&#xA;go func() {&#xA;    if err := agent.Run(); err != nil {&#xA;        log.Printf(&#34;Agent stopped: %v&#34;, err)&#xA;    }&#xA;}()&#xA;&#xA;// Stop the agent when done&#xA;agent.Stop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This basic example shows how to:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a single agent with essential configuration&lt;/li&gt; &#xA;  &lt;li&gt;Set up the agent&#39;s model and API connection&lt;/li&gt; &#xA;  &lt;li&gt;Configure basic features like knowledge base and reasoning&lt;/li&gt; &#xA;  &lt;li&gt;Start and stop the agent&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Advanced Usage: Agent Pools&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;For managing multiple agents, you can use the AgentPool system:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;github.com/mudler/LocalAGI/core/state&#34;&#xA;    &#34;github.com/mudler/LocalAGI/core/types&#34;&#xA;)&#xA;&#xA;// Create a new agent pool&#xA;pool, err := state.NewAgentPool(&#xA;    &#34;default-model&#34;,           // default model name&#xA;    &#34;default-multimodal-model&#34;, // default multimodal model&#xA;    &#34;image-model&#34;,            // image generation model&#xA;    &#34;http://localhost:8080&#34;,  // API URL&#xA;    &#34;your-api-key&#34;,          // API key&#xA;    &#34;./state&#34;,               // state directory&#xA;    &#34;&#34;,                      // MCP box URL (optional)&#xA;    &#34;http://localhost:8081&#34;, // LocalRAG API URL&#xA;    func(config *AgentConfig) func(ctx context.Context, pool *AgentPool) []types.Action {&#xA;        // Define available actions for agents&#xA;        return func(ctx context.Context, pool *AgentPool) []types.Action {&#xA;            return []types.Action{&#xA;                // Add your custom actions here&#xA;            }&#xA;        }&#xA;    },&#xA;    func(config *AgentConfig) []Connector {&#xA;        // Define connectors for agents&#xA;        return []Connector{&#xA;            // Add your custom connectors here&#xA;        }&#xA;    },&#xA;    func(config *AgentConfig) []DynamicPrompt {&#xA;        // Define dynamic prompts for agents&#xA;        return []DynamicPrompt{&#xA;            // Add your custom prompts here&#xA;        }&#xA;    },&#xA;    func(config *AgentConfig) types.JobFilters {&#xA;        // Define job filters for agents&#xA;        return types.JobFilters{&#xA;            // Add your custom filters here&#xA;        }&#xA;    },&#xA;    &#34;10m&#34;, // timeout&#xA;    true,  // enable conversation logs&#xA;)&#xA;&#xA;// Create a new agent in the pool&#xA;agentConfig := &amp;amp;AgentConfig{&#xA;    Name: &#34;my-agent&#34;,&#xA;    Model: &#34;gpt-4&#34;,&#xA;    SystemPrompt: &#34;You are a helpful assistant.&#34;,&#xA;    EnableKnowledgeBase: true,&#xA;    EnableReasoning: true,&#xA;    // Add more configuration options as needed&#xA;}&#xA;&#xA;err = pool.CreateAgent(&#34;my-agent&#34;, agentConfig)&#xA;&#xA;// Start all agents&#xA;err = pool.StartAll()&#xA;&#xA;// Get agent status&#xA;status := pool.GetStatusHistory(&#34;my-agent&#34;)&#xA;&#xA;// Stop an agent&#xA;pool.Stop(&#34;my-agent&#34;)&#xA;&#xA;// Remove an agent&#xA;err = pool.Remove(&#34;my-agent&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Available Features&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Key features available through the library:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Single Agent Management&lt;/strong&gt;: Create and manage individual agents with basic configuration&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Agent Pool Management&lt;/strong&gt;: Create, start, stop, and remove multiple agents&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Configuration&lt;/strong&gt;: Customize agent behavior through AgentConfig&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;: Define custom actions for agents to perform&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Connectors&lt;/strong&gt;: Add custom connectors for external services&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Dynamic Prompts&lt;/strong&gt;: Create dynamic prompt templates&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Job Filters&lt;/strong&gt;: Implement custom job filtering logic&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Status Tracking&lt;/strong&gt;: Monitor agent status and history&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;State Persistence&lt;/strong&gt;: Automatic state saving and loading&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;For more details about available configuration options and features, refer to the &lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#agent-configuration-reference&#34;&gt;Agent Configuration Reference&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üîß Extending LocalAGI&lt;/h2&gt; &#xA;&lt;p&gt;LocalAGI provides two powerful ways to extend its functionality with custom actions:&lt;/p&gt; &#xA;&lt;h3&gt;1. Custom Actions (Go Code)&lt;/h3&gt; &#xA;&lt;p&gt;LocalAGI supports custom actions written in Go that can be defined inline when creating an agent. These actions are interpreted at runtime, so no compilation is required.&lt;/p&gt; &#xA;&lt;h4&gt;How Custom Actions Work&lt;/h4&gt; &#xA;&lt;p&gt;When creating a new Agent, in the action sections select the &#34;custom&#34; action, you can add the Golang code directly there.&lt;/p&gt; &#xA;&lt;p&gt;Custom actions in LocalAGI require three main functions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Run(config map[string]interface{}) (string, map[string]interface{}, error)&lt;/code&gt;&lt;/strong&gt; - The main execution function&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;Definition() map[string][]string&lt;/code&gt;&lt;/strong&gt; - Defines the action&#39;s parameters and their types&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;RequiredFields() []string&lt;/code&gt;&lt;/strong&gt; - Specifies which parameters are required&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: You can&#39;t use additional modules, but just use libraries that are included in Go.&lt;/p&gt; &#xA;&lt;h4&gt;Example: Weather Information Action&lt;/h4&gt; &#xA;&lt;p&gt;Here&#39;s a practical example of a custom action that fetches weather information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;encoding/json&#34;&#xA;    &#34;fmt&#34;&#xA;    &#34;net/http&#34;&#xA;    &#34;io&#34;&#xA;)&#xA;&#xA;type WeatherParams struct {&#xA;    City    string `json:&#34;city&#34;`&#xA;    Country string `json:&#34;country&#34;`&#xA;}&#xA;&#xA;type WeatherResponse struct {&#xA;    Main struct {&#xA;        Temp     float64 `json:&#34;temp&#34;`&#xA;        Humidity int     `json:&#34;humidity&#34;`&#xA;    } `json:&#34;main&#34;`&#xA;    Weather []struct {&#xA;        Description string `json:&#34;description&#34;`&#xA;    } `json:&#34;weather&#34;`&#xA;}&#xA;&#xA;func Run(config map[string]interface{}) (string, map[string]interface{}, error) {&#xA;    // Parse parameters&#xA;    p := WeatherParams{}&#xA;    b, err := json.Marshal(config)&#xA;    if err != nil {&#xA;        return &#34;&#34;, map[string]interface{}{}, err&#xA;    }&#xA;    if err := json.Unmarshal(b, &amp;amp;p); err != nil {&#xA;        return &#34;&#34;, map[string]interface{}{}, err&#xA;    }&#xA;&#xA;    // Make API call to weather service&#xA;    url := fmt.Sprintf(&#34;http://api.openweathermap.org/data/2.5/weather?q=%s,%s&amp;amp;appid=YOUR_API_KEY&amp;amp;units=metric&#34;, p.City, p.Country)&#xA;    resp, err := http.Get(url)&#xA;    if err != nil {&#xA;        return &#34;&#34;, map[string]interface{}{}, err&#xA;    }&#xA;    defer resp.Body.Close()&#xA;&#xA;    body, err := io.ReadAll(resp.Body)&#xA;    if err != nil {&#xA;        return &#34;&#34;, map[string]interface{}{}, err&#xA;    }&#xA;&#xA;    var weather WeatherResponse&#xA;    if err := json.Unmarshal(body, &amp;amp;weather); err != nil {&#xA;        return &#34;&#34;, map[string]interface{}{}, err&#xA;    }&#xA;&#xA;    // Format response&#xA;    result := fmt.Sprintf(&#34;Weather in %s, %s: %.1f¬∞C, %s, Humidity: %d%%&#34;, &#xA;        p.City, p.Country, weather.Main.Temp, weather.Weather[0].Description, weather.Main.Humidity)&#xA;&#xA;    return result, map[string]interface{}{}, nil&#xA;}&#xA;&#xA;func Definition() map[string][]string {&#xA;    return map[string][]string{&#xA;        &#34;city&#34;: []string{&#xA;            &#34;string&#34;,&#xA;            &#34;The city name to get weather for&#34;,&#xA;        },&#xA;        &#34;country&#34;: []string{&#xA;            &#34;string&#34;, &#xA;            &#34;The country code (e.g., US, UK, DE)&#34;,&#xA;        },&#xA;    }&#xA;}&#xA;&#xA;func RequiredFields() []string {&#xA;    return []string{&#34;city&#34;, &#34;country&#34;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Example: File System Action&lt;/h4&gt; &#xA;&lt;p&gt;Here&#39;s another example that demonstrates file system operations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;encoding/json&#34;&#xA;    &#34;fmt&#34;&#xA;    &#34;os&#34;&#xA;    &#34;path/filepath&#34;&#xA;)&#xA;&#xA;type FileParams struct {&#xA;    Path    string `json:&#34;path&#34;`&#xA;    Action  string `json:&#34;action&#34;`&#xA;    Content string `json:&#34;content,omitempty&#34;`&#xA;}&#xA;&#xA;func Run(config map[string]interface{}) (string, map[string]interface{}, error) {&#xA;    p := FileParams{}&#xA;    b, err := json.Marshal(config)&#xA;    if err != nil {&#xA;        return &#34;&#34;, map[string]interface{}{}, err&#xA;    }&#xA;    if err := json.Unmarshal(b, &amp;amp;p); err != nil {&#xA;        return &#34;&#34;, map[string]interface{}{}, err&#xA;    }&#xA;&#xA;    switch p.Action {&#xA;    case &#34;read&#34;:&#xA;        content, err := os.ReadFile(p.Path)&#xA;        if err != nil {&#xA;            return &#34;&#34;, map[string]interface{}{}, err&#xA;        }&#xA;        return string(content), map[string]interface{}{}, nil&#xA;        &#xA;    case &#34;write&#34;:&#xA;        err := os.WriteFile(p.Path, []byte(p.Content), 0644)&#xA;        if err != nil {&#xA;            return &#34;&#34;, map[string]interface{}{}, err&#xA;        }&#xA;        return fmt.Sprintf(&#34;Successfully wrote to %s&#34;, p.Path), map[string]interface{}{}, nil&#xA;        &#xA;    case &#34;list&#34;:&#xA;        files, err := os.ReadDir(p.Path)&#xA;        if err != nil {&#xA;            return &#34;&#34;, map[string]interface{}{}, err&#xA;        }&#xA;        &#xA;        var fileList []string&#xA;        for _, file := range files {&#xA;            fileList = append(fileList, file.Name())&#xA;        }&#xA;        &#xA;        result, _ := json.Marshal(fileList)&#xA;        return string(result), map[string]interface{}{}, nil&#xA;        &#xA;    default:&#xA;        return &#34;&#34;, map[string]interface{}{}, fmt.Errorf(&#34;unknown action: %s&#34;, p.Action)&#xA;    }&#xA;}&#xA;&#xA;func Definition() map[string][]string {&#xA;    return map[string][]string{&#xA;        &#34;path&#34;: []string{&#xA;            &#34;string&#34;,&#xA;            &#34;The file or directory path&#34;,&#xA;        },&#xA;        &#34;action&#34;: []string{&#xA;            &#34;string&#34;,&#xA;            &#34;The action to perform: read, write, or list&#34;,&#xA;        },&#xA;        &#34;content&#34;: []string{&#xA;            &#34;string&#34;,&#xA;            &#34;Content to write (required for write action)&#34;,&#xA;        },&#xA;    }&#xA;}&#xA;&#xA;func RequiredFields() []string {&#xA;    return []string{&#34;path&#34;, &#34;action&#34;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Custom Actions in Agents&lt;/h4&gt; &#xA;&lt;p&gt;To use custom actions, add them to your agent configuration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Via Web UI&lt;/strong&gt;: In the agent creation form, add a &#34;Custom&#34; action and paste your Go code&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Via API&lt;/strong&gt;: Include the custom action in your agent configuration JSON&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Via Library&lt;/strong&gt;: Add the custom action to your agent&#39;s actions list&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;2. MCP (Model Context Protocol) Servers&lt;/h3&gt; &#xA;&lt;p&gt;LocalAGI supports both local and remote MCP servers, allowing you to extend functionality with external tools and services.&lt;/p&gt; &#xA;&lt;h4&gt;What is MCP?&lt;/h4&gt; &#xA;&lt;p&gt;The Model Context Protocol (MCP) is a standard for connecting AI applications to external data sources and tools. LocalAGI can connect to any MCP-compliant server to access additional capabilities.&lt;/p&gt; &#xA;&lt;h4&gt;Local MCP Servers&lt;/h4&gt; &#xA;&lt;p&gt;Local MCP servers run as processes that LocalAGI can spawn and communicate with via STDIO.&lt;/p&gt; &#xA;&lt;h5&gt;Example: GitHub MCP Server&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;github&#34;: {&#xA;      &#34;command&#34;: &#34;docker&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;run&#34;,&#xA;        &#34;-i&#34;,&#xA;        &#34;--rm&#34;,&#xA;        &#34;-e&#34;,&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;,&#xA;        &#34;ghcr.io/github/github-mcp-server&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;GITHUB_PERSONAL_ACCESS_TOKEN&#34;: &#34;&amp;lt;YOUR_TOKEN&amp;gt;&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Remote MCP Servers&lt;/h4&gt; &#xA;&lt;p&gt;Remote MCP servers are HTTP-based and can be accessed over the network.&lt;/p&gt; &#xA;&lt;h4&gt;Creating Your Own MCP Server&lt;/h4&gt; &#xA;&lt;p&gt;You can create MCP servers in any language that supports the MCP protocol and add the URLs of the servers to LocalAGI.&lt;/p&gt; &#xA;&lt;h4&gt;Configuring MCP Servers in LocalAGI&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Via Web UI&lt;/strong&gt;: In the MCP Settings section of agent creation, add MCP servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Via API&lt;/strong&gt;: Include MCP server configuration in your agent config&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Best Practices&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Always validate inputs and use proper authentication for remote MCP servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;: Implement robust error handling in your MCP servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: Provide clear descriptions for all tools exposed by your MCP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt;: Test your MCP servers independently before integrating with LocalAGI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resource Management&lt;/strong&gt;: Ensure your MCP servers properly clean up resources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;The development workflow is similar to the source build, but with additional steps for hot reloading of the frontend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone repo&#xA;git clone https://github.com/mudler/LocalAGI.git&#xA;cd LocalAGI&#xA;&#xA;# Install dependencies and start frontend development server&#xA;cd webui/react-ui &amp;amp;&amp;amp; bun i &amp;amp;&amp;amp; bun run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then in separate terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start development server&#xA;cd ../.. &amp;amp;&amp;amp; go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: see webui/react-ui/.vite.config.js for env vars that can be used to configure the backend URL&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;CONNECTORS&lt;/h2&gt; &#xA;&lt;p&gt;Link your agents to the services you already use. Configuration examples below.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;GitHub Issues&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;token&#34;: &#34;YOUR_PAT_TOKEN&#34;,&#xA;  &#34;repository&#34;: &#34;repo-to-monitor&#34;,&#xA;  &#34;owner&#34;: &#34;repo-owner&#34;,&#xA;  &#34;botUserName&#34;: &#34;bot-username&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Discord&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;After &lt;a href=&#34;https://discordpy.readthedocs.io/en/stable/discord.html&#34;&gt;creating your Discord bot&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;token&#34;: &#34;Bot YOUR_DISCORD_TOKEN&#34;,&#xA;  &#34;defaultChannel&#34;: &#34;OPTIONAL_CHANNEL_ID&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Don&#39;t forget to enable &#34;Message Content Intent&#34; in Bot(tab) settings! Enable &#34; Message Content Intent &#34; in the Bot tab!&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Slack&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Use the included &lt;code&gt;slack.yaml&lt;/code&gt; manifest to create your app, then configure:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;botToken&#34;: &#34;xoxb-your-bot-token&#34;,&#xA;  &#34;appToken&#34;: &#34;xapp-your-app-token&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create Oauth token bot token from &#34;OAuth &amp;amp; Permissions&#34; -&amp;gt; &#34;OAuth Tokens for Your Workspace&#34;&lt;/li&gt; &#xA;  &lt;li&gt;Create App level token (from &#34;Basic Information&#34; -&amp;gt; &#34;App-Level Tokens&#34; ( scope connections:writeRoute authorizations:read ))&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Telegram&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Get a token from @botfather, then:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#xA;  &#34;token&#34;: &#34;your-bot-father-token&#34;,&#xA;  &#34;group_mode&#34;: &#34;true&#34;,&#xA;  &#34;mention_only&#34;: &#34;true&#34;,&#xA;  &#34;admins&#34;: &#34;username1,username2&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Configuration options:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;token&lt;/code&gt;: Your bot token from BotFather&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;group_mode&lt;/code&gt;: Enable/disable group chat functionality&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mention_only&lt;/code&gt;: When enabled, bot only responds when mentioned in groups&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;admins&lt;/code&gt;: Comma-separated list of Telegram usernames allowed to use the bot in private chats&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;channel_id&lt;/code&gt;: Optional channel ID for the bot to send messages to&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: For group functionality to work properly:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Go to @BotFather&lt;/li&gt; &#xA;   &lt;li&gt;Select your bot&lt;/li&gt; &#xA;   &lt;li&gt;Go to &#34;Bot Settings&#34; &amp;gt; &#34;Group Privacy&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Select &#34;Turn off&#34; to allow the bot to read all messages in groups&lt;/li&gt; &#xA;   &lt;li&gt;Restart your bot after changing this setting&lt;/li&gt; &#xA;  &lt;/ol&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;IRC&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Connect to IRC networks:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;server&#34;: &#34;irc.example.com&#34;,&#xA;  &#34;port&#34;: &#34;6667&#34;,&#xA;  &#34;nickname&#34;: &#34;LocalAGIBot&#34;,&#xA;  &#34;channel&#34;: &#34;#yourchannel&#34;,&#xA;  &#34;alwaysReply&#34;: &#34;false&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Email&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;smtpServer&#34;: &#34;smtp.gmail.com:587&#34;,&#xA;  &#34;imapServer&#34;: &#34;imap.gmail.com:993&#34;,&#xA;  &#34;smtpInsecure&#34;: &#34;false&#34;,&#xA;  &#34;imapInsecure&#34;: &#34;false&#34;,&#xA;  &#34;username&#34;: &#34;user@gmail.com&#34;,&#xA;  &#34;email&#34;: &#34;user@gmail.com&#34;,&#xA;  &#34;password&#34;: &#34;correct-horse-battery-staple&#34;,&#xA;  &#34;name&#34;: &#34;LogalAGI Agent&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;REST API&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Agent Management&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Endpoint&lt;/th&gt; &#xA;    &lt;th&gt;Method&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agents&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;GET&lt;/td&gt; &#xA;    &lt;td&gt;List all available agents&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#get-all-agents&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/:name/status&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;GET&lt;/td&gt; &#xA;    &lt;td&gt;View agent status history&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#get-agent-status&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/create&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;POST&lt;/td&gt; &#xA;    &lt;td&gt;Create a new agent&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#create-agent&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/:name&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;DELETE&lt;/td&gt; &#xA;    &lt;td&gt;Remove an agent&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#delete-agent&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/:name/pause&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PUT&lt;/td&gt; &#xA;    &lt;td&gt;Pause agent activities&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#pause-agent&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/:name/start&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PUT&lt;/td&gt; &#xA;    &lt;td&gt;Resume a paused agent&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#start-agent&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/:name/config&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;GET&lt;/td&gt; &#xA;    &lt;td&gt;Get agent configuration&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/:name/config&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PUT&lt;/td&gt; &#xA;    &lt;td&gt;Update agent configuration&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/meta/agent/config&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;GET&lt;/td&gt; &#xA;    &lt;td&gt;Get agent configuration metadata&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/settings/export/:name&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;GET&lt;/td&gt; &#xA;    &lt;td&gt;Export agent config&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#export-agent&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/settings/import&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;POST&lt;/td&gt; &#xA;    &lt;td&gt;Import agent config&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#import-agent&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Actions and Groups&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Endpoint&lt;/th&gt; &#xA;    &lt;th&gt;Method&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/actions&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;GET&lt;/td&gt; &#xA;    &lt;td&gt;List available actions&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/action/:name/run&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;POST&lt;/td&gt; &#xA;    &lt;td&gt;Execute an action&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/group/generateProfiles&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;POST&lt;/td&gt; &#xA;    &lt;td&gt;Generate group profiles&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/agent/group/create&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;POST&lt;/td&gt; &#xA;    &lt;td&gt;Create a new agent group&lt;/td&gt; &#xA;    &lt;td&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Chat Interactions&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Endpoint&lt;/th&gt; &#xA;    &lt;th&gt;Method&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;    &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/chat/:name&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;POST&lt;/td&gt; &#xA;    &lt;td&gt;Send message &amp;amp; get response&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#send-message&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/notify/:name&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;POST&lt;/td&gt; &#xA;    &lt;td&gt;Send notification to agent&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#notify-agent&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/api/sse/:name&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;GET&lt;/td&gt; &#xA;    &lt;td&gt;Real-time agent event stream&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/#agent-sse-stream&#34;&gt;Example&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;/v1/responses&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;POST&lt;/td&gt; &#xA;    &lt;td&gt;Send message &amp;amp; get response&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://platform.openai.com/docs/api-reference/responses/create&#34;&gt;OpenAI&#39;s Responses&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Curl Examples&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;h4&gt;Get All Agents&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET &#34;http://localhost:3000/api/agents&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Get Agent Status&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET &#34;http://localhost:3000/api/agent/my-agent/status&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Create Agent&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST &#34;http://localhost:3000/api/agent/create&#34; \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;    &#34;name&#34;: &#34;my-agent&#34;,&#xA;    &#34;model&#34;: &#34;gpt-4&#34;,&#xA;    &#34;system_prompt&#34;: &#34;You are an AI assistant.&#34;,&#xA;    &#34;enable_kb&#34;: true,&#xA;    &#34;enable_reasoning&#34;: true&#xA;  }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Delete Agent&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X DELETE &#34;http://localhost:3000/api/agent/my-agent&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Pause Agent&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X PUT &#34;http://localhost:3000/api/agent/my-agent/pause&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Start Agent&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X PUT &#34;http://localhost:3000/api/agent/my-agent/start&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Get Agent Configuration&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET &#34;http://localhost:3000/api/agent/my-agent/config&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Update Agent Configuration&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X PUT &#34;http://localhost:3000/api/agent/my-agent/config&#34; \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#xA;    &#34;model&#34;: &#34;gpt-4&#34;,&#xA;    &#34;system_prompt&#34;: &#34;You are an AI assistant.&#34;&#xA;  }&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Export Agent&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET &#34;http://localhost:3000/settings/export/my-agent&#34; --output my-agent.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Import Agent&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST &#34;http://localhost:3000/settings/import&#34; \&#xA;  -F &#34;file=@/path/to/my-agent.json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Send Message&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST &#34;http://localhost:3000/api/chat/my-agent&#34; \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;message&#34;: &#34;Hello, how are you today?&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Notify Agent&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST &#34;http://localhost:3000/api/notify/my-agent&#34; \&#xA;  -H &#34;Content-Type: application/json&#34; \&#xA;  -d &#39;{&#34;message&#34;: &#34;Important notification&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;h4&gt;Agent SSE Stream&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -N -X GET &#34;http://localhost:3000/api/sse/my-agent&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Note: For proper SSE handling, you should use a client that supports SSE natively.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Agent Configuration Reference&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Configuration Structure&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;The agent configuration defines how an agent behaves and what capabilities it has. You can view the available configuration options and their descriptions by using the metadata endpoint:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X GET &#34;http://localhost:3000/api/meta/agent/config&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;This will return a JSON object containing all available configuration fields, their types, and descriptions.&lt;/p&gt; &#xA; &lt;p&gt;Here&#39;s an example of the agent configuration structure:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;my-agent&#34;,&#xA;  &#34;model&#34;: &#34;gpt-4&#34;,&#xA;  &#34;multimodal_model&#34;: &#34;gpt-4-vision&#34;,&#xA;  &#34;hud&#34;: true,&#xA;  &#34;standalone_job&#34;: false,&#xA;  &#34;random_identity&#34;: false,&#xA;  &#34;initiate_conversations&#34;: true,&#xA;  &#34;enable_planning&#34;: true,&#xA;  &#34;identity_guidance&#34;: &#34;You are a helpful assistant.&#34;,&#xA;  &#34;periodic_runs&#34;: &#34;0 * * * *&#34;,&#xA;  &#34;permanent_goal&#34;: &#34;Help users with their questions.&#34;,&#xA;  &#34;enable_kb&#34;: true,&#xA;  &#34;enable_reasoning&#34;: true,&#xA;  &#34;kb_results&#34;: 5,&#xA;  &#34;can_stop_itself&#34;: false,&#xA;  &#34;system_prompt&#34;: &#34;You are an AI assistant.&#34;,&#xA;  &#34;long_term_memory&#34;: true,&#xA;  &#34;summary_long_term_memory&#34;: false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Environment Configuration&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;LocalAGI supports environment configurations. Note that these environment variables needs to be specified in the localagi container in the docker-compose file to have effect.&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Variable&lt;/th&gt; &#xA;    &lt;th&gt;What It Does&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_MODEL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Your go-to model&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_MULTIMODAL_MODEL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Optional model for multimodal capabilities&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_LLM_API_URL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;OpenAI-compatible API server URL&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_LLM_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;API authentication&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_TIMEOUT&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Request timeout settings&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_STATE_DIR&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Where state gets stored&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_LOCALRAG_URL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;LocalRecall connection&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_SSHBOX_URL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;LocalAGI SSHBox URL, e.g. user:pass@ip:port&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_MCPBOX_URL&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;LocalAGI MCPBox URL, e.g. &lt;a href=&#34;http://mcpbox:8080&#34;&gt;http://mcpbox:8080&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_ENABLE_CONVERSATIONS_LOGGING&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Toggle conversation logs&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;LOCALAGI_API_KEYS&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;A comma separated list of api keys used for authentication&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;MIT License ‚Äî See the &lt;a href=&#34;https://raw.githubusercontent.com/mudler/LocalAGI/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;hr /&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;LOCAL PROCESSING. GLOBAL THINKING.&lt;/strong&gt;&lt;br /&gt; Made with ‚ù§Ô∏è by &lt;a href=&#34;https://github.com/mudler&#34;&gt;mudler&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
</feed>