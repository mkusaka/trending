<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-15T01:30:27Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>multiversx/mx-chain-go</title>
    <updated>2024-06-15T01:30:27Z</updated>
    <id>tag:github.com,2024-06-15:/multiversx/mx-chain-go</id>
    <link href="https://github.com/multiversx/mx-chain-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;⚡ The official implementation of the MultiversX blockchain protocol, written in golang.&lt;/p&gt;&lt;hr&gt;&lt;div style=&#34;text-align:center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/multiversx/mx-chain-go/master/multiversx-logo.svg?sanitize=true&#34; alt=&#34;MultiversX&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://multiversx.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/made%20by-MultiversX-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://explorer.multiversx.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/project-MultiversX%20Mainnet-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/multiversx/mx-chain-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/multiversx/mx-chain-go&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/multiversx/mx-chain-go&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/multiversx/mx-chain-go/branch/master/graph/badge.svg?token=MYS5EDASOJ&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/multiversx/mx-chain-go/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/multiversx/mx-chain-go&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mx-chain-go&lt;/h1&gt; &#xA;&lt;p&gt;The go implementation for the MultiversX protocol&lt;/p&gt; &#xA;&lt;h2&gt;Installation and running&lt;/h2&gt; &#xA;&lt;p&gt;In order to join the network as an observer or as a validator, the required steps to &lt;strong&gt;build from source and setup explicitly&lt;/strong&gt; are explained below.&lt;/p&gt; &#xA;&lt;h3&gt;Step 1: install &amp;amp; configure go:&lt;/h3&gt; &#xA;&lt;p&gt;The installation of go should proceed as shown in official golang installation guide &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;https://golang.org/doc/install&lt;/a&gt; . In order to run the node, minimum golang version should be 1.17.6.&lt;/p&gt; &#xA;&lt;h3&gt;Step 2: clone the repository and build the binaries:&lt;/h3&gt; &#xA;&lt;p&gt;The main branch that will be used is the master branch. Alternatively, an older release tag can be used.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# set $GOPATH if not set and export to ~/.profile along with Go binary path&#xA;$ if [[ $GOPATH==&#34;&#34; ]]; then GOPATH=&#34;$HOME/go&#34; fi&#xA;$ mkdir -p $GOPATH/src/github.com/multiversx&#xA;$ cd $GOPATH/src/github.com/multiversx&#xA;$ git clone https://github.com/multiversx/mx-chain-go&#xA;$ cd mx-chain-go &amp;amp;&amp;amp; git checkout master&#xA;$ cd cmd/node &amp;amp;&amp;amp; go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The node depends on the Wasm Virtual Machine, which is automatically managed by the node.&lt;/p&gt; &#xA;&lt;h3&gt;Step 3: creating the node’s identity:&lt;/h3&gt; &#xA;&lt;p&gt;In order to be registered in the MultiversX Network, a node must possess 2 types of (secret key, public key) pairs. One is used to identify the node’s credential used to generate transactions (having the sender field its account address) and the other is used in the process of the block signing. Please note that this is a preliminary mechanism, in the next releases the first (private, public key) pair will be dropped when the staking mechanism will be fully implemented. To build and run the keygenerator, the following commands will need to be run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd $GOPATH/src/github.com/multiversx/mx-chain-go/cmd/keygenerator&#xA;$ go build&#xA;$ ./keygenerator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Start the node&lt;/h3&gt; &#xA;&lt;h4&gt;Step 4a: Join MultiversX testnet:&lt;/h4&gt; &#xA;&lt;p&gt;Follow the steps outlined &lt;a href=&#34;https://docs.multiversx.com/validators/nodes-scripts/config-scripts/&#34;&gt;here&lt;/a&gt;. This is because in order to join the testnet you need a specific node configuration.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;OR&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Step 4b: copying credentials and starting a node in a separate network:&lt;/h4&gt; &#xA;&lt;p&gt;The previous generated .pem file needs to be copied in the same directory where the node binary resides in order to start the node.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$  cp validatorKey.pem ./../node/config/&#xA;$  cd ../node &amp;amp;&amp;amp; ./node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The node binary has some flags defined (for a brief description, the user can use --help flag). Those flags can be used to directly alter the configuration values defined in .toml/.json files and can be used when launching more than one instance of the binary.&lt;/p&gt; &#xA;&lt;h3&gt;Running the tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go test ./...&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling new fields in .proto files (should be updated when required PR will be merged in gogo protobuf master branch):&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download protoc compiler: &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/releases&#34;&gt;https://github.com/protocolbuffers/protobuf/releases&lt;/a&gt; (if you are running under linux on a x64 you might want to download protoc-3.11.4-linux-x86_64.zip)&lt;/li&gt; &#xA; &lt;li&gt;Expand archive, copy the /include/google folder in /usr/include using &lt;br&gt; &lt;code&gt;sudo cp -r google /usr/include&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy bin/protoc using &lt;br&gt; &lt;code&gt;sudo cp protoc /usr/bin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fetch the repo github.com/multiversx/protobuf&lt;/li&gt; &#xA; &lt;li&gt;Compile gogo slick &amp;amp; copy binary using&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd protoc-gen-gogoslick&#xA;go build&#xA;sudo cp protoc-gen-gogoslick /usr/bin/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Done&lt;/p&gt; &#xA;&lt;h2&gt;Running p2p Prometheus dashboards&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the node with &lt;code&gt;--p2p-prometheus-metrics&lt;/code&gt; flag. This exposes a metrics collection at &lt;a href=&#34;http://localhost:8080/debug/metrics/prometheus&#34;&gt;http://localhost:8080/debug/metrics/prometheus&lt;/a&gt; (port defined by -rest-api-interface flag, default 8080)&lt;/li&gt; &#xA; &lt;li&gt;Clone libp2p repository: &lt;code&gt;git clone https://github.com/libp2p/go-libp2p&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd go-libp2p/dasboards/swarm&lt;/code&gt; and under the&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;templating&#34;: {&#xA;   &#34;list&#34;: [&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;section, add the following lines:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;hide&#34;: 0,&#xA;  &#34;label&#34;: &#34;datasource&#34;,&#xA;  &#34;name&#34;: &#34;DS_PROMETHEUS&#34;,&#xA;  &#34;options&#34;: [],&#xA;  &#34;query&#34;: &#34;prometheus&#34;,&#xA;  &#34;refresh&#34;: 1,&#xA;  &#34;regex&#34;: &#34;&#34;,&#xA;  &#34;type&#34;: &#34;datasource&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(this step will be removed once it will be fixed on libp2p) 4. &lt;code&gt;cd ..&lt;/code&gt; to dashboards directory and update the port of &lt;code&gt;host.docker.internal&lt;/code&gt; from &lt;code&gt;prometheus.yml&lt;/code&gt; to node&#39;s Rest API port(default &lt;code&gt;8080&lt;/code&gt;) 5. From this directory, run the following docker compose command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker compose -f docker-compose.base.yml -f docker-compose-linux.yml up --force-recreate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you choose to install the new Docker version manually, please make sure that installation is done for all users of the system. Otherwise, the docker command will fail because it needs the super-user privileges. 6. The preconfigured dashboards should be now available on Grafana at &lt;a href=&#34;http://localhost:3000/dashboards&#34;&gt;http://localhost:3000/dashboards&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Progress&lt;/h2&gt; &#xA;&lt;h3&gt;Done&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Cryptography &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Schnorr Signature&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Belare-Neven Signature&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; BLS Signature&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Modified BLS Multi-signature&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Datastructures &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Transaction&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Block&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Account&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Trie&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Execution &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Transaction&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Block&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; State update&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Synchronization&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Shard Fork choice&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Peer2Peer - libp2p&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Consensus - SPoS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Sharding - fixed number &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Transaction dispatcher&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Transaction&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; State&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Network - Message dispatching&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; MetaChain &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Data Structures&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Block Processor&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Interceptors/Resolvers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Consensus&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Block K finality scheme&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; VM - K-Framework &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; K Framework go backend&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IELE Core&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IELE Core tests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; IELE Adapter&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Smart Contracts on a Sharded Architecture &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Concept reviewed&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; VM integration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; SC Deployment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Governance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Concept reviewed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Economics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Concept reviewed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optimizations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Randomness&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Consensus&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Bootstrap from storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Testing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Unit tests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Integration tests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; TeamCity continuous integration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Manual testing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Epochs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nodes dispatcher (shuffling)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Network sharding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Optimized wiring protocol&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; VM &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; EVM Core&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; EVM Core tests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; EVM Adapter&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fee structure&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Smart Contracts on a Sharded Architecture &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Async callbacks&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Testing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automate tests with AWS&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Nodes Monitoring&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; DEX integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In progress&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Smart Contracts on a Sharded Architecture &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Dependency checker + SC migration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Storage rent + SC backup &amp;amp; restore&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Adaptive State Sharding &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Splitting&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Merging&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Redundancy&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Privacy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Interoperability&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Optimizations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Smart Contract&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Governance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; SC for ERD IP&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Enforced Upgrade mechanism for voted ERD IP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Bugfixing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering to help out with the source code! We welcome contributions from anyone on the internet, and are grateful for even the smallest of fixes to MultiversX!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to MultiversX, please fork, fix, commit and send a pull request for the maintainers to review and merge into the main code base. If you wish to submit more complex changes though, please check up with the core developers first here on GitHub, to ensure those changes are in line with the general philosophy of the project and/or get some early feedback which can make both your efforts much lighter as well as our review and merge procedures quick and simple.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure your contributions adhere to our coding guidelines:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Code must adhere to the official Go &lt;a href=&#34;https://golang.org/doc/effective_go.html#formatting&#34;&gt;formatting&lt;/a&gt; guidelines.&lt;/li&gt; &#xA; &lt;li&gt;Code must be documented adhering to the official Go &lt;a href=&#34;https://golang.org/doc/effective_go.html#commentary&#34;&gt;commentary&lt;/a&gt; guidelines.&lt;/li&gt; &#xA; &lt;li&gt;Pull requests need to be based on and opened against the master branch.&lt;/li&gt; &#xA; &lt;li&gt;Commit messages should be prefixed with the package(s) they modify. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. &#34;outport/process: fixed a typo&#34;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://docs.multiversx.com/&#34;&gt;documentation&lt;/a&gt; for more details on the MultiversX protocol.&lt;/p&gt;</summary>
  </entry>
</feed>