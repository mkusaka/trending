<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-02T01:36:05Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>j178/leetgo</title>
    <updated>2023-02-02T01:36:05Z</updated>
    <id>tag:github.com,2023-02-02:/j178/leetgo</id>
    <link href="https://github.com/j178/leetgo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Best LeetCode friend for geek. üèÇ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/j178/leetgo/master/README_zh.md&#34;&gt;‰∏≠Êñá&lt;/a&gt; | English&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Leetgo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/j178/leetgo&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/j178/leetgo&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/j178/leetgo/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/j178/leetgo/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/bHsEwQQj9m&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1069106479744962582?label=discord&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/niceoe&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/niceoe&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;leetgo&lt;/code&gt; is a command-line tool for LeetCode that provides almost all the functionality of LeetCode, allowing you to do all of your LeetCode exercises without leaving the terminal. It can automatically generate &lt;strong&gt;skeleton code and test cases&lt;/strong&gt;, support &lt;strong&gt;local testing and debugging&lt;/strong&gt;, and you can use any IDE you like to solve problems.&lt;/p&gt; &#xA;&lt;p&gt;And &lt;code&gt;leetgo&lt;/code&gt; also supports real-time generation of &lt;strong&gt;contest questions&lt;/strong&gt;, submitting all questions at once, so your submissions are always one step ahead!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/7R2lnZj7T0hEuJ49SH2lZ04NG&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/7R2lnZj7T0hEuJ49SH2lZ04NG.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlight of features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate description, skeleton code and testg code for a question&lt;/li&gt; &#xA; &lt;li&gt;Customize the code template for generated code, use modifiers to pre-process code&lt;/li&gt; &#xA; &lt;li&gt;Execute test cases on your local machine&lt;/li&gt; &#xA; &lt;li&gt;Wait and generate contest questions just in time, test and submit all at once&lt;/li&gt; &#xA; &lt;li&gt;Support for both leetcode.com and leetcode.cn&lt;/li&gt; &#xA; &lt;li&gt;Automatically read cookies from browser, no need to enter password&lt;/li&gt; &#xA; &lt;li&gt;Automatically open question files in your favourite editor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;leetgo&lt;/code&gt; supports code generation for most languages, and local testing for some languages.&lt;/p&gt; &#xA;&lt;p&gt;Local testing means that you can run the test cases on your local machine, so you can use a debugger to debug your code.&lt;/p&gt; &#xA;&lt;p&gt;Local testing requires more work to implement for each language, so not all languages are supported.&lt;/p&gt; &#xA;&lt;!-- BEGIN MATRIX --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Generation&lt;/th&gt; &#xA;   &lt;th&gt;Local testing&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bash&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MySQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MSSQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Oracle&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;‚úÖ&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Not yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- END MATRIX --&gt; &#xA;&lt;p&gt;and many other languages are planned. (Help wanted, contributions welcome!)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can download the latest binary from the &lt;a href=&#34;https://github.com/j178/leetgo/releases&#34;&gt;release page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install via go&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go install github.com/j178/leetgo@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install via &lt;a href=&#34;https://brew.sh/&#34;&gt;HomeBrew&lt;/a&gt; on macOS/Linux&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install j178/tap/leetgo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install via &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt; on Windows&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop bucket add j178 https://github.com/j178/scoop-bucket.git&#xA;scoop install j178/leetgo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;!-- BEGIN USAGE --&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage:&#xA;  leetgo [command]&#xA;&#xA;Available Commands:&#xA;  init                    Init a leetcode workspace&#xA;  pick                    Generate a new question&#xA;  info                    Show question info&#xA;  test                    Run question test cases&#xA;  submit                  Submit solution&#xA;  edit                    Open solution in editor&#xA;  extract                 Extract solution code from generated file&#xA;  contest                 Generate contest questions&#xA;  cache                   Manage local questions cache&#xA;  config                  Show configurations&#xA;  help                    Help about any command&#xA;&#xA;Flags:&#xA;  -v, --version       version for leetgo&#xA;  -l, --lang string   language of code to generate: cpp, go, python ...&#xA;  -y, --yes           answer yes to all prompts&#xA;  -h, --help          help for leetgo&#xA;&#xA;Use &#34;leetgo [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END USAGE --&gt; &#xA;&lt;h3&gt;Question Identifier&lt;/h3&gt; &#xA;&lt;p&gt;Many &lt;code&gt;leetgo&lt;/code&gt; commands rely on &lt;code&gt;qid&lt;/code&gt; to find the leetcode question. &lt;code&gt;qid&lt;/code&gt; is a simplified question identifier defined by leetgo, which includes the following forms (using the two-sum problem as an example):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;leetgo pick two-sum          # `two-sum` is the question slug&#xA;leetgo pick 1                # `1` is the question id&#xA;leetgo pick today            # `today` means daily question&#xA;leetgo contest weekly100     # `weekly100` means the 100th weekly contest&#xA;leetgo test last             # `last` means the last generated question&#xA;leetgo test weekly100/1      # `weekly100/1` means the first question of the 100th weekly contest&#xA;leetgo submit b100/2         # `b100/2` means the second question of the 100th biweekly contest&#xA;leetgo submit w99/           # `w99/` means all questions of the 99th biweekly contest (must keep the trailing slash)&#xA;leetgo test last/1           # `last/1` means the first question of the last generated contest&#xA;leetgo test last/            # `last/` means all questions of the last generated contest (must keep the trailing slash)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Leetgo uses two levels of configuration files, the global configuration file located at &lt;code&gt;~/.config/leetgo/config.yaml&lt;/code&gt; and the local configuration file located at &lt;code&gt;leetgo.yaml&lt;/code&gt; in the project root.&lt;/p&gt; &#xA;&lt;p&gt;These configuration files are created during the &lt;code&gt;leetgo init&lt;/code&gt; process. The local configuration file in the project overrides the global configuration.&lt;/p&gt; &#xA;&lt;p&gt;It is generally recommended to use the global configuration as the default configuration and customize it in the project by modifying the &lt;code&gt;leetgo.yaml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Here is the demonstration of complete configurations:&lt;/p&gt; &#xA;&lt;!-- BEGIN CONFIG --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# Your name&#xA;author: Bob&#xA;# Language of the question description: zh or en&#xA;language: zh&#xA;# Code configuration&#xA;code:&#xA;  # Language of code generated for questions: go, python, ... &#xA;  # (will be override by project config and flag --lang)&#xA;  lang: go&#xA;  # The default template to generate filename (without extension), e.g. {{.Id}}.{{.Slug}}&#xA;  # Available attributes: Id, Slug, Title, Difficulty, Lang, SlugIsMeaningful&#xA;  # Available functions: lower, upper, trim, padWithZero, toUnderscore&#xA;  filename_template: &#39;{{ .Id | padWithZero 4 }}{{ if .SlugIsMeaningful }}.{{ .Slug }}{{ end }}&#39;&#xA;  # Functions that modify the generated code&#xA;  modifiers:&#xA;    - name: removeUselessComments&#xA;  go:&#xA;    out_dir: go&#xA;    # Overrides the default code.filename_template&#xA;    filename_template: &#34;&#34;&#xA;    # Replace some blocks of the generated code&#xA;    blocks:&#xA;      - name: beforeMarker&#xA;        template: |+&#xA;          package main&#xA;&#xA;          {{ if .NeedsDefinition -}} import . &#34;github.com/j178/leetgo/testutils/go&#34; {{- end }}&#xA;&#xA;    # Functions that modify the generated code&#xA;    modifiers:&#xA;      - name: removeUselessComments&#xA;      - name: changeReceiverName&#xA;      - name: addNamedReturn&#xA;      - name: addMod&#xA;    # Go module path for the generated code&#xA;    go_mod_path: &#34;&#34;&#xA;  python3:&#xA;    out_dir: python&#xA;    # Overrides the default code.filename_template&#xA;    filename_template: &#34;&#34;&#xA;  cpp:&#xA;    out_dir: cpp&#xA;    # Overrides the default code.filename_template&#xA;    filename_template: &#34;&#34;&#xA;  java:&#xA;    out_dir: java&#xA;    # Overrides the default code.filename_template&#xA;    filename_template: &#34;&#34;&#xA;  rust:&#xA;    out_dir: rust&#xA;    # Overrides the default code.filename_template&#xA;    filename_template: &#34;&#34;&#xA;# LeetCode configuration&#xA;leetcode:&#xA;  # LeetCode site, https://leetcode.com or https://leetcode.cn&#xA;  site: https://leetcode.cn&#xA;  # Credentials to access LeetCode&#xA;  credentials:&#xA;    # How to provide credentials: browser, cookies, password or none&#xA;    from: browser&#xA;    # LeetCode cookie: LEETCODE_SESSION&#xA;    session: &#34;&#34;&#xA;    # LeetCode cookie: csrftoken&#xA;    csrftoken: &#34;&#34;&#xA;    # LeetCode username&#xA;    username: &#34;&#34;&#xA;    # Encrypted LeetCode password&#xA;    password: &#34;&#34;&#xA;contest:&#xA;  # Base dir to put generated contest questions&#xA;  out_dir: contest&#xA;  # Template to generate filename of the question&#xA;  filename_template: &#39;{{ .ContestShortSlug }}/{{ .Id }}{{ if .SlugIsMeaningful }}.{{ .Slug }}{{ end }}&#39;&#xA;  # Open the contest page in browser after generating&#xA;  open_in_browser: true&#xA;# The editor to open generated files&#xA;editor:&#xA;  # Use a predefined editor: vim, vscode, goland&#xA;  # Set to &#39;none&#39; to disable, set to &#39;custom&#39; to provide your own command&#xA;  use: none&#xA;  # Custom command to open files&#xA;  command: &#34;&#34;&#xA;  # Arguments to the command&#xA;  args: []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- END CONFIG --&gt; &#xA;&lt;h2&gt;LeetCode Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;leetgo&lt;/code&gt; uses LeetCode&#39;s GraphQL API to retrieve questions and submit solutions. &lt;code&gt;leetgo&lt;/code&gt; needs your LeetCode cookies to access the authenticated API.&lt;/p&gt; &#xA;&lt;p&gt;There are three ways to make cookies available to &lt;code&gt;leetgo&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Read cookies from browser automatically.&lt;/p&gt; &lt;p&gt;Currently, Chrome and FireFox are supported, if you want to support other browsers, please let us know!&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;leetcode:&#xA;  credentials:&#xA;    from: browser&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide cookies in config file.&lt;/p&gt; &lt;p&gt;You can get your cookies named &lt;code&gt;LEETCODE_SESSION&lt;/code&gt; and &lt;code&gt;csrftoken&lt;/code&gt; from browser&#39;s developer tools.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;leetcode:&#xA;  credentials:&#xA;    from: cookies&#xA;    session: xxx&#xA;    csrftoken: xx&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide username and password in config file.&lt;/p&gt; &lt;p&gt;You need to run &lt;code&gt;leetgo config encrypt&lt;/code&gt; to encrypt your password first, plain text password is &lt;strong&gt;not allowed&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;leetcode:&#xA;  credentials:&#xA;    from: password&#xA;    username: xxx&#xA;    password: |&#xA;      $LEETGO_VAULT;1.1;AES256&#xA;      61393232326161303064373437376538646432623336363563623935333863653666623633376466&#xA;      3836633339643934383061363239333833333634373137620a303466626335633332393336326564&#xA;      31633231333934323165376362646630643132626130626136326163333133663762356264353564&#xA;      6562653462396335300a313761363531363961656364366634666562663061633161366463393339&#xA;      3963&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: username/password authentication is not recommended, and it is not supported by &lt;code&gt;leetcode.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Templates&lt;/h3&gt; &#xA;&lt;p&gt;Several fields in leetgo&#39;s config file support templating. These fields are often suffixed with &lt;code&gt;_template&lt;/code&gt;. You can use custom template to generate your own filename, code, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Blocks&lt;/h3&gt; &#xA;&lt;p&gt;A code file is composed of different blocks, you can overwrite some of them to provide your own snippets.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Available blocks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;header&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;description&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;beforeMarker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;beforeCode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;code&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;afterCode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;afterMarker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;code:&#xA;lang: cpp&#xA;cpp:&#xA;  blocks:&#xA;  - name: beforeCode&#xA;    template: |&#xA;      #include &amp;lt;iostream&amp;gt;&#xA;      using namespace std;&#xA;  - name: afterMarker&#xA;    template: |&#xA;      int main() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scripting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;leetgo&lt;/code&gt; supports providing a JavaScript function to handle the code before generation, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;code:&#xA;  lang: cpp&#xA;  cpp:&#xA;    modifiers:&#xA;    - name: removeUselessComments&#xA;    - script: |&#xA;        function modify(code) {&#xA;          return &#34;// hello world\n&#34; + code;&#xA;        } &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;If you encounter any problems, please run your command with the &lt;code&gt;DEBUG&lt;/code&gt; environment variable set to &lt;code&gt;1&lt;/code&gt;, copy the command output, and open an issue.&lt;/p&gt; &#xA;&lt;p&gt;Some common problems can be found in the &lt;a href=&#34;https://github.com/j178/leetgo/discussions/categories/q-a&#34;&gt;Q&amp;amp;A&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions welcome!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/j178/leetgo/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt;Good First Issues&lt;/a&gt; are a good place to start, and you can also check out some &lt;a href=&#34;https://github.com/j178/leetgo/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;Help Wanted&lt;/a&gt; issues.&lt;/p&gt; &#xA;&lt;p&gt;Before submitting a PR, please run &lt;code&gt;golangci-lint run --fix&lt;/code&gt; to fix lint errors.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Here are some awesome projects that inspired me to create this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EndlessCheng/codeforces-go&#34;&gt;https://github.com/EndlessCheng/codeforces-go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clearloop/leetcode-cli&#34;&gt;https://github.com/clearloop/leetcode-cli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/budougumi0617/leetgode&#34;&gt;https://github.com/budougumi0617/leetgode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skygragon/leetcode-cli&#34;&gt;https://github.com/skygragon/leetcode-cli&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>