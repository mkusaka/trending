<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-06T01:33:11Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hashicorp/terraform-provider-kubernetes</title>
    <updated>2022-10-06T01:33:11Z</updated>
    <id>tag:github.com,2022-10-06:/hashicorp/terraform-provider-kubernetes</id>
    <link href="https://github.com/hashicorp/terraform-provider-kubernetes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terraform Kubernetes provider&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://terraform.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/hashicorp/terraform-provider-kubernetes/main/.github/tf.png&#34; alt=&#34;Terraform logo&#34; title=&#34;Terraform&#34; align=&#34;left&#34; height=&#34;50&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Kubernetes Provider for Terraform &lt;a href=&#34;https://github.com/hashicorp/terraform-provider-kubernetes/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/hashicorp/terraform-provider-kubernetes?label=release&#34; alt=&#34;GitHub tag (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/hashicorp/terraform-provider-kubernetes.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/guides/getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.hashicorp.com/tutorials/terraform/kubernetes-provider?in=terraform/kubernetes&#34;&gt;Interactive Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Usage &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hashicorp/terraform-provider-kubernetes/tree/main/_examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://registry.terraform.io/providers/hashicorp/kubernetes/latest/docs/guides/v2-upgrade-guide&#34;&gt;Kubernetes Provider 2.0 Upgrade guide&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mailing list: &lt;a href=&#34;http://groups.google.com/group/terraform-tool&#34;&gt;Google Groups&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat: &lt;a href=&#34;https://kubernetes.slack.com/messages/CJY6ATQH4&#34;&gt;#terraform-providers in Kubernetes&lt;/a&gt; (&lt;a href=&#34;http://slack.k8s.io/&#34;&gt;Sign up here&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Kubernetes provider for Terraform is a plugin that enables full lifecycle management of Kubernetes resources. This provider is maintained internally by HashiCorp.&lt;/p&gt; &#xA;&lt;p&gt;Please note: We take Terraform&#39;s security and our users&#39; trust very seriously. If you believe you have found a security issue in the Terraform Kubernetes Provider, please responsibly disclose by contacting us at &lt;a href=&#34;mailto:security@hashicorp.com&#34;&gt;security@hashicorp.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.terraform.io/downloads.html&#34;&gt;Terraform&lt;/a&gt; 0.12.x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://golang.org/doc/install&#34;&gt;Go&lt;/a&gt; 1.16.x (to build the provider plugin)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to the provider&lt;/h2&gt; &#xA;&lt;p&gt;The Kubernetes Provider for Terraform is the work of many contributors. We appreciate your help!&lt;/p&gt; &#xA;&lt;p&gt;To contribute, please read the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/terraform-provider-kubernetes/main/_about/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;. You may also &lt;a href=&#34;https://github.com/hashicorp/terraform-provider-kubernetes/issues/new/choose&#34;&gt;report an issue&lt;/a&gt;. Once you&#39;ve filed an issue, it will follow the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/terraform-provider-kubernetes/main/_about/ISSUES.md&#34;&gt;issue lifecycle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Also available are some answers to &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/terraform-provider-kubernetes/main/_about/FAQ.md&#34;&gt;Frequently Asked Questions&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>awslabs/amazon-ecr-credential-helper</title>
    <updated>2022-10-06T01:33:11Z</updated>
    <id>tag:github.com,2022-10-06:/awslabs/amazon-ecr-credential-helper</id>
    <link href="https://github.com/awslabs/amazon-ecr-credential-helper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically gets credentials for Amazon ECR on docker push/docker pull&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Amazon ECR Docker Credential Helper&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/awslabs/amazon-ecr-credential-helper/main/docs/ecr.png&#34; alt=&#34;Amazon ECR logo&#34; title=&#34;Amazon ECR&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/amazon-ecr-credential-helper/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/awslabs/amazon-ecr-credential-helper/actions/workflows/build.yaml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/awslabs/amazon-ecr-credential-helper&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/awslabs/amazon-ecr-credential-helper&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/latest-versions/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;latest packaged version(s)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Amazon ECR Docker Credential Helper is a &lt;a href=&#34;https://github.com/docker/docker-credential-helpers&#34;&gt;credential helper&lt;/a&gt; for the Docker daemon that makes it easier to use &lt;a href=&#34;https://aws.amazon.com/ecr/&#34;&gt;Amazon Elastic Container Registry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;You must have at least Docker 1.11 installed on your system.&lt;/p&gt; &#xA;&lt;p&gt;You also must have AWS credentials available. See the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-ecr-credential-helper/main/#aws-credentials&#34;&gt;AWS credentials section&lt;/a&gt; for details on how to use different AWS credentials.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;Amazon Linux 2&lt;/h3&gt; &#xA;&lt;p&gt;You can install the Amazon ECR Credential Helper from the &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-ami-basics.html#extras-library&#34;&gt;&lt;code&gt;docker&lt;/code&gt; or &lt;code&gt;ecs&lt;/code&gt; extras&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo amazon-linux-extras enable docker&#xA;$ sudo yum install amazon-ecr-credential-helper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have installed the credential helper, see the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-ecr-credential-helper/main/#Configuration&#34;&gt;Configuration section&lt;/a&gt; for instructions on how to configure Docker to work with the helper.&lt;/p&gt; &#xA;&lt;h3&gt;Mac OS&lt;/h3&gt; &#xA;&lt;p&gt;A community-maintained Homebrew formula is available in the core tap.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/homebrew/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;Homebrew package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install docker-credential-helper-ecr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS, another community-maintained installation method is to use MacPorts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/macports/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;MacPorts package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo port install docker-credential-helper-ecr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have installed the credential helper, see the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-ecr-credential-helper/main/#Configuration&#34;&gt;Configuration section&lt;/a&gt; for instructions on how to configure Docker to work with the helper.&lt;/p&gt; &#xA;&lt;h3&gt;Debian Buster (and future versions)&lt;/h3&gt; &#xA;&lt;p&gt;You can install the Amazon ECR Credential Helper from the Debian Buster archives. This package will also be included in future releases of Debian.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/debian_10/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;Debian 10 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/debian_11/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;Debian 11 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/debian_12/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;Debian 12 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/debian_unstable/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;Debian Unstable package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt update&#xA;$ sudo apt install amazon-ecr-credential-helper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have installed the credential helper, see the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-ecr-credential-helper/main/#Configuration&#34;&gt;Configuration section&lt;/a&gt; for instructions on how to configure Docker to work with the helper.&lt;/p&gt; &#xA;&lt;h3&gt;Ubuntu 19.04 Disco Dingo and newer&lt;/h3&gt; &#xA;&lt;p&gt;You can install the Amazon ECR Credential Helper from the Ubuntu 19.04 Disco Dingo (and newer) archives.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/ubuntu_20_04/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;Ubuntu 20.04 package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/project/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/ubuntu_22_04/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;Ubuntu 22.04 package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt update&#xA;$ sudo apt install amazon-ecr-credential-helper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have installed the credential helper, see the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-ecr-credential-helper/main/#Configuration&#34;&gt;Configuration section&lt;/a&gt; for instructions on how to configure Docker to work with the helper.&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;A community-maintained package is available in the Arch User Repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/metapackage/amazon-ecr-credential-helper/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/aur/amazon-ecr-credential-helper.svg?sanitize=true&#34; alt=&#34;AUR package&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://aur.archlinux.org/amazon-ecr-credential-helper.git&#xA;$ cd amazon-ecr-credential-helper&#xA;$ makepkg -si&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you have installed the credential helper, see the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-ecr-credential-helper/main/#Configuration&#34;&gt;Configuration section&lt;/a&gt; for instructions on how to configure Docker to work with the helper.&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;To build and install the Amazon ECR Docker Credential Helper, we suggest Go 1.15 or later, &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; installed on your system.&lt;/p&gt; &#xA;&lt;p&gt;If you just installed Go, make sure you also have added it to your PATH or Environment Vars (Windows). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export GOPATH=$HOME/go&#xA;$ export PATH=$PATH:$GOPATH/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;setx GOPATH %USERPROFILE%\go&#xA;&amp;lt;your existing PATH definitions&amp;gt;;%USERPROFILE%\go\bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you haven&#39;t defined the PATH, the command below will fail silently, and running &lt;code&gt;docker-credential-ecr-login&lt;/code&gt; will output: &lt;code&gt;command not found&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install this via the &lt;code&gt;go&lt;/code&gt; command line tool.&lt;/p&gt; &#xA;&lt;p&gt;For go version 1.16 and newer run :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with an older version of go run :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get -u github.com/awslabs/amazon-ecr-credential-helper/ecr-login/cli/docker-credential-ecr-login&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you already have Docker environment, just clone this repository anywhere and run &lt;code&gt;make docker&lt;/code&gt;. This command builds the binary with Go inside the Docker container and output it to local directory.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;TARGET_GOOS&lt;/code&gt; environment variable, you can also cross compile the binary.&lt;/p&gt; &#xA;&lt;p&gt;Once you have installed the credential helper, see the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/amazon-ecr-credential-helper/main/#Configuration&#34;&gt;Configuration section&lt;/a&gt; for instructions on how to configure Docker to work with the helper.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;Place the &lt;code&gt;docker-credential-ecr-login&lt;/code&gt; binary on your &lt;code&gt;PATH&lt;/code&gt; and set the contents of your &lt;code&gt;~/.docker/config.json&lt;/code&gt; file to be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;credsStore&#34;: &#34;ecr-login&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configures the Docker daemon to use the credential helper for all Amazon ECR registries.&lt;/p&gt; &#xA;&lt;p&gt;With Docker 1.13.0 or greater, you can configure Docker to use different credential helpers for different registries. To use this credential helper for a specific ECR registry, create a &lt;code&gt;credHelpers&lt;/code&gt; section with the URI of your ECR registry:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;credHelpers&#34;: {&#xA;&#x9;&#x9;&#34;public.ecr.aws&#34;: &#34;ecr-login&#34;,&#xA;&#x9;&#x9;&#34;&amp;lt;aws_account_id&amp;gt;.dkr.ecr.&amp;lt;region&amp;gt;.amazonaws.com&#34;: &#34;ecr-login&#34;&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is useful if you use &lt;code&gt;docker&lt;/code&gt; to operate on registries that use different authentication credentials.&lt;/p&gt; &#xA;&lt;h3&gt;AWS credentials&lt;/h3&gt; &#xA;&lt;p&gt;The Amazon ECR Docker Credential Helper allows you to use AWS credentials stored in different locations. Standard ones include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The shared credentials file (&lt;code&gt;~/.aws/credentials&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;AWS_ACCESS_KEY_ID&lt;/code&gt; and &lt;code&gt;AWS_SECRET_ACCESS_KEY&lt;/code&gt; environment variables&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html&#34;&gt;IAM role for an Amazon ECS task&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html&#34;&gt;IAM role for Amazon EC2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To use credentials associated with a different named profile in the shared credentials file (&lt;code&gt;~/.aws/credentials&lt;/code&gt;), you may set the &lt;code&gt;AWS_PROFILE&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;The Amazon ECR Docker Credential Helper reads and supports some configuration options specified in the AWS shared configuration file (&lt;code&gt;~/.aws/config&lt;/code&gt;). To disable these options, you must set the &lt;code&gt;AWS_SDK_LOAD_CONFIG&lt;/code&gt; environment variable to &lt;code&gt;false&lt;/code&gt;. The supported options include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Assumed roles specified with &lt;code&gt;role_arn&lt;/code&gt; and &lt;code&gt;source_profile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;External credential processes specified with &lt;code&gt;credential_process&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Web Identities like &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html&#34;&gt;IAM Roles for Service Accounts in Kubernetes&lt;/a&gt; (&lt;em&gt;Note: Kubernetes users using containers with a non-root user may encounter permission issues described in &lt;a href=&#34;https://github.com/kubernetes-sigs/external-dns/pull/1185&#34;&gt;this bug&lt;/a&gt; and may need to employ a workaround adjusting the Kubernetes &lt;code&gt;securityContext&lt;/code&gt;.&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Amazon ECR Docker Credential Helper uses the same credentials as the AWS CLI and the AWS SDKs. For more information about configuring AWS credentials, see &lt;a href=&#34;http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html#cli-config-files&#34;&gt;Configuration and Credential Files&lt;/a&gt; in the &lt;em&gt;AWS Command Line Interface User Guide&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The credentials must have a policy applied that &lt;a href=&#34;http://docs.aws.amazon.com/AmazonECR/latest/userguide/ecr_managed_policies.html&#34;&gt;allows access to Amazon ECR&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Amazon ECR Docker Credential Helper&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Environment Variable&lt;/th&gt; &#xA;   &lt;th&gt;Sample Value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWS_ECR_DISABLE_CACHE&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Disables the local file auth cache if set to a non-empty value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWS_ECR_CACHE_DIR&lt;/td&gt; &#xA;   &lt;td&gt;~/.ecr&lt;/td&gt; &#xA;   &lt;td&gt;Specifies the local file auth cache directory location&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;docker pull 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repository:my-tag&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker push 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repository:my-tag&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker pull public.ecr.aws/amazonlinux/amazonlinux:latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have configured additional profiles for use with the AWS CLI, you can use those profiles by specifying the &lt;code&gt;AWS_PROFILE&lt;/code&gt; environment variable when invoking &lt;code&gt;docker&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AWS_PROFILE=myprofile docker pull 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repository:my-tag&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is no need to use &lt;code&gt;docker login&lt;/code&gt; or &lt;code&gt;docker logout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have previously authenticated with an ECR repository by using the &lt;code&gt;docker login&lt;/code&gt; command manually then Docker may have stored an auth token which has since expired. Docker will continue to attempt to use that cached auth token instead of utilizing the credential helper. You must explicitly remove the previously cached expired token using &lt;code&gt;docker logout 123456789012.dkr.ecr.us-west-2.amazonaws.com/my-repository&lt;/code&gt;. After that Docker will start utilizing the ECR credential helper to fetch fresh credentials, and you will no longer need to use &lt;code&gt;docker login&lt;/code&gt; or &lt;code&gt;docker logout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Logs from the Amazon ECR Docker Credential Helper are stored in &lt;code&gt;~/.ecr/log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information about Amazon ECR, see the the &lt;a href=&#34;http://docs.aws.amazon.com/AmazonECR/latest/userguide/what-is-ecr.html&#34;&gt;Amazon Elastic Container Registry User Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security disclosures&lt;/h2&gt; &#xA;&lt;p&gt;If you think you’ve found a potential security issue, please do not post it in the Issues. Instead, please follow the instructions &lt;a href=&#34;https://aws.amazon.com/security/vulnerability-reporting/&#34;&gt;here&lt;/a&gt; or &lt;a href=&#34;mailto:aws-security@amazon.com&#34;&gt;email AWS security directly&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The Amazon ECR Docker Credential Helper is licensed under the Apache 2.0 License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hashicorp/consul-template</title>
    <updated>2022-10-06T01:33:11Z</updated>
    <id>tag:github.com,2022-10-06:/hashicorp/consul-template</id>
    <link href="https://github.com/hashicorp/consul-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Template rendering, notifier, and supervisor for @hashicorp Consul and Vault data.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Consul Template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hashicorp/consul-template/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/hashicorp/consul-template/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hashicorp/consul-template/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/hashicorp/consul-template/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/hashicorp/consul-template&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/go-documentation-%2300acd7&#34; alt=&#34;Go Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project provides a convenient way to populate values from &lt;a href=&#34;https://www.consul.io&#34; title=&#34;Consul by HashiCorp&#34;&gt;Consul&lt;/a&gt; into the file system using the &lt;code&gt;consul-template&lt;/code&gt; daemon.&lt;/p&gt; &#xA;&lt;p&gt;The daemon &lt;code&gt;consul-template&lt;/code&gt; queries a &lt;a href=&#34;https://www.consul.io&#34; title=&#34;Consul by HashiCorp&#34;&gt;Consul&lt;/a&gt;, &lt;a href=&#34;https://www.vaultproject.io&#34; title=&#34;Vault by HashiCorp&#34;&gt;Vault&lt;/a&gt;, or &lt;a href=&#34;https://www.nomadproject.io&#34; title=&#34;Nomad By HashiCorp&#34;&gt;Nomad&lt;/a&gt; cluster and updates any number of specified templates on the file system. As an added bonus, it can optionally run arbitrary commands when the update process completes. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/(https://github.com/hashicorp/consul-template/tree/master/examples)&#34; title=&#34;Consul Template Examples&#34;&gt;examples folder&lt;/a&gt; for some scenarios where this functionality might prove useful.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;The documentation in this README corresponds to the master branch of Consul Template. It may contain unreleased features or different APIs than the most recently released version.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please see the &lt;a href=&#34;https://github.com/hashicorp/consul-template/releases&#34;&gt;Git tag&lt;/a&gt; that corresponds to your version of Consul Template for the proper documentation.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#community-support&#34;&gt;Community Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#quick-example&#34;&gt;Quick Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#learn-guides&#34;&gt;Learn Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/configuration.md&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/configuration.md#command-line-flags&#34;&gt;Command Line Flags&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/configuration.md#configuration-file&#34;&gt;Configuration File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#reload-configuration-and-templates&#34;&gt;Reload Configuration and Templates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/templating-language.md&#34;&gt;Templating Language&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/templating-language.md#api-functions&#34;&gt;API Functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/templating-language.md#scratch&#34;&gt;Scratch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/templating-language.md#helper-functions&#34;&gt;Helper Functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/templating-language.md#math-functions&#34;&gt;Math Functions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/observability.md&#34;&gt;Observability&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/observability.md#logging&#34;&gt;Logging&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/observability.md#logging-to-file&#34;&gt;Logging to file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/modes.md&#34;&gt;Modes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/modes.md#once-mode&#34;&gt;Once Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/modes.md#de-duplication-mode&#34;&gt;De-Duplication Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/modes.md#exec-mode&#34;&gt;Exec Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/plugins.md&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#caveats&#34;&gt;Caveats&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#docker-image-use&#34;&gt;Docker Image Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#dots-in-service-names&#34;&gt;Dots in Service Names&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#termination-on-error&#34;&gt;Termination on Error&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#commands&#34;&gt;Commands&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#environment&#34;&gt;Environment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#multiple-commands&#34;&gt;Multiple Commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#multi-phase-execution&#34;&gt;Multi-phase Execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#debugging&#34;&gt;Debugging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community Support&lt;/h2&gt; &#xA;&lt;p&gt;If you have questions about how consul-template works, its capabilities or anything other than a bug or feature request (use github&#39;s issue tracker for those), please see our community support resources.&lt;/p&gt; &#xA;&lt;p&gt;Community portal: &lt;a href=&#34;https://discuss.hashicorp.com/tags/c/consul/29/consul-template&#34;&gt;https://discuss.hashicorp.com/tags/c/consul/29/consul-template&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other resources: &lt;a href=&#34;https://www.consul.io/community.html&#34;&gt;https://www.consul.io/community.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, for issues and pull requests, we&#39;ll be using the &lt;span&gt;👍&lt;/span&gt; reactions as a rough voting system to help gauge community priorities. So please add &lt;span&gt;👍&lt;/span&gt; to any issue or pull request you&#39;d like to see worked on. Thanks.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download a pre-compiled, released version from the &lt;a href=&#34;https://releases.hashicorp.com/consul-template&#34; title=&#34;Consul Template Releases&#34;&gt;Consul Template releases page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the binary using &lt;code&gt;unzip&lt;/code&gt; or &lt;code&gt;tar&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Move the binary into &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To compile from source, please see the instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/#contributing&#34;&gt;contributing section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Example&lt;/h2&gt; &#xA;&lt;p&gt;This short example assumes Consul is installed locally.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start a Consul cluster in dev mode:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ consul agent -dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Author a template &lt;code&gt;in.tpl&lt;/code&gt; to query the kv store:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-liquid&#34;&gt;{{ key &#34;foo&#34; }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start Consul Template:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ consul-template -template &#34;in.tpl:out.txt&#34; -once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Write data to the key in Consul:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ consul kv put foo bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Observe Consul Template has written the file &lt;code&gt;out.txt&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cat out.txt&#xA;bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more examples and use cases, please see the &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/(https://github.com/hashicorp/consul-template/tree/master/examples)&#34; title=&#34;Consul Template Examples&#34;&gt;examples folder&lt;/a&gt; in this repository.&lt;/p&gt; &#xA;&lt;h2&gt;Learn Guides&lt;/h2&gt; &#xA;&lt;p&gt;In addition to these &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/(https://github.com/hashicorp/consul-template/tree/master/examples)&#34; title=&#34;Consul Template Examples&#34;&gt;examples&lt;/a&gt;, HashiCorp has published guides and official documentation to help walk through a few common use cases for Consul Template.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.hashicorp.com/consul/developer-configuration/consul-template#use-case-consul-kv&#34;&gt;Consul KV&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.hashicorp.com/consul/developer-configuration/consul-template#use-case-discover-all-services&#34;&gt;Consul Catalog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.hashicorp.com/vault/identity-access-management/agent-templates&#34;&gt;Vault Agent Templates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vaultproject.io/docs/agent/template#example-template&#34;&gt;Vault Secrets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.hashicorp.com/tutorials/nomad/schedule-edge-services&#34;&gt;Nomad Native Service Discovery&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configuration documentation has been moved to &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/configuration.md&#34;&gt;docs/configuration.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Reload Configuration and Templates&lt;/h2&gt; &#xA;&lt;p&gt;While there are multiple ways to run Consul Template, the most common pattern is to run Consul Template as a system service. When Consul Template first starts, it reads any configuration files and templates from disk and loads them into memory. From that point forward, changes to the files on disk do not propagate to running process without a reload.&lt;/p&gt; &#xA;&lt;p&gt;The reason for this behavior is simple and aligns with other tools like haproxy. A user may want to perform pre-flight validation checks on the configuration or templates before loading them into the process. Additionally, a user may want to update configuration and templates simultaneously. Having Consul Template automatically watch and reload those files on changes is both operationally dangerous and against some of the paradigms of modern infrastructure. Instead, Consul Template listens for the &lt;code&gt;SIGHUP&lt;/code&gt; syscall to trigger a configuration reload. If you update configuration or templates, simply send &lt;code&gt;HUP&lt;/code&gt; to the running Consul Template process and Consul Template will reload all the configurations and templates from disk.&lt;/p&gt; &#xA;&lt;h2&gt;Templating Language&lt;/h2&gt; &#xA;&lt;p&gt;Templating Language documentation has been moved to &lt;a href=&#34;https://raw.githubusercontent.com/hashicorp/consul-template/main/docs/templating-language.md&#34;&gt;docs/templating-language.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;h3&gt;Docker Image Use&lt;/h3&gt; &#xA;&lt;p&gt;The Alpine Docker image is configured to support an external volume to render shared templates to. If mounted you will need to make sure that the consul-template user in the docker image has write permissions to the directory. Also if you build your own image using these you need to be sure you have the permissions correct.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The consul-template user in docker has a UID of 100 and a GID of 1000.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This effects the in image directories /consul-template/config, used to add configuration when using this as a parent image, and /consul-template/data, exported as a VOLUME as a location to render shared results.&lt;/p&gt; &#xA;&lt;p&gt;Previously the image initially ran as root in order to ensure the permissions allowed it. But this ran against docker best practices and security policies.&lt;/p&gt; &#xA;&lt;p&gt;If you build your own image based on ours you can override these values with &lt;code&gt;--build-arg&lt;/code&gt; parameters.&lt;/p&gt; &#xA;&lt;h3&gt;Dots in Service Names&lt;/h3&gt; &#xA;&lt;p&gt;Using dots &lt;code&gt;.&lt;/code&gt; in service names will conflict with the use of dots for &lt;a href=&#34;https://github.com/hashicorp/consul-template#service&#34;&gt;TAG delineation&lt;/a&gt; in the template. Dots already &lt;a href=&#34;https://www.consul.io/docs/agent/services.html#service-and-tag-names-with-dns&#34;&gt;interfere with using DNS&lt;/a&gt; for service names, so we recommend avoiding dots wherever possible.&lt;/p&gt; &#xA;&lt;h3&gt;Termination on Error&lt;/h3&gt; &#xA;&lt;p&gt;By default Consul Template is highly fault-tolerant. If Consul is unreachable or a template changes, Consul Template will happily continue running. The only exception to this rule is if the optional &lt;code&gt;command&lt;/code&gt; exits non-zero. In this case, Consul Template will also exit non-zero. The reason for this decision is so the user can easily configure something like Upstart or God to manage Consul Template as a service.&lt;/p&gt; &#xA;&lt;p&gt;If you want Consul Template to continue watching for changes, even if the optional command argument fails, you can append &lt;code&gt;|| true&lt;/code&gt; to your command. Note that &lt;code&gt;||&lt;/code&gt; is a &#34;shell-ism&#34;, not a built-in function. You will also need to run your command under a shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ consul-template \&#xA;  -template &#34;in.ctmpl:out.file:/bin/bash -c &#39;service nginx restart || true&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this example, even if the Nginx restart command returns non-zero, the overall function will still return an OK exit code; Consul Template will continue to run as a service. Additionally, if you have complex logic for restarting your service, you can intelligently choose when you want Consul Template to exit and when you want it to continue to watch for changes. For these types of complex scripts, we recommend using a custom sh or bash script instead of putting the logic directly in the &lt;code&gt;consul-template&lt;/code&gt; command or configuration file.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;h4&gt;Environment&lt;/h4&gt; &#xA;&lt;p&gt;The current processes environment is used when executing commands with the following additional environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;CONSUL_HTTP_ADDR&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CONSUL_HTTP_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CONSUL_HTTP_TOKEN_FILE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CONSUL_HTTP_AUTH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CONSUL_HTTP_SSL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CONSUL_HTTP_SSL_VERIFY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NOMAD_ADDR&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NOMAD_NAMESPACE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NOMAD_TOKEN&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These environment variables are exported with their current values when the command executes. Other Consul tooling reads these environment variables, providing smooth integration with other Consul tools (like &lt;code&gt;consul maint&lt;/code&gt; or &lt;code&gt;consul lock&lt;/code&gt;). Additionally, exposing these environment variables gives power users the ability to further customize their command script.&lt;/p&gt; &#xA;&lt;h4&gt;Multiple Commands&lt;/h4&gt; &#xA;&lt;p&gt;The command configured for running on template rendering must take one of two forms.&lt;/p&gt; &#xA;&lt;p&gt;The first is as a list of the command and arguments split at spaces. The command can use an absolute path or be found on the execution environment&#39;s PATH and must be the first item in the list. This form allows for single or multi-word commands that can be executed directly with a system call. For example...&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;command = [&#34;echo&#34;, &#34;hello&#34;]&lt;/code&gt; &lt;code&gt;command = [&#34;/opt/foo-package/bin/run-foo&#34;]&lt;/code&gt; &lt;code&gt;command = [&#34;foo&#34;]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that if you give a single command without the list denoting square brackets (&lt;code&gt;[]&lt;/code&gt;) it is converted into a list with a single argument.&lt;/p&gt; &#xA;&lt;p&gt;This: &lt;code&gt;command = &#34;foo&#34;&lt;/code&gt; is equivalent to: &lt;code&gt;command = [&#34;foo&#34;]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The second form is as a single quoted command using system shell features. This form &lt;strong&gt;requires&lt;/strong&gt; a shell named &lt;code&gt;sh&lt;/code&gt; be on the executable search path (eg. PATH on *nix). This is the standard on all *nix systems and should work out of the box on those systems. This won&#39;t work on, for example, Docker images with only the executable and without a minimal system like Alpine. Using this form you can join multiple commands with logical operators, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;, use pipelines with &lt;code&gt;|&lt;/code&gt;, conditionals, etc. Note that the shell &lt;code&gt;sh&lt;/code&gt; is normally &lt;code&gt;/bin/sh&lt;/code&gt; on *nix systems and is either a POSIX shell or a shell run in POSIX compatible mode, so it is best to stick to POSIX shell syntax in this command. For example..&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;command = &#34;/opt/foo &amp;amp;&amp;amp; /opt/bar&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;command = &#34;if /opt/foo ; then /opt/bar ; fi&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using this method you can run as many shell commands as you need with whatever logic you need. Though it is suggested that if it gets too long you might want to wrap it in a shell script, deploy and run that.&lt;/p&gt; &#xA;&lt;h4&gt;Shell Commands and Exec Mode&lt;/h4&gt; &#xA;&lt;p&gt;Using the system shell based command has one additional caveat when used for the Exec mode process (the managed, executed process to which it will propagate signals). That is to get signals to work correctly means not only does anything the shell runs need to handle signals, but the shell itself needs to handle them. This needs to be managed by you as shells will exit upon receiving most signals.&lt;/p&gt; &#xA;&lt;p&gt;A common example of this would be wanting the SIGHUP signal to trigger a reload of the underlying process and to be ignored by the shell process. To get this you have 2 options, you can use &lt;code&gt;trap&lt;/code&gt; to ignore the signal or you can use &lt;code&gt;exec&lt;/code&gt; to replace the shell with another process.&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;code&gt;trap&lt;/code&gt; to ignore the signal, you call &lt;code&gt;trap&lt;/code&gt; to catch the signal in the shell with no action. For example if you had an underlying nginx process you wanted to run with a shell command and have the shell ignore it you&#39;d do..&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;command = &#34;trap &#39;&#39; HUP; /usr/sbin/nginx -c /etc/nginx/nginx.conf&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;trap &#39;&#39; HUP;&lt;/code&gt; bit is enough to get the shell to ignore the HUP signal. If you left off the &lt;code&gt;trap&lt;/code&gt; command nginx would reload but the shell command would exit but leave the nginx still running, not unmanaged.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively using &lt;code&gt;exec&lt;/code&gt; will replace the shell&#39;s process with a sub-process, keeping the same PID and process grouping (allowing the sub-process to be managed). This is simpler, but a bit less flexible than &lt;code&gt;trap&lt;/code&gt;, and looks like..&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;command = &#34;exec /usr/sbin/nginx -c /etc/nginx/nginx.conf&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Where the nginx process would replace the enclosing shell process to be managed by consul-template, receiving the Signals directly. Basically &lt;code&gt;exec&lt;/code&gt; eliminates the shell from the equation.&lt;/p&gt; &#xA;&lt;p&gt;See your shell&#39;s documentation on &lt;code&gt;trap&lt;/code&gt; and/or &lt;code&gt;exec&lt;/code&gt; for more details on this.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-phase Execution&lt;/h3&gt; &#xA;&lt;p&gt;Consul Template does an n-pass evaluation of templates, accumulating dependencies on each pass. This is required due to nested dependencies, such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-liquid&#34;&gt;{{ range services }}&#xA;{{ range service .Name }}&#xA;  {{ .Address }}&#xA;{{ end }}{{ end }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;During the first pass, Consul Template does not know any of the services in Consul, so it has to perform a query. When those results are returned, the inner-loop is then evaluated with that result, potentially creating more queries and watches.&lt;/p&gt; &#xA;&lt;p&gt;Because of this implementation, template functions need a default value that is an acceptable parameter to a &lt;code&gt;range&lt;/code&gt; function (or similar), but does not actually execute the inner loop (which would cause a panic). This is important to mention because complex templates &lt;strong&gt;must&lt;/strong&gt; account for the &#34;empty&#34; case. For example, the following &lt;strong&gt;will not work&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-liquid&#34;&gt;{{ with index (service &#34;foo&#34;) 0 }}&#xA;# ...&#xA;{{ end }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will raise an error like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;index $services 0&amp;gt;: error calling index: index out of range: 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is because, during the &lt;em&gt;first&lt;/em&gt; evaluation of the template, the &lt;code&gt;service&lt;/code&gt; key is returning an empty slice. You can account for this in your template like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-liquid&#34;&gt;{{ with service &#34;foo&#34; }}&#xA;{{ with index . 0 }}&#xA;{{ .Node }}{{ end }}{{ end }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will still add the dependency to the list of watches, but will not evaluate the inner-if, avoiding the out-of-index error.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;Consul Template can print verbose debugging output. To set the log level for Consul Template, use the &lt;code&gt;-log-level&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ consul-template -log-level info ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;timestamp&amp;gt; [INFO] (cli) received redis from Watcher&#xA;&amp;lt;timestamp&amp;gt; [INFO] (cli) invoking Runner&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify the level as debug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ consul-template -log-level debug ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;&amp;lt;timestamp&amp;gt; [DEBUG] (cli) creating Runner&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (cli) creating Consul API client&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (cli) creating Watcher&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (cli) looping for data&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (watcher) starting watch&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (watcher) all pollers have started, waiting for finish&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (redis) starting poll&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (service redis) querying Consul with &amp;amp;{...}&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (service redis) Consul returned 2 services&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (redis) writing data to channel&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (redis) starting poll&#xA;&amp;lt;timestamp&amp;gt; [INFO] (cli) received redis from Watcher&#xA;&amp;lt;timestamp&amp;gt; [INFO] (cli) invoking Runner&#xA;&amp;lt;timestamp&amp;gt; [DEBUG] (service redis) querying Consul with &amp;amp;{...}&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: How is this different than confd?&lt;/strong&gt;&lt;br&gt; A: The answer is simple: Service Discovery as a first class citizen. You are also encouraged to read &lt;a href=&#34;https://github.com/kelseyhightower/confd/pull/102&#34;&gt;this Pull Request&lt;/a&gt; on the project for more background information. We think confd is a great project, but Consul Template fills a missing gap. Additionally, Consul Template has first class integration with &lt;a href=&#34;https://www.vaultproject.io&#34; title=&#34;Vault by HashiCorp&#34;&gt;Vault&lt;/a&gt;, making it easy to incorporate secret material like database credentials or API tokens into configuration files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: How is this different than Puppet/Chef/Ansible/Salt?&lt;/strong&gt;&lt;br&gt; A: Configuration management tools are designed to be used in unison with Consul Template. Instead of rendering a stale configuration file, use your configuration management software to render a dynamic template that will be populated by &lt;a href=&#34;https://www.consul.io&#34; title=&#34;Consul by HashiCorp&#34;&gt;Consul&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To build and install Consul-Template locally, you will need to &lt;a href=&#34;https://golang.org&#34; title=&#34;Go programming language&#34;&gt;install Go&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Clone the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ git clone https://github.com/hashicorp/consul-template.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile the &lt;code&gt;consul-template&lt;/code&gt; binary for your local machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ make dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile the &lt;code&gt;consul-template&lt;/code&gt; binary into &lt;code&gt;bin/consul-template&lt;/code&gt; as well as your &lt;code&gt;$GOPATH&lt;/code&gt; and run the test suite.&lt;/p&gt; &#xA;&lt;p&gt;If you want to compile a specific binary, set &lt;code&gt;XC_OS&lt;/code&gt; and &lt;code&gt;XC_ARCH&lt;/code&gt; or run the following to generate all binaries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run the tests, first install &lt;a href=&#34;https://www.consul.io/docs/install/index.html&#34;&gt;consul&lt;/a&gt;, &lt;a href=&#34;https://learn.hashicorp.com/tutorials/nomad/get-started-install&#34;&gt;nomad&lt;/a&gt; and &lt;a href=&#34;https://www.vaultproject.io/docs/install/&#34;&gt;vault&lt;/a&gt; locally, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to run a specific test in the suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go test ./... -run SomeTestFunction_name&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>