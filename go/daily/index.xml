<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-31T01:43:48Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>charmbracelet/gum</title>
    <updated>2022-07-31T01:43:48Z</updated>
    <id>tag:github.com,2022-07-31:/charmbracelet/gum</id>
    <link href="https://github.com/charmbracelet/gum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for glamorous shell scripts 🎀&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gum&lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://stuff.charm.sh/gum/nutritional-information.png&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://stuff.charm.sh/gum/gum.png&#34; alt=&#34;Gum Image&#34; width=&#34;450&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/charmbracelet/gum/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/gum.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/gum?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;Go Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/gum/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/gum/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A tool for glamorous shell scripts. Leverage the power of &lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;Bubbles&lt;/a&gt; and &lt;a href=&#34;https://github.com/charmbracelet/lipgloss&#34;&gt;Lip Gloss&lt;/a&gt; in your scripts and aliases without writing any Go code!&lt;/p&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/demo.gif&#34; width=&#34;600&#34; alt=&#34;Shell running the ./demo.sh script&#34;&gt; &#xA;&lt;p&gt;The above example is running from a single shell script (&lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/gum/main/examples/demo.sh&#34;&gt;source&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;Gum provides highly configurable, ready-to-use utilities to help you write useful shell scripts and dotfiles aliases with just a few lines of code.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s build a simple script to help you write &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/#summary&#34;&gt;Conventional Commits&lt;/a&gt; for your dotfiles.&lt;/p&gt; &#xA;&lt;p&gt;Start with a &lt;code&gt;#!/bin/sh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ask for the commit type with &lt;code&gt;gum choose&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum choose &#34;fix&#34; &#34;feat&#34; &#34;docs&#34; &#34;style&#34; &#34;refactor&#34; &#34;test&#34; &#34;chore&#34; &#34;revert&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tip: this command itself will print to &lt;code&gt;stdout&lt;/code&gt; which is not all that useful. To make use of the command later on you can save the stdout to a &lt;code&gt;$VARIABLE&lt;/code&gt; or &lt;code&gt;file.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Prompt for an (optional) scope for the commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum input --placeholder &#34;scope&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prompt for a commit message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum input --placeholder &#34;Summary of this change&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prompt for a detailed (multi-line) explanation of the changes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum write --placeholder &#34;Details of this change&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Prompt for a confirmation before committing:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;gum confirm&lt;/code&gt; exits with status &lt;code&gt;0&lt;/code&gt; if confirmed and status &lt;code&gt;1&lt;/code&gt; if cancelled.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum confirm &#34;Commit changes?&#34; &amp;amp;&amp;amp; git commit -m &#34;$SUMMARY&#34; -m &#34;$DESCRIPTION&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Putting it all together...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh&#xA;TYPE=$(gum choose &#34;fix&#34; &#34;feat&#34; &#34;docs&#34; &#34;style&#34; &#34;refactor&#34; &#34;test&#34; &#34;chore&#34; &#34;revert&#34;)&#xA;SCOPE=$(gum input --placeholder &#34;scope&#34;)&#xA;&#xA;# Since the scope is optional, wrap it in parentheses if it has a value.&#xA;test -n &#34;$SCOPE&#34; &amp;amp;&amp;amp; SCOPE=&#34;($SCOPE)&#34;&#xA;&#xA;# Pre-populate the input with the type(scope): so that the user may change it&#xA;SUMMARY=$(gum input --value &#34;$TYPE$SCOPE: &#34; --placeholder &#34;Summary of this change&#34;)&#xA;DESCRIPTION=$(gum write --placeholder &#34;Details of this change&#34;)&#xA;&#xA;# Commit these changes&#xA;gum confirm &#34;Commit changes?&#34; &amp;amp;&amp;amp; git commit -m &#34;$SUMMARY&#34; -m &#34;$DESCRIPTION&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/commit_2.gif&#34; width=&#34;600&#34; alt=&#34;Running the ./examples/commit.sh script to commit to git&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use a package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# macOS or Linux&#xA;brew tap charmbracelet/tap &amp;amp;&amp;amp; brew install charmbracelet/tap/gum&#xA;&#xA;# Arch Linux (btw)&#xA;yay -S gum-bin&#xA;&#xA;# Nix&#xA;nix-env -iA nixpkgs.gum&#xA;&#xA;# Debian/Ubuntu&#xA;echo &#39;deb [trusted=yes] https://repo.charm.sh/apt/ /&#39; | sudo tee /etc/apt/sources.list.d/charm.list&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install gum&#xA;&#xA;# Fedora&#xA;echo &#39;[charm]&#xA;name=Charm&#xA;baseurl=https://repo.charm.sh/yum/&#xA;enabled=1&#xA;gpgcheck=0&#39; | sudo tee /etc/yum.repos.d/charm.repo&#xA;sudo yum install gum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or download it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/gum/releases&#34;&gt;Packages&lt;/a&gt; are available in Debian and RPM formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/gum/releases&#34;&gt;Binaries&lt;/a&gt; are available for Linux, macOS, and Windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Or just install it with &lt;code&gt;go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/charmbracelet/gum@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;gum&lt;/code&gt; is designed to be embedded in scripts and supports all sorts of use cases. Components are configurable and customizable to fit your theme and use case.&lt;/p&gt; &#xA;&lt;p&gt;You can customize with &lt;code&gt;--flags&lt;/code&gt;. See &lt;code&gt;gum &amp;lt;command&amp;gt; --help&lt;/code&gt; for a full view of each command&#39;s customization and configuration options.&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s use an &lt;code&gt;input&lt;/code&gt; and change the cursor color, prompt color, prompt indicator, placeholder text, width, and pre-populate the value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum input --cursor.foreground &#34;#FF0&#34; --prompt.foreground &#34;#0FF&#34; --prompt &#34;* &#34; \&#xA;    --placeholder &#34;What&#39;s up?&#34; --width 80 --value &#34;Not much, hby?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/customization.gif&#34; width=&#34;600&#34; alt=&#34;Gum input displaying most customization options&#34;&gt; &#xA;&lt;h2&gt;Interaction&lt;/h2&gt; &#xA;&lt;h4&gt;Input&lt;/h4&gt; &#xA;&lt;p&gt;Prompt for input with a simple command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum input &amp;gt; answer.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/input_1.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum input typing Not much, you?&#34;&gt; &#xA;&lt;h4&gt;Write&lt;/h4&gt; &#xA;&lt;p&gt;Prompt for some multi-line text.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum write &amp;gt; story.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/write.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum write typing a story&#34;&gt; &#xA;&lt;h4&gt;Filter&lt;/h4&gt; &#xA;&lt;p&gt;Use fuzzy matching to filter a list of values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo Strawberry &amp;gt;&amp;gt; flavors.text&#xA;echo Banana &amp;gt;&amp;gt; flavors.text&#xA;echo Cherry &amp;gt;&amp;gt; flavors.text&#xA;cat flavors.text | gum filter &amp;gt; selection.text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/filter.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum filter on different bubble gum flavors&#34;&gt; &#xA;&lt;h4&gt;Choose&lt;/h4&gt; &#xA;&lt;p&gt;Choose an option from a list of choices.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;Pick a card, any card...&#34;&#xA;CARD=$(gum choose --height 15 {{A,K,Q,J},{10..2}}&#34; &#34;{♠,♥,♣,♦})&#xA;echo &#34;Was your card the $CARD?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also select multiple items with the &lt;code&gt;--limit&lt;/code&gt; flag, which determines the maximum of items that can be chosen.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;Pick your top 5 songs.&#34;&#xA;cat songs.txt | gum choose --limit 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, allow any number of selections with the &lt;code&gt;--no-limit&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;What do you need from the grocery store?&#34;&#xA;cat foods.txt | gum choose --no-limit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/choose.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum choose with numbers and gum flavors&#34;&gt; &#xA;&lt;h4&gt;Confirm&lt;/h4&gt; &#xA;&lt;p&gt;Confirm whether to perform an action. Exits with code &lt;code&gt;0&lt;/code&gt; (affirmative) or &lt;code&gt;1&lt;/code&gt; (negative) depending on selection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum confirm &amp;amp;&amp;amp; rm file.txt || echo &#34;File not removed&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/confirm_2.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum confirm&#34;&gt; &#xA;&lt;h4&gt;Spin&lt;/h4&gt; &#xA;&lt;p&gt;Display a spinner while running a script or command. The spinner will automatically stop after the given command exits.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum spin --spinner dot --title &#34;Buying Bubble Gum...&#34; -- sleep 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/spin.gif&#34; width=&#34;600&#34; alt=&#34;Shell running gum spin while sleeping for 5 seconds&#34;&gt; &#xA;&lt;p&gt;Available spinner types include: &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt;, &lt;code&gt;minidot&lt;/code&gt;, &lt;code&gt;jump&lt;/code&gt;, &lt;code&gt;pulse&lt;/code&gt;, &lt;code&gt;points&lt;/code&gt;, &lt;code&gt;globe&lt;/code&gt;, &lt;code&gt;moon&lt;/code&gt;, &lt;code&gt;monkey&lt;/code&gt;, &lt;code&gt;meter&lt;/code&gt;, &lt;code&gt;hamburger&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Styling&lt;/h2&gt; &#xA;&lt;h4&gt;Style&lt;/h4&gt; &#xA;&lt;p&gt;Pretty print any string with any layout with one command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gum style \&#xA;&#x9;--foreground 212 --border-foreground 212 --border double \&#xA;&#x9;--align center --width 50 --margin &#34;1 2&#34; --padding &#34;2 4&#34; \&#xA;&#x9;&#39;Bubble Gum (1¢)&#39; &#39;So sweet and so fresh!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/style.gif&#34; width=&#34;600&#34; alt=&#34;Bubble Gum, So sweet and so fresh!&#34;&gt; &#xA;&lt;h2&gt;Layout&lt;/h2&gt; &#xA;&lt;h4&gt;Join&lt;/h4&gt; &#xA;&lt;p&gt;Combine text vertically or horizontally. Use this command with &lt;code&gt;gum style&lt;/code&gt; to build layouts and pretty output.&lt;/p&gt; &#xA;&lt;p&gt;Tip: Always wrap the output of &lt;code&gt;gum style&lt;/code&gt; in quotes to preserve newlines (&lt;code&gt;\n&lt;/code&gt;) when using it as an argument in the &lt;code&gt;join&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;I=$(gum style --padding &#34;1 5&#34; --border double --border-foreground 212 &#34;I&#34;)&#xA;LOVE=$(gum style --padding &#34;1 4&#34; --border double --border-foreground 57 &#34;LOVE&#34;)&#xA;BUBBLE=$(gum style --padding &#34;1 8&#34; --border double --border-foreground 255 &#34;Bubble&#34;)&#xA;GUM=$(gum style --padding &#34;1 5&#34; --border double --border-foreground 240 &#34;Gum&#34;)&#xA;&#xA;I_LOVE=$(gum join &#34;$I&#34; &#34;$LOVE&#34;)&#xA;BUBBLE_GUM=$(gum join &#34;$BUBBLE&#34; &#34;$GUM&#34;)&#xA;gum join --align center --vertical &#34;$I_LOVE&#34; &#34;$BUBBLE_GUM&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/join.gif&#34; width=&#34;600&#34; alt=&#34;I LOVE Bubble Gum written out in four boxes with double borders around them.&#34;&gt; &#xA;&lt;h2&gt;Format&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;format&lt;/code&gt; processes and formats bodies of text. &lt;code&gt;gum format&lt;/code&gt; can parse markdown, template strings, and named emojis.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Format some markdown&#xA;gum format -- &#34;# Gum Formats&#34; &#34;- Markdown&#34; &#34;- Code&#34; &#34;- Template&#34; &#34;- Emoji&#34;&#xA;echo &#34;# Gum Formats\n- Markdown\n- Code\n- Template\n- Emoji&#34; | gum format&#xA;&#xA;# Syntax highlight some code&#xA;cat main.go | gum format -t code&#xA;&#xA;# Render text any way you want with templates&#xA;echo &#39;{{ Bold &#34;Tasty&#34; }} {{ Italic &#34;Bubble&#34; }} {{ Color &#34;99&#34; &#34;0&#34; &#34; Gum &#34; }}&#39; \&#xA;    | gum format -t template&#xA;&#xA;# Display your favorite emojis!&#xA;echo &#39;I &lt;span&gt;❤️&lt;/span&gt; Bubble Gum &lt;span&gt;🍬&lt;/span&gt;&#39; | gum format -t emoji&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on template helpers, see the &lt;a href=&#34;https://github.com/muesli/termenv#template-helpers&#34;&gt;Termenv docs&lt;/a&gt;. For a full list of named emojis see the &lt;a href=&#34;https://api.github.com/emojis&#34;&gt;GitHub API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/format.gif&#34; width=&#34;600&#34; alt=&#34;Running gum format for different types of formats&#34;&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/charmbracelet/gum/main/examples/&#34;&gt;examples&lt;/a&gt; directory for more real world use cases.&lt;/p&gt; &#xA;&lt;p&gt;How to use &lt;code&gt;gum&lt;/code&gt; in your daily workflows:&lt;/p&gt; &#xA;&lt;h4&gt;Write a commit message&lt;/h4&gt; &#xA;&lt;p&gt;Prompt for input to write git commit messages with a short summary and longer details with &lt;code&gt;gum input&lt;/code&gt; and &lt;code&gt;gum write&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Bonus points: use &lt;code&gt;gum filter&lt;/code&gt; with the &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/#summary&#34;&gt;Conventional Commits Specification&lt;/a&gt; as a prefix for your commit message.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git commit -m &#34;$(gum input --width 50 --placeholder &#34;Summary of changes&#34;)&#34; \&#xA;           -m &#34;$(gum write --width 80 --placeholder &#34;Details of changes&#34;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Open files in your &lt;code&gt;$EDITOR&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;gum filter&lt;/code&gt; will display a list of all files (searched recursively) through your current directory, with some sensible ignore settings (&lt;code&gt;.git&lt;/code&gt;, &lt;code&gt;node_modules&lt;/code&gt;). You can use this command to easily to pick a file and open it in your &lt;code&gt;$EDITOR&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$EDITOR $(gum filter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Connect to a TMUX session&lt;/h4&gt; &#xA;&lt;p&gt;Pick from a running &lt;code&gt;tmux&lt;/code&gt; session and attach to it. Or, if you&#39;re already in a &lt;code&gt;tmux&lt;/code&gt; session, switch sessions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SESSION=$(tmux list-sessions -F \#S | gum filter --placeholder &#34;Pick session...&#34;)&#xA;tmux switch-client -t $SESSION || tmux attach -t $SESSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/pick-tmux-session.gif&#34; width=&#34;600&#34; alt=&#34;Picking a tmux session with gum filter&#34;&gt; &#xA;&lt;h4&gt;Pick commit hash from your Git history&lt;/h4&gt; &#xA;&lt;p&gt;Filter through your git history searching for commit messages, copying the commit hash of the commit you select.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git log --oneline | gum filter | cut -d&#39; &#39; -f1 # | copy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://stuff.charm.sh/gum/pick-commit.gif&#34; width=&#34;600&#34; alt=&#34;Picking a commit with gum filter&#34;&gt; &#xA;&lt;h4&gt;Choose packages to uninstall&lt;/h4&gt; &#xA;&lt;p&gt;List all packages installed by your package manager (we&#39;ll use &lt;code&gt;brew&lt;/code&gt;) and choose which packages to uninstall.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew list | gum choose --no-limit | xargs brew uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We’d love to hear your thoughts on this project. Feel free to drop us a note!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/charmcli&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.technology/@charm&#34;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charm.sh/slack&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/gum/raw/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://charm.sh/&#34;&gt;&lt;img alt=&#34;The Charm logo&#34; src=&#34;https://stuff.charm.sh/charm-badge.jpg&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Charm热爱开源 • Charm loves open source&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GREENHAT7/pxplan</title>
    <updated>2022-07-31T01:43:48Z</updated>
    <id>tag:github.com,2022-07-31:/GREENHAT7/pxplan</id>
    <link href="https://github.com/GREENHAT7/pxplan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CVE-2022-2022&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pxplan&lt;/h1&gt; &#xA;&lt;p&gt;PX计划&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;lv sec收集归纳的POC&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Goby&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;全网独家700+Goby POC &lt;img src=&#34;https://raw.githubusercontent.com/GREENHAT7/pxplan/main/images/goby.jpg&#34; alt=&#34;goby&#34;&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Nuclei&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;全网独家500+Nuclei POC&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>charmbracelet/bubbletea</title>
    <updated>2022-07-31T01:43:48Z</updated>
    <id>tag:github.com,2022-07-31:/charmbracelet/bubbletea</id>
    <link href="https://github.com/charmbracelet/bubbletea" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful little TUI framework 🏗&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bubble Tea&lt;/h1&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://stuff.charm.sh/bubbletea/bubbletea-github-header-simple.png&#34; width=&#34;313&#34; alt=&#34;Bubble Tea Title Treatment&#34;&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/charmbracelet/bubbletea.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/golang/gddo?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/actions&#34;&gt;&lt;img src=&#34;https://github.com/charmbracelet/bubbletea/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;The fun, functional and stateful way to build terminal apps. A Go framework based on &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt;. Bubble Tea is well-suited for simple and complex terminal applications, either inline, full-window, or a mix of both.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://stuff.charm.sh/bubbletea/bubbletea-example.gif?0&#34; width=&#34;800&#34; alt=&#34;Bubble Tea Example&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Bubble Tea is in use in production and includes a number of features and performance optimizations we’ve added along the way. Among those is a standard framerate-based renderer, a renderer for high-performance scrollable regions which works alongside the main renderer, and mouse support.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;We recommend starting with the &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/tree/master/tutorials/basics&#34;&gt;basics tutorial&lt;/a&gt; followed by the &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/tree/master/tutorials/commands&#34;&gt;commands tutorial&lt;/a&gt;, both of which should give you a good understanding of how things work.&lt;/p&gt; &#xA;&lt;p&gt;There are a bunch of &lt;a href=&#34;https://github.com/charmbracelet/bubbletea/tree/master/examples&#34;&gt;examples&lt;/a&gt;, too!&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;For a bunch of basic user interface components check out &lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;Bubbles&lt;/a&gt;, the official Bubble Tea component library.&lt;/p&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;&lt;img src=&#34;https://stuff.charm.sh/bubbles/bubbles-badge.png&#34; width=&#34;174&#34; alt=&#34;Bubbles Badge&#34;&gt;&lt;/a&gt;&amp;nbsp;&amp;nbsp; &lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;&lt;img src=&#34;https://stuff.charm.sh/bubbles-examples/textinput.gif&#34; width=&#34;400&#34; alt=&#34;Text Input Example from Bubbles&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;h3&gt;Debugging with Delve&lt;/h3&gt; &#xA;&lt;p&gt;Since Bubble Tea apps assume control of stdin and stdout, you’ll need to run delve in headless mode and then connect to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start the debugger&#xA;$ dlv debug --headless .&#xA;API server listening at: 127.0.0.1:34241&#xA;&#xA;# Connect to it from another terminal&#xA;$ dlv connect 127.0.0.1:34241&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the default port used will vary on your system and per run, so actually watch out what address the first &lt;code&gt;dlv&lt;/code&gt; run tells you to connect to.&lt;/p&gt; &#xA;&lt;h3&gt;Logging Stuff&lt;/h3&gt; &#xA;&lt;p&gt;You can log to a debug file to print debug Bubble Tea applications. To do so, include something like…&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if len(os.Getenv(&#34;DEBUG&#34;)) &amp;gt; 0 {&#xA;&#x9;f, err := tea.LogToFile(&#34;debug.log&#34;, &#34;debug&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;fatal:&#34;, err)&#xA;&#x9;&#x9;os.Exit(1)&#xA;&#x9;}&#xA;&#x9;defer f.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;…before you start your Bubble Tea program. To see what’s printed in real time, run &lt;code&gt;tail -f debug.log&lt;/code&gt; while you run your program in another window.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries we use with Bubble Tea&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbles&#34;&gt;Bubbles&lt;/a&gt;: Common Bubble Tea components such as text inputs, viewports, spinners and so on&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/lipgloss&#34;&gt;Lip Gloss&lt;/a&gt;: Style, format and layout tools for terminal applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/harmonica&#34;&gt;Harmonica&lt;/a&gt;: A spring animation library for smooth, natural motion&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lrstanley/bubblezone&#34;&gt;BubbleZone&lt;/a&gt;: Easy mouse event tracking for Bubble Tea components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/muesli/termenv&#34;&gt;Termenv&lt;/a&gt;: Advanced ANSI styling for terminal applications&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/muesli/reflow&#34;&gt;Reflow&lt;/a&gt;: Advanced ANSI-aware methods for working with text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bubble Tea in the Wild&lt;/h2&gt; &#xA;&lt;p&gt;For some Bubble Tea programs in production, see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/daskycodes/at_cli&#34;&gt;AT CLI&lt;/a&gt;: a utility for executing AT Commands via serial port connections&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Azure/aztfy&#34;&gt;Aztify&lt;/a&gt;: bring Microsoft Azure resources under Terraform&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrusme/canard&#34;&gt;Canard&lt;/a&gt;: an RSS client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/charm&#34;&gt;charm&lt;/a&gt;: the official Charm user account manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ajeetdsouza/clidle&#34;&gt;clidle&lt;/a&gt;: a Wordle clone for your terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NVIDIA/container-canary&#34;&gt;container-canary&lt;/a&gt;: a container validator&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purpleclay/dns53&#34;&gt;dns53&lt;/a&gt;: dynamic DNS with Amazon Route53. Expose your EC2 quickly, securely and privately&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/knipferrc/fm&#34;&gt;fm&lt;/a&gt;: a terminal-based file manager&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kbrgl/flapioca&#34;&gt;flapioca&lt;/a&gt;: Flappy Bird on the CLI!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jon4hz/fztea&#34;&gt;fztea&lt;/a&gt;: connect to your Flipper&#39;s UI over serial or make it accessible via SSH&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/caarlos0/fork-cleaner&#34;&gt;fork-cleaner&lt;/a&gt;: cleans up old and inactive forks in your GitHub account&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maaslalani/gambit&#34;&gt;gambit&lt;/a&gt;: play chess in the terminal&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.sr.ht/~rafael/gembro&#34;&gt;gembro&lt;/a&gt;: a mouse-driven Gemini browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joaom00/gh-b&#34;&gt;gh-b&lt;/a&gt;: GitHub CLI extension to easily manage your branches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.github.com/dlvhdr/gh-dash&#34;&gt;gh-dash&lt;/a&gt;: GitHub CLI extension to display a dashboard of PRs and issues&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mritd/gitflow-toolkit&#34;&gt;gitflow-toolkit&lt;/a&gt;: a GitFlow submission tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/glow&#34;&gt;Glow&lt;/a&gt;: a markdown reader, browser and online markdown stash&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orlangure/gocovsh&#34;&gt;gocovsh&lt;/a&gt;: explore Go coverage reports from the CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gonetx/httpit&#34;&gt;httpit&lt;/a&gt;: a rapid http(s) benchmark tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/r-darwish/idnt&#34;&gt;IDNT&lt;/a&gt;: batch software uninstaller&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CamiloGarciaLaRotta/kboard&#34;&gt;kboard&lt;/a&gt;: a typing game&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mergestat/mergestat&#34;&gt;mergestat&lt;/a&gt;: run SQL queries on git repositories&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/minio/mc&#34;&gt;mc&lt;/a&gt;: the official &lt;a href=&#34;https://min.io&#34;&gt;MinIO&lt;/a&gt; client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chip/pathos&#34;&gt;pathos&lt;/a&gt;: pathos - CLI for editing a PATH env variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ZinoKader/portal&#34;&gt;portal&lt;/a&gt;: securely send transfer between computers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SaltFishPr/redis-viewer&#34;&gt;redis-viewer&lt;/a&gt;: browse Redis databases&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maaslalani/slides&#34;&gt;Slides&lt;/a&gt;: a markdown-based presentation tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/soft-serve&#34;&gt;Soft Serve&lt;/a&gt;: a command-line-first Git server that runs a TUI over SSH&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/thestormforge/optimize-controller&#34;&gt;StormForge Optimize Controller&lt;/a&gt;: a tool for experimenting with application configurations in Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wille1101/sttg&#34;&gt;STTG&lt;/a&gt;: teletext client for SVT, Sweden’s national public television station&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abhimanyu003/sttr&#34;&gt;sttr&lt;/a&gt;: run various text transformations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/caarlos0/tasktimer&#34;&gt;tasktimer&lt;/a&gt;: a dead-simple task timer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mathaou/termdbms&#34;&gt;termdbms&lt;/a&gt;: a keyboard and mouse driven database browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/achannarasappa/ticker&#34;&gt;ticker&lt;/a&gt;: a terminal stock watcher and stock position tracker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abdfnx/tran&#34;&gt;tran&lt;/a&gt;: securely transfer stuff between computers (based on &lt;a href=&#34;https://github.com/ZinoKader/portal&#34;&gt;portal&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oz/tz&#34;&gt;tz&lt;/a&gt;: an aid for scheduling across multiple time zones&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ariasmn/ugm&#34;&gt;ugm&lt;/a&gt;: a unix user and group browser&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maaslalani/typer&#34;&gt;Typer&lt;/a&gt;: a typing test&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/charmbracelet/wishlist&#34;&gt;wishlist&lt;/a&gt;: an SSH directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to hear your thoughts on this tutorial. Feel free to drop us a note!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/charmcli&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.technology/@charm&#34;&gt;The Fediverse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charm.sh/slack&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;Bubble Tea is based on the paradigms of &lt;a href=&#34;https://guide.elm-lang.org/architecture/&#34;&gt;The Elm Architecture&lt;/a&gt; by Evan Czaplicki et alia and the excellent &lt;a href=&#34;https://github.com/tj/go-tea&#34;&gt;go-tea&lt;/a&gt; by TJ Holowaychuk. It’s inspired by the many great &lt;a href=&#34;https://de.wikipedia.org/wiki/Zeichenorientierte_Benutzerschnittstelle&#34;&gt;&lt;em&gt;Zeichenorientierte Benutzerschnittstellen&lt;/em&gt;&lt;/a&gt; of days past.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/charmbracelet/bubbletea/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Part of &lt;a href=&#34;https://charm.sh&#34;&gt;Charm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://charm.sh/&#34;&gt;&lt;img alt=&#34;The Charm logo&#34; src=&#34;https://stuff.charm.sh/charm-badge.jpg&#34; width=&#34;400&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Charm热爱开源 • Charm loves open source&lt;/p&gt;</summary>
  </entry>
</feed>