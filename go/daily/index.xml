<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-16T01:29:55Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>expr-lang/expr</title>
    <updated>2023-12-16T01:29:55Z</updated>
    <id>tag:github.com,2023-12-16:/expr-lang/expr</id>
    <link href="https://github.com/expr-lang/expr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Expression language and expression evaluation for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Expr&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] The repository &lt;a href=&#34;https://github.com/antonmedv/expr&#34;&gt;github.com/antonmedv/expr&lt;/a&gt; moved to &lt;a href=&#34;https://github.com/expr-lang/expr&#34;&gt;github.com/&lt;strong&gt;expr-lang&lt;/strong&gt;/expr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/expr-lang/expr/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/expr-lang/expr/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/expr-lang/expr&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/expr-lang/expr&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&amp;amp;can=1&amp;amp;q=proj:expr&#34;&gt;&lt;img src=&#34;https://oss-fuzz-build-logs.storage.googleapis.com/badges/expr.svg?sanitize=true&#34; alt=&#34;Fuzzing Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/expr-lang/expr&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/expr-lang/expr?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Expr&lt;/strong&gt; is a Go-centric expression language designed to deliver dynamic configurations with unparalleled accuracy, safety, and speed.&lt;/p&gt; &#xA;&lt;img src=&#34;https://expr.medv.io/img/logo-small.png&#34; width=&#34;150&#34; alt=&#34;expr logo&#34; align=&#34;right&#34;&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Allow only admins and moderators to moderate comments.&#xA;user.Group in [&#34;admin&#34;, &#34;moderator&#34;] || user.Id == comment.UserId&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Ensure all tweets are less than 240 characters.&#xA;all(Tweets, .Size &amp;lt;= 240)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Expr&lt;/strong&gt; is a safe, fast, and intuitive expression evaluator optimized for the Go language. Here are its standout features:&lt;/p&gt; &#xA;&lt;h3&gt;Safety and Isolation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Memory-Safe&lt;/strong&gt;: Expr is designed with a focus on safety, ensuring that programs do not access unrelated memory or introduce memory vulnerabilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Side-Effect-Free&lt;/strong&gt;: Expressions evaluated in Expr only compute outputs from their inputs, ensuring no side-effects that can change state or produce unintended results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Always Terminating&lt;/strong&gt;: Expr is designed to prevent infinite loops, ensuring that every program will conclude in a reasonable amount of time.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Go Integration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Seamless with Go&lt;/strong&gt;: Integrate Expr into your Go projects without the need to redefine types.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Static Typing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensures type correctness and prevents runtime type errors. &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;out, err := expr.Compile(`name + age`)&#xA;// err: invalid operation + (mismatched types string and int)&#xA;// | name + age&#xA;// | .....^&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;User-Friendly&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Provides user-friendly error messages to assist with debugging and development.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flexibility and Utility&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rich Operators&lt;/strong&gt;: Offers a reasonable set of basic operators for a variety of applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Built-in Functions&lt;/strong&gt;: Functions like &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;any&lt;/code&gt;, &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and &lt;code&gt;map&lt;/code&gt; are provided out-of-the-box.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optimized for Speed&lt;/strong&gt;: Expr stands out in its performance, utilizing an optimizing compiler and a bytecode virtual machine. Check out these &lt;a href=&#34;https://github.com/antonmedv/golang-expression-evaluation-comparison#readme&#34;&gt;benchmarks&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/expr-lang/expr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://expr.medv.io/docs/Getting-Started&#34;&gt;Getting Started&lt;/a&gt; page for developer documentation.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://expr.medv.io/docs/Language-Definition&#34;&gt;Language Definition&lt;/a&gt; page to learn the syntax.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Expr Code Editor&lt;/h2&gt; &#xA;&lt;a href=&#34;https://bit.ly/expr-code-editor&#34;&gt; &lt;img src=&#34;https://expr-lang.github.io/expr/ogimage.png&#34; align=&#34;center&#34; alt=&#34;Expr Code Editor&#34; width=&#34;1200&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Also, I have an embeddable code editor written in JavaScript which allows editing expressions with syntax highlighting and autocomplete based on your types declaration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://expr-lang.github.io/expr/&#34;&gt;Learn more â†’&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/z7T8ytJ1T1d&#34;&gt;Play Online&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/expr-lang/expr&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;env := map[string]interface{}{&#xA;&#x9;&#x9;&#34;greet&#34;:   &#34;Hello, %v!&#34;,&#xA;&#x9;&#x9;&#34;names&#34;:   []string{&#34;world&#34;, &#34;you&#34;},&#xA;&#x9;&#x9;&#34;sprintf&#34;: fmt.Sprintf,&#xA;&#x9;}&#xA;&#xA;&#x9;code := `sprintf(greet, names[0])`&#xA;&#xA;&#x9;program, err := expr.Compile(code, expr.Env(env))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;output, err := expr.Run(program, env)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(output)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://play.golang.org/p/4S4brsIvU4i&#34;&gt;Play Online&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/expr-lang/expr&#34;&#xA;)&#xA;&#xA;type Tweet struct {&#xA;&#x9;Len int&#xA;}&#xA;&#xA;type Env struct {&#xA;&#x9;Tweets []Tweet&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;code := `all(Tweets, {.Len &amp;lt;= 240})`&#xA;&#xA;&#x9;program, err := expr.Compile(code, expr.Env(Env{}))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;env := Env{&#xA;&#x9;&#x9;Tweets: []Tweet{{42}, {98}, {69}},&#xA;&#x9;}&#xA;&#x9;output, err := expr.Run(program, env)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(output)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who uses Expr?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.com&#34;&gt;Google&lt;/a&gt; uses Expr as one of its expression languages on the &lt;a href=&#34;https://cloud.google.com&#34;&gt;Google Cloud Platform&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uber.com&#34;&gt;Uber&lt;/a&gt; uses Expr to allow customization of its Uber Eats marketplace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godaddy.com&#34;&gt;GoDaddy&lt;/a&gt; employs Expr for the customization of its GoDaddy Pro product.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bytedance.com&#34;&gt;ByteDance&lt;/a&gt; incorporates Expr into its internal business rule engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aviasales.ru&#34;&gt;Aviasales&lt;/a&gt; utilizes Expr as a business rule engine for its flight search engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wish.com&#34;&gt;Wish.com&lt;/a&gt; employs Expr in its decision-making rule engine for the Wish Assistant.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://argoproj.github.io&#34;&gt;Argo&lt;/a&gt; integrates Expr into Argo Rollouts and Argo Workflows for Kubernetes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crowdsec.net&#34;&gt;Crowdsec&lt;/a&gt; incorporates Expr into its security automation tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.faceit.com&#34;&gt;FACEIT&lt;/a&gt; uses Expr to enhance customization of its eSports matchmaking algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.qiniu.com&#34;&gt;qiniu&lt;/a&gt; implements Expr in its trade systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jungleegames.com/&#34;&gt;Junglee Games&lt;/a&gt; uses Expr for its in-house marketing retention tool, Project Audience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opentelemetry.io&#34;&gt;OpenTelemetry&lt;/a&gt; integrates Expr into the OpenTelemetry Collector.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/philips-labs/tabia&#34;&gt;Philips Labs&lt;/a&gt; employs Expr in Tabia, a tool designed to collect insights on their code bases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coredns.io&#34;&gt;CoreDNS&lt;/a&gt; uses Expr in CoreDNS, which is a DNS server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chaos-mesh.org&#34;&gt;Chaos Mesh&lt;/a&gt; incorporates Expr into Chaos Mesh, a cloud-native Chaos Engineering platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://milvus.io&#34;&gt;Milvus&lt;/a&gt; integrates Expr into Milvus, an open-source vector database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://visually.io&#34;&gt;Visually.io&lt;/a&gt; employs Expr as a business rule engine for its personalization targeting algorithm.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akvorado/akvorado&#34;&gt;Akvorado&lt;/a&gt; utilizes Expr to classify exporters and interfaces in network flows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/expr-lang/expr/edit/master/README.md&#34;&gt;Add your company too&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/expr-lang/expr/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>