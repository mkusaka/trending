<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-06T01:37:04Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>distribworks/dkron</title>
    <updated>2023-07-06T01:37:04Z</updated>
    <id>tag:github.com,2023-07-06:/distribworks/dkron</id>
    <link href="https://github.com/distribworks/dkron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dkron - Distributed, fault tolerant job scheduling system https://dkron.io&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/distribworks/dkron/master/docs/images/DKRON_STICKER_OK_CMYK_RGB_CONV_300.png&#34; alt=&#34;Dkron&#34; title=&#34;Dkron&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Dkron - Distributed, fault tolerant job scheduling system for cloud native environments &lt;a href=&#34;https://godoc.org/github.com/distribworks/dkron&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/distribworks/dkron?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/distribworks/dkron/actions&#34;&gt;&lt;img src=&#34;https://github.com/distribworks/dkron/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Actions Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/distribworks/dkron&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/distribworks/dkron.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Website: &lt;a href=&#34;http://dkron.io/&#34;&gt;http://dkron.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Dkron is a distributed cron service, easy to setup and fault tolerant with focus in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy: Easy to use with a great UI&lt;/li&gt; &#xA; &lt;li&gt;Reliable: Completely fault tolerant&lt;/li&gt; &#xA; &lt;li&gt;Highly scalable: Able to handle high volumes of scheduled jobs and thousands of nodes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Dkron is written in Go and leverage the power of the Raft protocol and Serf for providing fault tolerance, reliability and scalability while keeping simple and easily installable.&lt;/p&gt; &#xA;&lt;p&gt;Dkron is inspired by the google whitepaper &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2745840&#34;&gt;Reliable Cron across the Planet&lt;/a&gt; and by Airbnb Chronos borrowing the same features from it.&lt;/p&gt; &#xA;&lt;p&gt;Dkron runs on Linux, OSX and Windows. It can be used to run scheduled commands on a server cluster using any combination of servers for each job. It has no single points of failure due to the use of the Gossip protocol and fault tolerant distributed databases.&lt;/p&gt; &#xA;&lt;p&gt;You can use Dkron to run the most important part of your company, scheduled jobs.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dkron.io/docs/basics/installation&#34;&gt;Installation instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Full, comprehensive documentation is viewable on the &lt;a href=&#34;http://dkron.io&#34;&gt;Dkron website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Quick start&lt;/h2&gt; &#xA;&lt;p&gt;The best way to test and develop dkron is using docker, you will need &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; installed before proceeding.&lt;/p&gt; &#xA;&lt;p&gt;Clone the repository.&lt;/p&gt; &#xA;&lt;p&gt;Next, run the included Docker Compose config:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;docker-compose up&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will start Dkron instances. To add more Dkron instances to the clusters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up --scale dkron-server=4&#xA;docker-compose up --scale dkron-agent=10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the port mapping using &lt;code&gt;docker-compose ps&lt;/code&gt; and use the browser to navigate to the Dkron dashboard using one of the ports mapped by compose.&lt;/p&gt; &#xA;&lt;p&gt;To add jobs to the system read the &lt;a href=&#34;https://dkron.io/api/&#34;&gt;API docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frontend development&lt;/h2&gt; &#xA;&lt;p&gt;Dkron dashboard is built using &lt;a href=&#34;https://marmelab.com/react-admin/&#34;&gt;React Admin&lt;/a&gt; as a single page application.&lt;/p&gt; &#xA;&lt;p&gt;To start developing the dashboard enter the &lt;code&gt;ui&lt;/code&gt; directory and run &lt;code&gt;npm install&lt;/code&gt; to get the frontend dependencies and then start the local server with &lt;code&gt;npm start&lt;/code&gt; it should start a new local web server and open a new browser window serving de web ui.&lt;/p&gt; &#xA;&lt;p&gt;Make your changes to the code, then run &lt;code&gt;make ui&lt;/code&gt; to generate assets files. This is a method of embedding resources in Go applications.&lt;/p&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;p&gt;Chef cookbook &lt;a href=&#34;https://supermarket.chef.io/cookbooks/dkron&#34;&gt;https://supermarket.chef.io/cookbooks/dkron&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python Client Library &lt;a href=&#34;https://github.com/oldmantaiter/pydkron&#34;&gt;https://github.com/oldmantaiter/pydkron&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ruby client &lt;a href=&#34;https://github.com/jobandtalent/dkron-rb&#34;&gt;https://github.com/jobandtalent/dkron-rb&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PHP client &lt;a href=&#34;https://github.com/gromo/dkron-php-adapter&#34;&gt;https://github.com/gromo/dkron-php-adapter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Terraform provider &lt;a href=&#34;https://github.com/bozerkins/terraform-provider-dkron&#34;&gt;https://github.com/bozerkins/terraform-provider-dkron&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Manage and run jobs in Dkron from your django project &lt;a href=&#34;https://github.com/surface-security/django-dkron&#34;&gt;https://github.com/surface-security/django-dkron&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get in touch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Twitter: &lt;a href=&#34;https://twitter.com/distribworks&#34;&gt;@distribworks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat: &lt;a href=&#34;https://gitter.im/distribworks/dkron&#34;&gt;https://gitter.im/distribworks/dkron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Email: victor at distrib.works&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>caarlos0/env</title>
    <updated>2023-07-06T01:37:04Z</updated>
    <id>tag:github.com,2023-07-06:/caarlos0/env</id>
    <link href="https://github.com/caarlos0/env" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple and zero-dependencies library to parse environment variables into structs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;env&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/caarlos0/env/actions?workflow=build&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/caarlos0/env/build.yml?branch=main&amp;amp;style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/caarlos0/env&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/caarlos0/env.svg?logo=codecov&amp;amp;style=for-the-badge&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/caarlos0/env/v9&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/godoc-reference-5272B4.svg?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple and zero-dependencies library to parse environment variables into &lt;code&gt;struct&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Get the module with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get github.com/caarlos0/env/v9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The usage looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type config struct {&#xA;&#x9;Home         string        `env:&#34;HOME&#34;`&#xA;&#x9;Port         int           `env:&#34;PORT&#34; envDefault:&#34;3000&#34;`&#xA;&#x9;Password     string        `env:&#34;PASSWORD,unset&#34;`&#xA;&#x9;IsProduction bool          `env:&#34;PRODUCTION&#34;`&#xA;&#x9;Hosts        []string      `env:&#34;HOSTS&#34; envSeparator:&#34;:&#34;`&#xA;&#x9;Duration     time.Duration `env:&#34;DURATION&#34;`&#xA;&#x9;TempFolder   string        `env:&#34;TEMP_FOLDER,expand&#34; envDefault:&#34;${HOME}/tmp&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;cfg := config{}&#xA;&#x9;if err := env.Parse(&amp;amp;cfg); err != nil {&#xA;&#x9;&#x9;fmt.Printf(&#34;%+v\n&#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, cfg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ PRODUCTION=true HOSTS=&#34;host1:host2:host3&#34; DURATION=1s go run main.go&#xA;{Home:/your/home Port:3000 IsProduction:true Hosts:[host1 host2 host3] Duration:1s}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;This is important!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Unexported fields&lt;/em&gt; are &lt;strong&gt;ignored&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported types and defaults&lt;/h2&gt; &#xA;&lt;p&gt;Out of the box all built-in types are supported, plus a few others that are commonly used.&lt;/p&gt; &#xA;&lt;p&gt;Complete list:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int8&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int16&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int32&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;int64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uint8&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uint16&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uint32&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uint64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;float32&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;float64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;time.Duration&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;encoding.TextUnmarshaler&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url.URL&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pointers, slices and slices of pointers, and maps of those types are also supported.&lt;/p&gt; &#xA;&lt;p&gt;You can also use/define a &lt;a href=&#34;https://raw.githubusercontent.com/caarlos0/env/main/#custom-parser-funcs&#34;&gt;custom parser func&lt;/a&gt; for any other type you want.&lt;/p&gt; &#xA;&lt;p&gt;You can also use custom keys and values in your maps, as long as you provide a parser function for them.&lt;/p&gt; &#xA;&lt;p&gt;If you set the &lt;code&gt;envDefault&lt;/code&gt; tag for something, this value will be used in the case of absence of it in the environment.&lt;/p&gt; &#xA;&lt;p&gt;By default, slice types will split the environment value on &lt;code&gt;,&lt;/code&gt;; you can change this behavior by setting the &lt;code&gt;envSeparator&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Parser Funcs&lt;/h2&gt; &#xA;&lt;p&gt;If you have a type that is not supported out of the box by the lib, you are able to use (or define) and pass custom parsers (and their associated &lt;code&gt;reflect.Type&lt;/code&gt;) to the &lt;code&gt;env.ParseWithOptions()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;In addition to accepting a struct pointer (same as &lt;code&gt;Parse()&lt;/code&gt;), this function also accepts a &lt;code&gt;Options{}&lt;/code&gt;, and you can set your custom parsers in the &lt;code&gt;FuncMap&lt;/code&gt; field.&lt;/p&gt; &#xA;&lt;p&gt;If you add a custom parser for, say &lt;code&gt;Foo&lt;/code&gt;, it will also be used to parse &lt;code&gt;*Foo&lt;/code&gt; and &lt;code&gt;[]Foo&lt;/code&gt; types.&lt;/p&gt; &#xA;&lt;p&gt;Check the examples in the &lt;a href=&#34;http://pkg.go.dev/github.com/caarlos0/env/v9&#34;&gt;go doc&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h3&gt;A note about &lt;code&gt;TextUnmarshaler&lt;/code&gt; and &lt;code&gt;time.Time&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Env supports by default anything that implements the &lt;code&gt;TextUnmarshaler&lt;/code&gt; interface. That includes things like &lt;code&gt;time.Time&lt;/code&gt; for example. The upside is that depending on the format you need, you don&#39;t need to change anything. The downside is that if you do need time in another format, you&#39;ll need to create your own type.&lt;/p&gt; &#xA;&lt;p&gt;Its fairly straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type MyTime time.Time&#xA;&#xA;func (t *MyTime) UnmarshalText(text []byte) error {&#xA;&#x9;tt, err := time.Parse(&#34;2006-01-02&#34;, string(text))&#xA;&#x9;*t = MyTime(tt)&#xA;&#x9;return err&#xA;}&#xA;&#xA;type Config struct {&#xA;&#x9;SomeTime MyTime `env:&#34;SOME_TIME&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then you can parse &lt;code&gt;Config&lt;/code&gt; with &lt;code&gt;env.Parse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Required fields&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;env&lt;/code&gt; tag option &lt;code&gt;required&lt;/code&gt; (e.g., &lt;code&gt;env:&#34;tagKey,required&#34;&lt;/code&gt;) can be added to ensure that some environment variable is set. In the example above, an error is returned if the &lt;code&gt;config&lt;/code&gt; struct is changed to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type config struct {&#xA;&#x9;SecretKey string `env:&#34;SECRET_KEY,required&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Note that being set is not the same as being empty. If the variable is set, but empty, the field will have its type&#39;s default value. This also means that custom parser funcs will not be invoked.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Expand vars&lt;/h2&gt; &#xA;&lt;p&gt;If you set the &lt;code&gt;expand&lt;/code&gt; option, environment variables (either in &lt;code&gt;${var}&lt;/code&gt; or &lt;code&gt;$var&lt;/code&gt; format) in the string will be replaced according with the actual value of the variable. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type config struct {&#xA;&#x9;SecretKey string `env:&#34;SECRET_KEY,expand&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also works with &lt;code&gt;envDefault&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Not Empty fields&lt;/h2&gt; &#xA;&lt;p&gt;While &lt;code&gt;required&lt;/code&gt; demands the environment variable to be set, it doesn&#39;t check its value. If you want to make sure the environment is set and not empty, you need to use the &lt;code&gt;notEmpty&lt;/code&gt; tag option instead (&lt;code&gt;env:&#34;SOME_ENV,notEmpty&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type config struct {&#xA;&#x9;SecretKey string `env:&#34;SECRET_KEY,notEmpty&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unset environment variable after reading it&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;env&lt;/code&gt; tag option &lt;code&gt;unset&lt;/code&gt; (e.g., &lt;code&gt;env:&#34;tagKey,unset&#34;&lt;/code&gt;) can be added to ensure that some environment variable is unset after reading it.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type config struct {&#xA;&#x9;SecretKey string `env:&#34;SECRET_KEY,unset&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;From file&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;env&lt;/code&gt; tag option &lt;code&gt;file&lt;/code&gt; (e.g., &lt;code&gt;env:&#34;tagKey,file&#34;&lt;/code&gt;) can be added in order to indicate that the value of the variable shall be loaded from a file. The path of that file is given by the environment variable associated with it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type config struct {&#xA;&#x9;Secret       string   `env:&#34;SECRET,file&#34;`&#xA;&#x9;Password     string   `env:&#34;PASSWORD,file&#34; envDefault:&#34;/tmp/password&#34;`&#xA;&#x9;Certificate  string   `env:&#34;CERTIFICATE,file,expand&#34; envDefault:&#34;${CERTIFICATE_FILE}&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;cfg := config{}&#xA;&#x9;if err := env.Parse(&amp;amp;cfg); err != nil {&#xA;&#x9;&#x9;fmt.Printf(&#34;%+v\n&#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, cfg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo qwerty &amp;gt; /tmp/secret&#xA;$ echo dvorak &amp;gt; /tmp/password&#xA;$ echo coleman &amp;gt; /tmp/certificate&#xA;&#xA;$ SECRET=/tmp/secret  \&#xA;&#x9;CERTIFICATE_FILE=/tmp/certificate \&#xA;&#x9;go run main.go&#xA;{Secret:qwerty Password:dvorak Certificate:coleman}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;h3&gt;Use field names as environment variables by default&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to set the &lt;code&gt;env&lt;/code&gt; tag on every field, you can use the &lt;code&gt;UseFieldNameByDefault&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;It will use the field name as environment variable name.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;Username     string // will use $USERNAME&#xA;&#x9;Password     string // will use $PASSWORD&#xA;&#x9;UserFullName string // will use $USER_FULL_NAME&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;cfg := &amp;amp;Config{}&#xA;&#x9;opts := env.Options{UseFieldNameByDefault: true}&#xA;&#xA;&#x9;// Load env vars.&#xA;&#x9;if err := env.ParseWithOptions(cfg, opts); err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// Print the loaded data.&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, cfg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment&lt;/h3&gt; &#xA;&lt;p&gt;By setting the &lt;code&gt;Options.Environment&lt;/code&gt; map you can tell &lt;code&gt;Parse&lt;/code&gt; to add those &lt;code&gt;keys&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; as &lt;code&gt;env&lt;/code&gt; vars before parsing is done. These &lt;code&gt;envs&lt;/code&gt; are stored in the map and never actually set by &lt;code&gt;os.Setenv&lt;/code&gt;. This option effectively makes &lt;code&gt;env&lt;/code&gt; ignore the OS environment variables: only the ones provided in the option are used.&lt;/p&gt; &#xA;&lt;p&gt;This can make your testing scenarios a bit more clean and easy to handle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;Password string `env:&#34;PASSWORD&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;cfg := &amp;amp;Config{}&#xA;&#x9;opts := env.Options{Environment: map[string]string{&#xA;&#x9;&#x9;&#34;PASSWORD&#34;: &#34;MY_PASSWORD&#34;,&#xA;&#x9;}}&#xA;&#xA;&#x9;// Load env vars.&#xA;&#x9;if err := env.ParseWithOptions(cfg, opts); err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// Print the loaded data.&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, cfg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Changing default tag name&lt;/h3&gt; &#xA;&lt;p&gt;You can change what tag name to use for setting the env vars by setting the &lt;code&gt;Options.TagName&lt;/code&gt; variable.&lt;/p&gt; &#xA;&lt;p&gt;For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;Password string `json:&#34;PASSWORD&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;cfg := &amp;amp;Config{}&#xA;&#x9;opts := env.Options{TagName: &#34;json&#34;}&#xA;&#xA;&#x9;// Load env vars.&#xA;&#x9;if err := env.ParseWithOptions(cfg, opts); err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// Print the loaded data.&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, cfg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prefixes&lt;/h3&gt; &#xA;&lt;p&gt;You can prefix sub-structs env tags, as well as a whole &lt;code&gt;env.Parse&lt;/code&gt; call.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example flexing it a bit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;Home string `env:&#34;HOME&#34;`&#xA;}&#xA;&#xA;type ComplexConfig struct {&#xA;&#x9;Foo   Config `envPrefix:&#34;FOO_&#34;`&#xA;&#x9;Clean Config&#xA;&#x9;Bar   Config `envPrefix:&#34;BAR_&#34;`&#xA;&#x9;Blah  string `env:&#34;BLAH&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;cfg := &amp;amp;ComplexConfig{}&#xA;&#x9;opts := env.Options{&#xA;&#x9;&#x9;Prefix: &#34;T_&#34;,&#xA;&#x9;&#x9;Environment: map[string]string{&#xA;&#x9;&#x9;&#x9;&#34;T_FOO_HOME&#34;: &#34;/foo&#34;,&#xA;&#x9;&#x9;&#x9;&#34;T_BAR_HOME&#34;: &#34;/bar&#34;,&#xA;&#x9;&#x9;&#x9;&#34;T_BLAH&#34;:     &#34;blahhh&#34;,&#xA;&#x9;&#x9;&#x9;&#34;T_HOME&#34;:     &#34;/clean&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#xA;&#x9;// Load env vars.&#xA;&#x9;if err := env.ParseWithOptions(cfg, opts); err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// Print the loaded data.&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, cfg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;On set hooks&lt;/h3&gt; &#xA;&lt;p&gt;You might want to listen to value sets and, for example, log something or do some other kind of logic. You can do this by passing a &lt;code&gt;OnSet&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;Username string `env:&#34;USERNAME&#34; envDefault:&#34;admin&#34;`&#xA;&#x9;Password string `env:&#34;PASSWORD&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;cfg := &amp;amp;Config{}&#xA;&#x9;opts := env.Options{&#xA;&#x9;&#x9;OnSet: func(tag string, value interface{}, isDefault bool) {&#xA;&#x9;&#x9;&#x9;fmt.Printf(&#34;Set %s to %v (default? %v)\n&#34;, tag, value, isDefault)&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#xA;&#x9;// Load env vars.&#xA;&#x9;if err := env.ParseWithOptions(cfg, opts); err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// Print the loaded data.&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, cfg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Making all fields to required&lt;/h2&gt; &#xA;&lt;p&gt;You can make all fields that don&#39;t have a default value be required by setting the &lt;code&gt;RequiredIfNoDef: true&lt;/code&gt; in the &lt;code&gt;Options&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;Username string `env:&#34;USERNAME&#34; envDefault:&#34;admin&#34;`&#xA;&#x9;Password string `env:&#34;PASSWORD&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;cfg := &amp;amp;Config{}&#xA;&#x9;opts := env.Options{RequiredIfNoDef: true}&#xA;&#xA;&#x9;// Load env vars.&#xA;&#x9;if err := env.ParseWithOptions(cfg, opts); err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// Print the loaded data.&#xA;&#x9;fmt.Printf(&#34;%+v\n&#34;, cfg)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Defaults from code&lt;/h2&gt; &#xA;&lt;p&gt;You may define default value also in code, by initialising the config data before it&#39;s filled by &lt;code&gt;env.Parse&lt;/code&gt;. Default values defined as struct tags will overwrite existing values during Parse.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;Username string `env:&#34;USERNAME&#34; envDefault:&#34;admin&#34;`&#xA;&#x9;Password string `env:&#34;PASSWORD&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;var cfg = Config{&#xA;&#x9;&#x9;Username: &#34;test&#34;,&#xA;&#x9;&#x9;Password: &#34;123456&#34;,&#xA;&#x9;}&#xA;&#xA;&#x9;if err := env.Parse(&amp;amp;cfg); err != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;failed:&#34;, err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Printf(&#34;%+v&#34;, cfg)  // {Username:admin Password:123456}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error handling&lt;/h2&gt; &#xA;&lt;p&gt;You can handle the errors the library throws like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/caarlos0/env/v9&#34;&#xA;)&#xA;&#xA;type Config struct {&#xA;&#x9;Username string `env:&#34;USERNAME&#34; envDefault:&#34;admin&#34;`&#xA;&#x9;Password string `env:&#34;PASSWORD&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;var cfg Config&#xA;&#x9;err := env.Parse(&amp;amp;cfg)&#xA;&#x9;if e, ok := err.(*env.AggregateError); ok {&#xA;&#x9;&#x9;for _, er := range e.Errors {&#xA;&#x9;&#x9;&#x9;switch v := er.(type) {&#xA;&#x9;&#x9;&#x9;case env.ParseError:&#xA;&#x9;&#x9;&#x9;&#x9;// handle it&#xA;&#x9;&#x9;&#x9;case env.NotStructPtrError:&#xA;&#x9;&#x9;&#x9;&#x9;// handle it&#xA;&#x9;&#x9;&#x9;case env.NoParserError:&#xA;&#x9;&#x9;&#x9;&#x9;// handle it&#xA;&#x9;&#x9;&#x9;case env.NoSupportedTagOptionError:&#xA;&#x9;&#x9;&#x9;&#x9;// handle it&#xA;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;fmt.Printf(&#34;Unknown error type %v&#34;, v)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Printf(&#34;%+v&#34;, cfg)  // {Username:admin Password:123456}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Info&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;If you want to check if an specific error is in the chain, you can also use &lt;code&gt;errors.Is()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/caarlos0/env&#34;&gt;&lt;img src=&#34;https://starchart.cc/caarlos0/env.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bytedance/sonic</title>
    <updated>2023-07-06T01:37:04Z</updated>
    <id>tag:github.com,2023-07-06:/bytedance/sonic</id>
    <link href="https://github.com/bytedance/sonic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A blazingly fast JSON serializing &amp; deserializing library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Sonic&lt;/h1&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/sonic/main/README_ZH_CN.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A blazingly fast JSON serializing &amp;amp; deserializing library, accelerated by JIT (just-in-time compiling) and SIMD (single-instruction-multiple-data).&lt;/p&gt; &#xA;&lt;h2&gt;Requirement&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.16~1.20&lt;/li&gt; &#xA; &lt;li&gt;Linux / MacOS / Windows(need go1.17 above)&lt;/li&gt; &#xA; &lt;li&gt;Amd64 ARCH&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runtime object binding without code generation&lt;/li&gt; &#xA; &lt;li&gt;Complete APIs for JSON value manipulation&lt;/li&gt; &#xA; &lt;li&gt;Fast, fast, fast!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;For &lt;strong&gt;all sizes&lt;/strong&gt; of json and &lt;strong&gt;all scenarios&lt;/strong&gt; of usage, &lt;strong&gt;Sonic performs best&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytedance/sonic/raw/main/decoder/testdata_test.go#L19&#34;&gt;Medium&lt;/a&gt; (13KB, 300+ key, 6 layers)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;goversion: 1.17.1&#xA;goos: darwin&#xA;goarch: amd64&#xA;cpu: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz&#xA;BenchmarkEncoder_Generic_Sonic-16                      32393 ns/op         402.40 MB/s       11965 B/op          4 allocs/op&#xA;BenchmarkEncoder_Generic_Sonic_Fast-16                 21668 ns/op         601.57 MB/s       10940 B/op          4 allocs/op&#xA;BenchmarkEncoder_Generic_JsonIter-16                   42168 ns/op         309.12 MB/s       14345 B/op        115 allocs/op&#xA;BenchmarkEncoder_Generic_GoJson-16                     65189 ns/op         199.96 MB/s       23261 B/op         16 allocs/op&#xA;BenchmarkEncoder_Generic_StdLib-16                    106322 ns/op         122.60 MB/s       49136 B/op        789 allocs/op&#xA;BenchmarkEncoder_Binding_Sonic-16                       6269 ns/op        2079.26 MB/s       14173 B/op          4 allocs/op&#xA;BenchmarkEncoder_Binding_Sonic_Fast-16                  5281 ns/op        2468.16 MB/s       12322 B/op          4 allocs/op&#xA;BenchmarkEncoder_Binding_JsonIter-16                   20056 ns/op         649.93 MB/s        9488 B/op          2 allocs/op&#xA;BenchmarkEncoder_Binding_GoJson-16                      8311 ns/op        1568.32 MB/s        9481 B/op          1 allocs/op&#xA;BenchmarkEncoder_Binding_StdLib-16                     16448 ns/op         792.52 MB/s        9479 B/op          1 allocs/op&#xA;BenchmarkEncoder_Parallel_Generic_Sonic-16              6681 ns/op        1950.93 MB/s       12738 B/op          4 allocs/op&#xA;BenchmarkEncoder_Parallel_Generic_Sonic_Fast-16         4179 ns/op        3118.99 MB/s       10757 B/op          4 allocs/op&#xA;BenchmarkEncoder_Parallel_Generic_JsonIter-16           9861 ns/op        1321.84 MB/s       14362 B/op        115 allocs/op&#xA;BenchmarkEncoder_Parallel_Generic_GoJson-16            18850 ns/op         691.52 MB/s       23278 B/op         16 allocs/op&#xA;BenchmarkEncoder_Parallel_Generic_StdLib-16            45902 ns/op         283.97 MB/s       49174 B/op        789 allocs/op&#xA;BenchmarkEncoder_Parallel_Binding_Sonic-16              1480 ns/op        8810.09 MB/s       13049 B/op          4 allocs/op&#xA;BenchmarkEncoder_Parallel_Binding_Sonic_Fast-16         1209 ns/op        10785.23 MB/s      11546 B/op          4 allocs/op&#xA;BenchmarkEncoder_Parallel_Binding_JsonIter-16           6170 ns/op        2112.58 MB/s        9504 B/op          2 allocs/op&#xA;BenchmarkEncoder_Parallel_Binding_GoJson-16             3321 ns/op        3925.52 MB/s        9496 B/op          1 allocs/op&#xA;BenchmarkEncoder_Parallel_Binding_StdLib-16             3739 ns/op        3486.49 MB/s        9480 B/op          1 allocs/op&#xA;&#xA;BenchmarkDecoder_Generic_Sonic-16                      66812 ns/op         195.10 MB/s       57602 B/op        723 allocs/op&#xA;BenchmarkDecoder_Generic_Sonic_Fast-16                 54523 ns/op         239.07 MB/s       49786 B/op        313 allocs/op&#xA;BenchmarkDecoder_Generic_StdLib-16                    124260 ns/op         104.90 MB/s       50869 B/op        772 allocs/op&#xA;BenchmarkDecoder_Generic_JsonIter-16                   91274 ns/op         142.81 MB/s       55782 B/op       1068 allocs/op&#xA;BenchmarkDecoder_Generic_GoJson-16                     88569 ns/op         147.17 MB/s       66367 B/op        973 allocs/op&#xA;BenchmarkDecoder_Binding_Sonic-16                      32557 ns/op         400.38 MB/s       28302 B/op        137 allocs/op&#xA;BenchmarkDecoder_Binding_Sonic_Fast-16                 28649 ns/op         455.00 MB/s       24999 B/op         34 allocs/op&#xA;BenchmarkDecoder_Binding_StdLib-16                    111437 ns/op         116.97 MB/s       10576 B/op        208 allocs/op&#xA;BenchmarkDecoder_Binding_JsonIter-16                   35090 ns/op         371.48 MB/s       14673 B/op        385 allocs/op&#xA;BenchmarkDecoder_Binding_GoJson-16                     28738 ns/op         453.59 MB/s       22039 B/op         49 allocs/op&#xA;BenchmarkDecoder_Parallel_Generic_Sonic-16             12321 ns/op        1057.91 MB/s       57233 B/op        723 allocs/op&#xA;BenchmarkDecoder_Parallel_Generic_Sonic_Fast-16        10644 ns/op        1224.64 MB/s       49362 B/op        313 allocs/op&#xA;BenchmarkDecoder_Parallel_Generic_StdLib-16            57587 ns/op         226.35 MB/s       50874 B/op        772 allocs/op&#xA;BenchmarkDecoder_Parallel_Generic_JsonIter-16          38666 ns/op         337.12 MB/s       55789 B/op       1068 allocs/op&#xA;BenchmarkDecoder_Parallel_Generic_GoJson-16            30259 ns/op         430.79 MB/s       66370 B/op        974 allocs/op&#xA;BenchmarkDecoder_Parallel_Binding_Sonic-16              5965 ns/op        2185.28 MB/s       27747 B/op        137 allocs/op&#xA;BenchmarkDecoder_Parallel_Binding_Sonic_Fast-16         5170 ns/op        2521.31 MB/s       24715 B/op         34 allocs/op&#xA;BenchmarkDecoder_Parallel_Binding_StdLib-16            27582 ns/op         472.58 MB/s       10576 B/op        208 allocs/op&#xA;BenchmarkDecoder_Parallel_Binding_JsonIter-16          13571 ns/op         960.51 MB/s       14685 B/op        385 allocs/op&#xA;BenchmarkDecoder_Parallel_Binding_GoJson-16            10031 ns/op        1299.51 MB/s       22111 B/op         49 allocs/op&#xA;&#xA;BenchmarkGetOne_Sonic-16                                3276 ns/op        3975.78 MB/s          24 B/op          1 allocs/op&#xA;BenchmarkGetOne_Gjson-16                                9431 ns/op        1380.81 MB/s           0 B/op          0 allocs/op&#xA;BenchmarkGetOne_Jsoniter-16                            51178 ns/op         254.46 MB/s       27936 B/op        647 allocs/op&#xA;BenchmarkGetOne_Parallel_Sonic-16                      216.7 ns/op       60098.95 MB/s          24 B/op          1 allocs/op&#xA;BenchmarkGetOne_Parallel_Gjson-16                       1076 ns/op        12098.62 MB/s          0 B/op          0 allocs/op&#xA;BenchmarkGetOne_Parallel_Jsoniter-16                   17741 ns/op         734.06 MB/s       27945 B/op        647 allocs/op&#xA;BenchmarkSetOne_Sonic-16                               9571 ns/op         1360.61 MB/s        1584 B/op         17 allocs/op&#xA;BenchmarkSetOne_Sjson-16                               36456 ns/op         357.22 MB/s       52180 B/op          9 allocs/op&#xA;BenchmarkSetOne_Jsoniter-16                            79475 ns/op         163.86 MB/s       45862 B/op        964 allocs/op&#xA;BenchmarkSetOne_Parallel_Sonic-16                      850.9 ns/op       15305.31 MB/s        1584 B/op         17 allocs/op&#xA;BenchmarkSetOne_Parallel_Sjson-16                      18194 ns/op         715.77 MB/s       52247 B/op          9 allocs/op&#xA;BenchmarkSetOne_Parallel_Jsoniter-16                   33560 ns/op         388.05 MB/s       45892 B/op        964 allocs/op&#xA;BenchmarkLoadNode/LoadAll()-16                         11384 ns/op        1143.93 MB/s        6307 B/op         25 allocs/op&#xA;BenchmarkLoadNode_Parallel/LoadAll()-16                 5493 ns/op        2370.68 MB/s        7145 B/op         25 allocs/op&#xA;BenchmarkLoadNode/Interface()-16                       17722 ns/op         734.85 MB/s       13323 B/op         88 allocs/op&#xA;BenchmarkLoadNode_Parallel/Interface()-16              10330 ns/op        1260.70 MB/s       15178 B/op         88 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytedance/sonic/raw/main/testdata/small.go&#34;&gt;Small&lt;/a&gt; (400B, 11 keys, 3 layers) &lt;img src=&#34;https://raw.githubusercontent.com/bytedance/sonic/main/docs/imgs/bench-small.png&#34; alt=&#34;small benchmarks&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bytedance/sonic/raw/main/testdata/twitter.json&#34;&gt;Large&lt;/a&gt; (635KB, 10000+ key, 6 layers) &lt;img src=&#34;https://raw.githubusercontent.com/bytedance/sonic/main/docs/imgs/bench-large.png&#34; alt=&#34;large benchmarks&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/bytedance/sonic/raw/main/bench.sh&#34;&gt;bench.sh&lt;/a&gt; for benchmark codes.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/sonic/main/docs/INTRODUCTION.md&#34;&gt;INTRODUCTION.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Marshal/Unmarshal&lt;/h3&gt; &#xA;&lt;p&gt;Default behaviors are mostly consistent with &lt;code&gt;encoding/json&lt;/code&gt;, except HTML escaping form (see &lt;a href=&#34;https://github.com/bytedance/sonic/raw/main/README.md#escape-html&#34;&gt;Escape HTML&lt;/a&gt;) and &lt;code&gt;SortKeys&lt;/code&gt; feature (optional support see &lt;a href=&#34;https://github.com/bytedance/sonic/raw/main/README.md#sort-keys&#34;&gt;Sort Keys&lt;/a&gt;) that is &lt;strong&gt;NOT&lt;/strong&gt; in conformity to &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8259&#34;&gt;RFC8259&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;&#xA;var data YourSchema&#xA;// Marshal&#xA;output, err := sonic.Marshal(&amp;amp;data)&#xA;// Unmarshal&#xA;err := sonic.Unmarshal(output, &amp;amp;data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streaming IO&lt;/h3&gt; &#xA;&lt;p&gt;Sonic supports decoding json from &lt;code&gt;io.Reader&lt;/code&gt; or encoding objects into &lt;code&gt;io.&lt;/code&gt;Writer`, aims at handling multiple values as well as reducing memory consumption.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;encoder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var o1 = map[string]interface{}{&#xA;    &#34;a&#34;: &#34;b&#34;,&#xA;}&#xA;var o2 = 1&#xA;var w = bytes.NewBuffer(nil)&#xA;var enc = sonic.ConfigDefault.NewEncoder(w)&#xA;enc.Encode(o1)&#xA;enc.Encode(o2)&#xA;fmt.Println(w.String())&#xA;// Output:&#xA;// {&#34;a&#34;:&#34;b&#34;}&#xA;// 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;decoder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;var o =  map[string]interface{}{}&#xA;var r = strings.NewReader(`{&#34;a&#34;:&#34;b&#34;}{&#34;1&#34;:&#34;2&#34;}`)&#xA;var dec = sonic.ConfigDefault.NewDecoder(r)&#xA;dec.Decode(&amp;amp;o)&#xA;dec.Decode(&amp;amp;o)&#xA;fmt.Printf(&#34;%+v&#34;, o)&#xA;// Output:&#xA;// map[1:2 a:b]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use Number/Use Int64&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic/decoder&#34;&#xA;&#xA;var input = `1`&#xA;var data interface{}&#xA;&#xA;// default float64&#xA;dc := decoder.NewDecoder(input)&#xA;dc.Decode(&amp;amp;data) // data == float64(1)&#xA;// use json.Number&#xA;dc = decoder.NewDecoder(input)&#xA;dc.UseNumber()&#xA;dc.Decode(&amp;amp;data) // data == json.Number(&#34;1&#34;)&#xA;// use int64&#xA;dc = decoder.NewDecoder(input)&#xA;dc.UseInt64()&#xA;dc.Decode(&amp;amp;data) // data == int64(1)&#xA;&#xA;root, err := sonic.GetFromString(input)&#xA;// Get json.Number&#xA;jn := root.Number()&#xA;jm := root.InterfaceUseNumber().(json.Number) // jn == jm&#xA;// Get float64&#xA;fn := root.Float64()&#xA;fm := root.Interface().(float64) // jn == jm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sort Keys&lt;/h3&gt; &#xA;&lt;p&gt;On account of the performance loss from sorting (roughly 10%), sonic doesn&#39;t enable this feature by default. If your component depends on it to work (like &lt;a href=&#34;https://github.com/facebook/zstd&#34;&gt;zstd&lt;/a&gt;), Use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;import &#34;github.com/bytedance/sonic/encoder&#34;&#xA;&#xA;// Binding map only&#xA;m := map[string]interface{}{}&#xA;v, err := encoder.Encode(m, encoder.SortMapKeys)&#xA;&#xA;// Or ast.Node.SortKeys() before marshal&#xA;var root := sonic.Get(JSON)&#xA;err := root.SortKeys()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Escape HTML&lt;/h3&gt; &#xA;&lt;p&gt;On account of the performance loss (roughly 15%), sonic doesn&#39;t enable this feature by default. You can use &lt;code&gt;encoder.EscapeHTML&lt;/code&gt; option to open this feature (align with &lt;code&gt;encoding/json.HTMLEscape&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;&#xA;v := map[string]string{&#34;&amp;amp;&amp;amp;&#34;:&#34;&amp;lt;&amp;gt;&#34;}&#xA;ret, err := Encode(v, EscapeHTML) // ret == `{&#34;\u0026\u0026&#34;:{&#34;X&#34;:&#34;\u003c\u003e&#34;}}`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compact Format&lt;/h3&gt; &#xA;&lt;p&gt;Sonic encodes primitive objects (struct/map...) as compact-format JSON by default, except marshaling &lt;code&gt;json.RawMessage&lt;/code&gt; or &lt;code&gt;json.Marshaler&lt;/code&gt;: sonic ensures validating their output JSON but &lt;strong&gt;DONOT&lt;/strong&gt; compacting them for performance concerns. We provide the option &lt;code&gt;encoder.CompactMarshaler&lt;/code&gt; to add compacting process.&lt;/p&gt; &#xA;&lt;h3&gt;Print Error&lt;/h3&gt; &#xA;&lt;p&gt;If there invalid syntax in input JSON, sonic will return &lt;code&gt;decoder.SyntaxError&lt;/code&gt;, which supports pretty-printing of error position&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;import &#34;github.com/bytedance/sonic/decoder&#34;&#xA;&#xA;var data interface{}&#xA;err := sonic.UnmarshalString(&#34;[[[}]]&#34;, &amp;amp;data)&#xA;if err != nil {&#xA;    /* One line by default */&#xA;    println(e.Error()) // &#34;Syntax error at index 3: invalid char\n\n\t[[[}]]\n\t...^..\n&#34;&#xA;    /* Pretty print */&#xA;    if e, ok := err.(decoder.SyntaxError); ok {&#xA;        /*Syntax error at index 3: invalid char&#xA;&#xA;            [[[}]]&#xA;            ...^..&#xA;        */&#xA;        print(e.Description())&#xA;    } else if me, ok := err.(*decoder.MismatchTypeError); ok {&#xA;        // decoder.MismatchTypeError is new to Sonic v1.6.0&#xA;        print(me.Description())&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mismatched Types [Sonic v1.6.0]&lt;/h4&gt; &#xA;&lt;p&gt;If there a &lt;strong&gt;mismatch-typed&lt;/strong&gt; value for a given key, sonic will report &lt;code&gt;decoder.MismatchTypeError&lt;/code&gt; (if there are many, report the last one), but still skip wrong the value and keep decoding next JSON.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;import &#34;github.com/bytedance/sonic/decoder&#34;&#xA;&#xA;var data = struct{&#xA;    A int&#xA;    B int&#xA;}{}&#xA;err := UnmarshalString(`{&#34;A&#34;:&#34;1&#34;,&#34;B&#34;:1}`, &amp;amp;data)&#xA;println(err.Error())    // Mismatch type int with value string &#34;at index 5: mismatched type with value\n\n\t{\&#34;A\&#34;:\&#34;1\&#34;,\&#34;B\&#34;:1}\n\t.....^.........\n&#34;&#xA;fmt.Printf(&#34;%+v&#34;, data) // {A:0 B:1}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ast.Node&lt;/h3&gt; &#xA;&lt;p&gt;Sonic/ast.Node is a completely self-contained AST for JSON. It implements serialization and deserialization both and provides robust APIs for obtaining and modification of generic data.&lt;/p&gt; &#xA;&lt;h4&gt;Get/Index&lt;/h4&gt; &#xA;&lt;p&gt;Search partial JSON by given paths, which must be non-negative integer or string, or nil&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;&#xA;input := []byte(`{&#34;key1&#34;:[{},{&#34;key2&#34;:{&#34;key3&#34;:[1,2,3]}}]}`)&#xA;&#xA;// no path, returns entire json&#xA;root, err := sonic.Get(input)&#xA;raw := root.Raw() // == string(input)&#xA;&#xA;// multiple paths&#xA;root, err := sonic.Get(input, &#34;key1&#34;, 1, &#34;key2&#34;)&#xA;sub := root.Get(&#34;key3&#34;).Index(2).Int64() // == 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: since &lt;code&gt;Index()&lt;/code&gt; uses offset to locate data, which is much faster than scanning like &lt;code&gt;Get()&lt;/code&gt;, we suggest you use it as much as possible. And sonic also provides another API &lt;code&gt;IndexOrGet()&lt;/code&gt; to underlying use offset as well as ensure the key is matched.&lt;/p&gt; &#xA;&lt;h4&gt;Set/Unset&lt;/h4&gt; &#xA;&lt;p&gt;Modify the json content by Set()/Unset()&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;&#xA;// Set&#xA;exist, err := root.Set(&#34;key4&#34;, NewBool(true)) // exist == false&#xA;alias1 := root.Get(&#34;key4&#34;)&#xA;println(alias1.Valid()) // true&#xA;alias2 := root.Index(1)&#xA;println(alias1 == alias2) // true&#xA;&#xA;// Unset&#xA;exist, err := root.UnsetByIndex(1) // exist == true&#xA;println(root.Get(&#34;key4&#34;).Check()) // &#34;value not exist&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Serialize&lt;/h4&gt; &#xA;&lt;p&gt;To encode &lt;code&gt;ast.Node&lt;/code&gt; as json, use &lt;code&gt;MarshalJson()&lt;/code&gt; or &lt;code&gt;json.Marshal()&lt;/code&gt; (MUST pass the node&#39;s pointer)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;encoding/json&#34;&#xA;    &#34;github.com/bytedance/sonic&#34;&#xA;)&#xA;&#xA;buf, err := root.MarshalJson()&#xA;println(string(buf))                // {&#34;key1&#34;:[{},{&#34;key2&#34;:{&#34;key3&#34;:[1,2,3]}}]}&#xA;exp, err := json.Marshal(&amp;amp;root)     // WARN: use pointer&#xA;println(string(buf) == string(exp)) // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;APIs&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;validation: &lt;code&gt;Check()&lt;/code&gt;, &lt;code&gt;Error()&lt;/code&gt;, &lt;code&gt;Valid()&lt;/code&gt;, &lt;code&gt;Exist()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;searching: &lt;code&gt;Index()&lt;/code&gt;, &lt;code&gt;Get()&lt;/code&gt;, &lt;code&gt;IndexPair()&lt;/code&gt;, &lt;code&gt;IndexOrGet()&lt;/code&gt;, &lt;code&gt;GetByPath()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;go-type casting: &lt;code&gt;Int64()&lt;/code&gt;, &lt;code&gt;Float64()&lt;/code&gt;, &lt;code&gt;String()&lt;/code&gt;, &lt;code&gt;Number()&lt;/code&gt;, &lt;code&gt;Bool()&lt;/code&gt;, &lt;code&gt;Map[UseNumber|UseNode]()&lt;/code&gt;, &lt;code&gt;Array[UseNumber|UseNode]()&lt;/code&gt;, &lt;code&gt;Interface[UseNumber|UseNode]()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;go-type packing: &lt;code&gt;NewRaw()&lt;/code&gt;, &lt;code&gt;NewNumber()&lt;/code&gt;, &lt;code&gt;NewNull()&lt;/code&gt;, &lt;code&gt;NewBool()&lt;/code&gt;, &lt;code&gt;NewString()&lt;/code&gt;, &lt;code&gt;NewObject()&lt;/code&gt;, &lt;code&gt;NewArray()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;iteration: &lt;code&gt;Values()&lt;/code&gt;, &lt;code&gt;Properties()&lt;/code&gt;, &lt;code&gt;ForEach()&lt;/code&gt;, &lt;code&gt;SortKeys()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;modification: &lt;code&gt;Set()&lt;/code&gt;, &lt;code&gt;SetByIndex()&lt;/code&gt;, &lt;code&gt;Add()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Sonic &lt;strong&gt;DOES NOT&lt;/strong&gt; ensure to support all environments, due to the difficulty of developing high-performance codes. For developers who use sonic to build their applications in different environments, we have the following suggestions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Developing on &lt;strong&gt;Mac M1&lt;/strong&gt;: Make sure you have Rosetta 2 installed on your machine, and set &lt;code&gt;GOARCH=amd64&lt;/code&gt; when building your application. Rosetta 2 can automatically translate x86 binaries to arm64 binaries and run x86 applications on Mac M1.&lt;/li&gt; &#xA; &lt;li&gt;Developing on &lt;strong&gt;Linux arm64&lt;/strong&gt;: You can install qemu and use the &lt;code&gt;qemu-x86_64 -cpu max&lt;/code&gt; command to convert x86 binaries to amr64 binaries for applications built with sonic. The qemu can achieve a similar transfer effect to Rosetta 2 on Mac M1.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For developers who want to use sonic on Linux arm64 without qemu, or those who want to handle JSON strictly consistent with &lt;code&gt;encoding/json&lt;/code&gt;, we provide some compatible APIs as &lt;code&gt;sonic.API&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ConfigDefault&lt;/code&gt;: the sonic&#39;s default config (&lt;code&gt;EscapeHTML=false&lt;/code&gt;,&lt;code&gt;SortKeys=false&lt;/code&gt;...) to run on sonic-supporting environment. It will fall back to &lt;code&gt;encoding/json&lt;/code&gt; with the corresponding config, and some options like &lt;code&gt;SortKeys=false&lt;/code&gt; will be invalid.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConfigStd&lt;/code&gt;: the std-compatible config (&lt;code&gt;EscapeHTML=true&lt;/code&gt;,&lt;code&gt;SortKeys=true&lt;/code&gt;...) to run on sonic-supporting environment. It will fall back to &lt;code&gt;encoding/json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ConfigFastest&lt;/code&gt;: the fastest config (&lt;code&gt;NoQuoteTextMarshaler=true&lt;/code&gt;) to run on sonic-supporting environment. It will fall back to &lt;code&gt;encoding/json&lt;/code&gt; with the corresponding config, and some options will be invalid.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Pretouch&lt;/h3&gt; &#xA;&lt;p&gt;Since Sonic uses &lt;a href=&#34;https://github.com/twitchyliquid64/golang-asm&#34;&gt;golang-asm&lt;/a&gt; as a JIT assembler, which is NOT very suitable for runtime compiling, first-hit running of a huge schema may cause request-timeout or even process-OOM. For better stability, we advise &lt;strong&gt;using &lt;code&gt;Pretouch()&lt;/code&gt; for huge-schema or compact-memory applications&lt;/strong&gt; before &lt;code&gt;Marshal()/Unmarshal()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;reflect&#34;&#xA;    &#34;github.com/bytedance/sonic&#34;&#xA;    &#34;github.com/bytedance/sonic/option&#34;&#xA;)&#xA;&#xA;func init() {&#xA;    var v HugeStruct&#xA;&#xA;    // For most large types (nesting depth &amp;lt;= option.DefaultMaxInlineDepth)&#xA;    err := sonic.Pretouch(reflect.TypeOf(v))&#xA;&#xA;    // with more CompileOption...&#xA;    err := sonic.Pretouch(reflect.TypeOf(v), &#xA;        // If the type is too deep nesting (nesting depth &amp;gt; option.DefaultMaxInlineDepth),&#xA;        // you can set compile recursive loops in Pretouch for better stability in JIT.&#xA;        option.WithCompileRecursiveDepth(loop),&#xA;        // For a large nested struct, try to set a smaller depth to reduce compiling time.&#xA;        option.WithCompileMaxInlineDepth(depth),&#xA;    )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Copy string&lt;/h3&gt; &#xA;&lt;p&gt;When decoding &lt;strong&gt;string values without any escaped characters&lt;/strong&gt;, sonic references them from the origin JSON buffer instead of mallocing a new buffer to copy. This helps a lot for CPU performance but may leave the whole JSON buffer in memory as long as the decoded objects are being used. In practice, we found the extra memory introduced by referring JSON buffer is usually 20% ~ 80% of decoded objects. Once an application holds these objects for a long time (for example, cache the decoded objects for reusing), its in-use memory on the server may go up. We provide the option &lt;code&gt;decoder.CopyString()&lt;/code&gt; for users to choose not to reference the JSON buffer, which may cause a decline in CPU performance to some degree.&lt;/p&gt; &#xA;&lt;h3&gt;Pass string or []byte?&lt;/h3&gt; &#xA;&lt;p&gt;For alignment to &lt;code&gt;encoding/json&lt;/code&gt;, we provide API to pass &lt;code&gt;[]byte&lt;/code&gt; as an argument, but the string-to-bytes copy is conducted at the same time considering safety, which may lose performance when the origin JSON is huge. Therefore, you can use &lt;code&gt;UnmarshalString()&lt;/code&gt; and &lt;code&gt;GetFromString()&lt;/code&gt; to pass a string, as long as your origin data is a string or &lt;strong&gt;nocopy-cast&lt;/strong&gt; is safe for your []byte. We also provide API &lt;code&gt;MarshalString()&lt;/code&gt; for convenient &lt;strong&gt;nocopy-cast&lt;/strong&gt; of encoded JSON []byte, which is safe since sonic&#39;s output bytes is always duplicated and unique.&lt;/p&gt; &#xA;&lt;h3&gt;Accelerate &lt;code&gt;encoding.TextMarshaler&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To ensure data security, sonic.Encoder quotes and escapes string values from &lt;code&gt;encoding.TextMarshaler&lt;/code&gt; interfaces by default, which may degrade performance much if most of your data is in form of them. We provide &lt;code&gt;encoder.NoQuoteTextMarshaler&lt;/code&gt; to skip these operations, which means you &lt;strong&gt;MUST&lt;/strong&gt; ensure their output string escaped and quoted following &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8259&#34;&gt;RFC8259&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Better performance for generic data&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;strong&gt;fully-parsed&lt;/strong&gt; scenario, &lt;code&gt;Unmarshal()&lt;/code&gt; performs better than &lt;code&gt;Get()&lt;/code&gt;+&lt;code&gt;Node.Interface()&lt;/code&gt;. But if you only have a part of the schema for specific json, you can combine &lt;code&gt;Get()&lt;/code&gt; and &lt;code&gt;Unmarshal()&lt;/code&gt; together:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;&#xA;node, err := sonic.GetFromString(_TwitterJson, &#34;statuses&#34;, 3, &#34;user&#34;)&#xA;var user User // your partial schema...&#xA;err = sonic.UnmarshalString(node.Raw(), &amp;amp;user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even if you don&#39;t have any schema, use &lt;code&gt;ast.Node&lt;/code&gt; as the container of generic values instead of &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;interface&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/bytedance/sonic&#34;&#xA;&#xA;root, err := sonic.GetFromString(_TwitterJson)&#xA;user := root.GetByPath(&#34;statuses&#34;, 3, &#34;user&#34;)  // === root.Get(&#34;status&#34;).Index(3).Get(&#34;user&#34;)&#xA;err = user.Check()&#xA;&#xA;// err = user.LoadAll() // only call this when you want to use &#39;user&#39; concurrently...&#xA;go someFunc(user)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why? Because &lt;code&gt;ast.Node&lt;/code&gt; stores its children using &lt;code&gt;array&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Array&lt;/code&gt;&#39;s performance is &lt;strong&gt;much better&lt;/strong&gt; than &lt;code&gt;Map&lt;/code&gt; when Inserting (Deserialize) and Scanning (Serialize) data;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hashing&lt;/strong&gt; (&lt;code&gt;map[x]&lt;/code&gt;) is not as efficient as &lt;strong&gt;Indexing&lt;/strong&gt; (&lt;code&gt;array[x]&lt;/code&gt;), which &lt;code&gt;ast.Node&lt;/code&gt; can conduct on &lt;strong&gt;both array and object&lt;/strong&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;code&gt;Interface()&lt;/code&gt;/&lt;code&gt;Map()&lt;/code&gt; means Sonic must parse all the underlying values, while &lt;code&gt;ast.Node&lt;/code&gt; can parse them &lt;strong&gt;on demand&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;CAUTION:&lt;/strong&gt; &lt;code&gt;ast.Node&lt;/code&gt; &lt;strong&gt;DOESN&#39;T&lt;/strong&gt; ensure concurrent security directly, due to its &lt;strong&gt;lazy-load&lt;/strong&gt; design. However, you can call &lt;code&gt;Node.Load()&lt;/code&gt;/&lt;code&gt;Node.LoadAll()&lt;/code&gt; to achieve that, which may bring performance reduction while it still works faster than converting to &lt;code&gt;map&lt;/code&gt; or &lt;code&gt;interface{}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Sonic is a subproject of &lt;a href=&#34;https://www.cloudwego.io/&#34;&gt;CloudWeGo&lt;/a&gt;. We are committed to building a cloud native ecosystem.&lt;/p&gt;</summary>
  </entry>
</feed>