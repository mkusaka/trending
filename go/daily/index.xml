<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-19T01:44:09Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>loov/lensm</title>
    <updated>2022-07-19T01:44:09Z</updated>
    <id>tag:github.com,2022-07-19:/loov/lensm</id>
    <link href="https://github.com/loov/lensm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go assembly and source viewer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lensm&lt;/h1&gt; &#xA;&lt;p&gt;A tool for viewing assembly and source.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/loov/lensm/main/screenshot.gif&#34; alt=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install with the usual Go commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install loov.dev/lensm@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;For Linux you may need to add some &lt;a href=&#34;https://gioui.org/doc/install/linux&#34;&gt;additional dependencies&lt;/a&gt;. You can use &lt;code&gt;go install --tags nowayland loov.dev/lensm@main&lt;/code&gt; or &lt;code&gt;go install --tags nox11 loov.dev/lensm@main&lt;/code&gt; respectively to skip building Wayland or X11 version.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the program provide a regular expression filter for the symbol you want to inspect. &lt;code&gt;-watch&lt;/code&gt; allows to automatically reload the executable and information when it changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lensm -watch -filter Fibonacci lensm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The program requires a binary that is built on your computer, otherwise the source code for the functions cannot be loaded.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;I wrote a blog post at &lt;a href=&#34;https://www.storj.io/blog/lensm&#34;&gt;https://www.storj.io/blog/lensm&lt;/a&gt; on why and how the core functionality works.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tylertreat/comcast</title>
    <updated>2022-07-19T01:44:09Z</updated>
    <id>tag:github.com,2022-07-19:/tylertreat/comcast</id>
    <link href="https://github.com/tylertreat/comcast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simulating shitty network connections so you can build better systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Comcast&lt;/h1&gt; &#xA;&lt;p&gt;Testing distributed systems under hard failures like network partitions and instance termination is critical, but it&#39;s also important we test them under &lt;a href=&#34;http://www.bravenewgeek.com/sometimes-kill-9-isnt-enough/&#34;&gt;less catastrophic conditions&lt;/a&gt; because this is what they most often experience. Comcast is a tool designed to simulate common network problems like latency, bandwidth restrictions, and dropped/reordered/corrupted packets.&lt;/p&gt; &#xA;&lt;p&gt;It works by wrapping up some system tools in a portable(ish) way. On BSD-derived systems such as OSX, we use tools like &lt;code&gt;ipfw&lt;/code&gt; and &lt;code&gt;pfctl&lt;/code&gt; to inject failure. On Linux, we use &lt;code&gt;iptables&lt;/code&gt; and &lt;code&gt;tc&lt;/code&gt;. Comcast is merely a thin wrapper around these controls. Windows support may be possible with &lt;code&gt;wipfw&lt;/code&gt; or even the native network stack, but this has not yet been implemented in Comcast and may be at a later date.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go install github.com/tylertreat/comcast@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;On Linux, Comcast supports several options: device, latency, target/default bandwidth, packet loss, protocol, and port number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ comcast --device=eth0 --latency=250 --target-bw=1000 --default-bw=1000000 --packet-loss=10% --target-addr=8.8.8.8,10.0.0.0/24 --target-proto=tcp,udp,icmp --target-port=80,22,1000:2000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OSX, Comcast will check for &lt;code&gt;pfctl&lt;/code&gt; support (as of Yosemite), which supports the same options as above. If &lt;code&gt;pfctl&lt;/code&gt; is not available, it will use &lt;code&gt;ipfw&lt;/code&gt; instead, which supports device, latency, target bandwidth, and packet-loss options.&lt;/p&gt; &#xA;&lt;p&gt;On BSD (with &lt;code&gt;ipfw&lt;/code&gt;), Comcast currently supports only: device, latency, target bandwidth, and packet loss.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ comcast --device=eth0 --latency=250 --target-bw=1000 --packet-loss=10%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will add 250ms of latency, limit bandwidth to 1Mbps, and drop 10% of packets to the targetted (on Linux) destination addresses using the specified protocols on the specified port numbers (slow lane). The default bandwidth specified will apply to all egress traffic (fast lane). To turn this off, run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ comcast --stop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, comcast will determine the system commands to execute, log them to stdout, and execute them. The &lt;code&gt;--dry-run&lt;/code&gt; flag will skip execution.&lt;/p&gt; &#xA;&lt;h2&gt;I don&#39;t trust you, this code sucks, I hate Go, etc.&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t like running code that executes shell commands for you (despite it being open source, so you can read it and change the code) or want finer-grained control, you can run them directly instead. Read the man pages on these things for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;On Linux, you can use &lt;code&gt;iptables&lt;/code&gt; to drop incoming and outgoing packets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ iptables -A INPUT -m statistic --mode random --probability 0.1 -j DROP&#xA;$ iptables -A OUTPUT -m statistic --mode random --probability 0.1 -j DROP&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;tc&lt;/code&gt; which supports some additional options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tc qdisc add dev eth0 root netem delay 50ms 20ms distribution normal&#xA;$ tc qdisc change dev eth0 root netem reorder 0.02 duplicate 0.05 corrupt 0.01&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ tc qdisc del dev eth0 root netem&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BSD/OSX&lt;/h3&gt; &#xA;&lt;p&gt;To shape traffic in BSD-derived systems, create an &lt;code&gt;ipfw&lt;/code&gt; pipe and configure it. You can control incoming and outgoing traffic separately for any specific host or network.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfw add 1 pipe 1 ip from me to any&#xA;$ ipfw add 2 pipe 1 ip from any to me&#xA;$ ipfw pipe 1 config delay 500ms bw 1Mbit/s plr 0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reset:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ipfw delete 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;ipfw&lt;/code&gt; was removed in OSX Yosemite in favor of &lt;code&gt;pfctl&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Network Condition Profiles&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a list of network conditions with values that you can plug into Comcast. Please add any more that you may come across.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Latency&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Bandwidth&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;Packet-loss&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;GPRS (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;500&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;50&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;EDGE (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;300&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;250&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;3G/HSDPA (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;250&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;750&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;1.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DIAL-UP (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;185&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DSL (poor)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;70&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;DSL (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;8000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WIFI (good)&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;40&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;30000&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Starlink&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;2.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>tulir/whatsmeow</title>
    <updated>2022-07-19T01:44:09Z</updated>
    <id>tag:github.com,2022-07-19:/tulir/whatsmeow</id>
    <link href="https://github.com/tulir/whatsmeow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go library for the WhatsApp web multidevice API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;whatsmeow&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/go.mau.fi/whatsmeow&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/go.mau.fi/whatsmeow.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;whatsmeow is a Go library for the WhatsApp web multidevice API.&lt;/p&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;p&gt;Matrix room: &lt;a href=&#34;https://matrix.to/#/#whatsmeow:maunium.net&#34;&gt;#whatsmeow:maunium.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For questions about the WhatsApp protocol (like how to send a specific type of message), you can also use the &lt;a href=&#34;https://github.com/tulir/whatsmeow/discussions/categories/whatsapp-protocol-q-a&#34;&gt;WhatsApp protocol Q&amp;amp;A&lt;/a&gt; section on GitHub discussions.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://pkg.go.dev/go.mau.fi/whatsmeow&#34;&gt;godoc&lt;/a&gt; includes docs for all methods and event types. There&#39;s also a &lt;a href=&#34;https://godocs.io/go.mau.fi/whatsmeow#example-package&#34;&gt;simple example&lt;/a&gt; at the top.&lt;/p&gt; &#xA;&lt;p&gt;Also see &lt;a href=&#34;https://raw.githubusercontent.com/tulir/whatsmeow/main/mdtest&#34;&gt;mdtest&lt;/a&gt; for a CLI tool you can easily try out whatsmeow with.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Most core features are already present:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Sending messages to private chats and groups (both text and media)&lt;/li&gt; &#xA; &lt;li&gt;Receiving all messages&lt;/li&gt; &#xA; &lt;li&gt;Managing groups and receiving group change events&lt;/li&gt; &#xA; &lt;li&gt;Joining via invite messages, using and creating invite links&lt;/li&gt; &#xA; &lt;li&gt;Sending and receiving typing notifications&lt;/li&gt; &#xA; &lt;li&gt;Sending and receiving delivery and read receipts&lt;/li&gt; &#xA; &lt;li&gt;Reading app state (contact list, chat pin/mute status, etc)&lt;/li&gt; &#xA; &lt;li&gt;Sending and handling retry receipts if message decryption fails&lt;/li&gt; &#xA; &lt;li&gt;Sending status messages (experimental, may not work for large contact lists)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Things that are not yet implemented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Writing app state (contact list, chat pin/mute status, etc)&lt;/li&gt; &#xA; &lt;li&gt;Sending broadcast list messages (this is not supported on WhatsApp web either)&lt;/li&gt; &#xA; &lt;li&gt;Calls&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>