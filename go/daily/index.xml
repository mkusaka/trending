<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-27T01:34:17Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MichaelMure/git-bug</title>
    <updated>2022-11-27T01:34:17Z</updated>
    <id>tag:github.com,2022-11-27:/MichaelMure/git-bug</id>
    <link href="https://github.com/MichaelMure/git-bug" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Distributed, offline-first bug tracker embedded in git, with bridges&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;150px&#34; src=&#34;https://cdn.rawgit.com/MichaelMure/git-bug/master/misc/logo/logo-alpha-flat-bg.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;git-bug&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.gnu.org/licenses/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPLv3+-blue.svg?sanitize=true&#34; alt=&#34;License: GPL v3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/MichaelMure/git-bug&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/MichaelMure/git-bug?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/MichaelMure/git-bug&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/MichaelMure/git-bug&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/the-git-bug/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;code&gt;git-bug&lt;/code&gt; is a bug tracker that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;is fully embedded in git&lt;/strong&gt;: you only need your git repository to have a bug tracker&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;is distributed&lt;/strong&gt;: use your normal git remote to collaborate, push and pull your bugs!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;works offline&lt;/strong&gt;: in a plane or under the sea? Keep reading and writing bugs!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;prevents vendor lock-in&lt;/strong&gt;: your usual service is down or went bad? You already have a full backup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;is fast&lt;/strong&gt;: listing bugs or opening them is a matter of milliseconds&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;doesn&#39;t pollute your project&lt;/strong&gt;: no files are added in your project&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;integrates with your tooling&lt;/strong&gt;: use the UI you like (CLI, terminal, web) or integrate with your existing tools through the CLI or the GraphQL API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bridges to other bug trackers&lt;/strong&gt;: use &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/#bridges&#34;&gt;bridges&lt;/a&gt; to import and export to other trackers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;span&gt;🚧&lt;/span&gt; This is now more than a proof of concept, but still not fully stable. Expect dragons and unfinished business. &lt;span&gt;🚧&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Help needed!&lt;/h2&gt; &#xA;&lt;p&gt;This project has grown bigger than I can handle by myself, especially with a day job. I&#39;m looking for people to help on or maintain part of it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;each bridges (go)&lt;/li&gt; &#xA; &lt;li&gt;the terminal UI (go)&lt;/li&gt; &#xA; &lt;li&gt;the web UI (Typescript/React/GraphQL)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Individually, those pieces are not especially complex but doing everything make it hard for me to focus on the core where things get more complicated. If this is useful for you or you just want to join the fun, maybe consider it?&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Pre-compiled binaries&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Go to the &lt;a href=&#34;https://github.com/MichaelMure/git-bug/releases/latest&#34;&gt;release page&lt;/a&gt; and download the appropriate binary for your system.&lt;/li&gt; &#xA;  &lt;li&gt;Copy the binary anywhere in your $PATH&lt;/li&gt; &#xA;  &lt;li&gt;Rename the binary to &lt;code&gt;git-bug&lt;/code&gt; (or &lt;code&gt;git-bug.exe&lt;/code&gt; on windows)&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;That&#39;s all !&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Windows packages&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/ScoopInstaller/Main/raw/master/bucket/git-bug.json&#34;&gt;Scoop&lt;/a&gt; &lt;pre&gt;&lt;code&gt;scoop install git-bug&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Linux packages&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/?K=git-bug&#34;&gt;Archlinux (AUR)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/NixOS/nixpkgs/raw/master/pkgs/applications/version-management/git-and-tools/git-bug/default.nix#L31&#34;&gt;NixOS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;macOS packages&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/git-bug&#34;&gt;Homebrew&lt;/a&gt; &lt;pre&gt;&lt;code&gt;brew install git-bug&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;FreeBSD package/port&lt;/summary&gt; &#xA; &lt;p&gt;Install via the package manager&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;pkg install git-bug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Or from the ports collection&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;cd /usr/ports/devel/git-bug &amp;amp;&amp;amp; make install clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Compile from git (unstable)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:MichaelMure/git-bug.git&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If it&#39;s not done already, add the golang binary directory in your PATH:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:$(go env GOROOT)/bin:$(go env GOPATH)/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Workflows&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to use &lt;code&gt;git-bug&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Native workflow&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/misc/diagrams/native_workflow.png&#34; alt=&#34;Native workflow&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;This is the pure &lt;code&gt;git-bug&lt;/code&gt; experience. In a similar fashion as with code, use &lt;code&gt;git bug push&lt;/code&gt; and &lt;code&gt;git bug pull&lt;/code&gt; to push and pull your bugs between git remotes and collaborate with your teammate.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Bridge workflow&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/misc/diagrams/bridge_workflow.png&#34; alt=&#34;Bridge workflow&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;As &lt;code&gt;git-bug&lt;/code&gt; has bridges with other bug-trackers, you can use it as your personal local remote interface. Sync with &lt;code&gt;git bug bridge pull&lt;/code&gt; and &lt;code&gt;git bug bridge push&lt;/code&gt;, work from your terminal, integrate into your editor, it&#39;s up to you. And it works offline !&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Web UI workflow (WIP)&lt;/summary&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/misc/diagrams/webui-workflow.png&#34; alt=&#34;Web UI workflow&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt;Often, projects needs to have their bug-tracker public and accept editions from anyone facing a problem. To support this workflow, &lt;code&gt;git-bug&lt;/code&gt; aims to have the web UI accept external OAuth authentication and act as a public portal. However the web UI is not up to speed for that yet. Contribution are very much welcome!&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;CLI usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a new identity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git bug user create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new bug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git bug add&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your favorite editor will open to write a title and a message.&lt;/p&gt; &#xA;&lt;p&gt;You can push your new entry to a remote:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git bug push [&amp;lt;remote&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And pull for updates:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git bug pull [&amp;lt;remote&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List existing bugs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git bug ls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Filter and sort bugs using a &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/doc/queries.md&#34;&gt;query&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git bug ls &#34;status:open sort:edit&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search for bugs by text content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git bug ls &#34;foo bar&#34; baz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now use commands like &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;comment&lt;/code&gt;, &lt;code&gt;open&lt;/code&gt; or &lt;code&gt;close&lt;/code&gt; to display and modify bugs. For more details about each command, you can run &lt;code&gt;git bug &amp;lt;command&amp;gt; --help&lt;/code&gt; or read the &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/doc/md/git-bug.md&#34;&gt;command&#39;s documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Interactive terminal UI&lt;/h2&gt; &#xA;&lt;p&gt;An interactive terminal UI is available using the command &lt;code&gt;git bug termui&lt;/code&gt; to browse and edit bugs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/misc/termui_recording.gif&#34; alt=&#34;Termui recording&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Web UI (status: WIP)&lt;/h2&gt; &#xA;&lt;p&gt;You can launch a rich Web UI with &lt;code&gt;git bug webui&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/misc/webui1.png&#34; alt=&#34;Web UI screenshot 1&#34; width=&#34;880&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/misc/webui2.png&#34; alt=&#34;Web UI screenshot 2&#34; width=&#34;880&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This web UI is entirely packed inside the same go binary and serve static content through a localhost http server.&lt;/p&gt; &#xA;&lt;p&gt;The web UI interact with the backend through a GraphQL API. The schema is available &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/api/graphql/schema&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bridges&lt;/h2&gt; &#xA;&lt;h3&gt;Importer implementations&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Github&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gitlab&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Jira&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Launchpad&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;incremental&lt;/strong&gt;&lt;br&gt;(can import more than once)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;with resume&lt;/strong&gt;&lt;br&gt;(download only new data)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;identities&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;identities update&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;bug&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;comments&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;comment editions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;labels&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;status&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title edition&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;media/files&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;automated test suite&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Exporter implementations&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Github&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Gitlab&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Jira&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Launchpad&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;bug&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;comments&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;comment editions&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;labels&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;status&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;title edition&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;automated test suite&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;✔&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;span&gt;❌&lt;/span&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Bridge usage&lt;/h4&gt; &#xA;&lt;p&gt;Interactively configure a new github bridge:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git bug bridge configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git bug bridge configure \&#xA;    --name=&amp;lt;bridge&amp;gt; \&#xA;    --target=github \&#xA;    --url=https://github.com/MichaelMure/git-bug \&#xA;    --login=&amp;lt;login&amp;gt;&#xA;    --token=&amp;lt;token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import bugs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git bug bridge pull [&amp;lt;name&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Export modifications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git bug bridge push [&amp;lt;name&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deleting a bridge:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git bug bridge rm [&amp;lt;name&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Internals&lt;/h2&gt; &#xA;&lt;p&gt;Interested in how it works ? Have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/doc/model.md&#34;&gt;data model&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/doc/architecture.md&#34;&gt;internal bird-view&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or maybe you want to &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/entity/dag/example_test.go&#34;&gt;make your own distributed data-structure in git&lt;/a&gt; ?&lt;/p&gt; &#xA;&lt;p&gt;See also all the &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/doc&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/misc/completion&#34;&gt;Bash, Zsh, fish, powershell completion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/doc/man&#34;&gt;ManPages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Planned features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;media embedding&lt;/li&gt; &#xA; &lt;li&gt;more bridges&lt;/li&gt; &#xA; &lt;li&gt;webUI that can be used as a public portal to accept user&#39;s input&lt;/li&gt; &#xA; &lt;li&gt;inflatable raptor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;PRs accepted. Drop by the &lt;a href=&#34;https://gitter.im/the-git-bug/Lobby&#34;&gt;Gitter lobby&lt;/a&gt; for a chat or browse the issues to see what is worked on or discussed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:MichaelMure/git-bug.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now run &lt;code&gt;make&lt;/code&gt; to build the project, or &lt;code&gt;make install&lt;/code&gt; to install the binary in &lt;code&gt;$GOPATH/bin/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To work on the web UI, have a look at &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/webui/Readme.md&#34;&gt;the dedicated Readme.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some tests for the CLI use golden files, if the output of CLI commands is changed, run the following command, then inspect the changed files in &lt;code&gt;commands/testdata/...&lt;/code&gt; to make sure the output text is as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go test ./commands -update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors &lt;span&gt;❤️&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. &lt;a href=&#34;https://github.com/MichaelMure/git-bug/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/git-bug#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/git-bug#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/backer.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/git-bug#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/git-bug/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/git-bug/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/git-bug/tiers/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Unless otherwise stated, this project is released under the &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/LICENSE&#34;&gt;GPLv3&lt;/a&gt; or later license © Michael Muré.&lt;/p&gt; &#xA;&lt;p&gt;The git-bug logo by &lt;a href=&#34;https://github.com/vandesign&#34;&gt;Viktor Teplov&lt;/a&gt; is released under the &lt;a href=&#34;https://raw.githubusercontent.com/MichaelMure/git-bug/master/misc/logo/LICENSE&#34;&gt;Creative Commons Attribution 4.0 International (CC BY 4.0)&lt;/a&gt; license © Viktor Teplov.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>apernet/hysteria</title>
    <updated>2022-11-27T01:34:17Z</updated>
    <id>tag:github.com,2022-11-27:/apernet/hysteria</id>
    <link href="https://github.com/apernet/hysteria" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hysteria is a feature-packed proxy &amp; relay tool optimized for lossy, unstable connections (e.g. satellite networks, congested public Wi-Fi, connecting to foreign servers from China)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apernet/hysteria/master/docs/logos/readme.png&#34; alt=&#34;Logo&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apernet/hysteria/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apernet/hysteria/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/apernet/hysteria?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/hysteria_github&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-Telegram-blue?style=flat-square&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/apernet/hysteria/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/discussions/apernet/hysteria?style=flat-square&#34; alt=&#34;Discussions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apernet/hysteria/master/docs/logos/AperNetLogo.png&#34; alt=&#34;AperNet&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;An &lt;a href=&#34;https://apernet.io/&#34;&gt;Aperture Internet Laboratory&lt;/a&gt; project&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Hysteria is a feature-packed proxy &amp;amp; relay tool optimized for lossy, unstable connections (e.g. satellite networks, congested public Wi-Fi, connecting to foreign servers from China) powered by a customized protocol based on QUIC.&lt;/p&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Censorship circumvention&lt;/li&gt; &#xA; &lt;li&gt;Boosting slow connections&lt;/li&gt; &#xA; &lt;li&gt;Bypassing commercial/academic/corporate firewalls&lt;/li&gt; &#xA; &lt;li&gt;Bypassing ISP throttling&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Modes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SOCKS5 proxy (TCP &amp;amp; UDP)&lt;/li&gt; &#xA; &lt;li&gt;HTTP/HTTPS proxy&lt;/li&gt; &#xA; &lt;li&gt;TCP/UDP relay&lt;/li&gt; &#xA; &lt;li&gt;TCP/UDP TPROXY (Linux)&lt;/li&gt; &#xA; &lt;li&gt;TCP REDIRECT (Linux)&lt;/li&gt; &#xA; &lt;li&gt;TUN (TAP on Windows)&lt;/li&gt; &#xA; &lt;li&gt;Still growing...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;a href=&#34;https://hysteria.network/&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Hysteria 是一个功能丰富的，专为恶劣网络环境（如卫星网络、拥挤的公共 Wi-Fi、从中国连接境外服务器等）进行优化的双边加速工具，基于修改版的 QUIC 协议。&lt;/p&gt; &#xA;&lt;h2&gt;常见用例&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;绕过网络审查&lt;/li&gt; &#xA; &lt;li&gt;提升传输速度&lt;/li&gt; &#xA; &lt;li&gt;绕过商业/学校/企业防火墙&lt;/li&gt; &#xA; &lt;li&gt;绕过运营商 QoS 限速&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;模式&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SOCKS5 代理 (TCP &amp;amp; UDP)&lt;/li&gt; &#xA; &lt;li&gt;HTTP/HTTPS 代理&lt;/li&gt; &#xA; &lt;li&gt;TCP/UDP 转发&lt;/li&gt; &#xA; &lt;li&gt;TCP/UDP TPROXY 透明代理 (Linux)&lt;/li&gt; &#xA; &lt;li&gt;TCP REDIRECT 透明代理 (Linux)&lt;/li&gt; &#xA; &lt;li&gt;TUN (Windows 下为 TAP)&lt;/li&gt; &#xA; &lt;li&gt;仍在增加中...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;a href=&#34;https://hysteria.network/zh/&#34;&gt;中文文档&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apernet/hysteria/master/docs/bench/bench.png&#34; alt=&#34;Bench&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Donations are greatly appreciated!&lt;/strong&gt; Contact me if you would like your name listed as a sponsor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;欢迎大佬捐赠！&lt;/strong&gt; 如希望挂名请在捐赠后联系我。&lt;/p&gt; &#xA;&lt;a href=&#34;https://nowpayments.io/donation?api_key=EJH83FM-FDC40ZW-QGDZRR4-A7SC67S&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://nowpayments.io/images/embeds/donation-button-black.svg?sanitize=true&#34; alt=&#34;Crypto donation button by NOWPayments&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>go-resty/resty</title>
    <updated>2022-11-27T01:34:17Z</updated>
    <id>tag:github.com,2022-11-27:/go-resty/resty</id>
    <link href="https://github.com/go-resty/resty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple HTTP and REST client library for Go&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;Resty&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Simple HTTP and REST client library for Go (inspired by Ruby rest-client)&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/#features&#34;&gt;Features&lt;/a&gt; section describes in detail about Resty capabilities&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/go-resty/resty/actions/workflows/ci.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/go-resty/resty/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/go-resty/resty/branch/master&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/go-resty/resty/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Code Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/go-resty/resty&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/go-resty/resty&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/go-resty/resty/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/version-2.7.0-blue.svg?sanitize=true&#34; alt=&#34;Release Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/go-resty/resty&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/go-resty/resty.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Go&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h4 align=&#34;center&#34;&gt;Resty Communication Channels&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://gitter.im/go_resty/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/go_resty/community.svg?sanitize=true&#34; alt=&#34;Chat on Gitter - Resty Community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/go_resty&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-@go__resty-55acee.svg?sanitize=true&#34; alt=&#34;Twitter @go_resty&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;v2.7.0 &lt;a href=&#34;https://github.com/go-resty/resty/releases/tag/v2.7.0&#34;&gt;released&lt;/a&gt; and tagged on Nov 03, 2021.&lt;/li&gt; &#xA; &lt;li&gt;v2.0.0 &lt;a href=&#34;https://github.com/go-resty/resty/releases/tag/v2.0.0&#34;&gt;released&lt;/a&gt; and tagged on Jul 16, 2019.&lt;/li&gt; &#xA; &lt;li&gt;v1.12.0 &lt;a href=&#34;https://github.com/go-resty/resty/releases/tag/v1.12.0&#34;&gt;released&lt;/a&gt; and tagged on Feb 27, 2019.&lt;/li&gt; &#xA; &lt;li&gt;v1.0 released and tagged on Sep 25, 2017. - Resty&#39;s first version was released on Sep 15, 2015 then it grew gradually as a very handy and helpful library. Its been a two years since first release. I&#39;m very thankful to Resty users and its &lt;a href=&#34;https://github.com/go-resty/resty/graphs/contributors&#34;&gt;contributors&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GET, POST, PUT, DELETE, HEAD, PATCH, OPTIONS, etc.&lt;/li&gt; &#xA; &lt;li&gt;Simple and chainable methods for settings and request&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request&#34;&gt;Request&lt;/a&gt; Body can be &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;[]byte&lt;/code&gt;, &lt;code&gt;struct&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;slice&lt;/code&gt; and &lt;code&gt;io.Reader&lt;/code&gt; too &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto detects &lt;code&gt;Content-Type&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Buffer less processing for &lt;code&gt;io.Reader&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Native &lt;code&gt;*http.Request&lt;/code&gt; instance may be accessed during middleware and request execution via &lt;code&gt;Request.RawRequest&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Request Body can be read multiple times via &lt;code&gt;Request.RawRequest.GetBody()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Response&#34;&gt;Response&lt;/a&gt; object gives you more possibility &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Access as &lt;code&gt;[]byte&lt;/code&gt; array - &lt;code&gt;response.Body()&lt;/code&gt; OR Access as &lt;code&gt;string&lt;/code&gt; - &lt;code&gt;response.String()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Know your &lt;code&gt;response.Time()&lt;/code&gt; and when we &lt;code&gt;response.ReceivedAt()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automatic marshal and unmarshal for &lt;code&gt;JSON&lt;/code&gt; and &lt;code&gt;XML&lt;/code&gt; content type &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Default is &lt;code&gt;JSON&lt;/code&gt;, if you supply &lt;code&gt;struct/map&lt;/code&gt; without header &lt;code&gt;Content-Type&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For auto-unmarshal, refer to - &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Success scenario &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetResult&#34;&gt;Request.SetResult()&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Response.Result&#34;&gt;Response.Result()&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Error scenario &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetError&#34;&gt;Request.SetError()&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Response.Error&#34;&gt;Response.Error()&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Supports &lt;a href=&#34;https://tools.ietf.org/html/rfc7807&#34;&gt;RFC7807&lt;/a&gt; - &lt;code&gt;application/problem+json&lt;/code&gt; &amp;amp; &lt;code&gt;application/problem+xml&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Resty provides an option to override &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/#override-json--xml-marshalunmarshal&#34;&gt;JSON Marshal/Unmarshal and XML Marshal/Unmarshal&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Easy to upload one or more file(s) via &lt;code&gt;multipart/form-data&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Auto detects file content type&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Request URL &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetPathParams&#34;&gt;Path Params (aka URI Params)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Backoff Retry Mechanism with retry condition function &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/retry_test.go&#34;&gt;reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resty client HTTP &amp;amp; REST &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.OnBeforeRequest&#34;&gt;Request&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.OnAfterResponse&#34;&gt;Response&lt;/a&gt; middlewares&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Request.SetContext&lt;/code&gt; supported&lt;/li&gt; &#xA; &lt;li&gt;Authorization option of &lt;code&gt;BasicAuth&lt;/code&gt; and &lt;code&gt;Bearer&lt;/code&gt; token&lt;/li&gt; &#xA; &lt;li&gt;Set request &lt;code&gt;ContentLength&lt;/code&gt; value for all request or particular request&lt;/li&gt; &#xA; &lt;li&gt;Custom &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetRootCertificate&#34;&gt;Root Certificates&lt;/a&gt; and Client &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetCertificates&#34;&gt;Certificates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download/Save HTTP response directly into File, like &lt;code&gt;curl -o&lt;/code&gt; flag. See &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetOutputDirectory&#34;&gt;SetOutputDirectory&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.SetOutput&#34;&gt;SetOutput&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Cookies for your request and CookieJar support&lt;/li&gt; &#xA; &lt;li&gt;SRV Record based request instead of Host URL&lt;/li&gt; &#xA; &lt;li&gt;Client settings like &lt;code&gt;Timeout&lt;/code&gt;, &lt;code&gt;RedirectPolicy&lt;/code&gt;, &lt;code&gt;Proxy&lt;/code&gt;, &lt;code&gt;TLSClientConfig&lt;/code&gt;, &lt;code&gt;Transport&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;Optionally allows GET request with payload, see &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetAllowGetMethodPayload&#34;&gt;SetAllowGetMethodPayload&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports registering external JSON library into resty, see &lt;a href=&#34;https://github.com/go-resty/resty/issues/76#issuecomment-314015250&#34;&gt;how to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Exposes Response reader without reading response (no auto-unmarshaling) if need be, see &lt;a href=&#34;https://github.com/go-resty/resty/issues/87#issuecomment-322100604&#34;&gt;how to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Option to specify expected &lt;code&gt;Content-Type&lt;/code&gt; when response &lt;code&gt;Content-Type&lt;/code&gt; header missing. Refer to &lt;a href=&#34;https://github.com/go-resty/resty/issues/92&#34;&gt;#92&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Resty design &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Have client level settings &amp;amp; options and also override at Request level if you want to&lt;/li&gt; &#xA;   &lt;li&gt;Request and Response middleware&lt;/li&gt; &#xA;   &lt;li&gt;Create Multiple clients if you want to &lt;code&gt;resty.New()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Supports &lt;code&gt;http.RoundTripper&lt;/code&gt; implementation, see &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.SetTransport&#34;&gt;SetTransport&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;goroutine concurrent safe&lt;/li&gt; &#xA;   &lt;li&gt;Resty Client trace, see &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.EnableTrace&#34;&gt;Client.EnableTrace&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.EnableTrace&#34;&gt;Request.EnableTrace&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Since v2.4.0, trace info contains a &lt;code&gt;RequestAttempt&lt;/code&gt; value, and the &lt;code&gt;Request&lt;/code&gt; object contains an &lt;code&gt;Attempt&lt;/code&gt; attribute&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Debug mode - clean and informative logging presentation&lt;/li&gt; &#xA;   &lt;li&gt;Gzip - Go does it automatically also resty has fallback handling too&lt;/li&gt; &#xA;   &lt;li&gt;Works fine with &lt;code&gt;HTTP/2&lt;/code&gt; and &lt;code&gt;HTTP/1.1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/#bazel-support&#34;&gt;Bazel support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Easily mock Resty for testing, &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/#mocking-http-requests-using-httpmock-library&#34;&gt;for e.g.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Well tested client library&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Included Batteries&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redirect Policies - see &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/#redirect-policy&#34;&gt;how to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NoRedirectPolicy&lt;/li&gt; &#xA;   &lt;li&gt;FlexibleRedirectPolicy&lt;/li&gt; &#xA;   &lt;li&gt;DomainCheckRedirectPolicy&lt;/li&gt; &#xA;   &lt;li&gt;etc. &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/redirect.go&#34;&gt;more info&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Retry Mechanism &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/#retries&#34;&gt;how to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Backoff Retry&lt;/li&gt; &#xA;   &lt;li&gt;Conditional Retry&lt;/li&gt; &#xA;   &lt;li&gt;Since v2.6.0, Retry Hooks - &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Client.AddRetryHook&#34;&gt;Client&lt;/a&gt;, &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#Request.AddRetryHook&#34;&gt;Request&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;SRV Record based request instead of Host URL &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/resty_test.go#L1412&#34;&gt;how to use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;etc (upcoming - throw your idea&#39;s &lt;a href=&#34;https://github.com/go-resty/resty/issues&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Supported Go Versions&lt;/h4&gt; &#xA;&lt;p&gt;Initially Resty started supporting &lt;code&gt;go modules&lt;/code&gt; since &lt;code&gt;v1.10.0&lt;/code&gt; release.&lt;/p&gt; &#xA;&lt;p&gt;Starting Resty v2 and higher versions, it fully embraces &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;go modules&lt;/a&gt; package release. It requires a Go version capable of understanding &lt;code&gt;/vN&lt;/code&gt; suffixed imports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;1.9.7+&lt;/li&gt; &#xA; &lt;li&gt;1.10.3+&lt;/li&gt; &#xA; &lt;li&gt;1.11+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;It might be beneficial for your project &lt;span&gt;😄&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Resty author also published following projects for Go Community.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aahframework.org&#34;&gt;aah framework&lt;/a&gt; - A secure, flexible, rapid Go web framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thumbai.app&#34;&gt;THUMBAI&lt;/a&gt; - Go Mod Repository, Go Vanity Service and Simple Proxy Server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jeevatkm/go-model&#34;&gt;go-model&lt;/a&gt; - Robust &amp;amp; Easy to use model mapper and utility methods for Go &lt;code&gt;struct&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Go Modules&#xA;require github.com/go-resty/resty/v2 v2.7.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following samples will assist you to become as comfortable as possible with resty library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Import resty into your code and refer it as `resty`.&#xA;import &#34;github.com/go-resty/resty/v2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Simple GET&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;resp, err := client.R().&#xA;    EnableTrace().&#xA;    Get(&#34;https://httpbin.org/get&#34;)&#xA;&#xA;// Explore response object&#xA;fmt.Println(&#34;Response Info:&#34;)&#xA;fmt.Println(&#34;  Error      :&#34;, err)&#xA;fmt.Println(&#34;  Status Code:&#34;, resp.StatusCode())&#xA;fmt.Println(&#34;  Status     :&#34;, resp.Status())&#xA;fmt.Println(&#34;  Proto      :&#34;, resp.Proto())&#xA;fmt.Println(&#34;  Time       :&#34;, resp.Time())&#xA;fmt.Println(&#34;  Received At:&#34;, resp.ReceivedAt())&#xA;fmt.Println(&#34;  Body       :\n&#34;, resp)&#xA;fmt.Println()&#xA;&#xA;// Explore trace info&#xA;fmt.Println(&#34;Request Trace Info:&#34;)&#xA;ti := resp.Request.TraceInfo()&#xA;fmt.Println(&#34;  DNSLookup     :&#34;, ti.DNSLookup)&#xA;fmt.Println(&#34;  ConnTime      :&#34;, ti.ConnTime)&#xA;fmt.Println(&#34;  TCPConnTime   :&#34;, ti.TCPConnTime)&#xA;fmt.Println(&#34;  TLSHandshake  :&#34;, ti.TLSHandshake)&#xA;fmt.Println(&#34;  ServerTime    :&#34;, ti.ServerTime)&#xA;fmt.Println(&#34;  ResponseTime  :&#34;, ti.ResponseTime)&#xA;fmt.Println(&#34;  TotalTime     :&#34;, ti.TotalTime)&#xA;fmt.Println(&#34;  IsConnReused  :&#34;, ti.IsConnReused)&#xA;fmt.Println(&#34;  IsConnWasIdle :&#34;, ti.IsConnWasIdle)&#xA;fmt.Println(&#34;  ConnIdleTime  :&#34;, ti.ConnIdleTime)&#xA;fmt.Println(&#34;  RequestAttempt:&#34;, ti.RequestAttempt)&#xA;fmt.Println(&#34;  RemoteAddr    :&#34;, ti.RemoteAddr.String())&#xA;&#xA;/* Output&#xA;Response Info:&#xA;  Error      : &amp;lt;nil&amp;gt;&#xA;  Status Code: 200&#xA;  Status     : 200 OK&#xA;  Proto      : HTTP/2.0&#xA;  Time       : 457.034718ms&#xA;  Received At: 2020-09-14 15:35:29.784681 -0700 PDT m=+0.458137045&#xA;  Body       :&#xA;  {&#xA;    &#34;args&#34;: {},&#xA;    &#34;headers&#34;: {&#xA;      &#34;Accept-Encoding&#34;: &#34;gzip&#34;,&#xA;      &#34;Host&#34;: &#34;httpbin.org&#34;,&#xA;      &#34;User-Agent&#34;: &#34;go-resty/2.4.0 (https://github.com/go-resty/resty)&#34;,&#xA;      &#34;X-Amzn-Trace-Id&#34;: &#34;Root=1-5f5ff031-000ff6292204aa6898e4de49&#34;&#xA;    },&#xA;    &#34;origin&#34;: &#34;0.0.0.0&#34;,&#xA;    &#34;url&#34;: &#34;https://httpbin.org/get&#34;&#xA;  }&#xA;&#xA;Request Trace Info:&#xA;  DNSLookup     : 4.074657ms&#xA;  ConnTime      : 381.709936ms&#xA;  TCPConnTime   : 77.428048ms&#xA;  TLSHandshake  : 299.623597ms&#xA;  ServerTime    : 75.414703ms&#xA;  ResponseTime  : 79.337µs&#xA;  TotalTime     : 457.034718ms&#xA;  IsConnReused  : false&#xA;  IsConnWasIdle : false&#xA;  ConnIdleTime  : 0s&#xA;  RequestAttempt: 1&#xA;  RemoteAddr    : 3.221.81.55:443&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Enhanced GET&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;resp, err := client.R().&#xA;      SetQueryParams(map[string]string{&#xA;          &#34;page_no&#34;: &#34;1&#34;,&#xA;          &#34;limit&#34;: &#34;20&#34;,&#xA;          &#34;sort&#34;:&#34;name&#34;,&#xA;          &#34;order&#34;: &#34;asc&#34;,&#xA;          &#34;random&#34;:strconv.FormatInt(time.Now().Unix(), 10),&#xA;      }).&#xA;      SetHeader(&#34;Accept&#34;, &#34;application/json&#34;).&#xA;      SetAuthToken(&#34;BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F&#34;).&#xA;      Get(&#34;/search_result&#34;)&#xA;&#xA;&#xA;// Sample of using Request.SetQueryString method&#xA;resp, err := client.R().&#xA;      SetQueryString(&#34;productId=232&amp;amp;template=fresh-sample&amp;amp;cat=resty&amp;amp;source=google&amp;amp;kw=buy a lot more&#34;).&#xA;      SetHeader(&#34;Accept&#34;, &#34;application/json&#34;).&#xA;      SetAuthToken(&#34;BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F&#34;).&#xA;      Get(&#34;/show_product&#34;)&#xA;&#xA;&#xA;// If necessary, you can force response content type to tell Resty to parse a JSON response into your struct&#xA;resp, err := client.R().&#xA;      SetResult(result).&#xA;      ForceContentType(&#34;application/json&#34;).&#xA;      Get(&#34;v2/alpine/manifests/latest&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Various POST method combinations&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// POST JSON string&#xA;// No need to set content type, if you have client level setting&#xA;resp, err := client.R().&#xA;      SetHeader(&#34;Content-Type&#34;, &#34;application/json&#34;).&#xA;      SetBody(`{&#34;username&#34;:&#34;testuser&#34;, &#34;password&#34;:&#34;testpass&#34;}`).&#xA;      SetResult(&amp;amp;AuthSuccess{}).    // or SetResult(AuthSuccess{}).&#xA;      Post(&#34;https://myapp.com/login&#34;)&#xA;&#xA;// POST []byte array&#xA;// No need to set content type, if you have client level setting&#xA;resp, err := client.R().&#xA;      SetHeader(&#34;Content-Type&#34;, &#34;application/json&#34;).&#xA;      SetBody([]byte(`{&#34;username&#34;:&#34;testuser&#34;, &#34;password&#34;:&#34;testpass&#34;}`)).&#xA;      SetResult(&amp;amp;AuthSuccess{}).    // or SetResult(AuthSuccess{}).&#xA;      Post(&#34;https://myapp.com/login&#34;)&#xA;&#xA;// POST Struct, default is JSON content type. No need to set one&#xA;resp, err := client.R().&#xA;      SetBody(User{Username: &#34;testuser&#34;, Password: &#34;testpass&#34;}).&#xA;      SetResult(&amp;amp;AuthSuccess{}).    // or SetResult(AuthSuccess{}).&#xA;      SetError(&amp;amp;AuthError{}).       // or SetError(AuthError{}).&#xA;      Post(&#34;https://myapp.com/login&#34;)&#xA;&#xA;// POST Map, default is JSON content type. No need to set one&#xA;resp, err := client.R().&#xA;      SetBody(map[string]interface{}{&#34;username&#34;: &#34;testuser&#34;, &#34;password&#34;: &#34;testpass&#34;}).&#xA;      SetResult(&amp;amp;AuthSuccess{}).    // or SetResult(AuthSuccess{}).&#xA;      SetError(&amp;amp;AuthError{}).       // or SetError(AuthError{}).&#xA;      Post(&#34;https://myapp.com/login&#34;)&#xA;&#xA;// POST of raw bytes for file upload. For example: upload file to Dropbox&#xA;fileBytes, _ := ioutil.ReadFile(&#34;/Users/jeeva/mydocument.pdf&#34;)&#xA;&#xA;// See we are not setting content-type header, since go-resty automatically detects Content-Type for you&#xA;resp, err := client.R().&#xA;      SetBody(fileBytes).&#xA;      SetContentLength(true).          // Dropbox expects this value&#xA;      SetAuthToken(&#34;&amp;lt;your-auth-token&amp;gt;&#34;).&#xA;      SetError(&amp;amp;DropboxError{}).       // or SetError(DropboxError{}).&#xA;      Post(&#34;https://content.dropboxapi.com/1/files_put/auto/resty/mydocument.pdf&#34;) // for upload Dropbox supports PUT too&#xA;&#xA;// Note: resty detects Content-Type for request body/payload if content type header is not set.&#xA;//   * For struct and map data type defaults to &#39;application/json&#39;&#xA;//   * Fallback is plain text content type&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample PUT&lt;/h4&gt; &#xA;&lt;p&gt;You can use various combinations of &lt;code&gt;PUT&lt;/code&gt; method call like demonstrated for &lt;code&gt;POST&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Note: This is one sample of PUT method usage, refer POST for more combination&#xA;&#xA;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Request goes as JSON content type&#xA;// No need to set auth token, error, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetBody(Article{&#xA;        Title: &#34;go-resty&#34;,&#xA;        Content: &#34;This is my article content, oh ya!&#34;,&#xA;        Author: &#34;Jeevanandam M&#34;,&#xA;        Tags: []string{&#34;article&#34;, &#34;sample&#34;, &#34;resty&#34;},&#xA;      }).&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      SetError(&amp;amp;Error{}).       // or SetError(Error{}).&#xA;      Put(&#34;https://myapp.com/article/1234&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample PATCH&lt;/h4&gt; &#xA;&lt;p&gt;You can use various combinations of &lt;code&gt;PATCH&lt;/code&gt; method call like demonstrated for &lt;code&gt;POST&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Note: This is one sample of PUT method usage, refer POST for more combination&#xA;&#xA;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Request goes as JSON content type&#xA;// No need to set auth token, error, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetBody(Article{&#xA;        Tags: []string{&#34;new tag1&#34;, &#34;new tag2&#34;},&#xA;      }).&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      SetError(&amp;amp;Error{}).       // or SetError(Error{}).&#xA;      Patch(&#34;https://myapp.com/articles/1234&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample DELETE, HEAD, OPTIONS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// DELETE a article&#xA;// No need to set auth token, error, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      SetError(&amp;amp;Error{}).       // or SetError(Error{}).&#xA;      Delete(&#34;https://myapp.com/articles/1234&#34;)&#xA;&#xA;// DELETE a articles with payload/body as a JSON string&#xA;// No need to set auth token, error, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      SetError(&amp;amp;Error{}).       // or SetError(Error{}).&#xA;      SetHeader(&#34;Content-Type&#34;, &#34;application/json&#34;).&#xA;      SetBody(`{article_ids: [1002, 1006, 1007, 87683, 45432] }`).&#xA;      Delete(&#34;https://myapp.com/articles&#34;)&#xA;&#xA;// HEAD of resource&#xA;// No need to set auth token, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      Head(&#34;https://myapp.com/videos/hi-res-video&#34;)&#xA;&#xA;// OPTIONS of resource&#xA;// No need to set auth token, if you have client level settings&#xA;resp, err := client.R().&#xA;      SetAuthToken(&#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;).&#xA;      Options(&#34;https://myapp.com/servers/nyc-dc-01&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Override JSON &amp;amp; XML Marshal/Unmarshal&lt;/h4&gt; &#xA;&lt;p&gt;User could register choice of JSON/XML library into resty or write your own. By default resty registers standard &lt;code&gt;encoding/json&lt;/code&gt; and &lt;code&gt;encoding/xml&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Example of registering json-iterator&#xA;import jsoniter &#34;github.com/json-iterator/go&#34;&#xA;&#xA;json := jsoniter.ConfigCompatibleWithStandardLibrary&#xA;&#xA;client := resty.New()&#xA;client.JSONMarshal = json.Marshal&#xA;client.JSONUnmarshal = json.Unmarshal&#xA;&#xA;// similarly user could do for XML too with -&#xA;client.XMLMarshal&#xA;client.XMLUnmarshal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multipart File(s) upload&lt;/h3&gt; &#xA;&lt;h4&gt;Using io.Reader&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;profileImgBytes, _ := ioutil.ReadFile(&#34;/Users/jeeva/test-img.png&#34;)&#xA;notesBytes, _ := ioutil.ReadFile(&#34;/Users/jeeva/text-file.txt&#34;)&#xA;&#xA;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;resp, err := client.R().&#xA;      SetFileReader(&#34;profile_img&#34;, &#34;test-img.png&#34;, bytes.NewReader(profileImgBytes)).&#xA;      SetFileReader(&#34;notes&#34;, &#34;text-file.txt&#34;, bytes.NewReader(notesBytes)).&#xA;      SetFormData(map[string]string{&#xA;          &#34;first_name&#34;: &#34;Jeevanandam&#34;,&#xA;          &#34;last_name&#34;: &#34;M&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/upload&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using File directly from Path&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Single file scenario&#xA;resp, err := client.R().&#xA;      SetFile(&#34;profile_img&#34;, &#34;/Users/jeeva/test-img.png&#34;).&#xA;      Post(&#34;http://myapp.com/upload&#34;)&#xA;&#xA;// Multiple files scenario&#xA;resp, err := client.R().&#xA;      SetFiles(map[string]string{&#xA;        &#34;profile_img&#34;: &#34;/Users/jeeva/test-img.png&#34;,&#xA;        &#34;notes&#34;: &#34;/Users/jeeva/text-file.txt&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/upload&#34;)&#xA;&#xA;// Multipart of form fields and files&#xA;resp, err := client.R().&#xA;      SetFiles(map[string]string{&#xA;        &#34;profile_img&#34;: &#34;/Users/jeeva/test-img.png&#34;,&#xA;        &#34;notes&#34;: &#34;/Users/jeeva/text-file.txt&#34;,&#xA;      }).&#xA;      SetFormData(map[string]string{&#xA;        &#34;first_name&#34;: &#34;Jeevanandam&#34;,&#xA;        &#34;last_name&#34;: &#34;M&#34;,&#xA;        &#34;zip_code&#34;: &#34;00001&#34;,&#xA;        &#34;city&#34;: &#34;my city&#34;,&#xA;        &#34;access_token&#34;: &#34;C6A79608-782F-4ED0-A11D-BD82FAD829CD&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/profile&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sample Form submission&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// just mentioning about POST as an example with simple flow&#xA;// User Login&#xA;resp, err := client.R().&#xA;      SetFormData(map[string]string{&#xA;        &#34;username&#34;: &#34;jeeva&#34;,&#xA;        &#34;password&#34;: &#34;mypass&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/login&#34;)&#xA;&#xA;// Followed by profile update&#xA;resp, err := client.R().&#xA;      SetFormData(map[string]string{&#xA;        &#34;first_name&#34;: &#34;Jeevanandam&#34;,&#xA;        &#34;last_name&#34;: &#34;M&#34;,&#xA;        &#34;zip_code&#34;: &#34;00001&#34;,&#xA;        &#34;city&#34;: &#34;new city update&#34;,&#xA;      }).&#xA;      Post(&#34;http://myapp.com/profile&#34;)&#xA;&#xA;// Multi value form data&#xA;criteria := url.Values{&#xA;  &#34;search_criteria&#34;: []string{&#34;book&#34;, &#34;glass&#34;, &#34;pencil&#34;},&#xA;}&#xA;resp, err := client.R().&#xA;      SetFormDataFromValues(criteria).&#xA;      Post(&#34;http://myapp.com/search&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Save HTTP Response into File&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Setting output directory path, If directory not exists then resty creates one!&#xA;// This is optional one, if you&#39;re planning using absoule path in&#xA;// `Request.SetOutput` and can used together.&#xA;client.SetOutputDirectory(&#34;/Users/jeeva/Downloads&#34;)&#xA;&#xA;// HTTP response gets saved into file, similar to curl -o flag&#xA;_, err := client.R().&#xA;          SetOutput(&#34;plugin/ReplyWithHeader-v5.1-beta.zip&#34;).&#xA;          Get(&#34;http://bit.ly/1LouEKr&#34;)&#xA;&#xA;// OR using absolute path&#xA;// Note: output directory path is not used for absolute path&#xA;_, err := client.R().&#xA;          SetOutput(&#34;/MyDownloads/plugin/ReplyWithHeader-v5.1-beta.zip&#34;).&#xA;          Get(&#34;http://bit.ly/1LouEKr&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request URL Path Params&lt;/h4&gt; &#xA;&lt;p&gt;Resty provides easy to use dynamic request URL path params. Params can be set at client and request level. Client level params value can be overridden at request level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;client.R().SetPathParams(map[string]string{&#xA;   &#34;userId&#34;: &#34;sample@sample.com&#34;,&#xA;   &#34;subAccountId&#34;: &#34;100002&#34;,&#xA;}).&#xA;Get(&#34;/v1/users/{userId}/{subAccountId}/details&#34;)&#xA;&#xA;// Result:&#xA;//   Composed URL - /v1/users/sample@sample.com/100002/details&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Request and Response Middleware&lt;/h4&gt; &#xA;&lt;p&gt;Resty provides middleware ability to manipulate for Request and Response. It is more flexible than callback approach.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Registering Request Middleware&#xA;client.OnBeforeRequest(func(c *resty.Client, req *resty.Request) error {&#xA;    // Now you have access to Client and current Request object&#xA;    // manipulate it as per your need&#xA;&#xA;    return nil  // if its success otherwise return error&#xA;  })&#xA;&#xA;// Registering Response Middleware&#xA;client.OnAfterResponse(func(c *resty.Client, resp *resty.Response) error {&#xA;    // Now you have access to Client and current Response object&#xA;    // manipulate it as per your need&#xA;&#xA;    return nil  // if its success otherwise return error&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;OnError Hooks&lt;/h4&gt; &#xA;&lt;p&gt;Resty provides OnError hooks that may be called because:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The client failed to send the request due to connection timeout, TLS handshake failure, etc...&lt;/li&gt; &#xA; &lt;li&gt;The request was retried the maximum amount of times, and still failed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If there was a response from the server, the original error will be wrapped in &lt;code&gt;*resty.ResponseError&lt;/code&gt; which contains the last response received.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;client.OnError(func(req *resty.Request, err error) {&#xA;  if v, ok := err.(*resty.ResponseError); ok {&#xA;    // v.Response contains the last response from the server&#xA;    // v.Err contains the original error&#xA;  }&#xA;  // Log the error, increment a metric, etc...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redirect Policy&lt;/h4&gt; &#xA;&lt;p&gt;Resty provides few ready to use redirect policy(s) also it supports multiple policies together.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Assign Client Redirect Policy. Create one as per you need&#xA;client.SetRedirectPolicy(resty.FlexibleRedirectPolicy(15))&#xA;&#xA;// Wanna multiple policies such as redirect count, domain name check, etc&#xA;client.SetRedirectPolicy(resty.FlexibleRedirectPolicy(20),&#xA;                        resty.DomainCheckRedirectPolicy(&#34;host1.com&#34;, &#34;host2.org&#34;, &#34;host3.net&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Custom Redirect Policy&lt;/h5&gt; &#xA;&lt;p&gt;Implement &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/redirect.go#L20&#34;&gt;RedirectPolicy&lt;/a&gt; interface and register it with resty client. Have a look &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/redirect.go&#34;&gt;redirect.go&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Using raw func into resty.SetRedirectPolicy&#xA;client.SetRedirectPolicy(resty.RedirectPolicyFunc(func(req *http.Request, via []*http.Request) error {&#xA;  // Implement your logic here&#xA;&#xA;  // return nil for continue redirect otherwise return error to stop/prevent redirect&#xA;  return nil&#xA;}))&#xA;&#xA;//---------------------------------------------------&#xA;&#xA;// Using struct create more flexible redirect policy&#xA;type CustomRedirectPolicy struct {&#xA;  // variables goes here&#xA;}&#xA;&#xA;func (c *CustomRedirectPolicy) Apply(req *http.Request, via []*http.Request) error {&#xA;  // Implement your logic here&#xA;&#xA;  // return nil for continue redirect otherwise return error to stop/prevent redirect&#xA;  return nil&#xA;}&#xA;&#xA;// Registering in resty&#xA;client.SetRedirectPolicy(CustomRedirectPolicy{/* initialize variables */})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Root Certificates and Client Certificates&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Custom Root certificates, just supply .pem file.&#xA;// you can add one or more root certificates, its get appended&#xA;client.SetRootCertificate(&#34;/path/to/root/pemFile1.pem&#34;)&#xA;client.SetRootCertificate(&#34;/path/to/root/pemFile2.pem&#34;)&#xA;// ... and so on!&#xA;&#xA;// Adding Client Certificates, you add one or more certificates&#xA;// Sample for creating certificate object&#xA;// Parsing public/private key pair from a pair of files. The files must contain PEM encoded data.&#xA;cert1, err := tls.LoadX509KeyPair(&#34;certs/client.pem&#34;, &#34;certs/client.key&#34;)&#xA;if err != nil {&#xA;  log.Fatalf(&#34;ERROR client certificate: %s&#34;, err)&#xA;}&#xA;// ...&#xA;&#xA;// You add one or more certificates&#xA;client.SetCertificates(cert1, cert2, cert3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Root Certificates and Client Certificates from string&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Custom Root certificates from string&#xA;// You can pass you certificates throught env variables as strings&#xA;// you can add one or more root certificates, its get appended&#xA;client.SetRootCertificateFromString(&#34;-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----&#34;)&#xA;client.SetRootCertificateFromString(&#34;-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----&#34;)&#xA;// ... and so on!&#xA;&#xA;// Adding Client Certificates, you add one or more certificates&#xA;// Sample for creating certificate object&#xA;// Parsing public/private key pair from a pair of files. The files must contain PEM encoded data.&#xA;cert1, err := tls.X509KeyPair([]byte(&#34;-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----&#34;), []byte(&#34;-----BEGIN CERTIFICATE-----content-----END CERTIFICATE-----&#34;))&#xA;if err != nil {&#xA;  log.Fatalf(&#34;ERROR client certificate: %s&#34;, err)&#xA;}&#xA;// ...&#xA;&#xA;// You add one or more certificates&#xA;client.SetCertificates(cert1, cert2, cert3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Proxy Settings - Client as well as at Request Level&lt;/h4&gt; &#xA;&lt;p&gt;Default &lt;code&gt;Go&lt;/code&gt; supports Proxy via environment variable &lt;code&gt;HTTP_PROXY&lt;/code&gt;. Resty provides support via &lt;code&gt;SetProxy&lt;/code&gt; &amp;amp; &lt;code&gt;RemoveProxy&lt;/code&gt;. Choose as per your need.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Client Level Proxy&lt;/strong&gt; settings applied to all the request&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Setting a Proxy URL and Port&#xA;client.SetProxy(&#34;http://proxyserver:8888&#34;)&#xA;&#xA;// Want to remove proxy setting&#xA;client.RemoveProxy()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Retries&lt;/h4&gt; &#xA;&lt;p&gt;Resty uses &lt;a href=&#34;http://www.awsarchitectureblog.com/2015/03/backoff.html&#34;&gt;backoff&lt;/a&gt; to increase retry intervals after each attempt.&lt;/p&gt; &#xA;&lt;p&gt;Usage example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Retries are configured per client&#xA;client.&#xA;    // Set retry count to non zero to enable retries&#xA;    SetRetryCount(3).&#xA;    // You can override initial retry wait time.&#xA;    // Default is 100 milliseconds.&#xA;    SetRetryWaitTime(5 * time.Second).&#xA;    // MaxWaitTime can be overridden as well.&#xA;    // Default is 2 seconds.&#xA;    SetRetryMaxWaitTime(20 * time.Second).&#xA;    // SetRetryAfter sets callback to calculate wait time between retries.&#xA;    // Default (nil) implies exponential backoff with jitter&#xA;    SetRetryAfter(func(client *resty.Client, resp *resty.Response) (time.Duration, error) {&#xA;        return 0, errors.New(&#34;quota exceeded&#34;)&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above setup will result in resty retrying requests returned non nil error up to 3 times with delay increased after each attempt.&lt;/p&gt; &#xA;&lt;p&gt;You can optionally provide client with &lt;a href=&#34;https://pkg.go.dev/github.com/go-resty/resty/v2#RetryConditionFunc&#34;&gt;custom retry conditions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;client.AddRetryCondition(&#xA;    // RetryConditionFunc type is for retry condition function&#xA;    // input: non-nil Response OR request execution error&#xA;    func(r *resty.Response, err error) bool {&#xA;        return r.StatusCode() == http.StatusTooManyRequests&#xA;    },&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above example will make resty retry requests ended with &lt;code&gt;429 Too Many Requests&lt;/code&gt; status code.&lt;/p&gt; &#xA;&lt;p&gt;Multiple retry conditions can be added.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to use &lt;code&gt;resty.Backoff(...)&lt;/code&gt; to get arbitrary retry scenarios implemented. &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/retry_test.go&#34;&gt;Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Allow GET request with Payload&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Allow GET request with Payload. This is disabled by default.&#xA;client.SetAllowGetMethodPayload(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Wanna Multiple Clients&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Here you go!&#xA;// Client 1&#xA;client1 := resty.New()&#xA;client1.R().Get(&#34;http://httpbin.org&#34;)&#xA;// ...&#xA;&#xA;// Client 2&#xA;client2 := resty.New()&#xA;client2.R().Head(&#34;http://httpbin.org&#34;)&#xA;// ...&#xA;&#xA;// Bend it as per your need!!!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Remaining Client Settings &amp;amp; its Options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Unique settings at Client level&#xA;//--------------------------------&#xA;// Enable debug mode&#xA;client.SetDebug(true)&#xA;&#xA;// Assign Client TLSClientConfig&#xA;// One can set custom root-certificate. Refer: http://golang.org/pkg/crypto/tls/#example_Dial&#xA;client.SetTLSClientConfig(&amp;amp;tls.Config{ RootCAs: roots })&#xA;&#xA;// or One can disable security check (https)&#xA;client.SetTLSClientConfig(&amp;amp;tls.Config{ InsecureSkipVerify: true })&#xA;&#xA;// Set client timeout as per your need&#xA;client.SetTimeout(1 * time.Minute)&#xA;&#xA;&#xA;// You can override all below settings and options at request level if you want to&#xA;//--------------------------------------------------------------------------------&#xA;// Host URL for all request. So you can use relative URL in the request&#xA;client.SetHostURL(&#34;http://httpbin.org&#34;)&#xA;&#xA;// Headers for all request&#xA;client.SetHeader(&#34;Accept&#34;, &#34;application/json&#34;)&#xA;client.SetHeaders(map[string]string{&#xA;        &#34;Content-Type&#34;: &#34;application/json&#34;,&#xA;        &#34;User-Agent&#34;: &#34;My custom User Agent String&#34;,&#xA;      })&#xA;&#xA;// Cookies for all request&#xA;client.SetCookie(&amp;amp;http.Cookie{&#xA;      Name:&#34;go-resty&#34;,&#xA;      Value:&#34;This is cookie value&#34;,&#xA;      Path: &#34;/&#34;,&#xA;      Domain: &#34;sample.com&#34;,&#xA;      MaxAge: 36000,&#xA;      HttpOnly: true,&#xA;      Secure: false,&#xA;    })&#xA;client.SetCookies(cookies)&#xA;&#xA;// URL query parameters for all request&#xA;client.SetQueryParam(&#34;user_id&#34;, &#34;00001&#34;)&#xA;client.SetQueryParams(map[string]string{ // sample of those who use this manner&#xA;      &#34;api_key&#34;: &#34;api-key-here&#34;,&#xA;      &#34;api_secert&#34;: &#34;api-secert&#34;,&#xA;    })&#xA;client.R().SetQueryString(&#34;productId=232&amp;amp;template=fresh-sample&amp;amp;cat=resty&amp;amp;source=google&amp;amp;kw=buy a lot more&#34;)&#xA;&#xA;// Form data for all request. Typically used with POST and PUT&#xA;client.SetFormData(map[string]string{&#xA;    &#34;access_token&#34;: &#34;BC594900-518B-4F7E-AC75-BD37F019E08F&#34;,&#xA;  })&#xA;&#xA;// Basic Auth for all request&#xA;client.SetBasicAuth(&#34;myuser&#34;, &#34;mypass&#34;)&#xA;&#xA;// Bearer Auth Token for all request&#xA;client.SetAuthToken(&#34;BC594900518B4F7EAC75BD37F019E08FBC594900518B4F7EAC75BD37F019E08F&#34;)&#xA;&#xA;// Enabling Content length value for all request&#xA;client.SetContentLength(true)&#xA;&#xA;// Registering global Error object structure for JSON/XML request&#xA;client.SetError(&amp;amp;Error{})    // or resty.SetError(Error{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Unix Socket&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;unixSocket := &#34;/var/run/my_socket.sock&#34;&#xA;&#xA;// Create a Go&#39;s http.Transport so we can set it in resty.&#xA;transport := http.Transport{&#xA;&#x9;Dial: func(_, _ string) (net.Conn, error) {&#xA;&#x9;&#x9;return net.Dial(&#34;unix&#34;, unixSocket)&#xA;&#x9;},&#xA;}&#xA;&#xA;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Set the previous transport that we created, set the scheme of the communication to the&#xA;// socket and set the unixSocket as the HostURL.&#xA;client.SetTransport(&amp;amp;transport).SetScheme(&#34;http&#34;).SetHostURL(unixSocket)&#xA;&#xA;// No need to write the host&#39;s URL on the request, just the path.&#xA;client.R().Get(&#34;/index.html&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bazel Support&lt;/h4&gt; &#xA;&lt;p&gt;Resty can be built, tested and depended upon via &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;. For example, to run all tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;bazel test :resty_test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mocking http requests using &lt;a href=&#34;https://github.com/jarcoal/httpmock&#34;&gt;httpmock&lt;/a&gt; library&lt;/h4&gt; &#xA;&lt;p&gt;In order to mock the http requests when testing your application you could use the &lt;code&gt;httpmock&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;When using the default resty client, you should pass the client to the library as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Resty Client&#xA;client := resty.New()&#xA;&#xA;// Get the underlying HTTP Client and set it to Mock&#xA;httpmock.ActivateNonDefault(client.GetClient())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More detailed example of mocking resty http requests using ginko could be found &lt;a href=&#34;https://github.com/jarcoal/httpmock#ginkgo--resty-example&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Resty releases versions according to &lt;a href=&#34;http://semver.org&#34;&gt;Semantic Versioning&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Resty v2 does not use &lt;code&gt;gopkg.in&lt;/code&gt; service for library versioning.&lt;/li&gt; &#xA; &lt;li&gt;Resty fully adapted to &lt;code&gt;go mod&lt;/code&gt; capabilities since &lt;code&gt;v1.10.0&lt;/code&gt; release.&lt;/li&gt; &#xA; &lt;li&gt;Resty v1 series was using &lt;code&gt;gopkg.in&lt;/code&gt; to provide versioning. &lt;code&gt;gopkg.in/resty.vX&lt;/code&gt; points to appropriate tagged versions; &lt;code&gt;X&lt;/code&gt; denotes version series number and it&#39;s a stable release for production use. For e.g. &lt;code&gt;gopkg.in/resty.v0&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Development takes place at the master branch. Although the code in master should always compile and test successfully, it might break API&#39;s. I aim to maintain backwards compatibility, but sometimes API&#39;s and behavior might be changed to fix a bug.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;I would welcome your contribution! If you find any improvement or issue you want to fix, feel free to send a pull request, I like pull requests that include test cases for fix/enhancement. I have done my best to bring pretty good code coverage. Feel free to write tests.&lt;/p&gt; &#xA;&lt;p&gt;BTW, I&#39;d like to know what you think about &lt;code&gt;Resty&lt;/code&gt;. Kindly open an issue or send me an email; it&#39;d mean a lot to me.&lt;/p&gt; &#xA;&lt;h2&gt;Creator&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jeevatkm&#34;&gt;Jeevanandam M.&lt;/a&gt; (&lt;a href=&#34;mailto:jeeva@myjeeva.com&#34;&gt;jeeva@myjeeva.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Core Team&lt;/h2&gt; &#xA;&lt;p&gt;Have a look on &lt;a href=&#34;https://github.com/orgs/go-resty/people&#34;&gt;Members&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Have a look on &lt;a href=&#34;https://github.com/go-resty/resty/graphs/contributors&#34;&gt;Contributors&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Resty released under MIT license, refer &lt;a href=&#34;https://raw.githubusercontent.com/go-resty/resty/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
</feed>