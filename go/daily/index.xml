<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-24T01:34:10Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apernet/OpenGFW</title>
    <updated>2024-01-24T01:34:10Z</updated>
    <id>tag:github.com,2024-01-24:/apernet/OpenGFW</id>
    <link href="https://github.com/apernet/OpenGFW" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenGFW is a flexible, easy-to-use, open source implementation of GFW on Linux&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/apernet/OpenGFW/master/docs/logo.png&#34; alt=&#34;OpenGFW&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apernet/OpenGFW/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MPL_2.0-brightgreen.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apernet/OpenGFW/master/README.zh.md&#34;&gt;中文文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;OpenGFW is a flexible, easy-to-use, open source implementation of &lt;a href=&#34;https://en.wikipedia.org/wiki/Great_Firewall&#34;&gt;GFW&lt;/a&gt; on Linux that&#39;s in many ways more powerful than the real thing. It&#39;s cyber sovereignty you can have on a home router.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] This project is still in very early stages of development. Use at your own risk.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] We are looking for contributors to help us with this project, especially implementing analyzers for more protocols!!!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full IP/TCP reassembly, various protocol analyzers &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;HTTP, TLS, DNS, SSH, and many more to come&lt;/li&gt; &#xA;   &lt;li&gt;&#34;Fully encrypted traffic&#34; detection for Shadowsocks, etc. (&lt;a href=&#34;https://gfw.report/publications/usenixsecurity23/data/paper/paper.pdf&#34;&gt;https://gfw.report/publications/usenixsecurity23/data/paper/paper.pdf&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Trojan (proxy protocol) detection based on Trojan-killer (&lt;a href=&#34;https://github.com/XTLS/Trojan-killer&#34;&gt;https://github.com/XTLS/Trojan-killer&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;[WIP] Machine learning based traffic classification&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Full IPv4 and IPv6 support&lt;/li&gt; &#xA; &lt;li&gt;Flow-based multicore load balancing&lt;/li&gt; &#xA; &lt;li&gt;Connection offloading&lt;/li&gt; &#xA; &lt;li&gt;Powerful rule engine based on &lt;a href=&#34;https://github.com/expr-lang/expr&#34;&gt;expr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Flexible analyzer &amp;amp; modifier framework&lt;/li&gt; &#xA; &lt;li&gt;Extensible IO implementation (only NFQueue for now)&lt;/li&gt; &#xA; &lt;li&gt;[WIP] Web UI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ad blocking&lt;/li&gt; &#xA; &lt;li&gt;Parental control&lt;/li&gt; &#xA; &lt;li&gt;Malware protection&lt;/li&gt; &#xA; &lt;li&gt;Abuse prevention for VPN/proxy services&lt;/li&gt; &#xA; &lt;li&gt;Traffic analysis (log only mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export OPENGFW_LOG_LEVEL=debug&#xA;./OpenGFW -c config.yaml rules.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example config&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;io:&#xA;  queueSize: 1024&#xA;  local: true # set to false if you want to run OpenGFW on FORWARD chain&#xA;&#xA;workers:&#xA;  count: 4&#xA;  queueSize: 16&#xA;  tcpMaxBufferedPagesTotal: 4096&#xA;  tcpMaxBufferedPagesPerConn: 64&#xA;  udpMaxStreams: 4096&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example rules&lt;/h3&gt; &#xA;&lt;p&gt;Documentation on all supported protocols and what field each one has is not yet ready. For now, you have to check the code under &#34;analyzer&#34; directory directly.&lt;/p&gt; &#xA;&lt;p&gt;For syntax of the expression language, please refer to &lt;a href=&#34;https://expr-lang.org/docs/language-definition&#34;&gt;Expr Language Definition&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- name: block v2ex http&#xA;  action: block&#xA;  expr: string(http?.req?.headers?.host) endsWith &#34;v2ex.com&#34;&#xA;&#xA;- name: block v2ex https&#xA;  action: block&#xA;  expr: string(tls?.req?.sni) endsWith &#34;v2ex.com&#34;&#xA;&#xA;- name: block shadowsocks&#xA;  action: block&#xA;  expr: fet != nil &amp;amp;&amp;amp; fet.yes&#xA;&#xA;- name: block trojan&#xA;  action: block&#xA;  expr: trojan != nil &amp;amp;&amp;amp; trojan.yes&#xA;&#xA;- name: v2ex dns poisoning&#xA;  action: modify&#xA;  modifier:&#xA;    name: dns&#xA;    args:&#xA;      a: &#34;0.0.0.0&#34;&#xA;      aaaa: &#34;::&#34;&#xA;  expr: dns != nil &amp;amp;&amp;amp; dns.qr &amp;amp;&amp;amp; any(dns.questions, {.name endsWith &#34;v2ex.com&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Supported actions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;allow&lt;/code&gt;: Allow the connection, no further processing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;block&lt;/code&gt;: Block the connection, no further processing. Send a TCP RST if it&#39;s a TCP connection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;drop&lt;/code&gt;: For UDP, drop the packet that triggered the rule, continue processing future packets in the same flow. For TCP, same as &lt;code&gt;block&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;modify&lt;/code&gt;: For UDP, modify the packet that triggered the rule using the given modifier, continue processing future packets in the same flow. For TCP, same as &lt;code&gt;allow&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>