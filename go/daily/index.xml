<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-28T01:35:56Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>klauspost/compress</title>
    <updated>2022-09-28T01:35:56Z</updated>
    <id>tag:github.com,2022-09-28:/klauspost/compress</id>
    <link href="https://github.com/klauspost/compress" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Optimized Go Compression Packages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;compress&lt;/h1&gt; &#xA;&lt;p&gt;This package provides various compression algorithms.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klauspost/compress/tree/master/zstd#zstd&#34;&gt;zstandard&lt;/a&gt; compression and decompression in pure Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klauspost/compress/tree/master/s2#s2-compression&#34;&gt;S2&lt;/a&gt; is a high performance replacement for Snappy.&lt;/li&gt; &#xA; &lt;li&gt;Optimized &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/flate&#34;&gt;deflate&lt;/a&gt; packages which can be used as a dropin replacement for &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/gzip&#34;&gt;gzip&lt;/a&gt;, &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/zip&#34;&gt;zip&lt;/a&gt; and &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/zlib&#34;&gt;zlib&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klauspost/compress/tree/master/snappy&#34;&gt;snappy&lt;/a&gt; is a drop-in replacement for &lt;code&gt;github.com/golang/snappy&lt;/code&gt; offering better compression and concurrent streams.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klauspost/compress/tree/master/huff0&#34;&gt;huff0&lt;/a&gt; and &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/fse&#34;&gt;FSE&lt;/a&gt; implementations for raw entropy encoding.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klauspost/compress/tree/master/gzhttp&#34;&gt;gzhttp&lt;/a&gt; Provides client and server wrappers for handling gzipped requests efficiently.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klauspost/pgzip&#34;&gt;pgzip&lt;/a&gt; is a separate package that provides a very fast parallel gzip implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/klauspost/compress-fuzz&#34;&gt;fuzz package&lt;/a&gt; for fuzz testing all compressors/decompressors here.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress?tab=subdirectories&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/klauspost/compress.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/actions/workflows/go.yml&#34;&gt;&lt;img src=&#34;https://github.com/klauspost/compress/actions/workflows/go.yml/badge.svg?sanitize=true&#34; alt=&#34;Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/klauspost/compress?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/klauspost/compress/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;changelog&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sept 26, 2022 (v1.15.11)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;flate: Improve level 1-3 compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/678&#34;&gt;https://github.com/klauspost/compress/pull/678&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Improve &#34;best&#34; compression by @nightwolfz in &lt;a href=&#34;https://github.com/klauspost/compress/pull/677&#34;&gt;https://github.com/klauspost/compress/pull/677&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Fix+reduce decompression allocations &lt;a href=&#34;https://github.com/klauspost/compress/pull/668&#34;&gt;https://github.com/klauspost/compress/pull/668&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Fix non-effective noescape tag &lt;a href=&#34;https://github.com/klauspost/compress/pull/667&#34;&gt;https://github.com/klauspost/compress/pull/667&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sept 16, 2022 (v1.15.10)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;zstd: Add &lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress@v1.15.10/zstd#WithDecodeAllCapLimit&#34;&gt;WithDecodeAllCapLimit&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/649&#34;&gt;https://github.com/klauspost/compress/pull/649&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add Go 1.19 - deprecate Go 1.16 &lt;a href=&#34;https://github.com/klauspost/compress/pull/651&#34;&gt;https://github.com/klauspost/compress/pull/651&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;flate: Improve level 5+6 compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/656&#34;&gt;https://github.com/klauspost/compress/pull/656&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Improve &#34;better&#34; compresssion &lt;a href=&#34;https://github.com/klauspost/compress/pull/657&#34;&gt;https://github.com/klauspost/compress/pull/657&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Improve &#34;best&#34; compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/658&#34;&gt;https://github.com/klauspost/compress/pull/658&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Improve &#34;better&#34; compression. &lt;a href=&#34;https://github.com/klauspost/compress/pull/635&#34;&gt;https://github.com/klauspost/compress/pull/635&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Slightly faster non-assembly decompression &lt;a href=&#34;https://github.com/klauspost/compress/pull/646&#34;&gt;https://github.com/klauspost/compress/pull/646&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Use arrays for constant size copies &lt;a href=&#34;https://github.com/klauspost/compress/pull/659&#34;&gt;https://github.com/klauspost/compress/pull/659&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;July 21, 2022 (v1.15.9)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;zstd: Fix decoder crash on amd64 (no BMI) on invalid input &lt;a href=&#34;https://github.com/klauspost/compress/pull/645&#34;&gt;https://github.com/klauspost/compress/pull/645&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Disable decoder extended memory copies (amd64) due to possible crashes &lt;a href=&#34;https://github.com/klauspost/compress/pull/644&#34;&gt;https://github.com/klauspost/compress/pull/644&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Allow single segments up to &#34;max decoded size&#34; by @klauspost in &lt;a href=&#34;https://github.com/klauspost/compress/pull/643&#34;&gt;https://github.com/klauspost/compress/pull/643&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;July 13, 2022 (v1.15.8)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;gzip: fix stack exhaustion bug in Reader.Read &lt;a href=&#34;https://github.com/klauspost/compress/pull/641&#34;&gt;https://github.com/klauspost/compress/pull/641&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Add Index header trim/restore &lt;a href=&#34;https://github.com/klauspost/compress/pull/638&#34;&gt;https://github.com/klauspost/compress/pull/638&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Optimize seqdeq amd64 asm by @greatroar in &lt;a href=&#34;https://github.com/klauspost/compress/pull/636&#34;&gt;https://github.com/klauspost/compress/pull/636&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Improve decoder memcopy &lt;a href=&#34;https://github.com/klauspost/compress/pull/637&#34;&gt;https://github.com/klauspost/compress/pull/637&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;huff0: Pass a single bitReader pointer to asm by @greatroar in &lt;a href=&#34;https://github.com/klauspost/compress/pull/634&#34;&gt;https://github.com/klauspost/compress/pull/634&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Branchless getBits for amd64 w/o BMI2 by @greatroar in &lt;a href=&#34;https://github.com/klauspost/compress/pull/640&#34;&gt;https://github.com/klauspost/compress/pull/640&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;gzhttp: Remove header before writing &lt;a href=&#34;https://github.com/klauspost/compress/pull/639&#34;&gt;https://github.com/klauspost/compress/pull/639&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;June 29, 2022 (v1.15.7)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;s2: Fix absolute forward seeks &lt;a href=&#34;https://github.com/klauspost/compress/pull/633&#34;&gt;https://github.com/klauspost/compress/pull/633&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zip: Merge upstream &lt;a href=&#34;https://github.com/klauspost/compress/pull/631&#34;&gt;https://github.com/klauspost/compress/pull/631&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zip: Re-add zip64 fix &lt;a href=&#34;https://github.com/klauspost/compress/pull/624&#34;&gt;https://github.com/klauspost/compress/pull/624&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: translate fseDecoder.buildDtable into asm by @WojciechMula in &lt;a href=&#34;https://github.com/klauspost/compress/pull/598&#34;&gt;https://github.com/klauspost/compress/pull/598&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;flate: Faster histograms &lt;a href=&#34;https://github.com/klauspost/compress/pull/620&#34;&gt;https://github.com/klauspost/compress/pull/620&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;deflate: Use compound hcode &lt;a href=&#34;https://github.com/klauspost/compress/pull/622&#34;&gt;https://github.com/klauspost/compress/pull/622&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;June 3, 2022 (v1.15.6)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;s2: Improve coding for long, close matches &lt;a href=&#34;https://github.com/klauspost/compress/pull/613&#34;&gt;https://github.com/klauspost/compress/pull/613&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2c: Add Snappy/S2 stream recompression &lt;a href=&#34;https://github.com/klauspost/compress/pull/611&#34;&gt;https://github.com/klauspost/compress/pull/611&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Always use configured block size &lt;a href=&#34;https://github.com/klauspost/compress/pull/605&#34;&gt;https://github.com/klauspost/compress/pull/605&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Fix incorrect hash table placement for dict encoding in default &lt;a href=&#34;https://github.com/klauspost/compress/pull/606&#34;&gt;https://github.com/klauspost/compress/pull/606&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Apply default config to ZipDecompressor without options &lt;a href=&#34;https://github.com/klauspost/compress/pull/608&#34;&gt;https://github.com/klauspost/compress/pull/608&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;gzhttp: Exclude more common archive formats &lt;a href=&#34;https://github.com/klauspost/compress/pull/612&#34;&gt;https://github.com/klauspost/compress/pull/612&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Add ReaderIgnoreCRC &lt;a href=&#34;https://github.com/klauspost/compress/pull/609&#34;&gt;https://github.com/klauspost/compress/pull/609&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Remove sanity load on index creation &lt;a href=&#34;https://github.com/klauspost/compress/pull/607&#34;&gt;https://github.com/klauspost/compress/pull/607&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;snappy: Use dedicated function for scoring &lt;a href=&#34;https://github.com/klauspost/compress/pull/614&#34;&gt;https://github.com/klauspost/compress/pull/614&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2c+s2d: Use official snappy framed extension &lt;a href=&#34;https://github.com/klauspost/compress/pull/610&#34;&gt;https://github.com/klauspost/compress/pull/610&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;May 25, 2022 (v1.15.5)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;s2: Add concurrent stream decompression &lt;a href=&#34;https://github.com/klauspost/compress/pull/602&#34;&gt;https://github.com/klauspost/compress/pull/602&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Fix final emit oob read crash on amd64 &lt;a href=&#34;https://github.com/klauspost/compress/pull/601&#34;&gt;https://github.com/klauspost/compress/pull/601&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;huff0: asm implementation of Decompress1X by @WojciechMula &lt;a href=&#34;https://github.com/klauspost/compress/pull/596&#34;&gt;https://github.com/klauspost/compress/pull/596&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Use 1 less goroutine for stream decoding &lt;a href=&#34;https://github.com/klauspost/compress/pull/588&#34;&gt;https://github.com/klauspost/compress/pull/588&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Copy literal in 16 byte blocks when possible &lt;a href=&#34;https://github.com/klauspost/compress/pull/592&#34;&gt;https://github.com/klauspost/compress/pull/592&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Speed up when WithDecoderLowmem(false) &lt;a href=&#34;https://github.com/klauspost/compress/pull/599&#34;&gt;https://github.com/klauspost/compress/pull/599&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: faster next state update in BMI2 version of decode by @WojciechMula in &lt;a href=&#34;https://github.com/klauspost/compress/pull/593&#34;&gt;https://github.com/klauspost/compress/pull/593&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;huff0: Do not check max size when reading table. &lt;a href=&#34;https://github.com/klauspost/compress/pull/586&#34;&gt;https://github.com/klauspost/compress/pull/586&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;flate: Inplace hashing for level 7-9 by @klauspost in &lt;a href=&#34;https://github.com/klauspost/compress/pull/590&#34;&gt;https://github.com/klauspost/compress/pull/590&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;May 11, 2022 (v1.15.4)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;huff0: decompress directly into output by @WojciechMula in &lt;a href=&#34;https://github.com/klauspost/compress/pull/577&#34;&gt;#577&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;inflate: Keep dict on stack &lt;a href=&#34;https://github.com/klauspost/compress/pull/581&#34;&gt;#581&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Faster decoding memcopy in asm &lt;a href=&#34;https://github.com/klauspost/compress/pull/583&#34;&gt;#583&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Fix ignored crc &lt;a href=&#34;https://github.com/klauspost/compress/pull/580&#34;&gt;#580&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;May 5, 2022 (v1.15.3)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;zstd: Allow to ignore checksum checking by @WojciechMula &lt;a href=&#34;https://github.com/klauspost/compress/pull/572&#34;&gt;#572&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Fix incorrect seek for io.SeekEnd in &lt;a href=&#34;https://github.com/klauspost/compress/pull/575&#34;&gt;#575&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Apr 26, 2022 (v1.15.2)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;zstd: Add x86-64 assembly for decompression on streams and blocks. Contributed by &lt;a href=&#34;https://github.com/WojciechMula&#34;&gt;@WojciechMula&lt;/a&gt;. Typically 2x faster. &lt;a href=&#34;https://github.com/klauspost/compress/pull/528&#34;&gt;#528&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/531&#34;&gt;#531&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/545&#34;&gt;#545&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/537&#34;&gt;#537&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Add options to ZipDecompressor and fixes &lt;a href=&#34;https://github.com/klauspost/compress/pull/539&#34;&gt;#539&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s2: Use sorted search for index &lt;a href=&#34;https://github.com/klauspost/compress/pull/555&#34;&gt;#555&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Minimum version is Go 1.16, added CI test on 1.18.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mar 11, 2022 (v1.15.1)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;huff0: Add x86 assembly of Decode4X by @WojciechMula in &lt;a href=&#34;https://github.com/klauspost/compress/pull/512&#34;&gt;#512&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Reuse zip decoders in &lt;a href=&#34;https://github.com/klauspost/compress/pull/514&#34;&gt;#514&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Detect extra block data and report as corrupted in &lt;a href=&#34;https://github.com/klauspost/compress/pull/520&#34;&gt;#520&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Handle zero sized frame content size stricter in &lt;a href=&#34;https://github.com/klauspost/compress/pull/521&#34;&gt;#521&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Add stricter block size checks in &lt;a href=&#34;https://github.com/klauspost/compress/pull/523&#34;&gt;#523&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mar 3, 2022 (v1.15.0)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;zstd: Refactor decoder by @klauspost in &lt;a href=&#34;https://github.com/klauspost/compress/pull/498&#34;&gt;#498&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;zstd: Add stream encoding without goroutines by @klauspost in &lt;a href=&#34;https://github.com/klauspost/compress/pull/505&#34;&gt;#505&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;huff0: Prevent single blocks exceeding 16 bits by @klauspost in&lt;a href=&#34;https://github.com/klauspost/compress/pull/507&#34;&gt;#507&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;flate: Inline literal emission by @klauspost in &lt;a href=&#34;https://github.com/klauspost/compress/pull/509&#34;&gt;#509&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;gzhttp: Add zstd to transport by @klauspost in &lt;a href=&#34;https://github.com/klauspost/compress/pull/400&#34;&gt;#400&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;gzhttp: Make content-type optional by @klauspost in &lt;a href=&#34;https://github.com/klauspost/compress/pull/510&#34;&gt;#510&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both compression and decompression now supports &#34;synchronous&#34; stream operations. This means that whenever &#34;concurrency&#34; is set to 1, they will operate without spawning goroutines.&lt;/p&gt; &#xA;&lt;p&gt;Stream decompression is now faster on asynchronous, since the goroutine allocation much more effectively splits the workload. On typical streams this will typically use 2 cores fully for decompression. When a stream has finished decoding no goroutines will be left over, so decoders can now safely be pooled and still be garbage collected.&lt;/p&gt; &#xA;&lt;p&gt;While the release has been extensively tested, it is recommended to testing when upgrading.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See changes to v1.14.x&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Feb 22, 2022 (v1.14.4)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;flate: Fix rare huffman only (-2) corruption. &lt;a href=&#34;https://github.com/klauspost/compress/pull/503&#34;&gt;#503&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zip: Update deprecated CreateHeaderRaw to correctly call CreateRaw by @saracen in &lt;a href=&#34;https://github.com/klauspost/compress/pull/502&#34;&gt;#502&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zip: don&#39;t read data descriptor early by @saracen in &lt;a href=&#34;https://github.com/klauspost/compress/pull/501&#34;&gt;#501&lt;/a&gt; #501&lt;/li&gt; &#xA;    &lt;li&gt;huff0: Use static decompression buffer up to 30% faster by @klauspost in &lt;a href=&#34;https://github.com/klauspost/compress/pull/499&#34;&gt;#499&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/500&#34;&gt;#500&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Feb 17, 2022 (v1.14.3)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;flate: Improve fastest levels compression speed ~10% more throughput. &lt;a href=&#34;https://github.com/klauspost/compress/pull/482&#34;&gt;#482&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/489&#34;&gt;#489&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/490&#34;&gt;#490&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/491&#34;&gt;#491&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/494&#34;&gt;#494&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/478&#34;&gt;#478&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;flate: Faster decompression speed, ~5-10%. &lt;a href=&#34;https://github.com/klauspost/compress/pull/483&#34;&gt;#483&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Faster compression with Go v1.18 and amd64 microarch level 3+. &lt;a href=&#34;https://github.com/klauspost/compress/pull/484&#34;&gt;#484&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/486&#34;&gt;#486&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Jan 25, 2022 (v1.14.2)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: improve header decoder by @dsnet &lt;a href=&#34;https://github.com/klauspost/compress/pull/476&#34;&gt;#476&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Add bigger default blocks &lt;a href=&#34;https://github.com/klauspost/compress/pull/469&#34;&gt;#469&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Remove unused decompression buffer &lt;a href=&#34;https://github.com/klauspost/compress/pull/470&#34;&gt;#470&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Fix logically dead code by @ningmingxiao &lt;a href=&#34;https://github.com/klauspost/compress/pull/472&#34;&gt;#472&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;flate: Improve level 7-9 &lt;a href=&#34;https://github.com/klauspost/compress/pull/471&#34;&gt;#471&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/473&#34;&gt;#473&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Add noasm tag for xxhash &lt;a href=&#34;https://github.com/klauspost/compress/pull/475&#34;&gt;#475&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Jan 11, 2022 (v1.14.1)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;s2: Add stream index in &lt;a href=&#34;https://github.com/klauspost/compress/pull/462&#34;&gt;#462&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;flate: Speed and efficiency improvements in &lt;a href=&#34;https://github.com/klauspost/compress/pull/439&#34;&gt;#439&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/461&#34;&gt;#461&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/455&#34;&gt;#455&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/452&#34;&gt;#452&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/458&#34;&gt;#458&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Performance improvement in &lt;a href=&#34;https://github.com/klauspost/compress/pull/420&#34;&gt;#420&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/456&#34;&gt;#456&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/437&#34;&gt;#437&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/467&#34;&gt;#467&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/468&#34;&gt;#468&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: add arm64 xxhash assembly in &lt;a href=&#34;https://github.com/klauspost/compress/pull/464&#34;&gt;#464&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Add garbled for binaries for s2 in &lt;a href=&#34;https://github.com/klauspost/compress/pull/445&#34;&gt;#445&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See changes to v1.13.x&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Aug 30, 2021 (v1.13.5)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;gz/zlib/flate: Alias stdlib errors &lt;a href=&#34;https://github.com/klauspost/compress/pull/425&#34;&gt;#425&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Add block support to commandline tools &lt;a href=&#34;https://github.com/klauspost/compress/pull/413&#34;&gt;#413&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: pooledZipWriter should return Writers to the same pool &lt;a href=&#34;https://github.com/klauspost/compress/pull/426&#34;&gt;#426&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Removed golang/snappy as external dependency for tests &lt;a href=&#34;https://github.com/klauspost/compress/pull/421&#34;&gt;#421&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Aug 12, 2021 (v1.13.4)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Add &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/snappy&#34;&gt;snappy replacement package&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Fix incorrect encoding in &#34;best&#34; mode &lt;a href=&#34;https://github.com/klauspost/compress/pull/415&#34;&gt;#415&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Aug 3, 2021 (v1.13.3)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Improve Best compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/404&#34;&gt;#404&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Fix WriteTo error forwarding &lt;a href=&#34;https://github.com/klauspost/compress/pull/411&#34;&gt;#411&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;gzhttp: Return http.HandlerFunc instead of http.Handler. Unlikely breaking change. &lt;a href=&#34;https://github.com/klauspost/compress/pull/406&#34;&gt;#406&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2sx: Fix max size error &lt;a href=&#34;https://github.com/klauspost/compress/pull/399&#34;&gt;#399&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Add optional stream content size on reset &lt;a href=&#34;https://github.com/klauspost/compress/pull/401&#34;&gt;#401&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: use SpeedBestCompression for level &amp;gt;= 10 &lt;a href=&#34;https://github.com/klauspost/compress/pull/410&#34;&gt;#410&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Jun 14, 2021 (v1.13.1)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;s2: Add full Snappy output support &lt;a href=&#34;https://github.com/klauspost/compress/pull/396&#34;&gt;#396&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Add configurable &lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress/zstd#WithDecoderMaxWindow&#34;&gt;Decoder window&lt;/a&gt; size &lt;a href=&#34;https://github.com/klauspost/compress/pull/394&#34;&gt;#394&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;gzhttp: Add header to skip compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/389&#34;&gt;#389&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Improve speed with bigger output margin &lt;a href=&#34;https://github.com/klauspost/compress/pull/395&#34;&gt;#395&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Jun 3, 2021 (v1.13.0)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Added &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/gzhttp#gzip-handler&#34;&gt;gzhttp&lt;/a&gt; which allows wrapping HTTP servers and clients with GZIP compressors.&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Detect short invalid signatures &lt;a href=&#34;https://github.com/klauspost/compress/pull/382&#34;&gt;#382&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Spawn decoder goroutine only if needed. &lt;a href=&#34;https://github.com/klauspost/compress/pull/380&#34;&gt;#380&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See changes to v1.12.x&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;May 25, 2021 (v1.12.3)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;deflate: Better/faster Huffman encoding &lt;a href=&#34;https://github.com/klauspost/compress/pull/374&#34;&gt;#374&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;deflate: Allocate less for history. &lt;a href=&#34;https://github.com/klauspost/compress/pull/375&#34;&gt;#375&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Forward read errors &lt;a href=&#34;https://github.com/klauspost/compress/pull/373&#34;&gt;#373&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Apr 27, 2021 (v1.12.2)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Improve better/best compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/360&#34;&gt;#360&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/364&#34;&gt;#364&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/365&#34;&gt;#365&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Add helpers to compress/decompress zstd inside zip files &lt;a href=&#34;https://github.com/klauspost/compress/pull/363&#34;&gt;#363&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;deflate: Improve level 5+6 compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/367&#34;&gt;#367&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Improve better/best compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/358&#34;&gt;#358&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/358&#34;&gt;#359&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Load after checking src limit on amd64. &lt;a href=&#34;https://github.com/klauspost/compress/pull/362&#34;&gt;#362&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2sx: Limit max executable size &lt;a href=&#34;https://github.com/klauspost/compress/pull/368&#34;&gt;#368&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Apr 14, 2021 (v1.12.1)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;snappy package removed. Upstream added as dependency.&lt;/li&gt; &#xA;    &lt;li&gt;s2: Better compression in &#34;best&#34; mode &lt;a href=&#34;https://github.com/klauspost/compress/pull/353&#34;&gt;#353&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2sx: Add stdin input and detect pre-compressed from signature &lt;a href=&#34;https://github.com/klauspost/compress/pull/352&#34;&gt;#352&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2c/s2d: Add http as possible input &lt;a href=&#34;https://github.com/klauspost/compress/pull/348&#34;&gt;#348&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2c/s2d/s2sx: Always truncate when writing files &lt;a href=&#34;https://github.com/klauspost/compress/pull/352&#34;&gt;#352&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Reduce memory usage further when using &lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress/zstd#WithLowerEncoderMem&#34;&gt;WithLowerEncoderMem&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/346&#34;&gt;#346&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Fix potential problem with amd64 assembly and profilers &lt;a href=&#34;https://github.com/klauspost/compress/pull/349&#34;&gt;#349&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See changes to v1.11.x&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Mar 26, 2021 (v1.11.13)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Big speedup on small dictionary encodes &lt;a href=&#34;https://github.com/klauspost/compress/pull/344&#34;&gt;#344&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/345&#34;&gt;#345&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Add &lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress/zstd#WithLowerEncoderMem&#34;&gt;WithLowerEncoderMem&lt;/a&gt; encoder option &lt;a href=&#34;https://github.com/klauspost/compress/pull/336&#34;&gt;#336&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;deflate: Improve entropy compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/338&#34;&gt;#338&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Clean up and minor performance improvement in best &lt;a href=&#34;https://github.com/klauspost/compress/pull/341&#34;&gt;#341&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Mar 5, 2021 (v1.11.12)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;s2: Add &lt;code&gt;s2sx&lt;/code&gt; binary that creates &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/s2#s2sx-self-extracting-archives&#34;&gt;self extracting archives&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;s2: Speed up decompression on non-assembly platforms &lt;a href=&#34;https://github.com/klauspost/compress/pull/328&#34;&gt;#328&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Mar 1, 2021 (v1.11.9)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;s2: Add ARM64 decompression assembly. Around 2x output speed. &lt;a href=&#34;https://github.com/klauspost/compress/pull/324&#34;&gt;#324&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Improve &#34;better&#34; speed and efficiency. &lt;a href=&#34;https://github.com/klauspost/compress/pull/325&#34;&gt;#325&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Fix binaries.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Feb 25, 2021 (v1.11.8)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;s2: Fixed occational out-of-bounds write on amd64. Upgrade recommended.&lt;/li&gt; &#xA;    &lt;li&gt;s2: Add AMD64 assembly for better mode. 25-50% faster. &lt;a href=&#34;https://github.com/klauspost/compress/pull/315&#34;&gt;#315&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Less upfront decoder allocation. &lt;a href=&#34;https://github.com/klauspost/compress/pull/322&#34;&gt;#322&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Faster &#34;compression&#34; of incompressible data. &lt;a href=&#34;https://github.com/klauspost/compress/pull/314&#34;&gt;#314&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zip: Fix zip64 headers. &lt;a href=&#34;https://github.com/klauspost/compress/pull/313&#34;&gt;#313&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Jan 14, 2021 (v1.11.7)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Use Bytes() interface to get bytes across packages. &lt;a href=&#34;https://github.com/klauspost/compress/pull/309&#34;&gt;#309&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Add &#39;best&#39; compression option. &lt;a href=&#34;https://github.com/klauspost/compress/pull/310&#34;&gt;#310&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Add ReaderMaxBlockSize, changes &lt;code&gt;s2.NewReader&lt;/code&gt; signature to include varargs. &lt;a href=&#34;https://github.com/klauspost/compress/pull/311&#34;&gt;#311&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Fix crash on small better buffers. &lt;a href=&#34;https://github.com/klauspost/compress/pull/308&#34;&gt;#308&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Clean up decoder. &lt;a href=&#34;https://github.com/klauspost/compress/pull/312&#34;&gt;#312&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Jan 7, 2021 (v1.11.6)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Make decoder allocations smaller &lt;a href=&#34;https://github.com/klauspost/compress/pull/306&#34;&gt;#306&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Free Decoder resources when Reset is called with a nil io.Reader &lt;a href=&#34;https://github.com/klauspost/compress/pull/305&#34;&gt;#305&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Dec 20, 2020 (v1.11.4)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Add Best compression mode &lt;a href=&#34;https://github.com/klauspost/compress/pull/304&#34;&gt;#304&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Add header decoder &lt;a href=&#34;https://github.com/klauspost/compress/pull/299&#34;&gt;#299&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Add uncompressed stream option &lt;a href=&#34;https://github.com/klauspost/compress/pull/297&#34;&gt;#297&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Simplify/speed up small blocks with known max size. &lt;a href=&#34;https://github.com/klauspost/compress/pull/300&#34;&gt;#300&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Always reset literal dict encoder &lt;a href=&#34;https://github.com/klauspost/compress/pull/303&#34;&gt;#303&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Nov 15, 2020 (v1.11.3)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;inflate: 10-15% faster decompression &lt;a href=&#34;https://github.com/klauspost/compress/pull/293&#34;&gt;#293&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Tweak DecodeAll default allocation &lt;a href=&#34;https://github.com/klauspost/compress/pull/295&#34;&gt;#295&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Oct 11, 2020 (v1.11.2)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;s2: Fix out of bounds read in &#34;better&#34; block compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/291&#34;&gt;#291&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Oct 1, 2020 (v1.11.1)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Set allLitEntropy true in default configuration &lt;a href=&#34;https://github.com/klauspost/compress/pull/286&#34;&gt;#286&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Sept 8, 2020 (v1.11.0)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Add experimental compression &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/zstd#dictionaries&#34;&gt;dictionaries&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/281&#34;&gt;#281&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Fix mixed Write and ReadFrom calls &lt;a href=&#34;https://github.com/klauspost/compress/pull/282&#34;&gt;#282&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;inflate/gz: Limit variable shifts, ~5% faster decompression &lt;a href=&#34;https://github.com/klauspost/compress/pull/274&#34;&gt;#274&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See changes to v1.10.x&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;July 8, 2020 (v1.10.11)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Fix extra block when compressing with ReadFrom. &lt;a href=&#34;https://github.com/klauspost/compress/pull/278&#34;&gt;#278&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;huff0: Also populate compression table when reading decoding table. &lt;a href=&#34;https://github.com/klauspost/compress/pull/275&#34;&gt;#275&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;June 23, 2020 (v1.10.10)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Skip entropy compression in fastest mode when no matches. &lt;a href=&#34;https://github.com/klauspost/compress/pull/270&#34;&gt;#270&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;June 16, 2020 (v1.10.9):&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: API change for specifying dictionaries. See &lt;a href=&#34;https://github.com/klauspost/compress/pull/268&#34;&gt;#268&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zip: update CreateHeaderRaw to handle zip64 fields. &lt;a href=&#34;https://github.com/klauspost/compress/pull/266&#34;&gt;#266&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Fuzzit tests removed. The service has been purchased and is no longer available.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;June 5, 2020 (v1.10.8):&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;1.15x faster zstd block decompression. &lt;a href=&#34;https://github.com/klauspost/compress/pull/265&#34;&gt;#265&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;June 1, 2020 (v1.10.7):&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Added zstd decompression &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/zstd#dictionaries&#34;&gt;dictionary support&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Increase zstd decompression speed up to 1.19x. &lt;a href=&#34;https://github.com/klauspost/compress/pull/259&#34;&gt;#259&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Remove internal reset call in zstd compression and reduce allocations. &lt;a href=&#34;https://github.com/klauspost/compress/pull/263&#34;&gt;#263&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;May 21, 2020: (v1.10.6)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Reduce allocations while decoding. &lt;a href=&#34;https://github.com/klauspost/compress/pull/258&#34;&gt;#258&lt;/a&gt;, &lt;a href=&#34;https://github.com/klauspost/compress/pull/252&#34;&gt;#252&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Stricter decompression checks.&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;April 12, 2020: (v1.10.5)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;s2-commands: Flush output when receiving SIGINT. &lt;a href=&#34;https://github.com/klauspost/compress/pull/239&#34;&gt;#239&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Apr 8, 2020: (v1.10.4)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;zstd: Minor/special case optimizations. &lt;a href=&#34;https://github.com/klauspost/compress/pull/251&#34;&gt;#251&lt;/a&gt;, &lt;a href=&#34;https://github.com/klauspost/compress/pull/250&#34;&gt;#250&lt;/a&gt;, &lt;a href=&#34;https://github.com/klauspost/compress/pull/249&#34;&gt;#249&lt;/a&gt;, &lt;a href=&#34;https://github.com/klauspost/compress/pull/247&#34;&gt;#247&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Mar 11, 2020: (v1.10.3)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;s2: Use S2 encoder in pure Go mode for Snappy output as well. &lt;a href=&#34;https://github.com/klauspost/compress/pull/245&#34;&gt;#245&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;s2: Fix pure Go block encoder. &lt;a href=&#34;https://github.com/klauspost/compress/pull/244&#34;&gt;#244&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Added &#34;better compression&#34; mode. &lt;a href=&#34;https://github.com/klauspost/compress/pull/240&#34;&gt;#240&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Improve speed of fastest compression mode by 5-10% &lt;a href=&#34;https://github.com/klauspost/compress/pull/241&#34;&gt;#241&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;zstd: Skip creating encoders when not needed. &lt;a href=&#34;https://github.com/klauspost/compress/pull/238&#34;&gt;#238&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Feb 27, 2020: (v1.10.2)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Close to 50% speedup in inflate (gzip/zip decompression). &lt;a href=&#34;https://github.com/klauspost/compress/pull/236&#34;&gt;#236&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/234&#34;&gt;#234&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/232&#34;&gt;#232&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Reduce deflate level 1-6 memory usage up to 59%. &lt;a href=&#34;https://github.com/klauspost/compress/pull/227&#34;&gt;#227&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Feb 18, 2020: (v1.10.1)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Fix zstd crash when resetting multiple times without sending data. &lt;a href=&#34;https://github.com/klauspost/compress/pull/226&#34;&gt;#226&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;deflate: Fix dictionary use on level 1-6. &lt;a href=&#34;https://github.com/klauspost/compress/pull/224&#34;&gt;#224&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Remove deflate writer reference when closing. &lt;a href=&#34;https://github.com/klauspost/compress/pull/224&#34;&gt;#224&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;Feb 4, 2020: (v1.10.0)&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Add optional dictionary to &lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress/flate?tab=doc#StatelessDeflate&#34;&gt;stateless deflate&lt;/a&gt;. Breaking change, send &lt;code&gt;nil&lt;/code&gt; for previous behaviour. &lt;a href=&#34;https://github.com/klauspost/compress/pull/216&#34;&gt;#216&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Fix buffer overflow on repeated small block deflate. &lt;a href=&#34;https://github.com/klauspost/compress/pull/218&#34;&gt;#218&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Allow copying content from an existing ZIP file without decompressing+compressing. &lt;a href=&#34;https://github.com/klauspost/compress/pull/214&#34;&gt;#214&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Added &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/s2#s2-compression&#34;&gt;S2&lt;/a&gt; AMD64 assembler and various optimizations. Stream speed &amp;gt;10GB/s. &lt;a href=&#34;https://github.com/klauspost/compress/pull/186&#34;&gt;#186&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See changes prior to v1.10.0&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Jan 20,2020 (v1.9.8) Optimize gzip/deflate with better size estimates and faster table generation. &lt;a href=&#34;https://github.com/klauspost/compress/pull/207&#34;&gt;#207&lt;/a&gt; by &lt;a href=&#34;https://github.com/luyu6056&#34;&gt;luyu6056&lt;/a&gt;, &lt;a href=&#34;https://github.com/klauspost/compress/pull/206&#34;&gt;#206&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Jan 11, 2020: S2 Encode/Decode will use provided buffer if capacity is big enough. &lt;a href=&#34;https://github.com/klauspost/compress/pull/204&#34;&gt;#204&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Jan 5, 2020: (v1.9.7) Fix another zstd regression in v1.9.5 - v1.9.6 removed.&lt;/li&gt; &#xA;  &lt;li&gt;Jan 4, 2020: (v1.9.6) Regression in v1.9.5 fixed causing corrupt zstd encodes in rare cases.&lt;/li&gt; &#xA;  &lt;li&gt;Jan 4, 2020: Faster IO in &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/s2#commandline-tools&#34;&gt;s2c + s2d commandline tools&lt;/a&gt; compression/decompression. &lt;a href=&#34;https://github.com/klauspost/compress/pull/192&#34;&gt;#192&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dec 29, 2019: Removed v1.9.5 since fuzz tests showed a compatibility problem with the reference zstandard decoder.&lt;/li&gt; &#xA;  &lt;li&gt;Dec 29, 2019: (v1.9.5) zstd: 10-20% faster block compression. &lt;a href=&#34;https://github.com/klauspost/compress/pull/199&#34;&gt;#199&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dec 29, 2019: &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/zip&#34;&gt;zip&lt;/a&gt; package updated with latest Go features&lt;/li&gt; &#xA;  &lt;li&gt;Dec 29, 2019: zstd: Single segment flag condintions tweaked. &lt;a href=&#34;https://github.com/klauspost/compress/pull/197&#34;&gt;#197&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dec 18, 2019: s2: Faster compression when ReadFrom is used. &lt;a href=&#34;https://github.com/klauspost/compress/pull/198&#34;&gt;#198&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dec 10, 2019: s2: Fix repeat length output when just above at 16MB limit.&lt;/li&gt; &#xA;  &lt;li&gt;Dec 10, 2019: zstd: Add function to get decoder as io.ReadCloser. &lt;a href=&#34;https://github.com/klauspost/compress/pull/191&#34;&gt;#191&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dec 3, 2019: (v1.9.4) S2: limit max repeat length. &lt;a href=&#34;https://github.com/klauspost/compress/pull/188&#34;&gt;#188&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dec 3, 2019: Add &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/zstd#WithNoEntropyCompression&#34;&gt;WithNoEntropyCompression&lt;/a&gt; to zstd &lt;a href=&#34;https://github.com/klauspost/compress/pull/187&#34;&gt;#187&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Dec 3, 2019: Reduce memory use for tests. Check for leaked goroutines.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 28, 2019 (v1.9.3) Less allocations in stateless deflate.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 28, 2019: 5-20% Faster huff0 decode. Impacts zstd as well. &lt;a href=&#34;https://github.com/klauspost/compress/pull/184&#34;&gt;#184&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Nov 12, 2019 (v1.9.2) Added &lt;a href=&#34;https://raw.githubusercontent.com/klauspost/compress/master/#stateless-compression&#34;&gt;Stateless Compression&lt;/a&gt; for gzip/deflate.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 12, 2019: Fixed zstd decompression of large single blocks. &lt;a href=&#34;https://github.com/klauspost/compress/pull/180&#34;&gt;#180&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Nov 11, 2019: Set default &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/s2#commandline-tools&#34;&gt;s2c&lt;/a&gt; block size to 4MB.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 11, 2019: Reduce inflate memory use by 1KB.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 10, 2019: Less allocations in deflate bit writer.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 10, 2019: Fix inconsistent error returned by zstd decoder.&lt;/li&gt; &#xA;  &lt;li&gt;Oct 28, 2019 (v1.9.1) ztsd: Fix crash when compressing blocks. &lt;a href=&#34;https://github.com/klauspost/compress/pull/174&#34;&gt;#174&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Oct 24, 2019 (v1.9.0) zstd: Fix rare data corruption &lt;a href=&#34;https://github.com/klauspost/compress/pull/173&#34;&gt;#173&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Oct 24, 2019 zstd: Fix huff0 out of buffer write &lt;a href=&#34;https://github.com/klauspost/compress/pull/171&#34;&gt;#171&lt;/a&gt; and always return errors &lt;a href=&#34;https://github.com/klauspost/compress/pull/172&#34;&gt;#172&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Oct 10, 2019: Big deflate rewrite, 30-40% faster with better compression &lt;a href=&#34;https://github.com/klauspost/compress/pull/105&#34;&gt;#105&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See changes prior to v1.9.0&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Oct 10, 2019: (v1.8.6) zstd: Allow partial reads to get flushed data. &lt;a href=&#34;https://github.com/klauspost/compress/pull/169&#34;&gt;#169&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Oct 3, 2019: Fix inconsistent results on broken zstd streams.&lt;/li&gt; &#xA;  &lt;li&gt;Sep 25, 2019: Added &lt;code&gt;-rm&lt;/code&gt; (remove source files) and &lt;code&gt;-q&lt;/code&gt; (no output except errors) to &lt;code&gt;s2c&lt;/code&gt; and &lt;code&gt;s2d&lt;/code&gt; &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/s2#commandline-tools&#34;&gt;commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Sep 16, 2019: (v1.8.4) Add &lt;code&gt;s2c&lt;/code&gt; and &lt;code&gt;s2d&lt;/code&gt; &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/s2#commandline-tools&#34;&gt;commandline tools&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Sep 10, 2019: (v1.8.3) Fix s2 decoder &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/s2#Reader.Skip&#34;&gt;Skip&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Sep 7, 2019: zstd: Added &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/zstd#WithWindowSize&#34;&gt;WithWindowSize&lt;/a&gt;, contributed by &lt;a href=&#34;https://github.com/ianwilkes&#34;&gt;ianwilkes&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Sep 5, 2019: (v1.8.2) Add &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/zstd#WithZeroFrames&#34;&gt;WithZeroFrames&lt;/a&gt; which adds full zero payload block encoding option.&lt;/li&gt; &#xA;  &lt;li&gt;Sep 5, 2019: Lazy initialization of zstandard predefined en/decoder tables.&lt;/li&gt; &#xA;  &lt;li&gt;Aug 26, 2019: (v1.8.1) S2: 1-2% compression increase in &#34;better&#34; compression mode.&lt;/li&gt; &#xA;  &lt;li&gt;Aug 26, 2019: zstd: Check maximum size of Huffman 1X compressed literals while decoding.&lt;/li&gt; &#xA;  &lt;li&gt;Aug 24, 2019: (v1.8.0) Added &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/s2#s2-compression&#34;&gt;S2 compression&lt;/a&gt;, a high performance replacement for Snappy.&lt;/li&gt; &#xA;  &lt;li&gt;Aug 21, 2019: (v1.7.6) Fixed minor issues found by fuzzer. One could lead to zstd not decompressing.&lt;/li&gt; &#xA;  &lt;li&gt;Aug 18, 2019: Add &lt;a href=&#34;https://fuzzit.dev/&#34;&gt;fuzzit&lt;/a&gt; continuous fuzzing.&lt;/li&gt; &#xA;  &lt;li&gt;Aug 14, 2019: zstd: Skip incompressible data 2x faster. &lt;a href=&#34;https://github.com/klauspost/compress/pull/147&#34;&gt;#147&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Aug 4, 2019 (v1.7.5): Better literal compression. &lt;a href=&#34;https://github.com/klauspost/compress/pull/146&#34;&gt;#146&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Aug 4, 2019: Faster zstd compression. &lt;a href=&#34;https://github.com/klauspost/compress/pull/143&#34;&gt;#143&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/144&#34;&gt;#144&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Aug 4, 2019: Faster zstd decompression. &lt;a href=&#34;https://github.com/klauspost/compress/pull/145&#34;&gt;#145&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/143&#34;&gt;#143&lt;/a&gt; &lt;a href=&#34;https://github.com/klauspost/compress/pull/142&#34;&gt;#142&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;July 15, 2019 (v1.7.4): Fix double EOF block in rare cases on zstd encoder.&lt;/li&gt; &#xA;  &lt;li&gt;July 15, 2019 (v1.7.3): Minor speedup/compression increase in default zstd encoder.&lt;/li&gt; &#xA;  &lt;li&gt;July 14, 2019: zstd decoder: Fix decompression error on multiple uses with mixed content.&lt;/li&gt; &#xA;  &lt;li&gt;July 7, 2019 (v1.7.2): Snappy update, zstd decoder potential race fix.&lt;/li&gt; &#xA;  &lt;li&gt;June 17, 2019: zstd decompression bugfix.&lt;/li&gt; &#xA;  &lt;li&gt;June 17, 2019: fix 32 bit builds.&lt;/li&gt; &#xA;  &lt;li&gt;June 17, 2019: Easier use in modules (less dependencies).&lt;/li&gt; &#xA;  &lt;li&gt;June 9, 2019: New stronger &#34;default&#34; &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/zstd#zstd&#34;&gt;zstd&lt;/a&gt; compression mode. Matches zstd default compression ratio.&lt;/li&gt; &#xA;  &lt;li&gt;June 5, 2019: 20-40% throughput in &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/zstd#zstd&#34;&gt;zstandard&lt;/a&gt; compression and better compression.&lt;/li&gt; &#xA;  &lt;li&gt;June 5, 2019: deflate/gzip compression: Reduce memory usage of lower compression levels.&lt;/li&gt; &#xA;  &lt;li&gt;June 2, 2019: Added &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/zstd#zstd&#34;&gt;zstandard&lt;/a&gt; compression!&lt;/li&gt; &#xA;  &lt;li&gt;May 25, 2019: deflate/gzip: 10% faster bit writer, mostly visible in lower levels.&lt;/li&gt; &#xA;  &lt;li&gt;Apr 22, 2019: &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/zstd#zstd&#34;&gt;zstd&lt;/a&gt; decompression added.&lt;/li&gt; &#xA;  &lt;li&gt;Aug 1, 2018: Added &lt;a href=&#34;https://github.com/klauspost/compress/tree/master/huff0#huff0-entropy-compression&#34;&gt;huff0 README&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Jul 8, 2018: Added &lt;a href=&#34;https://raw.githubusercontent.com/klauspost/compress/master/#performance-update-2018&#34;&gt;Performance Update 2018&lt;/a&gt; below.&lt;/li&gt; &#xA;  &lt;li&gt;Jun 23, 2018: Merged &lt;a href=&#34;https://go-review.googlesource.com/c/go/+/102235&#34;&gt;Go 1.11 inflate optimizations&lt;/a&gt;. Go 1.9 is now required. Backwards compatible version tagged with &lt;a href=&#34;https://github.com/klauspost/compress/releases/tag/v1.3.0&#34;&gt;v1.3.0&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Apr 2, 2018: Added &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/huff0&#34;&gt;huff0&lt;/a&gt; en/decoder. Experimental for now, API may change.&lt;/li&gt; &#xA;  &lt;li&gt;Mar 4, 2018: Added &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/fse&#34;&gt;FSE Entropy&lt;/a&gt; en/decoder. Experimental for now, API may change.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 3, 2017: Add compression &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress#Estimate&#34;&gt;Estimate&lt;/a&gt; function.&lt;/li&gt; &#xA;  &lt;li&gt;May 28, 2017: Reduce allocations when resetting decoder.&lt;/li&gt; &#xA;  &lt;li&gt;Apr 02, 2017: Change back to official crc32, since changes were merged in Go 1.7.&lt;/li&gt; &#xA;  &lt;li&gt;Jan 14, 2017: Reduce stack pressure due to array copies. See &lt;a href=&#34;https://github.com/golang/go/issues/18625&#34;&gt;Issue #18625&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Oct 25, 2016: Level 2-4 have been rewritten and now offers significantly better performance than before.&lt;/li&gt; &#xA;  &lt;li&gt;Oct 20, 2016: Port zlib changes from Go 1.7 to fix zlib writer issue. Please update.&lt;/li&gt; &#xA;  &lt;li&gt;Oct 16, 2016: Go 1.7 changes merged. Apples to apples this package is a few percent faster, but has a significantly better balance between speed and compression per level.&lt;/li&gt; &#xA;  &lt;li&gt;Mar 24, 2016: Always attempt Huffman encoding on level 4-7. This improves base 64 encoded data compression.&lt;/li&gt; &#xA;  &lt;li&gt;Mar 24, 2016: Small speedup for level 1-3.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 19, 2016: Faster bit writer, level -2 is 15% faster, level 1 is 4% faster.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 19, 2016: Handle small payloads faster in level 1-3.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 19, 2016: Added faster level 2 + 3 compression modes.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 19, 2016: &lt;a href=&#34;https://blog.klauspost.com/rebalancing-deflate-compression-levels/&#34;&gt;Rebalanced compression levels&lt;/a&gt;, so there is a more even progresssion in terms of compression. New default level is 5.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 14, 2016: Snappy: Merge upstream changes.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 14, 2016: Snappy: Fix aggressive skipping.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 14, 2016: Snappy: Update benchmark.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 13, 2016: Deflate: Fixed assembler problem that could lead to sub-optimal compression.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 12, 2016: Snappy: Added AMD64 SSE 4.2 optimizations to matching, which makes easy to compress material run faster. Typical speedup is around 25%.&lt;/li&gt; &#xA;  &lt;li&gt;Feb 9, 2016: Added Snappy package fork. This version is 5-7% faster, much more on hard to compress content.&lt;/li&gt; &#xA;  &lt;li&gt;Jan 30, 2016: Optimize level 1 to 3 by not considering static dictionary or storing uncompressed. ~4-5% speedup.&lt;/li&gt; &#xA;  &lt;li&gt;Jan 16, 2016: Optimization on deflate level 1,2,3 compression.&lt;/li&gt; &#xA;  &lt;li&gt;Jan 8 2016: Merge &lt;a href=&#34;https://go-review.googlesource.com/#/c/18317&#34;&gt;CL 18317&lt;/a&gt;: fix reading, writing of zip64 archives.&lt;/li&gt; &#xA;  &lt;li&gt;Dec 8 2015: Make level 1 and -2 deterministic even if write size differs.&lt;/li&gt; &#xA;  &lt;li&gt;Dec 8 2015: Split encoding functions, so hashing and matching can potentially be inlined. 1-3% faster on AMD64. 5% faster on other platforms.&lt;/li&gt; &#xA;  &lt;li&gt;Dec 8 2015: Fixed rare &lt;a href=&#34;https://github.com/klauspost/compress/issues/20&#34;&gt;one byte out-of bounds read&lt;/a&gt;. Please update!&lt;/li&gt; &#xA;  &lt;li&gt;Nov 23 2015: Optimization on token writer. ~2-4% faster. Contributed by &lt;a href=&#34;https://github.com/dsnet&#34;&gt;@dsnet&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 20 2015: Small optimization to bit writer on 64 bit systems.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 17 2015: Fixed out-of-bound errors if the underlying Writer returned an error. See &lt;a href=&#34;https://github.com/klauspost/compress/issues/15&#34;&gt;#15&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 12 2015: Added &lt;a href=&#34;https://golang.org/pkg/io/#WriterTo&#34;&gt;io.WriterTo&lt;/a&gt; support to gzip/inflate.&lt;/li&gt; &#xA;  &lt;li&gt;Nov 11 2015: Merged &lt;a href=&#34;https://go-review.googlesource.com/#/c/16669/4&#34;&gt;CL 16669&lt;/a&gt;: archive/zip: enable overriding (de)compressors per file&lt;/li&gt; &#xA;  &lt;li&gt;Oct 15 2015: Added skipping on uncompressible data. Random data speed up &amp;gt;5x.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;deflate usage&lt;/h1&gt; &#xA;&lt;p&gt;The packages are drop-in replacements for standard libraries. Simply replace the import path to use them:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;old import&lt;/th&gt; &#xA;   &lt;th&gt;new import&lt;/th&gt; &#xA;   &lt;th&gt;Documentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;compress/gzip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;github.com/klauspost/compress/gzip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress/gzip?tab=doc&#34;&gt;gzip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;compress/zlib&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;github.com/klauspost/compress/zlib&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress/zlib?tab=doc&#34;&gt;zlib&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;archive/zip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;github.com/klauspost/compress/zip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress/zip?tab=doc&#34;&gt;zip&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;compress/flate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;github.com/klauspost/compress/flate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/klauspost/compress/flate?tab=doc&#34;&gt;flate&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimized &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/flate&#34;&gt;deflate&lt;/a&gt; packages which can be used as a dropin replacement for &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/gzip&#34;&gt;gzip&lt;/a&gt;, &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/zip&#34;&gt;zip&lt;/a&gt; and &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/zlib&#34;&gt;zlib&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may also be interested in &lt;a href=&#34;https://github.com/klauspost/pgzip&#34;&gt;pgzip&lt;/a&gt;, which is a drop in replacement for gzip, which support multithreaded compression on big files and the optimized &lt;a href=&#34;https://github.com/klauspost/crc32&#34;&gt;crc32&lt;/a&gt; package used by these packages.&lt;/p&gt; &#xA;&lt;p&gt;The packages contains the same as the standard library, so you can use the godoc for that: &lt;a href=&#34;http://golang.org/pkg/compress/gzip/&#34;&gt;gzip&lt;/a&gt;, &lt;a href=&#34;http://golang.org/pkg/archive/zip/&#34;&gt;zip&lt;/a&gt;, &lt;a href=&#34;http://golang.org/pkg/compress/zlib/&#34;&gt;zlib&lt;/a&gt;, &lt;a href=&#34;http://golang.org/pkg/compress/flate/&#34;&gt;flate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently there is only minor speedup on decompression (mostly CRC32 calculation).&lt;/p&gt; &#xA;&lt;p&gt;Memory usage is typically 1MB for a Writer. stdlib is in the same range. If you expect to have a lot of concurrently allocated Writers consider using the stateless compress described below.&lt;/p&gt; &#xA;&lt;p&gt;For compression performance, see: &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1nuNE2nPfuINCZJRMt6wFWhKpToF95I47XjSsc-1rbPQ/edit?usp=sharing&#34;&gt;this spreadsheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Stateless compression&lt;/h1&gt; &#xA;&lt;p&gt;This package offers stateless compression as a special option for gzip/deflate. It will do compression but without maintaining any state between Write calls.&lt;/p&gt; &#xA;&lt;p&gt;This means there will be no memory kept between Write calls, but compression and speed will be suboptimal.&lt;/p&gt; &#xA;&lt;p&gt;This is only relevant in cases where you expect to run many thousands of compressors concurrently, but with very little activity. This is &lt;em&gt;not&lt;/em&gt; intended for regular web servers serving individual requests.&lt;/p&gt; &#xA;&lt;p&gt;Because of this, the size of actual Write calls will affect output size.&lt;/p&gt; &#xA;&lt;p&gt;In gzip, specify level &lt;code&gt;-3&lt;/code&gt; / &lt;code&gt;gzip.StatelessCompression&lt;/code&gt; to enable.&lt;/p&gt; &#xA;&lt;p&gt;For direct deflate use, NewStatelessWriter and StatelessDeflate are available. See &lt;a href=&#34;https://godoc.org/github.com/klauspost/compress/flate#NewStatelessWriter&#34;&gt;documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;bufio.Writer&lt;/code&gt; can of course be used to control write sizes. For example, to use a 4KB buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;// replace &#39;ioutil.Discard&#39; with your output.&#xA;&#x9;gzw, err := gzip.NewWriterLevel(ioutil.Discard, gzip.StatelessCompression)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;defer gzw.Close()&#xA;&#xA;&#x9;w := bufio.NewWriterSize(gzw, 4096)&#xA;&#x9;defer w.Flush()&#xA;&#x9;&#xA;&#x9;// Write to &#39;w&#39; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will only use up to 4KB in memory when the writer is idle.&lt;/p&gt; &#xA;&lt;p&gt;Compression is almost always worse than the fastest compression level and each write will allocate (a little) memory.&lt;/p&gt; &#xA;&lt;h1&gt;Performance Update 2018&lt;/h1&gt; &#xA;&lt;p&gt;It has been a while since we have been looking at the speed of this package compared to the standard library, so I thought I would re-do my tests and give some overall recommendations based on the current state. All benchmarks have been performed with Go 1.10 on my Desktop Intel(R) Core(TM) i7-2600 CPU @3.40GHz. Since I last ran the tests, I have gotten more RAM, which means tests with big files are no longer limited by my SSD.&lt;/p&gt; &#xA;&lt;p&gt;The raw results are in my &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1nuNE2nPfuINCZJRMt6wFWhKpToF95I47XjSsc-1rbPQ/edit?usp=sharing&#34;&gt;updated spreadsheet&lt;/a&gt;. Due to cgo changes and upstream updates i could not get the cgo version of gzip to compile. Instead I included the &lt;a href=&#34;https://github.com/datadog/zstd&#34;&gt;zstd&lt;/a&gt; cgo implementation. If I get cgo gzip to work again, I might replace the results in the sheet.&lt;/p&gt; &#xA;&lt;p&gt;The columns to take note of are: &lt;em&gt;MB/s&lt;/em&gt; - the throughput. &lt;em&gt;Reduction&lt;/em&gt; - the data size reduction in percent of the original. &lt;em&gt;Rel Speed&lt;/em&gt; relative speed compared to the standard library at the same level. &lt;em&gt;Smaller&lt;/em&gt; - how many percent smaller is the compressed output compared to stdlib. Negative means the output was bigger. &lt;em&gt;Loss&lt;/em&gt; means the loss (or gain) in compression as a percentage difference of the input.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;gzstd&lt;/code&gt; (standard library gzip) and &lt;code&gt;gzkp&lt;/code&gt; (this package gzip) only uses one CPU core. &lt;a href=&#34;https://github.com/klauspost/pgzip&#34;&gt;&lt;code&gt;pgzip&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/biogo/hts/tree/master/bgzf&#34;&gt;&lt;code&gt;bgzf&lt;/code&gt;&lt;/a&gt; uses all 4 cores. &lt;a href=&#34;https://github.com/DataDog/zstd&#34;&gt;&lt;code&gt;zstd&lt;/code&gt;&lt;/a&gt; uses one core, and is a beast (but not Go, yet).&lt;/p&gt; &#xA;&lt;h2&gt;Overall differences.&lt;/h2&gt; &#xA;&lt;p&gt;There appears to be a roughly 5-10% speed advantage over the standard library when comparing at similar compression levels.&lt;/p&gt; &#xA;&lt;p&gt;The biggest difference you will see is the result of &lt;a href=&#34;https://blog.klauspost.com/rebalancing-deflate-compression-levels/&#34;&gt;re-balancing&lt;/a&gt; the compression levels. I wanted by library to give a smoother transition between the compression levels than the standard library.&lt;/p&gt; &#xA;&lt;p&gt;This package attempts to provide a more smooth transition, where &#34;1&#34; is taking a lot of shortcuts, &#34;5&#34; is the reasonable trade-off and &#34;9&#34; is the &#34;give me the best compression&#34;, and the values in between gives something reasonable in between. The standard library has big differences in levels 1-4, but levels 5-9 having no significant gains - often spending a lot more time than can be justified by the achieved compression.&lt;/p&gt; &#xA;&lt;p&gt;There are links to all the test data in the &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1nuNE2nPfuINCZJRMt6wFWhKpToF95I47XjSsc-1rbPQ/edit?usp=sharing&#34;&gt;spreadsheet&lt;/a&gt; in the top left field on each tab.&lt;/p&gt; &#xA;&lt;h2&gt;Web Content&lt;/h2&gt; &#xA;&lt;p&gt;This test set aims to emulate typical use in a web server. The test-set is 4GB data in 53k files, and is a mixture of (mostly) HTML, JS, CSS.&lt;/p&gt; &#xA;&lt;p&gt;Since level 1 and 9 are close to being the same code, they are quite close. But looking at the levels in-between the differences are quite big.&lt;/p&gt; &#xA;&lt;p&gt;Looking at level 6, this package is 88% faster, but will output about 6% more data. For a web server, this means you can serve 88% more data, but have to pay for 6% more bandwidth. You can draw your own conclusions on what would be the most expensive for your case.&lt;/p&gt; &#xA;&lt;h2&gt;Object files&lt;/h2&gt; &#xA;&lt;p&gt;This test is for typical data files stored on a server. In this case it is a collection of Go precompiled objects. They are very compressible.&lt;/p&gt; &#xA;&lt;p&gt;The picture is similar to the web content, but with small differences since this is very compressible. Levels 2-3 offer good speed, but is sacrificing quite a bit of compression.&lt;/p&gt; &#xA;&lt;p&gt;The standard library seems suboptimal on level 3 and 4 - offering both worse compression and speed than level 6 &amp;amp; 7 of this package respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Highly Compressible File&lt;/h2&gt; &#xA;&lt;p&gt;This is a JSON file with very high redundancy. The reduction starts at 95% on level 1, so in real life terms we are dealing with something like a highly redundant stream of data, etc.&lt;/p&gt; &#xA;&lt;p&gt;It is definitely visible that we are dealing with specialized content here, so the results are very scattered. This package does not do very well at levels 1-4, but picks up significantly at level 5 and levels 7 and 8 offering great speed for the achieved compression.&lt;/p&gt; &#xA;&lt;p&gt;So if you know you content is extremely compressible you might want to go slightly higher than the defaults. The standard library has a huge gap between levels 3 and 4 in terms of speed (2.75x slowdown), so it offers little &#34;middle ground&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Medium-High Compressible&lt;/h2&gt; &#xA;&lt;p&gt;This is a pretty common test corpus: &lt;a href=&#34;http://mattmahoney.net/dc/textdata.html&#34;&gt;enwik9&lt;/a&gt;. It contains the first 10^9 bytes of the English Wikipedia dump on Mar. 3, 2006. This is a very good test of typical text based compression and more data heavy streams.&lt;/p&gt; &#xA;&lt;p&gt;We see a similar picture here as in &#34;Web Content&#34;. On equal levels some compression is sacrificed for more speed. Level 5 seems to be the best trade-off between speed and size, beating stdlib level 3 in both.&lt;/p&gt; &#xA;&lt;h2&gt;Medium Compressible&lt;/h2&gt; &#xA;&lt;p&gt;I will combine two test sets, one &lt;a href=&#34;http://mattmahoney.net/dc/10gb.html&#34;&gt;10GB file set&lt;/a&gt; and a VM disk image (~8GB). Both contain different data types and represent a typical backup scenario.&lt;/p&gt; &#xA;&lt;p&gt;The most notable thing is how quickly the standard library drops to very low compression speeds around level 5-6 without any big gains in compression. Since this type of data is fairly common, this does not seem like good behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Un-compressible Content&lt;/h2&gt; &#xA;&lt;p&gt;This is mainly a test of how good the algorithms are at detecting un-compressible input. The standard library only offers this feature with very conservative settings at level 1. Obviously there is no reason for the algorithms to try to compress input that cannot be compressed. The only downside is that it might skip some compressible data on false detections.&lt;/p&gt; &#xA;&lt;h2&gt;Huffman only compression&lt;/h2&gt; &#xA;&lt;p&gt;This compression library adds a special compression level, named &lt;code&gt;HuffmanOnly&lt;/code&gt;, which allows near linear time compression. This is done by completely disabling matching of previous data, and only reduce the number of bits to represent each character.&lt;/p&gt; &#xA;&lt;p&gt;This means that often used characters, like &#39;e&#39; and &#39; &#39; (space) in text use the fewest bits to represent, and rare characters like &#39;¤&#39; takes more bits to represent. For more information see &lt;a href=&#34;https://en.wikipedia.org/wiki/Huffman_coding&#34;&gt;wikipedia&lt;/a&gt; or this nice &lt;a href=&#34;https://youtu.be/ZdooBTdW5bM&#34;&gt;video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Since this type of compression has much less variance, the compression speed is mostly unaffected by the input data, and is usually more than &lt;em&gt;180MB/s&lt;/em&gt; for a single core.&lt;/p&gt; &#xA;&lt;p&gt;The downside is that the compression ratio is usually considerably worse than even the fastest conventional compression. The compression ratio can never be better than 8:1 (12.5%).&lt;/p&gt; &#xA;&lt;p&gt;The linear time compression can be used as a &#34;better than nothing&#34; mode, where you cannot risk the encoder to slow down on some content. For comparison, the size of the &#34;Twain&#34; text is &lt;em&gt;233460 bytes&lt;/em&gt; (+29% vs. level 1) and encode speed is 144MB/s (4.5x level 1). So in this case you trade a 30% size increase for a 4 times speedup.&lt;/p&gt; &#xA;&lt;p&gt;For more information see my blog post on &lt;a href=&#34;http://blog.klauspost.com/constant-time-gzipzip-compression/&#34;&gt;Fast Linear Time Compression&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is implemented on Go 1.7 as &#34;Huffman Only&#34; mode, though not exposed for gzip.&lt;/p&gt; &#xA;&lt;h1&gt;Other packages&lt;/h1&gt; &#xA;&lt;p&gt;Here are other packages of good quality and pure Go (no cgo wrappers or autoconverted code):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pierrec/lz4&#34;&gt;github.com/pierrec/lz4&lt;/a&gt; - strong multithreaded LZ4 compression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cosnicolaou/pbzip2&#34;&gt;github.com/cosnicolaou/pbzip2&lt;/a&gt; - multithreaded bzip2 decompression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dsnet/compress&#34;&gt;github.com/dsnet/compress&lt;/a&gt; - brotli decompression, bzip2 writer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;license&lt;/h1&gt; &#xA;&lt;p&gt;This code is licensed under the same conditions as the original Go code. See LICENSE file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>spf13/viper</title>
    <updated>2022-09-28T01:35:56Z</updated>
    <id>tag:github.com,2022-09-28:/spf13/viper</id>
    <link href="https://github.com/spf13/viper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go configuration with fangs&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;h2&gt;Viper v2 feedback&lt;/h2&gt; &#xA; &lt;p&gt;Viper is heading towards v2 and we would love to hear what &lt;em&gt;&lt;strong&gt;you&lt;/strong&gt;&lt;/em&gt; would like to see in it. Share your thoughts here: &lt;a href=&#34;https://forms.gle/R6faU74qPRPAzchZ9&#34;&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Thank you!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/spf13/viper/master/.github/logo.png?raw=true&#34; alt=&#34;Viper&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/avelino/awesome-go#configuration&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge-flat.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repl.it/@sagikazarmark/Viper-example#main.go&#34;&gt;&lt;img src=&#34;https://repl.it/badge/github/sagikazarmark/Viper-example&#34; alt=&#34;run on repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/spf13/viper/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/spf13/viper/CI?style=flat-square&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/spf13/viper?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/spf13/viper&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/spf13/viper&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/spf13/viper?style=flat-square&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/go%20version-%3E=1.16-61CFDD.svg?style=flat-square&#34; alt=&#34;Go Version&#34;&gt; &lt;a href=&#34;https://pkg.go.dev/mod/github.com/spf13/viper&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/mod/github.com/spf13/viper&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Go configuration with fangs!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Many Go projects are built using Viper including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://gohugo.io&#34;&gt;Hugo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://rexray.readthedocs.org/en/stable/&#34;&gt;EMC RexRay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Imgur/incus&#34;&gt;Imgur’s Incus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nanobox-io/nanobox&#34;&gt;Nanobox&lt;/a&gt;/&lt;a href=&#34;https://github.com/nanopack&#34;&gt;Nanopack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker/Notary&#34;&gt;Docker Notary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bloomapi.com/&#34;&gt;BloomApi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/digitalocean/doctl&#34;&gt;doctl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jgsqware/clairctl&#34;&gt;Clairctl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mercure.rocks&#34;&gt;Mercure&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/spf13/viper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Viper uses &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go Modules&lt;/a&gt; to manage dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;What is Viper?&lt;/h2&gt; &#xA;&lt;p&gt;Viper is a complete configuration solution for Go applications including 12-Factor apps. It is designed to work within an application, and can handle all types of configuration needs and formats. It supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;setting defaults&lt;/li&gt; &#xA; &lt;li&gt;reading from JSON, TOML, YAML, HCL, envfile and Java properties config files&lt;/li&gt; &#xA; &lt;li&gt;live watching and re-reading of config files (optional)&lt;/li&gt; &#xA; &lt;li&gt;reading from environment variables&lt;/li&gt; &#xA; &lt;li&gt;reading from remote config systems (etcd or Consul), and watching changes&lt;/li&gt; &#xA; &lt;li&gt;reading from command line flags&lt;/li&gt; &#xA; &lt;li&gt;reading from buffer&lt;/li&gt; &#xA; &lt;li&gt;setting explicit values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Viper can be thought of as a registry for all of your applications configuration needs.&lt;/p&gt; &#xA;&lt;h2&gt;Why Viper?&lt;/h2&gt; &#xA;&lt;p&gt;When building a modern application, you don’t want to worry about configuration file formats; you want to focus on building awesome software. Viper is here to help with that.&lt;/p&gt; &#xA;&lt;p&gt;Viper does the following for you:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find, load, and unmarshal a configuration file in JSON, TOML, YAML, HCL, INI, envfile or Java properties formats.&lt;/li&gt; &#xA; &lt;li&gt;Provide a mechanism to set default values for your different configuration options.&lt;/li&gt; &#xA; &lt;li&gt;Provide a mechanism to set override values for options specified through command line flags.&lt;/li&gt; &#xA; &lt;li&gt;Provide an alias system to easily rename parameters without breaking existing code.&lt;/li&gt; &#xA; &lt;li&gt;Make it easy to tell the difference between when a user has provided a command line or config file which is the same as the default.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Viper uses the following precedence order. Each item takes precedence over the item below it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;explicit call to &lt;code&gt;Set&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;flag&lt;/li&gt; &#xA; &lt;li&gt;env&lt;/li&gt; &#xA; &lt;li&gt;config&lt;/li&gt; &#xA; &lt;li&gt;key/value store&lt;/li&gt; &#xA; &lt;li&gt;default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; Viper configuration keys are case insensitive. There are ongoing discussions about making that optional.&lt;/p&gt; &#xA;&lt;h2&gt;Putting Values into Viper&lt;/h2&gt; &#xA;&lt;h3&gt;Establishing Defaults&lt;/h3&gt; &#xA;&lt;p&gt;A good configuration system will support default values. A default value is not required for a key, but it’s useful in the event that a key hasn&#39;t been set via config file, environment variable, remote configuration or flag.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.SetDefault(&#34;ContentDir&#34;, &#34;content&#34;)&#xA;viper.SetDefault(&#34;LayoutDir&#34;, &#34;layouts&#34;)&#xA;viper.SetDefault(&#34;Taxonomies&#34;, map[string]string{&#34;tag&#34;: &#34;tags&#34;, &#34;category&#34;: &#34;categories&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading Config Files&lt;/h3&gt; &#xA;&lt;p&gt;Viper requires minimal configuration so it knows where to look for config files. Viper supports JSON, TOML, YAML, HCL, INI, envfile and Java Properties files. Viper can search multiple paths, but currently a single Viper instance only supports a single configuration file. Viper does not default to any configuration search paths leaving defaults decision to an application.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how to use Viper to search for and read a configuration file. None of the specific paths are required, but at least one path should be provided where a configuration file is expected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.SetConfigName(&#34;config&#34;) // name of config file (without extension)&#xA;viper.SetConfigType(&#34;yaml&#34;) // REQUIRED if the config file does not have the extension in the name&#xA;viper.AddConfigPath(&#34;/etc/appname/&#34;)   // path to look for the config file in&#xA;viper.AddConfigPath(&#34;$HOME/.appname&#34;)  // call multiple times to add many search paths&#xA;viper.AddConfigPath(&#34;.&#34;)               // optionally look for config in the working directory&#xA;err := viper.ReadInConfig() // Find and read the config file&#xA;if err != nil { // Handle errors reading the config file&#xA;&#x9;panic(fmt.Errorf(&#34;fatal error config file: %w&#34;, err))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can handle the specific case where no config file is found like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err := viper.ReadInConfig(); err != nil {&#xA;&#x9;if _, ok := err.(viper.ConfigFileNotFoundError); ok {&#xA;&#x9;&#x9;// Config file not found; ignore error if desired&#xA;&#x9;} else {&#xA;&#x9;&#x9;// Config file was found but another error was produced&#xA;&#x9;}&#xA;}&#xA;&#xA;// Config file found and successfully parsed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE [since 1.6]:&lt;/em&gt; You can also have a file without an extension and specify the format programmaticaly. For those configuration files that lie in the home of the user without any extension like &lt;code&gt;.bashrc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Writing Config Files&lt;/h3&gt; &#xA;&lt;p&gt;Reading from config files is useful, but at times you want to store all modifications made at run time. For that, a bunch of commands are available, each with its own purpose:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;WriteConfig - writes the current viper configuration to the predefined path, if exists. Errors if no predefined path. Will overwrite the current config file, if it exists.&lt;/li&gt; &#xA; &lt;li&gt;SafeWriteConfig - writes the current viper configuration to the predefined path. Errors if no predefined path. Will not overwrite the current config file, if it exists.&lt;/li&gt; &#xA; &lt;li&gt;WriteConfigAs - writes the current viper configuration to the given filepath. Will overwrite the given file, if it exists.&lt;/li&gt; &#xA; &lt;li&gt;SafeWriteConfigAs - writes the current viper configuration to the given filepath. Will not overwrite the given file, if it exists.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As a rule of the thumb, everything marked with safe won&#39;t overwrite any file, but just create if not existent, whilst the default behavior is to create or truncate.&lt;/p&gt; &#xA;&lt;p&gt;A small examples section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.WriteConfig() // writes current config to predefined path set by &#39;viper.AddConfigPath()&#39; and &#39;viper.SetConfigName&#39;&#xA;viper.SafeWriteConfig()&#xA;viper.WriteConfigAs(&#34;/path/to/my/.config&#34;)&#xA;viper.SafeWriteConfigAs(&#34;/path/to/my/.config&#34;) // will error since it has already been written&#xA;viper.SafeWriteConfigAs(&#34;/path/to/my/.other_config&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Watching and re-reading config files&lt;/h3&gt; &#xA;&lt;p&gt;Viper supports the ability to have your application live read a config file while running.&lt;/p&gt; &#xA;&lt;p&gt;Gone are the days of needing to restart a server to have a config take effect, viper powered applications can read an update to a config file while running and not miss a beat.&lt;/p&gt; &#xA;&lt;p&gt;Simply tell the viper instance to watchConfig. Optionally you can provide a function for Viper to run each time a change occurs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Make sure you add all of the configPaths prior to calling &lt;code&gt;WatchConfig()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.OnConfigChange(func(e fsnotify.Event) {&#xA;&#x9;fmt.Println(&#34;Config file changed:&#34;, e.Name)&#xA;})&#xA;viper.WatchConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Reading Config from io.Reader&lt;/h3&gt; &#xA;&lt;p&gt;Viper predefines many configuration sources such as files, environment variables, flags, and remote K/V store, but you are not bound to them. You can also implement your own required configuration source and feed it to viper.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.SetConfigType(&#34;yaml&#34;) // or viper.SetConfigType(&#34;YAML&#34;)&#xA;&#xA;// any approach to require this configuration into your program.&#xA;var yamlExample = []byte(`&#xA;Hacker: true&#xA;name: steve&#xA;hobbies:&#xA;- skateboarding&#xA;- snowboarding&#xA;- go&#xA;clothing:&#xA;  jacket: leather&#xA;  trousers: denim&#xA;age: 35&#xA;eyes : brown&#xA;beard: true&#xA;`)&#xA;&#xA;viper.ReadConfig(bytes.NewBuffer(yamlExample))&#xA;&#xA;viper.Get(&#34;name&#34;) // this would be &#34;steve&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setting Overrides&lt;/h3&gt; &#xA;&lt;p&gt;These could be from a command line flag, or from your own application logic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.Set(&#34;Verbose&#34;, true)&#xA;viper.Set(&#34;LogFile&#34;, LogFile)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Registering and Using Aliases&lt;/h3&gt; &#xA;&lt;p&gt;Aliases permit a single value to be referenced by multiple keys&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.RegisterAlias(&#34;loud&#34;, &#34;Verbose&#34;)&#xA;&#xA;viper.Set(&#34;verbose&#34;, true) // same result as next line&#xA;viper.Set(&#34;loud&#34;, true)   // same result as prior line&#xA;&#xA;viper.GetBool(&#34;loud&#34;) // true&#xA;viper.GetBool(&#34;verbose&#34;) // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;Viper has full support for environment variables. This enables 12 factor applications out of the box. There are five methods that exist to aid working with ENV:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AutomaticEnv()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;BindEnv(string...) : error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetEnvPrefix(string)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SetEnvKeyReplacer(string...) *strings.Replacer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AllowEmptyEnv(bool)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;When working with ENV variables, it’s important to recognize that Viper treats ENV variables as case sensitive.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Viper provides a mechanism to try to ensure that ENV variables are unique. By using &lt;code&gt;SetEnvPrefix&lt;/code&gt;, you can tell Viper to use a prefix while reading from the environment variables. Both &lt;code&gt;BindEnv&lt;/code&gt; and &lt;code&gt;AutomaticEnv&lt;/code&gt; will use this prefix.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;BindEnv&lt;/code&gt; takes one or more parameters. The first parameter is the key name, the rest are the name of the environment variables to bind to this key. If more than one are provided, they will take precedence in the specified order. The name of the environment variable is case sensitive. If the ENV variable name is not provided, then Viper will automatically assume that the ENV variable matches the following format: prefix + &#34;_&#34; + the key name in ALL CAPS. When you explicitly provide the ENV variable name (the second parameter), it &lt;strong&gt;does not&lt;/strong&gt; automatically add the prefix. For example if the second parameter is &#34;id&#34;, Viper will look for the ENV variable &#34;ID&#34;.&lt;/p&gt; &#xA;&lt;p&gt;One important thing to recognize when working with ENV variables is that the value will be read each time it is accessed. Viper does not fix the value when the &lt;code&gt;BindEnv&lt;/code&gt; is called.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;AutomaticEnv&lt;/code&gt; is a powerful helper especially when combined with &lt;code&gt;SetEnvPrefix&lt;/code&gt;. When called, Viper will check for an environment variable any time a &lt;code&gt;viper.Get&lt;/code&gt; request is made. It will apply the following rules. It will check for an environment variable with a name matching the key uppercased and prefixed with the &lt;code&gt;EnvPrefix&lt;/code&gt; if set.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;SetEnvKeyReplacer&lt;/code&gt; allows you to use a &lt;code&gt;strings.Replacer&lt;/code&gt; object to rewrite Env keys to an extent. This is useful if you want to use &lt;code&gt;-&lt;/code&gt; or something in your &lt;code&gt;Get()&lt;/code&gt; calls, but want your environmental variables to use &lt;code&gt;_&lt;/code&gt; delimiters. An example of using it can be found in &lt;code&gt;viper_test.go&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;EnvKeyReplacer&lt;/code&gt; with &lt;code&gt;NewWithOptions&lt;/code&gt; factory function. Unlike &lt;code&gt;SetEnvKeyReplacer&lt;/code&gt;, it accepts a &lt;code&gt;StringReplacer&lt;/code&gt; interface allowing you to write custom string replacing logic.&lt;/p&gt; &#xA;&lt;p&gt;By default empty environment variables are considered unset and will fall back to the next configuration source. To treat empty environment variables as set, use the &lt;code&gt;AllowEmptyEnv&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;h4&gt;Env example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;SetEnvPrefix(&#34;spf&#34;) // will be uppercased automatically&#xA;BindEnv(&#34;id&#34;)&#xA;&#xA;os.Setenv(&#34;SPF_ID&#34;, &#34;13&#34;) // typically done outside of the app&#xA;&#xA;id := Get(&#34;id&#34;) // 13&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with Flags&lt;/h3&gt; &#xA;&lt;p&gt;Viper has the ability to bind to flags. Specifically, Viper supports &lt;code&gt;Pflags&lt;/code&gt; as used in the &lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;BindEnv&lt;/code&gt;, the value is not set when the binding method is called, but when it is accessed. This means you can bind as early as you want, even in an &lt;code&gt;init()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;For individual flags, the &lt;code&gt;BindPFlag()&lt;/code&gt; method provides this functionality.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;serverCmd.Flags().Int(&#34;port&#34;, 1138, &#34;Port to run Application server on&#34;)&#xA;viper.BindPFlag(&#34;port&#34;, serverCmd.Flags().Lookup(&#34;port&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also bind an existing set of pflags (pflag.FlagSet):&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;pflag.Int(&#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)&#xA;&#xA;pflag.Parse()&#xA;viper.BindPFlags(pflag.CommandLine)&#xA;&#xA;i := viper.GetInt(&#34;flagname&#34;) // retrieve values from viper instead of pflag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The use of &lt;a href=&#34;https://github.com/spf13/pflag/&#34;&gt;pflag&lt;/a&gt; in Viper does not preclude the use of other packages that use the &lt;a href=&#34;https://golang.org/pkg/flag/&#34;&gt;flag&lt;/a&gt; package from the standard library. The pflag package can handle the flags defined for the flag package by importing these flags. This is accomplished by a calling a convenience function provided by the pflag package called AddGoFlagSet().&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;flag&#34;&#xA;&#x9;&#34;github.com/spf13/pflag&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#xA;&#x9;// using standard library &#34;flag&#34; package&#xA;&#x9;flag.Int(&#34;flagname&#34;, 1234, &#34;help message for flagname&#34;)&#xA;&#xA;&#x9;pflag.CommandLine.AddGoFlagSet(flag.CommandLine)&#xA;&#x9;pflag.Parse()&#xA;&#x9;viper.BindPFlags(pflag.CommandLine)&#xA;&#xA;&#x9;i := viper.GetInt(&#34;flagname&#34;) // retrieve value from viper&#xA;&#xA;&#x9;// ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Flag interfaces&lt;/h4&gt; &#xA;&lt;p&gt;Viper provides two Go interfaces to bind other flag systems if you don’t use &lt;code&gt;Pflags&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;FlagValue&lt;/code&gt; represents a single flag. This is a very simple example on how to implement this interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type myFlag struct {}&#xA;func (f myFlag) HasChanged() bool { return false }&#xA;func (f myFlag) Name() string { return &#34;my-flag-name&#34; }&#xA;func (f myFlag) ValueString() string { return &#34;my-flag-value&#34; }&#xA;func (f myFlag) ValueType() string { return &#34;string&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your flag implements this interface, you can simply tell Viper to bind it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.BindFlagValue(&#34;my-flag-name&#34;, myFlag{})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;FlagValueSet&lt;/code&gt; represents a group of flags. This is a very simple example on how to implement this interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type myFlagSet struct {&#xA;&#x9;flags []myFlag&#xA;}&#xA;&#xA;func (f myFlagSet) VisitAll(fn func(FlagValue)) {&#xA;&#x9;for _, flag := range flags {&#xA;&#x9;&#x9;fn(flag)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your flag set implements this interface, you can simply tell Viper to bind it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;fSet := myFlagSet{&#xA;&#x9;flags: []myFlag{myFlag{}, myFlag{}},&#xA;}&#xA;viper.BindFlagValues(&#34;my-flags&#34;, fSet)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Remote Key/Value Store Support&lt;/h3&gt; &#xA;&lt;p&gt;To enable remote support in Viper, do a blank import of the &lt;code&gt;viper/remote&lt;/code&gt; package:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;import _ &#34;github.com/spf13/viper/remote&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Viper will read a config string (as JSON, TOML, YAML, HCL or envfile) retrieved from a path in a Key/Value store such as etcd or Consul. These values take precedence over default values, but are overridden by configuration values retrieved from disk, flags, or environment variables.&lt;/p&gt; &#xA;&lt;p&gt;Viper uses &lt;a href=&#34;https://github.com/bketelsen/crypt&#34;&gt;crypt&lt;/a&gt; to retrieve configuration from the K/V store, which means that you can store your configuration values encrypted and have them automatically decrypted if you have the correct gpg keyring. Encryption is optional.&lt;/p&gt; &#xA;&lt;p&gt;You can use remote configuration in conjunction with local configuration, or independently of it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;crypt&lt;/code&gt; has a command-line helper that you can use to put configurations in your K/V store. &lt;code&gt;crypt&lt;/code&gt; defaults to etcd on &lt;a href=&#34;http://127.0.0.1:4001&#34;&gt;http://127.0.0.1:4001&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go get github.com/bketelsen/crypt/bin/crypt&#xA;$ crypt set -plaintext /config/hugo.json /Users/hugo/settings/config.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Confirm that your value was set:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ crypt get -plaintext /config/hugo.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;code&gt;crypt&lt;/code&gt; documentation for examples of how to set encrypted values, or how to use Consul.&lt;/p&gt; &#xA;&lt;h3&gt;Remote Key/Value Store Example - Unencrypted&lt;/h3&gt; &#xA;&lt;h4&gt;etcd&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;etcd&#34;, &#34;http://127.0.0.1:4001&#34;,&#34;/config/hugo.json&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // because there is no file extension in a stream of bytes, supported extensions are &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;, &#34;properties&#34;, &#34;props&#34;, &#34;prop&#34;, &#34;env&#34;, &#34;dotenv&#34;&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;etcd3&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;etcd3&#34;, &#34;http://127.0.0.1:4001&#34;,&#34;/config/hugo.json&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // because there is no file extension in a stream of bytes, supported extensions are &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;, &#34;properties&#34;, &#34;props&#34;, &#34;prop&#34;, &#34;env&#34;, &#34;dotenv&#34;&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Consul&lt;/h4&gt; &#xA;&lt;p&gt;You need to set a key to Consul key/value storage with JSON value containing your desired config. For example, create a Consul key/value store key &lt;code&gt;MY_CONSUL_KEY&lt;/code&gt; with value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;port&#34;: 8080,&#xA;    &#34;hostname&#34;: &#34;myhostname.com&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;consul&#34;, &#34;localhost:8500&#34;, &#34;MY_CONSUL_KEY&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // Need to explicitly set this to json&#xA;err := viper.ReadRemoteConfig()&#xA;&#xA;fmt.Println(viper.Get(&#34;port&#34;)) // 8080&#xA;fmt.Println(viper.Get(&#34;hostname&#34;)) // myhostname.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Firestore&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddRemoteProvider(&#34;firestore&#34;, &#34;google-cloud-project-id&#34;, &#34;collection/document&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // Config&#39;s format: &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Of course, you&#39;re allowed to use &lt;code&gt;SecureRemoteProvider&lt;/code&gt; also&lt;/p&gt; &#xA;&lt;h3&gt;Remote Key/Value Store Example - Encrypted&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.AddSecureRemoteProvider(&#34;etcd&#34;,&#34;http://127.0.0.1:4001&#34;,&#34;/config/hugo.json&#34;,&#34;/etc/secrets/mykeyring.gpg&#34;)&#xA;viper.SetConfigType(&#34;json&#34;) // because there is no file extension in a stream of bytes,  supported extensions are &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;, &#34;properties&#34;, &#34;props&#34;, &#34;prop&#34;, &#34;env&#34;, &#34;dotenv&#34;&#xA;err := viper.ReadRemoteConfig()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Watching Changes in etcd - Unencrypted&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// alternatively, you can create a new viper instance.&#xA;var runtime_viper = viper.New()&#xA;&#xA;runtime_viper.AddRemoteProvider(&#34;etcd&#34;, &#34;http://127.0.0.1:4001&#34;, &#34;/config/hugo.yml&#34;)&#xA;runtime_viper.SetConfigType(&#34;yaml&#34;) // because there is no file extension in a stream of bytes, supported extensions are &#34;json&#34;, &#34;toml&#34;, &#34;yaml&#34;, &#34;yml&#34;, &#34;properties&#34;, &#34;props&#34;, &#34;prop&#34;, &#34;env&#34;, &#34;dotenv&#34;&#xA;&#xA;// read from remote config the first time.&#xA;err := runtime_viper.ReadRemoteConfig()&#xA;&#xA;// unmarshal config&#xA;runtime_viper.Unmarshal(&amp;amp;runtime_conf)&#xA;&#xA;// open a goroutine to watch remote changes forever&#xA;go func(){&#xA;&#x9;for {&#xA;&#x9;&#x9;time.Sleep(time.Second * 5) // delay after each request&#xA;&#xA;&#x9;&#x9;// currently, only tested with etcd support&#xA;&#x9;&#x9;err := runtime_viper.WatchRemoteConfig()&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;log.Errorf(&#34;unable to read remote config: %v&#34;, err)&#xA;&#x9;&#x9;&#x9;continue&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// unmarshal new config into our runtime config struct. you can also use channel&#xA;&#x9;&#x9;// to implement a signal to notify the system of the changes&#xA;&#x9;&#x9;runtime_viper.Unmarshal(&amp;amp;runtime_conf)&#xA;&#x9;}&#xA;}()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Values From Viper&lt;/h2&gt; &#xA;&lt;p&gt;In Viper, there are a few ways to get a value depending on the value’s type. The following functions and methods exist:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Get(key string) : interface{}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetBool(key string) : bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetFloat64(key string) : float64&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetInt(key string) : int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetIntSlice(key string) : []int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetString(key string) : string&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetStringMap(key string) : map[string]interface{}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetStringMapString(key string) : map[string]string&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetStringSlice(key string) : []string&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetTime(key string) : time.Time&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GetDuration(key string) : time.Duration&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IsSet(key string) : bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AllSettings() : map[string]interface{}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;One important thing to recognize is that each Get function will return a zero value if it’s not found. To check if a given key exists, the &lt;code&gt;IsSet()&lt;/code&gt; method has been provided.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;viper.GetString(&#34;logfile&#34;) // case-insensitive Setting &amp;amp; Getting&#xA;if viper.GetBool(&#34;verbose&#34;) {&#xA;&#x9;fmt.Println(&#34;verbose enabled&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing nested keys&lt;/h3&gt; &#xA;&lt;p&gt;The accessor methods also accept formatted paths to deeply nested keys. For example, if the following JSON file is loaded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;host&#34;: {&#xA;        &#34;address&#34;: &#34;localhost&#34;,&#xA;        &#34;port&#34;: 5799&#xA;    },&#xA;    &#34;datastore&#34;: {&#xA;        &#34;metric&#34;: {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;port&#34;: 3099&#xA;        },&#xA;        &#34;warehouse&#34;: {&#xA;            &#34;host&#34;: &#34;198.0.0.1&#34;,&#xA;            &#34;port&#34;: 2112&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Viper can access a nested field by passing a &lt;code&gt;.&lt;/code&gt; delimited path of keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;GetString(&#34;datastore.metric.host&#34;) // (returns &#34;127.0.0.1&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This obeys the precedence rules established above; the search for the path will cascade through the remaining configuration registries until found.&lt;/p&gt; &#xA;&lt;p&gt;For example, given this configuration file, both &lt;code&gt;datastore.metric.host&lt;/code&gt; and &lt;code&gt;datastore.metric.port&lt;/code&gt; are already defined (and may be overridden). If in addition &lt;code&gt;datastore.metric.protocol&lt;/code&gt; was defined in the defaults, Viper would also find it.&lt;/p&gt; &#xA;&lt;p&gt;However, if &lt;code&gt;datastore.metric&lt;/code&gt; was overridden (by a flag, an environment variable, the &lt;code&gt;Set()&lt;/code&gt; method, …) with an immediate value, then all sub-keys of &lt;code&gt;datastore.metric&lt;/code&gt; become undefined, they are “shadowed” by the higher-priority configuration level.&lt;/p&gt; &#xA;&lt;p&gt;Viper can access array indices by using numbers in the path. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    &#34;host&#34;: {&#xA;        &#34;address&#34;: &#34;localhost&#34;,&#xA;        &#34;ports&#34;: [&#xA;            5799,&#xA;            6029&#xA;        ]&#xA;    },&#xA;    &#34;datastore&#34;: {&#xA;        &#34;metric&#34;: {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;port&#34;: 3099&#xA;        },&#xA;        &#34;warehouse&#34;: {&#xA;            &#34;host&#34;: &#34;198.0.0.1&#34;,&#xA;            &#34;port&#34;: 2112&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;GetInt(&#34;host.ports.1&#34;) // returns 6029&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lastly, if there exists a key that matches the delimited key path, its value will be returned instead. E.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsonc&#34;&gt;{&#xA;    &#34;datastore.metric.host&#34;: &#34;0.0.0.0&#34;,&#xA;    &#34;host&#34;: {&#xA;        &#34;address&#34;: &#34;localhost&#34;,&#xA;        &#34;port&#34;: 5799&#xA;    },&#xA;    &#34;datastore&#34;: {&#xA;        &#34;metric&#34;: {&#xA;            &#34;host&#34;: &#34;127.0.0.1&#34;,&#xA;            &#34;port&#34;: 3099&#xA;        },&#xA;        &#34;warehouse&#34;: {&#xA;            &#34;host&#34;: &#34;198.0.0.1&#34;,&#xA;            &#34;port&#34;: 2112&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;GetString(&#34;datastore.metric.host&#34;) // returns &#34;0.0.0.0&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extracting a sub-tree&lt;/h3&gt; &#xA;&lt;p&gt;When developing reusable modules, it&#39;s often useful to extract a subset of the configuration and pass it to a module. This way the module can be instantiated more than once, with different configurations.&lt;/p&gt; &#xA;&lt;p&gt;For example, an application might use multiple different cache stores for different purposes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;cache:&#xA;  cache1:&#xA;    max-items: 100&#xA;    item-size: 64&#xA;  cache2:&#xA;    max-items: 200&#xA;    item-size: 80&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We could pass the cache name to a module (eg. &lt;code&gt;NewCache(&#34;cache1&#34;)&lt;/code&gt;), but it would require weird concatenation for accessing config keys and would be less separated from the global config.&lt;/p&gt; &#xA;&lt;p&gt;So instead of doing that let&#39;s pass a Viper instance to the constructor that represents a subset of the configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;cache1Config := viper.Sub(&#34;cache.cache1&#34;)&#xA;if cache1Config == nil { // Sub returns nil if the key cannot be found&#xA;&#x9;panic(&#34;cache configuration not found&#34;)&#xA;}&#xA;&#xA;cache1 := NewCache(cache1Config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Always check the return value of &lt;code&gt;Sub&lt;/code&gt;. It returns &lt;code&gt;nil&lt;/code&gt; if a key cannot be found.&lt;/p&gt; &#xA;&lt;p&gt;Internally, the &lt;code&gt;NewCache&lt;/code&gt; function can address &lt;code&gt;max-items&lt;/code&gt; and &lt;code&gt;item-size&lt;/code&gt; keys directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func NewCache(v *Viper) *Cache {&#xA;&#x9;return &amp;amp;Cache{&#xA;&#x9;&#x9;MaxItems: v.GetInt(&#34;max-items&#34;),&#xA;&#x9;&#x9;ItemSize: v.GetInt(&#34;item-size&#34;),&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting code is easy to test, since it&#39;s decoupled from the main config structure, and easier to reuse (for the same reason).&lt;/p&gt; &#xA;&lt;h3&gt;Unmarshaling&lt;/h3&gt; &#xA;&lt;p&gt;You also have the option of Unmarshaling all or a specific value to a struct, map, etc.&lt;/p&gt; &#xA;&lt;p&gt;There are two methods to do this:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Unmarshal(rawVal interface{}) : error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UnmarshalKey(key string, rawVal interface{}) : error&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type config struct {&#xA;&#x9;Port int&#xA;&#x9;Name string&#xA;&#x9;PathMap string `mapstructure:&#34;path_map&#34;`&#xA;}&#xA;&#xA;var C config&#xA;&#xA;err := viper.Unmarshal(&amp;amp;C)&#xA;if err != nil {&#xA;&#x9;t.Fatalf(&#34;unable to decode into struct, %v&#34;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to unmarshal configuration where the keys themselves contain dot (the default key delimiter), you have to change the delimiter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;v := viper.NewWithOptions(viper.KeyDelimiter(&#34;::&#34;))&#xA;&#xA;v.SetDefault(&#34;chart::values&#34;, map[string]interface{}{&#xA;&#x9;&#34;ingress&#34;: map[string]interface{}{&#xA;&#x9;&#x9;&#34;annotations&#34;: map[string]interface{}{&#xA;&#x9;&#x9;&#x9;&#34;traefik.frontend.rule.type&#34;:                 &#34;PathPrefix&#34;,&#xA;&#x9;&#x9;&#x9;&#34;traefik.ingress.kubernetes.io/ssl-redirect&#34;: &#34;true&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;})&#xA;&#xA;type config struct {&#xA;&#x9;Chart struct{&#xA;&#x9;&#x9;Values map[string]interface{}&#xA;&#x9;}&#xA;}&#xA;&#xA;var C config&#xA;&#xA;v.Unmarshal(&amp;amp;C)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Viper also supports unmarshaling into embedded structs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;/*&#xA;Example config:&#xA;&#xA;module:&#xA;    enabled: true&#xA;    token: 89h3f98hbwf987h3f98wenf89ehf&#xA;*/&#xA;type config struct {&#xA;&#x9;Module struct {&#xA;&#x9;&#x9;Enabled bool&#xA;&#xA;&#x9;&#x9;moduleConfig `mapstructure:&#34;,squash&#34;`&#xA;&#x9;}&#xA;}&#xA;&#xA;// moduleConfig could be in a module specific package&#xA;type moduleConfig struct {&#xA;&#x9;Token string&#xA;}&#xA;&#xA;var C config&#xA;&#xA;err := viper.Unmarshal(&amp;amp;C)&#xA;if err != nil {&#xA;&#x9;t.Fatalf(&#34;unable to decode into struct, %v&#34;, err)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Viper uses &lt;a href=&#34;https://github.com/mitchellh/mapstructure&#34;&gt;github.com/mitchellh/mapstructure&lt;/a&gt; under the hood for unmarshaling values which uses &lt;code&gt;mapstructure&lt;/code&gt; tags by default.&lt;/p&gt; &#xA;&lt;h3&gt;Decoding custom formats&lt;/h3&gt; &#xA;&lt;p&gt;A frequently requested feature for Viper is adding more value formats and decoders. For example, parsing character (dot, comma, semicolon, etc) separated strings into slices.&lt;/p&gt; &#xA;&lt;p&gt;This is already available in Viper using mapstructure decode hooks.&lt;/p&gt; &#xA;&lt;p&gt;Read more about the details in &lt;a href=&#34;https://sagikazarmark.hu/blog/decoding-custom-formats-with-viper/&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Marshalling to string&lt;/h3&gt; &#xA;&lt;p&gt;You may need to marshal all the settings held in viper into a string rather than write them to a file. You can use your favorite format&#39;s marshaller with the config returned by &lt;code&gt;AllSettings()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;yaml &#34;gopkg.in/yaml.v2&#34;&#xA;&#x9;// ...&#xA;)&#xA;&#xA;func yamlStringSettings() string {&#xA;&#x9;c := viper.AllSettings()&#xA;&#x9;bs, err := yaml.Marshal(c)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;unable to marshal config to YAML: %v&#34;, err)&#xA;&#x9;}&#xA;&#x9;return string(bs)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Viper or Vipers?&lt;/h2&gt; &#xA;&lt;p&gt;Viper comes ready to use out of the box. There is no configuration or initialization needed to begin using Viper. Since most applications will want to use a single central repository for their configuration, the viper package provides this. It is similar to a singleton.&lt;/p&gt; &#xA;&lt;p&gt;In all of the examples above, they demonstrate using viper in its singleton style approach.&lt;/p&gt; &#xA;&lt;h3&gt;Working with multiple vipers&lt;/h3&gt; &#xA;&lt;p&gt;You can also create many different vipers for use in your application. Each will have its own unique set of configurations and values. Each can read from a different config file, key value store, etc. All of the functions that viper package supports are mirrored as methods on a viper.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;x := viper.New()&#xA;y := viper.New()&#xA;&#xA;x.SetDefault(&#34;ContentDir&#34;, &#34;content&#34;)&#xA;y.SetDefault(&#34;ContentDir&#34;, &#34;foobar&#34;)&#xA;&#xA;//...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When working with multiple vipers, it is up to the user to keep track of the different vipers.&lt;/p&gt; &#xA;&lt;h2&gt;Q &amp;amp; A&lt;/h2&gt; &#xA;&lt;h3&gt;Why is it called “Viper”?&lt;/h3&gt; &#xA;&lt;p&gt;A: Viper is designed to be a &lt;a href=&#34;http://en.wikipedia.org/wiki/Viper_(G.I._Joe)&#34;&gt;companion&lt;/a&gt; to &lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;. While both can operate completely independently, together they make a powerful pair to handle much of your application foundation needs.&lt;/p&gt; &#xA;&lt;h3&gt;Why is it called “Cobra”?&lt;/h3&gt; &#xA;&lt;p&gt;Is there a better name for a &lt;a href=&#34;http://en.wikipedia.org/wiki/Cobra_Commander&#34;&gt;commander&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;h3&gt;Does Viper support case sensitive keys?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; No.&lt;/p&gt; &#xA;&lt;p&gt;Viper merges configuration from various sources, many of which are either case insensitive or uses different casing than the rest of the sources (eg. env vars). In order to provide the best experience when using multiple sources, the decision has been made to make all keys case insensitive.&lt;/p&gt; &#xA;&lt;p&gt;There has been several attempts to implement case sensitivity, but unfortunately it&#39;s not that trivial. We might take a stab at implementing it in &lt;a href=&#34;https://github.com/spf13/viper/issues/772&#34;&gt;Viper v2&lt;/a&gt;, but despite the initial noise, it does not seem to be requested that much.&lt;/p&gt; &#xA;&lt;p&gt;You can vote for case sensitivity by filling out this feedback form: &lt;a href=&#34;https://forms.gle/R6faU74qPRPAzchZ9&#34;&gt;https://forms.gle/R6faU74qPRPAzchZ9&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Is it safe to concurrently read and write to a viper?&lt;/h3&gt; &#xA;&lt;p&gt;No, you will need to synchronize access to the viper yourself (for example by using the &lt;code&gt;sync&lt;/code&gt; package). Concurrent reads and writes can cause a panic.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/spf13/viper/master/TROUBLESHOOTING.md&#34;&gt;TROUBLESHOOTING.md&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>envoyproxy/protoc-gen-validate</title>
    <updated>2022-09-28T01:35:56Z</updated>
    <id>tag:github.com,2022-09-28:/envoyproxy/protoc-gen-validate</id>
    <link href="https://github.com/envoyproxy/protoc-gen-validate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;protoc plugin to generate polyglot message validators&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;protoc-gen-validate (PGV)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;This project is currently in &lt;strong&gt;alpha&lt;/strong&gt;. The API should be considered unstable and likely to change&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;PGV is a protoc plugin to generate polyglot message validators. While protocol buffers effectively guarantee the types of structured data, they cannot enforce semantic rules for values. This plugin adds support to protoc-generated code to validate such constraints.&lt;/p&gt; &#xA;&lt;p&gt;Developers import the PGV extension and annotate the messages and fields in their proto files with constraint rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;syntax = &#34;proto3&#34;;&#xA;&#xA;package examplepb;&#xA;&#xA;import &#34;validate/validate.proto&#34;;&#xA;&#xA;message Person {&#xA;  uint64 id    = 1 [(validate.rules).uint64.gt    = 999];&#xA;&#xA;  string email = 2 [(validate.rules).string.email = true];&#xA;&#xA;  string name  = 3 [(validate.rules).string = {&#xA;                      pattern:   &#34;^[^[0-9]A-Za-z]+( [^[0-9]A-Za-z]+)*$&#34;,&#xA;                      max_bytes: 256,&#xA;                   }];&#xA;&#xA;  Location home = 4 [(validate.rules).message.required = true];&#xA;&#xA;  message Location {&#xA;    double lat = 1 [(validate.rules).double = { gte: -90,  lte: 90 }];&#xA;    double lng = 2 [(validate.rules).double = { gte: -180, lte: 180 }];&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Executing &lt;code&gt;protoc&lt;/code&gt; with PGV and the target language&#39;s default plugin will create &lt;code&gt;Validate&lt;/code&gt; methods on the generated types:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;p := new(Person)&#xA;&#xA;err := p.Validate() // err: Id must be greater than 999&#xA;p.Id = 1000&#xA;&#xA;err = p.Validate() // err: Email must be a valid email address&#xA;p.Email = &#34;example@lyft.com&#34;&#xA;&#xA;err = p.Validate() // err: Name must match pattern &#39;^[^\d\s]+( [^\d\s]+)*$&#39;&#xA;p.Name = &#34;Protocol Buffer&#34;&#xA;&#xA;err = p.Validate() // err: Home is required&#xA;p.Home = &amp;amp;Location{37.7, 999}&#xA;&#xA;err = p.Validate() // err: Home.Lng must be within [-180, 180]&#xA;p.Home.Lng = -122.4&#xA;&#xA;err = p.Validate() // err: nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;go&lt;/code&gt; toolchain (≥ v1.7)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc&lt;/code&gt; compiler in &lt;code&gt;$PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;protoc-gen-validate&lt;/code&gt; in &lt;code&gt;$PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;official language-specific plugin for target language(s)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Only &lt;code&gt;proto3&lt;/code&gt; syntax is currently supported.&lt;/strong&gt; &lt;code&gt;proto2&lt;/code&gt; syntax support is planned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Installing PGV can currently only be done from source:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# fetches this repo into $GOPATH&#xA;go get -d github.com/envoyproxy/protoc-gen-validate&#xA;&#xA;# installs PGV into $GOPATH/bin&#xA;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;lang&lt;/code&gt;&lt;/strong&gt;: specify the target language to generate. Currently, the only supported options are: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;go&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cc&lt;/code&gt; for c++ (partially implemented)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;java&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Note: Python works via runtime code generation. There&#39;s no compile-time generation. See the Python section for details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;Go generation should occur into the same output path as the official plugin. For a proto file &lt;code&gt;example.proto&lt;/code&gt;, the corresponding validation code is generated into &lt;code&gt;../generated/example.pb.validate.go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;protoc \&#xA;  -I . \&#xA;  -I ${GOPATH}/src \&#xA;  -I ${GOPATH}/src/github.com/envoyproxy/protoc-gen-validate \&#xA;  --go_out=&#34;:../generated&#34; \&#xA;  --validate_out=&#34;lang=go:../generated&#34; \&#xA;  example.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All messages generated include the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Validate() error&lt;/code&gt; which returns the first error encountered during validation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ValidateAll() error&lt;/code&gt; which returns all errors encountered during validation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;PGV requires no additional runtime dependencies from the existing generated code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: by default &lt;strong&gt;example.pb.validate.go&lt;/strong&gt; is nested in a directory structure that matches your &lt;code&gt;option go_package&lt;/code&gt; name. You can change this using the protoc parameter &lt;code&gt;paths=source_relative:.&lt;/code&gt;. Then &lt;code&gt;--validate_out&lt;/code&gt; will output the file where it is expected. See Google&#39;s protobuf documentation or &lt;a href=&#34;https://github.com/golang/protobuf#packages-and-input-paths&#34;&gt;packages and input paths&lt;/a&gt; or &lt;a href=&#34;https://github.com/golang/protobuf#parameters&#34;&gt;parameters&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also support for the &lt;code&gt;module=example.com/foo&lt;/code&gt; flag &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/reference/go-generated#invocation&#34;&gt;described here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Java&lt;/h4&gt; &#xA;&lt;p&gt;Java generation is integrated with the existing protobuf toolchain for java projects. For Maven projects, add the following to your pom.xml or build.gradle.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependencies&amp;gt;&#xA;    &amp;lt;dependency&amp;gt;&#xA;        &amp;lt;groupId&amp;gt; io.envoyproxy.protoc-gen-validate&amp;lt;/groupId&amp;gt;&#xA;        &amp;lt;artifactId&amp;gt;pgv-java-stub&amp;lt;/artifactId&amp;gt;&#xA;        &amp;lt;version&amp;gt;${pgv.version}&amp;lt;/version&amp;gt;&#xA;    &amp;lt;/dependency&amp;gt;&#xA;&amp;lt;/dependencies&amp;gt;&#xA;&#xA;&amp;lt;build&amp;gt;&#xA;    &amp;lt;extensions&amp;gt;&#xA;        &amp;lt;extension&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;kr.motd.maven&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;os-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;1.4.1.Final&amp;lt;/version&amp;gt;&#xA;        &amp;lt;/extension&amp;gt;&#xA;    &amp;lt;/extensions&amp;gt;&#xA;    &amp;lt;plugins&amp;gt;&#xA;        &amp;lt;plugin&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.xolstice.maven.plugins&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;protobuf-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;0.6.1&amp;lt;/version&amp;gt;&#xA;            &amp;lt;configuration&amp;gt;&#xA;                &amp;lt;protocArtifact&amp;gt;com.google.protobuf:protoc:${protoc.version}:exe:${os.detected.classifier}&amp;lt;/protocArtifact&amp;gt;&#xA;            &amp;lt;/configuration&amp;gt;&#xA;            &amp;lt;executions&amp;gt;&#xA;                &amp;lt;execution&amp;gt;&#xA;                    &amp;lt;id&amp;gt;protoc-java-pgv&amp;lt;/id&amp;gt;&#xA;                    &amp;lt;goals&amp;gt;&#xA;                        &amp;lt;goal&amp;gt;compile-custom&amp;lt;/goal&amp;gt;&#xA;                    &amp;lt;/goals&amp;gt;&#xA;                    &amp;lt;configuration&amp;gt;&#xA;                        &amp;lt;pluginParameter&amp;gt;lang=java&amp;lt;/pluginParameter&amp;gt;&#xA;                        &amp;lt;pluginId&amp;gt;java-pgv&amp;lt;/pluginId&amp;gt;&#xA;                        &amp;lt;pluginArtifact&amp;gt;io.envoyproxy.protoc-gen-validate:protoc-gen-validate:${pgv.version}:exe:${os.detected.classifier}&amp;lt;/pluginArtifact&amp;gt;&#xA;                    &amp;lt;/configuration&amp;gt;&#xA;                &amp;lt;/execution&amp;gt;&#xA;            &amp;lt;/executions&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;    &amp;lt;/plugins&amp;gt;&#xA;&amp;lt;/build&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;plugins {&#xA;    ...&#xA;    id &#34;com.google.protobuf&#34; version &#34;${protobuf.version}&#34;&#xA;    ...&#xA;}&#xA;&#xA;protobuf {&#xA;    protoc {&#xA;        artifact = &#34;com.google.protobuf:protoc:${protoc.version}&#34;&#xA;    }&#xA;&#xA;    plugins {&#xA;        javapgv {&#xA;            artifact = &#34;io.envoyproxy.protoc-gen-validate:protoc-gen-validate:${pgv.version}&#34;&#xA;        }&#xA;    }&#xA;&#xA;    generateProtoTasks {&#xA;        all()*.plugins {&#xA;            javapgv {&#xA;                option &#34;lang=java&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Create a validator index that reflectively loads generated validators&#xA;ValidatorIndex index = new ReflectiveValidatorIndex();&#xA;// Assert that a message is valid&#xA;index.validatorFor(message.getClass()).assertValid(message);&#xA;&#xA;// Create a gRPC client and server interceptor to automatically validate messages (requires pgv-java-grpc module)&#xA;clientStub = clientStub.withInterceptors(new ValidatingClientInterceptor(index));&#xA;serverBuilder.addService(ServerInterceptors.intercept(svc, new ValidatingServerInterceptor(index)));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Python&lt;/h4&gt; &#xA;&lt;p&gt;The python implementation works via JIT code generation. In other words, the &lt;code&gt;validate(msg)&lt;/code&gt; function is written on-demand and &lt;a href=&#34;https://docs.python.org/3/library/functions.html#exec&#34;&gt;exec-ed&lt;/a&gt;. An LRU-cache improves performance by storing generated functions per descriptor.&lt;/p&gt; &#xA;&lt;p&gt;The python package is available on &lt;a href=&#34;https://pypi.org/project/protoc-gen-validate&#34;&gt;PyPI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run &lt;code&gt;validate()&lt;/code&gt;, do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from entities_pb2 import Person&#xA;from protoc_gen_validate.validator import validate, ValidationFailed&#xA;&#xA;p = Person(first_name=&#34;Foo&#34;, last_name=&#34;Bar&#34;, age=42)&#xA;try:&#xA;    validate(p)&#xA;except ValidationFailed as err:&#xA;    print(err)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can view what code has been generated by using the &lt;code&gt;print_validate()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h2&gt;Constraint Rules&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/envoyproxy/protoc-gen-validate/main/validate/validate.proto&#34;&gt;The provided constraints&lt;/a&gt; are modeled largerly after those in JSON Schema. PGV rules can be mixed for the same field; the plugin ensures the rules applied to a field cannot contradict before code generation.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/envoyproxy/protoc-gen-validate/main/rule_comparison.md&#34;&gt;constraint rule comparison matrix&lt;/a&gt; for language-specific constraint capabilities.&lt;/p&gt; &#xA;&lt;h3&gt;Numerics&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;All numeric types (&lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;int32&lt;/code&gt;, &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;uint32&lt;/code&gt;, &lt;code&gt;uint64&lt;/code&gt;, &lt;code&gt;sint32&lt;/code&gt;, &lt;code&gt;sint64&lt;/code&gt;, &lt;code&gt;fixed32&lt;/code&gt;, &lt;code&gt;fixed64&lt;/code&gt;, &lt;code&gt;sfixed32&lt;/code&gt;, &lt;code&gt;sfixed64&lt;/code&gt;) share the same rules.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;: the field must be &lt;em&gt;exactly&lt;/em&gt; the specified value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must equal 1.23 exactly&#xA;float x = 1 [(validate.rules).float.const = 1.23];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lt/lte/gt/gte&lt;/strong&gt;: these inequalities (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, respectively) allow for deriving ranges in which the field must reside.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be less than 10&#xA;int32 x = 1 [(validate.rules).int32.lt = 10];&#xA;&#xA;// x must be greater than or equal to 20&#xA;uint64 x = 1 [(validate.rules).uint64.gte = 20];&#xA;&#xA;// x must be in the range [30, 40)&#xA;fixed32 x = 1 [(validate.rules).fixed32 = {gte:30, lt: 40}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Inverting the values of &lt;code&gt;lt(e)&lt;/code&gt; and &lt;code&gt;gt(e)&lt;/code&gt; is valid and creates an exclusive range.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be outside the range [30, 40)&#xA;double x = 1 [(validate.rules).double = {lt:30, gte:40}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;in/not_in&lt;/strong&gt;: these two rules permit specifying allow/denylists for the values of a field.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be either 1, 2, or 3&#xA;uint32 x = 1 [(validate.rules).uint32 = {in: [1,2,3]}];&#xA;&#xA;// x cannot be 0 nor 0.99&#xA;float x = 1 [(validate.rules).float = {not_in: [0, 0.99]}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ignore_empty&lt;/strong&gt;: this rule specifies that if field is empty or set to the default value, to ignore any validation rules. These are typically useful where being able to unset a field in an update request, or to skip validation for optional fields where switching to WKTs is not feasible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;unint32 x = 1 [(validate.rules).uint32 = {ignore_empty: true, gte: 200}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;: the field must be &lt;em&gt;exactly&lt;/em&gt; the specified value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be set to true&#xA;bool x = 1 [(validate.rules).bool.const = true];&#xA;&#xA;// x cannot be set to true&#xA;bool x = 1 [(validate.rules).bool.const = false];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Strings&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;: the field must be &lt;em&gt;exactly&lt;/em&gt; the specified value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be set to &#34;foo&#34;&#xA;string x = 1 [(validate.rules).string.const = &#34;foo&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;len/min_len/max_len&lt;/strong&gt;: these rules constrain the number of characters (Unicode code points) in the field. Note that the number of characters may differ from the number of bytes in the string. The string is considered as-is, and does not normalize.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be exactly 5 characters long&#xA;string x = 1 [(validate.rules).string.len = 5];&#xA;&#xA;// x must be at least 3 characters long&#xA;string x = 1 [(validate.rules).string.min_len = 3];&#xA;&#xA;// x must be between 5 and 10 characters, inclusive&#xA;string x = 1 [(validate.rules).string = {min_len: 5, max_len: 10}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;min_bytes/max_bytes&lt;/strong&gt;: these rules constrain the number of bytes in the field.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be at most 15 bytes long&#xA;string x = 1 [(validate.rules).string.max_bytes = 15];&#xA;&#xA;// x must be between 128 and 1024 bytes long&#xA;string x = 1 [(validate.rules).string = {min_bytes: 128, max_bytes: 1024}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pattern&lt;/strong&gt;: the field must match the specified &lt;a href=&#34;https://github.com/google/re2/wiki/Syntax&#34;&gt;RE2-compliant&lt;/a&gt; regular expression. The included expression should elide any delimiters (ie, &lt;code&gt;/\d+/&lt;/code&gt; should just be &lt;code&gt;\d+&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be a non-empty, case-insensitive hexadecimal string&#xA;string x = 1 [(validate.rules).string.pattern = &#34;(?i)^[0-9a-f]+$&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;prefix/suffix/contains/not_contains&lt;/strong&gt;: the field must contain the specified substring in an optionally explicit location, or not contain the specified substring.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must begin with &#34;foo&#34;&#xA;string x = 1 [(validate.rules).string.prefix = &#34;foo&#34;];&#xA;&#xA;// x must end with &#34;bar&#34;&#xA;string x = 1 [(validate.rules).string.suffix = &#34;bar&#34;];&#xA;&#xA;// x must contain &#34;baz&#34; anywhere inside it&#xA;string x = 1 [(validate.rules).string.contains = &#34;baz&#34;];&#xA;&#xA;// x cannot contain &#34;baz&#34; anywhere inside it&#xA;string x = 1 [(validate.rules).string.not_contains = &#34;baz&#34;];&#xA;&#xA;// x must begin with &#34;fizz&#34; and end with &#34;buzz&#34;&#xA;string x = 1 [(validate.rules).string = {prefix: &#34;fizz&#34;, suffix: &#34;buzz&#34;}];&#xA;&#xA;// x must end with &#34;.proto&#34; and be less than 64 characters&#xA;string x = 1 [(validate.rules).string = {suffix: &#34;.proto&#34;, max_len:64}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;in/not_in&lt;/strong&gt;: these two rules permit specifying allow/denylists for the values of a field.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be either &#34;foo&#34;, &#34;bar&#34;, or &#34;baz&#34;&#xA;string x = 1 [(validate.rules).string = {in: [&#34;foo&#34;, &#34;bar&#34;, &#34;baz&#34;]}];&#xA;&#xA;// x cannot be &#34;fizz&#34; nor &#34;buzz&#34;&#xA;string x = 1 [(validate.rules).string = {not_in: [&#34;fizz&#34;, &#34;buzz&#34;]}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ignore_empty&lt;/strong&gt;: this rule specifies that if field is empty or set to the default value, to ignore any validation rules. These are typically useful where being able to unset a field in an update request, or to skip validation for optional fields where switching to WKTs is not feasible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;string CountryCode = 1 [(validate.rules).string = {ignore_empty: true, len: 2}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;well-known formats&lt;/strong&gt;: these rules provide advanced constraints for common string patterns. These constraints will typically be more permissive and performant than equivalent regular expression patterns, while providing more explanatory failure descriptions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be a valid email address (via RFC 5322)&#xA;string x = 1 [(validate.rules).string.email = true];&#xA;&#xA;// x must be a valid address (IP or Hostname).&#xA;string x = 1 [(validate.rules).string.address = true];&#xA;&#xA;// x must be a valid hostname (via RFC 1034)&#xA;string x = 1 [(validate.rules).string.hostname = true];&#xA;&#xA;// x must be a valid IP address (either v4 or v6)&#xA;string x = 1 [(validate.rules).string.ip = true];&#xA;&#xA;// x must be a valid IPv4 address&#xA;// eg: &#34;192.168.0.1&#34;&#xA;string x = 1 [(validate.rules).string.ipv4 = true];&#xA;&#xA;// x must be a valid IPv6 address&#xA;// eg: &#34;fe80::3&#34;&#xA;string x = 1 [(validate.rules).string.ipv6 = true];&#xA;&#xA;// x must be a valid absolute URI (via RFC 3986)&#xA;string x = 1 [(validate.rules).string.uri = true];&#xA;&#xA;// x must be a valid URI reference (either absolute or relative)&#xA;string x = 1 [(validate.rules).string.uri_ref = true];&#xA;&#xA;// x must be a valid UUID (via RFC 4122)&#xA;string x = 1 [(validate.rules).string.uuid = true];&#xA;&#xA;// x must conform to a well known regex for HTTP header names (via RFC 7230)&#xA;string x = 1 [(validate.rules).string.well_known_regex = HTTP_HEADER_NAME]&#xA;&#xA;// x must conform to a well known regex for HTTP header values (via RFC 7230) &#xA;string x = 1 [(validate.rules).string.well_known_regex = HTTP_HEADER_VALUE];&#xA;&#xA;// x must conform to a well known regex for headers, disallowing \r\n\0 characters.&#xA;string x = 1 [(validate.rules).string {well_known_regex: HTTP_HEADER_VALUE, strict: false}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bytes&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Literal values should be expressed with strings, using escaping where necessary.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;: the field must be &lt;em&gt;exactly&lt;/em&gt; the specified value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be set to &#34;foo&#34; (&#34;\x66\x6f\x6f&#34;)&#xA;bytes x = 1 [(validate.rules).bytes.const = &#34;foo&#34;];&#xA;&#xA;// x must be set to &#34;\xf0\x90\x28\xbc&#34;&#xA;bytes x = 1 [(validate.rules).bytes.const = &#34;\xf0\x90\x28\xbc&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;len/min_len/max_len&lt;/strong&gt;: these rules constrain the number of bytes in the field.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be exactly 3 bytes&#xA;bytes x = 1 [(validate.rules).bytes.len = 3];&#xA;&#xA;// x must be at least 3 bytes long&#xA;bytes x = 1 [(validate.rules).bytes.min_len = 3];&#xA;&#xA;// x must be between 5 and 10 bytes, inclusive&#xA;bytes x = 1 [(validate.rules).bytes = {min_len: 5, max_len: 10}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pattern&lt;/strong&gt;: the field must match the specified &lt;a href=&#34;https://github.com/google/re2/wiki/Syntax&#34;&gt;RE2-compliant&lt;/a&gt; regular expression. The included expression should elide any delimiters (ie, &lt;code&gt;/\d+/&lt;/code&gt; should just be &lt;code&gt;\d+&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be a non-empty, ASCII byte sequence&#xA;bytes x = 1 [(validate.rules).bytes.pattern = &#34;^[\x00-\x7F]+$&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;prefix/suffix/contains&lt;/strong&gt;: the field must contain the specified byte sequence in an optionally explicit location.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must begin with &#34;\x99&#34;&#xA;bytes x = 1 [(validate.rules).bytes.prefix = &#34;\x99&#34;];&#xA;&#xA;// x must end with &#34;buz\x7a&#34;&#xA;bytes x = 1 [(validate.rules).bytes.suffix = &#34;buz\x7a&#34;];&#xA;&#xA;// x must contain &#34;baz&#34; anywhere inside it&#xA;bytes x = 1 [(validate.rules).bytes.contains = &#34;baz&#34;];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;in/not_in&lt;/strong&gt;: these two rules permit specifying allow/denylists for the values of a field.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be either &#34;foo&#34;, &#34;bar&#34;, or &#34;baz&#34;&#xA;bytes x = 1 [(validate.rules).bytes = {in: [&#34;foo&#34;, &#34;bar&#34;, &#34;baz&#34;]}];&#xA;&#xA;// x cannot be &#34;fizz&#34; nor &#34;buzz&#34;&#xA;bytes x = 1 [(validate.rules).bytes = {not_in: [&#34;fizz&#34;, &#34;buzz&#34;]}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ignore_empty&lt;/strong&gt;: this rule specifies that if field is empty or set to the default value, to ignore any validation rules. These are typically useful where being able to unset a field in an update request, or to skip validation for optional fields where switching to WKTs is not feasible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;bytes x = 1 [(validate.rules).bytes = {ignore_empty: true, in: [&#34;foo&#34;, &#34;bar&#34;, &#34;baz&#34;]}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;well-known formats&lt;/strong&gt;: these rules provide advanced constraints for common patterns. These constraints will typically be more permissive and performant than equivalent regular expression patterns, while providing more explanatory failure descriptions.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be a valid IP address (either v4 or v6) in byte format&#xA;bytes x = 1 [(validate.rules).bytes.ip = true];&#xA;&#xA;// x must be a valid IPv4 address in byte format&#xA;// eg: &#34;\xC0\xA8\x00\x01&#34;&#xA;bytes x = 1 [(validate.rules).bytes.ipv4 = true];&#xA;&#xA;// x must be a valid IPv6 address in byte format&#xA;// eg: &#34;\x20\x01\x0D\xB8\x85\xA3\x00\x00\x00\x00\x8A\x2E\x03\x70\x73\x34&#34;&#xA;bytes x = 1 [(validate.rules).bytes.ipv6 = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Enums&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;All literal values should use the numeric (int32) value as defined in the enum descriptor.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The following examples use this &lt;code&gt;State&lt;/code&gt; enum&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;enum State {&#xA;  INACTIVE = 0;&#xA;  PENDING  = 1;&#xA;  ACTIVE   = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;: the field must be &lt;em&gt;exactly&lt;/em&gt; the specified value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be set to ACTIVE (2)&#xA;State x = 1 [(validate.rules).enum.const = 2];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;defined_only&lt;/strong&gt;: the field must be one of the specified values in the enum descriptor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x can only be INACTIVE, PENDING, or ACTIVE&#xA;State x = 1 [(validate.rules).enum.defined_only = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;in/not_in&lt;/strong&gt;: these two rules permit specifying allow/denylists for the values of a field.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be either INACTIVE (0) or ACTIVE (2)&#xA;State x = 1 [(validate.rules).enum = {in: [0,2]}];&#xA;&#xA;// x cannot be PENDING (1)&#xA;State x = 1 [(validate.rules).enum = {not_in: [1]}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Messages&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If a field contains a message and the message has been generated with PGV, validation will be performed recursively. Message&#39;s not generated with PGV are skipped.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// if Person was generated with PGV and x is set,&#xA;// x&#39;s fields will be validated.&#xA;Person x = 1;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;skip&lt;/strong&gt;: this rule specifies that the validation rules of this field should not be evaluated.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// The fields on Person x will not be validated.&#xA;Person x = 1 [(validate.rules).message.skip = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;required&lt;/strong&gt;: this rule specifies that the field cannot be unset.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x cannot be unset&#xA;Person x = 1 [(validate.rules).message.required = true];&#xA;&#xA;// x cannot be unset, but the validations on x will not be performed&#xA;Person x = 1 [(validate.rules).message = {required: true, skip: true}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Repeated&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;min_items/max_items&lt;/strong&gt;: these rules control how many elements are contained in the field&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must contain at least 3 elements&#xA;repeated int32 x = 1 [(validate.rules).repeated.min_items = 3];&#xA;&#xA;// x must contain between 5 and 10 Persons, inclusive&#xA;repeated Person x = 1 [(validate.rules).repeated = {min_items: 5, max_items: 10}];&#xA;&#xA;// x must contain exactly 7 elements&#xA;repeated double x = 1 [(validate.rules).repeated = {min_items: 7, max_items: 7}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;unique&lt;/strong&gt;: this rule requires that all elements in the field must be unique. This rule does not support repeated messages.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must contain unique int64 values&#xA;repeated int64 x = 1 [(validate.rules).repeated.unique = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;items&lt;/strong&gt;: this rule specifies constraints that should be applied to each element in the field. Repeated message fields also have their validation rules applied unless &lt;code&gt;skip&lt;/code&gt; is specified on this constraint.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must contain positive float values&#xA;repeated float x = 1 [(validate.rules).repeated.items.float.gt = 0];&#xA;&#xA;// x must contain Persons but don&#39;t validate them&#xA;repeated Person x = 1 [(validate.rules).repeated.items.message.skip = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ignore_empty&lt;/strong&gt;: this rule specifies that if field is empty or set to the default value, to ignore any validation rules. These are typically useful where being able to unset a field in an update request, or to skip validation for optional fields where switching to WKTs is not feasible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;repeated int64 x = 1 [(validate.rules).repeated = {ignore_empty: true, items: {int64: {gt: 200}}}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Maps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;min_pairs/max_pairs&lt;/strong&gt;: these rules control how many KV pairs are contained in this field&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must contain at least 3 KV pairs&#xA;map&amp;lt;string, uint64&amp;gt; x = 1 [(validate.rules).map.min_pairs = 3];&#xA;&#xA;// x must contain between 5 and 10 KV pairs&#xA;map&amp;lt;string, string&amp;gt; x = 1 [(validate.rules)].map = {min_pairs: 5, max_pairs: 10}];&#xA;&#xA;// x must contain exactly 7 KV pairs&#xA;map&amp;lt;string, Person&amp;gt; x = 1 [(validate.rules)].map = {min_pairs: 7, max_pairs: 7}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;no_sparse&lt;/strong&gt;: for map fields with message values, setting this rule to true disallows keys with unset values.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// all values in x must be set&#xA;map&amp;lt;uint64, Person&amp;gt; x = 1 [(validate.rules).map.no_sparse = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;keys&lt;/strong&gt;: this rule specifies constraints that are applied to the keys in the field.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x&#39;s keys must all be negative&#xA;&amp;lt;sint32, string&amp;gt; x = [(validate.rules).map.keys.sint32.lt = 0];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;values&lt;/strong&gt;: this rule specifies constraints that are be applied to each value in the field. Repeated message fields also have their validation rules applied unless &lt;code&gt;skip&lt;/code&gt; is specified on this constraint.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must contain strings of at least 3 characters&#xA;map&amp;lt;string, string&amp;gt; x = 1 [(validate.rules).map.values.string.min_len = 3];&#xA;&#xA;// x must contain Persons but doesn&#39;t validate them&#xA;map&amp;lt;string, Person&amp;gt; x = 1 [(validate.rules).map.values.message.skip = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ignore_empty&lt;/strong&gt;: this rule specifies that if field is empty or set to the default value, to ignore any validation rules. These are typically useful where being able to unset a field in an update request, or to skip validation for optional fields where switching to WKTs is not feasible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;map&amp;lt;string, string&amp;gt; x = 1 [(validate.rules).map = {ignore_empty: true, values: {string: {min_len: 3}}}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Well-Known Types (WKTs)&lt;/h3&gt; &#xA;&lt;p&gt;A set of &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/reference/google.protobuf&#34;&gt;WKTs&lt;/a&gt; are packaged with protoc and common message patterns useful in many domains.&lt;/p&gt; &#xA;&lt;h4&gt;Scalar Value Wrappers&lt;/h4&gt; &#xA;&lt;p&gt;In the &lt;code&gt;proto3&lt;/code&gt; syntax, there is no way of distinguishing between unset and the zero value of a scalar field. The value WKTs permit this differentiation by wrapping them in a message. PGV permits using the same scalar rules that the wrapper encapsulates.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// if it is set, x must be greater than 3&#xA;google.protobuf.Int32Value x = 1 [(validate.rules).int32.gt = 3];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Message Rules can also be used with scalar Well-Known Types (WKTs):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// Ensures that if a value is not set for age, it would not pass the validation despite its zero value being 0.&#xA;message X { google.protobuf.Int32Value age = 1 [(validate.rules).int32.gt = -1, (validate.rules).message.required = true]; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Anys&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;required&lt;/strong&gt;: this rule specifies that the field must be set&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x cannot be unset&#xA;google.protobuf.Any x = 1 [(validate.rules).any.required = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;in/not_in&lt;/strong&gt;: these two rules permit specifying allow/denylists for the &lt;code&gt;type_url&lt;/code&gt; value in this field. Consider using a &lt;code&gt;oneof&lt;/code&gt; union instead of &lt;code&gt;in&lt;/code&gt; if possible.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must not be the Duration or Timestamp WKT&#xA;google.protobuf.Any x = 1 [(validate.rules).any = {not_in: [&#xA;    &#34;type.googleapis.com/google.protobuf.Duration&#34;,&#xA;    &#34;type.googleapis.com/google.protobuf.Timestamp&#34;&#xA;  ]}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Durations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;required&lt;/strong&gt;: this rule specifies that the field must be set&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x cannot be unset&#xA;google.protobuf.Duration x = 1 [(validate.rules).duration.required = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;: the field must be &lt;em&gt;exactly&lt;/em&gt; the specified value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must equal 1.5s exactly&#xA;google.protobuf.Duration x = 1 [(validate.rules).duration.const = {&#xA;    seconds: 1,&#xA;    nanos:   500000000&#xA;  }];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lt/lte/gt/gte&lt;/strong&gt;: these inequalities (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, respectively) allow for deriving ranges in which the field must reside.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be less than 10s&#xA;google.protobuf.Duration x = 1 [(validate.rules).duration.lt.seconds = 10];&#xA;&#xA;// x must be greater than or equal to 20ns&#xA;google.protobuf.Duration x = 1 [(validate.rules).duration.gte.nanos = 20];&#xA;&#xA;// x must be in the range [0s, 1s)&#xA;google.protobuf.Duration x = 1 [(validate.rules).duration = {&#xA;    gte: {},&#xA;    lt:  {seconds: 1}&#xA;  }];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Inverting the values of &lt;code&gt;lt(e)&lt;/code&gt; and &lt;code&gt;gt(e)&lt;/code&gt; is valid and creates an exclusive range.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be outside the range [0s, 1s)&#xA;google.protobuf.Duration x = 1 [(validate.rules).duration = {&#xA;    lt:  {},&#xA;    gte: {seconds: 1}&#xA;  }];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;in/not_in&lt;/strong&gt;: these two rules permit specifying allow/denylists for the values of a field.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be either 0s or 1s&#xA;google.protobuf.Duration x = 1 [(validate.rules).duration = {in: [&#xA;    {},&#xA;    {seconds: 1}&#xA;  ]}];&#xA;&#xA;// x cannot be 20s nor 500ns&#xA;google.protobuf.Duration x = 1 [(validate.rules).duration = {not_in: [&#xA;    {seconds: 20},&#xA;    {nanos: 500}&#xA;  ]}];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Timestamps&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;required&lt;/strong&gt;: this rule specifies that the field must be set&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x cannot be unset&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp.required = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;const&lt;/strong&gt;: the field must be &lt;em&gt;exactly&lt;/em&gt; the specified value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must equal 2009/11/10T23:00:00.500Z exactly&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp.const = {&#xA;    seconds: 63393490800,&#xA;    nanos:   500000000&#xA;  }];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lt/lte/gt/gte&lt;/strong&gt;: these inequalities (&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, respectively) allow for deriving ranges in which the field must reside.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be less than the Unix Epoch&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp.lt.seconds = 0];&#xA;&#xA;// x must be greater than or equal to 2009/11/10T23:00:00Z&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp.gte.seconds = 63393490800];&#xA;&#xA;// x must be in the range [epoch, 2009/11/10T23:00:00Z)&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp = {&#xA;    gte: {},&#xA;    lt:  {seconds: 63393490800}&#xA;  }];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Inverting the values of &lt;code&gt;lt(e)&lt;/code&gt; and &lt;code&gt;gt(e)&lt;/code&gt; is valid and creates an exclusive range.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be outside the range [epoch, 2009/11/10T23:00:00Z)&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp = {&#xA;    lt:  {},&#xA;    gte: {seconds: 63393490800}&#xA;  }];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;lt_now/gt_now&lt;/strong&gt;: these inequalities allow for ranges relative to the current time. These rules cannot be used with the absolute rules above.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be less than the current timestamp&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp.lt_now = true];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;within&lt;/strong&gt;: this rule specifies that the field&#39;s value should be within a duration of the current time. This rule can be used in conjunction with &lt;code&gt;lt_now&lt;/code&gt; and &lt;code&gt;gt_now&lt;/code&gt; to control those ranges.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// x must be within ±1s of the current time&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp.within.seconds = 1];&#xA;&#xA;// x must be within the range (now, now+1h)&#xA;google.protobuf.Timestamp x = 1 [(validate.rules).timestamp = {&#xA;    gt_now: true,&#xA;    within: {seconds: 3600}&#xA;  }];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Message-Global&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;disabled&lt;/strong&gt;: All validation rules for the fields on a message can be nullified, including any message fields that support validation themselves.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;message Person {&#xA;  option (validate.disabled) = true;&#xA;&#xA;  // x will not be required to be greater than 123&#xA;  uint64 x = 1 [(validate.rules).uint64.gt = 123];&#xA;&#xA;  // y&#39;s fields will not be validated&#xA;  Person y = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ignored&lt;/strong&gt;: Don&#39;t generate a validate method or any related validation code for this message.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;message Person {&#xA;  option (validate.ignored) = true;&#xA;&#xA;  // x will not be required to be greater than 123&#xA;  uint64 x = 1 [(validate.rules).uint64.gt = 123];&#xA;&#xA;  // y&#39;s fields will not be validated&#xA;  Person y = 2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;OneOfs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;required&lt;/strong&gt;: require that one of the fields in a &lt;code&gt;oneof&lt;/code&gt; must be set. By default, none or one of the unioned fields can be set. Enabling this rules disallows having all of them unset.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;oneof id {&#xA;  // either x, y, or z must be set.&#xA;  option (validate.required) = true;&#xA;&#xA;  string x = 1;&#xA;  int32  y = 2;&#xA;  Person z = 3;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;PGV is written in Go on top of the &lt;a href=&#34;https://github.com/lyft/protoc-gen-star&#34;&gt;protoc-gen-star&lt;/a&gt; framework and compiles to a standalone binary.&lt;/p&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;All PGV dependencies are currently checked into the project. To test PGV, &lt;code&gt;protoc&lt;/code&gt; must be installed, either from &lt;a href=&#34;https://github.com/google/protobuf&#34;&gt;source&lt;/a&gt;, the provided &lt;a href=&#34;https://github.com/google/protobuf/releases&#34;&gt;releases&lt;/a&gt;, or a package manager. The official protoc plugin for the target language(s) should be installed as well.&lt;/p&gt; &#xA;&lt;h3&gt;Make Targets&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;make build&lt;/code&gt;&lt;/strong&gt;: generates the constraints proto and compiles PGV into &lt;code&gt;$GOPATH/bin&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;make lint&lt;/code&gt;&lt;/strong&gt;: runs static-analysis rules against the PGV codebase, including &lt;code&gt;golint&lt;/code&gt;, &lt;code&gt;go vet&lt;/code&gt;, and &lt;code&gt;gofmt -s&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;make testcases&lt;/code&gt;&lt;/strong&gt;: generates the proto files in &lt;a href=&#34;https://raw.githubusercontent.com/envoyproxy/protoc-gen-validate/main/tests/harness/cases&#34;&gt;&lt;code&gt;/tests/harness/cases&lt;/code&gt;&lt;/a&gt;. These are used by the test harness to verify the validation rules generated for each language.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;make harness&lt;/code&gt;&lt;/strong&gt;: executes the test-cases against each language&#39;s test harness.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run all tests under Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Ensure that your &lt;code&gt;PATH&lt;/code&gt; is setup to include &lt;code&gt;protoc-gen-go&lt;/code&gt; and &lt;code&gt;protoc&lt;/code&gt;, then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bazel test //tests/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;PGV comes with a &lt;a href=&#34;https://raw.githubusercontent.com/envoyproxy/protoc-gen-validate/main/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt; for consistent development tooling and CI. The main entrypoint is &lt;code&gt;make&lt;/code&gt; with &lt;code&gt;quick&lt;/code&gt; as the default target. This repo should be volumed into &lt;code&gt;/go/src/github.com/envoyproxy/protoc-gen-validate&lt;/code&gt; for the proper behavior.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# build the image&#xA;docker build -t lyft/protoc-gen-validate .&#xA;&#xA;# executes the default make target: quick&#xA;docker run --rm \&#xA;  -v $(PWD):/go/src/github.com/envoyproxy/protoc-gen-validate \&#xA;  lyft/protoc-gen-validate&#xA;&#xA;# executes the &#39;build&#39; &amp;amp; &#39;generate-testdata&#39; make targets&#xA;docker run --rm \&#xA;  -v $(PWD):/go/src/github.com/envoyproxy/protoc-gen-validate \&#xA;  lyft/protoc-gen-validate \&#xA;  build generate-testdata&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>