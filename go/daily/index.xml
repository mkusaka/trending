<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-31T01:34:18Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>H4de5-7/geacon_pro</title>
    <updated>2022-10-31T01:34:18Z</updated>
    <id>tag:github.com,2022-10-31:/H4de5-7/geacon_pro</id>
    <link href="https://github.com/H4de5-7/geacon_pro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;跨平台重构了Cobaltstrike Beacon，适配了大部分Beacon的功能，行为对国内主流杀软免杀，支持4.1以上的版本。 A cobaltstrike Beacon bypass anti-virus, supports 4.1+ version.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;geacon_pro&lt;/h1&gt; &#xA;&lt;h2&gt;项目介绍&lt;/h2&gt; &#xA;&lt;p&gt;本项目基于&lt;a href=&#34;https://github.com/darkr4y/geacon&#34;&gt;geacon&lt;/a&gt;项目对cobaltstrike的beacon进行了重构，并适配了大部分Beacon的功能。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;该项目仅用于对CobaltStrike协议的学习测试。请勿使用于任何非法用途，由此产生的后果自行承担。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;本项目与好兄弟Z3ratu1共同开发，他实现了一版支持4.0版本的&lt;a href=&#34;https://github.com/Z3ratu1/geacon_plus&#34;&gt;geacon_plus&lt;/a&gt;，我这边实现了一版支持4.1及以上版本的beacon，大致功能类似，有部分功能不同。&lt;/p&gt; &#xA;&lt;p&gt;传统cs的免杀偏向于如何加载上线，但是杀软对beacon的特征查得非常严，尤其是卡巴这种查内存的，因此不如自己重构一个。&lt;/p&gt; &#xA;&lt;p&gt;免杀主要体现在三个方面:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;由于是重构的，因此没有beacon的特征，针对beacon特征的杀软是检测不出来的。&lt;/li&gt; &#xA; &lt;li&gt;golang本身具备一定的免杀性&lt;/li&gt; &#xA; &lt;li&gt;针对各功能实现了免杀，cs部分不免杀的功能得到了更换&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;暂时只测试了4.3版本，理论上来说4.1+版本均支持，如果有不支持的版本请及时通知我。目前上线arm架构机子可能会出现部分功能的错误，目前在调整。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果有不免杀的地方请及时通知我。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;由于项目刚做出来，目前的版本存在部分功能不完善的地方，如有需求请师傅们提出。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;目前实现的功能具备免杀性，可过Defender、360核晶（除powershell）、卡巴斯基（除内存操作外，如注入原生cs的dll）、火绒&lt;/p&gt; &#xA;&lt;p&gt;上述测试环境均为实体机&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;为了规避360对fork&amp;amp;&amp;amp;run操作的监控，本项目目前采用注入自己的方式来执行cs原生的dll，但是测试发现cs原生powerpick在注入自己执行的时候有时候会拿不到回显，在fork&amp;amp;&amp;amp;run模式下正常。因此可用execute-assembly执行我这里另一个powershell免杀的&lt;a href=&#34;https://github.com/H4de5-7/powershell-bypass&#34;&gt;小工具&lt;/a&gt;，可绕过Defender、360等。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;若想使用免杀bypassUAC的话，请execute-assembly执行&lt;a href=&#34;https://github.com/0xlane/BypassUAC/&#34;&gt;该项目&lt;/a&gt;的Csharp版本，尽管Csharp程序不免杀，但是execute-assembly之后可过Defender与360。该项目dll版本自己编译一下是可以免杀的，但是需要落地并且需要用rundll32执行，因此并不推荐。&lt;/p&gt; &#xA;&lt;p&gt;开发的过程中参考了鸡哥的数篇文章以及许许多多的项目，同时抓包对服务端返回的内容进行猜测，并对服务端java代码进行了部分的理解。&lt;/p&gt; &#xA;&lt;p&gt;由于本人对二进制方向接触的不多，希望师傅们多多包涵，欢迎师傅们交流，欢迎指出问题。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果有师傅对堆内存加密有好的解决思路欢迎来讨论，我的实现思路在实现细节里面&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;本项目支持windows、linux、mac平台的使用。&lt;/p&gt; &#xA;&lt;p&gt;基础的使用方法可参考原项目，windows编译时添加-ldflags &#34;-H windowsgui -s -w&#34;减小程序体积并取消黑框。linux和mac编译的时候添加-ldflags &#34;-s -w&#34;减小程序体积，然后后台运行。&lt;/p&gt; &#xA;&lt;p&gt;目前项目有部分控制台输出内容，若想删除可在代码中删除。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;最简单的使用方法即为修改config.go中的公钥以及C2服务器地址，然后C2profile更换为下面的示例即可。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;实现功能&lt;/h2&gt; &#xA;&lt;h3&gt;windows平台支持的功能：&lt;/h3&gt; &#xA;&lt;p&gt;sleep、shell、upload、download、exit、cd、pwd、file_browse、ps、kill、getuid、mkdir、rm、cp、mv、run、execute、drives、powershell-import、powershell、execute-assembly（不落地执行c#）、多种线程注入的方法（可自己更换源码）、shinject、dllinject、管道的传输、多种cs原生反射型dll注入（mimikatz、portscan、screenshot、keylogger等）、令牌的窃取与还原、令牌的制作、代理发包等功能&lt;/p&gt; &#xA;&lt;h3&gt;linux和mac平台支持的功能：&lt;/h3&gt; &#xA;&lt;p&gt;sleep、shell、upload、download、exit、cd、pwd、file_browse、ps、kill、getuid、mkdir、rm、cp、mv&lt;/p&gt; &#xA;&lt;p&gt;文件管理部分支持图形化交互&lt;/p&gt; &#xA;&lt;h3&gt;C2profile：&lt;/h3&gt; &#xA;&lt;p&gt;适配了C2profile流量侧的设置与部分主机侧的设置，支持的算法有base64、base64url、mask、netbios、netbiosu、详情见config.go，这里给出示例C2profile，修改完C2profile后请不要忘记在config.go中对相应位置进行修改：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set sleeptime &#34;3000&#34;;&#xA;&#xA;https-certificate {&#xA;    set C &#34;KZ&#34;;&#xA;    set CN &#34;foren.zik&#34;;&#xA;    set O &#34;NN Fern Sub&#34;;&#xA;    set OU &#34;NN Fern&#34;;&#xA;    set ST &#34;KZ&#34;;&#xA;    set validity &#34;365&#34;;&#xA;}&#xA;&#xA;http-get {&#xA;&#xA;&#x9;set uri &#34;/www/handle/doc&#34;;&#xA;&#xA;&#x9;client {&#xA;&#x9;&#x9;metadata {&#xA;&#x9;&#x9;&#x9;base64url;&#xA;&#x9;&#x9;&#x9;prepend &#34;SESSIONID=&#34;;&#xA;&#x9;&#x9;&#x9;header &#34;Cookie&#34;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;server {&#xA;&#x9;&#x9;header &#34;Server&#34; &#34;nginx/1.10.3 (Ubuntu)&#34;;&#xA;    &#x9;&#x9;header &#34;Content-Type&#34; &#34;application/octet-stream&#34;;&#xA;        &#x9;header &#34;Connection&#34; &#34;keep-alive&#34;;&#xA;        &#x9;header &#34;Vary&#34; &#34;Accept&#34;;&#xA;        &#x9;header &#34;Pragma&#34; &#34;public&#34;;&#xA;        &#x9;header &#34;Expires&#34; &#34;0&#34;;&#xA;        &#x9;header &#34;Cache-Control&#34; &#34;must-revalidate, post-check=0, pre-check=0&#34;;&#xA;&#xA;&#x9;&#x9;output {&#xA;&#x9;&#x9;&#x9;mask;&#xA;&#x9;&#x9;&#x9;netbios;&#xA;&#x9;&#x9;&#x9;prepend &#34;data=&#34;;&#xA;&#x9;&#x9;&#x9;append &#34;%%&#34;;&#xA;&#x9;&#x9;&#x9;print;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;http-post {&#xA;&#x9;set uri &#34;/IMXo&#34;;&#xA;&#x9;client {&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;id {&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;mask;&#xA;&#x9;&#x9;&#x9;netbiosu;&#xA;&#x9;&#x9;&#x9;parameter &#34;doc&#34;;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;output {&#xA;&#x9;&#x9;&#x9;mask;&#xA;&#x9;&#x9;&#x9;base64url;&#xA;&#x9;&#x9;&#x9;prepend &#34;data=&#34;;&#xA;&#x9;&#x9;&#x9;append &#34;%%&#34;;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;print;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;server {&#xA;&#x9;&#x9;header &#34;Server&#34; &#34;nginx/1.10.3 (Ubuntu)&#34;;&#xA;    &#x9;&#x9;header &#34;Content-Type&#34; &#34;application/octet-stream&#34;;&#xA;        &#x9;header &#34;Connection&#34; &#34;keep-alive&#34;;&#xA;       &#x9; &#x9;header &#34;Vary&#34; &#34;Accept&#34;;&#xA;        &#x9;header &#34;Pragma&#34; &#34;public&#34;;&#xA;        &#x9;header &#34;Expires&#34; &#34;0&#34;;&#xA;        &#x9;header &#34;Cache-Control&#34; &#34;must-revalidate, post-check=0, pre-check=0&#34;;&#xA;          &#xA;&#x9;&#x9;output {&#xA;&#x9;&#x9;&#x9;mask;&#xA;&#x9;&#x9;&#x9;netbios;&#xA;&#x9;&#x9;&#x9;prepend &#34;data=&#34;;&#xA;&#x9;&#x9;&#x9;append &#34;%%&#34;;&#xA;&#x9;&#x9;&#x9;print;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;post-ex {&#xA;    set spawnto_x86 &#34;c:\\windows\\syswow64\\rundll32.exe&#34;;&#xA;    set spawnto_x64 &#34;c:\\windows\\system32\\rundll32.exe&#34;;&#xA;    &#xA;    set thread_hint &#34;ntdll.dll!RtlUserThreadStart+0x1000&#34;;&#xA;    set pipename &#34;DserNamePipe##, PGMessagePipe##, MsFteWds##&#34;;&#xA;    set keylogger &#34;SetWindowsHookEx&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;目前需要改进的地方：&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;堆内存加密目前不稳定，暂未正式使用&lt;/li&gt; &#xA; &lt;li&gt;修改部分功能下中文乱码的问题&lt;/li&gt; &#xA; &lt;li&gt;部分功能暂未支持x86系统（最近太忙了，会尽快改出来）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;主体代码结构&lt;/h3&gt; &#xA;&lt;h4&gt;config&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;公钥、C2服务器地址、https通信、超时的时间、代理等设置&lt;/li&gt; &#xA; &lt;li&gt;C2profile设置&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;crypt&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;通信需要的AES、RSA加密算法&lt;/li&gt; &#xA; &lt;li&gt;C2profile中加密算法的实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;packet&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;commands为各个平台下部分功能的实现&lt;/li&gt; &#xA; &lt;li&gt;execute_assembly为windows平台下内存执行不落地c#的代码&lt;/li&gt; &#xA; &lt;li&gt;heap为windows平台下堆内存加密代码&lt;/li&gt; &#xA; &lt;li&gt;http为发包的代码&lt;/li&gt; &#xA; &lt;li&gt;inject为windows平台下进程注入的代码&lt;/li&gt; &#xA; &lt;li&gt;jobs为windows平台下注入cs原生反射型dll并管道回传的代码&lt;/li&gt; &#xA; &lt;li&gt;packet为通信所需的部分功能&lt;/li&gt; &#xA; &lt;li&gt;token为windows平台下令牌相关的功能&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;services&lt;/h4&gt; &#xA;&lt;p&gt;对packet里面的功能进行了跨平台封装，方便main.go调用&lt;/p&gt; &#xA;&lt;h4&gt;sysinfo&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;meta为元信息的处理&lt;/li&gt; &#xA; &lt;li&gt;sysinfo为不同平台下有关进程与系统的判断及处理&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;main.go&lt;/h4&gt; &#xA;&lt;p&gt;主方法对各个命令进行了解析与执行，以及对结果和错误进行了返回&lt;/p&gt; &#xA;&lt;h2&gt;部分功能的实现细节&lt;/h2&gt; &#xA;&lt;h3&gt;shell&lt;/h3&gt; &#xA;&lt;p&gt;shell直接调用了golang的os/exec库。 windows下这个库的底层其实还是调用了CreateProcess，但是我没找到go是否提供了封装好了的CreateProcessWithTokenW方法。&lt;/p&gt; &#xA;&lt;h3&gt;run &amp;amp;&amp;amp; execute&lt;/h3&gt; &#xA;&lt;p&gt;run和execute的区别在于，run可以返回执行的结果而execute无回显。底层的实现差别就在于run会通过管道回传执行的结果而execute不会。&lt;/p&gt; &#xA;&lt;p&gt;由于实现shell的os/exec库是新起进程执行的命令，无法以窃取来的令牌的身份执行命令，因此run和execute的实现在没有窃取令牌的时候调用了CreateProcess，窃取令牌后调用CreateProcessWithTokenW以令牌权限来执行命令。因此要注意，如果想以令牌的权限执行命令，那么需要用run或execute而不是shell。&lt;/p&gt; &#xA;&lt;h3&gt;powershell-import&lt;/h3&gt; &#xA;&lt;p&gt;powershell-import部分的实现与cs的思路一样，先把输入的powershell module保存，之后在执行powershell命令的时候本地开一个端口并把module放上去，powershell直接请求该端口进行不落地的powershell module加载，不落地加载powershell module可以对部分杀软进行绕过。&lt;/p&gt; &#xA;&lt;h3&gt;powershell&lt;/h3&gt; &#xA;&lt;p&gt;powershell命令直接调用了powershell，会被360监控，可以尝试用免杀的方式执行。&lt;/p&gt; &#xA;&lt;h3&gt;execute-assembly&lt;/h3&gt; &#xA;&lt;p&gt;execute-assembly的实现与cs原生的实现不太一样，cs的beacon从服务端返回的内容的主体部分是c#的程序以及开.net环境的dll。cs的beacon首先拉起来一个进程（默认是rundll32），之后把用来开环境的dll注入到该进程中，然后将c#的程序注入到该进程并执行。考虑到步骤过于繁琐，并且容易拿不到执行的结果，我这里直接用&lt;a href=&#34;https://github.com/timwhitez/Doge-CLRLoad&#34;&gt;该项目&lt;/a&gt;实现了execute-assembly的功能，但未对全版本windows进行测试。&lt;/p&gt; &#xA;&lt;h3&gt;进程注入&lt;/h3&gt; &#xA;&lt;p&gt;进程注入shinject和dllinject采用的是APC注入。&lt;/p&gt; &#xA;&lt;h3&gt;反射型dll注入&lt;/h3&gt; &#xA;&lt;p&gt;cs原生反射型dll注入的思路是先拉起来一个rundll32进程，之后把dll注进去执行，但是会被360核晶报远程线程注入。我尝试使用了native或者unhook等方法均失败，最后发现了将dll注入自己是不会被查杀的，因此考虑将cs的fork&amp;amp;run的方式改为注入自己的方式。 由于cs是fork&amp;amp;&amp;amp;run的形式,因此部分dll在结束的时候要执行ExitProcess。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/48757788/198508271-5be424b8-f34c-404b-9646-0e1027713476.png&#34; alt=&#34;1666934161850&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;但是我们注入自己的话就会把木马主线程退出，因此需要对下发的dll进行简单的修改，将dll中的ExitProcess字符串替换为ExitThread+\x00即可。&lt;/p&gt; &#xA;&lt;p&gt;dll通过管道将结果异步地回传给服务端。目前的dll反射注入采用了注入自己的方法，后续会实现用户可通过配置文件进行注入方式的更改。&lt;/p&gt; &#xA;&lt;h3&gt;令牌&lt;/h3&gt; &#xA;&lt;p&gt;令牌的部分目前实现了令牌的窃取、还原、制作。&lt;/p&gt; &#xA;&lt;h3&gt;上线内网不出网主机&lt;/h3&gt; &#xA;&lt;p&gt;考虑到渗透中常常存在着内网主机上线的情况，即边缘主机出网，内网主机不出网的情况。目前实现的木马暂不支持代理转发的功能，但是可以通过设置config.go中的proxy参数，通过边缘主机的代理进行木马的上线。即如果在边缘主机的8080端口开了个http代理，那么在config.go中设置ProxyOn为true，Proxy为&lt;code&gt;http://ip:8080&lt;/code&gt;即可令内网的木马上线我们的C2服务器。&lt;/p&gt; &#xA;&lt;h3&gt;堆内存加密&lt;/h3&gt; &#xA;&lt;p&gt;堆内存加密的方法实现参考了&lt;a href=&#34;https://cloud.tencent.com/developer/article/1949555&#34;&gt;该文章&lt;/a&gt;。在sleep之前先将除主线程之外的线程挂起，之后遍历堆对堆内存进行加密。sleep结束后解密并将线程恢复。不过该功能较为不稳定，有时在进行堆遍历的时候会突然卡住或者直接退出，并且考虑到后台可能会有keylogger或portscan这种的持久任务，将线程全部挂起有些不合适，如果有师傅有好的想法欢迎来讨论。同时我不太理解为什么go的time.Sleep函数在其他线程都挂起之后调用会一直沉睡，而调用windows.SleepEx就不会有问题，还望师傅们解答。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>binwiederhier/ntfy</title>
    <updated>2022-10-31T01:34:18Z</updated>
    <id>tag:github.com,2022-10-31:/binwiederhier/ntfy</id>
    <link href="https://github.com/binwiederhier/ntfy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Send push notifications to your phone or desktop using PUT/POST&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/web/public/static/img/ntfy.png&#34; alt=&#34;ntfy&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;👶 Baby break - My baby girl was born!&lt;/h2&gt; &#xA;&lt;p&gt;Hey folks, my daughter was born on 8/30/22, so I&#39;ll be taking some time off from working on ntfy. I&#39;ll likely return to working on features and bugs in a few weeks. I hope you understand. I posted some pictures in &lt;a href=&#34;https://github.com/binwiederhier/ntfy/issues/387&#34;&gt;#387&lt;/a&gt; 🥰&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;ntfy.sh | Send push notifications to your phone or desktop via PUT/POST&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/binwiederhier/ntfy/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/binwiederhier/ntfy.svg?color=success&amp;amp;style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/heckel.io/ntfy&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/heckel.io/ntfy.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/binwiederhier/ntfy/actions&#34;&gt;&lt;img src=&#34;https://github.com/binwiederhier/ntfy/workflows/test/badge.svg?sanitize=true&#34; alt=&#34;Tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/binwiederhier/ntfy&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/binwiederhier/ntfy&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/binwiederhier/ntfy&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/binwiederhier/ntfy/branch/main/graph/badge.svg?token=A597KQ463G&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/cT7ECsZj9w&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/874398661709295626?label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#ntfy:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/ntfy:matrix.org?label=Matrix&#34; alt=&#34;Matrix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#ntfy-space:matrix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/matrix/ntfy-space:matrix.org?label=Matrix+space&#34; alt=&#34;Matrix space&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/ntfy/&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/ntfy?color=%23317f6f&amp;amp;label=-%20r%2Fntfy&amp;amp;style=social&#34; alt=&#34;Reddit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ntfy.statuspage.io/&#34;&gt;&lt;img src=&#34;https://healthchecks.io/badge/68b65976-b3b0-4102-aec9-980921/kcoEgrLY.svg?sanitize=true&#34; alt=&#34;Healthcheck&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;ntfy&lt;/strong&gt; (pronounce: &lt;em&gt;notify&lt;/em&gt;) is a simple HTTP-based &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;pub-sub&lt;/a&gt; notification service. It allows you to &lt;strong&gt;send notifications to your phone or desktop via scripts&lt;/strong&gt; from any computer, entirely &lt;strong&gt;without signup or cost&lt;/strong&gt;. It&#39;s also open source (as you can plainly see) if you want to run your own.&lt;/p&gt; &#xA;&lt;p&gt;I run a free version of it at &lt;strong&gt;&lt;a href=&#34;https://ntfy.sh&#34;&gt;ntfy.sh&lt;/a&gt;&lt;/strong&gt;. There&#39;s also an &lt;a href=&#34;https://github.com/binwiederhier/ntfy-android&#34;&gt;open source Android app&lt;/a&gt; (see &lt;a href=&#34;https://play.google.com/store/apps/details?id=io.heckel.ntfy&#34;&gt;Google Play&lt;/a&gt; or &lt;a href=&#34;https://f-droid.org/en/packages/io.heckel.ntfy/&#34;&gt;F-Droid&lt;/a&gt;), and an &lt;a href=&#34;https://github.com/binwiederhier/ntfy-ios&#34;&gt;open source iOS app&lt;/a&gt; (see &lt;a href=&#34;https://apps.apple.com/us/app/ntfy/id1625396347&#34;&gt;App Store&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/web/public/static/img/screenshot-curl.png&#34; height=&#34;180&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/web/public/static/img/screenshot-web-detail.png&#34; height=&#34;180&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/web/public/static/img/screenshot-phone-main.jpg&#34; height=&#34;180&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/web/public/static/img/screenshot-phone-detail.jpg&#34; height=&#34;180&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/web/public/static/img/screenshot-phone-notification.jpg&#34; height=&#34;180&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;&lt;a href=&#34;https://ntfy.sh/docs/&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ntfy.sh/docs/&#34;&gt;Getting started&lt;/a&gt; | &lt;a href=&#34;https://ntfy.sh/docs/subscribe/phone/&#34;&gt;Android/iOS&lt;/a&gt; | &lt;a href=&#34;https://ntfy.sh/docs/publish/&#34;&gt;API&lt;/a&gt; | &lt;a href=&#34;https://ntfy.sh/docs/install/&#34;&gt;Install / Self-hosting&lt;/a&gt; | &lt;a href=&#34;https://ntfy.sh/docs/develop/&#34;&gt;Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Chat / forum&lt;/h2&gt; &#xA;&lt;p&gt;There are a few ways to get in touch with me and/or the rest of the community. Feel free to use any of these methods. Whatever works best for you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/cT7ECsZj9w&#34;&gt;Discord server&lt;/a&gt; - direct chat with the community&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#ntfy:matrix.org&#34;&gt;Matrix room #ntfy&lt;/a&gt; (+ &lt;a href=&#34;https://matrix.to/#/#ntfy-space:matrix.org&#34;&gt;Matrix space&lt;/a&gt;) - same chat, bridged from Discord&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/ntfy/&#34;&gt;Reddit r/ntfy&lt;/a&gt; - asynchronous forum (&lt;em&gt;new as of October 2022&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/binwiederhier/ntfy/issues&#34;&gt;GitHub issues&lt;/a&gt; - questions, features, bugs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://heckel.io/about&#34;&gt;Email&lt;/a&gt; - reach me directly (&lt;em&gt;I usually prefer the other methods&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Announcements / beta testers&lt;/h2&gt; &#xA;&lt;p&gt;For announcements of new releases and cutting-edge beta versions, please subscribe to the &lt;a href=&#34;https://ntfy.sh/announcements&#34;&gt;ntfy.sh/announcements&lt;/a&gt; topic. If you&#39;d like to test the iOS app, join &lt;a href=&#34;https://testflight.apple.com/join/P1fFnAm9&#34;&gt;TestFlight&lt;/a&gt;. For Android betas, join Discord/Matrix (I&#39;ll eventually make a testing channel in Google Play).&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;I welcome any and all contributions. Just create a PR or an issue. To contribute code, check out the &lt;a href=&#34;https://ntfy.sh/docs/develop/&#34;&gt;build instructions&lt;/a&gt; for the server and the Android app. Or, if you&#39;d like to help translate 🇩🇪 🇺🇸 🇧🇬, you can start immediately in &lt;a href=&#34;https://hosted.weblate.org/projects/ntfy/&#34;&gt;Hosted Weblate&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;a href=&#34;https://hosted.weblate.org/engage/ntfy/&#34;&gt; &lt;img src=&#34;https://hosted.weblate.org/widgets/ntfy/-/multi-blue.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Donations&lt;/h2&gt; &#xA;&lt;p&gt;I have just very recently started accepting donations via &lt;a href=&#34;https://github.com/sponsors/binwiederhier&#34;&gt;GitHub Sponsors&lt;/a&gt;. I would be humbled if you helped me carry the server and developer account costs. Even small donations are very much appreciated. A big fat Thank You to the folks already sponsoring ntfy:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aspyct&#34;&gt;&lt;img src=&#34;https://github.com/aspyct.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/codinghipster&#34;&gt;&lt;img src=&#34;https://github.com/codinghipster.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/HinFort&#34;&gt;&lt;img src=&#34;https://github.com/HinFort.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/johnnyip&#34;&gt;&lt;img src=&#34;https://github.com/johnnyip.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/JonDerThan&#34;&gt;&lt;img src=&#34;https://github.com/JonDerThan.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Lexevolution&#34;&gt;&lt;img src=&#34;https://github.com/Lexevolution.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mckay115&#34;&gt;&lt;img src=&#34;https://github.com/mckay115.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/neutralinsomniac&#34;&gt;&lt;img src=&#34;https://github.com/neutralinsomniac.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nickexyz&#34;&gt;&lt;img src=&#34;https://github.com/nickexyz.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/qcasey&#34;&gt;&lt;img src=&#34;https://github.com/qcasey.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Salamafet&#34;&gt;&lt;img src=&#34;https://github.com/Salamafet.png&#34; width=&#34;40px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Made with ❤️ by &lt;a href=&#34;https://heckel.io&#34;&gt;Philipp C. Heckel&lt;/a&gt;.&lt;br&gt; The project is dual licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/LICENSE&#34;&gt;Apache License 2.0&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/binwiederhier/ntfy/main/LICENSE.GPLv2&#34;&gt;GPLv2 License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Third party libraries and resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/urfave/cli&#34;&gt;github.com/urfave/cli&lt;/a&gt; (MIT) is used to drive the CLI&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mixkit.co/free-sound-effects/notification/&#34;&gt;Mixkit sounds&lt;/a&gt; (Mixkit Free License) are used as notification sounds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://notificationsounds.com&#34;&gt;Sounds from notificationsounds.com&lt;/a&gt; (Creative Commons Attribution) are used as notification sounds&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Roboto&#34;&gt;Roboto Font&lt;/a&gt; (Apache 2.0) is used as a font in everything web&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; (MIT) is used for the web app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mui.com/&#34;&gt;Material UI components&lt;/a&gt; (MIT) are used in the web app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mui/material-ui/tree/master/docs/data/material/getting-started/templates/dashboard&#34;&gt;MUI dashboard template&lt;/a&gt; (MIT) was used as a basis for the web app&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dexie/Dexie.js&#34;&gt;Dexie.js&lt;/a&gt; (Apache 2.0) is used for web app persistence in IndexedDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://goreleaser.com/&#34;&gt;GoReleaser&lt;/a&gt; (MIT) is used to create releases&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emersion/go-smtp&#34;&gt;go-smtp&lt;/a&gt; (MIT) is used to receive e-mails&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;stretchr/testify&lt;/a&gt; (MIT) is used for unit and integration tests&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/go-sqlite3&#34;&gt;github.com/mattn/go-sqlite3&lt;/a&gt; (MIT) is used to provide the persistent message cache&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firebase/firebase-admin-go&#34;&gt;Firebase Admin SDK&lt;/a&gt; (Apache 2.0) is used to send FCM messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/github/gemoji&#34;&gt;github/gemoji&lt;/a&gt; (MIT) is used for emoji support (specifically the &lt;a href=&#34;https://raw.githubusercontent.com/github/gemoji/master/db/emoji.json&#34;&gt;emoji.json&lt;/a&gt; file)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yossiabramov.com/blog/vanilla-js-lightbox&#34;&gt;Lightbox with vanilla JS&lt;/a&gt; as a lightbox on the landing page&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/CJEnright/bc2d8b8dc0c1389a9feeddb110f822d7&#34;&gt;HTTP middleware for gzip compression&lt;/a&gt; (MIT) is used for serving static files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bryanwoods/autolink-js&#34;&gt;Regex for auto-linking&lt;/a&gt; (MIT) is used to highlight links (the library is not used)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.arp242.net/static-go.html&#34;&gt;Statically linking go-sqlite3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facelessuser.github.io/pymdown-extensions/extensions/tabbed/#linked-tabs&#34;&gt;Linked tabs in mkdocs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>golang-module/carbon</title>
    <updated>2022-10-31T01:34:18Z</updated>
    <id>tag:github.com,2022-10-31:/golang-module/carbon</id>
    <link href="https://github.com/golang-module/carbon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple, semantic and developer-friendly golang package for datetime&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Carbon&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang-module/carbon/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/golang-module/carbon.svg?sanitize=true&#34; alt=&#34;Carbon Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/golang-module/carbon/actions&#34;&gt;&lt;img src=&#34;https://github.com/golang-module/carbon/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Go Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/golang-module/carbon&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/golang-module/carbon&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/golang-module/carbon&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/golang-module/carbon/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Go Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/golang-module/carbon&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/go.dev-reference-brightgreen?logo=go&amp;amp;logoColor=white&amp;amp;style=flat&#34; alt=&#34;Carbon Doc&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/golang-module/carbon&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/README.cn.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/README.jp.md&#34;&gt;日本語&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Introduction&lt;/h4&gt; &#xA;&lt;p&gt;A simple, semantic and developer-friendly golang package for datetime&lt;/p&gt; &#xA;&lt;p&gt;Carbon has been included by &lt;a href=&#34;https://github.com/avelino/awesome-go#date-and-time&#34; title=&#34;awesome-go&#34;&gt;awesome-go&lt;/a&gt;, if you think it is helpful, please give me a star&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang-module/carbon&#34; title=&#34;github.com/golang-module/carbon&#34;&gt;github.com/golang-module/carbon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitee.com/golang-module/carbon&#34; title=&#34;gitee.com/golang-module/carbon&#34;&gt;gitee.com/golang-module/carbon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Installation&lt;/h4&gt; &#xA;&lt;h5&gt;Go version &amp;gt;= 1.16 (recommend)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// By github&#xA;go get -u github.com/golang-module/carbon/v2&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/golang-module/carbon/v2&#34;&#xA;)&#xA;&#xA;// By gitee&#xA;go get -u gitee.com/golang-module/carbon/v2&#xA;&#xA;import (&#xA;&#x9;&#34;gitee.com/golang-module/carbon/v2&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Go version &amp;lt; 1.16 (must)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// By github&#xA;go get -u github.com/golang-module/carbon&#xA;&#xA;import (&#xA;&#x9;&#34;github.com/golang-module/carbon&#34;&#xA;)&#xA;&#xA;// By gitee&#xA;go get -u gitee.com/golang-module/carbon&#xA;&#xA;import (&#xA;&#x9;&#34;gitee.com/golang-module/carbon&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/#faq&#34;&gt;FAQ&lt;/a&gt; for the difference between v1 and v2&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Usage and example&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The default timezone is Local, assuming the current time is 2020-08-05 13:14:15.999999999&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Yesterday, today and tomorrow&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Return datetime of today&#xA;fmt.Sprintf(&#34;%s&#34;, carbon.Now()) // 2020-08-05 13:14:15&#xA;carbon.Now().ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Now().ToDateTimeString() // 2020-08-05 13:14:15&#xA;// Return date of today&#xA;carbon.Now().ToDateString() // 2020-08-05&#xA;// Return time of today&#xA;carbon.Now().ToTimeString() // 13:14:15&#xA;// Return datetime of today in a given timezone&#xA;carbon.Now(Carbon.NewYork).ToDateTimeString() // 2020-08-05 14:14:15&#xA;// Return timestamp with second of today&#xA;carbon.Now().Timestamp() // 1596604455&#xA;// Return timestamp with millisecond of today&#xA;carbon.Now().TimestampMilli() // 1596604455000&#xA;// Return timestamp with microsecond of today&#xA;carbon.Now().TimestampMicro() // 1596604455000000&#xA;// Return timestamp with nanosecond of today&#xA;carbon.Now().TimestampNano() // 1596604455000000000&#xA;&#xA;// Return datetime of yesterday&#xA;fmt.Sprintf(&#34;%s&#34;, carbon.Yesterday()) // 2020-08-04 13:14:15&#xA;carbon.Yesterday().ToString() // 2020-08-04 13:14:15 +0800 CST&#xA;carbon.Yesterday().ToDateTimeString() // 2020-08-04 13:14:15&#xA;// Return date of yesterday&#xA;carbon.Yesterday().ToDateString() // 2020-08-04&#xA;// Return time of yesterday&#xA;carbon.Yesterday().ToTimeString() // 13:14:15&#xA;// Return datetime of yesterday on a given day&#xA;carbon.Parse(&#34;2021-01-28 13:14:15&#34;).Yesterday().ToDateTimeString() // 2021-01-27 13:14:15&#xA;// Return datetime of yesterday in a given timezone&#xA;carbon.Yesterday(Carbon.NewYork).ToDateTimeString() // 2020-08-04 14:14:15&#xA;// Return timestamp with second of yesterday&#xA;carbon.Yesterday().Timestamp() // 1596518055&#xA;// Return timestamp with millisecond of yesterday&#xA;carbon.Yesterday().TimestampMilli() // 1596518055000&#xA;// Return timestamp with microsecond of yesterday&#xA;carbon.Yesterday().TimestampMicro() // 1596518055000000&#xA;// Return timestamp with nanosecond of yesterday&#xA;carbon.Yesterday().TimestampNano() // 1596518055000000000&#xA;&#xA;// Return datetime of tomorrow&#xA;fmt.Sprintf(&#34;%s&#34;, carbon.Tomorrow()) // 2020-08-06 13:14:15&#xA;carbon.Tomorrow().ToString() // 2020-08-06 13:14:15 +0800 CST&#xA;carbon.Tomorrow().ToDateTimeString() // 2020-08-06 13:14:15&#xA;// Return date of tomorrow&#xA;carbon.Tomorrow().ToDateString() // 2020-08-06&#xA;// Return time of tomorrow&#xA;carbon.Tomorrow().ToTimeString() // 13:14:15&#xA;// Return datetime of tomorrow on a given day&#xA;carbon.Parse(&#34;2021-01-28 13:14:15&#34;).Tomorrow().ToDateTimeString() // 2021-01-29 13:14:15&#xA;// Return datetime of tomorrow in a given timezone&#xA;carbon.Tomorrow(Carbon.NewYork).ToDateTimeString() // 2020-08-06 14:14:15&#xA;// Return timestamp with second of tomorrow&#xA;carbon.Tomorrow().Timestamp() // 1596690855&#xA;// Return timestamp with millisecond of tomorrow&#xA;carbon.Tomorrow().TimestampMilli() // 1596690855000&#xA;// Return timestamp with microsecond of tomorrow&#xA;carbon.Tomorrow().TimestampMicro() // 1596690855000000&#xA;// Return timestamp with nanosecond of tomorrow&#xA;carbon.Tomorrow().TimestampNano() // 1596690855000000000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Create a Carbon instance&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Create a Carbon instance from a given timestamp with second&#xA;carbon.CreateFromTimestamp(-1).ToString() // 1970-01-01 07:59:59 +0800 CST&#xA;carbon.CreateFromTimestamp(0).ToString() // 1970-01-01 08:00:00 +0800 CST&#xA;carbon.CreateFromTimestamp(1).ToString() // 1970-01-01 08:00:01 +0800 CST&#xA;carbon.CreateFromTimestamp(1649735755).ToString() // 2022-04-12 11:55:55 +0800 CST&#xA;// Create a Carbon instance from a given timestamp with millisecond&#xA;carbon.CreateFromTimestampMilli(1649735755981).ToString() // 2022-04-12 11:55:55.981 +0800 CST&#xA;// Create a Carbon instance from a given timestamp with microsecond&#xA;carbon.CreateFromTimestampMicro(1649735755981566).ToString() // 2022-04-12 11:55:55.981566 +0800 CST&#xA;// Create a Carbon instance from a given timestamp with nanosecond&#xA;carbon.CreateFromTimestampNano(1649735755981566000).ToString() // 2022-04-12 11:55:55.981566 +0800 CST&#xA;&#xA;// Create a Carbon instance from a given date and time&#xA;carbon.CreateFromDateTime(2020, 8, 5, 13, 14, 15).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;// Create a Carbon instance from a given date and time with millisecond&#xA;carbon.CreateFromDateTimeMilli(2020, 8, 5, 13, 14, 15, 999).ToString() // 2020-08-05 13:14:15.999 +0800 CST&#xA;// Create a Carbon instance from a given date and time with microsecond&#xA;carbon.CreateFromDateTimeMicro(2020, 8, 5, 13, 14, 15, 999999).ToString() // 2020-08-05 13:14:15.999999 +0800 CST&#xA;// Create a Carbon instance from a given date and time with nanosecond&#xA;carbon.CreateFromDateTimeNano(2020, 8, 5, 13, 14, 15, 999999999).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST&#xA;&#xA;// Create a Carbon instance from a given year, month and day&#xA;carbon.CreateFromDate(2020, 8, 5).ToString() // // 2020-08-05 13:14:15 +0800 CST&#xA;// Create a Carbon instance from a given year, month and day with millisecond&#xA;carbon.CreateFromDateMilli(2020, 8, 5, 999).ToString() // 2020-08-05 13:14:15.999 +0800 CST&#xA;// Create a Carbon instance from a given year, month and day with microsecond&#xA;carbon.CreateFromDateMicro(2020, 8, 5, 999999).ToString() // 2020-08-05 13:14:15.999999 +0800 CST&#xA;// Create a Carbon instance from a given year, month and day with nanosecond&#xA;carbon.CreateFromDateNano(2020, 8, 5, 999999999).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST&#xA;&#xA;// Create a Carbon instance from a given hour, minute and second&#xA;carbon.CreateFromTime(13, 14, 15).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;// Create a Carbon instance from a given hour, minute and second with millisecond&#xA;carbon.CreateFromTimeMilli(13, 14, 15, 999).ToString() // 2020-08-05 13:14:15.999 +0800 CST&#xA;// Create a Carbon instance from a given hour, minute and second with microsecond&#xA;carbon.CreateFromTimeMicro(13, 14, 15, 999999).ToString() // 2020-08-05 13:14:15.999999 +0800 CST&#xA;// Create a Carbon instance from a given hour, minute and second with nanosecond&#xA;carbon.CreateFromTimeNano(13, 14, 15, 999999999).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Parse a standard time string as a Carbon instance&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;carbon.Parse(&#34;&#34;).ToDateTimeString() // empty string&#xA;carbon.Parse(&#34;0&#34;).ToDateTimeString() // empty string&#xA;carbon.Parse(&#34;0000-00-00 00:00:00&#34;).ToDateTimeString() // empty string&#xA;carbon.Parse(&#34;0000-00-00&#34;).ToDateTimeString() // empty string&#xA;carbon.Parse(&#34;00:00:00&#34;).ToDateTimeString() // empty string&#xA;&#xA;carbon.Parse(&#34;2020&#34;).ToString() // 2020-01-01 00:00:00 +0800 CST&#xA;carbon.Parse(&#34;2020-8&#34;).ToString() // 2020-08-01 00:00:00 +0800 CST&#xA;carbon.Parse(&#34;2020-08&#34;).ToString() // 2020-08-01 00:00:00 +0800 CST&#xA;carbon.Parse(&#34;2020-8-5&#34;).ToString() // 2020-08-05 00:00:00 +0800 CST&#xA;carbon.Parse(&#34;2020-8-05&#34;).ToString() // 2020-08-05 00:00:00 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05&#34;).ToString() // 2020-08-05 00:00:00 +0800 CST&#xA;&#xA;carbon.Parse(&#34;2020-8-5 13:14:15&#34;).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-8-05 13:14:15&#34;).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-08-5 13:14:15&#34;).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999&#34;).ToString() // 2020-08-05 13:14:15.999 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999&#34;).ToString() // 2020-08-05 13:14:15.999999 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST&#xA;&#xA;carbon.Parse(&#34;2020-8-5T13:14:15+08:00&#34;).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-8-05T13:14:15+08:00&#34;).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05T13:14:15+08:00&#34;).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999+08:00&#34;).ToString() // 2020-08-05 13:14:15.999 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999+08:00&#34;).ToString() // 2020-08-05 13:14:15.999999 +0800 CST&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST&#xA;&#xA;carbon.Parse(&#34;20200805&#34;).ToString() // 2020-08-05 00:00:00 +0800 CST&#xA;carbon.Parse(&#34;20200805131415&#34;).ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;20200805131415.999&#34;).ToString() // 2020-08-05 13:14:15.999 +0800 CST&#xA;carbon.Parse(&#34;20200805131415.999999&#34;).ToString() // 2020-08-05 13:14:15.999999 +0800 CST&#xA;carbon.Parse(&#34;20200805131415.999999999&#34;).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST&#xA;carbon.Parse(&#34;20200805131415.999+08:00&#34;).ToString() // 2020-08-05 13:14:15.999 +0800 CST&#xA;carbon.Parse(&#34;20200805131415.999999+08:00&#34;).ToString() // 2020-08-05 13:14:15.999999 +0800 CST&#xA;carbon.Parse(&#34;20200805131415.999999999+08:00&#34;).ToString() // 2020-08-05 13:14:15.999999999 +0800 CST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Parse a time string as a Carbon instance by format&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;carbon.ParseByFormat(&#34;2020|08|05 13|14|15&#34;, &#34;Y|m|d H|i|s&#34;).ToDateTimeString() // 2020-08-05 13:14:15&#xA;carbon.ParseByFormat(&#34;It is 2020-08-05 13:14:15&#34;, &#34;\\I\\t \\i\\s Y-m-d H:i:s&#34;).ToDateTimeString() // 2020-08-05 13:14:15&#xA;carbon.ParseByFormat(&#34;今天是 2020年08月05日13时14分15秒&#34;, &#34;今天是 Y年m月d日H时i分s秒&#34;).ToDateTimeString() // 2020-08-05 13:14:15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Parse a time string as a Carbon instance by layout&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;carbon.ParseByLayout(&#34;2020|08|05 13|14|15&#34;, &#34;2006|01|02 15|04|05&#34;).ToDateTimeString() // 2020-08-05 13:14:15&#xA;carbon.ParseByLayout(&#34;It is 2020-08-05 13:14:15&#34;, &#34;It is 2006-01-02 15:04:05&#34;).ToDateTimeString() // 2020-08-05 13:14:15&#xA;carbon.ParseByLayout(&#34;今天是 2020年08月05日13时14分15秒&#34;, &#34;今天是 2006年01月02日15时04分05秒&#34;).ToDateTimeString() // 2020-08-05 13:14:15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Convert between Carbon and Time&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Convert Time.time into Carbon&#xA;carbon.Time2Carbon(time.Now())&#xA;// Convert Carbon into Time.time&#xA;carbon.Now().Carbon2Time()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Start and end&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Start of the century&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfCentury().ToDateTimeString() // 2000-01-01 00:00:00&#xA;// End of the century&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfCentury().ToDateTimeString() // 2999-12-31 23:59:59&#xA;&#xA;// Start of the decade&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00&#xA;carbon.Parse(&#34;2021-08-05 13:14:15&#34;).StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00&#xA;carbon.Parse(&#34;2029-08-05 13:14:15&#34;).StartOfDecade().ToDateTimeString() // 2020-01-01 00:00:00&#xA;// End of the decade&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59&#xA;carbon.Parse(&#34;2021-08-05 13:14:15&#34;).EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59&#xA;carbon.Parse(&#34;2029-08-05 13:14:15&#34;).EndOfDecade().ToDateTimeString() // 2029-12-31 23:59:59&#xA;&#xA;// Start of the year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfYear().ToDateTimeString() // 2020-01-01 00:00:00&#xA;// End of the year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfYear().ToDateTimeString() // 2020-12-31 23:59:59&#xA;&#xA;// Start of the quarter&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfQuarter().ToDateTimeString() // 2020-07-01 00:00:00&#xA;// End of the quarter&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfQuarter().ToDateTimeString() // 2020-09-30 23:59:59&#xA;&#xA;// Start of the month&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfMonth().ToDateTimeString() // 2020-08-01 00:00:00&#xA;// End of the month&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfMonth().ToDateTimeString() // 2020-08-31 23:59:59&#xA;&#xA;// Start of the week&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfWeek().ToDateTimeString() // 2020-08-02 00:00:00&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetWeekStartsAt(carbon.Sunday).StartOfWeek().ToDateTimeString() // 2020-08-02 00:00:00&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetWeekStartsAt(carbon.Monday).StartOfWeek().ToDateTimeString() // 2020-08-03 00:00:00&#xA;// End of the week&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfWeek().ToDateTimeString() // 2020-08-08 23:59:59&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetWeekStartsAt(carbon.Sunday).EndOfWeek().ToDateTimeString() // 2020-08-08 23:59:59&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetWeekStartsAt(carbon.Monday).EndOfWeek().ToDateTimeString() // 2020-08-09 23:59:59&#xA;&#xA;// Start of the day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfDay().ToDateTimeString() // 2020-08-05 00:00:00&#xA;// End of the day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfDay().ToDateTimeString() // 2020-08-05 23:59:59&#xA;&#xA;// Start of the hour&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfHour().ToDateTimeString() // 2020-08-05 13:00:00&#xA;// End of the hour&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfHour().ToDateTimeString() // 2020-08-05 13:59:59&#xA;&#xA;// Start of the minute&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfMinute().ToDateTimeString() // 2020-08-05 13:14:00&#xA;// End of the minute&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfMinute().ToDateTimeString() // 2020-08-05 13:14:59&#xA;&#xA;// Start of the second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfSecond().ToString() // 2020-08-05 13:14:15 +0800 CST&#xA;// End of the second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfSecond().ToString() // 2020-08-05 13:14:15.999999999 +0800 CST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Addition and subtraction&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Add three centuries&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddCenturies(3).ToDateTimeString() // 2320-02-29 13:14:15&#xA;// Add three centuries without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddCenturiesNoOverflow(3).ToDateTimeString() // 2320-02-29 13:14:15&#xA;// Add one century&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddCentury().ToDateTimeString() // 2120-02-29 13:14:15&#xA;// Add one century without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddCenturyNoOverflow().ToDateTimeString() // 2120-02-29 13:14:15&#xA;// Subtract three centuries&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubCenturies(3).ToDateTimeString() // 1720-02-29 13:14:15&#xA;// Subtract three centuries without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubCenturiesNoOverflow(3).ToDateTimeString() // 1720-02-29 13:14:15&#xA;// Subtract one century&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubCentury().ToDateTimeString() // 1920-02-29 13:14:15&#xA;// Subtract one century without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubCenturyNoOverflow().ToDateTimeString() // 1920-02-20 13:14:15&#xA;&#xA;// Add three decades&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddDecades(3).ToDateTimeString() // 2050-03-01 13:14:15&#xA;// Add three decades without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddDecadesNoOverflow(3).ToDateTimeString() // 2050-02-28 13:14:15&#xA;// Add one decade&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddDecade().ToDateTimeString() // 2030-03-01 13:14:15&#xA;// Add one decade without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddDecadeNoOverflow().ToDateTimeString() // 2030-02-28 13:14:15&#xA;// Subtract three decades&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubDecades(3).ToDateTimeString() // 1990-03-01 13:14:15&#xA;// Subtract three decades without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubDecadesNoOverflow(3).ToDateTimeString() // 1990-02-28 13:14:15&#xA;// Subtract one decade&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubDecade().ToDateTimeString() // 2010-03-01 13:14:15&#xA;// Subtract one decade without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubDecadeNoOverflow().ToDateTimeString() // 2010-02-28 13:14:15&#xA;&#xA;// Add three years&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddYears(3).ToDateTimeString() // 2023-03-01 13:14:15&#xA;// Add three years without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddYearsNoOverflow(3).ToDateTimeString() // 2023-02-28 13:14:15&#xA;// Add one year&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddYear().ToDateTimeString() // 2021-03-01 13:14:15&#xA;// Add one year without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddYearNoOverflow().ToDateTimeString() // 2021-02-28 13:14:15&#xA;// Subtract three years&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubYears(3).ToDateTimeString() // 2017-03-01 13:14:15&#xA;// Subtract three years without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubYearsNoOverflow(3).ToDateTimeString() // 2017-02-28 13:14:15&#xA;// Subtract one year&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubYear().ToDateTimeString() // 2019-03-01 13:14:15&#xA;// Subtract one year without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubYearNoOverflow().ToDateTimeString() // 2019-02-28 13:14:15&#xA;&#xA;// Add three quarters&#xA;carbon.Parse(&#34;2019-08-31 13:14:15&#34;).AddQuarters(3).ToDateTimeString() // 2019-03-02 13:14:15&#xA;// Add three quarters without overflowing month&#xA;carbon.Parse(&#34;2019-08-31 13:14:15&#34;).AddQuartersNoOverflow(3).ToDateTimeString() // 2019-02-29 13:14:15&#xA;// Add one quarter&#xA;carbon.Parse(&#34;2019-11-30 13:14:15&#34;).AddQuarter().ToDateTimeString() // 2020-03-01 13:14:15&#xA;// Add one quarter without overflowing month&#xA;carbon.Parse(&#34;2019-11-30 13:14:15&#34;).AddQuarterNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15&#xA;// Subtract three quarters&#xA;carbon.Parse(&#34;2019-08-31 13:14:15&#34;).SubQuarters(3).ToDateTimeString() // 2019-03-03 13:14:15&#xA;// Subtract three quarters without overflowing month&#xA;carbon.Parse(&#34;2019-08-31 13:14:15&#34;).SubQuartersNoOverflow(3).ToDateTimeString() // 2019-02-28 13:14:15&#xA;// Subtract one quarter&#xA;carbon.Parse(&#34;2020-05-31 13:14:15&#34;).SubQuarter().ToDateTimeString() // 2020-03-02 13:14:15&#xA;// Subtract one quarter without overflowing month&#xA;carbon.Parse(&#34;2020-05-31 13:14:15&#34;).SubQuarterNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15&#xA;&#xA;// Add three months&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddMonths(3).ToDateTimeString() // 2020-05-29 13:14:15&#xA;// Add three months without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddMonthsNoOverflow(3).ToDateTimeString() // 2020-05-29 13:14:15&#xA;// Add one month&#xA;carbon.Parse(&#34;2020-01-31 13:14:15&#34;).AddMonth().ToDateTimeString() // 2020-03-02 13:14:15&#xA;// Add one month without overflowing month&#xA;carbon.Parse(&#34;2020-01-31 13:14:15&#34;).AddMonthNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15&#xA;// Subtract three months&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubMonths(3).ToDateTimeString() // 2019-11-29 13:14:15&#xA;// Subtract three months without overflowing month&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubMonthsNoOverflow(3).ToDateTimeString() // 2019-11-29 13:14:15&#xA;// Subtract one month&#xA;carbon.Parse(&#34;2020-03-31 13:14:15&#34;).SubMonth().ToDateTimeString() // 2020-03-02 13:14:15&#xA;// Subtract one month without overflowing month&#xA;carbon.Parse(&#34;2020-03-31 13:14:15&#34;).SubMonthNoOverflow().ToDateTimeString() // 2020-02-29 13:14:15&#xA;&#xA;// Add three weeks&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddWeeks(3).ToDateTimeString() // 2020-03-21 13:14:15&#xA;// Add one week&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).AddWeek().ToDateTimeString() // 2020-03-07 13:14:15&#xA;// Subtract three weeks&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubWeeks(3).ToDateTimeString() // 2020-02-08 13:14:15&#xA;// Subtract three week&#xA;carbon.Parse(&#34;2020-02-29 13:14:15&#34;).SubWeek().ToDateTimeString() // 2020-02-22 13:14:15&#xA;&#xA;// Add three days&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddDays(3).ToDateTimeString() // 2020-08-08 13:14:15&#xA;// Add one day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddDay().ToDateTimeString() // 2020-08-05 13:14:15&#xA;// Subtract three days&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubDays(3).ToDateTimeString() // 2020-08-02 13:14:15&#xA;// Subtract one day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubDay().ToDateTimeString() // 2020-08-04 13:14:15&#xA;&#xA;// Add three hours&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddHours(3).ToDateTimeString() // 2020-08-05 16:14:15&#xA;// Add two and a half hours&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddDuration(&#34;2.5h&#34;).ToDateTimeString() // 2020-08-05 15:44:15&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddDuration(&#34;2h30m&#34;).ToDateTimeString() // 2020-08-05 15:44:15&#xA;// Add one hour&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddHour().ToDateTimeString() // 2020-08-05 14:14:15&#xA;// Subtract three hours&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubHours(3).ToDateTimeString() // 2020-08-05 10:14:15&#xA;// Subtract two and a half hours&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubDuration(&#34;2.5h&#34;).ToDateTimeString() // 2020-08-05 10:44:15&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubDuration(&#34;2h30m&#34;).ToDateTimeString() // 2020-08-05 10:44:15&#xA;// Subtract one hour&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubHour().ToDateTimeString() // 2020-08-05 12:14:15&#xA;&#xA;// Add three minutes&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddMinutes(3).ToDateTimeString() // 2020-08-05 13:17:15&#xA;// Add two and a half minutes&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddDuration(&#34;2.5m&#34;).ToDateTimeString() // 2020-08-05 13:16:45&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddDuration(&#34;2m30s&#34;).ToDateTimeString() // 2020-08-05 13:16:45&#xA;// Add one minute&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddMinute().ToDateTimeString() // 2020-08-05 13:15:15&#xA;// Subtract three minutes&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubMinutes(3).ToDateTimeString() // 2020-08-05 13:11:15&#xA;// Subtract two and a half minutes&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubDuration(&#34;2.5m&#34;).ToDateTimeString() // 2020-08-05 13:11:45&#xA;// Subtract one minute&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubMinute().ToDateTimeString() // 2020-08-05 13:13:15&#xA;&#xA;// Add three seconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddSeconds(3).ToDateTimeString() // 2020-08-05 13:14:18&#xA;// Add two and a half seconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddDuration(&#34;2.5s&#34;).ToDateTimeString() // 2020-08-05 13:14:17&#xA;// Add one second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).AddSecond().ToDateTimeString() // 2020-08-05 13:14:16&#xA;// Subtract three seconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubSeconds(3).ToDateTimeString() // 2020-08-05 13:14:12&#xA;// Subtract two and a half seconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubDuration(&#34;2.5s&#34;).ToDateTimeString() // 2020-08-05 13:14:12&#xA;// Subtract one second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SubSecond().ToDateTimeString() // 2020-08-05 13:14:14&#xA;&#xA;// Add three milliseconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).AddMilliseconds(3).ToString() // 2020-08-05 13:14:15.225222222 +0800 CST&#xA;// Add one millisecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).AddMillisecond().ToString() // 2020-08-05 13:14:15.223222222 +0800 CST&#xA;// Subtract three milliseconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).SubMilliseconds(3).ToString() // 2020-08-05 13:14:15.219222222 +0800 CST&#xA;// Subtract one millisecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).SubMillisecond().ToString() // 2020-08-05 13:14:15.221222222 +0800 CST&#xA;&#xA;// Add three microseconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).AddMicroseconds(3).ToString() // 2020-08-05 13:14:15.222225222 +0800 CST&#xA;// Add one microsecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).AddMicrosecond().ToString() // 2020-08-05 13:14:15.222223222 +0800 CST&#xA;// Subtract three microseconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).SubMicroseconds(3).ToString() // 2020-08-05 13:14:15.222219222 +0800 CST&#xA;// Subtract one microsecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).SubMicrosecond().ToString() // 2020-08-05 13:14:15.222221222 +0800 CST&#xA;&#xA;// Add three nanoseconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).AddNanoseconds(3).ToString() // 2020-08-05 13:14:15.222222225 +0800 CST&#xA;// Add one nanosecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).AddNanossecond().ToString() // 2020-08-05 13:14:15.222222223 +0800 CST&#xA;// Subtract three nanoseconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).SubNanosseconds(3).ToString() // 2020-08-05 13:14:15.222222219 +0800 CST&#xA;// Subtract one nanosecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.222222222&#34;).SubNanossecond().ToString() // 2020-08-05 13:14:15.222222221 +0800 CST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Difference&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Difference in years&#xA;carbon.Parse(&#34;2021-08-05 13:14:15&#34;).DiffInYears(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // -1&#xA;// Difference in years with absolute value&#xA;carbon.Parse(&#34;2021-08-05 13:14:15&#34;).DiffAbsInYears(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // 1&#xA;&#xA;// Difference in months&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffInMonths(carbon.Parse(&#34;2020-07-05 13:14:15&#34;)) // -1&#xA;// Difference in months with absolute value&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffAbsInMonths(carbon.Parse(&#34;2020-07-05 13:14:15&#34;)) // 1&#xA;&#xA;// Difference in weeks&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffInWeeks(carbon.Parse(&#34;2020-07-28 13:14:15&#34;)) // -1&#xA;// Difference in weeks with absolute value&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffAbsInWeeks(carbon.Parse(&#34;2020-07-28 13:14:15&#34;)) // 1&#xA;&#xA;// Difference in days&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffInDays(carbon.Parse(&#34;2020-08-04 13:14:15&#34;)) // -1&#xA;// Difference in days with absolute value&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffAbsInDays(carbon.Parse(&#34;2020-08-04 13:14:15&#34;)) // 1&#xA;&#xA;// Difference in hours&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffInHours(carbon.Parse(&#34;2020-08-05 12:14:15&#34;)) // -1&#xA;// Difference in hours with absolute value&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffAbsInHours(carbon.Parse(&#34;2020-08-05 12:14:15&#34;)) // 1&#xA;&#xA;// Difference in minutes&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffInMinutes(carbon.Parse(&#34;2020-08-05 13:13:15&#34;)) // -1&#xA;// Difference in minutes with absolute value&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffAbsInMinutes(carbon.Parse(&#34;2020-08-05 13:13:15&#34;)) // 1&#xA;&#xA;// Difference in seconds&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffInSeconds(carbon.Parse(&#34;2020-08-05 13:14:14&#34;)) // -1&#xA;// Difference in seconds with absolute value&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffAbsInSeconds(carbon.Parse(&#34;2020-08-05 13:14:14&#34;)) // 1&#xA;&#xA;// Difference in string&#xA;carbon.Now().DiffInString() // just now&#xA;carbon.Now().AddYearsNoOverflow(1).DiffInString() // -1 year&#xA;carbon.Now().SubYearsNoOverflow(1).DiffInString() // 1 year&#xA;// Difference in string with absolute value&#xA;carbon.Now().DiffAbsInString(carbon.Now()) // just now&#xA;carbon.Now().AddYearsNoOverflow(1).DiffAbsInString(carbon.Now()) // 1 year&#xA;carbon.Now().SubYearsNoOverflow(1).DiffAbsInString(carbon.Now()) // 1 year&#xA;&#xA;// Difference in a human-readable format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffForHumans() // just now&#xA;carbon.Parse(&#34;2019-08-05 13:14:15&#34;).DiffForHumans() // 1 year ago&#xA;carbon.Parse(&#34;2018-08-05 13:14:15&#34;).DiffForHumans() // 2 years ago&#xA;carbon.Parse(&#34;2021-08-05 13:14:15&#34;).DiffForHumans() // 1 year from now&#xA;carbon.Parse(&#34;2022-08-05 13:14:15&#34;).DiffForHumans() // 2 years from now&#xA;// Difference in a human-readable format from now time&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DiffForHumans(carbon.Now()) // 1 year before&#xA;carbon.Parse(&#34;2019-08-05 13:14:15&#34;).DiffForHumans(carbon.Now()) // 2 years before&#xA;carbon.Parse(&#34;2018-08-05 13:14:15&#34;).DiffForHumans(carbon.Now()) // 1 year after&#xA;carbon.Parse(&#34;2022-08-05 13:14:15&#34;).DiffForHumans(carbon.Now()) // 2 years after&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Comparison&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Whether is zero time&#xA;carbon.Parse(&#34;&#34;).IsZero() // true&#xA;carbon.Parse(&#34;0&#34;).IsZero() // true&#xA;carbon.Parse(&#34;0000-00-00 00:00:00&#34;).IsZero() // true&#xA;carbon.Parse(&#34;0000-00-00&#34;).IsZero() // true&#xA;carbon.Parse(&#34;00:00:00&#34;).IsZero() // true&#xA;carbon.Parse(&#34;2020-08-05 00:00:00&#34;).IsZero() // false&#xA;carbon.Parse(&#34;2020-08-05&#34;).IsZero() // false&#xA;carbon.Parse(&#34;2020-08-05&#34;).SetTimezone(&#34;xxx&#34;).IsZero() // false&#xA;&#xA;// Whether is valid time&#xA;carbon.Parse(&#34;&#34;).IsValid() // false&#xA;carbon.Parse(&#34;0&#34;).IsValid() // false&#xA;carbon.Parse(&#34;0000-00-00 00:00:00&#34;).IsValid() // false&#xA;carbon.Parse(&#34;0000-00-00&#34;).IsValid() // false&#xA;carbon.Parse(&#34;00:00:00&#34;).IsValid() // false&#xA;carbon.Parse(&#34;2020-08-05 00:00:00&#34;).IsValid() // true&#xA;carbon.Parse(&#34;2020-08-05&#34;).IsValid() // true&#xA;carbon.Parse(&#34;2020-08-05&#34;).SetTimezone(&#34;xxx&#34;).IsValid() // false&#xA;&#xA;// Whether is invalid time&#xA;carbon.Parse(&#34;&#34;).IsInvalid() // true&#xA;carbon.Parse(&#34;0&#34;).IsInvalid() // true&#xA;carbon.Parse(&#34;0000-00-00 00:00:00&#34;).IsInvalid() // true&#xA;carbon.Parse(&#34;0000-00-00&#34;).IsInvalid() // true&#xA;carbon.Parse(&#34;00:00:00&#34;).IsInvalid() // true&#xA;carbon.Parse(&#34;2020-08-05 00:00:00&#34;).IsInvalid() // false&#xA;carbon.Parse(&#34;2020-08-05&#34;).IsInvalid() // false&#xA;carbon.Parse(&#34;2020-08-05&#34;).SetTimezone(&#34;xxx&#34;).IsInvalid() // true&#xA;&#xA;// Whether is now time&#xA;carbon.Now().IsNow() // true&#xA;// Whether is future time&#xA;carbon.Tomorrow().IsFuture() // true&#xA;// Whether is pass time&#xA;carbon.Yesterday().IsPast() // true&#xA;&#xA;// Whether is a leap year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsLeapYear() // true&#xA;// Whether is a long year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsLongYear() // true&#xA;&#xA;// Whether is January&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsJanuary() // false&#xA;// Whether is February&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsFebruary() // false&#xA;// Whether is March&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsMarch() // false&#xA;// Whether is April&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsApril()  // false&#xA;// Whether is May&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsMay() // false&#xA;// Whether is June&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsJune() // false&#xA;// Whether is July&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsJuly() // false&#xA;// Whether is August&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsAugust() // false&#xA;// Whether is September&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSeptember() // true&#xA;// Whether is October&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsOctober() // false&#xA;// Whether is November&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsNovember() // false&#xA;// Whether is December&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsDecember() // false&#xA;&#xA;// Whether is Monday&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsMonday() // false&#xA;// Whether is Tuesday&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsTuesday() // true&#xA;// Whether is Wednesday&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsWednesday() // false&#xA;// Whether is Thursday&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsThursday() // false&#xA;// Whether is Friday&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsFriday() // false&#xA;// Whether is Saturday&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSaturday() // false&#xA;// Whether is Sunday&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSunday() // false&#xA;// Whether is weekday&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsWeekday() // false&#xA;// Whether is weekend&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsWeekend() // true&#xA;&#xA;// Whether is yesterday&#xA;carbon.Parse(&#34;2020-08-04 13:14:15&#34;).IsYesterday() // true&#xA;carbon.Parse(&#34;2020-08-04 00:00:00&#34;).IsYesterday() // true&#xA;carbon.Parse(&#34;2020-08-04&#34;).IsYesterday() // true&#xA;// Whether is today&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsToday() // true&#xA;carbon.Parse(&#34;2020-08-05 00:00:00&#34;).IsToday() // true&#xA;carbon.Parse(&#34;2020-08-05&#34;).IsToday() // true&#xA;// Whether is tomorrow&#xA;carbon.Parse(&#34;2020-08-06 13:14:15&#34;).IsTomorrow() // true&#xA;carbon.Parse(&#34;2020-08-06 00:00:00&#34;).IsTomorrow() // true&#xA;carbon.Parse(&#34;2020-08-06&#34;).IsTomorrow() // true&#xA;&#xA;// Whether is same century&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameCentury(carbon.Parse(&#34;3020-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameCentury(carbon.Parse(&#34;2099-08-05 13:14:15&#34;)) // true&#xA;// Whether is same decade&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameDecade(carbon.Parse(&#34;2030-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameDecade(carbon.Parse(&#34;2120-08-05 13:14:15&#34;)) // true&#xA;// Whether is same year&#xA;carbon.Parse(&#34;2020-08-05 00:00:00&#34;).IsSameYear(carbon.Parse(&#34;2021-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-01-01 00:00:00&#34;).IsSameYear(carbon.Parse(&#34;2020-12-31 13:14:15&#34;)) // true&#xA;// Whether is same quarter&#xA;carbon.Parse(&#34;2020-08-05 00:00:00&#34;).IsSameQuarter(carbon.Parse(&#34;2020-09-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-01-01 00:00:00&#34;).IsSameQuarter(carbon.Parse(&#34;2021-01-31 13:14:15&#34;)) // true&#xA;// Whether is same month&#xA;carbon.Parse(&#34;2020-01-01 00:00:00&#34;).IsSameMonth(carbon.Parse(&#34;2021-01-31 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-01-01 00:00:00&#34;).IsSameMonth(carbon.Parse(&#34;2020-01-31 13:14:15&#34;)) // true&#xA;// Whether is same day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameDay(carbon.Parse(&#34;2021-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 00:00:00&#34;).IsSameDay(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;// Whether is same hour&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameHour(carbon.Parse(&#34;2021-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:00:00&#34;).IsSameHour(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;// Whether is same minute&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameMinute(carbon.Parse(&#34;2021-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:00&#34;).IsSameMinute(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;// Whether is same second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameSecond(carbon.Parse(&#34;2021-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSameSecond(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;&#xA;// Whether greater than&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Gt(carbon.Parse(&#34;2020-08-04 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Gt(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;gt;&#34;, carbon.Parse(&#34;2020-08-04 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;gt;&#34;, carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // false&#xA;&#xA;// Whether less than&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lt(carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lt(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;lt;&#34;, carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;lt;&#34;, carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // false&#xA;&#xA;// Whether equal&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Eq(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Eq(carbon.Parse(&#34;2020-08-05 13:14:00&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;=&#34;, carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;=&#34;, carbon.Parse(&#34;2020-08-05 13:14:00&#34;)) // false&#xA;&#xA;// Whether not equal&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Ne(carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Ne(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;!=&#34;, carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;lt;&amp;gt;&#34;, carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // false&#xA;&#xA;// Whether greater than or equal&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Gte(carbon.Parse(&#34;2020-08-04 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Gte(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;gt;=&#34;, carbon.Parse(&#34;2020-08-04 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;gt;=&#34;, carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;&#xA;// Whether less than or equal&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lte(carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lte(carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;lt;=&#34;, carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Compare(&#34;&amp;lt;=&#34;, carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;&#xA;// Whether between two Carbon instances, excluded the start and end Carbon instance&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Between(carbon.Parse(&#34;2020-08-05 13:14:15&#34;), carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // false&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Between(carbon.Parse(&#34;2020-08-04 13:14:15&#34;), carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;&#xA;// Whether between two Carbon instances, included the start Carbon instance&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).BetweenIncludedStart(carbon.Parse(&#34;2020-08-05 13:14:15&#34;), carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).BetweenIncludedStart(carbon.Parse(&#34;2020-08-04 13:14:15&#34;), carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;&#xA;// Whether between two Carbon instances, included the end Carbon instance&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).BetweenIncludedEnd(carbon.Parse(&#34;2020-08-04 13:14:15&#34;), carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).BetweenIncludedEnd(carbon.Parse(&#34;2020-08-04 13:14:15&#34;), carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;&#xA;// Whether between two Carbon instances, included the start and end Carbon instance&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).BetweenIncludedBoth(carbon.Parse(&#34;2020-08-05 13:14:15&#34;), carbon.Parse(&#34;2020-08-06 13:14:15&#34;)) // true&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).BetweenIncludedBoth(carbon.Parse(&#34;2020-08-04 13:14:15&#34;), carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For the definition of long year, please see &lt;a href=&#34;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&#34;&gt;https://en.wikipedia.org/wiki/ISO_8601#Week_dates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Setter&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Set timezone&#xA;carbon.SetTimezone(carbon.PRC).Now().ToDateTimeString() // 2020-08-05 13:14:15&#xA;carbon.SetTimezone(carbon.Tokyo).Now().ToDateTimeString() // 2020-08-05 14:14:15&#xA;carbon.SetTimezone(carbon.Tokyo).Now().SetTimezone(carbon.PRC).ToDateTimeString() // 2020-08-05 12:14:15&#xA;&#xA;// Set location&#xA;utc, _ := time.LoadLocation(carbon.UTC)&#xA;carbon.SetLocation(utc).Now().ToDateTimeString() // 2022-06-28 09:25:38&#xA;tokyo, _ := time.LoadLocation(carbon.Tokyo)&#xA;carbon.SetLocation(tokyo).Now().ToDateTimeString() // 2022-06-28 18:25:38&#xA;&#xA;// Set locale&#xA;carbon.Parse(&#34;2020-07-05 13:14:15&#34;).SetLocale(&#34;en&#34;).DiffForHumans() // 1 month before&#xA;carbon.Parse(&#34;2020-07-05 13:14:15&#34;).SetLocale(&#34;zh-CN&#34;).DiffForHumans() // 1 月前&#xA;&#xA;// Set year, month, day, hour, minute and second&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateTime(2019, 2, 2, 13, 14, 15).ToString() // 2019-02-02 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateTime(2019, 2, 31, 13, 14, 15).ToString() // 2019-03-03 13:14:15 +0800 CST&#xA;// Set year, month, day, hour, minute, second and millisecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateTimeMilli(2019, 2, 2, 13, 14, 15, 999).ToString() // 2019-02-02 13:14:15.999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateTimeMilli(2019, 2, 31, 13, 14, 15, 999).ToString() // 2019-03-03 13:14:15.999 +0800 CST&#xA;// Set year, month, day, hour, minute, second and microsecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateTimeMicro(2019, 2, 2, 13, 14, 15, 999999).ToString() // 2019-02-02 13:14:15.999999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateTimeMicro(2019, 2, 31, 13, 14, 15, 999999).ToString() // 2019-03-03 13:14:15.999999 +0800 CST&#xA;// Set year, month, day, hour, minute, second and nanosecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateTimeNano(2019, 2, 2, 13, 14, 15, 999999999).ToString() // 2019-02-02 13:14:15.999999999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateTimeNano(2019, 2, 31, 13, 14, 15, 999999999).ToString() // 2019-03-03 13:14:15.999999999 +0800 CST&#xA;&#xA;// Set year, month and day&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDate(2019, 2, 2).ToString() // 2019-02-02 00:00:00 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDate(2019, 2, 31).ToString() // 2019-03-03 00:00:00 +0800 CST&#xA;// Set year, month, day and millisecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateMilli(2019, 2, 2, 999).ToString() // 2019-02-02 00:00:00.999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateMilli(2019, 2, 31, 999).ToString() // 2019-03-03 00:00:00.999 +0800 CST&#xA;// Set year, month, day and microsecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateMicro(2019, 2, 2, 999999).ToString() // 2019-02-02 00:00:00.999999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateMicro(2019, 2, 31, 999999).ToString() // 2019-03-03 00:00:00.999999 +0800 CST&#xA;// Set year, month, day and nanosecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateNano(2019, 2, 2, 999999999).ToString() // 2019-02-02 00:00:00.999999999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetDateNano(2019, 2, 31, 999999999).ToString() // 2019-03-03 00:00:00.999999999 +0800 CST&#xA;&#xA;// Set hour, minute and second&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetTime(13, 14, 15).ToString() // 2020-01-01 13:14:15 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetTime(13, 14, 90).ToString() // 2020-01-01 13:15:30 +0800 CST&#xA;// Set hour, minute, second and millisecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetTimeMilli(13, 14, 15, 999).ToString() // 2020-01-01 13:14:15.999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetTimeMilli(13, 14, 90, 999).ToString() // 2020-01-01 13:15:30.999 +0800 CST&#xA;// Set hour, minute, second and microsecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetTimeMicro(13, 14, 15, 999999).ToString() // 2020-01-01 13:14:15.999999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetTimeMicro(13, 14, 90, 999999).ToString() // 2020-01-01 13:15:30.999999 +0800 CST&#xA;// Set hour, minute, second and nanosecond&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetTimeNano(13, 14, 15, 999999999).ToString() // 2020-01-01 13:14:15.999999999 +0800 CST&#xA;carbon.Parse(&#34;2020-01-01&#34;).SetTimeNano(13, 14, 90, 999999999).ToString() // 2020-01-01 13:15:30.999999999 +0800 CST&#xA;&#xA;// Set year&#xA;carbon.Parse(&#34;2020-02-29&#34;).SetYear(2021).ToDateString() // 2021-03-01&#xA;// Set year without overflowing month&#xA;carbon.Parse(&#34;2020-02-29&#34;).SetYearNoOverflow(2021).ToDateString() // 2021-02-28&#xA;&#xA;// Set month&#xA;carbon.Parse(&#34;2020-01-31&#34;).SetMonth(2).ToDateString() // 2020-03-02&#xA;// Set month without overflowing month&#xA;carbon.Parse(&#34;2020-01-31&#34;).SetMonthNoOverflow(2).ToDateString() // 2020-02-29&#xA;&#xA;// Set start day of the week&#xA;carbon.Parse(&#34;2020-08-02&#34;).SetWeekStartsAt(carbon.Sunday).Week() // 0&#xA;carbon.Parse(&#34;2020-08-02&#34;).SetWeekStartsAt(carbon.Monday).Week() // 6&#xA;&#xA;// Set day&#xA;carbon.Parse(&#34;2019-08-05&#34;).SetDay(31).ToDateString() // 2020-08-31&#xA;carbon.Parse(&#34;2020-02-01&#34;).SetDay(31).ToDateString() // 2020-03-02&#xA;&#xA;// Set hour&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetHour(10).ToDateTimeString() // 2020-08-05 10:14:15&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetHour(24).ToDateTimeString() // 2020-08-06 00:14:15&#xA;&#xA;// Set minute&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetMinute(10).ToDateTimeString() // 2020-08-05 13:10:15&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetMinute(60).ToDateTimeString() // 2020-08-05 14:00:15&#xA;&#xA;// Set second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetSecond(10).ToDateTimeString() // 2020-08-05 13:14:10&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetSecond(60).ToDateTimeString() // 2020-08-05 13:15:00&#xA;&#xA;// Set millisecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetMillisecond(100).Millisecond() // 100&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetMillisecond(999).Millisecond() // 999&#xA;&#xA;// Set microsecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetMicrosecond(100000).Microsecond() // 100000&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetMicrosecond(999999).Microsecond() // 999999&#xA;&#xA;// Set nanosecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetNanosecond(100000000).Nanosecond() // 100000000&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).SetNanosecond(999999999).Nanosecond() // 999999999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Getter&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get total days of the year&#xA;carbon.Parse(&#34;2019-08-05 13:14:15&#34;).DaysInYear() // 365&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DaysInYear() // 366&#xA;// Get total days of the month&#xA;carbon.Parse(&#34;2020-02-01 13:14:15&#34;).DaysInMonth() // 29&#xA;carbon.Parse(&#34;2020-04-01 13:14:15&#34;).DaysInMonth() // 30&#xA;carbon.Parse(&#34;2020-08-01 13:14:15&#34;).DaysInMonth() // 31&#xA;&#xA;// Get day of the year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DayOfYear() // 218&#xA;// Get week of the year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).WeekOfYear() // 32&#xA;// Get day of the month&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DayOfMonth() // 5&#xA;// Get week of the month&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).WeekOfMonth() // 1&#xA;// Get day of the week&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DayOfWeek() // 3&#xA;&#xA;// Get current year, month, day, hour, minute and second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DateTime() // 2020,8,5,13,14,15&#xA;// Get current year, month, day, hour, minute, second and millisecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DateTimeMilli() // 2020,8,5,13,14,15,999&#xA;// Get current year, month, day, hour, minute, second and microsecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DateTimeMicro() // 2020,8,5,13,14,15,999999&#xA;// Get current year, month, day, hour, minute, second and nanosecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).DateTimeNano() // 2020,8,5,13,14,15,999999999&#xA;&#xA;// Get current year, month and day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).Date() // 2020,8,5&#xA;// Get current year, month, day and millisecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).DateMilli() // 2020,8,5,999&#xA;// Get current year, month, day and microsecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).DateMicro() // 2020,8,5,999999&#xA;// Get current year, month, day and nanosecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).DateNano() // 2020,8,5,999999999&#xA;&#xA;// Get current hour, minute and second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).Time() // 13,14,15&#xA;// Get current hour, minute ,second and millisecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).TimeMilli() // 13,14,15,999&#xA;// Get current hour, minute ,second and microsecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).TimeMicro() // 13,14,15,999999&#xA;// Get current hour, minute ,second and nanosecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).TimeNano() // 13,14,15,999999999&#xA;&#xA;// Get current century&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Century() // 21&#xA;// Get current decade&#xA;carbon.Parse(&#34;2019-08-05 13:14:15&#34;).Decade() // 10&#xA;carbon.Parse(&#34;2021-08-05 13:14:15&#34;).Decade() // 20&#xA;// Get current year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Year() // 2020&#xA;// Get current quarter&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Quarter() // 3&#xA;// Get current month&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Month() // 8&#xA;// Get current week(start from 0)&#xA;carbon.Parse(&#34;2020-08-02 13:14:15&#34;).Week() // 0&#xA;carbon.Parse(&#34;2020-08-02&#34;).SetWeekStartsAt(carbon.Sunday).Week() // 0&#xA;carbon.Parse(&#34;2020-08-02&#34;).SetWeekStartsAt(carbon.Monday).Week() // 6&#xA;// Get current day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Day() // 5&#xA;// Get current hour&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Hour() // 13&#xA;// Get current minute&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Minute() // 14&#xA;// Get current second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Second() // 15&#xA;// Get current millisecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999&#34;).Millisecond() // 999&#xA;// Get current microsecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999&#34;).Microsecond() // 999000&#xA;// Get current nanosecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999&#34;).Nanosecond() // 999000000&#xA;&#xA;// Get timestamp with second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Timestamp() // 1596604455&#xA;// Get timestamp with millisecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).TimestampMilli() // 1596604455000&#xA;// Get timestamp with microsecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).TimestampMicro() // 1596604455000000&#xA;// Get timestamp with nanosecond&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).TimestampNano() // 1596604455000000000&#xA;&#xA;// Get timezone name&#xA;carbon.SetTimezone(carbon.PRC).Timezone() // CST&#xA;carbon.SetTimezone(carbon.Tokyo).Timezone() // JST&#xA;&#xA;// Get location name&#xA;carbon.SetTimezone(carbon.PRC).Location() // PRC&#xA;carbon.SetTimezone(carbon.Tokyo).Location() // Asia/Tokyo&#xA;&#xA;// Get offset seconds from the UTC timezone&#xA;carbon.SetTimezone(carbon.PRC).Offset() // 28800&#xA;carbon.SetTimezone(carbon.Tokyo).Offset() // 32400&#xA;&#xA;// Get locale name&#xA;carbon.Now().SetLocale(&#34;en&#34;).Locale() // en&#xA;carbon.Now().SetLocale(&#34;zh-CN&#34;).Locale() // zh-CN&#xA;&#xA;// Get constellation name&#xA;carbon.Now().Constellation() // Leo&#xA;carbon.Now().SetLocale(&#34;en&#34;).Constellation() // Leo&#xA;carbon.Now().SetLocale(&#34;zh-CN&#34;).Constellation() // 狮子座&#xA;&#xA;// Get season name&#xA;carbon.Now().Season() // Summer&#xA;carbon.Now().SetLocale(&#34;en&#34;).Season() // Summer&#xA;carbon.Now().SetLocale(&#34;zh-CN&#34;).Season() // 夏季&#xA;&#xA;// Get current age&#xA;carbon.Parse(&#34;2002-01-01 13:14:15&#34;).Age() // 17&#xA;carbon.Parse(&#34;2002-12-31 13:14:15&#34;).Age() // 18&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Output&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Output string with date and time format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToDateTimeString() // 2020-08-05 13:14:15&#xA;// Output string with date and time with millisecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToDateTimeMilliString() // 2020-08-05 13:14:15.999&#xA;// Output string with date and time with microsecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToDateTimeMicroString() // 2020-08-05 13:14:15.999999&#xA;// Output string with date and time with nanosecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToDateTimeNanoString() // 2020-08-05 13:14:15.999999999&#xA;&#xA;// Output string with short date and time format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToShortDateTimeString() // 20200805131415&#xA;// Output string with short date and time with millisecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToShortDateTimeMilliString() // 20200805131415.999&#xA;// Output string with short date and time with microsecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToShortDateTimeMicroString() // 20200805131415.999999&#xA;// Output string with short date and time with nanosecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToShortDateTimeNanoString() // 20200805131415.999999999&#xA;&#xA;// Output string with date format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToDateString() // 2020-08-05&#xA;// Output string with date with millisecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToDateMilliString() // 2020-08-05.999&#xA;// Output string with date with microsecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToDateMicroString() // 2020-08-05.999999&#xA;// Output string with date with nanosecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToDateNanoString() // 2020-08-05.999999999&#xA;&#xA;// Output string with short date format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToShortDateString() // 20200805&#xA;// Output string with short date with millisecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToShortDateMilliString() // 20200805.999&#xA;// Output string with short date with microsecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToShortDateMicroString() // 20200805.999999&#xA;// Output string with short date with nanosecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToShortDateNanoString() // 20200805.999999999&#xA;&#xA;// Output string with time format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToTimeString() // 13:14:15&#xA;// Output string with time with millisecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToTimeMilliString() // 13:14:15.999&#xA;// Output string with time with microsecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToTimeMicroString() // 13:14:15.999999&#xA;// Output string with time with nanosecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToTimeNanoString() // 13:14:15.999999999&#xA;&#xA;// Output string with short time format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToShortTimeString() // 131415&#xA;// Output string with short time with millisecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToShortTimeMilliString() // 131415.999&#xA;// Output a string with short time with microsecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToShortTimeMicroString() // 131415.999999&#xA;// Output a string with short time with nanosecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToShortTimeNanoString() // 131415.999999999&#xA;&#xA;// Output string with ANSIC format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToANSICString() // Wed Aug  5 13:14:15 2020&#xA;// Output string with Atom format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToAtomString() // 2020-08-05T13:14:15+08:00&#xA;// Output string with unix date format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToUnixDateString() // Wed Aug  5 13:14:15 CST 2020&#xA;// Output string with ruby date format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRubyDateString() // Wed Aug 05 13:14:15 +0800 2020&#xA;// Output string with Kitchen format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToKitchenString() // 1:14PM&#xA;// Output string with Cookie format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToCookieString() // Wednesday, 05-Aug-2020 13:14:15 CST&#xA;// Output string with day, date and time format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToDayDateTimeString() // Wed, Aug 5, 2020 1:14 PM&#xA;// Output string with RSS format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRssString() // Wed, 05 Aug 2020 13:14:15 +0800&#xA;// Output string with W3C format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToW3cString() // 2020-08-05T13:14:15+08:00&#xA;&#xA;// Output string with ISO8601 format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToIso8601String() // 2020-08-05T13:14:15+08:00&#xA;// Output string with ISO8601 with millisecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToIso8601MilliString() // 2020-08-05T13:14:15.999+08:00&#xA;// Output string with ISO8601 with microsecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToIso8601MicroString() // 2020-08-05T13:14:15.999999+08:00&#xA;// Output string with ISO8601 with nanosecond format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15.999999999&#34;).ToIso8601NanoString() // 2020-08-05T13:14:15.999999999+08:00&#xA;&#xA;// Output string with RFC822 format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRfc822String() // 05 Aug 20 13:14 CST&#xA;// Output string with RFC822Z format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRfc822zString() // 05 Aug 20 13:14 +0800&#xA;// Output string with RFC850 format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRfc850String() // Wednesday, 05-Aug-20 13:14:15 CST&#xA;// Output string with RFC1036 format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRfc1036String() // Wed, 05 Aug 20 13:14:15 +0800&#xA;// Output string with RFC1123 format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRfc1123String() // Wed, 05 Aug 2020 13:14:15 CST&#xA;// Output string with RFC1123Z format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRfc1123zString() // Wed, 05 Aug 2020 13:14:15 +0800&#xA;// Output string with RFC2822 format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRfc2822String() // Wed, 05 Aug 2020 13:14:15 +0800&#xA;// Output string with RFC7231 format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToRfc7231String() // Wed, 05 Aug 2020 13:14:15 GMT&#xA;&#xA;// Output string with RFC3339 format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToRfc3339String() // 2020-08-05T13:14:15+08:00&#xA;// Output string with RFC3339 with millisecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToRfc3339MilliString() // 2020-08-05T13:14:15.999+08:00&#xA;// Output string with RFC3339 with microsecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToRfc3339MicroString() // 2020-08-05T13:14:15.999999+08:00&#xA;// Output string with RFC3339 with nanosecond format&#xA;carbon.Parse(&#34;2020-08-05T13:14:15.999999999+08:00&#34;).ToRfc3339NanoString() // 2020-08-05T13:14:15.999999999+08:00&#xA;&#xA;// Output string with date and time format&#xA;fmt.Sprintf(&#34;%s&#34;, carbon.Parse(&#34;2020-08-05 13:14:15&#34;)) // 2020-08-05 13:14:15&#xA;&#xA;// Output string with &#34;2006-01-02 15:04:05.999999999 -0700 MST&#34; format&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).ToString() // 2020-08-05 13:14:15.999999 +0800 CST&#xA;&#xA;// Output string by layout, Layout() is shorthand for ToLayoutString()&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Layout(carbon.ISO8601Layout) // 2020-08-05T13:14:15+08:00&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Layout(&#34;20060102150405&#34;) // 20200805131415&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Layout(&#34;2006年01月02日 15时04分05秒&#34;) // 2020年08月05日 13时14分15秒&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Layout(&#34;It is 2006-01-02 15:04:05&#34;) // It is 2020-08-05 13:14:15&#xA;&#xA;// Output string by format, Format() is shorthand for ToFormatString()&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Format(&#34;YmdHis&#34;) // 20200805131415&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Format(&#34;Y年m月d日 H时i分s秒&#34;) // 2020年08月05日 13时14分15秒&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Format(&#34;l jS \\o\\f F Y h:i:s A&#34;) // Wednesday 5th of August 2020 01:14:15 PM&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Format(&#34;\\I\\t \\i\\s Y-m-d H:i:s&#34;) // It is 2020-08-05 13:14:15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more supported format signs, please see the &lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/#format-sign-table&#34;&gt;Format sign table&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Constellation&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get constellation name&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Constellation() // Leo&#xA;&#xA;// Whether is Aries&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsAries() // false&#xA;// Whether is Taurus&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsTaurus() // false&#xA;// Whether is Gemini&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsGemini() // false&#xA;// Whether is Cancer&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsCancer() // false&#xA;// Whether is Leo&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsLeo() // true&#xA;// Whether is Virgo&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsVirgo() // false&#xA;// Whether is Libra&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsLibra() // false&#xA;// Whether is Scorpio&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsScorpio() // false&#xA;// Whether is Sagittarius&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSagittarius() // false&#xA;// Whether is Capricorn&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsCapricorn() // false&#xA;// Whether is Aquarius&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsAquarius() // false&#xA;// Whether is Pisces&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsPisces() // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Season&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;According to the meteorological division method, March to May is spring, June to August is summer, September to November is autumn, and December to February is winter&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get season name&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Season() // Summer&#xA;&#xA;// Start of the season&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).StartOfSeason().ToDateTimeString() // 2020-06-01 00:00:00&#xA;// End of the season&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).EndOfSeason().ToDateTimeString() // 2020-08-31 23:59:59&#xA;&#xA;// Whether is spring&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSpring() // false&#xA;// Whether is summer&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsSummer() // true&#xA;// Whether is autumn&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsAutumn() // false&#xA;// Whether is winter&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).IsWinter() // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Chinese Lunar&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Currently only &lt;code&gt;200&lt;/code&gt; years from &lt;code&gt;1900&lt;/code&gt; to &lt;code&gt;2100&lt;/code&gt; are supported&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Get Chinese Lunar year of animal&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().Animal() // 鼠&#xA;&#xA;// Get Chinese lunar festival&#xA;carbon.Parse(&#34;2021-02-12 13:14:15&#34;).Lunar().Festival() // 春节&#xA;&#xA;// Get Chinese lunar year, month, day, hour, minute and second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().DateTime() // 2020, 6, 16, 13, 14, 15&#xA;// Get Chinese lunar year, month and day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().Date() // 2020, 6, 16&#xA;// Get Chinese lunar hour, minute and second&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().Time() // 13, 14, 15&#xA;&#xA;// Get Chinese lunar year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().Year() // 2020&#xA;// Get Chinese lunar month&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().Month() // 6&#xA;// Get Chinese lunar leap month&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().LeapMonth() // 4&#xA;// Get Chinese lunar day&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().Day() // 16&#xA;// Get Chinese lunar date as string with YYYY-MM-DD HH::ii::ss format&#xA;fmt.Sprintf(&#34;%s&#34;, carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar()) // 2020-06-16 13:14:15&#xA;&#xA;// Get Chinese lunar year as string&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().ToYearString() // 二零二零&#xA;// Get Chinese lunar month as string&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().ToMonthString() // 六月&#xA;// Get Chinese lunar day as string&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().ToDayString() // 十六&#xA;// Get Chinese lunar date as string&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().ToDateString() // 二零二零年六月十六&#xA;&#xA;// Whether is a leap year&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsLeapYear() // true&#xA;// Whether is a leap month&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsLeapMonth() // false&#xA;&#xA;// Whether is a year of the rat&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsRatYear() // true&#xA;// Whether is a year of the ox&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsOxYear() // false&#xA;// Whether is a year of the tiger&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsTigerYear() // false&#xA;// Whether is a year of the rabbit&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsRabbitYear() // false&#xA;// Whether is a year of the dragon&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsDragonYear() // false&#xA;// Whether is a year of the snake&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsSnakeYear() // false&#xA;// Whether is a year of the horse&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsHorseYear() // false&#xA;// Whether is a year of the goat&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsGoatYear() // false&#xA;// Whether is a year of the monkey&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsMonkeyYear() // false&#xA;// Whether is a year of the rooster&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsRoosterYear() // false&#xA;// Whether is a year of the dog&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsDogYear() // false&#xA;// Whether is a year of the dig&#xA;carbon.Parse(&#34;2020-08-05 13:14:15&#34;).Lunar().IsPigYear() // false&#xA;&#xA;// Get Chinese double-hour&#xA;carbon.Parse(&#34;2020-02-05 21:00:00&#34;).Lunar().DoubleHour() // 亥时&#xA;&#xA;// Whether is FirstDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 00:00:00&#34;).Lunar().IsFirstDoubleHour() // true&#xA;// Whether is SecondDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 01:00:00&#34;).Lunar().IsSecondDoubleHour() // true&#xA;// Whether is ThirdDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 03:00:00&#34;).Lunar().IsThirdDoubleHour() // true&#xA;// Whether is FourthDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 05:00:00&#34;).Lunar().IsFourthDoubleHour() // true&#xA;// Whether is FifthDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 07:00:00&#34;).Lunar().IsFifthDoubleHour() // true&#xA;// Whether is SixthDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 09:00:00&#34;).Lunar().IsSixthDoubleHour() // true&#xA;// Whether is SeventhDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 11:00:00&#34;).Lunar().IsSeventhDoubleHour() // true&#xA;// Whether is EighthDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 13:00:00&#34;).Lunar().IsEighthDoubleHour() // true&#xA;// Whether is NinthDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 15:00:00&#34;).Lunar().IsNinthDoubleHour() // true&#xA;// Whether is TenthDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 17:00:00&#34;).Lunar().IsTenthDoubleHour() // true&#xA;// Whether is EleventhDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 19:00:00&#34;).Lunar().IsEleventhDoubleHour() // true&#xA;// Whether is TwelfthDoubleHour&#xA;carbon.Parse(&#34;2020-03-21 21:00:00&#34;).Lunar().IsTwelfthDoubleHour() // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;JSON handling&lt;/h5&gt; &#xA;&lt;h6&gt;Define model&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Person struct {&#xA;&#x9;Name string `json:&#34;name&#34;`&#xA;&#x9;Age int `json:&#34;age&#34;`&#xA;&#x9;Birthday1 carbon.DateTime `json:&#34;birthday&#34;`&#xA;&#x9;Birthday2 carbon.DateTimeMilli `json:&#34;birthday&#34;`&#xA;&#x9;Birthday3 carbon.DateTimeMicro `json:&#34;birthday&#34;`&#xA;&#x9;Birthday4 carbon.DateTimeNano `json:&#34;birthday&#34;`&#xA;&#x9;GraduatedAt1 carbon.Date `json:&#34;graduated_at&#34;`&#xA;&#x9;GraduatedAt2 carbon.DateMilli `json:&#34;graduated_at&#34;`&#xA;&#x9;GraduatedAt3 carbon.DateMicro `json:&#34;graduated_at&#34;`&#xA;&#x9;GraduatedAt4 carbon.DateNano `json:&#34;graduated_at&#34;`&#xA;&#x9;CreatedAt1 carbon.Timestamp `json:&#34;created_at1&#34;`&#xA;&#x9;CreatedAt2 carbon.TimestampMilli `json:&#34;created_at2&#34;`&#xA;&#x9;CreatedAt3 carbon.TimestampMicro `json:&#34;created_at3&#34;`&#xA;&#x9;CreatedAt4 carbon.TimestampNano `json:&#34;created_at4&#34;`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Instantiate model&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;person := Person {&#xA;&#x9;Name:        &#34;gouguoyin&#34;,&#xA;&#x9;Age:          18,&#xA;&#x9;Birthday1:    carbon.DateTime{carbon.Now().SubYears(18)},&#xA;&#x9;Birthday2:    carbon.DateTime{carbon.Now().SubYears(18)},&#xA;&#x9;Birthday3:    carbon.DateTime{carbon.Now().SubYears(18)},&#xA;&#x9;Birthday4:    carbon.DateTime{carbon.Now().SubYears(18)},&#xA;&#x9;GraduatedAt1: carbon.Date{carbon.Now()},&#xA;&#x9;GraduatedAt2: carbon.Date{carbon.Now()},&#xA;&#x9;GraduatedAt3: carbon.Date{carbon.Now()},&#xA;&#x9;GraduatedAt4: carbon.Date{carbon.Now()},&#xA;&#x9;CreatedAt1:   carbon.Timestamp{carbon.Now()},&#xA;&#x9;CreatedAt2:   carbon.TimestampMilli{carbon.Now()},&#xA;&#x9;CreatedAt3:   carbon.TimestampMicro{carbon.Now()},&#xA;&#x9;CreatedAt4:   carbon.TimestampNano{carbon.Now()},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;JSON encode&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;data, err := json.Marshal(&amp;amp;person)&#xA;if err != nil {&#xA;    // Error handle...&#xA;    log.Fatal(err)&#xA;}&#xA;fmt.Printf(&#34;%s&#34;, data)&#xA;// Output&#xA;{&#xA;&#x9;&#34;name&#34;: &#34;gouguoyin&#34;,&#xA;&#x9;&#34;age&#34;: 18,&#xA;&#x9;&#34;birthday1&#34;: &#34;2003-07-16 16:22:02&#34;,&#xA;&#x9;&#34;birthday2&#34;: &#34;2003-07-16 16:22:02.999&#34;,&#xA;&#x9;&#34;birthday3&#34;: &#34;2003-07-16 16:22:02.999999&#34;,&#xA;&#x9;&#34;birthday4&#34;: &#34;2003-07-16 16:22:02.999999999&#34;,&#xA;&#x9;&#34;graduated_at1&#34;: &#34;2020-08-05&#34;,&#xA;&#x9;&#34;graduated_at2&#34;: &#34;2020-08-05.999&#34;,&#xA;&#x9;&#34;graduated_at3&#34;: &#34;2020-08-05.999999&#34;,&#xA;&#x9;&#34;graduated_at4&#34;: &#34;2020-08-05.999999999&#34;,&#xA;&#x9;&#34;created_at1&#34;: 1596604455,&#xA;&#x9;&#34;created_at2&#34;: 1596604455999,&#xA;&#x9;&#34;created_at3&#34;: 1596604455999999,&#xA;&#x9;&#34;created_at4&#34;: 1596604455999999999&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;JSON decode&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;str := `{&#xA;&#x9;&#34;name&#34;: &#34;gouguoyin&#34;,&#xA;&#x9;&#34;age&#34;: 18,&#xA;&#x9;&#34;birthday1&#34;: &#34;2003-07-16 16:22:02&#34;,&#xA;&#x9;&#34;birthday2&#34;: &#34;2003-07-16 16:22:02.999&#34;,&#xA;&#x9;&#34;birthday3&#34;: &#34;2003-07-16 16:22:02.999999&#34;,&#xA;&#x9;&#34;birthday4&#34;: &#34;2003-07-16 16:22:02.999999999&#34;,&#xA;&#x9;&#34;graduated_at1&#34;: &#34;2020-08-05&#34;,&#xA;&#x9;&#34;graduated_at2&#34;: &#34;2020-08-05.999&#34;,&#xA;&#x9;&#34;graduated_at3&#34;: &#34;2020-08-05.999999&#34;,&#xA;&#x9;&#34;graduated_at4&#34;: &#34;2020-08-05.999999999&#34;,&#xA;&#x9;&#34;created_at1&#34;: 1596604455,&#xA;&#x9;&#34;created_at2&#34;: 1596604455999,&#xA;&#x9;&#34;created_at3&#34;: 1596604455999999,&#xA;&#x9;&#34;created_at4&#34;: 1596604455999999999&#xA;}`&#xA;person := new(Person)&#xA;err := json.Unmarshal([]byte(str), &amp;amp;person)&#xA;if err != nil {&#xA;    // Error handle...&#xA;    log.Fatal(err)&#xA;}&#xA;fmt.Printf(&#34;%+v&#34;, *person)&#xA;// Output&#xA;{Name:gouguoyin Age:18 Birthday1:2003-07-16 16:22:02 Birthday2:2003-07-16 16:22:02.999 Birthday3:2003-07-16 16:22:02.999999 Birthday4:2003-07-16 16:22:02.999999999 GraduatedAt1:2020-08-05 GraduatedAt2:2020-08-05.999 GraduatedAt3:2020-08-05.999999 GraduatedAt4:2020-08-05.999999999 CreatedAt1:2020-08-05 13:14:15 CreatedAt2:2020-08-05 13:14:15.999 CreatedAt3:2020-08-05 13:14:15.999999 CreatedAt4:2020-08-05 13:14:15.999999999}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;I18n&lt;/h5&gt; &#xA;&lt;p&gt;The following languages are supported&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/en.json&#34; title=&#34;English&#34;&gt;English(en)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/jp.json&#34; title=&#34;Japanese&#34;&gt;Japanese(jp)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/kr.json&#34; title=&#34;Korean&#34;&gt;Korean(kr)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/de.json&#34; title=&#34;German&#34;&gt;German(de)&lt;/a&gt;：translated by &lt;a href=&#34;https://github.com/benzammour&#34; title=&#34;benzammour&#34;&gt;benzammour&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/zh-CN.json&#34; title=&#34;Simplified Chinese&#34;&gt;Simplified Chinese(zh-CN)&lt;/a&gt;：translated by &lt;a href=&#34;https://github.com/gouguoyin&#34; title=&#34;gouguoyin&#34;&gt;gouguoyin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/zh-TW.json&#34; title=&#34;Traditional Chinese&#34;&gt;Traditional Chinese(zh-TW)&lt;/a&gt;：translated by &lt;a href=&#34;https://github.com/gouguoyin&#34; title=&#34;gouguoyin&#34;&gt;gouguoyin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/es.json&#34; title=&#34;Spanish&#34;&gt;Spanish(es)&lt;/a&gt;：translated by &lt;a href=&#34;https://github.com/hgisinger&#34; title=&#34;hgisinger&#34;&gt;hgisinger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/tr.json&#34; title=&#34;Turkish&#34;&gt;Turkish(tr)&lt;/a&gt;: translated by &lt;a href=&#34;https://github.com/emresenyuva&#34; title=&#34;emresenyuva&#34;&gt;emresenyuva&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/pt.json&#34; title=&#34;Portuguese&#34;&gt;Portuguese(pt)&lt;/a&gt;: translated by &lt;a href=&#34;https://github.com/felipear89&#34; title=&#34;felipear89&#34;&gt;felipear89&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/ru.json&#34; title=&#34;Russian&#34;&gt;Russian(ru)&lt;/a&gt;: translated by &lt;a href=&#34;https://github.com/zemlyak&#34; title=&#34;zemlyak&#34;&gt;zemlyak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/uk.json&#34; title=&#34;Ukrainian&#34;&gt;Ukrainian(uk)&lt;/a&gt;: translated by &lt;a href=&#34;https://github.com/open-git&#34; title=&#34;open-git&#34;&gt;open-git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/ro.json&#34; title=&#34;Romanian&#34;&gt;Romanian(ro)&lt;/a&gt;: translated by &lt;a href=&#34;https://github.com/DrOctavius&#34; title=&#34;DrOctavius&#34;&gt;DrOctavius&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang-module/carbon/master/lang/id.json&#34; title=&#34;Indonesian&#34;&gt;Indonesian(id)&lt;/a&gt;: translated by &lt;a href=&#34;https://github.com/justpoypoy&#34; title=&#34;justpoypoy&#34;&gt;justpoypoy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following methods are supported&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Constellation()&lt;/code&gt;：get constellation name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Season()&lt;/code&gt;：get season name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DiffForHumans()&lt;/code&gt;：get the difference with human-readable format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ToMonthString()&lt;/code&gt;：output string with month format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ToShortMonthString()&lt;/code&gt;：output string with short month format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ToWeekString()&lt;/code&gt;：output string with week format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ToShortWeekString()&lt;/code&gt;：output string with short week format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Set locale&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lang := carbon.NewLanguage()&#xA;lang.SetLocale(&#34;en&#34;)&#xA;&#xA;c := carbon.SetLanguage(lang)&#xA;if c.Error != nil {&#xA;    // Error handle...&#xA;    log.Fatal(err)&#xA;}&#xA;&#xA;c.Now().AddHours(1).DiffForHumans() // 1 hour from now&#xA;c.Now().AddHours(1).ToMonthString() // August&#xA;c.Now().AddHours(1).ToShortMonthString() // Aug&#xA;c.Now().AddHours(1).ToWeekString() // Wednesday&#xA;c.Now().AddHours(1).ToShortWeekString() // Wed&#xA;c.Now().AddHours(1).Constellation() // Leo&#xA;c.Now().AddHours(1).Season() // Summer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Reset some resources(the rests still translate from the given locale)&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lang := carbon.NewLanguage()&#xA;lang.SetLocale(&#34;en&#34;)&#xA;&#xA;resources := map[string]string {&#xA;    &#34;hour&#34;: &#34;%dh&#34;,&#xA;}&#xA;lang.SetResources(resources)&#xA;&#xA;c := carbon.SetLanguage(lang)&#xA;if c.Error != nil {&#xA;&#x9;// Error handle...&#xA;&#x9;log.Fatal(err)&#xA;}&#xA;&#xA;c.Now().AddYears(1).DiffForHumans() // 1 year from now&#xA;c.Now().AddHours(1).DiffForHumans() // 1h from now&#xA;c.Now().ToMonthString() // August&#xA;c.Now().ToShortMonthString() // Aug&#xA;c.Now().ToWeekString() // Tuesday&#xA;c.Now().ToShortWeekString() // Tue&#xA;c.Now().Constellation() // Leo&#xA;c.Now().Season() // Summer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Reset all resources&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lang := carbon.NewLanguage()&#xA;resources := map[string]string {&#xA;&#x9;&#34;months&#34;: &#34;january|february|march|april|may|june|july|august|september|october|november|december&#34;,&#xA;&#x9;&#34;short_months&#34;: &#34;jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec&#34;,&#xA;&#x9;&#34;weeks&#34;: &#34;sunday|monday|tuesday|wednesday|thursday|friday|saturday&#34;,&#xA;&#x9;&#34;short_weeks&#34;: &#34;sun|mon|tue|wed|thu|fri|sat&#34;,&#xA;&#x9;&#34;seasons&#34;: &#34;spring|summer|autumn|winter&#34;,&#xA;&#x9;&#34;constellations&#34;: &#34;aries|taurus|gemini|cancer|leo|virgo|libra|scorpio|sagittarius|capricornus|aquarius|pisce&#34;,&#xA;&#x9;&#34;year&#34;: &#34;1 yr|%d yrs&#34;,&#xA;&#x9;&#34;month&#34;: &#34;1 mo|%d mos&#34;,&#xA;&#x9;&#34;week&#34;: &#34;%dw&#34;,&#xA;&#x9;&#34;day&#34;: &#34;%dd&#34;,&#xA;&#x9;&#34;hour&#34;: &#34;%dh&#34;,&#xA;&#x9;&#34;minute&#34;: &#34;%dm&#34;,&#xA;&#x9;&#34;second&#34;: &#34;%ds&#34;,&#xA;&#x9;&#34;now&#34;: &#34;just now&#34;,&#xA;&#x9;&#34;ago&#34;: &#34;%s ago&#34;,&#xA;&#x9;&#34;from_now&#34;: &#34;in %s&#34;,&#xA;&#x9;&#34;before&#34;: &#34;%s before&#34;,&#xA;&#x9;&#34;after&#34;: &#34;%s after&#34;,&#xA;}&#xA;lang.SetResources(resources)&#xA;&#xA;c := carbon.SetLanguage(lang)&#xA;c.Now().AddYears(1).DiffForHumans() // in 1 yr&#xA;c.Now().AddHours(1).DiffForHumans() // in 1h&#xA;c.Now().ToMonthString() // august&#xA;c.Now().ToShortMonthString() // aug&#xA;c.Now().ToWeekString() // tuesday&#xA;c.Now().ToShortWeekString() // tue&#xA;c.Now().Constellation() // leo&#xA;c.Now().Season() // summer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Error handling&lt;/h5&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If more than one error occurs, only the first error is returned&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;c := carbon.SetTimezone(&#34;xxx&#34;).Parse(&#34;2020-08-05&#34;)&#xA;if c.Error != nil {&#xA;    // Error handle...&#xA;    log.Fatal(c.Error)&#xA;}&#xA;fmt.Println(c.ToDateTimeString())&#xA;// Output&#xA;invalid timezone &#34;xxx&#34;, please see the file &#34;$GOROOT/lib/time/zoneinfo.zip&#34; for all valid timezones&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Appendix&lt;/h4&gt; &#xA;&lt;h5&gt;&lt;a id=&#34;format-sign-table&#34;&gt;Format sign table&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;sign&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;desc&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;length&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;range&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;d&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Day of the month, padded to 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;01-31&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;02&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;D&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Day of the week, as an abbreviate localized string&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mon-Sun&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;j&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Day of the month, no padding&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1-31&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;S&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;English ordinal suffix for the day of the month, 2 characters. Eg: st, nd, rd or th. Works well with j&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;st/nd/rd/th&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;th&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;l&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Day of the week, as an unabbreviated localized string&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Monday-Sunday&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Monday&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;F&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Month as an unabbreviated localized string&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;January-December&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;January&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;m&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Month, padded to 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;01-12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;M&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Month as an abbreviated localized string&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jan-Dec&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jan&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Month, no padding&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1-12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Four-digit year&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0000-9999&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2006&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;y&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Two-digit year&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00-99&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;06&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;a&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Lowercase morning or afternoon sign&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;am/pm&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;pm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Uppercase morning or afternoon sign&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;AM/PM&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;PM&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;g&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hour in 12-hour format, no padding&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1-12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;G&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hour in 24-hour format, no padding&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0-23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;h&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hour in 12-hour format, padded to 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00-11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;03&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;H&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Hour in 24-hour format, padded to 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;00-23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;i&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Minute, padded to 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;01-59&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;04&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;s&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Second, padded to 2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;01-59&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;05&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;c&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ISO8601 date&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2006-01-02T15:04:05-07:00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;RFC2822 date&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Mon, 02 Jan 2006 15:04:05 -0700&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;O&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Difference to Greenwich time (GMT) without colon between hours and minutes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;+0700&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Difference to Greenwich time (GMT) with colon between hours and minutes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;+07:00&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;T&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Abbreviated timezone&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;MST&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;W&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ISO8601 week of the year&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1-52&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ISO8601 day of the week&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1-7&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;L&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Whether it&#39;s a leap year&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0-1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;U&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Unix timestamp with seconds&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1611818268&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;u&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Millisecond&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1-999&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;999&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;w&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Day of the week&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0-6&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;t&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Total days of the month&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;28-31&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;31&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;z&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Day of the year&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1-365&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;e&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Location&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;America/New_York&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Q&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Quarter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1-4&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Century&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;0-99&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;FAQ&lt;/h4&gt; &#xA;&lt;p&gt;1、What is the difference between v1 and v2?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is no difference between v1 and v2 of the API, but the implementation of the translation resource files in &lt;code&gt;language.go&lt;/code&gt; is different. The v1 is implemented by the third-party extension library &lt;a href=&#34;https://github.com/gobuffalo/packr&#34;&gt;packr&lt;/a&gt;, and the v2 is implemented by the standard library &lt;a href=&#34;https://pkg.go.dev/embed&#34;&gt;embed&lt;/a&gt; after &lt;code&gt;golang1.16&lt;/code&gt;. If your golang version is &lt;code&gt;1.16+&lt;/code&gt;, the v2 is recommended, otherwise, the v1 is required.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;References&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/briannesbitt/Carbon&#34;&gt;briannesbitt/carbon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jinzhu/now/&#34;&gt;jinzhu/now&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gogf/gf/tree/master/os/gtime&#34;&gt;goframe/gtime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arrow-py/arrow&#34;&gt;arrow-py/arrow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moment/moment&#34;&gt;moment/moment&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iamkun/dayjs&#34;&gt;iamkun/dayjs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Contributors&lt;/h4&gt; &#xA;&lt;p&gt;Thanks to all of the following who contributed to &lt;code&gt;Carbon&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang-module/carbon/graphs/contributors&#34;&gt;&lt;img src=&#34;https://contrib.rocks/image?repo=golang-module/carbon&amp;amp;max=100&amp;amp;columns=16&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Sponsors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Carbon&lt;/code&gt; is a non-commercial open source project. If you want to support &lt;code&gt;Carbon&lt;/code&gt;, you can &lt;a href=&#34;https://www.gouguoyin.cn/zanzhu.html&#34;&gt;buy a cup of coffee&lt;/a&gt; for developer.&lt;/p&gt; &#xA;&lt;h4&gt;Thanks&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;Carbon&lt;/code&gt; had been being developed with GoLand under the free JetBrains Open Source license, I would like to express my thanks here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/panjf2000/illustrations/master/jetbrains/jetbrains-variant-4.png&#34; height=&#34;100&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>