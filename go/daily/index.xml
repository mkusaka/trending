<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-09T01:34:56Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>majd/ipatool</title>
    <updated>2023-03-09T01:34:56Z</updated>
    <id>tag:github.com,2023-03-09:/majd/ipatool</id>
    <link href="https://github.com/majd/ipatool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line tool that allows searching and downloading app packages (known as ipa files) from the iOS App Store&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IPATool&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://GitHub.com/majd/ipatool/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/majd/ipatool.svg?label=Release&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/majd/ipatool/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;ipatool&lt;/code&gt; is a command line tool that allows you to search for iOS apps on the &lt;a href=&#34;https://apps.apple.com&#34;&gt;App Store&lt;/a&gt; and download a copy of the app package, known as an &lt;em&gt;ipa&lt;/em&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/majd/ipatool/main/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#manual&#34;&gt;Manual&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#package-manager-macos&#34;&gt;Package Manager (macOS)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#compiling&#34;&gt;Compiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/majd/ipatool/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/majd/ipatool/raw/main/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/majd/ipatool/wiki/FAQ&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supported operating system (Windows, Linux or macOS).&lt;/li&gt; &#xA; &lt;li&gt;Apple ID set up to use the App Store.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;You can grab the latest version of &lt;code&gt;ipatool&lt;/code&gt; from &lt;a href=&#34;https://github.com/majd/ipatool/releases&#34;&gt;GitHub releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Package Manager (macOS)&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;ipatool&lt;/code&gt; using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ brew tap majd/repo&#xA;$ brew install ipatool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To authenticate with the App Store, use the &lt;code&gt;auth&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Authenticate with the App Store&#xA;&#xA;Usage:&#xA;  ipatool auth [command]&#xA;&#xA;Available Commands:&#xA;  info        Show current account info&#xA;  login       Login to the App Store&#xA;  revoke      Revoke your App Store credentials&#xA;&#xA;Flags:&#xA;  -h, --help   help for auth&#xA;&#xA;Global Flags:&#xA;      --format format     sets output format for command; can be &#39;text&#39;, &#39;json&#39; (default text)&#xA;      --non-interactive   run in non-interactive session&#xA;      --verbose           enables verbose logs&#xA;&#xA;Use &#34;ipatool auth [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To search for apps on the App Store, use the &lt;code&gt;search&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Search for iOS apps available on the App Store&#xA;&#xA;Usage:&#xA;  ipatool search &amp;lt;term&amp;gt; [flags]&#xA;&#xA;Flags:&#xA;  -h, --help        help for search&#xA;  -l, --limit int   maximum amount of search results to retrieve (default 5)&#xA;&#xA;Global Flags:&#xA;      --format format     sets output format for command; can be &#39;text&#39;, &#39;json&#39; (default text)&#xA;      --non-interactive   run in non-interactive session&#xA;      --verbose           enables verbose logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To obtain a license for an app, use the &lt;code&gt;purchase&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Obtain a license for the app from the App Store&#xA;&#xA;Usage:&#xA;  ipatool purchase [flags]&#xA;&#xA;Flags:&#xA;  -b, --bundle-identifier string   Bundle identifier of the target iOS app (required)&#xA;  -h, --help                       help for purchase&#xA;&#xA;Global Flags:&#xA;      --format format     sets output format for command; can be &#39;text&#39;, &#39;json&#39; (default text)&#xA;      --non-interactive   run in non-interactive session&#xA;      --verbose           enables verbose logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To download a copy of the ipa file, use the &lt;code&gt;download&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Download (encrypted) iOS app packages from the App Store&#xA;&#xA;Usage:&#xA;  ipatool download [flags]&#xA;&#xA;Flags:&#xA;  -b, --bundle-identifier string   The bundle identifier of the target iOS app (required)&#xA;  -h, --help                       help for download&#xA;  -o, --output string              The destination path of the downloaded app package&#xA;      --purchase                   Obtain a license for the app if needed&#xA;&#xA;Global Flags:&#xA;      --format format     sets output format for command; can be &#39;text&#39;, &#39;json&#39; (default text)&#xA;      --non-interactive   run in non-interactive session&#xA;      --verbose           enables verbose logs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the tool runs in interactive mode by default. Use the &lt;code&gt;--non-interactive&lt;/code&gt; flag if running in an automated environment.&lt;/p&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;The tool can be compiled using the Go toolchain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go build -o ipatool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unit tests can be executed with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go test -v github.com/majd/ipatool/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;IPATool is released under the &lt;a href=&#34;https://github.com/majd/ipatool/raw/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>msterzhang/onelist</title>
    <updated>2023-03-09T01:34:56Z</updated>
    <id>tag:github.com,2023-03-09:/msterzhang/onelist</id>
    <link href="https://github.com/msterzhang/onelist" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个类似emby的专注于刮削alist聚合网盘形成影视媒体库的程序。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;onelist&lt;/h1&gt; &#xA;&lt;p&gt;一个类似emby的专注于刮削alist聚合网盘形成影视媒体库的程序。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msterzhang/onelist/main/docs/images/01.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/msterzhang/onelist/main/docs/docker_install.md&#34;&gt;docker安装&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/msterzhang/onelist/main/docs/docker_conpose_install.md&#34;&gt;docker-compose方式安装&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;手动安装教程：&lt;a href=&#34;https://www.bilibili.com/video/BV15M41177LN&#34;&gt;https://www.bilibili.com/video/BV15M41177LN&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1.程序下载&lt;/h2&gt; &#xA;&lt;p&gt;可以在github发布页下载已经编译好的二进制文件&lt;/p&gt; &#xA;&lt;p&gt;使用前必看，程序采用themoviedb作为刮削的资源库，推荐使用国外主机，否则你需要修改hosts文件。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;99.84.251.12 api.themoviedb.org&#xA;99.84.251.19 api.themoviedb.org&#xA;99.84.251.67 api.themoviedb.org&#xA;99.84.251.108 api.themoviedb.org&#xA;156.146.56.162 image.tmdb.org&#xA;108.138.246.49 image.tmdb.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.下载后先初始化配置文件&lt;/h2&gt; &#xA;&lt;p&gt;输入&lt;code&gt;./onelist -run config&lt;/code&gt;命令,便会生成配置文件config.env 修改完config.env配置文件后,运行&lt;code&gt;onelist -run server&lt;/code&gt;便可启动项目,运行&lt;code&gt;onelist -run admin&lt;/code&gt;可查看管理员账户!&lt;/p&gt; &#xA;&lt;p&gt;config.env&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 服务设置&#xA;# 注意要改为未被占用的端口&#xA;API_PORT=5245&#xA;FaviconicoUrl=https://wework.qpic.cn/wwpic/818353_fizV30xbQCGPQRP_1677394564/0&#xA;API_SECRET=fRVvjcNd11gYGI85StVaeCtPVSmJTRRE&#xA;&#xA;# Env有两种模式，Debug及Release，主要用在数据库为mysql时候，需要注意修改Env环境和mysql密码对应&#xA;Env=Debug&#xA;&#xA;# 管理员账户设置，用于初始化管理员账户&#xA;UserEmail=xxxx.@qq.com&#xA;UserPassword=xxxxx&#xA;&#xA;# 数据库设置&#xA;DB_DRIVER=sqlite&#xA;DB_USER=root&#xA;DbName=onelist&#xA;&#xA;# 如果上面DB_DRIVER类型为mysql，就需要正确填下以下参数&#xA;DB_PASSWORD_Debug=123456&#xA;DB_PASSWORD_Release=123456&#xA;&#xA;# TheMovieDb Key&#xA;# 在https://www.themoviedb.org网站申请&#xA;KeyDb=22f10ca52f109158ac7fe064ebbcf697&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3.运行程序&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 先运行，查看有无错误&#xA;./onelist -run server&#xA;&#xA;注意：如果提示权限问题，可以先授权文件chmod 777 onelist&#xA;&#xA;# 如果想后台一直保持运行，可用以下命令&#xA;nohup ./onelist -run server &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4.登录&lt;/h2&gt; &#xA;&lt;p&gt;访问你的&lt;code&gt;ip:端口&lt;/code&gt;就可以进入管理后台了(记得防火墙放行该端口)&lt;/p&gt; &#xA;&lt;h2&gt;5.添加媒体库&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msterzhang/onelist/main/docs/images/02.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;1.对应输入媒体库名字，比如电影，类型选择movie&lt;/p&gt; &#xA;&lt;p&gt;2.封面图片可以暂时不填&lt;/p&gt; &#xA;&lt;p&gt;3.填写alist相关信息，这个主要用于程序查询你alist中文件，根据文件名进行刮削&lt;/p&gt; &#xA;&lt;h2&gt;6.挂载资源，新建完毕后，添加挂载目录。&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/msterzhang/onelist/main/docs/images/03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;挂载的目录中文件必须满足下面这种命名方式&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;电影就按电影名称&#xA;&#xA;电视同一部美剧，所有季可以分开或者放在不同子目录，但是文件名一定得满足以下格式&#xA;权力的游戏S01E01.mp4&#xA;权力的游戏S01E02.mp4&#xA;权力的游戏S01E03.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;填写比如&lt;code&gt;/阿里2号/电影01组&lt;/code&gt;即可，可以选择是否自动刮削，用于你网盘有新文件，程序自动给你添加进影库,&lt;/p&gt; &#xA;&lt;p&gt;点击创建后反应比较慢，是因为程序去遍历你的alist文件了，稍微等下&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;注意：添加挂载目录只能选择你建立媒体库中采用的alist相关目录，要与alist域名一致&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;7.创建后点击刷新就可以看到刮削进度了&lt;/h2&gt; &#xA;&lt;p&gt;可以进入错误文件中查看&lt;/p&gt; &#xA;&lt;h3&gt;交流群：&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;群名称： onelist QQ群 号： 765592050&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>swaggo/gin-swagger</title>
    <updated>2023-03-09T01:34:56Z</updated>
    <id>tag:github.com,2023-03-09:/swaggo/gin-swagger</id>
    <link href="https://github.com/swaggo/gin-swagger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;gin middleware to automatically generate RESTful API documentation with Swagger 2.0.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gin-swagger&lt;/h1&gt; &#xA;&lt;p&gt;gin middleware to automatically generate RESTful API documentation with Swagger 2.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;&lt;img src=&#34;https://github.com/swaggo/gin-swagger/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/swaggo/gin-swagger&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/swaggo/gin-swagger/master.svg?sanitize=true&#34; alt=&#34;Codecov branch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/swaggo/gin-swagger&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/swaggo/gin-swagger&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/swaggo/gin-swagger&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/swaggo/gin-swagger?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/swaggo/gin-swagger/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/swaggo/gin-swagger.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Start using it&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add comments to your API source code, &lt;a href=&#34;https://github.com/swaggo/swag/raw/master/README.md#declarative-comments-format&#34;&gt;See Declarative Comments Format&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;Swag&lt;/a&gt; for Go by using:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/swaggo/swag/cmd/swag&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Starting in Go 1.17, installing executables with &lt;code&gt;go get&lt;/code&gt; is deprecated. &lt;code&gt;go install&lt;/code&gt; may be used instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go install github.com/swaggo/swag/cmd/swag@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Run the &lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;Swag&lt;/a&gt; at your Go project root path(for instance &lt;code&gt;~/root/go-project-name&lt;/code&gt;), &lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;Swag&lt;/a&gt; will parse comments and generate required files(&lt;code&gt;docs&lt;/code&gt; folder and &lt;code&gt;docs/doc.go&lt;/code&gt;) at &lt;code&gt;~/root/go-project-name/docs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;swag init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Download &lt;a href=&#34;https://github.com/swaggo/gin-swagger&#34;&gt;gin-swagger&lt;/a&gt; by using:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/swaggo/gin-swagger&#xA;go get -u github.com/swaggo/files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import following in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/swaggo/gin-swagger&#34; // gin-swagger middleware&#xA;import &#34;github.com/swaggo/files&#34; // swagger embed files&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Canonical example:&lt;/h3&gt; &#xA;&lt;p&gt;Now assume you have implemented a simple api as following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// A get function which returns a hello world string by json&#xA;func Helloworld(g *gin.Context)  {&#xA;&#x9;g.JSON(http.StatusOK,&#34;helloworld&#34;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So how to use gin-swagger on api above? Just follow the following guide.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Add Comments for apis and main function with gin-swagger rules like following:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// @BasePath /api/v1&#xA;&#xA;// PingExample godoc&#xA;// @Summary ping example&#xA;// @Schemes&#xA;// @Description do ping&#xA;// @Tags example&#xA;// @Accept json&#xA;// @Produce json&#xA;// @Success 200 {string} Helloworld&#xA;// @Router /example/helloworld [get]&#xA;func Helloworld(g *gin.Context)  {&#xA;&#x9;g.JSON(http.StatusOK,&#34;helloworld&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Use &lt;code&gt;swag init&lt;/code&gt; command to generate a docs, docs generated will be stored at &lt;code&gt;docs/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;import the docs like this: I assume your project named &lt;code&gt;github.com/go-project-name/docs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;   docs &#34;github.com/go-project-name/docs&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;build your application and after that, go to &lt;a href=&#34;http://localhost:8080/swagger/index.html&#34;&gt;http://localhost:8080/swagger/index.html&lt;/a&gt; ,you to see your Swagger UI.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The full code and folder relatives here:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;   &#34;github.com/gin-gonic/gin&#34;&#xA;   docs &#34;github.com/go-project-name/docs&#34;&#xA;   swaggerfiles &#34;github.com/swaggo/files&#34;&#xA;   ginSwagger &#34;github.com/swaggo/gin-swagger&#34;&#xA;   &#34;net/http&#34;&#xA;)&#xA;// @BasePath /api/v1&#xA;&#xA;// PingExample godoc&#xA;// @Summary ping example&#xA;// @Schemes&#xA;// @Description do ping&#xA;// @Tags example&#xA;// @Accept json&#xA;// @Produce json&#xA;// @Success 200 {string} Helloworld&#xA;// @Router /example/helloworld [get]&#xA;func Helloworld(g *gin.Context)  {&#xA;   g.JSON(http.StatusOK,&#34;helloworld&#34;)&#xA;}&#xA;&#xA;func main()  {&#xA;   r := gin.Default()&#xA;   docs.SwaggerInfo.BasePath = &#34;/api/v1&#34;&#xA;   v1 := r.Group(&#34;/api/v1&#34;)&#xA;   {&#xA;      eg := v1.Group(&#34;/example&#34;)&#xA;      {&#xA;         eg.GET(&#34;/helloworld&#34;,Helloworld)&#xA;      }&#xA;   }&#xA;   r.GET(&#34;/swagger/*any&#34;, ginSwagger.WrapHandler(swaggerfiles.Handler))&#xA;   r.Run(&#34;:8080&#34;)&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo project tree, &lt;code&gt;swag init&lt;/code&gt; is run at relative &lt;code&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── docs&#xA;│&amp;nbsp;&amp;nbsp; ├── docs.go&#xA;│&amp;nbsp;&amp;nbsp; ├── swagger.json&#xA;│&amp;nbsp;&amp;nbsp; └── swagger.yaml&#xA;├── go.mod&#xA;├── go.sum&#xA;└── main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multiple APIs&lt;/h2&gt; &#xA;&lt;p&gt;This feature was introduced in swag v1.7.9&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can configure Swagger using different configuration options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;r := gin.New()&#xA;&#xA;&#x9;ginSwagger.WrapHandler(swaggerfiles.Handler,&#xA;&#x9;&#x9;ginSwagger.URL(&#34;http://localhost:8080/swagger/doc.json&#34;),&#xA;&#x9;&#x9;ginSwagger.DefaultModelsExpandDepth(-1))&#xA;&#xA;&#x9;r.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;URL&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#34;doc.json&#34;&lt;/td&gt; &#xA;   &lt;td&gt;URL pointing to API definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DocExpansion&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#34;list&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Controls the default expansion setting for the operations and tags. It can be &#39;list&#39; (expands only the tags), &#39;full&#39; (expands the tags and operations) or &#39;none&#39; (expands nothing).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DeepLinking&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;If set to true, enables deep linking for tags and operations. See the Deep Linking documentation for more information.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DefaultModelsExpandDepth&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Default expansion depth for models (set to -1 completely hide the models).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;InstanceName&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#34;swagger&#34;&lt;/td&gt; &#xA;   &lt;td&gt;The instance name of the swagger document. If multiple different swagger instances should be deployed on one gin router, ensure that each instance has a unique name (use the &lt;em&gt;--instanceName&lt;/em&gt; parameter to generate swagger documents with &lt;em&gt;swag init&lt;/em&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PersistAuthorization&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;If set to true, it persists authorization data and it would not be lost on browser close/refresh.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Oauth2DefaultClientID&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&#34;&lt;/td&gt; &#xA;   &lt;td&gt;If set, it&#39;s used to prepopulate the &lt;em&gt;client_id&lt;/em&gt; field of the OAuth2 Authorization dialog.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>