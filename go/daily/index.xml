<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-02T01:34:13Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>temporalio/temporal</title>
    <updated>2022-10-02T01:34:13Z</updated>
    <id>tag:github.com,2022-10-02:/temporalio/temporal</id>
    <link href="https://github.com/temporalio/temporal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Temporal service&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://buildkite.com/temporal/temporal-public&#34;&gt;&lt;img src=&#34;https://badge.buildkite.com/98c157ed502d55722ef7f28e6470aa20702c76d6989a0a5a89.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/temporalio/temporal?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/temporalio/temporal/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.temporal.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Discourse&amp;amp;message=Get%20Help&amp;amp;color=informational&#34; alt=&#34;Discourse&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Temporal&lt;/h1&gt; &#xA;&lt;p&gt;Temporal is a microservice orchestration platform which enables developers to build scalable applications without sacrificing productivity or reliability. Temporal server executes units of application logic, Workflows, in a resilient manner that automatically handles intermittent failures, and retries failed operations.&lt;/p&gt; &#xA;&lt;p&gt;Temporal is a mature technology, a fork of Uber&#39;s Cadence. Temporal is being developed by &lt;a href=&#34;https://temporal.io/&#34;&gt;Temporal Technologies&lt;/a&gt;, a startup by the creators of Cadence.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=f-18XztyN6c&#34; title=&#34;Temporal&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12602502/136433917-98abe0d7-4f81-4f97-9b11-62b331c76608.png&#34; alt=&#34;image&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn more about Temporal at &lt;a href=&#34;https://docs.temporal.io&#34;&gt;docs.temporal.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Download and Start Temporal Server Locally&lt;/h3&gt; &#xA;&lt;p&gt;Execute the following commands to start a pre-built image along with all the dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/temporalio/docker-compose.git&#xA;cd docker-compose&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to Temporal &lt;a href=&#34;https://github.com/temporalio/docker-compose&#34;&gt;docker-compose&lt;/a&gt; repo for more advanced options.&lt;/p&gt; &#xA;&lt;p&gt;For more details on Docker images refer to &lt;a href=&#34;https://github.com/temporalio/docker-builds&#34;&gt;docker-builds&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h3&gt;Run the Samples&lt;/h3&gt; &#xA;&lt;p&gt;Clone or download samples for &lt;a href=&#34;https://github.com/temporalio/samples-go&#34;&gt;Go&lt;/a&gt; or &lt;a href=&#34;https://github.com/temporalio/samples-java&#34;&gt;Java&lt;/a&gt; and run them with the local Temporal server. We have a number of &lt;a href=&#34;https://github.com/temporalio/samples-java#helloworld&#34;&gt;HelloWorld type scenarios&lt;/a&gt; available, as well as more advanced ones. Note that the sets of samples are currently different between Go and Java.&lt;/p&gt; &#xA;&lt;h3&gt;Use CLI&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://docs.temporal.io/docs/system-tools/tctl&#34;&gt;Temporal&#39;s command line tool&lt;/a&gt; &lt;code&gt;tctl&lt;/code&gt; to interact with the local Temporal server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias tctl=&#34;docker exec temporal-admin-tools tctl&#34;&#xA;tctl namespace list&#xA;tctl workflow list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use Temporal Web UI&lt;/h3&gt; &#xA;&lt;p&gt;Try &lt;a href=&#34;https://github.com/temporalio/ui&#34;&gt;Temporal Web UI&lt;/a&gt; by opening &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; for viewing your sample workflows executing on Temporal.&lt;/p&gt; &#xA;&lt;h2&gt;Repository&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the source code of the Temporal server. To implement Workflows, Activities and Workers, use &lt;a href=&#34;https://github.com/temporalio/sdk-go&#34;&gt;Go SDK&lt;/a&gt; or &lt;a href=&#34;https://github.com/temporalio/sdk-java&#34;&gt;Java SDK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love your help in making Temporal great. Please review our &lt;a href=&#34;https://raw.githubusercontent.com/temporalio/temporal/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to work on or propose a new feature, first peruse &lt;a href=&#34;https://community.temporal.io/c/feature-requests/6&#34;&gt;feature requests&lt;/a&gt; and our &lt;a href=&#34;https://github.com/temporalio/proposals&#34;&gt;proposals repo&lt;/a&gt; to discover existing active and accepted proposals.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to join the Temporal &lt;a href=&#34;https://community.temporal.io&#34;&gt;community&lt;/a&gt; or &lt;a href=&#34;https://temporalio.slack.com/join/shared_invite/zt-169fymtfr-ADaoVXop6fJ~xn2oAo8csg#/shared-invite/email&#34;&gt;Slack channel&lt;/a&gt; to start a discussion or check if a feature has already been discussed. Once you&#39;re sure the proposal is not covered elsewhere, please follow our &lt;a href=&#34;https://github.com/temporalio/proposals#creating-a-new-proposal&#34;&gt;proposal instructions&lt;/a&gt; or submit a &lt;a href=&#34;https://community.temporal.io/c/feature-requests/6&#34;&gt;feature request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/temporalio/temporal/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pkg/errors</title>
    <updated>2022-10-02T01:34:13Z</updated>
    <id>tag:github.com,2022-10-02:/pkg/errors</id>
    <link href="https://github.com/pkg/errors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple error handling primitives&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;errors &lt;a href=&#34;https://travis-ci.org/pkg/errors&#34;&gt;&lt;img src=&#34;https://travis-ci.org/pkg/errors.svg?sanitize=true&#34; alt=&#34;Travis-CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/davecheney/errors/branch/master&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/b98mptawhudj53ep/branch/master?svg=true&#34; alt=&#34;AppVeyor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/pkg/errors&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/pkg/errors?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/pkg/errors&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/pkg/errors&#34; alt=&#34;Report card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sourcegraph.com/github.com/pkg/errors?badge&#34;&gt;&lt;img src=&#34;https://sourcegraph.com/github.com/pkg/errors/-/badge.svg?sanitize=true&#34; alt=&#34;Sourcegraph&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Package errors provides simple error handling primitives.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;go get github.com/pkg/errors&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The traditional error handling idiom in Go is roughly akin to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if err != nil {&#xA;        return err&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which applied recursively up the call stack results in error reports without context or debugging information. The errors package allows programmers to add context to the failure path in their code in a way that does not destroy the original value of the error.&lt;/p&gt; &#xA;&lt;h2&gt;Adding context to an error&lt;/h2&gt; &#xA;&lt;p&gt;The errors.Wrap function returns a new error that adds context to the original error. For example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;_, err := ioutil.ReadAll(r)&#xA;if err != nil {&#xA;        return errors.Wrap(err, &#34;read failed&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Retrieving the cause of an error&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;errors.Wrap&lt;/code&gt; constructs a stack of errors, adding context to the preceding error. Depending on the nature of the error it may be necessary to reverse the operation of errors.Wrap to retrieve the original error for inspection. Any error value which implements this interface can be inspected by &lt;code&gt;errors.Cause&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type causer interface {&#xA;        Cause() error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;errors.Cause&lt;/code&gt; will recursively retrieve the topmost error which does not implement &lt;code&gt;causer&lt;/code&gt;, which is assumed to be the original cause. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;switch err := errors.Cause(err).(type) {&#xA;case *MyError:&#xA;        // handle specifically&#xA;default:&#xA;        // unknown error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/pkg/errors&#34;&gt;Read the package documentation for more information&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;With the upcoming &lt;a href=&#34;https://go.googlesource.com/proposal/+/master/design/go2draft.md&#34;&gt;Go2 error proposals&lt;/a&gt; this package is moving into maintenance mode. The roadmap for a 1.0 release is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;0.9. Remove pre Go 1.9 and Go 1.10 support, address outstanding pull requests (if possible)&lt;/li&gt; &#xA; &lt;li&gt;1.0. Final release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Because of the Go2 errors changes, this package is not accepting proposals for new functionality. With that said, we welcome pull requests, bug fixes and issue reports.&lt;/p&gt; &#xA;&lt;p&gt;Before sending a PR, please discuss your change by raising an issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;BSD-2-Clause&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>terraform-docs/terraform-docs</title>
    <updated>2022-10-02T01:34:13Z</updated>
    <id>tag:github.com,2022-10-02:/terraform-docs/terraform-docs</id>
    <link href="https://github.com/terraform-docs/terraform-docs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate documentation from Terraform modules in various output formats&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;terraform-docs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/terraform-docs/terraform-docs/actions&#34;&gt;&lt;img src=&#34;https://github.com/terraform-docs/terraform-docs/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/terraform-docs/terraform-docs&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/terraform-docs/terraform-docs&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/terraform-docs/terraform-docs&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/terraform-docs/terraform-docs&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/terraform-docs/terraform-docs&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/terraform-docs/terraform-docs/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov Report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/terraform-docs/terraform-docs/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/terraform-docs/terraform-docs&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/terraform-docs/terraform-docs/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/terraform-docs/terraform-docs&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/terraform-docs/terraform-docs/master/images/terraform-docs-teaser.png&#34; alt=&#34;terraform-docs-teaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sponsored by &lt;a href=&#34;https://scalr.com/?utm_source=terraform-docs&#34;&gt;Scalr - Terraform Automation &amp;amp; Collaboration Software&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.scalr.com/?utm_source=terraform-docs&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://bit.ly/2T7Qm3U&#34; alt=&#34;Scalr - Terraform Automation &amp;amp; Collaboration Software&#34; width=&#34;175&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is terraform-docs&lt;/h2&gt; &#xA;&lt;p&gt;A utility to generate documentation from Terraform modules in various output formats.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;macOS users can install using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install terraform-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install terraform-docs/tap/terraform-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows users can install using &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scoop bucket add terraform-docs https://github.com/terraform-docs/scoop-bucket&#xA;scoop install terraform-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;a href=&#34;https://www.chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;choco install terraform-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stable binaries are also available on the &lt;a href=&#34;https://github.com/terraform-docs/terraform-docs/releases&#34;&gt;releases&lt;/a&gt; page. To install, download the binary for your platform from &#34;Assets&#34; and place this into your &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz&#xA;tar -xzf terraform-docs.tar.gz&#xA;chmod +x terraform-docs&#xA;mv terraform-docs /usr/local/terraform-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Windows releases are in &lt;code&gt;ZIP&lt;/code&gt; format.&lt;/p&gt; &#xA;&lt;p&gt;The latest version can be installed using &lt;code&gt;go install&lt;/code&gt; or &lt;code&gt;go get&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# go1.17+&#xA;go install github.com/terraform-docs/terraform-docs@v0.16.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# go1.16&#xA;GO111MODULE=&#34;on&#34; go get github.com/terraform-docs/terraform-docs@v0.16.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; please use the latest Go to do this, minimum &lt;code&gt;go1.16&lt;/code&gt; is required.&lt;/p&gt; &#xA;&lt;p&gt;This will put &lt;code&gt;terraform-docs&lt;/code&gt; in &lt;code&gt;$(go env GOPATH)/bin&lt;/code&gt;. If you encounter the error &lt;code&gt;terraform-docs: command not found&lt;/code&gt; after installation then you may need to either add that directory to your &lt;code&gt;$PATH&lt;/code&gt; as shown &lt;a href=&#34;https://golang.org/doc/code.html#GOPATH&#34;&gt;here&lt;/a&gt; or do a manual installation by cloning the repo and run &lt;code&gt;make build&lt;/code&gt; from the repository which will put &lt;code&gt;terraform-docs&lt;/code&gt; in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$(go env GOPATH)/src/github.com/terraform-docs/terraform-docs/bin/$(uname | tr &#39;[:upper:]&#39; &#39;[:lower:]&#39;)-amd64/terraform-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running the binary directly&lt;/h3&gt; &#xA;&lt;p&gt;To run and generate documentation into README within a directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terraform-docs markdown table --output-file README.md --output-mode inject /path/to/module&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://terraform-docs.io/user-guide/configuration/output/&#34;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; configuration for more details and examples.&lt;/p&gt; &#xA;&lt;h3&gt;Using docker&lt;/h3&gt; &#xA;&lt;p&gt;terraform-docs can be run as a container by mounting a directory with &lt;code&gt;.tf&lt;/code&gt; files in it and run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --volume &#34;$(pwd):/terraform-docs&#34; -u $(id -u) quay.io/terraform-docs/terraform-docs:0.16.0 markdown /terraform-docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;output.file&lt;/code&gt; is not enabled for this module, generated output can be redirected back to a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm --volume &#34;$(pwd):/terraform-docs&#34; -u $(id -u) quay.io/terraform-docs/terraform-docs:0.16.0 markdown /terraform-docs &amp;gt; doc.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Docker tag &lt;code&gt;latest&lt;/code&gt; refers to &lt;em&gt;latest&lt;/em&gt; stable released version and &lt;code&gt;edge&lt;/code&gt; refers to HEAD of &lt;code&gt;master&lt;/code&gt; at any given point in time.&lt;/p&gt; &#xA;&lt;h3&gt;Using GitHub Actions&lt;/h3&gt; &#xA;&lt;p&gt;To use terraform-docs GitHub Action, configure a YAML workflow file (e.g. &lt;code&gt;.github/workflows/documentation.yml&lt;/code&gt;) with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: Generate terraform docs&#xA;on:&#xA;  - pull_request&#xA;&#xA;jobs:&#xA;  docs:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - uses: actions/checkout@v3&#xA;      with:&#xA;        ref: ${{ github.event.pull_request.head.ref }}&#xA;&#xA;    - name: Render terraform docs and push changes back to PR&#xA;      uses: terraform-docs/gh-actions@main&#xA;      with:&#xA;        working-dir: .&#xA;        output-file: README.md&#xA;        output-method: inject&#xA;        git-push: &#34;true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://github.com/terraform-docs/gh-actions&#34;&gt;terraform-docs GitHub Action&lt;/a&gt; and its configuration and examples.&lt;/p&gt; &#xA;&lt;h3&gt;pre-commit hook&lt;/h3&gt; &#xA;&lt;p&gt;With pre-commit, you can ensure your Terraform module documentation is kept up-to-date each time you make a commit.&lt;/p&gt; &#xA;&lt;p&gt;First &lt;a href=&#34;https://pre-commit.com/#install&#34;&gt;install pre-commit&lt;/a&gt; and then create or update a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; in the root of your Git repo with at least the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;  - repo: https://github.com/terraform-docs/terraform-docs&#xA;    rev: &#34;v0.16.0&#34;&#xA;    hooks:&#xA;      - id: terraform-docs-go&#xA;        args: [&#34;markdown&#34;, &#34;table&#34;, &#34;--output-file&#34;, &#34;README.md&#34;, &#34;./mymodule/path&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pre-commit install&#xA;pre-commit install-hooks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Further changes to your module&#39;s &lt;code&gt;.tf&lt;/code&gt; files will cause an update to documentation when you make a commit.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;terraform-docs can be configured with a yaml file. The default name of this file is &lt;code&gt;.terraform-docs.yml&lt;/code&gt; and the path order for locating it is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;root of module directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.config/&lt;/code&gt; folder at root of module directory&lt;/li&gt; &#xA; &lt;li&gt;current directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.config/&lt;/code&gt; folder at current directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.tfdocs.d/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;formatter: &#34;&#34; # this is required&#xA;&#xA;version: &#34;&#34;&#xA;&#xA;header-from: main.tf&#xA;footer-from: &#34;&#34;&#xA;&#xA;recursive:&#xA;  enabled: false&#xA;  path: modules&#xA;&#xA;sections:&#xA;  hide: []&#xA;  show: []&#xA;&#xA;content: &#34;&#34;&#xA;&#xA;output:&#xA;  file: &#34;&#34;&#xA;  mode: inject&#xA;  template: |-&#xA;    &amp;lt;!-- BEGIN_TF_DOCS --&amp;gt;&#xA;    {{ .Content }}&#xA;    &amp;lt;!-- END_TF_DOCS --&amp;gt;&#xA;&#xA;output-values:&#xA;  enabled: false&#xA;  from: &#34;&#34;&#xA;&#xA;sort:&#xA;  enabled: true&#xA;  by: name&#xA;&#xA;settings:&#xA;  anchor: true&#xA;  color: true&#xA;  default: true&#xA;  description: false&#xA;  escape: true&#xA;  hide-empty: false&#xA;  html: true&#xA;  indent: 2&#xA;  lockfile: true&#xA;  read-comments: true&#xA;  required: true&#xA;  sensitive: true&#xA;  type: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Content Template&lt;/h2&gt; &#xA;&lt;p&gt;Generated content can be customized further away with &lt;code&gt;content&lt;/code&gt; in configuration. If the &lt;code&gt;content&lt;/code&gt; is empty the default order of sections is used.&lt;/p&gt; &#xA;&lt;p&gt;Compatible formatters for customized content are &lt;code&gt;asciidoc&lt;/code&gt; and &lt;code&gt;markdown&lt;/code&gt;. &lt;code&gt;content&lt;/code&gt; will be ignored for other formatters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;content&lt;/code&gt; is a Go template with following additional variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Header }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Footer }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Inputs }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Modules }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Outputs }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Providers }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Requirements }}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Resources }}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and following functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ include &#34;relative/path/to/file&#34; }}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These variables are the generated output of individual sections in the selected formatter. For example &lt;code&gt;{{ .Inputs }}&lt;/code&gt; is Markdown Table representation of &lt;em&gt;inputs&lt;/em&gt; when formatter is set to &lt;code&gt;markdown table&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that sections visibility (i.e. &lt;code&gt;sections.show&lt;/code&gt; and &lt;code&gt;sections.hide&lt;/code&gt;) takes precedence over the &lt;code&gt;content&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally there&#39;s also one extra special variable avaialble to the &lt;code&gt;content&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{{ .Module }}&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As opposed to the other variables mentioned above, which are generated sections based on a selected formatter, the &lt;code&gt;{{ .Module }}&lt;/code&gt; variable is just a &lt;code&gt;struct&lt;/code&gt; representing a &lt;a href=&#34;https://pkg.go.dev/github.com/terraform-docs/terraform-docs/terraform#Module&#34;&gt;Terraform module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;content: |-&#xA;  Any arbitrary text can be placed anywhere in the content&#xA;&#xA;  {{ .Header }}&#xA;&#xA;  and even in between sections&#xA;&#xA;  {{ .Providers }}&#xA;&#xA;  and they don&#39;t even need to be in the default order&#xA;&#xA;  {{ .Outputs }}&#xA;&#xA;  include any relative files&#xA;&#xA;  {{ include &#34;relative/path/to/file&#34; }}&#xA;&#xA;  {{ .Inputs }}&#xA;&#xA;  # Examples&#xA;&#xA;  ```hcl&#xA;  {{ include &#34;examples/foo/main.tf&#34; }}&#xA;  ```&#xA;&#xA;  ## Resources&#xA;&#xA;  {{ range .Module.Resources }}&#xA;  - {{ .GetMode }}.{{ .Spec }} ({{ .Position.Filename }}#{{ .Position.Line }})&#xA;  {{- end }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build on top of terraform-docs&lt;/h2&gt; &#xA;&lt;p&gt;terraform-docs primary use-case is to be utilized as a standalone binary, but some parts of it is also available publicly and can be imported in your project as a library.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;    &#34;github.com/terraform-docs/terraform-docs/format&#34;&#xA;    &#34;github.com/terraform-docs/terraform-docs/print&#34;&#xA;    &#34;github.com/terraform-docs/terraform-docs/terraform&#34;&#xA;)&#xA;&#xA;// buildTerraformDocs for module root `path` and provided content `tmpl`.&#xA;func buildTerraformDocs(path string, tmpl string) (string, error) {&#xA;    config := print.DefaultConfig()&#xA;    config.ModuleRoot = path // module root path (can be relative or absolute)&#xA;&#xA;    module, err := terraform.LoadWithOptions(config)&#xA;    if err != nil {&#xA;        return &#34;&#34;, err&#xA;    }&#xA;&#xA;    // Generate in Markdown Table format&#xA;    formatter := format.NewMarkdownTable(config)&#xA;&#xA;    if err := formatter.Generate(module); err != nil {&#xA;        return &#34;&#34;, err&#xA;    }&#xA;&#xA;    // // Note: if you don&#39;t intend to provide additional template for the generated&#xA;    // // content, or the target format doesn&#39;t provide templating (e.g. json, yaml,&#xA;    // // xml, or toml) you can use `Content()` function instead of `Render()`.&#xA;    // // `Content()` returns all the sections combined with predefined order.&#xA;    // return formatter.Content(), nil&#xA;&#xA;    return formatter.Render(tmpl)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugin&lt;/h2&gt; &#xA;&lt;p&gt;Generated output can be heavily customized with &lt;a href=&#34;https://terraform-docs.io/user-guide/configuration/content/&#34;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/a&gt;, but if using that is not enough for your use-case, you can write your own plugin.&lt;/p&gt; &#xA;&lt;p&gt;In order to install a plugin the following steps are needed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download the plugin and place it in &lt;code&gt;~/.tfdocs.d/plugins&lt;/code&gt; (or &lt;code&gt;./.tfdocs.d/plugins&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;make sure the plugin file name is &lt;code&gt;tfdocs-format-&amp;lt;NAME&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;modify &lt;a href=&#34;https://terraform-docs.io/user-guide/configuration/formatter/&#34;&gt;&lt;code&gt;formatter&lt;/code&gt;&lt;/a&gt; of &lt;code&gt;.terraform-docs.yml&lt;/code&gt; file to be &lt;code&gt;&amp;lt;NAME&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if the plugin file name is different than the example above, terraform-docs won&#39;t be able to to pick it up nor register it properly&lt;/li&gt; &#xA; &lt;li&gt;you can only use plugin thorough &lt;code&gt;.terraform-docs.yml&lt;/code&gt; file and it cannot be used with CLI arguments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To create a new plugin create a new repository called &lt;code&gt;tfdocs-format-&amp;lt;NAME&amp;gt;&lt;/code&gt; with following &lt;code&gt;main.go&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    _ &#34;embed&#34; //nolint&#xA;&#xA;    &#34;github.com/terraform-docs/terraform-docs/plugin&#34;&#xA;    &#34;github.com/terraform-docs/terraform-docs/print&#34;&#xA;    &#34;github.com/terraform-docs/terraform-docs/template&#34;&#xA;    &#34;github.com/terraform-docs/terraform-docs/terraform&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    plugin.Serve(&amp;amp;plugin.ServeOpts{&#xA;        Name:    &#34;&amp;lt;NAME&amp;gt;&#34;,&#xA;        Version: &#34;0.1.0&#34;,&#xA;        Printer: printerFunc,&#xA;    })&#xA;}&#xA;&#xA;//go:embed sections.tmpl&#xA;var tplCustom []byte&#xA;&#xA;// printerFunc the function being executed by the plugin client.&#xA;func printerFunc(config *print.Config, module *terraform.Module) (string, error) {&#xA;    tpl := template.New(config,&#xA;        &amp;amp;template.Item{Name: &#34;custom&#34;, Text: string(tplCustom)},&#xA;    )&#xA;&#xA;    rendered, err := tpl.Render(&#34;custom&#34;, module)&#xA;    if err != nil {&#xA;        return &#34;&#34;, err&#xA;    }&#xA;&#xA;    return rendered, nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/terraform-docs/tfdocs-format-template&#34;&gt;tfdocs-format-template&lt;/a&gt; for more details. You can create a new repository from it by clicking on &lt;code&gt;Use this template&lt;/code&gt; button.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Read the &lt;a href=&#34;https://terraform-docs.io/user-guide/introduction/&#34;&gt;User Guide&lt;/a&gt; to learn how to use terraform-docs&lt;/li&gt; &#xA;   &lt;li&gt;Read the &lt;a href=&#34;https://terraform-docs.io/reference/terraform-docs/&#34;&gt;Formats Guide&lt;/a&gt; to learn about different output formats of terraform-docs&lt;/li&gt; &#xA;   &lt;li&gt;Refer to &lt;a href=&#34;https://terraform-docs.io/user-guide/configuration/&#34;&gt;Config File Reference&lt;/a&gt; for all the available configuration options&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developers&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/terraform-docs/terraform-docs/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; before submitting a pull request&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://terraform-docs.io/&#34;&gt;our website&lt;/a&gt; for all documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discuss terraform-docs on &lt;a href=&#34;https://slack.terraform-docs.io/&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT License - Copyright (c) 2021 The terraform-docs Authors.&lt;/p&gt;</summary>
  </entry>
</feed>