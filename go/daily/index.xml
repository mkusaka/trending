<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:34:44Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>osgochina/dmicro</title>
    <updated>2022-09-20T01:34:44Z</updated>
    <id>tag:github.com,2022-09-20:/osgochina/dmicro</id>
    <link href="https://github.com/osgochina/dmicro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;dmicro是一个高效、可扩展且简单易用的微服务框架。包含drpc,dserver等组件。&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/osgochina/dmicro/main/docs/logo.svg?sanitize=true&#34; width=&#34;180&#34; height=&#34;140&#34; alt=&#34;dmicro logo&#34;&gt; &#xA; &lt;h4&gt;让你的Golang开发无比简单&lt;/h4&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/osgochina/dmicro/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/osgochina/dmicro.svg?style=flat-square&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://goreportcard.com/report/osgochina/dmicro&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/osgochina/dmicro?style=flat-square&#34; alt=&#34;report card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/osgochina/dmicro/issues?q=is%3Aopen+is%3Aissue&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/osgochina/dmicro.svg?style=flat-square&#34; alt=&#34;github issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/osgochina/dmicro/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed-raw/osgochina/dmicro.svg?style=flat-square&#34; alt=&#34;github closed issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://godoc.org/github.com/osgochina/dmicro&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/godoc-reference-blue.svg?style=flat-square&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/osgochina/dmicro/tree/main/examples&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/learn%20by-examples-00BCD4.svg?style=flat-square&#34; alt=&#34;view examples&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.murphysec.com/dr/JycJlZcX36soO749SO&#34;&gt;&lt;img src=&#34;https://www.oscs1024.com/platform/badge/osgochina/dmicro.git.svg?size=small&#34; alt=&#34;OSCS Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;概述&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;DMicro&lt;/code&gt;是一个高效、可扩展且简单易用的微服务框架。包含&lt;code&gt;DRPC&lt;/code&gt;,&lt;code&gt;DServer&lt;/code&gt;等多个组件。&lt;/p&gt; &#xA;&lt;p&gt;其中&lt;code&gt;DRPC&lt;/code&gt;组件是rpc框架，使用&lt;code&gt;endpoint&lt;/code&gt;作为统一对象，为&lt;code&gt;RPC Server&lt;/code&gt;，&lt;code&gt;RPC Clinet&lt;/code&gt;提供统一的API封装。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DRPC&lt;/code&gt;组件特性：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;易于理解，科学合理的多层抽象。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;endpoint&lt;/code&gt;,&lt;code&gt;session&lt;/code&gt;,&lt;code&gt;handle&lt;/code&gt;,&lt;code&gt;message&lt;/code&gt;,&lt;code&gt;protoco&lt;/code&gt;,&lt;code&gt;codec&lt;/code&gt;,&lt;code&gt;transfer filter&lt;/code&gt;,&lt;code&gt;plugin&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;支持常见的消息通讯协议&lt;code&gt;json&lt;/code&gt;，&lt;code&gt;prototbuf&lt;/code&gt;,&lt;code&gt;http&lt;/code&gt;,&lt;code&gt;jsronrpc&lt;/code&gt;,良好的抽象层让自定义消息协议变得简单快捷。&lt;/li&gt; &#xA; &lt;li&gt;支持多种网络协议&lt;code&gt;tcp&lt;/code&gt;,&lt;code&gt;unix&lt;/code&gt;,&lt;code&gt;kcp&lt;/code&gt;,&lt;code&gt;quic&lt;/code&gt;,&lt;code&gt;websocket&lt;/code&gt;等。。。&lt;/li&gt; &#xA; &lt;li&gt;全生命周期的插件埋点(多达27个埋点),让插件系统能实现的功能丰富多彩。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;内置 &lt;code&gt;auth&lt;/code&gt;,&lt;code&gt;heartbeat&lt;/code&gt;，&lt;code&gt;ignorecase&lt;/code&gt;,&lt;code&gt;proxy&lt;/code&gt;,&lt;code&gt;securebody&lt;/code&gt;等插件&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;依托丰富的插件埋点，抽象出易于使用的&lt;code&gt;Event&lt;/code&gt;事件系统，让你的开发如虎添翼。&lt;/li&gt; &#xA; &lt;li&gt;高性能的网络传输层，让性能不再是瓶颈。&lt;/li&gt; &#xA; &lt;li&gt;客户端自动重拨。&lt;/li&gt; &#xA; &lt;li&gt;配合&lt;code&gt;DServer&lt;/code&gt;组件，实现优雅的平滑重启，让你的服务时刻在线。&lt;/li&gt; &#xA; &lt;li&gt;配合&lt;code&gt;Registry&lt;/code&gt;组件，实现服务注册。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Registry&lt;/code&gt;组件抽象出合理的接口，方便接入多个服务注册中心，目前已实现&lt;code&gt;etcd&lt;/code&gt;,&lt;code&gt;mdns&lt;/code&gt;。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;配合&lt;code&gt;Selector&lt;/code&gt;组件实现&lt;code&gt;服务发现&lt;/code&gt;功能。&lt;/li&gt; &#xA; &lt;li&gt;使用&lt;code&gt;metrics&lt;/code&gt;组件实现指标统计功能。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;DServer&lt;/code&gt;应用管理组件帮助大家封装好了应用的全生命周期管理。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;DServer&lt;/code&gt;组件特性：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;采用&lt;code&gt;server&lt;/code&gt;,&lt;code&gt;service&lt;/code&gt;,&lt;code&gt;sandbox&lt;/code&gt;三层结构。 让业务专注于&lt;code&gt;sandbox&lt;/code&gt;层，支持单进程，多进程模式。做到开发debug单进程，运行单/多进程可选。&lt;/li&gt; &#xA; &lt;li&gt;完善合理的启动命令封装，支持&lt;code&gt;start&lt;/code&gt;,&lt;code&gt;stop&lt;/code&gt;，&lt;code&gt;reload&lt;/code&gt;,&lt;code&gt;ctrl&lt;/code&gt;等命令。&lt;/li&gt; &#xA; &lt;li&gt;不但支持&lt;code&gt;drpc&lt;/code&gt;组件，还支持&lt;code&gt;ghttp&lt;/code&gt;等实现平滑重启接口的其他组件(如果不需要平滑重启，所有服务组件都支持)&lt;/li&gt; &#xA; &lt;li&gt;好用的命令行管理功能，让你能实时的管理正在运行的应用。&lt;/li&gt; &#xA; &lt;li&gt;完善的进程管理组件&lt;code&gt;supervisor&lt;/code&gt;,支持对进程的全生命周期管理。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://osgochina.gitee.io/dmicro&#34;&gt;详细文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;安装&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get -u -v github.com/osgochina/dmicro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;推荐使用 &lt;code&gt;go.mod&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require github.com/osgochina/dmicro latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;import&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/osgochina/dmicro&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;国内镜像: &lt;a href=&#34;https://gitee.com/osgochina/dmicro&#34;&gt;https://gitee.com/osgochina/dmicro&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;限制&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;golang版本 &amp;gt;= 1.16&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;使用&lt;code&gt;DServer&lt;/code&gt;创建&lt;code&gt;rpc&lt;/code&gt;服务&lt;/h2&gt; &#xA;&lt;p&gt;如何快速的通过简单的代码创建一个真正的rpc服务。 以下就是示例代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// rbc_server.go&#xA;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/osgochina/dmicro/drpc&#34;&#xA;&#x9;&#34;github.com/osgochina/dmicro/dserver&#34;&#xA;&#x9;&#34;github.com/osgochina/dmicro/logger&#34;&#xA;)&#xA;// DRpcSandBox  默认的服务&#xA;type DRpcSandBox struct {&#xA;&#x9;dserver.BaseSandbox&#xA;&#x9;endpoint drpc.Endpoint&#xA;}&#xA;&#xA;func (that *DRpcSandBox) Name() string {&#xA;&#x9;return &#34;DRpcSandBox&#34;&#xA;}&#xA;&#xA;func (that *DRpcSandBox) Setup() error {&#xA;&#x9;fmt.Println(&#34;DRpcSandBox Setup&#34;)&#xA;&#x9;cfg := that.Config.EndpointConfig(that.Name())&#xA;&#x9;cfg.ListenPort = 9091&#xA;&#x9;cfg.PrintDetail = true&#xA;&#x9;that.endpoint = drpc.NewEndpoint(cfg)&#xA;&#x9;that.endpoint.RouteCall(new(Math))&#xA;&#x9;return that.endpoint.ListenAndServe()&#xA;}&#xA;&#xA;func (that *DRpcSandBox) Shutdown() error {&#xA;&#x9;fmt.Println(&#34;DRpcSandBox Shutdown&#34;)&#xA;&#x9;return that.endpoint.Close()&#xA;}&#xA;&#xA;&#xA;// Math rpc请求的最终处理器，必须集成drpc.CallCtx&#xA;type Math struct {&#xA;&#x9;drpc.CallCtx&#xA;}&#xA;&#xA;func (m *Math) Add(arg *[]int) (int, *drpc.Status) {&#xA;&#x9;// test meta&#xA;&#x9;logger.Infof(&#34;author: %s&#34;, m.PeekMeta(&#34;author&#34;))&#xA;&#x9;// add&#xA;&#x9;var r int&#xA;&#x9;for _, a := range *arg {&#xA;&#x9;&#x9;r += a&#xA;&#x9;}&#xA;&#x9;// response&#xA;&#x9;return r, nil&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;dserver.Authors = &#34;osgochina@gmail.com&#34;&#xA;&#x9;dserver.SetName(&#34;DMicro_drpc&#34;)&#xA;&#x9;dserver.Setup(func(svr *dserver.DServer) {&#xA;&#x9;&#x9;err := svr.AddSandBox(new(DRpcSandBox))&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;logger.Fatal(err)&#xA;&#x9;&#x9;}&#xA;&#x9;})&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;编译&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go build rbc_server.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;运行&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./rbc_server start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;创建普通&lt;code&gt;rpc&lt;/code&gt;客户端&lt;/h2&gt; &#xA;&lt;p&gt;服务已经建立完毕，如何通过client链接它呢？&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;time&#34;&#xA;&#x9;&#34;github.com/osgochina/dmicro/drpc&#34;&#xA;&#x9;&#34;github.com/osgochina/dmicro/drpc/message&#34;&#xA;&#x9;&#34;github.com/osgochina/dmicro/logger&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;cli := drpc.NewEndpoint(drpc.EndpointConfig{PrintDetail: true, RedialTimes: -1, RedialInterval: time.Second})&#xA;&#x9;defer cli.Close()&#xA;&#xA;&#x9;sess, stat := cli.Dial(&#34;127.0.0.1:9091&#34;)&#xA;&#x9;if !stat.OK() {&#xA;&#x9;&#x9;logger.Fatalf(&#34;%v&#34;, stat)&#xA;&#x9;}&#xA;&#x9;var result int&#xA;&#x9;stat = sess.Call(&#34;/math/add&#34;,&#xA;&#x9;&#x9;[]int{1, 2, 3, 4, 5},&#xA;&#x9;&#x9;&amp;amp;result,&#xA;&#x9;&#x9;message.WithSetMeta(&#34;author&#34;, &#34;liuzhiming&#34;),&#xA;&#x9;).Status()&#xA;&#x9;if !stat.OK() {&#xA;&#x9;&#x9;logger.Fatalf(&#34;%v&#34;, stat)&#xA;&#x9;}&#xA;&#x9;logger.Printf(&#34;result: %d&#34;, result)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;通过以上的代码事例，大家基本可以了解&lt;code&gt;drpc&lt;/code&gt;框架是怎么使用。&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;ctrl&lt;/code&gt;命令&lt;/h2&gt; &#xA;&lt;p&gt;使用&lt;code&gt;ctrl&lt;/code&gt;命令管理正在运行的&lt;code&gt;server&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;打开新的命令行窗口运行&lt;code&gt;ctrl&lt;/code&gt;命令&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ./rbc_server.exe ctl&#xA;&#xA;  ____    ____&#xA; |  _ \  / ___|    ___   _ __  __   __   ___   _ __ &#xA; | | | | \___ \   / _ \ | &#39;__| \ \ / /  / _ \ | &#39;__|&#xA; | |_| |  ___) | |  __/ | |     \ V /  |  __/ | |   &#xA; |____/  |____/   \___| |_|      \_/    \___| |_|  &#xA;Version:         No Version Info&#xA;Go Version:      No Version Info&#xA;DMicro Version:  v1.0.0&#xA;GF Version:      v1.16.9&#xA;Git Commit:      No Commit Info&#xA;Build Time:      No Time Info&#xA;Authors:         osgochina@gmail.com&#xA;Install Path:    D:\code\GolandProjects\dmicro\examples\simple_dserver\rbc_server.exe&#xA;DMicro_drpc »&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;运行&lt;code&gt;help&lt;/code&gt;命令，获取命令说明&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;DMicro_drpc » help&#xA;&#xA;好用的服务管理工具&#xA;&#xA;Commands:&#xA;=========&#xA;  clear             clear the screen&#xA;  debug             debug开关&#xA;  exit              exit the shell&#xA;  help              use &#39;help [command]&#39; for command help&#xA;  info, status, ps  查看当前服务状态&#xA;  log               打印出服务的运行日志&#xA;  reload            平滑重启服务&#xA;  start             启动服务&#xA;  stop              停止服务&#xA;  version, v        打印当前程序的版本信息&#xA;&#xA;DMicro_drpc »&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Registry&lt;/code&gt; 服务注册&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Selector&lt;/code&gt; 服务发现&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Eventbus&lt;/code&gt; 事件总线&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Supervisor&lt;/code&gt; 进程管理&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;Metrics&lt;/code&gt; 指标统计&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;OpenAPI&lt;/code&gt; 文档自动生成&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;Code gen&lt;/code&gt; 代码生成&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;Tracing&lt;/code&gt; 链路追踪&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;Broker&lt;/code&gt; 限流熔断&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;感谢&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;DMicro&lt;/code&gt;该项目的诞生离不开&lt;code&gt;erpc&lt;/code&gt;和&lt;code&gt;GoFrame&lt;/code&gt;两个优秀的项目。&lt;/p&gt; &#xA;&lt;p&gt;其中&lt;code&gt;drpc&lt;/code&gt;组件参考&lt;code&gt;erpc&lt;/code&gt;项目的架构思想，依赖的基础库是&lt;code&gt;GoFrame&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/henrylee2cn/erpc&#34;&gt;erpc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gogf/gf&#34;&gt;GoFrame&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>micro/micro</title>
    <updated>2022-09-20T01:34:44Z</updated>
    <id>tag:github.com,2022-09-20:/micro/micro</id>
    <link href="https://github.com/micro/micro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API first development platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Micro&lt;/h1&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/micro/micro&#34;&gt; &lt;img alt=&#34;Go Report Card&#34; src=&#34;https://goreportcard.com/badge/github.com/micro/micro&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/micro/micro/v3?tab=doc&#34;&gt;&lt;img alt=&#34;Go.Dev reference&#34; src=&#34;https://img.shields.io/badge/go.dev-reference-007d9c?logo=go&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img alt=&#34;Apache License&#34; src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;An API first development platform&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Micro addresses the key requirements for building services in the cloud. It leverages the microservices architecture pattern and provides a set of services which act as the building blocks of a platform.&lt;/p&gt; &#xA;&lt;p&gt;Micro deals with the complexity of distributed systems and provides simpler programmable abstractions to build on.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Below are the core components that make up Micro.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Micro is built as a microservices architecture and abstracts away the complexity of the underlying infrastructure. We compose this as a single logical server to the user but decompose that into the various building block primitives that can be plugged into any underlying system.&lt;/p&gt; &#xA;&lt;p&gt;The server is composed of the following services.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;API&lt;/strong&gt; - A Gateway which dynamically maps HTTP requests to RPC using path based resolution&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Auth&lt;/strong&gt; - Authentication and authorization out of the box using JWT tokens and rule based access control.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Broker&lt;/strong&gt; - Ephemeral pubsub messaging for asynchronous communication and distributing notifications&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Config&lt;/strong&gt; - Dynamic configuration and secrets management for service level config without reload&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Events&lt;/strong&gt; - Event streaming with ordered messaging, replay from offsets and persistent storage&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt; - Inter-service networking, isolation and routing plane for all internal request traffic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Proxy&lt;/strong&gt; - An identity aware proxy used for remote access and any external grpc request traffic&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Runtime&lt;/strong&gt; - Service lifecycle and process management with support for source to running auto build&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Registry&lt;/strong&gt; - Centralised service discovery and API endpoint explorer with feature rich metadata&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt; - Key-Value storage with TTL expiry and persistent crud to keep microservices stateless&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Framework&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Micro comes with a built in Go framework for service development. The Go framework makes it drop dead simple to write your services without having to piece together endless lines of boilerplate code. Auto configured and initialised by default, just import and get started quickly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Command Line&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Micro brings not only a rich architectural model but a command line experience tailored for that need. The command line interface includes dynamic command mapping for all services running on the platform. Turns any service instantly into a CLI command along with flag parsing for inputs. Includes support for multiple environments and namespaces, automatic refreshing of auth credentials, creating and running services, status info and log streaming, plus much, much more.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dashboard&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explore, discover and consume services via a browser using Micro Web. The dashboard makes use of your env configuration to locate the server and provides dynamic form fill for services.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Environments&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Micro bakes in the concept of &lt;code&gt;Environments&lt;/code&gt; and multi-tenancy through &lt;code&gt;Namespaces&lt;/code&gt;. Run your server locally for development and in the cloud for staging and production, seamlessly switch between them using the CLI commands &lt;code&gt;micro env set [environment]&lt;/code&gt; and &lt;code&gt;micro user set [namespace]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/micro/micro/v3@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install Binaries&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;powershell -Command &#34;iwr -useb https://raw.githubusercontent.com/micro/micro/master/scripts/install.ps1 | iex&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget -q  https://raw.githubusercontent.com/micro/micro/master/scripts/install.sh -O - | /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;MacOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -fsSL https://raw.githubusercontent.com/micro/micro/master/scripts/install.sh | /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run the server&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;micro server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now go to &lt;a href=&#34;http://localhost:8080&#34;&gt;localhost:8080&lt;/a&gt; and make sure the output is something like &lt;code&gt;{&#34;version&#34;: &#34;v3.10.1&#34;}&lt;/code&gt; which is the latest version of micro installed.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Login to Micro&lt;/h3&gt; &#xA;&lt;p&gt;default username: &lt;code&gt;admin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;default password: &lt;code&gt;micro&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ micro login&#xA;Enter username: admin&#xA;Enter password:&#xA;Successfully logged in.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See what&#39;s running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ micro services&#xA;api&#xA;auth&#xA;broker&#xA;config&#xA;events&#xA;network&#xA;proxy&#xA;registry&#xA;runtime&#xA;server&#xA;store&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a Service&lt;/h3&gt; &#xA;&lt;p&gt;Generate a service using the template&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;micro new helloworld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Creating service helloworld&#xA;&#xA;.&#xA;├── micro.mu&#xA;├── main.go&#xA;├── generate.go&#xA;├── handler&#xA;│&amp;nbsp;&amp;nbsp; └── helloworld.go&#xA;├── proto&#xA;│&amp;nbsp;&amp;nbsp; └── helloworld.proto&#xA;├── Dockerfile&#xA;├── Makefile&#xA;├── README.md&#xA;├── .gitignore&#xA;└── go.mod&#xA;&#xA;&#xA;download protoc zip packages (protoc-$VERSION-$PLATFORM.zip) and install:&#xA;&#xA;visit https://github.com/protocolbuffers/protobuf/releases&#xA;&#xA;compile the proto file helloworld.proto:&#xA;&#xA;cd helloworld&#xA;make init&#xA;go mod vendor&#xA;make proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run a service&lt;/h3&gt; &#xA;&lt;p&gt;Run from local dir&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;micro run .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or from a git url&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;micro run github.com/micro/services/helloworld&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Check status of running service&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ micro status&#xA;NAME&#x9;&#x9;VERSION&#x9;SOURCE&#x9;&#x9;&#x9;&#x9;&#x9;STATUS&#x9;BUILD&#x9;UPDATED&#x9;METADATA&#xA;helloworld&#x9;latest&#x9;github.com/micro/services/helloworld&#x9;running&#x9;n/a&#x9;4s ago&#x9;owner=admin, group=micro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;View logs of the service to verify it&#39;s running.&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ micro logs helloworld&#xA;2020-10-06 17:52:21  file=service/service.go:195 level=info Starting [service] helloworld&#xA;2020-10-06 17:52:21  file=grpc/grpc.go:902 level=info Server [grpc] Listening on [::]:33975&#xA;2020-10-06 17:52:21  file=grpc/grpc.go:732 level=info Registry [service] Registering node: helloworld-67627b23-3336-4b92-a032-09d8d13ecf95&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Call the service&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ micro helloworld call --name=Jane&#xA;{&#xA;&#x9;&#34;msg&#34;: &#34;Hello Jane&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Curl it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl &#34;http://localhost:8080/helloworld?name=John&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write a service client&lt;/h3&gt; &#xA;&lt;p&gt;A service client is used within another service and must be run by micro&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/micro/micro/v3/service&#34;&#xA;&#x9;&#34;github.com/micro/micro/v3/service/client&#34;&#xA;&#x9;proto &#34;github.com/micro/services/helloworld/proto&#34;&#xA;)&#xA;&#xA;func callService(c client.Client) {&#xA;&#x9;// create the proto client for helloworld&#xA;&#x9;hw := proto.NewHelloworldService(&#34;helloworld&#34;, c)&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;// call an endpoint on the service&#xA;&#x9;&#x9;rsp, err := hw.Call(context.Background(), &amp;amp;proto.CallRequest{&#xA;&#x9;&#x9;&#x9;Name: &#34;John&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;fmt.Println(&#34;Error calling helloworld: &#34;, err)&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;// print the response&#xA;&#x9;&#x9;fmt.Println(&#34;Response: &#34;, rsp.Message)&#xA;&#xA;&#x9;&#x9;time.Sleep(time.Second)&#xA;&#x9;}&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;// create and initialise a new service&#xA;&#x9;srv := service.New(&#xA;&#x9;&#x9;service.Name(&#34;caller&#34;),&#xA;&#x9;)&#xA;&#xA;&#x9;// run the client caller&#xA;&#x9;go callService(srv.Client())&#xA;&#x9;&#xA;&#x9;// run the service&#xA;&#x9;service.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;micro run .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Write an api client&lt;/h3&gt; &#xA;&lt;p&gt;An api client is an external app or client which makes requests through the micro api&lt;/p&gt; &#xA;&lt;p&gt;Get a token&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export TOKEN=`micro user token`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call helloworld&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;    &#34;os&#34;&#xA;&#xA;    &#34;github.com/micro/micro/v3/client/api&#34;&#xA;)&#xA;&#xA;type Request struct {&#xA;&#x9;Name string `json:&#34;name&#34;`&#xA;}&#xA;&#xA;type Response struct {&#xA;&#x9;Msg string `json:&#34;msg&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;token := os.Getenv(&#34;TOKEN&#34;)&#xA;&#x9;c := api.NewClient(nil)&#xA;&#xA;&#x9;// set your api token&#xA;&#x9;c.SetToken(token)&#xA;&#xA;   &#x9;req := &amp;amp;Request{&#xA;&#x9;&#x9;Name: &#34;John&#34;,&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;var rsp Response&#xA;&#xA;&#x9;if err := c.Call(&#34;helloworld&#34;, &#34;Call&#34;, req, &amp;amp;rsp); err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;fmt.Println(rsp)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run it&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go run main.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more see the &lt;a href=&#34;https://micro.dev/getting-started&#34;&gt;getting started&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;h2&gt;Web Dashboard&lt;/h2&gt; &#xA;&lt;p&gt;Use services via the web with the Micro Web dashboard&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;micro web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Browse to &lt;code&gt;localhost:8082&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Docs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://micro.dev/introduction&#34;&gt;Introduction&lt;/a&gt; - A high level introduction to Micro&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://micro.dev/getting-started&#34;&gt;Getting Started&lt;/a&gt; - The helloworld quickstart guide&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://micro.dev/upgrade-guide&#34;&gt;Upgrade Guide&lt;/a&gt; - Update your go-micro project to use micro v3.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://micro.dev/architecture&#34;&gt;Architecture&lt;/a&gt; - Describes the architecture, design and tradeoffs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://micro.dev/reference&#34;&gt;Reference&lt;/a&gt; - In-depth reference for Micro CLI and services&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://micro.dev/resources&#34;&gt;Resources&lt;/a&gt; - External resources and contributions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://micro.dev/roadmap&#34;&gt;Roadmap&lt;/a&gt; - Stuff on our agenda over the long haul&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://micro.dev/faq&#34;&gt;FAQ&lt;/a&gt; - Frequently asked questions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/micro/micro/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; which makes use of &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;Apache 2.0&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>