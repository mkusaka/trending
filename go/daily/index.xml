<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-03T01:38:01Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>miguelmota/golang-for-nodejs-developers</title>
    <updated>2023-07-03T01:38:01Z</updated>
    <id>tag:github.com,2023-07-03:/miguelmota/golang-for-nodejs-developers</id>
    <link href="https://github.com/miguelmota/golang-for-nodejs-developers" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples of Golang compared to Node.js for learning ðŸ¤“&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/168240/114315374-8ff5b480-9ab3-11eb-8323-b83858e8e74f.png&#34; alt=&#34;logo&#34; width=&#34;800&#34;&gt; &lt;br&gt; &lt;br&gt; &lt;br&gt; &lt;/h3&gt; &#xA;&lt;h1&gt;Golang for Node.js Developers&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Examples of &lt;a href=&#34;https://golang.org/&#34;&gt;Golang&lt;/a&gt; examples compared to &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; for learning&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/avelino/awesome-go&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Go&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contributing&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This guide full of examples is intended for people learning Go that are coming from Node.js, although the vice versa can work too. This is not meant to be a complete guide and it is assumed that you&#39;ve gone through the &lt;a href=&#34;https://tour.golang.org/&#34;&gt;Tour of Go&lt;/a&gt; tutorial. This guide is meant to be barely good enough to help you at a high level understand how to do &lt;em&gt;X&lt;/em&gt; in &lt;em&gt;Y&lt;/em&gt; and doing further learning on your own is of course required.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#comments&#34;&gt;comments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#printing&#34;&gt;printing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#logging&#34;&gt;logging&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#variables&#34;&gt;variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#types&#34;&gt;types&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#types&#34;&gt;bool&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#types&#34;&gt;number&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#types&#34;&gt;string&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#types&#34;&gt;array&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#types&#34;&gt;object&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#types&#34;&gt;function&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#type-check&#34;&gt;type check&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#interpolation&#34;&gt;interpolation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#ifelse&#34;&gt;if/else&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#ifelse&#34;&gt;ternary&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#for&#34;&gt;for&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#while&#34;&gt;while&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#switch&#34;&gt;switch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#arrays&#34;&gt;arrays&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#arrays&#34;&gt;slicing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#arrays&#34;&gt;copying&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#arrays&#34;&gt;appending&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#arrays&#34;&gt;prepending&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#uint8-arrays&#34;&gt;uint8 arrays&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#array-iteration&#34;&gt;array iteration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#array-iteration&#34;&gt;looping&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#array-iteration&#34;&gt;mapping&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#array-iteration&#34;&gt;filtering&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#array-iteration&#34;&gt;reducing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#array-sorting&#34;&gt;sorting&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;buffers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;allocate&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;big endian&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;little endian&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;hex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;compare&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;equals&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#maps&#34;&gt;maps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#maps&#34;&gt;iteration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#objects&#34;&gt;objects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#functions&#34;&gt;functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#default-values&#34;&gt;default values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#destructuring&#34;&gt;destructuring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#spread-operator&#34;&gt;spread operator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#rest-operator&#34;&gt;rest operator&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#swapping&#34;&gt;swapping&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#classes&#34;&gt;classes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#classes&#34;&gt;constructors&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#classes&#34;&gt;instantiation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#classes&#34;&gt;&#34;this&#34;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#generators&#34;&gt;generators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#datetime&#34;&gt;datetime&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#datetime&#34;&gt;parsing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#datetime&#34;&gt;formatting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#datetime&#34;&gt;unix timestamp&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#timeout&#34;&gt;timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#interval&#34;&gt;interval&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#iife&#34;&gt;IIFE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#files&#34;&gt;files&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#files&#34;&gt;creating&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#files&#34;&gt;opening&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#files&#34;&gt;writing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#files&#34;&gt;reading&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#files&#34;&gt;closing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#files&#34;&gt;deleting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#files&#34;&gt;file descriptors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#json&#34;&gt;json&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#json&#34;&gt;parse&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#json&#34;&gt;stringify&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#big-numbers&#34;&gt;big numbers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#big-numbers&#34;&gt;uint&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#big-numbers&#34;&gt;string&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#big-numbers&#34;&gt;hex&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#big-numbers&#34;&gt;buffers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;compare&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#buffers&#34;&gt;equals&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#promises&#34;&gt;promises&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#promises&#34;&gt;then&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#promises&#34;&gt;all&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#async-await&#34;&gt;async/await&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#streams&#34;&gt;streams&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#streams&#34;&gt;reading&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#streams&#34;&gt;writing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#event-emitter&#34;&gt;event emitter&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;!--&#xA;  - [transform](#streams)&#xA;- [concurrency](#concurrency)&#xA;  - [threads](#concurrency)&#xA;  - [forking](#concurrency)&#xA;- [message passing](#message-passing)&#xA;- [first-class functions](#first-class-functions)&#xA;--&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#errors&#34;&gt;errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#trycatch&#34;&gt;try/catch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#exceptions&#34;&gt;exceptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#regex&#34;&gt;regex&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#exec-sync&#34;&gt;exec (sync)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#exec-async&#34;&gt;exec (async)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#tcp-server&#34;&gt;tcp server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#udp-server&#34;&gt;udp server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#http-server&#34;&gt;http server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#url-parse&#34;&gt;url parse&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#gzip&#34;&gt;gzip&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#gzip&#34;&gt;compress&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#gzip&#34;&gt;decompress&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#dns&#34;&gt;dns&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#dns&#34;&gt;ns lookup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#dns&#34;&gt;ip lookup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#dns&#34;&gt;mx lookup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#dns&#34;&gt;txt lookup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#dns&#34;&gt;set resolution servers&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#crypto&#34;&gt;crypto&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#crypto&#34;&gt;sha256&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#env-vars&#34;&gt;env vars&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#cli-args&#34;&gt;cli args&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#cli-flags&#34;&gt;cli flags&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#stdout&#34;&gt;stdout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#stderr&#34;&gt;stderr&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#stdin&#34;&gt;stdin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#modules&#34;&gt;modules&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#modules&#34;&gt;installing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#modules&#34;&gt;updating&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#modules&#34;&gt;removing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#modules&#34;&gt;importing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#modules&#34;&gt;exporting&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#modules&#34;&gt;publishing&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#stack-trace&#34;&gt;stack trace&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#databases&#34;&gt;databases&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#databases&#34;&gt;sqlite3&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#testing&#34;&gt;testing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#benchmarking&#34;&gt;benchmarking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#documentation&#34;&gt;documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;All sample code is available in &lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/examples/&#34;&gt;examples/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;comments&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;// this is a line comment&#xA;&#xA;/*&#xA; this is a block comment&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;func main() {&#xA;&#x9;// this is a line comment&#xA;&#xA;&#x9;/*&#xA;&#x9;   this is a block comment&#xA;&#x9;*/&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;printing&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;console.log(&#39;print to stdout&#39;)&#xA;console.log(&#39;format %s %d&#39;, &#39;example&#39;, 1)&#xA;console.error(&#39;print to stderr&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;print to stdout&#xA;format example 1&#xA;print to stderr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;fmt.Println(&#34;print to stdout&#34;)&#xA;&#x9;fmt.Printf(&#34;format %s %v\n&#34;, &#34;example&#34;, 1)&#xA;&#x9;fmt.Fprintf(os.Stderr, &#34;print to stderr&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;print to stdout&#xA;format example 1&#xA;print to stderr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;logging&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;console.log((new Date()).toISOString(), &#39;hello world&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2021-04-11T20:55:07.451Z hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;log&#34;&#xA;&#xA;func main() {&#xA;&#x9;log.Println(&#34;hello world&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2021/04/11 13:55:07 hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(Package &lt;code&gt;log&lt;/code&gt; writes to standard error Ã¡nd prints the date and time of each logged message)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;variables&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;// function scoped&#xA;var foo = &#39;foo&#39;&#xA;&#xA;// block scoped&#xA;let bar = &#39;bar&#39;&#xA;&#xA;// constant&#xA;const qux = &#39;qux&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;(variables are block scoped in Go)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;func main() {&#xA;&#x9;// explicit&#xA;&#x9;var foo string = &#34;foo&#34;&#xA;&#xA;&#x9;// type inferred&#xA;&#x9;var bar = &#34;foo&#34;&#xA;&#xA;&#x9;// shorthand&#xA;&#x9;baz := &#34;bar&#34;&#xA;&#xA;&#x9;// constant&#xA;&#x9;const qux = &#34;qux&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;interpolation&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const name = &#39;bob&#39;&#xA;const age = 21&#xA;const message = `${name} is ${age} years old`&#xA;&#xA;console.log(message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bob is 21 years old&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;name := &#34;bob&#34;&#xA;&#x9;age := 21&#xA;&#x9;message := fmt.Sprintf(&#34;%s is %d years old&#34;, name, age)&#xA;&#xA;&#x9;fmt.Println(message)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bob is 21 years old&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;types&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;// primitives&#xA;const myBool = true&#xA;const myNumber = 10&#xA;const myString = &#39;foo&#39;&#xA;const mySymbol = Symbol(&#39;bar&#39;)&#xA;const myNull = null&#xA;const myUndefined = undefined&#xA;&#xA;// object types&#xA;const myObject = {}&#xA;const myArray = []&#xA;const myFunction = function() {}&#xA;const myError = new Error(&#39;error&#39;)&#xA;const myDate = new Date()&#xA;const myRegex = /a/&#xA;const myMap = new Map()&#xA;const mySet = new Set()&#xA;const myPromise = Promise.resolve()&#xA;const myGenerator = function *() {}&#xA;const myClass = class {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;func main() {&#xA;&#x9;// primitives&#xA;&#x9;var myBool bool = true&#xA;&#x9;var myInt int = 10&#xA;&#x9;var myInt8 int8 = 10&#xA;&#x9;var myInt16 int16 = 10&#xA;&#x9;var myInt32 int32 = 10&#xA;&#x9;var myInt64 int64 = 10&#xA;&#x9;var myUint uint = 10&#xA;&#x9;var myUint8 uint8 = 10&#xA;&#x9;var myUint16 uint16 = 10&#xA;&#x9;var myUint32 uint32 = 10&#xA;&#x9;var myUint64 uint64 = 10&#xA;&#x9;var myUintptr uintptr = 10&#xA;&#x9;var myFloat32 float32 = 10.5&#xA;&#x9;var myFloat64 float64 = 10.5&#xA;&#x9;var myComplex64 complex64 = -1 + 10i&#xA;&#x9;var myComplex128 complex128 = -1 + 10i&#xA;&#x9;var myString string = &#34;foo&#34;&#xA;&#x9;var myByte byte = 10  // alias to uint8&#xA;&#x9;var myRune rune = &#39;a&#39; // alias to int32&#xA;&#xA;&#x9;// composite types&#xA;&#x9;var myStruct struct{} = struct{}{}&#xA;&#x9;var myArray []string = []string{}&#xA;&#x9;var myMap map[string]int = map[string]int{}&#xA;&#x9;var myFunction func() = func() {}&#xA;&#x9;var myChannel chan bool = make(chan bool)&#xA;&#x9;var myInterface interface{} = nil&#xA;&#x9;var myPointer *int = new(int)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;type check&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function typeOf(obj) {&#xA;  return {}.toString.call(obj).split(&#39; &#39;)[1].slice(0,-1).toLowerCase()&#xA;}&#xA;&#xA;const values = [&#xA;  true,&#xA;  10,&#xA;  &#39;foo&#39;,&#xA;  Symbol(&#39;bar&#39;),&#xA;  null,&#xA;  undefined,&#xA;  NaN,&#xA;  {},&#xA;  [],&#xA;  function(){},&#xA;  new Error(),&#xA;  new Date(),&#xA;  /a/,&#xA;  new Map(),&#xA;  new Set(),&#xA;  Promise.resolve(),&#xA;  function *() {},&#xA;  class {},&#xA;]&#xA;&#xA;for (value of values) {&#xA;  console.log(typeOf(value))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;boolean&#xA;number&#xA;string&#xA;symbol&#xA;null&#xA;undefined&#xA;number&#xA;object&#xA;array&#xA;function&#xA;error&#xA;date&#xA;regexp&#xA;map&#xA;set&#xA;promise&#xA;generatorfunction&#xA;function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;reflect&#34;&#xA;&#x9;&#34;regexp&#34;&#xA;&#x9;&#34;time&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;values := []interface{}{&#xA;&#x9;&#x9;true,&#xA;&#x9;&#x9;int8(10),&#xA;&#x9;&#x9;int16(10),&#xA;&#x9;&#x9;int32(10),&#xA;&#x9;&#x9;int64(10),&#xA;&#x9;&#x9;uint(10),&#xA;&#x9;&#x9;uint8(10),&#xA;&#x9;&#x9;uint16(10),&#xA;&#x9;&#x9;uint32(10),&#xA;&#x9;&#x9;uint64(10),&#xA;&#x9;&#x9;uintptr(10),&#xA;&#x9;&#x9;float32(10.5),&#xA;&#x9;&#x9;float64(10.5),&#xA;&#x9;&#x9;complex64(-1 + 10i),&#xA;&#x9;&#x9;complex128(-1 + 10i),&#xA;&#x9;&#x9;&#34;foo&#34;,&#xA;&#x9;&#x9;byte(10),&#xA;&#x9;&#x9;&#39;a&#39;,&#xA;&#x9;&#x9;rune(&#39;a&#39;),&#xA;&#x9;&#x9;struct{}{},&#xA;&#x9;&#x9;[]string{},&#xA;&#x9;&#x9;map[string]int{},&#xA;&#x9;&#x9;func() {},&#xA;&#x9;&#x9;make(chan bool),&#xA;&#x9;&#x9;nil,&#xA;&#x9;&#x9;new(int),&#xA;&#x9;&#x9;time.Now(),&#xA;&#x9;&#x9;regexp.MustCompile(`^a$`),&#xA;&#x9;}&#xA;&#xA;&#x9;for _, value := range values {&#xA;&#x9;&#x9;fmt.Println(reflect.TypeOf(value))&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bool&#xA;int8&#xA;int16&#xA;int32&#xA;int64&#xA;uint&#xA;uint8&#xA;uint16&#xA;uint32&#xA;uint64&#xA;uintptr&#xA;float32&#xA;float64&#xA;complex64&#xA;complex128&#xA;string&#xA;uint8&#xA;int32&#xA;int32&#xA;struct {}&#xA;[]string&#xA;map[string]int&#xA;func()&#xA;chan bool&#xA;&amp;lt;nil&amp;gt;&#xA;*int&#xA;time.Time&#xA;*regexp.Regexp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;if/else&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const array = [1, 2]&#xA;&#xA;if (array) {&#xA;  console.log(&#39;array exists&#39;)&#xA;}&#xA;&#xA;if (array.length === 2) {&#xA;  console.log(&#39;length is 2&#39;)&#xA;} else if (array.length === 1) {&#xA;  console.log(&#39;length is 1&#39;)&#xA;} else {&#xA;  console.log(&#39;length is other&#39;)&#xA;}&#xA;&#xA;const isOddLength = array.length % 2 == 1 ? &#39;yes&#39; : &#39;no&#39;&#xA;&#xA;console.log(isOddLength)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;array exists&#xA;length is 2&#xA;no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;array := []byte{1, 2}&#xA;&#xA;&#x9;if array != nil {&#xA;&#x9;&#x9;fmt.Println(&#34;array exists&#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;if len(array) == 2 {&#xA;&#x9;&#x9;fmt.Println(&#34;length is 2&#34;)&#xA;&#x9;} else if len(array) == 1 {&#xA;&#x9;&#x9;fmt.Println(&#34;length is 1&#34;)&#xA;&#x9;} else {&#xA;&#x9;&#x9;fmt.Println(&#34;length is other&#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;// closest thing to ternary operator&#xA;&#x9;isOddLength := &#34;no&#34;&#xA;&#x9;if len(array)%2 == 1 {&#xA;&#x9;&#x9;isOddLength = &#34;yes&#34;&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(isOddLength)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;array exists&#xA;length is 2&#xA;no&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;for&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;for (let i = 0; i &amp;lt;= 5; i++) {&#xA;  console.log(i)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;for i := 0; i &amp;lt;= 5; i++ {&#xA;&#x9;&#x9;fmt.Println(i)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;while&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;let i = 0&#xA;&#xA;while (i &amp;lt;= 5) {&#xA;  console.log(i)&#xA;&#xA;  i++&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;(there&#39;s no &lt;em&gt;while&lt;/em&gt; keyword in Go but the same functionality is achieved by using &lt;em&gt;for&lt;/em&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;i := 0&#xA;&#xA;&#x9;for i &amp;lt;= 5 {&#xA;&#x9;&#x9;fmt.Println(i)&#xA;&#xA;&#x9;&#x9;i++&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0&#xA;1&#xA;2&#xA;3&#xA;4&#xA;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;switch&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const value = &#39;b&#39;&#xA;&#xA;switch(value) {&#xA;  case &#39;a&#39;:&#xA;    console.log(&#39;A&#39;)&#xA;    break&#xA;  case &#39;b&#39;:&#xA;    console.log(&#39;B&#39;)&#xA;    break&#xA;  case &#39;c&#39;:&#xA;    console.log(&#39;C&#39;)&#xA;    break&#xA;  default:&#xA;    console.log(&#39;first default&#39;)&#xA;}&#xA;&#xA;switch(value) {&#xA;  case &#39;a&#39;:&#xA;    console.log(&#39;A - falling through&#39;)&#xA;  case &#39;b&#39;:&#xA;    console.log(&#39;B - falling through&#39;)&#xA;  case &#39;c&#39;:&#xA;    console.log(&#39;C - falling through&#39;)&#xA;  default:&#xA;    console.log(&#39;second default&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;B&#xA;B - falling through&#xA;C - falling through&#xA;second default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;value := &#34;b&#34;&#xA;&#xA;&#x9;switch value {&#xA;&#x9;case &#34;a&#34;:&#xA;&#x9;&#x9;fmt.Println(&#34;A&#34;)&#xA;&#x9;case &#34;b&#34;:&#xA;&#x9;&#x9;fmt.Println(&#34;B&#34;)&#xA;&#x9;case &#34;c&#34;:&#xA;&#x9;&#x9;fmt.Println(&#34;C&#34;)&#xA;&#x9;default:&#xA;&#x9;&#x9;fmt.Println(&#34;first default&#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;switch value {&#xA;&#x9;case &#34;a&#34;:&#xA;&#x9;&#x9;fmt.Println(&#34;A - falling through&#34;)&#xA;&#x9;&#x9;fallthrough&#xA;&#x9;case &#34;b&#34;:&#xA;&#x9;&#x9;fmt.Println(&#34;B - falling through&#34;)&#xA;&#x9;&#x9;fallthrough&#xA;&#x9;case &#34;c&#34;:&#xA;&#x9;&#x9;fmt.Println(&#34;C - falling through&#34;)&#xA;&#x9;&#x9;fallthrough&#xA;&#x9;default:&#xA;&#x9;&#x9;fmt.Println(&#34;second default&#34;)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;B&#xA;B - falling through&#xA;C - falling through&#xA;second default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;arrays&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of slicing, copying, appending, and prepending arrays.&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const array = [1, 2, 3, 4, 5]&#xA;console.log(array)&#xA;&#xA;const clone = array.slice(0)&#xA;console.log(clone)&#xA;&#xA;const sub = array.slice(2,4)&#xA;console.log(sub)&#xA;&#xA;const concatenated = clone.concat([6, 7])&#xA;console.log(concatenated)&#xA;&#xA;const prepended = [-2,-1,0].concat(concatenated)&#xA;console.log(prepended)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[ 1, 2, 3, 4, 5 ]&#xA;[ 1, 2, 3, 4, 5 ]&#xA;[ 3, 4 ]&#xA;[ 1, 2, 3, 4, 5, 6, 7 ]&#xA;[ -2, -1, 0, 1, 2, 3, 4, 5, 6, 7 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;array := []int{1, 2, 3, 4, 5}&#xA;&#x9;fmt.Println(array)&#xA;&#xA;&#x9;clone := make([]int, len(array))&#xA;&#x9;copy(clone, array)&#xA;&#x9;fmt.Println(clone)&#xA;&#xA;&#x9;sub := array[2:4]&#xA;&#x9;fmt.Println(sub)&#xA;&#xA;&#x9;concatenated := append(array, []int{6, 7}...)&#xA;&#x9;fmt.Println(concatenated)&#xA;&#xA;&#x9;prepended := append([]int{-2, -1, 0}, concatenated...)&#xA;&#x9;fmt.Println(prepended)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[1 2 3 4 5]&#xA;[1 2 3 4 5]&#xA;[3 4]&#xA;[1 2 3 4 5 6 7]&#xA;[-2 -1 0 1 2 3 4 5 6 7]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;uint8 arrays&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const array = new Uint8Array(10)&#xA;console.log(array)&#xA;&#xA;const offset = 1&#xA;&#xA;array.set([1, 2, 3], offset)&#xA;console.log(array)&#xA;&#xA;const sub = array.subarray(2)&#xA;console.log(sub)&#xA;&#xA;const sub2 = array.subarray(2,4)&#xA;console.log(sub2)&#xA;&#xA;console.log(array)&#xA;const value = 9&#xA;const start = 5&#xA;const end = 10&#xA;array.fill(value, start, end)&#xA;console.log(array)&#xA;&#xA;console.log(array.byteLength)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Uint8Array [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]&#xA;Uint8Array [ 0, 1, 2, 3, 0, 0, 0, 0, 0, 0 ]&#xA;Uint8Array [ 2, 3, 0, 0, 0, 0, 0, 0 ]&#xA;Uint8Array [ 2, 3 ]&#xA;Uint8Array [ 0, 1, 2, 3, 0, 0, 0, 0, 0, 0 ]&#xA;Uint8Array [ 0, 1, 2, 3, 0, 9, 9, 9, 9, 9 ]&#xA;10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;array := make([]uint8, 10)&#xA;&#x9;fmt.Println(array)&#xA;&#xA;&#x9;offset := 1&#xA;&#xA;&#x9;copy(array[offset:], []uint8{1, 2, 3})&#xA;&#x9;fmt.Println(array)&#xA;&#xA;&#x9;sub := array[2:]&#xA;&#x9;fmt.Println(sub)&#xA;&#xA;&#x9;sub2 := array[2:4]&#xA;&#x9;fmt.Println(sub2)&#xA;&#xA;&#x9;fmt.Println(array)&#xA;&#x9;value := uint8(9)&#xA;&#x9;start := 5&#xA;&#x9;end := 10&#xA;&#x9;for i := start; i &amp;lt; end; i++ {&#xA;&#x9;&#x9;array[i] = value&#xA;&#x9;}&#xA;&#x9;fmt.Println(array)&#xA;&#xA;&#x9;fmt.Println(len(array))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[0 0 0 0 0 0 0 0 0 0]&#xA;[0 1 2 3 0 0 0 0 0 0]&#xA;[2 3 0 0 0 0 0 0]&#xA;[2 3]&#xA;[0 1 2 3 0 0 0 0 0 0]&#xA;[0 1 2 3 0 9 9 9 9 9]&#xA;10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;array iteration&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of iterating, mapping, filtering, and reducing arrays.&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const array = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]&#xA;&#xA;array.forEach((value, i) =&amp;gt; {&#xA;  console.log(i, value)&#xA;})&#xA;&#xA;const mapped = array.map(value =&amp;gt; {&#xA;  return value.toUpperCase()&#xA;})&#xA;&#xA;console.log(mapped)&#xA;&#xA;const filtered = array.filter((value, i) =&amp;gt; {&#xA;  return i % 2 == 0&#xA;})&#xA;&#xA;console.log(filtered)&#xA;&#xA;const reduced = array.reduce((acc, value, i) =&amp;gt; {&#xA;  if (i % 2 == 0) {&#xA;    acc.push(value.toUpperCase())&#xA;  }&#xA;&#xA;  return acc&#xA;}, [])&#xA;&#xA;console.log(reduced)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 &#39;a&#39;&#xA;1 &#39;b&#39;&#xA;2 &#39;c&#39;&#xA;[ &#39;A&#39;, &#39;B&#39;, &#39;C&#39; ]&#xA;[ &#39;a&#39;, &#39;c&#39; ]&#xA;[ &#39;A&#39;, &#39;C&#39; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;strings&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;array := []string{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;}&#xA;&#xA;&#x9;for i, value := range array {&#xA;&#x9;&#x9;fmt.Println(i, value)&#xA;&#x9;}&#xA;&#xA;&#x9;mapped := make([]string, len(array))&#xA;&#x9;for i, value := range array {&#xA;&#x9;&#x9;mapped[i] = strings.ToUpper(value)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(mapped)&#xA;&#xA;&#x9;var filtered []string&#xA;&#x9;for i, value := range array {&#xA;&#x9;&#x9;if i%2 == 0 {&#xA;&#x9;&#x9;&#x9;filtered = append(filtered, value)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(filtered)&#xA;&#xA;&#x9;var reduced []string&#xA;&#x9;for i, value := range array {&#xA;&#x9;&#x9;if i%2 == 0 {&#xA;&#x9;&#x9;&#x9;reduced = append(reduced, strings.ToUpper(value))&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(reduced)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;0 a&#xA;1 b&#xA;2 c&#xA;[A B C]&#xA;[a c]&#xA;[A C]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;array sorting&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of how to sort an array&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const stringArray = [&#39;a&#39;, &#39;d&#39;, &#39;z&#39;, &#39;b&#39;, &#39;c&#39;, &#39;y&#39;]&#xA;const stringArraySortedAsc = stringArray.sort((a, b) =&amp;gt; a &amp;gt; b ? 1 : -1)&#xA;console.log(stringArraySortedAsc)&#xA;&#xA;const stringArraySortedDesc = stringArray.sort((a, b) =&amp;gt; a &amp;gt; b ? -1 : 1)&#xA;console.log(stringArraySortedDesc)&#xA;&#xA;&#xA;const numberArray = [1, 3, 5, 9, 4, 2, 0]&#xA;const numberArraySortedAsc = numberArray.sort((a, b) =&amp;gt; a - b)&#xA;console.log(numberArraySortedAsc)&#xA;&#xA;const numberArraySortedDesc = numberArray.sort((a, b) =&amp;gt; b - a)&#xA;console.log(numberArraySortedDesc)&#xA;&#xA;const collection = [&#xA;    {&#xA;        name: &#34;Li L&#34;,&#xA;        age: 8&#xA;    },&#xA;    {&#xA;        name: &#34;Json C&#34;,&#xA;        age: 3&#xA;    },&#xA;    {&#xA;        name: &#34;Zack W&#34;,&#xA;        age: 15&#xA;    },&#xA;    {&#xA;        name: &#34;Yi M&#34;,&#xA;        age: 2&#xA;    }&#xA;]&#xA;&#xA;const collectionSortedByAgeAsc = collection.sort((a, b) =&amp;gt; a.age - b.age)&#xA;console.log(collectionSortedByAgeAsc)&#xA;&#xA;const collectionSortedByAgeDesc = collection.sort((a, b) =&amp;gt; b.age - a.age)&#xA;console.log(collectionSortedByAgeDesc)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[ &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;y&#39;, &#39;z&#39; ]&#xA;[ &#39;z&#39;, &#39;y&#39;, &#39;d&#39;, &#39;c&#39;, &#39;b&#39;, &#39;a&#39; ]&#xA;[ 0, 1, 2, 3, 4, 5, 9 ]&#xA;[ 9, 5, 4, 3, 2, 1, 0 ]&#xA;[ { name: &#39;Yi M&#39;, age: 2 },&#xA;  { name: &#39;Json C&#39;, age: 3 },&#xA;  { name: &#39;Li L&#39;, age: 8 },&#xA;  { name: &#39;Zack W&#39;, age: 15 } ]&#xA;[ { name: &#39;Zack W&#39;, age: 15 },&#xA;  { name: &#39;Li L&#39;, age: 8 },&#xA;  { name: &#39;Json C&#39;, age: 3 },&#xA;  { name: &#39;Yi M&#39;, age: 2 } ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;sort&#34;&#xA;)&#xA;&#xA;type Person struct {&#xA;&#x9;Name string&#xA;&#x9;Age  int&#xA;}&#xA;&#xA;type PersonCollection []Person&#xA;&#xA;func (pc PersonCollection) Len() int {&#xA;&#x9;return len(pc)&#xA;}&#xA;&#xA;func (pc PersonCollection) Swap(i, j int) {&#xA;&#x9;pc[i], pc[j] = pc[j], pc[i]&#xA;}&#xA;&#xA;func (pc PersonCollection) Less(i, j int) bool {&#xA;&#x9;// asc&#xA;&#x9;return pc[i].Age &amp;lt; pc[j].Age&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;intList := []int{1, 3, 5, 9, 4, 2, 0}&#xA;&#xA;&#x9;// asc&#xA;&#x9;sort.Ints(intList)&#xA;&#x9;fmt.Println(intList)&#xA;&#x9;// desc&#xA;&#x9;sort.Sort(sort.Reverse(sort.IntSlice(intList)))&#xA;&#x9;fmt.Println(intList)&#xA;&#xA;&#x9;stringList := []string{&#34;a&#34;, &#34;d&#34;, &#34;z&#34;, &#34;b&#34;, &#34;c&#34;, &#34;y&#34;}&#xA;&#xA;&#x9;// asc&#xA;&#x9;sort.Strings(stringList)&#xA;&#x9;fmt.Println(stringList)&#xA;&#x9;// desc&#xA;&#x9;sort.Sort(sort.Reverse(sort.StringSlice(stringList)))&#xA;&#x9;fmt.Println(stringList)&#xA;&#xA;&#x9;collection := []Person{&#xA;&#x9;&#x9;{&#34;Li L&#34;, 8},&#xA;&#x9;&#x9;{&#34;Json C&#34;, 3},&#xA;&#x9;&#x9;{&#34;Zack W&#34;, 15},&#xA;&#x9;&#x9;{&#34;Yi M&#34;, 2},&#xA;&#x9;}&#xA;&#xA;&#x9;// asc&#xA;&#x9;sort.Sort(PersonCollection(collection))&#xA;&#x9;fmt.Println(collection)&#xA;&#x9;// desc&#xA;&#x9;sort.Sort(sort.Reverse(PersonCollection(collection)))&#xA;&#x9;fmt.Println(collection)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[0 1 2 3 4 5 9]&#xA;[9 5 4 3 2 1 0]&#xA;[a b c d y z]&#xA;[z y d c b a]&#xA;[{Yi M 2} {Json C 3} {Li L 8} {Zack W 15}]&#xA;[{Zack W 15} {Li L 8} {Json C 3} {Yi M 2}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;buffers&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of how to allocate a buffer, write in big or little endian format, encode to a hex string, and check if buffers are equal.&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const buf = Buffer.alloc(6)&#xA;&#xA;let value = 0x1234567890ab&#xA;let offset = 0&#xA;let byteLength = 6&#xA;&#xA;buf.writeUIntBE(value, offset, byteLength)&#xA;&#xA;let hexstr = buf.toString(&#39;hex&#39;)&#xA;console.log(hexstr)&#xA;&#xA;const buf2 = Buffer.alloc(6)&#xA;&#xA;value = 0x1234567890ab&#xA;offset = 0&#xA;byteLength = 6&#xA;&#xA;buf2.writeUIntLE(value, offset, byteLength)&#xA;&#xA;hexstr = buf2.toString(&#39;hex&#39;)&#xA;console.log(hexstr)&#xA;&#xA;let isEqual = Buffer.compare(buf, buf2) === 0&#xA;console.log(isEqual)&#xA;&#xA;isEqual = Buffer.compare(buf, buf) === 0&#xA;console.log(isEqual)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1234567890ab&#xA;ab9078563412&#xA;false&#xA;true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;bytes&#34;&#xA;&#x9;&#34;encoding/binary&#34;&#xA;&#x9;&#34;encoding/hex&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;math/big&#34;&#xA;&#x9;&#34;reflect&#34;&#xA;)&#xA;&#xA;func writeUIntBE(buffer []byte, value, offset, byteLength int64) {&#xA;&#x9;slice := make([]byte, byteLength)&#xA;&#x9;val := new(big.Int)&#xA;&#x9;val.SetUint64(uint64(value))&#xA;&#x9;valBytes := val.Bytes()&#xA;&#xA;&#x9;buf := bytes.NewBuffer(slice)&#xA;&#x9;err := binary.Write(buf, binary.BigEndian, &amp;amp;valBytes)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatal(err)&#xA;&#x9;}&#xA;&#xA;&#x9;slice = buf.Bytes()&#xA;&#x9;slice = slice[int64(len(slice))-byteLength : len(slice)]&#xA;&#xA;&#x9;copy(buffer[offset:], slice)&#xA;}&#xA;&#xA;func writeUIntLE(buffer []byte, value, offset, byteLength int64) {&#xA;&#x9;slice := make([]byte, byteLength)&#xA;&#x9;val := new(big.Int)&#xA;&#x9;val.SetUint64(uint64(value))&#xA;&#x9;valBytes := val.Bytes()&#xA;&#xA;&#x9;tmp := make([]byte, len(valBytes))&#xA;&#x9;for i := range valBytes {&#xA;&#x9;&#x9;tmp[i] = valBytes[len(valBytes)-1-i]&#xA;&#x9;}&#xA;&#xA;&#x9;copy(slice, tmp)&#xA;&#x9;copy(buffer[offset:], slice)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;buf := make([]byte, 6)&#xA;&#x9;writeUIntBE(buf, 0x1234567890ab, 0, 6)&#xA;&#xA;&#x9;fmt.Println(hex.EncodeToString(buf))&#xA;&#xA;&#x9;buf2 := make([]byte, 6)&#xA;&#x9;writeUIntLE(buf2, 0x1234567890ab, 0, 6)&#xA;&#xA;&#x9;fmt.Println(hex.EncodeToString(buf2))&#xA;&#xA;&#x9;isEqual := reflect.DeepEqual(buf, buf2)&#xA;&#x9;fmt.Println(isEqual)&#xA;&#xA;&#x9;isEqual = reflect.DeepEqual(buf, buf)&#xA;&#x9;fmt.Println(isEqual)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1234567890ab&#xA;ab9078563412&#xA;false&#xA;true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;maps&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const map = new Map()&#xA;map.set(&#39;foo&#39;, &#39;bar&#39;)&#xA;&#xA;let found = map.has(&#39;foo&#39;)&#xA;console.log(found)&#xA;&#xA;let item = map.get(&#39;foo&#39;)&#xA;console.log(item)&#xA;&#xA;map.delete(&#39;foo&#39;)&#xA;&#xA;found = map.has(&#39;foo&#39;)&#xA;console.log(found)&#xA;&#xA;item = map.get(&#39;foo&#39;)&#xA;console.log(item)&#xA;&#xA;const map2 = {}&#xA;map2[&#39;foo&#39;] = &#39;bar&#39;&#xA;item = map2[&#39;foo&#39;]&#xA;delete map2[&#39;foo&#39;]&#xA;&#xA;const map3 = new Map()&#xA;map3.set(&#39;foo&#39;, 100)&#xA;map3.set(&#39;bar&#39;, 200)&#xA;map3.set(&#39;baz&#39;, 300)&#xA;&#xA;for (let [key, value] of map3) {&#xA;  console.log(key, value)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;true&#xA;bar&#xA;false&#xA;undefined&#xA;foo 100&#xA;bar 200&#xA;baz 300&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;map1 := make(map[string]string)&#xA;&#xA;&#x9;map1[&#34;foo&#34;] = &#34;bar&#34;&#xA;&#xA;&#x9;item, found := map1[&#34;foo&#34;]&#xA;&#x9;fmt.Println(found)&#xA;&#x9;fmt.Println(item)&#xA;&#xA;&#x9;delete(map1, &#34;foo&#34;)&#xA;&#xA;&#x9;item, found = map1[&#34;foo&#34;]&#xA;&#x9;fmt.Println(found)&#xA;&#x9;fmt.Println(item)&#xA;&#xA;&#x9;map2 := make(map[string]int)&#xA;&#x9;map2[&#34;foo&#34;] = 100&#xA;&#x9;map2[&#34;bar&#34;] = 200&#xA;&#x9;map2[&#34;baz&#34;] = 300&#xA;&#xA;&#x9;for key, value := range map2 {&#xA;&#x9;&#x9;fmt.Println(key, value)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;true&#xA;bar&#xA;false&#xA;&#xA;foo 100&#xA;bar 200&#xA;baz 300&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;objects&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const obj = {&#xA;  someProperties: {&#xA;    &#39;foo&#39;: &#39;bar&#39;&#xA;  },&#xA;  someMethod: (prop) =&amp;gt; {&#xA;    return obj.someProperties[prop]&#xA;  }&#xA;}&#xA;&#xA;let item =  obj.someProperties[&#39;foo&#39;]&#xA;console.log(item)&#xA;&#xA;item = obj.someMethod(&#39;foo&#39;)&#xA;console.log(item)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bar&#xA;bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;type Obj struct {&#xA;&#x9;SomeProperties map[string]string&#xA;}&#xA;&#xA;func NewObj() *Obj {&#xA;&#x9;return &amp;amp;Obj{&#xA;&#x9;&#x9;SomeProperties: map[string]string{&#xA;&#x9;&#x9;&#x9;&#34;foo&#34;: &#34;bar&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;}&#xA;&#xA;func (o *Obj) SomeMethod(prop string) string {&#xA;&#x9;return o.SomeProperties[prop]&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;obj := NewObj()&#xA;&#xA;&#x9;item := obj.SomeProperties[&#34;foo&#34;]&#xA;&#x9;fmt.Println(item)&#xA;&#xA;&#x9;item = obj.SomeMethod(&#34;foo&#34;)&#xA;&#x9;fmt.Println(item)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bar&#xA;bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;functions&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function add(a, b) {&#xA;  return a + b&#xA;}&#xA;&#xA;const result = add(2,3)&#xA;console.log(result)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func add(a int, b int) int {&#xA;&#x9;return a + b&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;result := add(2, 3)&#xA;&#x9;fmt.Println(result)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;default values&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function greet(name = &#39;stranger&#39;) {&#xA;  return `hello ${name}`&#xA;}&#xA;&#xA;let message = greet()&#xA;console.log(message)&#xA;&#xA;message = greet(&#39;bob&#39;)&#xA;console.log(message)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello stranger&#xA;hello bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;use pointers and check for nil to know if explicitly left blank&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func greet(name *string) string {&#xA;&#x9;n := &#34;stranger&#34;&#xA;&#x9;if name != nil {&#xA;&#x9;&#x9;n = *name&#xA;&#x9;}&#xA;&#xA;&#x9;return fmt.Sprintf(&#34;hello %s&#34;, n)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;message := greet(nil)&#xA;&#x9;fmt.Println(message)&#xA;&#xA;&#x9;name := &#34;bob&#34;&#xA;&#x9;message = greet(&amp;amp;name)&#xA;&#x9;fmt.Println(message)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello stranger&#xA;hello bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;destructuring&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const obj = { key: &#39;foo&#39;, value: &#39;bar&#39; }&#xA;&#xA;const { key, value } = obj&#xA;console.log(key, value)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;foo bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;type Obj struct {&#xA;&#x9;Key   string&#xA;&#x9;Value string&#xA;}&#xA;&#xA;func (o *Obj) Read() (string, string) {&#xA;&#x9;return o.Key, o.Value&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;obj := Obj{&#xA;&#x9;&#x9;Key:   &#34;foo&#34;,&#xA;&#x9;&#x9;Value: &#34;bar&#34;,&#xA;&#x9;}&#xA;&#xA;&#x9;// option 1: multiple variable assignment&#xA;&#x9;key, value := obj.Key, obj.Value&#xA;&#x9;fmt.Println(key, value)&#xA;&#xA;&#x9;// option 2: return multiple values from a function&#xA;&#x9;key, value = obj.Read()&#xA;&#x9;fmt.Println(key, value)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;foo bar&#xA;foo bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;spread operator&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const array = [1, 2, 3, 4, 5]&#xA;&#xA;console.log(...array)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1 2 3 4 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;array := []byte{1, 2, 3, 4, 5}&#xA;&#xA;&#x9;var i []interface{}&#xA;&#x9;for _, value := range array {&#xA;&#x9;&#x9;i = append(i, value)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(i...)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1 2 3 4 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;rest operator&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function sum(...nums) {&#xA;&#x9;let t = 0&#xA;&#xA;&#x9;for (let n of nums) {&#xA;&#x9;&#x9;t += n&#xA;&#x9;}&#xA;&#xA;&#x9;return t&#xA;}&#xA;&#xA;const total = sum(1, 2, 3, 4, 5)&#xA;console.log(total)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func sum(nums ...int) int {&#xA;&#x9;var t int&#xA;&#x9;for _, n := range nums {&#xA;&#x9;&#x9;t += n&#xA;&#x9;}&#xA;&#xA;&#x9;return t&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;total := sum(1, 2, 3, 4, 5)&#xA;&#x9;fmt.Println(total)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;swapping&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;let a = &#39;foo&#39;&#xA;let b = &#39;bar&#39;&#xA;&#xA;console.log(a, b);&#xA;&#xA;[b, a] = [a, b]&#xA;&#xA;console.log(a, b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;foo bar&#xA;bar foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;a := &#34;foo&#34;&#xA;&#x9;b := &#34;bar&#34;&#xA;&#xA;&#x9;fmt.Println(a, b)&#xA;&#xA;&#x9;b, a = a, b&#xA;&#xA;&#x9;fmt.Println(a, b)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;foo bar&#xA;bar foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;classes&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of classes, constructors, instantiation, and &#34;this&#34; keyword.&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;class Foo {&#xA;  constructor(value) {&#xA;    this.item = value&#xA;  }&#xA;&#xA;  getItem() {&#xA;    return this.item&#xA;  }&#xA;&#xA;  setItem(value) {&#xA;    this.item = value&#xA;  }&#xA;}&#xA;&#xA;const foo = new Foo(&#39;bar&#39;)&#xA;console.log(foo.item)&#xA;&#xA;foo.setItem(&#39;qux&#39;)&#xA;&#xA;const item = foo.getItem()&#xA;console.log(item)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bar&#xA;qux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;(closest thing to a class is to use a structure)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;type Foo struct {&#xA;&#x9;Item string&#xA;}&#xA;&#xA;func NewFoo(value string) *Foo {&#xA;&#x9;return &amp;amp;Foo{&#xA;&#x9;&#x9;Item: value,&#xA;&#x9;}&#xA;}&#xA;&#xA;func (f *Foo) GetItem() string {&#xA;&#x9;return f.Item&#xA;}&#xA;&#xA;func (f *Foo) SetItem(value string) {&#xA;&#x9;f.Item = value&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;foo := NewFoo(&#34;bar&#34;)&#xA;&#x9;fmt.Println(foo.Item)&#xA;&#xA;&#x9;foo.SetItem(&#34;qux&#34;)&#xA;&#xA;&#x9;item := foo.GetItem()&#xA;&#x9;fmt.Println(item)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bar&#xA;qux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;generators&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function *generator() {&#xA;  yield &#39;hello&#39;&#xA;  yield &#39;world&#39;&#xA;}&#xA;&#xA;let gen = generator()&#xA;&#xA;while (true) {&#xA;  let { value, done } = gen.next()&#xA;  console.log(value, done)&#xA;&#xA;  if (done) {&#xA;    break&#xA;  }&#xA;}&#xA;&#xA;// alternatively&#xA;for (let value of generator()) {&#xA;  console.log(value)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello false&#xA;world false&#xA;undefined true&#xA;hello&#xA;world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func Generator() chan string {&#xA;&#x9;c := make(chan string)&#xA;&#xA;&#x9;go func() {&#xA;&#x9;&#x9;c &amp;lt;- &#34;hello&#34;&#xA;&#x9;&#x9;c &amp;lt;- &#34;world&#34;&#xA;&#xA;&#x9;&#x9;close(c)&#xA;&#x9;}()&#xA;&#xA;&#x9;return c&#xA;}&#xA;&#xA;func GeneratorFunc() func() (string, bool) {&#xA;&#x9;s := []string{&#34;hello&#34;, &#34;world&#34;}&#xA;&#x9;i := -1&#xA;&#xA;&#x9;return func() (string, bool) {&#xA;&#x9;&#x9;i++&#xA;&#x9;&#x9;if i &amp;gt;= len(s) {&#xA;&#x9;&#x9;&#x9;return &#34;&#34;, false&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;return s[i], true&#xA;&#x9;}&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;gen := Generator()&#xA;&#x9;for {&#xA;&#x9;&#x9;value, more := &amp;lt;-gen&#xA;&#x9;&#x9;fmt.Println(value, more)&#xA;&#xA;&#x9;&#x9;if !more {&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;// alternatively&#xA;&#x9;for value := range Generator() {&#xA;&#x9;&#x9;fmt.Println(value)&#xA;&#x9;}&#xA;&#xA;&#x9;// alternatively&#xA;&#x9;genfn := GeneratorFunc()&#xA;&#x9;for {&#xA;&#x9;&#x9;value, more := genfn()&#xA;&#x9;&#x9;fmt.Println(value, more)&#xA;&#xA;&#x9;&#x9;if !more {&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello true&#xA;world true&#xA; false&#xA;hello&#xA;world&#xA;hello true&#xA;world true&#xA; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;datetime&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of parsing, formatting, and getting unix timestamp of dates.&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const nowUnix = Date.now()&#xA;console.log(nowUnix)&#xA;&#xA;const datestr = &#39;2019-01-17T09:24:23+00:00&#39;&#xA;const date = new Date(datestr)&#xA;console.log(date.getTime())&#xA;console.log(date.toString())&#xA;&#xA;const futureDate = new Date(date)&#xA;futureDate.setDate(date.getDate()+14)&#xA;console.log(futureDate.toString())&#xA;&#xA;const formatted = `${String(date.getMonth()+1).padStart(2, 0)}/${String(date.getDate()).padStart(2, 0)}/${date.getFullYear()}`&#xA;console.log(formatted)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1547718844168&#xA;1547717063000&#xA;Thu Jan 17 2019 01:24:23 GMT-0800 (Pacific Standard Time)&#xA;Thu Jan 31 2019 01:24:23 GMT-0800 (Pacific Standard Time)&#xA;01/17/2019&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;nowUnix := time.Now().Unix()&#xA;&#x9;fmt.Println(nowUnix)&#xA;&#xA;&#x9;datestr := &#34;2019-01-17T09:24:23+00:00&#34;&#xA;&#x9;date, err := time.Parse(&#34;2006-01-02T15:04:05Z07:00&#34;, datestr)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(date.Unix())&#xA;&#x9;fmt.Println(date.String())&#xA;&#xA;&#x9;futureDate := date.AddDate(0, 0, 14)&#xA;&#x9;fmt.Println(futureDate.String())&#xA;&#xA;&#x9;formatted := date.Format(&#34;01/02/2006&#34;)&#xA;&#x9;fmt.Println(formatted)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1547718844&#xA;1547717063&#xA;2019-01-17 09:24:23 +0000 +0000&#xA;2019-01-31 09:24:23 +0000 +0000&#xA;01/17/2019&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;timeout&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;setTimeout(callback, 1e3)&#xA;&#xA;function callback() {&#xA;  console.log(&#39;called&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;called&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;sync&#34;&#xA;&#x9;&#34;time&#34;&#xA;)&#xA;&#xA;var wg sync.WaitGroup&#xA;&#xA;func callback() {&#xA;&#x9;defer wg.Done()&#xA;&#x9;fmt.Println(&#34;called&#34;)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;wg.Add(1)&#xA;&#x9;time.AfterFunc(1*time.Second, callback)&#xA;&#x9;wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;called&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;interval&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;let i = 0&#xA;&#xA;const id = setInterval(callback, 1e3)&#xA;&#xA;function callback() {&#xA;  console.log(&#39;called&#39;, i)&#xA;&#xA;  if (i === 3) {&#xA;    clearInterval(id)&#xA;  }&#xA;&#xA;  i++&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;called 0&#xA;called 1&#xA;called 2&#xA;called 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;)&#xA;&#xA;func callback(i int) {&#xA;&#x9;fmt.Println(&#34;called&#34;, i)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;ticker := time.NewTicker(1 * time.Second)&#xA;&#xA;&#x9;i := 0&#xA;&#x9;for range ticker.C {&#xA;&#x9;&#x9;callback(i)&#xA;&#xA;&#x9;&#x9;if i == 3 {&#xA;&#x9;&#x9;&#x9;ticker.Stop()&#xA;&#x9;&#x9;&#x9;break&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;i++&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;called 0&#xA;called 1&#xA;called 2&#xA;called 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;IIFE&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Immediately invoked function expression&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;(function(name) {&#xA;  console.log(&#39;hello&#39;, name)&#xA;})(&#39;bob&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;func main() {&#xA;&#x9;func(name string) {&#xA;&#x9;&#x9;fmt.Println(&#34;hello&#34;, name)&#xA;&#x9;}(&#34;bob&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;files&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of creating, opening, writing, reading, closing, and deleting files.&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const fs = require(&#39;fs&#39;)&#xA;&#xA;// create file&#xA;fs.closeSync(fs.openSync(&#39;test.txt&#39;, &#39;w&#39;))&#xA;&#xA;// open file (returns file descriptor)&#xA;const fd = fs.openSync(&#39;test.txt&#39;, &#39;r+&#39;)&#xA;&#xA;let wbuf = Buffer.from(&#39;hello world.&#39;)&#xA;let rbuf = Buffer.alloc(12)&#xA;let off = 0&#xA;let len = 12&#xA;let pos = 0&#xA;&#xA;// write file&#xA;fs.writeSync(fd, wbuf, pos)&#xA;&#xA;// read file&#xA;fs.readSync(fd, rbuf, off, len, pos)&#xA;&#xA;console.log(rbuf.toString())&#xA;&#xA;// close file&#xA;fs.closeSync(fd)&#xA;&#xA;// delete file&#xA;fs.unlinkSync(&#39;test.txt&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#x9;&#34;syscall&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// create file&#xA;&#x9;file, err := os.Create(&#34;test.txt&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// close file&#xA;&#x9;file.Close()&#xA;&#xA;&#x9;// open file&#xA;&#x9;file, err = os.OpenFile(&#34;test.txt&#34;, os.O_RDWR, 0755)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// file descriptor&#xA;&#x9;fd := file.Fd()&#xA;&#xA;&#x9;// open file (using file descriptor)&#xA;&#x9;file = os.NewFile(fd, &#34;test file&#34;)&#xA;&#xA;&#x9;wbuf := []byte(&#34;hello world.&#34;)&#xA;&#x9;rbuf := make([]byte, 12)&#xA;&#x9;var off int64&#xA;&#xA;&#x9;// write file&#xA;&#x9;if _, err := file.WriteAt(wbuf, off); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// read file&#xA;&#x9;if _, err := file.ReadAt(rbuf, off); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(string(rbuf))&#xA;&#xA;&#x9;// close file (using file descriptor)&#xA;&#x9;if err := syscall.Close(int(fd)); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// delete file&#xA;&#x9;if err := os.Remove(&#34;test.txt&#34;); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;json&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of how to parse (unmarshal) and stringify (marshal) JSON.&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;let jsonstr = &#39;{&#34;foo&#34;:&#34;bar&#34;}&#39;&#xA;&#xA;let parsed = JSON.parse(jsonstr)&#xA;console.log(parsed)&#xA;&#xA;jsonstr = JSON.stringify(parsed)&#xA;console.log(jsonstr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{ foo: &#39;bar&#39; }&#xA;{&#34;foo&#34;:&#34;bar&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/json&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;type T struct {&#xA;&#x9;Foo string `json:&#34;foo&#34;`&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;jsonstr := `{&#34;foo&#34;:&#34;bar&#34;}`&#xA;&#xA;&#x9;t := new(T)&#xA;&#x9;err := json.Unmarshal([]byte(jsonstr), t)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(t)&#xA;&#xA;&#x9;marshalled, err := json.Marshal(t)&#xA;&#x9;jsonstr = string(marshalled)&#xA;&#x9;fmt.Println(jsonstr)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;amp;{bar}&#xA;{&#34;foo&#34;:&#34;bar&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;big numbers&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of creating big number types from and to uint, string, hex, and buffers.&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;let bn = 75n;&#xA;console.log(bn.toString(10))&#xA;&#xA;bn = BigInt(&#39;75&#39;)&#xA;console.log(bn.toString(10))&#xA;&#xA;bn = BigInt(0x4b)&#xA;console.log(bn.toString(10))&#xA;&#xA;bn = BigInt(&#39;0x4b&#39;)&#xA;console.log(bn.toString(10))&#xA;&#xA;bn = BigInt(&#39;0x&#39; + Buffer.from(&#39;4b&#39;, &#39;hex&#39;).toString(&#39;hex&#39;))&#xA;console.log(bn.toString(10))&#xA;console.log(Number(bn))&#xA;console.log(bn.toString(16))&#xA;console.log(Buffer.from(bn.toString(16), &#39;hex&#39;))&#xA;&#xA;let bn2 = BigInt(100)&#xA;let isEqual = bn === bn2&#xA;console.log(isEqual)&#xA;&#xA;let isGreater = bn &amp;gt; bn2&#xA;console.log(isGreater)&#xA;&#xA;let isLesser = bn &amp;lt; bn2&#xA;console.log(isLesser)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;75&#xA;75&#xA;75&#xA;75&#xA;75&#xA;75&#xA;4b&#xA;&amp;lt;Buffer 4b&amp;gt;&#xA;false&#xA;false&#xA;true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;encoding/hex&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;math/big&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;bn := new(big.Int)&#xA;&#x9;bn.SetUint64(75)&#xA;&#x9;fmt.Println(bn.String())&#xA;&#xA;&#x9;bn = new(big.Int)&#xA;&#x9;bn.SetString(&#34;75&#34;, 10)&#xA;&#x9;fmt.Println(bn.String())&#xA;&#xA;&#x9;bn = new(big.Int)&#xA;&#x9;bn.SetUint64(0x4b)&#xA;&#x9;fmt.Println(bn.String())&#xA;&#xA;&#x9;bn = new(big.Int)&#xA;&#x9;bn.SetString(&#34;4b&#34;, 16)&#xA;&#x9;fmt.Println(bn.String())&#xA;&#xA;&#x9;bn = new(big.Int)&#xA;&#x9;bn.SetBytes([]byte{0x4b})&#xA;&#x9;fmt.Println(bn.String())&#xA;&#x9;fmt.Println(bn.Uint64())&#xA;&#x9;fmt.Println(hex.EncodeToString(bn.Bytes()))&#xA;&#x9;fmt.Println(bn.Bytes())&#xA;&#xA;&#x9;bn2 := big.NewInt(100)&#xA;&#x9;isEqual := bn.Cmp(bn2) == 0&#xA;&#x9;fmt.Println(isEqual)&#xA;&#xA;&#x9;isGreater := bn.Cmp(bn2) == 1&#xA;&#x9;fmt.Println(isGreater)&#xA;&#xA;&#x9;isLesser := bn.Cmp(bn2) == -1&#xA;&#x9;fmt.Println(isLesser)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;75&#xA;75&#xA;75&#xA;75&#xA;75&#xA;75&#xA;4b&#xA;[75]&#xA;false&#xA;false&#xA;true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;promises&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function asyncMethod(value) {&#xA;  return new Promise((resolve, reject) =&amp;gt; {&#xA;    setTimeout(() =&amp;gt; {&#xA;      resolve(&#39;resolved: &#39; + value)&#xA;    }, 1e3)&#xA;  })&#xA;}&#xA;&#xA;function main() {&#xA;  asyncMethod(&#39;foo&#39;)&#xA;    .then(result =&amp;gt; console.log(result))&#xA;    .catch(err =&amp;gt; console.error(err))&#xA;&#xA;  Promise.all([&#xA;    asyncMethod(&#39;A&#39;),&#xA;    asyncMethod(&#39;B&#39;),&#xA;    asyncMethod(&#39;C&#39;)&#xA;  ])&#xA;  .then(result =&amp;gt; console.log(result))&#xA;  .catch(err =&amp;gt; console.error(err))&#xA;}&#xA;&#xA;main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;resolved: foo&#xA;[ &#39;resolved: A&#39;, &#39;resolved: B&#39;, &#39;resolved: C&#39; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;(closest thing is to use channels)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;sync&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/prometheus/common/log&#34;&#xA;)&#xA;&#xA;func asyncMethod(value string) chan interface{} {&#xA;&#x9;ch := make(chan interface{}, 1)&#xA;&#x9;go func() {&#xA;&#x9;&#x9;time.Sleep(1 * time.Second)&#xA;&#x9;&#x9;ch &amp;lt;- &#34;resolved: &#34; + value&#xA;&#x9;&#x9;close(ch)&#xA;&#x9;}()&#xA;&#xA;&#x9;return ch&#xA;}&#xA;&#xA;func resolveAll(ch ...chan interface{}) chan interface{} {&#xA;&#x9;var wg sync.WaitGroup&#xA;&#x9;res := make([]string, len(ch))&#xA;&#x9;resCh := make(chan interface{}, 1)&#xA;&#xA;&#x9;go func() {&#xA;&#x9;&#x9;for i, c := range ch {&#xA;&#x9;&#x9;&#x9;wg.Add(1)&#xA;&#x9;&#x9;&#x9;go func(j int, ifcCh chan interface{}) {&#xA;&#x9;&#x9;&#x9;&#x9;ifc := &amp;lt;-ifcCh&#xA;&#x9;&#x9;&#x9;&#x9;switch v := ifc.(type) {&#xA;&#x9;&#x9;&#x9;&#x9;case error:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resCh &amp;lt;- v&#xA;&#x9;&#x9;&#x9;&#x9;case string:&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;res[j] = v&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;wg.Done()&#xA;&#x9;&#x9;&#x9;}(i, c)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;wg.Wait()&#xA;&#x9;&#x9;resCh &amp;lt;- res&#xA;&#x9;&#x9;close(resCh)&#xA;&#x9;}()&#xA;&#xA;&#x9;return resCh&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;var wg sync.WaitGroup&#xA;&#x9;wg.Add(2)&#xA;&#xA;&#x9;go func() {&#xA;&#x9;&#x9;result := &amp;lt;-asyncMethod(&#34;foo&#34;)&#xA;&#x9;&#x9;switch v := result.(type) {&#xA;&#x9;&#x9;case string:&#xA;&#x9;&#x9;&#x9;fmt.Println(v)&#xA;&#x9;&#x9;case error:&#xA;&#x9;&#x9;&#x9;log.Errorln(v)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;wg.Done()&#xA;&#x9;}()&#xA;&#xA;&#x9;go func() {&#xA;&#x9;&#x9;result := &amp;lt;-resolveAll(&#xA;&#x9;&#x9;&#x9;asyncMethod(&#34;A&#34;),&#xA;&#x9;&#x9;&#x9;asyncMethod(&#34;B&#34;),&#xA;&#x9;&#x9;&#x9;asyncMethod(&#34;C&#34;),&#xA;&#x9;&#x9;)&#xA;&#xA;&#x9;&#x9;switch v := result.(type) {&#xA;&#x9;&#x9;case []string:&#xA;&#x9;&#x9;&#x9;fmt.Println(v)&#xA;&#x9;&#x9;case error:&#xA;&#x9;&#x9;&#x9;log.Errorln(v)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;wg.Done()&#xA;&#x9;}()&#xA;&#xA;&#x9;wg.Wait()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;resolved: foo&#xA;[resolved: A resolved: B resolved: C]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;async/await&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function hello(name) {&#xA;  return new Promise((resolve, reject) =&amp;gt; {&#xA;    setTimeout(() =&amp;gt; {&#xA;      if (name === &#39;fail&#39;) {&#xA;        reject(new Error(&#39;failed&#39;))&#xA;      } else {&#xA;        resolve(&#39;hello &#39; + name)&#xA;      }&#xA;    }, 1e3)&#xA;  })&#xA;}&#xA;&#xA;async function main() {&#xA;  try {&#xA;    let output = await hello(&#39;bob&#39;)&#xA;    console.log(output)&#xA;&#xA;    output = await hello(&#39;fail&#39;)&#xA;    console.log(output)&#xA;  } catch(err) {&#xA;    console.log(err.message)&#xA;  }&#xA;}&#xA;&#xA;main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello bob&#xA;failed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;(closest thing is to use channels)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/prometheus/common/log&#34;&#xA;)&#xA;&#xA;func hello(name string) chan interface{} {&#xA;&#x9;ch := make(chan interface{}, 1)&#xA;&#x9;go func() {&#xA;&#x9;&#x9;time.Sleep(1 * time.Second)&#xA;&#x9;&#x9;if name == &#34;fail&#34; {&#xA;&#x9;&#x9;&#x9;ch &amp;lt;- errors.New(&#34;failed&#34;)&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;ch &amp;lt;- &#34;hello &#34; + name&#xA;&#x9;&#x9;}&#xA;&#x9;}()&#xA;&#xA;&#x9;return ch&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;result := &amp;lt;-hello(&#34;bob&#34;)&#xA;&#x9;switch v := result.(type) {&#xA;&#x9;case string:&#xA;&#x9;&#x9;fmt.Println(v)&#xA;&#x9;case error:&#xA;&#x9;&#x9;log.Errorln(v)&#xA;&#x9;}&#xA;&#xA;&#x9;result = &amp;lt;-hello(&#34;fail&#34;)&#xA;&#x9;switch v := result.(type) {&#xA;&#x9;case string:&#xA;&#x9;&#x9;fmt.Println(v)&#xA;&#x9;case error:&#xA;&#x9;&#x9;log.Errorln(v)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello bob&#xA;failed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;streams&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Examples of reading and writing streams&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const { Readable, Writable } = require(&#39;stream&#39;)&#xA;&#xA;const inStream = new Readable()&#xA;&#xA;inStream.push(Buffer.from(&#39;foo&#39;))&#xA;inStream.push(Buffer.from(&#39;bar&#39;))&#xA;inStream.push(null) // end stream&#xA;inStream.pipe(process.stdout)&#xA;&#xA;const outStream = new Writable({&#xA;  write(chunk, encoding, callback) {&#xA;    console.log(&#39;received: &#39; + chunk.toString(&#39;utf8&#39;))&#xA;    callback()&#xA;  }&#xA;})&#xA;&#xA;outStream.write(Buffer.from(&#39;abc&#39;))&#xA;outStream.write(Buffer.from(&#39;xyz&#39;))&#xA;outStream.end()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;foobar&#xA;received: abc&#xA;received: xyz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;bufio&#34;&#xA;&#x9;&#34;bytes&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;io&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#x9;&#34;runtime&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;inStream := new(bytes.Buffer)&#xA;&#x9;w := bufio.NewWriter(inStream)&#xA;&#x9;_, err := w.Write([]byte(&#34;foo&#34;))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;_, err = w.Write([]byte(&#34;bar&#34;))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;err = w.Flush()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;inStream.WriteTo(os.Stdout)&#xA;&#x9;fmt.Print(&#34;\n&#34;)&#xA;&#xA;&#x9;outStream := new(bytes.Buffer)&#xA;&#x9;outStream.Write([]byte(&#34;abc\n&#34;))&#xA;&#x9;outStream.Write([]byte(&#34;xyc\n&#34;))&#xA;&#x9;piper, pipew := io.Pipe()&#xA;&#xA;&#x9;go func() {&#xA;&#x9;&#x9;sc := bufio.NewScanner(piper)&#xA;&#x9;&#x9;for sc.Scan() {&#xA;&#x9;&#x9;&#x9;fmt.Println(&#34;received: &#34; + sc.Text())&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if err := sc.Err(); err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;os.Exit(0)&#xA;&#x9;}()&#xA;&#xA;&#x9;go func() {&#xA;&#x9;&#x9;defer pipew.Close()&#xA;&#x9;&#x9;io.Copy(pipew, outStream)&#xA;&#x9;}()&#xA;&#xA;&#x9;defer runtime.Goexit()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;foobar&#xA;received: abc&#xA;received: xyc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;event emitter&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const EventEmitter = require(&#39;events&#39;)&#xA;class MyEmitter extends EventEmitter {}&#xA;const myEmitter = new MyEmitter()&#xA;&#xA;myEmitter.on(&#39;my-event&#39;, msg =&amp;gt; {&#xA;  console.log(msg)&#xA;})&#xA;&#xA;myEmitter.on(&#39;my-other-event&#39;, msg =&amp;gt; {&#xA;  console.log(msg)&#xA;})&#xA;&#xA;myEmitter.emit(&#39;my-event&#39;, &#39;hello world&#39;)&#xA;myEmitter.emit(&#39;my-other-event&#39;, &#39;hello other world&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world&#xA;hello other world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;(closest thing is to use channels)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;type MyEmitter map[string]chan string&#xA;&#xA;func main() {&#xA;&#x9;myEmitter := MyEmitter{}&#xA;&#x9;myEmitter[&#34;my-event&#34;] = make(chan string)&#xA;&#x9;myEmitter[&#34;my-other-event&#34;] = make(chan string)&#xA;&#xA;&#x9;go func() {&#xA;&#x9;&#x9;for {&#xA;&#x9;&#x9;&#x9;select {&#xA;&#x9;&#x9;&#x9;case msg := &amp;lt;-myEmitter[&#34;my-event&#34;]:&#xA;&#x9;&#x9;&#x9;&#x9;fmt.Println(msg)&#xA;&#x9;&#x9;&#x9;case msg := &amp;lt;-myEmitter[&#34;my-other-event&#34;]:&#xA;&#x9;&#x9;&#x9;&#x9;fmt.Println(msg)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}()&#xA;&#xA;&#x9;myEmitter[&#34;my-event&#34;] &amp;lt;- &#34;hello world&#34;&#xA;&#x9;myEmitter[&#34;my-other-event&#34;] &amp;lt;- &#34;hello other world&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world&#xA;hello other world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;errors&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const err1 = new Error(&#39;some error&#39;)&#xA;&#xA;console.log(err1)&#xA;&#xA;class FooError extends Error{&#xA;  constructor(message) {&#xA;    super(message)&#xA;    this.name = &#39;FooError&#39;&#xA;    this.message = message&#xA;  }&#xA;&#xA;  toString() {&#xA;    return this.message&#xA;  }&#xA;}&#xA;&#xA;const err2 = new FooError(&#39;my custom error&#39;)&#xA;&#xA;console.log(err2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Error: some error&#xA;{ FooError: my custom error }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;type FooError struct {&#xA;&#x9;s string&#xA;}&#xA;&#xA;func (f *FooError) Error() string {&#xA;&#x9;return f.s&#xA;}&#xA;&#xA;func NewFooError(s string) error {&#xA;&#x9;return &amp;amp;FooError{s}&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;err1 := errors.New(&#34;some error&#34;)&#xA;&#x9;fmt.Println(err1)&#xA;&#xA;&#x9;err2 := NewFooError(&#34;my custom error&#34;)&#xA;&#x9;fmt.Println(err2)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;some error&#xA;my custom error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;try/catch&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function foo(fail) {&#xA;  if (fail) {&#xA;    throw Error(&#39;my error&#39;)&#xA;  }&#xA;}&#xA;&#xA;function main() {&#xA;  try {&#xA;    foo(true)&#xA;  } catch(err) {&#xA;    console.log(`caught error: ${err.message}`)&#xA;  }&#xA;}&#xA;&#xA;main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;caught error: my error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;func foo(fail bool) error {&#xA;&#x9;if fail {&#xA;&#x9;&#x9;return errors.New(&#34;my error&#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;return nil&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;err := foo(true)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Printf(&#34;caught error: %s\n&#34;, err.Error())&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;caught error: my error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;exceptions&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function foo() {&#xA;  throw Error(&#39;my exception&#39;)&#xA;}&#xA;&#xA;function main() {&#xA;  foo()&#xA;}&#xA;&#xA;process.on(&#39;uncaughtException&#39;, err =&amp;gt; {&#xA;  console.log(`caught exception: ${err.message}`)&#xA;  process.exit(1)&#xA;})&#xA;&#xA;main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;caught exception: my exception&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;func foo() {&#xA;&#x9;panic(&#34;my exception&#34;)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;defer func() {&#xA;&#x9;&#x9;if r := recover(); r != nil {&#xA;&#x9;&#x9;&#x9;fmt.Printf(&#34;caught exception: %s&#34;, r)&#xA;&#x9;&#x9;}&#xA;&#x9;}()&#xA;&#xA;&#x9;foo()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;caught exception: my exception&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;regex&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;let input = &#39;foobar&#39;&#xA;let replaced = input.replace(/foo(.*)/i, &#39;qux$1&#39;)&#xA;console.log(replaced)&#xA;&#xA;let match = /o{2}/i.test(input)&#xA;console.log(match)&#xA;&#xA;input = &#39;111-222-333&#39;&#xA;let matches = input.match(/([0-9]+)/gi)&#xA;console.log(matches)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;quxbar&#xA;true&#xA;[ &#39;111&#39;, &#39;222&#39;, &#39;333&#39; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;regexp&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;input := &#34;foobar&#34;&#xA;&#x9;re := regexp.MustCompile(`(?i)foo(.*)`)&#xA;&#x9;replaced := re.ReplaceAllString(input, &#34;qux$1&#34;)&#xA;&#x9;fmt.Println(replaced)&#xA;&#xA;&#x9;re = regexp.MustCompile(`(?i)o{2}`)&#xA;&#x9;match := re.Match([]byte(input))&#xA;&#x9;fmt.Println(match)&#xA;&#xA;&#x9;input = &#34;111-222-333&#34;&#xA;&#x9;re = regexp.MustCompile(`(?i)([0-9]+)`)&#xA;&#x9;matches := re.FindAllString(input, -1)&#xA;&#x9;fmt.Println(matches)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;quxbar&#xA;true&#xA;[111 222 333]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;exec (sync)&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { execSync } = require(&#39;child_process&#39;)&#xA;&#xA;const output = execSync(`echo &#39;hello world&#39;`)&#xA;&#xA;console.log(output.toString())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os/exec&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;output, err := exec.Command(&#34;echo&#34;, &#34;hello world&#34;).Output()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(string(output))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;exec (async)&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { exec } = require(&#39;child_process&#39;)&#xA;&#xA;exec(`echo &#39;hello world&#39;`, (error, stdout, stderr) =&amp;gt; {&#xA;  if (error) {&#xA;    console.error(err)&#xA;  }&#xA;&#xA;  if (stderr) {&#xA;    console.error(stderr)&#xA;  }&#xA;&#xA;  if (stdout) {&#xA;    console.log(stdout)&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;os&#34;&#xA;&#x9;&#34;os/exec&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;cmd := exec.Command(&#34;echo&#34;, &#34;hello world&#34;)&#xA;&#x9;cmd.Stdout = os.Stdout&#xA;&#x9;cmd.Stderr = os.Stderr&#xA;&#x9;cmd.Run()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;tcp server&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const net = require(&#39;net&#39;)&#xA;&#xA;function handler(socket) {&#xA;&#x9;socket.write(&#39;Received: &#39;)&#xA;&#x9;socket.pipe(socket)&#xA;}&#xA;&#xA;const server = net.createServer(handler)&#xA;server.listen(3000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;hello&#39; | nc localhost 3000&#xA;Received: hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;bufio&#34;&#xA;&#x9;&#34;net&#34;&#xA;)&#xA;&#xA;func handler(conn net.Conn) {&#xA;&#x9;defer conn.Close()&#xA;&#x9;reader := bufio.NewReader(conn)&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;message, err := reader.ReadString(&#39;\n&#39;)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;return&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;conn.Write([]byte(&#34;Received: &#34;))&#xA;&#x9;&#x9;conn.Write([]byte(message))&#xA;&#x9;}&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;listener, err := net.Listen(&#34;tcp&#34;, &#34;:3000&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;defer listener.Close()&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;conn, err := listener.Accept()&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;go handler(conn)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;hello&#39; | nc localhost 3000&#xA;Received: hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;udp server&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const dgram = require(&#39;dgram&#39;)&#xA;const server = dgram.createSocket(&#39;udp4&#39;)&#xA;&#xA;server.on(&#39;error&#39;, err =&amp;gt; {&#xA;  console.error(err)&#xA;  server.close()&#xA;})&#xA;&#xA;server.on(&#39;message&#39;, (msg, rinfo) =&amp;gt; {&#xA;  const data = msg.toString(&#39;utf8&#39;).trim()&#xA;  console.log(`received: ${data} from ${rinfo.address}:${rinfo.port}`)&#xA;})&#xA;&#xA;server.on(&#39;listening&#39;, () =&amp;gt; {&#xA;  const address = server.address()&#xA;  console.log(`server listening ${address.address}:${address.port}`)&#xA;})&#xA;&#xA;server.bind(3000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;hello world&#39; &amp;gt; /dev/udp/0.0.0.0/3000&#xA;&#xA;server listening 0.0.0.0:3000&#xA;received: hello world from 127.0.0.1:51452&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;net&#34;&#xA;&#x9;&#34;strings&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;conn, err := net.ListenUDP(&#34;udp&#34;, &amp;amp;net.UDPAddr{&#xA;&#x9;&#x9;Port: 3000,&#xA;&#x9;&#x9;IP:   net.ParseIP(&#34;0.0.0.0&#34;),&#xA;&#x9;})&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;defer conn.Close()&#xA;&#x9;fmt.Printf(&#34;server listening %s\n&#34;, conn.LocalAddr().String())&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;message := make([]byte, 20)&#xA;&#x9;&#x9;rlen, remote, err := conn.ReadFromUDP(message[:])&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;data := strings.TrimSpace(string(message[:rlen]))&#xA;&#x9;&#x9;fmt.Printf(&#34;received: %s from %s\n&#34;, data, remote)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;hello world&#39; &amp;gt; /dev/udp/0.0.0.0/3000&#xA;&#xA;server listening [::]:3000&#xA;received: hello world from 127.0.0.1:50275&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;http server&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const http = require(&#39;http&#39;)&#xA;&#xA;function handler(request, response) {&#xA;  response.writeHead(200, { &#39;Content-type&#39;:&#39;text/plain&#39; })&#xA;  response.write(&#39;hello world&#39;)&#xA;  response.end()&#xA;}&#xA;&#xA;const server = http.createServer(handler)&#xA;server.listen(8080)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost:8080&#xA;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;net/http&#34;&#xA;)&#xA;&#xA;func handler(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;w.WriteHeader(200)&#xA;&#x9;w.Write([]byte(&#34;hello world&#34;))&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;http.HandleFunc(&#34;/&#34;, handler)&#xA;&#x9;if err := http.ListenAndServe(&#34;:8080&#34;, nil); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl http://localhost:8080&#xA;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;url parse&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const url = require(&#39;url&#39;)&#xA;const qs = require(&#39;querystring&#39;)&#xA;&#xA;const urlstr = &#39;http://bob:secret@sub.example.com:8080/somepath?foo=bar&#39;&#xA;&#xA;const parsed = url.parse(urlstr)&#xA;console.log(parsed.protocol)&#xA;console.log(parsed.auth)&#xA;console.log(parsed.port)&#xA;console.log(parsed.hostname)&#xA;console.log(parsed.pathname)&#xA;console.log(qs.parse(parsed.search.substr(1)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http:&#xA;bob:secret&#xA;8080&#xA;sub.example.com&#xA;/somepath&#xA;{ foo: &#39;bar&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;net/url&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;urlstr := &#34;http://bob:secret@sub.example.com:8080/somepath?foo=bar&#34;&#xA;&#xA;&#x9;u, err := url.Parse(urlstr)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(u.Scheme)&#xA;&#x9;fmt.Println(u.User)&#xA;&#x9;fmt.Println(u.Port())&#xA;&#x9;fmt.Println(u.Hostname())&#xA;&#x9;fmt.Println(u.Path)&#xA;&#x9;fmt.Println(u.Query())&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;http&#xA;bob:secret&#xA;8080&#xA;sub.example.com&#xA;/somepath&#xA;map[foo:[bar]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;gzip&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const zlib = require(&#39;zlib&#39;)&#xA;&#xA;const data = Buffer.from(&#39;hello world&#39;, &#39;utf-8&#39;)&#xA;&#xA;zlib.gzip(data, (err, compressed) =&amp;gt; {&#xA;  if (err) {&#xA;    console.error(err)&#xA;  }&#xA;&#xA;  console.log(compressed)&#xA;&#xA;  zlib.unzip(compressed, (err, decompressed) =&amp;gt; {&#xA;    if (err) {&#xA;      console.error(err)&#xA;    }&#xA;&#xA;    console.log(decompressed.toString())&#xA;  })&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;lt;Buffer 1f 8b 08 00 00 00 00 00 00 13 cb 48 cd c9 c9 57 28 cf 2f ca 49 01 00 85 11 4a 0d 0b 00 00 00&amp;gt;&#xA;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;bytes&#34;&#xA;&#x9;&#34;compress/gzip&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;data := []byte(&#34;hello world&#34;)&#xA;&#xA;&#x9;compressed := new(bytes.Buffer)&#xA;&#x9;w := gzip.NewWriter(compressed)&#xA;&#x9;if _, err := w.Write(data); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;if err := w.Close(); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(compressed.Bytes())&#xA;&#xA;&#x9;decompressed := new(bytes.Buffer)&#xA;&#x9;r, err := gzip.NewReader(compressed)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;_, err = decompressed.ReadFrom(r)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(string(decompressed.Bytes()))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[31 139 8 0 0 0 0 0 0 255 202 72 205 201 201 87 40 207 47 202 73 1 4 0 0 255 255 133 17 74 13 11 0 0 0]&#xA;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;dns&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;DNS lookup examples&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const dns = require(&#39;dns&#39;)&#xA;&#xA;dns.resolveNs(&#39;google.com&#39;, (err, ns) =&amp;gt; {&#xA;  if (err) {&#xA;    console.error(err)&#xA;  }&#xA;&#xA;  console.log(ns)&#xA;})&#xA;&#xA;dns.resolve4(&#39;google.com&#39;, (err, ips) =&amp;gt; {&#xA;  if (err) {&#xA;    console.error(err)&#xA;  }&#xA;&#xA;  console.log(ips)&#xA;})&#xA;&#xA;dns.resolveMx(&#39;google.com&#39;, (err, mx) =&amp;gt; {&#xA;  if (err) {&#xA;    console.error(err)&#xA;  }&#xA;&#xA;  console.log(mx)&#xA;})&#xA;&#xA;dns.resolveTxt(&#39;google.com&#39;, (err, txt) =&amp;gt; {&#xA;  if (err) {&#xA;    console.error(err)&#xA;  }&#xA;&#xA;  console.log(txt)&#xA;})&#xA;&#xA;dns.setServers([&#39;1.1.1.1&#39;])&#xA;console.log(dns.getServers())&#xA;&#xA;dns.resolveNs(&#39;google.com&#39;, (err, ns) =&amp;gt; {&#xA;  if (err) {&#xA;    console.error(err)&#xA;  }&#xA;&#xA;  console.log(ns)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[&#xA;  &#39;ns2.google.com&#39;,&#xA;  &#39;ns3.google.com&#39;,&#xA;  &#39;ns4.google.com&#39;,&#xA;  &#39;ns1.google.com&#39;&#xA;]&#xA;[ &#39;172.217.11.78&#39; ]&#xA;[ { exchange: &#39;alt4.aspmx.l.google.com&#39;, priority: 50 },&#xA;  { exchange: &#39;alt2.aspmx.l.google.com&#39;, priority: 30 },&#xA;  { exchange: &#39;alt3.aspmx.l.google.com&#39;, priority: 40 },&#xA;  { exchange: &#39;aspmx.l.google.com&#39;, priority: 10 },&#xA;  { exchange: &#39;alt1.aspmx.l.google.com&#39;, priority: 20 } ]&#xA;[ [ &#39;v=spf1 include:_spf.google.com ~all&#39; ],&#xA;  [ &#39;docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e&#39; ],&#xA;  [ &#39;facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95&#39; ],&#xA;  [ &#39;globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=&#39; ] ]&#xA;[ &#39;1.1.1.1&#39; ]&#xA;[&#xA;  &#39;ns1.google.com&#39;,&#xA;  &#39;ns2.google.com&#39;,&#xA;  &#39;ns4.google.com&#39;,&#xA;  &#39;ns3.google.com&#39;&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;net&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;ns, err := net.LookupNS(&#34;google.com&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Printf(&#34;%s\n&#34;, ns)&#xA;&#xA;&#x9;ips, err := net.LookupIP(&#34;google.com&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(ips)&#xA;&#xA;&#x9;mx, err := net.LookupMX(&#34;google.com&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(mx)&#xA;&#xA;&#x9;txt, err := net.LookupTXT(&#34;google.com&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(txt)&#xA;&#xA;&#x9;r := &amp;amp;net.Resolver{&#xA;&#x9;&#x9;PreferGo: true,&#xA;&#x9;&#x9;Dial: func(ctx context.Context, network, address string) (net.Conn, error) {&#xA;&#x9;&#x9;&#x9;d := net.Dialer{&#xA;&#x9;&#x9;&#x9;&#x9;Timeout: time.Millisecond * time.Duration(10_000),&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;return d.DialContext(ctx, &#34;udp&#34;, &#34;1.1.1.1:53&#34;)&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#xA;&#x9;ns, _ = r.LookupNS(context.Background(), &#34;google.com&#34;)&#xA;&#x9;fmt.Printf(&#34;%s&#34;, ns)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[%!s(*net.NS=&amp;amp;{ns3.google.com.}) %!s(*net.NS=&amp;amp;{ns4.google.com.}) %!s(*net.NS=&amp;amp;{ns1.google.com.}) %!s(*net.NS=&amp;amp;{ns2.google.com.})]&#xA;[172.217.5.78 2607:f8b0:4007:80d::200e]&#xA;[0xc0000ba2e0 0xc0000ba260 0xc0000ba2a0 0xc0000ba280 0xc0000ba300]&#xA;[facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95 docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e v=spf1 include:_spf.google.com ~all globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=]&#xA;[%!s(*net.NS=&amp;amp;{ns2.google.com.}) %!s(*net.NS=&amp;amp;{ns1.google.com.}) %!s(*net.NS=&amp;amp;{ns3.google.com.}) %!s(*net.NS=&amp;amp;{ns4.google.com.})]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;crypto&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const crypto = require(&#39;crypto&#39;)&#xA;&#xA;const hash = crypto.createHash(&#39;sha256&#39;).update(Buffer.from(&#39;hello&#39;)).digest()&#xA;&#xA;console.log(hash.toString(&#39;hex&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;crypto/sha256&#34;&#xA;&#x9;&#34;encoding/hex&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;hash := sha256.Sum256([]byte(&#34;hello&#34;))&#xA;&#xA;&#x9;fmt.Println(hex.EncodeToString(hash[:]))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;env vars&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const key = process.env[&#39;API_KEY&#39;]&#xA;&#xA;console.log(key)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ API_KEY=foobar node examples/env_vars.js&#xA;foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;key := os.Getenv(&#34;API_KEY&#34;)&#xA;&#xA;&#x9;fmt.Println(key)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ API_KEY=foobar go run examples/env_vars.go&#xA;foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;cli args&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const args = process.argv.slice(2)&#xA;&#xA;console.log(args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node examples/cli_args.js foo bar qux&#xA;[ &#39;foo&#39;, &#39;bar&#39;, &#39;qux&#39; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;args := os.Args[1:]&#xA;&#x9;fmt.Println(args)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run examples/cli_args.go foo bar qux&#xA;[foo bar qux]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;cli flags&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const yargs = require(&#39;yargs&#39;)&#xA;&#xA;const { foo=&#39;default value&#39;, qux=false } = yargs.argv&#xA;console.log(&#39;foo:&#39;, foo)&#xA;console.log(&#39;qux:&#39;, qux)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node examples/cli_flags.js --foo=&#39;bar&#39; --qux=true&#xA;foo: bar&#xA;qux: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;flag&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;var foo string&#xA;&#x9;flag.StringVar(&amp;amp;foo, &#34;foo&#34;, &#34;default value&#34;, &#34;a string var&#34;)&#xA;&#xA;&#x9;var qux bool&#xA;&#x9;flag.BoolVar(&amp;amp;qux, &#34;qux&#34;, false, &#34;a bool var&#34;)&#xA;&#xA;&#x9;flag.Parse()&#xA;&#xA;&#x9;fmt.Println(&#34;foo:&#34;, foo)&#xA;&#x9;fmt.Println(&#34;qux:&#34;, qux)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run examples/cli_flags.go -foo=&#39;bar&#39; -qux=true&#xA;foo: bar&#xA;qux: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;stdout&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;process.stdout.write(&#39;hello world\n&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;fmt.Fprint(os.Stdout, &#34;hello world\n&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello world&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;stderr&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;process.stderr.write(&#39;hello error\n&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;fmt.Fprint(os.Stderr, &#34;hello error\n&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;stdin&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const stdin = process.openStdin()&#xA;&#xA;process.stdout.write(&#39;Enter name: &#39;)&#xA;&#xA;stdin.addListener(&#39;data&#39;, text =&amp;gt; {&#xA;  const name = text.toString().trim()&#xA;  console.log(&#39;Your name is: &#39; + name)&#xA;&#xA;  stdin.pause()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Enter name: bob&#xA;Your name is: bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;bufio&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#x9;&#34;strings&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;reader := bufio.NewReader(os.Stdin)&#xA;&#x9;fmt.Print(&#34;Enter name: &#34;)&#xA;&#xA;&#x9;text, err := reader.ReadString(&#39;\n&#39;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;name := strings.TrimSpace(text)&#xA;&#x9;fmt.Printf(&#34;Your name is: %s\n&#34;, name)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Enter name: bob&#xA;Your name is: bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;modules&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# initializing metadata and dependencies file (package.json)&#xA;$ npm init&#xA;&#xA;# installing a module&#xA;$ npm install moment --save&#xA;&#xA;# updating a module&#xA;$ npm install moment@latest --save&#xA;&#xA;# removing a module&#xA;$ npm uninstall moment --save&#xA;&#xA;# pruning modules (removing unused modules)&#xA;$ npm prune&#xA;&#xA;# publishing a module&#xA;$ npm publish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;// importing a module&#xA;const moment = require(&#39;moment&#39;)&#xA;&#xA;const now = moment().unix()&#xA;console.log(now)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1546595748&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;// exporting a module&#xA;module.exports = {&#xA;  greet(name) {&#xA;    console.log(`hello ${name}`)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;// importing exported module&#xA;const greeter = require(&#39;./greeter&#39;)&#xA;&#xA;greeter.greet(&#39;bob&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;Setup&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# enable Go modules support&#xA;GO111MODULE=on&#xA;&#xA;# initializing dependencies file (go.mod)&#xA;$ go mod init&#xA;&#xA;# installing a module&#xA;$ go get github.com/go-shadow/moment&#xA;&#xA;# updating a module&#xA;$ go get -u github.com/go-shadow/moment&#xA;&#xA;# removing a module&#xA;$ rm -rf $GOPATH/pkg/mod/github.com/go-shadow/moment@v&amp;lt;tag&amp;gt;-&amp;lt;checksum&amp;gt;/&#xA;&#xA;# pruning modules (removing unused modules from dependencies file)&#xA;$ go mod tidy&#xA;&#xA;# download modules being used to local vendor directory (equivalent of downloading node_modules locally)&#xA;$ go mod vendor&#xA;&#xA;# publishing a module:&#xA;# Note: Go doesn&#39;t have an index of repositories like NPM.&#xA;# Go modules are hosted as public git repositories.&#xA;# To publish, simply push to the repository and tag releases.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;// importing a module&#xA;&#x9;&#34;github.com/go-shadow/moment&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;now := moment.New().Now().Unix()&#xA;&#x9;fmt.Println(now)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1546595748&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package greeter&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;)&#xA;&#xA;// exporting a module (use a capitalized name to export function)&#xA;func Greet(name string) {&#xA;&#x9;fmt.Printf(&#34;hello %s&#34;, name)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;// importing exported module&#xA;&#x9;greeter &#34;github.com/miguelmota/golang-for-nodejs-developers/examples/greeter_go&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;greeter.Greet(&#34;bob&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hello bob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;stack trace&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;function foo() {&#xA;  throw new Error(&#39;failed&#39;)&#xA;}&#xA;&#xA;try {&#xA;  foo()&#xA;} catch(err) {&#xA;  console.trace(err)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Trace: Error: failed&#xA;    at foo (/Users/bob/examples/stack_trace.js:2:9)&#xA;    at Object.&amp;lt;anonymous&amp;gt; (/Users/bob/examples/stack_trace.js:6:3)&#xA;    at Module._compile (internal/modules/cjs/loader.js:688:30)&#xA;    at Object.Module._extensions..js (internal/modules/cjs/loader.js:699:10)&#xA;    at Module.load (internal/modules/cjs/loader.js:598:32)&#xA;    at tryModuleLoad (internal/modules/cjs/loader.js:537:12)&#xA;    at Function.Module._load (internal/modules/cjs/loader.js:529:3)&#xA;    at Function.Module.runMain (internal/modules/cjs/loader.js:741:12)&#xA;    at startup (internal/bootstrap/node.js:285:19)&#xA;    at bootstrapNodeJSCore (internal/bootstrap/node.js:739:3)&#xA;    at Object.&amp;lt;anonymous&amp;gt; (/Users/bob/examples/stack_trace.js:8:11)&#xA;    at Module._compile (internal/modules/cjs/loader.js:688:30)&#xA;    at Object.Module._extensions..js (internal/modules/cjs/loader.js:699:10)&#xA;    at Module.load (internal/modules/cjs/loader.js:598:32)&#xA;    at tryModuleLoad (internal/modules/cjs/loader.js:537:12)&#xA;    at Function.Module._load (internal/modules/cjs/loader.js:529:3)&#xA;    at Function.Module.runMain (internal/modules/cjs/loader.js:741:12)&#xA;    at startup (internal/bootstrap/node.js:285:19)&#xA;    at bootstrapNodeJSCore (internal/bootstrap/node.js:739:3)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;errors&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;runtime/debug&#34;&#xA;)&#xA;&#xA;func foo() {&#xA;&#x9;panic(errors.New(&#34;failed&#34;))&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;defer func() {&#xA;&#x9;&#x9;if r := recover(); r != nil {&#xA;&#x9;&#x9;&#x9;fmt.Println(string(debug.Stack()))&#xA;&#x9;&#x9;}&#xA;&#x9;}()&#xA;&#xA;&#x9;foo()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;goroutine 1 [running]:&#xA;runtime/debug.Stack(0xc000090eb8, 0x10a8400, 0xc00007e1c0)&#xA;        /Users/mota/.gvm/gos/go1.11/src/runtime/debug/stack.go:24 +0xa7&#xA;main.main.func1()&#xA;        /Users/bob/examples/stack_trace.go:16 +0x46&#xA;panic(0x10a8400, 0xc00007e1c0)&#xA;        /Users/mota/.gvm/gos/go1.11/src/runtime/panic.go:513 +0x1b9&#xA;main.foo(...)&#xA;        /Users/bob/examples/stack_trace.go:10&#xA;main.main()&#xA;        /Users/bob/examples/stack_trace.go:20 +0xa2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;databases&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Example of creating a table, inserting rows, and reading rows from a sqlite3 database&lt;/p&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const sqlite3 = require(&#39;sqlite3&#39;).verbose()&#xA;const db = new sqlite3.Database(&#39;./sqlite3.db&#39;)&#xA;&#xA;db.serialize(() =&amp;gt; {&#xA;  db.run(&#39;CREATE TABLE persons (name TEXT)&#39;)&#xA;&#xA;  const stmt = db.prepare(&#39;INSERT INTO persons VALUES (?)&#39;)&#xA;  const names = [&#39;alice&#39;, &#39;bob&#39;, &#39;charlie&#39;]&#xA;  for (let i = 0; i &amp;lt; names.length; i++) {&#xA;    stmt.run(names[i])&#xA;  }&#xA;&#xA;  stmt.finalize()&#xA;&#xA;  db.each(&#39;SELECT rowid AS id, name FROM persons&#39;, (err, row) =&amp;gt; {&#xA;    if (err) {&#xA;      console.error(err)&#xA;      return&#xA;    }&#xA;&#xA;    console.log(row.id, row.name)&#xA;  })&#xA;})&#xA;&#xA;db.close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1 &#39;alice&#39;&#xA;2 &#39;bob&#39;&#xA;3 &#39;charlie&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;database/sql&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#xA;&#x9;_ &#34;github.com/mattn/go-sqlite3&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;db, err := sql.Open(&#34;sqlite3&#34;, &#34;./sqlite3.db&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;defer db.Close()&#xA;&#xA;&#x9;_, err = db.Exec(&#34;CREATE TABLE persons (name TEXT)&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;tx, err := db.Begin()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;stmt, err := tx.Prepare(&#34;INSERT INTO persons VALUES (?)&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;defer stmt.Close()&#xA;&#xA;&#x9;names := []string{&#34;alice&#34;, &#34;bob&#34;, &#34;charlie&#34;}&#xA;&#xA;&#x9;for _, name := range names {&#xA;&#x9;&#x9;_, err := stmt.Exec(name)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;tx.Commit()&#xA;&#xA;&#x9;rows, err := db.Query(&#34;SELECT rowid AS id, name FROM persons&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;defer rows.Close()&#xA;&#xA;&#x9;for rows.Next() {&#xA;&#x9;&#x9;var id int&#xA;&#x9;&#x9;var name string&#xA;&#x9;&#x9;err = rows.Scan(&amp;amp;id, &amp;amp;name)&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;panic(err)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;fmt.Println(id, name)&#xA;&#x9;}&#xA;&#xA;&#x9;err = rows.Err()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;1 alice&#xA;2 bob&#xA;3 charlie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;testing&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const test = require(&#39;tape&#39;)&#xA;&#xA;test(t =&amp;gt; {&#xA;  const tt = [&#xA;&#x9;&#x9;{a:1, b:1, ret:2},&#xA;&#x9;&#x9;{a:2, b:3, ret:5},&#xA;&#x9;&#x9;{a:5, b:5, ret:10}&#xA;  ]&#xA;&#xA;  t.plan(tt.length)&#xA;&#xA;  tt.forEach(tt =&amp;gt; {&#xA;    t.equal(sum(tt.a, tt.b), tt.ret)&#xA;  })&#xA;})&#xA;&#xA;function sum(a, b) {&#xA;&#x9;return a + b&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node examples/example_test.js&#xA;TAP version 13&#xA;# (anonymous)&#xA;ok 1 should be equal&#xA;ok 2 should be equal&#xA;ok 3 should be equal&#xA;&#xA;1..3&#xA;# tests 3&#xA;# pass  3&#xA;&#xA;# ok&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package example&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;testing&#34;&#xA;)&#xA;&#xA;func TestSum(t *testing.T) {&#xA;&#x9;for _, tt := range []struct {&#xA;&#x9;&#x9;a   int&#xA;&#x9;&#x9;b   int&#xA;&#x9;&#x9;ret int&#xA;&#x9;}{&#xA;&#x9;&#x9;{1, 1, 2},&#xA;&#x9;&#x9;{2, 3, 5},&#xA;&#x9;&#x9;{5, 5, 10},&#xA;&#x9;} {&#xA;&#x9;&#x9;t.Run(fmt.Sprintf(&#34;(%v + %v)&#34;, tt.a, tt.b), func(t *testing.T) {&#xA;&#x9;&#x9;&#x9;ret := sum(tt.a, tt.b)&#xA;&#x9;&#x9;&#x9;if ret != tt.ret {&#xA;&#x9;&#x9;&#x9;&#x9;t.Errorf(&#34;want %v, got %v&#34;, tt.ret, ret)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;})&#xA;&#x9;}&#xA;}&#xA;&#xA;func sum(a, b int) int {&#xA;&#x9;return a + b&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go test -v examples/example_test.go&#xA;=== RUN   TestSum&#xA;=== RUN   TestSum/(1_+_1)&#xA;=== RUN   TestSum/(2_+_3)&#xA;=== RUN   TestSum/(5_+_5)&#xA;--- PASS: TestSum (0.00s)&#xA;    --- PASS: TestSum/(1_+_1) (0.00s)&#xA;    --- PASS: TestSum/(2_+_3) (0.00s)&#xA;    --- PASS: TestSum/(5_+_5) (0.00s)&#xA;PASS&#xA;ok      command-line-arguments  0.008s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;benchmarking&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;const Benchmark = require(&#39;benchmark&#39;)&#xA;&#xA;const suite = new Benchmark.Suite&#xA;suite.add(&#39;fib#recursion&#39;, () =&amp;gt; {&#xA;  fibRec(10)&#xA;})&#xA;.add(&#39;fib#loop&#39;, () =&amp;gt; {&#xA;  fibLoop(10)&#xA;})&#xA;.on(&#39;complete&#39;, () =&amp;gt; {&#xA;  console.log(suite[0].toString())&#xA;  console.log(suite[1].toString())&#xA;})&#xA;.run({&#xA;  async: true&#xA;})&#xA;&#xA;function fibRec(n) {&#xA;  if (n &amp;lt;= 1) {&#xA;    return n&#xA;  }&#xA;&#xA;  return fibRec(n-1) + fibRec(n-2)&#xA;}&#xA;&#xA;function fibLoop(n) {&#xA;  let f = [0, 1]&#xA;  for (let i = 2; i &amp;lt;= n; i++) {&#xA;    f[i] = f[i-1] + f[i-2]&#xA;  }&#xA;  return f[n]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ node examples/benchmark_test.js&#xA;fib#recursion x 1,343,074 ops/sec Â±1.26% (84 runs sampled)&#xA;fib#loop x 20,104,517 ops/sec Â±3.78% (78 runs sampled)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package example&#xA;&#xA;import (&#xA;&#x9;&#34;testing&#34;&#xA;)&#xA;&#xA;func BenchmarkFibRec(b *testing.B) {&#xA;&#x9;for n := 0; n &amp;lt; b.N; n++ {&#xA;&#x9;&#x9;fibRec(10)&#xA;&#x9;}&#xA;}&#xA;&#xA;func BenchmarkFibLoop(b *testing.B) {&#xA;&#x9;for n := 0; n &amp;lt; b.N; n++ {&#xA;&#x9;&#x9;fibLoop(10)&#xA;&#x9;}&#xA;}&#xA;&#xA;func fibRec(n int) int {&#xA;&#x9;if n &amp;lt;= 1 {&#xA;&#x9;&#x9;return n&#xA;&#x9;}&#xA;&#xA;&#x9;return fibRec(n-1) + fibRec(n-2)&#xA;}&#xA;&#xA;func fibLoop(n int) int {&#xA;&#x9;f := make([]int, n+1, n+2)&#xA;&#x9;if n &amp;lt; 2 {&#xA;&#x9;&#x9;f = f[0:2]&#xA;&#x9;}&#xA;&#x9;f[0] = 0&#xA;&#x9;f[1] = 1&#xA;&#x9;for i := 2; i &amp;lt;= n; i++ {&#xA;&#x9;&#x9;f[i] = f[i-1] + f[i-2]&#xA;&#x9;}&#xA;&#x9;return f[n]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go test -v -bench=. -benchmem examples/benchmark_test.go&#xA;goos: darwin&#xA;goarch: amd64&#xA;BenchmarkFibRec-8        5000000               340 ns/op               0 B/op          0 allocs/op&#xA;BenchmarkFibLoop-8      30000000                46.5 ns/op            96 B/op          1 allocs/op&#xA;PASS&#xA;ok      command-line-arguments  3.502s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;documentation&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://usejsdoc.org/&#34;&gt;jsdoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;/**&#xA; * Creates a new Person.&#xA; * @class&#xA; * @example&#xA; * const person = new Person(&#39;bob&#39;)&#xA; */&#xA;class Person {&#xA;  /**&#xA;   * Create a person.&#xA;   * @param {string} [name] - The person&#39;s name.&#xA;   */&#xA;  constructor(name) {&#xA;    this.name = name&#xA;  }&#xA;&#xA;  /**&#xA;   * Get the person&#39;s name.&#xA;   * @return {string} The person&#39;s name&#xA;   * @example&#xA;   * person.getName()&#xA;   */&#xA;  getName() {&#xA;    return this.name&#xA;  }&#xA;&#xA;  /**&#xA;   * Set the person&#39;s name.&#xA;   * @param {string} name - The person&#39;s name.&#xA;   * @example&#xA;   * person.setName(&#39;bob&#39;)&#xA;   */&#xA;  setName(name) {&#xA;    this.name = name&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Go&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.golang.org/examples&#34;&gt;godoc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;person.go&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package person&#xA;&#xA;import &#34;fmt&#34;&#xA;&#xA;// Person is the structure of a person&#xA;type Person struct {&#xA;&#x9;name string&#xA;}&#xA;&#xA;// NewPerson creates a new person. Takes in a name argument.&#xA;func NewPerson(name string) *Person {&#xA;&#x9;return &amp;amp;Person{&#xA;&#x9;&#x9;name: name,&#xA;&#x9;}&#xA;}&#xA;&#xA;// GetName returns the person&#39;s name&#xA;func (p *Person) GetName() string {&#xA;&#x9;return p.name&#xA;}&#xA;&#xA;// SetName sets the person&#39;s name&#xA;func (p *Person) SetName(name string) string {&#xA;&#x9;return p.name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;person_test.go&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Example of creating a new Person.&#xA;func ExampleNewPerson() {&#xA;&#x9;person := NewPerson(&#34;bob&#34;)&#xA;&#x9;_ = person&#xA;}&#xA;&#xA;// Example of getting person&#39;s name.&#xA;func ExamplePerson_GetName() {&#xA;&#x9;person := NewPerson(&#34;bob&#34;)&#xA;&#x9;fmt.Println(person.GetName())&#xA;&#x9;// Output: bob&#xA;}&#xA;&#xA;// Example of setting person&#39;s name.&#xA;func ExamplePerson_SetName() {&#xA;&#x9;person := NewPerson(&#34;alice&#34;)&#xA;&#x9;person.SetName(&#34;bob&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/#contents&#34;&gt;â¬† back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;### title&#xA;---&#xA;&#xA;#### Node.js&#xA;&#xA;```node&#xA;```&#xA;&#xA;Output&#xA;&#xA;```bash&#xA;```&#xA;&#xA;#### Go&#xA;&#xA;```go&#xA;```&#xA;&#xA;Output&#xA;&#xA;```bash&#xA;```&#xA;&#xA;**[â¬† back to top](#contents)**&#xA;--&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome!&lt;/p&gt; &#xA;&lt;p&gt;Please submit a pull request for new interesting additions or for general content fixes.&lt;/p&gt; &#xA;&lt;p&gt;If updating code, update both the README and the code in the &lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/examples/&#34;&gt;examples&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released under the &lt;a href=&#34;https://raw.githubusercontent.com/miguelmota/golang-for-nodejs-developers/master/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;p&gt;Â© &lt;a href=&#34;https://github.com/miguelmota&#34;&gt;Miguel Mota&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stealthrocket/timecraft</title>
    <updated>2023-07-03T01:38:01Z</updated>
    <id>tag:github.com,2023-07-03:/stealthrocket/timecraft</id>
    <link href="https://github.com/stealthrocket/timecraft" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The WebAssembly Time Machine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;timecraft&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stealthrocket/timecraft/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/stealthrocket/timecraft/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The WebAssembly Time Machine&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Timecraft&lt;/strong&gt; is a software runtime that executes WebAssembly modules with sandboxing, task orchestration, and time travel capabilities.&lt;/p&gt; &#xA;&lt;p&gt;The development of distributed systems comes with many challenges, and satisfying the instrumentation, scale, or security requirements adds to the difficulty. By combining a sandbox, a task orchestrator, and a time machine in a software runtime, Timecraft intends to bring the tools and structure to help developers on their journey to construct, test, and operate such systems.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Timecraft is developed in Go on top of the &lt;a href=&#34;https://github.com/tetratelabs/wazero&#34;&gt;Wazero&lt;/a&gt; WebAssembly runtime.&lt;/p&gt; &#xA;&lt;p&gt;The simplest path to installing the runtime is to use the standard installation method of Go applications:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/stealthrocket/timecraft@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more detailed section on other ways to install and configure Timecraft, see &lt;a href=&#34;https://github.com/stealthrocket/timecraft/wiki/Installing-Timecraft&#34;&gt;Installing&lt;/a&gt; and &lt;a href=&#34;https://github.com/stealthrocket/timecraft/wiki/Configuring-Timecraft&#34;&gt;Configuring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Timecraft can execute applications compiled to WebAssembly. This repository has examples for applications written in Go and Python. At this time, the Go programs need the new &lt;code&gt;GOOS=wasip1&lt;/code&gt; port of Go, which is simpler to install using &lt;code&gt;gotip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install golang.org/dl/gotip@latest&#xA;gotip download&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WebAssembly is an emerging technology which still has limitations when compared to native programs. For a more detailed section on building applications to WebAssembly, see &lt;a href=&#34;https://github.com/stealthrocket/timecraft/wiki#preparing-your-application&#34;&gt;Preparing Your Application&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To try some of the examples, first compile them with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make testdata&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compilation created programs with the &lt;code&gt;.wasm&lt;/code&gt; extension since they are compiled to WebAssembly. We will use the example program &lt;code&gt;get.wasm&lt;/code&gt;, which makes a GET request to the URLs passed as arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ timecraft run testdata/go/get.wasm https://eo3qh2ncelpc9q0.m.pipedream.net&#xA;ffe47142-c3ad-4f61-a5e9-739ebf456332&#xA;Hello, World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are few things to see here: the first line printed by Timecraft is the unique identifier generated to represent this particular program execution and its recording in the local Timecraft registry. The second line saying &#34;Hello, World!&#34; is simply the response from this API endpoint that we sent the request to.&lt;/p&gt; &#xA;&lt;p&gt;The Time Machine has recorded the program execution, and can be accessed to get insight from the program that was executed. It can reconstruct high level context such as the HTTP requests and responses that were exchanged by the application, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ timecraft trace request -v ffe47142-c3ad-4f61-a5e9-739ebf456332&#xA;2023/06/28 23:29:05.043455 HTTP 172.16.0.0:49152 &amp;gt; 44.206.52.165:443&#xA;&amp;gt; GET / HTTP/1.1&#xA;&amp;gt; Host: eo3qh2ncelpc9q0.m.pipedream.net&#xA;&amp;gt; User-Agent: Go-http-client/1.1&#xA;&amp;gt; Accept-Encoding: gzip&#xA;&amp;gt;&#xA;&amp;lt; HTTP/1.1 200 OK&#xA;&amp;lt; Date: Thu, 29 Jun 2023 06:29:04 GMT&#xA;&amp;lt; Content-Type: text/html; charset=utf-8&#xA;&amp;lt; Content-Length: 14&#xA;&amp;lt; Connection: keep-alive&#xA;&amp;lt; X-Powered-By: Express&#xA;&amp;lt; Access-Control-Allow-Origin: *&#xA;&amp;lt;&#xA;Hello, World!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To dive in, the &lt;code&gt;help&lt;/code&gt; subcommand is a useful entrypoint to get an up to date list of the supported capabilities, or take a look at the &lt;a href=&#34;https://github.com/stealthrocket/timecraft/wiki&#34;&gt;Wiki&lt;/a&gt; for a walk through the documentation!&lt;/p&gt; &#xA;&lt;h3&gt;Stability guarantees and future development&lt;/h3&gt; &#xA;&lt;p&gt;We are actively working on improving Timecraft and iterating closely with our design partners to prioritize the development, which may from time to time require the introduction of backward-incompatible changes to the APIs, data formats, and configuration. As we mature the technology, we will progressively advance towards offering more stability guarantees. The release of a v1.0 will be the indicator that we are promising to support all the public facing interfaces. To help us on this journey, do not heistate to reach out and submit feedback, ideas, or code contributions!&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests are welcome! Anything that is not a simple fix would probably benefit from being discussed in an issue first.&lt;/p&gt; &#xA;&lt;p&gt;Remember to be respectful and open minded!&lt;/p&gt; &#xA;&lt;h2&gt;Time Machines&lt;/h2&gt; &#xA;&lt;p&gt;The Time Machine is a core primitive of Timecraft that brings a new step function in scaling the development and operation of distributed systems. Because the recording happens at the bottom-most level of interaction between the host runtime and the guest applications, it scales with the addition of new capabilities. For example, recording all network connections at the socket layer means that we can track the network messages exchanged in any protocol. Applications using protocols that cannot yet generate high-level observability can still be executed and recorded, and capabilities can be added later on to extract value from the records.&lt;/p&gt; &#xA;&lt;p&gt;Decoupling the recording from the high-level machinery is the architectural model that brings scalability. Instead of systems having to implement their instrumentation, the separation of concerns offered by the low-level recording capability provides a much more powerful model where extracting context from the record does not require modification of the application code, and can happen after the fact on records of past executions.&lt;/p&gt; &#xA;&lt;p&gt;Because the capture happens on the critical path of the guest application, it must be fast. The write path of the time machine must be optimized to have the lowest possible cost. The data captured is first buffered in memory, then sent to local storage and can be synced asynchronously to an object store like S3 for long-term durability at an affordable cost.&lt;/p&gt; &#xA;&lt;p&gt;Over time, we anticipate that the development of most operational capabilities could be built on top of Time Machines: time travel debugging through layers of services, high-level telemetry, or deterministic simulations could all be derived from the records captured from the execution of guest applications on the runtime. The possibilities span far beyond software operations and could even reach the realm of data analytics: data lakes of application records where asynchronous batch processing pipelines create views tailored to provide insight into all aspects of the products built on top of those distributed systems.&lt;/p&gt; &#xA;&lt;p&gt;One of the main challenges of those Time Machines is facilitating access to the scale of records that it produces. Even with effective compression to minimize the storage footprint, they can geneate very large volumes of information. Developing solutions to efficiently access the gold mine of data captured in the logs is one of the responsibilities that Timecraft can fulfill on behalf of the applications it runs.&lt;/p&gt; &#xA;&lt;h2&gt;Task Orchestration&lt;/h2&gt; &#xA;&lt;p&gt;The industry is progressively adopting task orchestration as a way to reach new levels of engineering and infrastructure scale. The Serverless/Microservice model is showing its limits and the realization is settling that composing large amounts of infrastructure pieces with container orchestrators is not viable. The container as a unit carries too much responsibility and building the tools necessary to successfully develop and operate distributed software systems has to rely on primitives which are not well suited to the challenge.&lt;/p&gt; &#xA;&lt;p&gt;Workflow orchestrators are responses to the impracticality of scaling the development and maintenance of such systems at the infrastructure layer. The frameworks raise the abstraction level, giving engineers composable building blocks that they can use to detach the software logic of their distributed applications from the infrastructure layout. Decoupling helps control the problem scope of each layer, giving engineers a lot more runway to grow and scale their systems by dealing with simpler logical problems at each layer instead of having to account for the combination of possibilities created by leaky abstractions.&lt;/p&gt; &#xA;&lt;p&gt;In successfully enabling engineers to reach the next level of scale, those solutions hit another physical limit: the complexity of the business logic grows exponentially with the number of orchestrated tasks. In our experience, this limit is attained extremely quickly after the introduction of a workflow orchestrator; it does not prevent the system from continuing to scale and grow, but it limits the engineersâ€™ ability to add features and assist product development because their time is allocated to creating the observability and controls needed to successfully manage the platform. Time Machines are a much more effective answer to this problem, the always-on recording and complete view of the system execution they provide free engineering resources from the responsibility of creating the necessary instrumentation.&lt;/p&gt; &#xA;&lt;h2&gt;Untrusted Code Execution&lt;/h2&gt; &#xA;&lt;p&gt;The tension of limited product development capacity also creates a window of perspective into the next barrier that businesses run into: the increased complexity of their product logic makes it impractical to build software accounting for and evolving with all possible use cases. This is when the need to allow external parties to customize their product usage by injecting small pieces of software into the platform arises. Opening up the door to external contributors is also seen as an opportunity to lift the pressure off of tightly locked engineering resources; however, it never works unless the engineering team is already able to leverage this development model, then external developers are just one of the many entities contributing to the product.&lt;/p&gt; &#xA;&lt;p&gt;The need to enable customization from third parties comes with extreme challenges to controlling product safety and quality. The ability to create products allowing the secure injection of code is becoming a differentiating factor between companies that delight customers in the way they can be customized to their needs and those that are collapsing under the weight of their attempt at incorporating all possible use cases in their core product.&lt;/p&gt; &#xA;&lt;p&gt;By combining a &lt;em&gt;time machine&lt;/em&gt; and a &lt;em&gt;task orchestrator&lt;/em&gt; with the sandboxing compabilities of WebAssembly, Timecraft offers a novel take on the way distributed systems can be built to address the ever more complex demand that businesses have for software.&lt;/p&gt;</summary>
  </entry>
</feed>