<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-18T01:31:49Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Musixal/Backhaul</title>
    <updated>2025-06-18T01:31:49Z</updated>
    <id>tag:github.com,2025-06-18:/Musixal/Backhaul</id>
    <link href="https://github.com/Musixal/Backhaul" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightning-fast reverse tunneling solution for NAT traversal, optimized for handling massive concurrent connections with tcp, tcpmux, udp, udp over tcp, ws, wsmux, wss and wssmux support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Backhaul&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the &lt;strong&gt;&lt;code&gt;Backhaul&lt;/code&gt;&lt;/strong&gt; project! This project provides a high-performance reverse tunneling solution optimized for handling massive concurrent connections through NAT and firewalls. This README will guide you through setting up and configuring both server and client components, including details on different transport protocols.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#configuration-options&#34;&gt;Configuration Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#detailed-configuration&#34;&gt;Detailed Configuration&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#tcp-configuration&#34;&gt;TCP Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#tcp-multiplexing-configuration&#34;&gt;TCP Multiplexing Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#udp-configuration&#34;&gt;UDP Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#websocket-configuration&#34;&gt;WebSocket Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#secure-websocket-configuration&#34;&gt;Secure WebSocket Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#ws-multiplexing-configuration&#34;&gt;WS Multiplexing Configuration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#wss-multiplexing-configuration&#34;&gt;WSS Multiplexing Configuration&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#generating-a-self-signed-tls-certificate-with-openssl&#34;&gt;Generating a Self-Signed TLS Certificate with OpenSSL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#running-backhaul-as-a-service&#34;&gt;Running backhaul as a service&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/#donation&#34;&gt;Donation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This project offers a robust reverse tunneling solution to overcome NAT and firewall restrictions, supporting various transport protocols. It’s engineered for high efficiency and concurrency.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance&lt;/strong&gt;: Optimized for handling massive concurrent connections efficiently.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Protocol Flexibility&lt;/strong&gt;: Supports TCP, WebSocket (WS), and Secure WebSocket (WSS) transports.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;UDP over TCP&lt;/strong&gt;: Implements UDP traffic encapsulation and forwarding over a TCP connection for reliable delivery with built-in congestion control.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiplexing&lt;/strong&gt;: Enables multiple connections over a single transport with SMUX.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NAT &amp;amp; Firewall Bypass&lt;/strong&gt;: Overcomes restrictions with reverse tunneling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Traffic Sniffing&lt;/strong&gt;: Optional network traffic monitoring with logging support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurable Keepalive&lt;/strong&gt;: Adjustable keep-alive and heartbeat intervals for stable connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TLS Encryption&lt;/strong&gt;: Secure connections via WSS with support for custom TLS certificates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Web Interface&lt;/strong&gt;: Real-time monitoring through a lightweight web interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Hot Reload Configuration&lt;/strong&gt;: Supports dynamic configuration reloading without server restarts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Download&lt;/strong&gt; the latest release from the &lt;a href=&#34;https://github.com/musixal/backhaul/releases&#34;&gt;GitHub releases page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Extract&lt;/strong&gt; the archive (adjust the &lt;code&gt;filename&lt;/code&gt; if needed):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;tar -xzf backhaul_linux_amd64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run&lt;/strong&gt; the executable:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./backhaul&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can also build from source if preferred:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/musixal/backhaul.git&#xA;cd backhaul&#xA;go build&#xA;./backhaul&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The main executable for this project is &lt;code&gt;backhaul&lt;/code&gt;. It requires a TOML configuration file for both the server and client components.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;To start using the solution, you&#39;ll need to configure both server and client components. Here’s how to set up basic configurations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server Configuration&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a configuration file named &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]# Local, IRAN&#xA;bind_addr = &#34;0.0.0.0:3080&#34;    # Address and port for the server to listen on (mandatory).&#xA;transport = &#34;tcp&#34;             # Protocol to use (&#34;tcp&#34;, &#34;tcpmux&#34;, &#34;ws&#34;, &#34;wss&#34;, &#34;wsmux&#34;, &#34;wssmux&#34;. mandatory).&#xA;accept_udp = false             # Enable transferring UDP connections over TCP transport. (optional, default: false)&#xA;token = &#34;your_token&#34;          # Authentication token for secure communication (optional).&#xA;keepalive_period = 75         # Interval in seconds to send keep-alive packets.(optional, default: 75s)&#xA;nodelay = false               # Enable TCP_NODELAY (optional, default: false).&#xA;channel_size = 2048           # Tunnel and Local channel size. Excess connections are discarded. (optional, default: 2048).&#xA;heartbeat = 40                # In seconds. Ping interval for tunnel stability. Min: 1s. (Optional, default: 40s)&#xA;mux_con = 8                   # Mux concurrency. Number of connections that can be multiplexed into a single stream (optional, default: 8).&#xA;mux_version = 1               # SMUX protocol version (1 or 2). Version 2 may have extra features. (optional)&#xA;mux_framesize = 32768         # 32 KB. The maximum size of a frame that can be sent over a connection. (optional)&#xA;mux_recievebuffer = 4194304   # 4 MB. The maximum buffer size for incoming data per connection. (optional)&#xA;mux_streambuffer = 65536      # 256 KB. The maximum buffer size per individual stream within a connection. (optional)&#xA;sniffer = false               # Enable or disable network sniffing for monitoring data. (optional, default false)&#xA;web_port = 2060               # Port number for the web interface or monitoring interface. (optional, set to 0 to disable).&#xA;sniffer_log =&#34;/root/log.json&#34; # Filename used to store network traffic and usage data logs. (optional, default backhaul.json)&#xA;tls_cert = &#34;/root/server.crt&#34; # Path to the TLS certificate file for wss/wssmux. (mandatory).&#xA;tls_key = &#34;/root/server.key&#34;  # Path to the TLS private key file for wss/wssmux. (mandatory).&#xA;log_level = &#34;info&#34;            # Log level (&#34;panic&#34;, &#34;fatal&#34;, &#34;error&#34;, &#34;warn&#34;, &#34;info&#34;, &#34;debug&#34;, &#34;trace&#34;, optional, default: &#34;info&#34;).&#xA;&#xA;ports = [&#xA;&#34;443-600&#34;,                  # Listen on all ports in the range 443 to 600&#xA;&#34;443-600:5201&#34;,             # Listen on all ports in the range 443 to 600 and forward traffic to 5201&#xA;&#34;443-600=1.1.1.1:5201&#34;,     # Listen on all ports in the range 443 to 600 and forward traffic to 1.1.1.1:5201&#xA;&#34;443&#34;,                      # Listen on local port 443 and forward to remote port 443 (default forwarding).&#xA;&#34;4000=5000&#34;,                # Listen on local port 4000 (bind to all local IPs) and forward to remote port 5000.&#xA;&#34;127.0.0.2:443=5201&#34;,       # Bind to specific local IP (127.0.0.2), listen on port 443, and forward to remote port 5201.&#xA;&#34;443=1.1.1.1:5201&#34;,         # Listen on local port 443 and forward to a specific remote IP (1.1.1.1) on port 5201.&#xA;&#34;127.0.0.2:443=1.1.1.1:5201&#34;,  # Bind to specific local IP (127.0.0.2), listen on port 443, and forward to remote IP (1.1.1.1) on port 5201.&#xA;]&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To start the &lt;code&gt;server&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./backhaul -c config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client Configuration&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a configuration file named &lt;code&gt;config.toml&lt;/code&gt; for the client:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]  # Behind NAT, firewall-blocked&#xA;remote_addr = &#34;0.0.0.0:3080&#34;  # Server address and port (mandatory).&#xA;edge_ip = &#34;188.114.96.0&#34;      # Edge IP used for CDN connection, specifically for WebSocket-based transports.(Optional, default none)&#xA;transport = &#34;tcp&#34;             # Protocol to use (&#34;tcp&#34;, &#34;tcpmux&#34;, &#34;ws&#34;, &#34;wss&#34;, &#34;wsmux&#34;, &#34;wssmux&#34;. mandatory).&#xA;token = &#34;your_token&#34;          # Authentication token for secure communication (optional).&#xA;connection_pool = 8           # Number of pre-established connections.(optional, default: 8).&#xA;aggressive_pool = false       # Enables aggressive connection pool management.(optional, default: false).&#xA;keepalive_period = 75         # Interval in seconds to send keep-alive packets. (optional, default: 75s)&#xA;nodelay = false               # Use TCP_NODELAY (optional, default: false).&#xA;retry_interval = 3            # Retry interval in seconds (optional, default: 3s).&#xA;dial_timeout = 10             # Sets the max wait time for establishing a network connection. (optional, default: 10s)&#xA;mux_version = 1               # SMUX protocol version (1 or 2). Version 2 may have extra features. (optional)&#xA;mux_framesize = 32768         # 32 KB. The maximum size of a frame that can be sent over a connection. (optional)&#xA;mux_recievebuffer = 4194304   # 4 MB. The maximum buffer size for incoming data per connection. (optional)&#xA;mux_streambuffer = 65536      # 256 KB. The maximum buffer size per individual stream within a connection. (optional)&#xA;sniffer = false               # Enable or disable network sniffing for monitoring data. (optional, default false)&#xA;web_port = 2060               # Port number for the web interface or monitoring interface. (optional, set to 0 to disable).&#xA;sniffer_log =&#34;/root/log.json&#34; # Filename used to store network traffic and usage data logs. (optional, default backhaul.json)&#xA;log_level = &#34;info&#34;            # Log level (&#34;panic&#34;, &#34;fatal&#34;, &#34;error&#34;, &#34;warn&#34;, &#34;info&#34;, &#34;debug&#34;, &#34;trace&#34;, optional, default: &#34;info&#34;).&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To start the &lt;code&gt;client&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./backhaul -c config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Detailed Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;TCP Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;tcp&#34;&#xA;accept_udp = false &#xA;token = &#34;your_token&#34;&#xA;keepalive_period = 75  &#xA;nodelay = true &#xA;heartbeat = 40 &#xA;channel_size = 2048&#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;tcp&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;nodelay = true &#xA;retry_interval = 3&#xA;sniffer = false&#xA;web_port = 2060 &#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;remote_addr&lt;/code&gt;: The IPv4, IPv6, or domain address of the server to which the client connects.&lt;/p&gt; &lt;p&gt;&lt;code&gt;token&lt;/code&gt;: An authentication token used to securely validate and authenticate the connection between the client and server within the tunnel.&lt;/p&gt; &lt;p&gt;&lt;code&gt;channel_size&lt;/code&gt;: The queue size for forwarding packets from server to the client. If the limit is exceeded, packets will be dropped.&lt;/p&gt; &lt;p&gt;&lt;code&gt;connection_pool&lt;/code&gt;: Set the number of pre-established connections for better latency.&lt;/p&gt; &lt;p&gt;&lt;code&gt;nodelay&lt;/code&gt;: Refers to a TCP socket option (TCP_NODELAY) that improve the latency but decrease the bandwidth&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;TCP Multiplexing Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;tcpmux&#34;&#xA;token = &#34;your_token&#34; &#xA;keepalive_period = 75&#xA;nodelay = true &#xA;heartbeat = 40 &#xA;channel_size = 2048&#xA;mux_con = 8&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;tcpmux&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;retry_interval = 3&#xA;nodelay = true &#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt; &lt;p&gt;&lt;code&gt;mux_session&lt;/code&gt;: Number of multiplexed sessions. Increase this if you need to handle more simultaneous sessions over a single connection.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refer to TCP configuration for more information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;UDP Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;udp&#34;&#xA;token = &#34;your_token&#34;&#xA;heartbeat = 20 &#xA;channel_size = 2048&#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;udp&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;retry_interval = 3&#xA;sniffer = false&#xA;web_port = 2060 &#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WebSocket Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:8080&#34;&#xA;transport = &#34;ws&#34;&#xA;token = &#34;your_token&#34; &#xA;channel_size = 2048&#xA;keepalive_period = 75 &#xA;heartbeat = 40&#xA;nodelay = true &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:8080&#34;&#xA;edge_ip = &#34;&#34; &#xA;transport = &#34;ws&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75 &#xA;dial_timeout = 10&#xA;retry_interval = 3&#xA;nodelay = true &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refer to TCP configuration for more information.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Secure WebSocket Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:8443&#34;&#xA;transport = &#34;wss&#34;&#xA;token = &#34;your_token&#34; &#xA;channel_size = 2048&#xA;keepalive_period = 75 &#xA;nodelay = true &#xA;tls_cert = &#34;/root/server.crt&#34;      &#xA;tls_key = &#34;/root/server.key&#34;&#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:8443&#34;&#xA;edge_ip = &#34;&#34; &#xA;transport = &#34;wss&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;retry_interval = 3  &#xA;nodelay = true &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Refer to the next section for instructions on generating &lt;code&gt;tls_cert&lt;/code&gt; and &lt;code&gt;tls_key&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WS Multiplexing Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:3080&#34;&#xA;transport = &#34;wsmux&#34;&#xA;token = &#34;your_token&#34; &#xA;keepalive_period = 75&#xA;nodelay = true &#xA;heartbeat = 40 &#xA;channel_size = 2048&#xA;mux_con = 8&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:3080&#34;&#xA;edge_ip = &#34;&#34; &#xA;transport = &#34;wsmux&#34;&#xA;token = &#34;your_token&#34; &#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;nodelay = true&#xA;retry_interval = 3&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;WSS Multiplexing Configuration&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[server]&#xA;bind_addr = &#34;0.0.0.0:443&#34;&#xA;transport = &#34;wssmux&#34;&#xA;token = &#34;your_token&#34; &#xA;keepalive_period = 75&#xA;nodelay = true &#xA;heartbeat = 40 &#xA;channel_size = 2048&#xA;mux_con = 8&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536 &#xA;tls_cert = &#34;/root/server.crt&#34;      &#xA;tls_key = &#34;/root/server.key&#34;&#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;ports = []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Client&lt;/strong&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[client]&#xA;remote_addr = &#34;0.0.0.0:443&#34;&#xA;edge_ip = &#34;&#34; &#xA;transport = &#34;wssmux&#34;&#xA;token = &#34;your_token&#34; &#xA;keepalive_period = 75&#xA;dial_timeout = 10&#xA;nodelay = true&#xA;retry_interval = 3&#xA;connection_pool = 8&#xA;aggressive_pool = false&#xA;mux_version = 1&#xA;mux_framesize = 32768 &#xA;mux_recievebuffer = 4194304&#xA;mux_streambuffer = 65536  &#xA;sniffer = false &#xA;web_port = 2060&#xA;sniffer_log = &#34;/root/backhaul.json&#34;&#xA;log_level = &#34;info&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Generating a Self-Signed TLS Certificate with OpenSSL&lt;/h2&gt; &#xA;&lt;p&gt;To generate a TLS certificate and key, you can use tools like OpenSSL. Here’s a step-by-step guide on how to create a self-signed certificate and key using OpenSSL:&lt;/p&gt; &#xA;&lt;h3&gt;Step 1: Install OpenSSL&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t already have OpenSSL installed, you can install it using your system&#39;s package manager.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;On Ubuntu/Debian&lt;/strong&gt;: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install openssl&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Step 2: Generate a Private Key&lt;/h3&gt; &#xA;&lt;p&gt;To generate a 2048-bit RSA private key, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl genpkey -algorithm RSA -out server.key -pkeyopt rsa_keygen_bits:2048&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a file named &lt;code&gt;server.key&lt;/code&gt;, which is your private key.&lt;/p&gt; &#xA;&lt;h3&gt;Step 3: Generate a Certificate Signing Request (CSR)&lt;/h3&gt; &#xA;&lt;p&gt;Create a Certificate Signing Request (CSR) using the private key. This CSR is used to generate the SSL certificate:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl req -new -key server.key -out server.csr&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will be prompted to enter information for the CSR. For the common name (CN), use the domain name or IP address where your server will be hosted. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Country Name (2 letter code) [AU]:US&#xA;State or Province Name (full name) [Some-State]:California&#xA;Locality Name (eg, city) []:San Francisco&#xA;Organization Name (eg, company) [Internet Widgits Pty Ltd]:Your Company Name&#xA;Organizational Unit Name (eg, section) []:&#xA;Common Name (e.g. server FQDN or YOUR name) []:example.com&#xA;Email Address []:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4: Generate a Self-Signed Certificate&lt;/h3&gt; &#xA;&lt;p&gt;Use the CSR and private key to generate a self-signed certificate. Specify the validity period (in days):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;openssl x509 -req -in server.csr -signkey server.key -out server.crt -days 365&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate a certificate named &lt;code&gt;server.crt&lt;/code&gt;, valid for 365 days.&lt;/p&gt; &#xA;&lt;h3&gt;Recap of the Files Generated:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;server.key&lt;/code&gt;: Your private key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.csr&lt;/code&gt;: The certificate signing request (used to generate the certificate).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server.crt&lt;/code&gt;: Your self-signed TLS certificate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running backhaul as a service&lt;/h2&gt; &#xA;&lt;p&gt;To create a service file for your backhaul project that ensures the service restarts automatically, you can use the following template for a systemd service file. Assuming your project runs a reverse tunnel and the main executable file is located in a certain path, here&#39;s a basic example:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create the service file &lt;code&gt;/etc/systemd/system/backhaul.service&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[Unit]&#xA;Description=Backhaul Reverse Tunnel Service&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;ExecStart=/root/backhaul -c /root/config.toml&#xA;Restart=always&#xA;RestartSec=3&#xA;LimitNOFILE=1048576&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;After creating the service file, enable and start the service:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl daemon-reload&#xA;sudo systemctl enable backhaul.service&#xA;sudo systemctl start backhaul.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;To verify if the service is running:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl status backhaul.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;View the most recent log entries for the backhaul.service unit:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;journalctl -u backhaul.service -e -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: How do I decide which transport protocol to use?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tcp&lt;/code&gt;: Use if you need straightforward TCP connections.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tcpmux&lt;/code&gt;: Use if you need to handle multiple sessions over a single connection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ws&lt;/code&gt;: Use if you need to traverse HTTP-based firewalls or proxies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wss&lt;/code&gt;: Use this for secure WebSocket connections that need to traverse HTTP-based firewalls or proxies. It encrypts data for added security, similar to WS but with encryption.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;For in-depth information, please visit the dedicated &lt;a href=&#34;https://raw.githubusercontent.com/Musixal/Backhaul/main/benchmark/&#34;&gt;Benchmark page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the AGPL-3.0 license. See the LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Donation&lt;/h2&gt; &#xA;&lt;p&gt;Donate TRX (TRC-20) to support our project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-wallet&#34;&gt;TMVBGzX4qpt12R1qWsJMpT1ttoKH1kus1H&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thanks for your support!&lt;/p&gt; &#xA;&lt;h2&gt;Stargazers over time&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/Musixal/Backhaul&#34;&gt;&lt;img src=&#34;https://starchart.cc/Musixal/Backhaul.svg?variant=light&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>