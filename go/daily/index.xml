<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-02T01:36:33Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jetpack-io/typeid</title>
    <updated>2023-07-02T01:36:33Z</updated>
    <id>tag:github.com,2023-07-02:/jetpack-io/typeid</id>
    <link href="https://github.com/jetpack-io/typeid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Type-safe, K-sortable, globally unique identifier inspired by Stripe IDs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TypeID&lt;/h1&gt; &#xA;&lt;h3&gt;A type-safe, K-sortable, globally unique identifier inspired by Stripe IDs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/jetpack-io/typeid&#34; alt=&#34;License: Apache 2.0&#34;&gt; &lt;a href=&#34;https://discord.gg/agbskCJXk2&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/903306922852245526?color=7389D8&amp;amp;label=discord&amp;amp;logo=discord&amp;amp;logoColor=ffffff&#34; alt=&#34;Join Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jetpack.io/devbox/&#34;&gt;&lt;img src=&#34;https://jetpack.io/img/devbox/shield_galaxy.svg?sanitize=true&#34; alt=&#34;Built with Devbox&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is it?&lt;/h2&gt; &#xA;&lt;p&gt;TypeIDs are a modern, type-safe extension of UUIDv7. Inspired by a similar use of prefixes in Stripe&#39;s APIs.&lt;/p&gt; &#xA;&lt;p&gt;TypeIDs are canonically encoded as lowercase strings consisting of three parts:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A type prefix (at most 63 characters in all lowercase ASCII [a-z])&lt;/li&gt; &#xA; &lt;li&gt;An underscore &#39;_&#39; separator&lt;/li&gt; &#xA; &lt;li&gt;A 128-bit UUIDv7 encoded as a 26-character string using a modified base32 encoding.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s an example of a TypeID of type &lt;code&gt;user&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  user_2x4y6z8a0b1c2d3e4f5g6h7j8k&#xA;  └──┘ └────────────────────────┘&#xA;  type    uuid suffix (base32)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/jetpack-io/typeid/main/spec&#34;&gt;formal specification&lt;/a&gt; defines the encoding in more detail.&lt;/p&gt; &#xA;&lt;h2&gt;Benefits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Type-safe:&lt;/strong&gt; you can&#39;t accidentally use a &lt;code&gt;user&lt;/code&gt; ID where a &lt;code&gt;post&lt;/code&gt; ID is expected. When debugging, you can immediately understand what type of entity a TypeID refers to thanks to the type prefix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compatible with UUIDs:&lt;/strong&gt; TypeIDs are a superset of UUIDs. They are based on the upcoming &lt;a href=&#34;https://www.ietf.org/archive/id/draft-peabody-dispatch-new-uuid-format-04.html#name-uuid-version-7&#34;&gt;UUIDv7 standard&lt;/a&gt;. If you decode the TypeID and remove the type information, you get a valid UUIDv7.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;K-Sortable&lt;/strong&gt;: TypeIDs are K-sortable and can be used as the primary key in a database while ensuring good locality. Compare to entirely random global ids, like UUIDv4, that generally suffer from poor database locality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Thoughtful encoding&lt;/strong&gt;: the base32 encoding is URL safe, case-insensitive, avoids ambiguous characters, can be selected for copy-pasting by double-clicking, and is a more compact encoding than the traditional hex encoding used by UUIDs (26 characters vs 36 characters).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Implementations&lt;/h2&gt; &#xA;&lt;p&gt;Implementations should adhere to the formal &lt;a href=&#34;https://raw.githubusercontent.com/jetpack-io/typeid/main/spec&#34;&gt;specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Official Implementations by &lt;code&gt;jetpack.io&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jetpack-io/typeid-go&#34;&gt;Go&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓ Implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;... Coming Soon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jetpack-io/typeid-sql&#34;&gt;SQL&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓ Implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jetpack-io/typeid-js&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓ Implemented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Community Provided Implementations&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Author&lt;/th&gt; &#xA;   &lt;th&gt;Validated Against Spec?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/TenCoKaciStromy/typeid-dotnet&#34;&gt;C# (.Net)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;@TenCoKaciStromy&lt;/td&gt; &#xA;   &lt;td&gt;Not Yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/akhundMurad/typeid-python&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;@akhundMurad&lt;/td&gt; &#xA;   &lt;td&gt;Yes, 2023-06-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/broothie/typeid-ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/broothie&#34;&gt;@broothie&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes, on 2023-06-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alisa101rs/typeid-rs&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;@alisa101rs&lt;/td&gt; &#xA;   &lt;td&gt;Not Yet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/conradludgate/type-safe-id&#34;&gt;Rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;@conradludgate&lt;/td&gt; &#xA;   &lt;td&gt;Yes, on 2023-07-01&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Frizlab/swift-typeid&#34;&gt;Swift&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;@Frizlab&lt;/td&gt; &#xA;   &lt;td&gt;Yes, on 2023-06-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ongteckwu/typeid-ts&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;@ongteckwu&lt;/td&gt; &#xA;   &lt;td&gt;Yes, on 2023-06-30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;We are looking for community contributions to implement TypeIDs in other languages.&lt;/p&gt; &#xA;&lt;h2&gt;Command-line Tool&lt;/h2&gt; &#xA;&lt;p&gt;This repo includes a command-line tool for generating TypeIDs. To install it, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://get.jetpack.io/typeid | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate a new TypeID, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ typeid new prefix&#xA;prefix_01h2xcejqtf2nbrexx3vqjhp41&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To decode an existing TypeID into a UUID run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ typeid decode prefix_01h2xcejqtf2nbrexx3vqjhp41&#xA;type: prefix&#xA;uuid: 0188bac7-4afa-78aa-bc3b-bd1eef28d881&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And to encode an existing UUID into a TypeID run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ typeid encode prefix 0188bac7-4afa-78aa-bc3b-bd1eef28d881&#xA;prefix_01h2xcejqtf2nbrexx3vqjhp41&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related Work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ietf.org/archive/id/draft-peabody-dispatch-new-uuid-format-04.html#name-uuid-version-7&#34;&gt;UUIDv7&lt;/a&gt; - The upcoming UUID standard that TypeIDs are based on.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternatives to UUIDv7 that are also worth considering (but not type-safe like TypeIDs):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rs/xid&#34;&gt;xid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ulid&#34;&gt;ulid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/segmentio/ksuid&#34;&gt;ksuid&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>teslamotors/fleet-telemetry</title>
    <updated>2023-07-02T01:36:33Z</updated>
    <id>tag:github.com,2023-07-02:/teslamotors/fleet-telemetry</id>
    <link href="https://github.com/teslamotors/fleet-telemetry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/teslamotors/fleet-telemetry/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/teslamotors/fleet-telemetry/actions/workflows/build.yml/badge.svg?branch=main&#34; alt=&#34;Build and Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/teslamotors/fleet-telemetry/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/teslamotors/fleet-telemetry?label=latest%20tag&#34; alt=&#34;Current Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/tesla/fleet-telemetry/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/tesla/fleet-telemetry?label=docker%20tags&#34; alt=&#34;DockerHub Tags&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tesla Fleet Telemetry&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;At Tesla, we believe that security and privacy are core tenets of any modern technology. Customers should be able to decide what data they share with third parties, how they share it, and when it can be shared. We&#39;ve developed Fleet Telemetry, a decentralized framework that allows customers to create a secure and direct bridge from their Tesla devices to any provider they authorize. Fleet Telemetry is a simple, scalable, and secure data exchange service for vehicles and other devices.&lt;/p&gt; &#xA;&lt;p&gt;Fleet Telemetry is a server reference implementation. The service handles device connectivity as well as receiving and storing transmitted data. Once configured, devices establish a WebSocket connection to push configurable telemetry records. Fleet Telemetry provides clients with ack, error, or rate limit responses.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring and running the service&lt;/h2&gt; &#xA;&lt;p&gt;As a service provider, you will need to register a publically available endpoint to receive device connections. Tesla devices will rely on a mutual TLS (mTLS) WebSocket to create a connection with the backend. The application has been designed to operate on top of Kubernetes, but you can run it as a standalone binary if you prefer.&lt;/p&gt; &#xA;&lt;h3&gt;Install on Kubernetes with Helm Chart (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;Please follow these &lt;a href=&#34;https://github.com/teslamotors/helm-charts/raw/main/charts/fleet-telemetry/README.md&#34;&gt;instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual install (skip this if you have installed with Helm on Kubernetes)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Allocate and assign a &lt;a href=&#34;https://en.wikipedia.org/wiki/Fully_qualified_domain_name&#34;&gt;FQDN&lt;/a&gt;. This will be used in the server and client (vehicle) configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Design a simple hosting architecture. We recommend: Firewall/Loadbalancer -&amp;gt; Fleet Telemetry -&amp;gt; Kafka.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure mTLS connections are terminated on the Fleet Telemetry service.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configure the server&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;host&#34;: string - hostname,&#xA;  &#34;port&#34;: int - port,&#xA;  &#34;log_level&#34;: string - trace, debug, info, warn, error,&#xA;  &#34;json_log_enable&#34;: bool,&#xA;  &#34;namespace&#34;: string - kafka topic prefix,&#xA;  &#34;reliable_ack&#34;: bool - for use with reliable datastores, recommend setting to true with kafka,&#xA;  &#34;monitoring&#34;: {&#xA;    &#34;prometheus_metrics_port&#34;: int,&#xA;    &#34;profiler_port&#34;: int,&#xA;    &#34;profiling_path&#34;: string - out path,&#xA;    &#34;statsd&#34;: { if you are not using prometheus&#xA;      &#34;host&#34;: string - host:port of the statsd server,&#xA;      &#34;prefix&#34;: string - prefix for statsd metrics,&#xA;      &#34;sample_rate&#34;: int - 0 to 100 percentage to sample stats,&#xA;      &#34;flush_period&#34;: int - ms flush period&#xA;    }&#xA;  },&#xA;  &#34;kafka&#34;: { //librdkafka kafka config, seen here: https://raw.githubusercontent.com/confluentinc/librdkafka/master/CONFIGURATION.md&#xA;    &#34;bootstrap.servers&#34;: &#34;kafka:9092&#34;,&#xA;    &#34;queue.buffering.max.messages&#34;: 1000000&#xA;  },&#xA;  &#34;kinesis&#34;: {&#xA;    &#34;max_retries&#34;: 3,&#xA;    &#34;streams&#34;: {&#xA;      &#34;V&#34;: &#34;custom_stream_name&#34;&#xA;    }&#xA;  },&#xA;  &#34;rate_limit&#34;: {&#xA;    &#34;enabled&#34;: bool,&#xA;    &#34;message_limit&#34;: int - ex.: 1000&#xA;  },&#xA;  &#34;records&#34;: { list of records and their dispatchers, currently: alerts, errors, and V(vehicle data)&#xA;    &#34;alerts&#34;: [&#xA;        &#34;logger&#34;&#xA;    ],&#xA;    &#34;errors&#34;: [&#xA;        &#34;logger&#34;&#xA;    ],&#xA;    &#34;V&#34;: [&#xA;        &#34;kinesis&#34;,&#xA;        &#34;kafka&#34;&#xA;    ]&#xA;  },&#xA;  &#34;tls&#34;: {&#xA;    &#34;server_cert&#34;: string - server cert location,&#xA;    &#34;server_key&#34;: string - server key location&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/fleet-telemetry/main/examples/server_config.json&#34;&gt;server_config.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Deploy and run the server. Get the latest docker image information from our &lt;a href=&#34;https://hub.docker.com/r/tesla/fleet-telemetry/tags&#34;&gt;docker hub&lt;/a&gt;. This can be run as a binary via &lt;code&gt;./fleet-telemetry -config=/etc/fleet-telemetry/config.json&lt;/code&gt; directly on a server, or as a Kubernetes deployment. Example snippet:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;apiVersion: apps/v1&#xA;kind: Deployment&#xA;metadata:&#xA;  name: fleet-telemetry&#xA;spec:&#xA;  replicas: 1&#xA;  selector:&#xA;    matchLabels:&#xA;      app: fleet-telemetry&#xA;  template:&#xA;    metadata:&#xA;      labels:&#xA;        app: fleet-telemetry&#xA;    spec:&#xA;      containers:&#xA;      - name: fleet-telemetry&#xA;        image: tesla/fleet-telemetry:&amp;lt;tag&amp;gt;&#xA;        command: [&#34;/fleet-telemetry&#34;, &#34;-config=/etc/fleet-telemetry/config.json&#34;]&#xA;        ports:&#xA;        - containerPort: 443&#xA;---&#xA;apiVersion: v1&#xA;kind: Service&#xA;metadata:&#xA;  name: fleet-telemetry&#xA;spec:&#xA;  selector:&#xA;    app: fleet-telemetry&#xA;  ports:&#xA;    - protocol: TCP&#xA;      port: 443&#xA;      targetPort: 443&#xA;  type: LoadBalancer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Create and share a vehicle configuration with Tesla.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;hostname&#34;: string - server hostname,&#xA;  &#34;ca&#34;: string - pem format ca certificate(s),&#xA;  &#34;fields&#34;: { map of field configurations&#xA;    name (string) -&amp;gt; {&#xA;        &#34;interval_seconds&#34;: int - data polling interval in seconds&#xA;    }...&#xA;  },&#xA;  &#34;alert_types&#34;: [ string list - alerts audiences that should be pushed to the server, recommendation is to use only &#34;service&#34; ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example: &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/fleet-telemetry/main/examples/client_config.json&#34;&gt;client_config.json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backends/dispatchers&lt;/h2&gt; &#xA;&lt;p&gt;The following &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/fleet-telemetry/main/telemetry/producer.go#L10-L19&#34;&gt;dispatchers&lt;/a&gt; are supported&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kafka (preferred): Configure with the config.json file. See implementation here: &lt;a href=&#34;https://raw.githubusercontent.com/teslamotors/fleet-telemetry/main/config/config.go&#34;&gt;config/config.go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kinesis: Configure with standard &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-envvars.html&#34;&gt;AWS env variables and config files&lt;/a&gt;. The default aws credentials and config files are: &lt;code&gt;~/.aws/credentials&lt;/code&gt; and &lt;code&gt;~/.aws/config&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;By default stream names will be *configured namespace*_*topic_name* ex.: tesla_V, tesla_errors, tesla_alerts, etc&lt;/li&gt; &#xA;   &lt;li&gt;Configure stream names directly by setting the streams config &lt;code&gt;&#34;kinesis&#34;: { &#34;streams&#34;: { *topic_name*: stream_name } }&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Override stream names with env variables: KINESIS_STREAM_*uppercase topic* ex.: &lt;code&gt;KINESIS_STREAM_V&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Google pubsub: Along with the required pubsub config (See ./test/integration/config.json for example), be sure to set the environment variable &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Logger: This is a simple STDOUT logger that serializes the protos to json.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Metrics&lt;/h2&gt; &#xA;&lt;p&gt;Prometheus or a StatsD interface supporting data store for metrics. This is required for monitoring your applications.&lt;/p&gt; &#xA;&lt;h2&gt;Protos&lt;/h2&gt; &#xA;&lt;p&gt;Data is encapsulated into protobuf messages of different types. We do not recommend making changes, but if you need to recompile them you can always do so with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install protoc, currently on version 3.21.12: &lt;a href=&#34;https://grpc.io/docs/protoc-installation/&#34;&gt;https://grpc.io/docs/protoc-installation/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install protoc-gen-go: &lt;code&gt;go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run make command&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make generate-golang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;To run the unit tests: &lt;code&gt;make test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Common Errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/fleet-telemetry➜ git:(main) ✗  make test&#xA;go build github.com/confluentinc/confluent-kafka-go/v2/kafka:&#xA;# pkg-config --cflags  -- rdkafka&#xA;Package rdkafka was not found in the pkg-config search path.&#xA;Perhaps you should add the directory containing `rdkafka.pc&#39;&#xA;to the PKG_CONFIG_PATH environment variable&#xA;No package &#39;rdkafka&#39; found&#xA;pkg-config: exit status 1&#xA;make: *** [install] Error 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;librdkafka is missing, on macOS you can install it via &lt;code&gt;brew install librdkafka pkg-config&lt;/code&gt; or follow instructions here &lt;a href=&#34;https://github.com/confluentinc/confluent-kafka-go#getting-started&#34;&gt;https://github.com/confluentinc/confluent-kafka-go#getting-started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;~/fleet-telemetry➜ git:(main) ✗  make test&#xA;go build github.com/confluentinc/confluent-kafka-go/v2/kafka:&#xA;# pkg-config --cflags  -- rdkafka&#xA;Package libcrypto was not found in the pkg-config search path.&#xA;Perhaps you should add the directory containing `libcrypto.pc&#39;&#xA;to the PKG_CONFIG_PATH environment variable&#xA;Package &#39;libcrypto&#39;, required by &#39;rdkafka&#39;, not found&#xA;pkg-config: exit status 1&#xA;make: *** [install] Error 1&#xA;&#xA;~/fleet-telemetry➜ git:(main) ✗  locate libcrypto.pc&#xA;/opt/homebrew/Cellar/openssl@3/3.0.8/lib/pkgconfig/libcrypto.pc&#xA;&#xA;~/fleet-telemetry➜ git:(main) ✗  export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/opt/homebrew/Cellar/openssl@3/3.0.8/lib/pkgconfig/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A reference to libcrypto is not set properly. To resolve find the reference to libcrypto by pkgconfig and set et the PKG_CONFIG_PATH accordingly.&lt;/p&gt; &#xA;&lt;h2&gt;Integration Tests&lt;/h2&gt; &#xA;&lt;p&gt;(Optional): If you want to recreate fake certs for your test: &lt;code&gt;make generate-certs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the integration tests: &lt;code&gt;make integration&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building the binary for Linux from Mac ARM64&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;DOCKER_BUILD_KIT=1 DOCKER_CLI_EXPERIMENTAL=enabled docker buildx version&#xA;docker buildx create --name go-builder --driver docker-container --driver-opt network=host --buildkitd-flags &#39;--allow-insecure-entitlement network.host&#39; --use&#xA;docker buildx inspect --bootstrap&#xA;docker buildx build --no-cache --progress=plain --platform linux/amd64 -t &amp;lt;name:tag&amp;gt;(e.x.: fleet-telemetry:local.1.1) -f Dockerfile . --load&#xA;container_id=$(docker create fleet-telemetry:local.1.1) docker cp $container_id:/fleet-telemetry /tmp/fleet-telemetry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security and Privacy considerations&lt;/h2&gt; &#xA;&lt;p&gt;System administrators should apply standard best practices, which are beyond the scope of this README.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, the following application-specific considerations apply:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vehicles authenticate to the telemetry server with TLS client certificates and use a variety of security measures designed to prevent unauthorized access to the corresponding private key. However, as a defense-in-depth precaution, backend services should anticipate the possibility that a vehicle&#39;s TLS private key may be compromised. Therefore: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Backend systems should sanitize data before using it.&lt;/li&gt; &#xA;   &lt;li&gt;Users should consider threats from actors that may be incentivized to submit falsified data.&lt;/li&gt; &#xA;   &lt;li&gt;Users should filter by vehicle identification number (VIN) using an allowlist if possible.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configuration-signing private keys should be kept offline.&lt;/li&gt; &#xA; &lt;li&gt;Configuration-signing private keys should be kept in an HSM.&lt;/li&gt; &#xA; &lt;li&gt;If telemetry data is compromised, threat actors may be able to make inferences about driver behavior even if explicit location data is not collected. Security policies should be set accordingly.&lt;/li&gt; &#xA; &lt;li&gt;Tesla strongly encourages providers to only collect data they need, limited to frequency that they need.&lt;/li&gt; &#xA; &lt;li&gt;Providers agree to take full responsibility for privacy risks, as soon as data leave the devices (for more info read our privacy policies).&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>openark/orchestrator</title>
    <updated>2023-07-02T01:36:33Z</updated>
    <id>tag:github.com,2023-07-02:/openark/orchestrator</id>
    <link href="https://github.com/openark/orchestrator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MySQL replication topology management and HA&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/openark/orchestrator/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/openark/orchestrator/workflows/upgrade/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://github.com/openark/orchestrator/workflows/system%20tests/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://github.com/openark/orchestrator/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/openark/orchestrator/total.svg?sanitize=true&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/openark/orchestrator/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/openark/orchestrator.svg?sanitize=true&#34; alt=&#34;release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;orchestrator &lt;a href=&#34;https://github.com/openark/orchestrator/tree/master/docs&#34;&gt;[Documentation]&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/openark/orchestrator/raw/master/docs/images/orchestrator-logo-wide.png&#34; alt=&#34;Orchestrator logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;orchestrator&lt;/code&gt; is a MySQL high availability and replication management tool, runs as a service and provides command line access, HTTP API and Web interface. &lt;code&gt;orchestrator&lt;/code&gt; supports:&lt;/p&gt; &#xA;&lt;h4&gt;Discovery&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;orchestrator&lt;/code&gt; actively crawls through your topologies and maps them. It reads basic MySQL info such as replication status and configuration.&lt;/p&gt; &#xA;&lt;p&gt;It provides you with slick visualization of your topologies, including replication problems, even in the face of failures.&lt;/p&gt; &#xA;&lt;h4&gt;Refactoring&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;orchestrator&lt;/code&gt; understands replication rules. It knows about binlog file:position, GTID, Pseudo GTID, Binlog Servers.&lt;/p&gt; &#xA;&lt;p&gt;Refactoring replication topologies can be a matter of drag &amp;amp; drop a replica under another master. Moving replicas around is safe: &lt;code&gt;orchestrator&lt;/code&gt; will reject an illegal refactoring attempt.&lt;/p&gt; &#xA;&lt;p&gt;Fine-grained control is achieved by various command line options.&lt;/p&gt; &#xA;&lt;h4&gt;Recovery&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;orchestrator&lt;/code&gt; uses a holistic approach to detect master and intermediate master failures. Based on information gained from the topology itself, it recognizes a variety of failure scenarios.&lt;/p&gt; &#xA;&lt;p&gt;Configurable, it may choose to perform automated recovery (or allow the user to choose type of manual recovery). Intermediate master recovery achieved internally to &lt;code&gt;orchestrator&lt;/code&gt;. Master failover supported by pre/post failure hooks.&lt;/p&gt; &#xA;&lt;p&gt;Recovery process utilizes &lt;em&gt;orchestrator&#39;s&lt;/em&gt; understanding of the topology and of its ability to perform refactoring. It is based on &lt;em&gt;state&lt;/em&gt; as opposed to &lt;em&gt;configuration&lt;/em&gt;: &lt;code&gt;orchestrator&lt;/code&gt; picks the best recovery method by investigating/evaluating the topology at the time of recovery itself.&lt;/p&gt; &#xA;&lt;h4&gt;The interface&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;orchestrator&lt;/code&gt; supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command line interface (love your debug messages, take control of automated scripting)&lt;/li&gt; &#xA; &lt;li&gt;Web API (HTTP GET access)&lt;/li&gt; &#xA; &lt;li&gt;Web interface, a &lt;em&gt;slick&lt;/em&gt; one.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/openark/orchestrator/master/docs/images/orchestrator-topology-8-screenshot.png&#34; alt=&#34;Orcehstrator screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Additional perks&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Highly available&lt;/li&gt; &#xA; &lt;li&gt;Controlled master takeovers&lt;/li&gt; &#xA; &lt;li&gt;Manual failovers&lt;/li&gt; &#xA; &lt;li&gt;Failover auditing&lt;/li&gt; &#xA; &lt;li&gt;Audited operations&lt;/li&gt; &#xA; &lt;li&gt;Pseudo-GTID&lt;/li&gt; &#xA; &lt;li&gt;Datacenter/physical location awareness&lt;/li&gt; &#xA; &lt;li&gt;MySQL-Pool association&lt;/li&gt; &#xA; &lt;li&gt;HTTP security/authentication methods&lt;/li&gt; &#xA; &lt;li&gt;There is also an &lt;a href=&#34;https://groups.google.com/forum/#!forum/orchestrator-mysql&#34;&gt;orchestrator-mysql&lt;/a&gt; Google groups forum to discuss topics related to orchestrator&lt;/li&gt; &#xA; &lt;li&gt;More...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://github.com/openark/orchestrator/tree/master/docs&#34;&gt;Orchestrator documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Authored by &lt;a href=&#34;https://github.com/shlomi-noach&#34;&gt;Shlomi Noach&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2020- as &lt;a href=&#34;https://github.com/openark/orchestrator&#34;&gt;https://github.com/openark/orchestrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2016-2020 at &lt;a href=&#34;http://github.com&#34;&gt;GitHub&lt;/a&gt; as &lt;a href=&#34;https://github.com/github/orchestrator&#34;&gt;https://github.com/github/orchestrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2015 at &lt;a href=&#34;http://booking.com&#34;&gt;Booking.com&lt;/a&gt; as &lt;a href=&#34;https://github.com/outbrain/orchestrator&#34;&gt;https://github.com/outbrain/orchestrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;2014 at &lt;a href=&#34;http://outbrain.com&#34;&gt;Outbrain&lt;/a&gt; as &lt;a href=&#34;https://github.com/outbrain/orchestrator&#34;&gt;https://github.com/outbrain/orchestrator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Related projects&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Orchestrator Puppet module: &lt;a href=&#34;https://github.com/github/puppet-orchestrator-for-mysql&#34;&gt;https://github.com/github/puppet-orchestrator-for-mysql&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Orchestrator Chef Cookbook (1): &lt;a href=&#34;https://github.com/silviabotros/chef-orchestrator&#34;&gt;https://github.com/silviabotros/chef-orchestrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Orchestrator Chef Cookbook (2): &lt;a href=&#34;https://supermarket.chef.io/cookbooks/orchestrator&#34;&gt;https://supermarket.chef.io/cookbooks/orchestrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nagios / Icinga check based on Orchestrator API: &lt;a href=&#34;https://github.com/mcrauwel/go-check-orchestrator&#34;&gt;https://github.com/mcrauwel/go-check-orchestrator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Light Python wrapper for Orchestrator API: &lt;a href=&#34;https://github.com/stirlab/python-mysql-orchestrator&#34;&gt;https://github.com/stirlab/python-mysql-orchestrator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Developers&lt;/h4&gt; &#xA;&lt;p&gt;Get started developing Orchestrator by &lt;a href=&#34;https://raw.githubusercontent.com/openark/orchestrator/master/docs/developers.md&#34;&gt;reading the developer docs&lt;/a&gt;. Thanks for your interest!&lt;/p&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;orchestrator&lt;/code&gt; is free and open sourced under the &lt;a href=&#34;https://raw.githubusercontent.com/openark/orchestrator/master/LICENSE&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>