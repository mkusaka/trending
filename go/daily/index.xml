<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-12T01:34:35Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kubernetes-sigs/kustomize</title>
    <updated>2022-10-12T01:34:35Z</updated>
    <id>tag:github.com,2022-10-12:/kubernetes-sigs/kustomize</id>
    <link href="https://github.com/kubernetes-sigs/kustomize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Customization of kubernetes YAML configurations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kustomize&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;kustomize&lt;/code&gt; lets you customize raw, template-free YAML files for multiple purposes, leaving the original YAML untouched and usable as is.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;kustomize&lt;/code&gt; targets kubernetes; it understands and can patch &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#kubernetes-style-object&#34;&gt;kubernetes style&lt;/a&gt; API objects. It&#39;s like &lt;a href=&#34;https://www.gnu.org/software/make&#34;&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;, in that what it does is declared in a file, and it&#39;s like &lt;a href=&#34;https://www.gnu.org/software/sed&#34;&gt;&lt;code&gt;sed&lt;/code&gt;&lt;/a&gt;, in that it emits edited text.&lt;/p&gt; &#xA;&lt;p&gt;This tool is sponsored by &lt;a href=&#34;https://github.com/kubernetes/community/raw/master/sig-cli/README.md&#34;&gt;sig-cli&lt;/a&gt; (&lt;a href=&#34;https://github.com/kubernetes/enhancements/raw/master/keps/sig-cli/2377-Kustomize/README.md&#34;&gt;KEP&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubectl.docs.kubernetes.io/installation/kustomize/&#34;&gt;Installation instructions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/&#34;&gt;General documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://prow.k8s.io/job-history/kubernetes-jenkins/pr-logs/directory/kustomize-presubmit-master&#34;&gt;&lt;img src=&#34;https://prow.k8s.io/badge.svg?jobs=kustomize-presubmit-master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/kubernetes-sigs/kustomize&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/kubernetes-sigs/kustomize&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;kubectl integration&lt;/h2&gt; &#xA;&lt;p&gt;The kustomize build flow at &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/releases/tag/v2.0.3&#34;&gt;v2.0.3&lt;/a&gt; was added to &lt;a href=&#34;https://kubernetes.io/blog/2019/03/25/kubernetes-1-14-release-announcement&#34;&gt;kubectl v1.14&lt;/a&gt;. The kustomize flow in kubectl remained frozen at v2.0.3 until kubectl v1.21, which &lt;a href=&#34;https://github.com/kubernetes/kubernetes/raw/4d75a6238a6e330337526e0513e67d02b1940b63/CHANGELOG/CHANGELOG-1.21.md#kustomize-updates-in-kubectl&#34;&gt;updated it to v4.0.5&lt;/a&gt;. It will be updated on a regular basis going forward, and such updates will be reflected in the Kubernetes release notes.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Kubectl version&lt;/th&gt; &#xA;   &lt;th&gt;Kustomize version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt; v1.14&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.14-v1.20&lt;/td&gt; &#xA;   &lt;td&gt;v2.0.3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.21&lt;/td&gt; &#xA;   &lt;td&gt;v4.0.5&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v1.22&lt;/td&gt; &#xA;   &lt;td&gt;v4.2.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For examples and guides for using the kubectl integration please see the &lt;a href=&#34;https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/&#34;&gt;kubernetes documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;1) Make a &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#kustomization&#34;&gt;kustomization&lt;/a&gt; file&lt;/h3&gt; &#xA;&lt;p&gt;In some directory containing your YAML &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#resource&#34;&gt;resource&lt;/a&gt; files (deployments, services, configmaps, etc.), create a &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#kustomization&#34;&gt;kustomization&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;This file should declare those resources, and any customization to apply to them, e.g. &lt;em&gt;add a common label&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/images/base.jpg&#34; alt=&#34;base image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;File structure:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code&gt;~/someApp&#xA;├── deployment.yaml&#xA;├── kustomization.yaml&#xA;└── service.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The resources in this directory could be a fork of someone else&#39;s configuration. If so, you can easily rebase from the source material to capture improvements, because you don&#39;t modify the resources directly.&lt;/p&gt; &#xA;&lt;p&gt;Generate customized YAML with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kustomize build ~/someApp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The YAML can be directly &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#apply&#34;&gt;applied&lt;/a&gt; to a cluster:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code&gt;kustomize build ~/someApp | kubectl apply -f -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;2) Create &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#variant&#34;&gt;variants&lt;/a&gt; using &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#overlay&#34;&gt;overlays&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Manage traditional &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#variant&#34;&gt;variants&lt;/a&gt; of a configuration - like &lt;em&gt;development&lt;/em&gt;, &lt;em&gt;staging&lt;/em&gt; and &lt;em&gt;production&lt;/em&gt; - using &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#overlay&#34;&gt;overlays&lt;/a&gt; that modify a common &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#base&#34;&gt;base&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/images/overlay.jpg&#34; alt=&#34;overlay image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;File structure:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code&gt;~/someApp&#xA;├── base&#xA;│&amp;nbsp;&amp;nbsp; ├── deployment.yaml&#xA;│&amp;nbsp;&amp;nbsp; ├── kustomization.yaml&#xA;│&amp;nbsp;&amp;nbsp; └── service.yaml&#xA;└── overlays&#xA;    ├── development&#xA;    │&amp;nbsp;&amp;nbsp; ├── cpu_count.yaml&#xA;    │&amp;nbsp;&amp;nbsp; ├── kustomization.yaml&#xA;    │&amp;nbsp;&amp;nbsp; └── replica_count.yaml&#xA;    └── production&#xA;        ├── cpu_count.yaml&#xA;        ├── kustomization.yaml&#xA;        └── replica_count.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Take the work from step (1) above, move it into a &lt;code&gt;someApp&lt;/code&gt; subdirectory called &lt;code&gt;base&lt;/code&gt;, then place overlays in a sibling directory.&lt;/p&gt; &#xA;&lt;p&gt;An overlay is just another kustomization, referring to the base, and referring to patches to apply to that base.&lt;/p&gt; &#xA;&lt;p&gt;This arrangement makes it easy to manage your configuration with &lt;code&gt;git&lt;/code&gt;. The base could have files from an upstream repository managed by someone else. The overlays could be in a repository you own. Arranging the repo clones as siblings on disk avoids the need for git submodules (though that works fine, if you are a submodule fan).&lt;/p&gt; &#xA;&lt;p&gt;Generate YAML with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kustomize build ~/someApp/overlays/production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The YAML can be directly &lt;a href=&#34;https://kubectl.docs.kubernetes.io/references/kustomize/glossary/#apply&#34;&gt;applied&lt;/a&gt; to a cluster:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;kustomize build ~/someApp/overlays/production | kubectl apply -f -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubectl.docs.kubernetes.io/contributing/kustomize/bugs/&#34;&gt;file a bug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubectl.docs.kubernetes.io/contributing/kustomize/features/&#34;&gt;contribute a feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize/tree/master/proposals&#34;&gt;propose a larger enhancement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code of conduct&lt;/h3&gt; &#xA;&lt;p&gt;Participation in the Kubernetes community is governed by the &lt;a href=&#34;https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/code-of-conduct.md&#34;&gt;Kubernetes Code of Conduct&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nikolaydubina/go-recipes</title>
    <updated>2022-10-12T01:34:35Z</updated>
    <id>tag:github.com,2022-10-12:/nikolaydubina/go-recipes</id>
    <link href="https://github.com/nikolaydubina/go-recipes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🦩 Tools for Go projects&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Go Recipes 🦩 &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Handy well-known and &lt;i&gt;lesser&lt;/i&gt;-known tools for Go projects&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Know some cool tool or one-liner? Have a feature request or an idea?&lt;/em&gt;&lt;br&gt; &lt;em&gt;Feel free to edit this page or create an Issue/Discussion!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fnikolaydubina%2Fgo-recipes&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=hits&amp;amp;edge_flat=false&#34; alt=&#34;Hits&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Testing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-treemap-of-code-coverage&#34;&gt;➡ Make treemap of code coverage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-browse-code-coverage-by-file&#34;&gt;➡ Browse code coverage by file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-browse-code-coverage-of-go-code-in-terminal&#34;&gt;➡ Browse code coverage of Go code in terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-pretty-print-coverage-of-go-code-in-terminal&#34;&gt;➡ Pretty print coverage of Go code in terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-histogram-of-go-files-per-package&#34;&gt;➡ Make histogram of Go files per package&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-tests-sequentially&#34;&gt;➡ Run tests sequentially&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-tests-in-parallel&#34;&gt;➡ Run tests in parallel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-detect-goroutine-leaks&#34;&gt;➡ Detect goroutine leaks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-tests-with-pretty-output&#34;&gt;➡ Run tests with pretty output&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-enrich-go-test-output&#34;&gt;➡ Enrich &lt;code&gt;go test&lt;/code&gt; output&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-packages-without-tests&#34;&gt;➡ Get packages without tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Dependencies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-go-version-of-current-module&#34;&gt;➡ Get Go version of current module&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-go-versions-of-upstream-modules&#34;&gt;➡ Get Go versions of upstream modules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-directly-dependent-modules-that-can-be-upgraded&#34;&gt;➡ Get directly dependent modules that can be upgraded&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-upstream-modules-without-go-version&#34;&gt;➡ Get upstream modules without Go version&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-available-module-versions&#34;&gt;➡ Get available module versions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-graph-of-upstream-modules&#34;&gt;➡ Make graph of upstream modules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-graph-of-upstream-modules-with-gmchart&#34;&gt;➡ Make graph of upstream modules with &lt;code&gt;gmchart&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-graph-of-upstream-packages&#34;&gt;➡ Make graph of upstream packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-scrape-details-about-upstream-modules-and-make-graph&#34;&gt;➡ Scrape details about upstream modules and make graph&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-scrape-licenses-of-upstream-dependencies&#34;&gt;➡ Scrape licenses of upstream dependencies&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-explore-upstream-dependencies-interactively&#34;&gt;➡ Explore upstream dependencies interactively&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-use-go-mod-directives&#34;&gt;➡ Use &lt;code&gt;go mod&lt;/code&gt; directives&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-analyze-dependencies-with-goda&#34;&gt;➡ Analyze dependencies with &lt;code&gt;goda&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Code Visualization &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-graph-of-function-calls&#34;&gt;➡ Make graph of function calls&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-graph-of-function-calls-in-package&#34;&gt;➡ Make graph of function calls in package&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-plantuml-diagram&#34;&gt;➡ Make PlantUML diagram&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-plantuml-diagram&#34;&gt;➡ Make PlantUML diagram&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-3d-chart-of-go-codebase&#34;&gt;➡ Make 3D chart of Go codebase&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Static Analysis &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-default-static-analysis-with-go-vet&#34;&gt;➡ Run default static analysis with &lt;code&gt;go vet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-custom-static-analysis-tool-with-go-vet&#34;&gt;➡ Run custom static analysis tool with &lt;code&gt;go vet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-official-static-analyzers-not-included-in-go-vet&#34;&gt;➡ Run official static analyzers not included in &lt;code&gt;go vet&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Code Generation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-gogenerate-in-parallel&#34;&gt;➡ Run &lt;code&gt;go:generate&lt;/code&gt; in parallel&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-generate-string-method-for-enum-types&#34;&gt;➡ Generate &lt;code&gt;String&lt;/code&gt; method for enum types&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Refactoring &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-replace-symbol&#34;&gt;➡ Replace symbol&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Errors &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-pretty-print-panic-messages&#34;&gt;➡ Pretty print &lt;code&gt;panic&lt;/code&gt; messages&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Build &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-show-compiler-optimization-decisions-on-heap-and-inlining&#34;&gt;➡ Show compiler optimization decisions on heap and inlining&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-disable-inlining&#34;&gt;➡ Disable inlining&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-aggressive-inlining&#34;&gt;➡ Aggressive inlining&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-manually-disable-or-enable-cgo&#34;&gt;➡ Manually disable or enable &lt;code&gt;cgo&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-include-metadata-in-binary-during-compilation-with-ldflags&#34;&gt;➡ Include metadata in binary during compilation with &lt;code&gt;ldflags&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-treemap-breakdown-of-go-executable-binary&#34;&gt;➡ Make treemap breakdown of Go executable binary&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Assembly &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-assembly-of-go-code-snippets-online&#34;&gt;➡ Get assembly of Go code snippets online&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-go-compiler-ssa-intermediary-representation&#34;&gt;➡ Get Go compiler SSA intermediary representation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-view-go-assembly-interactively&#34;&gt;➡ View Go assembly interactively&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-generate-go-assembly-in-go&#34;&gt;➡ Generate Go assembly in Go&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-generate-ast-for-code-snippets&#34;&gt;➡ Generate AST for code snippets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Execution &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-go-function-in-shell&#34;&gt;➡ Run Go function in shell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-simple-fileserver&#34;&gt;➡ Run simple fileserver&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-monitor-go-processes&#34;&gt;➡ Monitor Go processes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-create-3d-visualization-of-concurrency-traces&#34;&gt;➡ Create 3D visualization of concurrency traces&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Benchmarking &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-run-benchmarks&#34;&gt;➡ Run benchmarks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-table-driven-benchmarks&#34;&gt;➡ Table-driven benchmarks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-generate-benchmak-cpu-and-memory-profiles&#34;&gt;➡ Generate benchmak CPU and Memory profiles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-visualize-callgraph-of-profiles-wiht-pprof&#34;&gt;➡ Visualize callgraph of profiles wiht &lt;code&gt;pprof&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-visualize-flamegraphs-of-profiles-wiht-pprof&#34;&gt;➡ Visualize flamegraphs of profiles wiht &lt;code&gt;pprof&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-visualize-profiles-online&#34;&gt;➡ Visualize profiles online&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-delta-between-two-benchmarks-with-benchstat&#34;&gt;➡ Get delta between two benchmarks with &lt;code&gt;benchstat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-summary-of-benchmarks-with-benchstat&#34;&gt;➡ Get summary of benchmarks with &lt;code&gt;benchstat&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-continuous-benchmarking&#34;&gt;➡ Continuous benchmarking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-continuous-benchmarking-with-gobenchdata&#34;&gt;➡ Continuous benchmarking with &lt;code&gt;gobenchdata&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-continuous-benchmarking-with-benchdiff&#34;&gt;➡ Continuous benchmarking with &lt;code&gt;benchdiff&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-continuous-benchmarking-with-cob&#34;&gt;➡ Continuous benchmarking with &lt;code&gt;cob&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-generate-live-traces-using-nethttptrace&#34;&gt;➡ Generate live traces using &lt;code&gt;net/http/trace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-generate-traces-using-go-test&#34;&gt;➡ Generate traces using &lt;code&gt;go test&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-view-traces-with-go-tool-trace&#34;&gt;➡ View traces with &lt;code&gt;go tool trace&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-wallclock-traces&#34;&gt;➡ Get wallclock traces&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-get-onoff-cpu-profiles&#34;&gt;➡ Get on/off CPU profiles&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Documentation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-make-alternative-documentation-with-golds&#34;&gt;➡ Make alternative documentation with golds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#-read-go-binary-documentation-in-man-format&#34;&gt;➡ Read Go binary documentation in &lt;code&gt;man&lt;/code&gt; format&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make treemap of code coverage&lt;/h3&gt; &#xA;&lt;p&gt;Visualize distribution of code coverage in your project. This helps to identify code areas with high and low coverage. Useful when you have large project with lots of files and packages. This 2D image-hash of your project should be more representative than a single number. Also available at &lt;a href=&#34;https://go-cover-treemap.io&#34;&gt;https://go-cover-treemap.io&lt;/a&gt;. — &lt;a href=&#34;https://github.com/nikolaydubina&#34;&gt;@nikolaydubina&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -coverprofile cover.out ./...&#xA;go-cover-treemap -coverprofile cover.out &amp;gt; out.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/hugo-code-coverage.svg?sanitize=true&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/nikolaydubina/go-cover-treemap@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Browse code coverage by file&lt;/h3&gt; &#xA;&lt;p&gt;This is very helpful tool from the official Go toolchain. Similar visualization is integrated into VSCode and Goland, but can be used separately.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -coverprofile cover.out ./...&#xA;go tool cover -html=cover.out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/tool-cover-html.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Browse code coverage of Go code in terminal&lt;/h3&gt; &#xA;&lt;p&gt;Interactively browse Go code coverage similarly to HTML provided by official Go toolchain, but in terminal. — &lt;a href=&#34;https://github.com/orlangure&#34;&gt;@orlangure&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -cover -coverprofile coverage.out&#xA;gocovsh&#xA;gocovsh --profile profile.out&#xA;git diff --name-only | gocovsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/gocovsh.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/orlangure/gocovsh@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Pretty print coverage of Go code in terminal&lt;/h3&gt; &#xA;&lt;p&gt;It is similar to &lt;code&gt;go tool cover -html=cover.out&lt;/code&gt; but in terminal. You can filter by functions, packages, minimum coverage, and more. — &lt;a href=&#34;https://github.com/nikandfor&#34;&gt;@nikandfor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cover&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/cover.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/nikandfor/cover@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make histogram of Go files per package&lt;/h3&gt; &#xA;&lt;p&gt;Find when package is too big or too small. Adjust histogram length to maximum value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go list -json ./... | jq -rc &#39;[.ImportPath, (.GoFiles | length | tostring)] | join(&#34; &#34;)&#39; | perl -lane &#39;print (&#34; &#34; x (20 - $F[1]), &#34;=&#34; x $F[1], &#34; &#34;, $F[1], &#34;\t&#34;, $F[0])&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ================== 18&#x9;github.com/gin-gonic/gin&#xA;       ============= 13&#x9;github.com/gin-gonic/gin/binding&#xA;                   = 1&#x9;github.com/gin-gonic/gin/internal/bytesconv&#xA;                   = 1&#x9;github.com/gin-gonic/gin/internal/json&#xA;         =========== 11&#x9;github.com/gin-gonic/gin/render&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://stedolan.github.io/jq/download/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run tests sequentially&lt;/h3&gt; &#xA;&lt;p&gt;Use when you need to synchronize tests, for example in integration tests that share environment. &lt;a href=&#34;https://pkg.go.dev/cmd/go#hdr-Testing_flags&#34;&gt;Official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -p 1 -parallel 1 ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run tests in parallel&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;t.Parallel&lt;/code&gt; to your tests case function bodies. As per documentation, by default &lt;code&gt;-p=GOMAXPROCS&lt;/code&gt; and &lt;code&gt;-parallel=GOMAXPROCS&lt;/code&gt; when you run &lt;code&gt;go test&lt;/code&gt;. Different packages by default run in parallel, and tests within package can be enforced to run in parallel too. Make sure to copy test case data to new variable, why explained &lt;a href=&#34;https://gist.github.com/posener/92a55c4cd441fc5e5e85f27bca008721&#34;&gt;here&lt;/a&gt;. &lt;a href=&#34;https://pkg.go.dev/cmd/go#hdr-Testing_flags&#34;&gt;Official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;    ...&#xA;    for _, tc := range tests {&#xA;        tc := tc&#xA;        t.Run(tc.name, func(t *testing.T) {&#xA;            t.Parallel()&#xA;            ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Detect goroutine leaks&lt;/h3&gt; &#xA;&lt;p&gt;Refactored, tested variant of the goroutine leak detector found in both &lt;code&gt;net/http&lt;/code&gt; tests and the cockroachdb source tree. You have to call this library in your tests. — &lt;a href=&#34;https://github.com/fortytw2&#34;&gt;@fortytw2&lt;/a&gt; / &lt;a href=&#34;https://github.com/fortytw2/leaktest&#34;&gt;https://github.com/fortytw2/leaktest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func TestPoolContext(t *testing.T) {&#xA;&#x9;ctx, cancel := context.WithTimeout(context.Background(), time.Second)&#xA;&#x9;defer cancel()&#xA;&#x9;defer leaktest.CheckContext(ctx, t)()&#xA;&#xA;&#x9;go func() {&#xA;&#x9;&#x9;for {&#xA;&#x9;&#x9;&#x9;time.Sleep(time.Second)&#xA;&#x9;&#x9;}&#xA;&#x9;}()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run tests with pretty output&lt;/h3&gt; &#xA;&lt;p&gt;This wrapper around &lt;code&gt;go test&lt;/code&gt; renders test output in easy to read format. Also supports JUnit, JSON output, skipping slow tests, running custom binary. — &lt;a href=&#34;https://github.com/dnephin&#34;&gt;@dnephin&lt;/a&gt; / &lt;a href=&#34;https://github.com/gotestyourself/gotestsum&#34;&gt;https://github.com/gotestyourself/gotestsum&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gotestsum --format dots&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/442180/182284939-e08a0aa5-4504-4e30-9e88-207ef47f4537.gif&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install gotest.tools/gotestsum@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Enrich &lt;code&gt;go test&lt;/code&gt; output&lt;/h3&gt; &#xA;&lt;p&gt;Add colors and enrich &lt;code&gt;go test&lt;/code&gt; output. It can be used in CI pipeline and has lots of options. — &lt;a href=&#34;https://github.com/kyoh86&#34;&gt;@kyoh86&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;richgo test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://asciinema.org/a/99810.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/kyoh86/richgo@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get packages without tests&lt;/h3&gt; &#xA;&lt;p&gt;If code coverage does not report packages without tests. For example for CI or quality control. — &lt;a href=&#34;https://github.com/nikolaydubina&#34;&gt;@nikolaydubina&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go list -json ./... | jq -rc &#39;select((.TestGoFiles | length)==0) | .ImportPath&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github.com/gin-gonic/gin/ginS&#xA;github.com/gin-gonic/gin/internal/json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://stedolan.github.io/jq/download/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get Go version of current module&lt;/h3&gt; &#xA;&lt;p&gt;For example, setup correct Go version automatically from &lt;code&gt;go.mod&lt;/code&gt; in CI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go mod edit -json | jq -r .Go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://stedolan.github.io/jq/download/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get Go versions of upstream modules&lt;/h3&gt; &#xA;&lt;p&gt;Use this when upgrading version of Go or finding old modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go list -deps -json ./... | jq -rc &#39;select(.Standard!=true and .Module.GoVersion!=null) | [.Module.GoVersion,.Module.Path] | join(&#34; &#34;)&#39; | sort -V | uniq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;1.11 github.com/ugorji/go/codec&#xA;1.11 golang.org/x/crypto&#xA;1.12 github.com/golang/protobuf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://stedolan.github.io/jq/download/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get directly dependent modules that can be upgraded&lt;/h3&gt; &#xA;&lt;p&gt;Keep your modules updated. Similar function is integrated in VSCode official Go plugin and GoLand.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go list -u -m $(go list -m -f &#39;{{.Indirect}} {{.}}&#39; all | grep &#39;^false&#39; | cut -d &#39; &#39; -f2) | grep &#39;\[&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github.com/goccy/go-json v0.5.1 [v0.7.3]&#xA;github.com/golang/protobuf v1.3.3 [v1.5.2]&#xA;github.com/json-iterator/go v1.1.9 [v1.1.11]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get upstream modules without Go version&lt;/h3&gt; &#xA;&lt;p&gt;Find outdated modules or imports that you need to upgrade.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go list -deps -json ./... | jq -rc &#39;select(.Standard!=true and .Module.GoVersion==null) | .Module.Path&#39; | sort -u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github.com/facebookgo/clock&#xA;golang.org/x/text&#xA;gopkg.in/yaml.v2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://stedolan.github.io/jq/download/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get available module versions&lt;/h3&gt; &#xA;&lt;p&gt;This works even if you did not download or install module locally. This is useful to check to which version you can upgrade to, what is the latest version, and whether there are v2+ major versions recognized by Go toolchain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go list -m -versions github.com/google/gofuzz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make graph of upstream modules&lt;/h3&gt; &#xA;&lt;p&gt;For each module, the node representing the greatest version (i.e., the version chosen by Go&#39;s minimal version selection algorithm) is colored green. Other nodes, which aren&#39;t in the final build list, are colored grey. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go mod graph | modgraphviz | dot -Tsvg -o mod-graph.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/modgraphviz-go-featureprocessing.svg?sanitize=true&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://graphviz.org/download/&#xA;go install golang.org/x/exp/cmd/modgraphviz@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make graph of upstream modules with &lt;code&gt;gmchart&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Render in browser Go module graphs. Built with D3.js, Javascript, HTTP server in Go. — &lt;a href=&#34;https://github.com/PaulXu-cn&#34;&gt;@PaulXu-cn&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go mod graph | gmchart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/PaulXu-cn/go-mod-graph-chart/raw/main/show.gif&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/PaulXu-cn/go-mod-graph-chart/gmchart@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make graph of upstream packages&lt;/h3&gt; &#xA;&lt;p&gt;Find unexpected dependencies or visualize project. Works best for small number of packages, for large projects use &lt;code&gt;grep&lt;/code&gt; to narrow down subgraph. Without &lt;code&gt;-deps&lt;/code&gt; only for current module. — &lt;a href=&#34;https://github.com/nikolaydubina&#34;&gt;@nikolaydubina&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go list -deps -json ./... | jq -c &#39;select(.Standard!=true) | {from: .ImportPath, to: .Imports[]}&#39; | jsonl-graph | dot -Tsvg &amp;gt; package-graph.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/packages-graph.svg?sanitize=true&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://stedolan.github.io/jq/download/&#xA;https://graphviz.org/download/&#xA;go install github.com/nikolaydubina/import-graph@latest&#xA;go install github.com/nikolaydubina/jsonl-graph@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Scrape details about upstream modules and make graph&lt;/h3&gt; &#xA;&lt;p&gt;Find low quality or unmaintained dependencies. — &lt;a href=&#34;https://github.com/nikolaydubina&#34;&gt;@nikolaydubina&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go mod graph | import-graph -i=gomod | jsonl-graph -color-scheme=file://$PWD/basic.json | dot -Tsvg &amp;gt; output.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/gin-mod-graph-collected.svg?sanitize=true&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://graphviz.org/download/&#xA;go install github.com/nikolaydubina/import-graph@latest&#xA;go install github.com/nikolaydubina/jsonl-graph@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Scrape licenses of upstream dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Collect all the licenses for checking if you can use the project, for example in proprietary or commercial environment. — Google&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go-licenses csv github.com/gohugoio/hugo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;github.com/cli/safeexec,https://github.com/cli/safeexec/blob/master/LICENSE,BSD-2-Clause&#xA;github.com/bep/tmc,https://github.com/bep/tmc/blob/master/LICENSE,MIT&#xA;github.com/aws/aws-sdk-go,https://github.com/aws/aws-sdk-go/blob/master/LICENSE.txt,Apache-2.0&#xA;github.com/jmespath/go-jmespath,https://github.com/jmespath/go-jmespath/blob/master/LICENSE,Apache-2.0&#xA;github.com/gorilla/websocket,https://github.com/gorilla/websocket/blob/master/LICENSE,BSD-2-Clause&#xA;github.com/pelletier/go-toml/v2,https://github.com/pelletier/go-toml/blob/master/v2/LICENSE,MIT&#xA;github.com/spf13/cobra,https://github.com/spf13/cobra/blob/master/LICENSE.txt,Apache-2.0&#xA;github.com/kyokomi/emoji/v2,https://github.com/kyokomi/emoji/blob/master/v2/LICENSE,MIT&#xA;go.opencensus.io,Unknown,Apache-2.0&#xA;github.com/Azure/azure-storage-blob-go/azblob,https://github.com/Azure/azure-storage-blob-go/blob/master/azblob/LICENSE,MIT&#xA;github.com/yuin/goldmark-highlighting,https://github.com/yuin/goldmark-highlighting/blob/master/LICENSE,MIT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/google/go-licenses@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Explore upstream dependencies interactively&lt;/h3&gt; &#xA;&lt;p&gt;Useful in large refactorings, dependency breaking, physical layout changes. — &lt;a href=&#34;https://github.com/adonovan&#34;&gt;Alan Donovan&lt;/a&gt;, official Go team&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/adonovan/spaghetti/raw/main/screenshot.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/adonovan/spaghetti@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Use &lt;code&gt;go mod&lt;/code&gt; directives&lt;/h3&gt; &#xA;&lt;p&gt;Tell Go compiler which versions of upstreams to include in your build. Tell all users of your module how to deal with versions of your module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Deprecated: use example.com/mod/v2 instead.&#xA;module example.com/mod&#xA;&#xA;go 1.16&#xA;&#xA;require example.com/other/thing v1.0.2&#xA;require example.com/new/thing/v2 v2.3.4&#xA;exclude example.com/old/thing v1.2.3&#xA;replace example.com/bad/thing v1.4.5 =&amp;gt; example.com/good/thing v1.4.5&#xA;retract [v1.9.0, v1.9.5]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Analyze dependencies with &lt;code&gt;goda&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This tool has extensive syntax for filtering dependencies graphs. It can work with packages and modules. — &lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/egonelbre@gmail.com&#34;&gt;Egon Elbre&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;goda graph . | dot -Tsvg -o graph.svg&#xA;goda graph -cluster -short &#34;github.com/nikolaydubina/go-cover-treemap:all&#34; | dot -Tsvg -o graph.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/loov/goda/raw/master/graph.svg?sanitize=true&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://graphviz.org/download/&#xA;go install github.com/loov/goda@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Visualization&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make graph of function calls&lt;/h3&gt; &#xA;&lt;p&gt;Visualize complex or new project quickly or to study project. Requires &lt;code&gt;main.go&lt;/code&gt; in module. Supports Graphviz output format. Has many options for filtering and formatting. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;callgraph -format graphviz . | dot -Tsvg -o graph.svg&#xA;recommend: grep &amp;lt;package/class/func of interest&amp;gt;&#xA;recommend: grep -v Error since many packages report error&#xA;recommend: adding `rankdir=LR;` to graphviz file for denser graph&#xA;recommend: you would have to manually fix graphviz file first and last line&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/callgraph.svg?sanitize=true&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install golang.org/x/tools/cmd/callgraph@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make graph of function calls in package&lt;/h3&gt; &#xA;&lt;p&gt;Quickly track which packages current package is calling and why. — &lt;a href=&#34;https://github.com/ofabry&#34;&gt;@ofabry&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go-callvis .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ofabry/go-callvis/master/images/syncthing.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/ofabry/go-callvis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make PlantUML diagram&lt;/h3&gt; &#xA;&lt;p&gt;Generates class diagram in widely used format with the information on structs, interfaces and their relationships. Render &lt;code&gt;.puml&lt;/code&gt; files in for example &lt;a href=&#34;https://www.planttext.com&#34;&gt;planttext.com&lt;/a&gt;. — &lt;a href=&#34;https://github.com/jfeliu007&#34;&gt;@jfeliu007&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;goplantuml -recursive path/to/gofiles path/to/gofiles2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/jfeliu007/goplantuml/master/example/example.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get github.com/jfeliu007/goplantuml/parser&#xA;go install github.com/jfeliu007/goplantuml/cmd/goplantuml@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make PlantUML diagram&lt;/h3&gt; &#xA;&lt;p&gt;Automatically generate visualization of classes and interfaces for go packages. Recommend recursive option. Render &lt;code&gt;.puml&lt;/code&gt; files in for example &lt;a href=&#34;https://www.planttext.com&#34;&gt;planttext.com&lt;/a&gt;. — &lt;a href=&#34;https://github.com/bykof&#34;&gt;@bykof&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go-plantuml generate -d . -r -o graph.puml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/bykof/go-plantuml/master/docs/assets/graph.svg?sanitize=true&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/bykof/go-plantuml@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make 3D chart of Go codebase&lt;/h3&gt; &#xA;&lt;p&gt;Fresh artistic perspective on Go codebase. &lt;code&gt;GoCity&lt;/code&gt; is an implementation of the Code City metaphor for visualizing source code - folders are districts; files are buildings; structs are buildings on the top of their files. This project has research paper &#34;&lt;a href=&#34;https://homepages.dcc.ufmg.br/~mtov/pub/2019-saner-gocity.pdf&#34;&gt;GoCity Code City for Go&lt;/a&gt;&#34; at SANER&#39;19. Also available at &lt;a href=&#34;https://go-city.github.io&#34;&gt;go-city.github.io&lt;/a&gt;. — &lt;a href=&#34;https://github.com/rodrigo-brito&#34;&gt;@rodrigo-brito&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/gocity.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/rodrigo-brito/gocity@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Static Analysis&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run default static analysis with &lt;code&gt;go vet&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Official tool for static analysis of Go programs, with 27+ static analyzers. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go vet ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run custom static analysis tool with &lt;code&gt;go vet&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Standard &lt;code&gt;go vet&lt;/code&gt; can be used to run custom analyzers binaries. Third party analyzers are supported. Lots of official analyzers not included by default into &lt;code&gt;go vet&lt;/code&gt;. Analyzer has to satisfy interface and command described here &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/analysis&#34;&gt;https://pkg.go.dev/golang.org/x/tools/go/analysis&lt;/a&gt;. Refer for &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/analysis/passes&#34;&gt;https://pkg.go.dev/golang.org/x/tools/go/analysis/passes&lt;/a&gt; for full list of official Go analyzers. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow&#xA;go vet -vettool=$(which shadow)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run official static analyzers not included in &lt;code&gt;go vet&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;There are many analyzers not included in &lt;code&gt;go vet&lt;/code&gt;. These tools are experimental and may not work as expected (e.g. &lt;code&gt;usesgenerics&lt;/code&gt; does not work). Refer to for full list &lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/go/analysis&#34;&gt;https://pkg.go.dev/golang.org/x/tools/go/analysis&lt;/a&gt;. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/multichecker&#34;&#xA;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/atomicalign&#34;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/deepequalerrors&#34;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/fieldalignment&#34;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/nilness&#34;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/reflectvaluecompare&#34;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/shadow&#34;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/sortslice&#34;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/unusedwrite&#34;&#xA;&#x9;&#34;golang.org/x/tools/go/analysis/passes/usesgenerics&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;multichecker.Main(&#xA;&#x9;&#x9;atomicalign.Analyzer,         // checks for non-64-bit-aligned arguments to sync/atomic functions&#xA;&#x9;&#x9;deepequalerrors.Analyzer,     // checks for the use of reflect.DeepEqual with error values&#xA;&#x9;&#x9;fieldalignment.Analyzer,      // detects structs that would use less memory if their fields were sorted&#xA;&#x9;&#x9;nilness.Analyzer,             // inspects the control-flow graph of an SSA function and reports errors such as nil pointer dereferences and degenerate nil pointer comparisons&#xA;&#x9;&#x9;reflectvaluecompare.Analyzer, // checks for accidentally using == or reflect.DeepEqual to compare reflect.Value values&#xA;&#x9;&#x9;shadow.Analyzer,              // checks for shadowed variables&#xA;&#x9;&#x9;sortslice.Analyzer,           // checks for calls to sort.Slice that do not use a slice type as first argument&#xA;&#x9;&#x9;unusedwrite.Analyzer,         // checks for unused writes to the elements of a struct or array object&#xA;&#x9;&#x9;usesgenerics.Analyzer,        // checks for usage of generic features added in Go 1.18&#xA;&#x9;)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Generation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run &lt;code&gt;go:generate&lt;/code&gt; in parallel&lt;/h3&gt; &#xA;&lt;p&gt;Official Go team &lt;a href=&#34;https://github.com/golang/go/issues/20520&#34;&gt;encourages&lt;/a&gt; to run sequentially. However, in certain situations, such as lots of mocks, parallelization helps a lot, albeit, you should consider including your generated files in git. The solution bellow spawns multiple processes, each per pkg.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grep -rnw &#34;go:generate&#34; -E -l &#34;${1:-*.go}&#34; . | xargs -L1 dirname | sort -u | xargs -P 8 -I{} go generate {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Generate &lt;code&gt;String&lt;/code&gt; method for enum types&lt;/h3&gt; &#xA;&lt;p&gt;This is an official tool for generating &lt;code&gt;String&lt;/code&gt; for enums. It supports overrides via comments. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package painkiller&#xA;&#xA;//go:generate stringer -type=Pill -linecomment&#xA;&#xA;type Pill int&#xA;&#xA;const (&#xA;&#x9;Placebo Pill = iota&#xA;&#x9;Ibuprofen&#xA;&#x9;Paracetamol&#xA;&#x9;PillAspirin   // Aspirin&#xA;&#x9;Acetaminophen = Paracetamol&#xA;)&#xA;&#xA;// &#34;Acetaminophen&#34;&#xA;var s string = Acetaminophen.String()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install golang.org/x/tools/cmd/stringer@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Refactoring&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Replace symbol&lt;/h3&gt; &#xA;&lt;p&gt;I found this in announcement &lt;a href=&#34;https://github.com/golang/go/commit/2580d0e08d5e9f979b943758d3c49877fb2324cb&#34;&gt;notice&lt;/a&gt; of Go 1.18 for changes to &lt;code&gt;interface{}&lt;/code&gt; to &lt;code&gt;any&lt;/code&gt;. This can be useful for other refactorings too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gofmt -w -r &#39;interface{} -&amp;gt; any&#39; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Errors&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Pretty print &lt;code&gt;panic&lt;/code&gt; messages&lt;/h3&gt; &#xA;&lt;p&gt;Read &lt;code&gt;panic&lt;/code&gt; messages easier. Need to redirect STDERR to this tool with &lt;code&gt;panic&lt;/code&gt; stack traces. The tool has HTML output and does lots of deduplication and enhancements. Refer to examples in original repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -v |&amp;amp; pp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/wiki/maruel/panicparse/parse.gif&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/maruel/panicparse/v2/cmd/pp@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Show compiler optimization decisions on heap and inlining&lt;/h3&gt; &#xA;&lt;p&gt;Building with &lt;code&gt;-m&lt;/code&gt; flag will show decisions of compiler on inlining and heap escape. This can help you to validate your understanding of your code and optimize it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build -gcflags=&#34;-m -m&#34; . 2&amp;gt;&amp;amp;1 | grep inline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;...&#xA;./passengerfp.go:25:6: cannot inline (*PassengerFeatureTransformer).Fit: function too complex: cost 496 exceeds budget 80&#xA;...&#xA;./passengerfp.go:192:6: can inline (*PassengerFeatureTransformer).NumFeatures with cost 35 as: method(*PassengerFeatureTransformer) func() int { if e == nil { return 0 }; count := 6; count += (*transformers.OneHotEncoder).NumFeatures(e.Sex); count += (*transformers.OneHotEncoder).NumFeatures(e.Embarked); return count }&#xA;...&#xA;./passengerfp.go:238:43: inlining call to transformers.(*OneHotEncoder).FeatureNames&#xA;./passengerfp.go:238:43: inlining call to transformers.(*OneHotEncoder).NumFeatures&#xA;...&#xA;./passengerfp.go:151:7: parameter e leaks to {heap} with derefs=0:&#xA;./passengerfp.go:43:11: make(map[string]uint) escapes to heap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Disable inlining&lt;/h3&gt; &#xA;&lt;p&gt;Usually you may not need it, but can reduce binary size and even improve performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build -gcflags=&#34;-l&#34; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Aggressive inlining&lt;/h3&gt; &#xA;&lt;p&gt;Usually you may not need it, but can improve performance. This includes mid-stack inlining.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build -gcflags=&#34;-l -l -l -l&#34; .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Manually disable or enable &lt;code&gt;cgo&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Disable &lt;code&gt;cgo&lt;/code&gt; with &lt;code&gt;CGO_ENABLED=0&lt;/code&gt; and enable with &lt;code&gt;CGO_ENABLED=1&lt;/code&gt;. If you don&#39;t, &lt;code&gt;cgo&lt;/code&gt; may end-up being enabled or code dynamically linked if, for example, you use some &lt;code&gt;net&lt;/code&gt; or &lt;code&gt;os&lt;/code&gt; packages. You may want to disable &lt;code&gt;cgo&lt;/code&gt; to improve performance, since complier and runtime would have easier job optimizing code. This also should reduce your image size, as you can have alpine image with less shared libraries.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Include metadata in binary during compilation with &lt;code&gt;ldflags&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can pass metadata through compiler to your binary. This is useful for including things like git commit, database schema version, integrity hashes. Variables can only be strings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go build -v -ldflags=&#34;-X &#39;main.Version=v1.0.0&#39;&#34;&#xA;go build -v -ldflags=&#34;-X &#39;my/pkg/here.Variable=some-string&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;var Version string&#xA;&#xA;func main() {&#xA;&#x9;// Version here has some value&#xA;&#x9;...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make treemap breakdown of Go executable binary&lt;/h3&gt; &#xA;&lt;p&gt;Useful for studying Go compiler, large projects, projects with C/C++ and &lt;code&gt;cgo&lt;/code&gt;, 3rd party dependencies, embedding. However, total size may not be something to worry about for your executable. — &lt;a href=&#34;https://github.com/nikolaydubina&#34;&gt;@nikolaydubina&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go tool nm -size &amp;lt;binary finename&amp;gt; | go-binsize-treemap &amp;gt; binsize.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/nikolaydubina/go-binsize-treemap/raw/main/docs/hugo.svg?sanitize=true&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/nikolaydubina/go-binsize-treemap@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Assembly&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get assembly of Go code snippets online&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://godbolt.org&#34;&gt;godbolt.org&lt;/a&gt; to compile and see assembly of short Go code. You can check different platforms and compilers including &lt;code&gt;cgo&lt;/code&gt;. This tool is commonly used by C++ community. — &lt;a href=&#34;https://github.com/mattgodbolt&#34;&gt;@mattgodbolt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/godbolt.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get Go compiler SSA intermediary representation&lt;/h3&gt; &#xA;&lt;p&gt;Check what does Go compiler do. Might be useful if you trying to optimize some code or learn more about compiler. &lt;a href=&#34;https://golang.design/gossa&#34;&gt;https://golang.design/gossa&lt;/a&gt;. — &lt;a href=&#34;https://github.com/changkun&#34;&gt;@changkun&lt;/a&gt; / &lt;a href=&#34;https://github.com/golang-design/ssaplayground&#34;&gt;https://github.com/golang-design/ssaplayground&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/golang-design/ssaplayground/raw/main/public/assets/screen.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ View Go assembly interactively&lt;/h3&gt; &#xA;&lt;p&gt;Understand how Go is compiled better. — &lt;a href=&#34;https://github.com/egonelbre&#34;&gt;@egonelbre&lt;/a&gt; / &lt;a href=&#34;https://github.com/loov/lensm&#34;&gt;https://github.com/loov/lensm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/loov/lensm/raw/main/screenshot.gif&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install loov.dev/lensm@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Generate Go assembly in Go&lt;/h3&gt; &#xA;&lt;p&gt;Write better quality Go assembly quicker in Go language itself. This tool conveniently generates stub for Go code to call your generated assembly. Used by Go core. — &lt;a href=&#34;https://github.com/mmcloughlin&#34;&gt;@mmcloughlin&lt;/a&gt; / &lt;a href=&#34;https://github.com/mmcloughlin/avo&#34;&gt;https://github.com/mmcloughlin/avo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//go:build ignore&#xA;// +build ignore&#xA;&#xA;package main&#xA;&#xA;import . &#34;github.com/mmcloughlin/avo/build&#34;&#xA;&#xA;func main() {&#xA;&#x9;TEXT(&#34;Add&#34;, NOSPLIT, &#34;func(x, y uint64) uint64&#34;)&#xA;&#x9;Doc(&#34;Add adds x and y.&#34;)&#xA;&#x9;x := Load(Param(&#34;x&#34;), GP64())&#xA;&#x9;y := Load(Param(&#34;y&#34;), GP64())&#xA;&#x9;ADDQ(x, y)&#xA;&#x9;Store(y, ReturnIndex(0))&#xA;&#x9;RET()&#xA;&#x9;Generate()&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Generate AST for code snippets&lt;/h3&gt; &#xA;&lt;p&gt;Access Go core AST mechanism to generate AST.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;go/ast&#34;&#xA;&#x9;&#34;go/parser&#34;&#xA;&#x9;&#34;go/token&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;fs := token.NewFileSet()&#xA;&#x9;tr, _ := parser.ParseExpr(&#34;(3-1) * 5&#34;)&#xA;&#x9;ast.Print(fs, tr)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     0  *ast.BinaryExpr {&#xA;     1  .  X: *ast.ParenExpr {&#xA;     2  .  .  Lparen: -&#xA;     3  .  .  X: *ast.BinaryExpr {&#xA;     4  .  .  .  X: *ast.BasicLit {&#xA;     5  .  .  .  .  ValuePos: -&#xA;     6  .  .  .  .  Kind: INT&#xA;     7  .  .  .  .  Value: &#34;3&#34;&#xA;     8  .  .  .  }&#xA;     9  .  .  .  OpPos: -&#xA;    10  .  .  .  Op: -&#xA;    11  .  .  .  Y: *ast.BasicLit {&#xA;    12  .  .  .  .  ValuePos: -&#xA;    13  .  .  .  .  Kind: INT&#xA;    14  .  .  .  .  Value: &#34;1&#34;&#xA;    15  .  .  .  }&#xA;    16  .  .  }&#xA;    17  .  .  Rparen: -&#xA;    18  .  }&#xA;    19  .  OpPos: -&#xA;    20  .  Op: *&#xA;    21  .  Y: *ast.BasicLit {&#xA;    22  .  .  ValuePos: -&#xA;    23  .  .  Kind: INT&#xA;    24  .  .  Value: &#34;5&#34;&#xA;    25  .  }&#xA;    26  }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Execution&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run Go function in shell&lt;/h3&gt; &#xA;&lt;p&gt;Run Go one-liners. This tool will print to stdout the return of a function call. — &lt;a href=&#34;https://github.com/natefinch&#34;&gt;@natefinch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat README.md | gorram crypto/sha1 Sum&#xA;echo 12345 | gorram encoding/base64 StdEncoding.EncodeToString&#xA;gorram net/http Get https://google.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/natefinch/gorram@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run simple fileserver&lt;/h3&gt; &#xA;&lt;p&gt;It takes one line to run HTTP file server in Go. Akin to famous oneliner in Python &lt;code&gt;python3 -m http.server&lt;/code&gt; and &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;. Run this file as usually &lt;code&gt;go run &amp;lt;filename&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import &#34;net/http&#34;&#xA;&#xA;func main() { http.ListenAndServe(&#34;:9000&#34;, http.FileServer(http.Dir(&#34;.&#34;))) }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/simple-fs.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Monitor Go processes&lt;/h3&gt; &#xA;&lt;p&gt;Monitoring memory of Go processes, forcing GC, getting version of Go of processes. — Google&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gops&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;983   980    uplink-soecks  go1.9   /usr/local/bin/uplink-soecks&#xA;52697 52695  gops           go1.10  /Users/jbd/bin/gops&#xA;4132  4130   foops        * go1.9   /Users/jbd/bin/foops&#xA;51130 51128  gocode         go1.9.2 /Users/jbd/bin/gocode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/google/gops@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Create 3D visualization of concurrency traces&lt;/h3&gt; &#xA;&lt;p&gt;Fresh artistic perspective on coroutines execution. There is no advanced functions and it is hard to analyze production systems. However, it could be interesting for educational purposes. — &lt;a href=&#34;https://github.com/divan&#34;&gt;@divan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/divan/gotrace/raw/master/images/demo.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/divan/gotrace@latest&#xA;patch Go compiler, available via Docker&#xA;more instructions in original repo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmarking&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Run benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;Start here. This is the standard tool for benchmarking. It can also do advanced features like mutex profiles. More flags are in Go &lt;a href=&#34;https://pkg.go.dev/cmd/go#hdr-Testing_flags&#34;&gt;documentation&lt;/a&gt; and &lt;code&gt;go help testflag&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -bench=. -benchmem -benchtime=10s ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go test -bench=. -benchmem ./...&#xA;goos: darwin&#xA;goarch: arm64&#xA;pkg: github.com/nikolaydubina/fpmoney&#xA;BenchmarkArithmetic/add_x1-10                     1000000000             0.5 ns/op           0 B/op           0 allocs/op&#xA;BenchmarkArithmetic/add_x100-10                     18430124            64.6 ns/op           0 B/op           0 allocs/op&#xA;BenchmarkJSONUnmarshal/small-10                      3531835           340.7 ns/op         198 B/op           3 allocs/op&#xA;BenchmarkJSONUnmarshal/large-10                      2791712           426.9 ns/op         216 B/op           3 allocs/op&#xA;BenchmarkJSONMarshal/small-10                        4379685           274.4 ns/op         144 B/op           4 allocs/op&#xA;BenchmarkJSONMarshal/large-10                        3321205           345.8 ns/op         192 B/op           5 allocs/op&#xA;PASS&#xA;ok      github.com/nikolaydubina/fpmoney    62.744s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Table-driven benchmarks&lt;/h3&gt; &#xA;&lt;p&gt;Similar to tests, Go supports table-driven benchmarks, which is very helpful for fine gradation of meta-parameters. More details in the Go &lt;a href=&#34;https://go.dev/blog/subtests&#34;&gt;blog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func benchIteratorSelector(b *testing.B, n int) {&#xA;&#x9;// ... setup here&#xA;&#x9;b.ResetTimer()&#xA;&#x9;for n := 0; n &amp;lt; b.N; n++ {&#xA;&#x9;&#x9;err := myExpensiveFunc()&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;b.Error(err)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;func BenchmarkIteratorSelector(b *testing.B) {&#xA;&#x9;for _, q := range []int{100, 1000, 10000, 100000} {&#xA;&#x9;&#x9;b.Run(fmt.Sprintf(&#34;n=%d&#34;, q), func(b *testing.B) {&#xA;&#x9;&#x9;&#x9;benchIteratorSelector(b, q)&#xA;&#x9;&#x9;})&#xA;&#x9;}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;BenchmarkIteratorSelector/n=100-10    &#x9;  297792&#x9;      4265 ns/op&#x9;    5400 B/op&#x9;      13 allocs/op&#xA;BenchmarkIteratorSelector/n=1000-10   &#x9;   31400&#x9;     38182 ns/op&#x9;    9752 B/op&#x9;      16 allocs/op&#xA;BenchmarkIteratorSelector/n=10000-10  &#x9;    3134&#x9;    380777 ns/op&#x9;   89112 B/op&#x9;      24 allocs/op&#xA;BenchmarkIteratorSelector/n=100000-10 &#x9;     310&#x9;   3827292 ns/op&#x9;  912410 B/op&#x9;      32 allocs/op&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Generate benchmak CPU and Memory profiles&lt;/h3&gt; &#xA;&lt;p&gt;This is useful for identifying most time or memory consuming parts. Recommended to run for single benchmark at a time and with &lt;code&gt;-count&lt;/code&gt; or &lt;code&gt;-benchtime&lt;/code&gt; for better accuracy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -bench=&amp;lt;my-benchmark-name&amp;gt; -cpuprofile cpu.out -memprofile mem.out ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Visualize callgraph of profiles wiht &lt;code&gt;pprof&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Once you generate profiles, visualize them with &lt;code&gt;pprof&lt;/code&gt;. Both memory and CPU profiles are supported. Many options are available. Refer to the link you get in SVG to how to interpret this graph. More official documentation &lt;a href=&#34;https://go.dev/blog/pprof&#34;&gt;blog&lt;/a&gt;, &lt;a href=&#34;https://pkg.go.dev/net/http/pprof&#34;&gt;pkg-doc&lt;/a&gt;. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go tool pprof -svg cpu.out &amp;gt; cpu.svg&#xA;go tool pprof -svg mem.out &amp;gt; mem.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/pprof_callgraph_cpu.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Visualize flamegraphs of profiles wiht &lt;code&gt;pprof&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Latest versions of &lt;code&gt;pprof&lt;/code&gt; can also render &lt;a href=&#34;https://www.brendangregg.com/flamegraphs.html&#34;&gt;Flamegraphs&lt;/a&gt; for profiles. Make sure you set &lt;code&gt;-http&lt;/code&gt; to start webserver. Then it is available in &#34;View &amp;gt; Graph&#34; in at &lt;a href=&#34;http://0.0.0.0:80&#34;&gt;http://0.0.0.0:80&lt;/a&gt;. — Google&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pprof -http=0.0.0.0:80 cpu.out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/pprof_flamegraph_cpu.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/google/pprof@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Visualize profiles online&lt;/h3&gt; &#xA;&lt;p&gt;You can also visualize profiles with online tools are aloso available &lt;a href=&#34;https://www.speedscope.app&#34;&gt;https://www.speedscope.app&lt;/a&gt; (cpu).&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/speedscope_cpu_profile.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get delta between two benchmarks with &lt;code&gt;benchstat&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is standard way to compare two benchmark outputs. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass &lt;code&gt;-split=&#34;XYZ&#34;&lt;/code&gt;. If you do not see &lt;code&gt;delta&lt;/code&gt;, then pass &lt;code&gt;-count=2&lt;/code&gt; or more in benchmark generation. It is recommended to have alternative implementations in different packages, to keep benchmark names the same. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;benchstat -split=&#34;XYZ&#34; old.txt new.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;name                    old time/op    new time/op    delta&#xA;JSONUnmarshal/small-10     502ns ± 0%     331ns ± 0%   -33.99%  (p=0.008 n=5+5)&#xA;JSONUnmarshal/large-10     572ns ± 0%     414ns ± 0%   -27.64%  (p=0.008 n=5+5)&#xA;JSONMarshal/small-10       189ns ± 0%     273ns ± 0%   +44.20%  (p=0.008 n=5+5)&#xA;JSONMarshal/large-10       176ns ± 0%     340ns ± 0%   +93.29%  (p=0.008 n=5+5)&#xA;&#xA;name                    old alloc/op   new alloc/op   delta&#xA;JSONUnmarshal/small-10      271B ± 0%      198B ± 0%   -26.94%  (p=0.008 n=5+5)&#xA;JSONUnmarshal/large-10      312B ± 0%      216B ± 0%   -30.77%  (p=0.008 n=5+5)&#xA;JSONMarshal/small-10       66.0B ± 0%    144.0B ± 0%  +118.18%  (p=0.008 n=5+5)&#xA;JSONMarshal/large-10       72.0B ± 0%    192.0B ± 0%  +166.67%  (p=0.008 n=5+5)&#xA;&#xA;name                    old allocs/op  new allocs/op  delta&#xA;JSONUnmarshal/small-10      6.00 ± 0%      3.00 ± 0%   -50.00%  (p=0.008 n=5+5)&#xA;JSONUnmarshal/large-10      7.00 ± 0%      3.00 ± 0%   -57.14%  (p=0.008 n=5+5)&#xA;JSONMarshal/small-10        2.00 ± 0%      4.00 ± 0%  +100.00%  (p=0.008 n=5+5)&#xA;JSONMarshal/large-10        2.00 ± 0%      5.00 ± 0%  +150.00%  (p=0.008 n=5+5)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install golang.org/x/perf/cmd/benchstat@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get summary of benchmarks with &lt;code&gt;benchstat&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Compare multiple benchmarks. Names of benchmarks should be the same. Generate benchmarks as per usual. You would get multiple tables per dimension. If no output, then pass &lt;code&gt;-split=&#34;XYZ&#34;&lt;/code&gt;. It is recommended to have alternative implementations in different packages, to keep benchmark names the same. — official Go team&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;benchstat -split=&#34;XYZ&#34; int.txt float32.txt fpmoney.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;name \ time/op          int.bench   float32.bench  fpmoney.bench&#xA;JSONUnmarshal/small-10  481ns ± 2%     502ns ± 0%     331ns ± 0%&#xA;JSONUnmarshal/large-10  530ns ± 1%     572ns ± 0%     414ns ± 0%&#xA;JSONMarshal/small-10    140ns ± 1%     189ns ± 0%     273ns ± 0%&#xA;JSONMarshal/large-10    145ns ± 0%     176ns ± 0%     340ns ± 0%&#xA;&#xA;name \ alloc/op         int.bench   float32.bench  fpmoney.bench&#xA;JSONUnmarshal/small-10   269B ± 0%      271B ± 0%      198B ± 0%&#xA;JSONUnmarshal/large-10   288B ± 0%      312B ± 0%      216B ± 0%&#xA;JSONMarshal/small-10    57.0B ± 0%     66.0B ± 0%    144.0B ± 0%&#xA;JSONMarshal/large-10    72.0B ± 0%     72.0B ± 0%    192.0B ± 0%&#xA;&#xA;name \ allocs/op        int.bench   float32.bench  fpmoney.bench&#xA;JSONUnmarshal/small-10   6.00 ± 0%      6.00 ± 0%      3.00 ± 0%&#xA;JSONUnmarshal/large-10   7.00 ± 0%      7.00 ± 0%      3.00 ± 0%&#xA;JSONMarshal/small-10     2.00 ± 0%      2.00 ± 0%      4.00 ± 0%&#xA;JSONMarshal/large-10     2.00 ± 0%      2.00 ± 0%      5.00 ± 0%&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install golang.org/x/perf/cmd/benchstat@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Continuous benchmarking&lt;/h3&gt; &#xA;&lt;p&gt;Track how benchmarks change in codebase over time. This is accomplished by running benchmarks for git commits, storing results, and visualizing difference. Running benchmarks can be in GitHub Actions or locally, storage can be in same repository &lt;code&gt;master&lt;/code&gt; or dedicated branch, or standalone servers. It should be straightforward to setup this manually. Example of GitHub Action &lt;a href=&#34;https://github.com/swaggest/rest/raw/master/.github/workflows/bench.yml&#34;&gt;spec&lt;/a&gt; and &lt;a href=&#34;https://dev.to/vearutop/continuous-benchmarking-with-go-and-github-actions-41ok&#34;&gt;blog&lt;/a&gt; from &lt;a href=&#34;https://github.com/vearutop&#34;&gt;@vearutop&lt;/a&gt;, and an example on how it produces a PR &lt;a href=&#34;https://github.com/swaggest/rest/pull/88#issuecomment-1271540878&#34;&gt;comment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/cont-bench-vearutop.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Continuous benchmarking with &lt;code&gt;gobenchdata&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This tool uses &lt;code&gt;go test -bench&lt;/code&gt; data in GitHub. It runs benchmarks, and uploads it as GitHub Pages for visualization. It is available as GitHub Action &lt;a href=&#34;https://github.com/marketplace/actions/continuous-benchmarking-for-go&#34;&gt;gobenchdata&lt;/a&gt;. This is useful to see benchmark trends. — &lt;a href=&#34;https://github.com/bobheadxi&#34;&gt;@bobheadxi&lt;/a&gt; / &lt;a href=&#34;https://github.com/bobheadxi/gobenchdata&#34;&gt;https://github.com/bobheadxi/gobenchdata&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/bobheadxi/gobenchdata/raw/main/.static/demo-chart.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install go.bobheadxi.dev/gobenchdata@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Continuous benchmarking with &lt;code&gt;benchdiff&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Automates comparing benchmarks with &lt;code&gt;benchstat&lt;/code&gt; of two git references. It is available as GitHub Action &lt;a href=&#34;https://github.com/marketplace/actions/benchdiff&#34;&gt;benchdiff&lt;/a&gt; which runs &lt;code&gt;benchstat&lt;/code&gt; of HEAD vs base branch. This is useful to see how benchmarks change with PRs in CI. — &lt;a href=&#34;https://github.com/WillAbides&#34;&gt;@WillAbides&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/cont-bench-willabides.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/willabides/benchdiff/cmd/benchdiff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Continuous benchmarking with &lt;code&gt;cob&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Automate comparing benchmarks with &lt;code&gt;benchstat&lt;/code&gt; between &lt;code&gt;HEAD&lt;/code&gt; and &lt;code&gt;HEAD^1&lt;/code&gt;. It can be used to block CI pipelines if benchmarks deteriorate. It reports output as text in CLI. This cane be useful in CI or in local development. — &lt;a href=&#34;https://github.com/knqyf263&#34;&gt;@knqyf263&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/knqyf263/cob/raw/master/img/usage.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/knqyf263/cob@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Generate live traces using &lt;code&gt;net/http/trace&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This will add endpoints to your your server. If you don&#39;t have server running already in your process, you can start one. Then you can point &lt;code&gt;pprof&lt;/code&gt; tool to this data. More details in documentation &lt;a href=&#34;https://pkg.go.dev/cmd/trace&#34;&gt;trace&lt;/a&gt;, &lt;a href=&#34;https://pkg.go.dev/net/http/pprof&#34;&gt;pprof&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import _ &#34;net/http/pprof&#34;&#xA;&#xA;func main() {&#xA;&#x9;// if don&#39;t have http server yet, then start like&#xA;&#x9;go func() { log.Println(http.ListenAndServe(&#34;localhost:6060&#34;, nil)) }()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go tool pprof http://localhost:6060/debug/pprof/heap&#xA;go tool pprof http://localhost:6060/debug/pprof/profile?seconds=30&#xA;curl -o trace.out http://localhost:6060/debug/pprof/trace?seconds=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Generate traces using &lt;code&gt;go test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Produce a trace of execution of tests in pacakge.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go test -trace trace.out .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ View traces with &lt;code&gt;go tool trace&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can view traces interactively in browser with standard Go tooling. This web tool also shows network blocking profile, synchronization blocking profile, syscall blocking profile, scheduler latency profile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go tool trace trace.out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/go_tool_trace_web.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get wallclock traces&lt;/h3&gt; &#xA;&lt;p&gt;This tool can be more illustrative of Go traces than standard Go traces. — &lt;a href=&#34;https://github.com/felixge&#34;&gt;@felixge&lt;/a&gt; / &lt;a href=&#34;https://github.com/felixge/fgtrace&#34;&gt;https://github.com/felixge/fgtrace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;net/http&#34;&#xA;&#xA;&#x9;&#34;github.com/felixge/fgtrace&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;http.DefaultServeMux.Handle(&#34;/debug/fgtrace&#34;, fgtrace.Config{})&#xA;&#x9;http.ListenAndServe(&#34;:1234&#34;, nil)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/felixge/fgtrace/raw/main/assets/fgtrace-example.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Get on/off CPU profiles&lt;/h3&gt; &#xA;&lt;p&gt;This tool can be more illustrative of Go profiles than standard Go profiling. — &lt;a href=&#34;https://github.com/felixge&#34;&gt;@felixge&lt;/a&gt; / &lt;a href=&#34;https://github.com/felixge/fgprof&#34;&gt;https://github.com/felixge/fgprof&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;log&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#x9;_ &#34;net/http/pprof&#34;&#xA;&#xA;&#x9;&#34;github.com/felixge/fgprof&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;http.DefaultServeMux.Handle(&#34;/debug/fgprof&#34;, fgprof.Handler())&#xA;&#x9;go func() {&#xA;&#x9;&#x9;log.Println(http.ListenAndServe(&#34;:6060&#34;, nil))&#xA;&#x9;}()&#xA;&#xA;&#x9;// &amp;lt;code to profile&amp;gt;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/felixge/fgprof/raw/master/assets/fgprof_pprof.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Make alternative documentation with golds&lt;/h3&gt; &#xA;&lt;p&gt;It has additional information like implementations of interface; promoted methods. The tool has nice minimalistic aesthetics. — &lt;a href=&#34;https://www.tapirgames.com&#34;&gt;Tapir Liu&lt;/a&gt; / &lt;a href=&#34;https://github.com/go101/golds&#34;&gt;https://github.com/go101/golds&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;golds ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/img/golds.png&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install go101.org/golds@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nikolaydubina/go-recipes/main/#contents&#34;&gt;⏫&lt;/a&gt;➡ Read Go binary documentation in &lt;code&gt;man&lt;/code&gt; format&lt;/h3&gt; &#xA;&lt;p&gt;This tool fetches the repo&#39;s readme as a man page replacement. — &lt;a href=&#34;https://github.com/christophberger&#34;&gt;@christophberger&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;goman &amp;lt;mypackage&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://github.com/appliedgocode/goman/raw/master/goman.gif&#34; style=&#34;margin: 8px; max-height: 640px;&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;Requirements&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go install github.com/appliedgocode/goman@latest&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>kubevirt/kubevirt</title>
    <updated>2022-10-12T01:34:35Z</updated>
    <id>tag:github.com,2022-10-12:/kubevirt/kubevirt</id>
    <link href="https://github.com/kubevirt/kubevirt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kubernetes Virtualization API and runtime in order to define and manage virtual machines.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;KubeVirt&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://prow.ci.kubevirt.io/?job=push-kubevirt-main&#34;&gt;&lt;img src=&#34;https://prow.ci.kubevirt.io/badge.svg?jobs=push-kubevirt-main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/kubevirt/kubevirt&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/kubevirt/kubevirt&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/kubevirt/kubevirt.svg?sanitize=true&#34; alt=&#34;Licensed under Apache License version 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/kubevirt/kubevirt?branch=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/kubevirt/kubevirt/main.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/3203&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/3203/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://kubernetes.slack.com/?redir=%2Farchives%2FC0163DT0R8X&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-@kubernetes/kubevirt--dev-40abb8.svg?logo=slack&#34; alt=&#34;Visit our Slack channel&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B13072%2Fgit%40github.com%3Akubevirt%2Fkubevirt.git?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B13072%2Fgit%40github.com%3Akubevirt%2Fkubevirt.git.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/summary/new_code?id=kubevirt_kubevirt&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=kubevirt_kubevirt&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://cncf-branding.netlify.app/img/projects/kubevirt/icon/color/kubevirt-icon-color.png&#34; width=&#34;100&#34;&gt; &#xA;&lt;p&gt;&lt;strong&gt;KubeVirt&lt;/strong&gt; is a virtual machine management add-on for Kubernetes. The aim is to provide a common ground for virtualization solutions on top of Kubernetes.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;h3&gt;Virtualization extension for Kubernetes&lt;/h3&gt; &#xA;&lt;p&gt;At its core, KubeVirt extends &lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt; by adding additional virtualization resource types (especially the &lt;code&gt;VM&lt;/code&gt; type) through &lt;a href=&#34;https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/&#34;&gt;Kubernetes&#39;s Custom Resource Definitions API&lt;/a&gt;. By using this mechanism, the Kubernetes API can be used to manage these &lt;code&gt;VM&lt;/code&gt; resources alongside all other resources Kubernetes provides.&lt;/p&gt; &#xA;&lt;p&gt;The resources themselves are not enough to launch virtual machines. For this to happen the &lt;em&gt;functionality and business logic&lt;/em&gt; needs to be added to the cluster. The functionality is not added to Kubernetes itself, but rather added to a Kubernetes cluster by &lt;em&gt;running&lt;/em&gt; additional controllers and agents on an existing cluster.&lt;/p&gt; &#xA;&lt;p&gt;The necessary controllers and agents are provided by KubeVirt.&lt;/p&gt; &#xA;&lt;p&gt;As of today KubeVirt can be used to declaratively&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a predefined VM&lt;/li&gt; &#xA; &lt;li&gt;Schedule a VM on a Kubernetes cluster&lt;/li&gt; &#xA; &lt;li&gt;Launch a VM&lt;/li&gt; &#xA; &lt;li&gt;Stop a VM&lt;/li&gt; &#xA; &lt;li&gt;Delete a VM&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/497168&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/497168.svg?sanitize=true&#34; width=&#34;50%&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;To start using KubeVirt&lt;/h2&gt; &#xA;&lt;p&gt;Try our quickstart at &lt;a href=&#34;http://kubevirt.io/get_kubevirt/&#34;&gt;kubevirt.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See our user documentation at &lt;a href=&#34;http://kubevirt.io/user-guide&#34;&gt;kubevirt.io/docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once you have the basics, you can learn more about how to run KubeVirt and its newest features by taking a look at:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubevirt.io/blogs/&#34;&gt;KubeVirt blog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC2FH36TbZizw25pVT1P3C3g&#34;&gt;KubeVirt Youtube channel&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;To start developing KubeVirt&lt;/h2&gt; &#xA;&lt;p&gt;To set up a development environment please read our &lt;a href=&#34;https://raw.githubusercontent.com/kubevirt/kubevirt/main/docs/getting-started.md&#34;&gt;Getting Started Guide&lt;/a&gt;. To learn how to contribute, please read our &lt;a href=&#34;https://github.com/kubevirt/kubevirt/raw/main/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can learn more about how KubeVirt is designed (and why it is that way), and learn more about the major components by taking a look at &lt;a href=&#34;https://raw.githubusercontent.com/kubevirt/kubevirt/main/docs/&#34;&gt;our developer documentation&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubevirt/kubevirt/main/docs/architecture.md&#34;&gt;Architecture&lt;/a&gt; - High-level view on the architecture&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kubevirt/kubevirt/main/docs/components.md&#34;&gt;Components&lt;/a&gt; - Detailed look at all components&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubevirt.io/api-reference/&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;If you got enough of code and want to speak to people, then you got a couple of options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow us on &lt;a href=&#34;https://twitter.com/kubevirt&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat with us on Slack via &lt;a href=&#34;https://kubernetes.slack.com/?redir=%2Farchives%2FC8ED7RKFE&#34;&gt;#virtualization @ kubernetes.slack.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Discuss with us on the &lt;a href=&#34;https://groups.google.com/forum/#!forum/kubevirt-dev&#34;&gt;kubevirt-dev Google Group&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Stay informed about designs and upcoming events by watching our &lt;a href=&#34;https://github.com/kubevirt/community/&#34;&gt;community content&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Related resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kubernetes.io&#34;&gt;Kubernetes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.libvirt.org&#34;&gt;Libvirt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cockpit-project.org/&#34;&gt;Cockpit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kubevirt/kubevirt-ansible&#34;&gt;Kubevirt-ansible&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Submitting patches&lt;/h3&gt; &#xA;&lt;p&gt;When sending patches to the project, the submitter is required to certify that they have the legal right to submit the code. This is achieved by adding a line&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Signed-off-by: Real Name &amp;lt;email@address.com&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to the bottom of every commit message. Existence of such a line certifies that the submitter has complied with the Developer&#39;s Certificate of Origin 1.1, (as defined in the file docs/developer-certificate-of-origin).&lt;/p&gt; &#xA;&lt;p&gt;This line can be automatically added to a commit in the correct format, by using the &#39;-s&#39; option to &#39;git commit&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;KubeVirt is distributed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0.txt&#34;&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2016&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FOSSA Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/custom%2B13072%2Fgit%40github.com%3Akubevirt%2Fkubevirt.git?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B13072%2Fgit%40github.com%3Akubevirt%2Fkubevirt.git.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>