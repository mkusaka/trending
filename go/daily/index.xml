<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:33:08Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eatmoreapple/openwechat</title>
    <updated>2022-12-11T01:33:08Z</updated>
    <id>tag:github.com,2022-12-11:/eatmoreapple/openwechat</id>
    <link href="https://github.com/eatmoreapple/openwechat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;golang版微信SDK&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openwechat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/eatMoreApple/openwechat&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/eatMoreApple/openwechat&#34; alt=&#34;Go Doc&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/eatmoreapple/openwechat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/eatmoreapple/openwechat.svg?style=flat-square&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://goreportcard.com/badge/github.com/eatmoreapple/openwechat&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/eatmoreapple/openwechat&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://img.shields.io/github/stars/eatmoreapple/openwechat.svg?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/eatmoreapple/openwechat.svg?style=flat-square&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://img.shields.io/github/forks/eatmoreapple/openwechat.svg?style=flat-square&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/eatmoreapple/openwechat.svg?style=flat-square&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;golang版个人微信号API, 突破网页版限制，类似开发公众号一样，开发个人微信号&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;微信机器人&lt;span&gt;😈&lt;/span&gt;，利用微信号完成一些功能的定制化开发⭐&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持定制化开发，如日志记录，自动回复&lt;/li&gt; &#xA; &lt;li&gt;突破网页版登录限制📣&lt;/li&gt; &#xA; &lt;li&gt;无需重复扫码登录&lt;/li&gt; &#xA; &lt;li&gt;支持多个微信号同时登陆&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;安装&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;go get&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get github.com/eatmoreapple/openwechat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;go mod&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;require github.com/eatmoreapple/openwechat latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;快速开始&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;github.com/eatmoreapple/openwechat&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;bot := openwechat.DefaultBot()&#xA;  // bot := openwechat.DefaultBot(openwechat.Desktop) // 桌面模式，上面登录不上的可以尝试切换这种模式&#xA;&#xA;&#x9;// 注册消息处理函数&#xA;&#x9;bot.MessageHandler = func(msg *openwechat.Message) {&#xA;&#x9;&#x9;if msg.IsText() &amp;amp;&amp;amp; msg.Content == &#34;ping&#34; {&#xA;&#x9;&#x9;&#x9;msg.ReplyText(&#34;pong&#34;)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;// 注册登陆二维码回调&#xA;&#x9;bot.UUIDCallback = openwechat.PrintlnQrcodeUrl&#xA;&#xA;&#x9;// 登陆&#xA;&#x9;if err := bot.Login(); err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;// 获取登陆的用户&#xA;&#x9;self, err := bot.GetCurrentUser()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Println(err)&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;// 获取所有的好友&#xA;&#x9;friends, err := self.Friends()&#xA;&#x9;fmt.Println(friends, err)&#xA;&#xA;&#x9;// 获取所有的群组&#xA;&#x9;groups, err := self.Groups()&#xA;&#x9;fmt.Println(groups, err)&#xA;&#xA;&#x9;// 阻塞主goroutine, 直到发生异常或者用户主动退出&#xA;&#x9;bot.Block()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;支持功能&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;消息回复、给指定对象（好友、群组）发送文本、图片、文件、emoji表情等消息&lt;/li&gt; &#xA; &lt;li&gt;热登陆（无需重复扫码登录）、自定义消息处理、文件下载、消息防撤回&lt;/li&gt; &#xA; &lt;li&gt;获取对象信息、设置好友备注、拉好友进群等&lt;/li&gt; &#xA; &lt;li&gt;更多功能请查看文档&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;文档&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://openwechat.readthedocs.io/zh/latest/&#34;&gt;点击查看&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;项目主页&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/eatmoreapple/openwechat&#34;&gt;https://github.com/eatmoreapple/openwechat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/?from=openwechat&#34;&gt;&lt;img src=&#34;https://account.jetbrains.com/static/images/jetbrains-logo-inv.svg?sanitize=true&#34; height=&#34;200&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;添加微信(EatMoreApple)&lt;span&gt;🍎&lt;/span&gt;（备注: openwechat），进群交流&lt;span&gt;😈&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;如果二维码图片没显示出来，请添加微信号 EatMoreApple&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;210px&#34; src=&#34;https://raw.githubusercontent.com/eatmoreapple/eatMoreApple/main/img/wechat.jpg&#34; align=&#34;left&#34;&gt;</summary>
  </entry>
  <entry>
    <title>icepie/jojo-live</title>
    <updated>2022-12-11T01:33:08Z</updated>
    <id>tag:github.com,2022-12-11:/icepie/jojo-live</id>
    <link href="https://github.com/icepie/jojo-live" rel="alternate"></link>
    <summary type="html">&lt;p&gt;利用旧手机远程观测鹦鹉, 甚至与它交互~&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jojo-live&lt;/h1&gt; &#xA;&lt;p&gt;利用旧手机远程观测鹦鹉, 甚至与它交互~&lt;/p&gt; &#xA;&lt;h2&gt;详情&lt;/h2&gt; &#xA;&lt;p&gt;文档待补充哦~&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gwuhaolin/livego</title>
    <updated>2022-12-11T01:33:08Z</updated>
    <id>tag:github.com,2022-12-11:/gwuhaolin/livego</id>
    <link href="https://github.com/gwuhaolin/livego" rel="alternate"></link>
    <summary type="html">&lt;p&gt;live video streaming server in golang&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/gwuhaolin/livego/master/logo.png&#34; width=&#34;200px&#34; height=&#34;80px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gwuhaolin/livego/master/README_cn.md&#34;&gt;中文&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gwuhaolin/livego/actions?query=workflow%3ATest&#34;&gt;&lt;img src=&#34;https://github.com/gwuhaolin/livego/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gwuhaolin/livego/actions?query=workflow%3ARelease&#34;&gt;&lt;img src=&#34;https://github.com/gwuhaolin/livego/workflows/Release/badge.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Simple and efficient live broadcast server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Very simple to install and use;&lt;/li&gt; &#xA; &lt;li&gt;Pure Golang, high performance, and cross-platform;&lt;/li&gt; &#xA; &lt;li&gt;Supports commonly used transmission protocols, file formats, and encoding formats;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Supported transport protocols&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;RTMP&lt;/li&gt; &#xA; &lt;li&gt;AMF&lt;/li&gt; &#xA; &lt;li&gt;HLS&lt;/li&gt; &#xA; &lt;li&gt;HTTP-FLV&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Supported container formats&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FLV&lt;/li&gt; &#xA; &lt;li&gt;TS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Supported encoding formats&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;H264&lt;/li&gt; &#xA; &lt;li&gt;AAC&lt;/li&gt; &#xA; &lt;li&gt;MP3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;After directly downloading the compiled &lt;a href=&#34;https://github.com/gwuhaolin/livego/releases&#34;&gt;binary file&lt;/a&gt;, execute it on the command line.&lt;/p&gt; &#xA;&lt;h4&gt;Boot from Docker&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;docker run -p 1935:1935 -p 7001:7001 -p 7002:7002 -p 8090:8090 -d gwuhaolin/livego&lt;/code&gt; to start&lt;/p&gt; &#xA;&lt;h4&gt;Compile from source&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the source code &lt;code&gt;git clone https://github.com/gwuhaolin/livego.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go to the livego directory and execute &lt;code&gt;go build&lt;/code&gt; or &lt;code&gt;make build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the service: execute the livego binary file or &lt;code&gt;make run&lt;/code&gt; to start the livego service;&lt;/li&gt; &#xA; &lt;li&gt;Get a channelkey(used for push the video stream) from &lt;code&gt;http://localhost:8090/control/get?room=movie&lt;/code&gt; and copy data like your channelkey.&lt;/li&gt; &#xA; &lt;li&gt;Upstream push: Push the video stream to &lt;code&gt;rtmp://localhost:1935/{appname}/{channelkey}&lt;/code&gt; through the&lt;code&gt; RTMP&lt;/code&gt; protocol(default appname is &lt;code&gt;live&lt;/code&gt;), for example, use &lt;code&gt;ffmpeg -re -i demo.flv -c copy -f flv rtmp://localhost:1935/{appname}/{channelkey}&lt;/code&gt; push(&lt;a href=&#34;https://s3plus.meituan.net/v1/mss_7e425c4d9dcb4bb4918bbfa2779e6de1/mpack/default/demo.flv&#34;&gt;download demo flv&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;Downstream playback: The following three playback protocols are supported, and the playback address is as follows: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;RTMP&lt;/code&gt;:&lt;code&gt;rtmp://localhost:1935/{appname}/movie&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;FLV&lt;/code&gt;:&lt;code&gt;http://127.0.0.1:7001/{appname}/movie.flv&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;HLS&lt;/code&gt;:&lt;code&gt;http://127.0.0.1:7002/{appname}/movie.m3u8&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use hls via https: generate ssl certificate(server.key, server.crt files), place them in directory with executable file, change &#34;use_hls_https&#34; option in livego.yaml to true (false by default)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;all options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./livego  -h&#xA;Usage of ./livego:&#xA;      --api_addr string       HTTP manage interface server listen address (default &#34;:8090&#34;)&#xA;      --config_file string    configure filename (default &#34;livego.yaml&#34;)&#xA;      --flv_dir string        output flv file at flvDir/APP/KEY_TIME.flv (default &#34;tmp&#34;)&#xA;      --gop_num int           gop num (default 1)&#xA;      --hls_addr string       HLS server listen address (default &#34;:7002&#34;)&#xA;      --hls_keep_after_end    Maintains the HLS after the stream ends&#xA;      --httpflv_addr string   HTTP-FLV server listen address (default &#34;:7001&#34;)&#xA;      --level string          Log level (default &#34;info&#34;)&#xA;      --read_timeout int      read time out (default 10)&#xA;      --rtmp_addr string      RTMP server listen address&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/gwuhaolin/blog/issues/3&#34;&gt;Use with flv.js&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Interested in Golang? Please see &lt;a href=&#34;http://go.wuhaolin.cn/&#34;&gt;Golang Chinese Learning Materials Summary&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>