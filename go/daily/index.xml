<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-27T01:29:14Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maypok86/otter</title>
    <updated>2023-12-27T01:29:14Z</updated>
    <id>tag:github.com,2023-12-27:/maypok86/otter</id>
    <link href="https://github.com/maypok86/otter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fastest golang in-memory cache library based on S3-FIFO algorithm. many times faster than Ristretto and friends&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/logo.png&#34; width=&#34;40%&#34; height=&#34;auto&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;High performance in-memory cache&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/maypok86/otter/actions/workflows/test.yml/badge.svg?sanitize=true&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/maypok86/otter&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/maypok86/otter/graph/badge.svg?token=G0PJFOR8IF&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/maypok86/otter&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/maypok86/otter&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;h2&gt;üìñ Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#related-works&#34;&gt;Related works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#hit-ratio&#34;&gt;Hit ratio&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üí° Motivation &lt;a id=&#34;motivation&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;I once came across the fact that none of the Golang cache libraries are truly contention-free. All of them are just a standard map with mutex and some eviction policy. Unfortunately, these are not able to reach the speed of caches in other languages (such as &lt;a href=&#34;https://github.com/ben-manes/caffeine&#34;&gt;Caffeine&lt;/a&gt;). For example, the fastest cache from Dgraph labs called &lt;a href=&#34;https://github.com/dgraph-io/ristretto&#34;&gt;Ristretto&lt;/a&gt;, which was faster than competitors by 30% at best (Otter is many times faster) and had a &lt;a href=&#34;https://github.com/dgraph-io/ristretto/issues/336&#34;&gt;disgusting hit ratio&lt;/a&gt; even though README says otherwise. This can be a problem in different applications because no one wants to bump the performance of a cache library and its bad hit ratio üôÇ. As a result, I wanted to get the fastest, easiest-to-use cache with excellent hit ratio and support from the authors and Otter is designed to correct this unfortunate misunderstanding.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please leave a ‚≠ê as motivation if you liked the idea üòÑ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üóÉ Related works &lt;a id=&#34;related-works&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Otter is based on the following papers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://web.cse.ohio-state.edu/hpcs/WWW/HTML/publications/papers/TR-09-1.pdf&#34;&gt;BP-Wrapper: A Framework Making Any Replacement Algorithms (Almost) Lock Contention Free&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/10.1145/3600006.3613147&#34;&gt;FIFO queues are all you need for cache eviction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.acm.org/doi/fullHtml/10.1145/3422575.3422797&#34;&gt;Bucket-Based Expiration Algorithm: Improving Eviction Efficiency for In-Memory Key-Value Database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.usenix.org/system/files/osdi20-yang.pdf&#34;&gt;A large scale analysis of hundreds of in-memory cache clusters at Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú® Features &lt;a id=&#34;features&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This library has lots of features such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple API&lt;/strong&gt;: Just set the parameters you want in the builder and enjoy&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Autoconfiguration&lt;/strong&gt;: Otter is automatically configured based on the parallelism of your application&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Generics&lt;/strong&gt;: You can safely use any comparable types as keys and any types as values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TTL&lt;/strong&gt;: Expired values will be automatically deleted from the cache&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cost-based eviction&lt;/strong&gt;: Otter supports eviction based on the cost of each item&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Excellent performance&lt;/strong&gt;: Otter is currently the fastest cache library with a huge lead over the &lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#performance&#34;&gt;competition&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Great hit ratio&lt;/strong&gt;: New S3-FIFO algorithm is used, which shows excellent &lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/#hit-ratio&#34;&gt;results&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìö Usage &lt;a id=&#34;usage&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;üìã Requirements &lt;a id=&#34;requirements&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.18+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üõ†Ô∏è Installation &lt;a id=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go get -u github.com/maypok86/otter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;‚úèÔ∏è Examples &lt;a id=&#34;examples&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Otter uses a builder pattern that allows you to conveniently create a cache object with different parameters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;github.com/maypok86/otter&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // NewBuilder creates a builder and sets the future cache capacity to 1000 elements.&#xA;    // Returns an error if capacity &amp;lt;= 0.&#xA;    builder, err := otter.NewBuilder[string, string](1000)&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    // StatsEnabled determines whether statistics should be calculated when the cache is running.&#xA;    // By default, statistics calculating is disabled.&#xA;    builder.StatsEnabled(true)&#xA;&#xA;    // Cost sets a function to dynamically calculate the weight of a key-value pair.&#xA;    // By default this function always returns 1.&#xA;    builder.Cost(func(key string, value string) uint32 {&#xA;        return uint32(len(value))&#xA;    })&#xA;&#xA;    // Build creates a new cache object or&#xA;    // returns an error if invalid parameters were passed to the builder.&#xA;    cache, err := builder.Build()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    cache.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cache&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;fmt&#34;&#xA;    &#34;time&#34;&#xA;&#xA;    &#34;github.com/maypok86/otter&#34;&#xA;)&#xA;&#xA;func main() {&#xA;    // create a cache with capacity equal to 10000 elements&#xA;    cache, err := otter.MustBuilder[string, string](10_000).Build()&#xA;    if err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    // set key-value pair with ttl (1 hour) &#xA;    cache.SetWithTTL(&#34;key&#34;, &#34;value&#34;, time.Hour)&#xA;&#xA;    // get value from cache&#xA;    value, ok := cache.Get(&#34;key&#34;)&#xA;    if !ok {&#xA;        panic(&#34;not found key&#34;)&#xA;    }&#xA;    fmt.Println(value)&#xA;&#xA;    // delete key-value pair from cache&#xA;    cache.Delete(&#34;key&#34;)&#xA;&#xA;    // delete data and stop goroutines&#xA;    cache.Close()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üìä Benchmarks &lt;a id=&#34;benchmarks&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The benchmark code can be found &lt;a href=&#34;https://github.com/maypok86/benchmarks&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üöÄ Performance &lt;a id=&#34;performance&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Read (100%)&lt;/h4&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/reads=100,writes=0.png&#34; alt=&#34;reads=100%,writes=0%&#34;&gt; &#xA;&lt;h4&gt;Read (75%) / Write (25%)&lt;/h4&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/reads=75,writes=25.png&#34; alt=&#34;reads=75%,writes=25%&#34;&gt; &#xA;&lt;h4&gt;Write (100%)&lt;/h4&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/reads=0,writes=100.png&#34; alt=&#34;reads=0%,writes=100%&#34;&gt; &#xA;&lt;h3&gt;üéØ Hit ratio &lt;a id=&#34;hit-ratio&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Zipf&lt;/h4&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/zipf.png&#34; alt=&#34;zipf&#34;&gt; &#xA;&lt;h4&gt;S3&lt;/h4&gt; &#xA;&lt;p&gt;This trace is described as &#34;disk read accesses initiated by a large commercial search engine in response to various web search requests.&#34;&lt;/p&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/s3.png&#34; alt=&#34;s3&#34;&gt; &#xA;&lt;h4&gt;DS1&lt;/h4&gt; &#xA;&lt;p&gt;This trace is described as &#34;a database server running at a commercial site running an ERP application on top of a commercial database.&#34;&lt;/p&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/ds1.png&#34; alt=&#34;ds1&#34;&gt; &#xA;&lt;h4&gt;P3&lt;/h4&gt; &#xA;&lt;p&gt;The trace P3 was collected from workstations running Windows NT by using Vtrace which captures disk operations through the use of device filters&lt;/p&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/p3.png&#34; alt=&#34;p3&#34;&gt; &#xA;&lt;h4&gt;P8&lt;/h4&gt; &#xA;&lt;p&gt;The trace P8 was collected from workstations running Windows NT by using Vtrace which captures disk operations through the use of device filters&lt;/p&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/p8.png&#34; alt=&#34;p8&#34;&gt; &#xA;&lt;h4&gt;LOOP&lt;/h4&gt; &#xA;&lt;p&gt;This trace demonstrates a looping access pattern.&lt;/p&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/loop.png&#34; alt=&#34;loop&#34;&gt; &#xA;&lt;h4&gt;OLTP&lt;/h4&gt; &#xA;&lt;p&gt;This trace is described as &#34;references to a CODASYL database for a one hour period.&#34;&lt;/p&gt; &#xA;&lt;img width=&#34;60%&#34; src=&#34;https://raw.githubusercontent.com/maypok86/otter/main/assets/results/oltp.png&#34; alt=&#34;oltp&#34;&gt; &#xA;&lt;p&gt;In summary, we have that S3-FIFO (otter) is inferior to W-TinyLFU (theine) on lfu friendly traces (databases, search, analytics), but has a greater or equal hit ratio on web traces.&lt;/p&gt; &#xA;&lt;h2&gt;üëè Contribute &lt;a id=&#34;contribute&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome as always, before submitting a new PR please make sure to open a new issue so community members can discuss it. For more information please see &lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you might find existing open issues which can help with improvements.&lt;/p&gt; &#xA;&lt;p&gt;This project follows a standard &lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ License &lt;a id=&#34;license&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This project is Apache 2.0 licensed, as found in the &lt;a href=&#34;https://raw.githubusercontent.com/maypok86/otter/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>