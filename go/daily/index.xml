<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-27T01:35:12Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>getkin/kin-openapi</title>
    <updated>2023-01-27T01:35:12Z</updated>
    <id>tag:github.com,2023-01-27:/getkin/kin-openapi</id>
    <link href="https://github.com/getkin/kin-openapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenAPI 3.0 (and Swagger v2) implementation for Go (parsing, converting, validation, and more)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/getkin/kin-openapi/actions&#34;&gt;&lt;img src=&#34;https://github.com/getkin/kin-openapi/workflows/go/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/getkin/kin-openapi&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/getkin/kin-openapi&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/getkin/kin-openapi&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/getkin/kin-openapi?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/getkin/kin?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/getkin/kin.svg?sanitize=true&#34; alt=&#34;Join Gitter Chat Channel -&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; project for handling &lt;a href=&#34;https://www.openapis.org/&#34;&gt;OpenAPI&lt;/a&gt; files. We target:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/raw/main/versions/2.0.md&#34;&gt;OpenAPI &lt;code&gt;v2.0&lt;/code&gt;&lt;/a&gt; (formerly known as Swagger)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/raw/main/versions/3.0.3.md&#34;&gt;OpenAPI &lt;code&gt;v3.0&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/raw/main/versions/3.1.0.md&#34;&gt;OpenAPI &lt;code&gt;v3.1&lt;/code&gt;&lt;/a&gt; Soon! &lt;a href=&#34;https://github.com/getkin/kin-openapi/issues/230&#34;&gt;Tracking issue here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/getkin/kin-openapi/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors, users and sponsors&lt;/h2&gt; &#xA;&lt;p&gt;The project has received pull requests &lt;a href=&#34;https://github.com/getkin/kin-openapi/graphs/contributors&#34;&gt;from many people&lt;/a&gt;. Thanks to everyone!&lt;/p&gt; &#xA;&lt;p&gt;Be sure to &lt;a href=&#34;https://github.com/sponsors/fenollp&#34;&gt;give back to this project&lt;/a&gt; like our sponsors:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/www.speakeasyapi.dev&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/getkin/kin-openapi/master/.github/sponsors/speakeasy.png&#34; alt=&#34;Speakeasy&#34; height=&#34;100px&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s some projects that depend on &lt;em&gt;kin-openapi&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Tufin/oasdiff&#34;&gt;github.com/Tufin/oasdiff&lt;/a&gt; - &#34;A diff tool for OpenAPI Specification 3&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielgtaylor/apisprout&#34;&gt;github.com/danielgtaylor/apisprout&lt;/a&gt; - &#34;Lightweight, blazing fast, cross-platform OpenAPI 3 mock server with validation&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/deepmap/oapi-codegen&#34;&gt;github.com/deepmap/oapi-codegen&lt;/a&gt; - &#34;Generate Go client and server boilerplate from OpenAPI 3 specifications&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dunglas/vulcain&#34;&gt;github.com/dunglas/vulcain&lt;/a&gt; - &#34;Use HTTP/2 Server Push to create fast and idiomatic client-driven REST APIs&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielgtaylor/restish&#34;&gt;github.com/danielgtaylor/restish&lt;/a&gt; - &#34;...a CLI for interacting with REST-ish HTTP APIs with some nice features built-in&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/goadesign/goa&#34;&gt;github.com/goadesign/goa&lt;/a&gt; - &#34;Design-based APIs and microservices in Go&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hashicorp/nomad-openapi&#34;&gt;github.com/hashicorp/nomad-openapi&lt;/a&gt; - &#34;Nomad is an easy-to-use, flexible, and performant workload orchestrator that can deploy a mix of microservice, batch, containerized, and non-containerized applications. Nomad is easy to operate and scale and has native Consul and Vault integrations.&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.com/jamietanna/httptest-openapi&#34;&gt;gitlab.com/jamietanna/httptest-openapi&lt;/a&gt; (&lt;a href=&#34;https://www.jvt.me/posts/2022/05/22/go-openapi-contract-test/&#34;&gt;&lt;em&gt;blog post&lt;/em&gt;&lt;/a&gt;) - &#34;Go OpenAPI Contract Verification for use with &lt;code&gt;net/http&lt;/code&gt;&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SIMITGROUP/openapigenerator&#34;&gt;github.com/SIMITGROUP/openapigenerator&lt;/a&gt; - &#34;Openapi v3 microservices generator&#34;&lt;/li&gt; &#xA; &lt;li&gt;(Feel free to add your project by &lt;a href=&#34;https://github.com/getkin/kin-openapi/issues/new&#34;&gt;creating an issue&lt;/a&gt; or a pull request)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-swagger/go-swagger&#34;&gt;go-swagger&lt;/a&gt; stated &lt;a href=&#34;https://github.com/go-swagger/go-swagger/issues/1122#issuecomment-575968499&#34;&gt;&lt;em&gt;OpenAPIv3 won&#39;t be supported&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swaggo/swag&#34;&gt;swaggo&lt;/a&gt; has an &lt;a href=&#34;https://github.com/swaggo/swag/issues/386&#34;&gt;open issue on OpenAPIv3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-openapi&#34;&gt;go-openapi&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/go-openapi/spec3&#34;&gt;spec3&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;an iteration on &lt;a href=&#34;https://github.com/go-openapi/spec&#34;&gt;spec&lt;/a&gt; (for OpenAPIv2)&lt;/li&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/go-openapi/spec3/tree/3fab9faa9094e06ebd19ded7ea96d156c2283dca#oai-object-model---&#34;&gt;README&lt;/a&gt; for the missing parts&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to check &lt;a href=&#34;https://github.com/OAI&#34;&gt;OpenAPI Initiative&lt;/a&gt;&#39;s &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification/raw/master/IMPLEMENTATIONS.md&#34;&gt;great tooling list&lt;/a&gt; as well as &lt;a href=&#34;https://openapi.tools/&#34;&gt;OpenAPI.Tools&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Structure&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;openapi2&lt;/em&gt; (&lt;a href=&#34;https://godoc.org/github.com/getkin/kin-openapi/openapi2&#34;&gt;godoc&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for OpenAPI 2 files, including serialization, deserialization, and validation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;openapi2conv&lt;/em&gt; (&lt;a href=&#34;https://godoc.org/github.com/getkin/kin-openapi/openapi2conv&#34;&gt;godoc&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Converts OpenAPI 2 files into OpenAPI 3 files.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;openapi3&lt;/em&gt; (&lt;a href=&#34;https://godoc.org/github.com/getkin/kin-openapi/openapi3&#34;&gt;godoc&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Support for OpenAPI 3 files, including serialization, deserialization, and validation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;openapi3filter&lt;/em&gt; (&lt;a href=&#34;https://godoc.org/github.com/getkin/kin-openapi/openapi3filter&#34;&gt;godoc&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Validates HTTP requests and responses&lt;/li&gt; &#xA;   &lt;li&gt;Provides a &lt;a href=&#34;https://github.com/gorilla/mux&#34;&gt;gorilla/mux&lt;/a&gt; router for OpenAPI operations&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;openapi3gen&lt;/em&gt; (&lt;a href=&#34;https://godoc.org/github.com/getkin/kin-openapi/openapi3gen&#34;&gt;godoc&lt;/a&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Generates &lt;code&gt;*openapi3.Schema&lt;/code&gt; values for Go types.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Some recipes&lt;/h1&gt; &#xA;&lt;h2&gt;Validating an OpenAPI document&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go run github.com/getkin/kin-openapi/cmd/validate@latest [--defaults] [--examples] [--ext] [--patterns] -- &amp;lt;local YAML or JSON file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loading OpenAPI document&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;openapi3.Loader&lt;/code&gt;, which resolves all references:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;doc, err := openapi3.NewLoader().LoadFromFile(&#34;swagger.json&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting OpenAPI operation that matches request&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;loader := openapi3.NewLoader()&#xA;doc, _ := loader.LoadFromData([]byte(`...`))&#xA;_ := doc.Validate(loader.Context)&#xA;router, _ := gorillamux.NewRouter(doc)&#xA;route, pathParams, _ := router.FindRoute(httpRequest)&#xA;// Do something with route.Operation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validating HTTP requests/responses&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;net/http&#34;&#xA;&#xA;&#x9;&#34;github.com/getkin/kin-openapi/openapi3&#34;&#xA;&#x9;&#34;github.com/getkin/kin-openapi/openapi3filter&#34;&#xA;&#x9;&#34;github.com/getkin/kin-openapi/routers/gorillamux&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;ctx := context.Background()&#xA;&#x9;loader := &amp;amp;openapi3.Loader{Context: ctx, IsExternalRefsAllowed: true}&#xA;&#x9;doc, _ := loader.LoadFromFile(&#34;.../My-OpenAPIv3-API.yml&#34;)&#xA;&#x9;// Validate document&#xA;&#x9;_ := doc.Validate(ctx)&#xA;&#x9;router, _ := gorillamux.NewRouter(doc)&#xA;&#x9;httpReq, _ := http.NewRequest(http.MethodGet, &#34;/items&#34;, nil)&#xA;&#xA;&#x9;// Find route&#xA;&#x9;route, pathParams, _ := router.FindRoute(httpReq)&#xA;&#xA;&#x9;// Validate request&#xA;&#x9;requestValidationInput := &amp;amp;openapi3filter.RequestValidationInput{&#xA;&#x9;&#x9;Request:    httpReq,&#xA;&#x9;&#x9;PathParams: pathParams,&#xA;&#x9;&#x9;Route:      route,&#xA;&#x9;}&#xA;&#x9;_ := openapi3filter.ValidateRequest(ctx, requestValidationInput)&#xA;&#xA;&#x9;// Handle that request&#xA;&#x9;// --&amp;gt; YOUR CODE GOES HERE &amp;lt;--&#xA;&#x9;responseHeaders := http.Header{&#34;Content-Type&#34;: []string{&#34;application/json&#34;}}&#xA;&#x9;responseCode := 200&#xA;&#x9;responseBody := []byte(`{}`)&#xA;&#xA;&#x9;// Validate response&#xA;&#x9;responseValidationInput := &amp;amp;openapi3filter.ResponseValidationInput{&#xA;&#x9;&#x9;RequestValidationInput: requestValidationInput,&#xA;&#x9;&#x9;Status:                 responseCode,&#xA;&#x9;&#x9;Header:                 responseHeaders,&#xA;&#x9;}&#xA;&#x9;responseValidationInput.SetBodyBytes(responseBody)&#xA;&#x9;_ := openapi3filter.ValidateResponse(ctx, responseValidationInput)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom content type for body of HTTP request/response&lt;/h2&gt; &#xA;&lt;p&gt;By default, the library parses a body of HTTP request and response if it has one of the next content types: &lt;code&gt;&#34;text/plain&#34;&lt;/code&gt; or &lt;code&gt;&#34;application/json&#34;&lt;/code&gt;. To support other content types you must register decoders for them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;// ...&#xA;&#xA;&#x9;// Register a body&#39;s decoder for content type &#34;application/xml&#34;.&#xA;&#x9;openapi3filter.RegisterBodyDecoder(&#34;application/xml&#34;, xmlBodyDecoder)&#xA;&#xA;&#x9;// Now you can validate HTTP request that contains a body with content type &#34;application/xml&#34;.&#xA;&#x9;requestValidationInput := &amp;amp;openapi3filter.RequestValidationInput{&#xA;&#x9;&#x9;Request:    httpReq,&#xA;&#x9;&#x9;PathParams: pathParams,&#xA;&#x9;&#x9;Route:      route,&#xA;&#x9;}&#xA;&#x9;if err := openapi3filter.ValidateRequest(ctx, requestValidationInput); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// ...&#xA;&#xA;&#x9;// And you can validate HTTP response that contains a body with content type &#34;application/xml&#34;.&#xA;&#x9;if err := openapi3filter.ValidateResponse(ctx, responseValidationInput); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;}&#xA;&#xA;func xmlBodyDecoder(body io.Reader, h http.Header, schema *openapi3.SchemaRef, encFn openapi3filter.EncodingFn) (decoded interface{}, err error) {&#xA;&#x9;// Decode body to a primitive, []inteface{}, or map[string]interface{}.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom function to check uniqueness of array items&lt;/h2&gt; &#xA;&lt;p&gt;By defaut, the library check unique items by below predefined function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func isSliceOfUniqueItems(xs []interface{}) bool {&#xA;&#x9;s := len(xs)&#xA;&#x9;m := make(map[string]struct{}, s)&#xA;&#x9;for _, x := range xs {&#xA;&#x9;&#x9;key, _ := json.Marshal(&amp;amp;x)&#xA;&#x9;&#x9;m[string(key)] = struct{}{}&#xA;&#x9;}&#xA;&#x9;return s == len(m)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the predefined function using &lt;code&gt;json.Marshal&lt;/code&gt; to generate a string can be used as a map key which is to support check the uniqueness of an array when the array items are objects or arrays. You can register you own function according to your input data to get better performance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;// ...&#xA;&#xA;&#x9;// Register a customized function used to check uniqueness of array.&#xA;&#x9;openapi3.RegisterArrayUniqueItemsChecker(arrayUniqueItemsChecker)&#xA;&#xA;&#x9;// ... other validate codes&#xA;}&#xA;&#xA;func arrayUniqueItemsChecker(items []interface{}) bool {&#xA;&#x9;// Check the uniqueness of the input slice&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom function to change schema error messages&lt;/h2&gt; &#xA;&lt;p&gt;By default, the error message returned when validating a value includes the error reason, the schema, and the input value.&lt;/p&gt; &#xA;&lt;p&gt;For example, given the following schema:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;type&#34;: &#34;string&#34;,&#xA;  &#34;allOf&#34;: [&#xA;    { &#34;pattern&#34;: &#34;[A-Z]&#34; },&#xA;    { &#34;pattern&#34;: &#34;[a-z]&#34; },&#xA;    { &#34;pattern&#34;: &#34;[0-9]&#34; },&#xA;    { &#34;pattern&#34;: &#34;[!@#$%^&amp;amp;*()_+=-?~]&#34; }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Passing the input value &lt;code&gt;&#34;secret&#34;&lt;/code&gt; to this schema will produce the following error message:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;string doesn&#39;t match the regular expression &#34;[A-Z]&#34;&#xA;Schema:&#xA;  {&#xA;    &#34;pattern&#34;: &#34;[A-Z]&#34;&#xA;  }&#xA;&#xA;Value:&#xA;  &#34;secret&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Including the original value in the error message can be helpful for debugging, but it may not be appropriate for sensitive information such as secrets.&lt;/p&gt; &#xA;&lt;p&gt;To disable the extra details in the schema error message, you can set the &lt;code&gt;openapi3.SchemaErrorDetailsDisabled&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {&#xA;&#x9;// ...&#xA;&#xA;&#x9;// Disable schema error detailed error messages&#xA;&#x9;openapi3.SchemaErrorDetailsDisabled = true&#xA;&#xA;&#x9;// ... other validate codes&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will shorten the error message to present only the reason:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;string doesn&#39;t match the regular expression &#34;[A-Z]&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more fine-grained control over the error message, you can pass a custom &lt;code&gt;openapi3filter.Options&lt;/code&gt; object to &lt;code&gt;openapi3filter.RequestValidationInput&lt;/code&gt; that includes a &lt;code&gt;openapi3filter.CustomSchemaErrorFunc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func validationOptions() *openapi3filter.Options {&#xA;&#x9;options := openapi3filter.DefaultOptions&#xA;&#x9;options.WithCustomSchemaErrorFunc(safeErrorMessage)&#xA;&#x9;return options&#xA;}&#xA;&#xA;func safeErrorMessage(err *openapi3.SchemaError) string {&#xA;&#x9;return err.Reason&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will change the schema validation errors to return only the &lt;code&gt;Reason&lt;/code&gt; field, which is guaranteed to not include the original value.&lt;/p&gt; &#xA;&lt;h2&gt;Sub-v0 breaking API changes&lt;/h2&gt; &#xA;&lt;h3&gt;v0.113.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The string format &lt;code&gt;email&lt;/code&gt; has been removed by default. To use it please call &lt;code&gt;openapi3.DefineStringFormat(&#34;email&#34;, openapi3.FormatOfStringForEmail)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Field &lt;code&gt;openapi3.T.Components&lt;/code&gt; is now a pointer.&lt;/li&gt; &#xA; &lt;li&gt;Fields &lt;code&gt;openapi3.Schema.AdditionalProperties&lt;/code&gt; and &lt;code&gt;openapi3.Schema.AdditionalPropertiesAllowed&lt;/code&gt; are replaced by &lt;code&gt;openapi3.Schema.AdditionalProperties.Schema&lt;/code&gt; and &lt;code&gt;openapi3.Schema.AdditionalProperties.Has&lt;/code&gt; respectively.&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;openapi3.ExtensionProps&lt;/code&gt; is now just &lt;code&gt;map[string]interface{}&lt;/code&gt; and extensions are accessible through the &lt;code&gt;Extensions&lt;/code&gt; field.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v0.112.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(openapi3.ValidationOptions).ExamplesValidationDisabled&lt;/code&gt; has been unexported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(openapi3.ValidationOptions).SchemaFormatValidationEnabled&lt;/code&gt; has been unexported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(openapi3.ValidationOptions).SchemaPatternValidationDisabled&lt;/code&gt; has been unexported.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v0.111.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changed &lt;code&gt;func (*_) Validate(ctx context.Context) error&lt;/code&gt; to &lt;code&gt;func (*_) Validate(ctx context.Context, opts ...ValidationOption) error&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openapi3.WithValidationOptions(ctx context.Context, opts *ValidationOptions) context.Context&lt;/code&gt; prototype changed to &lt;code&gt;openapi3.WithValidationOptions(ctx context.Context, opts ...ValidationOption) context.Context&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v0.101.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;openapi3.SchemaFormatValidationDisabled&lt;/code&gt; has been removed in favour of an option &lt;code&gt;openapi3.EnableSchemaFormatValidation()&lt;/code&gt; passed to &lt;code&gt;openapi3.T.Validate&lt;/code&gt;. The default behaviour is also now to not validate formats, as the OpenAPI spec mentions the &lt;code&gt;format&lt;/code&gt; is an open value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v0.84.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The prototype of &lt;code&gt;openapi3gen.NewSchemaRefForValue&lt;/code&gt; changed: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It no longer returns a map but that is still accessible under the field &lt;code&gt;(*Generator).SchemaRefs&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;It now takes in an additional argument (basically &lt;code&gt;doc.Components.Schemas&lt;/code&gt;) which gets written to so &lt;code&gt;$ref&lt;/code&gt; cycles can be properly handled.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v0.61.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi2.Swagger&lt;/code&gt; to &lt;code&gt;openapi2.T&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi2conv.FromV3Swagger&lt;/code&gt; to &lt;code&gt;openapi2conv.FromV3&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi2conv.ToV3Swagger&lt;/code&gt; to &lt;code&gt;openapi2conv.ToV3&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi3.LoadSwaggerFromData&lt;/code&gt; to &lt;code&gt;openapi3.LoadFromData&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi3.LoadSwaggerFromDataWithPath&lt;/code&gt; to &lt;code&gt;openapi3.LoadFromDataWithPath&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi3.LoadSwaggerFromFile&lt;/code&gt; to &lt;code&gt;openapi3.LoadFromFile&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi3.LoadSwaggerFromURI&lt;/code&gt; to &lt;code&gt;openapi3.LoadFromURI&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi3.NewSwaggerLoader&lt;/code&gt; to &lt;code&gt;openapi3.NewLoader&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi3.Swagger&lt;/code&gt; to &lt;code&gt;openapi3.T&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi3.SwaggerLoader&lt;/code&gt; to &lt;code&gt;openapi3.Loader&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;openapi3filter.ValidationHandler.SwaggerFile&lt;/code&gt; to &lt;code&gt;openapi3filter.ValidationHandler.File&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Renamed &lt;code&gt;routers.Route.Swagger&lt;/code&gt; to &lt;code&gt;routers.Route.Spec&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v0.51.0&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type &lt;code&gt;openapi3filter.Route&lt;/code&gt; moved to &lt;code&gt;routers&lt;/code&gt; (and &lt;code&gt;Route.Handler&lt;/code&gt; was dropped. See &lt;a href=&#34;https://github.com/getkin/kin-openapi/issues/329&#34;&gt;https://github.com/getkin/kin-openapi/issues/329&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Type &lt;code&gt;openapi3filter.RouteError&lt;/code&gt; moved to &lt;code&gt;routers&lt;/code&gt; (so did &lt;code&gt;ErrPathNotFound&lt;/code&gt; and &lt;code&gt;ErrMethodNotAllowed&lt;/code&gt; which are now &lt;code&gt;RouteError&lt;/code&gt;s)&lt;/li&gt; &#xA; &lt;li&gt;Routers&#39; &lt;code&gt;FindRoute(...)&lt;/code&gt; method now takes only one argument: &lt;code&gt;*http.Request&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;getkin/kin-openapi/openapi3filter.Router&lt;/code&gt; moved to &lt;code&gt;getkin/kin-openapi/routers/legacy&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openapi3filter.NewRouter()&lt;/code&gt; and its related &lt;code&gt;WithSwaggerFromFile(string)&lt;/code&gt;, &lt;code&gt;WithSwagger(*openapi3.Swagger)&lt;/code&gt;, &lt;code&gt;AddSwaggerFromFile(string)&lt;/code&gt; and &lt;code&gt;AddSwagger(*openapi3.Swagger)&lt;/code&gt; are all replaced with a single &lt;code&gt;&amp;lt;router package&amp;gt;.NewRouter(*openapi3.Swagger)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NOTE: the &lt;code&gt;NewRouter(doc)&lt;/code&gt; call now requires that the user ensures &lt;code&gt;doc&lt;/code&gt; is valid (&lt;code&gt;doc.Validate() != nil&lt;/code&gt;). This used to be asserted.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;v0.47.0&lt;/h3&gt; &#xA;&lt;p&gt;Field &lt;code&gt;(*openapi3.SwaggerLoader).LoadSwaggerFromURIFunc&lt;/code&gt; of type &lt;code&gt;func(*openapi3.SwaggerLoader, *url.URL) (*openapi3.Swagger, error)&lt;/code&gt; was removed after the addition of the field &lt;code&gt;(*openapi3.SwaggerLoader).ReadFromURIFunc&lt;/code&gt; of type &lt;code&gt;func(*openapi3.SwaggerLoader, *url.URL) ([]byte, error)&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pressly/goose</title>
    <updated>2023-01-27T01:35:12Z</updated>
    <id>tag:github.com,2023-01-27:/pressly/goose</id>
    <link href="https://github.com/pressly/goose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A database migration tool. Supports SQL migrations and Go functions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;goose &lt;a href=&#34;https://github.com/pressly/goose/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/pressly/goose/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Goose CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/pressly/goose/v3&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/pressly/goose/v3.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/pressly/goose/master/assets/goose_logo.png&#34; width=&#34;125&#34; &#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Goose is a database migration tool. Manage your database schema by creating incremental SQL changes or Go functions.&lt;/p&gt; &#xA;&lt;p&gt;Starting with &lt;a href=&#34;https://github.com/pressly/goose/releases/tag/v3.0.0&#34;&gt;v3.0.0&lt;/a&gt; this project adds Go module support, but maintains backwards compatibility with older &lt;code&gt;v2.x.y&lt;/code&gt; tags.&lt;/p&gt; &#xA;&lt;p&gt;Goose supports &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/master/#embedded-sql-migrations&#34;&gt;embedding SQL migrations&lt;/a&gt;, which means you&#39;ll need go1.16 and up. If using go1.15 or lower, then pin &lt;a href=&#34;https://github.com/pressly/goose/releases/tag/v3.0.1&#34;&gt;v3.0.1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Goals of this fork&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;github.com/pressly/goose&lt;/code&gt; is a fork of &lt;code&gt;bitbucket.org/liamstask/goose&lt;/code&gt; with the following changes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No config files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/master/cmd/goose/main.go&#34;&gt;Default goose binary&lt;/a&gt; can migrate SQL files only&lt;/li&gt; &#xA; &lt;li&gt;Go migrations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;We don&#39;t &lt;code&gt;go build&lt;/code&gt; Go migrations functions on-the-fly from within the goose binary&lt;/li&gt; &#xA;   &lt;li&gt;Instead, we let you &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/master/examples/go-migrations&#34;&gt;create your own custom goose binary&lt;/a&gt;, register your Go migration functions explicitly and run complex migrations with your own &lt;code&gt;*sql.DB&lt;/code&gt; connection&lt;/li&gt; &#xA;   &lt;li&gt;Go migration functions let you run your code within an SQL transaction, if you use the &lt;code&gt;*sql.Tx&lt;/code&gt; argument&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The goose pkg is decoupled from the binary: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;goose pkg doesn&#39;t register any SQL drivers anymore, thus no driver &lt;code&gt;panic()&lt;/code&gt; conflict within your codebase!&lt;/li&gt; &#xA;   &lt;li&gt;goose pkg doesn&#39;t have any vendor dependencies anymore&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;We use timestamped migrations by default but recommend a hybrid approach of using timestamps in the development process and sequential versions in production.&lt;/li&gt; &#xA; &lt;li&gt;Supports missing (out-of-order) migrations with the &lt;code&gt;-allow-missing&lt;/code&gt; flag, or if using as a library supply the functional option &lt;code&gt;goose.WithAllowMissing()&lt;/code&gt; to Up, UpTo or UpByOne.&lt;/li&gt; &#xA; &lt;li&gt;Supports applying ad-hoc migrations without tracking them in the schema table. Useful for seeding a database after migrations have been applied. Use &lt;code&gt;-no-versioning&lt;/code&gt; flag or the functional option &lt;code&gt;goose.WithNoVersioning()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go install github.com/pressly/goose/v3/cmd/goose@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the &lt;code&gt;goose&lt;/code&gt; binary to your &lt;code&gt;$GOPATH/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;For a lite version of the binary without DB connection dependent commands, use the exclusive build tags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ go build -tags=&#39;no_postgres no_mysql no_sqlite3&#39; -o goose ./cmd/goose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For macOS users &lt;code&gt;goose&lt;/code&gt; is available as a &lt;a href=&#34;https://formulae.brew.sh/formula/goose#default&#34;&gt;Homebrew Formulae&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install goose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the docs for more &lt;a href=&#34;https://pressly.github.io/goose/installation/&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: goose [OPTIONS] DRIVER DBSTRING COMMAND&#xA;&#xA;Drivers:&#xA;    postgres&#xA;    mysql&#xA;    sqlite3&#xA;    mssql&#xA;    redshift&#xA;    tidb&#xA;    clickhouse&#xA;    vertica&#xA;&#xA;Examples:&#xA;    goose sqlite3 ./foo.db status&#xA;    goose sqlite3 ./foo.db create init sql&#xA;    goose sqlite3 ./foo.db create add_some_column sql&#xA;    goose sqlite3 ./foo.db create fetch_user_data go&#xA;    goose sqlite3 ./foo.db up&#xA;&#xA;    goose postgres &#34;user=postgres password=postgres dbname=postgres sslmode=disable&#34; status&#xA;    goose mysql &#34;user:password@/dbname?parseTime=true&#34; status&#xA;    goose redshift &#34;postgres://user:password@qwerty.us-east-1.redshift.amazonaws.com:5439/db&#34; status&#xA;    goose tidb &#34;user:password@/dbname?parseTime=true&#34; status&#xA;    goose mssql &#34;sqlserver://user:password@dbname:1433?database=master&#34; status&#xA;    goose clickhouse &#34;tcp://127.0.0.1:9000&#34; status&#xA;    goose vertica &#34;vertica://user:password@localhost:5433/dbname?connection_load_balance=1&#34; status&#xA;&#xA;Options:&#xA;&#xA;  -allow-missing&#xA;    &#x9;applies missing (out-of-order) migrations&#xA;  -certfile string&#xA;    &#x9;file path to root CA&#39;s certificates in pem format (only support on mysql)&#xA;  -dir string&#xA;    &#x9;directory with migration files (default &#34;.&#34;)&#xA;  -h&#x9;print help&#xA;  -no-versioning&#xA;    &#x9;apply migration commands with no versioning, in file order, from directory pointed to&#xA;  -s&#x9;use sequential numbering for new migrations&#xA;  -ssl-cert string&#xA;    &#x9;file path to SSL certificates in pem format (only support on mysql)&#xA;  -ssl-key string&#xA;    &#x9;file path to SSL key in pem format (only support on mysql)&#xA;  -table string&#xA;    &#x9;migrations table name (default &#34;goose_db_version&#34;)&#xA;  -v&#x9;enable verbose mode&#xA;  -version&#xA;    &#x9;print version&#xA;&#xA;Commands:&#xA;    up                   Migrate the DB to the most recent version available&#xA;    up-by-one            Migrate the DB up by 1&#xA;    up-to VERSION        Migrate the DB to a specific VERSION&#xA;    down                 Roll back the version by 1&#xA;    down-to VERSION      Roll back to a specific VERSION&#xA;    redo                 Re-run the latest migration&#xA;    reset                Roll back all migrations&#xA;    status               Dump the migration status for the current DB&#xA;    version              Print the current version of the database&#xA;    create NAME [sql|go] Creates new migration file with the current timestamp&#xA;    fix                  Apply sequential ordering to migrations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;create&lt;/h2&gt; &#xA;&lt;p&gt;Create a new SQL migration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose create add_some_column sql&#xA;$ Created new file: 20170506082420_add_some_column.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit the newly created file to define the behavior of your migration.&lt;/p&gt; &#xA;&lt;p&gt;You can also create a Go migration, if you then invoke it with &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/master/#go-migrations&#34;&gt;your own goose binary&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose create fetch_user_data go&#xA;$ Created new file: 20170506082421_fetch_user_data.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;up&lt;/h2&gt; &#xA;&lt;p&gt;Apply all available migrations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose up&#xA;$ OK    001_basics.sql&#xA;$ OK    002_next.sql&#xA;$ OK    003_and_again.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;up-to&lt;/h2&gt; &#xA;&lt;p&gt;Migrate up to a specific version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose up-to 20170506082420&#xA;$ OK    20170506082420_create_table.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;up-by-one&lt;/h2&gt; &#xA;&lt;p&gt;Migrate up a single migration from the current version&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose up-by-one&#xA;$ OK    20170614145246_change_type.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;down&lt;/h2&gt; &#xA;&lt;p&gt;Roll back a single migration from the current version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose down&#xA;$ OK    003_and_again.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;down-to&lt;/h2&gt; &#xA;&lt;p&gt;Roll back migrations to a specific version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose down-to 20170506082527&#xA;$ OK    20170506082527_alter_column.sql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;redo&lt;/h2&gt; &#xA;&lt;p&gt;Roll back the most recently applied migration, then run it again.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose redo&#xA;$ OK    003_and_again.go&#xA;$ OK    003_and_again.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;status&lt;/h2&gt; &#xA;&lt;p&gt;Print the status of all migrations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose status&#xA;$   Applied At                  Migration&#xA;$   =======================================&#xA;$   Sun Jan  6 11:25:03 2013 -- 001_basics.sql&#xA;$   Sun Jan  6 11:25:03 2013 -- 002_next.sql&#xA;$   Pending                  -- 003_and_again.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: for MySQL &lt;a href=&#34;https://github.com/go-sql-driver/mysql#parsetime&#34;&gt;parseTime flag&lt;/a&gt; must be enabled.&lt;/p&gt; &#xA;&lt;p&gt;Note: for MySQL &lt;a href=&#34;https://dev.mysql.com/doc/internals/en/multi-statement.html&#34;&gt;&lt;code&gt;multiStatements&lt;/code&gt;&lt;/a&gt; must be enabled. This is required when writing multiple queries separated by &#39;;&#39; characters in a single sql file.&lt;/p&gt; &#xA;&lt;h2&gt;version&lt;/h2&gt; &#xA;&lt;p&gt;Print the current version of the database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ goose version&#xA;$ goose: version 002&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Migrations&lt;/h1&gt; &#xA;&lt;p&gt;goose supports migrations written in SQL or in Go.&lt;/p&gt; &#xA;&lt;h2&gt;SQL Migrations&lt;/h2&gt; &#xA;&lt;p&gt;A sample SQL migration looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- +goose Up&#xA;CREATE TABLE post (&#xA;    id int NOT NULL,&#xA;    title text,&#xA;    body text,&#xA;    PRIMARY KEY(id)&#xA;);&#xA;&#xA;-- +goose Down&#xA;DROP TABLE post;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each migration file must have exactly one &lt;code&gt;-- +goose Up&lt;/code&gt; annotation. The &lt;code&gt;-- +goose Down&lt;/code&gt; annotation is optional. If the file has both annotations, then the &lt;code&gt;-- +goose Up&lt;/code&gt; annotation &lt;strong&gt;must&lt;/strong&gt; come first.&lt;/p&gt; &#xA;&lt;p&gt;Notice the annotations in the comments. Any statements following &lt;code&gt;-- +goose Up&lt;/code&gt; will be executed as part of a forward migration, and any statements following &lt;code&gt;-- +goose Down&lt;/code&gt; will be executed as part of a rollback.&lt;/p&gt; &#xA;&lt;p&gt;By default, all migrations are run within a transaction. Some statements like &lt;code&gt;CREATE DATABASE&lt;/code&gt;, however, cannot be run within a transaction. You may optionally add &lt;code&gt;-- +goose NO TRANSACTION&lt;/code&gt; to the top of your migration file in order to skip transactions within that specific migration file. Both Up and Down migrations within this file will be run without transactions.&lt;/p&gt; &#xA;&lt;p&gt;By default, SQL statements are delimited by semicolons - in fact, query statements must end with a semicolon to be properly recognized by goose.&lt;/p&gt; &#xA;&lt;p&gt;More complex statements (PL/pgSQL) that have semicolons within them must be annotated with &lt;code&gt;-- +goose StatementBegin&lt;/code&gt; and &lt;code&gt;-- +goose StatementEnd&lt;/code&gt; to be properly recognized. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- +goose Up&#xA;-- +goose StatementBegin&#xA;CREATE OR REPLACE FUNCTION histories_partition_creation( DATE, DATE )&#xA;returns void AS $$&#xA;DECLARE&#xA;  create_query text;&#xA;BEGIN&#xA;  FOR create_query IN SELECT&#xA;      &#39;CREATE TABLE IF NOT EXISTS histories_&#39;&#xA;      || TO_CHAR( d, &#39;YYYY_MM&#39; )&#xA;      || &#39; ( CHECK( created_at &amp;gt;= timestamp &#39;&#39;&#39;&#xA;      || TO_CHAR( d, &#39;YYYY-MM-DD 00:00:00&#39; )&#xA;      || &#39;&#39;&#39; AND created_at &amp;lt; timestamp &#39;&#39;&#39;&#xA;      || TO_CHAR( d + INTERVAL &#39;1 month&#39;, &#39;YYYY-MM-DD 00:00:00&#39; )&#xA;      || &#39;&#39;&#39; ) ) inherits ( histories );&#39;&#xA;    FROM generate_series( $1, $2, &#39;1 month&#39; ) AS d&#xA;  LOOP&#xA;    EXECUTE create_query;&#xA;  END LOOP;  -- LOOP END&#xA;END;         -- FUNCTION END&#xA;$$&#xA;language plpgsql;&#xA;-- +goose StatementEnd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Embedded sql migrations&lt;/h2&gt; &#xA;&lt;p&gt;Go 1.16 introduced new feature: &lt;a href=&#34;https://pkg.go.dev/embed/&#34;&gt;compile-time embedding&lt;/a&gt; files into binary and corresponding &lt;a href=&#34;https://pkg.go.dev/io/fs/&#34;&gt;filesystem abstraction&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This feature can be used only for applying existing migrations. Modifying operations such as &lt;code&gt;fix&lt;/code&gt; and &lt;code&gt;create&lt;/code&gt; will continue to operate on OS filesystem even if using embedded files. This is expected behaviour because &lt;code&gt;io/fs&lt;/code&gt; interfaces allows read-only access.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to configure the correct SQL dialect, see &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/master/dialect.go&#34;&gt;dialect.go&lt;/a&gt; for supported SQL dialects.&lt;/p&gt; &#xA;&lt;p&gt;Example usage, assuming that SQL migrations are placed in the &lt;code&gt;migrations&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;    &#34;database/sql&#34;&#xA;    &#34;embed&#34;&#xA;&#xA;    &#34;github.com/pressly/goose/v3&#34;&#xA;)&#xA;&#xA;//go:embed migrations/*.sql&#xA;var embedMigrations embed.FS&#xA;&#xA;func main() {&#xA;    var db *sql.DB&#xA;    // setup database&#xA;&#xA;    goose.SetBaseFS(embedMigrations)&#xA;&#xA;    if err := goose.SetDialect(&#34;postgres&#34;); err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    if err := goose.Up(db, &#34;migrations&#34;); err != nil {&#xA;        panic(err)&#xA;    }&#xA;&#xA;    // run app&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that we pass &lt;code&gt;&#34;migrations&#34;&lt;/code&gt; as directory argument in &lt;code&gt;Up&lt;/code&gt; because embedding saves directory structure.&lt;/p&gt; &#xA;&lt;h2&gt;Go Migrations&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create your own goose binary, see &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/master/examples/go-migrations&#34;&gt;example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;github.com/pressly/goose&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Register your migration functions&lt;/li&gt; &#xA; &lt;li&gt;Run goose command, ie. &lt;code&gt;goose.Up(db *sql.DB, dir string)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/master/examples/go-migrations/00002_rename_root.go&#34;&gt;sample Go migration 00002_users_add_email.go file&lt;/a&gt; looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package migrations&#xA;&#xA;import (&#xA;&#x9;&#34;database/sql&#34;&#xA;&#xA;&#x9;&#34;github.com/pressly/goose/v3&#34;&#xA;)&#xA;&#xA;func init() {&#xA;&#x9;goose.AddMigration(Up, Down)&#xA;}&#xA;&#xA;func Up(tx *sql.Tx) error {&#xA;&#x9;_, err := tx.Exec(&#34;UPDATE users SET username=&#39;admin&#39; WHERE username=&#39;root&#39;;&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&#xA;func Down(tx *sql.Tx) error {&#xA;&#x9;_, err := tx.Exec(&#34;UPDATE users SET username=&#39;root&#39; WHERE username=&#39;admin&#39;;&#34;)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;return nil&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;This can be used to build local &lt;code&gt;goose&lt;/code&gt; binaries without having the latest Go version installed locally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DOCKER_BUILDKIT=1  docker build -f Dockerfile.local --output bin .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Hybrid Versioning&lt;/h1&gt; &#xA;&lt;p&gt;Please, read the &lt;a href=&#34;https://github.com/pressly/goose/issues/63#issuecomment-428681694&#34;&gt;versioning problem&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;p&gt;By default, if you attempt to apply missing (out-of-order) migrations &lt;code&gt;goose&lt;/code&gt; will raise an error. However, If you want to apply these missing migrations pass goose the &lt;code&gt;-allow-missing&lt;/code&gt; flag, or if using as a library supply the functional option &lt;code&gt;goose.WithAllowMissing()&lt;/code&gt; to Up, UpTo or UpByOne.&lt;/p&gt; &#xA;&lt;p&gt;However, we strongly recommend adopting a hybrid versioning approach, using both timestamps and sequential numbers. Migrations created during the development process are timestamped and sequential versions are ran on production. We believe this method will prevent the problem of conflicting versions when writing software in a team environment.&lt;/p&gt; &#xA;&lt;p&gt;To help you adopt this approach, &lt;code&gt;create&lt;/code&gt; will use the current timestamp as the migration version. When you&#39;re ready to deploy your migrations in a production environment, we also provide a helpful &lt;code&gt;fix&lt;/code&gt; command to convert your migrations into sequential order, while preserving the timestamp ordering. We recommend running &lt;code&gt;fix&lt;/code&gt; in the CI pipeline, and only when the migrations are ready for production.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;The gopher mascot was designed by &lt;a href=&#34;https://reneefrench.blogspot.com/&#34;&gt;Renée French&lt;/a&gt; / &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;CC 3.0.&lt;/a&gt; For more info check out the &lt;a href=&#34;https://go.dev/blog/gopher&#34;&gt;Go Blog&lt;/a&gt;. Adapted by Ellen.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under &lt;a href=&#34;https://raw.githubusercontent.com/pressly/goose/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>