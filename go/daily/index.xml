<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-18T01:29:28Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scratchdata/scratchdata</title>
    <updated>2024-03-18T01:29:28Z</updated>
    <id>tag:github.com,2024-03-18:/scratchdata/scratchdata</id>
    <link href="https://github.com/scratchdata/scratchdata" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scratch is an open-source alternative to BigQuery, Redshift, and Snowflake. Runs on Clickhouse.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Scratch Data&lt;/h1&gt; &#xA;&lt;p&gt;Scratch Data is a wrapper that lets you stream data into and out of your analytics database. It takes arbitrary JSON as input and lets you perform analytical queries.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;1. Run the server&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git@github.com:scratchdata/scratchdata.git&#xA;$ cd scratchdata&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the service:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run . &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With no configuration, this will automatically set up a local DuckDB database ready for reading and writing.&lt;/p&gt; &#xA;&lt;h3&gt;Run without default config&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;config.yaml&lt;/code&gt; file with all of your settings and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run . config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Insert JSON data&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -X POST &#34;http://localhost:8080/api/data/insert/events?api_key=local&#34; \&#xA;    --json &#39;{&#34;user&#34;: &#34;alice&#34;, &#34;event&#34;: &#34;click&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &#34;events&#34; table and columns are automatically created.&lt;/p&gt; &#xA;&lt;h3&gt;3. Query&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -G &#34;http://localhost:8080/api/data/query&#34; \&#xA;     --data-urlencode=&#34;api_key=local&#34; \&#xA;     --data-urlencode=&#34;query=select * from events&#34; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;To see the full list of options, look at: &lt;a href=&#34;https://docs.scratchdata.com&#34;&gt;https://docs.scratchdata.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>missingstudio/gateway</title>
    <updated>2024-03-18T01:29:28Z</updated>
    <id>tag:github.com,2024-03-18:/missingstudio/gateway</id>
    <link href="https://github.com/missingstudio/gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåà A Reliable AI Gateway - Core infrastructure stack for building your AI workforce&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/missingstudio/gateway/main/assets/gateway.svg?sanitize=true&#34; alt=&#34;Gateway&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/missingstudio/gateway/main/assets/github.png&#34; alt=&#34;Missing studio&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;üåà A Robust Open Source &lt;a href=&#34;https://www.missing.studio&#34;&gt;AI studio&lt;/a&gt;. A Universal API for inferencing 100+ LLMs(OpenAI, Azure, Cohere, Anthropic, HuggingFace, Replicate, Stable Diffusion).&lt;/p&gt; &#xA;&lt;h2&gt;Supported Providers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Provider&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Provider Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Support&lt;/th&gt; &#xA;   &lt;th&gt;Supported Endpoints&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/missingstudio/gateway/main/assets/openai.png&#34; width=&#34;16&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OpenAI&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;openai&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/chat/completions&lt;/code&gt;, &lt;code&gt;/chat/completions:stream&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/missingstudio/gateway/main/assets/groq.svg?sanitize=true&#34; width=&#34;16&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Groq&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;groq&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/chat/completions&lt;/code&gt;, &lt;code&gt;/chat/completions:stream&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/missingstudio/gateway/main/assets/anyscale.png&#34; width=&#34;16&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyscale&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;anyscale&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/chat/completions&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/missingstudio/gateway/main/assets/deepinfra.jpeg&#34; width=&#34;16&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deepinfra&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;deepinfra&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/chat/completions&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/missingstudio/gateway/main/assets/togetherai.svg?sanitize=true&#34; width=&#34;16&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Together AI&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;togetherai&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/chat/completions&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Not supported (yet): images, audio, files, fine-tunes, moderations&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Run locally&lt;/h2&gt; &#xA;&lt;p&gt;Missing studio can be deployed in a variety of ways. It is deployable on bare metal, or in dockerized environments.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buf.build/docs/installation&#34;&gt;Buf CLI&lt;/a&gt; is required for building proto.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To start missing studio server, simply run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make compose-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Your AI Gateway is now running on &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; üí•&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Send a request using curl&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl \&#xA;--header &#34;Content-Type: application/json&#34; \&#xA;--header &#34;x-ms-provider: openai&#34; \&#xA;--header &#34;Authorization: Bearer {{OPENAI_API_KEY}}&#34; \&#xA;--data &#39;{&#34;model&#34;:&#34;gpt-3.5-turbo&#34;,&#34;messages&#34;:[{&#34;role&#34;:&#34;user&#34;,&#34;content&#34;:&#34;who are you?&#34;}]}&#39; \&#xA;http://localhost:8080/v1/chat/completions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Send a request using grpcurl&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grpcurl \&#xA;-d &#39;{&#34;model&#34;:&#34;gpt-3.5-turbo&#34;,&#34;messages&#34;:[{&#34;role&#34;:&#34;user&#34;,&#34;content&#34;:&#34;hi&#34;}]}&#39; \&#xA;-H &#39;x-ms-provider: openai&#39; \&#xA;-H &#39;Authorization: Bearer {{OPENAI_API_KEY}}&#39; \&#xA;-plaintext  localhost:8080  llm.v1.LLMService.ChatCompletions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üåê &lt;em&gt;Universal API&lt;/em&gt; - Call every LLM API like it&#39;s OpenAI&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;AI Gateway&lt;/em&gt; for Security, Reliability and Observability &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Load balancing across multiple provider and models&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Atomatic Retries with exponential backoff&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rate limiting&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Caching&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Fallbacks&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Monitoring&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Alerting&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Analytics&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;AI Studio&lt;/li&gt; &#xA; &lt;li&gt;AI Agents&lt;/li&gt; &#xA; &lt;li&gt;AI Workflow builder&lt;/li&gt; &#xA; &lt;li&gt;OSS AI Models Inferancing&lt;/li&gt; &#xA; &lt;li&gt;Serving model api at Scale on Kubernetes ü¶ÑÔ∏è&lt;/li&gt; &#xA; &lt;li&gt;Building dev tools (CLI, SDK, API Client)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü´∂ Contributions&lt;/h2&gt; &#xA;&lt;p&gt;AI studio is an open-source project, and contributions are welcome. If you want to contribute, you can create new features, fix bugs, or improve the infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s still very early days for this so your mileage will vary here and lots of things will break. But almost any contribution will be beneficial at this point. Check the &lt;a href=&#34;https://github.com/missingstudio/ai/issues&#34;&gt;current Issues&lt;/a&gt; to see where you can jump in!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve got an improvement, just send in a pull request!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;code&gt;git checkout -b my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -am &#39;feat(module): add some feature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;code&gt;git push origin my-new-feature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If you&#39;ve got feature ideas, simply &lt;a href=&#34;https://github.com/missingstudio/ai/issues/new&#34;&gt;open a new issues&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://github.com/missingstudio/ai/raw/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file in the repository for more information on how to contribute.&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/missingstudio/ai/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=missingstudio/studio&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AI Studio is &lt;a href=&#34;https://github.com/missingstudio/ai/raw/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt; licensed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hybridgroup/mechanoid</title>
    <updated>2024-03-18T01:29:28Z</updated>
    <id>tag:github.com,2024-03-18:/hybridgroup/mechanoid</id>
    <link href="https://github.com/hybridgroup/mechanoid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mechanoid is a framework for WebAssembly applications on embedded systems.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://mechanoid.io/images/logo-blue.png&#34; alt=&#34;Mechanoid&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Mechanoid is a framework for WebAssembly applications on embedded systems.&lt;/p&gt; &#xA;&lt;h2&gt;What is Mechanoid?&lt;/h2&gt; &#xA;&lt;p&gt;Mechanoid is an open source framework for building and running WebAssembly applications on small embedded systems. It is intended to make it easier to create applications that are secure and extendable, and take advantage of all of the latest developments in both WebAssembly and embedded development.&lt;/p&gt; &#xA;&lt;p&gt;Mechanoid includes a command line interface tool that helps you create, test, and run applications on either simulators or actual hardware, in part thanks to being written using &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; and &lt;a href=&#34;https://tinygo.org/&#34;&gt;TinyGo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why would you want to do this?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Devices that are extensible. Think app stores, downloadable add-ons, or end-user programmability.&lt;/li&gt; &#xA; &lt;li&gt;Environment is sandboxed, so bricking the device is less likely.&lt;/li&gt; &#xA; &lt;li&gt;Code you write being compiled to WASM is very compact.&lt;/li&gt; &#xA; &lt;li&gt;Devices that need a reliable way to update them.&lt;/li&gt; &#xA; &lt;li&gt;OTA updates via slow/high latency are more viable.&lt;/li&gt; &#xA; &lt;li&gt;Specific APIs can be provided by the host application to guest modules, so application-specific code matches the kind of code you are trying to write. Games, industrial control systems.&lt;/li&gt; &#xA; &lt;li&gt;Develop code in Go/Rust/Zig or any language that can compile to WASM, and run it on the same hardware, using the same APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;a href=&#34;https://raw.githubusercontent.com/hybridgroup/mechanoid/main/cmd/mecha/README.md&#34;&gt;Mechanoid command line tool&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Use &lt;code&gt;go install&lt;/code&gt; to install the &lt;code&gt;mecha&lt;/code&gt; CLI&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/hybridgroup/mechanoid/cmd/mecha@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a new project&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mecha new example.com/myproject&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make something amazing!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example of an application built using Mechanoid.&lt;/p&gt; &#xA;&lt;p&gt;It consists of a host application that runs on a microcontroller, and a separate WebAssembly module that will be run by the host application on that same microcontroller.&lt;/p&gt; &#xA;&lt;p&gt;The host application loads the WASM and then executes it, sending the output to the serial interface on the board. This way we can see the output on your computer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR&#xA;    subgraph Computer&#xA;    end&#xA;    subgraph Microcontroller&#xA;        subgraph Application&#xA;            Pong&#xA;        end&#xA;        subgraph ping.wasm&#xA;            Ping&#xA;        end&#xA;        Ping--&amp;gt;Pong&#xA;        Application--&amp;gt;Ping&#xA;    end&#xA;    Application--Serial port--&amp;gt;Computer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is how you create it using Mechanoid:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mecha new project -template=simple example.com/myproject&#xA;cd myproject&#xA;mecha new module -template=ping ping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebAssembly guest program&lt;/h3&gt; &#xA;&lt;p&gt;This is the Go code for the &lt;code&gt;ping.wasm&lt;/code&gt; module. It exports a &lt;code&gt;ping&lt;/code&gt; function, that calls a function &lt;code&gt;pong&lt;/code&gt; that has been imported from the host application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//go:build tinygo&#xA;&#xA;package main&#xA;&#xA;//go:wasmimport hosted pong&#xA;func pong()&#xA;&#xA;//go:export ping&#xA;func ping() {&#xA; pong()&#xA;}&#xA;&#xA;func main() {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can compile this program to WASM using the &lt;code&gt;mecha build&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mecha build&#xA;Building module ping&#xA;   code    data     bss |   flash     ram&#xA;      9       0       0 |       9       0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mechanoid host application&lt;/h3&gt; &#xA;&lt;p&gt;This is the Go code for the Mechanoid host application that runs directly on the hardware. It loads the &lt;code&gt;ping.wasm&lt;/code&gt; WebAssembly module and then runs it by calling the module&#39;s &lt;code&gt;Ping()&lt;/code&gt; function. That &lt;code&gt;Ping()&lt;/code&gt; function will then call the host&#39;s exported &lt;code&gt;Pong()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;bytes&#34;&#xA;&#x9;_ &#34;embed&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/hybridgroup/mechanoid/engine&#34;&#xA;&#x9;&#34;github.com/hybridgroup/mechanoid/interp&#34;&#xA;&#x9;&#34;github.com/orsinium-labs/wypes&#34;&#xA;)&#xA;&#xA;//go:embed modules/ping.wasm&#xA;var wasmCode []byte&#xA;&#xA;func main() {&#xA;&#x9;time.Sleep(2 * time.Second)&#xA;&#xA;&#x9;println(&#34;Mechanoid engine starting...&#34;)&#xA;&#x9;eng := engine.NewEngine()&#xA;&#x9;eng.UseInterpreter(interp.NewInterpreter())&#xA;&#xA;&#x9;println(&#34;Initializing engine using interpreter&#34;, eng.Interpreter.Name())&#xA;&#x9;if err := eng.Init(); err != nil {&#xA;&#x9;&#x9;println(err.Error())&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;println(&#34;Defining host function...&#34;)&#xA;&#x9;modules := wypes.Modules{&#xA;&#x9;&#x9;&#34;hosted&#34;: wypes.Module{&#xA;&#x9;&#x9;&#x9;&#34;pong&#34;: wypes.H0(pongFunc),&#xA;&#x9;&#x9;},&#xA;&#x9;}&#xA;&#x9;if err := eng.Interpreter.SetModules(modules); err != nil {&#xA;&#x9;&#x9;println(err.Error())&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;println(&#34;Loading and running WASM code...&#34;)&#xA;&#x9;ins, err := eng.LoadAndRun(bytes.NewReader(wasmCode))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;println(err.Error())&#xA;&#x9;&#x9;return&#xA;&#x9;}&#xA;&#xA;&#x9;for {&#xA;&#x9;&#x9;println(&#34;Calling ping...&#34;)&#xA;&#x9;&#x9;if _, err := ins.Call(&#34;ping&#34;); err != nil {&#xA;&#x9;&#x9;&#x9;println(err.Error())&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;time.Sleep(1 * time.Second)&#xA;&#x9;}&#xA;}&#xA;&#xA;func pongFunc() wypes.Void {&#xA;&#x9;println(&#34;pong&#34;)&#xA;&#x9;return wypes.Void{}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can compile and flash the application and the WASM program onto an Adafruit PyBadge (an ARM 32-bit microcontroller with 192k of RAM) with the &lt;code&gt;mecha flash&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mecha flash -i wazero -m pybadge&#xA;Building module ping&#xA;Done.&#xA;   code    data     bss |   flash     ram&#xA;      9       0       0 |       9       0&#xA;Application built. Now flashing...&#xA;   code    data     bss |   flash     ram&#xA; 328988   66056    7112 |  395044   73168&#xA;&#xA;Connected to /dev/ttyACM0. Press Ctrl-C to exit.&#xA;Mechanoid engine starting...&#xA;Initializing engine using interpreter wazero&#xA;Defining host function...&#xA;Loading and running WASM code...&#xA;Calling ping...&#xA;pong&#xA;Calling ping...&#xA;pong&#xA;Calling ping...&#xA;pong&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are more examples available here: &lt;a href=&#34;https://github.com/hybridgroup/mechanoid-examples&#34;&gt;https://github.com/hybridgroup/mechanoid-examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/hybridgroup/mechanoid/main/ARCHITECTURE.md&#34;&gt;ARCHITECTURE.md&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Runtime Interpreters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/orsinium-forks/wazero&#34;&gt;wazero&lt;/a&gt; - requires the &lt;a href=&#34;https://github.com/orsinium-forks/wazero&#34;&gt;https://github.com/orsinium-forks/wazero&lt;/a&gt; fork&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hybridgroup/wasman&#34;&gt;wasman&lt;/a&gt; - requires the &lt;a href=&#34;https://github.com/hybridgroup/wasman&#34;&gt;https://github.com/hybridgroup/wasman&lt;/a&gt; fork&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Able to run small WASM modules designed for specific embedded runtime interfaces.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Hot loading/unloading of WASM modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Local storage system for WASM modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Allow the engine to be used/extended for different embedded application use cases, e.g. CLI, WASM4 runtime, others. - IN PROGRESS&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Configurable system to allow the bridge interface to host capabilities to be defined per application. - IN PROGRESS&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>