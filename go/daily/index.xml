<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-30T01:36:41Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dstotijn/hetty</title>
    <updated>2023-07-30T01:36:41Z</updated>
    <id>tag:github.com,2023-07-30:/dstotijn/hetty</id>
    <link href="https://github.com/dstotijn/hetty" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An HTTP toolkit for security research.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/983924/156430531-6193e187-7400-436b-81c6-f86862783ea5.svg#gh-light-mode-only&#34; width=&#34;240&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/983924/156430660-9d5bd555-dcfd-47e2-ba70-54294c20c1b4.svg#gh-dark-mode-only&#34; width=&#34;240&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dstotijn/hetty/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/dstotijn/hetty?color=25ae8f&#34; alt=&#34;Latest GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dstotijn/hetty/actions/workflows/build-test.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2Fdstotijn%2Fhetty%2Fbadge%3Fref%3Dmain&amp;amp;label=build&amp;amp;color=24ae8f&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/dstotijn/hetty/total?color=25ae8f&#34; alt=&#34;GitHub download count&#34;&gt; &lt;a href=&#34;https://github.com/dstotijn/hetty/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/dstotijn/hetty?color=25ae8f&#34; alt=&#34;GitHub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hetty.xyz/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/hetty-docs-25ae8f&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hetty&lt;/strong&gt; is an HTTP toolkit for security research. It aims to become an open source alternative to commercial software like Burp Suite Pro, with powerful features tailored to the needs of the infosec and bug bounty community.&lt;/p&gt; &#xA;&lt;img src=&#34;https://hetty.xyz/img/hero.png&#34; width=&#34;907&#34; alt=&#34;Hetty proxy logs (screenshot)&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Machine-in-the-middle (MITM) HTTP proxy, with logs and advanced search&lt;/li&gt; &#xA; &lt;li&gt;HTTP client for manually creating/editing requests, and replay proxied requests&lt;/li&gt; &#xA; &lt;li&gt;Intercept requests and responses for manual review (edit, send/receive, cancel)&lt;/li&gt; &#xA; &lt;li&gt;Scope support, to help keep work organized&lt;/li&gt; &#xA; &lt;li&gt;Easy-to-use web based admin interface&lt;/li&gt; &#xA; &lt;li&gt;Project based database storage, to help keep work organized&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;üë∑‚Äç‚ôÇÔ∏è Hetty is under active development. Check the &lt;a href=&#34;https://github.com/dstotijn/hetty/projects/1&#34;&gt;backlog&lt;/a&gt; for the current status.&lt;/p&gt; &#xA;&lt;p&gt;üì£ Are you pen testing professionaly in a team? I would love to hear your thoughts on tooling via &lt;a href=&#34;https://forms.gle/36jtgNc3TJ2imi5A8&#34;&gt;this 5 minute survey&lt;/a&gt;. Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;üí° The &lt;a href=&#34;https://hetty.xyz/docs/getting-started&#34;&gt;Getting started&lt;/a&gt; doc has more detailed install and usage instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;The quickest way to install and update Hetty is via a package manager:&lt;/p&gt; &#xA;&lt;h4&gt;macOS&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install hettysoft/tap/hetty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo snap install hetty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;scoop bucket add hettysoft https://github.com/hettysoft/scoop-bucket.git&#xA;scoop install hettysoft/hetty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, you can &lt;a href=&#34;https://github.com/dstotijn/hetty/releases/latest&#34;&gt;download the latest release from GitHub&lt;/a&gt; for your OS and architecture, and move the binary to a directory in your &lt;code&gt;$PATH&lt;/code&gt;. If your OS is not available for one of the package managers or not listed in the GitHub releases, you can compile from source &lt;em&gt;(link coming soon)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;Docker images are distributed via &lt;a href=&#34;https://github.com/dstotijn/hetty/pkgs/container/hetty&#34;&gt;GitHub&#39;s Container registry&lt;/a&gt; and &lt;a href=&#34;https://hub.docker.com/r/dstotijn/hetty&#34;&gt;Docker Hub&lt;/a&gt;. To run Hetty via with a volume for database and certificate storage, and port 8080 forwarded:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v $HOME/.hetty:/root/.hetty -p 8080:8080 \&#xA;  ghcr.io/dstotijn/hetty:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Once installed, start Hetty via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;hetty&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;üí° Read the &lt;a href=&#34;https://hetty.xyz/docs/getting-started&#34;&gt;Getting started&lt;/a&gt; doc for more details.&lt;/p&gt; &#xA;&lt;p&gt;To list all available options, run: &lt;code&gt;hetty --help&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ hetty --help&#xA;&#xA;Usage:&#xA;    hetty [flags] [subcommand] [flags]&#xA;&#xA;Runs an HTTP server with (MITM) proxy, GraphQL service, and a web based admin interface.&#xA;&#xA;Options:&#xA;    --cert         Path to root CA certificate. Creates file if it doesn&#39;t exist. (Default: &#34;~/.hetty/hetty_cert.pem&#34;)&#xA;    --key          Path to root CA private key. Creates file if it doesn&#39;t exist. (Default: &#34;~/.hetty/hetty_key.pem&#34;)&#xA;    --db           Database directory path. (Default: &#34;~/.hetty/db&#34;)&#xA;    --addr         TCP address for HTTP server to listen on, in the form \&#34;host:port\&#34;. (Default: &#34;:8080&#34;)&#xA;    --chrome       Launch Chrome with proxy settings applied and certificate errors ignored. (Default: false)&#xA;    --verbose      Enable verbose logging.&#xA;    --json         Encode logs as JSON, instead of pretty/human readable output.&#xA;    --version, -v  Output version.&#xA;    --help, -h     Output this usage text.&#xA;&#xA;Subcommands:&#xA;    - cert  Certificate management&#xA;&#xA;Run `hetty &amp;lt;subcommand&amp;gt; --help` for subcommand specific usage instructions.&#xA;&#xA;Visit https://hetty.xyz to learn more about Hetty.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;üìñ &lt;a href=&#34;https://hetty.xyz/docs&#34;&gt;Read the docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://github.com/dstotijn/hetty/issues&#34;&gt;issues&lt;/a&gt; for bug reports and feature requests, and &lt;a href=&#34;https://github.com/dstotijn/hetty/discussions&#34;&gt;discussions&lt;/a&gt; for questions and troubleshooting.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;üí¨ &lt;a href=&#34;https://discord.gg/3HVsj5pTFP&#34;&gt;Join the Hetty Discord server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Want to contribute? Great! Please check the &lt;a href=&#34;https://raw.githubusercontent.com/dstotijn/hetty/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to the &lt;a href=&#34;https://www.hacker101.com/discord&#34;&gt;Hacker101 community on Discord&lt;/a&gt; for the encouragement and early feedback.&lt;/li&gt; &#xA; &lt;li&gt;The font used in the logo and admin interface is &lt;a href=&#34;https://www.jetbrains.com/lp/mono/&#34;&gt;JetBrains Mono&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.tines.com/?utm_source=oss&amp;amp;utm_medium=sponsorship&amp;amp;utm_campaign=hetty&#34;&gt; &lt;img src=&#34;https://hetty.xyz/img/tines-sponsorship-badge.png&#34; width=&#34;140&#34; alt=&#34;Sponsored by Tines&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üíñ Are you enjoying Hetty? You can &lt;a href=&#34;https://github.com/sponsors/dstotijn&#34;&gt;sponsor me&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dstotijn/hetty/main/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;¬© 2022 Hetty Software&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PeerDB-io/peerdb</title>
    <updated>2023-07-30T01:36:41Z</updated>
    <id>tag:github.com,2023-07-30:/PeerDB-io/peerdb</id>
    <link href="https://github.com/PeerDB-io/peerdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Postgres first ETL/ELT, enabling 10x faster data movement in and out of Postgres üêò üöÄ&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/PeerDB-io/peerdb/main/images/banner.jpg&#34; alt=&#34;PeerDB Banner&#34; width=&#34;512&#34;&gt; &#xA; &lt;h4&gt;Frustratingly simple ETL for Postgres&lt;/h4&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Peerdb-io/peerdb/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/PeerDB-io/peerdb/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PeerDB-io/peerdb/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/License/Elv2/green?icon=github&#34; alt=&#34;ElV2 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/peerdb-public/shared_invite/zt-1wo9jydev-EXInbMtCtpAKFFWdi7QvLQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-peerdb-brightgreen.svg?logo=slack&#34; alt=&#34;Slack Community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;PeerDB&lt;/h2&gt; &#xA;&lt;p&gt;PeerDB is a Postgres-first data-movement platform that makes moving data in and out of Postgres fast and simple. It enables you to &lt;strong&gt;sync&lt;/strong&gt;, &lt;strong&gt;transform&lt;/strong&gt; and &lt;strong&gt;query&lt;/strong&gt; data across your stores using simple SQL commands. We implement multiple Postgres native and infrastructural optimizations for 10x faster data-movement in and out of PostgreSQL.&lt;/p&gt; &#xA;&lt;p&gt;You can use PeerDB for any of the below use-cases:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Real-time Change Data Capture from PostgreSQL.&lt;/li&gt; &#xA; &lt;li&gt;Real-time Streaming of Query results across data-stores&lt;/li&gt; &#xA; &lt;li&gt;Federated query workloads - Query multiple data-stores through a common SQL interface&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive git@github.com:PeerDB-io/peerdb.git&#xA;cd peerdb&#xA;&#xA;# Run docker containers: peerdb-server, postgres as catalog, temporal&#xA;export COMPOSE_PROJECT_NAME=peerdb-stack&#xA;docker compose up&#xA;&#xA;# connect to peerdb and query away&#xA;psql &#34;port=9900 host=localhost password=peerdb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/PeerDB-io/peerdb/main/images/peerdb-demo.gif&#34; width=&#34;512&#34;&gt; &#xA;&lt;p&gt;Follow this 5-minute &lt;a href=&#34;https://docs.peerdb.io/quickstart#quickstart&#34;&gt;Quickstart Guide&lt;/a&gt; to see PeerDB in action i.e. streaming data in real-time across stores.&lt;/p&gt; &#xA;&lt;h2&gt;Why PeerDB&lt;/h2&gt; &#xA;&lt;p&gt;Current data tools prioritize a wide range of connectors, often neglecting to optimize for Postgres users. This can be problematic for those storing large amounts of data in Postgres and frequently transferring it. As a result, many resort to building custom pipelines when existing tools don&#39;t meet their needs. We&#39;ve developed this project to provide a straightforward and reliable solution specifically for Postgres.&lt;/p&gt; &#xA;&lt;h3&gt;Postgres-first Approach&lt;/h3&gt; &#xA;&lt;p&gt;PeerDB is an ETL/ELT tool built for PostgreSQL. We implement multiple Postgres native and infrastructural optimizations to provide a fast, reliable and a feature-rich experience for moving data in/out of PostgreSQL.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For performance&lt;/strong&gt; - we can parallelize initial load for a large table, still ensuring consistency. Syncing 100s of GB reduces from days to minutes. Our architecture is designed for real-time syncs and implements multiple logical replication related optimizations (tuning Postgres configs, parallel reading of slot etc.). This enables 10x faster Change Data Capture with data-freshness of a few 10s of seconds even at large throughputs (10k+ tps).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For reliability&lt;/strong&gt;, we have mechanisms in place for fault tolerance - state management, automatic retries, handling idempotency and consistency and so on (&lt;a href=&#34;https://blog.peerdb.io/using-temporal-to-scale-data-synchronization-at-peerdb&#34;&gt;https://blog.peerdb.io/using-temporal-to-scale-data-synchronization-at-peerdb&lt;/a&gt;) Configurable batching and parallelism prevent out of memory (OOMs) and crashes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;From a feature richness standpoint&lt;/strong&gt;, we support efficient syncing of tables with large (TOAST) columns. We support multiple streaming modes - Log based (CDC) based, Query based streaming etc. We provide rich data-type mapping and plan to support every possible (incl. Custom types) that Postgres supports to the best extent possible on the target data-store.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Postgres-compatible SQL interface to do ETL&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The Postgres-compatible SQL interface for ETL is unique to PeerDB and enables you to operate in a language you are familiar with. You can do ETL the same way you work with your databases.&lt;/p&gt; &#xA;&lt;p&gt;You can use Postgres‚Äô eco-system to manage your ETL ‚Äî&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Client tools like pgadmin, psql to run SQL commands.&lt;/li&gt; &#xA; &lt;li&gt;BI tools like grafana, tableau to visually monitor syncs and transforms.&lt;/li&gt; &#xA; &lt;li&gt;Database migration and versioning tools like Flyway to manage your ETL.&lt;/li&gt; &#xA; &lt;li&gt;Any language (Python, Go, Node.JS etc) and Scheduler (AirFlow) for development.&lt;/li&gt; &#xA; &lt;li&gt;And many more&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;We support multiple target connectors to move data from Postgres and a couple of source connectors to move data into Postgres. Check the status of connectors &lt;a href=&#34;https://docs.peerdb.io/sql/commands/supported-connectors&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;PeerDB is licensed under Elastic License 2.0 (ELv2). Please see the&amp;nbsp;LICENSE&amp;nbsp;file for additional information. If you have any licensing questions please email &lt;strong&gt;&lt;a href=&#34;mailto:founders@peerdb.io&#34;&gt;founders@peerdb.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>