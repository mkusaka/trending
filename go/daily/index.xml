<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:42:08Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dgrijalva/jwt-go</title>
    <updated>2022-06-04T01:42:08Z</updated>
    <id>tag:github.com,2022-06-04:/dgrijalva/jwt-go</id>
    <link href="https://github.com/dgrijalva/jwt-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ARCHIVE - Golang implementation of JSON Web Tokens (JWT). This project is now maintained at:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;THIS REPOSITORY IS NO LONGER MAINTANED&lt;/h1&gt; &#xA;&lt;p&gt;The new repository can be found at: &lt;a href=&#34;https://github.com/golang-jwt/jwt&#34;&gt;https://github.com/golang-jwt/jwt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information, see issue &lt;a href=&#34;https://github.com/dgrijalva/jwt-go/issues/462&#34;&gt;#462&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;jwt-go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/dgrijalva/jwt-go&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dgrijalva/jwt-go.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/dgrijalva/jwt-go&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/dgrijalva/jwt-go?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;http://www.golang.org&#34;&gt;go&lt;/a&gt; (or &#39;golang&#39; for search engine friendliness) implementation of &lt;a href=&#34;http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html&#34;&gt;JSON Web Tokens&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NEW VERSION COMING:&lt;/strong&gt; There have been a lot of improvements suggested since the version 3.0.0 released in 2016. I&#39;m working now on cutting two different releases: 3.2.0 will contain any non-breaking changes or enhancements. 4.0.0 will follow shortly which will include breaking changes. See the 4.0.0 milestone to get an idea of what&#39;s coming. If you have other ideas, or would like to participate in 4.0.0, now&#39;s the time. If you depend on this library and don&#39;t want to be interrupted, I recommend you use your dependency mangement tool to pin to version 3.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SECURITY NOTICE:&lt;/strong&gt; Some older versions of Go have a security issue in the cryotp/elliptic. Recommendation is to upgrade to at least 1.8.3. See issue #216 for more detail.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;SECURITY NOTICE:&lt;/strong&gt; It&#39;s important that you &lt;a href=&#34;https://auth0.com/blog/critical-vulnerabilities-in-json-web-token-libraries/&#34;&gt;validate the &lt;code&gt;alg&lt;/code&gt; presented is what you expect&lt;/a&gt;. This library attempts to make it easy to do the right thing by requiring key types match the expected alg, but you should take the extra step to verify it in your usage. See the examples provided.&lt;/p&gt; &#xA;&lt;h2&gt;What the heck is a JWT?&lt;/h2&gt; &#xA;&lt;p&gt;JWT.io has &lt;a href=&#34;https://jwt.io/introduction&#34;&gt;a great introduction&lt;/a&gt; to JSON Web Tokens.&lt;/p&gt; &#xA;&lt;p&gt;In short, it&#39;s a signed JSON object that does something useful (for example, authentication). It&#39;s commonly used for &lt;code&gt;Bearer&lt;/code&gt; tokens in Oauth 2. A token is made of three parts, separated by &lt;code&gt;.&lt;/code&gt;&#39;s. The first two parts are JSON objects, that have been &lt;a href=&#34;http://tools.ietf.org/html/rfc4648&#34;&gt;base64url&lt;/a&gt; encoded. The last part is the signature, encoded the same way.&lt;/p&gt; &#xA;&lt;p&gt;The first part is called the header. It contains the necessary information for verifying the last part, the signature. For example, which encryption method was used for signing and what key was used.&lt;/p&gt; &#xA;&lt;p&gt;The part in the middle is the interesting bit. It&#39;s called the Claims and contains the actual stuff you care about. Refer to &lt;a href=&#34;http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html&#34;&gt;the RFC&lt;/a&gt; for information about reserved keys and the proper way to add your own.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s in the box?&lt;/h2&gt; &#xA;&lt;p&gt;This library supports the parsing and verification as well as the generation and signing of JWTs. Current supported signing algorithms are HMAC SHA, RSA, RSA-PSS, and ECDSA, though hooks are present for adding your own.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://godoc.org/github.com/dgrijalva/jwt-go&#34;&gt;the project documentation&lt;/a&gt; for examples of usage:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/dgrijalva/jwt-go#example-Parse--Hmac&#34;&gt;Simple example of parsing and validating a token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/dgrijalva/jwt-go#example-New--Hmac&#34;&gt;Simple example of building and signing a token&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/dgrijalva/jwt-go#pkg-examples&#34;&gt;Directory of Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;This library publishes all the necessary components for adding your own signing methods. Simply implement the &lt;code&gt;SigningMethod&lt;/code&gt; interface and register a factory method using &lt;code&gt;RegisterSigningMethod&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of an extension that integrates with multiple Google Cloud Platform signing tools (AppEngine, IAM API, Cloud KMS): &lt;a href=&#34;https://github.com/someone1/gcp-jwt-go&#34;&gt;https://github.com/someone1/gcp-jwt-go&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compliance&lt;/h2&gt; &#xA;&lt;p&gt;This library was last reviewed to comply with &lt;a href=&#34;http://www.rfc-editor.org/info/rfc7519&#34;&gt;RTF 7519&lt;/a&gt; dated May 2015 with a few notable differences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In order to protect against accidental use of &lt;a href=&#34;http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#UnsecuredJWT&#34;&gt;Unsecured JWTs&lt;/a&gt;, tokens using &lt;code&gt;alg=none&lt;/code&gt; will only be accepted if the constant &lt;code&gt;jwt.UnsafeAllowNoneSignatureType&lt;/code&gt; is provided as the key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Status &amp;amp; Versioning&lt;/h2&gt; &#xA;&lt;p&gt;This library is considered production ready. Feedback and feature requests are appreciated. The API should be considered stable. There should be very few backwards-incompatible changes outside of major version updates (and only with good reason).&lt;/p&gt; &#xA;&lt;p&gt;This project uses &lt;a href=&#34;http://semver.org&#34;&gt;Semantic Versioning 2.0.0&lt;/a&gt;. Accepted pull requests will land on &lt;code&gt;master&lt;/code&gt;. Periodically, versions will be tagged from &lt;code&gt;master&lt;/code&gt;. You can find all the releases on &lt;a href=&#34;https://github.com/dgrijalva/jwt-go/releases&#34;&gt;the project releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While we try to make it obvious when we make breaking changes, there isn&#39;t a great mechanism for pushing announcements out to users. You may want to use this alternative package include: &lt;code&gt;gopkg.in/dgrijalva/jwt-go.v3&lt;/code&gt;. It will do the right thing WRT semantic versioning.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BREAKING CHANGES:&lt;/strong&gt;*&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Version 3.0.0 includes &lt;em&gt;a lot&lt;/em&gt; of changes from the 2.x line, including a few that break the API. We&#39;ve tried to break as few things as possible, so there should just be a few type signature changes. A full list of breaking changes is available in &lt;code&gt;VERSION_HISTORY.md&lt;/code&gt;. See &lt;code&gt;MIGRATION_GUIDE.md&lt;/code&gt; for more information on updating your code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Signing vs Encryption&lt;/h3&gt; &#xA;&lt;p&gt;A token is simply a JSON object that is signed by its author. this tells you exactly two things about the data:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The author of the token was in the possession of the signing secret&lt;/li&gt; &#xA; &lt;li&gt;The data has not been modified since it was signed&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It&#39;s important to know that JWT does not provide encryption, which means anyone who has access to the token can read its contents. If you need to protect (encrypt) the data, there is a companion spec, &lt;code&gt;JWE&lt;/code&gt;, that provides this functionality. JWE is currently outside the scope of this library.&lt;/p&gt; &#xA;&lt;h3&gt;Choosing a Signing Method&lt;/h3&gt; &#xA;&lt;p&gt;There are several signing methods available, and you should probably take the time to learn about the various options before choosing one. The principal design decision is most likely going to be symmetric vs asymmetric.&lt;/p&gt; &#xA;&lt;p&gt;Symmetric signing methods, such as HSA, use only a single secret. This is probably the simplest signing method to use since any &lt;code&gt;[]byte&lt;/code&gt; can be used as a valid secret. They are also slightly computationally faster to use, though this rarely is enough to matter. Symmetric signing methods work the best when both producers and consumers of tokens are trusted, or even the same system. Since the same secret is used to both sign and validate tokens, you can&#39;t easily distribute the key for validation.&lt;/p&gt; &#xA;&lt;p&gt;Asymmetric signing methods, such as RSA, use different keys for signing and verifying tokens. This makes it possible to produce tokens with a private key, and allow any consumer to access the public key for verification.&lt;/p&gt; &#xA;&lt;h3&gt;Signing Methods and Key Types&lt;/h3&gt; &#xA;&lt;p&gt;Each signing method expects a different object type for its signing keys. See the package documentation for details. Here are the most common ones:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://godoc.org/github.com/dgrijalva/jwt-go#SigningMethodHMAC&#34;&gt;HMAC signing method&lt;/a&gt; (&lt;code&gt;HS256&lt;/code&gt;,&lt;code&gt;HS384&lt;/code&gt;,&lt;code&gt;HS512&lt;/code&gt;) expect &lt;code&gt;[]byte&lt;/code&gt; values for signing and validation&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://godoc.org/github.com/dgrijalva/jwt-go#SigningMethodRSA&#34;&gt;RSA signing method&lt;/a&gt; (&lt;code&gt;RS256&lt;/code&gt;,&lt;code&gt;RS384&lt;/code&gt;,&lt;code&gt;RS512&lt;/code&gt;) expect &lt;code&gt;*rsa.PrivateKey&lt;/code&gt; for signing and &lt;code&gt;*rsa.PublicKey&lt;/code&gt; for validation&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://godoc.org/github.com/dgrijalva/jwt-go#SigningMethodECDSA&#34;&gt;ECDSA signing method&lt;/a&gt; (&lt;code&gt;ES256&lt;/code&gt;,&lt;code&gt;ES384&lt;/code&gt;,&lt;code&gt;ES512&lt;/code&gt;) expect &lt;code&gt;*ecdsa.PrivateKey&lt;/code&gt; for signing and &lt;code&gt;*ecdsa.PublicKey&lt;/code&gt; for validation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;JWT and OAuth&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s worth mentioning that OAuth and JWT are not the same thing. A JWT token is simply a signed JSON object. It can be used anywhere such a thing is useful. There is some confusion, though, as JWT is the most common type of bearer token used in OAuth2 authentication.&lt;/p&gt; &#xA;&lt;p&gt;Without going too far down the rabbit hole, here&#39;s a description of the interaction of these technologies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OAuth is a protocol for allowing an identity provider to be separate from the service a user is logging in to. For example, whenever you use Facebook to log into a different service (Yelp, Spotify, etc), you are using OAuth.&lt;/li&gt; &#xA; &lt;li&gt;OAuth defines several options for passing around authentication data. One popular method is called a &#34;bearer token&#34;. A bearer token is simply a string that &lt;em&gt;should&lt;/em&gt; only be held by an authenticated user. Thus, simply presenting this token proves your identity. You can probably derive from here why a JWT might make a good bearer token.&lt;/li&gt; &#xA; &lt;li&gt;Because bearer tokens are used for authentication, it&#39;s important they&#39;re kept secret. This is why transactions that use bearer tokens typically happen over SSL.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;This library uses descriptive error messages whenever possible. If you are not getting the expected result, have a look at the errors. The most common place people get stuck is providing the correct type of key to the parser. See the above section on signing methods and key types.&lt;/p&gt; &#xA;&lt;h2&gt;More&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found &lt;a href=&#34;http://godoc.org/github.com/dgrijalva/jwt-go&#34;&gt;on godoc.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The command line utility included in this project (cmd/jwt) provides a straightforward example of token creation and parsing as well as a useful tool for debugging your own integration. You&#39;ll also find several implementation examples in the documentation.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>grpc/grpc-go</title>
    <updated>2022-06-04T01:42:08Z</updated>
    <id>tag:github.com,2022-06-04:/grpc/grpc-go</id>
    <link href="https://github.com/grpc/grpc-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Go language implementation of gRPC. HTTP/2 based RPC&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gRPC-Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/grpc/grpc-go&#34;&gt;&lt;img src=&#34;https://travis-ci.org/grpc/grpc-go.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/google.golang.org/grpc&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/grpc/grpc-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/grpc/grpc-go&#34; alt=&#34;GoReportCard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt; implementation of &lt;a href=&#34;https://grpc.io&#34;&gt;gRPC&lt;/a&gt;: A high performance, open source, general RPC framework that puts mobile and HTTP/2 first. For more information see the &lt;a href=&#34;https://grpc.io/docs/languages/go&#34;&gt;Go gRPC docs&lt;/a&gt;, or jump directly into the &lt;a href=&#34;https://grpc.io/docs/languages/go/quickstart&#34;&gt;quick start&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;&lt;/strong&gt;: any one of the &lt;strong&gt;three latest major&lt;/strong&gt; &lt;a href=&#34;https://golang.org/doc/devel/release.html&#34;&gt;releases&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/golang/go/wiki/Modules&#34;&gt;Go module&lt;/a&gt; support (Go 1.11+), simply add the following import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;google.golang.org/grpc&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to your code, and then &lt;code&gt;go [build|run|test]&lt;/code&gt; will automatically fetch the necessary dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Otherwise, to install the &lt;code&gt;grpc-go&lt;/code&gt; package, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ go get -u google.golang.org/grpc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you are trying to access &lt;code&gt;grpc-go&lt;/code&gt; from &lt;strong&gt;China&lt;/strong&gt;, see the &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-go/master/#FAQ&#34;&gt;FAQ&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Learn more&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/languages/go&#34;&gt;Go gRPC docs&lt;/a&gt;, which include a &lt;a href=&#34;https://grpc.io/docs/languages/go/quickstart&#34;&gt;quick start&lt;/a&gt; and &lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc&#34;&gt;API reference&lt;/a&gt; among other resources&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-go/master/Documentation&#34;&gt;Low-level technical docs&lt;/a&gt; from this repository&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5180705743044608&#34;&gt;Performance benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc-go/master/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;I/O Timeout Errors&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;golang.org&lt;/code&gt; domain may be blocked from some countries. &lt;code&gt;go get&lt;/code&gt; usually produces an error like the following when this happens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ go get -u google.golang.org/grpc&#xA;package google.golang.org/grpc: unrecognized import path &#34;google.golang.org/grpc&#34; (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build Go code, there are several options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up a VPN and access google.golang.org through that.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Without Go module support: &lt;code&gt;git clone&lt;/code&gt; the repo manually:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/grpc/grpc-go.git $GOPATH/src/google.golang.org/grpc&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You will need to do the same for all of grpc&#39;s dependencies in &lt;code&gt;golang.org&lt;/code&gt;, e.g. &lt;code&gt;golang.org/x/net&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;With Go module support: it is possible to use the &lt;code&gt;replace&lt;/code&gt; feature of &lt;code&gt;go mod&lt;/code&gt; to create aliases for golang.org packages. In your project&#39;s directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest&#xA;go mod tidy&#xA;go mod vendor&#xA;go build -mod=vendor&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Again, this will need to be done for all transitive dependencies hosted on golang.org as well. For details, refer to &lt;a href=&#34;https://github.com/golang/go/issues/28652&#34;&gt;golang/go issue #28652&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compiling error, undefined: grpc.SupportPackageIsVersion&lt;/h3&gt; &#xA;&lt;h4&gt;If you are using Go modules:&lt;/h4&gt; &#xA;&lt;p&gt;Ensure your gRPC-Go version is &lt;code&gt;require&lt;/code&gt;d at the appropriate version in the same module containing the generated &lt;code&gt;.pb.go&lt;/code&gt; files. For example, &lt;code&gt;SupportPackageIsVersion6&lt;/code&gt; needs &lt;code&gt;v1.27.0&lt;/code&gt;, so in your &lt;code&gt;go.mod&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;module &amp;lt;your module name&amp;gt;&#xA;&#xA;require (&#xA;    google.golang.org/grpc v1.27.0&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;If you are &lt;em&gt;not&lt;/em&gt; using Go modules:&lt;/h4&gt; &#xA;&lt;p&gt;Update the &lt;code&gt;proto&lt;/code&gt; package, gRPC package, and rebuild the &lt;code&gt;.proto&lt;/code&gt; files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -u github.com/golang/protobuf/{proto,protoc-gen-go}&#xA;go get -u google.golang.org/grpc&#xA;protoc --go_out=plugins=grpc:. *.proto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to turn on logging&lt;/h3&gt; &#xA;&lt;p&gt;The default logger is controlled by environment variables. Turn everything on like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99&#xA;$ export GRPC_GO_LOG_SEVERITY_LEVEL=info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The RPC failed with error &lt;code&gt;&#34;code = Unavailable desc = transport is closing&#34;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This error means the connection the RPC is using was closed, and there are many possible reasons, including:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;mis-configured transport credentials, connection failed on handshaking&lt;/li&gt; &#xA; &lt;li&gt;bytes disrupted, possibly by a proxy in between&lt;/li&gt; &#xA; &lt;li&gt;server shutdown&lt;/li&gt; &#xA; &lt;li&gt;Keepalive parameters caused connection shutdown, for example if you have configured your server to terminate connections regularly to &lt;a href=&#34;https://github.com/grpc/grpc-go/issues/3170#issuecomment-552517779&#34;&gt;trigger DNS lookups&lt;/a&gt;. If this is the case, you may want to increase your &lt;a href=&#34;https://pkg.go.dev/google.golang.org/grpc/keepalive?tab=doc#ServerParameters&#34;&gt;MaxConnectionAgeGrace&lt;/a&gt;, to allow longer RPC calls to finish.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It can be tricky to debug this because the error happens on the client side but the root cause of the connection being closed is on the server side. Turn on logging on &lt;strong&gt;both client and server&lt;/strong&gt;, and see if there are any transport errors.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jackc/pgx</title>
    <updated>2022-06-04T01:42:08Z</updated>
    <id>tag:github.com,2022-06-04:/jackc/pgx</id>
    <link href="https://github.com/jackc/pgx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;PostgreSQL driver and toolkit for Go&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/jackc/pgx/v4&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/jackc/pgx?status.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/jackc/pgx&#34;&gt;&lt;img src=&#34;https://travis-ci.org/jackc/pgx.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;pgx - PostgreSQL Driver and Toolkit&lt;/h1&gt; &#xA;&lt;p&gt;pgx is a pure Go driver and toolkit for PostgreSQL.&lt;/p&gt; &#xA;&lt;p&gt;pgx aims to be low-level, fast, and performant, while also enabling PostgreSQL-specific features that the standard &lt;code&gt;database/sql&lt;/code&gt; package does not allow for.&lt;/p&gt; &#xA;&lt;p&gt;The driver component of pgx can be used alongside the standard &lt;code&gt;database/sql&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;The toolkit component is a related set of packages that implement PostgreSQL functionality such as parsing the wire protocol and type mapping between PostgreSQL and Go. These underlying packages can be used to implement alternative drivers, proxies, load balancers, logical replication clients, etc.&lt;/p&gt; &#xA;&lt;p&gt;The current release of &lt;code&gt;pgx v4&lt;/code&gt; requires Go modules. To use the previous version, checkout and vendor the &lt;code&gt;v3&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Example Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;context&#34;&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;os&#34;&#xA;&#xA;&#x9;&#34;github.com/jackc/pgx/v4&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// urlExample := &#34;postgres://username:password@localhost:5432/database_name&#34;&#xA;&#x9;conn, err := pgx.Connect(context.Background(), os.Getenv(&#34;DATABASE_URL&#34;))&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Fprintf(os.Stderr, &#34;Unable to connect to database: %v\n&#34;, err)&#xA;&#x9;&#x9;os.Exit(1)&#xA;&#x9;}&#xA;&#x9;defer conn.Close(context.Background())&#xA;&#xA;&#x9;var name string&#xA;&#x9;var weight int64&#xA;&#x9;err = conn.QueryRow(context.Background(), &#34;select name, weight from widgets where id=$1&#34;, 42).Scan(&amp;amp;name, &amp;amp;weight)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;fmt.Fprintf(os.Stderr, &#34;QueryRow failed: %v\n&#34;, err)&#xA;&#x9;&#x9;os.Exit(1)&#xA;&#x9;}&#xA;&#xA;&#x9;fmt.Println(name, weight)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/jackc/pgx/wiki/Getting-started-with-pgx&#34;&gt;getting started guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Choosing Between the pgx and database/sql Interfaces&lt;/h2&gt; &#xA;&lt;p&gt;It is recommended to use the pgx interface if:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The application only targets PostgreSQL.&lt;/li&gt; &#xA; &lt;li&gt;No other libraries that require &lt;code&gt;database/sql&lt;/code&gt; are in use.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The pgx interface is faster and exposes more features.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;database/sql&lt;/code&gt; interface only allows the underlying driver to return or receive the following types: &lt;code&gt;int64&lt;/code&gt;, &lt;code&gt;float64&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;[]byte&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;time.Time&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt;. Handling other types requires implementing the &lt;code&gt;database/sql.Scanner&lt;/code&gt; and the &lt;code&gt;database/sql/driver/driver.Valuer&lt;/code&gt; interfaces which require transmission of values in text format. The binary format can be substantially faster, which is what the pgx interface uses.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;pgx supports many features beyond what is available through &lt;code&gt;database/sql&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for approximately 70 different PostgreSQL types&lt;/li&gt; &#xA; &lt;li&gt;Automatic statement preparation and caching&lt;/li&gt; &#xA; &lt;li&gt;Batch queries&lt;/li&gt; &#xA; &lt;li&gt;Single-round trip query mode&lt;/li&gt; &#xA; &lt;li&gt;Full TLS connection control&lt;/li&gt; &#xA; &lt;li&gt;Binary format support for custom types (allows for much quicker encoding/decoding)&lt;/li&gt; &#xA; &lt;li&gt;COPY protocol support for faster bulk data loads&lt;/li&gt; &#xA; &lt;li&gt;Extendable logging support including built-in support for &lt;code&gt;log15adapter&lt;/code&gt;, &lt;a href=&#34;https://github.com/sirupsen/logrus&#34;&gt;&lt;code&gt;logrus&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;&lt;code&gt;zap&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/rs/zerolog&#34;&gt;&lt;code&gt;zerolog&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connection pool with after-connect hook for arbitrary connection setup&lt;/li&gt; &#xA; &lt;li&gt;Listen / notify&lt;/li&gt; &#xA; &lt;li&gt;Conversion of PostgreSQL arrays to Go slice mappings for integers, floats, and strings&lt;/li&gt; &#xA; &lt;li&gt;Hstore support&lt;/li&gt; &#xA; &lt;li&gt;JSON and JSONB support&lt;/li&gt; &#xA; &lt;li&gt;Maps &lt;code&gt;inet&lt;/code&gt; and &lt;code&gt;cidr&lt;/code&gt; PostgreSQL types to &lt;code&gt;net.IPNet&lt;/code&gt; and &lt;code&gt;net.IP&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Large object support&lt;/li&gt; &#xA; &lt;li&gt;NULL mapping to Null* struct or pointer to pointer&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;code&gt;database/sql.Scanner&lt;/code&gt; and &lt;code&gt;database/sql/driver.Valuer&lt;/code&gt; interfaces for custom types&lt;/li&gt; &#xA; &lt;li&gt;Notice response handling&lt;/li&gt; &#xA; &lt;li&gt;Simulated nested transactions with savepoints&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;There are three areas in particular where pgx can provide a significant performance advantage over the standard &lt;code&gt;database/sql&lt;/code&gt; interface and other drivers:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;PostgreSQL specific types - Types such as arrays can be parsed much quicker because pgx uses the binary format.&lt;/li&gt; &#xA; &lt;li&gt;Automatic statement preparation and caching - pgx will prepare and cache statements by default. This can provide an significant free improvement to code that does not explicitly use prepared statements. Under certain workloads, it can perform nearly 3x the number of queries per second.&lt;/li&gt; &#xA; &lt;li&gt;Batched queries - Multiple queries can be batched together to minimize network round trips.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;pgx tests naturally require a PostgreSQL database. It will connect to the database specified in the &lt;code&gt;PGX_TEST_DATABASE&lt;/code&gt; environment variable. The &lt;code&gt;PGX_TEST_DATABASE&lt;/code&gt; environment variable can either be a URL or DSN. In addition, the standard &lt;code&gt;PG*&lt;/code&gt; environment variables will be respected. Consider using &lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt; to simplify environment variable handling.&lt;/p&gt; &#xA;&lt;h3&gt;Example Test Environment&lt;/h3&gt; &#xA;&lt;p&gt;Connect to your PostgreSQL server and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;create database pgx_test;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect to the newly-created database and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;create domain uint64 as numeric(20,0);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, you can run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;PGX_TEST_DATABASE=&#34;host=/var/run/postgresql database=pgx_test&#34; go test ./...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, there are tests specific for PgBouncer that will be executed if &lt;code&gt;PGX_TEST_PGBOUNCER_CONN_STRING&lt;/code&gt; is set.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Go and PostgreSQL Versions&lt;/h2&gt; &#xA;&lt;p&gt;pgx supports the same versions of Go and PostgreSQL that are supported by their respective teams. For &lt;a href=&#34;https://golang.org/doc/devel/release.html#policy&#34;&gt;Go&lt;/a&gt; that is the two most recent major releases and for &lt;a href=&#34;https://www.postgresql.org/support/versioning/&#34;&gt;PostgreSQL&lt;/a&gt; the major releases in the last 5 years. This means pgx supports Go 1.16 and higher and PostgreSQL 10 and higher. pgx also is tested against the latest version of &lt;a href=&#34;https://www.cockroachlabs.com/product/&#34;&gt;CockroachDB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Version Policy&lt;/h2&gt; &#xA;&lt;p&gt;pgx follows semantic versioning for the documented public API on stable releases. &lt;code&gt;v4&lt;/code&gt; is the latest stable major version.&lt;/p&gt; &#xA;&lt;h2&gt;PGX Family Libraries&lt;/h2&gt; &#xA;&lt;p&gt;pgx is the head of a family of PostgreSQL libraries. Many of these can be used independently. Many can also be accessed from pgx for lower-level control.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/pgconn&#34;&gt;github.com/jackc/pgconn&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pgconn&lt;/code&gt; is a lower-level PostgreSQL database driver that operates at nearly the same level as the C library &lt;code&gt;libpq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/pgx/tree/master/pgxpool&#34;&gt;github.com/jackc/pgx/v4/pgxpool&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pgxpool&lt;/code&gt; is a connection pool for pgx. pgx is entirely decoupled from its default pool implementation. This means that pgx can be used with a different pool or without any pool at all.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/pgx/tree/master/stdlib&#34;&gt;github.com/jackc/pgx/v4/stdlib&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This is a &lt;code&gt;database/sql&lt;/code&gt; compatibility layer for pgx. pgx can be used as a normal &lt;code&gt;database/sql&lt;/code&gt; driver, but at any time, the native interface can be acquired for more performance or PostgreSQL specific functionality.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/pgtype&#34;&gt;github.com/jackc/pgtype&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Over 70 PostgreSQL types are supported including &lt;code&gt;uuid&lt;/code&gt;, &lt;code&gt;hstore&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt;, &lt;code&gt;bytea&lt;/code&gt;, &lt;code&gt;numeric&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt;, &lt;code&gt;inet&lt;/code&gt;, and arrays. These types support &lt;code&gt;database/sql&lt;/code&gt; interfaces and are usable outside of pgx. They are fully tested in pgx and pq. They also support a higher performance interface when used with the pgx driver.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/pgproto3&#34;&gt;github.com/jackc/pgproto3&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;pgproto3 provides standalone encoding and decoding of the PostgreSQL v3 wire protocol. This is useful for implementing very low level PostgreSQL tooling.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/pglogrepl&#34;&gt;github.com/jackc/pglogrepl&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;pglogrepl provides functionality to act as a client for PostgreSQL logical replication.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/pgmock&#34;&gt;github.com/jackc/pgmock&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;pgmock offers the ability to create a server that mocks the PostgreSQL wire protocol. This is used internally to test pgx by purposely inducing unusual errors. pgproto3 and pgmock together provide most of the foundational tooling required to implement a PostgreSQL proxy or MitM (such as for a custom connection pooler).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/tern&#34;&gt;github.com/jackc/tern&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;tern is a stand-alone SQL migration system.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jackc/pgerrcode&#34;&gt;github.com/jackc/pgerrcode&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;pgerrcode contains constants for the PostgreSQL error codes.&lt;/p&gt; &#xA;&lt;h2&gt;3rd Party Libraries with PGX Support&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/georgysavva/scany&#34;&gt;github.com/georgysavva/scany&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Library for scanning data from a database into Go structs and more.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/otan/gopgkrb5&#34;&gt;https://github.com/otan/gopgkrb5&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Adds GSSAPI / Kerberos authentication support.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/vgarvardt/pgx-google-uuid&#34;&gt;https://github.com/vgarvardt/pgx-google-uuid&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Adds support for &lt;a href=&#34;https://github.com/google/uuid&#34;&gt;&lt;code&gt;github.com/google/uuid&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>