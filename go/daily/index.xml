<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-29T01:40:26Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>megaease/easegress</title>
    <updated>2022-08-29T01:40:26Z</updated>
    <id>tag:github.com,2022-08-29:/megaease/easegress</id>
    <link href="https://github.com/megaease/easegress" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Cloud Native traffic orchestration system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Easegress&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/megaease/easegress&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/megaease/easegress&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/megaease/easegress/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/megaease/easegress/Test/main&#34; alt=&#34;GitHub Workflow Status (branch)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/megaease/easegress&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/megaease/easegress/branch/main/graph/badge.svg?token=5Q80B98LPI&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/megaease/easegress&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/megaease/easegress.svg?sanitize=true&#34; alt=&#34;Docker pulls&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/megaease/easegress/raw/main/go.mod&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/go-mod/go-version/megaease/easegress&#34; alt=&#34;GitHub go.mod Go version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/openmegaease/shared_invite/zt-upo7v306-lYPHvVwKnvwlqR0Zl2vveA&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-megaease-brightgreen?logo=slack&#34; alt=&#34;Join MegaEase Slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://megaease.com/easegress&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/imgs/easegress.svg?sanitize=true&#34; alt=&#34;Easegress logo&#34; title=&#34;Easegress&#34; height=&#34;175&#34; width=&#34;175&#34; align=&#34;right&#34;&gt; &lt;/a&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#easegress&#34;&gt;Easegress&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#what-is-easegress&#34;&gt;What is Easegress&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#use-cases&#34;&gt;Use Cases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#setting-up-easegress&#34;&gt;Setting up Easegress&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#create-an-httpserver-and-pipeline&#34;&gt;Create an HTTPServer and Pipeline&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#test&#34;&gt;Test&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#add-another-pipeline&#34;&gt;Add Another Pipeline&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#update-the-httpserver&#34;&gt;Update the HTTPServer&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#test-the-rss-pipeline&#34;&gt;Test the RSS Pipeline&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Easegress&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Easegress&lt;/code&gt; is a Cloud Native traffic orchestration system designed for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Availability:&lt;/strong&gt; Built-in Raft consensus &amp;amp; leader election provides 99.99% availability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Traffic Orchestration:&lt;/strong&gt; Simple orchestration of various filters for each traffic pipeline.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance:&lt;/strong&gt; Lightweight and essential features speed up the performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Observability:&lt;/strong&gt; There are many meaningful statistics periodically in a readable way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensibility:&lt;/strong&gt; It&#39;s easy to develop your own filter or controller with high-level programming language.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integration:&lt;/strong&gt; The simple interfaces make it easy to integrate with other systems, such as Kubernetes Ingress, &lt;a href=&#34;https://github.com/megaease/easemesh&#34;&gt;EaseMesh&lt;/a&gt; sidecar, Workflow, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The architecture of Easegress:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/imgs/architecture.png&#34; alt=&#34;architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Service Management&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Multiple protocols:&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;HTTP/1.1&lt;/li&gt; &#xA;     &lt;li&gt;HTTP/2&lt;/li&gt; &#xA;     &lt;li&gt;HTTP/3(QUIC)&lt;/li&gt; &#xA;     &lt;li&gt;MQTT&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rich Routing Rules:&lt;/strong&gt; exact path, path prefix, regular expression of the path, method, headers.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Resilience&amp;amp;Fault Tolerance&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;CircuitBreaker:&lt;/strong&gt; temporarily blocks possible failures.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;RateLimiter:&lt;/strong&gt; limits the rate of incoming requests.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Retry:&lt;/strong&gt; repeats failed executions.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;TimeLimiter:&lt;/strong&gt; limits the duration of execution.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Deployment Management&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Blue-green Strategy:&lt;/strong&gt; switches traffic at one time.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Canary Strategy:&lt;/strong&gt; schedules traffic slightly.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;API Management&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;API Aggregation:&lt;/strong&gt; aggregates results of multiple APIs.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;API Orchestration:&lt;/strong&gt; orchestrates the flow of APIs.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;IP Filter:&lt;/strong&gt; Limits access to IP addresses.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Static HTTPS:&lt;/strong&gt; static certificate files.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;API Signature:&lt;/strong&gt; supports &lt;a href=&#34;https://en.wikipedia.org/wiki/HMAC&#34;&gt;HMAC&lt;/a&gt; verification.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;JWT Verification:&lt;/strong&gt; verifies &lt;a href=&#34;https://jwt.io/&#34;&gt;JWT Token&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;OAuth2:&lt;/strong&gt; validates &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6749&#34;&gt;OAuth/2&lt;/a&gt; requests.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Let&#39;s Encrypt:&lt;/strong&gt; automatically manage certificate files.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Pipeline-Filter Mechanism&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Chain of Responsibility Pattern:&lt;/strong&gt; orchestrates filters chain.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Filter Management:&lt;/strong&gt; makes it easy to develop new filters.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Service Mesh&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Mesh Master:&lt;/strong&gt; is the control plane to manage the lifecycle of mesh services.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Mesh Sidecar:&lt;/strong&gt; is the data plane as the endpoint to do traffic interception and routing.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Mesh Ingress Controller:&lt;/strong&gt; is the mesh-specific ingress controller to route external traffic to mesh services. &#xA;      &lt;blockquote&gt; &#xA;       &lt;p&gt;Notes: This feature is leveraged by &lt;a href=&#34;https://github.com/megaease/easemesh&#34;&gt;EaseMesh&lt;/a&gt;&lt;/p&gt; &#xA;      &lt;/blockquote&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Third-Part Integration&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;FaaS&lt;/strong&gt; integrates with the serverless platform Knative.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Service Discovery&lt;/strong&gt; integrates with Eureka, Consul, Etcd, and Zookeeper.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Ingress Controller&lt;/strong&gt; integrates with Kubernetes as an ingress controller.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensibility&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;WebAssembly&lt;/strong&gt; executes user developed &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; code.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance and Availability&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Adaption&lt;/strong&gt;: adapts request, response in the handling chain.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Validation&lt;/strong&gt;: headers validation, OAuth2, JWT, and HMAC verification.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Load Balance:&lt;/strong&gt; round-robin, random, weighted random, IP hash, header hash.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Cache:&lt;/strong&gt; for the backend servers.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Compression:&lt;/strong&gt; compresses body for the response.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Hot-Update:&lt;/strong&gt; updates both config and binary of Easegress in place without losing connections.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Operation&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Easy to Integrate:&lt;/strong&gt; command line(&lt;code&gt;egctl&lt;/code&gt;), MegaEase Portal, HTTP clients such as curl, postman, etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Distributed Tracing&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Built-in &lt;a href=&#34;https://zipkin.io/&#34;&gt;Open Zipkin&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://opentracing.io/&#34;&gt;Open Tracing&lt;/a&gt; for vendor-neutral APIs&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Observability&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Node:&lt;/strong&gt; role(primary, secondary), raft leader status, healthy or not, last heartbeat time, and so on&lt;/li&gt; &#xA;     &lt;li&gt;&lt;strong&gt;Traffic:&lt;/strong&gt; in multi-dimension: server and backend. &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Throughput:&lt;/strong&gt; total and error statistics of request count, TPS/m1, m5, m15, and error percent, etc.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Latency:&lt;/strong&gt; p25, p50, p75, p95, p98, p99, p999.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Data Size:&lt;/strong&gt; request and response size.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;Status Codes:&lt;/strong&gt; HTTP status codes.&lt;/li&gt; &#xA;       &lt;li&gt;&lt;strong&gt;TopN:&lt;/strong&gt; sorted by aggregated APIs(only in server dimension).&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;The following examples show how to use Easegress for different scenarios.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/api-aggregation.md&#34;&gt;API Aggregation&lt;/a&gt; - Aggregating many APIs into a single API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/multi-node-cluster.md&#34;&gt;Cluster Deployment&lt;/a&gt; - How to deploy multiple Easegress cluster nodes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/distributed-tracing.md&#34;&gt;Distributed Tracing&lt;/a&gt; - How to do APM tracing - Zipkin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/faas.md&#34;&gt;FaaS&lt;/a&gt; - Supporting Knative FaaS integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/flash-sale.md&#34;&gt;Flash Sale&lt;/a&gt; - How to do high concurrent promotion sales with Easegress&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/k8s-ingress-controller.md&#34;&gt;Kubernetes Ingress Controller&lt;/a&gt; - How to integrate with Kubernetes as ingress controller&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/load-balancer.md&#34;&gt;LoadBalancer&lt;/a&gt; - A number of the strategies of load balancing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/mqtt-proxy.md&#34;&gt;MQTTProxy&lt;/a&gt; - An Example to MQTT proxy with Kafka backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/performance.md&#34;&gt;Performance&lt;/a&gt; - Performance optimization - compression, caching etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/pipeline.md&#34;&gt;Pipeline&lt;/a&gt; - How to orchestrate HTTP filters for requests/responses handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/resilience.md&#34;&gt;Resilience and Fault Tolerance&lt;/a&gt; - CircuitBreaker, RateLimiter, Retry, TimeLimiter, etc. (Porting from &lt;a href=&#34;https://github.com/resilience4j/resilience4j&#34;&gt;Java resilience4j&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/security.md&#34;&gt;Security&lt;/a&gt; - How to do authentication by Header, JWT, HMAC, OAuth2, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/service-proxy.md&#34;&gt;Service Proxy&lt;/a&gt; - Supporting the Microservice registries - Zookeeper, Eureka, Consul, Nacos, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/wasm.md&#34;&gt;WebAssembly&lt;/a&gt; - Using AssemblyScript to extend the Easegress&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/websocket.md&#34;&gt;WebSocket&lt;/a&gt; - WebSocket proxy for Easegress&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/cookbook/workflow.md&#34;&gt;Workflow&lt;/a&gt; - An Example to make a workflow for a number of APIs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For full list, see &lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/README.md#1-cookbook--how-to-guide&#34;&gt;Cookbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The basic usage of Easegress is to quickly set up a proxy for the backend servers. In this section, we will first set up a reverse proxy, and then demonstrate the API orchestration feature by including more components in the configuration, we will also show the essential concepts and operations of Easegress.&lt;/p&gt; &#xA;&lt;h3&gt;Setting up Easegress&lt;/h3&gt; &#xA;&lt;p&gt;We can download the latest or history binaries from the &lt;a href=&#34;https://github.com/megaease/easegress/releases&#34;&gt;release page&lt;/a&gt;. The following shell script will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download and extract the latest binaries to &lt;code&gt;./easegress&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Install the Easegress Systemd service.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/megaease/easegress/main/scripts/install.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or we can install Easegress from source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/megaease/easegress &amp;amp;&amp;amp; cd easegress&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;This repo requires Go 1.18+ compiler for the build.&lt;/li&gt; &#xA;  &lt;li&gt;If you need the WebAssembly feature, please run &lt;code&gt;make wasm&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Then we can add the binary directory to the &lt;code&gt;PATH&lt;/code&gt; and execute the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ export PATH=${PATH}:$(pwd)/bin/&#xA;$ easegress-server&#xA;2022-07-04T13:47:36.579+08:00   INFO    cluster/config.go:106   etcd config: advertise-client-urls: [{Scheme:http Opaque: User: Host:localhost:2379 Path: RawPath: ForceQuery:false RawQuery: Fragment: RawFragment:}] advertise-peer-urls: [{Scheme:http Opaque: User: Host:localhost:2380 Path: RawPath: ForceQuery:false RawQuery: Fragment: RawFragment:}] init-cluster: eg-default-name=http://localhost:2380 cluster-state: new force-new-cluster: false&#xA;2022-07-04T13:47:37.516+08:00   INFO    cluster/cluster.go:332  client connect with endpoints: [http://localhost:2380]&#xA;2022-07-04T13:47:37.521+08:00   INFO    cluster/cluster.go:346  client is ready&#xA;2022-07-04T13:47:37.529+08:00   INFO    cluster/cluster.go:638  server is ready&#xA;2022-07-04T13:47:37.534+08:00   INFO    cluster/cluster.go:498  lease is ready (grant new one: b6a81c7bffb1a07)&#xA;2022-07-04T13:47:37.534+08:00   INFO    cluster/cluster.go:218  cluster is ready&#xA;2022-07-04T13:47:37.541+08:00   INFO    supervisor/supervisor.go:137    create TrafficController&#xA;2022-07-04T13:47:37.542+08:00   INFO    supervisor/supervisor.go:137    create RawConfigTrafficController&#xA;2022-07-04T13:47:37.544+08:00   INFO    supervisor/supervisor.go:137    create ServiceRegistry&#xA;2022-07-04T13:47:37.544+08:00   INFO    supervisor/supervisor.go:137    create StatusSyncController&#xA;2022-07-04T13:47:37.544+08:00   INFO    statussynccontroller/statussynccontroller.go:139        StatusUpdateMaxBatchSize is 20&#xA;2022-07-04T13:47:37.544+08:00   INFO    cluster/cluster.go:538  session is ready&#xA;2022-07-04T13:47:37.545+08:00   INFO    api/api.go:73   register api group admin&#xA;2022-07-04T13:47:37.545+08:00   INFO    api/server.go:86        api server running in localhost:2381&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default target of Makefile is to compile two binary into the &lt;code&gt;bin&lt;/code&gt; directory. &lt;code&gt;bin/easegress-server&lt;/code&gt; is the server-side binary, &lt;code&gt;bin/egctl&lt;/code&gt; is the client-side binary. We could add it to the &lt;code&gt;$PATH&lt;/code&gt; to simplify the following commands.&lt;/p&gt; &#xA;&lt;p&gt;We could run &lt;code&gt;easegress-server&lt;/code&gt; without specifying any arguments, which launch itself by opening default ports 2379, 2380, and 2381. We can change them in the configuration file or command-line arguments that are explained well in &lt;code&gt;easegress-server --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ egctl member list | grep &#34;cluster-role&#34;&#xA;    cluster-role: primary&#xA;$ egctl member list | grep &#34;api-addr&#34;&#xA;    api-addr: localhost:2381&#xA;$ egctl member list | grep &#34;name&#34;&#xA;    name: eg-default-name&#xA;    cluster-name: eg-cluster-default-name&#xA;$ egctl member list | grep &#34;id&#34;&#xA;    id: 689e371e88f78b6a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After launching successfully, we could check the status of the one-node cluster. It shows the static options and dynamic status of heartbeat and etcd.&lt;/p&gt; &#xA;&lt;h3&gt;Create an HTTPServer and Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;Now let&#39;s create an HTTPServer listening on port 10080 to handle the HTTP traffic.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;&#xA;kind: HTTPServer&#xA;name: server-demo&#xA;port: 10080&#xA;keepAlive: true&#xA;https: false&#xA;rules:&#xA;  - paths:&#xA;    - pathPrefix: /pipeline&#xA;      backend: pipeline-demo&#39; | egctl object create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rules above mean it will forward the traffic with the prefix &lt;code&gt;/pipeline&lt;/code&gt; to the &lt;code&gt;pipeline-demo&lt;/code&gt; pipeline because the pipeline hasn&#39;t been created yet, we will get 503 if we &lt;code&gt;curl&lt;/code&gt; it now. Next, let&#39;s create the pipeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;&#xA;name: pipeline-demo&#xA;kind: Pipeline&#xA;flow:&#xA;  - filter: proxy&#xA;filters:&#xA;  - name: proxy&#xA;    kind: Proxy&#xA;    pools:&#xA;    - servers:&#xA;      - url: http://127.0.0.1:9095&#xA;      - url: http://127.0.0.1:9096&#xA;      - url: http://127.0.0.1:9097&#xA;      loadBalance:&#xA;        policy: roundRobin&#39; | egctl object create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The pipeline means it will forward traffic to 3 backend endpoints, using the &lt;code&gt;roundRobin&lt;/code&gt; load balance policy.&lt;/p&gt; &#xA;&lt;h3&gt;Test&lt;/h3&gt; &#xA;&lt;p&gt;Now you can use an HTTP clients, such as &lt;code&gt;curl&lt;/code&gt;, to test the feature:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -v http://127.0.0.1:10080/pipeline&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you haven&#39;t set up backend services on ports 9095, 9096, and 9097 of the localhost, it returns 503 too. We provide a simple service for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ go run example/backend-service/mirror/mirror.go &amp;amp; # Running in background&#xA;$ curl http://127.0.0.1:10080/pipeline -d &#39;Hello, Easegress&#39;&#xA;Your Request&#xA;===============&#xA;Method: POST&#xA;URL   : /pipeline&#xA;Header: map[Accept:[*/*] Accept-Encoding:[gzip] Content-Type:[application/x-www-form-urlencoded] User-Agent:[curl/7.64.1]]&#xA;Body  : Hello, Easegress&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add Another Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;Now let&#39;s add another pipeline, it will get the address of an RSS feed from the request, read the RSS feed, build the article list into a Slack message, and then send it to Slack. But before creating the pipeline, please follow &lt;a href=&#34;https://api.slack.com/messaging/webhooks&#34;&gt;this document&lt;/a&gt; to create your own Slack webhook URL and replace the one in the below command with it.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/imgs/rss-pipeline.png&#34; width=&#34;480&#34;&gt; &lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;&#xA;name: rss-pipeline&#xA;kind: Pipeline&#xA;&#xA;flow:&#xA;- filter: validator&#xA;- filter: buildRssRequest&#xA;  namespace: rss&#xA;- filter: sendRssRequest&#xA;  namespace: rss&#xA;- filter: decompressResponse&#xA;  namespace: rss&#xA;- filter: buildSlackRequest&#xA;  namespace: slack&#xA;- filter: sendSlackRequest&#xA;  namespace: slack&#xA;- filter: buildResponse&#xA;&#xA;filters:&#xA;- name: validator&#xA;  kind: Validator&#xA;  headers:&#xA;    &#34;X-Rss-Url&#34;:&#xA;       regexp: ^https?://.+$&#xA;&#xA;- name: buildRssRequest&#xA;  kind: RequestBuilder&#xA;  template: |&#xA;    url: /developers/feed2json/convert?url={{index (index .requests.DEFAULT.Header &#34;X-Rss-Url&#34;) 0 | urlquery}}&#xA;&#xA;- name: sendRssRequest&#xA;  kind: Proxy&#xA;  pools:&#xA;  - loadBalance:&#xA;      policy: roundRobin&#xA;    servers:&#xA;    - url: https://www.toptal.com&#xA;  compression:&#xA;    minLength: 4096&#xA;&#xA;- name: buildSlackRequest&#xA;  kind: RequestBuilder&#xA;  template: |&#xA;    method: POST&#xA;    url: /services/T0XXXXXXXXX/B0YYYYYYY/ZZZZZZZZZZZZZZZZZZZZ   # This the Slack webhook address, please change it to your own.&#xA;    body: |&#xA;      {&#xA;         &#34;text&#34;: &#34;Recent posts - {{.responses.rss.JSONBody.title}}&#34;,&#xA;         &#34;blocks&#34;: [{&#xA;            &#34;type&#34;: &#34;section&#34;,&#xA;            &#34;text&#34;: {&#xA;              &#34;type&#34;: &#34;plain_text&#34;,&#xA;              &#34;text&#34;: &#34;Recent posts - {{.responses.rss.JSONBody.title}}&#34;&#xA;            }&#xA;         }, {&#xA;            &#34;type&#34;: &#34;section&#34;,&#xA;            &#34;text&#34;: {&#xA;              &#34;type&#34;: &#34;mrkdwn&#34;,&#xA;              &#34;text&#34;: &#34;{{range $index, $item := .responses.rss.JSONBody.items}}• &amp;lt;{{$item.url}}|{{$item.title}}&amp;gt;\n{{end}}&#34;&#xA;         }}]&#xA;      }&#xA;&#xA;- name: sendSlackRequest&#xA;  kind: Proxy&#xA;  pools:&#xA;  - loadBalance:&#xA;      policy: roundRobin&#xA;    servers:&#xA;    - url: https://hooks.slack.com&#xA;  compression:&#xA;    minLength: 4096&#xA;&#xA;- name: decompressResponse&#xA;  kind: ResponseAdaptor&#xA;  decompress: gzip&#xA;&#xA;- name: buildResponse&#xA;  kind: ResponseBuilder&#xA;  template: |&#xA;    statusCode: 200&#xA;    body: RSS feed has been sent to Slack successfully.&#39; | egctl object create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update the HTTPServer&lt;/h3&gt; &#xA;&lt;p&gt;Now let&#39;s update the HTTPServer to forward the traffic with prefix &lt;code&gt;/rss&lt;/code&gt; to the new pipeline.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ echo &#39;&#xA;kind: HTTPServer&#xA;name: server-demo&#xA;port: 10080&#xA;keepAlive: true&#xA;https: false&#xA;rules:&#xA;  - paths:&#xA;    - pathPrefix: /rss          # +&#xA;      backend: rss-pipeline     # +&#xA;    - pathPrefix: /pipeline&#xA;      backend: pipeline-demo&#39; | egctl object update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Test the RSS Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;Execute the below command, your slack will receive the article list of the RSS feed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -H X-Rss-Url:https://hnrss.org/newest?count=5 http://127.0.0.1:10080/rss&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note the maximum message size Slack allowed is about 3K, so you will need to limit the number of articles returned by the RSS feed of some sites(e.g. Hack News).&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/README.md&#34;&gt;Easegress Documentation&lt;/a&gt; for all documents.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/doc/Roadmap.md&#34;&gt;Easegress Roadmap&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://join.slack.com/t/openmegaease/shared_invite/zt-upo7v306-lYPHvVwKnvwlqR0Zl2vveA&#34;&gt;Join Slack Workspace&lt;/a&gt; for requirement, issue and development.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/megaease&#34;&gt;MegaEase on Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/CONTRIBUTING.md#contributing&#34;&gt;Contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Easegress is under the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/megaease/easegress/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>owncast/owncast</title>
    <updated>2022-08-29T01:40:26Z</updated>
    <id>tag:github.com,2022-08-29:/owncast/owncast</id>
    <link href="https://github.com/owncast/owncast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Take control over your live stream video by running it yourself. Streaming + chat out of the box.&lt;/p&gt;&lt;hr&gt;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/owncast/owncast&#34; alt=&#34;Owncast&#34;&gt; &lt;img src=&#34;https://owncast.online/images/logo.png&#34; alt=&#34;Logo&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Take control over your content and stream it yourself.&lt;/strong&gt; &lt;br&gt; &lt;a href=&#34;http://owncast.online&#34;&gt;&lt;strong&gt;Explore the docs »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://watch.owncast.online/&#34;&gt;View Demo&lt;/a&gt; · &lt;a href=&#34;https://broadcast.owncast.online/&#34;&gt;Use Our Server for Testing&lt;/a&gt; · &lt;a href=&#34;https://owncast.online/faq/&#34;&gt;FAQ&lt;/a&gt; · &lt;a href=&#34;https://github.com/owncast/owncast/issues&#34;&gt;Report Bug&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;!-- TABLE OF CONTENTS --&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/owncast/owncast/develop/#about-the-project&#34;&gt;About the Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/owncast/owncast/develop/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/owncast/owncast/develop/#use-with-your-existing-broadcasting-software&#34;&gt;Use with your broadcasting software&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/owncast/owncast/develop/#building-from-source&#34;&gt;Building from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/owncast/owncast/develop/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/owncast/owncast/develop/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/owncast/owncast/develop/#contact&#34;&gt;Contact&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- ABOUT THE PROJECT --&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://owncast.online/images/owncast-splash.png&#34;&gt; &lt;img src=&#34;https://owncast.online/images/owncast-splash.png&#34; width=&#34;70%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Owncast is an open source, self-hosted, decentralized, single user live video streaming and chat server for running your own live streams similar in style to the large mainstream options. It offers complete ownership over your content, interface, moderation and audience. &lt;a href=&#34;https://watch.owncast.online&#34;&gt;Visit the demo&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;img alt=&#34;GitHub all releases&#34; src=&#34;https://img.shields.io/github/downloads/owncast/owncast/total?style=for-the-badge&#34;&gt; &#xA; &lt;a href=&#34;https://hub.docker.com/r/gabekangas/owncast&#34;&gt; &lt;img alt=&#34;Docker Pulls&#34; src=&#34;https://img.shields.io/docker/pulls/gabekangas/owncast?style=for-the-badge&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/owncast/owncast/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22&#34;&gt; &lt;img alt=&#34;GitHub issues by-label&#34; src=&#34;https://img.shields.io/github/issues-raw/owncast/owncast/good%20first%20issue?style=for-the-badge&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://opencollective.com/owncast&#34;&gt; &lt;img alt=&#34;Open Collective backers and sponsors&#34; src=&#34;https://img.shields.io/opencollective/all/owncast?style=for-the-badge&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;!-- GETTING STARTED --&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The goal is to have a single service that you can run and it works out of the box. &lt;strong&gt;Visit the &lt;a href=&#34;https://owncast.online/docs/quickstart/&#34;&gt;Quickstart&lt;/a&gt; to get up and running.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Use with your existing broadcasting software&lt;/h2&gt; &#xA;&lt;p&gt;In general Owncast is compatible with any software that uses &lt;code&gt;RTMP&lt;/code&gt; to broadcast to a remote server. &lt;code&gt;RTMP&lt;/code&gt; is what all the major live streaming services use, so if you’re currently using one of those it’s likely that you can point your existing software at your Owncast instance instead.&lt;/p&gt; &#xA;&lt;p&gt;OBS, Streamlabs, Restream and many others have been used with Owncast. &lt;a href=&#34;https://owncast.online/docs/broadcasting/&#34;&gt;Read more about compatibility with existing software&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building from Source&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure you have the gcc compiler installed.&lt;/li&gt; &#xA; &lt;li&gt;Install the &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Go toolchain&lt;/a&gt; (1.16 or above).&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo. &lt;code&gt;git clone https://github.com/owncast/owncast&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;go run main.go&lt;/code&gt; will run from source.&lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;code&gt;http://yourserver:8080&lt;/code&gt; to access the web interface or &lt;code&gt;http://yourserver:8080/admin&lt;/code&gt; to access the admin.&lt;/li&gt; &#xA; &lt;li&gt;Point your &lt;a href=&#34;https://owncast.online/docs/broadcasting/&#34;&gt;broadcasting software&lt;/a&gt; at your new server and start streaming.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There is also a supplied &lt;code&gt;Dockerfile&lt;/code&gt; so you can spin it up from source with little effort. &lt;a href=&#34;https://owncast.online/docs/building/&#34;&gt;Read more about running from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bundling in latest admin from source&lt;/h3&gt; &#xA;&lt;p&gt;The admin ui is built at: &lt;a href=&#34;https://github.com/owncast/owncast-admin&#34;&gt;https://github.com/owncast/owncast-admin&lt;/a&gt; it is bundled into the final binary using pkger.&lt;/p&gt; &#xA;&lt;p&gt;To bundle in the latest admin UI:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;From the owncast directory run the packager script: &lt;code&gt;./build/admin/bundleAdmin.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile or run like above. &lt;code&gt;go run main.go&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Owncast is a growing open source project that is giving freedom, flexibility and fun to live streamers. And while we have a small team of kind, talented and thoughtful volunteers, we have gaps in our skillset that we’d love to fill so we can get even better at building tools that make a difference for people.&lt;/p&gt; &#xA;&lt;p&gt;We abide by our &lt;a href=&#34;https://owncast.online/contribute/&#34;&gt;Code of Conduct&lt;/a&gt; and feel strongly about open, appreciative, and empathetic people joining us. We’ve been very lucky to have this so far, so maybe you can help us with your skills and passion, too!&lt;/p&gt; &#xA;&lt;p&gt;There is a larger, more detailed, and more up-to-date &lt;a href=&#34;https://owncast.online/help/&#34;&gt;guide for helping contribute to Owncast on our website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;p&gt;Owncast consists of two repositories with two standalone projects. &lt;a href=&#34;https://github.com/owncast/owncast&#34;&gt;The repo you&#39;re looking at now&lt;/a&gt; is the core repository with the backend and frontend. &lt;a href=&#34;https://github.com/owncast/owncast-admin&#34;&gt;owncast/owncast-admin&lt;/a&gt; is an additional web project that is built separately and used for configuration and management of an Owncast server.&lt;/p&gt; &#xA;&lt;h3&gt;Suggestions when working with the Owncast codebase&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://golangci-lint.run/usage/install/&#34;&gt;golangci-lint&lt;/a&gt; for helpful warnings and suggestions &lt;a href=&#34;https://golangci-lint.run/usage/integrations/&#34;&gt;directly in your editor&lt;/a&gt; when writing Go.&lt;/li&gt; &#xA; &lt;li&gt;If using VSCode install the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=bierner.lit-html&#34;&gt;lit-html&lt;/a&gt; extension to aid in syntax highlighting of our frontend HTML + Preact.&lt;/li&gt; &#xA; &lt;li&gt;Run the project with &lt;code&gt;go run main.go&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See &lt;code&gt;LICENSE&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;!-- CONTACT --&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Project chat: &lt;a href=&#34;https://owncast.rocket.chat/home&#34;&gt;Join us on Rocket.Chat&lt;/a&gt; if you want to contribute, follow along, or if you have questions.&lt;/p&gt; &#xA;&lt;p&gt;Gabe Kangas - &lt;a href=&#34;https://fosstodon.org/@gabek&#34;&gt;@gabek@fosstodon.org&lt;/a&gt; - email &lt;a href=&#34;mailto:gabek@real-ity.com&#34;&gt;gabek@real-ity.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project Link: &lt;a href=&#34;https://github.com/owncast/owncast&#34;&gt;https://github.com/owncast/owncast&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cheat/cheat</title>
    <updated>2022-08-29T01:40:26Z</updated>
    <id>tag:github.com,2022-08-29:/cheat/cheat</id>
    <link href="https://github.com/cheat/cheat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;cheat allows you to create and view interactive cheatsheets on the command-line. It was designed to help remind *nix system administrators of options for commands that they use frequently, but not frequently enough to remember.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/cheat/cheat/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Workflow status&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;cheat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cheat&lt;/code&gt; allows you to create and view interactive cheatsheets on the command-line. It was designed to help remind *nix system administrators of options for commands that they use frequently, but not frequently enough to remember.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://imgs.xkcd.com/comics/tar.png&#34; alt=&#34;The obligatory xkcd&#34; title=&#34;The obligatory xkcd&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;cheat&lt;/code&gt; with &lt;a href=&#34;https://github.com/cheat/cheatsheets&#34;&gt;cheatsheets&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The next time you&#39;re forced to disarm a nuclear weapon without consulting Google, you may run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat tar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will be presented with a cheatsheet resembling the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# To extract an uncompressed archive:&#xA;tar -xvf &#39;/path/to/foo.tar&#39;&#xA;&#xA;# To extract a .gz archive:&#xA;tar -xzvf &#39;/path/to/foo.tgz&#39;&#xA;&#xA;# To create a .gz archive:&#xA;tar -czvf &#39;/path/to/foo.tgz&#39; &#39;/path/to/foo/&#39;&#xA;&#xA;# To extract a .bz2 archive:&#xA;tar -xjvf &#39;/path/to/foo.tgz&#39;&#xA;&#xA;# To create a .bz2 archive:&#xA;tar -cjvf &#39;/path/to/foo.tgz&#39; &#39;/path/to/foo/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To view a cheatsheet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat tar      # a &#34;top-level&#34; cheatsheet&#xA;cheat foo/bar  # a &#34;nested&#34; cheatsheet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To edit a cheatsheet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat -e tar     # opens the &#34;tar&#34; cheatsheet for editing, or creates it if it does not exist&#xA;cheat -e foo/bar # nested cheatsheets are accessed like this&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the configured cheatpaths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list all available cheatsheets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list all cheatsheets that are tagged with &#34;networking&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat -l -t networking&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To list all cheatsheets on the &#34;personal&#34; path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat -l -p personal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To search for the phrase &#34;ssh&#34; among cheatsheets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat -s ssh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To search (by regex) for cheatsheets that contain an IP address:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat -r -s &#39;(?:[0-9]{1,3}\.){3}[0-9]{1,3}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Flags may be combined in intuitive ways. Example: to search sheets on the &#34;personal&#34; cheatpath that are tagged with &#34;networking&#34; and match a regex:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat -p personal -t networking --regex -s &#39;(?:[0-9]{1,3}\.){3}[0-9]{1,3}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;For installation and configuration instructions, see &lt;a href=&#34;https://raw.githubusercontent.com/cheat/cheat/master/INSTALLING.md&#34;&gt;INSTALLING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cheatsheets&lt;/h2&gt; &#xA;&lt;p&gt;Cheatsheets are plain-text files with no file extension, and are named according to the command used to view them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cheat tar     # file is named &#34;tar&#34;&#xA;cheat foo/bar # file is named &#34;bar&#34;, in a &#34;foo&#34; subdirectory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cheatsheet text may optionally be preceeded by a YAML frontmatter header that assigns tags and specifies syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;---&#xA;syntax: javascript&#xA;tags: [ array, map ]&#xA;---&#xA;// To map over an array:&#xA;const squares = [1, 2, 3, 4].map(x =&amp;gt; x * x);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;cheat&lt;/code&gt; executable includes no cheatsheets, but &lt;a href=&#34;https://github.com/cheat/cheatsheets&#34;&gt;community-sourced cheatsheets are available&lt;/a&gt;. You will be asked if you would like to install the community-sourced cheatsheets the first time you run &lt;code&gt;cheat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Cheatpaths&lt;/h2&gt; &#xA;&lt;p&gt;Cheatsheets are stored on &#34;cheatpaths&#34;, which are directories that contain cheatsheets. Cheatpaths are specified in the &lt;code&gt;conf.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;It can be useful to configure &lt;code&gt;cheat&lt;/code&gt; against multiple cheatpaths. A common pattern is to store cheatsheets from multiple repositories on individual cheatpaths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# conf.yml:&#xA;# ...&#xA;cheatpaths:&#xA;  - name: community                   # a name for the cheatpath&#xA;    path: ~/documents/cheat/community # the path&#39;s location on the filesystem&#xA;    tags: [ community ]               # these tags will be applied to all sheets on the path&#xA;    readonly: true                    # if true, `cheat` will not create new cheatsheets here&#xA;&#xA;  - name: personal&#xA;    path: ~/documents/cheat/personal  # this is a separate directory and repository than above&#xA;    tags: [ personal ]&#xA;    readonly: false                   # new sheets may be written here&#xA;# ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;readonly&lt;/code&gt; option instructs &lt;code&gt;cheat&lt;/code&gt; not to edit (or create) any cheatsheets on the path. This is useful to prevent merge-conflicts from arising on upstream cheatsheet repositories.&lt;/p&gt; &#xA;&lt;p&gt;If a user attempts to edit a cheatsheet on a read-only cheatpath, &lt;code&gt;cheat&lt;/code&gt; will transparently copy that sheet to a writeable directory before opening it for editing.&lt;/p&gt; &#xA;&lt;h3&gt;Directory-scoped Cheatpaths&lt;/h3&gt; &#xA;&lt;p&gt;At times, it can be useful to closely associate cheatsheets with a directory on your filesystem. &lt;code&gt;cheat&lt;/code&gt; facilitates this by searching for a &lt;code&gt;.cheat&lt;/code&gt; folder in the current working directory. If found, the &lt;code&gt;.cheat&lt;/code&gt; directory will (temporarily) be added to the cheatpaths.&lt;/p&gt; &#xA;&lt;h2&gt;Autocompletion&lt;/h2&gt; &#xA;&lt;p&gt;Shell autocompletion is currently available for &lt;code&gt;bash&lt;/code&gt;, &lt;code&gt;fish&lt;/code&gt;, and &lt;code&gt;zsh&lt;/code&gt;. Copy the relevant &lt;a href=&#34;https://github.com/cheat/cheat/tree/master/scripts&#34;&gt;completion script&lt;/a&gt; into the appropriate directory on your filesystem to enable autocompletion. (This directory will vary depending on operating system and shell specifics.)&lt;/p&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;cheat&lt;/code&gt; supports enhanced autocompletion via integration with &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;. To enable &lt;code&gt;fzf&lt;/code&gt; integration:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure that &lt;code&gt;fzf&lt;/code&gt; is available on your &lt;code&gt;$PATH&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set an envvar: &lt;code&gt;export CHEAT_USE_FZF=true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>