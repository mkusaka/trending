<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-21T01:43:45Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>armosec/kubescape</title>
    <updated>2022-06-21T01:43:45Z</updated>
    <id>tag:github.com,2022-06-21:/armosec/kubescape</id>
    <link href="https://github.com/armosec/kubescape" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Kubescape is a K8s open-source tool providing a multi-cloud K8s single pane of glass, including risk analysis, security compliance, RBAC visualizer and image vulnerabilities scanning.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/docs/kubescape.png&#34; width=&#34;300&#34; alt=&#34;logo&#34; align=&#34;center&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/armosec/kubescape/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/armosec/kubescape/actions/workflows/build.yaml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/armosec/kubescape&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/armosec/kubescape&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kubescape is a K8s open-source tool providing a multi-cloud K8s single pane of glass, including risk analysis, security compliance, RBAC visualizer and image vulnerabilities scanning. Kubescape scans K8s clusters, YAML files, and HELM charts, detecting misconfigurations according to multiple frameworks (such as the &lt;a href=&#34;https://www.armosec.io/blog/kubernetes-hardening-guidance-summary-by-armo&#34;&gt;NSA-CISA&lt;/a&gt; , &lt;a href=&#34;https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/&#34;&gt;MITRE ATT&amp;amp;CK¬Æ&lt;/a&gt;), software vulnerabilities, and RBAC (role-based-access-control) violations at early stages of the CI/CD pipeline, calculates risk score instantly and shows risk trends over time. It became one of the fastest-growing Kubernetes tools among developers due to its easy-to-use CLI interface, flexible output formats, and automated scanning capabilities, saving Kubernetes users and admins‚Äô precious time, effort, and resources. Kubescape integrates natively with other DevOps tools, including Jenkins, CircleCI, Github workflows, Prometheus, and Slack, and supports multi-cloud K8s deployments like EKS, GKE, and AKS.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- # Kubescape Coverage&#xA;&lt;img src=&#34;docs/ksfromcodetodeploy.png&#34;&gt;&#xA;&#xA;&lt;/br&gt; --&gt; &#xA;&lt;h1&gt;Kubescape CLI:&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/docs/demo.gif&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- # Kubescape overview:&#xA;&lt;img src=&#34;docs/ARMO-header-2022.gif&#34;&gt; --&gt; &#xA;&lt;h1&gt;TL;DR&lt;/h1&gt; &#xA;&lt;h2&gt;Install:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -s https://raw.githubusercontent.com/armosec/kubescape/master/install.sh | /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/#install-on-windows&#34;&gt;Install on windows&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/#install-on-macos&#34;&gt;Install on macOS&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Run:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --submit --enable-host-scan --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/docs/summary.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Kubescape is an open source project, we welcome your feedback and ideas for improvement. We‚Äôre also aiming to collaborate with the Kubernetes community to help make the tests themselves more robust and complete as Kubernetes develops.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h3&gt;Click &lt;a href=&#34;https://github.com/armosec/kubescape/stargazers&#34;&gt;üëç&lt;/a&gt; if you want us to continue to develop and improve Kubescape üòÄ&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Being part of the team&lt;/h1&gt; &#xA;&lt;p&gt;We invite you to our team! We are excited about this project and want to return the love we get.&lt;/p&gt; &#xA;&lt;p&gt;Want to contribute? Want to discuss something? Have an issue?&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feel free to pick a task from the &lt;a href=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/docs/roadmap.md&#34;&gt;roadmap&lt;/a&gt; or suggest a feature of your own. &lt;a href=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/MAINTAINERS.md&#34;&gt;Contact us&lt;/a&gt; directly for more information :)&lt;/li&gt; &#xA; &lt;li&gt;Open a issue, we are trying to respond within 48 hours&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://armosec.github.io/kubescape/&#34;&gt;Join us&lt;/a&gt; in a discussion on our discord server!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://armosec.github.io/kubescape/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/docs/discord-banner.png&#34; width=&#34;100&#34; alt=&#34;logo&#34; align=&#34;center&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/discord/893048809884643379&#34; alt=&#34;discord&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Options and examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.armo.cloud/docs&#34;&gt;Kubescape docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Playground&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.katacoda.com/pathaksaiyam/scenarios/kubescape&#34;&gt;Kubescape playground&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/wdBkt_0Qhbg&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/ZATGiDIDBQk&#34;&gt;How To Secure Kubernetes Clusters With Kubescape And Armo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Ox6DaR7_4ZI&#34;&gt;Scan Kubernetes YAML files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/IGXL9s37smM&#34;&gt;Scan Kubescape on an air-gapped environment (offline support)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/OzpvxGmCR80&#34;&gt;Managing exceptions in the Kubescape SaaS version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/12Sanq_rEhs&#34;&gt;Configure and run customized frameworks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customize controls configurations. &lt;a href=&#34;https://youtu.be/955psg6TVu4&#34;&gt;Kubescape CLI&lt;/a&gt;, &lt;a href=&#34;https://youtu.be/lIMVSVhH33o&#34;&gt;Kubescape SaaS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install on Windows&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requires powershell v5.0+&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;iwr -useb https://raw.githubusercontent.com/armosec/kubescape/master/install.ps1 | iex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: if you get an error you might need to change the execution policy (i.e. enable Powershell) with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ExecutionPolicy RemoteSigned -scope CurrentUser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install on macOS&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code&gt; brew tap armosec/kubescape&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;pre&gt;&lt;code&gt; brew install kubescape&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage &amp;amp; Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Scan a running Kubernetes cluster and submit results to the &lt;a href=&#34;https://portal.armo.cloud/&#34;&gt;Kubescape SaaS version&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --submit --enable-host-scan  --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Read &lt;a href=&#34;https://hub.armo.cloud/docs/host-sensor&#34;&gt;here&lt;/a&gt; more about the &lt;code&gt;enable-host-scan&lt;/code&gt; flag&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Scan a running Kubernetes cluster with &lt;a href=&#34;https://www.nsa.gov/Press-Room/News-Highlights/Article/Article/2716980/nsa-cisa-release-kubernetes-hardening-guidance/&#34;&gt;&lt;code&gt;nsa&lt;/code&gt;&lt;/a&gt; framework and submit results to the &lt;a href=&#34;https://portal.armo.cloud/&#34;&gt;Kubescape SaaS version&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan framework nsa --submit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scan a running Kubernetes cluster with &lt;a href=&#34;https://www.microsoft.com/security/blog/2021/03/23/secure-containerized-environments-with-updated-threat-matrix-for-kubernetes/&#34;&gt;&lt;code&gt;MITRE ATT&amp;amp;CK¬Æ&lt;/code&gt;&lt;/a&gt; framework and submit results to the &lt;a href=&#34;https://portal.armo.cloud/&#34;&gt;Kubescape SaaS version&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan framework mitre --submit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scan a running Kubernetes cluster with a specific control using the control name or control ID. &lt;a href=&#34;https://hub.armo.cloud/docs/controls&#34;&gt;List of controls&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan control &#34;Privileged container&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scan specific namespaces&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --include-namespaces development,staging,production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scan cluster and exclude some namespaces&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --exclude-namespaces kube-system,kube-public&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scan local &lt;code&gt;yaml&lt;/code&gt;/&lt;code&gt;json&lt;/code&gt; files before deploying. &lt;a href=&#34;https://youtu.be/Ox6DaR7_4ZI&#34;&gt;Take a look at the demonstration&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan *.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scan kubernetes manifest files from a public github repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan https://github.com/armosec/kubescape&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Display all scanned resources (including the resources who passed)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output in &lt;code&gt;json&lt;/code&gt; format&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Add the &lt;code&gt;--format-version v2&lt;/code&gt; flag&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --format json --format-version v2 --output results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output in &lt;code&gt;junit xml&lt;/code&gt; format&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --format junit --output results.xml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output in &lt;code&gt;pdf&lt;/code&gt; format - Contributed by &lt;a href=&#34;https://github.com/alegrey91&#34;&gt;@alegrey91&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --format pdf --output results.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Output in &lt;code&gt;prometheus&lt;/code&gt; metrics format - Contributed by &lt;a href=&#34;https://github.com/Joibel&#34;&gt;@Joibel&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --format prometheus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scan with exceptions, objects with exceptions will be presented as &lt;code&gt;exclude&lt;/code&gt; and not &lt;code&gt;fail&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/examples/exceptions/README.md&#34;&gt;Full documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --exceptions examples/exceptions/exclude-kube-namespaces.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Scan Helm charts - Render the helm chart using &lt;a href=&#34;https://helm.sh/docs/helm/helm_template/&#34;&gt;&lt;code&gt;helm template&lt;/code&gt;&lt;/a&gt; and pass to stdout&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;helm template [NAME] [CHART] [flags] --dry-run | kubescape scan -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;helm template bitnami/mysql --generate-name --dry-run | kubescape scan -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Offline/Air-gaped Environment Support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/IGXL9s37smM&#34;&gt;Video tutorial&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is possible to run Kubescape offline!&lt;/p&gt; &#xA;&lt;h4&gt;Download all artifacts&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and save in local directory, if path not specified, will save all in &lt;code&gt;~/.kubescape&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape download artifacts --output path/to/local/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the downloaded artifacts to the air-gaped/offline environment&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scan using the downloaded artifacts&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan --use-artifacts-from path/to/local/dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Download a single artifacts&lt;/h4&gt; &#xA;&lt;p&gt;You can also download a single artifacts and scan with the &lt;code&gt;--use-from&lt;/code&gt; flag&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download and save in file, if file name not specified, will save in &lt;code&gt;~/.kubescape/&amp;lt;framework name&amp;gt;.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape download framework nsa --output /path/nsa.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the downloaded artifacts to the air-gaped/offline environment&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scan using the downloaded framework&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape scan framework nsa --use-from /path/nsa.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Scan Periodically using Helm - Contributed by &lt;a href=&#34;https://github.com/yonahd&#34;&gt;@yonahd&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hub.armo.cloud/docs/installation-of-armo-in-cluster&#34;&gt;Please follow the instructions here&lt;/a&gt; &lt;a href=&#34;https://github.com/armosec/armo-helm&#34;&gt;helm chart repo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Scan using docker image&lt;/h2&gt; &#xA;&lt;p&gt;Official Docker image &lt;code&gt;quay.io/armosec/kubescape&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -v &#34;$(pwd)/example.yaml:/app/example.yaml  quay.io/armosec/kubescape scan /app/example.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you wish, you can &lt;a href=&#34;https://raw.githubusercontent.com/armosec/kubescape/master/build/README.md&#34;&gt;build the docker image on your own&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Submit data manually&lt;/h1&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;submit&lt;/code&gt; command if you wish to submit data manually&lt;/p&gt; &#xA;&lt;h2&gt;Submit scan results manually&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Support forward compatibility by using the &lt;code&gt;--format-version v2&lt;/code&gt; flag&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;First, scan your cluster using the &lt;code&gt;json&lt;/code&gt; format flag: &lt;code&gt;kubescape scan framework &amp;lt;name&amp;gt; --format json --format-version v2 --output path/to/results.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now you can submit the results to the Kubescape SaaS version -&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;kubescape submit results path/to/results.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Integrations&lt;/h1&gt; &#xA;&lt;h2&gt;VS Code Extension&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/d/kubescape.kubescape?label=VScode&#34; alt=&#34;Visual Studio Marketplace Downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/open-vsx/dt/kubescape/kubescape?label=openVSX&amp;amp;color=yellowgreen&#34; alt=&#34;Open VSX&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Scan the YAML files while writing them using the &lt;a href=&#34;https://github.com/armosec/vscode-kubescape/raw/master/README.md&#34;&gt;vs code extension&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Lens Extension&lt;/h2&gt; &#xA;&lt;p&gt;View Kubescape scan results directly in &lt;a href=&#34;https://k8slens.dev/&#34;&gt;Lens IDE&lt;/a&gt; using kubescape &lt;a href=&#34;https://github.com/armosec/lens-kubescape/raw/master/README.md&#34;&gt;Lens extension&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Under the hood&lt;/h1&gt; &#xA;&lt;h2&gt;Technology&lt;/h2&gt; &#xA;&lt;p&gt;Kubescape based on OPA engine: &lt;a href=&#34;https://github.com/open-policy-agent/opa&#34;&gt;https://github.com/open-policy-agent/opa&lt;/a&gt; and ARMO&#39;s posture controls.&lt;/p&gt; &#xA;&lt;p&gt;The tools retrieves Kubernetes objects from the API server and runs a set of &lt;a href=&#34;https://www.openpolicyagent.org/docs/latest/policy-language/&#34;&gt;rego&#39;s snippets&lt;/a&gt; developed by &lt;a href=&#34;https://www.armosec.io/&#34;&gt;ARMO&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The results by default printed in a pretty &#34;console friendly&#34; manner, but they can be retrieved in JSON format for further processing.&lt;/p&gt; &#xA;&lt;p&gt;Kubescape is an open source project, we welcome your feedback and ideas for improvement. We‚Äôre also aiming to collaborate with the Kubernetes community to help make the tests themselves more robust and complete as Kubernetes develops.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks to all the contributors ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/armosec/kubescape/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=armosec/kubescape&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>alecthomas/chroma</title>
    <updated>2022-06-21T01:43:45Z</updated>
    <id>tag:github.com,2022-06-21:/alecthomas/chroma</id>
    <link href="https://github.com/alecthomas/chroma" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A general purpose syntax highlighter in pure Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Chroma ‚Äî A general purpose syntax highlighter in pure Go&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/alecthomas/chroma&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/alecthomas/chroma?status.svg?sanitize=true&#34; alt=&#34;Golang Documentation&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alecthomas/chroma/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/alecthomas/chroma/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://invite.slack.golangbridge.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?logo=slack&amp;amp;style=flat&amp;amp;label=slack&amp;amp;color=green&amp;amp;message=gophers&#34; alt=&#34;Slack chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; As Chroma has just been released, its API is still in flux. That said, the high-level interface should not change significantly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Chroma takes source code and other structured text and converts it into syntax highlighted HTML, ANSI-coloured text, etc.&lt;/p&gt; &#xA;&lt;p&gt;Chroma is based heavily on &lt;a href=&#34;http://pygments.org/&#34;&gt;Pygments&lt;/a&gt;, and includes translators for Pygments lexers and styles.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-table-of-contents&#34; name=&#34;table-of-contents&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#supported-languages&#34;&gt;Supported languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#try-it&#34;&gt;Try it&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#using-the-library&#34;&gt;Using the library&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#identifying-the-language&#34;&gt;Identifying the language&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#formatting-the-output&#34;&gt;Formatting the output&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#the-html-formatter&#34;&gt;The HTML formatter&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#more-detail&#34;&gt;More detail&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#lexers&#34;&gt;Lexers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#formatters&#34;&gt;Formatters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#styles&#34;&gt;Styles&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#command-line-interface&#34;&gt;Command-line interface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alecthomas/chroma/master/#whats-missing-compared-to-pygments&#34;&gt;What&#39;s missing compared to Pygments?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-supported-languages&#34; name=&#34;supported-languages&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Prefix&lt;/th&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;A&lt;/td&gt; &#xA;   &lt;td&gt;ABAP, ABNF, ActionScript, ActionScript 3, Ada, Angular2, ANTLR, ApacheConf, APL, AppleScript, Arduino, Awk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;B&lt;/td&gt; &#xA;   &lt;td&gt;Ballerina, Base Makefile, Bash, Batchfile, BibTeX, Bicep, BlitzBasic, BNF, Brainfuck&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C, C#, C++, Caddyfile, Caddyfile Directives, Cap&#39;n Proto, Cassandra CQL, Ceylon, CFEngine3, cfstatement, ChaiScript, Cheetah, Clojure, CMake, COBOL, CoffeeScript, Common Lisp, Coq, Crystal, CSS, Cython&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;D&lt;/td&gt; &#xA;   &lt;td&gt;D, Dart, Diff, Django/Jinja, Docker, DTD, Dylan&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;E&lt;/td&gt; &#xA;   &lt;td&gt;EBNF, Elixir, Elm, EmacsLisp, Erlang&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;F&lt;/td&gt; &#xA;   &lt;td&gt;Factor, Fish, Forth, Fortran, FSharp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;G&lt;/td&gt; &#xA;   &lt;td&gt;GAS, GDScript, Genshi, Genshi HTML, Genshi Text, Gherkin, GLSL, Gnuplot, Go, Go HTML Template, Go Text Template, GraphQL, Groff, Groovy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;H&lt;/td&gt; &#xA;   &lt;td&gt;Handlebars, Haskell, Haxe, HCL, Hexdump, HLB, HTML, HTTP, Hy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;I&lt;/td&gt; &#xA;   &lt;td&gt;Idris, Igor, INI, Io&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;J&lt;/td&gt; &#xA;   &lt;td&gt;J, Java, JavaScript, JSON, Julia, Jungle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;L&lt;/td&gt; &#xA;   &lt;td&gt;Lighttpd configuration file, LLVM, Lua&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;M&lt;/td&gt; &#xA;   &lt;td&gt;Mako, markdown, Mason, Mathematica, Matlab, MiniZinc, MLIR, Modula-2, MonkeyC, MorrowindScript, Myghty, MySQL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;NASM, Newspeak, Nginx configuration file, Nim, Nix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;O&lt;/td&gt; &#xA;   &lt;td&gt;Objective-C, OCaml, Octave, OnesEnterprise, OpenEdge ABL, OpenSCAD, Org Mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;P&lt;/td&gt; &#xA;   &lt;td&gt;PacmanConf, Perl, PHP, PHTML, Pig, PkgConfig, PL/pgSQL, plaintext, Pony, PostgreSQL SQL dialect, PostScript, POVRay, PowerShell, Prolog, PromQL, Protocol Buffer, Puppet, Python 2, Python&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Q&lt;/td&gt; &#xA;   &lt;td&gt;QBasic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;R, Racket, Ragel, Raku, react, ReasonML, reg, reStructuredText, Rexx, Ruby, Rust&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;S&lt;/td&gt; &#xA;   &lt;td&gt;SAS, Sass, Scala, Scheme, Scilab, SCSS, Smalltalk, Smarty, Snobol, Solidity, SPARQL, SQL, SquidConf, Standard ML, Stylus, Svelte, Swift, SYSTEMD, systemverilog&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;T&lt;/td&gt; &#xA;   &lt;td&gt;TableGen, TASM, Tcl, Tcsh, Termcap, Terminfo, Terraform, TeX, Thrift, TOML, TradingView, Transact-SQL, Turing, Turtle, Twig, TypeScript, TypoScript, TypoScriptCssData, TypoScriptHtmlData&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;VB.net, verilog, VHDL, VimL, vue&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;W&lt;/td&gt; &#xA;   &lt;td&gt;WDTE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;X&lt;/td&gt; &#xA;   &lt;td&gt;XML, Xorg&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Y&lt;/td&gt; &#xA;   &lt;td&gt;YAML, YANG&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Z&lt;/td&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;I will attempt to keep this section up to date, but an authoritative list can be displayed with &lt;code&gt;chroma --list&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-try-it&#34; name=&#34;try-it&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Try it&lt;/h2&gt; &#xA;&lt;p&gt;Try out various languages and styles on the &lt;a href=&#34;https://swapoff.org/chroma/playground/&#34;&gt;Chroma Playground&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-using-the-library&#34; name=&#34;using-the-library&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using the library&lt;/h2&gt; &#xA;&lt;p&gt;Chroma, like Pygments, has the concepts of &lt;a href=&#34;https://github.com/alecthomas/chroma/tree/master/lexers&#34;&gt;lexers&lt;/a&gt;, &lt;a href=&#34;https://github.com/alecthomas/chroma/tree/master/formatters&#34;&gt;formatters&lt;/a&gt; and &lt;a href=&#34;https://github.com/alecthomas/chroma/tree/master/styles&#34;&gt;styles&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Lexers convert source text into a stream of tokens, styles specify how token types are mapped to colours, and formatters convert tokens and styles into formatted output.&lt;/p&gt; &#xA;&lt;p&gt;A package exists for each of these, containing a global &lt;code&gt;Registry&lt;/code&gt; variable with all of the registered implementations. There are also helper functions for using the registry in each package, such as looking up lexers by name or matching filenames, etc.&lt;/p&gt; &#xA;&lt;p&gt;In all cases, if a lexer, formatter or style can not be determined, &lt;code&gt;nil&lt;/code&gt; will be returned. In this situation you may want to default to the &lt;code&gt;Fallback&lt;/code&gt; value in each respective package, which provides sane defaults.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-quick-start&#34; name=&#34;quick-start&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;p&gt;A convenience function exists that can be used to simply format some source text, without any effort:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := quick.Highlight(os.Stdout, someSourceCode, &#34;go&#34;, &#34;html&#34;, &#34;monokai&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-identifying-the-language&#34; name=&#34;identifying-the-language&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Identifying the language&lt;/h3&gt; &#xA;&lt;p&gt;To highlight code, you&#39;ll first have to identify what language the code is written in. There are three primary ways to do that:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Detect the language from its filename.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lexer := lexers.Match(&#34;foo.go&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Explicitly specify the language by its Chroma syntax ID (a full list is available from &lt;code&gt;lexers.Names()&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lexer := lexers.Get(&#34;go&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Detect the language from its content.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lexer := lexers.Analyse(&#34;package main\n\nfunc main()\n{\n}\n&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In all cases, &lt;code&gt;nil&lt;/code&gt; will be returned if the language can not be identified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;if lexer == nil {&#xA;  lexer = lexers.Fallback&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At this point, it should be noted that some lexers can be extremely chatty. To mitigate this, you can use the coalescing lexer to coalesce runs of identical token types into a single token:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;lexer = chroma.Coalesce(lexer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-formatting-the-output&#34; name=&#34;formatting-the-output&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Formatting the output&lt;/h3&gt; &#xA;&lt;p&gt;Once a language is identified you will need to pick a formatter and a style (theme).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;style := styles.Get(&#34;swapoff&#34;)&#xA;if style == nil {&#xA;  style = styles.Fallback&#xA;}&#xA;formatter := formatters.Get(&#34;html&#34;)&#xA;if formatter == nil {&#xA;  formatter = formatters.Fallback&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then obtain an iterator over the tokens:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;contents, err := ioutil.ReadAll(r)&#xA;iterator, err := lexer.Tokenise(nil, string(contents))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally, format the tokens from the iterator:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := formatter.Format(w, style, iterator)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-the-html-formatter&#34; name=&#34;the-html-formatter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;The HTML formatter&lt;/h3&gt; &#xA;&lt;p&gt;By default the &lt;code&gt;html&lt;/code&gt; registered formatter generates standalone HTML with embedded CSS. More flexibility is available through the &lt;code&gt;formatters/html&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;Firstly, the output generated by the formatter can be customised with the following constructor options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Standalone()&lt;/code&gt; - generate standalone HTML with embedded CSS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithClasses()&lt;/code&gt; - use classes rather than inlined style attributes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ClassPrefix(prefix)&lt;/code&gt; - prefix each generated CSS class.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TabWidth(width)&lt;/code&gt; - Set the rendered tab width, in characters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WithLineNumbers()&lt;/code&gt; - Render line numbers (style with &lt;code&gt;LineNumbers&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LinkableLineNumbers()&lt;/code&gt; - Make the line numbers linkable and be a link to themselves.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HighlightLines(ranges)&lt;/code&gt; - Highlight lines in these ranges (style with &lt;code&gt;LineHighlight&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LineNumbersInTable()&lt;/code&gt; - Use a table for formatting line numbers and code, rather than spans.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If &lt;code&gt;WithClasses()&lt;/code&gt; is used, the corresponding CSS can be obtained from the formatter with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;formatter := html.New(html.WithClasses(true))&#xA;err := formatter.WriteCSS(w, style)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-more-detail&#34; name=&#34;more-detail&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;More detail&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-lexers&#34; name=&#34;lexers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Lexers&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://pygments.org/docs/lexerdevelopment/&#34;&gt;Pygments documentation&lt;/a&gt; for details on implementing lexers. Most concepts apply directly to Chroma, but see existing lexer implementations for real examples.&lt;/p&gt; &#xA;&lt;p&gt;In many cases lexers can be automatically converted directly from Pygments by using the included Python 3 script &lt;code&gt;pygments2chroma.py&lt;/code&gt;. I use something like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;python3 _tools/pygments2chroma.py \&#xA;  pygments.lexers.jvm.KotlinLexer \&#xA;  &amp;gt; lexers/k/kotlin.go \&#xA;  &amp;amp;&amp;amp; gofmt -s -w lexers/k/kotlin.go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See notes in &lt;a href=&#34;https://github.com/alecthomas/chroma/raw/master/pygments-lexers.txt&#34;&gt;pygments-lexers.txt&lt;/a&gt; for a list of lexers, and notes on some of the issues importing them.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-formatters&#34; name=&#34;formatters&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Formatters&lt;/h3&gt; &#xA;&lt;p&gt;Chroma supports HTML output, as well as terminal output in 8 colour, 256 colour, and true-colour.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;noop&lt;/code&gt; formatter is included that outputs the token text only, and a &lt;code&gt;tokens&lt;/code&gt; formatter outputs raw tokens. The latter is useful for debugging lexers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-styles&#34; name=&#34;styles&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Styles&lt;/h3&gt; &#xA;&lt;p&gt;Chroma styles use the &lt;a href=&#34;http://pygments.org/docs/styles/&#34;&gt;same syntax&lt;/a&gt; as Pygments.&lt;/p&gt; &#xA;&lt;p&gt;All Pygments styles have been converted to Chroma using the &lt;code&gt;_tools/style.py&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;When you work with one of &lt;a href=&#34;https://github.com/alecthomas/chroma/tree/master/styles&#34;&gt;Chroma&#39;s styles&lt;/a&gt;, know that the &lt;code&gt;chroma.Background&lt;/code&gt; token type provides the default style for tokens. It does so by defining a foreground color and background color.&lt;/p&gt; &#xA;&lt;p&gt;For example, this gives each token name not defined in the style a default color of &lt;code&gt;#f8f8f8&lt;/code&gt; and uses &lt;code&gt;#000000&lt;/code&gt; for the highlighted code block&#39;s background:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;chroma.Background: &#34;#f8f8f2 bg:#000000&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, token types in a style file are hierarchical. For instance, when &lt;code&gt;CommentSpecial&lt;/code&gt; is not defined, Chroma uses the token style from &lt;code&gt;Comment&lt;/code&gt;. So when several comment tokens use the same color, you&#39;ll only need to define &lt;code&gt;Comment&lt;/code&gt; and override the one that has a different color.&lt;/p&gt; &#xA;&lt;p&gt;For a quick overview of the available styles and how they look, check out the &lt;a href=&#34;https://xyproto.github.io/splash/docs/&#34;&gt;Chroma Style Gallery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-command-line-interface&#34; name=&#34;command-line-interface&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Command-line interface&lt;/h2&gt; &#xA;&lt;p&gt;A command-line interface to Chroma is included.&lt;/p&gt; &#xA;&lt;p&gt;Binaries are available to install from &lt;a href=&#34;https://github.com/alecthomas/chroma/releases&#34;&gt;the releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The CLI can be used as a preprocessor to colorise output of &lt;code&gt;less(1)&lt;/code&gt;, see documentation for the &lt;code&gt;LESSOPEN&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;--fail&lt;/code&gt; flag can be used to suppress output and return with exit status 1 to facilitate falling back to some other preprocessor in case chroma does not resolve a specific lexer to use for the given file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;export LESSOPEN=&#39;| p() { chroma --fail &#34;$1&#34; || cat &#34;$1&#34;; }; p &#34;%s&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace &lt;code&gt;cat&lt;/code&gt; with your favourite fallback preprocessor.&lt;/p&gt; &#xA;&lt;p&gt;When invoked as &lt;code&gt;.lessfilter&lt;/code&gt;, the &lt;code&gt;--fail&lt;/code&gt; flag is automatically turned on under the hood for easy integration with &lt;a href=&#34;https://manpages.debian.org/lesspipe#USER_DEFINED_FILTERS&#34;&gt;lesspipe shipping with Debian and derivatives&lt;/a&gt;; for that setup the &lt;code&gt;chroma&lt;/code&gt; executable can be just symlinked to &lt;code&gt;~/.lessfilter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;markdown-whats-missing-compared-to-pygments&#34; name=&#34;whats-missing-compared-to-pygments&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s missing compared to Pygments?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Quite a few lexers, for various reasons (pull-requests welcome): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pygments lexers for complex languages often include custom code to handle certain aspects, such as Raku&#39;s ability to nest code inside regular expressions. These require time and effort to convert.&lt;/li&gt; &#xA;   &lt;li&gt;I mostly only converted languages I had heard of, to reduce the porting cost.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Some more esoteric features of Pygments are omitted for simplicity.&lt;/li&gt; &#xA; &lt;li&gt;Though the Chroma API supports content detection, very few languages support them. I have plans to implement a statistical analyser at some point, but not enough time.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>alibaba/IOC-golang</title>
    <updated>2022-06-21T01:43:45Z</updated>
    <id>tag:github.com,2022-06-21:/alibaba/IOC-golang</id>
    <link href="https://github.com/alibaba/IOC-golang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‰∏ÄÊ¨æÊúçÂä°‰∫é Go ÂºÄÂèëËÄÖÁöÑ‰æùËµñÊ≥®ÂÖ•Ê°ÜÊû∂ÔºåÊñπ‰æøÊê≠Âª∫‰ªª‰Ωï Go Â∫îÁî®„ÄÇ A Golang depenedency injection framework, helps developers to build any go application.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;IOC-golang: A golang dependency injection framework&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ___    ___     ____                           _                         &#xA; |_ _|  / _ \   / ___|           __ _    ___   | |   __ _   _ __     __ _ &#xA;  | |  | | | | | |      _____   / _` |  / _ \  | |  / _` | | &#39;_ \   / _` |&#xA;  | |  | |_| | | |___  |_____| | (_| | | (_) | | | | (_| | | | | | | (_| |&#xA; |___|  \___/   \____|          \__, |  \___/  |_|  \__,_| |_| |_|  \__, |&#xA;                                |___/                               |___/ &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/IOC-golang/actions/workflows/github-actions.yml&#34;&gt;&lt;img src=&#34;https://github.com/alibaba/IOC-golang/actions/workflows/github-actions.yml/badge.svg?sanitize=true&#34; alt=&#34;IOC-golang CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202-4EB1BA.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ioc-golang.github.io&#34;&gt;IOC-golang Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ioc-golang.github.io/cn&#34;&gt;‰∏≠Êñá ÊñáÊ°£&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/alibaba/IOC-golang/master/README_CN.md&#34;&gt;‰∏≠Êñá README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ioc-golang/ioc-golang-website/main/resources/video/ioc-golang-demo.gif&#34; alt=&#34;demo gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;IOC-golang is a powerful golang dependency injection framework that provides a complete implementation of IoC containers. Its capabilities are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ioc-golang.github.io/docs/getting-started/tutorial/&#34;&gt;Dependency Injection&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Supports dependency injection of any structure and interface, we also support object life cycle management mechanism.&lt;/p&gt; &lt;p&gt;Can take over object creation, parameter injection, factory methods. Customizable object parameter source.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ioc-golang.github.io/docs/examples/debug/&#34;&gt;Struct Proxy Layer&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Based on the idea of AOP, we provide struct proxy layer for all struct registered to ioc-golang. In the scene of interface oriented development, we can use many devlops features based on the extenablility of this proxy AOP layer. Such as interface listing, param value watching, method level tracing, performance badpoint analysis, fault injection, method level tracing in distributed system and so on.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ioc-golang.github.io/docs/reference/iocli/&#34;&gt;Automatic struct descriptor codes generation capability&lt;/a&gt;&lt;/p&gt; &lt;p&gt;We provide a code generation tool, and developers can annotate the structure through annotations, so as to easily generate structure registration code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ioc-golang.github.io/cn/docs/contribution-guidelines/&#34;&gt;Scalability&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Support the extension of struct to be injected, the extension of autowire model, and the extension of the debug AOP layer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://ioc-golang.github.io/cn/docs/examples/&#34;&gt;Many pre-defined components&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Provides pre-defined objects and middleware sdk for injection directly.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;autowire:&lt;/strong&gt; Provides two basic injection models: singleton model and multi-instance model&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;config:&lt;/strong&gt; Configuration loading module, responsible for parsing user yaml configuration files&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;debug:&lt;/strong&gt; Debug module: Provide debugging API, provide debugging injection layer implementation&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;extension:&lt;/strong&gt; Component extension directory: Provides preset implementation structures based on various injection models:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;autowire: autoload model extensions&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;grpc: grpc client model definition&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;config: configure the model definition&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;rpc: ioc-native rpc support&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;triple: support for Dubbo3 protocol.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;config: configuration injection model extension structure&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;string,int,map,slice&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;normal: multi-instance model extension structure&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;redis&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;http_server&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;mysql&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;rocketmq&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;nacos&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;example:&lt;/strong&gt; example repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;iocli:&lt;/strong&gt; code generation/program debugging tool&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Install code generation tools&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;% go install github.com/alibaba/ioc-golang/iocli@latest&#xA;% iocli&#xA;hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependency Injection Tutorial&lt;/h3&gt; &#xA;&lt;p&gt;We will develop a project with the following topology, This tutorial can show:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Registry codes generation&lt;/li&gt; &#xA; &lt;li&gt;Interface injection&lt;/li&gt; &#xA; &lt;li&gt;Struct pointer injection&lt;/li&gt; &#xA; &lt;li&gt;Get object by API&lt;/li&gt; &#xA; &lt;li&gt;Debug capability, list interface, implementations and methods; watch real-time param and return value.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ioc-golang/ioc-golang-website/main/resources/img/ioc-golang-quickstart-structure.png&#34; alt=&#34;ioc-golang-quickstart-structure&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All the code the user needs to write: main.go&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;time&#34;&#xA;&#xA;&#x9;&#34;github.com/alibaba/ioc-golang&#34;&#xA;)&#xA;&#xA;// +ioc:autowire=true&#xA;// +ioc:autowire:type=singleton&#xA;&#xA;type App struct {&#xA;&#x9;// inject main.ServiceImpl1 pointer to Service interface with proxy wrapper&#xA;&#x9;ServiceImpl1 Service `singleton:&#34;main.ServiceImpl1&#34;`&#xA;&#xA;&#x9;// inject main.ServiceImpl2 pointer to Service interface with proxy wrapper&#xA;&#x9;ServiceImpl2 Service `singleton:&#34;main.ServiceImpl2&#34;`&#xA;&#xA;&#x9;// inject ServiceImpl1 pointer to Service1 &#39;s own interface with proxy wrapper&#xA;&#x9;// this interface belongs to ServiceImpl1, there is no need to mark &#39;main.ServiceImpl1&#39; in tag&#xA;&#x9;Service1OwnInterface ServiceImpl1IOCInterface `singleton:&#34;&#34;`&#xA;&#xA;&#x9;// inject ServiceStruct struct pointer&#xA;&#x9;ServiceStruct *ServiceStruct `singleton:&#34;&#34;`&#xA;}&#xA;&#xA;func (a *App) Run() {&#xA;&#x9;for {&#xA;&#x9;&#x9;time.Sleep(time.Second * 3)&#xA;&#x9;&#x9;fmt.Println(a.ServiceImpl1.GetHelloString(&#34;laurence&#34;))&#xA;&#x9;&#x9;fmt.Println(a.ServiceImpl2.GetHelloString(&#34;laurence&#34;))&#xA;&#xA;&#x9;&#x9;fmt.Println(a.Service1OwnInterface.GetHelloString(&#34;laurence&#34;))&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;fmt.Println(a.ServiceStruct.GetString(&#34;laurence&#34;))&#xA;&#x9;}&#xA;}&#xA;&#xA;type Service interface {&#xA;&#x9;GetHelloString(string) string&#xA;}&#xA;&#xA;// +ioc:autowire=true&#xA;// +ioc:autowire:type=singleton&#xA;&#xA;type ServiceImpl1 struct {&#xA;}&#xA;&#xA;func (s *ServiceImpl1) GetHelloString(name string) string {&#xA;&#x9;return fmt.Sprintf(&#34;This is ServiceImpl1, hello %s&#34;, name)&#xA;}&#xA;&#xA;// +ioc:autowire=true&#xA;// +ioc:autowire:type=singleton&#xA;&#xA;type ServiceImpl2 struct {&#xA;}&#xA;&#xA;func (s *ServiceImpl2) GetHelloString(name string) string {&#xA;&#x9;return fmt.Sprintf(&#34;This is ServiceImpl2, hello %s&#34;, name)&#xA;}&#xA;&#xA;// +ioc:autowire=true&#xA;// +ioc:autowire:type=singleton&#xA;&#xA;type ServiceStruct struct {&#xA;}&#xA;&#xA;func (s *ServiceStruct) GetString(name string) string {&#xA;&#x9;return fmt.Sprintf(&#34;This is ServiceStruct, hello %s&#34;, name)&#xA;}&#xA;&#xA;func main() {&#xA;&#x9;// start&#xA;&#x9;if err := ioc.Load(); err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#xA;&#x9;// app, err := GetAppIOCInterface is also ok, to get proxy wrapped app struct.&#xA;&#x9;app, err := GetApp()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;panic(err)&#xA;&#x9;}&#xA;&#x9;app.Run()&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The proxy wrapped layer mentioned above, is a proxy layer injected by ioc-golang by default, when developer want to inject an object to interface field, or get with interface by API. Inject to interface is recommended by us. Every object injected with proxy wrapped layer would have devops feature.&lt;/p&gt; &#xA;&lt;p&gt;After writing, you can exec the following cli command to init go mod and generate codes. (mac may require sudo due to permissions during code generation)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% go mod init ioc-golang-demo&#xA;% export GOPROXY=&#34;https://goproxy.cn&#34;&#xA;% go mod tidy&#xA;% go get github.com/alibaba/ioc-golang@master&#xA;% sudo iocli gen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will be generated in the current directory: zz_generated.ioc.go, developers &lt;strong&gt;do not need to care about this file&lt;/strong&gt;, &#39;GetApp&#39; method mentioned above is defined in generated code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;//go:build !ignore_autogenerated&#xA;// +build !ignore_autogenerated&#xA;&#xA;// Code generated by iocli&#xA;&#xA;package main&#xA;&#xA;import (&#xA;        autowire &#34;github.com/alibaba/ioc-golang/autowire&#34;&#xA;        normal &#34;github.com/alibaba/ioc-golang/autowire/normal&#34;&#xA;        &#34;github.com/alibaba/ioc-golang/autowire/singleton&#34;&#xA;        util &#34;github.com/alibaba/ioc-golang/autowire/util&#34;&#xA;)&#xA;&#xA;func init() {&#xA;        normal.RegisterStructDescriptor(&amp;amp;autowire.StructDescriptor{&#xA;                Factory: func() interface{} {&#xA;                        return &amp;amp;app_{}&#xA;                },&#xA;        })&#xA;        singleton.RegisterStructDescriptor(&amp;amp;autowire.StructDescriptor{&#xA;                Factory: func() interface{} {&#xA;                        return &amp;amp;App{}&#xA;                },&#xA;        })&#xA;  ...&#xA;func GetServiceStructIOCInterface() (ServiceStructIOCInterface, error) {&#xA;        i, err := singleton.GetImplWithProxy(util.GetSDIDByStructPtr(new(ServiceStruct)), nil)&#xA;        if err != nil {&#xA;                return nil, err&#xA;        }&#xA;        impl := i.(ServiceStructIOCInterface)&#xA;        return impl, nil&#xA;}&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the file tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;% tree&#xA;.&#xA;‚îú‚îÄ‚îÄ go.mod&#xA;‚îú‚îÄ‚îÄ go.sum&#xA;‚îú‚îÄ‚îÄ main.go&#xA;‚îî‚îÄ‚îÄ zz_generated.ioc.go&#xA;&#xA;0 directories, 4 files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Execute program&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;go run .&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Console printout:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  ___    ___     ____                           _                         &#xA; |_ _|  / _ \   / ___|           __ _    ___   | |   __ _   _ __     __ _ &#xA;  | |  | | | | | |      _____   / _` |  / _ \  | |  / _` | | &#39;_ \   / _` |&#xA;  | |  | |_| | | |___  |_____| | (_| | | (_) | | | | (_| | | | | | | (_| |&#xA; |___|  \___/   \____|          \__, |  \___/  |_|  \__,_| |_| |_|  \__, |&#xA;                                |___/                               |___/ &#xA;Welcome to use ioc-golang!&#xA;[Boot] Start to load ioc-golang config&#xA;[Config] Load default config file from ../conf/ioc_golang.yaml&#xA;[Config] Load ioc-golang config file failed. open /Users/laurence/Desktop/workplace/alibaba/conf/ioc_golang.yaml: no such file or directory&#xA; The load procedure is continue&#xA;[Boot] Start to load debug&#xA;[Debug] Debug port is set to default :1999&#xA;[Boot] Start to load autowire&#xA;[Autowire Type] Found registered autowire type normal&#xA;[Autowire Struct Descriptor] Found type normal registered SD main.serviceStruct_&#xA;[Autowire Struct Descriptor] Found type normal registered SD main.app_&#xA;[Autowire Struct Descriptor] Found type normal registered SD main.serviceImpl1_&#xA;[Autowire Struct Descriptor] Found type normal registered SD main.serviceImpl2_&#xA;[Autowire Type] Found registered autowire type singleton&#xA;[Autowire Struct Descriptor] Found type singleton registered SD main.App&#xA;[Autowire Struct Descriptor] Found type singleton registered SD main.ServiceImpl1&#xA;[Autowire Struct Descriptor] Found type singleton registered SD main.ServiceImpl2&#xA;[Autowire Struct Descriptor] Found type singleton registered SD main.ServiceStruct&#xA;[Debug] Debug server listening at :1999&#xA;This is ServiceImpl1, hello laurence&#xA;This is ServiceImpl2, hello laurence&#xA;This is ServiceImpl1, hello laurence&#xA;This is ServiceStruct, hello laurence&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It shows that the injection is successful and the program runs normally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Debug the app&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Following logs can be found in console output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[Debug] Debug server listening at :1999&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open a new console, use iocli &#39;s debug feature to list all structs with proxy layer, and their methods. Default port is 1999.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% iocli list&#xA;main.ServiceImpl1&#xA;[GetHelloString]&#xA;&#xA;main.ServiceImpl2&#xA;[GetHelloString]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Watch real-time param and return value. We take main.ServiceImpl &#39;s &#39;GetHelloString&#39; method as an example. The method would be called twice every 3s :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;% iocli watch main.ServiceImpl1 GetHelloString&#xA;========== On Call ==========&#xA;main.ServiceImpl1.GetHelloString()&#xA;Param 1: (string) (len=8) &#34;laurence&#34;&#xA;&#xA;========== On Response ==========&#xA;main.ServiceImpl1.GetHelloString()&#xA;Response 1: (string) (len=36) &#34;This is ServiceImpl1, hello laurence&#34;&#xA;&#xA;========== On Call ==========&#xA;main.ServiceImpl1.GetHelloString()&#xA;Param 1: (string) (len=8) &#34;laurence&#34;&#xA;&#xA;========== On Response ==========&#xA;main.ServiceImpl1.GetHelloString()&#xA;Response 1: (string) (len=36) &#34;This is ServiceImpl1, hello laurence&#34;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Annotation Analysis&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// +ioc:autowire=true&#xA;The code generation tool recognizes objects marked with the +ioc:autowire=true annotation&#xA;&#xA;// +ioc:autowire:type=singleton&#xA;The marker autowire model is the singleton, as well as the normal multi-instance model, the config configuration model, the grpc client model and other extensions.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;More&lt;/h3&gt; &#xA;&lt;p&gt;More code generation annotations can be viewed at &lt;a href=&#34;https://github.com/alibaba/IOC-golang/tree/master/iocli&#34;&gt;ioc-golang-cli&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can go to &lt;a href=&#34;https://github.com/alibaba/IOC-golang/tree/master/example&#34;&gt;ioc-golang-example&lt;/a&gt; for more examples and advanced usage.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;IOC-golang developed by Alibaba and licensed under the Apache License (Version 2.0). See the NOTICE file for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Connect to us&lt;/h3&gt; &#xA;&lt;p&gt;Welcomd to join dingtalk group 44638289 if you are interest with the project.&lt;/p&gt;</summary>
  </entry>
</feed>