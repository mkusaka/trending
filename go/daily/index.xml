<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-09T01:31:06Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>playwright-community/playwright-go</title>
    <updated>2024-06-09T01:31:06Z</updated>
    <id>tag:github.com,2024-06-09:/playwright-community/playwright-go</id>
    <link href="https://github.com/playwright-community/playwright-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Playwright for Go a browser automation library to control Chromium, Firefox and WebKit with a single API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸŽ­ &lt;a href=&#34;https://github.com/microsoft/playwright#readme&#34;&gt;Playwright&lt;/a&gt; for &lt;img src=&#34;https://user-images.githubusercontent.com/17984549/91302719-343a1d80-e7a7-11ea-8d6a-9448ef598420.png&#34; height=&#34;35&#34;&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Looking for maintainers and see &lt;a href=&#34;https://github.com/playwright-community/playwright-go/issues/122&#34;&gt;here&lt;/a&gt;. Thanks!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/playwright-community/playwright-go&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/playwright-community/playwright-go&#34; alt=&#34;PkgGoDev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/playwright-community/playwright-go&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/playwright-community/playwright-go&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/playwright-community/playwright-go/workflows/Go/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://aka.ms/playwright-slack&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/join-slack-infomational&#34; alt=&#34;Join Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/playwright-community/playwright-go?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/playwright-community/playwright-go/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- GEN:chromium-version-badge --&gt;&lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chromium-125.0.6422.26-blue.svg?logo=google-chrome&#34; alt=&#34;Chromium version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt; &#xA; &lt;!-- GEN:firefox-version-badge --&gt;&lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/firefox-125.0.1-blue.svg?logo=mozilla-firefox&#34; alt=&#34;Firefox version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt; &#xA; &lt;!-- GEN:webkit-version-badge --&gt;&lt;a href=&#34;https://webkit.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/webkit-17.4-blue.svg?logo=safari&#34; alt=&#34;WebKit version&#34;&gt;&lt;/a&gt;&#xA; &lt;!-- GEN:stop --&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://playwright.dev/docs/api/class-playwright&#34;&gt;API reference&lt;/a&gt; | &lt;a href=&#34;https://github.com/playwright-community/playwright-go/tree/main/examples&#34;&gt;Example recipes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Playwright is a Go library to automate &lt;a href=&#34;https://www.chromium.org/Home&#34;&gt;Chromium&lt;/a&gt;, &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;Firefox&lt;/a&gt; and &lt;a href=&#34;https://webkit.org/&#34;&gt;WebKit&lt;/a&gt; with a single API. Playwright is built to enable cross-browser web automation that is &lt;strong&gt;ever-green&lt;/strong&gt;, &lt;strong&gt;capable&lt;/strong&gt;, &lt;strong&gt;reliable&lt;/strong&gt; and &lt;strong&gt;fast&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Linux&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;macOS&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Chromium &#xA;    &lt;!-- GEN:chromium-version --&gt;125.0.6422.26&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WebKit &#xA;    &lt;!-- GEN:webkit-version --&gt;17.4&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Firefox &#xA;    &lt;!-- GEN:firefox-version --&gt;125.0.1&#xA;    &lt;!-- GEN:stop --&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;âœ…&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Headless execution is supported for all the browsers on all platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;go get -u github.com/playwright-community/playwright-go&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the browsers and OS dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go run github.com/playwright-community/playwright-go/cmd/playwright@latest install --with-deps&#xA;# Or&#xA;go install github.com/playwright-community/playwright-go/cmd/playwright@latest&#xA;playwright install --with-deps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can do it inside your program via which downloads the driver and browsers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;err := playwright.Install()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Capabilities&lt;/h2&gt; &#xA;&lt;p&gt;Playwright is built to automate the broad and growing set of web browser capabilities used by Single Page Apps and Progressive Web Apps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scenarios that span multiple page, domains and iframes&lt;/li&gt; &#xA; &lt;li&gt;Auto-wait for elements to be ready before executing actions (like click, fill)&lt;/li&gt; &#xA; &lt;li&gt;Intercept network activity for stubbing and mocking network requests&lt;/li&gt; &#xA; &lt;li&gt;Emulate mobile devices, geolocation, permissions&lt;/li&gt; &#xA; &lt;li&gt;Support for web components via shadow-piercing selectors&lt;/li&gt; &#xA; &lt;li&gt;Native input events for mouse and keyboard&lt;/li&gt; &#xA; &lt;li&gt;Upload and download files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The following example crawls the current top voted items from &lt;a href=&#34;https://news.ycombinator.com&#34;&gt;Hacker News&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;&#xA;package main&#xA;&#xA;import (&#xA;&#x9;&#34;fmt&#34;&#xA;&#x9;&#34;log&#34;&#xA;&#xA;&#x9;&#34;github.com/playwright-community/playwright-go&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;pw, err := playwright.Run()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;could not start playwright: %v&#34;, err)&#xA;&#x9;}&#xA;&#x9;browser, err := pw.Chromium.Launch()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;could not launch browser: %v&#34;, err)&#xA;&#x9;}&#xA;&#x9;page, err := browser.NewPage()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;could not create page: %v&#34;, err)&#xA;&#x9;}&#xA;&#x9;if _, err = page.Goto(&#34;https://news.ycombinator.com&#34;); err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;could not goto: %v&#34;, err)&#xA;&#x9;}&#xA;&#x9;entries, err := page.Locator(&#34;.athing&#34;).All()&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;could not get entries: %v&#34;, err)&#xA;&#x9;}&#xA;&#x9;for i, entry := range entries {&#xA;&#x9;&#x9;title, err := entry.Locator(&#34;td.title &amp;gt; span &amp;gt; a&#34;).TextContent()&#xA;&#x9;&#x9;if err != nil {&#xA;&#x9;&#x9;&#x9;log.Fatalf(&#34;could not get text content: %v&#34;, err)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;fmt.Printf(&#34;%d: %s\n&#34;, i+1, title)&#xA;&#x9;}&#xA;&#x9;if err = browser.Close(); err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;could not close browser: %v&#34;, err)&#xA;&#x9;}&#xA;&#x9;if err = pw.Stop(); err != nil {&#xA;&#x9;&#x9;log.Fatalf(&#34;could not stop Playwright: %v&#34;, err)&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/Dockerfile.example&#34;&gt;Dockerfile.example&lt;/a&gt; to build your own docker image.&lt;/p&gt; &#xA;&lt;h2&gt;More examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refer to &lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/tests/helper_test.go&#34;&gt;helper_test.go&lt;/a&gt; for End-To-End testing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/download/main.go&#34;&gt;Downloading files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/end-to-end-testing/main.go&#34;&gt;End-To-End testing a website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/javascript/main.go&#34;&gt;Executing JavaScript in the browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/mobile-and-geolocation/main.go&#34;&gt;Emulate mobile and geolocation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/parallel-scraping/main.go&#34;&gt;Parallel scraping using a WaitGroup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/pdf/main.go&#34;&gt;Rendering a PDF of a website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/scraping/main.go&#34;&gt;Scraping HackerNews&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/screenshot/main.go&#34;&gt;Take a screenshot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/video/main.go&#34;&gt;Record a video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/playwright-community/playwright-go/main/examples/network-monitoring/main.go&#34;&gt;Monitor network activity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;Playwright is a Node.js library which uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome DevTools Protocol to communicate with Chromium&lt;/li&gt; &#xA; &lt;li&gt;Patched Firefox to communicate with Firefox&lt;/li&gt; &#xA; &lt;li&gt;Patched WebKit to communicate with WebKit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These patches are based on the original sources of the browsers and don&#39;t modify the browser behaviour so the browsers are basically the same (see &lt;a href=&#34;https://github.com/microsoft/playwright/tree/main/browser_patches&#34;&gt;here&lt;/a&gt;) as you see them in the wild. The support for different programming languages is based on exposing a RPC server in the Node.js land which can be used to allow other languages to use Playwright without implementing all the custom logic:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/playwright-python&#34;&gt;Playwright for Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/playwright-sharp&#34;&gt;Playwright for .NET&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/microsoft/playwright-java&#34;&gt;Playwright for Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/playwright-community/playwright-go&#34;&gt;Playwright for Go&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The bridge between Node.js and the other languages is basically a Node.js runtime combined with Playwright which gets shipped for each of these languages (around 50MB) and then communicates over stdio to send the relevant commands. This will also download the pre-compiled browsers.&lt;/p&gt; &#xA;&lt;h2&gt;Is Playwright for Go ready?&lt;/h2&gt; &#xA;&lt;p&gt;We are ready for your feedback, but we are still covering Playwright Go with the tests.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/playwright-community/playwright-go&#34;&gt;Playwright for Go Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://playwright.dev/docs/api/class-playwright&#34;&gt;Playwright Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/playwright-community/playwright-go/tree/main/examples&#34;&gt;Example recipes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>