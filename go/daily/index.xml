<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-16T01:30:52Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>golang/example</title>
    <updated>2024-09-16T01:30:52Z</updated>
    <id>tag:github.com,2024-09-16:/golang/example</id>
    <link href="https://github.com/golang/example" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go example projects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Go example projects&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/example&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/golang.org/x/example.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a collection of Go programs and libraries that demonstrate the language, standard libraries, and tools.&lt;/p&gt; &#xA;&lt;h2&gt;Clone the project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://go.googlesource.com/example&#xA;$ cd example&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://go.googlesource.com/example&#34;&gt;https://go.googlesource.com/example&lt;/a&gt; is the canonical Git repository. It is mirrored at &lt;a href=&#34;https://github.com/golang/example&#34;&gt;https://github.com/golang/example&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/hello/&#34;&gt;hello&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/hello/reverse/&#34;&gt;hello/reverse&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd hello&#xA;$ go build&#xA;$ ./hello -help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A trivial &#34;Hello, world&#34; program that uses a library package.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/hello/&#34;&gt;hello&lt;/a&gt; command covers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The basic form of an executable command&lt;/li&gt; &#xA; &lt;li&gt;Importing packages (from the standard library and the local repository)&lt;/li&gt; &#xA; &lt;li&gt;Printing strings (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/fmt/&#34;&gt;fmt&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Command-line flags (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/flag/&#34;&gt;flag&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Logging (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/log/&#34;&gt;log&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/hello/reverse/&#34;&gt;reverse&lt;/a&gt; reverse covers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The basic form of a library&lt;/li&gt; &#xA; &lt;li&gt;Conversion between string and []rune&lt;/li&gt; &#xA; &lt;li&gt;Table-driven unit tests (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/testing/&#34;&gt;testing&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/helloserver/&#34;&gt;helloserver&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd helloserver&#xA;$ go run .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A trivial &#34;Hello, world&#34; web server.&lt;/p&gt; &#xA;&lt;p&gt;Topics covered:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command-line flags (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/flag/&#34;&gt;flag&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Logging (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/log/&#34;&gt;log&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Web servers (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/net/http/&#34;&gt;net/http&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/outyet/&#34;&gt;outyet&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cd outyet&#xA;$ go run .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A web server that answers the question: &#34;Is Go 1.x out yet?&#34;&lt;/p&gt; &#xA;&lt;p&gt;Topics covered:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Command-line flags (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/flag/&#34;&gt;flag&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Web servers (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/net/http/&#34;&gt;net/http&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;HTML Templates (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/html/template/&#34;&gt;html/template&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Logging (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/log/&#34;&gt;log&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Long-running background processes&lt;/li&gt; &#xA; &lt;li&gt;Synchronizing data access between goroutines (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/sync/&#34;&gt;sync&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Exporting server state for monitoring (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/expvar/&#34;&gt;expvar&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unit and integration tests (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/testing/&#34;&gt;testing&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dependency injection&lt;/li&gt; &#xA; &lt;li&gt;Time (&lt;a href=&#34;https://raw.githubusercontent.com/golang.org/pkg/time/&#34;&gt;time&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/appengine-hello/&#34;&gt;appengine-hello&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A trivial &#34;Hello, world&#34; App Engine application intended to be used as the starting point for your own code. Please see &lt;a href=&#34;https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Go&#34;&gt;Google App Engine SDK for Go&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/appengine/docs/standard/go/quickstart&#34;&gt;Quickstart for Go in the App Engine Standard Environment&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/gotypes/&#34;&gt;gotypes&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;go/types&lt;/code&gt; package is a type-checker for Go programs. It is one of the most complex packages in Go&#39;s standard library, so we have provided this tutorial to help you find your bearings. It comes with several example programs that you can obtain using &lt;code&gt;go get&lt;/code&gt; and play with as you learn to build tools that analyze or manipulate Go programs.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/template/&#34;&gt;template&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A trivial web server that demonstrates the use of the &lt;a href=&#34;https://golang.org/pkg/text/template/&#34;&gt;&lt;code&gt;template&lt;/code&gt; package&lt;/a&gt;&#39;s &lt;code&gt;block&lt;/code&gt; feature.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/golang/example/master/slog-handler-guide/&#34;&gt;slog-handler-guide&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;log/slog&lt;/code&gt; package supports structured logging. It features a flexible backend in the form of a &lt;code&gt;Handler&lt;/code&gt; interface. This guide can help you write your own handler.&lt;/p&gt;</summary>
  </entry>
</feed>