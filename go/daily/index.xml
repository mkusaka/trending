<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-07T01:35:22Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/go-github</title>
    <updated>2023-01-07T01:35:22Z</updated>
    <id>tag:github.com,2023-01-07:/google/go-github</id>
    <link href="https://github.com/google/go-github" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Go library for accessing the GitHub v3 API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;go-github&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/google/go-github/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/google/go-github?sort=semver&#34; alt=&#34;go-github release (latest SemVer)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/google/go-github/v49/github&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=godoc&amp;amp;message=reference&amp;amp;color=blue&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/google/go-github/actions?query=workflow%3Atests&#34;&gt;&lt;img src=&#34;https://github.com/google/go-github/workflows/tests/badge.svg?sanitize=true&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/google/go-github&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/google/go-github/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.google.com/group/go-github&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discuss-go--github%40googlegroups.com-blue.svg?sanitize=true&#34; alt=&#34;Discuss at go-github@googlegroups.com&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/796&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/796/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;go-github is a Go client library for accessing the &lt;a href=&#34;https://docs.github.com/en/rest&#34;&gt;GitHub API v3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Currently, &lt;strong&gt;go-github requires Go version 1.13 or greater&lt;/strong&gt;. go-github tracks &lt;a href=&#34;https://golang.org/doc/devel/release.html#policy&#34;&gt;Go&#39;s version support policy&lt;/a&gt;. We do our best not to break older versions of Go if we don&#39;t have to, but due to tooling constraints, we don&#39;t always test older versions.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in using the &lt;a href=&#34;https://developer.github.com/v4/&#34;&gt;GraphQL API v4&lt;/a&gt;, the recommended library is &lt;a href=&#34;https://github.com/shurcooL/githubv4&#34;&gt;shurcooL/githubv4&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;go-github is compatible with modern Go releases in module mode, with Go installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/google/go-github/v49&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will resolve and add the package to the current development module, along with its dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively the same can be achieved if you use import in a package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/google/go-github/v49/github&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run &lt;code&gt;go get&lt;/code&gt; without parameters.&lt;/p&gt; &#xA;&lt;p&gt;Finally, to use the top-of-trunk version of this repo, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go get github.com/google/go-github/v49@master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;github.com/google/go-github/v49/github&#34;&#x9;// with go modules enabled (GO111MODULE=on or outside GOPATH)&#xA;import &#34;github.com/google/go-github/github&#34; // with go modules disabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Construct a new GitHub client, then use the various services on the client to access different parts of the GitHub API. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client := github.NewClient(nil)&#xA;&#xA;// list all organizations for user &#34;willnorris&#34;&#xA;orgs, _, err := client.Organizations.List(context.Background(), &#34;willnorris&#34;, nil)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some API methods have optional parameters that can be passed. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client := github.NewClient(nil)&#xA;&#xA;// list public repositories for org &#34;github&#34;&#xA;opt := &amp;amp;github.RepositoryListByOrgOptions{Type: &#34;public&#34;}&#xA;repos, _, err := client.Repositories.ListByOrg(context.Background(), &#34;github&#34;, opt)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The services of a client divide the API into logical chunks and correspond to the structure of the GitHub API documentation at &lt;a href=&#34;https://docs.github.com/en/rest&#34;&gt;https://docs.github.com/en/rest&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Using the &lt;a href=&#34;https://godoc.org/context&#34;&gt;context&lt;/a&gt; package, one can easily pass cancelation signals and deadlines to various services of the client for handling a request. In case there is no context available, then &lt;code&gt;context.Background()&lt;/code&gt; can be used as a starting point.&lt;/p&gt; &#xA;&lt;p&gt;For more sample code snippets, head over to the &lt;a href=&#34;https://github.com/google/go-github/tree/master/example&#34;&gt;example&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Authentication&lt;/h3&gt; &#xA;&lt;p&gt;The go-github library does not directly handle authentication. Instead, when creating a new client, pass an &lt;code&gt;http.Client&lt;/code&gt; that can handle authentication for you. The easiest and recommended way to do this is using the &lt;a href=&#34;https://github.com/golang/oauth2&#34;&gt;oauth2&lt;/a&gt; library, but you can always use any other library that provides an &lt;code&gt;http.Client&lt;/code&gt;. If you have an OAuth2 access token (for example, a &lt;a href=&#34;https://github.com/blog/1509-personal-api-tokens&#34;&gt;personal API token&lt;/a&gt;), you can use it with the oauth2 library using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import &#34;golang.org/x/oauth2&#34;&#xA;&#xA;func main() {&#xA;&#x9;ctx := context.Background()&#xA;&#x9;ts := oauth2.StaticTokenSource(&#xA;&#x9;&#x9;&amp;amp;oauth2.Token{AccessToken: &#34;... your access token ...&#34;},&#xA;&#x9;)&#xA;&#x9;tc := oauth2.NewClient(ctx, ts)&#xA;&#xA;&#x9;client := github.NewClient(tc)&#xA;&#xA;&#x9;// list all repositories for the authenticated user&#xA;&#x9;repos, _, err := client.Repositories.List(ctx, &#34;&#34;, nil)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that when using an authenticated Client, all calls made by the client will include the specified OAuth token. Therefore, authenticated clients should almost never be shared between different users.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://godoc.org/golang.org/x/oauth2&#34;&gt;oauth2 docs&lt;/a&gt; for complete instructions on using that library.&lt;/p&gt; &#xA;&lt;p&gt;For API methods that require HTTP Basic Authentication, use the &lt;a href=&#34;https://godoc.org/github.com/google/go-github/github#BasicAuthTransport&#34;&gt;&lt;code&gt;BasicAuthTransport&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;As a GitHub App&lt;/h4&gt; &#xA;&lt;p&gt;GitHub Apps authentication can be provided by the &lt;a href=&#34;https://github.com/bradleyfalzon/ghinstallation&#34;&gt;ghinstallation&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Most endpoints (ex. &lt;a href=&#34;https://docs.github.com/en/rest/rate-limit#get-rate-limit-status-for-the-authenticated-user&#34;&gt;&lt;code&gt;GET /rate_limit&lt;/code&gt;&lt;/a&gt;) require access token authentication while a few others (ex. &lt;a href=&#34;https://docs.github.com/en/rest/apps/webhooks#list-deliveries-for-an-app-webhook&#34;&gt;&lt;code&gt;GET /app/hook/deliveries&lt;/code&gt;&lt;/a&gt;) require &lt;a href=&#34;https://docs.github.com/en/developers/apps/building-github-apps/authenticating-with-github-apps#authenticating-as-a-github-app&#34;&gt;JWT&lt;/a&gt; authentication.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;import (&#xA;&#x9;&#34;net/http&#34;&#xA;&#xA;&#x9;&#34;github.com/bradleyfalzon/ghinstallation/v2&#34;&#xA;&#x9;&#34;github.com/google/go-github/v49/github&#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;// Wrap the shared transport for use with the integration ID 1 authenticating with installation ID 99.&#xA;&#x9;itr, err := ghinstallation.NewKeyFromFile(http.DefaultTransport, 1, 99, &#34;2016-10-19.private-key.pem&#34;)&#xA;&#xA;&#x9;// Or for endpoints that require JWT authentication&#xA;&#x9;// itr, err := ghinstallation.NewAppsTransportKeyFromFile(http.DefaultTransport, 1, &#34;2016-10-19.private-key.pem&#34;)&#xA;&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;// Handle error.&#xA;&#x9;}&#xA;&#xA;&#x9;// Use installation transport with client.&#xA;&#x9;client := github.NewClient(&amp;amp;http.Client{Transport: itr})&#xA;&#xA;&#x9;// Use client...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: In order to interact with certain APIs, for example writing a file to a repo, one must generate an installation token using the installation ID of the GitHub app and authenticate with the OAuth method mentioned above. See the examples.&lt;/p&gt; &#xA;&lt;h3&gt;Rate Limiting&lt;/h3&gt; &#xA;&lt;p&gt;GitHub imposes a rate limit on all API clients. Unauthenticated clients are limited to 60 requests per hour, while authenticated clients can make up to 5,000 requests per hour. The Search API has a custom rate limit. Unauthenticated clients are limited to 10 requests per minute, while authenticated clients can make up to 30 requests per minute. To receive the higher rate limit when making calls that are not issued on behalf of a user, use &lt;code&gt;UnauthenticatedRateLimitedTransport&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The returned &lt;code&gt;Response.Rate&lt;/code&gt; value contains the rate limit information from the most recent API call. If a recent enough response isn&#39;t available, you can use &lt;code&gt;RateLimits&lt;/code&gt; to fetch the most up-to-date rate limit data for the client.&lt;/p&gt; &#xA;&lt;p&gt;To detect an API rate limit error, you can check if its type is &lt;code&gt;*github.RateLimitError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;repos, _, err := client.Repositories.List(ctx, &#34;&#34;, nil)&#xA;if _, ok := err.(*github.RateLimitError); ok {&#xA;&#x9;log.Println(&#34;hit rate limit&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about GitHub rate limiting at &lt;a href=&#34;https://docs.github.com/en/rest/rate-limit&#34;&gt;https://docs.github.com/en/rest/rate-limit&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;h3&gt;Accepted Status&lt;/h3&gt; &#xA;&lt;p&gt;Some endpoints may return a 202 Accepted status code, meaning that the information required is not yet ready and was scheduled to be gathered on the GitHub side. Methods known to behave like this are documented specifying this behavior.&lt;/p&gt; &#xA;&lt;p&gt;To detect this condition of error, you can check if its type is &lt;code&gt;*github.AcceptedError&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;stats, _, err := client.Repositories.ListContributorsStats(ctx, org, repo)&#xA;if _, ok := err.(*github.AcceptedError); ok {&#xA;&#x9;log.Println(&#34;scheduled on GitHub side&#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditional Requests&lt;/h3&gt; &#xA;&lt;p&gt;The GitHub API has good support for conditional requests which will help prevent you from burning through your rate limit, as well as help speed up your application. &lt;code&gt;go-github&lt;/code&gt; does not handle conditional requests directly, but is instead designed to work with a caching &lt;code&gt;http.Transport&lt;/code&gt;. We recommend using &lt;a href=&#34;https://github.com/gregjones/httpcache&#34;&gt;https://github.com/gregjones/httpcache&lt;/a&gt; for that.&lt;/p&gt; &#xA;&lt;p&gt;Learn more about GitHub conditional requests at &lt;a href=&#34;https://docs.github.com/en/rest/overview/resources-in-the-rest-api#conditional-requests&#34;&gt;https://docs.github.com/en/rest/overview/resources-in-the-rest-api#conditional-requests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Creating and Updating Resources&lt;/h3&gt; &#xA;&lt;p&gt;All structs for GitHub resources use pointer values for all non-repeated fields. This allows distinguishing between unset fields and those set to a zero-value. Helper functions have been provided to easily create these pointers for string, bool, and int values. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// create a new private repository named &#34;foo&#34;&#xA;repo := &amp;amp;github.Repository{&#xA;&#x9;Name:    github.String(&#34;foo&#34;),&#xA;&#x9;Private: github.Bool(true),&#xA;}&#xA;client.Repositories.Create(ctx, &#34;&#34;, repo)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Users who have worked with protocol buffers should find this pattern familiar.&lt;/p&gt; &#xA;&lt;h3&gt;Pagination&lt;/h3&gt; &#xA;&lt;p&gt;All requests for resource collections (repos, pull requests, issues, etc.) support pagination. Pagination options are described in the &lt;code&gt;github.ListOptions&lt;/code&gt; struct and passed to the list methods directly or as an embedded type of a more specific list options struct (for example &lt;code&gt;github.PullRequestListOptions&lt;/code&gt;). Pages information is available via the &lt;code&gt;github.Response&lt;/code&gt; struct.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;client := github.NewClient(nil)&#xA;&#xA;opt := &amp;amp;github.RepositoryListByOrgOptions{&#xA;&#x9;ListOptions: github.ListOptions{PerPage: 10},&#xA;}&#xA;// get all pages of results&#xA;var allRepos []*github.Repository&#xA;for {&#xA;&#x9;repos, resp, err := client.Repositories.ListByOrg(ctx, &#34;github&#34;, opt)&#xA;&#x9;if err != nil {&#xA;&#x9;&#x9;return err&#xA;&#x9;}&#xA;&#x9;allRepos = append(allRepos, repos...)&#xA;&#x9;if resp.NextPage == 0 {&#xA;&#x9;&#x9;break&#xA;&#x9;}&#xA;&#x9;opt.Page = resp.NextPage&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Webhooks&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;go-github&lt;/code&gt; provides structs for almost all &lt;a href=&#34;https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads&#34;&gt;GitHub webhook events&lt;/a&gt; as well as functions to validate them and unmarshal JSON payloads from &lt;code&gt;http.Request&lt;/code&gt; structs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func (s *GitHubEventMonitor) ServeHTTP(w http.ResponseWriter, r *http.Request) {&#xA;&#x9;payload, err := github.ValidatePayload(r, s.webhookSecretKey)&#xA;&#x9;if err != nil { ... }&#xA;&#x9;event, err := github.ParseWebHook(github.WebHookType(r), payload)&#xA;&#x9;if err != nil { ... }&#xA;&#x9;switch event := event.(type) {&#xA;&#x9;case *github.CommitCommentEvent:&#xA;&#x9;&#x9;processCommitCommentEvent(event)&#xA;&#x9;case *github.CreateEvent:&#xA;&#x9;&#x9;processCreateEvent(event)&#xA;&#x9;...&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Furthermore, there are libraries like &lt;a href=&#34;https://github.com/cbrgm/githubevents&#34;&gt;cbrgm/githubevents&lt;/a&gt; that build upon the example above and provide functions to subscribe callbacks to specific events.&lt;/p&gt; &#xA;&lt;p&gt;For complete usage of go-github, see the full &lt;a href=&#34;https://pkg.go.dev/github.com/google/go-github/v49/github&#34;&gt;package docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Testing code that uses &lt;code&gt;go-github&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The repo &lt;a href=&#34;https://github.com/migueleliasweb/go-github-mock&#34;&gt;migueleliasweb/go-github-mock&lt;/a&gt; provides a way to mock responses. Check the repo for more details.&lt;/p&gt; &#xA;&lt;h3&gt;Integration Tests&lt;/h3&gt; &#xA;&lt;p&gt;You can run integration tests from the &lt;code&gt;test&lt;/code&gt; directory. See the integration tests &lt;a href=&#34;https://raw.githubusercontent.com/google/go-github/master/test/README.md&#34;&gt;README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;I would like to cover the entire GitHub API and contributions are of course always welcome. The calling pattern is pretty well established, so adding new methods is relatively straightforward. See &lt;a href=&#34;https://raw.githubusercontent.com/google/go-github/master/CONTRIBUTING.md&#34;&gt;&lt;code&gt;CONTRIBUTING.md&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;In general, go-github follows &lt;a href=&#34;https://semver.org/&#34;&gt;semver&lt;/a&gt; as closely as we can for tagging releases of the package. For self-contained libraries, the application of semantic versioning is relatively straightforward and generally understood. But because go-github is a client library for the GitHub API, which itself changes behavior, and because we are typically pretty aggressive about implementing preview features of the GitHub API, we&#39;ve adopted the following versioning policy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;We increment the &lt;strong&gt;major version&lt;/strong&gt; with any incompatible change to non-preview functionality, including changes to the exported Go API surface or behavior of the API.&lt;/li&gt; &#xA; &lt;li&gt;We increment the &lt;strong&gt;minor version&lt;/strong&gt; with any backwards-compatible changes to functionality, as well as any changes to preview functionality in the GitHub API. GitHub makes no guarantee about the stability of preview functionality, so neither do we consider it a stable part of the go-github API.&lt;/li&gt; &#xA; &lt;li&gt;We increment the &lt;strong&gt;patch version&lt;/strong&gt; with any backwards-compatible bug fixes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Preview functionality may take the form of entire methods or simply additional data returned from an otherwise non-preview method. Refer to the GitHub API documentation for details on preview functionality.&lt;/p&gt; &#xA;&lt;h3&gt;Calendar Versioning&lt;/h3&gt; &#xA;&lt;p&gt;As of 2022-11-28, GitHub &lt;a href=&#34;https://github.blog/2022-11-28-to-infinity-and-beyond-enabling-the-future-of-githubs-rest-api-with-api-versioning/&#34;&gt;has announced&lt;/a&gt; that they are starting to version their v3 API based on &#34;calendar-versioning&#34;.&lt;/p&gt; &#xA;&lt;p&gt;In practice, our goal is to make per-method version overrides (at least in the core library) rare and temporary.&lt;/p&gt; &#xA;&lt;p&gt;Our understanding of the GitHub docs is that they will be revving the entire API to each new date-based version, even if only a few methods have breaking changes. Other methods will accept the new version with their existing functionality. So when a new date-based version of the GitHub API is released, we (the repo maintainers) plan to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;update each method that had breaking changes, overriding their per-method API version header. This may happen in one or multiple commits and PRs, and is all done in the main branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;once all of the methods with breaking changes have been updated, have a final commit that bumps the default API version, and remove all of the per-method overrides. That would now get a major version bump when the next go-github release is made.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version Compatibility Table&lt;/h3&gt; &#xA;&lt;p&gt;The following table identifies which version of the GitHub API is supported by this (and past) versions of this repo (go-github). Versions prior to 48.2.0 are not listed.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;go-github Version&lt;/th&gt; &#xA;   &lt;th&gt;GitHub v3 API Version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;49.0.0&lt;/td&gt; &#xA;   &lt;td&gt;2022-11-28&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;48.2.0&lt;/td&gt; &#xA;   &lt;td&gt;2022-11-28&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is distributed under the BSD-style license found in the &lt;a href=&#34;https://raw.githubusercontent.com/google/go-github/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/cadvisor</title>
    <updated>2023-01-07T01:35:22Z</updated>
    <id>tag:github.com,2023-01-07:/google/cadvisor</id>
    <link href="https://github.com/google/cadvisor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Analyzes resource usage and performance characteristics of running containers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/cadvisor/master/logo.png&#34; alt=&#34;cAdvisor&#34; title=&#34;cAdvisor&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/google/cadvisor/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;test status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;cAdvisor (Container Advisor) provides container users an understanding of the resource usage and performance characteristics of their running containers. It is a running daemon that collects, aggregates, processes, and exports information about running containers. Specifically, for each container it keeps resource isolation parameters, historical resource usage, histograms of complete historical resource usage and network statistics. This data is exported by container and machine-wide.&lt;/p&gt; &#xA;&lt;p&gt;cAdvisor has native support for &lt;a href=&#34;https://github.com/docker/docker&#34;&gt;Docker&lt;/a&gt; containers and should support just about any other container type out of the box. We strive for support across the board so feel free to open an issue if that is not the case. cAdvisor&#39;s container abstraction is based on &lt;a href=&#34;https://github.com/google/lmctfy&#34;&gt;lmctfy&lt;/a&gt;&#39;s so containers are inherently nested hierarchically.&lt;/p&gt; &#xA;&lt;h4&gt;Quick Start: Running cAdvisor in a Docker Container&lt;/h4&gt; &#xA;&lt;p&gt;To quickly tryout cAdvisor on your machine with Docker, we have a Docker image that includes everything you need to get started. You can run a single cAdvisor to monitor the whole machine. Simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;VERSION=v0.36.0 # use the latest release version from https://github.com/google/cadvisor/releases&#xA;sudo docker run \&#xA;  --volume=/:/rootfs:ro \&#xA;  --volume=/var/run:/var/run:ro \&#xA;  --volume=/sys:/sys:ro \&#xA;  --volume=/var/lib/docker/:/var/lib/docker:ro \&#xA;  --volume=/dev/disk/:/dev/disk:ro \&#xA;  --publish=8080:8080 \&#xA;  --detach=true \&#xA;  --name=cadvisor \&#xA;  --privileged \&#xA;  --device=/dev/kmsg \&#xA;  gcr.io/cadvisor/cadvisor:$VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;cAdvisor is now running (in the background) on &lt;code&gt;http://localhost:8080&lt;/code&gt;. The setup includes directories with Docker state cAdvisor needs to observe.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: If you&#39;re running on CentOS, Fedora, or RHEL (or are using LXC), take a look at our &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/running.md&#34;&gt;running instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have detailed &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/running.md#standalone&#34;&gt;instructions&lt;/a&gt; on running cAdvisor standalone outside of Docker. cAdvisor &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/runtime_options.md&#34;&gt;running options&lt;/a&gt; may also be interesting for advanced usecases. If you want to build your own cAdvisor Docker image, see our &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/deploy.md&#34;&gt;deployment&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/kubernetes/kubernetes&#34;&gt;Kubernetes&lt;/a&gt; users, cAdvisor can be run as a daemonset. See the &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/deploy/kubernetes&#34;&gt;instructions&lt;/a&gt; for how to get started, and for how to &lt;a href=&#34;https://github.com/kubernetes-sigs/kustomize#kustomize&#34;&gt;kustomize&lt;/a&gt; it to fit your needs.&lt;/p&gt; &#xA;&lt;h2&gt;Building and Testing&lt;/h2&gt; &#xA;&lt;p&gt;See the more detailed instructions in the &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/development/build.md&#34;&gt;build page&lt;/a&gt;. This includes instructions for building and deploying the cAdvisor Docker image.&lt;/p&gt; &#xA;&lt;h2&gt;Exporting stats&lt;/h2&gt; &#xA;&lt;p&gt;cAdvisor supports exporting stats to various storage plugins. See the &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/storage/README.md&#34;&gt;documentation&lt;/a&gt; for more details and examples.&lt;/p&gt; &#xA;&lt;h2&gt;Web UI&lt;/h2&gt; &#xA;&lt;p&gt;cAdvisor exposes a web UI at its port:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;http://&amp;lt;hostname&amp;gt;:&amp;lt;port&amp;gt;/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/web.md&#34;&gt;documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Remote REST API &amp;amp; Clients&lt;/h2&gt; &#xA;&lt;p&gt;cAdvisor exposes its raw and processed stats via a versioned remote REST API. See the API&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/api.md&#34;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;There is also an official Go client implementation in the &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/client/&#34;&gt;client&lt;/a&gt; directory. See the &lt;a href=&#34;https://raw.githubusercontent.com/google/cadvisor/master/docs/clients.md&#34;&gt;documentation&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;cAdvisor aims to improve the resource usage and performance characteristics of running containers. Today, we gather and expose this information to users. In our roadmap:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Advise on the performance of a container (e.g.: when it is being negatively affected by another, when it is not receiving the resources it requires, etc).&lt;/li&gt; &#xA; &lt;li&gt;Auto-tune the performance of the container based on previous advise.&lt;/li&gt; &#xA; &lt;li&gt;Provide usage prediction to cluster schedulers and orchestration layers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Contributions, questions, and comments are all welcomed and encouraged! cAdvisor developers hang out on &lt;a href=&#34;https://kubernetes.slack.com&#34;&gt;Slack&lt;/a&gt; in the #sig-node channel (get an invitation &lt;a href=&#34;http://slack.kubernetes.io/&#34;&gt;here&lt;/a&gt;). We also have &lt;a href=&#34;https://discuss.kubernetes.io/&#34;&gt;discuss.kubernetes.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please reach out and get involved in the project, we&#39;re actively looking for more contributors to bring on board!&lt;/p&gt; &#xA;&lt;h3&gt;Core Team&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bobbypage&#34;&gt;@bobbypage, Google&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iwankgb&#34;&gt;@iwankgb, Independent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/creatone&#34;&gt;@creatone, Intel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dims&#34;&gt;@dims, VMWare&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrunalp&#34;&gt;@mrunalp, RedHat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Frequent Collaborators&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haircommander&#34;&gt;@haircommander, RedHat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Emeritus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dashpole&#34;&gt;@dashpole, Google&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dchen1107&#34;&gt;@dchen1107, Google&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/derekwaynecarr&#34;&gt;@derekwaynecarr, RedHat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>