<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-23T01:33:23Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>prometheus/blackbox_exporter</title>
    <updated>2022-09-23T01:33:23Z</updated>
    <id>tag:github.com,2022-09-23:/prometheus/blackbox_exporter</id>
    <link href="https://github.com/prometheus/blackbox_exporter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blackbox prober exporter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Blackbox exporter &lt;a href=&#34;https://travis-ci.org/prometheus/blackbox_exporter&#34;&gt;&lt;img src=&#34;https://travis-ci.org/prometheus/blackbox_exporter.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/prometheus/blackbox_exporter&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/prometheus/blackbox_exporter/tree/master.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://quay.io/repository/prometheus/blackbox-exporter&#34;&gt;&lt;img src=&#34;https://quay.io/repository/prometheus/blackbox-exporter/status&#34; alt=&#34;Docker Repository on Quay&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/prom/blackbox-exporter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/prom/blackbox-exporter.svg?maxAge=604800&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The blackbox exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC.&lt;/p&gt; &#xA;&lt;h2&gt;Running this software&lt;/h2&gt; &#xA;&lt;h3&gt;From binaries&lt;/h3&gt; &#xA;&lt;p&gt;Download the most suitable binary from &lt;a href=&#34;https://github.com/prometheus/blackbox_exporter/releases&#34;&gt;the releases tab&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./blackbox_exporter &amp;lt;flags&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the docker image&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: You may want to &lt;a href=&#34;https://docs.docker.com/v17.09/engine/userguide/networking/default_network/ipv6/&#34;&gt;enable ipv6 in your docker configuration&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -d -p 9115:9115 --name blackbox_exporter -v `pwd`:/config prom/blackbox-exporter:master --config.file=/config/blackbox.yml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Checking the results&lt;/h3&gt; &#xA;&lt;p&gt;Visiting &lt;a href=&#34;http://localhost:9115/probe?target=google.com&amp;amp;module=http_2xx&#34;&gt;http://localhost:9115/probe?target=google.com&amp;amp;module=http_2xx&lt;/a&gt; will return metrics for a HTTP probe against google.com. The &lt;code&gt;probe_success&lt;/code&gt; metric indicates if the probe succeeded. Adding a &lt;code&gt;debug=true&lt;/code&gt; parameter will return debug information for that probe.&lt;/p&gt; &#xA;&lt;h3&gt;TLS and basic authentication&lt;/h3&gt; &#xA;&lt;p&gt;The Blackbox Exporter supports TLS and basic authentication. This enables better control of the various HTTP endpoints.&lt;/p&gt; &#xA;&lt;p&gt;To use TLS and/or basic authentication, you need to pass a configuration file using the &lt;code&gt;--web.config.file&lt;/code&gt; parameter. The format of the file is described &lt;a href=&#34;https://github.com/prometheus/exporter-toolkit/raw/master/docs/web-configuration.md&#34;&gt;in the exporter-toolkit repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the TLS and basic authentication settings affect all HTTP endpoints: /metrics for scraping, /probe for probing, and the web UI.&lt;/p&gt; &#xA;&lt;h2&gt;Building the software&lt;/h2&gt; &#xA;&lt;h3&gt;Local Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building with Docker&lt;/h3&gt; &#xA;&lt;p&gt;After a successful local build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t blackbox_exporter .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md&#34;&gt;Configuration&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Blackbox exporter is configured via a &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md&#34;&gt;configuration file&lt;/a&gt; and command-line flags (such as what configuration file to load, what port to listen on, and the logging format and level).&lt;/p&gt; &#xA;&lt;p&gt;Blackbox exporter can reload its configuration file at runtime. If the new configuration is not well-formed, the changes will not be applied. A configuration reload is triggered by sending a &lt;code&gt;SIGHUP&lt;/code&gt; to the Blackbox exporter process or by sending a HTTP POST request to the &lt;code&gt;/-/reload&lt;/code&gt; endpoint.&lt;/p&gt; &#xA;&lt;p&gt;To view all available command-line flags, run &lt;code&gt;./blackbox_exporter -h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To specify which &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/CONFIGURATION.md&#34;&gt;configuration file&lt;/a&gt; to load, use the &lt;code&gt;--config.file&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, an &lt;a href=&#34;https://raw.githubusercontent.com/prometheus/blackbox_exporter/master/example.yml&#34;&gt;example configuration&lt;/a&gt; is also available.&lt;/p&gt; &#xA;&lt;p&gt;HTTP, HTTPS (via the &lt;code&gt;http&lt;/code&gt; prober), DNS, TCP socket, ICMP and gRPC (see permissions section) are currently supported. Additional modules can be defined to meet your needs.&lt;/p&gt; &#xA;&lt;p&gt;The timeout of each probe is automatically determined from the &lt;code&gt;scrape_timeout&lt;/code&gt; in the &lt;a href=&#34;https://prometheus.io/docs/operating/configuration/#configuration-file&#34;&gt;Prometheus config&lt;/a&gt;, slightly reduced to allow for network delays. This can be further limited by the &lt;code&gt;timeout&lt;/code&gt; in the Blackbox exporter config file. If neither is specified, it defaults to 120 seconds.&lt;/p&gt; &#xA;&lt;h2&gt;Prometheus Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Blackbox exporter implements the multi-target exporter pattern, so we advice to read the guide &lt;a href=&#34;https://prometheus.io/docs/guides/multi-target-exporter/&#34;&gt;Understanding and using the multi-target exporter pattern &lt;/a&gt; to get the general idea about the configuration.&lt;/p&gt; &#xA;&lt;p&gt;The blackbox exporter needs to be passed the target as a parameter, this can be done with relabelling.&lt;/p&gt; &#xA;&lt;p&gt;Example config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;scrape_configs:&#xA;  - job_name: &#39;blackbox&#39;&#xA;    metrics_path: /probe&#xA;    params:&#xA;      module: [http_2xx]  # Look for a HTTP 200 response.&#xA;    static_configs:&#xA;      - targets:&#xA;        - http://prometheus.io    # Target to probe with http.&#xA;        - https://prometheus.io   # Target to probe with https.&#xA;        - http://example.com:8080 # Target to probe with http on port 8080.&#xA;    relabel_configs:&#xA;      - source_labels: [__address__]&#xA;        target_label: __param_target&#xA;      - source_labels: [__param_target]&#xA;        target_label: instance&#xA;      - target_label: __address__&#xA;        replacement: 127.0.0.1:9115  # The blackbox exporter&#39;s real hostname:port.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HTTP probes can accept an additional &lt;code&gt;hostname&lt;/code&gt; parameter that will set &lt;code&gt;Host&lt;/code&gt; header and TLS SNI. This can be especially useful with &lt;code&gt;dns_sd_config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;scrape_configs:&#xA;  - job_name: blackbox_all&#xA;    metrics_path: /probe&#xA;    params:&#xA;      module: [ http_2xx ]  # Look for a HTTP 200 response.&#xA;    dns_sd_configs:&#xA;      - names:&#xA;          - example.com&#xA;          - prometheus.io&#xA;        type: A&#xA;        port: 443&#xA;    relabel_configs:&#xA;      - source_labels: [__address__]&#xA;        target_label: __param_target&#xA;        replacement: https://$1/  # Make probe URL be like https://1.2.3.4:443/&#xA;      - source_labels: [__param_target]&#xA;        target_label: instance&#xA;      - target_label: __address__&#xA;        replacement: 127.0.0.1:9115  # The blackbox exporter&#39;s real hostname:port.&#xA;      - source_labels: [__meta_dns_name]&#xA;        target_label: __param_hostname  # Make domain name become &#39;Host&#39; header for probe requests&#xA;      - source_labels: [__meta_dns_name]&#xA;        target_label: vhost  # and store it in &#39;vhost&#39; label&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Permissions&lt;/h2&gt; &#xA;&lt;p&gt;The ICMP probe requires elevated privileges to function:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Windows&lt;/em&gt;: Administrator privileges are required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Linux&lt;/em&gt;: either a user with a group within &lt;code&gt;net.ipv4.ping_group_range&lt;/code&gt;, the &lt;code&gt;CAP_NET_RAW&lt;/code&gt; capability or the root user is required. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Your distribution may configure &lt;code&gt;net.ipv4.ping_group_range&lt;/code&gt; by default in &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; or similar. If not you can set &lt;code&gt;net.ipv4.ping_group_range = 0 2147483647&lt;/code&gt; to allow any user the ability to use ping.&lt;/li&gt; &#xA;   &lt;li&gt;Alternatively the capability can be set by executing &lt;code&gt;setcap cap_net_raw+ep blackbox_exporter&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;BSD&lt;/em&gt;: root user is required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;OS X&lt;/em&gt;: No additional privileges are needed.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>go-yaml/yaml</title>
    <updated>2022-09-23T01:33:23Z</updated>
    <id>tag:github.com,2022-09-23:/go-yaml/yaml</id>
    <link href="https://github.com/go-yaml/yaml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YAML support for the Go language.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;YAML support for the Go language&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;The yaml package enables Go programs to comfortably encode and decode YAML values. It was developed within &lt;a href=&#34;https://www.canonical.com&#34;&gt;Canonical&lt;/a&gt; as part of the &lt;a href=&#34;https://juju.ubuntu.com&#34;&gt;juju&lt;/a&gt; project, and is based on a pure Go port of the well-known &lt;a href=&#34;http://pyyaml.org/wiki/LibYAML&#34;&gt;libyaml&lt;/a&gt; C library to parse and generate YAML data quickly and reliably.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The yaml package supports most of YAML 1.2, but preserves some behavior from 1.1 for backwards compatibility.&lt;/p&gt; &#xA;&lt;p&gt;Specifically, as of v3 of the yaml package:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;YAML 1.1 bools (&lt;em&gt;yes/no, on/off&lt;/em&gt;) are supported as long as they are being decoded into a typed bool value. Otherwise they behave as a string. Booleans in YAML 1.2 are &lt;em&gt;true/false&lt;/em&gt; only.&lt;/li&gt; &#xA; &lt;li&gt;Octals encode and decode as &lt;em&gt;0777&lt;/em&gt; per YAML 1.1, rather than &lt;em&gt;0o777&lt;/em&gt; as specified in YAML 1.2, because most parsers still use the old format. Octals in the &lt;em&gt;0o777&lt;/em&gt; format are supported though, so new files work.&lt;/li&gt; &#xA; &lt;li&gt;Does not support base-60 floats. These are gone from YAML 1.2, and were actually never supported by this package as it&#39;s clearly a poor choice.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and offers backwards compatibility with YAML 1.1 in some cases. 1.2, including support for anchors, tags, map merging, etc. Multi-document unmarshalling is not yet implemented, and base-60 floats from YAML 1.1 are purposefully not supported since they&#39;re a poor design and are gone in YAML 1.2.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and usage&lt;/h2&gt; &#xA;&lt;p&gt;The import path for the package is &lt;em&gt;gopkg.in/yaml.v3&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install it, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;go get gopkg.in/yaml.v3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API documentation&lt;/h2&gt; &#xA;&lt;p&gt;If opened in a browser, the import path itself leads to the API documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gopkg.in/yaml.v3&#34;&gt;https://gopkg.in/yaml.v3&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API stability&lt;/h2&gt; &#xA;&lt;p&gt;The package API for yaml v3 will remain stable as described in &lt;a href=&#34;https://gopkg.in&#34;&gt;gopkg.in&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The yaml package is licensed under the MIT and Apache License 2.0 licenses. Please see the LICENSE file for details.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main&#xA;&#xA;import (&#xA;        &#34;fmt&#34;&#xA;        &#34;log&#34;&#xA;&#xA;        &#34;gopkg.in/yaml.v3&#34;&#xA;)&#xA;&#xA;var data = `&#xA;a: Easy!&#xA;b:&#xA;  c: 2&#xA;  d: [3, 4]&#xA;`&#xA;&#xA;// Note: struct fields must be public in order for unmarshal to&#xA;// correctly populate the data.&#xA;type T struct {&#xA;        A string&#xA;        B struct {&#xA;                RenamedC int   `yaml:&#34;c&#34;`&#xA;                D        []int `yaml:&#34;,flow&#34;`&#xA;        }&#xA;}&#xA;&#xA;func main() {&#xA;        t := T{}&#xA;    &#xA;        err := yaml.Unmarshal([]byte(data), &amp;amp;t)&#xA;        if err != nil {&#xA;                log.Fatalf(&#34;error: %v&#34;, err)&#xA;        }&#xA;        fmt.Printf(&#34;--- t:\n%v\n\n&#34;, t)&#xA;    &#xA;        d, err := yaml.Marshal(&amp;amp;t)&#xA;        if err != nil {&#xA;                log.Fatalf(&#34;error: %v&#34;, err)&#xA;        }&#xA;        fmt.Printf(&#34;--- t dump:\n%s\n\n&#34;, string(d))&#xA;    &#xA;        m := make(map[interface{}]interface{})&#xA;    &#xA;        err = yaml.Unmarshal([]byte(data), &amp;amp;m)&#xA;        if err != nil {&#xA;                log.Fatalf(&#34;error: %v&#34;, err)&#xA;        }&#xA;        fmt.Printf(&#34;--- m:\n%v\n\n&#34;, m)&#xA;    &#xA;        d, err = yaml.Marshal(&amp;amp;m)&#xA;        if err != nil {&#xA;                log.Fatalf(&#34;error: %v&#34;, err)&#xA;        }&#xA;        fmt.Printf(&#34;--- m dump:\n%s\n\n&#34;, string(d))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example will generate the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--- t:&#xA;{Easy! {2 [3 4]}}&#xA;&#xA;--- t dump:&#xA;a: Easy!&#xA;b:&#xA;  c: 2&#xA;  d: [3, 4]&#xA;&#xA;&#xA;--- m:&#xA;map[a:Easy! b:map[c:2 d:[3 4]]]&#xA;&#xA;--- m dump:&#xA;a: Easy!&#xA;b:&#xA;  c: 2&#xA;  d:&#xA;  - 3&#xA;  - 4&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>weaveworks/eksctl</title>
    <updated>2022-09-23T01:33:23Z</updated>
    <id>tag:github.com,2022-09-23:/weaveworks/eksctl</id>
    <link href="https://github.com/weaveworks/eksctl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official CLI for Amazon EKS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;eksctl&lt;/code&gt; - The official CLI for Amazon EKS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coveralls.io/github/weaveworks/eksctl?branch=main&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/weaveworks/eksctl/badge.svg?branch=main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/weaveworks/eksctl&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/weaveworks/eksctl&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;eksctl&lt;/code&gt; is a simple CLI tool for creating clusters on EKS - Amazon&#39;s new managed Kubernetes service for EC2. It is written in Go, and uses CloudFormation.&lt;/p&gt; &#xA;&lt;p&gt;You can create a cluster in minutes with just one command – &lt;strong&gt;&lt;code&gt;eksctl create cluster&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/weaveworks/eksctl/main/logo/eksctl.png&#34; alt=&#34;Gophers: E, K, S, C, T, &amp;amp; L&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Need help? Join &lt;a href=&#34;https://slack.weave.works/&#34;&gt;Weave Community Slack&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To download the latest release, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --silent --location &#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz&#34; | tar xz -C /tmp&#xA;sudo mv /tmp/eksctl /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For ARM system, please change ARCH (e.g. armv6, armv7 or arm64) accordingly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --silent --location &#34;https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_arm64.tar.gz&#34; | tar xz -C /tmp&#xA;sudo mv /tmp/eksctl /usr/local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, macOS users can use &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew tap weaveworks/tap&#xA;brew install weaveworks/tap/eksctl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and Windows users can use &lt;a href=&#34;https://chocolatey.org&#34;&gt;chocolatey&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chocolatey install eksctl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or &lt;a href=&#34;https://scoop.sh&#34;&gt;scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install eksctl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AWS Account&lt;/h3&gt; &#xA;&lt;p&gt;You will need to have AWS API credentials configured. What works for AWS CLI or any other tools (kops, Terraform etc), should be sufficient. You can use &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-config-files.html&#34;&gt;&lt;code&gt;~/.aws/credentials&lt;/code&gt; file&lt;/a&gt; or &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-environment.html&#34;&gt;environment variables&lt;/a&gt;. For more information read &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-environment.html&#34;&gt;AWS documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You will also need &lt;a href=&#34;https://github.com/kubernetes-sigs/aws-iam-authenticator&#34;&gt;AWS IAM Authenticator for Kubernetes&lt;/a&gt; command (either &lt;code&gt;aws-iam-authenticator&lt;/code&gt; or &lt;code&gt;aws eks get-token&lt;/code&gt; (available in version 1.16.156 or greater of AWS CLI) in your &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The IAM account used for EKS cluster creation should have these minimal access levels.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;AWS Service&lt;/th&gt; &#xA;   &lt;th&gt;Access Level&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CloudFormation&lt;/td&gt; &#xA;   &lt;td&gt;Full Access&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EC2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Full:&lt;/strong&gt; Tagging &lt;strong&gt;Limited:&lt;/strong&gt; List, Read, Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EC2 Auto Scaling&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Limited:&lt;/strong&gt; List, Write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EKS&lt;/td&gt; &#xA;   &lt;td&gt;Full Access&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IAM&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Limited:&lt;/strong&gt; List, Read, Write, Permissions Management&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Systems Manager&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Limited:&lt;/strong&gt; List, Read&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The inline policy json is listed in &lt;a href=&#34;https://eksctl.io/usage/minimum-iam-policies/&#34;&gt;Minimal IAM Policies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Docker&lt;/h3&gt; &#xA;&lt;p&gt;For every release and RC a docker image is pushed to &lt;a href=&#34;https://hub.docker.com/r/weaveworks/eksctl&#34;&gt;weaveworks/eksctl&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;p&gt;To create a basic cluster, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eksctl create cluster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A cluster will be created with default parameters&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;exciting auto-generated name, e.g. &#34;fabulous-mushroom-1527688624&#34;&lt;/li&gt; &#xA; &lt;li&gt;2x &lt;code&gt;m5.large&lt;/code&gt; nodes (this instance type suits most common use-cases, and is good value for money)&lt;/li&gt; &#xA; &lt;li&gt;use official AWS EKS AMI&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;us-west-2&lt;/code&gt; region&lt;/li&gt; &#xA; &lt;li&gt;dedicated VPC (check your quotas)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once you have created a cluster, you will find that cluster credentials were added in &lt;code&gt;~/.kube/config&lt;/code&gt;. If you have &lt;code&gt;kubectl&lt;/code&gt; v1.10.x as well as &lt;code&gt;aws-iam-authenticator&lt;/code&gt; commands in your PATH, you should be able to use &lt;code&gt;kubectl&lt;/code&gt;. You will need to make sure to use the same AWS API credentials for this also. Check &lt;a href=&#34;https://docs.aws.amazon.com/eks/latest/userguide/configure-kubectl.html&#34;&gt;EKS docs&lt;/a&gt; for instructions. If you installed &lt;code&gt;eksctl&lt;/code&gt; via Homebrew, you should have all of these dependencies installed already.&lt;/p&gt; &#xA;&lt;p&gt;Example output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ eksctl create cluster&#xA;[ℹ]  eksctl version 0.6.0&#xA;[ℹ]  using region us-west-2&#xA;[ℹ]  setting availability zones to [us-west-2a us-west-2c us-west-2b]&#xA;[ℹ]  subnets for us-west-2a - public:192.168.0.0/19 private:192.168.96.0/19&#xA;[ℹ]  subnets for us-west-2c - public:192.168.32.0/19 private:192.168.128.0/19&#xA;[ℹ]  subnets for us-west-2b - public:192.168.64.0/19 private:192.168.160.0/19&#xA;[ℹ]  nodegroup &#34;ng-98b3b83a&#34; will use &#34;ami-05ecac759c81e0b0c&#34; [AmazonLinux2/1.11]&#xA;[ℹ]  creating EKS cluster &#34;floral-unicorn-1540567338&#34; in &#34;us-west-2&#34; region&#xA;[ℹ]  will create 2 separate CloudFormation stacks for cluster itself and the initial nodegroup&#xA;[ℹ]  if you encounter any issues, check CloudFormation console or try &#39;eksctl utils describe-stacks --region=us-west-2 --cluster=floral-unicorn-1540567338&#39;&#xA;[ℹ]  2 sequential tasks: { create cluster control plane &#34;floral-unicorn-1540567338&#34;, create managed nodegroup &#34;ng-98b3b83a&#34; }&#xA;[ℹ]  building cluster stack &#34;eksctl-floral-unicorn-1540567338-cluster&#34;&#xA;[ℹ]  deploying stack &#34;eksctl-floral-unicorn-1540567338-cluster&#34;&#xA;[ℹ]  building nodegroup stack &#34;eksctl-floral-unicorn-1540567338-nodegroup-ng-98b3b83a&#34;&#xA;[ℹ]  --nodes-min=2 was set automatically for nodegroup ng-98b3b83a&#xA;[ℹ]  --nodes-max=2 was set automatically for nodegroup ng-98b3b83a&#xA;[ℹ]  deploying stack &#34;eksctl-floral-unicorn-1540567338-nodegroup-ng-98b3b83a&#34;&#xA;[✔]  all EKS cluster resources for &#34;floral-unicorn-1540567338&#34; have been created&#xA;[✔]  saved kubeconfig as &#34;~/.kube/config&#34;&#xA;[ℹ]  adding role &#34;arn:aws:iam::376248598259:role/eksctl-ridiculous-sculpture-15547-NodeInstanceRole-1F3IHNVD03Z74&#34; to auth ConfigMap&#xA;[ℹ]  nodegroup &#34;ng-98b3b83a&#34; has 1 node(s)&#xA;[ℹ]  node &#34;ip-192-168-64-220.us-west-2.compute.internal&#34; is not ready&#xA;[ℹ]  waiting for at least 2 node(s) to become ready in &#34;ng-98b3b83a&#34;&#xA;[ℹ]  nodegroup &#34;ng-98b3b83a&#34; has 2 node(s)&#xA;[ℹ]  node &#34;ip-192-168-64-220.us-west-2.compute.internal&#34; is ready&#xA;[ℹ]  node &#34;ip-192-168-8-135.us-west-2.compute.internal&#34; is ready&#xA;[ℹ]  kubectl command should work with &#34;~/.kube/config&#34;, try &#39;kubectl get nodes&#39;&#xA;[✔]  EKS cluster &#34;floral-unicorn-1540567338&#34; in &#34;us-west-2&#34; region is ready&#xA;$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install &lt;code&gt;eksctl&lt;/code&gt; following the &lt;a href=&#34;https://eksctl.io/introduction/#installation&#34;&gt;installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about what &lt;code&gt;eksctl&lt;/code&gt; can do check &lt;a href=&#34;https://eksctl.io&#34;&gt;eksctl.io&lt;/a&gt;. A good place to start is &lt;a href=&#34;https://eksctl.io/introduction/#getting-started&#34;&gt;Getting Started&lt;/a&gt;. The full list of features can be found &lt;a href=&#34;https://eksctl.io/introduction/#features&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Code contributions are very welcome. If you are interested in helping make &lt;code&gt;eksctl&lt;/code&gt; great then see our &lt;a href=&#34;https://raw.githubusercontent.com/weaveworks/eksctl/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;. Or join the discussion on our &lt;a href=&#34;https://groups.google.com/forum/#!forum/eksctl&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We follow the &lt;a href=&#34;https://raw.githubusercontent.com/weaveworks/eksctl/main/CODE_OF_CONDUCT.md&#34;&gt;CNCF Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Minor releases of &lt;code&gt;eksctl&lt;/code&gt; should be expected every two weeks and patch releases will be made available as needed.&lt;/p&gt; &#xA;&lt;p&gt;One or more release candidate(s) (RC) builds will be made available prior to each minor release. RC builds are intended only for testing purposes.&lt;/p&gt; &#xA;&lt;h2&gt;Get in touch&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/weaveworks/eksctl/issues/new&#34;&gt;Create an issue&lt;/a&gt;, or login to &lt;a href=&#34;https://weave-community.slack.com/messages/eksctl/&#34;&gt;Weave Community Slack (#eksctl)&lt;/a&gt; (&lt;a href=&#34;https://slack.weave.works/&#34;&gt;signup&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;Logo Credits&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;em&gt;Original Gophers drawn by &lt;a href=&#34;https://twitter.com/ashleymcnamara&#34;&gt;Ashley McNamara&lt;/a&gt;, unique E, K, S, C, T &amp;amp; L Gopher identities had been produced with &lt;a href=&#34;https://github.com/matryer/gopherize.me/&#34;&gt;Gopherize.me&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
</feed>