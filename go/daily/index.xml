<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-07T01:36:45Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-nunu/nunu</title>
    <updated>2023-07-07T01:36:45Z</updated>
    <id>tag:github.com,2023-07-07:/go-nunu/nunu</id>
    <link href="https://github.com/go-nunu/nunu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CLI tool for building Go applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nunu — A CLI tool for building Go applications.&lt;/h1&gt; &#xA;&lt;p&gt;Nunu is a scaffolding tool for building Go applications. Its name comes from a game character in League of Legends, a little boy riding on the shoulders of a Yeti. Just like Nunu, this project stands on the shoulders of giants, as it is built upon a combination of popular libraries from the Go ecosystem. This combination allows you to quickly build efficient and reliable applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/go-nunu/nunu/raw/main/README_zh.md&#34;&gt;简体中文介绍&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/go-nunu/nunu/raw/main/.github/assets/banner.png&#34; alt=&#34;Nunu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-nunu/nunu/raw/main/docs/en/guide.md&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-nunu/nunu/raw/main/docs/en/architecture.md&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-nunu/nunu/raw/main/docs/en/tutorial.md&#34;&gt;Getting Started Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/go-nunu/nunu/raw/main/docs/en/unit_testing.md&#34;&gt;Unit Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gin&lt;/strong&gt;: &lt;a href=&#34;https://github.com/gin-gonic/gin&#34;&gt;https://github.com/gin-gonic/gin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gorm&lt;/strong&gt;: &lt;a href=&#34;https://github.com/go-gorm/gorm&#34;&gt;https://github.com/go-gorm/gorm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wire&lt;/strong&gt;: &lt;a href=&#34;https://github.com/google/wire&#34;&gt;https://github.com/google/wire&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Viper&lt;/strong&gt;: &lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Zap&lt;/strong&gt;: &lt;a href=&#34;https://github.com/uber-go/zap&#34;&gt;https://github.com/uber-go/zap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Golang-jwt&lt;/strong&gt;: &lt;a href=&#34;https://github.com/golang-jwt/jwt&#34;&gt;https://github.com/golang-jwt/jwt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go-redis&lt;/strong&gt;: &lt;a href=&#34;https://github.com/go-redis/redis&#34;&gt;https://github.com/go-redis/redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testify&lt;/strong&gt;: &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;https://github.com/stretchr/testify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sonyflake&lt;/strong&gt;: &lt;a href=&#34;https://github.com/sony/sonyflake&#34;&gt;https://github.com/sony/sonyflake&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gocron&lt;/strong&gt;: &lt;a href=&#34;https://github.com/go-co-op/gocron&#34;&gt;https://github.com/go-co-op/gocron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Go-sqlmock&lt;/strong&gt;: &lt;a href=&#34;https://github.com/DATA-DOG/go-sqlmock&#34;&gt;https://github.com/DATA-DOG/go-sqlmock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Gomock&lt;/strong&gt;: &lt;a href=&#34;https://github.com/golang/mock&#34;&gt;https://github.com/golang/mock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;More...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Low Learning Curve and Customization&lt;/strong&gt;: Nunu encapsulates popular libraries that Gophers are familiar with, allowing you to easily customize the application to meet specific requirements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High Performance and Scalability&lt;/strong&gt;: Nunu aims to be high-performance and scalable. It uses the latest technologies and best practices to ensure that your application can handle high traffic and large amounts of data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security and Reliability&lt;/strong&gt;: Nunu uses stable and reliable third-party libraries to ensure the security and reliability of your application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modular and Extensible&lt;/strong&gt;: Nunu is designed to be modular and extensible. You can easily add new features and functionality by using third-party libraries or writing your own modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete Documentation and Testing&lt;/strong&gt;: Nunu has comprehensive documentation and testing. It provides extensive documentation and examples to help you get started quickly. It also includes a test suite to ensure that your application works as expected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Concise Layered Architecture&lt;/h2&gt; &#xA;&lt;p&gt;Nunu adopts a classic layered architecture. In order to achieve modularity and decoupling, it uses the dependency injection framework &lt;code&gt;Wire&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/go-nunu/nunu/raw/main/.github/assets/layout.png&#34; alt=&#34;Nunu Layout&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nunu CLI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/go-nunu/nunu/raw/main/.github/assets/screenshot.jpg&#34; alt=&#34;Nunu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Directory Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;.&#xA;├── cmd&#xA;│   ├── job&#xA;│   │   ├── main.go&#xA;│   │   ├── wire.go&#xA;│   │   └── wire_gen.go&#xA;│   ├── migration&#xA;│   │   ├── main.go&#xA;│   │   ├── wire.go&#xA;│   │   └── wire_gen.go&#xA;│   └── server&#xA;│       ├── main.go&#xA;│       ├── wire.go&#xA;│       └── wire_gen.go&#xA;├── config&#xA;│   ├── local.yml&#xA;│   └── prod.yml&#xA;├── deploy&#xA;├── internal&#xA;│   ├── handler&#xA;│   │   ├── handler.go&#xA;│   │   └── user.go&#xA;│   ├── job&#xA;│   │   └── job.go&#xA;│   ├── middleware&#xA;│   ├── migration&#xA;│   │   └── migration.go&#xA;│   ├── model&#xA;│   │   └── user.go&#xA;│   ├── repository&#xA;│   │   ├── repository.go&#xA;│   │   └── user.go&#xA;│   ├── server&#xA;│   │   └── http.go&#xA;│   └── service&#xA;│       ├── service.go&#xA;│       └── user.go&#xA;├── mocks&#xA;│   ├── repository&#xA;│   │   └── user.go&#xA;│   └── service&#xA;│       └── user.go&#xA;├── pkg&#xA;├── scripts&#xA;├── storage&#xA;├── test&#xA;│   └── server&#xA;│       ├── handler&#xA;│       │   └── user_test.go&#xA;│       ├── repository&#xA;│       │   └── user_test.go&#xA;│       └── service&#xA;│           └── user_test.go&#xA;├── web&#xA;│   └── index.html&#xA;├── LICENSE&#xA;├── Makefile&#xA;├── README.md&#xA;├── README_zh.md&#xA;├── coverage.html&#xA;├── go.mod&#xA;└── go.sum&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The project architecture follows a typical layered structure, consisting of the following modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;cmd&lt;/code&gt;: This module contains the entry points of the application, which perform different operations based on different commands, such as starting the server or executing database migrations. Each sub-module has a &lt;code&gt;main.go&lt;/code&gt; file as the entry file, as well as &lt;code&gt;wire.go&lt;/code&gt; and &lt;code&gt;wire_gen.go&lt;/code&gt; files for dependency injection.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;config&lt;/code&gt;: This module contains the configuration files for the application, providing different configurations for different environments, such as development and production.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;deploy&lt;/code&gt;: This module is used for deploying the application and includes deployment scripts and configuration files.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;internal&lt;/code&gt;: This module is the core module of the application and contains the implementation of various business logic.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;handler&lt;/code&gt;: This sub-module contains the handlers for handling HTTP requests, responsible for receiving requests and invoking the corresponding services for processing.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;job&lt;/code&gt;: This sub-module contains the logic for background tasks.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;middleware&lt;/code&gt;: This sub-module contains the implementation of middleware, which is used for pre- and post-processing of requests.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;migration&lt;/code&gt;: This sub-module contains the logic for database migrations.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;model&lt;/code&gt;: This sub-module contains the definition of data models.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;repository&lt;/code&gt;: This sub-module contains the implementation of the data access layer, responsible for interacting with the database.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;server&lt;/code&gt;: This sub-module contains the implementation of the HTTP server.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;service&lt;/code&gt;: This sub-module contains the implementation of the business logic, responsible for handling specific business operations.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mocks&lt;/code&gt;: This module contains the mock implementations of interfaces from various modules, used for unit testing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pkg&lt;/code&gt;: This module contains some common utilities and functions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;scripts&lt;/code&gt;: This module contains some script files used for project build, test, and deployment operations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;storage&lt;/code&gt;: This module is used for storing files or other static resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;test&lt;/code&gt;: This module contains the unit tests for various modules, organized into sub-directories based on modules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;web&lt;/code&gt;: This module contains the frontend-related files, such as HTML, CSS, and JavaScript.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, there are some other files and directories, such as license files, build files, and README. Overall, the project architecture is clear, with clear responsibilities for each module, making it easy to understand and maintain.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To use Nunu, you need to have the following software installed on your system:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go 1.16 or higher&lt;/li&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA; &lt;li&gt;MySQL 5.7 or higher (optional)&lt;/li&gt; &#xA; &lt;li&gt;Redis (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;You can install Nunu with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/go-nunu/nunu@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Tips: If &lt;code&gt;go install&lt;/code&gt; succeeds but the &lt;code&gt;nunu&lt;/code&gt; command is not recognized, it is because the environment variable is not configured. You can add the GOBIN directory to the environment variable.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Create a New Project&lt;/h3&gt; &#xA;&lt;p&gt;You can create a new Go project with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nunu new projectName&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, it pulls from the GitHub source, but you can also use an accelerated repository in China:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Use the basic template&#xA;nunu new projectName -r https://gitee.com/go-nunu/nunu-layout-basic.git&#xA;// Use the advanced template&#xA;nunu new projectName -r https://gitee.com/go-nunu/nunu-layout-advanced.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will create a directory named &lt;code&gt;projectName&lt;/code&gt; and generate an elegant Go project structure within it.&lt;/p&gt; &#xA;&lt;h3&gt;Create Components&lt;/h3&gt; &#xA;&lt;p&gt;You can create handlers, services, repositories, and models for your project using the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nunu create handler user&#xA;nunu create service user&#xA;nunu create repository user&#xA;nunu create model user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nunu create all user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These commands will create components named &lt;code&gt;UserHandler&lt;/code&gt;, &lt;code&gt;UserService&lt;/code&gt;, &lt;code&gt;UserRepository&lt;/code&gt;, and &lt;code&gt;UserModel&lt;/code&gt;, respectively, and place them in the correct directories.&lt;/p&gt; &#xA;&lt;h3&gt;Run the Project&lt;/h3&gt; &#xA;&lt;p&gt;You can quickly run the project with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nunu run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will start your Go project and support hot-reloading when files are updated.&lt;/p&gt; &#xA;&lt;h3&gt;Compile wire.go&lt;/h3&gt; &#xA;&lt;p&gt;You can quickly compile &lt;code&gt;wire.go&lt;/code&gt; with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nunu wire&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will compile your &lt;code&gt;wire.go&lt;/code&gt; file and generate the required dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you find any issues or have any improvement suggestions, please feel free to raise an issue or submit a pull request. Your contributions are highly appreciated!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Nunu is released under the MIT License. For more information, see the &lt;a href=&#34;https://raw.githubusercontent.com/go-nunu/nunu/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ThreeDotsLabs/watermill</title>
    <updated>2023-07-07T01:36:45Z</updated>
    <id>tag:github.com,2023-07-07:/ThreeDotsLabs/watermill</id>
    <link href="https://github.com/ThreeDotsLabs/watermill" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building event-driven applications the easy way in Go.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Watermill&lt;/h1&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;200&#34; src=&#34;https://threedots.tech/watermill-io/watermill-logo.png&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill/actions/workflows/master.yml&#34;&gt;&lt;img src=&#34;https://github.com/ThreeDotsLabs/watermill/actions/workflows/master.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/ThreeDotsLabs/watermill&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/ThreeDotsLabs/watermill.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/ThreeDotsLabs/watermill&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/ThreeDotsLabs/watermill&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/ThreeDotsLabs/watermill&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/ThreeDotsLabs/watermill/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Watermill is a Go library for working efficiently with message streams. It is intended for building event driven applications, enabling event sourcing, RPC over messages, sagas and basically whatever else comes to your mind. You can use conventional pub/sub implementations like Kafka or RabbitMQ, but also HTTP or MySQL binlog if that fits your use case.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy&lt;/strong&gt; to understand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Universal&lt;/strong&gt; - event-driven architecture, messaging, stream processing, CQRS - use it for whatever you need.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast&lt;/strong&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/#benchmarks&#34;&gt;Benchmarks&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt; with middlewares, plugins and Pub/Sub configurations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Resilient&lt;/strong&gt; - using proven technologies and passing stress tests (see &lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/#stability&#34;&gt;Stability&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Pick what you like the best or see in order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://watermill.io/docs/getting-started/&#34;&gt;Getting Started guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;See examples below.&lt;/li&gt; &#xA; &lt;li&gt;Read the full documentation: &lt;a href=&#34;https://watermill.io/&#34;&gt;https://watermill.io/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Our online hands-on training&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://threedots.tech/event-driven/?utm_source=watermill-readme&#34;&gt;&lt;img align=&#34;center&#34; width=&#34;400&#34; src=&#34;https://threedots.tech/event-driven-banner.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/basic/1-your-first-app&#34;&gt;Your first app&lt;/a&gt; - &lt;strong&gt;start here!&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/basic/2-realtime-feed&#34;&gt;Realtime feed&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/basic/3-router&#34;&gt;Router&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/basic/4-metrics&#34;&gt;Metrics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/basic/5-cqrs-protobuf&#34;&gt;CQRS with protobuf&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/pubsubs&#34;&gt;Pub/Subs usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;These examples are part of the &lt;a href=&#34;https://watermill.io/docs/getting-started/&#34;&gt;Getting started guide&lt;/a&gt; and show usage of a single Pub/Sub at a time.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Real-world examples &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/real-world-examples/exactly-once-delivery-counter&#34;&gt;Exactly-once delivery counter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/real-world-examples/receiving-webhooks&#34;&gt;Receiving webhooks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/real-world-examples/sending-webhooks&#34;&gt;Sending webhooks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/real-world-examples/synchronizing-databases&#34;&gt;Synchronizing Databases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/real-world-examples/persistent-event-log&#34;&gt;Persistent Event Log&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/real-world-examples/transactional-events&#34;&gt;Transactional Events&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/_examples/real-world-examples/server-sent-events&#34;&gt;Real-time HTTP updates with Server-Sent Events&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Complete projects &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/nats-example&#34;&gt;NATS example with live code reloading&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ThreeDotsLabs/event-driven-example&#34;&gt;RabbitMQ, webhooks and Kafka integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;Building distributed and scalable services is rarely as easy as some may suggest. There is a lot of hidden knowledge that comes with writing such systems. Just like you don&#39;t need to know the whole TCP stack to create a HTTP REST server, you shouldn&#39;t need to study all of this knowledge to start with building message-driven applications.&lt;/p&gt; &#xA;&lt;p&gt;Watermill&#39;s goal is to make communication with messages as easy to use as HTTP routers. It provides the tools needed to begin working with event-driven architecture and allows you to learn the details on the go.&lt;/p&gt; &#xA;&lt;p&gt;At the heart of Watermill there is one simple interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func(*Message) ([]*Message, error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your handler receives a message and decides whether to publish new message(s) or return an error. What happens next is up to the middlewares you&#39;ve chosen.&lt;/p&gt; &#xA;&lt;p&gt;You can find more about our motivations in our &lt;a href=&#34;https://threedots.tech/post/introducing-watermill/&#34;&gt;&lt;em&gt;Introducing Watermill&lt;/em&gt; blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Pub/Subs&lt;/h2&gt; &#xA;&lt;p&gt;All publishers and subscribers have to implement an interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;type Publisher interface {&#xA;&#x9;Publish(topic string, messages ...*Message) error&#xA;&#x9;Close() error&#xA;}&#xA;&#xA;type Subscriber interface {&#xA;&#x9;Subscribe(ctx context.Context, topic string) (&amp;lt;-chan *Message, error)&#xA;&#x9;Close() error&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported Pub/Subs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AMQP Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-amqp/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-amqp/v2&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bolt Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-bolt/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-bolt&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firestore Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-firestore/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-firestore&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Google Cloud Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-googlecloud/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-googlecloud&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTTP Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-http/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-http&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;io.Reader/io.Writer Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-io/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-io&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kafka Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-kafka/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-kafka/v2&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;NATS Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-nats/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-nats&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Redis Stream Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-redisstream/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-redisstream&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SQL Pub/Sub &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-sql/&#34;&gt;(&lt;code&gt;github.com/ThreeDotsLabs/watermill-sql&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All Pub/Subs implementation documentation can be found in the &lt;a href=&#34;https://watermill.io/pubsubs/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Unofficial libraries&lt;/h2&gt; &#xA;&lt;p&gt;Can&#39;t find your favorite Pub/Sub or library integration? Check &lt;a href=&#34;https://watermill.io/docs/awesome/&#34;&gt;Awesome Watermill&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you know another library or are an author of one, please &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill/edit/master/docs/content/docs/awesome.md&#34;&gt;add it to the list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please check our &lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stability&lt;/h2&gt; &#xA;&lt;p&gt;Watermill v1.0.0 has been released and is production-ready. The public API is stable and will not change without changing the major version.&lt;/p&gt; &#xA;&lt;p&gt;To ensure that all Pub/Subs are stable and safe to use in production, we created a &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill/raw/master/pubsub/tests/test_pubsub.go#L34&#34;&gt;set of tests&lt;/a&gt; that need to pass for each of the implementations before merging to master. All tests are also executed in &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill/raw/master/pubsub/tests/test_pubsub.go#L171&#34;&gt;&lt;em&gt;stress&lt;/em&gt;&lt;/a&gt; mode - that means that we are running all the tests &lt;strong&gt;20x&lt;/strong&gt; in parallel.&lt;/p&gt; &#xA;&lt;p&gt;All tests are run with the race condition detector enabled (&lt;code&gt;-race&lt;/code&gt; flag in tests).&lt;/p&gt; &#xA;&lt;p&gt;For more information about debugging tests, you should check &lt;a href=&#34;http://watermill.io/docs/troubleshooting/#debugging-pubsub-tests&#34;&gt;tests troubleshooting guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Initial tools for benchmarking Pub/Subs can be found in &lt;a href=&#34;https://github.com/ThreeDotsLabs/watermill-benchmark&#34;&gt;watermill-benchmark&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All benchmarks are being done on a single 16 CPU VM instance, running one binary and dependencies in Docker Compose.&lt;/p&gt; &#xA;&lt;p&gt;These numbers are meant to serve as a rough estimate of how fast messages can be processed by different Pub/Subs. Keep in mind that the results can be vastly different, depending on the setup and configuration (both much lower and higher).&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s the short version for message size of 16 bytes.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Pub/Sub&lt;/th&gt; &#xA;   &lt;th&gt;Publish (messages / s)&lt;/th&gt; &#xA;   &lt;th&gt;Subscribe (messages / s)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kafka (one node)&lt;/td&gt; &#xA;   &lt;td&gt;63,506&lt;/td&gt; &#xA;   &lt;td&gt;110,811&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kafka (5 nodes)&lt;/td&gt; &#xA;   &lt;td&gt;70,252&lt;/td&gt; &#xA;   &lt;td&gt;117,529&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NATS&lt;/td&gt; &#xA;   &lt;td&gt;76,208&lt;/td&gt; &#xA;   &lt;td&gt;38,169&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL (MySQL)&lt;/td&gt; &#xA;   &lt;td&gt;7,299&lt;/td&gt; &#xA;   &lt;td&gt;154&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL (PostgreSQL)&lt;/td&gt; &#xA;   &lt;td&gt;4,142&lt;/td&gt; &#xA;   &lt;td&gt;98&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google Cloud Pub/Sub&lt;/td&gt; &#xA;   &lt;td&gt;7,416&lt;/td&gt; &#xA;   &lt;td&gt;39,591&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AMQP&lt;/td&gt; &#xA;   &lt;td&gt;2,408&lt;/td&gt; &#xA;   &lt;td&gt;10,608&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GoChannel&lt;/td&gt; &#xA;   &lt;td&gt;272,938&lt;/td&gt; &#xA;   &lt;td&gt;101,371&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you didn&#39;t find the answer to your question in &lt;a href=&#34;https://watermill.io/&#34;&gt;the documentation&lt;/a&gt;, feel free to ask us directly!&lt;/p&gt; &#xA;&lt;p&gt;Please join us on the &lt;code&gt;#watermill&lt;/code&gt; channel on the &lt;a href=&#34;https://discord.gg/QV6VFg4YQE&#34;&gt;Three Dots Labs Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Every bit of feedback is very welcome and appreciated. Please submit it using &lt;a href=&#34;https://www.surveymonkey.com/r/WZXD392&#34;&gt;the survey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why the name?&lt;/h2&gt; &#xA;&lt;p&gt;It processes streams!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThreeDotsLabs/watermill/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>canonical/lxd</title>
    <updated>2023-07-07T01:36:45Z</updated>
    <id>tag:github.com,2023-07-07:/canonical/lxd</id>
    <link href="https://github.com/canonical/lxd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powerful system container and virtual machine manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LXD&lt;/h1&gt; &#xA;&lt;p&gt;LXD is a modern, secure and powerful system container and virtual machine manager.&lt;/p&gt; &#xA;&lt;!-- Include start LXD intro --&gt; &#xA;&lt;p&gt;It provides a unified experience for running and managing full Linux systems inside containers or virtual machines. LXD supplies images for a &lt;a href=&#34;https://images.linuxcontainers.org&#34;&gt;wide number of Linux distributions&lt;/a&gt; and is built around a very powerful, yet pretty simple, REST API. LXD scales from one instance on a single machine to a cluster in a full data center rack, making it suitable for running workloads both for development and in production.&lt;/p&gt; &#xA;&lt;p&gt;LXD allows you to easily set up a system that feels like a small private cloud. You can run any type of workload in an efficient way while keeping your resources optimized.&lt;/p&gt; &#xA;&lt;p&gt;You should consider using LXD if you want to containerize different environments or run virtual machines, or in general run and manage your infrastructure in a cost-effective way.&lt;/p&gt; &#xA;&lt;!-- Include end LXD intro --&gt; &#xA;&lt;h2&gt;Get started&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://documentation.ubuntu.com/lxd/en/latest/getting_started/&#34;&gt;Getting started&lt;/a&gt; in the LXD documentation for installation instructions and first steps.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Release announcements: &lt;a href=&#34;https://discourse.ubuntu.com/c/lxd/news/&#34;&gt;&lt;code&gt;https://discourse.ubuntu.com/c/lxd/news/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Release tarballs: &lt;a href=&#34;https://github.com/canonical/lxd/releases/&#34;&gt;&lt;code&gt;https://github.com/canonical/lxd/releases/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://documentation.ubuntu.com/lxd/en/latest/&#34;&gt;&lt;code&gt;https://documentation.ubuntu.com/lxd/en/latest/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CI (client)&lt;/td&gt; &#xA;   &lt;td&gt;GitHub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/canonical/lxd/actions&#34;&gt;&lt;img src=&#34;https://github.com/canonical/lxd/workflows/Client%20build%20and%20unit%20tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CI (server)&lt;/td&gt; &#xA;   &lt;td&gt;GitHub&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/canonical/lxd/actions&#34;&gt;&lt;img src=&#34;https://github.com/canonical/lxd/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go documentation&lt;/td&gt; &#xA;   &lt;td&gt;Godoc&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://godoc.org/github.com/canonical/lxd/client&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/canonical/lxd/client?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Static analysis&lt;/td&gt; &#xA;   &lt;td&gt;GoReport&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://goreportcard.com/report/github.com/canonical/lxd&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/canonical/lxd&#34; alt=&#34;Go Report Card&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Translations&lt;/td&gt; &#xA;   &lt;td&gt;Weblate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hosted.weblate.org/projects/linux-containers/lxd/&#34;&gt;&lt;img src=&#34;https://hosted.weblate.org/widgets/linux-containers/-/svg-badge.svg?sanitize=true&#34; alt=&#34;Translation status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Project status&lt;/td&gt; &#xA;   &lt;td&gt;CII Best Practices&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/1086&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/1086/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installing LXD from packages&lt;/h2&gt; &#xA;&lt;p&gt;The LXD daemon only works on Linux but the client tool (&lt;code&gt;lxc&lt;/code&gt;) is available on most platforms.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;OS&lt;/th&gt; &#xA;   &lt;th&gt;Format&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://snapcraft.io/lxd&#34;&gt;Snap&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;snap install lxd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://chocolatey.org/packages/lxc&#34;&gt;Chocolatey&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;choco install lxc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;macOS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/lxc&#34;&gt;Homebrew&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;brew install lxc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For more instructions on installing LXD for a wide variety of Linux distributions and operating systems, and to install LXD from source, see &lt;a href=&#34;https://documentation.ubuntu.com/lxd/en/latest/installing/&#34;&gt;How to install LXD&lt;/a&gt; in the documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;!-- Include start security --&gt; &#xA;&lt;p&gt;Consider the following aspects to ensure that your LXD installation is secure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keep your operating system up-to-date and install all available security patches.&lt;/li&gt; &#xA; &lt;li&gt;Use only supported LXD versions (LTS releases or monthly feature releases).&lt;/li&gt; &#xA; &lt;li&gt;Restrict access to the LXD daemon and the remote API.&lt;/li&gt; &#xA; &lt;li&gt;Do not use privileged containers unless required. If you use privileged containers, put appropriate security measures in place. See the &lt;a href=&#34;https://linuxcontainers.org/lxc/security/&#34;&gt;LXC security page&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;Configure your network interfaces to be secure.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Include end security --&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://documentation.ubuntu.com/lxd/en/latest/security/&#34;&gt;Security&lt;/a&gt; for detailed information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- Include start security note --&gt; &#xA;&lt;p&gt;Local access to LXD through the Unix socket always grants full access to LXD. This includes the ability to attach file system paths or devices to any instance as well as tweak the security features on any instance.&lt;/p&gt; &#xA;&lt;p&gt;Therefore, you should only give such access to users who you&#39;d trust with root access to your system.&lt;/p&gt; &#xA;&lt;!-- Include end security note --&gt; &#xA;&lt;!-- Include start support --&gt; &#xA;&lt;h2&gt;Support and community&lt;/h2&gt; &#xA;&lt;p&gt;The following channels are available for you to interact with the LXD community.&lt;/p&gt; &#xA;&lt;h3&gt;Bug reports&lt;/h3&gt; &#xA;&lt;p&gt;You can file bug reports and feature requests at: &lt;a href=&#34;https://github.com/canonical/lxd/issues/new&#34;&gt;&lt;code&gt;https://github.com/canonical/lxd/issues/new&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Forum&lt;/h3&gt; &#xA;&lt;p&gt;A discussion forum is available at: &lt;a href=&#34;https://discourse.ubuntu.com/c/lxd/&#34;&gt;&lt;code&gt;https://discourse.ubuntu.com/c/lxd/&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;IRC&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer live discussions, you can find us in &lt;a href=&#34;https://web.libera.chat/#lxd&#34;&gt;&lt;code&gt;#lxd&lt;/code&gt;&lt;/a&gt; on &lt;code&gt;irc.libera.chat&lt;/code&gt;. See &lt;a href=&#34;https://discuss.linuxcontainers.org/t/getting-started-with-irc/11920&#34;&gt;Getting started with IRC&lt;/a&gt; if needed.&lt;/p&gt; &#xA;&lt;h3&gt;Commercial support&lt;/h3&gt; &#xA;&lt;p&gt;Commercial support for LXD can be obtained through &lt;a href=&#34;https://www.canonical.com&#34;&gt;Canonical Ltd&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The official documentation is available at: &lt;a href=&#34;https://documentation.ubuntu.com/lxd/en/latest/&#34;&gt;&lt;code&gt;https://documentation.ubuntu.com/lxd/en/latest/&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can find additional resources on the &lt;a href=&#34;https://ubuntu.com/lxd&#34;&gt;website&lt;/a&gt;, on &lt;a href=&#34;https://www.youtube.com/channel/UCuP6xPt0WTeZu32CkQPpbvA&#34;&gt;YouTube&lt;/a&gt; and in the &lt;a href=&#34;https://discourse.ubuntu.com/c/lxd/tutorials/&#34;&gt;Tutorials section&lt;/a&gt; in the forum.&lt;/p&gt; &#xA;&lt;!-- Include end support --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Fixes and new features are greatly appreciated. Make sure to read our &lt;a href=&#34;https://raw.githubusercontent.com/canonical/lxd/main/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt; first!&lt;/p&gt;</summary>
  </entry>
</feed>