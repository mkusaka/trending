<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:44:54Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>go-delve/delve</title>
    <updated>2022-08-17T01:44:54Z</updated>
    <id>tag:github.com,2022-08-17:/go-delve/delve</id>
    <link href="https://github.com/go-delve/delve" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Delve is a debugger for the Go programming language.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/go-delve/delve/master/assets/delve_horizontal.png&#34; alt=&#34;Delve&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://godoc.org/github.com/go-delve/delve&#34;&gt;&lt;img src=&#34;https://godoc.org/github.com/go-delve/delve?status.svg?sanitize=true&#34; alt=&#34;GoDoc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://delve.beta.teamcity.com/viewType.html?buildTypeId=Delve_AggregatorBuild&amp;amp;guest=1&#34;&gt;&lt;img src=&#34;https://delve.beta.teamcity.com/app/rest/builds/buildType:(id:Delve_AggregatorBuild)/statusIcon.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The GitHub issue tracker is for &lt;strong&gt;bugs&lt;/strong&gt; only. Please use the &lt;a href=&#34;https://groups.google.com/forum/#!forum/delve-dev&#34;&gt;developer mailing list&lt;/a&gt; for any feature proposals and discussions.&lt;/p&gt; &#xA;&lt;h3&gt;About Delve&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/cli/getting_started.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/usage/dlv.md&#34;&gt;Command line options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/cli/README.md&#34;&gt;Command line client&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/EditorIntegration.md&#34;&gt;Plugins and GUIs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/faq.md&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/internal&#34;&gt;Internal Documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/api&#34;&gt;API documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/go-delve/delve/master/Documentation/api/ClientHowto.md&#34;&gt;How to write a Delve client&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Delve is a debugger for the Go programming language. The goal of the project is to provide a simple, full featured debugging tool for Go. Delve should be easy to invoke and easy to use. Chances are if you&#39;re using a debugger, things aren&#39;t going your way. With that in mind, Delve should stay out of your way as much as possible.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>EasyDarwin/EasyDarwin</title>
    <updated>2022-08-17T01:44:54Z</updated>
    <id>tag:github.com,2022-08-17:/EasyDarwin/EasyDarwin</id>
    <link href="https://github.com/EasyDarwin/EasyDarwin" rel="alternate"></link>
    <summary type="html">&lt;p&gt;open source、high performance、industrial rtsp streaming server,a lot of optimization on streaming relay,KeyFrame cache,RESTful,and web management,also EasyDarwin support distributed load balancing,a simple streaming media cloud platform architecture.高性能开源RTSP流媒体服务器，基于go语言研发，维护和优化：RTSP推模式转发、RTSP拉模式转发、录像、检索、回放、关键帧缓存、秒开画面、RESTful接口、WEB后台管理、分布式负载均衡，基…&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EasyDarwin开源流媒体服务器&lt;/h1&gt; &#xA;&lt;h2&gt;主要功能特点&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;基于Golang开发维护；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持Windows、Linux、macOS平台；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持RTSP推流分发（推模式转发）；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;支持RTSP拉流分发（拉模式转发）；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;服务端录像 参考:&lt;a href=&#34;https://blog.csdn.net/jyt0551/article/details/84189498&#34;&gt;https://blog.csdn.net/jyt0551/article/details/84189498&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;服务端录像检索与回放 参考:&lt;a href=&#34;https://blog.csdn.net/jyt0551/article/details/84189498&#34;&gt;https://blog.csdn.net/jyt0551/article/details/84189498&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;关键帧缓存；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;秒开画面；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Web后台管理；&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;分布式负载均衡；&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;安装部署&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/EasyDarwin/EasyDarwin/releases&#34;&gt;下载解压 release 包&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;直接运行(Windows)&lt;/p&gt; &lt;p&gt;EasyDarwin.exe&lt;/p&gt; &lt;p&gt;以 &lt;code&gt;Ctrl + C&lt;/code&gt; 停止服务&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;以服务启动(Windows)&lt;/p&gt; &lt;p&gt;ServiceInstall-EasyDarwin.exe&lt;/p&gt; &lt;p&gt;以 ServiceUninstall-EasyDarwin.exe 卸载 EasyDarwin 服务&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;直接运行(Linux/macOS)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  cd EasyDarwin&#xA;  ./easydarwin&#xA;  # Ctrl + C&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;以服务启动(Linux/macOS)&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  cd EasyDarwin&#xA;  ./start.sh&#xA;  # ./stop.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;查看界面&lt;/p&gt; &lt;p&gt;打开浏览器输入 &lt;a href=&#34;http://localhost:10008&#34;&gt;http://localhost:10008&lt;/a&gt;, 进入控制页面,默认用户名密码是admin/admin&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;测试推流&lt;/p&gt; &lt;p&gt;ffmpeg -re -i C:\Users\Administrator\Videos\test.mkv -rtsp_transport tcp -vcodec h264 -f rtsp rtsp://localhost/test&lt;/p&gt; &lt;p&gt;ffmpeg -re -i C:\Users\Administrator\Videos\test.mkv -rtsp_transport udp -vcodec h264 -f rtsp rtsp://localhost/test&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;测试播放&lt;/p&gt; &lt;p&gt;ffplay -rtsp_transport tcp rtsp://localhost/test&lt;/p&gt; &lt;p&gt;ffplay rtsp://localhost/test&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;效果图&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://ww1.sinaimg.cn/large/79414a05ly1fwzqdbi8efj20w00mrn0c.jpg&#34; alt=&#34;snapshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;二次开发&lt;/h2&gt; &#xA;&lt;h3&gt;准备工具&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;    # go tools&#xA;    go get -u -v github.com/kardianos/govendor&#xA;    go get -u -v github.com/penggy/gobuild&#xA;&#xA;    # npm tools&#xA;    npm i -g apidoc&#xA;    npm i -g rimraf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;编译命令&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;获取代码&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  cd $GOPATH/src/github.com&#xA;  mkdir EasyDarwin &amp;amp;&amp;amp; cd EasyDarwin&#xA;  git clone https://github.com/EasyDarwin/EasyDarwin.git --depth=1 EasyDarwin&#xA;  cd EasyDarwin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;以开发模式运行&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;以开发模式运行前端 Run as dev mode&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  npm run dev:www       &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编译前端 Build www&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  cd web_src &amp;amp;&amp;amp; npm i&#xA;  cd ..&#xA;  npm run build:www&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编译 Windows 版本 Build windows version&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  npm run build:win&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;编译 Linux/macOS 版本 (在 bash 环境下执行) Build linux/macOS version&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  npm run build:lin       &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;清理编译文件 Clean&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  npm run clean &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;打包 Pack&lt;/p&gt; &lt;pre&gt;&lt;code&gt;  # install pack&#xA;  npm i -g @penggy/pack&#xA;&#xA;  # for windows&#xA;  npm run build:win&#xA;  pack zip&#xA;&#xA;  # for linux/macOS&#xA;  npm run build:lin&#xA;  pack tar&#xA;&#xA;  # for clean&#xA;  pack clean&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;技术支持&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;邮件：&lt;a href=&#34;mailto:support@easydarwin.org&#34;&gt;support@easydarwin.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;QQ交流群：&lt;strong&gt;436297092&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;EasyDarwin开源流媒体服务器是属于EasyDarwin开源团队的免费产品，大家免费使用，同时，EasyDarwin开源团队也能提供相应的收费技术咨询、技术服务和技术定制，谢谢大家支持！&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;获取更多信息&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;EasyDarwin&lt;/strong&gt;开源项目：&lt;a href=&#34;http://www.easydarwin.org&#34;&gt;www.EasyDarwin.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright © EasyDarwin Team 2012-2018&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://www.easydarwin.org/skin/easydarwin/images/wx_qrcode.jpg&#34; alt=&#34;EasyDarwin&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>benthosdev/benthos</title>
    <updated>2022-08-17T01:44:54Z</updated>
    <id>tag:github.com,2022-08-17:/benthosdev/benthos</id>
    <link href="https://github.com/benthosdev/benthos" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fancy stream processing made operationally mundane&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benthosdev/benthos/main/icon.png&#34; alt=&#34;Benthos&#34; title=&#34;Benthos&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/benthosdev/benthos/v4/public&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/benthosdev/benthos/v4/public&#34; alt=&#34;godoc for benthosdev/benthos&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/benthosdev/benthos/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/benthosdev/benthos/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/invite/6VaWjzP&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/746368194196799589&#34; alt=&#34;Discord invite&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.benthos.dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Docs-Learn%20more-ffc7c7&#34; alt=&#34;Docs site&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Benthos is a high performance and resilient stream processor, able to connect various &lt;a href=&#34;https://www.benthos.dev/docs/components/inputs/about&#34;&gt;sources&lt;/a&gt; and &lt;a href=&#34;https://www.benthos.dev/docs/components/outputs/about&#34;&gt;sinks&lt;/a&gt; in a range of brokering patterns and perform &lt;a href=&#34;https://www.benthos.dev/docs/components/processors/about&#34;&gt;hydration, enrichments, transformations and filters&lt;/a&gt; on payloads.&lt;/p&gt; &#xA;&lt;p&gt;It comes with a &lt;a href=&#34;https://www.benthos.dev/docs/guides/bloblang/about&#34;&gt;powerful mapping language&lt;/a&gt;, is easy to deploy and monitor, and ready to drop into your pipeline either as a static binary, docker image, or &lt;a href=&#34;https://www.benthos.dev/docs/guides/serverless/about&#34;&gt;serverless function&lt;/a&gt;, making it cloud native as heck.&lt;/p&gt; &#xA;&lt;p&gt;Benthos is declarative, with stream pipelines defined in as few as a single config file, allowing you to specify connectors and a list of processing stages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;input:&#xA;  gcp_pubsub:&#xA;    project: foo&#xA;    subscription: bar&#xA;&#xA;pipeline:&#xA;  processors:&#xA;    - bloblang: |&#xA;        root.message = this&#xA;        root.meta.link_count = this.links.length()&#xA;        root.user.age = this.user.age.number()&#xA;&#xA;output:&#xA;  redis_streams:&#xA;    url: tcp://TODO:6379&#xA;    stream: baz&#xA;    max_in_flight: 20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Delivery Guarantees&lt;/h3&gt; &#xA;&lt;p&gt;Delivery guarantees &lt;a href=&#34;https://youtu.be/QmpBOCvY8mY&#34;&gt;can be a dodgy subject&lt;/a&gt;. Benthos processes and acknowledges messages using an in-process transaction model with no need for any disk persisted state, so when connecting to at-least-once sources and sinks it&#39;s able to guarantee at-least-once delivery even in the event of crashes, disk corruption, or other unexpected server faults.&lt;/p&gt; &#xA;&lt;p&gt;This behaviour is the default and free of caveats, which also makes deploying and scaling Benthos much simpler.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Sources &amp;amp; Sinks&lt;/h2&gt; &#xA;&lt;p&gt;AWS (DynamoDB, Kinesis, S3, SQS, SNS), Azure (Blob storage, Queue storage, Table storage), GCP (Pub/Sub, Cloud storage, Big query), Kafka, NATS (JetStream, Streaming), NSQ, MQTT, AMQP 0.91 (RabbitMQ), AMQP 1, Redis (streams, list, pubsub, hashes), Cassandra, Elasticsearch, HDFS, HTTP (server and client, including websockets), MongoDB, SQL (MySQL, PostgreSQL, Clickhouse, MSSQL), and &lt;a href=&#34;https://www.benthos.dev/docs/components/inputs/about#categories&#34;&gt;many&lt;/a&gt; &lt;a href=&#34;https://www.benthos.dev/docs/components/outputs/about#categories&#34;&gt;more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Connectors are being added constantly, if something you want is missing then &lt;a href=&#34;https://github.com/benthosdev/benthos/issues/new&#34;&gt;open an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;If you want to dive fully into Benthos then don&#39;t waste your time in this dump, check out the &lt;a href=&#34;https://www.benthos.dev/docs/about&#34;&gt;documentation site&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For guidance on how to configure more advanced stream processing concepts such as stream joins, enrichment workflows, etc, check out the &lt;a href=&#34;https://www.benthos.dev/cookbooks&#34;&gt;cookbooks section.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For guidance on building your own custom plugins in Go check out &lt;a href=&#34;https://pkg.go.dev/github.com/benthosdev/benthos/v4/public&#34;&gt;the public APIs.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Grab a binary for your OS from &lt;a href=&#34;https://github.com/benthosdev/benthos/releases&#34;&gt;here.&lt;/a&gt; Or use this script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -Lsf https://sh.benthos.dev | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or pull the docker image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull jeffail/benthos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Benthos can also be installed via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install benthos&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information check out the &lt;a href=&#34;https://www.benthos.dev/docs/guides/getting_started&#34;&gt;getting started guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;benthos -c ./config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, with docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Using a config file&#xA;docker run --rm -v /path/to/your/config.yaml:/benthos.yaml jeffail/benthos&#xA;&#xA;# Using a series of -s flags&#xA;docker run --rm -p 4195:4195 jeffail/benthos \&#xA;  -s &#34;input.type=http_server&#34; \&#xA;  -s &#34;output.type=kafka&#34; \&#xA;  -s &#34;output.kafka.addresses=kafka-server:9092&#34; \&#xA;  -s &#34;output.kafka.topic=benthos_topic&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Monitoring&lt;/h2&gt; &#xA;&lt;h3&gt;Health Checks&lt;/h3&gt; &#xA;&lt;p&gt;Benthos serves two HTTP endpoints for health checks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/ping&lt;/code&gt; can be used as a liveness probe as it always returns a 200.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/ready&lt;/code&gt; can be used as a readiness probe as it serves a 200 only when both the input and output are connected, otherwise a 503 is returned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Metrics&lt;/h3&gt; &#xA;&lt;p&gt;Benthos &lt;a href=&#34;https://www.benthos.dev/docs/components/metrics/about&#34;&gt;exposes lots of metrics&lt;/a&gt; either to Statsd, Prometheus or for debugging purposes an HTTP endpoint that returns a JSON formatted object.&lt;/p&gt; &#xA;&lt;h3&gt;Tracing&lt;/h3&gt; &#xA;&lt;p&gt;Benthos also &lt;a href=&#34;https://www.benthos.dev/docs/components/tracers/about&#34;&gt;emits tracing events&lt;/a&gt; to a tracer of your choice (currently only &lt;a href=&#34;https://www.jaegertracing.io/&#34;&gt;Jaeger&lt;/a&gt; is supported) which can be used to visualise the processors within a pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Benthos provides lots of tools for making configuration discovery, debugging and organisation easy. You can &lt;a href=&#34;https://www.benthos.dev/docs/configuration/about&#34;&gt;read about them here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;Build with Go (1.16 or later):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone git@github.com:benthosdev/benthos&#xA;cd benthos&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Lint&lt;/h2&gt; &#xA;&lt;p&gt;Benthos uses &lt;a href=&#34;https://golangci-lint.run/&#34;&gt;golangci-lint&lt;/a&gt; for linting, which you can install with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then run it with &lt;code&gt;make lint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s pretty easy to write your own custom plugins for Benthos in Go, for information check out &lt;a href=&#34;https://pkg.go.dev/github.com/benthosdev/benthos/v4/public&#34;&gt;the API docs&lt;/a&gt;, and for inspiration there&#39;s an &lt;a href=&#34;https://github.com/benthosdev/benthos-plugin-example&#34;&gt;example repo&lt;/a&gt; demonstrating a variety of plugin implementations.&lt;/p&gt; &#xA;&lt;h2&gt;Extra Plugins&lt;/h2&gt; &#xA;&lt;p&gt;By default Benthos does not build with components that require linking to external libraries, such as the &lt;code&gt;zmq4&lt;/code&gt; input and outputs. If you wish to build Benthos locally with these dependencies then set the build tag &lt;code&gt;x_benthos_extra&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# With go&#xA;go install -tags &#34;x_benthos_extra&#34; github.com/benthosdev/benthos/v4/cmd/benthos@latest&#xA;&#xA;# Using make&#xA;make TAGS=x_benthos_extra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this tag may change or be broken out into granular tags for individual components outside of major version releases. If you attempt a build and these dependencies are not present you&#39;ll see error messages such as &lt;code&gt;ld: library not found for -lzmq&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Builds&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s a multi-stage &lt;code&gt;Dockerfile&lt;/code&gt; for creating a Benthos docker image which results in a minimal image from scratch. You can build it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker run --rm \&#xA;&#x9;-v /path/to/your/benthos.yaml:/config.yaml \&#xA;&#x9;-v /tmp/data:/data \&#xA;&#x9;-p 4195:4195 \&#xA;&#x9;benthos -c /config.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome, please &lt;a href=&#34;https://raw.githubusercontent.com/benthosdev/benthos/main/CONTRIBUTING.md&#34;&gt;read the guidelines&lt;/a&gt;, come and chat (links are on the &lt;a href=&#34;https://www.benthos.dev/community&#34;&gt;community page&lt;/a&gt;), and watch your back.&lt;/p&gt;</summary>
  </entry>
</feed>