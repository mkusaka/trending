<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-04-07T01:33:40Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>krillinai/KrillinAI</title>
    <updated>2025-04-07T01:33:40Z</updated>
    <id>tag:github.com,2025-04-07:/krillinai/KrillinAI</id>
    <link href="https://github.com/krillinai/KrillinAI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A video translation and dubbing tool powered by LLMs, offering professional-grade translations and one-click full-process deployment. It can generate content optimized for platforms like YouTube，TikTok, and Shorts. 基于AI大模型的视频翻译和配音工具，专业级翻译，一键部署全流程，可以生成适配抖音，小红书，哔哩哔哩，视频号，TikTok，Youtube Shorts等形态的内容&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/images/logo.png&#34; alt=&#34;KrillinAI&#34; height=&#34;90&#34;&gt; &#xA; &lt;h1&gt;AI Audio&amp;amp;Video Translation and Dubbing Tool&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/README.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_zh.md&#34;&gt;简体中文&lt;/a&gt; |&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_jp.md&#34;&gt;日本語&lt;/a&gt;｜&lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/README_rus.md&#34;&gt;Русский&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://discord.gg/7RUa4WuW&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-KrillinAI-blue&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://x.com/KrillinAI&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Twitter-KrillinAI-orange?logo=twitter&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://space.bilibili.com/242124650&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9-KrillinAI-red?logo=bilibili&#34; alt=&#34;哔哩哔哩&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=754069680&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/QQ%20%E7%BE%A4-754069680-green?logo=tencent-qq&#34; alt=&#34;QQ 群&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;📢 New Release for Win &amp;amp; Mac Desktop Version – Welcome to Test and Provide Feedback&lt;/h3&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Krillin AI is an all-in-one solution for effortless video localization and enhancement. This minimalist yet powerful tool handles everything from translation, dubbing to voice cloning，formatting—seamlessly converting videos between landscape and portrait modes for optimal display across all content platforms(YouTube, TikTok, Bilibili, Douyin, WeChat Channel, RedNote, Kuaishou). With its end-to-end workflow, Krillin AI transforms raw footage into polished, platform-ready content in just a few clicks.&lt;/p&gt; &#xA;&lt;h2&gt;Key Features:&lt;/h2&gt; &#xA;&lt;p&gt;🎯 &lt;strong&gt;One-Click Start&lt;/strong&gt; - Launch your workflow instantly&lt;/p&gt; &#xA;&lt;p&gt;📥 &lt;strong&gt;Video download&lt;/strong&gt; - yt-dlp and local file uploading supported&lt;/p&gt; &#xA;&lt;p&gt;📜 &lt;strong&gt;Precise Subtitles&lt;/strong&gt; - Whisper-powered high-accuracy recognition&lt;/p&gt; &#xA;&lt;p&gt;🧠 &lt;strong&gt;Smart Segmentation&lt;/strong&gt; - LLM-based subtitle chunking &amp;amp; alignment&lt;/p&gt; &#xA;&lt;p&gt;🌍 &lt;strong&gt;Professional Translation&lt;/strong&gt; - Paragraph-level translation for consistency&lt;/p&gt; &#xA;&lt;p&gt;🔄 &lt;strong&gt;Term Replacement&lt;/strong&gt; - One-click domain-specific vocabulary swap&lt;/p&gt; &#xA;&lt;p&gt;🎙️ &lt;strong&gt;Dubbing and Voice Cloning&lt;/strong&gt; - CosyVoice selected or cloning voices&lt;/p&gt; &#xA;&lt;p&gt;🎬 &lt;strong&gt;Video Composition&lt;/strong&gt; - Auto-formatting for horizontal/vertical layouts&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;The following picture demonstrates the effect after the subtitle file, which was generated through a one-click operation after importing a 46-minute local video, was inserted into the track. There was no manual adjustment involved at all. There are no missing or overlapping subtitles, the sentence segmentation is natural, and the translation quality is also quite high. &lt;img src=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/images/alignment.png&#34; alt=&#34;Alignment&#34;&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &lt;h3&gt;Subtitle Translation&lt;/h3&gt; &#xA;    &lt;hr&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/bba1ac0a-fe6b-4947-b58d-ba99306d0339&#34;&gt;https://github.com/user-attachments/assets/bba1ac0a-fe6b-4947-b58d-ba99306d0339&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td width=&#34;50%&#34;&gt; &lt;h3&gt;Dubbing&lt;/h3&gt; &#xA;    &lt;hr&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/0b32fad3-c3ad-4b6a-abf0-0865f0dd2385&#34;&gt;https://github.com/user-attachments/assets/0b32fad3-c3ad-4b6a-abf0-0865f0dd2385&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🌍 Language Support&lt;/h2&gt; &#xA;&lt;p&gt;Input languages: Chinese, English, Japanese, German, Turkish supported (more languages being added)&lt;br&gt; Translation languages: 56 languages supported, including English, Chinese, Russian, Spanish, French, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Interface Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/images/ui_desktop.png&#34; alt=&#34;ui preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Quick Start&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Steps&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the executable file that matches your device system from the release and place it in an empty folder.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;config&lt;/code&gt; folder inside the folder, then create a &lt;code&gt;config.toml&lt;/code&gt; file in the &lt;code&gt;config&lt;/code&gt; folder. Copy the content from the &lt;code&gt;config-example.toml&lt;/code&gt; file in the source code&#39;s &lt;code&gt;config&lt;/code&gt; directory into &lt;code&gt;config.toml&lt;/code&gt; and fill in your configuration information accordingly.&lt;/li&gt; &#xA; &lt;li&gt;Double-click the executable file to start the service.&lt;/li&gt; &#xA; &lt;li&gt;Open a browser and enter &lt;code&gt;http://127.0.0.1:8888&lt;/code&gt; to start using it (replace 8888 with the port you configured in the &lt;code&gt;config.toml&lt;/code&gt; file).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;To: macOS Users&lt;/h3&gt; &#xA;&lt;p&gt;This software is not signed, so after completing the file configuration in the &#34;Basic Steps,&#34; you will need to manually trust the application on macOS. Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the terminal and navigate to the directory where the executable file (assuming the file name is &lt;code&gt;KrillinAI_1.0.0_macOS_arm64&lt;/code&gt;) is located.&lt;/li&gt; &#xA; &lt;li&gt;Execute the following commands in sequence:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo xattr -rd com.apple.quarantine ./KrillinAI_1.0.0_macOS_arm64&#xA;sudo chmod +x ./KrillinAI_1.0.0_macOS_arm64&#xA;./KrillinAI_1.0.0_macOS_arm64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start the service.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Deployment&lt;/h3&gt; &#xA;&lt;p&gt;This project supports Docker deployment. Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/docker.md&#34;&gt;Docker Deployment Instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cookie Configuration Instructions&lt;/h3&gt; &#xA;&lt;p&gt;If you encounter video download failures, please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/get_cookies.md&#34;&gt;Cookie Configuration Instructions&lt;/a&gt; to configure your cookie information.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Help&lt;/h3&gt; &#xA;&lt;p&gt;The quickest and most convenient configuration method:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Select &lt;code&gt;openai&lt;/code&gt; for both &lt;code&gt;transcription_provider&lt;/code&gt; and &lt;code&gt;llm_provider&lt;/code&gt;. In this way, you only need to fill in &lt;code&gt;openai.apikey&lt;/code&gt; in the following three major configuration item categories, namely &lt;code&gt;openai&lt;/code&gt;, &lt;code&gt;local_model&lt;/code&gt;, and &lt;code&gt;aliyun&lt;/code&gt;, and then you can conduct subtitle translation. (Fill in &lt;code&gt;app.proxy&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt; and &lt;code&gt;openai.base_url&lt;/code&gt; as per your own situation.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The configuration method for using the local speech recognition model (macOS is not supported for the time being) (a choice that takes into account cost, speed, and quality):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fill in &lt;code&gt;fasterwhisper&lt;/code&gt; for &lt;code&gt;transcription_provider&lt;/code&gt; and &lt;code&gt;openai&lt;/code&gt; for &lt;code&gt;llm_provider&lt;/code&gt;. In this way, you only need to fill in &lt;code&gt;openai.apikey&lt;/code&gt; and &lt;code&gt;local_model.faster_whisper&lt;/code&gt; in the following three major configuration item categories, namely &lt;code&gt;openai&lt;/code&gt; and &lt;code&gt;local_model&lt;/code&gt;, and then you can conduct subtitle translation. The local model will be downloaded automatically. (The same applies to &lt;code&gt;app.proxy&lt;/code&gt; and &lt;code&gt;openai.base_url&lt;/code&gt; as mentioned above.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following usage situations require the configuration of Alibaba Cloud:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If &lt;code&gt;llm_provider&lt;/code&gt; is filled with &lt;code&gt;aliyun&lt;/code&gt;, it indicates that the large model service of Alibaba Cloud will be used. Consequently, the configuration of the &lt;code&gt;aliyun.bailian&lt;/code&gt; item needs to be set up.&lt;/li&gt; &#xA; &lt;li&gt;If &lt;code&gt;transcription_provider&lt;/code&gt; is filled with &lt;code&gt;aliyun&lt;/code&gt;, or if the &#34;voice dubbing&#34; function is enabled when starting a task, the voice service of Alibaba Cloud will be utilized. Therefore, the configuration of the &lt;code&gt;aliyun.speech&lt;/code&gt; item needs to be filled in.&lt;/li&gt; &#xA; &lt;li&gt;If the &#34;voice dubbing&#34; function is enabled and local audio files are uploaded for voice timbre cloning at the same time, the OSS cloud storage service of Alibaba Cloud will also be used. Hence, the configuration of the &lt;code&gt;aliyun.oss&lt;/code&gt; item needs to be filled in. Configuration Guide: &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/aliyun.md&#34;&gt;Alibaba Cloud Configuration Instructions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Frequently Asked Questions&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/krillinai/KrillinAI/master/docs/faq.md&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not submit unnecessary files like &lt;code&gt;.vscode&lt;/code&gt;, &lt;code&gt;.idea&lt;/code&gt;, etc. Please make good use of &lt;code&gt;.gitignore&lt;/code&gt; to filter them.&lt;/li&gt; &#xA; &lt;li&gt;Do not submit &lt;code&gt;config.toml&lt;/code&gt;; instead, submit &lt;code&gt;config-example.toml&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#krillinai/KrillinAI&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=krillinai/KrillinAI&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Septrum101/zteOnu</title>
    <updated>2025-04-07T01:33:40Z</updated>
    <id>tag:github.com,2025-04-07:/Septrum101/zteOnu</id>
    <link href="https://github.com/Septrum101/zteOnu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool that can open ZTE onu device factory mode&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zteOnu&lt;/h1&gt; &#xA;&lt;p&gt;Type &lt;code&gt;./zteonu -h&lt;/code&gt; for help&lt;/p&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#Septrum101/zteOnu&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=Septrum101/zteOnu&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>