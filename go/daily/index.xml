<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Go Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-11T01:27:01Z</updated>
  <subtitle>Daily Trending of Go in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>SpecterOps/BloodHound</title>
    <updated>2023-08-11T01:27:01Z</updated>
    <id>tag:github.com,2023-08-11:/SpecterOps/BloodHound</id>
    <link href="https://github.com/SpecterOps/BloodHound" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Six Degrees of Domain Admin&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/cmd/ui/public/img/logo-white-full.svg?sanitize=true&#34; alt=&#34;BloodHound Community Edition&#34; style=&#34;width: 400px;&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;BloodHound is a monolithic web application composed of an embedded React frontend with &lt;a href=&#34;https://www.sigmajs.org/&#34;&gt;Sigma.js&lt;/a&gt; and a &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; based REST API backend. It is deployed with a &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;Postgresql&lt;/a&gt; application database and a &lt;a href=&#34;https://neo4j.com/&#34;&gt;Neo4j&lt;/a&gt; graph database, and is fed by the &lt;a href=&#34;https://github.com/BloodHoundAD/SharpHound&#34;&gt;SharpHound&lt;/a&gt; and &lt;a href=&#34;https://github.com/BloodHoundAD/AzureHound&#34;&gt;AzureHound&lt;/a&gt; data collectors.&lt;/p&gt; &#xA;&lt;p&gt;BloodHound uses graph theory to reveal the hidden and often unintended relationships within an Active Directory or Azure environment. Attackers can use BloodHound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify. Defenders can use BloodHound to identify and eliminate those same attack paths. Both blue and red teams can use BloodHound to easily gain a deeper understanding of privilege relationships in an Active Directory or Azure environment.&lt;/p&gt; &#xA;&lt;p&gt;BloodHound CE is created and maintained by the &lt;a href=&#34;https://bloodhoundenterprise.io&#34;&gt;BloodHound Enterprise Team&lt;/a&gt;. The original BloodHound was created by &lt;a href=&#34;https://www.twitter.com/_wald0&#34;&gt;@_wald0&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/CptJesus&#34;&gt;@CptJesus&lt;/a&gt;, and &lt;a href=&#34;https://twitter.com/harmj0y&#34;&gt;@harmj0y&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;BloodHound CE is distributed as a Docker image available at &lt;a href=&#34;https://hub.docker.com/r/specterops/bloodhound&#34;&gt;https://hub.docker.com/r/specterops/bloodhound&lt;/a&gt;. In order to get started, an example docker compose folder is provided at &lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/README.md&#34;&gt;examples/docker-compose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Running the example Docker Compose project requires the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;Docker Compose&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The simplest way to get started is to install Docker Desktop, as it will provide both prerequisites and requires no additional configuration: &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Because BloodHound CE is distributed as a Docker image, there are many other ways to deploy, but this provides the simplest setup.&lt;/p&gt; &#xA;&lt;h3&gt;Running with Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download our example &lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/docker-compose.yml&#34;&gt;docker-compose.yml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;In whatever directory you copied the &lt;code&gt;docker-compose.yml&lt;/code&gt; file to, run &lt;code&gt;docker compose up&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The initial password will show up in the logs when the API server fully starts (there&#39;s a &#34;server started&#34; message that will appear)&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;code&gt;http://localhost:8080/ui/login&lt;/code&gt; and use the username &lt;code&gt;admin&lt;/code&gt; with your randomly generated password&lt;/li&gt; &#xA; &lt;li&gt;Congrats, you&#39;re now running BloodHound and can complete your application setup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Helpful Tips&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You&#39;ll be asked to change your password on first login&lt;/li&gt; &#xA; &lt;li&gt;To get the latest compatible collectors, simply click the gear icon in the corner and select &#34;Download Collectors&#34;&lt;/li&gt; &#xA; &lt;li&gt;If you restart the service before copying your random password, it will not be regenerated. Simply run &lt;code&gt;docker compose down -v&lt;/code&gt; and then &lt;code&gt;docker compose up&lt;/code&gt; to reset your databases.&lt;/li&gt; &#xA; &lt;li&gt;More information, troubleshooting, and how to configure your deployments can be found in &lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/README.md&#34;&gt;Docker Compose Example README&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Useful Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/CONTRIBUTORS.md&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/examples/docker-compose/README.md&#34;&gt;Docker Compose Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.bloodhoundenterprise.io/&#34;&gt;BloodHound Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/DEVREADME.md&#34;&gt;Developer Quick Start Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;h3&gt;Join the BloodHound Gang Slack&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://join.slack.com/t/bloodhoundhq/shared_invite/zt-1tgq6ojd2-ixpx5nz9Wjtbhc3i8AVAWw&#34;&gt;You may sign up for the BloodHound Slack workspace here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;BloodHound Support&lt;/h3&gt; &#xA;&lt;p&gt;If you need to contact our team directly and do not wish to use Slack you may do so by sending an email to &lt;code&gt;support [AT] specterops.io&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright 2023 Specter Ops, Inc.&#xA;&#xA;Licensed under the Apache License, Version 2.0&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unless otherwise annotated by a lower-level LICENSE file or license header, all files in this repository are released under the &lt;code&gt;Apache-2.0&lt;/code&gt; license. A full copy of the license may be found in the top-level &lt;a href=&#34;https://raw.githubusercontent.com/SpecterOps/BloodHound/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>openfga/openfga</title>
    <updated>2023-08-11T01:27:01Z</updated>
    <id>tag:github.com,2023-08-11:/openfga/openfga</id>
    <link href="https://github.com/openfga/openfga" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A high performance and flexible authorization/permission engine built for developers and inspired by Google Zanzibar&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenFGA&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/github.com/openfga/openfga&#34;&gt;&lt;img src=&#34;https://pkg.go.dev/badge/github.com/openfga/openfga.svg?sanitize=true&#34; alt=&#34;Go Reference&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/openfga/openfga?sort=semver&amp;amp;color=green&#34; alt=&#34;GitHub release (latest SemVer)&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/openfga/openfga/tags&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/openfga/openfga?color=blueviolet&amp;amp;label=container&amp;amp;logo=docker&#34; alt=&#34;Container Image&#34; title=&#34;Container Image&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/github/openfga/openfga&#34; alt=&#34;Codecov&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/openfga/openfga&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/openfga/openfga&#34; alt=&#34;Go Report&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/6374&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/6374/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/8naAwJfWN6&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/759188666072825867?color=7289da&amp;amp;logo=discord&#34; alt=&#34;Discord Server&#34; title=&#34;Discord Server&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/openfga&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/openfga?color=%23179CF0&amp;amp;logo=twitter&amp;amp;style=flat-square&#34; alt=&#34;Twitter&#34; title=&#34;@openfga on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fopenfga%2Fopenfga?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fopenfga%2Fopenfga.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/helm/openfga/openfga&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/openfga&#34; alt=&#34;Artifact HUB&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://api.securityscorecards.dev/projects/github.com/openfga/openfga&#34;&gt;&lt;img src=&#34;https://api.securityscorecards.dev/projects/github.com/openfga/openfga/badge&#34; alt=&#34;OpenSSF Scorecard&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A high-performance and flexible authorization/permission engine built for developers and inspired by &lt;a href=&#34;https://research.google/pubs/pub48190/&#34;&gt;Google Zanzibar&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;OpenFGA is designed to make it easy for developers to model their application permissions and add and integrate fine-grained authorization into their applications.&lt;/p&gt; &#xA;&lt;p&gt;It allows in-memory data storage for quick development, as well as pluggable database modules. It currently supports PostgreSQL 14 and MySQL 8.&lt;/p&gt; &#xA;&lt;p&gt;It offers an &lt;a href=&#34;https://openfga.dev/api/service&#34;&gt;HTTP API&lt;/a&gt; and a &lt;a href=&#34;https://buf.build/openfga/api/file/main:openfga/v1/openfga_service.proto&#34;&gt;gRPC API&lt;/a&gt;. It has SDKs for &lt;a href=&#34;https://www.npmjs.com/package/@openfga/sdk&#34;&gt;Node.js/JavaScript&lt;/a&gt;, &lt;a href=&#34;https://github.com/openfga/go-sdk&#34;&gt;GoLang&lt;/a&gt;, &lt;a href=&#34;https://github.com/openfga/python-sdk&#34;&gt;Python&lt;/a&gt; and &lt;a href=&#34;https://www.nuget.org/packages/OpenFga.Sdk&#34;&gt;.NET&lt;/a&gt;. Look in our &lt;a href=&#34;https://github.com/openfga/community#community-projects&#34;&gt;Community section&lt;/a&gt; for third-party SDKs and tools.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;The following section aims to help you get started quickly. Please look at our official &lt;a href=&#34;https://openfga.dev/&#34;&gt;documentation&lt;/a&gt; for in-depth information.&lt;/p&gt; &#xA;&lt;h3&gt;Setup and Installation&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ The following sections setup an OpenFGA server using the default configuration values. These are for rapid development and not for a production environment. Data written to an OpenFGA instance using the default configuration with the memory storage engine will &lt;em&gt;not&lt;/em&gt; persist after the service is stopped.&lt;/p&gt; &#xA; &lt;p&gt;For more information on how to configure the OpenFGA server, please take a look at our official documentation on &lt;a href=&#34;https://openfga.dev/docs/getting-started/running-in-production&#34;&gt;Running in Production&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;OpenFGA is available on &lt;a href=&#34;https://hub.docker.com/r/openfga/openfga&#34;&gt;Dockerhub&lt;/a&gt;, so you can quickly start it using the in-memory datastore by running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull openfga/openfga&#xA;docker run -p 8080:8080 -p 3000:3000 openfga/openfga run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Docker Compose&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/openfga/openfga/main/docker-compose.yaml&#34;&gt;&lt;code&gt;docker-compose.yaml&lt;/code&gt;&lt;/a&gt; provides an example of how to launch OpenFGA with Postgres using &lt;code&gt;docker compose&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First, either clone this repo or curl the &lt;code&gt;docker-compose.yaml&lt;/code&gt; file with the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -LO https://openfga.dev/docker-compose.yaml&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then, run the following command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Package Managers&lt;/h3&gt; &#xA;&lt;p&gt;If you are a &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; user, you can install &lt;a href=&#34;https://formulae.brew.sh/formula/openfga&#34;&gt;OpenFGA&lt;/a&gt; with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install openfga&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pre-compiled Binaries&lt;/h4&gt; &#xA;&lt;p&gt;Download your platform&#39;s &lt;a href=&#34;https://github.com/openfga/openfga/releases/latest&#34;&gt;latest release&lt;/a&gt; and extract it. Then run the binary with the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./openfga run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building from Source&lt;/h3&gt; &#xA;&lt;p&gt;There are two recommended options for building OpenFGA from source code:&lt;/p&gt; &#xA;&lt;h4&gt;Building from source with &lt;code&gt;go install&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Make sure you have Go 1.20 or later installed. See the &lt;a href=&#34;https://go.dev/dl/&#34;&gt;Go downloads&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can install from source using Go modules:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;First, make sure &lt;code&gt;$GOBIN&lt;/code&gt; is on your shell &lt;code&gt;$PATH&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export PATH=$PATH:$(go env GOBIN)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then use the install command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/openfga/openfga/cmd/openfga&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the server with:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./openfga run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Building from source with &lt;code&gt;go build&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively you can build OpenFGA by cloning the project from this Github repo, and then building it with the &lt;code&gt;go build&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo to a local directory, and navigate to that directory:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/openfga/openfga.git &amp;amp;&amp;amp; cd openfga&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then use the build command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go build -o ./openfga ./cmd/openfga&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the server with:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./openfga run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Verifying the Installation&lt;/h3&gt; &#xA;&lt;p&gt;Now that you have &lt;a href=&#34;https://raw.githubusercontent.com/openfga/openfga/main/#setup-and-installation&#34;&gt;Set up and Installed&lt;/a&gt; OpenFGA, you can test your installation by &lt;a href=&#34;https://openfga.dev/docs/getting-started/create-store&#34;&gt;creating an OpenFGA Store&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST &#39;localhost:8080/stores&#39; \&#xA;--header &#39;Content-Type: application/json&#39; \&#xA;--data-raw &#39;{&#xA;    &#34;name&#34;: &#34;openfga-demo&#34;&#xA;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything is running correctly, you should get a response with information about the newly created store, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;id&#34;: &#34;01G3EMTKQRKJ93PFVDA1SJHWD2&#34;,&#xA;  &#34;name&#34;: &#34;openfga-demo&#34;,&#xA;  &#34;created_at&#34;: &#34;2022-05-19T17:11:12.888680Z&#34;,&#xA;  &#34;updated_at&#34;: &#34;2022-05-19T17:11:12.888680Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Playground&lt;/h2&gt; &#xA;&lt;p&gt;The Playground facilitates rapid development by allowing you to visualize and model your application&#39;s authorization model(s) and manage relationship tuples with a locally running OpenFGA instance.&lt;/p&gt; &#xA;&lt;p&gt;To run OpenFGA with the Playground disabled, provide the &lt;code&gt;--playground-enabled=false&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./openfga run --playground-enabled=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once OpenFGA is running, by default, the Playground can be accessed at &lt;a href=&#34;http://localhost:3000/playground&#34;&gt;http://localhost:3000/playground&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the event that a port other than the default port is required, the &lt;code&gt;--playground-port&lt;/code&gt; flag can be set to change it. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./openfga run --playground-enabled --playground-port 3001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiler (pprof)&lt;/h2&gt; &#xA;&lt;p&gt;Profiling through &lt;a href=&#34;https://github.com/google/pprof&#34;&gt;pprof&lt;/a&gt; can be enabled on the OpenFGA server by providing the &lt;code&gt;--profiler-enabled&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./openfga run --profiler-enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start serving profiling data on port &lt;code&gt;3001&lt;/code&gt;. You can see that data by visiting &lt;code&gt;http://localhost:3001/debug/pprof&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you need to serve the profiler on a different address, you can do so by specifying the &lt;code&gt;--profiler-addr&lt;/code&gt; flag. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./openfga run --profiler-enabled --profiler-addr :3002&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the OpenFGA server is running, in another window you can run the following command to generate a compressed CPU profile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go tool pprof -proto -seconds 60 http://localhost:3001/debug/pprof/profile&#xA;# will collect data for 60 seconds and generate a file like pprof.samples.cpu.001.pb.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That file can be analyzed visually by running the following command and then visiting &lt;code&gt;http://localhost:8084&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;go tool pprof -http=localhost:8084 pprof.samples.cpu.001.pb.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at examples of how to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openfga.dev/api/service#/Authorization%20Models/WriteAuthorizationModel&#34;&gt;Write an Authorization Model&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openfga.dev/api/service#/Relationship%20Tuples/Write&#34;&gt;Write Relationship Tuples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openfga.dev/api/service#/Relationship%20Queries/Check&#34;&gt;Perform Authorization Checks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://openfga.dev/docs/getting-started/setup-openfga#configuring-authentication&#34;&gt;Add Authentication to your OpenFGA server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Don&#39;t hesitate to browse the official &lt;a href=&#34;https://openfga.dev/&#34;&gt;Documentation&lt;/a&gt;, &lt;a href=&#34;https://openfga.dev/api/service&#34;&gt;API Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;h3&gt;MySQL Storage engine&lt;/h3&gt; &#xA;&lt;p&gt;The MySQL storage engine has a lower length limit for some properties of a tuple compared with other storage backends. For more information see &lt;a href=&#34;https://openfga.dev/docs/getting-started/setup-openfga/docker#configuring-data-storage&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Production Readiness&lt;/h2&gt; &#xA;&lt;p&gt;The core &lt;a href=&#34;https://github.com/openfga/openfga&#34;&gt;OpenFGA&lt;/a&gt; service has been in use by &lt;a href=&#34;https://fga.dev&#34;&gt;Auth0 FGA&lt;/a&gt; in production since December 2021.&lt;/p&gt; &#xA;&lt;p&gt;OpenFGA&#39;s Memory Storage Adapter was built for development purposes only and is not recommended for a production environment, because it is not designed for scalable queries and has no support for persistence.&lt;/p&gt; &#xA;&lt;p&gt;OpenFGA&#39;s PostgreSQL Storage Adapter was purposely built for OpenFGA. Auth0 is not using it in a production environment.&lt;/p&gt; &#xA;&lt;p&gt;OpenFGA&#39;s MySQL Storage Adapter was contributed to OpenFGA by &lt;a href=&#34;https://github.com/twintag&#34;&gt;@twintag&lt;/a&gt;, who are using it in a production environment. Auth0 is not using it in a production environment.&lt;/p&gt; &#xA;&lt;p&gt;The OpenFGA team will do its best to address all production issues with high priority.&lt;/p&gt; &#xA;&lt;p&gt;You can learn about more organizations using OpenFGA in production &lt;a href=&#34;https://github.com/openfga/community/raw/main/ADOPTERS.md&#34;&gt;here&lt;/a&gt;. If your organization is using OpenFGA in production please consider adding it to the list.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/openfga/.github/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community Meetings&lt;/h2&gt; &#xA;&lt;p&gt;We hold a monthly meeting to interact with the community, collaborate and receive/provide feedback. You can find more details, including the time, our agenda, and the meeting minutes &lt;a href=&#34;https://github.com/openfga/community/raw/main/community-meetings.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>