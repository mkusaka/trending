<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-18T01:30:14Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>javierguerragiraldez/parseback</title>
    <updated>2024-05-18T01:30:14Z</updated>
    <id>tag:github.com,2024-05-18:/javierguerragiraldez/parseback</id>
    <link href="https://github.com/javierguerragiraldez/parseback" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure-Lua introspection library for LuaJIT&#39;s FFI ctype objects&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;parseback&lt;/h1&gt; &#xA;&lt;p&gt;In LuaJIT&#39;s FFI, ctype objects carry C data structures and functions. Unfortunately, while there are several functions to handle and compose ctype objects, there&#39;s very little introspection capabilities. This library inspects the information provided by &lt;code&gt;ffi.typeinfo()&lt;/code&gt; to recreate useful descriptions of ctype objects, as Lua tables, C declarations and GraphViz diagrams.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s a single Lua file, just put it anywhere in your &lt;code&gt;$LUA_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT licensed, like the Lua and LuaJIT languages/implementations&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;parseback.typeinfo(ct)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns a table tree describing the given type. Some of the fields appear only on appropriate types. Most interesting fields include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; a label (&lt;code&gt;&#39;num&#39;&lt;/code&gt;, &lt;code&gt;&#39;union&#39;&lt;/code&gt;, &lt;code&gt;&#39;struct&#39;&lt;/code&gt;, &lt;code&gt;&#39;ptr&#39;&lt;/code&gt;, &lt;code&gt;&#39;complex&#39;&lt;/code&gt;, &lt;code&gt;&#39;array&#39;&lt;/code&gt;, &lt;code&gt;&#39;void&#39;&lt;/code&gt;, &lt;code&gt;&#39;enum&#39;&lt;/code&gt;, &lt;code&gt;&#39;function&#39;&lt;/code&gt;, &lt;code&gt;&#39;typedef&#39;&lt;/code&gt;, &lt;code&gt;&#39;field&#39;&lt;/code&gt;, &lt;code&gt;&#39;bitfield&#39;&lt;/code&gt;, &lt;code&gt;&#39;const&#39;&lt;/code&gt;, &lt;code&gt;&#39;keyword&#39;&lt;/code&gt;), hopefully useful to traverse the tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; if available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;c&lt;/code&gt; a reconstructed C definition.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;size&lt;/code&gt; data size in bytes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fields&lt;/code&gt; (in union, struct, enum and functions) array of descriptions of elements or arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;subtype&lt;/code&gt; a &#34;content&#34; type description. For arrays, pointers and typedefs it&#39;s the description of the inner type; for functions it&#39;s the description of the return type.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;parseback.asdot(ct [, horizgroups])&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Creates a diagram of the whole type structure in the &#39;dot&#39; language, to be processed by GraphViz utilities. The optional &lt;code&gt;horizgroups&lt;/code&gt; flag makes the elements joined by &#39;sib&#39; links to align horizonally. I find it much easier to understand, but works only for relatively simple structures, complex graphs get hopelessly mangled. For the general case, leave the flag out; the resultant graph is much more vertical but should be far cleaner.&lt;/p&gt;</summary>
  </entry>
</feed>