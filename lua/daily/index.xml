<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-08T01:39:24Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Kong/kong-pongo</title>
    <updated>2022-09-08T01:39:24Z</updated>
    <id>tag:github.com,2022-09-08:/Kong/kong-pongo</id>
    <link href="https://github.com/Kong/kong-pongo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tooling to run plugin tests with Kong and Kong Enterprise&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/Kong/kong-pongo&#34;&gt;&lt;img src=&#34;https://travis-ci.com/Kong/kong-pongo.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;&lt;span&gt;‚ùó&lt;/span&gt; Important compatibility notes&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pongo is being switched from non-versioned to versioned. This means that future changes on the &lt;code&gt;master&lt;/code&gt; branch might be introducing breaking changes. So it is important to switch to a pinned version in your CI to prevent unexpected failures (Notice added 17-Mar-2022, no breaking changes expected before 17-Sep-2022)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The Alpine 3.13 to 3.14 update (around Kong &lt;code&gt;2.6.x&lt;/code&gt;) &lt;a href=&#34;https://github.com/Kong/docker-kong/pull/495&#34;&gt;can break the Pongo image build&lt;/a&gt;. Make sure to update Docker to &lt;code&gt;20.10.x&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;pongo&lt;/h1&gt; &#xA;&lt;p&gt;Pongo provides a simple way of testing Kong plugins. For a complete walkthrough check &lt;a href=&#34;https://konghq.com/blog/custom-lua-plugin-kong-gateway&#34;&gt;this blogpost on the Kong website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                /~\&#xA;  ______       C oo&#xA;  | ___ \      _( ^)&#xA;  | |_/ /__  _/__ ~\ __   ___&#xA;  |  __/ _ \| &#39;_ \ / _ `|/ _ \&#xA;  | | | (_) | | | | (_| | (_) |&#xA;  \_|  \___/|_| |_|\__, |\___/&#xA;                    __/ |&#xA;                   |___/  v1.2.0&#xA;&#xA;Usage: pongo action [options...] [--] [action options...]&#xA;&#xA;Options (can also be added to &#39;.pongo/pongorc&#39;):&#xA;  --no-cassandra     do not start cassandra db&#xA;  --no-postgres      do not start postgres db&#xA;  --grpcbin          do start grpcbin (see readme for info)&#xA;  --redis            do start redis db (see readme for info)&#xA;  --squid            do start squid forward-proxy (see readme for info)&#xA;&#xA;Project actions:&#xA;  init          initializes the current plugin directory with some default&#xA;                configuration files if not already there (not required)&#xA;&#xA;  lint          will run the LuaCheck linter&#xA;&#xA;  pack          will pack all &#39;*.rockspec&#39; files into &#39;*.rock&#39; files for&#xA;                distribution (see LuaRocks package manager docs)&#xA;&#xA;  run           run spec files, accepts Busted options and spec files/folders&#xA;                as arguments, see: &#39;pongo run -- --help&#39;&#xA;&#xA;  shell         get a shell directly on a kong container&#xA;&#xA;  tail          starts a tail on the specified file. Default file is&#xA;                ./servroot/logs/error.log, an alternate file can be specified&#xA;&#xA;Environment actions:&#xA;  build         build the Kong test image, add &#39;--force&#39; to rebuild images&#xA;&#xA;  clean / nuke  removes the dependency containers and deletes all test images&#xA;&#xA;  docs          will generate and open the test-helper documentation&#xA;&#xA;  down          remove all dependency containers&#xA;&#xA;  expose        expose the internal ports for access from the host&#xA;&#xA;  logs          show docker-compose logs of the Pongo environment&#xA;&#xA;  restart       shortcut, a combination of; down + up&#xA;&#xA;  status        show status of the Pongo network, images, and containers&#xA;&#xA;  up            start required dependency containers for testing&#xA;&#xA;Maintenance actions:&#xA;  update        update embedded artifacts for building test images&#xA;&#xA;&#xA;Environment variables:&#xA;  KONG_VERSION  the specific Kong version to use when building the test image&#xA;                (note that the patch-version can be &#39;x&#39; to use latest)&#xA;&#xA;  KONG_IMAGE    the base Kong Docker image to use when building the test image&#xA;&#xA;  KONG_LICENSE_DATA&#xA;                set this variable with the Kong Enterprise license data&#xA;&#xA;  POSTGRES      the version of the Postgres dependency to use (default 9.5)&#xA;  CASSANDRA     the version of the Cassandra dependency to use (default 3.11)&#xA;  REDIS         the version of the Redis dependency to use (default 6.2.6)&#xA;&#xA;Example usage:&#xA;  pongo run&#xA;  KONG_VERSION=1.3.x pongo run -v -o gtest ./spec/02-access_spec.lua&#xA;  POSTGRES=10 KONG_IMAGE=kong-ee pongo run&#xA;  pongo down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#do-a-test-run&#34;&gt;Do a test run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#pongo-on-windows&#34;&gt;Pongo on Windows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#test-dependencies&#34;&gt;Test dependencies&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Postgres (Kong datastore)&lt;/li&gt; &#xA;   &lt;li&gt;Cassandra (Kong datastore)&lt;/li&gt; &#xA;   &lt;li&gt;grpcbin (mock grpc backend)&lt;/li&gt; &#xA;   &lt;li&gt;Redis (key-value store)&lt;/li&gt; &#xA;   &lt;li&gt;Squid (forward-proxy)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#dependency-defaults&#34;&gt;Dependency defaults&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#dependency-troubleshooting&#34;&gt;Dependency troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#custom-local-dependencies&#34;&gt;Custom local dependencies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#debugging&#34;&gt;Debugging&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#accessing-the-logs&#34;&gt;Accessing the logs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#direct-access-to-service-ports&#34;&gt;Direct access to service ports&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#test-initialization&#34;&gt;Test initialization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#test-coverage&#34;&gt;Test coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#setting-up-ci&#34;&gt;Setting up CI&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#ci-against-nightly-builds&#34;&gt;CI against nightly builds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#ci-with-kong-enterprise&#34;&gt;CI with Kong Enterprise&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#ci-with-kong-enterprise-nightly&#34;&gt;CI with Kong Enterprise nightly&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#running-pongo-in-docker&#34;&gt;Running Pongo in Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#releasing-new-kong-versions&#34;&gt;Releasing new Kong versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Tools Pongo needs to run:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;docker-compose&lt;/code&gt; (and hence &lt;code&gt;docker&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;realpath&lt;/code&gt;, for MacOS you need the &lt;a href=&#34;https://www.gnu.org/software/coreutils/coreutils.html&#34;&gt;&lt;code&gt;coreutils&lt;/code&gt;&lt;/a&gt; to be installed. This is easiest via the &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew package manager&lt;/a&gt; by doing: &lt;pre&gt;&lt;code&gt;brew install coreutils&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;depending on your environment you should set some &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#configuration&#34;&gt;environment variables&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository and install Pongo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;PATH=$PATH:~/.local/bin&#xA;git clone https://github.com/Kong/kong-pongo.git&#xA;mkdir -p ~/.local/bin&#xA;ln -s $(realpath kong-pongo/pongo.sh) ~/.local/bin/pongo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Several environment variables are available for configuration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker credentials; &lt;code&gt;DOCKER_USERNAME&lt;/code&gt; and &lt;code&gt;DOCKER_PASSWORD&lt;/code&gt; to prevent rate- limits when pulling images, but also for testing against older Kong Enterprise images that are not publicly available.&lt;/li&gt; &#xA; &lt;li&gt;Kong license; set &lt;code&gt;KONG_LICENSE_DATA&lt;/code&gt; with the Enterprise license to enable Enterprise features.&lt;/li&gt; &#xA; &lt;li&gt;Specify a custom image; set the image name/tag in &lt;code&gt;KONG_IMAGE&lt;/code&gt; and make sure the image is locally available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Kong-internal use there are some additional variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PULP_USERNAME&lt;/code&gt; and &lt;code&gt;PULP_PASSWORD&lt;/code&gt; to automatically download the Kong Enterprise CI license. See &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#setting-up-ci&#34;&gt;Setting up CI&lt;/a&gt; for some Pulp environment variable examples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GITHUB_TOKEN&lt;/code&gt; the Github token to get access to the Kong Enterprise source code. This is only required for development/nightly builds, not for released versions of Kong.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Do a test run&lt;/h2&gt; &#xA;&lt;p&gt;Get a shell into your plugin repository, and run &lt;code&gt;pongo&lt;/code&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/Kong/kong-plugin.git&#xA;cd kong-plugin&#xA;&#xA;# auto pull and build the test images&#xA;pongo run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some more elaborate examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# Run against a specific version of Kong and pass&#xA;# a number of Busted options&#xA;KONG_VERSION=0.36-1 pongo run -v -o gtest ./spec&#xA;&#xA;# Run against the latest patch version of a Kong release using &#39;.x&#39;&#xA;KONG_VERSION=1.2.x pongo run -v -o gtest ./spec&#xA;&#xA;# Run against a local image of Kong&#xA;KONG_IMAGE=kong-ee pongo run ./spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above command (&lt;code&gt;pongo run&lt;/code&gt;) will automatically build the test image and start the test environment. When done, the test environment can be torn down by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pongo down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Pongo on Windows&lt;/h2&gt; &#xA;&lt;p&gt;Beta: Pongo should run in Git-BASH if you have &lt;a href=&#34;https://gitforwindows.org/&#34;&gt;Git for Windows&lt;/a&gt; installed (and Docker for Windows). Please report any issues.&lt;/p&gt; &#xA;&lt;p&gt;To run Pongo on Windows you can use &lt;a href=&#34;https://docs.microsoft.com/windows/wsl/&#34;&gt;WSL2&lt;/a&gt; (Windows Subsystem for Linux).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;install WSL2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;install Docker for Windows&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;from the Microsoft Store install Debian (search for &lt;code&gt;wsl&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;start Debian (should be in your start menu)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;now from the prompt install Pongo and some dependencies;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install git curl coreutils&#xA;&#xA;cd ~&#xA;git clone https://github.com/Kong/kong-pongo.git&#xA;mkdir -p ~/.local/bin&#xA;ln -s $(realpath kong-pongo/pongo.sh) ~/.local/bin/pongo&#xA;PATH=$PATH:~/.local/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Docker for Windows and open the settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;under &#34;General&#34; enable using the WSL2 engine&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;under &#34;Resources - WSL integration&#34; enable integration with the Debian package&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can now edit your code with your favorite Windows IDE or editor and then run the tests with Pongo.&lt;/p&gt; &#xA;&lt;p&gt;To give this a try using the template plugin;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;download or clone &lt;code&gt;https://github.com/Kong/kong-plugin.git&lt;/code&gt; (assuming this to land in &lt;code&gt;C:\users\tieske\code\kong-plugin&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;start Debian and at the prompt do:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd /mnt/c/users/tieske/code/kong-plugin&#xA;pongo run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Test dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Pongo can use a set of test dependencies that can be used to test against. Each can be enabled/disabled by respectively specifying &lt;code&gt;--[dependency_name]&lt;/code&gt; or &lt;code&gt;--no-[dependency-name]&lt;/code&gt; as options for the &lt;code&gt;pongo up&lt;/code&gt;, &lt;code&gt;pongo restart&lt;/code&gt;, and &lt;code&gt;pongo run&lt;/code&gt; commands. The alternate way of specifying the dependencies is by adding them to the &lt;code&gt;.pongo/pongorc&lt;/code&gt; file (see below).&lt;/p&gt; &#xA;&lt;p&gt;The available dependencies are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Postgres&lt;/strong&gt; Kong datastore (started by default)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Disable it with &lt;code&gt;--no-postgres&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The Postgres version is controlled by the &lt;code&gt;POSTGRES&lt;/code&gt; environment variable&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cassandra&lt;/strong&gt; Kong datastore (started by default)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Disable it with &lt;code&gt;--no-cassandra&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The Cassandra version is controlled by the &lt;code&gt;CASSANDRA&lt;/code&gt; environment variable&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;grpcbin&lt;/strong&gt; mock grpc backend&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable it with &lt;code&gt;--grpcbin&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The engine is &lt;a href=&#34;https://github.com/moul/grpcbin&#34;&gt;moul/grpcbin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;From within the environment it is available at: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;grpcbin:9000&lt;/code&gt; grpc over http&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;grpcbin:9001&lt;/code&gt; grpc over http+tls&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Redis&lt;/strong&gt; key-value store&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Enable it with &lt;code&gt;--redis&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The Redis version is controlled by the &lt;code&gt;REDIS&lt;/code&gt; environment variable&lt;/li&gt; &#xA;   &lt;li&gt;From within the environment the Redis instance is available at &lt;code&gt;redis:6379&lt;/code&gt;, but from the test specs it should be accessed by using the &lt;code&gt;helpers.redis_host&lt;/code&gt; field, and port &lt;code&gt;6379&lt;/code&gt;, to keep it portable to other test environments. Example: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;local helpers = require &#34;spec.helpers&#34;&#xA;local redis_host = helpers.redis_host&#xA;local redis_port = 6379&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Squid&lt;/strong&gt; (forward-proxy)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Enable it with &lt;code&gt;--squid&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The Squid version is controlled by the &lt;code&gt;SQUID&lt;/code&gt; environment variable&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;From within the environment the Squid instance is available at &lt;code&gt;squid:3128&lt;/code&gt;. Essentially it would be configured as these standard environment variables:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;http_proxy=http://squid:3128/&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;https_proxy=http://squid:3128/&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;The configuration comes with basic-auth configuration, and a single user:&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;username: &lt;code&gt;kong&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;password: &lt;code&gt;king&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;p&gt;All access is to be authenticated by the proxy, except for the domain &lt;code&gt;.mockbin.org&lt;/code&gt;, which is white-listed.&lt;/p&gt; &lt;p&gt;Some test instructions to play with the proxy:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# clean environment, start with squid and create a shell&#xA;pongo down&#xA;pongo up --squid --no-postgres --no-cassandra&#xA;pongo shell&#xA;&#xA;# connect to httpbin (http), while authenticating&#xA;http --proxy=http:http://kong:king@squid:3128 --proxy=https:http://kong:king@squid:3128 http://httpbin.org/anything&#xA;&#xA;# https also works&#xA;http --proxy=http:http://kong:king@squid:3128 --proxy=https:http://kong:king@squid:3128 https://httpbin.org/anything&#xA;&#xA;# connect unauthenticated to the whitelisted mockbin.org (http)&#xA;http --proxy=http:http://squid:3128 --proxy=https:http://squid:3128 http://mockbin.org/request&#xA;&#xA;# and here https also works&#xA;http --proxy=http:http://squid:3128 --proxy=https:http://squid:3128 https://mockbin.org/request&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency defaults&lt;/h3&gt; &#xA;&lt;p&gt;The defaults do not make sense for every type of plugin and some dependencies (Cassandra for example) can slow down the tests. So to override the defaults on a per project/plugin basis, a &lt;code&gt;.pongo/pongorc&lt;/code&gt; file can be added to the project.&lt;/p&gt; &#xA;&lt;p&gt;The format of the file is very simple; each line contains 1 commandline option, eg. a &lt;code&gt;.pongo/pongorc&lt;/code&gt; file for a plugin that only needs Postgres and Redis:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;--no-cassandra&#xA;--redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;When dependency containers are causing trouble, the logs can be accessed using the &lt;code&gt;pongo logs&lt;/code&gt; command. This command is the same as &lt;code&gt;docker-compose logs&lt;/code&gt; except that it operates on the Pongo environment specifically. Any additional options specified to the command will be passed to the underlying &lt;code&gt;docker-compose logs&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# show latest logs&#xA;pongo logs&#xA;&#xA;# tail latest logs&#xA;pongo logs -f&#xA;&#xA;# tail latest logs for the postgres dependency&#xA;pongo logs -f postgres&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom local dependencies&lt;/h3&gt; &#xA;&lt;p&gt;If the included dependencies are not enough for testing a plugin, then Pongo allows you to specify your own dependencies. To create a custom local dependency you must add its name to the &lt;code&gt;.pongo/pongorc&lt;/code&gt; file An example defining 2 extra dependencies; &lt;code&gt;zipkin&lt;/code&gt;, and &lt;code&gt;myservice&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;--no-cassandra&#xA;--redis&#xA;--zipkin&#xA;--no-myservice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This defines both services, with &lt;code&gt;zipkin&lt;/code&gt; being started by default and &lt;code&gt;myservice&lt;/code&gt; only when specifying it like this;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pongo up --myservice&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only defines the dependency, but it also needs a configuration. The configuration is a &lt;code&gt;docker-compose&lt;/code&gt; file specific for each dependency. So taking the above &lt;code&gt;zipkin&lt;/code&gt; example we create a file named &lt;code&gt;.pongo/zipkin.yml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yml&#34;&gt;version: &#39;3.5&#39;&#xA;&#xA;services:&#xA;  zipkin:&#xA;    image: openzipkin/zipkin:${ZIPKIN:-2.19}&#xA;    healthcheck:&#xA;      interval: 5s&#xA;      retries: 10&#xA;      test:&#xA;      - CMD&#xA;      - wget&#xA;      - localhost:9411/health&#xA;      timeout: 10s&#xA;    restart: on-failure&#xA;    stop_signal: SIGKILL&#xA;    networks:&#xA;      - ${NETWORK_NAME}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The components of the file:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;file name: based on the dependency name; &lt;code&gt;./pongo/&amp;lt;dep-name&amp;gt;.yml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;service name: this must be the dependency name as defined, in this case &lt;code&gt;zipkin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;image&lt;/code&gt; is required, the environment variable &lt;code&gt;ZIPKIN&lt;/code&gt; to override the default version &lt;code&gt;2.19&lt;/code&gt; is optional&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;healthcheck&lt;/code&gt; if available then Pongo uses the health-status to determine whether a dependency is ready and the test run can be started.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;networks&lt;/code&gt; should be included and left as-is to include the dependency in the network with the other containers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some helpfull examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dependencies requiring configuration files: see &lt;code&gt;squid&lt;/code&gt; in the main &lt;a href=&#34;https://github.com/Kong/kong-pongo/raw/master/assets/docker-compose.yml&#34;&gt;Pongo docker-compose file&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A custom dependency example: see the &lt;a href=&#34;https://github.com/Kong/kong-plugin-zipkin&#34;&gt;Zipkin plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;This section is about debugging plugin code. If you have trouble with the Pongo environment then check &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#dependency-troubleshooting&#34;&gt;Dependency troubleshooting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Accessing the logs&lt;/h3&gt; &#xA;&lt;p&gt;When running the tests, the Kong prefix (or working directory) will be set to &lt;code&gt;./servroot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To track the error log (where any &lt;code&gt;print&lt;/code&gt; or &lt;code&gt;ngx.log&lt;/code&gt; statements will go) you can use the tail command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pongo tail&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above would be identical to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;tail -F ./servroot/logs/error.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above does not work in a CI environment. So how to get access to the logs in that case?&lt;/p&gt; &#xA;&lt;p&gt;From the default &lt;code&gt;.travis.yml&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#setting-up-ci&#34;&gt;chapter on CI&lt;/a&gt;), change the basic lines to run the commands as follows, from;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;script:&#xA;- &#34;../kong-pongo/pongo.sh lint&#34;&#xA;- &#34;../kong-pongo/pongo.sh run&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;script:&#xA;- &#34;../kong-pongo/pongo.sh lint&#34;&#xA;- &#34;KONG_TEST_DONT_CLEAN=true ../kong-pongo/pongo.sh run&#34;&#xA;- &#34;cat servroot/logs/error.log&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;KONG_TEST_DONT_CLEAN&lt;/code&gt; variable will instruct Kong to not clean up the working directory in between tests. And the final &lt;code&gt;cat&lt;/code&gt; command will output the log to the Travis console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Direct access to service ports&lt;/h3&gt; &#xA;&lt;p&gt;To directly access Kong from the host, or the datastores, the &lt;code&gt;pongo expose&lt;/code&gt; command can be used to expose the internal ports to the host.&lt;/p&gt; &#xA;&lt;p&gt;This allows for example to connect to the Postgres on port &lt;code&gt;5432&lt;/code&gt; to validate the contents of the database. Or when running &lt;code&gt;pongo shell&lt;/code&gt; to manually start Kong, you can access all the regular Kong ports from the host, including the GUI&#39;s.&lt;/p&gt; &#xA;&lt;p&gt;This has been implemented as a separate container that opens all those ports and relays them on the docker network to the actual service containers (the reason for this is that regular Pongo runs do not interfere with ports already in use on the host, only if &lt;code&gt;expose&lt;/code&gt; is used there is a risk of failure because ports are already in use on the host)&lt;/p&gt; &#xA;&lt;p&gt;Since it is technically a &#34;dependency&#34; it can be specified as a dependency as well.&lt;/p&gt; &#xA;&lt;p&gt;so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pongo up&#xA;pongo expose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is equivalent to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pongo up --expose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;pongo expose --help&lt;/code&gt; for the ports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Test initialization&lt;/h2&gt; &#xA;&lt;p&gt;By default when the test container is started, it will look for a &lt;code&gt;.rockspec&lt;/code&gt; file, if it finds one, then it will install that rockspec file with the &lt;code&gt;--deps-only&lt;/code&gt; flag. Meaning it will not install that rock itself, but if it depends on any external libraries, those rocks will be installed. If the rock is already installed in the image, it will be uninstalled first.&lt;/p&gt; &#xA;&lt;p&gt;For example; the Kong plugin &lt;code&gt;session&lt;/code&gt; relies on the &lt;code&gt;lua-resty-session&lt;/code&gt; rock. So by default it will install that dependency before starting the tests.&lt;/p&gt; &#xA;&lt;p&gt;To modify the default behaviour there are 2 scripts that can be hooked up:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;.pongo/pongo-setup-host.sh&lt;/code&gt; this script will be executed (not sourced) right before the Kong test container is started. Hence this script runs &lt;strong&gt;on the host&lt;/strong&gt;. The interpreter can be set using the regular shebang.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;.pongo/pongo-setup.sh&lt;/code&gt; is ran upon container start &lt;strong&gt;inside&lt;/strong&gt; the Kong container. It will not be executed but sourced, and will run on &lt;code&gt;/bin/sh&lt;/code&gt; as interpreter.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both scripts will have an environment variable &lt;code&gt;PONGO_COMMAND&lt;/code&gt; that will have the current command being executed, for example &lt;code&gt;shell&lt;/code&gt; or &lt;code&gt;run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below an example using both files. On the host it clones a dependency if it isn&#39;t available already. This prevents pulling it on each run, but makes sure it is available in CI. Then on each run it will install the dependency in the container first and then it will do the default action of installing all rockspecs found.&lt;/p&gt; &#xA;&lt;p&gt;Example &lt;code&gt;.pongo/pongo-setup-host.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/usr/bin/env bash&#xA;&#xA;# this runs on the host, before the Kong container is started&#xA;if [ ! -d &#34;my_dependency&#34; ]; then&#xA;  git clone https://github.com/memyselfandi/my_dependency.git&#xA;fi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example &lt;code&gt;.pongo/pongo-setup.sh&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/usr/bin/env sh&#xA;&#xA;# this runs in the test container upon starting it&#xA;cd /kong-plugin/my_dependency&#xA;make install&#xA;&#xA;# additionally run the default action of installing rockspec dependencies&#xA;/pongo/default-pongo-setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Test coverage&lt;/h2&gt; &#xA;&lt;p&gt;Pongo has support for the LuaCov code coverage tool. But this is rather limited. LuaCov is not able to run in OpenResty, hence it will not report on integration tests, only on unit tests.&lt;/p&gt; &#xA;&lt;p&gt;To enable LuaCov, run &lt;code&gt;pongo init&lt;/code&gt; to create the &lt;code&gt;.luacov&lt;/code&gt; configuration file, and then run the tests using the Busted &lt;code&gt;--coverage&lt;/code&gt; option like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;pongo run -- --coverage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the test run the output files &lt;code&gt;luacov.*.out&lt;/code&gt; files should be available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setting up CI&lt;/h2&gt; &#xA;&lt;p&gt;Pongo is easily added to a CI setup. The examples below will asume Travis-CI, but can be easily converted to other engines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if your engine of preference runs itself in Docker, then checkout &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#running-pongo-in-docker&#34;&gt;Pongo in Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a base setup for an open-source plugin that will test against 2 Kong versions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .travis.yml&#xA;&#xA;dist: bionic&#xA;&#xA;jobs:&#xA;  include:&#xA;  - name: Kong CE 2.0.x&#xA;    env: KONG_VERSION=2.0.x&#xA;  - name: Kong CE 1.5.x&#xA;    env: KONG_VERSION=1.5.x&#xA;&#xA;install:&#xA;- git clone --single-branch https://github.com/Kong/kong-pongo ../kong-pongo&#xA;- &#34;../kong-pongo/pongo.sh up&#34;&#xA;- &#34;../kong-pongo/pongo.sh build&#34;&#xA;&#xA;script:&#xA;- &#34;../kong-pongo/pongo.sh lint&#34;&#xA;- &#34;../kong-pongo/pongo.sh run&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CI against nightly builds&lt;/h3&gt; &#xA;&lt;p&gt;To test against nightly builds, the CRON option for Travis-CI should be configured. This will trigger a daily test-run.&lt;/p&gt; &#xA;&lt;p&gt;In the test matrix add a job with &lt;code&gt;KONG_VERSION=nightly&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  include:&#xA;  - name: Kong nightly master-branch&#xA;    env: KONG_VERSION=nightly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CI with Kong Enterprise&lt;/h3&gt; &#xA;&lt;p&gt;To test against an Enterprise version of Kong the same base setup can be used, but some secrets need to be added. With the secrets in place Pongo will be able to download the proper Kong Enterprise images and license keys. See &lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#configuration&#34;&gt;Configuration&lt;/a&gt; for details on the environment variables.&lt;/p&gt; &#xA;&lt;p&gt;The environment variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_USERNAME=&amp;lt;your_docker_username&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_PASSWORD=&amp;lt;your_docker_password&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;KONG_LICENSE_DATA=&amp;lt;your_license_data&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Kong internal only:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PULP_USERNAME=&amp;lt;your_pulp_username&amp;gt;&lt;/code&gt; (Optional, if KONG_LICENSE_DATA not set)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PULP_PASSWORD=&amp;lt;your_pulp_password&amp;gt;&lt;/code&gt; (Optional, if KONG_LICENSE_DATA not set)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To test the Pulp values try the following command, if succesful it will display your license key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ curl -L -u&#34;$PULP_USERNAME:$PULP_PASSWORD&#34; &#34;https://download.konghq.com/internal/kong-gateway/license.json&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the test command is succesful you can add the secrets to the Travis-CI configuration. To add those secrets install the &lt;a href=&#34;https://github.com/travis-ci/travis.rb&#34;&gt;Travis command line utility&lt;/a&gt;, and follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;.travis.yml&lt;/code&gt; file above into your plugin repo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the main directory of your plugins repo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the encrypted values by doing:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis encrypt --pro DOCKER_USERNAME=&amp;lt;your_docker_username&amp;gt; --add&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis encrypt --pro DOCKER_PASSWORD=&amp;lt;your_docker_password&amp;gt; --add&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis encrypt --pro KONG_LICENSE_DATA=&amp;lt;your_license_data&amp;gt; --add&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis encrypt --pro PULP_USERNAME=&amp;lt;your_pulp_username&amp;gt; --add&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;travis encrypt --pro PULP_PASSWORD=&amp;lt;your_pulp_password&amp;gt; --add&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;After completing the steps above, the &lt;code&gt;.travis.yml&lt;/code&gt; file should now be updated and have this additional section:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;env:&#xA;  global:&#xA;  - PONGO_SECRETS_AVAILABLE=$TRAVIS_SECURE_ENV_VARS&#xA;  - secure: Xa6htQZoS/4K...and some more gibberish&#xA;  - secure: o8VSj7hFGm2L...and some more gibberish&#xA;  - secure: nQDng6c5xIBJ...and some more gibberish&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can update the &lt;code&gt;jobs&lt;/code&gt; section and add Kong Enterprise version numbers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the variable PONGO_SECRETS_AVAILABLE works the same as &lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables/#default-environment-variables&#34;&gt;TRAVIS_SECURE_ENV_VARS&lt;/a&gt;. If you receive PR&#39;s from outside your organization, then the secrets will not be available on a CI run, this will cause the build to always fail. If you set this variable to &lt;code&gt;false&lt;/code&gt; then Pongo will print only a warning and exit with success. Effectively this means that external PR&#39;s are only tested against Kong opensource versions, and internal PR&#39;s will be tested against opensource and Enterprise versions of Kong.&lt;/p&gt; &#xA;&lt;p&gt;(It is mentioned for completeness in the example above, since Pongo will automatically fall back on the Travis-CI variable, on other CI engines you will need to set it)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;CI with Kong Enterprise nightly&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this is NOT publicly available, only Kong internal&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This build will also require a CRON job to build on a daily basis, but also requires additional credentials to access the Kong Enterprise master image. To build against the nightly Enterprise master, the version can be specified as &lt;code&gt;nightly-ee&lt;/code&gt;, as given in this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  include:&#xA;  - name: Kong Enterprise nightly master-branch&#xA;    env: KONG_VERSION=nightly-ee&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For this to work the following variables must be present:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_USERNAME=&amp;lt;your_docker_username&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DOCKER_PASSWORD&amp;lt;your_docker_password&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;At least the api-key must be encrypted as a secret. Follow the instructions above to encrypt and add them to the &lt;code&gt;.travis.yml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;For the Nightly builds Pongo needs to pull the Kong-EE source. If the repo under test does not have access, then a valid GitHub access token is also required to refresh the Kong Enterprise code, and must be specified as a &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Pongo in Docker&lt;/h2&gt; &#xA;&lt;p&gt;Pongo relies on Docker and Docker-compose to recreate environments and test setups. So what if your environment is running Pongo itself in a Docker container?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://jpetazzo.github.io/2015/09/03/do-not-use-docker-in-docker-for-ci/&#34;&gt;Docker-in-Docker has some serious issues when used in CI&lt;/a&gt; (as it was intended for Docker development only). The proposed solution in that blog post actually works with Pongo. By starting the container running Pongo with the&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-v /var/run/docker.sock:/var/run/docker.sock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;option, the container will get control over the Docker deamon on the host. The means that the test environment spun up by Pongo will not run inside the Pongo container (as children) but along side the Pongo container (as siblings). To share the plugin code and tests with the (sibling) test container Pongo will need a shared working directory on the host. This working directory must be mapped to &lt;code&gt;/pongo_wd&lt;/code&gt; on the container running Pongo.&lt;/p&gt; &#xA;&lt;p&gt;Additionally the container id must be made available to the Pongo container. It must be in a file &lt;code&gt;.containerid&lt;/code&gt; in the same working directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;WARNING&lt;/strong&gt;: make sure to read up on the security consequences of sharing &lt;code&gt;docker.sock&lt;/code&gt;! You are allowing a Docker container to control the Docker deamon on the host!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;For a working example see &lt;a href=&#34;https://github.com/Kong/kong-pongo/tree/master/assets/docker&#34;&gt;the Pongo repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Releasing (new Kong versions)&lt;/h2&gt; &#xA;&lt;p&gt;When new Kong versions are released, the test artifacts contained within this Pongo repository must be updated.&lt;/p&gt; &#xA;&lt;p&gt;To do so there are some pre-requisites;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;have &lt;a href=&#34;https://hub.github.com/&#34;&gt;hub&lt;/a&gt; installed and configured&lt;/li&gt; &#xA; &lt;li&gt;on OSX have &lt;a href=&#34;https://www.gnu.org/software/coreutils/coreutils.html&#34;&gt;coreutils&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;have access to the &lt;code&gt;kong-pongo&lt;/code&gt; (push) and &lt;code&gt;kong-ee&lt;/code&gt; (read/clone) repositories on Github&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Update the version as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# The code-base (1st argument) is either &#34;EE&#34; (Enterprise) or &#34;CE&#34; (Opensource)&#xA;# 2nd argument is the version to add.&#xA;# 3rd argument makes it a test run if given&#xA;&#xA;assets/add_version.sh &#34;EE&#34; &#34;1.2.3&#34; &#34;test&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s an all-in-one command, edit the parameters as needed;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --single-branch https://github.com/Kong/kong-pongo $TMPDIR/kong-pongo &amp;amp;&amp;amp; $TMPDIR/kong-pongo/assets/add_version.sh &#34;EE&#34; &#34;1.2.3&#34; &#34;test&#34;; rm -rf $TMPDIR/kong-pongo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result should be a new PR on the Pongo repo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Changelog&lt;/h1&gt; &#xA;&lt;h4&gt;releasing new versions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;update the changelog below&lt;/li&gt; &#xA; &lt;li&gt;update version in &lt;code&gt;pongo.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;update version in logo at top of this &lt;code&gt;README&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;commit as &lt;code&gt;release x.y.z&lt;/code&gt;, tag as &lt;code&gt;x.y.z&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;push commit and tags&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;unreleased&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fix: workaround for &lt;a href=&#34;https://github.com/Kong/kong/issues/9365&#34;&gt;https://github.com/Kong/kong/issues/9365&lt;/a&gt; &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/314&#34;&gt;#314&lt;/a&gt;]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1.2.0 released 01-Sep-2022&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Feat: Kong Enterprise 2.8.1.2, 2.8.1.3, 2.8.1.4&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Added a Pongo github action, see the &lt;a href=&#34;https://github.com/marketplace/actions/kong-pongo&#34;&gt;marketplace&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enabled redis cluster tests &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/305&#34;&gt;#305&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Export the new &lt;code&gt;KONG_SPEC_TEST_REDIS_HOST&lt;/code&gt; variable to be compatible with Kong 3.0.0+ &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/290&#34;&gt;#290&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Aliases now support &lt;code&gt;.yml&lt;/code&gt; and &lt;code&gt;.json&lt;/code&gt; extension for declarative config file &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/296&#34;&gt;#296&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Changed nightly-ee image to the new &lt;code&gt;master&lt;/code&gt; tag &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/300&#34;&gt;#300&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Added new alias &#34;kx&#34; for export, and added explanation when shelling &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/311&#34;&gt;#311&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1.1.0 released 14-Jun-2022&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Feat: Kong Enterprise 2.6.1.0, 2.7.2.0, 2.8.0.0, 2.8.1.0, 2.8.1.1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feat: Kong OSS 2.4.2, 2.5.2, 2.6.1, 2.7.2, 2.8.0, 2.8.1&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feat: Enable SSL for Redis on port &lt;code&gt;6380&lt;/code&gt; &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/270&#34;&gt;#270&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feat: The &lt;code&gt;--debug&lt;/code&gt; flag now also sets docker build command to &lt;code&gt;--progress plain&lt;/code&gt; for easier debugging of the build. It also does &lt;code&gt;set -x&lt;/code&gt; so be careful not to copy-paste secrets somewhere!! &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/283&#34;&gt;#283&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Change: Upgrade image &lt;code&gt;redis:5.0.4-alpine&lt;/code&gt; to &lt;code&gt;redis:6.2.6-alpine&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fix: Packing rocks was limited to single-digit rockspec revisions &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/289&#34;&gt;#289&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fix: Add &lt;code&gt;python3-dev&lt;/code&gt; package to fix the &lt;code&gt;httpie&lt;/code&gt; installation &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/283&#34;&gt;#283&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fix: Fix rock installation issue due to unauthenticated Git protocol &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/266&#34;&gt;#266&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fix: Upgrade cassandra image from 3.9 to 3.11 for M1 chip &lt;a href=&#34;https://github.com/Kong/kong-pongo/pull/269&#34;&gt;#269&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1.0.0 released 1-Feb-2022&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Initial versioned release of Pongo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Kong/kong-pongo/master/#table-of-contents&#34;&gt;Back to ToC&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jbyuki/instant.nvim</title>
    <updated>2022-09-08T01:39:24Z</updated>
    <id>tag:github.com,2022-09-08:/jbyuki/instant.nvim</id>
    <link href="https://github.com/jbyuki/instant.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;collaborative editing in Neovim using built-in capabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;instant.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;instant.nvim&lt;/strong&gt; is a &lt;strong&gt;collaborative editing&lt;/strong&gt; plugin for &lt;strong&gt;Neovim&lt;/strong&gt; written in &lt;strong&gt;Lua&lt;/strong&gt; with no dependencies.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbyuki/instant.nvim/wiki/Design-Document&#34;&gt;Design document&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbyuki/instant.nvim/wiki/Protocol&#34;&gt;Protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbyuki/instant.nvim/wiki/Deploy-a-server&#34;&gt;Deploy a server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbyuki/instant.nvim/wiki/API&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbyuki/instant.nvim/wiki/Commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jbyuki/instant.nvim/wiki/Technical-Overview&#34;&gt;Technical Overview&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://postimg.cc/yg1qR6dh&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/50vfZ6Wr/Untitled-Project.gif&#34; alt=&#34;Untitled-Project.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Powerful collaborative editing algorithm&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;UTF-8 Support&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Single or multiple buffer sharing&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Virtual cursors with username of other clients&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Spectate actions of a user&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Built-in localhost server&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Separated undo/redo for each user&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Persistent data on server&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.4.4 or above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install using a plugin manager such as &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;jbyuki/instant.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configurations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set your username in &lt;code&gt;init.vim&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;let g:instant_username = &#34;USERNAME&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jbyuki/instant.nvim/wiki/Customization&#34;&gt;here&lt;/a&gt; for more customization options.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The collaborative editing plugin works with a server which connects together the clients. Thus, a server must be running which must be reachable by all clients.&lt;/p&gt; &#xA;&lt;h3&gt;Server (Neovim or node.js)&lt;/h3&gt; &#xA;&lt;p&gt;For a localhost or LAN network, you can simple use the built-in server included in the plugin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start it with &lt;code&gt;:InstantStartServer [host] [port]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;When done stop it with &lt;code&gt;:InstantStopServer&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The default is to serve localhost only, on port 8080. For a more advanced (remote server) overview see &lt;a href=&#34;https://github.com/jbyuki/instant.nvim/wiki/Deploy-a-server&#34;&gt;Deploy a server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Client (Neovim)&lt;/h3&gt; &#xA;&lt;p&gt;To start the client, the first user to connect to the server must initiates the share with a special commands with has the form &lt;code&gt;InstantStart...&lt;/code&gt;. Subsequent joining clients, use a different command &lt;code&gt;InstantJoin...&lt;/code&gt;. Having distinct commands to start and join a server ensures that files are not overwritten by accident on connection.&lt;/p&gt; &#xA;&lt;p&gt;There are essentially two modes of sharing at the moment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Single buffer sharing&lt;/strong&gt;: This will only share the current buffer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Session sharing&lt;/strong&gt;: This will share all opened (and newly opened) buffers with the other clients. This can be thought of directory sharing without implicit writing on the file system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For single buffer sharing use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantStartSingle [host] [port]&lt;/code&gt; : Host is the URL or IP address. Port is 80 by default. Use this command if you&#39;re the first client to connect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantJoinSingle [host] [port]&lt;/code&gt; : Use this command if another client already initiated a single share.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantStop&lt;/code&gt; : This will stop the client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For session sharing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantStartSession [host] [port]&lt;/code&gt; : If you&#39;re the first client to connect.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantJoinSession [host] [port]&lt;/code&gt; : Use this command if another client already initiated a session share&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantStop&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional useful sharing commands are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantStatus&lt;/code&gt; : Display the current connected clients as well as their locations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantFollow [user]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantStopFollow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantOpenAll&lt;/code&gt; : Open all files in buffers in the current directory. Useful to share the whole directory in session sharing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantSaveAll&lt;/code&gt; : Save all opened buffers automatically. This will also create missing subdirectories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantMark&lt;/code&gt; : Visually mark a region&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InstantMarkClear&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Tips and Tricks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If there is an issue, you can resync by stopping and reconnecting.&lt;/li&gt; &#xA; &lt;li&gt;In session sharing, view all the available buffers with &lt;code&gt;:ls&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Help&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you encounter any problem, please don&#39;t hesitate to open an &lt;a href=&#34;https://github.com/jbyuki/instant.nvim/issues&#34;&gt;Issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributions&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jbyuki/ntangle.nvim/wiki/How-to-use-ntangle.nvim&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All contributions are welcome&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-shops</title>
    <updated>2022-09-08T01:39:24Z</updated>
    <id>tag:github.com,2022-09-08:/qbcore-framework/qb-shops</id>
    <link href="https://github.com/qbcore-framework/qb-shops" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Shops For QB-Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-shops&lt;/h1&gt; &#xA;&lt;p&gt;Shops For QB-Core&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>