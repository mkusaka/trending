<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T01:35:47Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gbprod/yanky.nvim</title>
    <updated>2023-09-01T01:35:47Z</updated>
    <id>tag:github.com,2023-09-01:/gbprod/yanky.nvim</id>
    <link href="https://github.com/gbprod/yanky.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Improved Yank and Put functionalities for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üçÉ yanky.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt; &lt;a href=&#34;https://github.com/gbprod/yanky.nvim/actions/workflows/integration.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/gbprod/yanky.nvim/integration.yml?branch=main&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The aim of &lt;code&gt;yanky.nvim&lt;/code&gt; is to improve yank and put functionalities for Neovim.&lt;/p&gt; &#xA;&lt;p&gt;French slogan:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Vas-y Yanky, c&#39;est bon !&#34; - Yanky Vincent&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Or in English:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Yanky-ki-yay, motherf*cker&#34; - John McYanky&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/yanky.nvim/main/#%EF%B8%8F-yank-ring&#34;&gt;Yank-ring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/yanky.nvim/main/#-yank-history-picker&#34;&gt;Yank history picker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/yanky.nvim/main/#-highlight-put-and-yanked-text&#34;&gt;Highlight put and yanked text&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/yanky.nvim/main/#%EF%B8%8F-preserve-cursor-position-on-yank&#34;&gt;Perserve cursor position on yank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/yanky.nvim/main/#%EF%B8%8F-special-put&#34;&gt;Special put&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Requires neovim &amp;gt; &lt;code&gt;0.7.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use(&#34;gbprod/yanky.nvim&#34;)&#xA;require(&#34;yanky&#34;).setup({&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;Plug &#39;gbprod/yanky.nvim&#39;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#34;yanky&#34;).setup({&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  })&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Yanky comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ring = {&#xA;    history_length = 100,&#xA;    storage = &#34;shada&#34;,&#xA;    sync_with_numbered_registers = true,&#xA;    cancel_event = &#34;update&#34;,&#xA;  },&#xA;  picker = {&#xA;    select = {&#xA;      action = nil, -- nil to use default put action&#xA;    },&#xA;    telescope = {&#xA;      use_default_mappings = true, -- if default mappings should be used&#xA;      mappings = nil, -- nil to use default mappings or no mappings (see `use_default_mappings`)&#xA;    },&#xA;  },&#xA;  system_clipboard = {&#xA;    sync_with_ring = true,&#xA;  },&#xA;  highlight = {&#xA;    on_put = true,&#xA;    on_yank = true,&#xA;    timer = 500,&#xA;  },&#xA;  preserve_cursor_position = {&#xA;    enabled = true,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;‚å®Ô∏è Mappings&lt;/h3&gt; &#xA;&lt;p&gt;This plugin contains no default mappings and will have no effect until you add your own maps to it. You should at least set those keymaps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set({&#34;n&#34;,&#34;x&#34;}, &#34;p&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutAfter)&#34;)&#xA;vim.keymap.set({&#34;n&#34;,&#34;x&#34;}, &#34;P&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutBefore)&#34;)&#xA;vim.keymap.set({&#34;n&#34;,&#34;x&#34;}, &#34;gp&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyGPutAfter)&#34;)&#xA;vim.keymap.set({&#34;n&#34;,&#34;x&#34;}, &#34;gP&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyGPutBefore)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some features requires specific mappings, refer to feature documentation section.&lt;/p&gt; &#xA;&lt;h2&gt;üñáÔ∏è Yank-ring&lt;/h2&gt; &#xA;&lt;p&gt;Yank-ring allows cycling throught yank history when putting text (like the Emacs &#34;kill-ring&#34; feature). Yanky automatically maintain a history of yanks that you can choose between when pasting.&lt;/p&gt; &#xA;&lt;h3&gt;‚å®Ô∏è Mappings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;c-n&amp;gt;&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyCycleForward)&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;c-p&amp;gt;&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyCycleBackward)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With these mappings, after performing a paste, you can cycle through the history by hitting &lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt;. Any modifications done after pasting will cancel the possibility to cycle.&lt;/p&gt; &#xA;&lt;p&gt;Note that the swap operations above will only affect the current paste and the history will be unchanged.&lt;/p&gt; &#xA;&lt;h3&gt;‚öôÔ∏è Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;yanky&#34;).setup({&#xA;  ring = {&#xA;    history_length = 100,&#xA;    storage = &#34;shada&#34;,&#xA;    sync_with_numbered_registers = true,&#xA;    cancel_event = &#34;update&#34;,&#xA;    ignore_registers = { &#34;_&#34; },&#xA;  },&#xA;  system_clipboard = {&#xA;    sync_with_ring = true,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;ring.history_length&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;100&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define the number of yanked items that will be saved and used for ring.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;ring.storage&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;shada&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available : &lt;code&gt;shada&lt;/code&gt;, &lt;code&gt;sqlite&lt;/code&gt; or &lt;code&gt;memory&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define the storage mode for ring values.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;shada&lt;/code&gt;, this will save pesistantly using Neovim ShaDa feature. This means that history will be persisted between each session of Neovim.&lt;/p&gt; &#xA;&lt;p&gt;You can also use this feature to sync the yank history across multiple running instances of Neovim by updating shada file. If you execute &lt;code&gt;:wshada&lt;/code&gt; in the first instance and then &lt;code&gt;:rshada&lt;/code&gt; in the second instance, the second instance will be synced with the yank history in the first instance.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;code&gt;memory&lt;/code&gt;, each Neovim instance will have his own history and il will be lost between sessions.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use &lt;code&gt;sqlite&lt;/code&gt; as storage, you must add &lt;a href=&#34;https://github.com/kkharji/sqlite.lua&#34;&gt;&lt;code&gt;kkharji/sqlite.lua&lt;/code&gt;&lt;/a&gt; as dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;  &#34;gbprod/yanky.nvim&#34;,&#xA;  requires = { &#34;kkharji/sqlite.lua&#34; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sqlite is more reliable than ShaDa but requires more dependencies.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;ring.sync_with_numbered_registers&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;History can also be synchronized with numbered registers. Every time the yank history changes the numbered registers 1 - 9 will be updated to sync with the first 9 entries in the yank history. See &lt;a href=&#34;http://vimcasts.org/blog/2013/11/registers-the-good-the-bad-and-the-ugly-parts/&#34;&gt;here&lt;/a&gt; for an explanation of why we would want do do this.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;ring.cancel_event&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;update&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define the event used to cancel ring activation. &lt;code&gt;update&lt;/code&gt; will cancel ring on next buffer update, &lt;code&gt;move&lt;/code&gt; will cancel ring when moving cursor or content changed.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;ring.ignore_registers &lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;{ &#34;_&#34; }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define registeres to be ignored. By default the black hole register is ignored.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;system_clipboard.sync_with_ring&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Yanky can automatically adds to ring history yanks that occurs outside of Neovim. This works regardless to your &lt;code&gt;&amp;amp;clipboard&lt;/code&gt; setting.&lt;/p&gt; &#xA;&lt;p&gt;This means, if &lt;code&gt;&amp;amp;clipboard&lt;/code&gt; is set to &lt;code&gt;unnamed&lt;/code&gt; and/or &lt;code&gt;unnamedplus&lt;/code&gt;, if you yank something outside of Neovim, you can put it immediatly using &lt;code&gt;p&lt;/code&gt; and it will be added to your yank ring.&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;&amp;amp;clipboard&lt;/code&gt; is empty, if you yank something outside of Neovim, this will be the first value you&#39;ll have when cycling through the ring. Basicly, you can do &lt;code&gt;p&lt;/code&gt; and then &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; to paste yanked text.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;You can clear yank history using &lt;code&gt;YankyClearHistory&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;üìú Yank history picker&lt;/h2&gt; &#xA;&lt;p&gt;This allows you to select an entry in your recorded yank history using default &lt;code&gt;vim.ui.select&lt;/code&gt; neovim prompt (you can use &lt;a href=&#34;https://github.com/stevearc/dressing.nvim/&#34;&gt;stevearc/dressing.nvim&lt;/a&gt; to customize this) or the awesome &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It uses the same history as yank ring, so, if you want to increase history size, just use &lt;a href=&#34;https://raw.githubusercontent.com/gbprod/yanky.nvim/main/#ringhistory_length&#34;&gt;&lt;code&gt;ring.history_length&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;‚öôÔ∏è Configuration&lt;/h3&gt; &#xA;&lt;p&gt;To use &lt;code&gt;vim.ui.select&lt;/code&gt; picker, just call &lt;code&gt;YankyRingHistory&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;To use the &lt;code&gt;yank_history&lt;/code&gt; Telescope picker, register &lt;code&gt;yank_history&lt;/code&gt; as a Telescope extension in your Neovim config file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;telescope&#34;).load_extension(&#34;yank_history&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After loading the extension, you can access the picker by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope yank_history&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;telescope&#34;).extensions.yank_history.yank_history()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the Telescope option &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/raw/master/doc/telescope.txt&#34;&gt;&lt;code&gt;dynamic_preview_title&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;true&lt;/code&gt; if you want your Telescope preview window to have a dynamic title showing the register&#39;s type.&lt;/p&gt; &#xA;&lt;p&gt;Default configuration :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;yanky&#34;).setup({&#xA;  picker = {&#xA;    select = {&#xA;      action = nil, -- nil to use default put action&#xA;    },&#xA;    telescope = {&#xA;      mappings = nil, -- nil to use default mappings&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;picker.select.acion&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This define the action that should be done when selecting an item in the &lt;code&gt;vim.ui.select&lt;/code&gt; prompt. If you let this option to &lt;code&gt;nil&lt;/code&gt;, this will use the default action : put selected item after cursor.&lt;/p&gt; &#xA;&lt;p&gt;Available actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;yanky.picker&#34;).actions.put(&#34;p&#34;) -- put after cursor&#xA;require(&#34;yanky.picker&#34;).actions.put(&#34;P&#34;) -- put before cursor&#xA;require(&#34;yanky.picker&#34;).actions.put(&#34;gp&#34;) -- put after cursor and leave the cursor after&#xA;require(&#34;yanky.picker&#34;).actions.put(&#34;gP&#34;) -- put before cursor and leave the cursor after&#xA;require(&#34;yanky.picker&#34;).actions.delete() -- delete entry from yank history&#xA;require(&#34;yanky.picker&#34;).actions.set_register(regname) -- fill register with selected value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;picker.telescope.use_default_mappings&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This define if default Telescope mappings should be use.&lt;/p&gt; &#xA;&lt;p&gt;If you let this option to &lt;code&gt;true&lt;/code&gt;, this will use the default mappings :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local utils = require(&#34;yanky.utils&#34;)&#xA;local mapping = require(&#34;yanky.telescope.mapping&#34;)&#xA;&#xA;require(&#34;yanky&#34;).setup({&#xA;  picker = {&#xA;    telescope = {&#xA;      mappings = {&#xA;        default = mapping.put(&#34;p&#34;),&#xA;        i = {&#xA;          [&#34;&amp;lt;c-p&amp;gt;&#34;] = mapping.put(&#34;p&#34;),&#xA;          [&#34;&amp;lt;c-k&amp;gt;&#34;] = mapping.put(&#34;P&#34;),&#xA;          [&#34;&amp;lt;c-x&amp;gt;&#34;] = mapping.delete(),&#xA;          [&#34;&amp;lt;c-r&amp;gt;&#34;] = mapping.set_register(utils.get_default_register()),&#xA;        },&#xA;        n = {&#xA;          p = mapping.put(&#34;p&#34;),&#xA;          P = mapping.put(&#34;P&#34;),&#xA;          d = mapping.delete(),&#xA;          r = mapping.set_register(utils.get_default_register())&#xA;        },&#xA;      }&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;picker.telescope.mappings&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This define or overrides the mappings available in Telescope.&lt;/p&gt; &#xA;&lt;p&gt;If you set &lt;code&gt;use_default_mappings&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, mappings will be merged with default mappings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Available actions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;yanky.telescope.mapping&#34;).put(&#34;p&#34;) -- put after cursor&#xA;require(&#34;yanky.telescope.mapping&#34;).put(&#34;P&#34;) -- put before cursor&#xA;require(&#34;yanky.telescope.mapping&#34;).put(&#34;gp&#34;) -- put after cursor and leave the cursor after&#xA;require(&#34;yanky.telescope.mapping&#34;).put(&#34;gP&#34;) -- put before cursor and leave the cursor after&#xA;require(&#34;yanky.telescope.mapping&#34;).delete() -- delete entry from yank history&#xA;require(&#34;yanky.telescope.mapping&#34;).set_register(regname) -- fill register {regname} with selected value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use any of available &lt;a href=&#34;https://github.com/gbprod/yanky.nvim#%EF%B8%8F-special-put&#34;&gt;special puts&lt;/a&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;yanky.telescope.mapping&#34;).special_put(&#34;{{ name of the special put }}&#34;)&#xA;&#xA;-- eg.&#xA;require(&#34;yanky.telescope.mapping&#34;).special_put(&#34;YankyPutAfterCharwiseJoined&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üí° Highlight put and yanked text&lt;/h2&gt; &#xA;&lt;p&gt;This will give you a visual feedback on put and yank text by highlighting this.&lt;/p&gt; &#xA;&lt;p&gt;###&amp;nbsp;Configuration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;yanky&#34;).setup({&#xA;  highlight = {&#xA;    on_put = true,&#xA;    on_yank = true,&#xA;    timer = 500,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override &lt;code&gt;YankyPut&lt;/code&gt; highlight to change colors.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;highlight.on_put&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define if highlight put text feature is enabled.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;highlight.on_yank&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define if highlight yanked text feature is enabled.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;highlight.timer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;500&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define the duration of highlight.&lt;/p&gt; &#xA;&lt;h2&gt;‚§µÔ∏è Preserve cursor position on yank&lt;/h2&gt; &#xA;&lt;p&gt;By default in Neovim, when yanking text, cursor moves to the start of the yanked text. Could be annoying especially when yanking a large text object such as a paragraph or a large text object.&lt;/p&gt; &#xA;&lt;p&gt;With this feature, yank will function exactly the same as previously with the one difference being that the cursor position will not change after performing a yank.&lt;/p&gt; &#xA;&lt;h3&gt;‚å®Ô∏è Mappings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set({&#34;n&#34;,&#34;x&#34;}, &#34;y&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyYank)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;‚öôÔ∏è Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;yanky&#34;).setup({&#xA;  preserve_cursor_position = {&#xA;    enabled = true,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;preserve_cursor_position.enabled&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define if cursor position should be preserved on yank. This works only if mappings has been defined.&lt;/p&gt; &#xA;&lt;h2&gt;üé® Colors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Group&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Highlight color for put text&lt;/td&gt; &#xA;   &lt;td&gt;YankyPut&lt;/td&gt; &#xA;   &lt;td&gt;link to Search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Highlight color for yanked text&lt;/td&gt; &#xA;   &lt;td&gt;YankyYanked&lt;/td&gt; &#xA;   &lt;td&gt;link to Search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;ü§ù Integrations&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;gbprod/substitute.nvim&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;To enable &lt;a href=&#34;https://github.com/gbprod/substitute.nvim&#34;&gt;gbprod/substitute.nvim&lt;/a&gt; swap when performing a substitution, you can add this to your setup:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;substitute&#34;).setup({&#xA;  on_substitute = require(&#34;yanky.integration&#34;).substitute(),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;anuvyklack/hydra.nvim&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;To work with &lt;a href=&#34;https://github.com/anuvyklack/hydra.nvim&#34;&gt;anuvyklack/hydra.nvim&lt;/a&gt; only setup &#xA;  &lt;c-n&gt;&#xA;   /&#xA;   &lt;c-p&gt;&#xA;     mapping when yanky is activated, you can add this to your setup:&#xA;   &lt;/c-p&gt;&#xA;  &lt;/c-n&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Hydra = require(&#34;hydra&#34;)&#xA;&#xA;local function t(str)&#xA;  return api.nvim_replace_termcodes(str, true, true, true)&#xA;end&#xA;&#xA;local yanky_hydra = Hydra({&#xA;  name = &#34;Yank ring&#34;,&#xA;  mode = &#34;n&#34;,&#xA;  heads = {&#xA;    { &#34;p&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutAfter)&#34;, { desc = &#34;After&#34; } },&#xA;    { &#34;P&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutBefore)&#34;, { desc = &#34;Before&#34; } },&#xA;    { &#34;&amp;lt;C-n&amp;gt;&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyCycleForward)&#34;, { private = true, desc = &#34;‚Üì&#34; } },&#xA;    { &#34;&amp;lt;C-p&amp;gt;&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyCycleBackward)&#34;, { private = true, desc = &#34;‚Üë&#34; } },&#xA;  },&#xA;})&#xA;&#xA;-- choose/change the mappings if you want&#xA;for key, putAction in pairs({&#xA;  [&#34;p&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutAfter)&#34;,&#xA;  [&#34;P&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutBefore)&#34;,&#xA;  [&#34;gp&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyGPutAfter)&#34;,&#xA;  [&#34;gP&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyGPutBefore)&#34;,&#xA;}) do&#xA;  vim.keymap.set({ &#34;n&#34;, &#34;x&#34; }, key, function()&#xA;    vim.fn.feedkeys(t(putAction))&#xA;    yanky_hydra:activate()&#xA;  end)&#xA;end&#xA;&#xA;-- choose/change the mappings if you want&#xA;for key, putAction in pairs({&#xA;  [&#34;]p&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterLinewise)&#34;,&#xA;  [&#34;[p&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeLinewise)&#34;,&#xA;  [&#34;]P&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterLinewise)&#34;,&#xA;  [&#34;[P&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeLinewise)&#34;,&#xA;&#xA;  [&#34;&amp;gt;p&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterShiftRight)&#34;,&#xA;  [&#34;&amp;lt;p&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterShiftLeft)&#34;,&#xA;  [&#34;&amp;gt;P&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeShiftRight)&#34;,&#xA;  [&#34;&amp;lt;P&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeShiftLeft)&#34;,&#xA;&#xA;  [&#34;=p&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutAfterFilter)&#34;,&#xA;  [&#34;=P&#34;] = &#34;&amp;lt;Plug&amp;gt;(YankyPutBeforeFilter)&#34;,&#xA;}) do&#xA;  vim.keymap.set(&#34;n&#34;, key, function()&#xA;    vim.fn.feedkeys(t(putAction))&#xA;    yanky_hydra:activate()&#xA;  end)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;‚Ü©Ô∏è Special put&lt;/h2&gt; &#xA;&lt;p&gt;Yanky comes with special put moves (inspired by &lt;a href=&#34;https://github.com/tpope/vim-unimpaired/raw/master/doc/unimpaired.txt#L100&#34;&gt;tpope/vim-unimpaired&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linewise put: this will force put above or below the current line ;&lt;/li&gt; &#xA; &lt;li&gt;Shift right/left put: will put above or below the current line and increasing or decreasing indent ;&lt;/li&gt; &#xA; &lt;li&gt;Filter put: will put above or below the current line and reindenting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;‚å®Ô∏è Mappings&lt;/h3&gt; &#xA;&lt;p&gt;For basic usage (like with &lt;a href=&#34;https://github.com/tpope/vim-unimpaired/raw/master/doc/unimpaired.txt#L100&#34;&gt;tpope/vim-unimpaired&lt;/a&gt;), you can use those bindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;]p&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterLinewise)&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;[p&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeLinewise)&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;]P&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterLinewise)&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;[P&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeLinewise)&#34;)&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;gt;p&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterShiftRight)&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;p&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterShiftLeft)&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;gt;P&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeShiftRight)&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;P&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeShiftLeft)&#34;)&#xA;&#xA;vim.keymap.set(&#34;n&#34;, &#34;=p&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutAfterFilter)&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;=P&#34;, &#34;&amp;lt;Plug&amp;gt;(YankyPutBeforeFilter)&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To go further, Plug mappings are constructed like this: &lt;code&gt;Yanky(put-type)(modifier)(rewriter)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;put-type&lt;/code&gt; can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PutAfter&lt;/code&gt;: put after your cursor (as &lt;a href=&#34;https://neovim.io/doc/user/change.html#put&#34;&gt;&lt;code&gt;p&lt;/code&gt;&lt;/a&gt; key) ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PutBefore&lt;/code&gt;: put before your cursor (as &lt;a href=&#34;https://neovim.io/doc/user/change.html#P&#34;&gt;&lt;code&gt;P&lt;/code&gt;&lt;/a&gt; key) ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GPutAfter&lt;/code&gt;: like &lt;code&gt;PutAfter&lt;/code&gt; but leave the cursor after the new text (as &lt;a href=&#34;https://neovim.io/doc/user/change.html#gp&#34;&gt;&lt;code&gt;gp&lt;/code&gt;&lt;/a&gt; key) ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GPutBefore&lt;/code&gt;: like &lt;code&gt;PutBefore&lt;/code&gt; but leave the cursor after the new text (as &lt;a href=&#34;https://neovim.io/doc/user/change.html#gP&#34;&gt;&lt;code&gt;gP&lt;/code&gt;&lt;/a&gt; key) ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PutIndentAfter&lt;/code&gt;: like &lt;code&gt;PutAfter&lt;/code&gt; but adjust the indent to the current line (as &lt;a href=&#34;https://neovim.io/doc/user/change.html#%5Dp&#34;&gt;&lt;code&gt;]p&lt;/code&gt;&lt;/a&gt; key) ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PutIndentBefore&lt;/code&gt;: like &lt;code&gt;PutBefore&lt;/code&gt; but adjust the indent to the current line (as &lt;a href=&#34;https://neovim.io/doc/user/change.html#%5Bp&#34;&gt;&lt;code&gt;[p&lt;/code&gt;&lt;/a&gt; key) ;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;modifier&lt;/code&gt; (optional) can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Linewise&lt;/code&gt;: put in linewise mode ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Charwise&lt;/code&gt;: put in charwise mode ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Blockwise&lt;/code&gt;: put in blockwise mode ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ShiftRight&lt;/code&gt;: increase indent ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ShiftLeft&lt;/code&gt;: decrease indent.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;rewriter&lt;/code&gt; (optional) can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Joined&lt;/code&gt;: put lines trimed and joined.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;All special puts&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;lt;Plug&amp;gt;(YankyPutAfter)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterBlockwise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterBlockwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterCharwise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterCharwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterFilter)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterFilterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterLinewise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterLinewiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterShiftLeft)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterShiftLeftJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterShiftRight)&#xA;&amp;lt;Plug&amp;gt;(YankyPutAfterShiftRightJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBefore)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeBlockwise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeBlockwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeCharwise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeCharwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeFilter)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeFilterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeLinewise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeLinewiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeShiftLeft)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeShiftLeftJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeShiftRight)&#xA;&amp;lt;Plug&amp;gt;(YankyPutBeforeShiftRightJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfter)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterBlockwise)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterBlockwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterCharwise)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterCharwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterFilter)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterFilterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterLinewise)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterLinewiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterShiftLeft)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterShiftLeftJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterShiftRight)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutAfterShiftRightJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBefore)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeBlockwise)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeBlockwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeCharwise)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeCharwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeFilter)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeFilterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeLinewise)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeLinewiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeShiftLeft)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeShiftLeftJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeShiftRight)&#xA;&amp;lt;Plug&amp;gt;(YankyGPutBeforeShiftRightJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfter)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterBlockwise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterBlockwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterCharwise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterCharwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterFilter)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterFilterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterLinewise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterLinewiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterShiftLeft)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterShiftLeftJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterShiftRight)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentAfterShiftRightJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBefore)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeBlockwise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeBlockwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeCharwise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeCharwiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeFilter)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeFilterJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeLinewise)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeLinewiseJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeShiftLeft)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeShiftLeftJoined)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeShiftRight)&#xA;&amp;lt;Plug&amp;gt;(YankyPutIndentBeforeShiftRightJoined)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üéâ Credits&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is mostly a lua version of &lt;a href=&#34;https://github.com/svermeulen/vim-yoink&#34;&gt;svermeulen/vim-yoink&lt;/a&gt; awesome plugin.&lt;/p&gt; &#xA;&lt;p&gt;Other inspiration :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bfredl/nvim-miniyank&#34;&gt;bfredl/nvim-miniyank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maxbrunsfeld/vim-yankstack&#34;&gt;maxbrunsfeld/vim-yankstack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/svermeulen/vim-easyclip&#34;&gt;svermeulen/vim-easyclip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bkoropoff/yankee.vim&#34;&gt;bkoropoff/yankee.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/svban/YankAssassin.vim&#34;&gt;svban/YankAssassin.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;tpope/vim-unimpaired&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inkarkat/vim-UnconditionalPaste&#34;&gt;inkarkat/vim-UnconditionalPaste&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/m00qek/plugin-template.nvim&#34;&gt;m00qek lua plugin template&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cassin01/wf.nvim</title>
    <updated>2023-09-01T01:35:47Z</updated>
    <id>tag:github.com,2023-09-01:/Cassin01/wf.nvim</id>
    <link href="https://github.com/Cassin01/wf.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern which-key for neovim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a name=&#34;readme-top&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Cassin01/wf.nvim/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/Cassin01/wf.nvim.svg?style=for-the-badge&#34; alt=&#34;Contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/Cassin01/wf.nvim.svg?style=for-the-badge&#34; alt=&#34;Forks&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Cassin01/wf.nvim.svg?style=for-the-badge&#34; alt=&#34;Stargazers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/Cassin01/wf.nvim.svg?style=for-the-badge&#34; alt=&#34;Issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/raw/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Cassin01/wf.nvim.svg?style=for-the-badge&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/Cassin01/wf.nvim/main.yml?style=for-the-badge&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/Cassin01/wf.nvim&#34;&gt; &#xA;  &lt;!-- &lt;img src=&#34;.github/images/logo.png&#34; alt=&#34;Logo&#34; width=&#34;80&#34; height=&#34;80&#34;&gt; --&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/.github/images/logo_white.png&#34; alt=&#34;Logo&#34; width=&#34;200&#34; height=&#34;200&#34;&gt; &lt;/a&gt; &#xA; &lt;!-- &lt;h3 align=&#34;center&#34;&gt;wf.nvim&lt;/h3&gt; --&gt; &#xA; &lt;p align=&#34;center&#34;&gt; &#xA;  &lt;!-- A which-key with a fuzzy-find. --&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/raw/main/doc/wf.txt&#34;&gt;&lt;strong&gt;Explore the docs ¬ª&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://youtu.be/S3aKshSPyiQ&#34;&gt;View Demo&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/issues&#34;&gt;Report Bug&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/issues&#34;&gt;Request Feature&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- TABLE OF CONTENTS --&gt; &#xA;&lt;!-- &lt;details&gt; --&gt; &#xA;&lt;summary&gt;Table of Contents&lt;/summary&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#about-the-project&#34;&gt;About The Project&lt;/a&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#key-bindings-assignments&#34;&gt;Default Shortcut / Key Bindings Assignments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#how-to-use-as-a-picker&#34;&gt;How to use as a picker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- &lt;/details&gt; --&gt; &#xA;&lt;!-- ABOUT THE PROJECT --&gt; &#xA;&lt;h2&gt;About The Project&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- &gt; Drag your video (&lt;10MB) here to host it for free on GitHub. --&gt; &#xA; &lt;!-- [![Product Name Screen Shot][product-screenshot]](https://github.com/Cassin01/wf.nvim) --&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/42632201/219690019-a5615bac-6747-41d8-a10e-ddae151af5c2.mp4&#34;&gt;https://user-images.githubusercontent.com/42632201/219690019-a5615bac-6747-41d8-a10e-ddae151af5c2.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- &gt; Videos don&#39;t work on GitHub mobile, so a GIF alternative can help users. --&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://youtu.be/S3aKshSPyiQ&#34;&gt;The video link for mobile users&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;code&gt;wf.nvim&lt;/code&gt; is a new which-key like plugin for Neovim.&lt;/p&gt; &#xA;&lt;h3&gt;‚ú® Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built-in fuzzy-finder&lt;/li&gt; &#xA; &lt;li&gt;Does not provide a default global keymap&lt;/li&gt; &#xA; &lt;li&gt;Using &lt;code&gt;nvim_set_keymap&lt;/code&gt;&#39;s &#34;desc&#34; feature (see &lt;code&gt;:help nvim_set_keymap&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;for Neovim 0.7 and higher, it uses the desc as key description&lt;/li&gt; &#xA; &lt;li&gt;Skip duplicate characters (&lt;code&gt;skip_front_duplication&lt;/code&gt;, &lt;code&gt;skip_back_duplication&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Builtin pickers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;which-key&lt;/code&gt;: displays key mappings to invoke&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;mark&lt;/code&gt;: displays marks to move&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bookmark&lt;/code&gt;: displays file paths to open&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buffer&lt;/code&gt;: displays buffers to focus&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;register&lt;/code&gt;: displays the contents of registers&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The difference with &lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;which-key.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The display of &lt;code&gt;wf.nvim&lt;/code&gt; is displayed in a row at the bottom right like &lt;a href=&#34;https://helix-editor.com/&#34;&gt;helix&lt;/a&gt;. Instead of displaying multiple columns at the bottom like &lt;a href=&#34;https://www.spacemacs.org/&#34;&gt;spacemacs&lt;/a&gt; style. This has improved the display speed of multibyte characters in particular.&lt;/p&gt; &#xA;&lt;h4&gt;Pros&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The layout does not collapse even if multibyte characters are included.&lt;/li&gt; &#xA; &lt;li&gt;You can use the builtin fuzzy finder to find forgotten shortcuts.&lt;/li&gt; &#xA; &lt;li&gt;Three themes(default, space, chad) are offered.&lt;/li&gt; &#xA; &lt;li&gt;Fits any color scheme. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The colors change to match the color scheme.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Stress-free selection even when long letters are available as options. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See &lt;code&gt;skip_front_duplication&lt;/code&gt; and &lt;code&gt;skip_back_duplication&lt;/code&gt; at the document.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modal selection is made possible by adopting an event-driven architecture instead of waiting for a key with a while loop.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Cons&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Slower processing speed for larger number of runtime process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;!-- &lt;div align=&#34;center&#34;&gt; --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package manager&lt;/th&gt; &#xA;   &lt;th&gt;Snippet&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- stable version&#xA;use {&#34;Cassin01/wf.nvim&#34;, tag = &#34;*&#34;, config = function() require(&#34;wf&#34;).setup() end}&#xA;-- dev version&#xA;use {&#34;Cassin01/wf.nvim&#34;, config = function() require(&#34;wf&#34;).setup() end}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call plug#begin()&#xA;-- stable version&#xA;Plug &#34;Cassin01/wf.nvim&#34;, { &#34;tag&#34;: &#34;*&#34; }&#xA;-- dev version&#xA;Plug &#34;Cassin01/wf.nvim&#34;&#xA;call plug#end()&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;wf&#34;).setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.nvim&lt;/a&gt;&lt;/p&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- stable version&#xA;require(&#34;lazy&#34;).setup({{&#34;Cassin01/wf.nvim&#34;, version = &#34;*&#34;, config = function() require(&#34;wf&#34;).setup() end}})&#xA;-- dev version&#xA;require(&#34;lazy&#34;).setup({{&#34;Cassin01/wf.nvim&#34;, config = function() require(&#34;wf&#34;).setup() end}})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- &lt;/div&gt; --&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;!-- There is no required dependencies on `wf.nvim` but --&gt; &#xA;&lt;p&gt;Neovim &amp;gt;= 0.9.0 and &lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; is recommended for enjoying all the features of &lt;code&gt;wf.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- &lt;details&gt; --&gt; &#xA;&lt;summary&gt;Minimal Setup&lt;/summary&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local which_key = require(&#34;wf.builtin.which_key&#34;)&#xA;local register = require(&#34;wf.builtin.register&#34;)&#xA;local bookmark = require(&#34;wf.builtin.bookmark&#34;)&#xA;local buffer = require(&#34;wf.builtin.buffer&#34;)&#xA;local mark = require(&#34;wf.builtin.mark&#34;)&#xA;&#xA;-- Register&#xA;vim.keymap.set(&#xA;  &#34;n&#34;,&#xA;  &#34;&amp;lt;Space&amp;gt;wr&#34;,&#xA;  -- register(opts?: table) -&amp;gt; function&#xA;  -- opts?: option&#xA;  register(),&#xA;  { noremap = true, silent = true, desc = &#34;[wf.nvim] register&#34; }&#xA;)&#xA;&#xA;-- Bookmark&#xA;vim.keymap.set(&#xA;  &#34;n&#34;,&#xA;  &#34;&amp;lt;Space&amp;gt;wbo&#34;,&#xA;  -- bookmark(bookmark_dirs: table, opts?: table) -&amp;gt; function&#xA;  -- bookmark_dirs: directory or file paths&#xA;  -- opts?: option&#xA;  bookmark({&#xA;    nvim = &#34;~/.config/nvim&#34;,&#xA;    zsh = &#34;~/.zshrc&#34;,&#xA;  }),&#xA;  { noremap = true, silent = true, desc = &#34;[wf.nvim] bookmark&#34; }&#xA;)&#xA;&#xA;-- Buffer&#xA;vim.keymap.set(&#xA;  &#34;n&#34;,&#xA;  &#34;&amp;lt;Space&amp;gt;wbu&#34;,&#xA;  -- buffer(opts?: table) -&amp;gt; function&#xA;  -- opts?: option&#xA;  buffer(),&#xA;  {noremap = true, silent = true, desc = &#34;[wf.nvim] buffer&#34;}&#xA;)&#xA;&#xA;-- Mark&#xA;vim.keymap.set(&#xA;  &#34;n&#34;,&#xA;  &#34;&#39;&#34;,&#xA;  -- mark(opts?: table) -&amp;gt; function&#xA;  -- opts?: option&#xA;  mark(),&#xA;  { nowait = true, noremap = true, silent = true, desc = &#34;[wf.nvim] mark&#34;}&#xA;)&#xA;&#xA;-- Which Key&#xA;vim.keymap.set(&#xA;  &#34;n&#34;,&#xA;  &#34;&amp;lt;Leader&amp;gt;&#34;,&#xA;   -- mark(opts?: table) -&amp;gt; function&#xA;   -- opts?: option&#xA;  which_key({ text_insert_in_advance = &#34;&amp;lt;Leader&amp;gt;&#34; }),&#xA;  { noremap = true, silent = true, desc = &#34;[wf.nvim] which-key /&#34;, }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are concerned about the lag between pressing the shortcut that activates &lt;code&gt;which-key&lt;/code&gt; and the actual activation of &lt;code&gt;which-key&lt;/code&gt;, you can put the &lt;code&gt;nowait&lt;/code&gt; option in the keymap. (Not recommended.)&lt;/p&gt; &#xA;&lt;p&gt;However, in order for the key to be invoked nowait, the shortcut to invoke &lt;code&gt;which-key&lt;/code&gt; must be at the end of the &lt;code&gt;init.lua&lt;/code&gt; file. Below is an example of using &lt;code&gt;timeout&lt;/code&gt; to delay the registration of the shortcut that activates &lt;code&gt;which-key&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- set keymaps with `nowait`&#xA;-- see `:h :map-nowait`&#xA;&#xA;-- a timer to call a callback after a specified number of milliseconds.&#xA;local function timeout(ms, callback)&#xA;  local uv = vim.loop&#xA;  local timer = uv.new_timer()&#xA;  local _callback = vim.schedule_wrap(function()&#xA;    uv.timer_stop(timer)&#xA;    uv.close(timer)&#xA;    callback()&#xA;  end)&#xA;  uv.timer_start(timer, ms, 0, _callback)&#xA;end&#xA;timeout(100, function()&#xA;  vim.keymap.set(&#xA;    &#34;n&#34;,&#xA;    &#34;&amp;lt;Leader&amp;gt;&#34;,&#xA;    which_key({ text_insert_in_advance = &#34;&amp;lt;Leader&amp;gt;&#34; }),&#xA;    { noremap = true, silent = true, desc = &#34;[wf.nvim] which-key /&#34;, }&#xA;  )&#xA;end)&#xA;vim.api.nvim_create_autocmd({&#34;BufEnter&#34;, &#34;BufAdd&#34;}, {&#xA;  group = vim.api.nvim_create_augroup(&#34;my_wf&#34;, { clear = true }),&#xA;  callback = function()&#xA;    timeout(100, function()&#xA;      vim.keymap.set(&#xA;        &#34;n&#34;,&#xA;        &#34;&amp;lt;Leader&amp;gt;&#34;,&#xA;        which_key({ text_insert_in_advance = &#34;&amp;lt;Leader&amp;gt;&#34; }),&#xA;        { noremap = true, silent = true, desc = &#34;[wf.nvim] which-key /&#34;, buffer = true })&#xA;    end)&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &lt;/details&gt; --&gt; &#xA;&lt;!-- &gt; Describe how to use the plugin the simplest way --&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;!-- &gt; The configuration list sometimes become cumbersome, making it folded by default reduce the noise of the README file. --&gt; &#xA;&lt;!-- &lt;details&gt; --&gt; &#xA;&lt;!-- &lt;summary&gt;Click to unfold the full list of options with their default values&lt;/summary&gt; --&gt; &#xA;&lt;!-- &gt; **Note**: The options are also available in Neovim by calling `:h wf.options` --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;wf&#34;).setup({&#xA;  theme = &#34;default&#34;,&#xA;    -- you can copy the full list from lua/wf/setup/init.lua&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- &lt;/details&gt; --&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Key Bindings Assignments&lt;/h2&gt; &#xA;&lt;p&gt;The default key assignments are shown in the table below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal, Insert&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;c-t&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle the which-key with the fuzzy-find&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close wf.nvim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;c-c&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close wf.nvim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;How to use as a picker&lt;/h2&gt; &#xA;&lt;p&gt;The core concept of &lt;code&gt;wf.nvim&lt;/code&gt; is to extend the functionality of which-key so that it can be used as a picker rather than just a shortcut completion.&lt;/p&gt; &#xA;&lt;p&gt;To realize this concept, &lt;code&gt;wf.nvim&lt;/code&gt; can be used as a picker to select an item from arbitrary items like &lt;code&gt;vim.ui.select({items}, {opts}, {on_choice})&lt;/code&gt;, i.e. &lt;code&gt;wf.select({items}, {opts}, {on_choice})&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;wf&#34;).select({happy = &#34;üòä&#34;, sad = &#34;üò•&#34;}, {&#xA;        title = &#34;Select your feelings:&#34;, behavior = {&#xA;            skip_front_duplication = true,&#xA;            skip_back_duplication = true,&#xA;        },&#xA;    }, function(text, key)&#xA;        -- You feel happyüòä.&#xA;        vim.notify(&#34;You feel &#34; .. key .. text .. &#34;.&#34;)&#xA;    end)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find guides for the plugin on &lt;a href=&#34;https://github.com/Cassin01/wf.nvim/raw/main/doc/wf.txt&#34;&gt;the document&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Holding specific key pattern on which_key&lt;/h3&gt; &#xA;&lt;!-- It may be a bit arrogant to call it tips, but here is my init.lua setup. --&gt; &#xA;&lt;p&gt;Below is an example of using &lt;code&gt;keys_group_dict&lt;/code&gt;. &lt;code&gt;keys_group_dict&lt;/code&gt; is a list of prefix patterns. Keys with that pattern can be grouped together when displayed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- setup table for prefixes&#xA;---------------------------------------&#xA;if _G.__key_prefixes == nil then&#xA;  _G.__key_prefixes = {&#xA;    n = {},&#xA;    i = {},&#xA;  }&#xA;end&#xA;&#xA;&#xA;-- utility function for setting keymaps&#xA;---------------------------------------&#xA;local function nmaps(prefix, desc, tbl)&#xA;  local sign = &#34;[&#34;..name..&#34;]&#34;&#xA;  table.insert(_G.__key_prefixes[&#34;n&#34;], prefix, sign)&#xA;  local set = function(key, cmd, desc, opt)&#xA;    local _opt = opt or {}&#xA;    _opt[&#34;desc&#34;] = desc..sign&#xA;    _opt[&#34;noremap&#34;] = true&#xA;    vim.keymap.set(&#34;n&#34;, prefix .. key, cmd, _opt)&#xA;  end&#xA;  for _, v in ipairs(tbl)  do&#xA;    set(unpack tbl)&#xA;  end&#xA;end&#xA;&#xA;&#xA;-- set keymap for each plugins&#xA;---------------------------------------&#xA;-- lambdalisue/fern.vim&#xA;nmaps(&#34;&amp;lt;space&amp;gt;n&#34;, &#34;fern&#34;,&#xA;{{&#34;p&#34;, &#34;&amp;lt;cmd&amp;gt;Fern . -drawer -toggle&amp;lt;cr&amp;gt;&#34;, &#34;open fern on a current working directory&#34;},&#xA; {&#34;d&#34;, &#34;&amp;lt;cmd&amp;gt;Fern %:h -drawer -toggle&amp;lt;cr&amp;gt;&#34;, &#34;open fern on a parent directory of a current buffer&#34;}})&#xA;&#xA;-- nvim-telescope/telescope.nvim&#xA;nmaps(&#34;&amp;lt;space&amp;gt;t&#34;, &#34;telescope&#34;&#xA;{{&#34;f&#34;, &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;find files&#34;},&#xA; {&#34;g&#34;, &#34;&amp;lt;cmd&amp;gt;Telescope live_grep&amp;lt;cr&amp;gt;&#34;, &#34;live grep&#34;},&#xA; {&#34;b&#34;, &#34;&amp;lt;cmd&amp;gt;Telescope buffers&amp;lt;cr&amp;gt;&#34;, &#34;buffers&#34;},&#xA; {&#34;h&#34;, &#34;&amp;lt;cmd&amp;gt;Telescope help_tags&amp;lt;cr&amp;gt;&#34;, &#34;help tags&#34;},&#xA; {&#34;t&#34;, &#34;&amp;lt;cmd&amp;gt;Telescope&amp;lt;cr&amp;gt;&#34;, &#34;telescope&#34;},&#xA; {&#34;o&#34;, &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;old files&#34;},&#xA; {&#34;r&#34;, &#34;&amp;lt;cmd&amp;gt;Telescope file_browser&amp;lt;cr&amp;gt;&#34;, &#34;file_browser&#34;}})&#xA;&#xA;&#xA;-- set keymap for calling which-key&#xA;---------------------------------------&#xA;vim.set.keymap(&#34;n&#34;, &#34;&amp;lt;Space&amp;gt;&#34;,&#xA;which_key({text_insert_in_advance=&#34;&amp;lt;space&amp;gt;&#34;, key_group_dict=_G.__key_prefixes[&#34;n&#34;]}),&#xA;{noremap = true, silent = tre, desc = &#34;which-key space&#34;, nowait = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- CONTRIBUTING --&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag &#34;enhancement&#34;. Don&#39;t forget to give the project a star! Thanks again!&lt;/p&gt; &#xA;&lt;p&gt;Development flow basically follows &lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;git-flow&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Generate document, format codes and test codes (&lt;code&gt;make push&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- LICENSE --&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See &lt;code&gt;LICENSE.txt&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;h3&gt;CI, README&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shortcuts/neovim-plugin-boilerplate&#34;&gt;shortcuts/neovim-plugin-boilerplate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;echasnovski/mini.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/othneildrew/Best-README-Template&#34;&gt;othneildrew/Best-README-Template&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Picker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;folke/which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;liuchengxu/vim-which-key&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Which-key&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;justbuf/emacs-which-key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/helix-editor/helix&#34;&gt;helix-editor/helix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;syl20bnr/spacemacs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Theme&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NvChad/NvChad&#34;&gt;NvChad/NvChad&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;buffer-switcher&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matbme/JABS.nvim&#34;&gt;matbme/JABS.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- &gt; If alternatives of your plugin exist, you can provide some pros/cons of using yours over the others. --&gt; &#xA;&lt;p align=&#34;right&#34;&gt;(&lt;a href=&#34;https://raw.githubusercontent.com/Cassin01/wf.nvim/main/#readme-top&#34;&gt;back to top&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;!-- MARKDOWN LNIKS &amp; IMAGES --&gt;</summary>
  </entry>
</feed>