<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-05T01:34:26Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>laytan/cloak.nvim</title>
    <updated>2024-02-05T01:34:26Z</updated>
    <id>tag:github.com,2024-02-05:/laytan/cloak.nvim</id>
    <link href="https://github.com/laytan/cloak.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cloak allows you to overlay *&#39;s over defined patterns in defined files.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cloak.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Cloak allows you to overlay *&#39;s (or any other character) over defined patterns in defined files.&lt;/p&gt; &#xA;&lt;p&gt;It also disables &#39;cmp&#39; for the buffer(if it is installed).&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/20369598/187440609-4cfce257-a4c2-4036-8ad7-3f3bb583e994.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here is the default configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;file_pattern&lt;/code&gt; can be a string or table of strings, they should be valid autocommand patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cloak_pattern&lt;/code&gt; is a lua pattern ran over every line in the buffer, overlaying &lt;code&gt;cloak_character&lt;/code&gt; over the match, excluding the first character.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;replace&lt;/code&gt; is a pattern with which to replace the matched &lt;code&gt;cloak_pattern&lt;/code&gt; (see [https://www.lua.org/manual/5.1/manual.html#pdf-string.gsub]). If the replaced text is not long enough the rest gets filled up with the cloak_character. This is useful to only hide certain keys but still show the name.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;cloak&#39;).setup({&#xA;  enabled = true,&#xA;  cloak_character = &#39;*&#39;,&#xA;  -- The applied highlight group (colors) on the cloaking, see `:h highlight`.&#xA;  highlight_group = &#39;Comment&#39;,&#xA;  -- Applies the length of the replacement characters for all matched&#xA;  -- patterns, defaults to the length of the matched pattern.&#xA;  cloak_length = nil, -- Provide a number if you want to hide the true length of the value.&#xA;  -- Whether it should try every pattern to find the best fit or stop after the first.&#xA;  try_all_patterns = true,&#xA;  patterns = {&#xA;    {&#xA;      -- Match any file starting with &#39;.env&#39;.&#xA;      -- This can be a table to match multiple file patterns.&#xA;      file_pattern = &#39;.env*&#39;,&#xA;      -- Match an equals sign and any character after it.&#xA;      -- This can also be a table of patterns to cloak,&#xA;      -- example: cloak_pattern = { &#39;:.+&#39;, &#39;-.+&#39; } for yaml files.&#xA;      cloak_pattern = &#39;=.+&#39;,&#xA;      -- A function, table or string to generate the replacement.&#xA;      -- The actual replacement will contain the &#39;cloak_character&#39;&#xA;      -- where it doesn&#39;t cover the original text.&#xA;      -- If left empty the legacy behavior of keeping the first character is retained.&#xA;      replace = nil,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;cloak_pattern&lt;/code&gt; can also be a table of &lt;code&gt;inner_pattern&lt;/code&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;patterns = {&#xA;  file_pattern = &#39;.env*&#39;,&#xA;  cloak_pattern = {&#xA;    &#39;(a=).+&#39;,&#xA;    { &#39;(b=).+&#39; },&#xA;    { &#39;(c=).+&#39;, replace = &#39;[inner] %1&#39; }&#xA;    -- The outer `replace` could also be specified here instead&#xA;  },&#xA;  replace = &#39;[outer] %1&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would result in a cloaking of text like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;[outer] a=**&#xA;b***********&#xA;[inner] c=**&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The original file was:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;a=1234567890&#xA;b=1234567890&#xA;c=1234567890&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The plugin automatically activates when a file matched by the patterns is opened.&lt;/p&gt; &#xA;&lt;p&gt;You do have to call the &lt;code&gt;setup()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:CloakDisable&lt;/code&gt;, &lt;code&gt;:CloakEnable&lt;/code&gt; and &lt;code&gt;:CloakToggle&lt;/code&gt; are also available to change cloaking state.&lt;/p&gt;</summary>
  </entry>
</feed>