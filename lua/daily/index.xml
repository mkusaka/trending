<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-03T01:39:27Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kelly-lin/ranger.nvim</title>
    <updated>2023-05-03T01:39:27Z</updated>
    <id>tag:github.com,2023-05-03:/kelly-lin/ranger.nvim</id>
    <link href="https://github.com/kelly-lin/ranger.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ranger plugin for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ranger.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ranger/ranger&#34;&gt;Ranger&lt;/a&gt; integration plugin for neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/19686599/235407677-04066885-cb8a-43e1-9cee-479c8d4187e7.mov&#34;&gt;https://user-images.githubusercontent.com/19686599/235407677-04066885-cb8a-43e1-9cee-479c8d4187e7.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ranger/ranger&#34;&gt;Ranger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install using your package manager. This plugin &lt;em&gt;does not set&lt;/em&gt; Neovim keymaps by default, you will need to set your own keymaps. See below &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy&lt;/a&gt; configuration for example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;kelly-lin/ranger.nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;ranger-nvim&#34;).setup({ replace_netrw = true })&#xA;    vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;ef&#34;, &#34;&#34;, {&#xA;      noremap = true,&#xA;      callback = function()&#xA;        require(&#34;ranger-nvim&#34;).open(true)&#xA;      end,&#xA;    })&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can configure &lt;code&gt;ranger.nvim&lt;/code&gt; by invoking &lt;code&gt;ranger_nvim.setup()&lt;/code&gt; with an options &lt;code&gt;table&lt;/code&gt; described below. Note: &lt;code&gt;ranger_nvim.setup()&lt;/code&gt; is &lt;em&gt;optional&lt;/em&gt;, if you do not invoke &lt;code&gt;ranger_nvim.setup()&lt;/code&gt; &lt;code&gt;ranger.nvim&lt;/code&gt; will use the default values.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;replace_netrw&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Replace &lt;code&gt;netrw&lt;/code&gt; with &lt;code&gt;ranger&lt;/code&gt; when neovim is launched with a directory argument.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keybinds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Keybind = table&amp;lt;string, OPEN_MODE&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/kelly-lin/ranger.nvim/main/#ranger-keybindings&#34;&gt;ranger keybindings&lt;/a&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;Key bindings set in &lt;code&gt;ranger&lt;/code&gt; to control how files are opened in neovim. See &lt;a href=&#34;https://raw.githubusercontent.com/kelly-lin/ranger.nvim/main/#ranger-keybindings&#34;&gt;ranger keybindings&lt;/a&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See below code snippet for example configuring &lt;code&gt;ranger.nvim&lt;/code&gt; with the default values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ranger_nvim = require(&#34;ranger-nvim&#34;)&#xA;ranger_nvim.setup({&#xA;  replace_netrw = false,&#xA;  keybinds = {&#xA;    [&#34;ov&#34;] = ranger_nvim.OPEN_MODE.vsplit,&#xA;    [&#34;oh&#34;] = ranger_nvim.OPEN_MODE.split,&#xA;    [&#34;ot&#34;] = ranger_nvim.OPEN_MODE.tabedit,&#xA;    [&#34;or&#34;] = ranger_nvim.OPEN_MODE.rifle,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;open(select_current_file: boolean)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Opens &lt;code&gt;ranger&lt;/code&gt; in a fullscreen floating window.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;select_current_file&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;ranger&lt;/code&gt; will focus on the file in the current buffer on load.&lt;/p&gt; &#xA;&lt;p&gt;You can control how to open these files in Neovim by using the &lt;a href=&#34;https://raw.githubusercontent.com/kelly-lin/ranger.nvim/main/#ranger-keybindings&#34;&gt;ranger keybindings&lt;/a&gt; that &lt;code&gt;ranger.nvim&lt;/code&gt; sets.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;enum OPEN_MODE&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Enum to configure keybindings for open modes.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variant&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;vsplit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open files in vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;split&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open files in horizontal split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tabedit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open files in tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;rifle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open files with rifle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Ranger Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ranger.nvim&lt;/code&gt; sets &lt;code&gt;ranger&lt;/code&gt; keybindings in order to control how selected files are opened in neovim. You can override the keybindings using &lt;code&gt;ranger_nvim.setup()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See below table for default keybindings.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: the keybinding string is in ranger keybinding syntax and not vim syntax (they are bindings for ranger)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Keybinding&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; (when selected on file)&lt;/td&gt; &#xA;   &lt;td&gt;Open files in current window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ov&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open files in vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;oh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open files in horizontal split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ot&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open files in tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;or&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open files with rifle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Overriding Keybindings&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ranger-nvim&lt;/code&gt; module provides an &lt;code&gt;OPEN_MODE&lt;/code&gt; enum which is used to control the open modes. To override keybinds, create an entry in the &lt;code&gt;keybinds&lt;/code&gt; table with a &lt;code&gt;string&lt;/code&gt; key in &lt;strong&gt;ranger&lt;/strong&gt; keybinding syntax (the same syntax you would use in your &lt;code&gt;rc.conf&lt;/code&gt;) and assign it a value of an &lt;code&gt;OPEN_MODE&lt;/code&gt; variant.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ranger_nvim = require(&#34;ranger-nvim&#34;)&#xA;ranger_nvim.setup({&#xA;  keybinds = {&#xA;    [&#34;ov&#34;] = ranger_nvim.OPEN_MODE.vsplit,&#xA;    [&#34;oh&#34;] = ranger_nvim.OPEN_MODE.split,&#xA;    [&#34;ot&#34;] = ranger_nvim.OPEN_MODE.tabedit,&#xA;    [&#34;or&#34;] = ranger_nvim.OPEN_MODE.rifle,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;All feature/pull requests are welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rafamadriz/friendly-snippets</title>
    <updated>2023-05-03T01:39:27Z</updated>
    <id>tag:github.com,2023-05-03:/rafamadriz/friendly-snippets</id>
    <link href="https://github.com/rafamadriz/friendly-snippets" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Set of preconfigured snippets for different languages.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Friendly Snippets&lt;/h1&gt; &#xA;&lt;p&gt;Snippets collection for a set of different programming languages.&lt;/p&gt; &#xA;&lt;p&gt;The only goal is to have one community driven repository for all kinds of snippets in all programming languages, this way you can have it all in one place.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use your plugin manager of choice, e.g.&lt;/p&gt; &#xA;&lt;h3&gt;With Lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;rafamadriz/friendly-snippets&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: If you&#39;re using LuaSnip make sure to use &lt;code&gt;require(&#34;luasnip.loaders.from_vscode&#34;).load()&lt;/code&gt; to load snippets. If you want to use &lt;code&gt;lazy_load()&lt;/code&gt;, friendly-snippets will need to be added as a dependencie for LuaSnip like so:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;L3MON4D3/LuaSnip&#34;,&#xA;  dependencies = { &#34;rafamadriz/friendly-snippets&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For more info see &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets/issues/262&#34;&gt;#262&lt;/a&gt; and &lt;a href=&#34;https://github.com/folke/lazy.nvim/issues/266&#34;&gt;folke/lazy.nvim#266&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;With Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;rafamadriz/friendly-snippets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;rafamadriz/friendly-snippets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With coc.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:CocInstall https://github.com/rafamadriz/friendly-snippets@main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This collection of snippets should work with any snippet engine that supports loading vscode snippets. Like for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/vim-vsnip&#34;&gt;vim-vsnip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc-snippets&#34;&gt;coc-snippets&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Add snippets from a framework to a filetype.&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is handled by your snippet engine and has nothing to do with this snippets collection&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There&#39;s extra snippets included in this repo but they are not added by default, since it would be irrelevant for people not using those frameworks. See &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets/tree/main/snippets/frameworks&#34;&gt;&lt;code&gt;snippets/frameworks&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For example: if you want to add rails snippets to ruby.&lt;/p&gt; &#xA;&lt;p&gt;With LuaSnip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;luasnip&#39;.filetype_extend(&#34;ruby&#34;, {&#34;rails&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With vim-vsnip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;let g:vsnip_filetypes.ruby = [&#39;rails&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Excluding snippets&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This is handled by your snippet engine and has nothing to do with this snippets collection&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;With LuaSnip, see &lt;code&gt;help luasnip-loaders&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- will exclude all javascript snippets&#xA;require(&#34;luasnip.loaders.from_vscode&#34;).load {&#xA;    exclude = { &#34;javascript&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;h3&gt;HTML&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/67771985/131255337-d53f3408-b60d-44a2-93ba-9a3240a7436e.gif&#34; alt=&#34;HTML gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;JS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/67771985/131255342-e393165a-e4b1-401e-9084-a782b9dd3fef.gif&#34; alt=&#34;JS gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add all included snippets to the &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks to all contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=rafamadriz/friendly-snippets&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;A good portion of the snippets have been forked from the following repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/capaj/vscode-standardjs-snippets&#34;&gt;vscode-standardjs-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cstrap/python-snippets&#34;&gt;python-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kitagry/vs-snippets&#34;&gt;vs-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Wscats/html-snippets&#34;&gt;Wscats/html-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Harry-Ross/vscode-c-snippets&#34;&gt;Harry-Ross/vscode-c-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edheltzel/vscode-jekyll-snippets&#34;&gt;vscode-jekyll-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/krvajal/vscode-fortran-support&#34;&gt;vscode-fortran-support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/spgennard/vscode_cobol&#34;&gt;vscode_cobol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JeffersonQin/VSCode-LaTeX-Snippets&#34;&gt;VSCode-LaTeX-Snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dsznajder/vscode-react-javascript-snippets&#34;&gt;vscode-react-javascript-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/honza/vim-snippets/raw/master/snippets/verilog.snippets&#34;&gt;honza/vim-snippets - Verilog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Relm4/vscode-relm4-snippets&#34;&gt;vscode-relm4-snippets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And more...&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>