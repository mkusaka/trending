<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-05T01:31:41Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mogenson/PaperWM.spoon</title>
    <updated>2024-05-05T01:31:41Z</updated>
    <id>tag:github.com,2024-05-05:/mogenson/PaperWM.spoon</id>
    <link href="https://github.com/mogenson/PaperWM.spoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tiled scrollable window manager for MacOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PaperWM.spoon&lt;/h1&gt; &#xA;&lt;p&gt;Tiled scrollable window manager for MacOS. Inspired by &lt;a href=&#34;https://github.com/paperwm/PaperWM&#34;&gt;PaperWM&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Spoon plugin for &lt;a href=&#34;https://www.hammerspoon.org&#34;&gt;HammerSpoon&lt;/a&gt; MacOS automation app.&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/900731/147793584-f937811a-20aa-4282-baf5-035e5ddc12ea.mp4&#34;&gt;https://user-images.githubusercontent.com/900731/147793584-f937811a-20aa-4282-baf5-035e5ddc12ea.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone to Hammerspoon Spoons directory: &lt;code&gt;git clone https://github.com/mogenson/PaperWM.spoon ~/.hammerspoon/Spoons/PaperWM.spoon&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open &lt;code&gt;System Preferences&lt;/code&gt; -&amp;gt; &lt;code&gt;Mission Control&lt;/code&gt;. Uncheck &#34;Automatically rearrange Spaces based on most recent use&#34; and check &#34;Displays have separate Spaces&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;img width=&#34;780&#34; alt=&#34;Screen Shot 2022-01-07 at 14 10 11&#34; src=&#34;https://user-images.githubusercontent.com/900731/148595715-1f7a3509-1289-4d10-b64d-86b84c076b43.png&#34;&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your &lt;code&gt;~/.hammerspoon/init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;PaperWM = hs.loadSpoon(&#34;PaperWM&#34;)&#xA;PaperWM:bindHotkeys({&#xA;    -- switch to a new focused window in tiled grid&#xA;    focus_left  = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;left&#34;},&#xA;    focus_right = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;right&#34;},&#xA;    focus_up    = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;up&#34;},&#xA;    focus_down  = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;down&#34;},&#xA;&#xA;    -- move windows around in tiled grid&#xA;    swap_left  = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;left&#34;},&#xA;    swap_right = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;right&#34;},&#xA;    swap_up    = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;up&#34;},&#xA;    swap_down  = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;down&#34;},&#xA;&#xA;    -- position and resize focused window&#xA;    center_window        = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;c&#34;},&#xA;    full_width           = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;f&#34;},&#xA;    cycle_width          = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;r&#34;},&#xA;    reverse_cycle_width  = {{&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;}, &#34;r&#34;},&#xA;    cycle_height         = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;r&#34;},&#xA;    reverse_cycle_height = {{&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;r&#34;},&#xA;&#xA;    -- move focused window into / out of a column&#xA;    slurp_in = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;i&#34;},&#xA;    barf_out = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;o&#34;},&#xA;&#xA;    -- switch to a new Mission Control space&#xA;    switch_space_l = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;,&#34;},&#xA;    switch_space_r = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;.&#34;},&#xA;    switch_space_1 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;1&#34;},&#xA;    switch_space_2 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;2&#34;},&#xA;    switch_space_3 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;3&#34;},&#xA;    switch_space_4 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;4&#34;},&#xA;    switch_space_5 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;5&#34;},&#xA;    switch_space_6 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;6&#34;},&#xA;    switch_space_7 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;7&#34;},&#xA;    switch_space_8 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;8&#34;},&#xA;    switch_space_9 = {{&#34;alt&#34;, &#34;cmd&#34;}, &#34;9&#34;},&#xA;&#xA;    -- move focused window to a new space and tile&#xA;    move_window_1 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;1&#34;},&#xA;    move_window_2 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;2&#34;},&#xA;    move_window_3 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;3&#34;},&#xA;    move_window_4 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;4&#34;},&#xA;    move_window_5 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;5&#34;},&#xA;    move_window_6 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;6&#34;},&#xA;    move_window_7 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;7&#34;},&#xA;    move_window_8 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;8&#34;},&#xA;    move_window_9 = {{&#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;9&#34;}&#xA;})&#xA;PaperWM:start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feel free to customize hotkeys or use &lt;code&gt;PaperWM:bindHotkeys(PaperWM.default_hotkeys)&lt;/code&gt; for defaults. PaperWM actions are also available for manual keybinding via the &lt;code&gt;PaperWM.actions&lt;/code&gt; table; for example, the following would enable navigation by either arrow keys or vim-style h/j/k/l directions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;PaperWM = hs.loadSpoon(&#34;PaperWM&#34;)&#xA;PaperWM:bindHotkeys(PaperWM.default_hotkeys)&#xA;&#xA;hs.hotkey.bind({&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;}, &#34;h&#34;, PaperWM.actions.focus_left)&#xA;hs.hotkey.bind({&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;}, &#34;j&#34;, PaperWM.actions.focus_down)&#xA;hs.hotkey.bind({&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;}, &#34;k&#34;, PaperWM.actions.focus_up)&#xA;hs.hotkey.bind({&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;}, &#34;l&#34;, PaperWM.actions.focus_right)&#xA;&#xA;hs.hotkey.bind({&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;h&#34;, PaperWM.actions.swap_left)&#xA;hs.hotkey.bind({&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;j&#34;, PaperWM.actions.swap_down)&#xA;hs.hotkey.bind({&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;k&#34;, PaperWM.actions.swap_up)&#xA;hs.hotkey.bind({&#34;ctrl&#34;, &#34;alt&#34;, &#34;cmd&#34;, &#34;shift&#34;}, &#34;l&#34;, PaperWM.actions.swap_right)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;PaperWM:start()&lt;/code&gt; will begin automatically tiling new and existing windows. &lt;code&gt;PaperWM:stop()&lt;/code&gt; will release control over windows.&lt;/p&gt; &#xA;&lt;p&gt;Set &lt;code&gt;PaperWM.window_gap&lt;/code&gt; to the number of pixels to space between windows and the top and bottom screen edges.&lt;/p&gt; &#xA;&lt;p&gt;Configure one or many &lt;code&gt;PaperWM.window_filter:rejectApp(&#34;appName&#34;)&lt;/code&gt; to ignore specific applications. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;PaperWM.window_filter:rejectApp(&#34;iStat Menus Status&#34;)&#xA;PaperWM.window_filter:rejectApp(&#34;Finder&#34;)&#xA;PaperWM:start() -- restart for new window filter to take effect&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set &lt;code&gt;PaperWM.window_ratios&lt;/code&gt; to the ratios to cycle window widths and heights through. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;PaperWM.window_ratios = { 0.23607, 0.38195, 0.61804 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;MacOS does not allow a window to be moved fully off-screen. Windows that would be tiled off-screen are placed in a margin on the left and right edge of the screen. They are still visible and clickable.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s difficult to detect when a window is dragged from one space or screen to another. Use the &lt;code&gt;move_window_N&lt;/code&gt; commands to move windows between spaces and screens.&lt;/p&gt; &#xA;&lt;p&gt;Arrange screens vertically to prevent windows from bleeding into other screens.&lt;/p&gt; &#xA;&lt;img width=&#34;780&#34; alt=&#34;Screen Shot 2022-01-07 at 14 18 27&#34; src=&#34;https://user-images.githubusercontent.com/900731/148595785-546f9086-9add-4731-8477-233b202378f4.png&#34;&gt; &#xA;&lt;h2&gt;Add-ons&lt;/h2&gt; &#xA;&lt;p&gt;The following Spoons compliment PaperWM.spoon nicely.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mogenson/ActiveSpace.Spoon&#34;&gt;ActiveSpace.spoon&lt;/a&gt; Show active and layout of Mission Control spaces in the menu bar.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mogenson/Swipe.spoon&#34;&gt;Swipe.spoon&lt;/a&gt; Perform actions when trackpad swipe gestures are recognized. Here&#39;s an example config to change PaperWM.spoon focused window:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- focus adjacent window with 3 finger swipe&#xA;local current_id, threshold&#xA;Swipe = hs.loadSpoon(&#34;Swipe&#34;)&#xA;Swipe:start(3, function(direction, distance, id)&#xA;    if id == current_id then&#xA;        if distance &amp;gt; threshold then&#xA;            threshold = math.huge -- trigger once per swipe&#xA;&#xA;            -- use &#34;natural&#34; scrolling&#xA;            if direction == &#34;left&#34; then&#xA;                PaperWM.actions.focus_right()&#xA;            elseif direction == &#34;right&#34; then&#xA;                PaperWM.actions.focus_left()&#xA;            elseif direction == &#34;up&#34; then&#xA;                PaperWM.actions.focus_down()&#xA;            elseif direction == &#34;down&#34; then&#xA;                PaperWM.actions.focus_up()&#xA;            end&#xA;        end&#xA;    else&#xA;        current_id = id&#xA;        threshold = 0.2 -- swipe distance &amp;gt; 20% of trackpad size&#xA;    end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Here are a few preferences:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Global variables are &lt;code&gt;CamelCase&lt;/code&gt; (eg. &lt;code&gt;PaperWM&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Local variables are &lt;code&gt;snake_case&lt;/code&gt; (eg. &lt;code&gt;local focused_window&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Function names are &lt;code&gt;lowerCamelCase&lt;/code&gt; (eg. &lt;code&gt;function windowEventHandler()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;&amp;lt;const&amp;gt;&lt;/code&gt; where possible&lt;/li&gt; &#xA; &lt;li&gt;Create a local copy when deeply nested members are used often (eg. &lt;code&gt;local Watcher &amp;lt;const&amp;gt; = hs.uielement.watcher&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Code format checking and linting is provided by &lt;a href=&#34;https://github.com/LuaLS/lua-language-server&#34;&gt;lua-language-server&lt;/a&gt; for commits and pull requests. Run &lt;code&gt;lua-language-server --check=init.lua&lt;/code&gt; locally before commiting.&lt;/p&gt;</summary>
  </entry>
</feed>