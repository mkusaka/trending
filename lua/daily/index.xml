<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-22T01:32:31Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>aaronik/treewalker.nvim</title>
    <updated>2025-03-22T01:32:31Z</updated>
    <id>tag:github.com,2025-03-22:/aaronik/treewalker.nvim</id>
    <link href="https://github.com/aaronik/treewalker.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim plugin for moving around your code in a syntax tree aware manner&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Treewalker.nvim&lt;br&gt;&lt;br&gt;ðŸŒ³ðŸŒ²ðŸŒ´ðŸŒ²ðŸŒ´ðŸŒ³&lt;/h1&gt; &#xA; &lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/aaronik/treewalker.nvim/main/#Installation&#34;&gt;Installation&lt;/a&gt; Â· &lt;a href=&#34;https://raw.githubusercontent.com/aaronik/treewalker.nvim/main/#Mapping&#34;&gt;Mapping&lt;/a&gt; &lt;/h4&gt; &#xA; &lt;a href=&#34;https://neovim.io/&#34;&gt; &lt;img alt=&#34;Neovim&#34; style=&#34;height: 20px;&#34; src=&#34;https://img.shields.io/badge/NeoVim-%2357A143.svg?&amp;amp;style=for-the-badge&amp;amp;logo=neovim&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &#xA; &lt;img alt=&#34;100% Lua&#34; src=&#34;https://img.shields.io/badge/100%25_lua-purple&#34; height=&#34;20px&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/aaronik/treewalker.nvim/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/issues/aaronik/treewalker.nvim/bug?label=bugs&#34; alt=&#34;GitHub issues by-label&#34;&gt; &#xA; &lt;img src=&#34;https://img.shields.io/github/issues-pr/aaronik/treewalker.nvim&#34; alt=&#34;GitHub Pull Requests&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/user-attachments/assets/4d23af49-bd94-412a-bc8c-d546df6775df&#34; alt=&#34;A fast paced demo of Treewalker.nvim&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h2&gt;Move around your code in a syntax tree aware manner.&lt;/h2&gt; &#xA; &lt;p&gt; Treewalker uses neovim&#39;s native &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;Treesitter&lt;/a&gt; under the hood for syntax tree awareness. Design goals include stability, ergonomics, and simplicity. &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Movement&lt;/h2&gt; &#xA;&lt;p&gt;The movement commands move you through your code in an intuitive way, skipping nodes that don&#39;t help you move quickly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;:Treewalker Up&lt;/code&gt;&lt;/strong&gt; - Moves up to the previous neighbor node&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;:Treewalker Down&lt;/code&gt;&lt;/strong&gt; - Moves down to the next neighbor node&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;:Treewalker Left&lt;/code&gt;&lt;/strong&gt; - Moves to the first ancestor node that&#39;s on a different line from the current node&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;:Treewalker Right&lt;/code&gt;&lt;/strong&gt; - Moves to the next node down that&#39;s indented further than the current node&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All movement commands add to the &lt;a href=&#34;https://neovim.io/doc/user/motion.html#jumplist&#34;&gt;&lt;code&gt;jumplist&lt;/code&gt;&lt;/a&gt;, so if you use a movement command and then feel lost, you always have &lt;code&gt;Ctrl-o&lt;/code&gt; available to bring you back to where you last were.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Swapping&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Swap{Up,Down}&lt;/code&gt; operate on a linewise basis, and &lt;strong&gt;bring along their comments, decorators, and annotations&lt;/strong&gt;. These are meant for swapping declarations and definitions - things that take up whole lines.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Swap{Left,Right}&lt;/code&gt; are meant for swapping function arguments, enum members, list elements, etc. Things that are many per line. In some cases these will operate on the same nodes as Up/Down, but won&#39;t take the accoutrements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;:Treewalker SwapUp&lt;/code&gt;&lt;/strong&gt; - Swaps the highest node on the line upwards in the document&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;:Treewalker SwapDown&lt;/code&gt;&lt;/strong&gt; - Swaps the biggest node on the line downward in the document&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;:Treewalker SwapLeft&lt;/code&gt;&lt;/strong&gt; - Swap the node under the cursor with its previous neighbor&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;:Treewalker SwapRight&lt;/code&gt;&lt;/strong&gt; - Swap the node under the cursor with its next neighbor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;More Examples&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Typing out the Move commands manually&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/aaronik/treewalker.nvim/main/static/slow_move_demo.gif&#34; alt=&#34;A demo of moving around some code slowly typing out each Treewalker move command&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Typing out the SwapUp/SwapDown commands manually&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/aaronik/treewalker.nvim/main/static/slow_swap_demo.gif&#34; alt=&#34;A demo of swapping code slowly using Treewalker swap commands&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;aaronik/treewalker.nvim&#39;,&#xA;&#xA;  -- The following options are the defaults.&#xA;  -- Treewalker aims for sane defaults, so these are each individually optional,&#xA;  -- and setup() does not need to be called, so the whole opts block is optional as well.&#xA;  opts = {&#xA;    -- Whether to briefly highlight the node after jumping to it&#xA;    highlight = true,&#xA;&#xA;    -- How long should above highlight last (in ms)&#xA;    highlight_duration = 250,&#xA;&#xA;    -- The color of the above highlight. Must be a valid vim highlight group.&#xA;    -- (see :h highlight-group for options)&#xA;    highlight_group = &#39;CursorLine&#39;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;aaronik/treewalker.nvim&#39;,&#xA;&#xA;  -- The setup function is optional, defaults are meant to be sane&#xA;  -- and setup does not need to be called&#xA;  setup = function()&#xA;      require(&#39;treewalker&#39;).setup({&#xA;        -- Whether to briefly highlight the node after jumping to it&#xA;        highlight = true,&#xA;&#xA;        -- How long should above highlight last (in ms)&#xA;        highlight_duration = 250,&#xA;&#xA;        -- The color of the above highlight. Must be a valid vim highlight group.&#xA;        -- (see :h highlight-group for options)&#xA;        highlight_group = &#39;CursorLine&#39;,&#xA;      })&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;Vim-plug&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;Plug &#39;aaronik/treewalker.nvim&#39;&#xA;&#xA;&#34; This line is optional&#xA;:lua require(&#39;treewalker&#39;).setup({ highlight = true, highlight_duration = 250, highlight_group = &#39;CursorLine&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Mapping&lt;/h2&gt; &#xA;&lt;p&gt;I&#39;ve found Ctrl - h / j / k / l to be a really natural flow for this plugin, and adding Shift to that for swapping just felt so clean. So here are the mappings I use:&lt;/p&gt; &#xA;&lt;p&gt;In &lt;code&gt;init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- movement&#xA;vim.keymap.set({ &#39;n&#39;, &#39;v&#39; }, &#39;&amp;lt;C-k&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Treewalker Up&amp;lt;cr&amp;gt;&#39;, { silent = true })&#xA;vim.keymap.set({ &#39;n&#39;, &#39;v&#39; }, &#39;&amp;lt;C-j&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Treewalker Down&amp;lt;cr&amp;gt;&#39;, { silent = true })&#xA;vim.keymap.set({ &#39;n&#39;, &#39;v&#39; }, &#39;&amp;lt;C-h&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Treewalker Left&amp;lt;cr&amp;gt;&#39;, { silent = true })&#xA;vim.keymap.set({ &#39;n&#39;, &#39;v&#39; }, &#39;&amp;lt;C-l&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Treewalker Right&amp;lt;cr&amp;gt;&#39;, { silent = true })&#xA;&#xA;-- swapping&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-S-k&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Treewalker SwapUp&amp;lt;cr&amp;gt;&#39;, { silent = true })&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-S-j&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Treewalker SwapDown&amp;lt;cr&amp;gt;&#39;, { silent = true })&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-S-h&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Treewalker SwapLeft&amp;lt;cr&amp;gt;&#39;, { silent = true })&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-S-l&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Treewalker SwapRight&amp;lt;cr&amp;gt;&#39;, { silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/ziontee113/syntax-tree-surfer&#34;&gt;syntax-tree-surfer&lt;/a&gt; is publicly archived and I could not get it to work :/ &lt;code&gt;Treewalker&lt;/code&gt; has a robust test suite, makes use of the type system, has CI (automated testing), and has organized code. So the plugin should be pretty stable. I believe &lt;code&gt;Treewalker&lt;/code&gt; usage is a little bit simpler and more intuitive. &lt;code&gt;Treewalker&lt;/code&gt; is missing the visual selection swap feature that syntax-tree-surfer has, though.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-treehopper&#34;&gt;nvim-treehopper&lt;/a&gt; is similar in that it uses the AST to navigate, but it takes more of a &lt;a href=&#34;https://github.com/ggandor/leap.nvim&#34;&gt;leap&lt;/a&gt; like approach, only annotating interesting nodes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&#34;&gt;nvim-treesitter-textobjects&lt;/a&gt; can swap &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects?tab=readme-ov-file#built-in-textobjects&#34;&gt;a subset of node types&lt;/a&gt;, but misses some types (ex. rust enums). &lt;code&gt;Treewalker&lt;/code&gt; is not aware of node type names, only the structure of the AST, so left/right swaps will work mostly where you want it to. It can also move to nodes, but treats node types individually, whereas &lt;code&gt;Treewalker&lt;/code&gt; is agnostic about types and just goes to the next relevant node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter/raw/master/lua/nvim-treesitter/ts_utils.lua&#34;&gt;nvim-treesitter.ts_utils&lt;/a&gt; offers a programmatic interface for swapping nodes. It doesn&#39;t suffer from node type awareness, and works mostly the same as &lt;code&gt;Treewalker&lt;/code&gt; under the hood. Some of &lt;code&gt;Treewalker&lt;/code&gt;&#39;s left/right swapping code is inspired by &lt;code&gt;ts_utils&lt;/code&gt;. &lt;code&gt;Treewalker&lt;/code&gt; operates a little differently under the hood, picking the highest startwise coinciding node over the lowest. But mostly it does the work of finding the next relevant node and packaging it all up into a nice interface.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/drybalka/tree-climber.nvim&#34;&gt;tree-climber.nvim&lt;/a&gt; i discovered long after having made &lt;code&gt;Treewalker&lt;/code&gt;. It seems to be the most similar of all of these. It works mostly the same, but with a little bit less refinement, including getting stuck on certain nodes, and navigating to nodes that don&#39;t necessarily seem helpful to go to. In my usage, it seems like &lt;code&gt;tree-climber&lt;/code&gt; gives you more fine grained access to each individual node, whereas &lt;code&gt;Treewalker&lt;/code&gt; takes a more linewise approach which allows you to make larger movements more easily. For movement inside of a single line, &lt;code&gt;Treewalker&lt;/code&gt; doesn&#39;t help much, whereas &lt;code&gt;tree-climber&lt;/code&gt; does.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mentions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/David-Kunz/treesitter-unit&#34;&gt;treesitter-unit&lt;/a&gt; provides a textobject, along with highlighting for the current treesitter unit (as navigated to by &lt;code&gt;Treewalker&lt;/code&gt;). When combined with &lt;code&gt;Treewalker&lt;/code&gt;, it&#39;s possible to perform edits in ways analogous to Vim&#39;s builtin &lt;code&gt;{}&lt;/code&gt; motions and &lt;code&gt;p&lt;/code&gt; textobject.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>