<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-04T01:35:58Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marcopixel/monstercat-visualizer</title>
    <updated>2022-10-04T01:35:58Z</updated>
    <id>tag:github.com,2022-10-04:/marcopixel/monstercat-visualizer</id>
    <link href="https://github.com/marcopixel/monstercat-visualizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A real time audio visualizer for Rainmeter similar to the ones used in the Monstercat videos.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cu1R235.png&#34; alt=&#34;Monstercat Visualizer Screenshot&#34; title=&#34;Monstercat Visualizer Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Monstercat Visualizer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MarcoPixel/Monstercat-Visualizer/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/MarcoPixel/Monstercat-Visualizer.svg?colorB=97CA00?label=version&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarcoPixel/Monstercat-Visualizer/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/MarcoPixel/Monstercat-Visualizer/total.svg?colorB=97CA00&#34; alt=&#34;Github All Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MarcoPixel/Monstercat-Visualizer/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/MarcoPixel/Monstercat-Visualizer.svg?colorB=007EC6&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/MarcoPixel/Monstercat-Visualizer/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A real time audio visualizer for Rainmeter similar to the ones used in the Monstercat videos.&lt;/p&gt; &#xA;&lt;p&gt;Supports all major media players, including full &lt;strong&gt;Spotify&lt;/strong&gt;, &lt;strong&gt;Google Play Music Desktop Player&lt;/strong&gt; and &lt;strong&gt;Chrome/Firefox webplayer&lt;/strong&gt; support (thanks to &lt;strong&gt;&lt;a href=&#34;https://github.com/tjhrulz&#34;&gt;@tjhrulz&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://github.com/khanhas&#34;&gt;@khanhas&lt;/a&gt;&lt;/strong&gt;) for the amazing plugins used in this skin).&lt;/p&gt; &#xA;&lt;h2&gt;Minimum Requirements:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows 7 or higher.&lt;/li&gt; &#xA; &lt;li&gt;Rainmeter 4.3 Beta (r3298) or higher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Live visualization of the audio output&lt;/li&gt; &#xA; &lt;li&gt;Customizable colors and fonts&lt;/li&gt; &#xA; &lt;li&gt;Genre-based colors (AIMP, CAD, iTunes, WMP and Winamp)&lt;/li&gt; &#xA; &lt;li&gt;Cover-based colors (All supported players)&lt;/li&gt; &#xA; &lt;li&gt;Support for all major media players&lt;/li&gt; &#xA; &lt;li&gt;Full Spotify (Desktop &amp;amp; Web Player) support&lt;/li&gt; &#xA; &lt;li&gt;Full Google Play Music Desktop Player &amp;amp; Web Player support&lt;/li&gt; &#xA; &lt;li&gt;Full Youtube, Soundcloud, and other web music players&lt;/li&gt; &#xA; &lt;li&gt;Media controls &amp;amp; progress bar&lt;/li&gt; &#xA; &lt;li&gt;Settings skin for easier customization/configuration&lt;/li&gt; &#xA; &lt;li&gt;Hide skin when media player is not running&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Important notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You need at least &lt;strong&gt;Rainmeter 4.3 Beta (r3298) or higher&lt;/strong&gt; to get all features of this skin. You can find the newest version on &lt;a href=&#34;https://www.rainmeter.net/&#34;&gt;https://www.rainmeter.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;After installation you can access the settings by right-clicking the visualizer or song information and then clicking on Open Settings.&lt;/li&gt; &#xA; &lt;li&gt;Due to limitations of Rainmeter the complete audio output of your system will be shown on the visualizer. For the best experience only play music. This is something I can‚Äôt fix.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the latest version here: &lt;a href=&#34;https://github.com/MarcoPixel/Monstercat-Visualizer/releases&#34;&gt;https://github.com/MarcoPixel/Monstercat-Visualizer/releases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the skin by double-clicking the &lt;strong&gt;.rmskin&lt;/strong&gt; file and follow the steps in the installer.&lt;/li&gt; &#xA; &lt;li&gt;After finishing the setup Rainmeter will open the settings skin where you can configure and customize the skin.&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re done! üéâ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting and FAQs&lt;/h2&gt; &#xA;&lt;p&gt;You can access the frequently asked questions and our troubleshooting guide in our wiki.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/MarcoPixel/Monstercat-Visualizer/wiki&#34;&gt;Click here to open the wiki&lt;/a&gt;.&lt;/h5&gt; &#xA;&lt;h2&gt;Issues &amp;amp; feature requests&lt;/h2&gt; &#xA;&lt;p&gt;If you still have issues or a bug, please report them &lt;a href=&#34;https://github.com/MarcoPixel/Monstercat-Visualizer/issues&#34;&gt;here&lt;/a&gt;. Be sure to follow the existing template and fill out the necessary information, otherwise it will be closed without notice.&lt;/p&gt; &#xA;&lt;p&gt;You can also request new features and help them develop by joining the discussion. Just add the &lt;strong&gt;request label&lt;/strong&gt; to your issue and we will have a look!&lt;/p&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/MarcoPixel/Monstercat-Visualizer/issues&#34;&gt;Click here to get to the open issues&lt;/a&gt;.&lt;/h5&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rainmeter Skin&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://github.com/marcopixel&#34;&gt;@marcopixel&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/tjhrulz&#34;&gt;@tjhrulz&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Google Play Music Desktop Player Plugin&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://github.com/tjhrulz/GPMDP-Plugin&#34;&gt;@tjhrulz&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WebNowPlaying Plugin&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://github.com/tjhrulz/WebNowPlaying&#34;&gt;@tjhrulz&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;spicetify-cli&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://github.com/khanhas/spicetify-cli&#34;&gt;@khanhas&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SysColor&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://github.com/brianferguson/SysColor.dll&#34;&gt;@brianferguson&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Montserrat Font&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://github.com/JulietaUla/Montserrat&#34;&gt;@JulietaUla&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Media Controls Icons&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://material.io/icons/&#34;&gt;Material Icons&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Additional Icons&lt;/strong&gt; - &lt;strong&gt;&lt;a href=&#34;https://feathericons.com/&#34;&gt;Feather Icons&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;strong&gt;&lt;a href=&#34;https://github.com/undefinist&#34;&gt;@undefinist&lt;/a&gt;&lt;/strong&gt; for letting me use his factory code (made everything so much easier and cleaner) &lt;span&gt;üëç&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;strong&gt;&lt;a href=&#34;https://github.com/alatsombath&#34;&gt;@alatsombath&lt;/a&gt;&lt;/strong&gt; for letting me use his rotation and audio device picker code &lt;span&gt;üëç&lt;/span&gt;&lt;/li&gt; &#xA; &lt;li&gt;For bringing awesome music and artists to the community - &lt;strong&gt;Monstercat&lt;/strong&gt; &amp;lt;3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Disclaimer: The resources used in this skin are in no way endorsed by the respective owners. This skin is not affiliated with Monstercat and the artists.&lt;/h5&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-lint</title>
    <updated>2022-10-04T01:35:58Z</updated>
    <id>tag:github.com,2022-10-04:/mfussenegger/nvim-lint</id>
    <link href="https://github.com/mfussenegger/nvim-lint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An asynchronous linter plugin for Neovim complementary to the built-in Language Server Protocol support.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lint&lt;/h1&gt; &#xA;&lt;p&gt;An asynchronous linter plugin for Neovim (&amp;gt;= 0.6.0) complementary to the built-in Language Server Protocol support.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation &amp;amp; Goals&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;ale&lt;/a&gt; we already got an asynchronous linter, why write yet another one?&lt;/p&gt; &#xA;&lt;p&gt;Because &lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;ale&lt;/a&gt; reports diagnostics with its own home grown solution and even includes its own language server client.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-lint&lt;/code&gt; instead uses the &lt;code&gt;vim.diagnostic&lt;/code&gt; module to present diagnostics in the same way the language client built into neovim does. &lt;code&gt;nvim-lint&lt;/code&gt; is meant to fill the gaps for languages where either no language server exists, or where standalone linters provide better results than the available language server do.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim &amp;gt;= 0.6.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-lint&lt;/code&gt; is a plugin. Install it like any other Neovim plugin. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-lint&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-lint&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Configure the linters you want to run per file type. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lint&#39;).linters_by_ft = {&#xA;  markdown = {&#39;vale&#39;,}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then setup a autocmd to trigger linting. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;au BufWritePost lua require(&#39;lint&#39;).try_lint()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with Lua autocmds (requires 0.7):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd({ &#34;BufWritePost&#34; }, {&#xA;  callback = function()&#xA;    require(&#34;lint&#34;).try_lint()&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some linters require a file to be saved to disk, others support linting &lt;code&gt;stdin&lt;/code&gt; input. For such linters you could also define a more aggressive autocmd, for example on the &lt;code&gt;InsertLeave&lt;/code&gt; or &lt;code&gt;TextChanged&lt;/code&gt; events.&lt;/p&gt; &#xA;&lt;p&gt;If you want to customize how the diagnostics are displayed, read &lt;code&gt;:help vim.diagnostic.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available Linters&lt;/h2&gt; &#xA;&lt;p&gt;There is a generic linter called &lt;code&gt;compiler&lt;/code&gt; that uses the &lt;code&gt;makeprg&lt;/code&gt; and &lt;code&gt;errorformat&lt;/code&gt; options of the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;Other dedicated linters that are built-in are:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tool&lt;/th&gt; &#xA;   &lt;th&gt;Linter name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Set via &lt;code&gt;makeprg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;compiler&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.ansible.com/lint.html&#34;&gt;ansible-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ansible_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/aws-cloudformation/cfn-lint&#34;&gt;cfn-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cfn_lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://checkstyle.sourceforge.io/&#34;&gt;checkstyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;checkstyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.nongnu.org/chktex&#34;&gt;chktex&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chktex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://clang.llvm.org/extra/clang-tidy/&#34;&gt;clang-tidy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangtidy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/KDE/clazy&#34;&gt;clazy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clazy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/clj-kondo/clj-kondo&#34;&gt;clj-kondo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clj-kondo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cmake-lint/cmake-lint&#34;&gt;cmakelint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmakelint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/codespell-project/codespell&#34;&gt;codespell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;codespell&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/danmar/cppcheck/&#34;&gt;cppcheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cppcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cpplint/cpplint&#34;&gt;cpplint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpplint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rrrene/credo&#34;&gt;credo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;credo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/streetsidesoftware/cspell/tree/main/packages/cspell&#34;&gt;cspell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cspell&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/eslint/eslint&#34;&gt;ESLint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/bakpakin/Fennel&#34;&gt;fennel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fennel&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://flake8.pycqa.org/&#34;&gt;Flake8&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flake8&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/david-a-wheeler/flawfinder&#34;&gt;flawfinder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flawfinder&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://golangci-lint.run/&#34;&gt;Golangci-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;golangcilint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/google/shaderc&#34;&gt;glslc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;glslc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/microsoft/DirectXShaderCompiler&#34;&gt;DirectX Shader Compiler&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dxc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;hadolint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hadolint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ndmitchell/hlint&#34;&gt;hlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.html-tidy.org/&#34;&gt;HTML Tidy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tidy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://inko-lang.org/&#34;&gt;Inko&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;inko&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jshint.com/&#34;&gt;jshint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jshint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/zaach/jsonlint&#34;&gt;jsonlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ktlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.ctan.org/tex-archive/support/lacheck&#34;&gt;lacheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lacheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://languagetool.org/&#34;&gt;Languagetool&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;languagetool&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mpeterv/luacheck&#34;&gt;luacheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;luacheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DavidAnson/markdownlint&#34;&gt;markdownlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;markdownlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.mathworks.com/help/matlab/ref/mlint.html&#34;&gt;mlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://mypy-lang.org/&#34;&gt;Mypy&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mypy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NixOS/nix&#34;&gt;Nix&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/nvuillam/npm-groovy-lint&#34;&gt;npm-groovy-lint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm-groovy-lint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/squizlabs/PHP_CodeSniffer&#34;&gt;phpcs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpcs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/amperser/proselint&#34;&gt;proselint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;proselint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pycodestyle.pycqa.org/en/latest/&#34;&gt;pycodestyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pycodestyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.pydocstyle.org/en/stable/&#34;&gt;pydocstyle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pydocstyle&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://pylint.org/&#34;&gt;Pylint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pylint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mgechev/revive&#34;&gt;Revive&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;revive&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/boakley/robotframework-lint&#34;&gt;rflint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/MarketSquare/robotframework-robocop&#34;&gt;robocop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;robocop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/myint/rstcheck&#34;&gt;rstcheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rstcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/twolfson/restructuredtext-lint&#34;&gt;rstlint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rstlint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ruby/ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ruby&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;RuboCop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rubocop&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Kampfkarren/selene&#34;&gt;Selene&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;selene&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.shellcheck.net/&#34;&gt;ShellCheck&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;shellcheck&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/testdouble/standard&#34;&gt;StandardRB&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;standardrb&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/NerdyPepper/statix&#34;&gt;statix check&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;statix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/stylelint/stylelint&#34;&gt;stylelint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stylelint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/errata-ai/vale&#34;&gt;Vale&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vale&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Vimjas/vint&#34;&gt;vint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jendrikseipp/vulture&#34;&gt;vulture&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vulture&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/adrienverge/yamllint&#34;&gt;yamllint&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yamllint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom Linters&lt;/h2&gt; &#xA;&lt;p&gt;You can register custom linters by adding them to the &lt;code&gt;linters&lt;/code&gt; table, but please consider contributing a linter if it is missing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lint&#39;).linters.your_linter_name = {&#xA;  cmd = &#39;linter_cmd&#39;,&#xA;  stdin = true, -- or false if it doesn&#39;t support content input via stdin. In that case the filename is automatically added to the arguments.&#xA;  append_fname = true, -- Automatically append the file name to `args` if `stdin = false` (default: true)&#xA;  args = {}, -- list of arguments. Can contain functions with zero arguments that will be evaluated once the linter is used.&#xA;  stream = nil, -- (&#39;stdout&#39; | &#39;stderr&#39; | &#39;both&#39;) configure the stream to which the linter outputs the linting result.&#xA;  ignore_exitcode = false, -- set this to true if the linter exits with a code != 0 and that&#39;s considered normal.&#xA;  env = nil, -- custom environment table to use with the external process. Note that this replaces the *entire* environment, it is not additive.&#xA;  parser = your_parse_function&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead of declaring the linter as a table, you can also declare it as a function which returns the linter table in case you want to dynamically generate some of the properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;your_parse_function&lt;/code&gt; can be a function which takes two arguments:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;output&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bufnr&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;output&lt;/code&gt; is the output generated by the linter command. The function must return a list of diagnostics as specified in &lt;code&gt;:help diagnostic-structure&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can override the environment that the linting process runs in by setting the &lt;code&gt;env&lt;/code&gt; key, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;env = { [&#34;FOO&#34;] = &#34;bar&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this completely overrides the environment, it does not add new environment variables. The one exception is that the &lt;code&gt;PATH&lt;/code&gt; variable will be preserved if it is not explicitly set.&lt;/p&gt; &#xA;&lt;p&gt;You can generate a parse function from a Lua pattern or from an &lt;code&gt;errorformat&lt;/code&gt; using the function in the &lt;code&gt;lint.parser&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;h3&gt;from_errorformat&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;parser = require(&#39;lint.parser&#39;).from_errorformat(errorformat)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function takes a single argument which is the &lt;code&gt;errorformat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;from_pattern&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;parser = require(&#39;lint.parser&#39;).from_pattern(pattern, groups, severity_map, defaults)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function allows to parse the linter&#39;s output using a Lua regular expression pattern.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pattern: The regular expression pattern applied on each line of the output&lt;/li&gt; &#xA; &lt;li&gt;groups: The groups specified by the pattern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available groups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lnum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end_lnum&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end_col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;message&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;file&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;severity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;code&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The order of the groups must match the order of the captures within the pattern. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local pattern = &#39;[^:]+:(%d+):(%d+):(%w+):(.+)&#39;&#xA;local groups = { &#39;lnum&#39;, &#39;col&#39;, &#39;code&#39;, &#39;message&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;severity: A mapping from severity codes to diagnostic codes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;default_severity = {&#xA;[&#39;error&#39;] = vim.diagnostic.severity.ERROR,&#xA;[&#39;warning&#39;] = vim.diagnostic.severity.WARN,&#xA;[&#39;information&#39;] = vim.diagnostic.severity.INFO,&#xA;[&#39;hint&#39;] = vim.diagnostic.severity.HINT,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;defaults: The defaults diagnostic values&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;defaults = {[&#34;source&#34;] = &#34;mylint-name&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize built-in linter parameters&lt;/h2&gt; &#xA;&lt;p&gt;You can import a linter and modify its properties. An example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local phpcs = require(&#39;lint.linters.phpcs&#39;)&#xA;phpcs.args = {&#xA;  &#39;-q&#39;,&#xA;  -- &amp;lt;- Add a new parameter here&#xA;  &#39;--report=json&#39;,&#xA;  &#39;-&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;Ale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iamcco/diagnostic-languageserver&#34;&gt;diagnostic-languageserver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development ‚ò¢Ô∏è&lt;/h2&gt; &#xA;&lt;h3&gt;Run tests&lt;/h3&gt; &#xA;&lt;p&gt;Running tests requires &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; to be checked out in the parent directory of &lt;em&gt;this&lt;/em&gt; repository. You can then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim --headless --noplugin -u tests/minimal.vim -c &#34;PlenaryBustedDirectory tests/ {minimal_init = &#39;tests/minimal.vim&#39;}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to run a single test file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvim --headless --noplugin -u tests/minimal.vim -c &#34;PlenaryBustedDirectory tests/vale_spec.lua {minimal_init = &#39;tests/minimal.vim&#39;}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>folke/noice.nvim</title>
    <updated>2022-10-04T01:35:58Z</updated>
    <id>tag:github.com,2022-10-04:/folke/noice.nvim</id>
    <link href="https://github.com/folke/noice.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí• Highly experimental plugin that completely replaces the UI for messages, cmdline and the popupmenu.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí• Noice &lt;em&gt;(Nice, Noise, Notice)&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Highly experimental plugin that completely replaces the UI for &lt;code&gt;messages&lt;/code&gt;, &lt;code&gt;cmdline&lt;/code&gt; and the &lt;code&gt;popupmenu&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/193263220-791847b2-516c-4f23-9802-31dd6bec5f6a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üåÖ fully &lt;strong&gt;configurable views&lt;/strong&gt; like &lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;, splits, popups, virtual text, ..&lt;/li&gt; &#xA; &lt;li&gt;üîç use &lt;strong&gt;filters&lt;/strong&gt; to &lt;strong&gt;route messages&lt;/strong&gt; to different views&lt;/li&gt; &#xA; &lt;li&gt;üåà message &lt;strong&gt;highlights&lt;/strong&gt; are preserved in the views (like the colors of &lt;code&gt;:hi&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;üìù command output like &lt;a href=&#34;https://neovim.io/doc/user/message.html#:messages&#34;&gt;:messages&lt;/a&gt; is shown in normal buffers, which makes it much easier to work with&lt;/li&gt; &#xA; &lt;li&gt;üìö &lt;code&gt;:Noice&lt;/code&gt; command to show a full message history&lt;/li&gt; &#xA; &lt;li&gt;‚å®Ô∏è no more &lt;a href=&#34;https://neovim.io/doc/user/message.html#more-prompt&#34;&gt;:h more-prompt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíª fully customizable &lt;strong&gt;cmdline&lt;/strong&gt; with icons&lt;/li&gt; &#xA; &lt;li&gt;üíÖ &lt;strong&gt;syntax highlighting&lt;/strong&gt; for &lt;code&gt;vim&lt;/code&gt; and &lt;code&gt;lua&lt;/code&gt; on the &lt;strong&gt;cmdline&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;üö• &lt;strong&gt;statusline&lt;/strong&gt; components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚úÖ Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;WIP&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt;: used for proper rendering and multiple views&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;: notification view&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;: used for rendering the regular cmdline completions or if you use &lt;a href=&#34;https://github.com/hrsh7th/cmp-cmdline/&#34;&gt;cmp-cmdline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Packer&#xA;use({&#xA;  &#34;folke/noice.nvim&#34;,&#xA;  event = &#34;VimEnter&#34;,&#xA;  config = function()&#xA;    require(&#34;noice&#34;).setup()&#xA;  end,&#xA;  requires = {&#xA;    -- if you lazy-load any plugin below, make sure to add proper `module=&#34;...&#34;` entries&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;    &#34;rcarriga/nvim-notify&#34;,&#xA;    &#34;hrsh7th/nvim-cmp&#34;,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;noice.nvim&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/folke/noice.nvim/wiki/Configuration-Recipes&#34;&gt;wiki&lt;/a&gt; for configuration recipes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  cmdline = {&#xA;    view = &#34;cmdline_popup&#34;, -- view for rendering the cmdline. Change to `cmdline` to get a classic cmdline at the bottom&#xA;    opts = { buf_options = { filetype = &#34;vim&#34; } }, -- enable syntax highlighting in the cmdline&#xA;    icons = {&#xA;      [&#34;/&#34;] = { icon = &#34;ÔÄÇ &#34;, hl_group = &#34;DiagnosticWarn&#34; },&#xA;      [&#34;?&#34;] = { icon = &#34;ÔÄÇ &#34;, hl_group = &#34;DiagnosticWarn&#34; },&#xA;      [&#34;:&#34;] = { icon = &#34;ÔÑ† &#34;, hl_group = &#34;DiagnosticInfo&#34;, firstc = false },&#xA;    },&#xA;  },&#xA;  history = {&#xA;    -- options for the message history that you get with `:Noice`&#xA;    view = &#34;split&#34;,&#xA;    opts = { enter = true },&#xA;    filter = { event = &#34;msg_show&#34;, [&#34;not&#34;] = { kind = { &#34;search_count&#34;, &#34;echo&#34; } } },&#xA;  },&#xA;  throttle = 1000 / 30, -- how frequently does Noice need to check for ui updates? This has no effect when in blocking mode.&#xA;  ---@type table&amp;lt;string, NoiceViewOptions&amp;gt;&#xA;  views = {}, -- @see the section on views below&#xA;  ---@type NoiceRouteConfig[]&#xA;  routes = {}, -- @see the section on routes below&#xA;  ---@type table&amp;lt;string, NoiceFilter&amp;gt;&#xA;  status = {}, --@see the section on statusline components below&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üîç Filters&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; uses filters to route messages to specific views.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;cleared&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks if the message is cleared, meaning it&#39;s in the history&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;mode&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks if &lt;code&gt;vim.api.nvim_get_mode()&lt;/code&gt; contains the given mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;blocking&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;are we in blocking mode?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;event&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;any of the events from &lt;code&gt;ext_messages&lt;/code&gt; or &lt;code&gt;cmdline&lt;/code&gt;. See &lt;a href=&#34;https://neovim.io/doc/user2/ui.html#_-message/dialog-events-&#34;&gt;:h ui-messages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;kind&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt; or &lt;code&gt;string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;any of the kinds from &lt;code&gt;ext_messages&lt;/code&gt;. See &lt;a href=&#34;https://neovim.io/doc/user2/ui.html#_-message/dialog-events-&#34;&gt;:h ui-messages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;error&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all error-like kinds from &lt;code&gt;ext_messages&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;warning&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;all warning-like kinds from &lt;code&gt;ext_messages&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;find&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;uses lua &lt;code&gt;string.find&lt;/code&gt; to match the pattern&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;min_height&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;minimum height of the message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;max_height&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;maximum height of the message&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;not&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks wether the filter matches or not&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;any&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;filter[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;checks that at least one of the filters matches&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- all messages over 10 lines, excluding echo and search_count&#xA;local filter = {&#xA;  event = &#34;msg_show&#34;,&#xA;  min_height = 10,&#xA;  [&#34;not&#34;] = { kind = { &#34;search_count&#34;, &#34;echo&#34; } },&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üåÖ Views&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; comes with the following built-in renderers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;popup&lt;/strong&gt; powered by &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;split&lt;/strong&gt; powered by &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;notify&lt;/strong&gt; powered by &lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;virtualtext&lt;/strong&gt; shows the message as virtualtext (for example for &lt;code&gt;search_count&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Views&lt;/strong&gt; (&lt;code&gt;config.views&lt;/code&gt;) are combinations of &lt;code&gt;render&lt;/code&gt; methods and options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; comes with the following built-in views with sane defaults:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;notify&lt;/strong&gt; with default level and replaces existing notification by default&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;split&lt;/strong&gt; horizontal split&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;vsplit&lt;/strong&gt; vertical split&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;popup&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;cmdline&lt;/strong&gt; bottom line, similar to the classic cmdline&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;cmdline_popup&lt;/strong&gt; fancy cmdline popup, with different styles according to the cmdline mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/folke/noice.nvim/raw/main/lua/noice/config/views.lua&#34;&gt;noice.config.views&lt;/a&gt; to see the options.&lt;/p&gt; &#xA;&lt;p&gt;Any options passed to existing views in &lt;code&gt;config.views&lt;/code&gt;, will override those options only.&lt;/p&gt; &#xA;&lt;p&gt;You can configure completely new views and use them in custom routes.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- override the default split view to always enter the split when it opens&#xA;require(&#34;noice&#34;).setup({&#xA;    views = {&#xA;        split = {&#xA;            enter = true&#xA;          }&#xA;      }&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nui Options&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the Nui documentation for &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup&#34;&gt;Popup&lt;/a&gt; and &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/split&#34;&gt;Split&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Size &amp;amp; position can additionally be specified as &lt;code&gt;&#34;auto&#34;&lt;/code&gt;, to use the message height and width.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notify Options&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; title to be used for the notification&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;replace&lt;/strong&gt; &lt;code&gt;boolean&lt;/code&gt; when true, messages routing to the same notify instance will replace existing messages instead of pushing a new notification every time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Virtual Text Options&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Right now there&#39;s only an option to set the &lt;code&gt;hl_group&lt;/code&gt; used to render the virtual text.&lt;/p&gt; &#xA;&lt;h3&gt;üöó Routes&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;strong&gt;route&lt;/strong&gt; has a &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;view&lt;/code&gt; and optional &lt;code&gt;opts&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;view&lt;/strong&gt;: one of the views (built-in or custom)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;filter&lt;/strong&gt; a filter for messages matching this route&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;opts&lt;/strong&gt;: options for the view and the route&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Route options can be any of the view options above, or one of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;skip&lt;/strong&gt;: messages matching this filter will be skipped and not shown in any views&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;stop&lt;/strong&gt; (&lt;code&gt;boolean&lt;/code&gt;) defaults to &lt;code&gt;true&lt;/code&gt;. When &lt;code&gt;false&lt;/code&gt; and a route matches the filter, then other routes can still process the message too. Useful if you want certain messages to be shown in multiple views.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/folke/noice.nvim/raw/main/lua/noice/config/routes.lua&#34;&gt;noice.config.routes&lt;/a&gt; for an overview of the default routes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Routes&lt;/strong&gt; passed to &lt;code&gt;setup()&lt;/code&gt; will be prepended to the default routes.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- skip search_count messages instead of showing them as virtual text&#xA;require(&#34;noice&#34;).setup({&#xA;  routes = {&#xA;    {&#xA;      filter = { event = &#34;msg_show&#34;, kind = &#34;search_count&#34; },&#xA;      opts = { skip = true },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;-- always route any messages with more than 20 lines to the split view&#xA;require(&#34;noice&#34;).setup({&#xA;  routes = {&#xA;    {&#xA;      view = &#34;split&#34;,&#xA;      filter = { event = &#34;msg_show&#34;, min_height = 20 },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üö• Statusline Components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; comes with the following statusline components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ruler&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;message&lt;/strong&gt;: last line of the last message (&lt;code&gt;event=show_msg&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;command&lt;/strong&gt;: &lt;code&gt;showcmd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt;: &lt;code&gt;showmode&lt;/code&gt; (@recording messages)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;search&lt;/strong&gt;: search count messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/folke/noice.nvim/raw/main/lua/noice/config/status.lua&#34;&gt;noice.config.status&lt;/a&gt; for the default config.&lt;/p&gt; &#xA;&lt;p&gt;You can add custom statusline components in setup under the &lt;code&gt;status&lt;/code&gt; key.&lt;/p&gt; &#xA;&lt;p&gt;Statusline components have the following methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;get&lt;/strong&gt;: gets the content of the message &lt;strong&gt;without&lt;/strong&gt; highlights&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;get_hl&lt;/strong&gt;: gets the content of the message &lt;strong&gt;with&lt;/strong&gt; highlights&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;has&lt;/strong&gt;: checks if the component is available&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example of configuring &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lualine&#34;).setup({&#xA;  sections = {&#xA;    lualine_x = {&#xA;      {&#xA;        require(&#34;noice.status&#34;).message.get_hl,&#xA;        cond = require(&#34;noice.status&#34;).message.has,&#xA;      },&#xA;      {&#xA;        require(&#34;noice.status&#34;).command.get,&#xA;        cond = require(&#34;noice.status&#34;).command.has,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;      {&#xA;        require(&#34;noice.status&#34;).mode.get,&#xA;        cond = require(&#34;noice.status&#34;).mode.has,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;      {&#xA;        require(&#34;noice.status&#34;).search.get,&#xA;        cond = require(&#34;noice.status&#34;).search.has,&#xA;        color = { fg = &#34;#ff9e64&#34; },&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice&lt;/code&gt; shows the message history&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice disable&lt;/code&gt; disables &lt;strong&gt;Noice&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice enable&lt;/code&gt; enables &lt;strong&gt;Noice&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Noice stats&lt;/code&gt; shows debugging stats&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üî• Known Issues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Noice&lt;/strong&gt; is using the new experimental &lt;code&gt;vim.ui_attach&lt;/code&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;During setup, we apply a bunch of &lt;a href=&#34;https://github.com/folke/noice.nvim/raw/main/lua/noice/hacks.lua&#34;&gt;Hacks&lt;/a&gt; to work around some of the current issues.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see &lt;a href=&#34;https://github.com/folke/noice.nvim/issues/6&#34;&gt;https://github.com/folke/noice.nvim/issues/6&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>