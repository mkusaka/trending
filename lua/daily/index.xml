<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-31T01:32:56Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tanvirtin/vgit.nvim</title>
    <updated>2025-01-31T01:32:56Z</updated>
    <id>tag:github.com,2025-01-31:/tanvirtin/vgit.nvim</id>
    <link href="https://github.com/tanvirtin/vgit.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Visual git plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;VGit&lt;/h1&gt; &#xA; &lt;table&gt; &#xA;  &lt;tbody&gt;&#xA;   &lt;tr&gt; &#xA;    &lt;td&gt; &lt;strong&gt;Visual Git Plugin for Neovim to enhance your git experience&lt;/strong&gt; &lt;/td&gt;&#xA;   &lt;/tr&gt;  &#xA;  &lt;/tbody&gt;&#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://www.lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://neovim.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim%200.8+-green.svg?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;a href=&#34;https://github.com/tanvirtin/vgit.nvim/actions?query=workflow%3ACI&#34;&gt; &lt;img src=&#34;https://github.com/tanvirtin/vgit.nvim/workflows/CI/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; VGit&#39;s feature views are designed to be lightning-fast. Whether you&#39;re diving into a file&#39;s history, comparing changes, or managing stashes. &lt;/p&gt; &#xA;&lt;h3&gt;Project Diff Preview&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Explore all changes in your project at a glance. The diff preview displays modified files and highlights the changes for better project-wide management.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/68d7e6bf-06da-4279-95b7-5baea5303c1f&#34; alt=&#34;Project Diff Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Project Logs Preview&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;View and filter the logs of your current branch in an intuitive interface. Select logs and open detailed commit previews effortlessly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/187ec555-47c4-4c43-b52f-aa5cd9f7b04c&#34; alt=&#34;Project Logs Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Project Stash Preview&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Easily manage and preview all your stashed changes in one place. Keep your work organized and accessible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/b67b8594-c137-4497-915c-0c64595d8167&#34; alt=&#34;Project Stash Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Buffer Diff Preview&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Visually compare your current buffer with its version in the Git index. If focused on a hunk, this preview zooms into the relevant changes for a streamlined review experience.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/103122f1-4748-417c-9318-f1934da0186c&#34; alt=&#34;Buffer Diff Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Buffer Blame Preview&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Gain instant insight into the author and commit history of any line in your buffer. This feature enables seamless tracing of code changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/990110ac-4ca8-416e-a600-49f903bd93af&#34; alt=&#34;Buffer Blame Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Buffer History Preview&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Dive into the history of your file with a detailed view of all its Git iterations. See how the file has evolved through various commits.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/0c4ddc13-2245-4a49-aa5f-6150f8a2fad1&#34; alt=&#34;Buffer History Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Conflict Management&lt;/h3&gt; &#xA;&lt;p&gt;VGit simplifies conflict resolution by clearly highlighting different segments of a conflict and giving you the flexibility to choose the necessary changes, making it easy to merge and resolve conflicts efficiently.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/8b4e2eb6-e0b6-4702-8aad-9c46fd345a71&#34; alt=&#34;Conflict Management&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Live Blame&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Enable live blame annotations directly in your editor to see the author and commit for each line in real time. Perfect for understanding the evolution of code at a glance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/2dc4c57d-c9d1-40d4-9f20-54a5f5cf1743&#34; alt=&#34;Live blame&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &lt;code&gt;0.10+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git &lt;code&gt;2.18.0+&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supported Operating Systems: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;linux-gnu*&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Darwin&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Installation&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Package managers with lazy loading is necessary for installation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Warning] Releases prior to the major versions will no longer be maintained. Branch &lt;code&gt;v1.0.x&lt;/code&gt; contains several new features and massive optimizations but unfortunately also contains several breaking and deprecated changes. For the time being the main branch will still be following &lt;code&gt;v0.2.x&lt;/code&gt; while core users slowly migrate to &lt;code&gt;v1.0.x&lt;/code&gt; without breaking their current workflow. New users please use tag &lt;code&gt;v1.0.2&lt;/code&gt; or branch &lt;code&gt;v1.0.x&lt;/code&gt; for the latest changes!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;tanvirtin/vgit.nvim&#39;, branch = &#39;v1.0.x&#39;,&#xA;  -- or                , tag = &#39;v1.0.2&#39;,&#xA;  requires = { &#39;nvim-lua/plenary.nvim&#39;, &#39;nvim-tree/nvim-web-devicons&#39; },&#xA;  -- Lazy loading on &#39;VimEnter&#39; event is necessary.&#xA;  event = &#39;VimEnter&#39;,&#xA;  config = function() require(&#34;vgit&#34;).setup() end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;tanvirtin/vgit.nvim&#39;, branch = &#39;v1.0.x&#39;,&#xA;   -- or               , tag = &#39;v1.0.2&#39;,&#xA;  dependencies = { &#39;nvim-lua/plenary.nvim&#39;, &#39;nvim-tree/nvim-web-devicons&#39; },&#xA;  -- Lazy loading on &#39;VimEnter&#39; event is necessary.&#xA;  event = &#39;VimEnter&#39;,&#xA;  config = function() require(&#34;vgit&#34;).setup() end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You must instantiate the plugin in order for the features to work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;vgit&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Highlights, signs, keymappings are few examples of what can be configured in VGit. Advanced setting should only be used if you intend to change functionality provided by default.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Show advanced setup&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;vgit&#39;).setup({&#xA;  keymaps = {&#xA;    [&#39;n &amp;lt;C-k&amp;gt;&#39;] = function() require(&#39;vgit&#39;).hunk_up() end,&#xA;    [&#39;n &amp;lt;C-j&amp;gt;&#39;] = function() require(&#39;vgit&#39;).hunk_down() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gs&#39;] = function() require(&#39;vgit&#39;).buffer_hunk_stage() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gr&#39;] = function() require(&#39;vgit&#39;).buffer_hunk_reset() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gp&#39;] = function() require(&#39;vgit&#39;).buffer_hunk_preview() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gb&#39;] = function() require(&#39;vgit&#39;).buffer_blame_preview() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gf&#39;] = function() require(&#39;vgit&#39;).buffer_diff_preview() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gh&#39;] = function() require(&#39;vgit&#39;).buffer_history_preview() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gu&#39;] = function() require(&#39;vgit&#39;).buffer_reset() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gd&#39;] = function() require(&#39;vgit&#39;).project_diff_preview() end,&#xA;    [&#39;n &amp;lt;leader&amp;gt;gx&#39;] = function() require(&#39;vgit&#39;).toggle_diff_preference() end,&#xA;  },&#xA;  settings = {&#xA;    -- You can either allow corresponding mapping for existing hl, or re-define them yourself entirely.&#xA;    hls = {&#xA;      GitCount = &#39;Keyword&#39;,&#xA;      GitSymbol = &#39;CursorLineNr&#39;,&#xA;      GitTitle = &#39;Directory&#39;,&#xA;      GitSelected = &#39;QuickfixLine&#39;,&#xA;      GitBackground = &#39;Normal&#39;,&#xA;      GitAppBar = &#39;StatusLine&#39;,&#xA;      GitHeader = &#39;NormalFloat&#39;,&#xA;      GitFooter = &#39;NormalFloat&#39;,&#xA;      GitBorder = &#39;LineNr&#39;,&#xA;      GitLineNr = &#39;LineNr&#39;,&#xA;      GitComment = &#39;Comment&#39;,&#xA;      GitSignsAdd = {&#xA;        gui = nil,&#xA;        fg = &#39;#d7ffaf&#39;,&#xA;        bg = nil,&#xA;        sp = nil,&#xA;        override = false,&#xA;      },&#xA;      GitSignsChange = {&#xA;        gui = nil,&#xA;        fg = &#39;#7AA6DA&#39;,&#xA;        bg = nil,&#xA;        sp = nil,&#xA;        override = false,&#xA;      },&#xA;      GitSignsDelete = {&#xA;        gui = nil,&#xA;        fg = &#39;#e95678&#39;,&#xA;        bg = nil,&#xA;        sp = nil,&#xA;        override = false,&#xA;      },&#xA;      GitSignsAddLn = &#39;DiffAdd&#39;,&#xA;      GitSignsDeleteLn = &#39;DiffDelete&#39;,&#xA;      GitWordAdd = {&#xA;        gui = nil,&#xA;        fg = nil,&#xA;        bg = &#39;#5d7a22&#39;,&#xA;        sp = nil,&#xA;        override = false,&#xA;      },&#xA;      GitWordDelete = {&#xA;        gui = nil,&#xA;        fg = nil,&#xA;        bg = &#39;#960f3d&#39;,&#xA;        sp = nil,&#xA;        override = false,&#xA;      },&#xA;      GitConflictCurrentMark = &#39;DiffAdd&#39;,&#xA;      GitConflictAncestorMark = &#39;Visual&#39;,&#xA;      GitConflictIncomingMark = &#39;DiffChange&#39;,&#xA;      GitConflictCurrent = &#39;DiffAdd&#39;,&#xA;      GitConflictAncestor = &#39;Visual&#39;,&#xA;      GitConflictMiddle = &#39;Visual&#39;,&#xA;      GitConflictIncoming = &#39;DiffChange&#39;,&#xA;    },&#xA;    live_blame = {&#xA;      enabled = true,&#xA;      format = function(blame, git_config)&#xA;        local config_author = git_config[&#39;user.name&#39;]&#xA;        local author = blame.author&#xA;        if config_author == author then&#xA;          author = &#39;You&#39;&#xA;        end&#xA;        local time = os.difftime(os.time(), blame.author_time)&#xA;          / (60 * 60 * 24 * 30 * 12)&#xA;        local time_divisions = {&#xA;          { 1, &#39;years&#39; },&#xA;          { 12, &#39;months&#39; },&#xA;          { 30, &#39;days&#39; },&#xA;          { 24, &#39;hours&#39; },&#xA;          { 60, &#39;minutes&#39; },&#xA;          { 60, &#39;seconds&#39; },&#xA;        }&#xA;        local counter = 1&#xA;        local time_division = time_divisions[counter]&#xA;        local time_boundary = time_division[1]&#xA;        local time_postfix = time_division[2]&#xA;        while time &amp;lt; 1 and counter ~= #time_divisions do&#xA;          time_division = time_divisions[counter]&#xA;          time_boundary = time_division[1]&#xA;          time_postfix = time_division[2]&#xA;          time = time * time_boundary&#xA;          counter = counter + 1&#xA;        end&#xA;        local commit_message = blame.commit_message&#xA;        if not blame.committed then&#xA;          author = &#39;You&#39;&#xA;          commit_message = &#39;Uncommitted changes&#39;&#xA;          return string.format(&#39; %s • %s&#39;, author, commit_message)&#xA;        end&#xA;        local max_commit_message_length = 255&#xA;        if #commit_message &amp;gt; max_commit_message_length then&#xA;          commit_message = commit_message:sub(1, max_commit_message_length) .. &#39;...&#39;&#xA;        end&#xA;        return string.format(&#xA;          &#39; %s, %s • %s&#39;,&#xA;          author,&#xA;          string.format(&#xA;            &#39;%s %s ago&#39;,&#xA;            time &amp;gt;= 0 and math.floor(time + 0.5) or math.ceil(time - 0.5),&#xA;            time_postfix&#xA;          ),&#xA;          commit_message&#xA;        )&#xA;      end,&#xA;    },&#xA;    live_gutter = {&#xA;      enabled = true,&#xA;      edge_navigation = true, -- This allows users to navigate within a hunk&#xA;    },&#xA;    scene = {&#xA;      diff_preference = &#39;unified&#39;, -- unified or split&#xA;      keymaps = {&#xA;        quit = &#39;q&#39;&#xA;      }&#xA;    },&#xA;    diff_preview = {&#xA;      keymaps = {&#xA;        reset = &#39;r&#39;,&#xA;        buffer_stage = &#39;S&#39;,&#xA;        buffer_unstage = &#39;U&#39;,&#xA;        buffer_hunk_stage = &#39;s&#39;,&#xA;        buffer_hunk_unstage = &#39;u&#39;,&#xA;        toggle_view = &#39;t&#39;,&#xA;      },&#xA;    },&#xA;    project_diff_preview = {&#xA;      keymaps = {&#xA;        commit = &#39;C&#39;,&#xA;        buffer_stage = &#39;s&#39;,&#xA;        buffer_unstage = &#39;u&#39;,&#xA;        buffer_hunk_stage = &#39;gs&#39;,&#xA;        buffer_hunk_unstage = &#39;gu&#39;,&#xA;        buffer_reset = &#39;r&#39;,&#xA;        stage_all = &#39;S&#39;,&#xA;        unstage_all = &#39;U&#39;,&#xA;        reset_all = &#39;R&#39;,&#xA;      },&#xA;    },&#xA;    project_stash_preview = {&#xA;      keymaps = {&#xA;        add = &#39;A&#39;,&#xA;        apply = &#39;a&#39;,&#xA;        pop = &#39;p&#39;,&#xA;        drop = &#39;d&#39;,&#xA;        clear = &#39;C&#39;&#xA;      },&#xA;    },&#xA;    project_logs_preview = {&#xA;      keymaps = {&#xA;        previous = &#39;-&#39;,&#xA;        next = &#39;=&#39;,&#xA;      },&#xA;    },&#xA;    project_commit_preview = {&#xA;      keymaps = {&#xA;        save = &#39;S&#39;,&#xA;      },&#xA;    },&#xA;    signs = {&#xA;      priority = 10,&#xA;      definitions = {&#xA;        -- The sign definitions you provide will automatically be instantiated for you.&#xA;        GitConflictCurrentMark = {&#xA;          linehl = &#39;GitConflictCurrentMark&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitConflictAncestorMark = {&#xA;          linehl = &#39;GitConflictAncestorMark&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitConflictIncomingMark = {&#xA;          linehl = &#39;GitConflictIncomingMark&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitConflictCurrent = {&#xA;          linehl = &#39;GitConflictCurrent&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitConflictAncestor = {&#xA;          linehl = &#39;GitConflictAncestor&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitConflictMiddle = {&#xA;          linehl = &#39;GitConflictMiddle&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitConflictIncoming = {&#xA;          linehl = &#39;GitConflictIncoming&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitSignsAddLn = {&#xA;          linehl = &#39;GitSignsAddLn&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitSignsDeleteLn = {&#xA;          linehl = &#39;GitSignsDeleteLn&#39;,&#xA;          texthl = nil,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          text = &#39;&#39;,&#xA;        },&#xA;        GitSignsAdd = {&#xA;          texthl = &#39;GitSignsAdd&#39;,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          linehl = nil,&#xA;          text = &#39;┃&#39;,&#xA;        },&#xA;        GitSignsDelete = {&#xA;          texthl = &#39;GitSignsDelete&#39;,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          linehl = nil,&#xA;          text = &#39;┃&#39;,&#xA;        },&#xA;        GitSignsChange = {&#xA;          texthl = &#39;GitSignsChange&#39;,&#xA;          numhl = nil,&#xA;          icon = nil,&#xA;          linehl = nil,&#xA;          text = &#39;┃&#39;,&#xA;        },&#xA;      },&#xA;      usage = {&#xA;        -- Please ensure these signs are defined.&#xA;        screen = {&#xA;          add = &#39;GitSignsAddLn&#39;,&#xA;          remove = &#39;GitSignsDeleteLn&#39;,&#xA;          conflict_current_mark = &#39;GitConflictCurrentMark&#39;,&#xA;          conflict_current = &#39;GitConflictCurrent&#39;,&#xA;          conflict_middle = &#39;GitConflictMiddle&#39;,&#xA;          conflict_incoming_mark = &#39;GitConflictIncomingMark&#39;,&#xA;          conflict_incoming = &#39;GitConflictIncoming&#39;,&#xA;          conflict_ancestor_mark = &#39;GitConflictAncestorMark&#39;,&#xA;          conflict_ancestor = &#39;GitConflictAncestor&#39;&#xA;        },&#xA;        main = {&#xA;          add = &#39;GitSignsAdd&#39;,&#xA;          remove = &#39;GitSignsDelete&#39;,&#xA;          change = &#39;GitSignsChange&#39;,&#xA;        },&#xA;      },&#xA;    },&#xA;    symbols = {&#xA;      void = &#39;⣿&#39;,&#xA;      open = &#39;&#39;,&#xA;      close = &#39;&#39;,&#xA;    },&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Status Line&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;b:vgit_status&lt;/code&gt;, a table containing the current buffer&#39;s number of &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;removed&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; lines.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;set statusline+=%{get(b:,&#39;vgit_status&#39;,&#39;&#39;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;img width=&#34;350&#34; alt=&#34;VGit Commands&#34; src=&#34;https://github.com/user-attachments/assets/f9718464-079b-42ea-a04f-084d8de1df18&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;help&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Vim documentation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sets VGit up for you. This plugin cannot be used before this function has been called.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hunk_up&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Moves the cursor to the hunk above the current cursor position.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hunk_down&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Moves the cursor to the hunk below the current cursor position.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_hunk_preview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a diff preview showing the diff of the current buffer in comparison to that found in index. This preview will open up in a smaller window relative to where your cursor is.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_diff_preview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a diff preview showing the diff of the current buffer in comparison to that found in index. If the command is called while being on a hunk, the window will open focused on the diff of that hunk.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_history_preview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a diff preview along with a table of logs, enabling users to see different iterations of the file through it&#39;s lifecycle in git.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_blame_preview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a preview detailing the blame of the line that based on the cursor position within the buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_hunk_stage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stages a hunk, if a cursor is on the hunk.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_hunk_reset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Removes all changes made in the buffer on the hunk the cursor is currently on to what exists in HEAD.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_stage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Stages all changes in the current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_unstage&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unstages all changes in the current buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_reset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Removes all current changes in the buffer and resets it to the version in HEAD.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_conflict_accept_both&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Acceps both changes from the conflict under cursor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_conflict_accept_current&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Accepts the current changes form the conflict under cursor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buffer_conflict_accept_incoming&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Accepts the incoming changes form the conclict under cursor.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;project_diff_preview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a diff preview along with a list of all the files that have been changed, enabling users to see all the files that were changed in the current project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;project_logs_preview&lt;/code&gt; [args]&lt;/td&gt; &#xA;   &lt;td&gt;Opens a preview listing all the logs in the current working branch. Users can filter the list by passing options to this list. Pressing the &#34;tab&#34; key on a list item will keep the item selected. Pressing the &#34;enter&#34; key on the preview will close the preview and open &#34;project_commits_preview&#34; with the selected commits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;project_commit_preview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a preview through which staged changes can be committed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;project_commits_preview&lt;/code&gt; [args]&lt;/td&gt; &#xA;   &lt;td&gt;Opens a diff preview along with a list of all your commits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;project_stash_preview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a preview of all your stash changes and provides you with the ability to manage these changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_diff_preference&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used to switch between &#34;split&#34; and &#34;unified&#34; diff.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_live_gutter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables/disables git gutter signs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_live_blame&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Used to switch between &#34;split&#34; and &#34;unified&#34; diff.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_tracing&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables/disables debug logs that are used internally by VGit to make suppressed logs visible.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>