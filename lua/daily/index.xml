<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-08T01:37:45Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>carbon-steel/detour.nvim</title>
    <updated>2024-02-08T01:37:45Z</updated>
    <id>tag:github.com,2024-02-08:/carbon-steel/detour.nvim</id>
    <link href="https://github.com/carbon-steel/detour.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use popup windows to navigate files/buffer and to contain shells/TUIs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;detour.nvim&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It&#39;s a dangerous business, Frodo, going out your door. You step onto the road, and if you don&#39;t keep your feet, there&#39;s no knowing where you might be swept off to.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div dir=&#34;rtl&#34;&gt;&#xA;  J.R.R. Tolkien, The Lord of the Rings &#xA;&lt;/div&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/63a88fd3-f910-4e42-9664-0e14fe88d066&#34; alt=&#34;detour&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Never lose your spot!üìçüó∫Ô∏è&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;What does detour.nvim do?&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;:Detour&lt;/code&gt;/&lt;code&gt;require(&#39;detour&#39;).Detour()&lt;/code&gt; &lt;br&gt;opens a popup window&lt;br&gt;over all current windows&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/1eb85155-7134-473f-8df0-dd15f55c1d8c&#34; alt=&#34;detour&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;:DetourCurrentWindow&lt;/code&gt;/&lt;br&gt;&lt;code&gt;require(&#39;detour&#39;).DetourCurrentWindow()&lt;/code&gt;&lt;br&gt;opens a popup window over&lt;br&gt;only the current window&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/d3f0db15-916b-4b17-b227-0e4aa8fc318d&#34; alt=&#34;detour2&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Works with Neovim&#39;s &lt;code&gt;:split&lt;/code&gt;/&lt;code&gt;:vsplit&lt;/code&gt;/&lt;code&gt;&amp;lt;C-w&amp;gt;s&lt;/code&gt;/&lt;code&gt;&amp;lt;C-w&amp;gt;v&lt;/code&gt;/&lt;code&gt;&amp;lt;C-w&amp;gt;T&lt;/code&gt; commands&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/4ffa7f36-8b2a-4d91-a8bb-7012f7b82015&#34; alt=&#34;split&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;You can nest detour popups&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/5fc3cad6-9acf-482d-97cb-c75788617cf8&#34; alt=&#34;nest&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Example usage: Open a popup &lt;br&gt;-&amp;gt; Go to different file &lt;br&gt;-&amp;gt; Create vertical split &lt;br&gt;-&amp;gt; Close popup&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/3a408a14-8b9d-4bd4-90db-e633c5f97b7c&#34; alt=&#34;basic&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;detour.nvim&lt;/code&gt; has two uses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use popup windows instead of split windows&lt;/p&gt; &lt;p&gt;&lt;span&gt;üëç&lt;/span&gt; Popups preserve your position in the current file during detours into other files &lt;em&gt;(just like splits)&lt;/em&gt;&lt;/p&gt; &lt;p&gt;&lt;span&gt;üëç&lt;/span&gt; Popups can use the entire screen &lt;em&gt;(unlike splits)&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide a large popup windows for TUIs, scripts, and commands.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This plugin can be considered a generalized version of &lt;a href=&#34;https://github.com/akinsho/toggleterm.nvim&#34;&gt;&lt;code&gt;toggleterm.nvim&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/kdheepak/lazygit.nvim&#34;&gt;&lt;code&gt;lazygit.nvim&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h3&gt;Lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#34;carbon-steel/detour.nvim&#34;,&#xA;    config = function ()&#xA;       vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;c-w&amp;gt;&amp;lt;enter&amp;gt;&#39;, &#34;:Detour&amp;lt;cr&amp;gt;&#34;)&#xA;   end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Example keymaps&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;detour.nvim&lt;/code&gt; is designed as a utility library for keymaps people can write on their own.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; If you&#39;d like to share a keymap you made, please submit it in a github issue and we&#39;ll include it in the &lt;code&gt;examples&lt;/code&gt; directory!&lt;/p&gt; &#xA;&lt;p&gt;Here are a few basic examples...&lt;/p&gt; &#xA;&lt;h3&gt;Use with Telescope&lt;/h3&gt; &#xA;&lt;p&gt;Select a terminal buffer to open in a popup&lt;/p&gt; &#xA;&lt;p&gt;This is a simple example but there is a better keymap in &lt;code&gt;examples/telescope.md&lt;/code&gt; that also opens a new terminal when no terminals are found.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;t&#39;, function()&#xA;    require(&#39;detour&#39;).Detour() -- Open a detour popup&#xA;&#xA;    -- Switch to a blank buffer.&#xA;    -- This is a necessary precaution because the following call to telescope&#39;s&#xA;    -- `buffers` function may fail to bring up a prompt if it does not find any&#xA;    -- qualifying buffers. In that case, the call to `nvim_feedkeys` will&#xA;    -- write to this blank buffer instead of whatever buffer `Detour` opened&#xA;    -- with.&#xA;    vim.cmd.enew()&#xA;    vim.bo.bufhidden = &#39;delete&#39; -- delete this scratch buffer when we move out of it&#xA;&#xA;    require(&#39;telescope.builtin&#39;).buffers({})    -- Open telescope prompt&#xA;    vim.api.nvim_feedkeys(&#34;term://&#34;, &#34;n&#34;, true) -- popuplate prompt with &#34;term&#34;&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Open two terminal buffers -&amp;gt; Use the keymap above -&amp;gt; Select desired terminal&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/775cd697-d47e-4d3c-9aaf-9f7f86c266f0&#34; alt=&#34;term&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Wrap a TUI: top&lt;/h3&gt; &#xA;&lt;p&gt;You can wrap any TUI in a popup. Here is an example.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;top&lt;/code&gt; in a popup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#39;&amp;lt;leader&amp;gt;p&#39;, function ()&#xA;    require(&#39;detour&#39;).Detour()  -- open a detour popup&#xA;    vim.cmd.terminal(&#39;top&#39;)     -- open a terminal buffer&#xA;    vim.bo.bufhidden = &#39;delete&#39; -- close the terminal when window closes&#xA;&#xA;    -- It&#39;s common for people to have `&amp;lt;Esc&amp;gt;` mapped to `&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;` for terminals.&#xA;    -- This can get in the way when interacting with TUIs.&#xA;    -- This maps the escape key back to itself (for this buffer) to fix this problem.&#xA;    vim.keymap.set(&#39;t&#39;, &#39;&amp;lt;Esc&amp;gt;&#39;, &#39;&amp;lt;Esc&amp;gt;&#39;, { buffer = true })&#xA;&#xA;    vim.cmd.startinsert() -- go into insert mode&#xA;&#xA;    vim.api.nvim_create_autocmd({&#34;TermClose&#34;}, {&#xA;        buffer = vim.api.nvim_get_current_buf(),&#xA;        callback = function ()&#xA;            -- This automated keypress skips for you the &#34;[Process exited 0]&#34; message&#xA;            -- that the embedded terminal shows.&#xA;            vim.api.nvim_feedkeys(&#39;i&#39;, &#39;n&#39;, false)&#xA;        end&#xA;    })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Use keymap above -&amp;gt; Close window&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/49dd12ab-630b-4558-9486-fe82cc94882c&#34; alt=&#34;top&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Wrap a TUI: tig&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;tig&lt;/code&gt; in a popup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;g&#39;, function()&#xA;    local current_dir = vim.fn.expand(&#34;%:p:h&#34;)&#xA;    require(&#39;detour&#39;).Detour() -- open a detour popup&#xA;&#xA;    -- Set this window&#39;s current working directory to current file&#39;s directory.&#xA;    -- tig finds a git repo based on the current working directory. &#xA;    vim.cmd.lcd(current_dir)&#xA;&#xA;    vim.cmd.terminal(&#39;tig&#39;)     -- open a terminal buffer running tig&#xA;    vim.bo.bufhidden = &#39;delete&#39; -- close the terminal when window closes&#xA;&#xA;    -- It&#39;s common for people to have `&amp;lt;Esc&amp;gt;` mapped to `&amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;` for terminals.&#xA;    -- This can get in the way when interacting with TUIs.&#xA;    -- This maps the escape key back to itself (for this buffer) to fix this problem.&#xA;    vim.keymap.set(&#39;t&#39;, &#39;&amp;lt;Esc&amp;gt;&#39;, &#39;&amp;lt;Esc&amp;gt;&#39;, { buffer = true })&#xA;&#xA;    vim.cmd.startinsert() -- go to insert mode&#xA;&#xA;    vim.api.nvim_create_autocmd({&#34;TermClose&#34;}, {&#xA;        buffer = vim.api.nvim_get_current_buf(),&#xA;        callback = function ()&#xA;            -- This automated keypress skips for you the &#34;[Process exited 0]&#34; message&#xA;            -- that the embedded terminal shows.&#xA;            vim.api.nvim_feedkeys(&#39;i&#39;, &#39;n&#39;, false)&#xA;        end&#xA;    })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Use keymap above -&amp;gt; Close window&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/carbon-steel/detour.nvim/assets/7697639/7dd84b42-26d8-487b-8486-aa08e0fef5c8&#34; alt=&#34;tig2&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;I want to convert popups to splits or tabs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;C-w&amp;gt;s&lt;/code&gt; and &lt;code&gt;&amp;lt;C-w&amp;gt;v&lt;/code&gt; can be used from within a popup to create splits. &lt;code&gt;&amp;lt;C-w&amp;gt;T&lt;/code&gt; creates tabs.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;My LSP keeps moving my cursor to other windows.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If your LSP movements (ex: &lt;code&gt;go-to-definition&lt;/code&gt;) are opening locations in other windows, make sure that you&#39;re not calling these movements with the &lt;code&gt;reuse_win&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;My popups don&#39;t look good.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Some colorschemes don&#39;t have visually clear floating window border colors. Consider customizing your colorscheme&#39;s FloatBorder to a color that makes your popups clearer.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>alexghergh/nvim-tmux-navigation</title>
    <updated>2024-02-08T01:37:45Z</updated>
    <id>tag:github.com,2024-02-08:/alexghergh/nvim-tmux-navigation</id>
    <link href="https://github.com/alexghergh/nvim-tmux-navigation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy Neovim-Tmux navigation, completely written in Lua&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Neovim-Tmux Navigation&lt;/h2&gt; &#xA;&lt;p&gt;The plugin is a rewrite of &lt;a href=&#34;https://github.com/christoomey/vim-tmux-navigator&#34;&gt;Christoomey&#39;s Vim Tmux Navigator&lt;/a&gt;, with a few added benefits:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;fully written in Lua, compatible with NeoVim 0.7.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;takes advantage of Lua closures&lt;/li&gt; &#xA; &lt;li&gt;does not use global vim variables&lt;/li&gt; &#xA; &lt;li&gt;switch to the next window (numerically), whether it is a &lt;code&gt;neovim&lt;/code&gt; split or a &lt;code&gt;tmux&lt;/code&gt; pane&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The plugin does not, however, have a &#34;save on switch&#34; feature as &lt;em&gt;Vim Tmux Navigator&lt;/em&gt; has, and does not work with &lt;code&gt;tmate&lt;/code&gt;. For such features or any other, please open an issue or a pull request.&lt;/p&gt; &#xA;&lt;p&gt;The plugin targets &lt;code&gt;neovim 0.7.0&lt;/code&gt; (for the keymap and user commands features) and more recent versions, and &lt;code&gt;tmux 3.2a&lt;/code&gt; and more recent versions, although some of the older &lt;code&gt;tmux&lt;/code&gt; versions should work as well.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To use the plugin, install it through a package manager, like &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt; or &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; vim-plug&#xA;Plug &#39;alexghergh/nvim-tmux-navigation&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; lazy.nvim&#xA;{ &#34;alexghergh/nvim-tmux-navigation&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Before using the plugin, a few configuration steps are needed. Navigation keys need to be set up inside both &lt;code&gt;tmux&lt;/code&gt; and &lt;code&gt;neovim&lt;/code&gt;. Ideally, both should have the same navigation keys, so the transition between windows becomes transparent (it doesn&#39;t care if it&#39;s inside a vim process or not).&lt;/p&gt; &#xA;&lt;h3&gt;Tmux&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;tmux&lt;/code&gt; part basically needs to know whether it is inside a &lt;code&gt;vim&lt;/code&gt; process, and send the navigation keys through to it in that case. If it is not, then it just switches panes.&lt;/p&gt; &#xA;&lt;p&gt;You need the lines below in your &lt;code&gt;~/.tmux.conf&lt;/code&gt;. This assumes that you want to use &lt;code&gt;Ctrl&lt;/code&gt; keybinds to switch between windows, however feel free to switch to any other prefix (like &lt;code&gt;Alt&lt;/code&gt;/&lt;code&gt;Meta&lt;/code&gt;; for example &lt;code&gt;M-h&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Careful though, having &lt;code&gt;Ctrl&lt;/code&gt; as prefix means that you lose access to the &#34;clear screen&#34; terminal feature, activated by &lt;code&gt;&amp;lt;Ctrl-l&amp;gt;&lt;/code&gt; by default. You can either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;remap the keys to something like &lt;code&gt;Alt + h/j/k/l&lt;/code&gt; if your terminal supports it (not all do), or&lt;/li&gt; &#xA; &lt;li&gt;add a different keybind to clear screen in &lt;code&gt;~/.tmux.conf&lt;/code&gt;, for example &lt;code&gt;bind C-l send-keys &#39;C-l&#39;&lt;/code&gt;; this allows you to do &lt;code&gt;&amp;lt;prefix&amp;gt; C-l&lt;/code&gt; to clear screen.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tmux&#34;&gt;# Smart pane switching with awareness of Vim splits.&#xA;# See: https://github.com/christoomey/vim-tmux-navigator&#xA;&#xA;# decide whether we&#39;re in a Vim process&#xA;is_vim=&#34;ps -o state= -o comm= -t &#39;#{pane_tty}&#39; \&#xA;    | grep -iqE &#39;^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$&#39;&#34;&#xA;&#xA;bind-key -n &#39;C-h&#39; if-shell &#34;$is_vim&#34; &#39;send-keys C-h&#39; &#39;select-pane -L&#39;&#xA;bind-key -n &#39;C-j&#39; if-shell &#34;$is_vim&#34; &#39;send-keys C-j&#39; &#39;select-pane -D&#39;&#xA;bind-key -n &#39;C-k&#39; if-shell &#34;$is_vim&#34; &#39;send-keys C-k&#39; &#39;select-pane -U&#39;&#xA;bind-key -n &#39;C-l&#39; if-shell &#34;$is_vim&#34; &#39;send-keys C-l&#39; &#39;select-pane -R&#39;&#xA;&#xA;tmux_version=&#39;$(tmux -V | sed -En &#34;s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p&#34;)&#39;&#xA;&#xA;if-shell -b &#39;[ &#34;$(echo &#34;$tmux_version &amp;lt; 3.0&#34; | bc)&#34; = 1 ]&#39; \&#xA;    &#34;bind-key -n &#39;C-\\&#39; if-shell \&#34;$is_vim\&#34; &#39;send-keys C-\\&#39;  &#39;select-pane -l&#39;&#34;&#xA;if-shell -b &#39;[ &#34;$(echo &#34;$tmux_version &amp;gt;= 3.0&#34; | bc)&#34; = 1 ]&#39; \&#xA;    &#34;bind-key -n &#39;C-\\&#39; if-shell \&#34;$is_vim\&#34; &#39;send-keys C-\\\\&#39;  &#39;select-pane -l&#39;&#34;&#xA;&#xA;bind-key -n &#39;C-Space&#39; if-shell &#34;$is_vim&#34; &#39;send-keys C-Space&#39; &#39;select-pane -t:.+&#39;&#xA;&#xA;bind-key -T copy-mode-vi &#39;C-h&#39; select-pane -L&#xA;bind-key -T copy-mode-vi &#39;C-j&#39; select-pane -D&#xA;bind-key -T copy-mode-vi &#39;C-k&#39; select-pane -U&#xA;bind-key -T copy-mode-vi &#39;C-l&#39; select-pane -R&#xA;bind-key -T copy-mode-vi &#39;C-\&#39; select-pane -l&#xA;bind-key -T copy-mode-vi &#39;C-Space&#39; select-pane -t:.+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Tmux Plugin Manager&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, the above is already implemented as a plugin in &lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;TPM&lt;/a&gt; (thanks to &lt;a href=&#34;https://github.com/christoomey/vim-tmux-navigator/?tab=readme-ov-file#tpm&#34;&gt;Chris Toomey&lt;/a&gt;). You just need to append the following lines to your plugins in your &lt;code&gt;tmux.conf&lt;/code&gt; file (though keep in mind this Tmux plugin doesn&#39;t implement &lt;code&gt;C-Space&lt;/code&gt;, as that&#39;s an &lt;code&gt;nvim-tmux-navigation&lt;/code&gt; thing; if you need that, you have to add it manually):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set -g @plugin &#39;christoomey/vim-tmux-navigator&#39;&#xA;run &#39;~/.tmux/plugins/tpm/tpm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Neovim&lt;/h3&gt; &#xA;&lt;p&gt;After you configured &lt;code&gt;tmux&lt;/code&gt;, it&#39;s time to configure &lt;code&gt;neovim&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;p&gt;To configure the keybinds, do (in your &lt;code&gt;init.vim&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-h&amp;gt; &amp;lt;Cmd&amp;gt;NvimTmuxNavigateLeft&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-j&amp;gt; &amp;lt;Cmd&amp;gt;NvimTmuxNavigateDown&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-k&amp;gt; &amp;lt;Cmd&amp;gt;NvimTmuxNavigateUp&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-l&amp;gt; &amp;lt;Cmd&amp;gt;NvimTmuxNavigateRight&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-\&amp;gt; &amp;lt;Cmd&amp;gt;NvimTmuxNavigateLastActive&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-Space&amp;gt; &amp;lt;Cmd&amp;gt;NvimTmuxNavigateNext&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;init.lua&lt;/code&gt;, you can either map the commands manually (probably using &lt;code&gt;vim.keymap.set&lt;/code&gt;), or you can keep on reading to find out how the plugin can do it for you!&lt;/p&gt; &#xA;&lt;p&gt;There are additional settings for the plugin, for example disable navigation between &lt;code&gt;tmux&lt;/code&gt; panes when the current pane is zoomed. To activate this option, just tell the plugin about it (inside the &lt;code&gt;setup&lt;/code&gt; function):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-tmux-navigation&#39;.setup {&#xA;    disable_when_zoomed = true -- defaults to false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, if using &lt;a href=&#34;https://github.com/folke/lazy.nvim/&#34;&gt;lazy.nvim&lt;/a&gt; inside your &lt;code&gt;init.lua&lt;/code&gt;, you can do everything at once:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#39;alexghergh/nvim-tmux-navigation&#39;, config = function()&#xA;&#xA;    local nvim_tmux_nav = require(&#39;nvim-tmux-navigation&#39;)&#xA;&#xA;    nvim_tmux_nav.setup {&#xA;        disable_when_zoomed = true -- defaults to false&#xA;    }&#xA;&#xA;    vim.keymap.set(&#39;n&#39;, &#34;&amp;lt;C-h&amp;gt;&#34;, nvim_tmux_nav.NvimTmuxNavigateLeft)&#xA;    vim.keymap.set(&#39;n&#39;, &#34;&amp;lt;C-j&amp;gt;&#34;, nvim_tmux_nav.NvimTmuxNavigateDown)&#xA;    vim.keymap.set(&#39;n&#39;, &#34;&amp;lt;C-k&amp;gt;&#34;, nvim_tmux_nav.NvimTmuxNavigateUp)&#xA;    vim.keymap.set(&#39;n&#39;, &#34;&amp;lt;C-l&amp;gt;&#34;, nvim_tmux_nav.NvimTmuxNavigateRight)&#xA;    vim.keymap.set(&#39;n&#39;, &#34;&amp;lt;C-\\&amp;gt;&#34;, nvim_tmux_nav.NvimTmuxNavigateLastActive)&#xA;    vim.keymap.set(&#39;n&#39;, &#34;&amp;lt;C-Space&amp;gt;&#34;, nvim_tmux_nav.NvimTmuxNavigateNext)&#xA;&#xA;end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, for a shorter syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#39;alexghergh/nvim-tmux-navigation&#39;, config = function()&#xA;    require&#39;nvim-tmux-navigation&#39;.setup {&#xA;        disable_when_zoomed = true, -- defaults to false&#xA;        keybindings = {&#xA;            left = &#34;&amp;lt;C-h&amp;gt;&#34;,&#xA;            down = &#34;&amp;lt;C-j&amp;gt;&#34;,&#xA;            up = &#34;&amp;lt;C-k&amp;gt;&#34;,&#xA;            right = &#34;&amp;lt;C-l&amp;gt;&#34;,&#xA;            last_active = &#34;&amp;lt;C-\\&amp;gt;&#34;,&#xA;            next = &#34;&amp;lt;C-Space&amp;gt;&#34;,&#xA;        }&#xA;    }&#xA;end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The 2 snippets above are completely equivalent, however the first one gives you more room to play with (for example to call the functions in a different mapping, or if some condition is met, or to ignore &lt;code&gt;silent&lt;/code&gt; in the keymappings, or to additionally call the functions in visual mode as well, etc.).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;!NOTE&lt;/strong&gt;: You need to call the setup function of the plugin at least once, even if empty:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#39;alexghergh/nvim-tmux-navigation&#39;, config = function()&#xA;    require&#39;nvim-tmux-navigation&#39;.setup()&#xA;end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;If you went through the &lt;a href=&#34;https://raw.githubusercontent.com/alexghergh/nvim-tmux-navigation/main/#configuration&#34;&gt;Configuration&lt;/a&gt;, then congrats! You should have a working set up.&lt;/p&gt; &#xA;&lt;p&gt;As a summary, the keybinds are (assuming &lt;code&gt;Ctrl&lt;/code&gt;-prefixed):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + h&lt;/code&gt;: move left&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + j&lt;/code&gt;: move down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + k&lt;/code&gt;: move up&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + l&lt;/code&gt;: move right&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + \&lt;/code&gt;: move to the last (previously active) pane&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + Space&lt;/code&gt; move to the next pane (by pane number)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are also convenience commands already implemented for you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:NvimTmuxNavigateLeft&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:NvimTmuxNavigateDown&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:NvimTmuxNavigateUp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:NvimTmuxNavigateRight&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:NvimTmuxNavigateLastActive&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:NvimTmuxNavigateNext&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;As with everything that&#39;s great in life, there are a ton of alternatives to this plugin. These are great projects, born from the same desire to improve user experience within Tmux and Neovim. Go check them out and see if you like those more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/emilienlemaire/nvimux-navigator&#34;&gt;Nvimux-Navigator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aserowy/tmux.nvim&#34;&gt;tmux.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/illia-danko/ttymux.nvim&#34;&gt;ttymux.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numToStr/Navigator.nvim/&#34;&gt;Navigator.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: The plugin doesn&#39;t work when using &lt;a href=&#34;https://fig.io/&#34;&gt;Fig&lt;/a&gt;. How can I fix it? A: Known problem, see &lt;a href=&#34;https://github.com/christoomey/vim-tmux-navigator/issues/339&#34;&gt;this issue&lt;/a&gt; for a workaround fix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: There&#39;s noticeable slowdown when switching splits/panes. Any fixes for that? A: See &lt;a href=&#34;https://github.com/alexghergh/nvim-tmux-navigation/issues/16&#34;&gt;this issue&lt;/a&gt; for a possible workaround using &lt;code&gt;pgrep&lt;/code&gt; (this might fail to work in some cases though; if you do find such a case please open an issue).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Q: The plugin doesn&#39;t work when interacting with &lt;a href=&#34;https://python-poetry.org/&#34;&gt;Poetry&lt;/a&gt; shells. A: This happens because Poetry spawns sub-tty&#39;s, therefore messing with Tmux&#39;s detection of Vim processes (Tmux cannot see Neovim when run inside Poetry). Until I have time and motivation to work on a fix for this, please see &lt;a href=&#34;https://github.com/alexghergh/nvim-tmux-navigation/issues/13&#34;&gt;this issue&lt;/a&gt; for a few workarounds suggested by the community.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Additional help&lt;/h2&gt; &#xA;&lt;p&gt;For common issues, see &lt;a href=&#34;https://github.com/christoomey/vim-tmux-navigator&#34;&gt;Vim-tmux navigator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For other issues, feature-requests or problems, please open an issue on &lt;a href=&#34;https://github.com/alexghergh/nvim-tmux-navigation&#34;&gt;github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Alexandru Gherghescu (&lt;a href=&#34;mailto:alexghergh@gmail.com&#34;&gt;alexghergh@gmail.com&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;With great thanks to &lt;a href=&#34;https://github.com/christoomey&#34;&gt;Chris Toomey&lt;/a&gt;, whose plugin I used for a long time before Neovim 0.5.0.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under the MIT license. See &lt;a href=&#34;https://github.com/alexghergh/nvim-tmux-navigation/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>