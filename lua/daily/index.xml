<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-24T01:38:49Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bfeber/HLA-NOVR-Script</title>
    <updated>2023-03-24T01:38:49Z</updated>
    <id>tag:github.com,2023-03-24:/bfeber/HLA-NOVR-Script</id>
    <link href="https://github.com/bfeber/HLA-NOVR-Script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NO VR Script for Half-Life: Alyx&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HLA-NOVR-Script&lt;/h1&gt; &#xA;&lt;p&gt;NO VR Script for Half-Life: Alyx&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Copy the &lt;code&gt;game&lt;/code&gt; folder into your main Half-Life: Alyx installation folder (e.g. &lt;code&gt;C:\Program Files (x86)\Steam\steamapps\common\Half-Life Alyx&lt;/code&gt;), replacing existing files.&lt;/p&gt; &#xA;&lt;h2&gt;Playing&lt;/h2&gt; &#xA;&lt;p&gt;Simply add &lt;code&gt;-novr -vsync&lt;/code&gt; to the launch options on Steam and start the game.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;h3&gt;Keyboard and Mouse&lt;/h3&gt; &#xA;&lt;p&gt;Left Click: Select in Main Menu/Throw Held Object/Primary Attack&lt;/p&gt; &#xA;&lt;p&gt;W, A, S, D: Move&lt;/p&gt; &#xA;&lt;p&gt;Space: Jump&lt;/p&gt; &#xA;&lt;p&gt;Ctrl: Crouch&lt;/p&gt; &#xA;&lt;p&gt;Shift: Sprint&lt;/p&gt; &#xA;&lt;p&gt;E: Interact/Pick Up Object&lt;/p&gt; &#xA;&lt;p&gt;F: Flashlight (if you have it)&lt;/p&gt; &#xA;&lt;p&gt;F5: Quick Save&lt;/p&gt; &#xA;&lt;p&gt;F9: Quick Load&lt;/p&gt; &#xA;&lt;p&gt;M: Main Menu&lt;/p&gt; &#xA;&lt;p&gt;P: Pause&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RRethy/nvim-base16</title>
    <updated>2023-03-24T01:38:49Z</updated>
    <id>tag:github.com,2023-03-24:/RRethy/nvim-base16</id>
    <link href="https://github.com/RRethy/nvim-base16" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for building a sync base16 colorscheme. Includes support for Treesitter and LSP highlight groups.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-base16&lt;/h1&gt; &#xA;&lt;p&gt;Neovim plugin for building base16 colorschemes with support for Neovim&#39;s builtin LSP and Treesitter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/21000943/199322658-ecbf8113-fa4b-409b-a562-be4a100de844.mov&#34;&gt;https://user-images.githubusercontent.com/21000943/199322658-ecbf8113-fa4b-409b-a562-be4a100de844.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- All builtin colorschemes can be accessed with |:colorscheme|.&#xA;vim.cmd(&#39;colorscheme base16-gruvbox-dark-soft&#39;)&#xA;&#xA;-- Alternatively, you can provide a table specifying your colors to the setup function.&#xA;require(&#39;base16-colorscheme&#39;).setup({&#xA;    base00 = &#39;#16161D&#39;, base01 = &#39;#2c313c&#39;, base02 = &#39;#3e4451&#39;, base03 = &#39;#6c7891&#39;,&#xA;    base04 = &#39;#565c64&#39;, base05 = &#39;#abb2bf&#39;, base06 = &#39;#9a9bb3&#39;, base07 = &#39;#c5c8e6&#39;,&#xA;    base08 = &#39;#e06c75&#39;, base09 = &#39;#d19a66&#39;, base0A = &#39;#e5c07b&#39;, base0B = &#39;#98c379&#39;,&#xA;    base0C = &#39;#56b6c2&#39;, base0D = &#39;#0184bc&#39;, base0E = &#39;#c678dd&#39;, base0F = &#39;#a06949&#39;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Builtin Colorschemes&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;base16-3024&#xA;base16-apathy&#xA;base16-apprentice&#xA;base16-ashes&#xA;base16-atelier-cave-light&#xA;base16-atelier-cave&#xA;base16-atelier-dune-light&#xA;base16-atelier-dune&#xA;base16-atelier-estuary-light&#xA;base16-atelier-estuary&#xA;base16-atelier-forest-light&#xA;base16-atelier-forest&#xA;base16-atelier-heath-light&#xA;base16-atelier-heath&#xA;base16-atelier-lakeside-light&#xA;base16-atelier-lakeside&#xA;base16-atelier-plateau-light&#xA;base16-atelier-plateau&#xA;base16-atelier-savanna-light&#xA;base16-atelier-savanna&#xA;base16-atelier-seaside-light&#xA;base16-atelier-seaside&#xA;base16-atelier-sulphurpool-light&#xA;base16-atelier-sulphurpool&#xA;base16-atlas&#xA;base16-ayu-dark&#xA;base16-ayu-light&#xA;base16-ayu-mirage&#xA;base16-bespin&#xA;base16-black-metal-bathory&#xA;base16-black-metal-burzum&#xA;base16-black-metal-dark-funeral&#xA;base16-black-metal-gorgoroth&#xA;base16-black-metal-immortal&#xA;base16-black-metal-khold&#xA;base16-black-metal-marduk&#xA;base16-black-metal-mayhem&#xA;base16-black-metal-nile&#xA;base16-black-metal-venom&#xA;base16-black-metal&#xA;base16-blueforest&#xA;base16-blueish&#xA;base16-brewer&#xA;base16-bright&#xA;base16-brogrammer&#xA;base16-brushtrees-dark&#xA;base16-brushtrees&#xA;base16-catppuccin&#xA;base16-chalk&#xA;base16-circus&#xA;base16-classic-dark&#xA;base16-classic-light&#xA;base16-codeschool&#xA;base16-colors&#xA;base16-cupcake&#xA;base16-cupertino&#xA;base16-danqing&#xA;base16-da-one-black&#xA;base16-da-one-gray&#xA;base16-da-one-ocean&#xA;base16-da-one-paper&#xA;base16-da-one-sea&#xA;base16-da-one-white&#xA;base16-darcula&#xA;base16-darkmoss&#xA;base16-darktooth&#xA;base16-darkviolet&#xA;base16-decaf&#xA;base16-default-dark&#xA;base16-default-light&#xA;base16-dirtysea&#xA;base16-dracula&#xA;base16-edge-dark&#xA;base16-edge-light&#xA;base16-eighties&#xA;base16-embers&#xA;base16-emil&#xA;base16-equilibrium-dark&#xA;base16-equilibrium-gray-dark&#xA;base16-equilibrium-gray-light&#xA;base16-equilibrium-light&#xA;base16-espresso&#xA;base16-eva-dim&#xA;base16-eva&#xA;base16-everforest&#xA;base16-flat&#xA;base16-framer&#xA;base16-fruit-soda&#xA;base16-gigavolt&#xA;base16-github&#xA;base16-google-dark&#xA;base16-google-light&#xA;base16-gotham&#xA;base16-grayscale-dark&#xA;base16-grayscale-light&#xA;base16-greenscreen&#xA;base16-gruber&#xA;base16-gruvbox-dark-hard&#xA;base16-gruvbox-dark-medium&#xA;base16-gruvbox-dark-pale&#xA;base16-gruvbox-dark-soft&#xA;base16-gruvbox-light-hard&#xA;base16-gruvbox-light-medium&#xA;base16-gruvbox-light-soft&#xA;base16-gruvbox-material-dark-hard&#xA;base16-gruvbox-material-dark-medium&#xA;base16-gruvbox-material-dark-soft&#xA;base16-gruvbox-material-light-hard&#xA;base16-gruvbox-material-light-medium&#xA;base16-gruvbox-material-light-soft&#xA;base16-hardcore&#xA;base16-harmonic-dark&#xA;base16-harmonic-light&#xA;base16-heetch-light&#xA;base16-heetch&#xA;base16-helios&#xA;base16-hopscotch&#xA;base16-horizon-dark&#xA;base16-horizon-light&#xA;base16-horizon-terminal-dark&#xA;base16-horizon-terminal-light&#xA;base16-humanoid-dark&#xA;base16-humanoid-light&#xA;base16-ia-dark&#xA;base16-ia-light&#xA;base16-icy&#xA;base16-irblack&#xA;base16-isotope&#xA;base16-kanagawa&#xA;base16-katy&#xA;base16-kimber&#xA;base16-lime&#xA;base16-macintosh&#xA;base16-marrakesh&#xA;base16-material-darker&#xA;base16-material-lighter&#xA;base16-material-palenight&#xA;base16-material-vivid&#xA;base16-material&#xA;base16-materia&#xA;base16-mellow-purple&#xA;base16-mexico-light&#xA;base16-mocha&#xA;base16-monokai&#xA;base16-nebula&#xA;base16-nord&#xA;base16-nova&#xA;base16-oceanicnext&#xA;base16-ocean&#xA;base16-onedark&#xA;base16-one-light&#xA;base16-outrun-dark&#xA;base16-pandora&#xA;base16-papercolor-dark&#xA;base16-papercolor-light&#xA;base16-paraiso&#xA;base16-pasque&#xA;base16-phd&#xA;base16-pico&#xA;base16-pinky&#xA;base16-pop&#xA;base16-porple&#xA;base16-primer-dark-dimmed&#xA;base16-primer-dark&#xA;base16-primer-light&#xA;base16-purpledream&#xA;base16-qualia&#xA;base16-railscasts&#xA;base16-rebecca&#xA;base16-rose-pine-dawn&#xA;base16-rose-pine-moon&#xA;base16-rose-pine&#xA;base16-sagelight&#xA;base16-sakura&#xA;base16-sandcastle&#xA;base16-seti&#xA;base16-shadesmear-dark&#xA;base16-shadesmear-light&#xA;base16-shades-of-purple&#xA;base16-shapeshifter&#xA;base16-silk-dark&#xA;base16-silk-light&#xA;base16-snazzy&#xA;base16-solarflare-light&#xA;base16-solarflare&#xA;base16-solarized-dark&#xA;base16-solarized-light&#xA;base16-spaceduck&#xA;base16-spacemacs&#xA;base16-stella&#xA;base16-still-alive&#xA;base16-summercamp&#xA;base16-summerfruit-dark&#xA;base16-summerfruit-light&#xA;base16-synth-midnight-dark&#xA;base16-synth-midnight-light&#xA;base16-tango&#xA;base16-tender&#xA;base16-tokyo-city-dark&#xA;base16-tokyo-city-light&#xA;base16-tokyo-city-terminal-dark&#xA;base16-tokyo-city-terminal-light&#xA;base16-tokyodark-terminal&#xA;base16-tokyodark&#xA;base16-tokyo-night-dark&#xA;base16-tokyo-night-light&#xA;base16-tokyo-night-storm&#xA;base16-tokyo-night-terminal-dark&#xA;base16-tokyo-night-terminal-light&#xA;base16-tokyo-night-terminal-storm&#xA;base16-tomorrow-night-eighties&#xA;base16-tomorrow-night&#xA;base16-tomorrow&#xA;base16-tube&#xA;base16-twilight&#xA;base16-unikitty-dark&#xA;base16-unikitty-light&#xA;base16-unikitty-reversible&#xA;base16-uwunicorn&#xA;base16-vice&#xA;base16-vulcan&#xA;base16-windows-10-light&#xA;base16-windows-10&#xA;base16-windows-95-light&#xA;base16-windows-95&#xA;base16-windows-highcontrast-light&#xA;base16-windows-highcontrast&#xA;base16-windows-nt-light&#xA;base16-windows-nt&#xA;base16-woodland&#xA;base16-xcode-dusk&#xA;base16-zenburn&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>tzachar/cmp-tabnine</title>
    <updated>2023-03-24T01:38:49Z</updated>
    <id>tag:github.com,2023-03-24:/tzachar/cmp-tabnine</id>
    <link href="https://github.com/tzachar/cmp-tabnine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TabNine plugin for hrsh7th/nvim-cmp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cmp-tabnine&lt;/h1&gt; &#xA;&lt;p&gt;Tabnine source for &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;On Linux and Mac, you will need &lt;code&gt;curl&lt;/code&gt; and &lt;code&gt;unzip&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On windows, you just need powershell. If you get a &lt;code&gt;PSSecurityException&lt;/code&gt; while trying to install, try the following command in powershell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information, see &lt;a href=&#34;https:/go.microsoft.com/fwlink/?LinkID=135170&#34;&gt;about_Execution_Policies&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Using a plugin manager&lt;/h2&gt; &#xA;&lt;p&gt;Using plug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;tzachar/cmp-tabnine&#39;, { &#39;do&#39;: &#39;./install.sh&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using plug on windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;tzachar/cmp-tabnine&#39;, { &#39;do&#39;: &#39;powershell ./install.ps1&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim/&#34;&gt;Lazy&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return require(&#34;lazy&#34;).setup({&#xA; {&#xA;     &#39;tzachar/cmp-tabnine&#39;,&#xA;     build = &#39;./install.sh&#39;,&#xA;     dependencies = &#39;hrsh7th/nvim-cmp&#39;,&#xA; }})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/&#34;&gt;Packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return require(&#34;packer&#34;).startup(&#xA; function(use)&#xA; &#x9;use &#34;hrsh7th/nvim-cmp&#34; --completion&#xA; &#x9;use {&#39;tzachar/cmp-tabnine&#39;, run=&#39;./install.sh&#39;, requires = &#39;hrsh7th/nvim-cmp&#39;}&#xA; end&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim/&#34;&gt;Packer&lt;/a&gt; on windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return require(&#34;packer&#34;).startup(&#xA; function(use)&#xA; &#x9;use &#34;hrsh7th/nvim-cmp&#34; --completion&#xA; &#x9;use {&#39;tzachar/cmp-tabnine&#39;, after = &#34;nvim-cmp&#34;, run=&#39;powershell ./install.ps1&#39;, requires = &#39;hrsh7th/nvim-cmp&#39;}&#xA; end&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And later, enable the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;cmp&#39;.setup {&#xA; sources = {&#xA; &#x9;{ name = &#39;cmp_tabnine&#39; },&#xA; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using NvChad&lt;/h2&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://github.com/tzachar/cmp-tabnine/issues/47&#34;&gt;this issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local tabnine = require(&#39;cmp_tabnine.config&#39;)&#xA;&#xA;tabnine:setup({&#xA;&#x9;max_lines = 1000,&#xA;&#x9;max_num_results = 20,&#xA;&#x9;sort = true,&#xA;&#x9;run_on_every_keystroke = true,&#xA;&#x9;snippet_placeholder = &#39;..&#39;,&#xA;&#x9;ignored_file_types = {&#xA;&#x9;&#x9;-- default is not to ignore&#xA;&#x9;&#x9;-- uncomment to ignore in lua:&#xA;&#x9;&#x9;-- lua = true&#xA;&#x9;},&#xA;&#x9;show_prediction_strength = false&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note the use of &lt;code&gt;:&lt;/code&gt; instead of a &lt;code&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configure Tabnine or Log in to Your Account&lt;/h2&gt; &#xA;&lt;p&gt;On &lt;a href=&#34;https://raw.githubusercontent.com/tzachar/cmp-tabnine/main/#More-Commands&#34;&gt;Tabnine Hub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;max_lines&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;How many lines of buffer context to pass to TabNine&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;max_num_results&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;How many results to return&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Sort results by returned priority&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;run_on_every_keystroke&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Generate new completion items on every keystroke. For more info, check out &lt;a href=&#34;https://github.com/tzachar/cmp-tabnine//issues/18&#34;&gt;#18&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;snippet_placeholder&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Indicates where the cursor will be placed in case a completion item is a snippet. Any string is accepted.&lt;/p&gt; &#xA;&lt;p&gt;For this to work properly, you need to setup snippet support for &lt;code&gt;nvim-cmp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;ignored_file_types&lt;/code&gt; &lt;code&gt;(table: &amp;lt;string:bool&amp;gt;)&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Which file types to ignore. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;ignored_file_types = {&#xA;&#x9;html = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will make &lt;code&gt;cmp-tabnine&lt;/code&gt; not offer completions when &lt;code&gt;vim.bo.filetype&lt;/code&gt; is &lt;code&gt;html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;show_prediction_strength&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;show_prediction_strength&lt;/code&gt; is true, &lt;code&gt;cmp-tabnine&lt;/code&gt; will display the prediction strength as a percentage by assigning &lt;code&gt;entry.completion_item.data.detail&lt;/code&gt;. This was previously the default behavior.&lt;/p&gt; &#xA;&lt;h1&gt;Pretty Printing Menu Items&lt;/h1&gt; &#xA;&lt;p&gt;You can use the following to pretty print the completion menu (requires &lt;a href=&#34;https://github.com/onsails/lspkind-nvim&#34;&gt;lspkind&lt;/a&gt; and patched fonts (&lt;a href=&#34;https://www.nerdfonts.com&#34;&gt;https://www.nerdfonts.com&lt;/a&gt;)):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lspkind = require(&#39;lspkind&#39;)&#xA;&#xA;local source_mapping = {&#xA;&#x9;buffer = &#34;[Buffer]&#34;,&#xA;&#x9;nvim_lsp = &#34;[LSP]&#34;,&#xA;&#x9;nvim_lua = &#34;[Lua]&#34;,&#xA;&#x9;cmp_tabnine = &#34;[TN]&#34;,&#xA;&#x9;path = &#34;[Path]&#34;,&#xA;}&#xA;&#xA;require&#39;cmp&#39;.setup {&#xA;&#x9;sources = {&#xA;&#x9;&#x9;{ name = &#39;cmp_tabnine&#39; },&#xA;&#x9;},&#xA;&#x9;formatting = {&#xA;&#x9;&#x9;format = function(entry, vim_item)&#xA;&#x9;&#x9;&#x9;-- if you have lspkind installed, you can use it like&#xA;&#x9;&#x9;&#x9;-- in the following line:&#xA;&#x9; &#x9;&#x9;vim_item.kind = lspkind.symbolic(vim_item.kind, {mode = &#34;symbol&#34;})&#xA;&#x9; &#x9;&#x9;vim_item.menu = source_mapping[entry.source.name]&#xA;&#x9; &#x9;&#x9;if entry.source.name == &#34;cmp_tabnine&#34; then&#xA;&#x9; &#x9;&#x9;&#x9;local detail = (entry.completion_item.data or {}).detail&#xA;&#x9; &#x9;&#x9;&#x9;vim_item.kind = &#34;&#34;&#xA;&#x9; &#x9;&#x9;&#x9;if detail and detail:find(&#39;.*%%.*&#39;) then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;vim_item.kind = vim_item.kind .. &#39; &#39; .. detail&#xA;&#x9; &#x9;&#x9;&#x9;end&#xA;&#xA;&#x9; &#x9;&#x9;&#x9;if (entry.completion_item.data or {}).multiline then&#xA;&#x9; &#x9;&#x9;&#x9;&#x9;vim_item.kind = vim_item.kind .. &#39; &#39; .. &#39;[ML]&#39;&#xA;&#x9; &#x9;&#x9;&#x9;end&#xA;&#x9; &#x9;&#x9;end&#xA;&#x9; &#x9;&#x9;local maxwidth = 80&#xA;&#x9; &#x9;&#x9;vim_item.abbr = string.sub(vim_item.abbr, 1, maxwidth)&#xA;&#x9; &#x9;&#x9;return vim_item&#xA;&#x9;  end,&#xA;&#x9;},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Sorting&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cmp-tabnine&lt;/code&gt; adds a priority entry to each completion item, which can be used to override &lt;code&gt;cmp&lt;/code&gt;&#39;s default sorting order:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local compare = require(&#39;cmp.config.compare&#39;)&#xA;cmp.setup({&#xA;  sorting = {&#xA;    priority_weight = 2,&#xA;    comparators = {&#xA;      require(&#39;cmp_tabnine.compare&#39;),&#xA;      compare.offset,&#xA;      compare.exact,&#xA;      compare.score,&#xA;      compare.recently_used,&#xA;      compare.kind,&#xA;      compare.sort_text,&#xA;      compare.length,&#xA;      compare.order,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Prefetch&lt;/h1&gt; &#xA;&lt;p&gt;TabNine supports prefetching files, preprocessing them before users ask for completions. Prefetching is supported through a command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:CmpTabninePrefetch file_path&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;and also directly using lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;cmp_tabnine&#39;):prefetch(file_path)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The lua api can be used to prefetch a project, or a file on open:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local prefetch = vim.api.nvim_create_augroup(&#34;prefetch&#34;, {clear = true})&#xA;&#xA;vim.api.nvim_create_autocmd(&#39;BufRead&#39;, {&#xA;  group = prefetch,&#xA;  pattern = &#39;*.py&#39;,&#xA;  callback = function()&#xA;    require(&#39;cmp_tabnine&#39;):prefetch(vim.fn.expand(&#39;%:p&#39;))&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Multi-Line suggestions&lt;/h1&gt; &#xA;&lt;p&gt;TabNine supports multi-line suggestions in Pro mode. If a suggestions is multi-line, we add the &lt;code&gt;entry.completion_item.data.detail.multiline&lt;/code&gt; flag to the completion entry and the entire suggestion to the &lt;code&gt;documentation&lt;/code&gt; property of the entry, such that &lt;code&gt;cmp&lt;/code&gt; will display the suggested lines in the documentation panel.&lt;/p&gt; &#xA;&lt;p&gt;To enable multi-line completions, you should (a) have a Pro account and (b) select either the hybrid or cloud completion models in the TabNine Hub.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, TabNine tends to suggest multi-line completions only on a new line (usually after a comment describing what you are expecting to get). The easiest way to trigger the completion is by manually invoking cmp on a new line.&lt;/p&gt; &#xA;&lt;p&gt;Support for multi-line completions in cmp works only from version 4.4.213 of TabNine (see &lt;a href=&#34;https://github.com/codota/tabnine-nvim/issues/6#issuecomment-1364655503&#34;&gt;this issue&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;More Commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:CmpTabnineHub&lt;/code&gt;: Open Tabnine Hub&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:CmpTabnineHubUrl&lt;/code&gt;: Show the link to Tanine Hub&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>