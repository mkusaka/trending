<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-22T01:34:53Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Safe3/uuWAF</title>
    <updated>2022-09-22T01:34:53Z</updated>
    <id>tag:github.com,2022-09-22:/Safe3/uuWAF</id>
    <link href="https://github.com/Safe3/uuWAF" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一款社区驱动的免费、高性能、高扩展顶级Web应用安全防护产品&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;南墙简介&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Safe3/uuWAF&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Safe3/uuWAF.svg?label=%E5%85%B3%E6%B3%A8%C2%A0%E5%8D%97%E5%A2%99&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Safe3/uuWAF/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discuss-%E5%8A%A0%E5%85%A5%E8%AE%A8%E8%AE%BA%E7%BB%84-7289da.svg?style=for-the-badge&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;南墙&lt;/strong&gt;WEB应用防火墙（简称：&lt;code&gt;uuWAF&lt;/code&gt;）一款社区驱动的免费、高性能、高扩展顶级Web应用安全防护产品。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://waf.uusec.com/_media/waf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🏠安装及使用请访问官网： &lt;a href=&#34;https://waf.uusec.com/&#34;&gt;https://waf.uusec.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;❗&lt;/span&gt;注意：南墙 暂不开源，直接下载编译好的二进制文件安装即可，github仓库内主要为社区贡献的规则，每次 uuWAF 发布将自动更新。&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;🎯&lt;/span&gt; 技术优势&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;♎&lt;/span&gt; 先进语义引擎&lt;/p&gt; &lt;p&gt;南墙采用业界领先的&lt;code&gt;SQL、XSS、RCE、LFI&lt;/code&gt; 4种基于语义分析的检测引擎，结合多种深度解码引擎可对&lt;code&gt;base64、json、form-data&lt;/code&gt;等HTTP内容真实还原，从而有效抵御各种绕过WAF的攻击方式，并且相比传统正则匹配具备准确率高、误报率低、效率高等特点，管理员无需维护庞杂的规则库，即可拦截多种攻击类型。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;⛎&lt;/span&gt; 智能0day防御&lt;/p&gt; &lt;p&gt;南墙创新性的运用机器学习技术，使用&lt;strong&gt;异常检测算法&lt;/strong&gt;对http正常与攻击流量进行区分识别，并对正常流量进行白名单威胁建模。通过&lt;strong&gt;机器学习算法&lt;/strong&gt;自动学习正常流量中的参数特征，并转化成对应的参数白名单规则库，可以在面对各种突发0day漏洞时，无需添加规则即可拦截攻击，免除网站管理者一出现漏洞就需挑灯夜战升级的痛苦。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;span&gt;♊&lt;/span&gt; 高级规则引擎&lt;/p&gt; &lt;p&gt;南墙积极运用&lt;code&gt;nginx&lt;/code&gt;和&lt;code&gt;luajit&lt;/code&gt;的高性能、高灵活性特点，除了提供对普通用户友好性较好的传统规则创建模式，还提供了高扩展性、高灵活性的lua脚本规则编写功能，使得有一定编程功底的高级安全管理员可以创造出一系列传统WAF所不能实现的高级漏洞防护规则，用户可以编写一系列插件来扩展WAF现有功能。从而使得在拦截一些复杂漏洞时，可以更加得心应手。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🚀&lt;/span&gt; 快速进阶&lt;/h2&gt; &#xA;&lt;p&gt;南墙为你提供了强大灵活的扩展和安全规则的编写API，在管理后台发布后所有规则无需重启立即生效，远超市面上大部分免费WAF产品如&lt;code&gt;ModSecurity&lt;/code&gt;，规则展示如下：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://waf.uusec.com/_media/rule.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🏠请访问官网： &lt;a href=&#34;https://waf.uusec.com/&#34;&gt;https://waf.uusec.com/&lt;/a&gt; 下载 南墙WAF使用说明书 了解规则API详情&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;💝&lt;/span&gt; 贡献 Rule&lt;/h2&gt; &#xA;&lt;p&gt;参照: &lt;a href=&#34;https://waf.uusec.com/#/guide/contribute&#34;&gt;https://waf.uusec.com/#/guide/contribute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;😘&lt;/span&gt; 加入讨论&lt;/h2&gt; &#xA;&lt;p&gt;欢迎各位就 南墙 的各种bug或功能需求及使用问题，在如下渠道参与讨论&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;问题提交：&lt;a href=&#34;https://github.com/Safe3/uuWAF/issues&#34;&gt;https://github.com/Safe3/uuWAF/issues&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;讨论社区：&lt;a href=&#34;https://github.com/Safe3/uuWAF/discussions&#34;&gt;https://github.com/Safe3/uuWAF/discussions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;官方 QQ 群：11500614&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;官方微信群：微信扫描以下二维码加入&lt;/p&gt; &lt;img src=&#34;https://waf.uusec.com/_media/weixin.jpg&#34; alt=&#34;微信群&#34; height=&#34;200px&#34;&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AckslD/swenv.nvim</title>
    <updated>2022-09-22T01:34:53Z</updated>
    <id>tag:github.com,2022-09-22:/AckslD/swenv.nvim</id>
    <link href="https://github.com/AckslD/swenv.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tiny plugin to quickly switch python virtual environments from within neovim without restarting.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;swenv.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Tiny plugin to quickly switch python virtual environments from within neovim without restarting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23341710/191020632-543e8118-4eea-4964-8d59-1556836b929f.png&#34; alt=&#34;gscreenshot_2022-09-19-144438&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For example using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;AckslD/swenv.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;swenv.api&#39;).pick_venv()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to pick an environment. Uses &lt;code&gt;vim.ui.select&lt;/code&gt; so a tip is to use eg &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To show the current venv in for example a status-line you can call&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;swenv.api&#39;).get_current_venv()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;lualine&lt;/code&gt; there is already a configured component called &lt;code&gt;swenv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Pass a dictionary into &lt;code&gt;require(&#34;swenv&#34;).setup()&lt;/code&gt; with callback functions. These are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;swenv&#39;).setup({&#xA;  -- Should return a list of tables with a `name` and a `path` entry each.&#xA;  -- Gets the argument `venvs_path` set below.&#xA;  -- By default just lists the entries in `venvs_path`.&#xA;  get_venvs = function(venvs_path)&#xA;    return require(&#39;swenv.api&#39;).get_venvs(venvs_path)&#xA;  end,&#xA;  -- Path passed to `get_venvs`.&#xA;  venvs_path = vim.fn.expand(&#39;~/venvs&#39;),&#xA;  -- Something to do after setting an environment&#xA;  post_set_venv = nil,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>anuvyklack/windows.nvim</title>
    <updated>2022-09-22T01:34:53Z</updated>
    <id>tag:github.com,2022-09-22:/anuvyklack/windows.nvim</id>
    <link href="https://github.com/anuvyklack/windows.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically expand width of the current window. Maximizes and restore it. And all this with nice animations!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;windows.nvim&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Automatically expand width of the current window;&lt;/li&gt; &#xA; &lt;li&gt;Maximizes and restores the current window.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And all this with nice animations!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/13056013/190786962-01047891-38b1-4e87-bd9b-e8eca9acc8b8.mp4&#34;&gt;https://user-images.githubusercontent.com/13056013/190786962-01047891-38b1-4e87-bd9b-e8eca9acc8b8.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation and setup&lt;/h2&gt; &#xA;&lt;p&gt;This plugin requires next dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anuvyklack/middleclass&#34;&gt;middleclass&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anuvyklack/animation.nvim&#34;&gt;animation.nvim&lt;/a&gt; — optional, needed if you want animations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Also, if you enable animations, is recommended to set &lt;code&gt;winwidth&lt;/code&gt;, &lt;code&gt;winminwidth&lt;/code&gt; options to some reasonable and equal values (between 5 and 20 will be OK), and disable &lt;code&gt;equalalways&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;You can install and setup &lt;strong&gt;windows.nvim&lt;/strong&gt; with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt; plugin manager using next snippet:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;with animation&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;anuvyklack/windows.nvim&#34;,&#xA;   requires = {&#xA;      &#34;anuvyklack/middleclass&#34;,&#xA;      &#34;anuvyklack/animation.nvim&#34;&#xA;   },&#xA;   config = function()&#xA;      vim.o.winwidth = 10&#xA;      vim.o.winminwidth = 10&#xA;      vim.o.equalalways = false&#xA;      require(&#39;windows&#39;).setup()&#xA;   end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;without animation&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;anuvyklack/windows.nvim&#34;,&#xA;   requires = &#34;anuvyklack/middleclass&#34;,&#xA;   config = function()&#xA;      require(&#39;windows&#39;).setup()&#xA;   end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Read about plugins configuration in the &lt;a href=&#34;https://github.com/anuvyklack/windows.nvim/raw/main/doc/windows.txt&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WindowsEnableAutowidth&lt;/code&gt;&lt;br&gt; &lt;code&gt;:WindowsDisableAutowidth&lt;/code&gt;&lt;br&gt; &lt;code&gt;:WindowsToggleAutowidth&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Enable, disable or toggle auto-width feature.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WindowsMaximize&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Maximize current window. If the window is already maximized, then restore original sizes. When go to another window while current is maximized - all original sizes would restore. If the window will be closed while being maximized, then all other windows would be equalized.&lt;/p&gt; &lt;p&gt;If you want a keymap — &lt;code&gt;&amp;lt;C-w&amp;gt;z&lt;/code&gt; is a fitting choice:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-w&amp;gt;z&#39;, &#39;&amp;lt;Cmd&amp;gt;WindowsMaximize&amp;lt;CR&amp;gt;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Proposals&lt;/h2&gt; &#xA;&lt;p&gt;If you have any proposals, what else can be done with this mechanics, you are welcome to open an issue.&lt;/p&gt;</summary>
  </entry>
</feed>