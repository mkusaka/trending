<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-06T01:35:55Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jason0611/FS22_DashboardLive</title>
    <updated>2023-08-06T01:35:55Z</updated>
    <id>tag:github.com,2023-08-06:/jason0611/FS22_DashboardLive</id>
    <link href="https://github.com/jason0611/FS22_DashboardLive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dashboard Live (short: DBL) can be used with prepared vehicles and then allows you to display all kinds of information in your board computers and/or dashboards in all kinds of tractors, no matter what brand.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FS22_DashboardLive&lt;/h1&gt; &#xA;&lt;p&gt;Dashboard Live (short: DBL) has to be placed into your mod folder. It&#39;s functions have to be built into your vehicles dashboards (xml and i3d, if applicable) and then allows you to display all kinds of information in your board computers and/or dashboards. It&#39;s usable in all kinds of vehicle, no matter what brand or type.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Look out: This is a developer version which can and shurely will contain errors, blow up your logfile with debug entries and maybe break your savegame. So use this version at your own risk&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A zoom function is included for better viewing of displays:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Left shift key + space bar: Short zoom&lt;/li&gt; &#xA; &lt;li&gt;Both shift keys + space bar: Permanent zoom on/off&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If supported in the vehicle, the right Alt key and left/right arrow can be used to scroll through displays.&lt;/p&gt; &#xA;&lt;p&gt;In MultiPlayer game, DBL synchronises engine temperature, fuel and air consumption from the server to the clients.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please report bugs and problems as issues. For ideas and wishes please open a discussion.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here you will find the most actual documentation of DBL: &lt;a href=&#34;https://github.com/jason0611/FS22_DashboardLive/raw/master/doc/DashboardLive.pdf&#34;&gt;https://github.com/jason0611/FS22_DashboardLive/blob/master/doc/DashboardLive.pdf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Feature-Backlog: (+) realized | (-) planned | (?) found no way until now | (%) impossible&#xA;&#xA;== Planned for next ModHub update ==&#xA;+ tippingState (text/number): percent number)&#xA;+ tipSide (boolean / text)&#xA;+ headingText1 (text): N/E/S/W&#xA;+ headingText2 (text): N/NE/E/SE/S/SW/W/NE&#xA;+ fieldNumber (text/number)&#xA;+ baleSize (number/text)&#xA;+ baleCount (number/text, needs )&#xA;+ lockSteeringAxle (boolean, needs lockSteeringAxles-Mod by Ifko)&#xA;+ realClock (text/number): Real-Life-Time&#xA;+ joints=&#34;S&#34;: Selects active (selected) vehicle&#xA;+ combineXP&#xA;+ fillLevel weight (thanks to HiPhi)&#xA;+ actual slip&#xA;+ pipe state&#xA;+ pipe overloading&#xA;+ hasSpec (boolean): test if specialization is present (thanks to HiPhi77)&#xA;+ hasTypeDesc (boolean): test if vehicle or implement is of wanted type&#xA;+ front loader state&#xA;&#xA;== Planned for later ModHub updates ==&#xA;- CVT-Addon&#xA;- precisionFarming&#xA;- cutter turn rate&#xA;? mini-map integration&#xA;? camera integration&#xA;- ISO-Bus: activate dedicated terminal depending on connected implement&#xA;- Generic spec access (functions/values)&#xA;&#xA;-- VanillaIntegration-Backlog:&#xA;+ Rigitrac SKE50&#xA;+ MAN TGS 18.500 4x4&#xA;+ JBC Fastrac 4220&#xA;+ Fendt 1000 Vario&#xA;+ Fendt 700 series (thanks to HiPhi)&#xA;&#xA;-- Internal improvements&#xA;+ trim-function to adapt texts to given length&#xA;- generalization of recursive functions&#xA;+ remove case-sensibility from commands&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>29988122/Fate-Grand-Order_Lua</title>
    <updated>2023-08-06T01:35:55Z</updated>
    <id>tag:github.com,2023-08-06:/29988122/Fate-Grand-Order_Lua</id>
    <link href="https://github.com/29988122/Fate-Grand-Order_Lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fate Grand Order auto battle script - no root needed, for Android use only&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Fate-Grand-Order_Lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.sikuli.org/&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/29988122/Fate-Grand-Order_Lua/master/docs/media/Lua--Sikuli-5.1-blue.svg?sanitize=true&#34; alt=&#34;Lua-5.1-Sikuli&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/29988122/Fate-Grand-Order_Lua/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/29988122/Fate-Grand-Order_Lua/master/docs/media/Fate-Grand-Order_Lua.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Screw those farming events - I only wanna enjoy the (kinoko) story!&lt;/p&gt; &#xA;&lt;p&gt;Therefore I proudly brought you this: FGO automation script.&lt;/p&gt; &#xA;&lt;p&gt; &lt;img alt=&#34;Chaldea&#34; src=&#34;https://camo.githubusercontent.com/19a9a5e1023613c01ba79aa1d03cae17d201f610/68747470733a2f2f7669676e65747465312e77696b69612e6e6f636f6f6b69652e6e65742f666174656772616e646f726465722f696d616765732f322f32642f4368616c6465615f53656375726974795f4f7267616e697a6174696f6e5f4c6f676f2e706e672f7265766973696f6e2f6c61746573742f7363616c652d746f2d77696474682d646f776e2f323030303f63623d3230313631313139303833333437&#34; width=&#34;400&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;This script supported CN, EN, JP and TW servers on Android devices &amp;lt; Oreo 8.0 and emulators.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://29988122.github.io/Fate-Grand-Order_Lua/#/install?id=android-81-and-above&#34;&gt;What if I have &amp;gt; Android 8.1 phone?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;As of 2018.12.30, this script is &lt;strong&gt;working without root&lt;/strong&gt; / without being blocked or banned, although I DO NOT take responsibility for your banned account!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://29988122.github.io/Fate-Grand-Order_Lua/#/account-safety&#34;&gt;Disclaimer and concern about your account&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Please read the &lt;strong&gt;&lt;a href=&#34;https://29988122.github.io/Fate-Grand-Order_Lua/#/&#34;&gt;Documentation&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any questions can be asked in the &#34;Issues&#34; section. Don&#39;t be shy xD&lt;/p&gt; &#xA;&lt;p&gt;Any feature request or bug report is welcome. Please create a new issue and I&#39;ll do my best.&lt;/p&gt; &#xA;&lt;p&gt;Please consider giving our repo a star to encourage us if this script is useful to you : )&lt;/p&gt; &#xA;&lt;p&gt;Enjoy the game!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>calops/hmts.nvim</title>
    <updated>2023-08-06T01:35:55Z</updated>
    <id>tag:github.com,2023-08-06:/calops/hmts.nvim</id>
    <link href="https://github.com/calops/hmts.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Custom treesitter queries for Home Manager nix files, in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hmts.nvim&lt;/h1&gt; &#xA;&lt;p&gt;This neovim plugin allows (thanks to treesitter) highlighting languages contained in strings in various places of a Home Manager configuration &lt;code&gt;nix&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;What it does&lt;/h2&gt; &#xA;&lt;p&gt;Often in a nix configuration, and in particular with home manager, you find yourself inlining files in arbitrary languages as strings. This, by default, gets highlighted as a plain, boring string. This plugin uses treesitter queries to inject the actual language used within the screen, enabling proper highlighting of the language within.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] The default &lt;code&gt;nix&lt;/code&gt; queries from the nvim-treesitter first-party plugin do come with a few injections, but only the trivial ones. Properly detecting more complex stuff requires some lua code, which is what is done in hmts.nvim.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here&#39;s an example of the difference it can make:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Default behavior&lt;/th&gt; &#xA;   &lt;th&gt;With hmts.nvim&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/calops/hmts.nvim/assets/4097716/44ef5636-292e-4932-bcc7-8c6554fca86e&#34; alt=&#34;before&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/calops/hmts.nvim/assets/4097716/16c6a094-8a01-4e6c-b09f-573bb074d8a0&#34; alt=&#34;after&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &lt;code&gt;0.9&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Have &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;treesitter&lt;/a&gt; enabled&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Important] Make sure all the languages you embed are &lt;em&gt;actually installed in treesitter&lt;/em&gt;, with &lt;code&gt;:TSInstall&lt;/code&gt;. Don&#39;t be me, don&#39;t spend hours trying to figure out why your injections don&#39;t work when the parsers aren&#39;t even installed.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;calops/hmts.nvim&lt;/code&gt; with your favorite package manager.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example with &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;calops/hmts.nvim&#34;,&#xA;    version = &#34;*&#34;,&#xA;    ft = &#34;nix&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] It is recommended to follow &lt;em&gt;releases&lt;/em&gt; (all numbered with a semver tag, looking like &lt;code&gt;vX.X.X&lt;/code&gt;) instead of the raw &lt;code&gt;main&lt;/code&gt; branch, as things are expected to break occasionally there. This is done in &lt;code&gt;lazy.nvim&lt;/code&gt; with &lt;code&gt;version = *&lt;/code&gt; (you can choose a more specific version if you prefer).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;re done already.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Automatic language detection&lt;/h3&gt; &#xA;&lt;p&gt;The following features work out-of-the-box without any user intervention.&lt;/p&gt; &#xA;&lt;h4&gt;From filename&lt;/h4&gt; &#xA;&lt;p&gt;When writing a file&#39;s content directly with &lt;code&gt;home.file&lt;/code&gt; or &lt;code&gt;xdg.configFile&lt;/code&gt;, we can infer the language from the specified filename, if possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# Also works with `home.file.*.text`&#xA;xdg.configFile.&#34;myprogram/myScript.py&#34;.text = &#39;&#39;&#xA;    print(&#34;foo&#34;)&#xA;&#39;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From arbitrary program options&lt;/h4&gt; &#xA;&lt;p&gt;Some programs have options asking for code in specific languages. Some of them are implemented in this plugin to automatically setup these arbitrary injections.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Here&#39;s the full list of the currently implemented options.&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Bash (bash language) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.bashrcExtra&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.initExtra&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.logoutExtra&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.profileExtra&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Fish (fish language) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.fish.functions.*&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.fish.interactiveShellInit&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.fish.loginShellInit&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.fish.shellInit&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Zsh (bash language) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.completionInit&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.envExtra&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.initExtraBeforeCompInit&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.initExtraFirst&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.initExtra&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.loginExtra&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.logoutExtra&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.bash.profileExtra&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Firefox (css language) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;programs.firefox.profiles.*.userChrome&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Warning] These implementations are &lt;em&gt;not&lt;/em&gt; exhaustive and may eventually be broken if the program&#39;s options change. If that happens, please use &lt;a href=&#34;https://raw.githubusercontent.com/calops/hmts.nvim/main/#explicit-annotations&#34;&gt;explicit annotations&lt;/a&gt; to set the injection.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!Note] Contributions to implement new programs or fix existing ones are welcome.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Explicit annotations&lt;/h3&gt; &#xA;&lt;h4&gt;From a shebang expression&lt;/h4&gt; &#xA;&lt;p&gt;For languages that support &lt;code&gt;#&lt;/code&gt; comments, if you provide a shebang expression, the language will be inferred whenever possible:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;home.activation.neovim = lib.hm.dag.entryAfter [&#34;linkGeneration&#34;] &#39;&#39;&#xA;    #! /bin/bash&#xA;    echo &#34;Syncing neovim plugins&#34;&#xA;    PATH=&#34;$PATH:${pkgs.git}/bin&#34; $DRY_RUN_CMD ${lib.getExe my.neovim} --headless &#34;+Lazy! restore&#34; +qa&#xA;&#39;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;From a preceding comment&lt;/h4&gt; &#xA;&lt;p&gt;For all the cases not handled by the other features, you can specify the language yourself with a comment right before the string that should be injected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;my_lua_script = /* lua */ &#39;&#39;&#xA;    require(&#34;foo&#34;)&#xA;    return {&#xA;        bar = foo.bar&#xA;    }&#xA;&#39;&#39;;&#xA;&#xA;my_python_script =&#xA;    # python&#xA;    &#39;&#39;&#xA;    import foo&#xA;    print(foo.bar)&#xA;    &#39;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Don&#39;t I need to...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;No. No, you don&#39;t need to call a &lt;code&gt;setup()&lt;/code&gt; function. But there&#39;s still one (that does nothing) if you really feel compelled to. It won&#39;t break anything.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Very few programs are handled right now, but I welcome any addition. Just look through &lt;a href=&#34;https://raw.githubusercontent.com/calops/hmts.nvim/main/queries/nix/injections.scm&#34;&gt;the injections file&lt;/a&gt; and copy what&#39;s already there. It should be pretty straightforward for most things. If it isn&#39;t, don&#39;t hesitate to open an issue.&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Better description in the readme&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Screenshots in the readme&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Benchmark the performance impact and see if the queries can be optimized&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Find a better way to handle nix nodes among string fragments in shebang scripts&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Check the stuff that&#39;s already done on the to-do list&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>