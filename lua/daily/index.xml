<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-11T01:35:16Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qbcore-framework/qb-clothing</title>
    <updated>2022-11-11T01:35:16Z</updated>
    <id>tag:github.com,2022-11-11:/qbcore-framework/qb-clothing</id>
    <link href="https://github.com/qbcore-framework/qb-clothing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clothing Script Used With QB-Core üëï&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-clothing&lt;/h1&gt; &#xA;&lt;p&gt;Clothing for QB-Core Framework &lt;span&gt;üëó&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/66404074/153545004-6337e685-d3a5-478c-8fa2-e50f4b1d2030.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/66404074/153545067-aa9269c9-3bbc-4ce2-bbcf-2dfcff6bbc05.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/66404074/153545114-0a363fa3-5981-424a-9894-baf15ea1da40.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/66404074/153545159-255920cc-baf4-4cbb-a569-29b43298638e.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/66404074/153545179-b4958a16-7ec4-4ae6-a341-ba3786c0042d.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/66404074/153545214-cb308b2f-9fc4-460b-b630-2dbd80033481.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Configurable Ped Selection&lt;/li&gt; &#xA; &lt;li&gt;Detailed nose, chin, jaw, cheek etc. configuration&lt;/li&gt; &#xA; &lt;li&gt;Camera Rotating&lt;/li&gt; &#xA; &lt;li&gt;3 Different Camera Angles&lt;/li&gt; &#xA; &lt;li&gt;Clothing Stores&lt;/li&gt; &#xA; &lt;li&gt;Barbers&lt;/li&gt; &#xA; &lt;li&gt;Job Locker Rooms (Configurable Outfit Presets)&lt;/li&gt; &#xA; &lt;li&gt;Saveable Outfits&lt;/li&gt; &#xA; &lt;li&gt;/hat, /glasses, /mask (See the commands section below)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;/skin (Admin Only) - Opens the clothing menu&lt;/li&gt; &#xA; &lt;li&gt;/hat - Toggles the hat on/off&lt;/li&gt; &#xA; &lt;li&gt;/mask - Toggles the hmaskat on/off&lt;/li&gt; &#xA; &lt;li&gt;/glasses - Toggles the glasses on/off&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the script and put it in the &lt;code&gt;[qb]&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;qb-clothing.sql&lt;/code&gt; in your database&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your server.cfg/resouces.cfg&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;ensure qb-core&#xA;ensure qb-clothing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Please see config.lua&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrjones2014/legendary.nvim</title>
    <updated>2022-11-11T01:35:16Z</updated>
    <id>tag:github.com,2022-11-11:/mrjones2014/legendary.nvim</id>
    <link href="https://github.com/mrjones2014/legendary.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üó∫Ô∏è A legend for your keymaps, commands, and autocmds, with which-key.nvim integration&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;&lt;code&gt;legendary.nvim&lt;/code&gt;&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#features&#34;&gt;Features&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Define your keymaps, commands, and autocommands as simple Lua tables, building a legend at the same time (like VS Code&#39;s Command Palette).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8648891/200827633-7009f5f3-e126-491c-88bd-73a0287978c4.gif&#34; alt=&#34;demo gif&#34;&gt; &lt;br&gt; &lt;sup&gt;Theme used in recording is &lt;a href=&#34;https://github.com/olimorris/onedarkpro.nvim&#34;&gt;onedarkpro.nvim&lt;/a&gt;. The finder UI is handled by &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; via &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt; for details.&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Documentation Table of Contents (click to expand)&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#prerequisites&#34;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#quickstart&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/MAPPING_DEVELOPMENT.md&#34;&gt;Keymap Development Utilities&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/WHICH_KEY.md&#34;&gt;&lt;code&gt;which-key.nvim&lt;/code&gt; Integration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/API.md&#34;&gt;Lua API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/README.md&#34;&gt;Table Structures&lt;/a&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/KEYMAPS.md&#34;&gt;Keymaps&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/COMMANDS.md&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/FUNCTIONS.md&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/AUTOCMDS.md&#34;&gt;&lt;code&gt;augroup&lt;/code&gt;/&lt;code&gt;autocmd&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Define your keymaps, commands, &lt;code&gt;augroup&lt;/code&gt;/&lt;code&gt;autocmd&lt;/code&gt;s, and even arbitrary Lua functions to run on the fly, as simple Lua tables, then bind them with &lt;code&gt;legendary.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Integration with &lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;which-key.nvim&lt;/a&gt;, use your existing &lt;code&gt;which-key.nvim&lt;/code&gt; tables with &lt;code&gt;legendary.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Execute normal, insert, and visual mode keymaps, commands, autocommands, and Lua functions when you select them&lt;/li&gt; &#xA; &lt;li&gt;Show your most recently executed items at the top when triggered via &lt;code&gt;legendary.nvim&lt;/code&gt; (can be disabled via config)&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;code&gt;vim.ui.select()&lt;/code&gt; so it can be hooked up to a fuzzy finder using something like &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt; for a VS Code command palette like interface&lt;/li&gt; &#xA; &lt;li&gt;Buffer-local keymaps, commands, functions and autocmds only appear in the finder for the current buffer&lt;/li&gt; &#xA; &lt;li&gt;Help execute commands that take arguments by prefilling the command line instead of executing immediately&lt;/li&gt; &#xA; &lt;li&gt;Search built-in keymaps and commands along with your user-defined keymaps and commands (may be disabled in config). Notice some missing? Comment on &lt;a href=&#34;https://github.com/mrjones2014/legendary.nvim/discussions/89&#34;&gt;this discussion&lt;/a&gt; or submit a PR!&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;legendary.toolbox&lt;/code&gt; module to help create lazily-evaluated keymaps and commands, and item filter. Have an idea for a new helper? Comment on &lt;a href=&#34;https://github.com/mrjones2014/legendary.nvim/discussions/90&#34;&gt;this discussion&lt;/a&gt; or submit a PR!&lt;/li&gt; &#xA; &lt;li&gt;A parser to convert Vimscript keymap commands (e.g. &lt;code&gt;vnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;f :SomeCommand&amp;lt;CR&amp;gt;&lt;/code&gt;) to &lt;code&gt;legendary.nvim&lt;/code&gt; keymap tables (see &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/API.md#converting-keymaps-from-vimscript&#34;&gt;Converting Keymaps From Vimscript&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Anonymous mappings; show mappings/commands in the finder without having &lt;code&gt;legendary.nvim&lt;/code&gt; handle creating them&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Optional) A &lt;code&gt;vim.ui.select()&lt;/code&gt; handler; this provides the UI for the finder. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;I recommend &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; paired with &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This project uses git tags to adhere to &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning&lt;/a&gt;. To check the latest version, see the &lt;a href=&#34;https://github.com/mrjones2014/legendary.nvim/tags&#34;&gt;git tag list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;packer.nvim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- to use a version&#xA;use({ &#39;mrjones2014/legendary.nvim&#39;, tag = &#39;v2.0.0&#39; })&#xA;-- or, to get rolling updates&#xA;use({ &#39;mrjones2014/legendary.nvim&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With &lt;code&gt;vim-plug&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-VimL&#34;&gt;&#34; to use a version&#xA;Plug &#34;mrjones2014/legendary.nvim&#34;, { &#39;tag&#39;: &#39;v2.0.0&#39; }&#xA;&#34; or, to get rolling updates&#xA;Plug &#34;mrjones2014/legendary.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;Register keymaps through setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;legendary&#39;).setup({&#xA;  keymaps = {&#xA;    -- map keys to a command&#xA;    { &#39;&amp;lt;leader&amp;gt;ff&#39;, &#39;:Telescope find_files&#39;, description = &#39;Find files&#39; },&#xA;    -- map keys to a function&#xA;    { &#39;&amp;lt;leader&amp;gt;h&#39;, function() print(&#39;hello world!&#39;) end, description = &#39;Say hello&#39; },&#xA;    -- keymaps have opts.silent = true by default, but you can override it&#xA;    { &#39;&amp;lt;leader&amp;gt;s&#39;, &#39;:SomeCommand&amp;lt;CR&amp;gt;&#39;, description = &#39;Non-silent keymap&#39;, opts = { silent = false } },&#xA;    -- create keymaps with different implementations per-mode&#xA;    {&#xA;      &#39;&amp;lt;leader&amp;gt;c&#39;,&#xA;      { n = &#39;:LinewiseCommentToggle&amp;lt;CR&amp;gt;&#39;, x = &#34;:&#39;&amp;lt;,&#39;&amp;gt;BlockwiseCommentToggle&amp;lt;CR&amp;gt;&#34; },&#xA;      description = &#39;Toggle comment&#39;&#xA;    },&#xA;  },&#xA;  commands = {&#xA;    -- easily create user commands&#xA;    { &#39;:SayHello&#39;, function() print(&#39;hello world!&#39;) end, description = &#39;Say hello as a command&#39; },&#xA;  },&#xA;  autocmds = {&#xA;    -- Create autocmds and augroups&#xA;    { &#39;BufWritePre&#39;, vim.lsp.buf.format, description = &#39;Format on save&#39; },&#xA;    {&#xA;      name = &#39;MyAugroup&#39;,&#xA;      clear = true,&#xA;      -- autocmds here&#xA;    },&#xA;  },&#xA;  functions = {&#xA;    -- Make arbitrary Lua functions that can be executed via the item finder&#xA;    { function() doSomeStuff() end, description = &#39;Do some stuff with a Lua function!&#39; },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more mapping features and more complicated setups see &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/README.md&#34;&gt;Table Structures&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To trigger the finder for your configured keymaps, commands, &lt;code&gt;augroup&lt;/code&gt;/&lt;code&gt;autocmd&lt;/code&gt;s, and Lua functions:&lt;/p&gt; &#xA;&lt;p&gt;Commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-VimL&#34;&gt;&#34; search keymaps, commands, and autocmds&#xA;:Legendary&#xA;&#xA;&#34; search keymaps&#xA;:Legendary keymaps&#xA;&#xA;&#34; search commands&#xA;:Legendary commands&#xA;&#xA;&#34; search functions&#xA;:Legendary functions&#xA;&#xA;&#34; search autocmds&#xA;:Legendary autocmds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lua API:&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;require(&#39;legend&#39;).find()&lt;/code&gt; function takes an &lt;code&gt;opts&lt;/code&gt; table with the following fields (all optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- pass a list of filter functions or a single filter function with&#xA;  -- the signature `function(item): boolean`&#xA;  -- `require(&#39;legendary.filters&#39;).mode(mode)` and&#xA;  -- `require(&#39;legendary.filters&#39;).current_mode()`&#xA;  -- are provided for convenience&#xA;  filters = {},&#xA;  -- pass a function with the signature `function(item, mode): string[]`&#xA;  -- returning a list of strings where each string is one column&#xA;  -- use this to override the configured formatter for just one call&#xA;  formatter = nil,&#xA;  -- pass a string, or a function that returns a string&#xA;  -- to customize the select prompt for the current call&#xA;  select_prompt = nil,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/USAGE_EXAMPLES.md&#34;&gt;USAGE_EXAMPLES.md&lt;/a&gt; for some advanced usage examples.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Default configuration is shown below. For a detailed explanation of the structure for keymap, command, and &lt;code&gt;augroup&lt;/code&gt;/&lt;code&gt;autocmd&lt;/code&gt; tables, see &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/table_structures/README.md&#34;&gt;doc/table_structures/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;legendary&#39;).setup({&#xA;  -- Initial keymaps to bind&#xA;  keymaps = {},&#xA;  -- Initial commands to bind&#xA;  commands = {},&#xA;  -- Initial augroups/autocmds to bind&#xA;  autocmds = {},&#xA;  -- Initial functions to bidn&#xA;  functions = {},&#xA;  -- Customize the prompt that appears on your vim.ui.select() handler&#xA;  -- Can be a string or a function that returns a string.&#xA;  select_prompt = &#39;Óåï legendary.nvim Óåï&#39;,&#xA;  -- Character to use to separate columns in the UI&#xA;  col_separator_char = &#39;‚îÇ&#39;,&#xA;  -- Optionally pass a custom formatter function. This function&#xA;  -- receives the item as a parameter and the mode that legendary&#xA;  -- was triggered from (e.g. `function(item, mode): string[]`)&#xA;  -- and must return a table of non-nil string values for display.&#xA;  -- It must return the same number of values for each item to work correctly.&#xA;  -- The values will be used as column values when formatted.&#xA;  -- See function `default_format(item)` in&#xA;  -- `lua/legendary/ui/format.lua` to see default implementation.&#xA;  default_item_formatter = nil,&#xA;  -- Include builtins by default, set to false to disable&#xA;  include_builtin = true,&#xA;  -- Include the commands that legendary.nvim creates itself&#xA;  -- in the legend by default, set to false to disable&#xA;  include_legendary_cmds = true,&#xA;  -- Sort most recently used items to the top of the list&#xA;  -- so they can be quickly re-triggered when opening legendary again&#xA;  most_recent_items_at_top = true,&#xA;  which_key = {&#xA;    -- Automatically add which-key tables to legendary&#xA;    -- see ./doc/WHICH_KEY.md for more details&#xA;    auto_register = false,&#xA;    -- you can put which-key.nvim tables here,&#xA;    -- or alternatively have them auto-register,&#xA;    -- see ./doc/WHICH_KEY.md&#xA;    mappings = {},&#xA;    opts = {},&#xA;    -- controls whether legendary.nvim actually binds they keymaps,&#xA;    -- or if you want to let which-key.nvim handle the bindings.&#xA;    -- if not passed, true by default&#xA;    do_binding = true,&#xA;  },&#xA;  scratchpad = {&#xA;    -- How to open the scratchpad buffer,&#xA;    -- &#39;current&#39; for current window, &#39;float&#39;&#xA;    -- for floating window&#xA;    view = &#39;float&#39;,&#xA;    -- How to show the results of evaluated Lua code.&#xA;    -- &#39;print&#39; for `print(result)`, &#39;float&#39; for a floating window.&#xA;    results_view = &#39;float&#39;,&#xA;    -- Border style for floating windows related to the scratchpad&#xA;    float_border = &#39;rounded&#39;,&#xA;    -- Whether to restore scratchpad contents from a cache file&#xA;    keep_contents = true,&#xA;  },&#xA;  -- Directory used for caches&#xA;  cache_path = string.format(&#39;%s/legendary/&#39;, vim.fn.stdpath(&#39;cache&#39;)),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Additional documentation can be found under &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/legendary.nvim/master/doc/&#34;&gt;doc/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chenxuuu/sms_forwarding</title>
    <updated>2022-11-11T01:35:16Z</updated>
    <id>tag:github.com,2022-11-11:/chenxuuu/sms_forwarding</id>
    <link href="https://github.com/chenxuuu/sms_forwarding" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‰ΩéÊàêÊú¨Áü≠‰ø°ËΩ¨ÂèëÂô®&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;‰ΩéÊàêÊú¨Áü≠‰ø°ËΩ¨ÂèëÂô®&lt;/h1&gt; &#xA;&lt;p&gt;‰ΩøÁî®ÊñπÊ≥ïËßÅ&lt;a href=&#34;https://www.chenxublog.com/2022/10/28/19-9-sms-forwarding-air780e-esp32c3.html&#34;&gt;50ÂÖÉÂÜÖËá™Âà∂Áü≠‰ø°ËΩ¨ÂèëÂô®ÔºàAir780E+ESP32C3Ôºâ&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>