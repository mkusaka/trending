<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-08T01:41:00Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Project-Phoenix-FiveM/ProjectPhoenix</title>
    <updated>2023-06-08T01:41:00Z</updated>
    <id>tag:github.com,2023-06-08:/Project-Phoenix-FiveM/ProjectPhoenix</id>
    <link href="https://github.com/Project-Phoenix-FiveM/ProjectPhoenix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A public FiveM Roleplay server for all to use.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ProjectPhoenix&lt;/h1&gt; &#xA;&lt;p&gt;A public FiveM Roleplay server for all to use.&lt;/p&gt; &#xA;&lt;p&gt;This will be updated in the near future, For now head over to our discord!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/yWmGBvhc87&#34;&gt;https://discord.gg/yWmGBvhc87&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>manyids2/htmlgui.nvim</title>
    <updated>2023-06-08T01:41:00Z</updated>
    <id>tag:github.com,2023-06-08:/manyids2/htmlgui.nvim</id>
    <link href="https://github.com/manyids2/htmlgui.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create html + css + lua apps with neovim as &#39;browser&#39;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;htmlgui.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Create html + css + lua apps with neovim as &#39;browser&#39;.&lt;/p&gt; &#xA;&lt;p&gt;The motivation is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim is cross-platform&lt;/li&gt; &#xA; &lt;li&gt;consistent &#39;native ui&#39;&lt;/li&gt; &#xA; &lt;li&gt;already looks good out of the box&lt;/li&gt; &#xA; &lt;li&gt;easy access to features, themes through plugins&lt;/li&gt; &#xA; &lt;li&gt;now supports &lt;code&gt;NVIM_APPNAME&lt;/code&gt;, allowing for standalone apps&lt;/li&gt; &#xA; &lt;li&gt;startup is blazing fast 🔥&lt;/li&gt; &#xA; &lt;li&gt;easy way to share custom widgets, simply using &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;app elements like div, navbar, tabs, toasts, etc. already available&lt;/li&gt; &#xA; &lt;li&gt;package management is automatic with &lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;already has searchable DOM using treesitter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;so technically, possible to render HTML to a &#39;Neovim GUI&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TLDR:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;dom - html&lt;/li&gt; &#xA; &lt;li&gt;style - css&lt;/li&gt; &#xA; &lt;li&gt;script - lua&lt;/li&gt; &#xA; &lt;li&gt;browser - neovim&lt;/li&gt; &#xA; &lt;li&gt;engine - htmlgui.nvim for now&lt;/li&gt; &#xA; &lt;li&gt;elements - htmlgui.html for now ( should have used &lt;code&gt;nui.nvim&lt;/code&gt; )&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is purely a proof of concept, and currently not usable. see fails.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=fK37vlep3v0&#34;&gt;Youtube link to htmlgui.nvim demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/manyids2/htmlgui.nvim/main/screenshots/demo.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;cheapass-diary&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8YGckRxl1p4&#34;&gt;Youtube link to htmlgui.nvim cheapass-diary&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/manyids2/htmlgui.nvim/main/screenshots/cheapass-diary.png&#34; alt=&#34;cheapass-diary&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/manyids2/htmlgui.nvim/main/screenshots/cheapass-diary-edit.png&#34; alt=&#34;cheapass-diary-edit&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;discount-lazygit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FzmfbPZeZIY&#34;&gt;Youtube link to htmlgui.nvim discount-lazygit&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/manyids2/htmlgui.nvim/main/screenshots/discount-lazygit.png&#34; alt=&#34;discount-lazygit&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First install Neovim &amp;gt;= 0.9 ( which supports &lt;code&gt;NVIM_APPNAME&lt;/code&gt; ) from &lt;a href=&#34;https://neovim.io/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install nerdfont of choice from &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;nerdfont&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then clone the repo, install and check out an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/manyids2/htmlgui.nvim&#xA;cd htmlgui.nvim&#xA;&#xA;# Install htmlgui.nvim to `$XDG_CONFIG_DIR/nvim-apps/htmlgui.nvim`&#xA;# Installs shell script to `/usr/bin/htmlgui.nvim`, asks for sudo&#xA;make install&#xA;&#xA;# Check out the main features&#xA;cd examples&#xA;htmlgui.nvim index.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;So many possibilities&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; inbuilt debugger&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hyperlinks with href&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; element definitions and defaults&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; highlights instead of background/foreground using treesitter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; run shell command for element&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; dom in any language supported by treesitter &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;theoretically, can &#39;code&#39; dom, style in absolutely any language&lt;/li&gt; &#xA;   &lt;li&gt;needs examples, actual use cases, like viz python, markdown, etc as webpage&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; providing context with jinja&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; uvloop for animation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &#39;canvas&#39; element&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support entire paths instead of filenames&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; get scripts, styles from plugins like CDN, just need to install with lazy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; get widgets, components similarly&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &#39;config&#39; itself as webpage&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; help with ? per element, global&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; tabbing with treesitter elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;So many details&lt;/h2&gt; &#xA;&lt;h2&gt;Fails&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Not using &lt;code&gt;nui.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; css preference order&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; zoom is wonky when on floats, needs to be disabled/handled there&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; no actual nested multiline divs &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;( for now just divs at depth 1 and single line between &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; no layout engine ( make lua bindings for &lt;a href=&#34;https://yogalayout.com/&#34;&gt;yoga&lt;/a&gt;? )&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; no create / delete elements from callbacks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core modules&lt;/h2&gt; &#xA;&lt;h3&gt;init&lt;/h3&gt; &#xA;&lt;p&gt;Calls &lt;code&gt;app.setup(config)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;app&lt;/h3&gt; &#xA;&lt;p&gt;Module to store state and transitions of htmlgui.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;state.dom&lt;/code&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;state.gui&lt;/code&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;state.css&lt;/code&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;state.lua&lt;/code&gt; -&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;state.data&lt;/code&gt; - store of html elements in body in our format (data)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;script&lt;/code&gt; - reload on &lt;code&gt;set_keymaps&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;style&lt;/code&gt; - reload on rendesr&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;layout&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;element&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ts_css&lt;/h3&gt; &#xA;&lt;h3&gt;ts_html&lt;/h3&gt; &#xA;&lt;h3&gt;html&lt;/h3&gt; &#xA;&lt;h3&gt;utils&lt;/h3&gt;</summary>
  </entry>
  <entry>
    <title>folke/edgy.nvim</title>
    <updated>2023-06-08T01:41:00Z</updated>
    <id>tag:github.com,2023-06-08:/folke/edgy.nvim</id>
    <link href="https://github.com/folke/edgy.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easily create and manage predefined window layouts, bringing a new edge to your workflow&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🪟 edgy.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A Neovim plugin to easily create and manage predefined window layouts, bringing a new edge to your workflow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/folke/edgy.nvim/assets/292349/35e2b30c-4099-4f37-8830-48584529bfd5&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔄 Automatically move windows (including floating windows) in a pre-defined layout&lt;/li&gt; &#xA; &lt;li&gt;📐 Manage layouts while keeping your main editor splits untouched.&lt;/li&gt; &#xA; &lt;li&gt;🔧 Personalize &lt;strong&gt;edgebar&lt;/strong&gt; window options to fit your style.&lt;/li&gt; &#xA; &lt;li&gt;📌 Pinned views are always shown in the edgebar even when they have no windows.&lt;/li&gt; &#xA; &lt;li&gt;⌨️ Make navigation easier with personalized buffer-local &lt;em&gt;keymaps&lt;/em&gt; for &lt;strong&gt;edgebar&lt;/strong&gt; windows.&lt;/li&gt; &#xA; &lt;li&gt;🎆 Pretty animations (works well with &lt;a href=&#34;https://github.com/echasnovski/mini.animate&#34;&gt;mini.animate&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;🧩 Works with any plugin. Check &lt;a href=&#34;https://github.com/folke/edgy.nvim/discussions/categories/show-and-tell&#34;&gt;Show and Tell&lt;/a&gt; for snippets to integrate even better with plugins like &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree.nvim&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;bufferline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;folke/edgy.nvim&#34;,&#xA;  event = &#34;VeryLazy&#34;,&#xA;  opts = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you&#39;re not using &lt;strong&gt;lazy.nvim&lt;/strong&gt;, make sure to call &lt;code&gt;require(&#34;edgy&#34;).setup(opts?)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Recommended &lt;strong&gt;Neovim&lt;/strong&gt; options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- views can only be fully collapsed with the global statusline&#xA;vim.opt.laststatus = 3&#xA;-- Default splitting will cause your main splits to jump when opening an edgebar.&#xA;-- To prevent this, set `splitkeep` to either `screen` or `topline`.&#xA;vim.opt.splitkeep = &#34;screen&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;edgy.nvim&lt;/strong&gt; comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  left = {}, ---@type (Edgy.View.Opts|string)[]&#xA;  bottom = {}, ---@type (Edgy.View.Opts|string)[]&#xA;  right = {}, ---@type (Edgy.View.Opts|string)[]&#xA;  top = {}, ---@type (Edgy.View.Opts|string)[]&#xA;&#xA;  ---@type table&amp;lt;Edgy.Pos, {size:integer, wo?:vim.wo}&amp;gt;&#xA;  options = {&#xA;    left = { size = 30 },&#xA;    bottom = { size = 10 },&#xA;    right = { size = 30 },&#xA;    top = { size = 10 },&#xA;  },&#xA;  -- edgebar animations&#xA;  animate = {&#xA;    enabled = true,&#xA;    fps = 100, -- frames per second&#xA;    cps = 120, -- cells per second&#xA;    on_begin = function()&#xA;      vim.g.minianimate_disable = true&#xA;    end,&#xA;    on_end = function()&#xA;      vim.g.minianimate_disable = false&#xA;    end,&#xA;    -- Spinner for pinned views that are loading.&#xA;    -- if you have noice.nvim installed, you can use any spinner from it, like:&#xA;    -- spinner = require(&#34;noice.util.spinners&#34;).spinners.circleFull,&#xA;    spinner = {&#xA;      frames = { &#34;⠋&#34;, &#34;⠙&#34;, &#34;⠹&#34;, &#34;⠸&#34;, &#34;⠼&#34;, &#34;⠴&#34;, &#34;⠦&#34;, &#34;⠧&#34;, &#34;⠇&#34;, &#34;⠏&#34; },&#xA;      interval = 80,&#xA;    },&#xA;  },&#xA;  -- enable this to exit Neovim when only edgy windows are left&#xA;  exit_when_last = false,&#xA;  -- global window options for edgebar windows&#xA;  ---@type vim.wo&#xA;  wo = {&#xA;    -- Setting to `true`, will add an edgy winbar.&#xA;    -- Setting to `false`, won&#39;t set any winbar.&#xA;    -- Setting to a string, will set the winbar to that string.&#xA;    winbar = true,&#xA;    winfixwidth = true,&#xA;    winfixheight = false,&#xA;    winhighlight = &#34;WinBar:EdgyWinBar,Normal:EdgyNormal&#34;,&#xA;    spell = false,&#xA;    signcolumn = &#34;no&#34;,&#xA;  },&#xA;  -- buffer-local keymaps to be added to edgebar buffers.&#xA;  -- Existing buffer-local keymaps will never be overridden.&#xA;  -- Set to false to disable a builtin.&#xA;  ---@type table&amp;lt;string, fun(win:Edgy.Window)|false&amp;gt;&#xA;  keys = {&#xA;    -- close window&#xA;    [&#34;q&#34;] = function(win)&#xA;      win:close()&#xA;    end,&#xA;    -- hide window&#xA;    [&#34;&amp;lt;c-q&amp;gt;&#34;] = function(win)&#xA;      win:hide()&#xA;    end,&#xA;    -- close sidebar&#xA;    [&#34;Q&#34;] = function(win)&#xA;      win.view.edgebar:close()&#xA;    end,&#xA;    -- next open window&#xA;    [&#34;]w&#34;] = function(win)&#xA;      win:next({ visible = true, focus = true })&#xA;    end,&#xA;    -- previous open window&#xA;    [&#34;[w&#34;] = function(win)&#xA;      win:prev({ visible = true, focus = true })&#xA;    end,&#xA;    -- next loaded window&#xA;    [&#34;]W&#34;] = function(win)&#xA;      win:next({ pinned = false, focus = true })&#xA;    end,&#xA;    -- prev loaded window&#xA;    [&#34;[W&#34;] = function(win)&#xA;      win:prev({ pinned = false, focus = true })&#xA;    end,&#xA;  },&#xA;  icons = {&#xA;    closed = &#34; &#34;,&#xA;    open = &#34; &#34;,&#xA;  },&#xA;  -- enable this on Neovim &amp;lt;= 0.10.0 to properly fold edgebar windows.&#xA;  -- Not needed on a nightly build &amp;gt;= June 5, 2023.&#xA;  fix_win_height = vim.fn.has(&#34;nvim-0.10.0&#34;) == 0,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;👁️ &lt;code&gt;Edgy.View.Opts&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Property&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;ft&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;File type of the view&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;filter&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(buf:buffer, win:window)?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional function to filter buffers and windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;title&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional title of the view. Defaults to the capitalized filetype&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;size&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size of the short edge of the edgebar. For edgebars, this is the minimum width. For panels, minimum height.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;pinned&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If true, the view will always be shown in the edgebar even when it has no windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;open&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun()&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function or command to open a pinned view&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;wo&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vim.wo?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;View-specific window options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;Just open windows/buffers as you normally do, but now they will be displayed in your layout.&lt;/p&gt; &#xA;&lt;h3&gt;⌨️ Keymaps for Edgebar Windows&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Keymap&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close the window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;c-q&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hide the window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close the edgebar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;]w&lt;/code&gt;, &lt;code&gt;[w&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next/Prev open window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;]W&lt;/code&gt;, &lt;code&gt;[W&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Next/Prev loaded window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;🔌 API&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;require(&#34;edgy&#34;).select(pos?, filter?)&lt;/code&gt; select a window with &lt;code&gt;vim.ui.select&lt;/code&gt; in the given position or in all edgebars using an optional filter&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require(&#34;edgy&#34;).close(pos?)&lt;/code&gt; close all edgebars or a edgebar in the given position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require(&#34;edgy&#34;).goto_main()&lt;/code&gt; move the cursor to the last focused main window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require(&#34;edgy&#34;).get_win(window?)&lt;/code&gt; get the Edgy.Window object for the given window or the current window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🪟 Example Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;folke/edgy.nvim&#34;,&#xA;  event = &#34;VeryLazy&#34;,&#xA;  init = function()&#xA;    vim.opt.laststatus = 3&#xA;    vim.opt.splitkeep = &#34;screen&#34;&#xA;  end,&#xA;  opts = {&#xA;    bottom = {&#xA;      -- toggleterm / lazyterm at the bottom with a height of 40% of the screen&#xA;      {&#xA;        ft = &#34;toggleterm&#34;,&#xA;        size = { height = 0.4 },&#xA;        -- exclude floating windows&#xA;        filter = function(buf, win)&#xA;          return vim.api.nvim_win_get_config(win).relative == &#34;&#34;&#xA;        end,&#xA;      },&#xA;      {&#xA;        ft = &#34;lazyterm&#34;,&#xA;        title = &#34;LazyTerm&#34;,&#xA;        size = { height = 0.4 },&#xA;        filter = function(buf)&#xA;          return not vim.b[buf].lazyterm_cmd&#xA;        end,&#xA;      },&#xA;      &#34;Trouble&#34;,&#xA;      { ft = &#34;qf&#34;, title = &#34;QuickFix&#34; },&#xA;      {&#xA;        ft = &#34;help&#34;,&#xA;        size = { height = 20 },&#xA;        -- only show help buffers&#xA;        filter = function(buf)&#xA;          return vim.bo[buf].buftype == &#34;help&#34;&#xA;        end,&#xA;      },&#xA;      { ft = &#34;spectre_panel&#34;, size = { height = 0.4 } },&#xA;    },&#xA;    left = {&#xA;      -- Neo-tree filesystem always takes half the screen height&#xA;      {&#xA;        title = &#34;Neo-Tree&#34;,&#xA;        ft = &#34;neo-tree&#34;,&#xA;        filter = function(buf)&#xA;          return vim.b[buf].neo_tree_source == &#34;filesystem&#34;&#xA;        end,&#xA;        size = { height = 0.5 },&#xA;      },&#xA;      {&#xA;        title = &#34;Neo-Tree Git&#34;,&#xA;        ft = &#34;neo-tree&#34;,&#xA;        filter = function(buf)&#xA;          return vim.b[buf].neo_tree_source == &#34;git_status&#34;&#xA;        end,&#xA;        pinned = true,&#xA;        open = &#34;Neotree position=right git_status&#34;,&#xA;      },&#xA;      {&#xA;        title = &#34;Neo-Tree Buffers&#34;,&#xA;        ft = &#34;neo-tree&#34;,&#xA;        filter = function(buf)&#xA;          return vim.b[buf].neo_tree_source == &#34;buffers&#34;&#xA;        end,&#xA;        pinned = true,&#xA;        open = &#34;Neotree position=top buffers&#34;,&#xA;      },&#xA;      {&#xA;        ft = &#34;Outline&#34;,&#xA;        pinned = true,&#xA;        open = &#34;SymbolsOutline&#34;,&#xA;      },&#xA;      -- any other neo-tree windows&#xA;      &#34;neo-tree&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🐯 Tips &amp;amp; tricks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;disable edgy for a window/buffer by setting &lt;code&gt;vim.b[buf].edgy_disable&lt;/code&gt; or &lt;code&gt;vim.w[win].edgy_disable&lt;/code&gt;. You can even set this after the facts. Edgy will then expunge the window from the layout.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;check the &lt;a href=&#34;https://github.com/folke/edgy.nvim/discussions/categories/show-and-tell&#34;&gt;Show and Tell&lt;/a&gt; section of the github discussions for snippets for better integration with plugins like &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree.nvim&lt;/a&gt;, &lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;bufferline.nvim&lt;/a&gt;, ...&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>