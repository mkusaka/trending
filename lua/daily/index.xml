<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-21T01:32:00Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>muk-as/DOTA2_CLIENT</title>
    <updated>2023-09-21T01:32:00Z</updated>
    <id>tag:github.com,2023-09-21:/muk-as/DOTA2_CLIENT</id>
    <link href="https://github.com/muk-as/DOTA2_CLIENT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>Exafunction/codeium.nvim</title>
    <updated>2023-09-21T01:32:00Z</updated>
    <id>tag:github.com,2023-09-21:/Exafunction/codeium.nvim</id>
    <link href="https://github.com/Exafunction/codeium.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A native neovim extension for Codeium&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; alt=&#34;Codeium&#34; src=&#34;https://raw.githubusercontent.com/Exafunction/codeium.nvim/main/codeium.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/3XFf78nAx5&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/1027685395649015980?label=community&amp;amp;color=5865F2&amp;amp;logo=discord&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=codeiumdev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/style--blue?style=social&amp;amp;logo=twitter&amp;amp;label=Follow%20%40codeiumdev&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/Exafunction/codeium.nvim&#34; alt=&#34;License&#34;&gt; &lt;a href=&#34;https://codeium.com&#34;&gt;&lt;img src=&#34;https://codeium.com/badges/main&#34; alt=&#34;built with Codeium&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Codeium.codeium&#34;&gt;&lt;img src=&#34;https://img.shields.io/visual-studio-marketplace/i/Codeium.codeium?label=Visual%20Studio&amp;amp;logo=visualstudio&#34; alt=&#34;Visual Studio&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://plugins.jetbrains.com/plugin/20540-codeium/&#34;&gt;&lt;img src=&#34;https://img.shields.io/jetbrains/plugin/d/20540?label=JetBrains&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open-vsx.org/extension/Codeium/codeium&#34;&gt;&lt;img src=&#34;https://img.shields.io/open-vsx/dt/Codeium/codeium?label=Open%20VSX&#34; alt=&#34;Open VSX&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/codeium/hobjkcpmjhlegmobgonaagepfckjkceh&#34;&gt;&lt;img src=&#34;https://img.shields.io/chrome-web-store/users/hobjkcpmjhlegmobgonaagepfckjkceh?label=Google%20Chrome&amp;amp;logo=googlechrome&amp;amp;logoColor=FFFFFF&#34; alt=&#34;Google Chrome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;codeium.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Native &lt;a href=&#34;https://www.codeium.com/&#34;&gt;Codeium&lt;/a&gt; plugin for Neovim.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to create an issue/PR if you want to see anything else implemented.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/522465/215312040-d5e91a6b-cffa-48f1-909f-360328b5af79.webm&#34;&gt;Completion in Action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;Exafunction/codeium.nvim&#34;,&#xA;    requires = {&#xA;        &#34;nvim-lua/plenary.nvim&#34;,&#xA;        &#34;hrsh7th/nvim-cmp&#34;,&#xA;    },&#xA;    config = function()&#xA;        require(&#34;codeium&#34;).setup({&#xA;        })&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optional &lt;a href=&#34;https://github.com/jcdickinson/http.nvim&#34;&gt;http.nvim&lt;/a&gt; support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;jcdickinson/http.nvim&#34;,&#xA;    run = &#34;cargo build --workspace --release&#34;&#xA;}&#xA;&#xA;use {&#xA;    &#34;Exafunction/codeium.nvim&#34;,&#xA;    requires = {&#xA;        &#34;jcdickinson/http.nvim&#34;,&#xA;        &#34;nvim-lua/plenary.nvim&#34;,&#xA;        &#34;hrsh7th/nvim-cmp&#34;,&#xA;    },&#xA;    config = function()&#xA;        require(&#34;codeium&#34;).setup({&#xA;        })&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;Exafunction/codeium.nvim&#34;,&#xA;    dependencies = {&#xA;        &#34;nvim-lua/plenary.nvim&#34;,&#xA;        &#34;hrsh7th/nvim-cmp&#34;,&#xA;    },&#xA;    config = function()&#xA;        require(&#34;codeium&#34;).setup({&#xA;        })&#xA;    end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Optional &lt;a href=&#34;https://github.com/jcdickinson/http.nvim&#34;&gt;http.nvim&lt;/a&gt; support&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    {&#xA;        &#34;jcdickinson/http.nvim&#34;,&#xA;        build = &#34;cargo build --workspace --release&#34;&#xA;    },&#xA;    {&#xA;        &#34;Exafunction/codeium.nvim&#34;,&#xA;        dependencies = {&#xA;            &#34;jcdickinson/http.nvim&#34;,&#xA;            &#34;nvim-lua/plenary.nvim&#34;,&#xA;            &#34;hrsh7th/nvim-cmp&#34;,&#xA;        },&#xA;        config = function()&#xA;            require(&#34;codeium&#34;).setup({&#xA;            })&#xA;        end&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;After installation and configuration, you will need to authenticate with Codeium. This can be done by running &lt;code&gt;:Codeium Auth&lt;/code&gt;, copying the token from your browser and pasting it into API token request.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;config_path&lt;/code&gt;: the path to the config file, used to store the API key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bin_path&lt;/code&gt;: the path to the directory where the Codeium server will be downloaded to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;api&lt;/code&gt;: information about the API server to use:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;host&lt;/code&gt;: the hostname&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;port&lt;/code&gt;: the port&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;tools&lt;/code&gt;: paths to binaries used by the plugin:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;uname&lt;/code&gt;: not needed on Windows, defaults given.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;uuidgen&lt;/code&gt;: not needed on Windows, default implemenation given.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;gzip&lt;/code&gt;: not needed on Windows, default implemenation given using powershell.exe Expand-Archive instead&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;language_server&lt;/code&gt;: The path to the language server downloaded from the &lt;a href=&#34;https://github.com/Exafunction/codeium/releases/tag/language-server-v1.1.32&#34;&gt;official source.&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;wrapper&lt;/code&gt;: the path to a wrapper script/binary that is used to execute any binaries not listed under &lt;code&gt;tools&lt;/code&gt;. This is primarily useful for NixOS, where a FHS wrapper can be used for the downloaded codeium server.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;After calling &lt;code&gt;setup&lt;/code&gt;, this plugin will register a source in nvim-cmp. nvim-cmp can then be set up to use this source using the &lt;code&gt;sources&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cmp.setup({&#xA;    -- ...&#xA;    sources = {&#xA;        -- ...&#xA;        { name = &#34;codeium&#34; }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set a symbol for codeium using lspkind, use the &lt;code&gt;Codeium&lt;/code&gt; keyword. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cmp.setup({&#xA;    -- ...&#xA;    formatting = {&#xA;        format = require(&#39;lspkind&#39;).cmp_format({&#xA;            mode = &#34;symbol&#34;,&#xA;            maxwidth = 50,&#xA;            ellipsis_char = &#39;...&#39;,&#xA;            symbol_map = { Codeium = &#34;ÔÉê&#34;, }&#xA;        })&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The plugin log is written to &lt;code&gt;~/.cache/nvim/codeium.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can set the logging level to one of &lt;code&gt;trace&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; by exporting the &lt;code&gt;DEBUG_CODEIUM&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This plugin was initially developed by &lt;a href=&#34;https://github.com/jcdickinson&#34;&gt;@jcdickinson&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mikesmithgh/kitty-scrollback.nvim</title>
    <updated>2023-09-21T01:32:00Z</updated>
    <id>tag:github.com,2023-09-21:/mikesmithgh/kitty-scrollback.nvim</id>
    <link href="https://github.com/mikesmithgh/kitty-scrollback.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üòΩ Open your Kitty scrollback buffer with Neovim. Ameowzing!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/a7357844-e0e4-4053-8c77-6d129528504f&#34; alt=&#34;kitty-scrollback&#34; style=&#34;width: 20%&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;üòΩ kitty-scrollback.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Navigate your Kitty scrollback buffer to quickly search, copy, or execute commands in Neovim.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://neovim.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=neovim&amp;amp;message=v0.10%2b&amp;amp;logo=neovim&amp;amp;labelColor=282828&amp;amp;logoColor=8faa80&amp;amp;color=414b32&#34; alt=&#34;neovim: v0.10+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/v0.29%2B-352217?style=flat-square&amp;amp;logo=data%3Aimage%2Fjpeg%3Bbase64%2C%2F9j%2F4AAQSkZJRgABAQAAAQABAAD%2F4gHYSUNDX1BST0ZJTEUAAQEAAAHIAAAAAAQwAABtbnRyUkdCIFhZWiAH4AABAAEAAAAAAABhY3NwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlkZXNjAAAA8AAAACRyWFlaAAABFAAAABRnWFlaAAABKAAAABRiWFlaAAABPAAAABR3dHB0AAABUAAAABRyVFJDAAABZAAAAChnVFJDAAABZAAAAChiVFJDAAABZAAAAChjcHJ0AAABjAAAADxtbHVjAAAAAAAAAAEAAAAMZW5VUwAAAAgAAAAcAHMAUgBHAEJYWVogAAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9YWVogAAAAAAAA9tYAAQAAAADTLXBhcmEAAAAAAAQAAAACZmYAAPKnAAANWQAAE9AAAApbAAAAAAAAAABtbHVjAAAAAAAAAAEAAAAMZW5VUwAAACAAAAAcAEcAbwBvAGcAbABlACAASQBuAGMALgAgADIAMAAxADb%2F2wBDACodICUgGiolIiUvLSoyP2lEPzo6P4FcYUxpmYagnpaGk5GovfLNqLPltZGT0v%2FV5fr%2F%2F%2F%2F%2Fo8v%2F%2F%2F%2F%2F%2F%2FL%2F%2F%2F%2F%2F2wBDAS0vLz83P3xERHz%2FrpOu%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwAARCAEAAQADASIAAhEBAxEB%2F8QAGgABAAMBAQEAAAAAAAAAAAAAAAECAwQFBv%2FEAC8QAQACAQIEAgkFAQEAAAAAAAABAgMEERIhMVFBYQUTFCIyUnGRoUJTgZLB4SP%2FxAAXAQEBAQEAAAAAAAAAAAAAAAAAAQID%2F8QAGxEBAQEBAQEBAQAAAAAAAAAAAAERAhIhMUH%2F2gAMAwEAAhEDEQA%2FAPHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHXix1ikTtG8rzWs9ax9mfTXlwjrtgpPht9GVtPaPhnddieaxCYmJ2mNhUAiJmdojdpXBefCI%2BppjMbxpu9vwt7NXvKbF81zDp9mr3lWdN2t%2BDYeawGlsF48In6M5iYnnEwupgBETM7RG4A2rp7T8U7NK4KR4b%2FVNi%2Ba5R2xSsdKx9lcuOs0mdoiYhPS%2BXIA0yAAAAAAAAAA7MU746z5LsNNb3Zr2bud%2FXSfgAiotWLRtaN2UaesTvO8x2bC6YiIiI2iNkggAAAAImImNpjdIDGdPWZ3jeI7Na1isbVjZIumACAplnbHafJdhqbbVivdZ%2BpfxzgOjmAAAAAABtunhnsCBPDPZALY7cF4n7u1wOnT5N68M9Y6M9RrmtgGGwAATFLW%2BGsz9IJiYnaYmPqCAAAAAiJmdoiZnyWml6xvNbR9YBUAAABx5b8eSZ8PBvnvw02jrLlb5jHV%2FgCeGezTKBPDPZG2wAAAJisgg3nutwx3TwwmrisWlaJiUcMI4T4fUzWCsTF4267o3mq1bc%2FMHYKY78Uea7DoPQ02krWItkje3afBzaOkX1Fd%2Bkc3qNcxnqit6VvG16xMeaMlprtELVneIknUtxh5uq03qZ4q86T%2BHO9jNSMmK1Z8YeOlmOnN0b6XTzmtvblSOvmwevgpFMNKx25kmnVxalK442pWIjyWRadqzKuO02336r6kuObDU6St4m2ONrdo6S87o9t5mtpFNRO36o3Oo3zXOCmTJFeUdWWnNliZy23RFY8VrW57zzlTebNua0zEKzaThTwwfD6rvPcX4YRwx3NMVEzWUKgAALRXunesdk1cU3nunilbihpSsTG8gzj3vCUxXhtE7dJbgqs0%2FXjlpS3FXdTaazvX7d167Tzjlv1ZrUdWhtFdRG%2FjGz03iRMxMTHKYepp9RXNXaZ2v4wvNZ6i2X4o%2Bi%2BP4ILVi3VPKI7RDM5s6tZRktFMdrT4Ru8Z16zUxf8A86TvXxnu5F6rfMHsYrRfFW0eMPHdWj1MY%2FcvPuz0nsc06mu7J8CuLrLTlaO8SitYrHJLzb3Kws83X2i2o2j9MbOzUaiuGve3hDy7TNrTaZ3mectdVrmKZL8Fd%2FsypT9eWf4a2iN4tPPbpCm02ne327JGqyvXjvNoidlZ93wl0DWMuXilG89296REbwz4oEUF96yiax4GmKgKgAAtjpxz5Kt8HwT9QXisVjlCQRQAAAF6zunp0YZbzSu8TtLL12T5vwnlr09GuqzVjaMk%2FwA81b5smT47zMdnB67J834PXZPm%2FBlNjsb10ma0b8G31l5sZ8kTvFua%2Ftup%2Fev9zyXp3zpM0fo3%2BksJiYnaY2mHP7bqf3r%2FAHUnPlmZmbzMz4nlJ07qZsmP4LzEdl51Wa0bTkn%2BOTzfXZPm%2FB67J834Mq%2Bo7JmZneecomdnJ67J834a4rzeJ4p3lPJ6XmdwGkABBW1K26wsA5r0mk%2BSrfP8H8sFQAAAAXx34J59JUAdUTExyndLkImYneBddYyrm5e9H2JzRtyj7g0m0R1mIVnLWPHdzzMzO89QNTe03neUAIAAAAAAAAJpaazvCAHRXLWevJaLRPSYlykTMTvAuusZVzRt70fYtm5e7H3BqiZiOs7OWZmZ3nqBq%2BS%2FHPLpCgCAAAAAAAAAAAALY8d8s7Y6WtPlCLVtS01tExMdYl6vobJj4L4%2BUZN9%2FrDp12jrqqbxtGSOk%2F5IPAFslLY7zS8TFo6xKoAAAAAAAAAAAAAAAAAAAAAAAAAAAAJpa1LRaszFo6TD3dBra6mvDfaMsdY7vBTW1qWi1ZmLR0mAe9rtHXVU3jaMkdJ%2FyXhZKWx3ml4mLR1h7eg1tdTXhvtGWOsd1tdo66qm8bRkjpP%2BSDwBOSlsd5peJi0dYQAAAAAAAAAAAAAAAAAAAAAAAAAAAACa2tS0WrMxaOkw93QayNVThtyyVjn5%2BbxcGG%2BoyxTHG8z%2BHv6XTU02Phrzmetu4M9fo66jHNo5ZKxynv5PAex6S10Y4nDine88rT2eOAAAAAAAAAAAAAAAAAAAAAAAAAAA0wYb6jLFMcbzP4MGG%2BoyxTHG8z%2BHv6XTU02Lhpzmetu4Gl01NNj4a85nrbu5fSOv9VE4sM%2B%2F4z8v%2FT0jr%2FVb4sM%2B%2FwCNvl%2F68br1A6zzAAF64ct43pjvaO8VmU%2BzZ%2F2cn9ZBmNfZs%2F7OT%2Bsns2f9nJ%2FWQZDT2bP%2Bzk%2FrKLYctI3vjvWO81mAUAAAAAAAAAAAAAAAAAAAB6vobJirjvWZiMkzvz8YX9IekIxxOLBaJvPW0eDxwDr1AAI68%2BgA%2BmwXx2xVnFMTXblsu%2BWAfVIfLAPqVM18dMVpyzEV257vmQCevIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH%2F9k%3D&amp;amp;label=kitty&amp;amp;labelColor=282828&#34; alt=&#34;kitty v0.29+&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?style=flat-square&amp;amp;label=semantic-release&amp;amp;message=angular&amp;amp;logo=semantic-release&amp;amp;labelColor=282828&amp;amp;logoColor=d8869b&amp;amp;color=8f3f71&#34; alt=&#34;semantic-release: angular&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/Demo&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/6dd229dd-0206-4d50-b627-f5f0f5fe8cd1&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/6dd229dd-0206-4d50-b627-f5f0f5fe8cd1&#34;&gt; &#xA;  &lt;img alt=&#34;kitty-scrollback.nvim demo&#34; src=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/6dd229dd-0206-4d50-b627-f5f0f5fe8cd1&#34;&gt; &#xA; &lt;/picture&gt; &lt;/a&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üòª Navigate Kitty&#39;s scrollback buffer with Neovim&lt;/li&gt; &#xA; &lt;li&gt;üê± Copy contents from Neovim to system clipboard&lt;/li&gt; &#xA; &lt;li&gt;üò∫ Send contents from Neovim to Kitty shell&lt;/li&gt; &#xA; &lt;li&gt;üôÄ Execute shell command from Neovim to Kitty shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§Ø Example use cases&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Copy scrollback text to the clipboard&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open Kitty&#39;s scrollback history (default mapping &lt;code&gt;&amp;lt;C-S-h&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Search backward for a pattern in Neovim &lt;code&gt;?{pattern}&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Enter Visual mode &lt;code&gt;v&lt;/code&gt; and select desired text&lt;/li&gt; &#xA;  &lt;li&gt;Copy selection to clipboard (default mapping &lt;code&gt;&amp;lt;leader&amp;gt;y&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; automatically closes and returns to Kitty&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Modify and execute command&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open Kitty&#39;s scrollback history (default mapping &lt;code&gt;&amp;lt;C-S-h&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Copy desired selection to clipboard (e.g., &lt;code&gt;yy&lt;/code&gt;) &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Alternatively, you could just enter Insert mode (&lt;code&gt;i&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt;) to open an empty floating window (similar to &lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-e&amp;gt;&lt;/code&gt; in Bash)&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; opens a floating window in Neovim with the contents of the selection&lt;/li&gt; &#xA;  &lt;li&gt;Modify the content&lt;/li&gt; &#xA;  &lt;li&gt;Execute the command (default mapping &lt;code&gt;&amp;lt;C-CR&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; automatically closes and executes the command in Kitty&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Modify and paste content&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Open Kitty&#39;s scrollback history (default mapping &lt;code&gt;&amp;lt;C-S-h&amp;gt;&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;Copy desired selection to clipboard (e.g., &lt;code&gt;yy&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; opens a floating window in Neovim with the contents of the selection&lt;/li&gt; &#xA;  &lt;li&gt;Modify the content &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Note: you can close (default mapping &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt;) and reopen (yank or enter Insert mode) the floating window multiple times&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;Paste the content (default mapping &lt;code&gt;&amp;lt;S-CR&amp;gt;&lt;/code&gt; or &lt;code&gt;:w&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; automatically closes and paste the contents in Kitty for further editing&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üìö Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &lt;a href=&#34;https://github.com/neovim/neovim/releases&#34;&gt;v0.10+&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kitty &lt;a href=&#34;https://github.com/kovidgoyal/kitty/releases&#34;&gt;v0.29+&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üèÉ Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To quickly test this plugin without changing your configuration run the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh -c &#34;$(curl -s https://raw.githubusercontent.com/mikesmithgh/kitty-scrollback.nvim/main/scripts/mini.sh)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; It is good practice to first &lt;a href=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/raw/main/scripts/mini.sh&#34;&gt;read the script&lt;/a&gt; before running &lt;code&gt;sh -c&lt;/code&gt; directly from the web&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  {&#xA;    &#39;mikesmithgh/kitty-scrollback.nvim&#39;,&#xA;    enabled = true,&#xA;    lazy = true,&#xA;    cmd = { &#39;KittyScrollbackGenerateKittens&#39;, &#39;KittyScrollbackCheckHealth&#39; },&#xA;    config = function()&#xA;      require(&#39;kitty-scrollback&#39;).setup()&#xA;    end,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using Neovim&#39;s built-in package support &lt;a href=&#34;https://neovim.io/doc/user/usr_05.html#05.4&#34;&gt;pack&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &#34;$HOME/.local/share/nvim/site/pack/mikesmithgh/start/&#34;&#xA;cd $HOME/.local/share/nvim/site/pack/mikesmithgh/start&#xA;git clone git@github.com:mikesmithgh/kitty-scrollback.nvim.git&#xA;nvim -u NONE -c &#34;helptags kitty-scrollback.nvim/doc&#34; -c q&#xA;mkdir -p &#34;$HOME/.config/nvim&#34;&#xA;echo &#34;require(&#39;kitty-scrollback&#39;).setup()&#34; &amp;gt;&amp;gt; &#34;$HOME/.config/nvim/init.lua&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;‚úçÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Kitty&lt;/h3&gt; &#xA;&lt;p&gt;The following steps outline how to properly configure &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/&#34;&gt;kitty.conf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Enable &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.allow_remote_control&#34;&gt;allow_remote_control&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Valid values are &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;socket&lt;/code&gt;, &lt;code&gt;socket-only&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;If &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; is the only application controlling Kitty then &lt;code&gt;socket-only&lt;/code&gt; is preferred to continue denying TTY requests.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Set &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.listen_on&#34;&gt;listen_on&lt;/a&gt; to a Unix socket&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;For example, &lt;code&gt;listen_on unix:/tmp/kitty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Enable &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/#opt-kitty.shell_integration&#34;&gt;shell_integration&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Set &lt;code&gt;shell_integration&lt;/code&gt; to &lt;code&gt;enabled&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Do not add the option &lt;code&gt;no-prompt-mark&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Add &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; mappings&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Generate default Kitten mappings and add to &lt;code&gt;kitty.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim --headless +&#39;KittyScrollbackGenerateKittens&#39; +&#39;set nonumber&#39; +&#39;set norelativenumber&#39; +&#39;%print&#39; +&#39;quit!&#39; 2&amp;gt;&amp;amp;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Completely close and reopen Kitty&lt;/summary&gt; &#xA;&lt;/details&gt;  &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Check the health of &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim +&#39;KittyScrollbackCheckHealth&#39; +&#39;quit!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Follow the instructions of any &lt;code&gt;ERROR&lt;/code&gt; or &lt;code&gt;WARNINGS&lt;/code&gt; reported during the healthcheck&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Test &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; is working as expected by pressing &lt;code&gt;ctrl+shift+h&lt;/code&gt; to open the scrollback buffer in Neovim&lt;/summary&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See example &lt;code&gt;kitty.conf&lt;/code&gt; for reference&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;allow_remote_control yes&#xA;listen_on unix:/tmp/kitty&#xA;shell_integration enabled&#xA;&#xA;# kitty-scrollback.nvim Kitten alias&#xA;action_alias kitty_scrollback_nvim kitten /Users/mike/gitrepos/kitty-scrollback.nvim/python/kitty_scrollback_nvim.py --cwd /Users/mike/gitrepos/kitty-scrollback.nvim/lua/kitty-scrollback/configs&#xA;&#xA;# Browse scrollback buffer in nvim&#xA;map ctrl+shift+h kitty_scrollback_nvim&#xA;# Browse output of the last shell command in nvim&#xA;map ctrl+shift+g kitty_scrollback_nvim --config-file get_text_last_cmd_output.lua&#xA;# Show clicked command output in nvim&#xA;mouse_map ctrl+shift+right press ungrabbed combine : mouse_select_command_output : kitty_scrollback_nvim --config-file get_text_last_visited_cmd_output.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Kitten arguments&lt;/h3&gt; &#xA;&lt;p&gt;Arguments that can be passed to the &lt;code&gt;kitty_scrollback_nvim&lt;/code&gt; Kitten defined in &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf/&#34;&gt;kitty.conf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Argument&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--config-file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; plugin configuration file. The configuration file must return a Lua table with the function &lt;code&gt;config(kitty_data): table&lt;/code&gt;. You may specify multiple config files that will merge all configuration options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--no-nvim-args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not provide any arguments to the Neovim instance that displays the scrollback buffer. The default arguments passed to Neovim are &lt;code&gt;--clean --noplugin -n&lt;/code&gt;. This flag removes those options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--nvim-args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;All arguments after this flag are passed to the Neovim instance that displays the scrollback buffer. This must be the last of the &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; Kitten arguments that are configured. Otherwise, you may unintentionally send the wrong arguments to Neovim. The default arguments passed to Neovim are &lt;code&gt;--clean --noplugin -n&lt;/code&gt;. This flag removes those options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--env&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Environment variable that is passed to the Neovim instance that displays the scrollback buffer. Format is &lt;code&gt;--env var_name=var_value&lt;/code&gt;. You may specify multiple config files that will merge all configuration options. Useful for setting &lt;code&gt;NVIM_APPNAME&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;--cwd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The current working directory of the Neovim instance that displays the scrollback buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;&lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; configuration file&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Options&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callbacks&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbCallbacks?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;fire and forget callback functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callbacks.after_setup&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(kitty_data: KsbKittyData, opts: KsbOpts)?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callback executed after initializing kitty-scrollback.nvim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callbacks.after_launch&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(kitty_data: KsbKittyData, opts: KsbOpts)?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callback executed after launch started to process the scrollback buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callbacks.after_ready&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(kitty_data: KsbKittyData, opts: KsbOpts)?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;callback executed after scrollback buffer is loaded and cursor is positioned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;keymaps_enabled&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;if true, enabled all default keymaps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;restore_options&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;if true, restore options that were modified while processing the scrollback buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbHighlights?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty-scrollback.nvim highlight overrides&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimNormal&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window Normal highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimHeart&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window heart icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimSpinner&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window spinner icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimReady&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window ready icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimKitty&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window kitty icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimVim&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status window vim icon highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimPasteWinNormal&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste window Normal highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimPasteWinFloatBorder&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste window FloatBorder highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;highlight_overrides&lt;br&gt;.KittyScrollbackNvimPasteWinFloatTitle&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste window FloatTitle highlight group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbStatusWindowOpts?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;options for status window indicating that kitty-scrollback.nvim is ready&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window.enabled&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, show status window in upper right corner of the screen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window.style_simple&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, use plaintext instead of nerd font icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window.autoclose&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, close the status window after kitty-scrollback.nvim is ready&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;status_window.show_timer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, show a timer in the status window while kitty-scrollback.nvim is loading&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbPasteWindowOpts?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;options for paste window that sends commands to Kitty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.highlight_as_normal_win&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(): boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If function returns true, use Normal highlight group. If false, use NormalFloat&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.filetype&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The filetype of the paste window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.hide_footer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, hide the footer when the paste window is initially opened&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.winblend&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;integer?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;The winblend setting of the window, see :help winblend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.winopts_overrides&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(paste_winopts: KsbWinOpts): table&amp;lt;string,any&amp;gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Paste float window overrides, see nvim_open_win() for configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;paste_window.footer_winopts_overrides&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;fun(footer_winopts: KsbWinOpts, paste_winopts: KsbWinOpts): table&amp;lt;string,any&amp;gt;?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Paste footer window overrides, see nvim_open_win() for configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty_get_text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;KsbKittyGetText?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;options passed to get-text when reading scrollback buffer, see &lt;code&gt;kitty @ get-text --help&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty_get_text.ansi&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, the text will include the ANSI formatting escape codes for colors, bold, italic, etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty_get_text.clear_selection&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If true, clear the selection in the matched window, if any.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;kitty_get_text.extent&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;What text to get. The default of screen means all text currently on the screen. all means all the &lt;code&gt;screen+scrollback&lt;/code&gt; and selection means the currently selected text. &lt;code&gt;first_cmd_output_on_screen&lt;/code&gt; means the output of the first command that was run in the window on screen. &lt;code&gt;last_cmd_output&lt;/code&gt; means the output of the last command that was run in the window. &lt;code&gt;last_visited_cmd_output&lt;/code&gt; means the first command output below the last scrolled position via scroll_to_prompt. &lt;code&gt;last_non_empty_output&lt;/code&gt; is the output from the last command run in the window that had some non empty output. The last four require &lt;code&gt;shell_integration&lt;/code&gt; to be enabled. Choices: &lt;code&gt;screen&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;first_cmd_output_on_screen&lt;/code&gt;, &lt;code&gt;last_cmd_output&lt;/code&gt;, &lt;code&gt;last_non_empty_output&lt;/code&gt;, &lt;code&gt;last_visited_cmd_output&lt;/code&gt;, &lt;code&gt;selection&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;checkhealth&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;if true execute :checkhealth kitty-scrollback and skip setup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Nerd Fonts&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;kitty-scrollback.nvim&lt;/code&gt; uses &lt;a href=&#34;https://www.nerdfonts.com&#34;&gt;Nerd Fonts&lt;/a&gt; in the status window. If you would like to use ASCII instead, set the option &lt;code&gt;status_window.style_simple&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Status window with Nerd Fonts &lt;code&gt;opts.status_window.style_simple = false&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/4cf5b303-5061-43da-a857-c99daea82332&#34;&gt;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/4cf5b303-5061-43da-a857-c99daea82332&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Status window with ASCII text &lt;code&gt;opts.status_window.style_simple = true&lt;/code&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/a0e1b574-59ab-4abf-93a1-f314c7cd47b3&#34;&gt;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/a0e1b574-59ab-4abf-93a1-f314c7cd47b3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;ü´° Commands and Lua API&lt;/h2&gt; &#xA;&lt;p&gt;The API is available via the &lt;code&gt;kitty-scrollback.api&lt;/code&gt; module. e.g., &lt;code&gt;require(&#39;kitty-scrollback.api&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;API&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:KittyScrollbackGenerateKittens[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;generate_kittens(boolean?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Generate Kitten commands used as reference for configuring &lt;code&gt;kitty.conf&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;:KittyScrollbackCheckHealth&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;checkhealth()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Run &lt;code&gt;:checkhealth kitty-scrollback&lt;/code&gt; in the context of Kitty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;‚å®Ô∏è Keymaps and Lua API&lt;/h2&gt; &#xA;&lt;p&gt;The API is available via the &lt;code&gt;kitty-scrollback.api&lt;/code&gt; module. e.g., &lt;code&gt;require(&#39;kitty-scrollback.api&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;&lt;/code&gt; Mapping&lt;/th&gt; &#xA;   &lt;th&gt;Default Mapping&lt;/th&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;API&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbExecuteCmd)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n,i&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;execute_command()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Execute the contents of the paste window in Kitty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbPasteCmd)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;S-CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n,i&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;paste_command()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Paste the contents of the paste window to Kitty without executing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbToggleFooter)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;g?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_footer()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle the paste window footer that displays mappings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbCloseOrQuitAll)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;close_or_quit_all()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the current buffer is the paste buffer, then close the window. Otherwise quit Neovim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbQuitAll)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n,i,t&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;quit_all()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quit Neovim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbVisualYankLine)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+Y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbVisualYank)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;v&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbNormalYankEnd)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;Y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+y$&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbNormalYank)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(KsbNormalYankLine)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Leader&amp;gt;yy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Maps to &lt;code&gt;&#34;+yy&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üëè Recommendations&lt;/h2&gt; &#xA;&lt;p&gt;The following plugins are nice additions to your Neovim and Kitty setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fladson/vim-kitty&#34;&gt;vim-kitty&lt;/a&gt; - Syntax highlighting for Kitty terminal config files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrjones2014/smart-splits.nvim&#34;&gt;smart-splits.nvim&lt;/a&gt; - Seamless navigation between Neovim and Kitty split panes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Kitty &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/kittens/custom/&#34;&gt;custom kitten&lt;/a&gt; documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/m00qek/baleia.nvim&#34;&gt;baleia.nvim&lt;/a&gt; - very nice plugin to colorize Neovim buffer containing ANSI escape sequences. I plan to add integration with this plugin ü§ù&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal/kitty/issues/719&#34;&gt;kovidgoyal/kitty#719 Feature Request: Ability to select text with the keyboard (vim-like)&lt;/a&gt; - ideas for passing the scrollback buffer to Neovim&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal/kitty/issues/2426&#34;&gt;kovidgoyal/kitty#2426 &#39;Failed to open controlling terminal&#39; error when trying to remote control from vim&lt;/a&gt; - workaround for issuing kitty remote commands without a tty &lt;code&gt;listen_on unix:/tmp/mykitty&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal/kitty/discussions/6485&#34;&gt;kovidgoyal/kitty#6485 Vi mode for kitty&lt;/a&gt; - inspiration to leverage Neovim&#39;s terminal for the scrollback buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/tokyonight.nvim&#34;&gt;tokyonight.nvim&lt;/a&gt; - referenced for color darkening, thank you folke!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; - referenced for window sizing, thank you folke!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;fzf-lua&lt;/a&gt; - quickstart &lt;code&gt;mini.sh&lt;/code&gt; and inspiration/reference for displaying keymapping footer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Eandrju/cellular-automaton.nvim&#34;&gt;cellular-automaton.nvim&lt;/a&gt; - included in a fun example config&lt;/li&gt; &#xA; &lt;li&gt;StackExchange &lt;a href=&#34;https://codegolf.stackexchange.com/a/177958/119424&#34;&gt;CamelCase2snake_case()&lt;/a&gt; - for converting Neovim highlight names to &lt;code&gt;SCREAMING_SNAKE_CASE&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kdheepak/panvimdoc&#34;&gt;panvimdoc&lt;/a&gt; - generating vimdocs from README&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/numToStr/lemmy-help&#34;&gt;lemmy-help&lt;/a&gt; - generating vimdocs from Lua annotations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üê∂ Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yurikhan/kitty_grab&#34;&gt;kitty_grab&lt;/a&gt; - Keyboard-driven screen grabber for Kitty&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trygveaa/kitty-kitten-search&#34;&gt;kitty-kitten-search&lt;/a&gt; - Kitten for the kitty terminal emulator providing live incremental search in the terminal history.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/50852780-b3ce-4cb2-8e88-c1ea79e3e140&#34; alt=&#34;scared cat&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt;</summary>
  </entry>
</feed>