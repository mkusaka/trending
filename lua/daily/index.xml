<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-17T01:38:49Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TeamsGG-Development/tgg-remotetv</title>
    <updated>2023-11-17T01:38:49Z</updated>
    <id>tag:github.com,2023-11-17:/TeamsGG-Development/tgg-remotetv</id>
    <link href="https://github.com/TeamsGG-Development/tgg-remotetv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://discord.gg/yflip&#34;&gt;Join our Discord&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://youtu.be/nxs7fEmt8g4&#34;&gt;Showcase video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Config&lt;/h3&gt; &#xA;&lt;p&gt;A framework is required when you want to use the remote control as a usable item in your inventory. Otherwise, you can use the resource as a standalone.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Config.Framework = &#39;QB&#39;&#xA;Config.Framework = &#39;ESX&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the resource as standalone you must keep &lt;code&gt;Config.UsableItem&lt;/code&gt; to &lt;em&gt;false&lt;/em&gt; and follow the instructions below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Config.Framework = &#39;Standalone&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt; - If you want to use the item as usable you need to provide:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Config.Framework = &#39;ESX&#39; or &#39;QB&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the usable item is &lt;code&gt;false&lt;/code&gt; you need to provide the (&lt;code&gt;Config.CommandDescription&lt;/code&gt;, &lt;code&gt;Config.Keybind&lt;/code&gt;) to open the TV menu.&lt;/p&gt; &#xA;&lt;p&gt;If the usable item is true the &lt;code&gt;Keybind&lt;/code&gt; won&#39;t work and you must have an item in your inventory with the name &#39;remotecontrol&#39; to open the TV menu.&lt;/p&gt; &#xA;&lt;p&gt;And the &lt;code&gt;Config.Framework&lt;/code&gt; should be &#39;ESX&#39; or &#39;QB&#39;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Config.UsableItem = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Config.CommandDescription = &#39;Open the remote control menu.&#39; -- The command description.&#xA;Config.Keybind = &#39;F2&#39; -- The keybind to open the TV menu.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Config.DistanceToTv = 10.0 -- How far you can be from the TV to interact with it(suggested default is - 10.0).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use the remote control prop animation in hand - Make sure that you have started the resource with the remote control prop(&lt;code&gt;tgg-remotecontrol-prop&lt;/code&gt;) otherwise, it will not work. &lt;em&gt;Locate it in the &lt;code&gt;[assets]&lt;/code&gt; folder.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Config.RemoteControlInHand = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Dependency Download this resource - &lt;a href=&#34;https://forum.cfx.re/t/release-generic-dui-2d-3d-renderer/131208&#34;&gt;https://forum.cfx.re/t/release-generic-dui-2d-3d-renderer/131208&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configuration &lt;code&gt;ensure generic_texture_renderer_gfx&lt;/code&gt; - This is a dependency and &lt;strong&gt;MUST&lt;/strong&gt; be started before the script.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ensure generic_texture_renderer_gfx&#xA;&#xA;ensure tgg-remotecontrol-prop - This is a dependency if the `Config.RemoteControlInHand` is set to true.&#xA;ensure tgg-remotetv&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Item setup&lt;/h2&gt; &#xA;&lt;h3&gt;QB Core&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the item below in &lt;code&gt;shared.lua&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;[&#34;remotecontrol&#34;] = {&#xA;[&#34;name&#34;] = &#34;remotecontrol&#34;,&#xA;[&#34;label&#34;] = &#34;Remote control&#34;,&#xA;[&#34;weight&#34;] = 10,&#xA;[&#34;type&#34;] = &#34;item&#34;,&#xA;[&#34;image&#34;] = &#34;remotecontrol.png&#34;, -- Use the image included in the script.&#xA;[&#34;unique&#34;] = false,&#xA;[&#34;useable&#34;] = true,&#xA;[&#34;shouldClose&#34;] = true,&#xA;[&#34;combinable&#34;] = nil,&#xA;[&#34;description&#34;] = &#34;Oh, will you watch tv?&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;ESX&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Insert the item in the database &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO `items`(`name`, `label`, `weight`, `limit`, `rare`, `can_remove`) VALUES (&#39;remotecontrol&#39;,&#39;remotecontrol&#39;, 1, 1, 0, 1)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;ox_inventory&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the item below in &lt;code&gt;data/items.lua&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;[&#39;remotecontrol&#39;] = {&#xA;label = &#34;Remote control&#34;,&#xA;weight = 10,&#xA;stack = false,&#xA;consume = 0,&#xA;description = &#34;Oh, will you watch tv?&#34;,&#xA;client = {&#xA;  event = &#34;tgg-remotetv:use&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;3. Ensure that the resource name is `tgg-remotetv`.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-dap-python</title>
    <updated>2023-11-17T01:38:49Z</updated>
    <id>tag:github.com,2023-11-17:/mfussenegger/nvim-dap-python</id>
    <link href="https://github.com/mfussenegger/nvim-dap-python" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extension for nvim-dap, providing default configurations for python and methods to debug individual test methods or classes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-dap-python&lt;/h1&gt; &#xA;&lt;p&gt;An extension for &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; providing default configurations for python and methods to debug individual test methods or classes.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim &amp;gt;= 0.5&lt;/li&gt; &#xA; &lt;li&gt;Requires &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Requires &lt;a href=&#34;https://github.com/microsoft/debugpy&#34;&gt;debugpy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install like any other neovim plugin: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-dap-python&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-dap-python&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you want to use the test runner functionality, it additionally requires a tree sitter parser for Python.&lt;/p&gt; &#xA;&lt;h3&gt;Debugpy&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended to install debugpy into a dedicated virtualenv. To do so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir .virtualenvs&#xA;cd .virtualenvs&#xA;python -m venv debugpy&#xA;debugpy/bin/python -m pip install debugpy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The debugger will automatically pick-up another virtual environment if it is activated before neovim is started.&lt;/p&gt; &#xA;&lt;h3&gt;Tree-sitter&lt;/h3&gt; &#xA;&lt;p&gt;Install either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Via &lt;code&gt;:TSInstall python&lt;/code&gt; of &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compile the parser from &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-python&#34;&gt;tree-sitter-python&lt;/a&gt; and copy it into &lt;code&gt;.config/nvim/parser/&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;git clone https://github.com/tree-sitter/tree-sitter-python.git&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cd tree-sitter-python&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;cc -O2 -o ~/.config/nvim/parser/python}.so -I./src src/parser.c src/scanner.cc -shared -Os -lstdc++ -fPIC&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Call &lt;code&gt;setup&lt;/code&gt; in your &lt;code&gt;init.vim&lt;/code&gt; to register the adapter and configurations:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;lua require(&#39;dap-python&#39;).setup(&#39;~/.virtualenvs/debugpy/bin/python&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The argument to &lt;code&gt;setup&lt;/code&gt; is the path to the python installation which contains the &lt;code&gt;debugpy&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Use nvim-dap as usual.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Call &lt;code&gt;:lua require(&#39;dap&#39;).continue()&lt;/code&gt; to start debugging.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;:help dap-mappings&lt;/code&gt; and &lt;code&gt;:help dap-api&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;:lua require(&#39;dap-python&#39;).test_method()&lt;/code&gt; to debug the closest method above the cursor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Supported test frameworks are &lt;code&gt;unittest&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt; and &lt;code&gt;django&lt;/code&gt;. By default it tries to detect the runner by probing for &lt;code&gt;pytest.ini&lt;/code&gt; and &lt;code&gt;manage.py&lt;/code&gt;, if neither are present it defaults to &lt;code&gt;unittest&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To configure a different runner, change the &lt;code&gt;test_runner&lt;/code&gt; variable. For example to configure &lt;code&gt;pytest&lt;/code&gt; set the test runner like this in &lt;code&gt;vimL&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;lua require(&#39;dap-python&#39;).test_runner = &#39;pytest&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add custom runners. An example in &lt;code&gt;Lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local test_runners = require(&#39;dap-python&#39;).test_runners&#xA;&#xA;-- `test_runners` is a table. The keys are the runner names like `unittest` or `pytest`.&#xA;-- The value is a function that takes three arguments:&#xA;-- The classname, a methodname and the opts&#xA;-- (The `opts` are coming passed through from either `test_method` or `test_class`)&#xA;-- The function must return a module name and the arguments passed to the module as list.&#xA;test_runners.your_runner = function(classname, methodname, opts)&#xA;  local args = {classname, methodname}&#xA;  return &#39;modulename&#39;, args&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;:help dap-python&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;dn :lua require(&#39;dap-python&#39;).test_method()&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;df :lua require(&#39;dap-python&#39;).test_class()&amp;lt;CR&amp;gt;&#xA;vnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;ds &amp;lt;ESC&amp;gt;:lua require(&#39;dap-python&#39;).debug_selection()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom configuration&lt;/h2&gt; &#xA;&lt;p&gt;If you call the &lt;code&gt;require(&#39;dap-python&#39;).setup&lt;/code&gt; method it will create a few &lt;code&gt;nvim-dap&lt;/code&gt; configuration entries. These configurations are general purpose configurations suitable for many use cases, but you may need to customize the configurations - for example if you want to use Docker containers.&lt;/p&gt; &#xA;&lt;p&gt;To add your own entries, you can extend the &lt;code&gt;dap.configurations.python&lt;/code&gt; list after calling the &lt;code&gt;setup&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;dap-python&#39;).setup(&#39;/path/to/python&#39;)&#xA;table.insert(require(&#39;dap&#39;).configurations.python, {&#xA;  type = &#39;python&#39;,&#xA;  request = &#39;launch&#39;,&#xA;  name = &#39;My custom launch configuration&#39;,&#xA;  program = &#39;${file}&#39;,&#xA;  -- ... more options, see https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings&#xA;})&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An alternative is to use project specific &lt;code&gt;.vscode/launch.json&lt;/code&gt; files, see &lt;code&gt;:help dap-launch.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/microsoft/debugpy/wiki/Debug-configuration-settings&#34;&gt;Debugpy Wiki&lt;/a&gt; contains a list of all supported configuration options.&lt;/p&gt; &#xA;&lt;h2&gt;Python dependencies and virtualenv&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-dap-python&lt;/code&gt; by default looks for &lt;code&gt;VIRTUAL_ENV&lt;/code&gt; and &lt;code&gt;CONDA_PREFIX&lt;/code&gt; environment variables and if present uses these environments to execute your application or tests.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using another way to manage virtual environments, you can set a custom &lt;code&gt;resolve_python&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;dap-python&#39;).resolve_python = function()&#xA;  return &#39;/absolute/path/to/python&#39;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/rcarriga/vim-ultest&#34;&gt;vim-ultest&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A test runner building upon vim-test with nvim-dap support. Aims to work for all python runners.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>craftzdog/solarized-osaka.nvim</title>
    <updated>2023-11-17T01:38:49Z</updated>
    <id>tag:github.com,2023-11-17:/craftzdog/solarized-osaka.nvim</id>
    <link href="https://github.com/craftzdog/solarized-osaka.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🏯 A clean, dark Neovim theme written in Lua, with support for lsp, treesitter and lots of plugins.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🏯 Solarized Osaka&lt;/h1&gt; &#xA;&lt;p&gt;One of the &lt;a href=&#34;https://ethanschoonover.com/solarized/&#34;&gt;Solarized&lt;/a&gt;-inspired dark theme for &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; written in &lt;a href=&#34;https://www.lua.org&#34;&gt;Lua&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/folke/tokyonight.nvim/assets/1332805/12d424f8-6967-482b-8357-124b06573f18&#34; alt=&#34;solarized-osaka_screenshot01&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎨 More Colors&lt;/h2&gt; &#xA;&lt;p&gt;Ethan Schoonover originally created the &lt;a href=&#34;https://en.wikipedia.org/wiki/Solarized&#34;&gt;Solarized&lt;/a&gt; color scheme in 2011, featuring a set of 16 colors. However, this assortment of colors falls short in providing adequate variations for additional signs, alerts, tooltips, and various other UI components made available by recent Neovim plugins. Furthermore, the text colors in the original theme are somewhat too dark when displayed on modern, vibrant monitors.&lt;/p&gt; &#xA;&lt;p&gt;Solarized Osaka improves upon this by introducing additional colors, enriching the overall theme to ensure compatibility with newer plugins and enhancing visibility on contemporary monitors. The theme brightens the base colors slightly, creating a visually appealing and functional color palette.&lt;/p&gt; &#xA;&lt;p&gt;Here is what the improved color palette looks like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/craftzdog/solarized-osaka.nvim/assets/1332805/e26b00bc-8331-4b42-abd6-706dce72bcf1&#34; alt=&#34;Color Palette&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.figma.com/file/6Wp5Puqtz7hbMJgYqOOJzb/Solarized-Osaka?type=design&amp;amp;node-id=0%3A1&amp;amp;mode=design&amp;amp;t=vEaGptGFJOLAafmB-1&#34;&gt;A Figma design is available here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports the latest &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.9.0&#34;&gt;0.9.0&lt;/a&gt; features.&lt;/li&gt; &#xA; &lt;li&gt;Enhances terminal colors.&lt;/li&gt; &#xA; &lt;li&gt;Introduces a darker background option for sidebar-like windows.&lt;/li&gt; &#xA; &lt;li&gt;Supports all major plugins.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; &amp;gt;= &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.7.2&#34;&gt;0.7.2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the theme with your preferred package manager, such as &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;craftzdog/solarized-osaka.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Vim Script&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;colorscheme solarized-osaka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.lua.org&#34;&gt;Lua&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.cmd[[colorscheme solarized-osaka]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;❗️ Set the configuration &lt;strong&gt;BEFORE&lt;/strong&gt; loading the color scheme with &lt;code&gt;colorscheme solarized-osaka&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/craftzdog/solarized-osaka.nvim&#34;&gt;Solarized Osaka&lt;/a&gt; uses the default options, unless &lt;code&gt;setup&lt;/code&gt; is explicitly called.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;solarized-osaka&#34;).setup({&#xA;  -- your configuration comes here&#xA;  -- or leave it empty to use the default settings&#xA;  transparent = false, -- Enable this to disable setting the background color&#xA;  terminal_colors = true, -- Configure the colors used when opening a `:terminal` in [Neovim](https://github.com/neovim/neovim)&#xA;  styles = {&#xA;    -- Style to be applied to different syntax groups&#xA;    -- Value is any valid attr-list value for `:help nvim_set_hl`&#xA;    comments = { italic = true },&#xA;    keywords = { italic = true },&#xA;    functions = {},&#xA;    variables = {},&#xA;    -- Background styles. Can be &#34;dark&#34;, &#34;transparent&#34; or &#34;normal&#34;&#xA;    sidebars = &#34;dark&#34;, -- style for sidebars, see below&#xA;    floats = &#34;dark&#34;, -- style for floating windows&#xA;  },&#xA;  sidebars = { &#34;qf&#34;, &#34;help&#34; }, -- Set a darker background on sidebar-like windows. For example: `[&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;]`&#xA;  day_brightness = 0.3, -- Adjusts the brightness of the colors of the **Day** style. Number between 0 and 1, from dull to vibrant colors&#xA;  hide_inactive_statusline = false, -- Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard **StatusLine** and **LuaLine**.&#xA;  dim_inactive = false, -- dims inactive windows&#xA;  lualine_bold = false, -- When `true`, section headers in the lualine theme will be bold&#xA;&#xA;  --- You can override specific color groups to use other groups or a hex color&#xA;  --- function will be called with a ColorScheme table&#xA;  ---@param colors ColorScheme&#xA;  on_colors = function(colors) end,&#xA;&#xA;  --- You can override specific highlights to use other groups or a hex color&#xA;  --- function will be called with a Highlights and ColorScheme table&#xA;  ---@param highlights Highlights&#xA;  ---@param colors ColorScheme&#xA;  on_highlights = function(highlights, colors) end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🪓 Overriding Colors &amp;amp; Highlight Groups&lt;/h2&gt; &#xA;&lt;p&gt;How the highlight groups are calculated:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;colors&lt;/code&gt; are determined based on your configuration, with the ability to override them using &lt;code&gt;config.on_colors(colors)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;These &lt;code&gt;colors&lt;/code&gt; are utilized to generate the highlight groups.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;config.on_highlights(highlights, colors)&lt;/code&gt; can be used to override highlight groups.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For default values of &lt;code&gt;colors&lt;/code&gt; and &lt;code&gt;highlights&lt;/code&gt;, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/craftzdog/solarized-osaka.nvim/main/lua/solarized-osaka/colors.lua&#34;&gt;colors.lua&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Settings and color alteration demonstration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;solarized-osaka&#34;).setup({&#xA;  -- disable italic for functions&#xA;  styles = {&#xA;    functions = {}&#xA;  },&#xA;  sidebars = { &#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34; },&#xA;  -- Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;  on_colors = function(colors)&#xA;    colors.hint = colors.orange&#xA;    colors.error = &#34;#ff0000&#34;&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/wiki/Gallery#borderless&#34;&gt;Borderless Telescope&lt;/a&gt; example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;solarized-osaka&#34;).setup({&#xA;  on_highlights = function(hl, c)&#xA;    local prompt = &#34;#2d3149&#34;&#xA;    hl.TelescopeNormal = {&#xA;      bg = c.bg_dark,&#xA;      fg = c.fg_dark,&#xA;    }&#xA;    hl.TelescopeBorder = {&#xA;      bg = c.bg_dark,&#xA;      fg = c.bg_dark,&#xA;    }&#xA;    hl.TelescopePromptNormal = {&#xA;      bg = prompt,&#xA;    }&#xA;    hl.TelescopePromptBorder = {&#xA;      bg = prompt,&#xA;      fg = prompt,&#xA;    }&#xA;    hl.TelescopePromptTitle = {&#xA;      bg = prompt,&#xA;      fg = prompt,&#xA;    }&#xA;    hl.TelescopePreviewTitle = {&#xA;      bg = c.bg_dark,&#xA;      fg = c.bg_dark,&#xA;    }&#xA;    hl.TelescopeResultsTitle = {&#xA;      bg = c.bg_dark,&#xA;      fg = c.bg_dark,&#xA;    }&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fix &lt;code&gt;undercurls&lt;/code&gt; in &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;Tmux&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To have undercurls show up and in color, add the following to your &lt;a href=&#34;https://github.com/tmux/tmux&#34;&gt;Tmux&lt;/a&gt; configuration file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Undercurl&#xA;set -g default-terminal &#34;${TERM}&#34;&#xA;set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support&#xA;set -as terminal-overrides &#39;,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>