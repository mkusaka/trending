<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:38:15Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chrisgrieser/nvim-various-textobjs</title>
    <updated>2023-03-05T01:38:15Z</updated>
    <id>tag:github.com,2023-03-05:/chrisgrieser/nvim-various-textobjs</id>
    <link href="https://github.com/chrisgrieser/nvim-various-textobjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bundle of more than a dozen new text objects for Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-various-textobjs&lt;/h1&gt; &#xA;&lt;p&gt;Bundle of more than a dozen new text objects for Neovim.&lt;/p&gt; &#xA;&lt;!--toc:start--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#list-of-text-objects&#34;&gt;List of Text Objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#opening-a-regex-at-regex101&#34;&gt;Opening a regex at regex101&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#smart-alternative-to-gx&#34;&gt;Smart Alternative to &lt;code&gt;gx&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#other-text-object-plugins&#34;&gt;Other Text-Object Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--toc:end--&gt; &#xA;&lt;h2&gt;List of Text Objects&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;textobj&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;inner / outer&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;forward-seeking&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;default keymaps&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;filetypes (for default keymaps)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;indentation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;surrounding lines with same or higher indentation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/michaeljsmith/vim-indent-object&#34;&gt;see overview from vim-indent-object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ii&lt;/code&gt;, &lt;code&gt;ai&lt;/code&gt;, (&lt;code&gt;aI&lt;/code&gt;, &lt;code&gt;iI&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;restOfIndentation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lines down with same or higher indentation&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;R&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;value&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;value of key-value pair, or right side of a variable assignment (inside one line)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outer includes trailing commas or semicolons&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;iv&lt;/code&gt;, &lt;code&gt;av&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;key&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;key of key-value pair, or left side of a variable assignment&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outer includes the &lt;code&gt;=&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ik&lt;/code&gt;, &lt;code&gt;ak&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;number&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;numbers, similar to &lt;code&gt;&amp;lt;C-a&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;inner: only pure digits, outer: number including minus sign and decimal point&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;in&lt;/code&gt;, &lt;code&gt;an&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;diagnostic&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LSP diagnostic (requires built-in LSP)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;nearEoL&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;from cursor position to end of line, minus one character&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mdlink&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;markdown link like &lt;code&gt;[title](url)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;inner is only the link title (between the &lt;code&gt;[]&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;il&lt;/code&gt;, &lt;code&gt;al&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;markdown, toml&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;mdFencedCodeBlock&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;markdown fenced code (enclosed by three backticks)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outer includes the enclosing backticks&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;iC&lt;/code&gt;, &lt;code&gt;aC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;markdown&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;cssSelector&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;class in CSS, like &lt;code&gt;.my-class&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outer includes trailing comma and space&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ic&lt;/code&gt;, &lt;code&gt;ac&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;css, scss&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;jsRegex&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript regex pattern&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outer includes the slashes and any flags&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;i/&lt;/code&gt;, &lt;code&gt;a/&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;javascript, typescript&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;doubleSquareBrackets&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;text enclosed by &lt;code&gt;[[]]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outer includes the four square brackets&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;iD&lt;/code&gt;, &lt;code&gt;aD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;lua, shell, neorg, markdown&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;column&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;column down until indent or shorter line. Accepts &lt;code&gt;{count}&lt;/code&gt; for multiple columns.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;|&lt;/code&gt; (pipe char)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;restOfParagraph&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;like &lt;code&gt;}&lt;/code&gt;, but linewise&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;r&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;subword&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;like &lt;code&gt;iw&lt;/code&gt;, but treating &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;_&lt;/code&gt;, and &lt;code&gt;.&lt;/code&gt; as word delimiters &lt;em&gt;and&lt;/em&gt; only part of camelCase.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outer includes trailing &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;iS&lt;/code&gt;, &lt;code&gt;aS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;entireBuffer&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;entire buffer as one text object&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;gG&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;url&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;link beginning with &#34;http&#34;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;L&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;shellPipe&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;command stdout is piped to&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;outer includes the front pipe character&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;iP&lt;/code&gt;/&lt;code&gt;aP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bash, zsh, fish, sh&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;toNextClosingBracket&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;from cursor to next closing &lt;code&gt;]&lt;/code&gt;, &lt;code&gt;)&lt;/code&gt;, or &lt;code&gt;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;no&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;%&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;all&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- packer&#xA;use {&#xA;&#x9;&#34;chrisgrieser/nvim-various-textobjs&#34;,&#xA;&#x9;config = function () &#xA;&#x9;&#x9;require(&#34;various-textobjs&#34;).setup({ useDefaultKeymaps = true })&#xA;&#x9;end,&#xA;}&#xA;&#xA;-- lazy.nvim&#xA;{&#xA;&#x9;&#34;chrisgrieser/nvim-various-textobjs&#34;,&#xA;&#x9;config = function () &#xA;&#x9;&#x9;require(&#34;various-textobjs&#34;).setup({ useDefaultKeymaps = true })&#xA;&#x9;end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;.setup()&lt;/code&gt; call is optional if you are fine with the defaults below. (Note that the default is to &lt;strong&gt;not&lt;/strong&gt; set any keymaps.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default config&#xA;require(&#34;various-textobjs&#34;).setup {&#xA;&#x9;lookForwardLines = 5, -- set to 0 to only look in the current line&#xA;&#x9;useDefaultKeymaps = false, -- use suggested keymaps (see README)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want to set your own keybindings, you can do so by calling the respective functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The function names correspond to the textobj-names from the &lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-various-textobjs/main/#list-of-text-objects&#34;&gt;overview table&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The text objects that differentiate between outer and inner require a boolean parameter, &lt;code&gt;true&lt;/code&gt; always meaning &#34;inner,&#34; and &lt;code&gt;false&lt;/code&gt; meaning &#34;outer.&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- example: `?` for diagnostic textobj&#xA;vim.keymap.set({&#34;o&#34;, &#34;x&#34;}, &#34;?&#34;, function () require(&#34;various-textobjs&#34;).diagnostic() end)&#xA;&#xA;-- example: `an` for outer number, `in` for inner number&#xA;vim.keymap.set({&#34;o&#34;, &#34;x&#34;}, &#34;an&#34;, function () require(&#34;various-textobjs&#34;).number(false) end)&#xA;vim.keymap.set({&#34;o&#34;, &#34;x&#34;}, &#34;in&#34;, function () require(&#34;various-textobjs&#34;).number(true) end)&#xA;&#xA;-- exception: indentation textobj requires two parameters, the first for &#xA;-- exclusion of the starting border, the second for the exclusion of ending&#xA;-- border&#xA;vim.keymap.set({&#34;o&#34;, &#34;x&#34;}, &#34;ii&#34;, function () require(&#34;various-textobjs&#34;).indentation(true, true) end)&#xA;vim.keymap.set({&#34;o&#34;, &#34;x&#34;}, &#34;ai&#34;, function () require(&#34;various-textobjs&#34;).indentation(false, true) end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Opening a regex at regex101&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the text objects as input for small snippets by yanking them and using &lt;code&gt;getreg()&lt;/code&gt;. The following example uses the outer regex text object to retrieve pattern, flags, and replacement value of the next regex, and opens &lt;a href=&#34;https://regex101.com/&#34;&gt;regex101&lt;/a&gt; prefilled with them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;gR&#34;, function()&#xA;&#x9;require(&#34;various-textobjs&#34;).jsRegex(false) -- set visual selection to outer regex&#xA;&#x9;vim.cmd.normal { &#39;&#34;zy&#39;, bang = true } -- retrieve regex with &#34;z as intermediary&#xA;&#x9;local regex = vim.fn.getreg(&#34;z&#34;)&#xA;&#xA;&#x9;local pattern = regex:match(&#34;/(.*)/&#34;)&#xA;&#x9;local flags = regex:match(&#34;/.*/(.*)&#34;)&#xA;&#x9;local replacement = fn.getline(&#34;.&#34;):match(&#39;replace ?%(/.*/.*, ?&#34;(.-)&#34;&#39;)&#xA;&#xA;&#x9;-- https://github.com/firasdib/Regex101/wiki/FAQ#how-to-prefill-the-fields-on-the-interface-via-url&#xA;&#x9;local url = &#34;https://regex101.com/?regex=&#34; .. pattern .. &#34;&amp;amp;flags=&#34; .. flags&#xA;&#x9;if replacement then url = url .. &#34;&amp;amp;subst=&#34; .. replacement end&#xA;&#xA;&#x9;local opener&#xA;&#x9;if vim.fn.has(&#34;macunix&#34;) then&#xA;&#x9;&#x9;opener = &#34;open&#34;&#xA;&#x9;elseif vim.fn.has(&#34;unix&#34;) then&#xA;&#x9;&#x9;opener = &#34;xdg-open&#34;&#xA;&#x9;elseif vim.fn.has(&#34;win64&#34;) or fn.has(&#34;win32&#34;) then&#xA;&#x9;&#x9;opener = &#34;start&#34;&#xA;&#x9;end&#xA;&#x9;os.execute(opener .. &#34;&#39;&#34; .. url .. &#34;&#39;&#34;)&#xA;end, { desc = &#34;Open next js regex in regex101&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Smart Alternative to &lt;code&gt;gx&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Using the URL textobj, you can also write a small snippet to replace netrw&#39;s &lt;code&gt;gx&lt;/code&gt;. The code below retrieves the next URL (within the amount of lines configured in the &lt;code&gt;setup&lt;/code&gt; call), and opens it in your browser. While this is already an improvement to vim&#39;s built-in &lt;code&gt;gx&lt;/code&gt;, which requires the cursor to be standing on a URL to work, you can even go one step further. If no URL has been found within the next few lines, the &lt;code&gt;:UrlView&lt;/code&gt; command from &lt;a href=&#34;https://github.com/axieax/urlview.nvim&#34;&gt;urlview.nvim&lt;/a&gt; is triggered, searching the entire buffer for URLs from which you can choose which to open.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;gx&#34;, function ()&#xA;&#x9;require(&#34;various-textobjs&#34;).url() -- select URL&#xA;&#x9;local foundURL = vim.fn.mode():find(&#34;v&#34;) -- only switches to visual mode if found&#xA;&#x9;local url&#xA;&#x9;if foundURL then&#xA;&#x9;&#x9;vim.cmd.normal { &#39;&#34;zy&#39;, bang = true } -- retrieve URL with &#34;z as intermediary&#xA;&#x9;&#x9;url = fn.getreg(&#34;z&#34;)&#xA;&#xA;&#x9;&#x9;local opener&#xA;&#x9;&#x9;if vim.fn.has(&#34;macunix&#34;) == 1 then&#xA;&#x9;&#x9;&#x9;opener = &#34;open&#34;&#xA;&#x9;&#x9;elseif vim.fn.has(&#34;linux&#34;) == 1 then&#xA;&#x9;&#x9;&#x9;opener = &#34;xdg-open&#34;&#xA;&#x9;&#x9;elseif vim.fn.has(&#34;win64&#34;) == 1 or fn.has(&#34;win32&#34;) == 1 then&#xA;&#x9;&#x9;&#x9;opener = &#34;start&#34;&#xA;&#x9;&#x9;end&#xA;&#x9;&#x9;os.execute(opener .. &#34;&#39;&#34; .. url .. &#34;&#39;&#34;)&#xA;&#x9;else&#xA;&#x9;&#x9;-- if not found in proximity, search whole buffer via urlview.nvim instead&#xA;&#x9;&#x9;vim.cmd.UrlView(&#34;buffer&#34;)&#xA;&#x9;end&#xA;end, {desc = &#34;Smart URL Opener&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This plugin uses pattern matching, so it can be inaccurate in some edge cases.&lt;/li&gt; &#xA; &lt;li&gt;The value-textobj does not work with multi-line values.&lt;/li&gt; &#xA; &lt;li&gt;There is no reliable dot-repeatability. Any pointers or help on making &lt;em&gt;text objects&lt;/em&gt; dot-repeatable are welcome. &lt;a href=&#34;https://github.com/chrisgrieser/nvim-various-textobjs/issues/7#issue-1514404084&#34;&gt;All plugins/guides I could find implement dot-repeatability only for normal mode mappings and do not work for text objects.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Text-Object Plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&#34;&gt;treesitter-textobjects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RRethy/nvim-treesitter-textsubjects&#34;&gt;treesitter-textsubjects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-ts-hint-textobject&#34;&gt;ts-hint-textobject&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-ai.md&#34;&gt;mini.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wellle/targets.vim&#34;&gt;targets.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks&lt;/strong&gt;&lt;br&gt; Kudos to the Valuable Dev for &lt;a href=&#34;https://thevaluable.dev/vim-create-text-objects/&#34;&gt;their blog post on how to get started with creating custom text objects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- vale Google.FirstPerson = NO --&gt; &#xA;&lt;p&gt;&lt;strong&gt;About Me&lt;/strong&gt;&lt;br&gt; In my day job, I am a sociologist studying the social mechanisms underlying the digital economy. For my PhD project, I investigate the governance of the app economy and how software ecosystems manage the tension between innovation and compatibility. If you are interested in this subject, feel free to get in touch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Profiles&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discordapp.com/users/462774483044794368/&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chris-grieser.de/&#34;&gt;Academic Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrisgrieser/&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/pseudo_meta&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/profile/Christopher-Grieser&#34;&gt;ResearchGate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/christopher-grieser-ba693b17a/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>0xbs/premade-groups-filter</title>
    <updated>2023-03-05T01:38:15Z</updated>
    <id>tag:github.com,2023-03-05:/0xbs/premade-groups-filter</id>
    <link href="https://github.com/0xbs/premade-groups-filter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A World of Warcraft addon for powerful filtering of premade group listings.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Premade Groups Filter&lt;/h1&gt; &#xA;&lt;p&gt;Premade Groups Filter helps you limit the search results of the LFG Premade Groups tool. You can filter by difficulty or for groups with a specific composition of members, e.g. one tank, no heals and 3 dps. Filtering is done using a separate window next to the list of groups. Advanced users are able to enter powerful filter expressions to find exactly what they are looking for.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/0xbs/premade-groups-filter/master/Screenshots/Screenshot_01_Dungeons.jpg&#34; alt=&#34;Premade Groups Filter next to the LFG Premade Groups window filtering for all mythic dungeons that still need a tank and already have a healer&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Examples of what can easily be found with Premade Groups Filter:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mythic dungeon groups that still need a healer&lt;/li&gt; &#xA; &lt;li&gt;Raids that have not yet defeated any bosses and already have more than 10 members and an item level requirement of 300&lt;/li&gt; &#xA; &lt;li&gt;Arena 3v3 groups where the leader has a minimum rating of 1500&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Standard Filters&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Difficulty (Normal, Heroic, Mythic, Mythic+, Arena 2v2, Arena 3v3)&lt;/li&gt; &#xA; &lt;li&gt;Number of raid bosses defeated&lt;/li&gt; &#xA; &lt;li&gt;Mythic+ Rating&lt;/li&gt; &#xA; &lt;li&gt;PvP Rating&lt;/li&gt; &#xA; &lt;li&gt;Number of members&lt;/li&gt; &#xA; &lt;li&gt;Number of tanks, heals and DPS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Advanced Expression Query Box&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Unlimited filtering by over 150 properties (&lt;a href=&#34;https://github.com/0xbs/premade-groups-filter/wiki/Keywords&#34;&gt;see full list of keywords&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Enter powerful logic filter expressions&lt;/li&gt; &#xA; &lt;li&gt;Sort by multiple properties ascending or descending&lt;/li&gt; &#xA; &lt;li&gt;Learn Lua while searching for groups&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional UI Enhancements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Class Names in Tooltip&lt;/strong&gt; - Shows a list of classes by role in the tooltip of a premade group.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Colored Group Name&lt;/strong&gt; - Shows group name in green if group is new and in red if you&#39;ve previously been declined. Shows activity name in red if you have a lockout on that instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Colored Applications&lt;/strong&gt; - Shows a red background on pending applications for Mythic+ groups if the group has no slot left for your role.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Circle in Class Color&lt;/strong&gt; - Shows a circle in class color in the background of each role in the premade dungeon group list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bar in Class Color&lt;/strong&gt; - Shows a small bar in class color below each role in the premade dungeon group list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Show Group Leader&lt;/strong&gt; - Shows a small crown above the group leader&#39;s role in the premade dungeon group list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Group Leader Rating&lt;/strong&gt; - Shows the Mythic+ or PvP rating of the group leader in the premade group list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;One Click Sign Up&lt;/strong&gt; - Sign up for a group directly by clicking on it, instead of selecting it first, then clicking sign up.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Persist Sign Up Note&lt;/strong&gt; - Persists the &#39;note to the group leader&#39; when signing up to different groups. By default, the note is deleted when a new group is selected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sign Up On Enter&lt;/strong&gt; - Automatically focus the &#39;note to the group leader&#39; text box when signing up for a new group and confirm your application by pressing enter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Skip Sign Up Dialog&lt;/strong&gt; - Skip the role and note prompt if possible and immediately sign up to the group. Hold shift to always show the dialog.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.curseforge.com/wow/addons/premade-groups-filter&#34;&gt;Project on CurseForge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://addons.wago.io/addons/premade-groups-filter&#34;&gt;Project on Wago.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xbs/premade-groups-filter/wiki/Keywords&#34; title=&#34;Full List of Keywords&#34;&gt;Full List of Keywords&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0xbs/premade-groups-filter/wiki/FAQ&#34; title=&#34;FAQ and Examples&#34;&gt;FAQ and Examples&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;The software is provided under the GNU General Public License, Version 2. See the &lt;code&gt;LICENSE&lt;/code&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>