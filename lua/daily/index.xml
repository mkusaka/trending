<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-10T01:45:57Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-treesitter/nvim-treesitter-context</title>
    <updated>2022-06-10T01:45:57Z</updated>
    <id>tag:github.com,2022-06-10:/nvim-treesitter/nvim-treesitter-context</id>
    <link href="https://github.com/nvim-treesitter/nvim-treesitter-context" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Show code context&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-treesitter-context&lt;/h1&gt; &#xA;&lt;p&gt;Lightweight alternative to &lt;a href=&#34;https://github.com/wellle/context.vim&#34;&gt;context.vim&lt;/a&gt; implemented with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Neovim &amp;gt;= v0.7.x&lt;/p&gt; &#xA;&lt;p&gt;Note: if you need support for Neovim 0.6.x please use the tag &lt;code&gt;compat/0.6&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;via vim-plug&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;Plug &#39;nvim-treesitter/nvim-treesitter-context&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;via packer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;use &#39;nvim-treesitter/nvim-treesitter-context&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nvim-treesitter/nvim-treesitter-context/master/static/demo.gif&#34; alt=&#34;theme&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;p&gt;This plugins uses the new neovim &lt;code&gt;WinScrolled&lt;/code&gt; event when available to update its context window. Make sure to have a recent neovim build to get this behavior. The fallback behavior is to update its content on &lt;code&gt;CursorMoved&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;(Default values are shown below)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;treesitter-context&#39;.setup{&#xA;    enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)&#xA;    max_lines = 0, -- How many lines the window should span. Values &amp;lt;= 0 mean no limit.&#xA;    patterns = { -- Match patterns for TS nodes. These get wrapped to match at word boundaries.&#xA;        -- For all filetypes&#xA;        -- Note that setting an entry here replaces all other patterns for this entry.&#xA;        -- By setting the &#39;default&#39; entry below, you can control which nodes you want to&#xA;        -- appear in the context window.&#xA;        default = {&#xA;            &#39;class&#39;,&#xA;            &#39;function&#39;,&#xA;            &#39;method&#39;,&#xA;            -- &#39;for&#39;, -- These won&#39;t appear in the context&#xA;            -- &#39;while&#39;,&#xA;            -- &#39;if&#39;,&#xA;            -- &#39;switch&#39;,&#xA;            -- &#39;case&#39;,&#xA;        },&#xA;        -- Example for a specific filetype.&#xA;        -- If a pattern is missing, *open a PR* so everyone can benefit.&#xA;        --   rust = {&#xA;        --       &#39;impl_item&#39;,&#xA;        --   },&#xA;    },&#xA;    exact_patterns = {&#xA;        -- Example for a specific filetype with Lua patterns&#xA;        -- Treat patterns.rust as a Lua pattern (i.e &#34;^impl_item$&#34; will&#xA;        -- exactly match &#34;impl_item&#34; only)&#xA;        -- rust = true,&#xA;    },&#xA;&#xA;    -- [!] The options below are exposed but shouldn&#39;t require your attention,&#xA;    --     you can safely ignore them.&#xA;&#xA;    zindex = 20, -- The Z-index of the context window&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;TSContextEnable&lt;/code&gt;, &lt;code&gt;TSContextDisable&lt;/code&gt; and &lt;code&gt;TSContextToggle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Appearance&lt;/h2&gt; &#xA;&lt;p&gt;Use the highlight group &lt;code&gt;TreesitterContext&lt;/code&gt; to change the colors of the context. Per default it links to &lt;code&gt;NormalFloat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the highlight group &lt;code&gt;TreesitterContextLineNumber&lt;/code&gt; to change the colors of the context line numbers if &lt;code&gt;line_numbers&lt;/code&gt; is set. Per default it links to &lt;code&gt;LineNr&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>archibaldmilton/Girellu</title>
    <updated>2022-06-10T01:45:57Z</updated>
    <id>tag:github.com,2022-06-10:/archibaldmilton/Girellu</id>
    <link href="https://github.com/archibaldmilton/Girellu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Make Assetto Corsa suck less.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/90503800/141666780-5d8b549d-25ec-4193-a985-856c1b724bbe.png&#34; alt=&#34;banner&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Girellu Repository&lt;/h1&gt; &#xA;&lt;p&gt;Personally curated content for Assetto Corsa.&lt;/p&gt; &#xA;&lt;h2&gt;How to Download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/archibaldmilton/Girellu/archive/refs/heads/master.zip&#34; title=&#34;Download ZIP&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/archibaldmilton/girellu?color=black&amp;amp;labelColor=white&amp;amp;label=Download&amp;amp;logo=data%3Aimage%2Fsvg%2Bxml%3Bbase64%2CPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAyNCAyNCIgd2lkdGg9IjI0IiBoZWlnaHQ9IjI0Ij48cGF0aCBkPSJNNC45NyAxMS4wM2EuNzUuNzUgMCAxMTEuMDYtMS4wNkwxMSAxNC45NFYyLjc1YS43NS43NSAwIDAxMS41IDB2MTIuMTlsNC45Ny00Ljk3YS43NS43NSAwIDExMS4wNiAxLjA2bC02LjI1IDYuMjVhLjc1Ljc1IDAgMDEtMS4wNiAwbC02LjI1LTYuMjV6bS0uMjIgOS40N2EuNzUuNzUgMCAwMDAgMS41aDE0LjVhLjc1Ljc1IDAgMDAwLTEuNUg0Ljc1eiI%2BPC9wYXRoPjwvc3ZnPg%3D%3D&amp;amp;style=for-the-badge&#34; alt=&#34;button&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How to Download and Fetch Updates&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Login into or create a &lt;a href=&#34;https://github.com/login&#34;&gt;GitHub account&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://desktop.github.com/&#34;&gt;GitHub Desktop&lt;/a&gt; and login with your GitHub acount.&lt;/li&gt; &#xA; &lt;li&gt;Clone Girellu repository by following &lt;a href=&#34;https://docs.github.com/en/desktop/contributing-and-collaborating-using-github-desktop/adding-and-cloning-repositories/cloning-a-repository-from-github-to-github-desktop&#34; title=&#34;GitHub Tutorial&#34;&gt;GitHub&#39;s tutorial&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Update repository content by clicking here:&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/90503800/138611389-dfbdcadc-48e2-4d20-8e1b-2b72b511f338.png&#34; alt=&#34;Update&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;What do these folders mean?&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;Releases&#34; is where downloadable content reside. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Filters is for AC Post-Processing Filters (PPF)&lt;/li&gt; &#xA;   &lt;li&gt;Mods is for non-PPF content of the repository&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;Resources&#34; has been moved to the &#34;&lt;a href=&#34;https://github.com/archibaldmilton/Girellu/wiki&#34;&gt;Wiki&lt;/a&gt;&#34; section of the repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;Why host on GitHub?&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To avoid community feuds (Discord servers, RaceDepartment, etc.)&lt;/li&gt; &#xA; &lt;li&gt;It is quicker and easier to host.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Communities&lt;/h2&gt; &#xA;&lt;table align=&#34;center&#34;&gt;&#xA; &lt;thead&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Custom Shaders Patch&lt;/strong&gt;&lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Sol WeatherFX&lt;/strong&gt;&lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Girellu (development and support)&lt;/strong&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/thead&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;https://discord.gg/SWryb5V&lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;https://discord.gg/7YVrS4ydaA&lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;https://discord.gg/jgG738MtCe&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;https://www.patreon.com/x4fab&lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;https://www.patreon.com/peterboese&lt;/td&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;table align=&#34;center&#34;&gt;&#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;&lt;strong&gt;Star this repository to show appreciation! ‚≠ê&lt;/strong&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/90503800/145545659-184c688b-63c1-4722-86fc-d1598612d1b9.png&#34;&gt;&lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>rcarriga/neotest</title>
    <updated>2022-06-10T01:45:57Z</updated>
    <id>tag:github.com,2022-06-10:/rcarriga/neotest</id>
    <link href="https://github.com/rcarriga/neotest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extensible framework for interacting with tests within NeoVim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neotest&lt;/h1&gt; &#xA;&lt;p&gt;A framework for interacting with tests within NeoVim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166156510-440d9047-c76e-4967-8c17-944399222645.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is early stage software.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#supported-runners&#34;&gt;Supported Runners&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#consumers&#34;&gt;Consumers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#output-window&#34;&gt;Output Window&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#summary-window&#34;&gt;Summary Window&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#diagnostic-messages&#34;&gt;Diagnostic Messages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#status-signs&#34;&gt;Status Signs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#strategies&#34;&gt;Strategies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#writing-adapters&#34;&gt;Writing Adapters&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#parsing-tests&#34;&gt;Parsing tests in a directory&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/neotest/master/#collecting-results&#34;&gt;Collecting results&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neotest&lt;/code&gt; for details on neotest is designed and how to interact with it programmatically.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Neotest uses &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim/&#34;&gt;plenary.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most adapters will also require &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Neotest uses the &lt;code&gt;CursorHold&lt;/code&gt; event which has issues in NeoVim: &lt;a href=&#34;https://github.com/neovim/neovim/issues/12587&#34;&gt;see here&lt;/a&gt; &lt;br&gt; It&#39;s recommended to use &lt;a href=&#34;https://github.com/antoinemadec/FixCursorHold.nvim&#34;&gt;https://github.com/antoinemadec/FixCursorHold.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Install with your favourite package manager alongside nvim-dap&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;strong&gt;dein&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#34;nvim-lua/plenary.nvim&#34;)&#xA;call dein#add(&#34;nvim-treesitter/nvim-treesitter&#34;)&#xA;call dein#add(&#34;antoinemadec/FixCursorHold.nvim&#34;)&#xA;call dein#add(&#34;rcarriga/neotest&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;Plug &#39;antoinemadec/FixCursorHold.nvim&#39;&#xA;Plug &#39;rcarriga/neotest&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;rcarriga/neotest&#34;,&#xA;  requires = {&#xA;    &#34;nvim-lua/plenary.nvim&#34;,&#xA;    &#34;nvim-treesitter/nvim-treesitter&#34;,&#xA;    &#34;antoinemadec/FixCursorHold.nvim&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get started you will also need to install an adapter for your test runner.&lt;/p&gt; &#xA;&lt;h3&gt;Supported Runners&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Test Runner&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Adapter&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;pytest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rcarriga/neotest-python&#34;&gt;neotest-python&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;python-unittest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rcarriga/neotest-python&#34;&gt;neotest-python&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;plenary&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rcarriga/neotest-plenary&#34;&gt;neotest-plenary&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;go&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/akinsho/neotest-go&#34;&gt;neotest-go&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;jest&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/haydenmeade/neotest-jest&#34;&gt;neotest-jest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;For any runner without an adapter you can use &lt;a href=&#34;https://github.com/rcarriga/neotest-vim-test&#34;&gt;neotest-vim-test&lt;/a&gt; which supports any runner that vim-test supports. The vim-test adapter does not support some of the more advanced features such as error locations or per-test output. If you&#39;re using the vim-test adapter then install &lt;a href=&#34;https://github.com/vim-test/vim-test/&#34;&gt;vim-test&lt;/a&gt; too.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Provide your adapters and other config to the setup function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).setup({&#xA;  adapters = {&#xA;    require(&#34;neotest-python&#34;)({&#xA;      dap = { justMyCode = false },&#xA;    }),&#xA;    require(&#34;neotest-plenary&#34;),&#xA;    require(&#34;neotest-vim-test&#34;)({&#xA;      ignore_file_types = { &#34;python&#34;, &#34;vim&#34;, &#34;lua&#34; },&#xA;    }),&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;neotest.Config&lt;/code&gt; for configuration options.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The interface for using neotest is very simple.&lt;/p&gt; &#xA;&lt;p&gt;Run the nearest test&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.run()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the current file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.run(vim.fn.expand(&#34;%&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug the nearest test (requires nvim-dap and adapter support)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.run({strategy = &#34;dap&#34;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neotest.run.run()&lt;/code&gt; for parameters.&lt;/p&gt; &#xA;&lt;p&gt;Stop the nearest test, see &lt;code&gt;:h neotest.run.stop()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.stop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Attach to the nearest test, see &lt;code&gt;:h neotest.run.attach()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).run.attach()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Consumers&lt;/h2&gt; &#xA;&lt;p&gt;For extra features neotest provides consumers which interact with the state of the tests and their results.&lt;/p&gt; &#xA;&lt;p&gt;Some consumers will be passive while others can be interacted with.&lt;/p&gt; &#xA;&lt;h3&gt;Output Window&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.output&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays output of tests &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143146-e7821fe9-c11c-4e21-9cc0-73989b51e8ed.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays per-test output &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143189-0f51b544-3aec-4cfc-93d7-74f3d209aef6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Summary Window&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.summary&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays test suite structure from project root. &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143333-df8b409f-d6f3-4d3d-a676-5f8a4a4cb8bb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Provides mappings for running, attaching, stopping and showing output.&lt;/p&gt; &#xA;&lt;h3&gt;Diagnostic Messages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.diagnostic&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use vim.diagnostic to display error messages where they occur while running.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143466-0fdea24c-6f0a-4199-9026-66f89d7d1dbc.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Status Signs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:h neotest.status&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays the status of a test/namespace beside the beginning of the definition.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/166143402-b318ef91-c053-4973-b929-5ee97572f2c2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Strategies&lt;/h2&gt; &#xA;&lt;p&gt;Strategies are methods of running tests. They provide the functionality to attach to running processes and so attaching will mean different things for different strategies.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;integrated&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Default strategy that will run a process in the background and allow opening a floating terminal to attach.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;dap&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Uses nvim-dap to debug tests (adapter must support providing an nvim-dap configuration)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Custom strategies can implemented by providing a function which takes a &lt;code&gt;neotest.RunSpec&lt;/code&gt; and returns an table that fits the &lt;code&gt;neotest.Process&lt;/code&gt; interface. Plenary&#39;s async library can be used to run asynchronously.&lt;/p&gt; &#xA;&lt;h2&gt;Writing Adapters&lt;/h2&gt; &#xA;&lt;p&gt;This section is for people wishing to develop their own neotest adapters. The documentation here and the underlying libraries are WIP and open to feedback/change. Please raise issues with any problems understanding or using the this doc. The best place to figure out how to create an adapter is by looking at the existing ones.&lt;/p&gt; &#xA;&lt;p&gt;Adapters must fulfill an interface to run (defined &lt;a href=&#34;https://github.com/rcarriga/neotest/raw/master/lua/neotest/adapters/interface.lua&#34;&gt;here&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Much of the functionality is built around using a custom tree object that defines the structure of the test suite. There are helpers that adapters can use within their code (all defined under &lt;code&gt;neotest.lib&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Adapters must solve three problems:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Parse tests&lt;/li&gt; &#xA; &lt;li&gt;Construct test commands&lt;/li&gt; &#xA; &lt;li&gt;Collect results&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Parsing Tests&lt;/h3&gt; &#xA;&lt;p&gt;There are two stages to this, finding files which is often a simple file name check (it&#39;s OK if a test file has no actual tests in it) and parsing test files.&lt;/p&gt; &#xA;&lt;p&gt;For languages supported by nvim-treesitter, the easiest way to parse tests is to use the neotest treesitter wrapper to parse a query to constuct a tree structure.&lt;/p&gt; &#xA;&lt;p&gt;The query can define capture groups for tests and namespaces. Each type must have &lt;code&gt;&amp;lt;type&amp;gt;.name&lt;/code&gt; and &lt;code&gt;&amp;lt;type&amp;gt;.definition&lt;/code&gt; capture groups. They can be used multiple times in the query&lt;/p&gt; &#xA;&lt;p&gt;Example from neotest-plenary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lib = require(&#34;neotest.lib&#34;)&#xA;&#xA;function PlenaryNeotestAdapter.discover_positions(path)&#xA;  local query = [[&#xA;  ;; describe blocks&#xA;  ((function_call&#xA;      name: (identifier) @func_name (#match? @func_name &#34;^describe$&#34;)&#xA;      arguments: (arguments (_) @namespace.name (function_definition))&#xA;  )) @namespace.definition&#xA;&#xA;&#xA;  ;; it blocks&#xA;  ((function_call&#xA;      name: (identifier) @func_name&#xA;      arguments: (arguments (_) @test.name (function_definition))&#xA;  ) (#match? @func_name &#34;^it$&#34;)) @test.definition&#xA;&#xA;  ;; async it blocks (async.it)&#xA;  ((function_call&#xA;      name: (&#xA;        dot_index_expression&#xA;          field: (identifier) @func_name&#xA;      )&#xA;      arguments: (arguments (_) @test.name (function_definition))&#xA;    ) (#match? @func_name &#34;^it$&#34;)) @test.definition&#xA;    ]]&#xA;  return lib.treesitter.parse_positions(path, query, { nested_namespaces = true })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For languages unsupported by treesitter you can use regexes like neotest-vim-test or hook into the test runner.&lt;/p&gt; &#xA;&lt;h3&gt;Constructing Test Commands&lt;/h3&gt; &#xA;&lt;p&gt;This is the easiest part of writing an adapter. You need to handle the different types of positions that a user may run (directiory, file, namespace and test).&lt;/p&gt; &#xA;&lt;p&gt;If you are hooking into the runner, you may not be running the test runner command directly. neotest-python and neotest-plenary both are examples of this, with a script being used to run each runner to handle parsing results and storing them for result collection later.&lt;/p&gt; &#xA;&lt;h3&gt;Collecting Results&lt;/h3&gt; &#xA;&lt;p&gt;Collecting results will be the most involved process in the adapter, with complexity depending on the test runner and desired features.&lt;/p&gt; &#xA;&lt;p&gt;For the most basic implementation an adapter can choose to only run tests individually and use the exit code as an indicator of the result (this is how neotest-vim-test works) but this impacts peformance and also loses out on more advanced features.&lt;/p&gt; &#xA;&lt;p&gt;If tests can be run together then the adapter must provide results for at least each individual test. Results for namespaces, files and directories will be inferred from their child tests.&lt;/p&gt; &#xA;&lt;p&gt;For collecting test specific error messages, error locations etc you&#39;ll need to parse output or hook into the runner. See neotest-python and neotest-plenary for examples on how this can be done.&lt;/p&gt;</summary>
  </entry>
</feed>