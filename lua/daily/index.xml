<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-10T01:35:06Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>natecraddock/workspaces.nvim</title>
    <updated>2024-10-10T01:35:06Z</updated>
    <id>tag:github.com,2024-10-10:/natecraddock/workspaces.nvim</id>
    <link href="https://github.com/natecraddock/workspaces.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a simple plugin to manage workspace directories in neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;workspaces.nvim&lt;/h1&gt; &#xA;&lt;p&gt;a simple plugin to manage workspace directories in neovim&lt;/p&gt; &#xA;&lt;p&gt;workspaces.nvim provides a few simple commands for managing workspace directories in neovim. A workspace is a name and a path, and opening a workspace will set the current directory to the correct path.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Register a workspace with &lt;code&gt;:WorkspacesAdd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open a registered workspace with &lt;code&gt;:WorkspacesOpen [name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hooks may be registered to provide additional functionality&lt;/li&gt; &#xA; &lt;li&gt;A telescope extension &lt;code&gt;:Telescope workspaces&lt;/code&gt; is provided for fuzzy finding over workspaces&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Nothing runs automatically. The idea is that workspace creation is an infrequent task, so there shouldn&#39;t be any need for automatic workspace registration, or heuristics to determine if a directory is a workspace. A command and telescope extension are provided to make it simple to open a workspace, but what that means beyond changing directories is left up to you by customizing the hooks. See &lt;a href=&#34;https://raw.githubusercontent.com/natecraddock/workspaces.nvim/master/#examples&#34;&gt;Examples&lt;/a&gt; for inspiration on hooks!&lt;/p&gt; &#xA;&lt;p&gt;Note that this plugin is small in scope and complexity. It has been stable for a long time. Just because I am not making changes doesn&#39;t mean it&#39;s been abandoned! It was designed to be small and stable, and it will stay that way.&lt;/p&gt; &#xA;&lt;h2&gt;Semantics&lt;/h2&gt; &#xA;&lt;p&gt;Because naming could be confusing, here are some definitions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Workspaces&lt;/strong&gt;: as described above, are project directories. The purpose of this plugin being to switch easily between these project directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Dirs&lt;/strong&gt;: These are directories that contain workspaces. It allows to easily sync multiple workspaces contained in a directory. For example, you might have a directory called &lt;code&gt;projects&lt;/code&gt; on your machine, that contains all your projects. Just register this directory as a &lt;code&gt;dir&lt;/code&gt; with &lt;code&gt;:WorkspacesAddDir&lt;/code&gt; and all the workspaces contained in it will be automatically added to the list of workspaces when running &lt;code&gt;:WorkspacesSyncDirs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with your favorite neovim package manager. Be sure to run the setup function if you wish to change the default configuration or register the user commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;workspaces&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The setup function accepts a table to modify the default configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    -- path to a file to store workspaces data in&#xA;    -- on a unix system this would be ~/.local/share/nvim/workspaces&#xA;    path = vim.fn.stdpath(&#34;data&#34;) .. &#34;/workspaces&#34;,&#xA;&#xA;    -- to change directory for nvim (:cd), or only for window (:lcd)&#xA;    -- deprecated, use cd_type instead&#xA;    -- global_cd = true,&#xA;&#xA;    -- controls how the directory is changed. valid options are &#34;global&#34;, &#34;local&#34;, and &#34;tab&#34;&#xA;    --   &#34;global&#34; changes directory for the neovim process. same as the :cd command&#xA;    --   &#34;local&#34; changes directory for the current window. same as the :lcd command&#xA;    --   &#34;tab&#34; changes directory for the current tab. same as the :tcd command&#xA;    --&#xA;    -- if set, overrides the value of global_cd&#xA;    cd_type = &#34;global&#34;,&#xA;&#xA;    -- sort the list of workspaces by name after loading from the workspaces path.&#xA;    sort = true,&#xA;&#xA;    -- sort by recent use rather than by name. requires sort to be true&#xA;    mru_sort = true,&#xA;&#xA;    -- option to automatically activate workspace when opening neovim in a workspace directory&#xA;    auto_open = false,&#xA;&#xA;    -- option to automatically activate workspace when changing directory not via this plugin&#xA;    -- set to &#34;autochdir&#34; to enable auto_dir when using :e and vim.opt.autochdir&#xA;    -- valid options are false, true, and &#34;autochdir&#34;&#xA;    auto_dir = false,&#xA;&#xA;    -- enable info-level notifications after adding or removing a workspace&#xA;    notify_info = true,&#xA;&#xA;    -- lists of hooks to run after specific actions&#xA;    -- hooks can be a lua function or a vim command (string)&#xA;    -- lua hooks take a name, a path, and an optional state table&#xA;    -- if only one hook is needed, the list may be omitted&#xA;    hooks = {&#xA;        add = {},&#xA;        remove = {},&#xA;        rename = {},&#xA;        open_pre = {},&#xA;        open = {},&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, the following settings will add a hook to run &lt;code&gt;:Telescope find_files&lt;/code&gt; after opening a workspace, and keep the default workspaces path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;workspaces&#34;).setup({&#xA;    hooks = {&#xA;        open = { &#34;Telescope find_files&#34; },&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;The setup function registers the following user commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesAdd [name] [path]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The workspace with the specified name and path will be registered.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesAddDir [path]&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The directory with the specified or current path will be registered and each one of its sub folders stored as workspaces.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesRemove [name]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The workspace with the specified name will be removed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesRemoveDir [name]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The directory with the specified name will be removed as well as all of its associated workspaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesRename [name] [new_name]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The workspace with the specified name will be renamed to &lt;code&gt;new_name&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesList&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Prints all workspaces.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesListDirs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Prints all directories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesOpen [name]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Opens the named workspace. &lt;em&gt;opening&lt;/em&gt; a workspace means to change the current directory to that workspace&#39;s path.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:WorkspacesSyncDirs&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Synchronize workspaces from registered directories.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h workspaces-usage&lt;/code&gt; for more information on the commands.&lt;/p&gt; &#xA;&lt;h2&gt;Lua API&lt;/h2&gt; &#xA;&lt;p&gt;The workspaces commands may also be accessed from Lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local workspaces = require(&#34;workspaces&#34;)&#xA;&#xA;workspaces.add(path: string, name: string)&#xA;&#xA;workspaces.add_dir(path: string)&#xA;&#xA;workspaces.remove(name: string)&#xA;&#xA;workspaces.remove_dir(name: string)&#xA;&#xA;workspaces.rename(name: string, new_name: string)&#xA;&#xA;workspaces.list()&#xA;&#xA;workspaces.list_dirs()&#xA;&#xA;workspaces.open(name: string)&#xA;&#xA;workspaces.get(): table&#xA;&#xA;workspaces.name(): string|nil&#xA;&#xA;workspaces.path(): string|nil&#xA;&#xA;workspaces.sync_dirs()&#xA;&#xA;workspaces.get_custom(name: string): string|nil&#xA;&#xA;workspaces.set_custom(name: string, data: string)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h workspaces-api&lt;/code&gt; for more information on the API functions.&lt;/p&gt; &#xA;&lt;h2&gt;Telescope Picker&lt;/h2&gt; &#xA;&lt;p&gt;workspaces.nvim is bundled with a &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope&lt;/a&gt; picker extension. To enable, add the following to your config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;telescope.load_extension(&#34;workspaces&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The picker will list all workspaces. &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; will open the selected workspace, running any registered hooks. &lt;code&gt;&amp;lt;c-t&amp;gt;&lt;/code&gt; will open the selected workspace in a new tab.&lt;/p&gt; &#xA;&lt;p&gt;To keep nvim in insert mode (for example, when chaining multiple telescope pickers), add the following to your telescope setup function. You can also specify the highlight group used for the path in the picker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).setup({&#xA;  extensions = {&#xA;    workspaces = {&#xA;      -- keep insert mode after selection in the picker, default is false&#xA;      keep_insert = true,&#xA;      -- Highlight group used for the path in the picker, default is &#34;String&#34;&#xA;      path_hl = &#34;String&#34;&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Remember that more than one hook is allowed, so these may be combined in creative ways! Hooks may also be registered after adding and removing workspaces, not only after opening a workspace.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/natecraddock/workspaces.nvim/wiki/Configuration-Recipes&#34;&gt;Configuration Recipes&lt;/a&gt; and &lt;a href=&#34;https://github.com/natecraddock/workspaces.nvim/wiki/Troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; on the wiki for more inspiration and help configuring the plugin. Feel free to contribute your setup!&lt;/p&gt; &#xA;&lt;h3&gt;fzf file finder&lt;/h3&gt; &#xA;&lt;p&gt;Change directory to the workspace and run fzf.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;workspaces&#34;).setup({&#xA;    hooks = {&#xA;        open = &#34;FZF&#34;,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open a file tree&lt;/h3&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;workspaces&#34;).setup({&#xA;    hooks = {&#xA;        open = &#34;NvimTreeOpen&#34;,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Load a saved session&lt;/h3&gt; &#xA;&lt;p&gt;Load any saved sessions using &lt;a href=&#34;https://github.com/natecraddock/sessions.nvim&#34;&gt;natecraddock/sessions.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;workspaces&#34;).setup({&#xA;    hooks = {&#xA;        open_pre = {&#xA;          -- If recording, save current session state and stop recording&#xA;          &#34;SessionsStop&#34;,&#xA;&#xA;          -- delete all buffers (does not save changes)&#xA;          &#34;silent %bdelete!&#34;,&#xA;        },&#xA;        open = function()&#xA;          require(&#34;sessions&#34;).load(nil, { silent = true })&#xA;        end,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Combo&lt;/h3&gt; &#xA;&lt;p&gt;Open nvim-tree and a telescope file picker.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;workspaces&#34;).setup({&#xA;    hooks = {&#xA;        open = { &#34;NvimTreeOpen&#34;, &#34;Telescope find_files&#34; },&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you create a hook you think is useful, let me know and I might just add it to this list!&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;p&gt;workspaces.nvim is a simple plugin with the ability to be extended through hooks. Nothing is registered or opened automatically. If you want a plugin to be less manual, try an alternative:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ahmedkhalf/project.nvim&#34;&gt;ahmedkhalf/project.nvim&lt;/a&gt; Automatically tracks workspace directories based on pattern matching heuristics.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>