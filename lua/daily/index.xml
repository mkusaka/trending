<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-03T01:34:25Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ixahmedxi/trashvim</title>
    <updated>2022-12-03T01:34:25Z</updated>
    <id>tag:github.com,2022-12-03:/ixahmedxi/trashvim</id>
    <link href="https://github.com/ixahmedxi/trashvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The trashiest of neovim lua configs for the one and only trash_dev. ðŸ—‘&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/ixahmedxi/trashvim/main/trash.jpg&#34; alt=&#34;Trash logo&#34; width=&#34;100px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Trashvim&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A neovim configuration focusing on TypeScript and web development, utilising LSP and other features to deliver a powerful IDE like editing experience with the performance and productivity of neovim.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/ixahmedxi/trashvim/main/screenshot.png&#34; alt=&#34;Screenshot tsx file&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully setup LSP configuration using Mason, lspconfig and typescript.nvim.&lt;/li&gt; &#xA; &lt;li&gt;Linters and formatters support using null-ls.&lt;/li&gt; &#xA; &lt;li&gt;Terminal panes support using toggleterm.&lt;/li&gt; &#xA; &lt;li&gt;Winbar support outlining the code scope.&lt;/li&gt; &#xA; &lt;li&gt;Buffer organisation using bufferline.&lt;/li&gt; &#xA; &lt;li&gt;File explorer and git management using neo-tree.&lt;/li&gt; &#xA; &lt;li&gt;Highlight of colors including TailwindCSS.&lt;/li&gt; &#xA; &lt;li&gt;Typescript actions such as remove unused, organise imports, adding missing imports...etc&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And many more!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: Before starting the installation, make sure that if you have a &lt;code&gt;~/.config/nvim&lt;/code&gt; folder that you move it somewhere else.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the configuration&#xA;cd ~/.config&#xA;git clone https://github.com/ixahmedxi/trashvim nvim &#xA;cd ~/.config/nvim&#xA;&#xA;# Run PackerSync to get all of the plugins&#xA;nvim --headless -c &#39;autocmd User PackerComplete quitall&#39; -c &#39;PackerSync&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make sure that everything is working fine, try running &lt;code&gt;nvim init.lua&lt;/code&gt; and seeing if any errors occur, it should start installing treesitter languages and lsp servers on that initial open. If any errors are present, try running &lt;code&gt;:PackerSync&lt;/code&gt; again.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scalameta/nvim-metals</title>
    <updated>2022-12-03T01:34:25Z</updated>
    <id>tag:github.com,2022-12-03:/scalameta/nvim-metals</id>
    <link href="https://github.com/scalameta/nvim-metals" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Metals plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7gqEQOi.png&#34; alt=&#34;nvim-metals logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;nvim-metals&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-metals&lt;/code&gt; is a Lua plugin built to provide a better experience while using Metals, the Scala Language Server, with Neovim&#39;s built-in &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;LSP support&lt;/a&gt;.[^no-lspconfig] You can see all the available features &lt;a href=&#34;https://github.com/scalameta/nvim-metals/discussions/279&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/FaVDrJegEh&#34;&gt; &lt;img alt=&#34;link to discord&#34; src=&#34;https://img.shields.io/discord/632642981228314653?style=flat-square&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/scalameta/nvim-metals/raw/master/doc/metals.txt&#34;&gt; &lt;img alt=&#34;link to help docs&#34; src=&#34;https://img.shields.io/badge/docs-%3Ah%20nvim--metals-blue?style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Before you get started you need to ensure that you are using nvim v.0.8.0 or newer. If you&#39;re still on v0.7.x then you&#39;ll want to target the &lt;code&gt;v0.7.x&lt;/code&gt; tag.&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;a href=&#34;https://get-coursier.io/docs/cli-installation&#34;&gt;Coursier&lt;/a&gt; is installed locally.[^coursier]&lt;/li&gt; &#xA; &lt;li&gt;Ensure that you have all the LSP mappings for the core functionality you want setup.[^mappings]&lt;/li&gt; &#xA; &lt;li&gt;Ensure &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; is installed.[^plenary]&lt;/li&gt; &#xA; &lt;li&gt;Subscribe to &lt;a href=&#34;https://github.com/scalameta/nvim-metals/discussions/253&#34;&gt;this discussion&lt;/a&gt; which will notify you of any breaking changes.&lt;/li&gt; &#xA; &lt;li&gt;Unfamiliar with Lua and Neovim? Check out the great &lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide&#34;&gt;&lt;code&gt;nanotee/nvim-lua-guide&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: This plugin works without needing to install &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;neovim/nvim-lspconfig&lt;/a&gt;. If you have it installed for other languages, that&#39;s not a problem, but make sure you do not have Metals configured through &lt;code&gt;nvim-lspconfig&lt;/code&gt; while using this plugin.[^no-lspconfig]&lt;/p&gt; &#xA;&lt;p&gt;Example if using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#39;scalameta/nvim-metals&#39;, requires = { &#34;nvim-lua/plenary.nvim&#34; }})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can find a full &lt;a href=&#34;https://github.com/scalameta/nvim-metals/discussions/39&#34;&gt;minimal example configuration here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can find the full documentation with &lt;a href=&#34;https://github.com/scalameta/nvim-metals/raw/main/doc/metals.txt&#34;&gt;&lt;code&gt;:help vim-metals&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can find a full &lt;a href=&#34;https://github.com/scalameta/nvim-metals/discussions/279&#34;&gt;list of features here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Settings and Commands&lt;/h3&gt; &#xA;&lt;p&gt;To view all of the available commands, check out &lt;code&gt;:help metals-commands&lt;/code&gt; in the help docs. Similarly, to see the available configuration settings check out &lt;code&gt;:help metals-settings&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;To see the full details on the available configurations, checkout out &lt;code&gt;:help metals-integrations&lt;/code&gt;. The currently available integrations are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^no-lspconfig]: If you&#39;re familiar with nvim and LSP you&#39;ll probably know of &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;nvim-lspconfig&lt;/code&gt;&lt;/a&gt; which also has a Metals configuration. Note that this is a very minimal version with no specific Metals commands and no Metals extensions. You can see more info on this &lt;a href=&#34;https://github.com/scalameta/nvim-metals/discussions/93&#34;&gt;here&lt;/a&gt;. &lt;strong&gt;DO NOT&lt;/strong&gt; try to use Metals both with &lt;code&gt;nvim-lspconfig&lt;/code&gt; and with &lt;code&gt;nvim-metals&lt;/code&gt; as stuff &lt;em&gt;will&lt;/em&gt; not work right. [^coursier]: &lt;code&gt;nvim-metals&lt;/code&gt; uses Coursier to download and update Metals. &lt;em&gt;NOTE&lt;/em&gt;: On Windows, you should run &lt;code&gt;coursier&lt;/code&gt; or &lt;code&gt;cs.exe&lt;/code&gt; once from the command line as this is how it will install itself. Once this is done you should add &lt;code&gt;C:\Users\YOURNAME\AppData\Coursier\data\bin&lt;/code&gt; to your path. To verify that it is properly installed you can run &lt;code&gt;cs --help&lt;/code&gt; from a new shell. [^mappings]: By default methods for things like goto definition, find references, etc are there, but not automatically mapped. You can find a minimal example configuration &lt;a href=&#34;https://github.com/scalameta/nvim-metals/discussions/39&#34;&gt;here&lt;/a&gt;. [^plenary]: You&#39;re more than likely already relying on for other plugins. However, make sure to also have this installed as Metals uses it for things like Jobs, popups, and paths.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-lua/lsp-status.nvim</title>
    <updated>2022-12-03T01:34:25Z</updated>
    <id>tag:github.com,2022-12-03:/nvim-lua/lsp-status.nvim</id>
    <link href="https://github.com/nvim-lua/lsp-status.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Utility functions for getting diagnostic status and progress messages from LSP servers, for use in the Neovim statusline&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp-status.nvim&lt;/h1&gt; &#xA;&lt;p&gt;This is a Neovim plugin/library for generating statusline components from the built-in LSP client.&lt;/p&gt; &#xA;&lt;h2&gt;Notices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021/03/13&lt;/strong&gt;: Some users report success using the Google &#34;Noto Emoji&#34; font for &lt;code&gt;status_symbol&lt;/code&gt; and &lt;code&gt;indicator_hint&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020/11/19&lt;/strong&gt;: Please note that the default diagnostics symbols require Font Awesome or a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;Nerd Font&lt;/a&gt;. You may also change the diagnostics symbols as shown in the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#configuration&#34;&gt;configuration&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020/11/13&lt;/strong&gt;: Due to &lt;a href=&#34;https://github.com/neovim/neovim/pull/12655&#34;&gt;this PR&lt;/a&gt;, you must update to the latest Neovim &lt;code&gt;master&lt;/code&gt; to avoid errors with the old diagnostics API. See &lt;a href=&#34;https://github.com/nvim-lua/lsp-status.nvim/issues/19&#34;&gt;issue #19&lt;/a&gt; for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2020/05/25&lt;/strong&gt;: There has been a minor breaking change to the API: &lt;code&gt;extension_callbacks&lt;/code&gt; is now named &lt;code&gt;extensions&lt;/code&gt;. There have also been a number of additions and improvements; see the below (specifically &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#example-use&#34;&gt;Example Use&lt;/a&gt;) for details.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#protocol-extensions&#34;&gt;Protocol Extensions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#example-use&#34;&gt;Example Use&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#all-together-now&#34;&gt;All together, now&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Show the current containing function (like &lt;code&gt;b:coc_current_function&lt;/code&gt;): &lt;img src=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/images/no_errors.png&#34; alt=&#34;Statusline showing current function and no errors&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Easily access diagnostic counts: &lt;img src=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/images/some_errors.png&#34; alt=&#34;Statusline showing some error indicators&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Show progress messages from servers: &lt;img src=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/images/msgs.png&#34; alt=&#34;Statusline showing progress messages from a server&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You will need a version of Neovim that includes the built-in LSP client (right now, that means nightly). Use your preferred package/plugin manager. With &lt;a href=&#34;https://github.com/kristijanhusak/vim-packager&#34;&gt;&lt;code&gt;vim-packager&lt;/code&gt;&lt;/a&gt;, this looks like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call packager#add(&#39;nvim-lua/lsp-status.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The plugin provides several utilities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;update_current_function() -- Set/reset the b:lsp_current_function variable&#xA;-- Shows the current function, method, class, struct, interface, enum, module, or namespace&#xA;diagnostics() -- Return a table with all diagnostic counts for the current buffer&#xA;messages() -- Return a table listing progress and other status messages for display&#xA;register_progress() -- Register the provided handler for progress messages&#xA;register_client() -- Register a client for messages&#xA;-- Integrate misc. LS protocol extensions into the messages framework&#xA;-- Each extension table contains a set of handlers and a setup() function &#xA;-- returning said handlers&#xA;extensions = { clangd, pyls_ms }&#xA;-- Set up a client for use with lsp-status. Calls register_client() and sets up &#xA;-- buffer autocommands&#xA;on_attach(client) &#xA;config(config_vals) -- Configure lsp-status&#xA;-- Table of client capabilities extended to signal support for progress messages&#xA;capabilities &#xA;status() -- One example out-of-the-box statusline component (as shown in the images above)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Protocol Extensions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;lsp-status.nvim&lt;/code&gt; supports messaging-related protocol extensions offered by &lt;a href=&#34;https://clangd.llvm.org/extensions.html#file-status&#34;&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/Microsoft/python-language-server&#34;&gt;Microsoft&#39;s Python language server&lt;/a&gt; (&lt;code&gt;python/setStatusBarMessage&lt;/code&gt;, &lt;code&gt;python/beginProgress&lt;/code&gt;, &lt;code&gt;python/reportProgress&lt;/code&gt;, and &lt;code&gt;python/endProgress&lt;/code&gt;). To use these extensions, register the handlers provided in the &lt;code&gt;extensions&lt;/code&gt; table (the keys for the handlers are the relevant LSP method name).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For &lt;code&gt;clangd&lt;/code&gt;, you must also set &lt;code&gt;init_options = { clangdFileStatus = true }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;New&lt;/strong&gt;: You can also call &lt;code&gt;lsp_status.extensions.&amp;lt;server name&amp;gt;.setup()&lt;/code&gt; to return the full set of handlers, as shown below.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can configure &lt;code&gt;lsp-status.nvim&lt;/code&gt; using the &lt;code&gt;config&lt;/code&gt; function, which takes a table of configuration values. The following configuration options are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;kind_labels&lt;/code&gt;: An optional map from LSP symbol kinds to label symbols. Used to decorate the current function name. Default: &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;select_symbol&lt;/code&gt;: An optional handler of the form &lt;code&gt;function(cursor_pos, document_symbol)&lt;/code&gt; that should return &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;document_symbol&lt;/code&gt; (a &lt;code&gt;DocumentSymbol&lt;/code&gt;) should be accepted as the symbol currently containing the cursor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, the &lt;a href=&#34;https://github.com/sumneko/lua-language-server&#34;&gt;sumneko lua server&lt;/a&gt; sends &lt;code&gt;valueRange&lt;/code&gt; (which is not specified in the protocol) to give the range for a function&#39;s start and end. To respect &lt;code&gt;valueRange&lt;/code&gt;, you can use the following configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp_status.config {&#xA;  select_symbol = function(cursor_pos, symbol)&#xA;    if symbol.valueRange then&#xA;      local value_range = {&#xA;        [&#34;start&#34;] = {&#xA;          character = 0,&#xA;          line = vim.fn.byte2line(symbol.valueRange[1])&#xA;        },&#xA;        [&#34;end&#34;] = {&#xA;          character = 0,&#xA;          line = vim.fn.byte2line(symbol.valueRange[2])&#xA;        }&#xA;      }&#xA;&#xA;      return require(&#34;lsp-status.util&#34;).in_range(cursor_pos, value_range)&#xA;    end&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;current_function&lt;/code&gt;: Boolean, &lt;code&gt;true&lt;/code&gt; if the current function should be updated and displayed in the default statusline component.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;show_filename&lt;/code&gt;: Boolean, &lt;code&gt;true&lt;/code&gt; if the filename should be displayed in the progress text.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indicator_*&lt;/code&gt;-group: strings to show as diagnostic warnings. If you don&#39;t have Nerd/Awesome Fonts you can replace defaults with ASCII chars like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Put this somewhere near lsp_status.register_progress()&#xA;  lsp_status.config({&#xA;    indicator_errors = &#39;E&#39;,&#xA;    indicator_warnings = &#39;W&#39;,&#xA;    indicator_info = &#39;i&#39;,&#xA;    indicator_hint = &#39;?&#39;,&#xA;    indicator_ok = &#39;Ok&#39;,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;indicator_separator&lt;/code&gt;: a string which goes between each diagnostic group symbol and its count. Defaults to whitespace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;component_separator&lt;/code&gt;: a string which goes between each &#34;chunk&#34; of the statusline component (i.e. different diagnostic groups, messages). Defaults to whitespace.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt;: Boolean, &lt;code&gt;true&lt;/code&gt; by default. If &lt;code&gt;false&lt;/code&gt;, the default statusline component does not display LSP diagnostics.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Use&lt;/h2&gt; &#xA;&lt;p&gt;Here is an example configuration (also using &lt;a href=&#34;https://github.com/neovim/nvim-lsp/&#34;&gt;&lt;code&gt;nvim-lsp&lt;/code&gt;&lt;/a&gt;) showing how &lt;code&gt;lsp-status&lt;/code&gt; can be integrated into one&#39;s statusline and other LSP configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;In any Lua file you load:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsp_status = require(&#39;lsp-status&#39;)&#xA;-- completion_customize_lsp_label as used in completion-nvim&#xA;-- Optional: customize the kind labels used in identifying the current function.&#xA;-- g:completion_customize_lsp_label is a dict mapping from LSP symbol kind &#xA;-- to the string you want to display as a label&#xA;-- lsp_status.config { kind_labels = vim.g.completion_customize_lsp_label }&#xA;&#xA;-- Register the progress handler&#xA;lsp_status.register_progress()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before calling &lt;code&gt;setup&lt;/code&gt; for each relevant LSP client:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Set default client capabilities plus window/workDoneProgress&#xA;config.capabilities = vim.tbl_extend(&#39;keep&#39;, config.capabilities or {}, lsp_status.capabilities)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;In an &lt;code&gt;on_attach&lt;/code&gt; function for each relevant LSP client:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Register client for messages and set up buffer autocommands to update &#xA;-- the statusline and the current function.&#xA;-- NOTE: on_attach is called with the client object, which is the &#34;client&#34; parameter below&#xA;lsp_status.on_attach(client)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Specific client configuration (following &lt;code&gt;nvim-lsp&lt;/code&gt; conventions):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;clangd = {&#xA;  handlers = lsp_status.extensions.clangd.setup()&#xA;},&#xA;pyls_ms = {&#xA;  handlers = lsp_status.extensions.pyls_ms.setup()&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LSP statusline segment&lt;/h3&gt; &#xA;&lt;p&gt;An example statusline segment is provided in &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/lsp-status.nvim/master/lua/lsp-status/statusline.lua&#34;&gt;lua/lsp-status/statusline&lt;/a&gt;. You are encouraged to read the source and develop your own statusline segment, but if you&#39;d like something reasonable out-of-the-box, you can call &lt;code&gt;lsp_status.status()&lt;/code&gt; somewhere in your statusline definition (make sure you have &lt;code&gt;require&lt;/code&gt;&#39;d the &lt;code&gt;lsp-status&lt;/code&gt; module too!)&lt;/p&gt; &#xA;&lt;h3&gt;All together, now&lt;/h3&gt; &#xA;&lt;p&gt;Here&#39;s a complete example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; END&#xA;local lsp_status = require(&#39;lsp-status&#39;)&#xA;lsp_status.register_progress()&#xA;&#xA;local lspconfig = require(&#39;lspconfig&#39;)&#xA;&#xA;-- Some arbitrary servers&#xA;lspconfig.clangd.setup({&#xA;  handlers = lsp_status.extensions.clangd.setup(),&#xA;  init_options = {&#xA;    clangdFileStatus = true&#xA;  },&#xA;  on_attach = lsp_status.on_attach,&#xA;  capabilities = lsp_status.capabilities&#xA;})&#xA;&#xA;lspconfig.pyls_ms.setup({&#xA;  handlers = lsp_status.extensions.pyls_ms.setup(),&#xA;  settings = { python = { workspaceSymbols = { enabled = true }}},&#xA;  on_attach = lsp_status.on_attach,&#xA;  capabilities = lsp_status.capabilities&#xA;})&#xA;&#xA;lspconfig.ghcide.setup({&#xA;  on_attach = lsp_status.on_attach,&#xA;  capabilities = lsp_status.capabilities&#xA;})&#xA;lspconfig.rust_analyzer.setup({&#xA;  on_attach = lsp_status.on_attach,&#xA;  capabilities = lsp_status.capabilities&#xA;})&#xA;END&#xA;&#xA;&#34; Statusline&#xA;function! LspStatus() abort&#xA;  if luaeval(&#39;#vim.lsp.buf_get_clients() &amp;gt; 0&#39;)&#xA;    return luaeval(&#34;require(&#39;lsp-status&#39;).status()&#34;)&#xA;  endif&#xA;&#xA;  return &#39;&#39;&#xA;endfunction&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is &#34;complete&#34; - it works in all the ways it was originally intended to, and it doesn&#39;t seem to break. That said, it hasn&#39;t been tested much, and I&#39;m open to adding new features if others want them.&lt;/p&gt; &#xA;&lt;p&gt;One thing that probably should be added is proper documentation of some sort. The code could also stand to be cleaned up.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Bug reports and feature requests are welcome! PRs are doubly welcome!&lt;/p&gt;</summary>
  </entry>
</feed>