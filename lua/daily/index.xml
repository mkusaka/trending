<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-28T01:28:53Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hackerhouse-opensource/OffensiveLua</title>
    <updated>2023-10-28T01:28:53Z</updated>
    <id>tag:github.com,2023-10-28:/hackerhouse-opensource/OffensiveLua</id>
    <link href="https://github.com/hackerhouse-opensource/OffensiveLua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Offensive Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Offensive Lua&lt;/h1&gt; &#xA;&lt;p&gt;Offensive Lua is a collection of offensive security scripts written in Lua with FFI. The scripts run with LuaJIT (v2.0.5) on Microsoft Windows to perform common tasks.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run an EXE&lt;/li&gt; &#xA; &lt;li&gt;Bypass UAC&lt;/li&gt; &#xA; &lt;li&gt;File, Networking or Registry&lt;/li&gt; &#xA; &lt;li&gt;Common Tasks (e.g. bind a shell)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lua is a lesser used but very useful choice for post-exploitation scripting language. It&#39;s flexible, lightweight, easy to embed, runs interpreted or as bytecode from memory and allows for JIT to interact with the host OS libraries.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Filename&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bin2hex.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Convert a binary to hex for binrun.lua&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;binrun.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Writes a hex of EXE to a random location and exec&#39;s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;bindshell.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;bind a shell on TCP port 5000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;ComputerDefaultsUACBypass.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bypass UAC restrictions via ms-settings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;console.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Console App Example&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;downloadexec.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Download &amp;amp; Exec over HTTP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;downloadexec_UACbypass.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Download &amp;amp; BypassUAC &amp;amp; Exec over HTTP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;filewrite.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Write a file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;luajit.exe&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;LuaJIT compiled from our internal source tree.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;messagebox.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MessageBox Example&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;regread.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Read from Registry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;regwrite.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Write to Registry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;regwritedel.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Write and Delete from Registry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;rickroll.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Open a browser on URL&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;runcmd.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Run a command popen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;runcmd2.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Run a command os.execute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;runswhide.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Run a command via CreateProcess with SW_HIDE&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;uac_bypass_bluetooth_win10.lua&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bypass UAC via Bluetooth on Windows10&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;These files are available under a Attribution-NonCommercial-NoDerivatives 4.0 International license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FredeEB/tardis.nvim</title>
    <updated>2023-10-28T01:28:53Z</updated>
    <id>tag:github.com,2023-10-28:/FredeEB/tardis.nvim</id>
    <link href="https://github.com/FredeEB/tardis.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Timetravel for neovim&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FredeEB/tardis.nvim/main/assets/tardis.webp&#34;&gt; &#xA;&lt;p&gt;Tardis allows you to travel in time (git history) scrolling through each revision of your current file.&lt;/p&gt; &#xA;&lt;p&gt;Inspired by &lt;img src=&#34;https://github.com/emacsmirror/git-timemachine&#34; alt=&#34;git-timemachine&#34;&gt; which I used extensively when I was using emacs.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Like with any other&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;fredeeb/tardis.nvim&#39;,&#xA;    dependencies = { &#39;nvim-lua/plenary.nvim&#39; },&#xA;    config = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default options are&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;tardis-nvim&#39;).setup {&#xA;    keymap = {&#xA;        next = &#39;&amp;lt;C-j&amp;gt;&#39;,       -- next entry in log (older)&#xA;        prev = &#39;&amp;lt;C-k&amp;gt;&#39;,       -- previous entry in log (newer)&#xA;        quit = &#39;q&#39;,           -- quit all&#xA;        commit_message = &#39;m&#39;, -- show commit message for current commit in buffer&#xA;    },&#xA;    commits = 32,             -- max number of commits to read&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Using tardis is pretty simple&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Tardis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This puts you into a new buffer where you can use the keymaps, like described above, to navigate the revisions of the currently open file&lt;/p&gt; &#xA;&lt;h1&gt;Known issues&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;img src=&#34;https://github.com/FredeEB/tardis.nvim/issues&#34; alt=&#34;issues&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Go ahead :)&lt;/p&gt;</summary>
  </entry>
</feed>