<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-07T01:40:47Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>3rd/image.nvim</title>
    <updated>2023-07-07T01:40:47Z</updated>
    <id>tag:github.com,2023-07-07:/3rd/image.nvim</id>
    <link href="https://github.com/3rd/image.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üñºÔ∏è Bringing images to Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üñºÔ∏è image.nvim&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; &lt;br&gt; This is very much a &lt;strong&gt;work in progress&lt;/strong&gt;, &lt;strong&gt;there are many bugs&lt;/strong&gt;, and there&#39;s lots to improve, but... we&#39;re getting there!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;image.nvim&lt;/strong&gt; is an attempt to add image support to Neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/3rd/image.nvim/assets/59587503/9a9a1792-6476-4d96-8b8e-d3cdd7f5759e&#34;&gt;https://github.com/3rd/image.nvim/assets/59587503/9a9a1792-6476-4d96-8b8e-d3cdd7f5759e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;These are things you have to setup on your own:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ImageMagick/ImageMagick&#34;&gt;ImageMagick&lt;/a&gt; - mandatory&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leafo/magick&#34;&gt;magick LuaRock&lt;/a&gt; - mandatory (&lt;code&gt;luarocks --local install magick&lt;/code&gt; or through your &lt;a href=&#34;https://github.com/vhyrro/hologram.nvim#install&#34;&gt;package manager&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt; - for the &lt;code&gt;kitty&lt;/code&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt; - for the &lt;code&gt;ueberzug&lt;/code&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/curl/curl&#34;&gt;curl&lt;/a&gt; - for remote images&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;On some distros, like NixOS, you will find that the &lt;code&gt;magick&lt;/code&gt; LuaRock cannot find &lt;code&gt;libMagickWand.so&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One way to fix it is to patch &lt;code&gt;~/.luarocks/share/lua/5.1/magick/wand/lib.lua&lt;/code&gt; and change the first argument of the &lt;code&gt;try_to_load&lt;/code&gt; function to your &lt;code&gt;&#34;/nix/store/xxxxxxxxxxxxxxxx-imagemagick-7.*.*-**/lib/libMagickWand-7.****.so&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After installing the &lt;code&gt;magick&lt;/code&gt; LuaRock, you need to change your Neovim config to load it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- make sure that this happens before `image.nvim` is loaded:&#xA;package.path = package.path .. &#34;;/home/you/.luarocks/share/lua/5.1/?/init.lua;&#34;&#xA;package.path = package.path .. &#34;;/home/you/.luarocks/share/lua/5.1/?.lua;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default config&#xA;require(&#34;image&#34;).setup({&#xA;  backend = &#34;kitty&#34;,&#xA;  integrations = {&#xA;    markdown = {&#xA;      enabled = true,&#xA;      sizing_strategy = &#34;auto&#34;,&#xA;      download_remote_images = true,&#xA;      clear_in_insert_mode = false,&#xA;    },&#xA;    neorg = {&#xA;      enabled = true,&#xA;      download_remote_images = true,&#xA;      clear_in_insert_mode = false,&#xA;    },&#xA;  },&#xA;  max_width = nil,&#xA;  max_height = nil,&#xA;  max_width_window_percentage = nil,&#xA;  max_height_window_percentage = 50,&#xA;  kitty_method = &#34;normal&#34;,&#xA;  kitty_tmux_write_delay = 10, -- makes rendering more reliable with Kitty+Tmux&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Try it out with a minimal setup&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/minimal-setup.lua&#34;&gt;minimal-setup.lua&lt;/a&gt; from the root of this repository and run the demo with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim --clean -c &#34;:luafile minimal-setup.lua&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Backends&lt;/h3&gt; &#xA;&lt;p&gt;All the backends support rendering inside Tmux.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;kitty&lt;/code&gt; - best in class &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Works great, is snappy and has very few artifacts (on my machine, at least).&lt;/li&gt; &#xA;   &lt;li&gt;Use the default mode, the unicode placeholder method is buggy for now.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ueberzug&lt;/code&gt; - backed by &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;More genera, on-par with Kitty in terms of features, but slower.&lt;/li&gt; &#xA;   &lt;li&gt;Supports multiple images thanks to &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp/issues/74&#34;&gt;@jstkdng&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sixels&lt;/code&gt; - not implemented yet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Markdown&lt;/li&gt; &#xA; &lt;li&gt;Neorg (&lt;a href=&#34;https://github.com/nvim-neorg/neorg/issues/971&#34;&gt;https://github.com/nvim-neorg/neorg/issues/971&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/3rd/image.nvim/master/lua/types.lua&#34;&gt;types.lua&lt;/a&gt; for a better overview of how everything is modeled.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local api = require(&#34;image&#34;)&#xA;&#xA;-- from a file (absolute path)&#xA;local image = api.from_file(&#34;/path/to/image.png&#34;, {&#xA;  id = &#34;my_image_id&#34;, -- optional, defaults to a random string&#xA;  window = 1000, -- optional, binds image to a window and its bounds&#xA;  buffer = 1000, -- optional, binds image to a buffer (paired with window binding)&#xA;  with_virtual_padding = true, -- optional, pads vertically with extmarks&#xA;  ...geometry, -- optional, { x, y, width, height }&#xA;})&#xA;&#xA;-- from a URL&#xA;local image = api.from_file(&#34;https://gist.ro/s/remote.png&#34;, {&#xA;  id = &#34;my_image_id&#34;, -- optional, defaults to a random string&#xA;  window = 1000, -- optional, binds image to a window and its bounds&#xA;  buffer = 1000, -- optional, binds image to a buffer (paired with window binding)&#xA;  with_virtual_padding = true, -- optional, pads vertically with extmarks&#xA;  ...geometry, -- optional, { x, y, width, height }&#xA;})&#xA;&#xA;image:render() -- render image&#xA;image:render(geometry) -- update image geometry and render it&#xA;image:clear()&#xA;&#xA;image:move(x, y) -- move image&#xA;image:brightness(value) -- change brightness&#xA;image:saturation(value) -- change saturation&#xA;image:hue(value) -- change hue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/edluffy&#34;&gt;@edluffy&lt;/a&gt; for &lt;a href=&#34;https://github.com/edluffy/hologram.nvim&#34;&gt;hologram.nvim&lt;/a&gt; - of which I borrowed a lot of code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vhyrro&#34;&gt;@vhyrro&lt;/a&gt; for his great ideas and &lt;a href=&#34;https://github.com/vhyrro/hologram.nvim&#34;&gt;hologram.nvim fork&lt;/a&gt; changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kovidgoyal&#34;&gt;@kovidgoyal&lt;/a&gt; for &lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;Kitty&lt;/a&gt; - the program I spend most of my time in.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jstkdng&#34;&gt;@jstkdng&lt;/a&gt; for &lt;a href=&#34;https://github.com/jstkdng/ueberzugpp&#34;&gt;ueberzugpp&lt;/a&gt; - the revived version of ueberzug.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The story behind&lt;/h3&gt; &#xA;&lt;p&gt;Some years ago, I took a trip to Emacs land for a few months to learn Elisp and also research what Org-mode is, how it works, and look for features of interest for my workflow. I already had my own document syntax, albeit a very simple one, hacked together with Vimscript and a lot of Regex, and I was looking for ideas to improve it and build features on top of it.&lt;/p&gt; &#xA;&lt;p&gt;I kept working on my &lt;a href=&#34;https://github.com/3rd/syslang&#34;&gt;syntax&lt;/a&gt; over the years, rewrote it many times, and today it&#39;s a proper Tree-sitter grammar, that I use for all my needs, from second braining to managing my tasks and time. It&#39;s helped me control my ADHD and be productive long before I was diagnosed, and it&#39;s still helping me be so much better than I&#39;d be without it today.&lt;/p&gt; &#xA;&lt;p&gt;One thing Emacs and Org-mode had that I liked was the ability to embed images in the document. Of course, we don&#39;t &lt;em&gt;&#34;need&#34;&lt;/em&gt; it, but... I really wanted to have images in my documents.&lt;/p&gt; &#xA;&lt;p&gt;About 3 years ago, I made my &lt;a href=&#34;https://github.com/3rd/vimage.nvim/tree/master&#34;&gt;first attempt&lt;/a&gt; at solving this problem but didn&#39;t get far. If you have similar interests, you might have seen the &lt;a href=&#34;https://www.youtube.com/watch?v=cnt9mPOjrLg&#34;&gt;vimage.nvim demo video&lt;/a&gt; on YouTube.&lt;/p&gt; &#xA;&lt;p&gt;It was using &lt;a href=&#34;https://github.com/seebye/ueberzug&#34;&gt;ueberzug&lt;/a&gt;, which is now dead. It was buggy and didn&#39;t handle things like window-relative positioning, attaching images to windows and buffers, folds, etc.&lt;/p&gt; &#xA;&lt;p&gt;Kitty&#39;s graphics protocol was a thing, but it didn&#39;t work with Tmux, which I&#39;ll probably use forever or replace it with something of my own.&lt;/p&gt; &#xA;&lt;p&gt;Now, things have changed, and I&#39;m happy to announce that rendering images using &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol.html&#34;&gt;Kitty&#39;s graphics protocol&lt;/a&gt; from Neovim inside Tmux is working, and it&#39;s working pretty well!&lt;/p&gt; &#xA;&lt;p&gt;My plan for this plugin is to support multiple backends, provide a few core integrations, and an easy-to-use API for other plugin authors to build on top of. There is a lot of logic that deals with positioning, cropping, bounds, folds, extmarks, etc. that is painful and unrealistic to write from scratch for every plugin that wants to use images.&lt;/p&gt;</summary>
  </entry>
</feed>