<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-31T01:38:43Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rubbertoe98/FiveM-Scripts</title>
    <updated>2023-03-31T01:38:43Z</updated>
    <id>tag:github.com,2023-03-31:/rubbertoe98/FiveM-Scripts</id>
    <link href="https://github.com/rubbertoe98/FiveM-Scripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compilation of my publically released FiveM code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FiveM-Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Compilation of my publicly released code&lt;/p&gt; &#xA;&lt;p&gt;Feel free to make improvements with PRs&lt;/p&gt; &#xA;&lt;p&gt;My personal dev discord &lt;a href=&#34;https://discord.gg/dnZTpUh&#34;&gt;https://discord.gg/dnZTpUh&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wintermute-cell/gitignore.nvim</title>
    <updated>2023-03-31T01:38:43Z</updated>
    <id>tag:github.com,2023-03-31:/wintermute-cell/gitignore.nvim</id>
    <link href="https://github.com/wintermute-cell/gitignore.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim plugin for generating .gitignore files.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitignore.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/wintermute-cell/gitignore.nvim/raw/resources/_resources/banner.webp&#34; alt=&#34;gitignore.nvim logo banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A neovim plugin for generating .gitignore files in seconds, by allowing you to select from a huge number of different technologies.&lt;/p&gt; &#xA;&lt;p&gt;This plugin is functionally identical to the service offered by &lt;a href=&#34;https://www.toptal.com/developers/gitignore/&#34;&gt;gitignore.io&lt;/a&gt;, but capable of generating &lt;code&gt;.gitignore&lt;/code&gt; files offline, and directly from within neovim.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wintermute-cell/gitignore.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wintermute-cell/gitignore.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wintermute-cell/gitignore.nvim/master/#demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wintermute-cell/gitignore.nvim/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Dependency&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;gitignore.nvim&lt;/code&gt; depends on &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;, please &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim#installation&#34;&gt;install&lt;/a&gt; that plugin first!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;After installing &lt;code&gt;telescope.nvim&lt;/code&gt;, you can install &lt;code&gt;gitignore.nvim&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;wintermute-cell/gitignore.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;call dein#add(&#34;wintermute-cell/gitignore.nvim&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;     &#34;wintermute-cell/gitignore.nvim&#34;,&#xA;     requires = {&#xA;        &#34;nvim-telescope/telescope.nvim&#34;&#xA;     }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This plugin ships with only one command which when run, it will create a buffer with the &lt;code&gt;.gitignore&lt;/code&gt; contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The buffer will not save automatically, so there is no risk of overwriting an existing &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can use the corresponding &lt;code&gt;lua&lt;/code&gt; function directly, for example to create a keymap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local gitignore = require(&#34;gitignore&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;gi&#34;, gitignore.generate)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Selecting multiple items&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;gitignore.nvim&lt;/code&gt; makes use of &lt;code&gt;telescope.nvim&lt;/code&gt;&#39;s multi-selection keybinds. This means that by default, you can (de-)select multiple keywords with &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt;, and confirm your selection with &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; (Enter). In case of multiple selected keywords, the keyword highlighted you press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; on will &lt;strong&gt;not&lt;/strong&gt; be added to the selection!&lt;/p&gt; &#xA;&lt;p&gt;For convenience, when no multi-selection is made before pressing &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; will actually add the highlighted item to the selection, and create a &lt;code&gt;.gitignore&lt;/code&gt; file for the single keyword.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/GOHXDt4kYsR8pzrxTEOIridTf&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/GOHXDt4kYsR8pzrxTEOIridTf.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/toptal/gitignore&#34;&gt;Toptal&lt;/a&gt; for providing a huge list of ignore-templates!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MunifTanjim/prettier.nvim</title>
    <updated>2023-03-31T01:38:43Z</updated>
    <id>tag:github.com,2023-03-31:/MunifTanjim/prettier.nvim</id>
    <link href="https://github.com/MunifTanjim/prettier.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prettier plugin for Neovim&#39;s built-in LSP client.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;prettier.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Prettier plugin for Neovim&#39;s built-in LSP client.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.5.0&#34;&gt;Neovim 0.5.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;neovim/nvim-lspconfig&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;&lt;code&gt;jose-elias-alvarez/null-ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugins with your preferred plugin manager. For example:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;code&gt;vim-plug&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;jose-elias-alvarez/null-ls.nvim&#39;&#xA;Plug &#39;MunifTanjim/prettier.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer.nvim&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use(&#39;neovim/nvim-lspconfig&#39;)&#xA;use(&#39;jose-elias-alvarez/null-ls.nvim&#39;)&#xA;use(&#39;MunifTanjim/prettier.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Setting up &lt;code&gt;null-ls&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For Latest Neovim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;&#xA;local group = vim.api.nvim_create_augroup(&#34;lsp_format_on_save&#34;, { clear = false })&#xA;local event = &#34;BufWritePre&#34; -- or &#34;BufWritePost&#34;&#xA;local async = event == &#34;BufWritePost&#34;&#xA;&#xA;null_ls.setup({&#xA;  on_attach = function(client, bufnr)&#xA;    if client.supports_method(&#34;textDocument/formatting&#34;) then&#xA;      vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;Leader&amp;gt;f&#34;, function()&#xA;        vim.lsp.buf.format({ bufnr = vim.api.nvim_get_current_buf() })&#xA;      end, { buffer = bufnr, desc = &#34;[lsp] format&#34; })&#xA;&#xA;      -- format on save&#xA;      vim.api.nvim_clear_autocmds({ buffer = bufnr, group = group })&#xA;      vim.api.nvim_create_autocmd(event, {&#xA;        buffer = bufnr,&#xA;        group = group,&#xA;        callback = function()&#xA;          vim.lsp.buf.format({ bufnr = bufnr, async = async })&#xA;        end,&#xA;        desc = &#34;[lsp] format on save&#34;,&#xA;      })&#xA;    end&#xA;&#xA;    if client.supports_method(&#34;textDocument/rangeFormatting&#34;) then&#xA;      vim.keymap.set(&#34;x&#34;, &#34;&amp;lt;Leader&amp;gt;f&#34;, function()&#xA;        vim.lsp.buf.format({ bufnr = vim.api.nvim_get_current_buf() })&#xA;      end, { buffer = bufnr, desc = &#34;[lsp] format&#34; })&#xA;    end&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;For Older Neovim:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;&#xA;null_ls.setup({&#xA;  on_attach = function(client, bufnr)&#xA;    if client.resolved_capabilities.document_formatting then&#xA;      vim.cmd(&#34;nnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt; &amp;lt;Leader&amp;gt;f :lua vim.lsp.buf.formatting()&amp;lt;CR&amp;gt;&#34;)&#xA;&#xA;      -- format on save&#xA;      vim.cmd(&#34;autocmd BufWritePost &amp;lt;buffer&amp;gt; lua vim.lsp.buf.formatting()&#34;)&#xA;    end&#xA;&#xA;    if client.resolved_capabilities.document_range_formatting then&#xA;      vim.cmd(&#34;xnoremap &amp;lt;silent&amp;gt;&amp;lt;buffer&amp;gt; &amp;lt;Leader&amp;gt;f :lua vim.lsp.buf.range_formatting({})&amp;lt;CR&amp;gt;&#34;)&#xA;    end&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Setting Up &lt;code&gt;prettier.nvim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;prettier.nvim&lt;/code&gt; needs to be initialized with the &lt;code&gt;require(&#34;prettier&#34;).setup()&lt;/code&gt; function. All the settings are optional.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local prettier = require(&#34;prettier&#34;)&#xA;&#xA;prettier.setup({&#xA;  bin = &#39;prettier&#39;, -- or `&#39;prettierd&#39;` (v0.23.3+)&#xA;  filetypes = {&#xA;    &#34;css&#34;,&#xA;    &#34;graphql&#34;,&#xA;    &#34;html&#34;,&#xA;    &#34;javascript&#34;,&#xA;    &#34;javascriptreact&#34;,&#xA;    &#34;json&#34;,&#xA;    &#34;less&#34;,&#xA;    &#34;markdown&#34;,&#xA;    &#34;scss&#34;,&#xA;    &#34;typescript&#34;,&#xA;    &#34;typescriptreact&#34;,&#xA;    &#34;yaml&#34;,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also supply some options to &lt;code&gt;null-ls&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;prettier.setup({&#xA;  [&#34;null-ls&#34;] = {&#xA;    condition = function()&#xA;      return prettier.config_exists({&#xA;        -- if `false`, skips checking `package.json` for `&#34;prettier&#34;` key&#xA;        check_package_json = true,&#xA;      })&#xA;    end,&#xA;    runtime_condition = function(params)&#xA;      -- return false to skip running prettier&#xA;      return true&#xA;    end,&#xA;    timeout = 5000,&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set &lt;a href=&#34;https://prettier.io/docs/en/options.html&#34;&gt;Prettier&#39;s options&lt;/a&gt; too. They are passed to the &lt;code&gt;prettier&lt;/code&gt; CLI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;prettier.setup({&#xA;  cli_options = {&#xA;    arrow_parens = &#34;always&#34;,&#xA;    bracket_spacing = true,&#xA;    bracket_same_line = false,&#xA;    embedded_language_formatting = &#34;auto&#34;,&#xA;    end_of_line = &#34;lf&#34;,&#xA;    html_whitespace_sensitivity = &#34;css&#34;,&#xA;    -- jsx_bracket_same_line = false,&#xA;    jsx_single_quote = false,&#xA;    print_width = 80,&#xA;    prose_wrap = &#34;preserve&#34;,&#xA;    quote_props = &#34;as-needed&#34;,&#xA;    semi = true,&#xA;    single_attribute_per_line = false,&#xA;    single_quote = false,&#xA;    tab_width = 2,&#xA;    trailing_comma = &#34;es5&#34;,&#xA;    use_tabs = false,&#xA;    vue_indent_script_and_style = false,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default these options are only used if prettier config file is not found. If you want to change that behavior, you can use the following option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;prettier.setup({&#xA;  cli_options = {&#xA;    -- https://prettier.io/docs/en/cli.html#--config-precedence&#xA;    config_precedence = &#34;prefer-file&#34;, -- or &#34;cli-override&#34; or &#34;file-override&#34;&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;You can only use &lt;code&gt;prettier.nvim&lt;/code&gt; with &lt;code&gt;vim.lsp.*&lt;/code&gt; methods if prettier config file is present in your project directory.&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Supported version of &lt;code&gt;prettierd&lt;/code&gt; is &lt;code&gt;0.23.3+&lt;/code&gt;.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup without LSP&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t want to do LSP setup, and just use Prettier:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Keybindings&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; formatting in normal mode&#xA;nmap &amp;lt;Leader&amp;gt;f &amp;lt;Plug&amp;gt;(prettier-format)&#xA;&#xA;&#34; range_formatting in visual mode&#xA;xmap &amp;lt;Leader&amp;gt;f &amp;lt;Plug&amp;gt;(prettier-format)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Commands&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:Prettier&lt;/code&gt; command will format the current buffer.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT License. Check the &lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/prettier.nvim/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>