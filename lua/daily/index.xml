<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-28T01:37:34Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rest-nvim/rest.nvim</title>
    <updated>2022-08-28T01:37:34Z</updated>
    <id>tag:github.com,2022-08-28:/rest-nvim/rest.nvim</id>
    <link href="https://github.com/rest-nvim/rest.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast Neovim http client written in Lua&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;rest.nvim&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/NTBBloodbath/rest.nvim?style=for-the-badge&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim-0.5-57A143?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim version&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#install&#34;&gt;Install&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/assets/demo.png&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A fast Neovim http client written in Lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;rest.nvim&lt;/code&gt; makes use of a curl wrapper made in pure Lua by &lt;a href=&#34;https://github.com/tami5&#34;&gt;tami5&lt;/a&gt; and implemented in &lt;code&gt;plenary.nvim&lt;/code&gt; so, in other words, &lt;code&gt;rest.nvim&lt;/code&gt; is a curl wrapper so you don&#39;t have to leave Neovim!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; If you are facing issues, please &lt;a href=&#34;https://github.com/NTBBloodbath/rest.nvim/issues/new&#34;&gt;report them&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Notices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-11-04&lt;/strong&gt;: HTTP Tree-Sitter parser now depends on JSON parser for the JSON bodies detection, please install it too.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-08-26&lt;/strong&gt;: We have deleted the syntax file for HTTP files to start using the tree-sitter parser instead, please see &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#tree-sitter-parser&#34;&gt;Tree-Sitter parser&lt;/a&gt; section for more information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;2021-07-01&lt;/strong&gt;: Now for getting syntax highlighting in http files you should add a &lt;code&gt;require(&#39;rest-nvim&#39;).setup()&lt;/code&gt; to your &lt;code&gt;rest.nvim&lt;/code&gt; setup, refer to &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/#packernvim&#34;&gt;packer.nvim&lt;/a&gt;. This breaking change should allow lazy-loading of &lt;code&gt;rest.nvim&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;Fast execution time&lt;/li&gt; &#xA; &lt;li&gt;Run request under cursor&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlight for http files and output&lt;/li&gt; &#xA; &lt;li&gt;Possibility of using environment variables in http files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;WARNING:&lt;/strong&gt; rest.nvim requires Neovim &amp;gt;= 0.5 to work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;System-wide &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;curl&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional [can be changed, see config bellow] &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;jq (to format JSON output)&lt;/li&gt; &#xA;   &lt;li&gt;tidy (to format HTML output)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Other plugins &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;packer.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;NTBBloodbath/rest.nvim&#34;,&#xA;  requires = { &#34;nvim-lua/plenary.nvim&#34; },&#xA;  config = function()&#xA;    require(&#34;rest-nvim&#34;).setup({&#xA;      -- Open request results in a horizontal split&#xA;      result_split_horizontal = false,&#xA;      -- Keep the http file buffer above|left when split horizontal|vertical&#xA;      result_split_in_place = false,&#xA;      -- Skip SSL verification, useful for unknown certificates&#xA;      skip_ssl_verification = false,&#xA;      -- Highlight request on run&#xA;      highlight = {&#xA;        enabled = true,&#xA;        timeout = 150,&#xA;      },&#xA;      result = {&#xA;        -- toggle showing URL, HTTP info, headers at top the of result window&#xA;        show_url = true,&#xA;        show_http_info = true,&#xA;        show_headers = true,&#xA;        -- executables or functions for formatting response body [optional]&#xA;        -- set them to nil if you want to disable them&#xA;        formatters = {&#xA;          json = &#34;jq&#34;,&#xA;          html = function(body)&#xA;            return vim.fn.system({&#34;tidy&#34;, &#34;-i&#34;, &#34;-q&#34;, &#34;-&#34;}, body)&#xA;          end&#xA;        },&#xA;      },&#xA;      -- Jump to request line on run&#xA;      jump_to_request = false,&#xA;      env_file = &#39;.env&#39;,&#xA;      custom_dynamic_variables = {},&#xA;      yank_dry_run = true,&#xA;    })&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tree-Sitter parser&lt;/h3&gt; &#xA;&lt;p&gt;We are using a Tree-Sitter parser for our HTTP files, in order to get the correct syntax highlighting for HTTP files (including JSON bodies) you should add the following into your &lt;code&gt;ensure_installed&lt;/code&gt; table in your tree-sitter setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;ensure_installed = { &#34;http&#34;, &#34;json&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or manually run &lt;code&gt;:TSInstall http json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;By default &lt;code&gt;rest.nvim&lt;/code&gt; does not have any key mappings so you will not have conflicts with any of your existing ones.&lt;/p&gt; &#xA;&lt;p&gt;To run &lt;code&gt;rest.nvim&lt;/code&gt; you should map the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;RestNvim&lt;/code&gt;, run the request under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;RestNvimPreview&lt;/code&gt;, preview the request cURL command&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;RestNvimLast&lt;/code&gt;, re-run the last request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;result_split_horizontal&lt;/code&gt; opens result on a horizontal split (default opens on vertical)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;result_split_in_place&lt;/code&gt; opens result below|right on horizontal|vertical split (default opens top|left on horizontal|vertical split)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;skip_ssl_verification&lt;/code&gt; passes the &lt;code&gt;-k&lt;/code&gt; flag to cURL in order to skip SSL verification, useful when using unknown certificates&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;highlight&lt;/code&gt; allows to enable and configure the highlighting of the selected request when send,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jump_to_request&lt;/code&gt; moves the cursor to the selected request line when send,&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env_file&lt;/code&gt; specifies file name that consist environment variables (default: .env)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;custom_dynamic_variables&lt;/code&gt; allows to extend or overwrite built-in dynamic variable functions (default: {})&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Create a new http file or open an existing one and place the cursor over the request method (e.g. &lt;code&gt;GET&lt;/code&gt;) and run &lt;code&gt;rest.nvim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTES&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;&lt;code&gt;rest.nvim&lt;/code&gt; follows the RFC 2616 request format so any other http file should work without problems.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;You can find examples of use in &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/tests&#34;&gt;tests&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork it (&lt;a href=&#34;https://github.com/NTBBloodbath/rest.nvim/fork&#34;&gt;https://github.com/NTBBloodbath/rest.nvim/fork&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create your feature branch (&lt;kbd&gt;git checkout -b my-new-feature&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes (&lt;kbd&gt;git commit -am &#39;Add some feature&#39;&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch (&lt;kbd&gt;git push origin my-new-feature&lt;/kbd&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Create a new Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;rest.nvim is &lt;a href=&#34;https://raw.githubusercontent.com/rest-nvim/rest.nvim/main/LICENSE&#34;&gt;MIT Licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Kong/openapi2kong</title>
    <updated>2022-08-28T01:37:34Z</updated>
    <id>tag:github.com,2022-08-28:/Kong/openapi2kong</id>
    <link href="https://github.com/Kong/openapi2kong" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lib to convert OpenAPI specs into Kong specs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;openapi2kong&lt;/h1&gt; &#xA;&lt;p&gt;Lib to convert OpenAPI specs into Kong specs&lt;/p&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Kong/openapi2kong/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usage &amp;amp; installation&lt;/h1&gt; &#xA;&lt;p&gt;It can be installed from the repo using LuaRocks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# NOTE: this is meant to run an a Kong system, not on a standalone Lua installation&#xA;$ git clone https://github.com/kong/openapi2kong&#xA;$ cd openapi2kong&#xA;$ luarocks make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From here the CLI utility can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: openapi2kong [OPTIONS] &amp;lt;input...&amp;gt;&#xA;&#xA;Convert OpenAPI spec 3.x into Kong declarative format&#xA;  --tags (default &#34;&#34;) Comma separated list of tags to apply&#xA;  --json              Write output as json (yaml is the default)&#xA;  --output (default &#34;stdout&#34;)&#xA;                      Output file where to write to&#xA;  &amp;lt;input...&amp;gt; (string) input files (either json or yaml files)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Quick start&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/Kong/openapi2kong/tree/master/examples&#34;&gt;the examples&lt;/a&gt;, and try to convert them. The annotations in the files explain how most of the properties work.&lt;/p&gt; &#xA;&lt;h1&gt;Generating Kong entities&lt;/h1&gt; &#xA;&lt;h3&gt;Tags&lt;/h3&gt; &#xA;&lt;p&gt;Each generated entity will get the tags as specified as well as the following tags:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;OAS3_import&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;OAS3file_&amp;lt;filename&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Service and Upstream&lt;/h3&gt; &#xA;&lt;p&gt;Services and Upstreams are generated from the OpenAPI property &lt;code&gt;servers&lt;/code&gt; (which lives on the &lt;code&gt;OpenAPI&lt;/code&gt;, &lt;code&gt;Path&lt;/code&gt;, and &lt;code&gt;Operation&lt;/code&gt; objects). Each &lt;code&gt;service&lt;/code&gt; uses its accompanying &lt;code&gt;upstream&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The servers listed will be added to the &lt;code&gt;upstream&lt;/code&gt; object as &lt;code&gt;targets&lt;/code&gt;, but the property may also be an empty list in which case no &lt;code&gt;targets&lt;/code&gt; will be generated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE 1&lt;/strong&gt;: The server variables defined in the server url&#39;s will be substituted by their default values.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE 2&lt;/strong&gt;: A pre-requisite is that the entries in the &lt;code&gt;servers&lt;/code&gt; property only differ by &lt;code&gt;hostname&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;, since a Kong &lt;code&gt;service&lt;/code&gt; or &lt;code&gt;upstream&lt;/code&gt; cannot have multiple paths or schemes/protocols.&lt;/p&gt; &#xA;&lt;p&gt;Defaults for the generated &lt;code&gt;upstream&lt;/code&gt; and &lt;code&gt;service&lt;/code&gt; objects can be set by using the custom extensions &lt;code&gt;x-kong-upstream-defaults&lt;/code&gt; and &lt;code&gt;x-kong-service-defaults&lt;/code&gt;. The properties can be specified on the &lt;code&gt;OpenAPI&lt;/code&gt;, &lt;code&gt;Path&lt;/code&gt;, and &lt;code&gt;Operation&lt;/code&gt; objects.&lt;/p&gt; &#xA;&lt;p&gt;Those defaults are &#39;inherited&#39; from the top down. So defaults set on an &lt;code&gt;OpenAPI&lt;/code&gt; top-level object will also apply to &lt;code&gt;upstreams&lt;/code&gt; and &lt;code&gt;services&lt;/code&gt; generated from a &lt;code&gt;servers&lt;/code&gt; property on a &lt;code&gt;Path&lt;/code&gt; or &lt;code&gt;Operation&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;So to get the &lt;code&gt;upstream&lt;/code&gt; defaults for a &lt;code&gt;servers&lt;/code&gt; property on an &lt;code&gt;Operation&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use the &lt;code&gt;x-kong-upstream-defaults&lt;/code&gt; entry of the &lt;code&gt;Operation&lt;/code&gt; object, or&lt;/li&gt; &#xA; &lt;li&gt;fallback to the &lt;code&gt;x-kong-upstream-defaults&lt;/code&gt; entry of the &lt;code&gt;Path&lt;/code&gt; object, or&lt;/li&gt; &#xA; &lt;li&gt;fallback to the &lt;code&gt;x-kong-upstream-defaults&lt;/code&gt; entry of the &lt;code&gt;OpenAPI&lt;/code&gt; object, or&lt;/li&gt; &#xA; &lt;li&gt;fallback and do not use anything and hence use Kong defaults&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This similarly applies to the &lt;code&gt;service&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;h3&gt;Route&lt;/h3&gt; &#xA;&lt;p&gt;Routes are generated for each &lt;code&gt;Operation&lt;/code&gt; object. They are defined as regex routes and must have an exact match.&lt;/p&gt; &#xA;&lt;p&gt;To set default for Routes, use the &lt;code&gt;x-kong-route-defaults&lt;/code&gt; extension. The inheritance/fallback order is identical to the Service defaults.&lt;/p&gt; &#xA;&lt;h1&gt;Entity naming&lt;/h1&gt; &#xA;&lt;p&gt;Entity naming is relevant to be able to match OpenAPI spec content with the entities in the running Kong system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Every name will be normalized to remove unallowed characters!&lt;/p&gt; &#xA;&lt;h2&gt;Generating names (OpenAPI spec)&lt;/h2&gt; &#xA;&lt;p&gt;To facilitate naming there is a custom specification &lt;code&gt;x-kong-name&lt;/code&gt; which can set the name of an entity.&lt;/p&gt; &#xA;&lt;p&gt;Every entity is named in a hierarchical manner. So for example an &lt;code&gt;Operation&lt;/code&gt; name will be starting with the &lt;code&gt;OpenAPI&lt;/code&gt; name, then the &lt;code&gt;Path&lt;/code&gt; name, and then the &lt;code&gt;Operation&lt;/code&gt; name.&lt;/p&gt; &#xA;&lt;p&gt;Whenever a name is not unique, the second one will get a number appended, which will be incremented for each next duplicate.&lt;/p&gt; &#xA;&lt;h3&gt;OpenAPI object&lt;/h3&gt; &#xA;&lt;p&gt;The name will be set in the following order:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use &lt;code&gt;x-kong-name&lt;/code&gt; property, or if not set fallback to&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openapi.info.title&lt;/code&gt; property, or if not set fallback to&lt;/li&gt; &#xA; &lt;li&gt;a default string &lt;code&gt;&#34;openapi&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Servers object&lt;/h3&gt; &#xA;&lt;p&gt;Will share the name with its parent (either an &lt;code&gt;OpenAPI&lt;/code&gt;, &lt;code&gt;Path&lt;/code&gt;, or &lt;code&gt;Operation&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Path object&lt;/h3&gt; &#xA;&lt;p&gt;The name will be the &lt;code&gt;OpenAPI&lt;/code&gt; object name, with appended (in the following order):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use &lt;code&gt;x-kong-name&lt;/code&gt; property, or if not set fallback to&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;path.summary&lt;/code&gt; property, or if not set fallback to&lt;/li&gt; &#xA; &lt;li&gt;a default string &lt;code&gt;&#34;path&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Operation object&lt;/h3&gt; &#xA;&lt;p&gt;The name will be the &lt;code&gt;Path&lt;/code&gt; object name, with appended the operations method. Eg. &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Generated names (Kong spec)&lt;/h2&gt; &#xA;&lt;h3&gt;Upstream &amp;amp; Service&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;Upstream&lt;/code&gt; and &lt;code&gt;Service&lt;/code&gt; entities will get the name of the &lt;code&gt;servers&lt;/code&gt; property they were derived from.&lt;/p&gt; &#xA;&lt;h3&gt;Route&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;Route&lt;/code&gt; entity will get the name of its related &lt;code&gt;Operation&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;h1&gt;Security&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;security&lt;/code&gt; property can be defined on the top-level &lt;code&gt;openapi&lt;/code&gt; object as well as on &lt;code&gt;operation&lt;/code&gt; objects. The information contained cannot be directly mapped onto Kong, due to the logical and/or nature of how the specs have been set up.&lt;/p&gt; &#xA;&lt;p&gt;To overcome this Kong will only accept a single &lt;code&gt;securityScheme&lt;/code&gt; from the &lt;code&gt;security&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;The additional properties that Kong supports on its plugins can be configured by using custom extensions. The custom extensions are &lt;code&gt;x-kong-security-&amp;lt;plugin-name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Supported types are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;oauth2&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;NOT YET IMPLEMENTED!&lt;/li&gt; &#xA;   &lt;li&gt;except for the implicit flow&lt;/li&gt; &#xA;   &lt;li&gt;implemented using the Kong plugin &lt;code&gt;openid-connect&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;extended by: &lt;code&gt;x-kong-security-openid-connect&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;openIdConnect&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;implemented using the Kong plugin &lt;code&gt;openid-connect&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;extended by: &lt;code&gt;x-kong-security-openid-connect&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;properties set from OpenAPI spec: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;issuer&lt;/code&gt; (from &lt;code&gt;openIdConnectUrl&lt;/code&gt; property)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;scopes_required&lt;/code&gt; will get the combined set of scopes from the extension defaults and the scopes from the Security Requirement Object&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;apiKey&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;except for the &lt;code&gt;in&lt;/code&gt; property, since the Kong plugin will by default look in header and query already. Cookie is not supported.&lt;/li&gt; &#xA;   &lt;li&gt;implemented using the Kong plugin &lt;code&gt;key-auth&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;extended by: &lt;code&gt;x-kong-security-key-auth&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;properties set from OpenAPI spec: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;key_names&lt;/code&gt; will get the defaults from the extension and then the &lt;code&gt;name&lt;/code&gt; from the &lt;code&gt;securityScheme&lt;/code&gt; object will be added to that list&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;requires to add credentials to Kong, which is not supported through OpenAPI specs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;only &lt;code&gt;Basic&lt;/code&gt; scheme is supported&lt;/li&gt; &#xA;   &lt;li&gt;implemented using the Kong plugin &lt;code&gt;basic-auth&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;extended by: &lt;code&gt;x-kong-security-basic-auth&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;properties set from OpenAPI spec: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;none&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;requires to add credentials to Kong, which is not supported through OpenAPI specs.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Plugins&lt;/h1&gt; &#xA;&lt;p&gt;Generic plugins can be added on an &lt;code&gt;operation&lt;/code&gt; object. The custom extension to use is &lt;code&gt;x-kong-plugin-&amp;lt;plugin-name&amp;gt;&lt;/code&gt;. The &lt;code&gt;name&lt;/code&gt; property is not required (since it&#39;s already in the extension name). Optional properties not specified will get Kong defaults.&lt;/p&gt; &#xA;&lt;p&gt;Plugins can also be added on the &lt;code&gt;OpenAPI&lt;/code&gt; object level, in which case they will be applied to every &lt;code&gt;Operation&lt;/code&gt; in the spec. If a plugin is specified on both, the &lt;code&gt;Operation&lt;/code&gt; level one will take precedence.&lt;/p&gt; &#xA;&lt;p&gt;This extension needs to hold an object that contains the entire plugin config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;x-kong-plugin-key-auth&#34;: {&#xA;  &#34;name&#34;: &#34;key-auth&#34;,&#xA;  &#34;enabled&#34;: true,&#xA;  &#34;config&#34;: {&#xA;    &#34;key_names&#34;: [&#34;api_key&#34;, &#34;apikey&#34;],&#xA;    &#34;key_in_body&#34;: false,&#xA;    &#34;hide_credentials&#34;: true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;References are also supported, so this is valid as well (provided the reference exists):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;x-kong-plugin-key-auth&#34;: {&#xA;  &#34;$ref&#34;: &#34;#/components/kong/plugins/key_auth_config&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Validation&lt;/h1&gt; &#xA;&lt;p&gt;To enable validation the &lt;code&gt;request-validation&lt;/code&gt; plugin must be added to an &lt;code&gt;operation&lt;/code&gt; object. You can either specify the full configuration, or have it be auto-generated based on the OpenAPI spec.&lt;/p&gt; &#xA;&lt;p&gt;To enable auto generation, add the plugin, but do not include the &lt;code&gt;config&lt;/code&gt; property. The &lt;code&gt;config&lt;/code&gt; property will then be auto-generated and added to the generated spec.&lt;/p&gt;</summary>
  </entry>
</feed>