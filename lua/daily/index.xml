<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-07T01:33:27Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>benfowler/telescope-luasnip.nvim</title>
    <updated>2023-10-07T01:33:27Z</updated>
    <id>tag:github.com,2023-10-07:/benfowler/telescope-luasnip.nvim</id>
    <link href="https://github.com/benfowler/telescope-luasnip.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin. Telescope.nvim extension that adds LuaSnip integration.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope-luasnip&lt;/h1&gt; &#xA;&lt;p&gt;This plugin adds a &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt; snippet picker to the already-awesome Neovim &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope plugin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is a port of &lt;a href=&#34;https://github.com/fhill2/telescope-ultisnips.nvim&#34;&gt;fhill2/telescope-ultisnips.nvim&lt;/a&gt; from Ultisnips to LuaSnip. Thanks for the simple great idea!&lt;/p&gt; &#xA;&lt;p&gt;If you find something wrong, please raise an issue or better yet, raise a PR.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benfowler/telescope-luasnip.nvim/master/screenshot.png&#34; alt=&#34;telescope-luasnip.nvim in action&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt; (required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; (required)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin using your favourite package manager.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;benfowler/telescope-luasnip.nvim&#34;,&#xA;  module = &#34;telescope._extensions.luasnip&#34;,  -- if you wish to lazy-load&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you need to tell Telescope about this extension somewhere after your &lt;code&gt;require(&#39;telescope&#39;).setup()&lt;/code&gt;, by calling:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).load_extension(&#39;luasnip&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;telescope&#39;.extensions.luasnip.luasnip{}&#xA;vim.cmd [[ Telescope luasnip ]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope luasnip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for windows system&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope luasnip disable_ft=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;This Telescope plugin works fine as-is, and requires no further configuration.&lt;/p&gt; &#xA;&lt;p&gt;However, if you want, you can customise its search behaviour if you wish:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lst = require(&#39;telescope&#39;).extensions.luasnip&#xA;local luasnip = require(&#39;luasnip&#39;)&#xA;&#xA;require(&#39;telescope&#39;).setup {&#xA;  extensions = {&#xA;    -- ...&#xA;    luasnip = {&#xA;      search = function(entry)&#xA;        return lst.filter_null(entry.context.trigger) .. &#34; &#34; ..&#xA;               lst.filter_null(entry.context.name) .. &#34; &#34; ..&#xA;               entry.ft .. &#34; &#34; ..&#xA;               lst.filter_description(entry.context.name, entry.context.description) ..&#xA;               lst.get_docstring(luasnip, entry.ft, entry.context)[1]&#xA;      end&#xA;    },&#xA;     -- ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To change theme, try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup {&#xA;  luasnip = require(&#34;telescope.themes&#34;.get_dropdown({&#xA;      border   = false,&#xA;      preview  = {&#xA;        check_mime_type  = true&#xA;      },&#xA;      search = function ()&#xA;        -- ...&#xA;      end&#xA;    }))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Help!&lt;/h2&gt; &#xA;&lt;p&gt;Is there something not quite right or could be improved? Log an issue with a minimal reproduction, or better yet, raise a PR.&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable-file --&gt;</summary>
  </entry>
  <entry>
    <title>nvimdev/guard-collection</title>
    <updated>2023-10-07T01:33:27Z</updated>
    <id>tag:github.com,2023-10-07:/nvimdev/guard-collection</id>
    <link href="https://github.com/nvimdev/guard-collection" rel="alternate"></link>
    <summary type="html">&lt;p&gt;collection the tools config for guard&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;guard-collection&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Collection of configuration for &lt;a href=&#34;https://github.com/nvimdev/guard.nvim&#34;&gt;guard.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Feel free to open PRs! By adding your favourite dev tool, you are helping others that need it. You may find &lt;a href=&#34;https://github.com/nvimdev/guard-collection/raw/main/CONTRIBUTING.md&#34;&gt;this documentation&lt;/a&gt; helpful.&lt;/li&gt; &#xA; &lt;li&gt;Items with checkbox unchecked are supported but don&#39;t have a test yet. (help wanted!)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Formatters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp&lt;/code&gt; using &lt;code&gt;vim.lsp.buf.format&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/hhatto/autopep8&#34;&gt;autopep8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/psf/black&#34;&gt;black&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/lukas-reineke/cbfmt&#34;&gt;cbfmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://www.kernel.org/doc/html/latest/process/clang-format.html&#34;&gt;clang-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://csharpier.com/&#34;&gt;csharpier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/rtts/djhtml&#34;&gt;djhtml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://dprint.dev/&#34;&gt;dprint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/mantoni/eslint_d.js&#34;&gt;eslint_d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://fishshell.com/docs/current/cmds/fish_indent.html&#34;&gt;fish_indent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://git.sr.ht/~technomancy/fnlfmt&#34;&gt;fnlfmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://pkg.go.dev/cmd/gofmt&#34;&gt;gofmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://pkg.go.dev/github.com/segmentio/golines&#34;&gt;golines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/google/google-java-format&#34;&gt;google-java-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;isort&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/cmhughes/latexindent.pl&#34;&gt;latexindent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/elixir-lang/elixir/&#34;&gt;mixformat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/serokell/nixfmt&#34;&gt;nixfmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://hackage.haskell.org/package/ormolu&#34;&gt;ormolu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/darold/pgFormatter&#34;&gt;pg_format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;rubocop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;rustfmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/tamasfe/taplo&#34;&gt;taplo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua&#34;&gt;stylua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;swiftformat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;swift-format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/sql-formatter-org/sql-formatter&#34;&gt;sql-formatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/google/yapf&#34;&gt;yapf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;ruff&lt;/a&gt; as &lt;code&gt;ruff format&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;ruff_fix&lt;/a&gt; as &lt;code&gt;ruff --fix&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/ziglang/zig&#34;&gt;zigfmt&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Linters&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://clang.llvm.org/extra/clang-tidy/&#34;&gt;clang-tidy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/codespell-project/codespell&#34;&gt;codespell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://eslint.org/&#34;&gt;eslint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/mantoni/eslint_d.js&#34;&gt;eslint_d&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/PyCQA/flake8&#34;&gt;flake8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/hadolint/hadolint&#34;&gt;hadolint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/pinterest/ktlint&#34;&gt;ktlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/lunarmodules/luacheck&#34;&gt;luacheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/PyCQA/pylint&#34;&gt;pylint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;rubocop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/Kampfkarren/selene&#34;&gt;selene&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;shellcheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://stylelint.io/&#34;&gt;stylelint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/astral-sh/ruff&#34;&gt;ruff&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License MIT&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>gbprod/substitute.nvim</title>
    <updated>2023-10-07T01:33:27Z</updated>
    <id>tag:github.com,2023-10-07:/gbprod/substitute.nvim</id>
    <link href="https://github.com/gbprod/substitute.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin introducing a new operators motions to quickly replace and exchange text.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🪓 substitute.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt; &lt;a href=&#34;https://github.com/gbprod/substitute.nvim/actions/workflows/integration.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/gbprod/substitute.nvim/integration.yml?branch=main&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;substitute.nvim&lt;/code&gt; aim is to provide new operator motions to make it very easy to perform quick substitutions and exchange.&lt;/p&gt; &#xA;&lt;p&gt;If you are familiar with &lt;a href=&#34;https://github.com/svermeulen/vim-subversive&#34;&gt;svermeulen/vim-subversive&lt;/a&gt; and &lt;a href=&#34;https://github.com/tommcdo/vim-exchange&#34;&gt;tommcdo/vim-exchange&lt;/a&gt;, this plugin does almost the same but rewritten in &lt;code&gt;lua&lt;/code&gt; (and I hope this will be more maintainable, readable and efficient).&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/substitute.nvim/main/#-substitute-operator&#34;&gt;Substitute operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/substitute.nvim/main/#-substitute-over-range-motion&#34;&gt;Substitute over range motion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/substitute.nvim/main/#-exchange-operator&#34;&gt;Exchange operator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/gbprod/substitute.nvim/main/DEMO.md&#34;&gt;See this plugin in action&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(&lt;a href=&#34;https://github.com/gbprod/substitute.nvim/tree/0.6-compat&#34;&gt;Neovim 0.6.0 compat&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use({&#xA;  &#34;gbprod/substitute.nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;substitute&#34;).setup({&#xA;      -- your configuration comes here&#xA;      -- or leave it empty to use the default settings&#xA;      -- refer to the configuration section below&#xA;    })&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;&#34; Vim Script&#xA;Plug &#39;gbprod/substitute.nvim&#39;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#34;substitute&#34;).setup({&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  })&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Substitute comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  on_substitute = nil,&#xA;  yank_substituted_text = false,&#xA;  preserve_cursor_position = false,&#xA;  highlight_substituted_text = {&#xA;    enabled = true,&#xA;    timer = 500,&#xA;  },&#xA;  range = {&#xA;    prefix = &#34;s&#34;,&#xA;    prompt_current_text = false,&#xA;    confirm = false,&#xA;    complete_word = false,&#xA;    motion1 = false,&#xA;    motion2 = false,&#xA;    suffix = &#34;&#34;,&#xA;  },&#xA;  exchange = {&#xA;    motion = false,&#xA;    use_esc_to_cancel = true,&#xA;    preserve_cursor_position = false,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More details on these options is available in the sections below corresponding to the different features.&lt;/p&gt; &#xA;&lt;h2&gt;🔂 Substitute operator&lt;/h2&gt; &#xA;&lt;p&gt;It contains no default mappings and will have no effect until you add your own maps to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.keymap.set(&#34;n&#34;, &#34;s&#34;, require(&#39;substitute&#39;).operator, { noremap = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;ss&#34;, require(&#39;substitute&#39;).line, { noremap = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;S&#34;, require(&#39;substitute&#39;).eol, { noremap = true })&#xA;vim.keymap.set(&#34;x&#34;, &#34;s&#34;, require(&#39;substitute&#39;).visual, { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can then execute &lt;code&gt;s&amp;lt;motion&amp;gt;&lt;/code&gt; to substitute the text object provided by the motion with the contents of the default register (or an explicit register if provided). For example, you could execute siw to replace the current word under the cursor with the current yank, or sip to replace the paragraph, etc.&lt;/p&gt; &#xA;&lt;p&gt;This action is dot-repeatable.&lt;/p&gt; &#xA;&lt;p&gt;Note: in this case you will be shadowing the change character key &lt;code&gt;s&lt;/code&gt; so you will have to use the longer form &lt;code&gt;cl&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each functions (&lt;code&gt;operator&lt;/code&gt;, &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;eol&lt;/code&gt; and &lt;code&gt;visual&lt;/code&gt;) are configurable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#39;substitute&#39;).operator({&#xA;  count = 1,      -- number of substitutions&#xA;  register = &#34;a&#34;, -- register used for substitution&#xA;  motion = &#34;iw&#34;,  -- only available for `operator`, this will automatically use&#xA;                  -- this operator for substitution instead of asking for.&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⚙️ Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;on_substitute&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Function that will be called each times a substitution is made. This function takes a &lt;code&gt;param&lt;/code&gt; argument that contains the &lt;code&gt;register&lt;/code&gt; used for substitution.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;yank_substituted_text&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, when performing a substitution, substitued text is pushed into the default register.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;highlight_substituted_text.enabled&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt; will temporary highlight substitued text.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;highlight_substituted_text.timer&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;500&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define the duration of highlight.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;preserve_cursor_position&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, the cursor position will be preserved when performing a substitution.&lt;/p&gt; &#xA;&lt;h3&gt;🤝 Integration&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;gbprod/yanky.nvim&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;To enable &lt;a href=&#34;https://github.com/gbprod/yanky.nvim&#34;&gt;gbprod/yanky.nvim&lt;/a&gt; swap when performing a substitution, you can add this to your setup:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;substitute&#34;).setup({&#xA;  on_substitute = require(&#34;yanky.integration&#34;).substitute(),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;svermeulen/vim-yoink&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;To enable &lt;a href=&#34;https://github.com/svermeulen/vim-yoink&#34;&gt;vim-yoink&lt;/a&gt; swap when performing a substitution, you can add this to your setup:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;substitute&#34;).setup({&#xA;  on_substitute = function(_)&#xA;    vim.cmd(&#34;call yoink#startUndoRepeatSwap()&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/svermeulen/vim-yoink&#34;&gt;vim-yoink&lt;/a&gt; does not support swapping when doing paste in visual mode. With this plugin, you can add thoss mappings to enable it :&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;x&#34;, &#34;p&#34;, require(&#39;substitute&#39;).visual, { noremap = true })&#xA;vim.keymap.set(&#34;x&#34;, &#34;P&#34;, require(&#39;substitute&#39;).visual, { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🔁 Substitute over range motion&lt;/h2&gt; &#xA;&lt;p&gt;Another operator provided allows specifying both the text to replace and the line range over which to apply the change by using multiple consecutive motions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;s&#34;, require(&#39;substitute.range&#39;).operator, { noremap = true })&#xA;vim.keymap.set(&#34;x&#34;, &#34;&amp;lt;leader&amp;gt;s&#34;, require(&#39;substitute.range&#39;).visual, { noremap = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;ss&#34;, require(&#39;substitute.range&#39;).word, { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After adding this map, if you execute &lt;code&gt;&amp;lt;leader&amp;gt;s&amp;lt;motion1&amp;gt;&amp;lt;motion2&amp;gt;&lt;/code&gt; then the command line will be filled with a substitute command that allow to replace the text given by &lt;code&gt;motion1&lt;/code&gt; by the text will enter in the command line for each line provided by &lt;code&gt;motion2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, we can also select &lt;code&gt;motion1&lt;/code&gt; in visual mode and then hit &lt;code&gt;&amp;lt;leader&amp;gt;s&amp;lt;motion2&amp;gt;&lt;/code&gt; for the same effect.&lt;/p&gt; &#xA;&lt;p&gt;For convenience, &lt;code&gt;&amp;lt;leader&amp;gt;ss&amp;lt;motion2&amp;gt;&lt;/code&gt; can be used to select complete word under the cursor as motion1 (complete word means that &lt;code&gt;complete_word&lt;/code&gt; options is override to &lt;code&gt;true&lt;/code&gt; so is different from &#xA; &lt;leader&gt;&#xA;  siwip which will not require that there be word boundaries on each match).&#xA; &lt;/leader&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can select the default replacement value by selecting a register. Eg: &lt;code&gt;&#34;a&amp;lt;leader&amp;gt;s&amp;lt;motion1&amp;gt;&amp;lt;motion2&amp;gt;&lt;/code&gt; will use the content of &lt;code&gt;a&lt;/code&gt; register as replacement value.&lt;/p&gt; &#xA;&lt;p&gt;You can override any default configuration (described later) by passing this to the operator function. By example, this will use &lt;code&gt;S&lt;/code&gt; as prefix of the substitution command (and use &lt;a href=&#34;https://github.com/tpope/vim-abolish&#34;&gt;tpope/vim-abolish&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;S&#34;, function ()&#xA;    require(&#39;substitute.range&#39;).operator({ prefix = &#39;S&#39; })&#xA;end, { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⚙️ Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.prefix&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;s&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Substitution command that will be used (set it to &lt;code&gt;S&lt;/code&gt; to use &lt;a href=&#34;https://github.com/tpope/vim-abolish&#34;&gt;tpope/vim-abolish&lt;/a&gt; substitution by default).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.suffix&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Suffix added at the end of the substitute command. For example, it can be used to not save substitution history calls by adding &lt;code&gt;| call histdel(&#39;:&#39;, -1)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.prompt_current_text&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Substitution command replace part will be set to the current text. Eg. instead of &lt;code&gt;s/pattern//g&lt;/code&gt; you will have &lt;code&gt;s/pattern/pattern/g&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.confirm&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Will ask for confirmation for each substitutions.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.complete_word&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Will require that there be word boundaries on each match (eg: &lt;code&gt;\&amp;lt;word\&amp;gt;&lt;/code&gt; instead of &lt;code&gt;word&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.group_substituted_text&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will capture substituted text as you can use &lt;code&gt;\1&lt;/code&gt; to quickly reuse it.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.subject&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This allows you to control how the subject (to be replaced) is resolved. It accepts either a function, string, or a table with some special keys.&lt;/p&gt; &#xA;&lt;p&gt;If it is a string that will be used directly. If it is a function it will be called when the operator is used, and should return the subject to be replaced. If it is a table you may provide one of the following keys with appropriate values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;register = &#34;a&#34;&lt;/code&gt; Use the contents of this register as the subject.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;expand = &#34;&amp;lt;cword&amp;gt;&#34;&lt;/code&gt; Use the string given as the argument to &lt;code&gt;vim.fn.expand()&lt;/code&gt; to get the subject.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;last_search = true&lt;/code&gt; Shortcut for &lt;code&gt;register = &#34;/&#34;&lt;/code&gt; to use the last &lt;code&gt;/&lt;/code&gt; search.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;motion = &#34;iw&#34;&lt;/code&gt; Use this motion at the current cursor to get the subject&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;eg. &lt;code&gt;lua require(&#39;substitute.range&#39;).operator({ subject = {motion = &#39;iW&#39;} })&lt;/code&gt; will select inner WORD as subject of substitution.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.range&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This allows you to control the range of the substitution. This takes either a function, string, or a table with some special keys. If it is a string that will be used directly. If it is a function it will be called after the subject is resolved and should return a string. If it is a table you may provide one of the following keys with appropriate values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;motion = &#34;ap&#34;&lt;/code&gt; Use this motion from the current cursor to get the range.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;eg. specifying &lt;code&gt;range = &#39;%&#39;&lt;/code&gt; will make the substitution run over the whole file. See &lt;code&gt;:h [range]&lt;/code&gt; for all the possible values here.&lt;/p&gt; &#xA;&lt;p&gt;eg. &lt;code&gt;lua require(&#39;substitute.range&#39;).operator({ range = { motion = &#39;ap&#39; } })&lt;/code&gt; will select around paragraph as range of substitution.&lt;/p&gt; &#xA;&lt;p&gt;You can combine &lt;code&gt;subject&lt;/code&gt; and &lt;code&gt;range&lt;/code&gt; : &lt;code&gt;lua require(&#39;substitute.range&#39;).operator({ subject = { motion=&#39;iw&#39; }, range = { motion = &#39;ap&#39; } })&lt;/code&gt; will prepare substitution for inner word around paragraph.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.motion1&lt;/code&gt; &lt;em&gt;DEPRECATED&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is option deprecated and equivalent to providing &lt;code&gt;subject.motion&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.motion2&lt;/code&gt; &lt;em&gt;DEPRECATED&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This option is deprecated and equivalent to &lt;code&gt;range.motion&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;range.register&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will use the content of this register as replacement value.&lt;/p&gt; &#xA;&lt;p&gt;eg. &lt;code&gt;lua require(&#39;substitute.range&#39;).operator({ register = &#39;a&#39; })&lt;/code&gt; will use &lt;code&gt;&#34;a&lt;/code&gt; register content as replacement.&lt;/p&gt; &#xA;&lt;h3&gt;🤝 Integration&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;tpope/vim-abolish&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;You can use &lt;a href=&#34;https://github.com/tpope/vim-abolish&#34;&gt;tpope/vim-abolish&lt;/a&gt; substitution by default.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;substitute&#34;).setup({&#xA;  range = {&#xA;    prefix = &#34;S&#34;,&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;🔀 Exchange operator&lt;/h2&gt; &#xA;&lt;p&gt;This operator allows to quickly exchange text inside a buffer.&lt;/p&gt; &#xA;&lt;p&gt;Eg. To exchange two words, place your cursor on the first word and type &lt;code&gt;sxiw&lt;/code&gt;. Then move to the second word and type &lt;code&gt;sxiw&lt;/code&gt; again.&lt;/p&gt; &#xA;&lt;p&gt;Note: the {motion} used in the first and second use of &lt;code&gt;sx&lt;/code&gt; don&#39;t have to be the same. Note 2: this is dot-repeatable, so you can use &lt;code&gt;.&lt;/code&gt; instead of &lt;code&gt;sxiw&lt;/code&gt; for the second word.&lt;/p&gt; &#xA;&lt;p&gt;You can select a whole line using the &lt;code&gt;line&lt;/code&gt; function (&lt;code&gt;sxx&lt;/code&gt; in the example below).&lt;/p&gt; &#xA;&lt;p&gt;Because this operator has to be invoked twice to change the document, if you change your mind after invoking the operator once, you can cancel you selection using &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; key or the &lt;code&gt;cancel&lt;/code&gt; function (mapped to &lt;code&gt;sxc&lt;/code&gt; in the example below).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;sx&#34;, require(&#39;substitute.exchange&#39;).operator, { noremap = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;sxx&#34;, require(&#39;substitute.exchange&#39;).line, { noremap = true })&#xA;vim.keymap.set(&#34;x&#34;, &#34;X&#34;, require(&#39;substitute.exchange&#39;).visual, { noremap = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;sxc&#34;, require(&#39;substitute.exchange&#39;).cancel, { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;⚙️ Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;exchange.motion&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;nil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will use this motion for exchange.&lt;/p&gt; &#xA;&lt;p&gt;eg. &lt;code&gt;lua require(&#39;substitute.exchange&#39;).operator({ motion = &#39;ap&#39; })&lt;/code&gt; will select around paragraph as range of exchange.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;exchange.use_esc_to_cancel&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, you can use the &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; key to cancel exchange selection. If set to false, consider map the cancel function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;sxc&#34;, require(&#39;substitute.exchange&#39;).cancel, { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;exchange.preserve_cursor_position&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Default : &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, the cursor position will be preserved when performing an exchange.&lt;/p&gt; &#xA;&lt;h2&gt;🎨 Colors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Group&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Selected range for range substitution&lt;/td&gt; &#xA;   &lt;td&gt;SubstituteRange&lt;/td&gt; &#xA;   &lt;td&gt;link to Search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Selected text for exchange&lt;/td&gt; &#xA;   &lt;td&gt;SubstituteExchange&lt;/td&gt; &#xA;   &lt;td&gt;link to Search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🎉 Credits&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is a lua version of &lt;a href=&#34;https://github.com/svermeulen/vim-subversive&#34;&gt;svermeulen/vim-subversive&lt;/a&gt; and &lt;a href=&#34;https://github.com/tommcdo/vim-exchange&#34;&gt;tommcdo/vim-exchange&lt;/a&gt; awesome plugins.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/m00qek/plugin-template.nvim&#34;&gt;m00qek lua plugin template&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>