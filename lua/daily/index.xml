<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-20T01:44:53Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>folke/trouble.nvim</title>
    <updated>2022-06-20T01:44:53Z</updated>
    <id>tag:github.com,2022-06-20:/folke/trouble.nvim</id>
    <link href="https://github.com/folke/trouble.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üö¶ A pretty diagnostics, references, telescope results, quickfix and location list to help you solve all the trouble your code is causing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üö¶ Trouble&lt;/h1&gt; &#xA;&lt;p&gt;A pretty list for showing diagnostics, references, telescope results, quickfix and location lists to help you solve all the trouble your code is causing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/folke/trouble.nvim/main/media/shot.png&#34; alt=&#34;LSP Trouble Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pretty list of: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Diagnostics&lt;/li&gt; &#xA;   &lt;li&gt;LSP references&lt;/li&gt; &#xA;   &lt;li&gt;LSP implementations&lt;/li&gt; &#xA;   &lt;li&gt;LSP definitions&lt;/li&gt; &#xA;   &lt;li&gt;LSP type definitions&lt;/li&gt; &#xA;   &lt;li&gt;quickfix list&lt;/li&gt; &#xA;   &lt;li&gt;location list&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt; search results&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;automatically updates on new diagnostics&lt;/li&gt; &#xA; &lt;li&gt;toggle &lt;strong&gt;diagnostics&lt;/strong&gt; mode between &lt;strong&gt;workspace&lt;/strong&gt; or &lt;strong&gt;document&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;interactive preview&lt;/strong&gt; in your last accessed window&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;cancel&lt;/em&gt; preview or &lt;em&gt;jump&lt;/em&gt; to the location&lt;/li&gt; &#xA; &lt;li&gt;configurable actions, signs, highlights,...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA; &lt;li&gt;Properly configured Neovim LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; is optional to enable file icons&lt;/li&gt; &#xA; &lt;li&gt;a theme with properly configured highlight groups for Neovim Diagnostics&lt;/li&gt; &#xA; &lt;li&gt;or install üåà &lt;a href=&#34;https://github.com/folke/lsp-colors.nvim&#34;&gt;lsp-colors&lt;/a&gt; to automatically create the missing highlight groups&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;patched font&lt;/a&gt; for the default severity and fold icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;Plug &#39;folke/trouble.nvim&#39;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#34;trouble&#34;).setup {&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use {&#xA;  &#34;folke/trouble.nvim&#34;,&#xA;  requires = &#34;kyazdani42/nvim-web-devicons&#34;,&#xA;  config = function()&#xA;    require(&#34;trouble&#34;).setup {&#xA;      -- your configuration comes here&#xA;      -- or leave it empty to use the default settings&#xA;      -- refer to the configuration section below&#xA;    }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Trouble comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    position = &#34;bottom&#34;, -- position of the list can be: bottom, top, left, right&#xA;    height = 10, -- height of the trouble list when position is top or bottom&#xA;    width = 50, -- width of the list when position is left or right&#xA;    icons = true, -- use devicons for filenames&#xA;    mode = &#34;workspace_diagnostics&#34;, -- &#34;workspace_diagnostics&#34;, &#34;document_diagnostics&#34;, &#34;quickfix&#34;, &#34;lsp_references&#34;, &#34;loclist&#34;&#xA;    fold_open = &#34;Ôëº&#34;, -- icon used for open folds&#xA;    fold_closed = &#34;Ôë†&#34;, -- icon used for closed folds&#xA;    group = true, -- group results by file&#xA;    padding = true, -- add an extra new line on top of the list&#xA;    action_keys = { -- key mappings for actions in the trouble list&#xA;        -- map to {} to remove a mapping, for example:&#xA;        -- close = {},&#xA;        close = &#34;q&#34;, -- close the list&#xA;        cancel = &#34;&amp;lt;esc&amp;gt;&#34;, -- cancel the preview and get back to your last window / buffer / cursor&#xA;        refresh = &#34;r&#34;, -- manually refresh&#xA;        jump = {&#34;&amp;lt;cr&amp;gt;&#34;, &#34;&amp;lt;tab&amp;gt;&#34;}, -- jump to the diagnostic or open / close folds&#xA;        open_split = { &#34;&amp;lt;c-x&amp;gt;&#34; }, -- open buffer in new split&#xA;        open_vsplit = { &#34;&amp;lt;c-v&amp;gt;&#34; }, -- open buffer in new vsplit&#xA;        open_tab = { &#34;&amp;lt;c-t&amp;gt;&#34; }, -- open buffer in new tab&#xA;        jump_close = {&#34;o&#34;}, -- jump to the diagnostic and close the list&#xA;        toggle_mode = &#34;m&#34;, -- toggle between &#34;workspace&#34; and &#34;document&#34; diagnostics mode&#xA;        toggle_preview = &#34;P&#34;, -- toggle auto_preview&#xA;        hover = &#34;K&#34;, -- opens a small popup with the full multiline message&#xA;        preview = &#34;p&#34;, -- preview the diagnostic location&#xA;        close_folds = {&#34;zM&#34;, &#34;zm&#34;}, -- close all folds&#xA;        open_folds = {&#34;zR&#34;, &#34;zr&#34;}, -- open all folds&#xA;        toggle_fold = {&#34;zA&#34;, &#34;za&#34;}, -- toggle fold of current file&#xA;        previous = &#34;k&#34;, -- preview item&#xA;        next = &#34;j&#34; -- next item&#xA;    },&#xA;    indent_lines = true, -- add an indent guide below the fold icons&#xA;    auto_open = false, -- automatically open the list when you have diagnostics&#xA;    auto_close = false, -- automatically close the list when you have no diagnostics&#xA;    auto_preview = true, -- automatically preview the location of the diagnostic. &amp;lt;esc&amp;gt; to close preview and go back to last window&#xA;    auto_fold = false, -- automatically fold a file trouble list at creation&#xA;    auto_jump = {&#34;lsp_definitions&#34;}, -- for the given modes, automatically jump if there is only a single result&#xA;    signs = {&#xA;        -- icons / text used for a diagnostic&#xA;        error = &#34;Ôôô&#34;,&#xA;        warning = &#34;Ôî©&#34;,&#xA;        hint = &#34;Ô†µ&#34;,&#xA;        information = &#34;Ôëâ&#34;,&#xA;        other = &#34;Ô´†&#34;&#xA;    },&#xA;    use_diagnostic_signs = false -- enabling this will use the signs defined in your lsp client&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° if you don&#39;t want to use icons or a patched font, you can use the settings below&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- settings without a patched font or icons&#xA;{&#xA;    icons = false,&#xA;    fold_open = &#34;v&#34;, -- icon used for open folds&#xA;    fold_closed = &#34;&amp;gt;&#34;, -- icon used for closed folds&#xA;    indent_lines = false, -- add an indent guide below the fold icons&#xA;    signs = {&#xA;        -- icons / text used for a diagnostic&#xA;        error = &#34;error&#34;,&#xA;        warning = &#34;warn&#34;,&#xA;        hint = &#34;hint&#34;,&#xA;        information = &#34;info&#34;&#xA;    },&#xA;    use_diagnostic_signs = false -- enabling this will use the signs defined in your lsp client&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;Trouble comes with the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Trouble [mode]&lt;/code&gt;: open the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TroubleClose [mode]&lt;/code&gt;: close the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TroubleToggle [mode]&lt;/code&gt;: toggle the list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TroubleRefresh&lt;/code&gt;: manually refresh the active list&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Modes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;document_diagnostics:&lt;/strong&gt; document diagnostics from the builtin LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;workspace_diagnostics:&lt;/strong&gt; workspace diagnostics from the builtin LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lsp_references:&lt;/strong&gt; references of the word under the cursor from the builtin LSP client&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;lsp_definitions:&lt;/strong&gt; definitions of the word under the cursor from the builtin LSP client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;lsp_type_definitions:&lt;/strong&gt; tupe definitions of the word under the cursor from the builtin LSP client&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;quickfix:&lt;/strong&gt; &lt;a href=&#34;https://neovim.io/doc/user/quickfix.html&#34;&gt;quickfix&lt;/a&gt; items&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;loclist:&lt;/strong&gt; items from the window&#39;s &lt;a href=&#34;https://neovim.io/doc/user/quickfix.html&#34;&gt;location list&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example keybindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;nnoremap &amp;lt;leader&amp;gt;xx &amp;lt;cmd&amp;gt;TroubleToggle&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;xw &amp;lt;cmd&amp;gt;TroubleToggle workspace_diagnostics&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;xd &amp;lt;cmd&amp;gt;TroubleToggle document_diagnostics&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;xq &amp;lt;cmd&amp;gt;TroubleToggle quickfix&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;xl &amp;lt;cmd&amp;gt;TroubleToggle loclist&amp;lt;cr&amp;gt;&#xA;nnoremap gR &amp;lt;cmd&amp;gt;TroubleToggle lsp_references&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xx&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xw&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble workspace_diagnostics&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xd&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble document_diagnostics&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xl&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble loclist&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xq&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble quickfix&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;gR&#34;, &#34;&amp;lt;cmd&amp;gt;Trouble lsp_references&amp;lt;cr&amp;gt;&#34;,&#xA;  {silent = true, noremap = true}&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;You can use the following functions in your keybindings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- jump to the next item, skipping the groups&#xA;require(&#34;trouble&#34;).next({skip_groups = true, jump = true});&#xA;&#xA;-- jump to the previous item, skipping the groups&#xA;require(&#34;trouble&#34;).previous({skip_groups = true, jump = true});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telescope&lt;/h3&gt; &#xA;&lt;p&gt;You can easily open any search results in &lt;strong&gt;Trouble&lt;/strong&gt;, by defining a custom action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local actions = require(&#34;telescope.actions&#34;)&#xA;local trouble = require(&#34;trouble.providers.telescope&#34;)&#xA;&#xA;local telescope = require(&#34;telescope&#34;)&#xA;&#xA;telescope.setup {&#xA;  defaults = {&#xA;    mappings = {&#xA;      i = { [&#34;&amp;lt;c-t&amp;gt;&#34;] = trouble.open_with_trouble },&#xA;      n = { [&#34;&amp;lt;c-t&amp;gt;&#34;] = trouble.open_with_trouble },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you open telescope, you can now hit &lt;code&gt;&amp;lt;c-t&amp;gt;&lt;/code&gt; to open the results in &lt;strong&gt;Trouble&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üé® Colors&lt;/h2&gt; &#xA;&lt;p&gt;The table below shows all the highlight groups defined for Trouble.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleCount&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleError&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleNormal&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleTextInformation&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignWarning&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleLocation&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleWarning&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroublePreview&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleTextError&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignInformation&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleIndent&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSource&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignHint&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignOther&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleFoldIcon&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleTextWarning&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleCode&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleInformation&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleSignError&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleFile&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleHint&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleTextHint&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;TroubleText&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>nvim-lua/plenary.nvim</title>
    <updated>2022-06-20T01:44:53Z</updated>
    <id>tag:github.com,2022-06-20:/nvim-lua/plenary.nvim</id>
    <link href="https://github.com/nvim-lua/plenary.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;plenary: full; complete; entire; absolute; unqualified. All the lua functions I don&#39;t want to write twice.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;plenary.nvim&lt;/h1&gt; &#xA;&lt;p&gt;All the lua functions I don&#39;t want to write twice.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;plenary:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code&gt;full; complete; entire; absolute; unqualified.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Note that this library is useless outside of Neovim since it requires Neovim functions. It should be usable with any recent version of Neovim though.&lt;/p&gt; &#xA;&lt;p&gt;At the moment, it is very much in pre-alpha &lt;span&gt;üòÑ&lt;/span&gt; Expect changes to the way some functions are structured. I&#39;m hoping to finish some document generators to provide better documentation for people to use and consume and then at some point we&#39;ll stabilize on a few more stable APIs.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modules&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.async&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.async_lib&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.job&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.path&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.scandir&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.context_manager&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.test_harness&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.filetype&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plenary.strings&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;plenary.async&lt;/h3&gt; &#xA;&lt;p&gt;A Lua module for asynchronous programming using coroutines. This library is built on native lua coroutines and &lt;code&gt;libuv&lt;/code&gt;. Coroutines make it easy to avoid callback hell and allow for easy cooperative concurrency and cancellation. Apart from allowing users to perform asynchronous io easily, this library also functions as an abstraction for coroutines.&lt;/p&gt; &#xA;&lt;h4&gt;Getting started&lt;/h4&gt; &#xA;&lt;p&gt;You can do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local async = require &#34;plenary.async&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All other modules are automatically required and can be accessed by indexing &lt;code&gt;async&lt;/code&gt;. You needn&#39;t worry about performance as this will require all the submodules lazily.&lt;/p&gt; &#xA;&lt;h4&gt;A quick example&lt;/h4&gt; &#xA;&lt;p&gt;Libuv luv provides this example of reading a file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local uv = vim.loop&#xA;&#xA;local read_file = function(path, callback)&#xA;  uv.fs_open(path, &#34;r&#34;, 438, function(err, fd)&#xA;    assert(not err, err)&#xA;    uv.fs_fstat(fd, function(err, stat)&#xA;      assert(not err, err)&#xA;      uv.fs_read(fd, stat.size, 0, function(err, data)&#xA;        assert(not err, err)&#xA;        uv.fs_close(fd, function(err)&#xA;          assert(not err, err)&#xA;          callback(data)&#xA;        end)&#xA;      end)&#xA;    end)&#xA;  end)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can write it using the library like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local a = require &#34;plenary.async&#34;&#xA;&#xA;local read_file = function(path)&#xA;  local err, fd = a.uv.fs_open(path, &#34;r&#34;, 438)&#xA;  assert(not err, err)&#xA;&#xA;  local err, stat = a.uv.fs_fstat(fd)&#xA;  assert(not err, err)&#xA;&#xA;  local err, data = a.uv.fs_read(fd, stat.size, 0)&#xA;  assert(not err, err)&#xA;&#xA;  local err = a.uv.fs_close(fd)&#xA;  assert(not err, err)&#xA;&#xA;  return data&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Plugins using this&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tanvirtin/vgit.nvim&#34;&gt;vgit.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;neogit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;plenary.async_lib&lt;/h3&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;plenary.async&lt;/code&gt; instead. This was version 1 and is just here for compatibility reasons.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.job&lt;/h3&gt; &#xA;&lt;p&gt;A Lua module to interact with system processes. Pass in your &lt;code&gt;command&lt;/code&gt;, the desired &lt;code&gt;args&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;cwd&lt;/code&gt;. Define optional callbacks for &lt;code&gt;on_stdout&lt;/code&gt;, &lt;code&gt;on_stderr&lt;/code&gt; and &lt;code&gt;on_exit&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; your Job.&lt;/p&gt; &#xA;&lt;p&gt;Note: Each job has an empty environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Job = require&#39;plenary.job&#39;&#xA;&#xA;Job:new({&#xA;  command = &#39;rg&#39;,&#xA;  args = { &#39;--files&#39; },&#xA;  cwd = &#39;/usr/bin&#39;,&#xA;  env = { [&#39;a&#39;] = &#39;b&#39; },&#xA;  on_exit = function(j, return_val)&#xA;    print(return_val)&#xA;    print(j:result())&#xA;  end,&#xA;}):sync() -- or start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;plenary.path&lt;/h3&gt; &#xA;&lt;p&gt;A Lua module that implements a bunch of the things from &lt;code&gt;pathlib&lt;/code&gt; from Python, so that paths are easy to work with.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.scandir&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;plenery.scandir&lt;/code&gt; is fast recursive file operations. It is similar to unix &lt;code&gt;find&lt;/code&gt; or &lt;code&gt;fd&lt;/code&gt; in that it can do recursive scans over a given directory, or a set of directories.&lt;/p&gt; &#xA;&lt;p&gt;It offers a wide range of opts for limiting the depth, show hidden and more. &lt;code&gt;plenary.scan_dir&lt;/code&gt; can be ran synchronously and asynchronously and offers &lt;code&gt;on_insert(file, typ)&lt;/code&gt; and &lt;code&gt;on_exit(files)&lt;/code&gt; callbacks. &lt;code&gt;on_insert(file, typ)&lt;/code&gt; is available for both while &lt;code&gt;on_exit(files)&lt;/code&gt; is only available for async.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local scan = require&#39;plenary.scandir`&#xA;scan.scan_dir(&#39;.&#39;, { hidden = true, depth = 2 })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This module also offers &lt;code&gt;ls -la&lt;/code&gt; sync and async functions that will return a formated string for all files in the directory. Why? Just for fun&lt;/p&gt; &#xA;&lt;h3&gt;plenary.context_manager&lt;/h3&gt; &#xA;&lt;p&gt;Implements &lt;code&gt;with&lt;/code&gt; and &lt;code&gt;open&lt;/code&gt; just like in Python. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local with = context_manager.with&#xA;local open = context_manager.open&#xA;&#xA;local result = with(open(&#34;README.md&#34;), function(reader)&#xA;  return reader:read()&#xA;end)&#xA;&#xA;assert(result == &#34;# plenary.nvim&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;plenary.test_harness&lt;/h3&gt; &#xA;&lt;p&gt;Supports (simple) busted-style testing. It implements a mock-ed busted interface, that will allow you to run simple busted style tests in separate neovim instances.&lt;/p&gt; &#xA;&lt;p&gt;To run the current spec file in a floating window, you can use the keymap &lt;code&gt;&amp;lt;Plug&amp;gt;PlenaryTestFile&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nmap &amp;lt;leader&amp;gt;t &amp;lt;Plug&amp;gt;PlenaryTestFile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a whole directory from the command line, you could do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvim --headless -c &#34;PlenaryBustedDirectory tests/plenary/ {minimal_init = &#39;tests/minimal_init.vim&#39;}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where the first argument is the directory you&#39;d like to test. It will search for files with the pattern &lt;code&gt;*_spec.lua&lt;/code&gt; and execute them in separate neovim instances.&lt;/p&gt; &#xA;&lt;p&gt;The second argument is a Lua option table with the following fields:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;minimal_init&lt;/code&gt;: specify an init.vim to use for this instance, uses &lt;code&gt;--noplugin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minimal&lt;/code&gt;: uses &lt;code&gt;--noplugin&lt;/code&gt; without an init script (overrides &lt;code&gt;minimal_init&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sequential&lt;/code&gt;: whether to run tests sequentially (default is to run in parallel)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keep_going&lt;/code&gt;: if &lt;code&gt;sequential&lt;/code&gt;, whether to continue on test failure (default true)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt;: controls the maximum time allotted to each job in parallel or sequential operation (defaults to 50,000 milliseconds)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The exit code is 0 when success and 1 when fail, so you can use it easily in a &lt;code&gt;Makefile&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;p&gt;So far, the only supported busted items are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;describe&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;it&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pending&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;before_each&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;after_each&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;assert.*&lt;/code&gt; etc. (from luassert, which is bundled)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;OTHER NOTE:&lt;/p&gt; &#xA;&lt;p&gt;We used to support &lt;code&gt;luaunit&lt;/code&gt; and original &lt;code&gt;busted&lt;/code&gt; but it turns out it was way too hard and not worthwhile for the difficulty of getting them setup, particularly on other platforms or in CI. Now, we have a dep free (or at least, no other installation steps necessary) &lt;code&gt;busted&lt;/code&gt; implementation that can be used more easily.&lt;/p&gt; &#xA;&lt;p&gt;Please take a look at the new APIs and make any issues for things that aren&#39;t clear. I am happy to fix them and make it work well :)&lt;/p&gt; &#xA;&lt;p&gt;OTHER OTHER NOTE: Take a look at some test examples &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/TESTS_README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Colors&lt;/h4&gt; &#xA;&lt;p&gt;You no longer need nvim-terminal to get this to work. We use &lt;code&gt;nvim_open_term&lt;/code&gt; now.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.filetype&lt;/h3&gt; &#xA;&lt;p&gt;Will detect the filetype based on &lt;code&gt;extension&lt;/code&gt;/&lt;code&gt;special filename&lt;/code&gt;/&lt;code&gt;shebang&lt;/code&gt; or &lt;code&gt;modeline&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect(filepath, opts)&lt;/code&gt; is a function that does all of above and exits as soon as a filetype is found&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect_from_extension(filepath)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect_from_name(filepath)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect_from_modeline(filepath)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&#39;plenary.filetype&#39;.detect_from_shebang(filepath)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add filetypes by creating a new file named &lt;code&gt;~/.config/nvim/data/plenary/filetypes/foo.lua&lt;/code&gt; and register that file with &lt;code&gt;:lua require&#39;plenary.filetype&#39;.add_file(&#39;foo&#39;)&lt;/code&gt;. Content of the file should look like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  extension = {&#xA;    -- extension = filetype&#xA;    -- example:&#xA;    [&#39;jl&#39;] = &#39;julia&#39;,&#xA;  },&#xA;  file_name = {&#xA;    -- special filenames, likes .bashrc&#xA;    -- we provide a decent amount&#xA;    -- name = filetype&#xA;    -- example:&#xA;    [&#39;.bashrc&#39;] = &#39;bash&#39;,&#xA;  },&#xA;  shebang = {&#xA;    -- Shebangs are supported as well. Currently we provide&#xA;    -- sh, bash, zsh, python, perl with different prefixes like&#xA;    -- /usr/bin, /bin/, /usr/bin/env, /bin/env&#xA;    -- shebang = filetype&#xA;    -- example:&#xA;    [&#39;/usr/bin/node&#39;] = &#39;javascript&#39;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;plenary.strings&lt;/h3&gt; &#xA;&lt;p&gt;Re-implement VimL funcs to use them in Lua loop.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.strdisplaywidth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.strcharpart&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And some other funcs are here to deal with common problems.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.truncate&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.align_str&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strings.dedent&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;plenary.profile&lt;/h3&gt; &#xA;&lt;p&gt;Thin wrapper around LuaJIT&#39;s &lt;a href=&#34;https://blast.hk/moonloader/luajit/ext_profiler.html&#34;&gt;&lt;code&gt;jit.p&lt;/code&gt; profiler&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;plenary.profile&#39;.start(&#34;profile.log&#34;)&#xA;&#xA;-- code to be profiled&#xA;&#xA;require&#39;plenary.profile&#39;.stop()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;start(&#34;profile.log&#34;, {flame = true})&lt;/code&gt; to output the log in a flamegraph-compatible format. A flamegraph can be created from this using &lt;a href=&#34;https://github.com/jonhoo/inferno&#34;&gt;https://github.com/jonhoo/inferno&lt;/a&gt; via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;inferno-flamegraph profile.log &amp;gt; flame.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting interactive SVG file can be viewed in any browser.&lt;/p&gt; &#xA;&lt;p&gt;Status: WIP&lt;/p&gt; &#xA;&lt;h3&gt;plenary.popup&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-lua/plenary.nvim/master/POPUP.md&#34;&gt;popup documentation&lt;/a&gt; for both progress tracking and implemented APIs.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.window&lt;/h3&gt; &#xA;&lt;p&gt;Window helper functions to wrap some of the more difficult cases. Particularly for floating windows.&lt;/p&gt; &#xA;&lt;p&gt;Status: WIP&lt;/p&gt; &#xA;&lt;h3&gt;plenary.collections&lt;/h3&gt; &#xA;&lt;p&gt;Contains pure lua implementations for various standard collections.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local List = require &#39;plenary.collections.py_list&#39;&#xA;&#xA;local myList = List { 9, 14, 32, 5 }&#xA;&#xA;for i, v in myList:iter() do&#xA;    print(i, v)&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Status: WIP&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re having trouble / things are hanging / other problems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ export DEBUG_PLENARY=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable debuggin for the plugin.&lt;/p&gt; &#xA;&lt;h3&gt;plenary.neorocks&lt;/h3&gt; &#xA;&lt;p&gt;DELETED: Please use packer.nvim or other lua-rocks wrapper instead. This no longer exists.&lt;/p&gt; &#xA;&lt;h3&gt;FAQ&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Error: Too many open files&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;*nix systems have a setting to configure the maximum amount of open file handles. It can occur that the default value is pretty low and that you end up getting this error after opening a couple of files. You can see the current limit with &lt;code&gt;ulimit -n&lt;/code&gt; and set it with &lt;code&gt;ulimit -n 4096&lt;/code&gt;. (macos might work different)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>windwp/nvim-autopairs</title>
    <updated>2022-06-20T01:44:53Z</updated>
    <id>tag:github.com,2022-06-20:/windwp/nvim-autopairs</id>
    <link href="https://github.com/windwp/nvim-autopairs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;autopairs for neovim written by lua&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;nvim-autopairs&lt;/h2&gt; &#xA;&lt;p&gt;A super powerful autopair plugin for Neovim that supports multiple characters.&lt;/p&gt; &#xA;&lt;p&gt;Requires neovim 0.5+&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;windwp/nvim-autopairs&#39;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;nvim-autopairs&#34;).setup {}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;&#x9;&#34;windwp/nvim-autopairs&#34;,&#xA;    config = function() require(&#34;nvim-autopairs&#34;).setup {} end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default values&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local disable_filetype = { &#34;TelescopePrompt&#34; }&#xA;local disable_in_macro = false  -- disable when recording or executing a macro&#xA;local disable_in_visualblock = false -- disable when insert after visual block mode&#xA;local ignored_next_char = [=[[%w%%%&#39;%[%&#34;%.]]=]&#xA;local enable_moveright = true&#xA;local enable_afterquote = true  -- add bracket pairs after quote&#xA;local enable_check_bracket_line = true  --- check bracket in same line&#xA;local enable_bracket_in_quote = true --&#xA;local break_undo = true -- switch for basic rule break undo sequence&#xA;local check_ts = false&#xA;local map_cr = true&#xA;local map_bs = true  -- map the &amp;lt;BS&amp;gt; key&#xA;local map_c_h = false  -- Map the &amp;lt;C-h&amp;gt; key to delete a pair&#xA;local map_c_w = false -- map &amp;lt;c-w&amp;gt; to delete a pair if possible&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Override default values&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  disable_filetype = { &#34;TelescopePrompt&#34; , &#34;vim&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mapping &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Before        Input         After&#xA;------------------------------------&#xA;{|}           &amp;lt;CR&amp;gt;          {&#xA;                                |&#xA;                            }&#xA;------------------------------------&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;nvim-cmp&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;h3&gt; You need to add mapping `CR` on nvim-cmp setup. Check readme.md on nvim-cmp repo. &lt;/h3&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- If you want insert `(` after select function or method item&#xA;local cmp_autopairs = require(&#39;nvim-autopairs.completion.cmp&#39;)&#xA;local cmp = require(&#39;cmp&#39;)&#xA;cmp.event:on(&#xA;  &#39;confirm_done&#39;,&#xA;  cmp_autopairs.on_confirm_done()&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can customize the kind of completion to add &lt;code&gt;(&lt;/code&gt; or any character.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local handlers = require(&#39;nvim-autopairs.completion.handlers&#39;)&#xA;&#xA;cmp.event:on(&#xA;  &#39;confirm_done&#39;,&#xA;  cmp_autopairs.on_confirm_done({&#xA;    filetypes = {&#xA;      -- &#34;*&#34; is a alias to all filetypes&#xA;      [&#34;*&#34;] = {&#xA;        [&#34;(&#34;] = {&#xA;          kind = {&#xA;            cmp.lsp.CompletionItemKind.Function,&#xA;            cmp.lsp.CompletionItemKind.Method,&#xA;          },&#xA;          handler = handlers[&#34;*&#34;]&#xA;        }&#xA;      },&#xA;      lua = {&#xA;        [&#34;(&#34;] = {&#xA;          kind = {&#xA;            cmp.lsp.CompletionItemKind.Function,&#xA;            cmp.lsp.CompletionItemKind.Method&#xA;          },&#xA;          ---@param char string&#xA;          ---@param item item completion&#xA;          ---@param bufnr buffer number&#xA;          handler = function(char, item, bufnr)&#xA;            -- Your handler function. Inpect with print(vim.inspect{char, item, bufnr})&#xA;          end&#xA;        }&#xA;      },&#xA;      -- Disable for tex&#xA;      tex = false&#xA;    }&#xA;  })&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Don&#39;t use &lt;code&gt;nil&lt;/code&gt; to disable a filetype. If a filetype is &lt;code&gt;nil&lt;/code&gt; then &lt;code&gt;*&lt;/code&gt; is used as fallback.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;coq_nvim&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local remap = vim.api.nvim_set_keymap&#xA;local npairs = require(&#39;nvim-autopairs&#39;)&#xA;&#xA;npairs.setup({ map_bs = false, map_cr = false })&#xA;&#xA;vim.g.coq_settings = { keymap = { recommended = false } }&#xA;&#xA;-- these mappings are coq recommended mappings unrelated to nvim-autopairs&#xA;remap(&#39;i&#39;, &#39;&amp;lt;esc&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-e&amp;gt;&amp;lt;esc&amp;gt;&#34; : &#34;&amp;lt;esc&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;c-c&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-e&amp;gt;&amp;lt;c-c&amp;gt;&#34; : &#34;&amp;lt;c-c&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;tab&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-n&amp;gt;&#34; : &#34;&amp;lt;tab&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;remap(&#39;i&#39;, &#39;&amp;lt;s-tab&amp;gt;&#39;, [[pumvisible() ? &#34;&amp;lt;c-p&amp;gt;&#34; : &#34;&amp;lt;bs&amp;gt;&#34;]], { expr = true, noremap = true })&#xA;&#xA;-- skip it, if you use another global object&#xA;_G.MUtils= {}&#xA;&#xA;MUtils.CR = function()&#xA;  if vim.fn.pumvisible() ~= 0 then&#xA;    if vim.fn.complete_info({ &#39;selected&#39; }).selected ~= -1 then&#xA;      return npairs.esc(&#39;&amp;lt;c-y&amp;gt;&#39;)&#xA;    else&#xA;      return npairs.esc(&#39;&amp;lt;c-e&amp;gt;&#39;) .. npairs.autopairs_cr()&#xA;    end&#xA;  else&#xA;    return npairs.autopairs_cr()&#xA;  end&#xA;end&#xA;remap(&#39;i&#39;, &#39;&amp;lt;cr&amp;gt;&#39;, &#39;v:lua.MUtils.CR()&#39;, { expr = true, noremap = true })&#xA;&#xA;MUtils.BS = function()&#xA;  if vim.fn.pumvisible() ~= 0 and vim.fn.complete_info({ &#39;mode&#39; }).mode == &#39;eval&#39; then&#xA;    return npairs.esc(&#39;&amp;lt;c-e&amp;gt;&#39;) .. npairs.autopairs_bs()&#xA;  else&#xA;    return npairs.autopairs_bs()&#xA;  end&#xA;end&#xA;remap(&#39;i&#39;, &#39;&amp;lt;bs&amp;gt;&#39;, &#39;v:lua.MUtils.BS()&#39;, { expr = true, noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;without completion plugin&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- add option map_cr&#xA;npairs.setup({ map_cr = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Completion-plugin&#34;&gt;another completion plugin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem with indent after you press &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; please check the settings of treesitter indent or install a plugin that has indent support for your filetype.&lt;/p&gt; &#xA;&lt;h3&gt;Rule&lt;/h3&gt; &#xA;&lt;p&gt;nvim-autopairs uses rules with conditions to check pairs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Rule = require(&#39;nvim-autopairs.rule&#39;)&#xA;local npairs = require(&#39;nvim-autopairs&#39;)&#xA;&#xA;npairs.add_rule(Rule(&#34;$$&#34;,&#34;$$&#34;,&#34;tex&#34;))&#xA;&#xA;-- you can use some built-in conditions&#xA;&#xA;local cond = require(&#39;nvim-autopairs.conds&#39;)&#xA;print(vim.inspect(cond))&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;$&#34;, &#34;$&#34;,{&#34;tex&#34;, &#34;latex&#34;})&#xA;    -- don&#39;t add a pair if the next character is %&#xA;    :with_pair(cond.not_after_regex(&#34;%%&#34;))&#xA;    -- don&#39;t add a pair if  the previous character is xxx&#xA;    :with_pair(cond.not_before_regex(&#34;xxx&#34;, 3))&#xA;    -- don&#39;t move right when repeat character&#xA;    :with_move(cond.none())&#xA;    -- don&#39;t delete if the next character is xx&#xA;    :with_del(cond.not_after_regex(&#34;xx&#34;))&#xA;    -- disable adding a newline when you press &amp;lt;cr&amp;gt;&#xA;    :with_cr(cond.none())&#xA;  },&#xA;  -- disable for .vim files, but it work for another filetypes&#xA;  Rule(&#34;a&#34;,&#34;a&#34;,&#34;-vim&#34;)&#xA;)&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;$$&#34;,&#34;$$&#34;,&#34;tex&#34;)&#xA;    :with_pair(function(opts)&#xA;        print(vim.inspect(opts))&#xA;        if opts.line==&#34;aa $$&#34; then&#xA;        -- don&#39;t add pair on that line&#xA;          return false&#xA;        end&#xA;    end)&#xA;   }&#xA;)&#xA;&#xA;-- you can use regex&#xA;-- press u1234 =&amp;gt; u1234number&#xA;npairs.add_rules({&#xA;    Rule(&#34;u%d%d%d%d$&#34;, &#34;number&#34;, &#34;lua&#34;)&#xA;      :use_regex(true)&#xA;})&#xA;&#xA;&#xA;&#xA;-- press x1234 =&amp;gt; x12341234&#xA;npairs.add_rules({&#xA;    Rule(&#34;x%d%d%d%d$&#34;, &#34;number&#34;, &#34;lua&#34;)&#xA;      :use_regex(true)&#xA;      :replace_endpair(function(opts)&#xA;          -- print(vim.inspect(opts))&#xA;          return opts.prev_char:sub(#opts.prev_char - 3,#opts.prev_char)&#xA;      end)&#xA;})&#xA;&#xA;&#xA;-- you can do anything with regex +special key&#xA;-- example press tab to uppercase text:&#xA;-- press b1234s&amp;lt;tab&amp;gt; =&amp;gt; B1234S1234S&#xA;&#xA;npairs.add_rules({&#xA;  Rule(&#34;b%d%d%d%d%w$&#34;, &#34;&#34;, &#34;vim&#34;)&#xA;    :use_regex(true,&#34;&amp;lt;tab&amp;gt;&#34;)&#xA;    :replace_endpair(function(opts)&#xA;          return&#xA;              opts.prev_char:sub(#opts.prev_char - 4,#opts.prev_char)&#xA;              ..&#34;&amp;lt;esc&amp;gt;viwU&#34;&#xA;    end)&#xA;})&#xA;&#xA;-- you can exclude filetypes&#xA;npairs.add_rule(&#xA;  Rule(&#34;$$&#34;,&#34;$$&#34;)&#xA;    :with_pair(cond.not_filetypes({&#34;lua&#34;}))&#xA;)&#xA;--- check ./lua/nvim-autopairs/rules/basic.lua&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Rules-API&#34;&gt;Rules API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Treesitter&lt;/h3&gt; &#xA;&lt;p&gt;You can use treesitter to check for a pair.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local npairs = require(&#34;nvim-autopairs&#34;)&#xA;local Rule = require(&#39;nvim-autopairs.rule&#39;)&#xA;&#xA;npairs.setup({&#xA;    check_ts = true,&#xA;    ts_config = {&#xA;        lua = {&#39;string&#39;},-- it will not add a pair on that treesitter node&#xA;        javascript = {&#39;template_string&#39;},&#xA;        java = false,-- don&#39;t check treesitter on java&#xA;    }&#xA;})&#xA;&#xA;local ts_conds = require(&#39;nvim-autopairs.ts-conds&#39;)&#xA;&#xA;&#xA;-- press % =&amp;gt; %% only while inside a comment or string&#xA;npairs.add_rules({&#xA;  Rule(&#34;%&#34;, &#34;%&#34;, &#34;lua&#34;)&#xA;    :with_pair(ts_conds.is_ts_node({&#39;string&#39;,&#39;comment&#39;})),&#xA;  Rule(&#34;$&#34;, &#34;$&#34;, &#34;lua&#34;)&#xA;    :with_pair(ts_conds.is_not_ts_node({&#39;function&#39;}))&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t add pairs if it already has a close pair in the same line&lt;/h3&gt; &#xA;&lt;p&gt;if &lt;strong&gt;next character&lt;/strong&gt; is a close pair and it doesn&#39;t have an open pair in same line, then it will not add a close pair&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input         After&#xA;------------------------------------&#xA;(  |))         (            (  (|))&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  enable_check_bracket_line = false&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t add pairs if the next char is alphanumeric&lt;/h3&gt; &#xA;&lt;p&gt;You can customize how nvim-autopairs will behave if it encounters a specific character&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup({&#xA;  ignored_next_char = &#34;[%w%.]&#34; -- will ignore alphanumeric and `.` symbol&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input         After&#xA;------------------------------------&#xA;|foobar        (            (|foobar&#xA;|.foobar       (            (|.foobar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plugin Integration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require(&#39;nvim-autopairs&#39;).disable()&#xA;  require(&#39;nvim-autopairs&#39;).enable()&#xA;  require(&#39;nvim-autopairs&#39;).remove_rule(&#39;(&#39;) -- remove rule (&#xA;  require(&#39;nvim-autopairs&#39;).clear_rules() -- clear all rules&#xA;  require(&#39;nvim-autopairs&#39;).get_rule(&#39;&#34;&#39;) -- get rule &#34; then modify it&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;FastWrap&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Before        Input                    After&#xA;--------------------------------------------------&#xA;(|foobar      &amp;lt;M-e&amp;gt; then press $        (|foobar)&#xA;(|)(foobar)   &amp;lt;M-e&amp;gt; then press q       (|(foobar))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- put this to setup function and press &amp;lt;a-e&amp;gt; to use fast_wrap&#xA;npairs.setup({&#xA;    fast_wrap = {},&#xA;})&#xA;&#xA;-- change default fast_wrap&#xA;npairs.setup({&#xA;    fast_wrap = {&#xA;      map = &#39;&amp;lt;M-e&amp;gt;&#39;,&#xA;      chars = { &#39;{&#39;, &#39;[&#39;, &#39;(&#39;, &#39;&#34;&#39;, &#34;&#39;&#34; },&#xA;      pattern = [=[[%&#39;%&#34;%)%&amp;gt;%]%)%}%,]]=],&#xA;      end_key = &#39;$&#39;,&#xA;      keys = &#39;qwertyuiopzxcvbnmasdfghjkl&#39;,&#xA;      check_comma = true,&#xA;      highlight = &#39;Search&#39;,&#xA;      highlight_grey=&#39;Comment&#39;&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;autotag html and tsx&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-ts-autotag&#34;&gt;autotag&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Endwise&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Endwise&#34;&gt;endwise&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Custom rules&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs/wiki/Custom-rules&#34;&gt;rules&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>