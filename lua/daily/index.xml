<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-21T01:33:40Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Shaobin-Jiang/IceNvim</title>
    <updated>2023-12-21T01:33:40Z</updated>
    <id>tag:github.com,2023-12-21:/Shaobin-Jiang/IceNvim</id>
    <link href="https://github.com/Shaobin-Jiang/IceNvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A beautiful, powerful and customizable neovim config&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;IceNvim&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim-0.9.0-blueviolet.svg?style=flat-square&amp;amp;color=90E59A&amp;amp;logoColor=white&#34; alt=&#34;Neovim Minimum Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Shaobin-Jiang/IceNvim/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/Shaobin-Jiang/IceNvim?style=flat-square&amp;amp;color=EE999F&amp;amp;logoColor=white&#34; alt=&#34;GitHub License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;IceNvim is a beautiful, powerful and customizable neovim config.&lt;/p&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Shaobin-Jiang/IceNvim/master/screenshots/1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Shaobin-Jiang/IceNvim/master/screenshots/2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Shaobin-Jiang/IceNvim/master/screenshots/3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ideal for development: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set up for C# / Flutter / Lua / Python / Rust / Web development and markdown writing&lt;/li&gt; &#xA;   &lt;li&gt;Git integration&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Enhanced editing experience: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Plugins such as &lt;code&gt;hop.nvim&lt;/code&gt;, &lt;code&gt;undotree&lt;/code&gt; and &lt;code&gt;vim-surround&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;For Chinese users, automatic IME switching when changing modes (needs &lt;a href=&#34;https://raw.githubusercontent.com/Shaobin-Jiang/IceNvim/master/#download-im-selectexe-recommended-for-windows--wsl-users&#34;&gt;additional setup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Nice looks: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Multiple colorschemes made ready&lt;/li&gt; &#xA;   &lt;li&gt;A custom colorschemes picker&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;User friendly: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uses which-key.nvim for new comers to check out keymaps&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Well equiped: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;An icon viewer to check whether your font works well with icons&lt;/li&gt; &#xA;   &lt;li&gt;A configuration file selector&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Modern: uses &lt;code&gt;Lazy&lt;/code&gt; and &lt;code&gt;Mason&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customizable: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Override defaults with your own &lt;a href=&#34;https://raw.githubusercontent.com/Shaobin-Jiang/IceNvim/master/#custom-configuration&#34;&gt;config file&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This neovim configuration requires neovim &lt;strong&gt;0.9.0+&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Additionally, you need to install these also: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;nerd font&lt;/a&gt;: this is optional, but things may look funny without one installed&lt;/li&gt; &#xA;   &lt;li&gt;git: almost all the plugin and lsp installations depend on it&lt;/li&gt; &#xA;   &lt;li&gt;Required by Mason: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;curl&lt;/li&gt; &#xA;     &lt;li&gt;gzip / 7zip&lt;/li&gt; &#xA;     &lt;li&gt;wget&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Required by telescope: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;fd&lt;/li&gt; &#xA;     &lt;li&gt;ripgrep&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Required by nvim treesitter: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;gcc&lt;/li&gt; &#xA;     &lt;li&gt;node&lt;/li&gt; &#xA;     &lt;li&gt;npm&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Required by rust-tools: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;rust-analyzer (NOT the rust-analyzer provided by Mason!!!)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;python3 and pip3&lt;/li&gt; &#xA;   &lt;li&gt;Additional dependencies on Linux: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;unzip&lt;/li&gt; &#xA;     &lt;li&gt;virtual environment&lt;/li&gt; &#xA;     &lt;li&gt;xclip (for accessing system clipboard; &lt;strong&gt;not required on WSL&lt;/strong&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;zip&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that some of the packages might have different names with different package managers!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;On Windows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Shaobin-Jiang/neovim &#34;$env:LOCALAPPDATA\nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Shaobin-Jiang/neovim ~/.config/nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download &lt;code&gt;im-select.exe&lt;/code&gt; (recommended for windows / wsl users)&lt;/h3&gt; &#xA;&lt;p&gt;For automatic IME switching when inputing Chinese, im-select.exe is needed.&lt;/p&gt; &#xA;&lt;p&gt;Download it from &lt;a href=&#34;https://github.com/daipeihust/im-select/raw/master/win/out/x86/im-select.exe&#34;&gt;https://github.com/daipeihust/im-select/raw/master/win/out/x86/im-select.exe&lt;/a&gt; and place to the &lt;code&gt;bin&lt;/code&gt; repository in the configuration directory.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you are using wsl, you might have to do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x ~/.config/nvim/bin/im-select.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Configuration&lt;/h2&gt; &#xA;&lt;p&gt;This neovim configuration allows users to override the default configuration by creating a &lt;code&gt;custom&lt;/code&gt; dir under &lt;code&gt;lua/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;IceNvim will try to detect and load &lt;code&gt;custom/init.lua&lt;/code&gt;. Since &lt;code&gt;custom/&lt;/code&gt; is git-ignored, it will be easy for you to make your own configurations without messing up the original git repo and missing follow-up updates.&lt;/p&gt; &#xA;&lt;p&gt;Most IceNvim config options can be found under a global variable &lt;code&gt;Ice&lt;/code&gt;. The entire setup follows this routine:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IceNvim sets its default options and store some of them, e.g., plugin config and keymaps, in &lt;code&gt;Ice&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;IceNvim loads &lt;code&gt;custom/init.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;IceNvim uses &lt;code&gt;Ice&lt;/code&gt; to set up plugins and create keymaps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Therefore, almost everything IceNvim defines can be re-configured by you.&lt;/p&gt; &#xA;&lt;p&gt;An example &lt;code&gt;custom/init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Ice.plugins[&#34;nvim-transparent&#34;].enabled = false&#xA;&#xA;Ice.keymap.general.open_terminal = { &#34;n&#34;, &#34;&amp;lt;leader&amp;gt;terminal&#34;, &#34;:split term://bash&amp;lt;CR&amp;gt;&#34; }&#xA;&#xA;local autogroup = vim.api.nvim_create_augroup(&#34;OverrideFtplugin&#34;, { clear = true })&#xA;vim.api.nvim_create_autocmd(&#34;BufEnter&#34;, {&#xA;    group = autogroup,&#xA;    callback = function()&#xA;        if vim.bo.filetype == &#34;lua&#34; then&#xA;            vim.cmd &#34;setlocal colorcolumn=120&#34;&#xA;        end&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Installing Omnisharp / Csharpier&lt;/h3&gt; &#xA;&lt;p&gt;When installing omnisharp, make sure that dotnet sdk is installed.&lt;/p&gt; &#xA;&lt;p&gt;When receiving nuget-related errors when installing csharpier, you might have to configure nuget source (see &lt;a href=&#34;https://learn.microsoft.com/zh-cn/nuget/reference/errors-and-warnings/nu1100#solution-2&#34;&gt;https://learn.microsoft.com/zh-cn/nuget/reference/errors-and-warnings/nu1100#solution-2&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;dotnet nuget add source https://api.nuget.org/v3/index.json -n nuget.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Opening Links in &lt;code&gt;norg&lt;/code&gt; Files on Wsl&lt;/h3&gt; &#xA;&lt;p&gt;By custom, Neorg uses &lt;code&gt;explorer.exe&lt;/code&gt; to open links on Wsl. While this may work well with opening web links, it is not quite so with file links, such as &lt;code&gt;{file:///path/to/file}&lt;/code&gt;, as this is not a recognizable link for Windows&#39; &lt;code&gt;explorer.exe&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Until a workaround is provided by Neorg, one can define an &lt;code&gt;explorer.exe&lt;/code&gt; in &lt;code&gt;/bin&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#39;wslview &#34;$*&#39; | sudo tee /bin/explorer.exe&#xA;sudo chmod +x /bin/explorer.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;My preferred way of opening files with Windows programs is &lt;a href=&#34;https://wslutiliti.es/wslu/&#34;&gt;&lt;code&gt;wslview&lt;/code&gt;&lt;/a&gt;, but you can still use whatever command you like better, such as &lt;code&gt;xdg-open&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rust not Working Properly&lt;/h3&gt; &#xA;&lt;p&gt;You need to check how you installed rust. I have not been able to set up rust-analyzer when installing rust only (e.g., via &lt;code&gt;scoop install rust&lt;/code&gt; or &lt;code&gt;sudo zypper in rust&lt;/code&gt;) either, but with the officially recommended way, i.e., by installing rustup, everything works properly.&lt;/p&gt; &#xA;&lt;p&gt;Also, you might find that completion does not work when first opening a rust project. That is because some time needs to be taken to index the code, and completion would only work after indexing is done.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>snipe-scripts/snipe-sitting</title>
    <updated>2023-12-21T01:33:40Z</updated>
    <id>tag:github.com,2023-12-21:/snipe-scripts/snipe-sitting</id>
    <link href="https://github.com/snipe-scripts/snipe-sitting" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ox_lib&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/AeCVP2F8h7&#34;&gt;https://discord.gg/AeCVP2F8h7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Website : &lt;a href=&#34;https://snipe.tebex.io&#34;&gt;https://snipe.tebex.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Showcase&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://streamable.com/rvgh2n&#34;&gt;https://streamable.com/rvgh2n&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ThePrimeagen/vim-apm</title>
    <updated>2023-12-21T01:33:40Z</updated>
    <id>tag:github.com,2023-12-21:/ThePrimeagen/vim-apm</id>
    <link href="https://github.com/ThePrimeagen/vim-apm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vim APM, Actions per minute, is the greatest plugin since vim-slicedbread&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;Vim APM&lt;/h3&gt; &#xA;&lt;p&gt;Vim apm keeps track of your APM by counting keystrokes and determining its worth. You will get both your stroke count / time and your score / time. The score is based on how frequently you type the same command in normal mode, whereas insert there is only score. Normal mode only keeps track of the last 10 strokes so you are not penalized too heavily&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://clips.twitch.tv/TenuousCarefulStorkDansGame&#34;&gt;Example Video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Getting Started&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;You must use a master build of NeoVim. The latest master has everything that you need.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use your favorite plugin manager.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#34;ThePrimeagen/vim-apm&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute :VimApm. If you use Ctrl-w o to shut other buffers, you can bring back the menu by re-executing :VimApm&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Execute :VimApmShutdown to stop calculating.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check out your timings csv file at ~/apm.csv&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Values and Meaning&lt;/h3&gt; &#xA;&lt;p&gt;you will see 3 values, n:, i:, and t:. n = normal mode, i = insert, t = total.&lt;/p&gt; &#xA;&lt;p&gt;There are two numbers Score / Strokes. Score is determined by how repetitive the last 10 commands are in normal mode, not applicable to insert mode. So an ideal score would be ~1 ratio for normal mode.&lt;/p&gt; &#xA;&lt;h3&gt;Enjoy&lt;/h3&gt; &#xA;&lt;p&gt;Made with love, live on &lt;a href=&#34;https://twitch.tv/ThePrimeagen&#34;&gt;Twitch&lt;/a&gt;. Thank you TJ for all your help&lt;/p&gt;</summary>
  </entry>
</feed>