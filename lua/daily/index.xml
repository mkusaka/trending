<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-27T01:37:17Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mrshmllow/document-color.nvim</title>
    <updated>2022-11-27T01:37:17Z</updated>
    <id>tag:github.com,2022-11-27:/mrshmllow/document-color.nvim</id>
    <link href="https://github.com/mrshmllow/document-color.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üåà LSP-based colorizer for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;document-color.nvim üåà&lt;/h1&gt; &#xA;&lt;p&gt;A colorizer plugin for &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#tailwindcss&#34;&gt;tailwindcss&lt;/a&gt; and any lsp servers that support &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentColor&#34;&gt;&lt;code&gt;textDocument/documentColor&lt;/code&gt;&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;For example &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#tailwindcss&#34;&gt;tailwindcss&lt;/a&gt;, &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#cssls&#34;&gt;cssls&lt;/a&gt;, and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#dartls&#34;&gt;dart&lt;/a&gt; support documentColor!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/40532058/184640748-8e71ad1e-c300-4040-b4f2-8a5bba3e9588.gif&#34; alt=&#34;document-color.nvim demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation &amp;amp; Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;mrshmllow/document-color.nvim&#39;, config = function()&#xA;  require(&#34;document-color&#34;).setup {&#xA;    -- Default options&#xA;    mode = &#34;background&#34;, -- &#34;background&#34; | &#34;foreground&#34; | &#34;single&#34;&#xA;  }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What is &#34;single&#34; mode?&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;For people who don&#39;t like large bright chunks of their buffer un-colorschemed, &lt;code&gt;single&lt;/code&gt; column mode is a compromise until anti-conceal.&lt;/p&gt; &#xA; &lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/40532058/184829642-e6f83acc-dece-4ee0-b17f-86e119a4f966.png&#34; alt=&#34;&amp;quot;single&amp;quot; mode&#34;&gt;&lt;/h2&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What does foreground mode look like?&lt;/summary&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/40532058/184633209-32427b6b-0f08-468b-ae6f-977950b96000.png&#34; alt=&#34;image&#34;&gt;&lt;/h2&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;For a typical &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;lspconfig&lt;/a&gt; setup...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local on_attach = function(client)&#xA;  ...&#xA;  if client.server_capabilities.colorProvider then&#xA;    -- Attach document colour support&#xA;    require(&#34;document-color&#34;).buf_attach(bufnr)&#xA;  end&#xA;  ...&#xA;end&#xA;&#xA;local capabilities = vim.lsp.protocol.make_client_capabilities()&#xA;&#xA;-- You are now capable!&#xA;capabilities.textDocument.colorProvider = {&#xA;  dynamicRegistration = true&#xA;}&#xA;&#xA;-- Lsp servers that support documentColor&#xA;require(&#34;lspconfig&#34;).tailwindcss.setup({&#xA;  on_attach = on_attach,&#xA;  capabilities = capabilities&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Toggle in current buffer&#xA;require(&#34;document-color&#34;).buf_toggle()&#xA;&#xA;-- Attach to the current buffer (Turn on)&#xA;require(&#34;document-color&#34;).buf_attach()&#xA;&#xA;-- Detach from current buffer (Turn off)&#xA;require(&#34;document-color&#34;).buf_detach()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tips &amp;amp; Tricks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Disable &lt;a href=&#34;https://github.com/norcalli/nvim-colorizer.lua&#34;&gt;nvim-colorizer.nvim&lt;/a&gt; in places its now redundent&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Colorize&#xA;use { &#39;norcalli/nvim-colorizer.lua&#39;, config = function ()&#xA;  require(&#39;colorizer&#39;).setup({&#xA;    &#39;*&#39;;&#xA;    -- An example&#xA;    &#39;!css&#39;;&#xA;    &#39;!html&#39;;&#xA;    &#39;!tsx&#39;;&#xA;    &#39;!dart&#39;;&#xA;  })&#xA;end }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You should probably keep your existing colorizer plugin, this plugin does not replace it in many cases&lt;/li&gt; &#xA; &lt;li&gt;I am only using &#34;color&#34; and not &#34;colour&#34; because thats what the lsp specs say, not because i believe in such heresy to the queen&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîÆ A future...&lt;/h2&gt; &#xA;&lt;p&gt;When (or if) &lt;a href=&#34;https://github.com/neovim/neovim/pull/9496&#34;&gt;anti-conceal&lt;/a&gt; ever gets merged, it may be possible to have something like the tailwindcss vscode extension has&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/40532058/184592957-99705666-c26f-4ee9-b804-42201db7dd9a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;for now, we only have &lt;code&gt;mode = &#34;single&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kabouzeid&#34;&gt;kabouzeid&lt;/a&gt; and his great dotfiles. Inspired by his reddit post, chunks of this plugin are from his dotfiles. ‚ù§Ô∏è&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/norcalli/nvim-colorizer.lua&#34;&gt;https://github.com/norcalli/nvim-colorizer.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bennypowers/nvim-regexplainer</title>
    <updated>2022-11-27T01:37:17Z</updated>
    <id>tag:github.com,2022-11-27:/bennypowers/nvim-regexplainer</id>
    <link href="https://github.com/bennypowers/nvim-regexplainer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Describe the regexp under the cursor&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-regexplainer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/bennypowers/nvim-regexplainer/main?style=for-the-badge&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Describe the regular expression under the cursor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1466420/156946492-a05600dc-0a5b-49e6-9ad2-417a403909a8.mov&#34;&gt;https://user-images.githubusercontent.com/1466420/156946492-a05600dc-0a5b-49e6-9ad2-417a403909a8.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Heavily inspired by the venerable &lt;a href=&#34;https://github.com/klorenz/atom-regex-railroad-diagrams/&#34;&gt;atom-regexp-railroad&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üëâ &lt;strong&gt;NOTE&lt;/strong&gt;: Requires Neovim 0.7 üëà&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üöö Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;bennypowers/nvim-regexplainer&#39;,&#xA;      config = function() require&#39;regexplainer&#39;.setup() end,&#xA;      requires = {&#xA;        &#39;nvim-treesitter/nvim-treesitter&#39;,&#xA;        &#39;MunifTanjim/nui.nvim&#39;,&#xA;      } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You need to install &lt;code&gt;regex&lt;/code&gt; with &lt;code&gt;nvim-treesitter&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;:TSInstall regex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü§î Config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- defaults&#xA;require&#39;regexplainer&#39;.setup {&#xA;  -- &#39;narrative&#39;&#xA;  mode = &#39;narrative&#39;, -- TODO: &#39;ascii&#39;, &#39;graphical&#39;&#xA;&#xA;  -- automatically show the explainer when the cursor enters a regexp&#xA;  auto = false,&#xA;&#xA;  -- filetypes (i.e. extensions) in which to run the autocommand&#xA;  filetypes = {&#xA;    &#39;html&#39;,&#xA;    &#39;js&#39;,&#xA;    &#39;cjs&#39;,&#xA;    &#39;mjs&#39;,&#xA;    &#39;ts&#39;,&#xA;    &#39;jsx&#39;,&#xA;    &#39;tsx&#39;,&#xA;    &#39;cjsx&#39;,&#xA;    &#39;mjsx&#39;,&#xA;  },&#xA;&#xA;  -- Whether to log debug messages&#xA;  debug = false, &#xA;&#xA;  -- &#39;split&#39;, &#39;popup&#39;&#xA;  display = &#39;popup&#39;,&#xA;&#xA;  mappings = {&#xA;    toggle = &#39;gR&#39;,&#xA;    -- examples, not defaults:&#xA;    -- show = &#39;gS&#39;,&#xA;    -- hide = &#39;gH&#39;,&#xA;    -- show_split = &#39;gP&#39;,&#xA;    -- show_popup = &#39;gU&#39;,&#xA;  },&#xA;&#xA;  narrative = {&#xA;    separator = &#39;\n&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;display&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Regexplainer offers a small variety of display modes to suit your preferences.&lt;/p&gt; &#xA;&lt;h4&gt;Split Window&lt;/h4&gt; &#xA;&lt;p&gt;Set to &lt;code&gt;split&lt;/code&gt; to display the explainer in a window below the editor. The window will be reused, and has the filetype &lt;code&gt;Regexplainer&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Popup Below Cursor&lt;/h4&gt; &#xA;&lt;p&gt;Set to &lt;code&gt;popup&lt;/code&gt; (the default) to display the explainer in a popup below the cursor. When the cursor moves, the popup closes. if &lt;code&gt;auto&lt;/code&gt; is set, the popup will automatically display whenever the cursor moves inside a regular expression&lt;/p&gt; &#xA;&lt;p&gt;You can call &lt;code&gt;show&lt;/code&gt; with your own display type to override your config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;regexplainer&#39;.show { display = &#39;split&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the commands &lt;code&gt;RegexplainerShowSplit&lt;/code&gt; or &lt;code&gt;RegexplainerShowPopup&lt;/code&gt;. &lt;code&gt;RegexplainerHide&lt;/code&gt; and &lt;code&gt;RegexplainerToggle&lt;/code&gt; are also available.&lt;/p&gt; &#xA;&lt;p&gt;You can customize the popup window by specifying &lt;code&gt;options.popup.border&lt;/code&gt;, which is a table of &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/tree/main/lua/nui/popup#border&#34;&gt;popup options from nui&lt;/a&gt;. Any options specified for &lt;code&gt;options.popup&lt;/code&gt; will also override the defaults.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;regexplainer&#39;.show {&#xA;  display = &#39;popup&#39;,&#xA;  popup = {&#xA;    border = {&#xA;      padding = { 1, 2 },&#xA;      style = &#39;solid&#39;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You could use this to, for example, set a different border based on the state of your editor.&lt;/p&gt; &#xA;&lt;h3&gt;Render Options&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;narrative.separator&lt;/code&gt; can also be a function taking the current component and returning a string clause separator. For example, to separate clauses by a new line, followed by &lt;code&gt;&amp;gt; &lt;/code&gt; for each level of capture-group depth, define the following function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;narrative = {&#xA;  separator = function(component)&#xA;    local sep = &#39;\n&#39;;&#xA;    if component.depth &amp;gt; 0 then&#xA;      for _ = 1, component.depth do&#xA;        sep = sep .. &#39;&amp;gt; &#39;&#xA;      end&#xA;    end&#xA;    return sep&#xA;  end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Input:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/zero(one(two(?&amp;lt;inner&amp;gt;three)))/;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;`zero`  &#xA;capture group 1:  &#xA;&amp;gt; `one`  &#xA;&amp;gt; capture group 2:  &#xA;&amp;gt; &amp;gt; `two`  &#xA;&amp;gt; &amp;gt; named capture group 3 `inner`:  &#xA;&amp;gt; &amp;gt; &amp;gt; `three`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Yank&lt;/h2&gt; &#xA;&lt;p&gt;You can yank the regexplanation into any register with the &lt;code&gt;yank&lt;/code&gt; function. The default register is &lt;code&gt;&#34;&lt;/code&gt;. This can be useful if you&#39;d like to share the explanation of a regexp with your teammates, or if you&#39;d like to report a mistake in regexplainer. The argument to &lt;code&gt;yank&lt;/code&gt; is either a string (the register to yank to) or a table with &lt;code&gt;register: string&lt;/code&gt; and options to &lt;code&gt;show&lt;/code&gt; (e.g. &lt;code&gt;mode = &#39;narrative&#39;, narrative = {}&lt;/code&gt;, etc.).&lt;/p&gt; &#xA;&lt;p&gt;For example, to copy the regexplanation to your system clipboard, use either of these:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;regexplainer&#39;.yank&#39;+&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;regexplainer&#39;.yank { register = &#39;+&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the command &lt;code&gt;RegexplainerYank&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RegexplainerYank +&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;A Note about Lookbehinds&lt;/h2&gt; &#xA;&lt;p&gt;While &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter-regex/issues/13&#34;&gt;https://github.com/tree-sitter/tree-sitter-regex/issues/13&lt;/a&gt; is still open, lookbehind support is partial, and results may not be accurate, especially if the term in the lookbehind is complex, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/(?&amp;lt;!http|https:\/\/)www\.regex101\.com/;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üóÉÔ∏è TODO list&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Display Regexp &lt;a href=&#34;https://github.com/tabatkins/railroad-diagrams/&#34;&gt;railroad diagrams&lt;/a&gt; using ASCII-art&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Display Regexp &lt;a href=&#34;https://github.com/tabatkins/railroad-diagrams/&#34;&gt;railroad diagrams&lt;/a&gt; via &lt;a href=&#34;https://github.com/edluffy/hologram.nvim&#34;&gt;hologram&lt;/a&gt; and &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol/&#34;&gt;kitty image protocol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; online documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; some unit tests or something, i guess&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>DNLHC/glance.nvim</title>
    <updated>2022-11-27T01:37:17Z</updated>
    <id>tag:github.com,2022-11-27:/DNLHC/glance.nvim</id>
    <link href="https://github.com/DNLHC/glance.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pretty window for previewing, navigating and editing your LSP locations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Glance&lt;/h1&gt; &#xA;&lt;p&gt;A pretty window for previewing, navigating and editing your LSP locations in one place, inspired by vscode&#39;s peek preview.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/86K5ljv.png&#34; alt=&#34;Glance references screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Properly configured LSP client&lt;/li&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.7.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred plugin manager.&lt;/p&gt; &#xA;&lt;h3&gt;Vim Plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;dnlhc/glance.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;  &#34;dnlhc/glance.nvim&#34;,&#xA;  config = function()&#xA;    require(&#39;glance&#39;).setup({&#xA;      -- your configuration&#xA;    })&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The following is the default configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua configuration&#xA;local glance = require(&#39;glance&#39;)&#xA;local actions = glance.actions&#xA;&#xA;glance.setup({&#xA;  height = 18, -- Height of the window&#xA;  border = {&#xA;    enable = false, -- Show window borders. Only horizontal borders allowed&#xA;    top_char = &#39;‚Äï&#39;,&#xA;    bottom_char = &#39;‚Äï&#39;,&#xA;  },&#xA;  list = {&#xA;    position = &#39;right&#39;, -- Position of the list window &#39;left&#39;|&#39;right&#39;&#xA;    width = 0.33, -- 33% width relative to the active window, min 0.1, max 0.5&#xA;  },&#xA;  theme = { -- This feature might not work properly in nvim-0.7.2&#xA;    enable = true, -- Will generate colors for the plugin based on your current colorscheme&#xA;    mode = &#39;auto&#39;, -- &#39;brighten&#39;|&#39;darken&#39;|&#39;auto&#39;, &#39;auto&#39; will set mode based on the brightness of your colorscheme&#xA;  },&#xA;  mappings = {&#xA;    list = {&#xA;      [&#39;j&#39;] = actions.next, -- Bring the cursor to the next item in the list&#xA;      [&#39;k&#39;] = actions.previous, -- Bring the cursor to the previous item in the list&#xA;      [&#39;&amp;lt;Down&amp;gt;&#39;] = actions.next,&#xA;      [&#39;&amp;lt;Up&amp;gt;&#39;] = actions.previous,&#xA;      [&#39;&amp;lt;Tab&amp;gt;&#39;] = actions.next_location, -- Bring the cursor to the next location skipping groups in the list&#xA;      [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = actions.previous_location, -- Bring the cursor to the previous location skipping groups in the list&#xA;      [&#39;&amp;lt;C-u&amp;gt;&#39;] = actions.preview_scroll_win(5),&#xA;      [&#39;&amp;lt;C-d&amp;gt;&#39;] = actions.preview_scroll_win(-5),&#xA;      [&#39;v&#39;] = actions.jump_vsplit,&#xA;      [&#39;s&#39;] = actions.jump_split,&#xA;      [&#39;t&#39;] = actions.jump_tab,&#xA;      [&#39;&amp;lt;CR&amp;gt;&#39;] = actions.jump,&#xA;      [&#39;o&#39;] = actions.jump,&#xA;      [&#39;&amp;lt;leader&amp;gt;l&#39;] = actions.enter_win(&#39;preview&#39;), -- Focus preview window&#xA;      [&#39;q&#39;] = actions.close,&#xA;      [&#39;Q&#39;] = actions.close,&#xA;      [&#39;&amp;lt;Esc&amp;gt;&#39;] = actions.close,&#xA;      -- [&#39;&amp;lt;Esc&amp;gt;&#39;] = false -- disable a mapping&#xA;    },&#xA;    preview = {&#xA;      [&#39;Q&#39;] = actions.close,&#xA;      [&#39;&amp;lt;Tab&amp;gt;&#39;] = actions.next_location,&#xA;      [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = actions.previous_location,&#xA;      [&#39;&amp;lt;leader&amp;gt;l&#39;] = actions.enter_win(&#39;list&#39;), -- Focus list window&#xA;    },&#xA;  },&#xA;  hooks = {},&#xA;  folds = {&#xA;    fold_closed = &#39;ÔôÅ&#39;,&#xA;    fold_open = &#39;Ôòø&#39;,&#xA;    folded = true, -- Automatically fold list on startup&#xA;  },&#xA;  indent_lines = {&#xA;    enable = true,&#xA;    icon = &#39;‚îÇ&#39;,&#xA;  },&#xA;  winbar = {&#xA;    enable = true, -- Available strating from nvim-0.8+&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;h3&gt;before_open&lt;/h3&gt; &#xA;&lt;p&gt;Runs after getting the results and before opening the window. Can be used to alter the default opening behavior or to modify the results like filter out the unwanted locations&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: This is a blocking hook which means glance will not open unless you call the &lt;code&gt;open&lt;/code&gt; callback.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t open glance when there is only one result but jump directly to that location instead&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;hooks = {&#xA;  before_open = function(results, open, jump, method)&#xA;    if #results == 1 then&#xA;      jump(results[1]) -- argument is optional&#xA;    else&#xA;      open(results) -- argument is optional&#xA;    end&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t open glance when there is one result and it is located in the current buffer, open otherwise&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;hooks = {&#xA;  before_open = function(results, open, jump, method)&#xA;    local uri = vim.uri_from_bufnr(0)&#xA;    if #results == 1 then&#xA;      local target_uri = results[1].uri or results[1].targetUri&#xA;&#xA;      if target_uri == uri then&#xA;        jump(results[1])&#xA;      else&#xA;        open(results)&#xA;      end&#xA;    else&#xA;      open(results)&#xA;    end&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Glance references&lt;/code&gt; show references of the word under the cursor from the LSP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Glance definitions&lt;/code&gt; show definitions of the word under the cursor from the LSP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Glance type_definitions&lt;/code&gt; show type definitions of the word under the cursor from the LSP server&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Glance implementations&lt;/code&gt; show implementations of the word under the cursor from the LSP server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example keybindings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;nnoremap gR &amp;lt;CMD&amp;gt;Glance references&amp;lt;CR&amp;gt;&#xA;nnoremap gD &amp;lt;CMD&amp;gt;Glance definitions&amp;lt;CR&amp;gt;&#xA;nnoremap gY &amp;lt;CMD&amp;gt;Glance type_definitions&amp;lt;CR&amp;gt;&#xA;nnoremap gM &amp;lt;CMD&amp;gt;Glance implementations&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.keymap.set(&#39;n&#39;, &#39;gD&#39;, &#39;&amp;lt;CMD&amp;gt;Glance definitions&amp;lt;CR&amp;gt;&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;gR&#39;, &#39;&amp;lt;CMD&amp;gt;Glance references&amp;lt;CR&amp;gt;&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;gY&#39;, &#39;&amp;lt;CMD&amp;gt;Glance type_definitions&amp;lt;CR&amp;gt;&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;gM&#39;, &#39;&amp;lt;CMD&amp;gt;Glance implementations&amp;lt;CR&amp;gt;&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;p&gt;The following list shows all the highlight groups defined for glance.nvim&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GlancePreviewNormal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlancePreviewMatch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlancePreviewCursorLine&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlancePreviewSignColumn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlancePreviewEndOfBuffer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlancePreviewLineNr&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlancePreviewBorderBottom&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceWinBarFilename&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceWinBarFilepath&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceWinBarTitle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceListNormal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceListFilename&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceListFilepath&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceListCount&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceListMatch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceListCursorLine&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceListEndOfBuffer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceListBorderBottom&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceFoldIcon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceIndent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GlanceBorderTop&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;glepnir/lspsaga.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;folke/trouble.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rmagatti/goto-preview&#34;&gt;rmagatti/goto-preview&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>