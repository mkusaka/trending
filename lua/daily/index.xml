<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-28T01:33:34Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Wansmer/symbol-usage.nvim</title>
    <updated>2023-09-28T01:33:34Z</updated>
    <id>tag:github.com,2023-09-28:/Wansmer/symbol-usage.nvim</id>
    <link href="https://github.com/Wansmer/symbol-usage.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display references, definitions and implementations of document symbols&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;symbol-usage.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Plugin to display references, definitions, and implementations of document symbols with a view like JetBrains Idea.&lt;/p&gt; &#xA;&lt;!--toc:start--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#filtering-kinds&#34;&gt;Filter kinds&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#todo&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#other-sources-with-similar-feature&#34;&gt;Other sources with similar feature&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/#known-issues-and-restriction&#34;&gt;Known issues and restriction&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--toc:end--&gt; &#xA;&lt;img width=&#34;724&#34; alt=&#34;Снимок экрана 2023-09-17 в 17 50 35&#34; src=&#34;https://github.com/Wansmer/symbol-usage.nvim/assets/46977173/c13fb043-7cd1-47e3-8f20-8853a44c7067&#34;&gt; &#xA;&lt;img width=&#34;715&#34; alt=&#34;Снимок экрана 2023-09-17 в 17 51 14&#34; src=&#34;https://github.com/Wansmer/symbol-usage.nvim/assets/46977173/d5aeefdb-6147-48a5-9a70-fdfead151635&#34;&gt; &#xA;&lt;img width=&#34;712&#34; alt=&#34;Снимок экрана 2023-09-17 в 17 51 47&#34; src=&#34;https://github.com/Wansmer/symbol-usage.nvim/assets/46977173/578ab051-fd1f-4f70-98a5-f05307a5fb8b&#34;&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Shows references, definitions, and implementations as virtual text;&lt;/li&gt; &#xA; &lt;li&gt;Three options for display virtual text: above the line, end of line or near with textwidth;&lt;/li&gt; &#xA; &lt;li&gt;Works with LSP servers even client do not support &lt;code&gt;textDocument/codeLens&lt;/code&gt; feature;&lt;/li&gt; &#xA; &lt;li&gt;Fully customizable: can be customized for different languages or use with default config for all;&lt;/li&gt; &#xA; &lt;li&gt;Ignores unnecessary requests to LSP;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Neovim &amp;gt;= 0.9.0&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;With &lt;code&gt;lazy.nvim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;Wansmer/symbol-usage.nvim&#39;,&#xA;  event = &#39;BufReadPre&#39;, -- need run before LspAttach if you use nvim 0.9. On 0.10 use &#39;LspAttach&#39;&#xA;  config = function()&#xA;    require(&#39;symbol-usage&#39;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Default options values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local SymbolKind = vim.lsp.protocol.SymbolKind&#xA;&#xA;---@type UserOpts&#xA;local default_opts = {&#xA;  ---@type table&amp;lt;string, any&amp;gt; `nvim_set_hl`-like options for highlight virtual text&#xA;  hl = { link = &#39;Comment&#39; },&#xA;  ---@type lsp.SymbolKind[] Symbol kinds what need to be count (see `lsp.SymbolKind`)&#xA;  kinds = { SymbolKind.Function, SymbolKind.Method },&#xA;  ---Additional filter for kinds. Recommended use in the filetypes override table.&#xA;  ---fiterKind: function(data: { symbol:table, parent:table, bufnr:integer }): boolean&#xA;  ---`symbol` and `parent` is an item from `textDocument/documentSymbol` request&#xA;  ---See: #filter-kinds&#xA;  ---@type table&amp;lt;lsp.SymbolKind, filterKind[]&amp;gt;&#xA;  kinds_filter = {},&#xA;  ---@type &#39;above&#39;|&#39;end_of_line&#39;|&#39;textwidth&#39; above by default&#xA;  vt_position = &#39;above&#39;,&#xA;  ---Text to display when request is pending. If `false`, extmark will not be&#xA;  ---created until the request is finished. Recommended to use with `above`&#xA;  ---vt_position to avoid &#34;jumping lines&#34;.&#xA;  ---@type string|false&#xA;  request_pending_text = &#39;loading...&#39;,&#xA;  ---@type function(symbol: Symbol): string Symbol{ definition = integer|nil, implementation = integer|nil, references = integer|nil }&#xA;  text_format = function(symbol)&#xA;    local fragments = {}&#xA;&#xA;    if symbol.references then&#xA;      local usage = symbol.references &amp;lt;= 1 and &#39;usage&#39; or &#39;usages&#39;&#xA;      local num = symbol.references == 0 and &#39;no&#39; or symbol.references&#xA;      table.insert(fragments, (&#39;%s %s&#39;):format(num, usage))&#xA;    end&#xA;&#xA;    if symbol.definition then&#xA;      table.insert(fragments, symbol.definition .. &#39; defs&#39;)&#xA;    end&#xA;&#xA;    if symbol.implementation then&#xA;      table.insert(fragments, symbol.implementation .. &#39; impls&#39;)&#xA;    end&#xA;&#xA;    return table.concat(fragments, &#39;, &#39;)&#xA;  end,&#xA;  references = { enabled = true, include_declaration = false },&#xA;  definition = { enabled = false },&#xA;  implementation = { enabled = false },&#xA;  ---@type UserOpts[] See default overridings in `lua/symbol-usage/langs.lua`&#xA;  -- filetypes = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;see SymbolKind&lt;/summary&gt; &#xA; &lt;p&gt;From &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind&#34;&gt;LSP spec&lt;/a&gt;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;SymbolKind = {&#xA;  File = 1,&#xA;  Module = 2,&#xA;  Namespace = 3,&#xA;  Package = 4,&#xA;  Class = 5,&#xA;  Method = 6,&#xA;  Property = 7,&#xA;  Field = 8,&#xA;  Constructor = 9,&#xA;  Enum = 10,&#xA;  Interface = 11,&#xA;  Function = 12,&#xA;  Variable = 13,&#xA;  Constant = 14,&#xA;  String = 15,&#xA;  Number = 16,&#xA;  Boolean = 17,&#xA;  Array = 18,&#xA;  Object = 19,&#xA;  Key = 20,&#xA;  Null = 21,&#xA;  EnumMember = 22,&#xA;  Struct = 23,&#xA;  Event = 24,&#xA;  Operator = 25,&#xA;  TypeParameter = 26,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Filtering kinds&lt;/h2&gt; &#xA;&lt;p&gt;Each LSP server processes requests and returns results differently. Therefore, it is impossible to set general settings that are completely suitable for every programming language.&lt;/p&gt; &#xA;&lt;p&gt;For example, in &lt;code&gt;javascipt&lt;/code&gt; arrow functions are not defined as &lt;code&gt;SymbolKind.Function&lt;/code&gt;, but as &lt;code&gt;SymbolKind.Variable&lt;/code&gt; or &lt;code&gt;SymbolKind.Constant&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I would like to know how many times an arrow function is used, but keeping track of all variables is not informative. For this purpose, you can define additional filters that will check that the variable contains exactly the function and not some other value.&lt;/p&gt; &#xA;&lt;p&gt;You can see implementation examples &lt;a href=&#34;https://raw.githubusercontent.com/Wansmer/symbol-usage.nvim/main/lua/symbol-usage/langs.lua&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Setup &lt;code&gt;symbol-usage&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Setup `symbol-usage`&#xA;---@param opts UserOpts&#xA;require(&#39;symbol-usage&#39;).setup(opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Toggle virtual text for current buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;symbol-usage&#39;).toggle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refresh current buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;symbol-usage&#39;).refresh()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Custom filter for symbol kinds;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Different highlighting groups for references, definitions, and implementations;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Different symbol kinds for references, definitions, and implementations;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; First, query the data for the symbols that are currently on the screen;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Option to show only on current line;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other sources with similar feature&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Neovim built-in &lt;a href=&#34;https://github.com/neovim/neovim/raw/211edceb4f4d4d0f6c41a6ee56891a6f9407e3a7/runtime/lua/vim/lsp/codelens.lua&#34;&gt;codeLens&lt;/a&gt;: implemented no in all servers;&lt;/li&gt; &#xA; &lt;li&gt;Plugin &lt;a href=&#34;https://github.com/VidocqH/lsp-lens.nvim&#34;&gt;lsp-lens.nvim&lt;/a&gt;: only &lt;code&gt;above&lt;/code&gt; view;&lt;/li&gt; &#xA; &lt;li&gt;Plugin &lt;a href=&#34;https://github.com/chrisgrieser/nvim-dr-lsp&#34;&gt;nvim-dr-lsp&lt;/a&gt;: shows info in statusline;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Known issues and restriction&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No shows virtual text above first line (&lt;a href=&#34;https://github.com/neovim/neovim/issues/16166&#34;&gt;#16166&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;When virtual text ia above, uses &lt;code&gt;LineNr&lt;/code&gt; instead of &lt;code&gt;CursorLineNr&lt;/code&gt; for symbol&#39;s line even it current line (actual, if you use number with &lt;code&gt;statuscolumn&lt;/code&gt;) (UPD: fixed at &lt;a href=&#34;https://github.com/neovim/neovim/pull/25277&#34;&gt;#25277&lt;/a&gt;);&lt;/li&gt; &#xA; &lt;li&gt;Some clients don&#39;t recognize anonymous functions and closures like &lt;code&gt;SymbolKind.Function&lt;/code&gt; (e.g., tsserver, rust-analyzer)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>coffebar/neovim-project</title>
    <updated>2023-09-28T01:33:34Z</updated>
    <id>tag:github.com,2023-09-28:/coffebar/neovim-project</id>
    <link href="https://github.com/coffebar/neovim-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim project manager maintains your recent project history and uses Telescope to select from autosaved sessions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🗃️ Neovim project manager plugin&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Neovim project&lt;/strong&gt; plugin simplifies project management by maintaining project history and providing quick access to saved sessions via &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;. It runs on top of the &lt;a href=&#34;https://github.com/Shatur/neovim-session-manager&#34;&gt;Neovim Session Manager&lt;/a&gt;, which is needed to store all open tabs and buffers for each project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Start where you left off last time.&lt;/li&gt; &#xA; &lt;li&gt;✅ Switch from project to project in second.&lt;/li&gt; &#xA; &lt;li&gt;✅ Sessions and history can be synced across your devices (rsync, Syncthing, Nextcloud, Dropbox, etc.)&lt;/li&gt; &#xA; &lt;li&gt;✅ Find all your projects by glob patterns defined in config.&lt;/li&gt; &#xA; &lt;li&gt;✅ Autosave &lt;strong&gt;neo-tree.nvim&lt;/strong&gt; expanded directories and buffers order in &lt;strong&gt;barbar.nvim&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/coffebar/neovim-project/assets/3100053/b75e9373-d694-48e4-abbf-3abfe98ae46f&#34; alt=&#34;Neovim project manager plugin dracula theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/coffebar/neovim-project/assets/3100053/2bc9b472-071c-4975-97b0-545bd1390053&#34; alt=&#34;Neovim project manager plugin onedark theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🙏 &lt;strong&gt;Neovim project manager&lt;/strong&gt; plugin is heavily inspired by &lt;a href=&#34;https://github.com/ahmedkhalf/project.nvim&#34;&gt;project.vim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set patterns in the &lt;a href=&#34;https://raw.githubusercontent.com/coffebar/neovim-project/main/#%EF%B8%8F-configuration&#34;&gt;configuration&lt;/a&gt; to discover your projects.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/coffebar/neovim-project/main/#commands&#34;&gt;commands&lt;/a&gt; to open your project. Or open Neovim in the project directory. Both methods will create a session.&lt;/li&gt; &#xA; &lt;li&gt;Open files inside the project and work.&lt;/li&gt; &#xA; &lt;li&gt;The session will be saved before closing Neovim or switching to another project via &lt;a href=&#34;https://raw.githubusercontent.com/coffebar/neovim-project/main/#commands&#34;&gt;commands&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open Neovim in any non-project directory and the latest session will be loaded.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install the plugin using your preferred package manager.&lt;/p&gt; &#xA;&lt;details open&gt;&#xA; &lt;summary&gt;Lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;coffebar/neovim-project&#34;,&#xA;  opts = {&#xA;    projects = { -- define project roots&#xA;      &#34;~/projects/*&#34;,&#xA;      &#34;~/.config/*&#34;,&#xA;    },&#xA;  },&#xA;  init = function()&#xA;    -- enable saving the state of plugins in the session&#xA;    vim.opt.sessionoptions:append(&#34;globals&#34;) -- save global variables that start with an uppercase letter and contain at least one lowercase letter.&#xA;  end,&#xA;  dependencies = {&#xA;    { &#34;nvim-lua/plenary.nvim&#34; },&#xA;    { &#34;nvim-telescope/telescope.nvim&#34;, tag = &#34;0.1.0&#34; },&#xA;    { &#34;Shatur/neovim-session-manager&#34; },&#xA;  },&#xA;  priority = 100,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;packer.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;  &#34;coffebar/neovim-project&#34;,&#xA;  config = function()&#xA;    -- enable saving the state of plugins in the session&#xA;    vim.opt.sessionoptions:append(&#34;globals&#34;) -- save global variables that start with an uppercase letter and contain at least one lowercase letter.&#xA;    -- setup neovim-project plugin&#xA;    require(&#34;neovim-project&#34;).setup {&#xA;      projects = { -- define project roots&#xA;        &#34;~/projects/*&#34;,&#xA;        &#34;~/.config/*&#34;,&#xA;      },&#xA;    }&#xA;  end,&#xA;  requires = {&#xA;    { &#34;nvim-lua/plenary.nvim&#34; },&#xA;    { &#34;nvim-telescope/telescope.nvim&#34;, tag = &#34;0.1.0&#34; },&#xA;    { &#34;Shatur/neovim-session-manager&#34; },&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;pckr.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;coffebar/neovim-project&#34;,&#xA;  config = function()&#xA;    -- enable saving the state of plugins in the session&#xA;    vim.opt.sessionoptions:append(&#34;globals&#34;) -- save global variables that start with an uppercase letter and contain at least one lowercase letter.&#xA;    -- setup neovim-project plugin&#xA;    require(&#34;neovim-project&#34;).setup {&#xA;      projects = { -- define project roots&#xA;        &#34;~/projects/*&#34;,&#xA;        &#34;~/.config/*&#34;,&#xA;      },&#xA;    }&#xA;  end,&#xA;  requires = {&#xA;    { &#34;nvim-lua/plenary.nvim&#34; },&#xA;    { &#34;nvim-telescope/telescope.nvim&#34;, tag = &#34;0.1.0&#34; },&#xA;    { &#34;Shatur/neovim-session-manager&#34; },&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Default options:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Project directories&#xA;  projects = {&#xA;    &#34;~/projects/*&#34;,&#xA;    &#34;~/p*cts/*&#34;, -- glob pattern is supported&#xA;    &#34;~/projects/repos/*&#34;,&#xA;    &#34;~/.config/*&#34;,&#xA;    &#34;~/work/*&#34;,&#xA;  },&#xA;  -- Path to store history and sessions&#xA;  datapath = vim.fn.stdpath(&#34;data&#34;), -- ~/.local/share/nvim/&#xA;  -- Load the most recent session on startup if not in the project directory&#xA;  last_session_on_startup = true,&#xA;&#xA;  -- Overwrite some of Session Manager options&#xA;  session_manager_opts = {&#xA;    autosave_ignore_dirs = {&#xA;      vim.fn.expand(&#34;~&#34;), -- don&#39;t create a session for $HOME/&#xA;      &#34;/tmp&#34;,&#xA;    },&#xA;    autosave_ignore_filetypes = {&#xA;      -- All buffers of these file types will be closed before the session is saved&#xA;      &#34;ccc-ui&#34;,&#xA;      &#34;gitcommit&#34;,&#xA;      &#34;gitrebase&#34;,&#xA;      &#34;qf&#34;,&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;Neovim project manager will add these commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:Telescope neovim-project discover&lt;/code&gt; - find a project based on patterns.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:Telescope neovim-project history&lt;/code&gt; - select a project from your recent history.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;History is sorted by access time. &#34;Discover&#34; keeps order as you have in the config.&lt;/p&gt; &#xA;&lt;h4&gt;Telescope mappings&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;code&gt;Ctrl+d&lt;/code&gt; in Telescope to delete the project&#39;s session and remove it from the history.&lt;/p&gt; &#xA;&lt;h2&gt;⚡ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo video&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/coffebar/neovim-project/assets/3100053/e88ae41a-5606-46c4-a287-4c476ed97ccc&#34;&gt;https://github.com/coffebar/neovim-project/assets/3100053/e88ae41a-5606-46c4-a287-4c476ed97ccc&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤝 Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a ticket if you want integration with another plugin, or if you want to request a new feature.&lt;/li&gt; &#xA; &lt;li&gt;If you encounter bugs please open an issue.&lt;/li&gt; &#xA; &lt;li&gt;Pull requests are welcome.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>