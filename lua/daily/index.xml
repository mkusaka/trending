<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-06T01:40:28Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>smoka7/multicursors.nvim</title>
    <updated>2023-07-06T01:40:28Z</updated>
    <id>tag:github.com,2023-07-06:/smoka7/multicursors.nvim</id>
    <link href="https://github.com/smoka7/multicursors.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A multi cursor plugin for Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Multicursor.nvim [WIP]&lt;/h1&gt; &#xA;&lt;p&gt;The Multicursor Plugin for Neovim extends the native Neovim text editing capabilities, providing a more intuitive way to edit repetitive text with multiple cursors. With this plugin, you can easily create and manage multiple cursors, perform simultaneous edits, and execute commands on all cursors at once.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= &lt;strong&gt;0.9.0&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with your preferred package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;smoka7/multicursors.nvim&#34;,&#xA;    event = &#34;VeryLazy&#34;,&#xA;    opts = {},&#xA;    keys = {&#xA;            {&#xA;                &#39;&amp;lt;Leader&amp;gt;m&#39;,&#xA;                &#39;&amp;lt;cmd&amp;gt;MCstart&amp;lt;cr&amp;gt;&#39;,&#xA;                desc = &#39;Create a selection for word under the cursor&#39;,&#xA;            },&#xA;        },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    DEBUG_MODE = false,&#xA;    create_commands = true, -- create Multicursor user commands&#xA;    updatetime = 50, -- selections get updated if this many milliseconds nothing is typed in the insert mode see :help updatetime&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MCstart&lt;/td&gt; &#xA;   &lt;td&gt;Selects the word under cursor and starts listening for the actions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MCpattern&lt;/td&gt; &#xA;   &lt;td&gt;Prompts for a pattern and selects every match in the buffer.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MCvisualPattern&lt;/td&gt; &#xA;   &lt;td&gt;Prompts for a pattern and selects every match in the visual selection.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MCunderCursor&lt;/td&gt; &#xA;   &lt;td&gt;Selects the char under cursor and starts listening for the actions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MCclear&lt;/td&gt; &#xA;   &lt;td&gt;Clears all the selection.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To enter multi cursor mode, use the &lt;code&gt;MCstart&lt;/code&gt; command. Note that keys that aren&#39;t mapped will have no effect in this mode.&lt;/p&gt; &#xA;&lt;p&gt;In multi cursor mode&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear the selections and go back to normal mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear the selections and go back to normal mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enters insert mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;a&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enters append mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;c&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deletes the text inside selections and starts insert mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;n&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Finds the next match after the main selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;N&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Finds the previous match before the main selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Skips the current selection and finds the next one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Skips the current selection and finds the previous one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Swaps the main selection with next selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Swaps the main selection with previous selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;j&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a selection on the char below the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;J&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Skips the current selection and Creates a selection on the char below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;k&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a selection on the char above the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;K&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Skips the current selection and Creates a selection on the char above&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Puts the text inside &lt;code&gt;unnamed register&lt;/code&gt; before selections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;P&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Puts the text inside &lt;code&gt;unnamed register&lt;/code&gt; after selections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yanks the text inside selection to &lt;code&gt;unnamed register&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Aligns selections by adding space before selections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Z&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Aligns selections by adding space at beginning of line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete the text inside selections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;@&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Executes a macro at beginning of every selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Reapets last change at the beginning of every selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;,&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clears All Selections except the main one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompts for a normal command and Executes it at beginning of every selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;u&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Undo changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-r&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redo changes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;In insert and append mode:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear the selections and go back to normal mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;BS&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Delete the char under the selections&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Left&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the selections to Left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Up&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the selections to Up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Right&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the selections to Right&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;Down&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Move the selections to Down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pastes the text from system clipboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;TODOS&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Move the selection by &#34;ts&#34; nodes (unclear)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Move the selection by Vim motions (unclear)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support count + actions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Handle overlapping selections (for now we merge them)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Completion works, but doesn&#39;t clear duplicates&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; - Create a mod to show to the user&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; - Clear other selections and only keep the main one&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;[&lt;/code&gt; - Go to the next selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;]&lt;/code&gt; - Go to the previous selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;z&lt;/code&gt; - Align matches by inserting spaces before the first character of each selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;s&lt;/code&gt; - Save matches&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;code&gt;S&lt;/code&gt; - Restore matches&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should selection movements wrap vertically?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should selection movements wrap horizontally?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should &lt;code&gt;&amp;lt;bs&amp;gt;&lt;/code&gt; wrap?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Should folded lines get ignored when searching?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; show help window for mapping and registers ?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgment&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mg979/vim-visual-multi&#34;&gt;vim-visual-multi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This document is mostly written with Chatgpt.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tomiis4/hypersonic.nvim</title>
    <updated>2023-07-06T01:40:28Z</updated>
    <id>tag:github.com,2023-07-06:/tomiis4/hypersonic.nvim</id>
    <link href="https://github.com/tomiis4/hypersonic.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim plugin that provides an explanation for regular expressions.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Hypersonic - NeoVim Plugin for Regex Writing and Testing &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A powerful NeoVim plugin created to increase your regular expression (RegExp) writing and testing experience. Whether you&#39;re a newbie or professional developer, Hypersonic is here to make your life easier and boost your productivity. &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://media.discordapp.net/attachments/772927831441014847/1121863260128415825/image.png?width=815&amp;amp;height=458&#34;&gt; &lt;/h3&gt; &#xA;&lt;h6 align=&#34;center&#34;&gt; Colorscheme: Rose-Pine; Font: JetBrainsMono NF &lt;/h6&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Interactive RegExp Testing&lt;/strong&gt;: Hypersonic provides an interactive testing environment right within NeoVim. You can easily write your RegExp patterns and instantly see the matches highlighted in real-time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pattern Explanation&lt;/strong&gt;: Understanding complex RegExp patterns can be challenging. Hypersonic comes with an integrated pattern explanation feature that provides detailed explanations for your RegExp patterns, helping you grasp their meaning and behavior.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Currently accessible&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Simple &lt;strong&gt;RegExp&lt;/strong&gt; &lt;em&gt;explanation&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Simple &lt;strong&gt;error&lt;/strong&gt; handling techniques&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CommandLine&lt;/strong&gt; &lt;em&gt;live&lt;/em&gt; &lt;em&gt;explanation&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Language support for &lt;strong&gt;LUA&lt;/strong&gt;, &lt;strong&gt;PHP&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does not work in &lt;code&gt;v0.8.3&lt;/code&gt; (only tested one)&lt;/li&gt; &#xA; &lt;li&gt;Nested groups do not display correctly&lt;/li&gt; &#xA; &lt;li&gt;Advanced regex is not working (e.g. &lt;code&gt;(?:)&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; named capturing group (&lt;code&gt;(?:&amp;lt;name&amp;gt;)&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; non-capturing group (&lt;code&gt;(?:)&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; look-around (&lt;code&gt;(?=)&lt;/code&gt;, &lt;code&gt;(?!)&lt;/code&gt;, &lt;code&gt;(?&amp;lt;=)&lt;/code&gt;, &lt;code&gt;(?&amp;lt;!)&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;selecting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;select RegExp then enter command &lt;code&gt;:Hypersonic&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt; preview &lt;/summary&gt; &#xA;     &lt;img src=&#34;https://media.discordapp.net/attachments/772927831441014847/1121863260128415825/image.png?width=815&amp;amp;height=458&#34;&gt; &#xA;    &lt;/details&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt;  &lt;/li&gt; &#xA; &lt;li&gt;command &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;enter command: &lt;code&gt;:Hypersonic your-regex&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt; preview &lt;/summary&gt; &#xA;     &lt;img src=&#34;https://media.discordapp.net/attachments/772927831441014847/1121863260451393576/image.png?width=815&amp;amp;height=458&#34;&gt; &#xA;    &lt;/details&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt;  &lt;/li&gt; &#xA; &lt;li&gt;command-line search &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;in cmd search &lt;code&gt;/your-regex&lt;/code&gt; or &lt;code&gt;?your-regex&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt; &#xA;    &lt;details&gt; &#xA;     &lt;summary&gt; preview &lt;/summary&gt; &#xA;     &lt;img src=&#34;https://media.discordapp.net/attachments/772927831441014847/1121863260736585729/image.png?width=815&amp;amp;height=458&#34;&gt; &#xA;    &lt;/details&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt;  &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Using vim-plug &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;tomiis4/Hypersonic.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Using packer &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;tomiis4/Hypersonic.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Using lazy &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;tomiis4/Hypersonic.nvim&#39;,&#xA;    event = &#34;CmdlineEnter&#34;,&#xA;    cmd = &#34;Hypersonic&#34;,&#xA;    config = function()&#xA;        require(&#39;hypersonic&#39;).setup({&#xA;            -- config&#xA;        })&#xA;    end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;hypersonic&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; Default configuration &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;hypersonic&#39;).setup({&#xA;    ---@type &#39;none&#39;|&#39;single&#39;|&#39;double&#39;|&#39;rounded&#39;|&#39;solid&#39;|&#39;shadow&#39;|table&#xA;    border = &#39;rounded&#39;,&#xA;    ---@type number 0-100&#xA;    winblend = 0,&#xA;    ---@type boolean&#xA;    add_padding = true,&#xA;    ---@type string&#xA;    hl_group = &#39;Keyword&#39;,&#xA;    ---@type string&#xA;    wrapping = &#39;&#34;&#39;,&#xA;    ---@type boolean&#xA;    enable_cmdline = true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;File order&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;|   LICENSE&#xA;|   README.md&#xA;|&#xA;+---lua&#xA;|   \---hypersonic&#xA;|           config.lua&#xA;|           explain.lua&#xA;|           init.lua&#xA;|           merge.lua&#xA;|           split.lua&#xA;|           tables.lua&#xA;|           utils.lua&#xA;|&#xA;+---plugin&#xA;|       hypersonic.lua&#xA;|&#xA;\---test&#xA;        testing_file.txt&#xA;        testing_file.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; How does it work &lt;/summary&gt; &#xA; &lt;h2&gt;How does it work?&lt;/h2&gt; &#xA; &lt;h3&gt;Process&lt;/h3&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Take regex from current line.&lt;/li&gt; &#xA;  &lt;li&gt;Spit to specified format.&lt;/li&gt; &#xA;  &lt;li&gt;Explain that regex.&lt;/li&gt; &#xA;  &lt;li&gt;Merge it for better readability.&lt;/li&gt; &#xA;  &lt;li&gt;Return result in floating window.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Split&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; input &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code&gt;gr[ae]y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; output &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    {&#xA;        type = &#34;character&#34;,&#xA;        value = &#34;g&#34;&#xA;    },&#xA;    {&#xA;        type = &#34;character&#34;,&#xA;        value = &#34;r&#34;&#xA;    },&#xA;    {&#xA;        type = &#34;class&#34;,&#xA;        value = &#34;ae&#34;&#xA;    },&#xA;    {&#xA;        type = &#34;character&#34;,&#xA;        value = &#34;y&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; meta characters table &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local meta_table = {&#xA;    [&#39;n&#39;] = &#39;Newline&#39;,&#xA;    [&#39;r&#39;] = &#39;Carriage return&#39;,&#xA;    [&#39;t&#39;] = &#39;Tab&#39;,&#xA;    [&#39;s&#39;] = &#39;Any whitespace character&#39;,&#xA;    [&#39;S&#39;] = &#39;Any non-whitespace character&#39;,&#xA;    [&#39;d&#39;] = &#39;Any digit&#39;,&#xA;    -- more in tables.lua&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; Node &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    type = &#39;character&#39;|&#39;escaped&#39;|&#39;class&#39;|&#39;group&#39;|&#39;quantifier&#39;,&#xA;    value = &#39;&#39;,&#xA;    children = Node|{},&#xA;    quantifiers = &#39;&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;create new table &lt;code&gt;main={}&lt;/code&gt; (type: &lt;em&gt;Node[]&lt;/em&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;loop for each char &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;\&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;add future char to &lt;code&gt;main&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;li&gt;skip that char&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;[&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;get closing &lt;code&gt;]&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;li&gt;add content between &lt;code&gt;[]&lt;/code&gt; to &lt;code&gt;main&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;li&gt;skip to closing &lt;code&gt;]&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;(&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;get closing &lt;code&gt;)&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;li&gt;add split content between &lt;code&gt;()&lt;/code&gt; to &lt;code&gt;children&lt;/code&gt;&lt;/li&gt; &#xA;      &lt;li&gt;skip to closing &lt;code&gt;)&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;?&lt;/code&gt;|&lt;code&gt;+&lt;/code&gt;|&lt;code&gt;*&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;add char to previous &lt;code&gt;Node.quantifiers&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;other &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;create Node with that char&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Explain&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; input &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;    {&#xA;        type = &#34;character&#34;,&#xA;        value = &#34;g&#34;&#xA;    },&#xA;    {&#xA;        type = &#34;character&#34;,&#xA;        value = &#34;r&#34;&#xA;    },&#xA;    {&#xA;        type = &#34;class&#34;,&#xA;        value = &#34;ae&#34;&#xA;    },&#xA;    {&#xA;        type = &#34;character&#34;,&#xA;        value = &#34;y&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; output &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    {&#xA;        explanation = &#34;Match g&#34;,&#xA;        value = &#34;g&#34;&#xA;    },&#xA;    {&#xA;        explanation = &#34;Match r&#34;,&#xA;        value = &#34;r&#34;&#xA;    },&#xA;    {&#xA;        children = { &#34;a&#34;, &#34;e&#34; },&#xA;        explanation = &#34;Match either&#34;,&#xA;        value = &#34;[ae]&#34;&#xA;    },&#xA;    {&#xA;        explanation = &#34;Match y&#34;,&#xA;        value = &#34;y&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;create new table &lt;code&gt;main={}&lt;/code&gt; (type: &lt;em&gt;Explained[]&lt;/em&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;loop for each Node &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;type == escaped | character&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;explain character&lt;/li&gt; &#xA;      &lt;li&gt;check if is in any table &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt;return that value&lt;/li&gt; &#xA;       &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;type == class&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;call &lt;code&gt;explain_class&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;type == group&lt;/code&gt; &#xA;     &lt;ul&gt; &#xA;      &lt;li&gt;call &lt;code&gt;explain&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;Merge&lt;/h3&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; input &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;    {&#xA;        explanation = &#34;Match g&#34;,&#xA;        value = &#34;g&#34;&#xA;    },&#xA;    {&#xA;        explanation = &#34;Match r&#34;,&#xA;        value = &#34;r&#34;&#xA;    },&#xA;    {&#xA;        children = { &#34;a&#34;, &#34;e&#34; },&#xA;        explanation = &#34;Match either&#34;,&#xA;        value = &#34;[ae]&#34;&#xA;    },&#xA;    {&#xA;        explanation = &#34;Match y&#34;,&#xA;        value = &#34;y&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; output &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#xA;    {&#xA;        explanation = &#34;Match gr&#34;,&#xA;        value = &#34;gr&#34;&#xA;    }, &#xA;    {&#xA;        explanation = &#34;Match either&#34;,&#xA;        children = { &#34;a or e&#34; },&#xA;        value = &#34;[ae]&#34;&#xA;    }, &#xA;    {&#xA;        explanation = &#34;Match y&#34;,&#xA;        value = &#34;y&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt; NeoVim output &lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code&gt;+-gr[ae]y------------------------------+&#xA;| &#34;gr&#34;:   Match gr                     |&#xA;| &#34;[ae]&#34;: Match either                 |&#xA;|    1) a or e                         |&#xA;| &#34;y&#34;:    Match y                      |&#xA;+--------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt; &lt;a href=&#34;https://github.com/tomiis4&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/87276646?v=4&#34; width=&#34;50px;&#34; alt=&#34;tomiis4&#34;&gt;&lt;br&gt; &lt;sub&gt;&lt;b&gt; tomiis4 &lt;/b&gt;&lt;/sub&gt;&lt;br&gt; &lt;sup&gt; founder &lt;/sup&gt; &lt;/a&gt;&lt;br&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;top&#34; width=&#34;14.28%&#34;&gt; &lt;a href=&#34;https://github.com/NormTurtle&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/108952834?v=4&#34; width=&#34;50px;&#34; alt=&#34;NormTurtle&#34;&gt;&lt;br&gt; &lt;sub&gt;&lt;b&gt; NormTurtle &lt;/b&gt;&lt;/sub&gt;&lt;br&gt; &lt;sup&gt; command-line preview idea &lt;/sup&gt; &lt;/a&gt;&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>Tastyep/structlog.nvim</title>
    <updated>2023-07-06T01:40:28Z</updated>
    <id>tag:github.com,2023-07-06:/Tastyep/structlog.nvim</id>
    <link href="https://github.com/Tastyep/structlog.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Structured Logging for nvim, using Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;structlog.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://luarocks.org/modules/Tastyep/structlog.nvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?label=Luarocks&amp;amp;message=structlog.nvim&amp;amp;color=blue&amp;amp;logo=Lua&#34; alt=&#34;Luarocks - structlog.nvim&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tastyep/structlog.nvim/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/tag/Tastyep/structlog.nvim?include_prereleases=&amp;amp;sort=semver&#34; alt=&#34;GitHub tag&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Tastyep/structlog.nvim/main/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue&#34; alt=&#34;License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Tastyep/structlog.nvim/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://github.com/Tastyep/structlog.nvim/actions/workflows/test.yaml/badge.svg?sanitize=true&#34; alt=&#34;test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Tastyep/structlog.nvim/actions/workflows/sanitize.yaml&#34;&gt;&lt;img src=&#34;https://github.com/Tastyep/structlog.nvim/actions/workflows/sanitize.yaml/badge.svg?sanitize=true&#34; alt=&#34;sanitize&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tastyep.github.io/structlog.nvim/&#34;&gt;&lt;img src=&#34;https://github.com/Tastyep/structlog.nvim/actions/workflows/documentation.yaml/badge.svg?sanitize=true&#34; alt=&#34;Documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Structured Logging for nvim, using Lua&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3267228/211154903-e8088c1d-e902-4f63-8e7c-cda537f16dae.png&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why using it&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;structlog&lt;/code&gt; makes logging in Lua less painful and more powerful by adding structure to your log entries.&lt;/p&gt; &#xA;&lt;p&gt;Instead of writting complex messages, you can start thinking in terms of an event that happens in the context of key/value pairs. &lt;br&gt; Each log entry is a meaningful dictionary instead of an opaque string!&lt;/p&gt; &#xA;&lt;p&gt;Thanks to its flexible design, the structure of the final log output is up for you to decide. &lt;br&gt; Each log entry goes through a processor pipeline that is just a chain of functions that receive a dictionary and return a new dictionary that gets fed into the next function. That allows for simple but powerful data manipulation.&lt;br&gt; This dictionary is then formatted and sent out to the sink.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3267228/211154943-63bec130-7db9-4472-9b08-1174853e51ab.png&#34; alt=&#34;structlog-banner drawio&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more details, consider reading the &lt;a href=&#34;https://tastyep.github.io/structlog.nvim/index.html&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;Tastyep/structlog.nvim&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://luarocks.org/&#34;&gt;luarocks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;luarocks install --local structlog.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;As explained in the introduction, log messages go through a pipeline to provide common information and to structure them into a comprehensible format. Internally, the log message is a dictionary built by the logger and is composed as follow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  local log = {&#xA;    level = Level.name(level), -- The log level represented as a string&#xA;    msg = msg,                 -- The given message&#xA;    logger_name = logger.name, -- The name of the logger&#xA;    events = events or {},     -- The dictionary containing the &#39;key=value&#39; arguments&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the end of a pipeline, the message &lt;code&gt;msg&lt;/code&gt; field should contain the text to write to the sink.&lt;/p&gt; &#xA;&lt;h3&gt;Processors&lt;/h3&gt; &#xA;&lt;p&gt;Processors are functions with the goal of enriching log messages. These functions accept one parameter, &lt;code&gt;log&lt;/code&gt; which they edit by adding new &lt;code&gt;key=value&lt;/code&gt; pairs, such as the logger&#39;s name or the current timestamp, and return it on completion.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://tastyep.github.io/structlog.nvim/modules/structlog.processors.html#M&#34;&gt;processors documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Formatters&lt;/h3&gt; &#xA;&lt;p&gt;Formatters define the structure of the log. By default &lt;code&gt;vim.inspect&lt;/code&gt; is used to format the given arguments &lt;code&gt;events&lt;/code&gt; as &lt;code&gt;key=value&lt;/code&gt; pairs. All formatters have the same interface. They expose a formatting function accepting a dictionary &lt;code&gt;log&lt;/code&gt; and return that same dictionary, modified so that &lt;code&gt;log.msg&lt;/code&gt; contains the message to write to the sink.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://tastyep.github.io/structlog.nvim/modules/structlog.formatters.html&#34;&gt;formatters documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sinks&lt;/h3&gt; &#xA;&lt;p&gt;Sinks specify where to write the log message. Like the other elements of the pipeline, sinks accept &lt;code&gt;log&lt;/code&gt; as parameter.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://tastyep.github.io/structlog.nvim/modules/structlog.sinks.html&#34;&gt;sinks documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Minimal&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local log = require(&#34;structlog&#34;)&#xA;&#xA;log.configure({&#xA;  my_logger = {&#xA;    pipelines = {&#xA;      {&#xA;        log.level.INFO,&#xA;        {&#xA;          log.processors.Timestamper(&#34;%H:%M:%S&#34;),&#xA;        },&#xA;        log.formatters.Format( --&#xA;          &#34;%s [%s] %s: %-30s&#34;,&#xA;          { &#34;timestamp&#34;, &#34;level&#34;, &#34;logger_name&#34;, &#34;msg&#34; },&#xA;        ),&#xA;        log.sinks.Console(),&#xA;      },&#xA;    },&#xA;  },&#xA;  other_logger = {&#xA;    pipelines = { ... }&#xA;  },&#xA;})&#xA;&#xA;local logger = log.get_logger(&#34;my_logger&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Complete&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local log = require(&#34;structlog&#34;)&#xA;&#xA;log.configure({&#xA;  my_logger = {&#xA;    pipelines = {&#xA;      {&#xA;        level = log.level.INFO,&#xA;        processors = {&#xA;          log.processors.StackWriter({ &#34;line&#34;, &#34;file&#34; }, { max_parents = 0, stack_level = 0 }),&#xA;          log.processors.Timestamper(&#34;%H:%M:%S&#34;),&#xA;        },&#xA;        formatter = log.formatters.FormatColorizer( --&#xA;          &#34;%s [%s] %s: %-30s&#34;,&#xA;          { &#34;timestamp&#34;, &#34;level&#34;, &#34;logger_name&#34;, &#34;msg&#34; },&#xA;          { level = log.formatters.FormatColorizer.color_level() }&#xA;        ),&#xA;        sink = log.sinks.Console(),&#xA;      },&#xA;      {&#xA;        level = log.level.WARN,&#xA;        processors = {},&#xA;        formatter = log.formatters.Format( --&#xA;          &#34;%s&#34;,&#xA;          { &#34;msg&#34; },&#xA;          { blacklist = { &#34;level&#34;, &#34;logger_name&#34; } }&#xA;        ),&#xA;        sink =  log.sinks.NvimNotify(),&#xA;      },&#xA;      {&#xA;        level = log.level.TRACE,&#xA;        processors = {&#xA;          log.processors.StackWriter({ &#34;line&#34;, &#34;file&#34; }, { max_parents = 3 }),&#xA;          log.processors.Timestamper(&#34;%H:%M:%S&#34;),&#xA;        },&#xA;        formatter = log.formatters.Format( --&#xA;          &#34;%s [%s] %s: %-30s&#34;,&#xA;          { &#34;timestamp&#34;, &#34;level&#34;, &#34;logger_name&#34;, &#34;msg&#34; }&#xA;        ),&#xA;        sink = log.sinks.File(&#34;./test.log&#34;),&#xA;      },&#xA;    },&#xA;  },&#xA;  },&#xA;  -- other_logger = {...}&#xA;})&#xA;&#xA;local logger = log.get_logger(&#34;my_logger&#34;)&#xA;logger:info(&#34;A log message&#34;)&#xA;logger:warn(&#34;A log message with keyword arguments&#34;, { warning = &#34;something happened&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat test.log:&#xA;10:43:23 [INFO] my_logger: A log message                            file=&#34;lua/foo/bar.lua&#34;, line=9&#xA;10:43:23 [WARN] my_logger: A log message with keyword arguments     file=&#34;lua/foo/bar.lua&#34;, line=10, warning=&#34;something happened&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3267228/211155369-69678288-8b9c-49e9-9fc0-5fa40059f594.png&#34; alt=&#34;notify&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>