<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-02T01:37:46Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>creativenull/efmls-configs-nvim</title>
    <updated>2023-08-02T01:37:46Z</updated>
    <id>tag:github.com,2023-08-02:/creativenull/efmls-configs-nvim</id>
    <link href="https://github.com/creativenull/efmls-configs-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An unofficial collection of linters and formatters configured for efm-langserver to work with the builtin nvim-lsp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;efmls-configs-nvim&lt;/h1&gt; &#xA;&lt;a href=&#34;https://dotfyle.com/plugins/creativenull/efmls-configs-nvim&#34;&gt; &lt;img src=&#34;https://dotfyle.com/plugins/creativenull/efmls-configs-nvim/shield&#34; alt=&#34;Configs on dotfyle&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;An unofficial collection of linters and formatters configured for &lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; to work with the built-in &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;nvim-lsp&lt;/a&gt;. Works only for Neovim &amp;gt;= 0.5.&lt;/p&gt; &#xA;&lt;h2&gt;Supported linters and formatters&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/supported-linters-and-formatters.md&#34;&gt;supported-linters-and-formatters.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Out-of-box configurations for 70+ linters &amp;amp; formatters&lt;/li&gt; &#xA; &lt;li&gt;Intelligently detect tools installed project-wide or system-wide - works only for node/npm, php/composer and ruby/bundler (additional support for other build tools coming soon)&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;code&gt;:checkhealth&lt;/code&gt; for a quick diagnostic on tools, to check if tool is available&lt;/li&gt; &#xA; &lt;li&gt;Ability to customize configurations for your specific project use-cases (see &lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/#advanced-configuration-setup-help-efmls-configs-advanced&#34;&gt;Advanced Setup&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Vim Docs&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be accessed via &lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/doc/efmls-configs.txt&#34;&gt;&lt;code&gt;:help efmls-configs&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/#documentation&#34;&gt;further below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim 0.5 and up&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt;, installed globally - follow instructions on the repo&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with your favorite plugin manager or just use builtin packages.&lt;/p&gt; &#xA;&lt;h3&gt;lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;creativenull/efmls-configs-nvim&#39;,&#xA;  version = &#39;v0.1.3&#39;,&#xA;  dependencies = { &#39;neovim/nvim-lspconfig&#39; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Packer.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;creativenull/efmls-configs-nvim&#39;,&#xA;  tag = &#39;v0.1.3&#39;, -- tag is optional&#xA;  requires = { &#39;neovim/nvim-lspconfig&#39; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;creativenull/efmls-configs-nvim&#39;, { &#39;tag&#39;: &#39;v0.1.3&#39; } &#34; tag is optional&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Setup (&lt;code&gt;:help efmls-configs-setup&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;h4&gt;Step 1&lt;/h4&gt; &#xA;&lt;p&gt;You need to first initialize the plugin with the &lt;code&gt;init()&lt;/code&gt; function, this is where you can pass your LSP options like &lt;code&gt;on_attach&lt;/code&gt;, &lt;code&gt;capabilities&lt;/code&gt;, &lt;code&gt;init_options&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function on_attach(client)&#xA;  print(&#39;Attached to &#39; .. client.name)&#xA;end&#xA;&#xA;local efmls = require &#39;efmls-configs&#39;&#xA;efmls.init {&#xA;  -- Your custom attach function&#xA;  on_attach = on_attach,&#xA;&#xA;  -- Enable formatting provided by efm langserver&#xA;  init_options = {&#xA;    documentFormatting = true,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Step 2&lt;/h4&gt; &#xA;&lt;p&gt;Finally, register the linters and formatters you want to run on the specific filetypes with the &lt;code&gt;setup()&lt;/code&gt; function. Below is an example to setup eslint and prettier to work with a &lt;code&gt;javascript&lt;/code&gt; filetype.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local eslint = require &#39;efmls-configs.linters.eslint&#39;&#xA;local prettier = require &#39;efmls-configs.formatters.prettier&#39;&#xA;efmls.setup {&#xA;  javascript = {&#xA;    linter = eslint,&#xA;    formatter = prettier,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Configuration (&lt;code&gt;:help efmls-configs-defaults&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;A default configuration for the supported filetypes is provided but not activated by default.&lt;/p&gt; &#xA;&lt;p&gt;To activate the default configuration you can pass the &lt;code&gt;default_config&lt;/code&gt; flag as true in the init function. Below are the default values for &lt;code&gt;init()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;efmls.init {&#xA;  -- Use a list of default configurations&#xA;  -- set by this plugin&#xA;  -- (Default: false)&#xA;  default_config = false,&#xA;}&#xA;&#xA;efmls.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will still need to call the &lt;code&gt;setup()&lt;/code&gt; after &lt;code&gt;init()&lt;/code&gt; for the changes to take effect. You can still pass your custom configurations to &lt;code&gt;setup()&lt;/code&gt; as show in the &lt;a href=&#34;https://raw.githubusercontent.com/creativenull/efmls-configs-nvim/main/#setup&#34;&gt;Setup section&lt;/a&gt; and it will override any default configuration set by &lt;code&gt;default_config&lt;/code&gt; if it&#39;s the same filetype.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Configuration Setup (&lt;code&gt;:help efmls-configs-advanced&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;If you want to change some settings that are not provided in the default config, you can change them with &lt;code&gt;vim.tbl_extend&lt;/code&gt;. These configs take the same keys referenced in the &lt;a href=&#34;https://github.com/mattn/efm-langserver/raw/master/schema.json&#34;&gt;efm-langserver schema file&lt;/a&gt; in json format, aka &lt;code&gt;camelCase&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local eslint = require &#39;efmls-configs.linters.eslint&#39;&#xA;eslint = vim.tbl_extend(&#39;force&#39;, eslint, {&#xA;  prefix = &#39;new eslint prefix&#39;,&#xA;  lintCommand = &#39;eslint --format visualstudio --stdin&#39;,&#xA;})&#xA;&#xA;efmls.setup {&#xA;  javascript = { linter = eslint },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementation Details (TODO)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Testing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Credits goes to the following projects for inspiration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mattn/efm-langserver&#34;&gt;efm-langserver&lt;/a&gt; - for the awesome language server to provide linters/formatters through a LSP protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dense-analyses/ale&#34;&gt;ale&lt;/a&gt; - for a huge list of supported linters/formatters to look through&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Stefanuk12/ROBLOX</title>
    <updated>2023-08-02T01:37:46Z</updated>
    <id>tag:github.com,2023-08-02:/Stefanuk12/ROBLOX</id>
    <link href="https://github.com/Stefanuk12/ROBLOX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Public: All of my ROBLOX Scripts, etc.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hi&lt;/h1&gt; &#xA;&lt;p&gt;pretty much just my scripts and stuff&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Stefanuk12/ROBLOX/tree/documentation&#34;&gt;docs branch here&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>julienvincent/nvim-paredit</title>
    <updated>2023-08-02T01:37:46Z</updated>
    <id>tag:github.com,2023-08-02:/julienvincent/nvim-paredit</id>
    <link href="https://github.com/julienvincent/nvim-paredit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Paredit implementation for Neovim, built using Treesitter and written in Lua.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;nvim-paredit&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;img src=&#34;https://raw.githubusercontent.com/julienvincent/nvim-paredit/master/assets/logo.png&#34; align=&#34;center&#34; alt=&#34;Logo&#34;&gt; &lt;/p&gt; &#xA; &lt;p&gt; A &lt;a href=&#34;https://paredit.org/&#34;&gt;Paredit&lt;/a&gt; implementation for &lt;a href=&#34;https://github.com/neovim/neovim/&#34;&gt;Neovim&lt;/a&gt;, built using &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;Treesitter&lt;/a&gt; and written in Lua. &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;The goal of &lt;code&gt;nvim-paredit&lt;/code&gt; is to provide a comparable s-expression editing experience in Neovim to that provided by Emacs. This is what is provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Treesitter based lisp structural editing and cursor motions&lt;/li&gt; &#xA; &lt;li&gt;Dot-repeatable keybindings&lt;/li&gt; &#xA; &lt;li&gt;Language extensibility&lt;/li&gt; &#xA; &lt;li&gt;Programmable API&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/julienvincent/nvim-paredit/master/assets/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Status&lt;/h2&gt; &#xA;&lt;p&gt;This is currently &lt;strong&gt;beta software&lt;/strong&gt;. It works well in the workflows of the current maintainers but has not been thoroughly tested with many users.&lt;/p&gt; &#xA;&lt;p&gt;It currently only has first-class support for the &lt;code&gt;clojure&lt;/code&gt; language and has a focus on supporting the fundamental paredit operations and motions.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.vim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;julienvincent/nvim-paredit&#34;,&#xA;  config = function()&#xA;    require(&#34;nvim-paredit&#34;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-paredit&#34;).setup({&#xA;  -- should plugin use default keybindings? (default = true)&#xA;  use_default_keys = true,&#xA;  -- sometimes user wants to restrict plugin to certain file types only&#xA;  -- defaults to all supported file types including custom lang&#xA;  -- extensions (see next section)&#xA;  filetypes = { &#34;clojure&#34; },&#xA;  cursor_behaviour = &#34;auto&#34;, -- remain, follow, auto&#xA;  -- list of default keybindings&#xA;  keys = {&#xA;    [&#34;&amp;gt;)&#34;] = { paredit.api.slurp_forwards, &#34;Slurp forwards&#34; },&#xA;    [&#34;&amp;gt;(&#34;] = { paredit.api.slurp_backwards, &#34;Slurp backwards&#34; },&#xA;&#xA;    [&#34;&amp;lt;)&#34;] = { paredit.api.barf_forwards, &#34;Barf forwards&#34; },&#xA;    [&#34;&amp;lt;(&#34;] = { paredit.api.barf_backwards, &#34;Barf backwards&#34; },&#xA;&#xA;    [&#34;&amp;gt;e&#34;] = { paredit.api.drag_element_forwards, &#34;Drag element right&#34; },&#xA;    [&#34;&amp;lt;e&#34;] = { paredit.api.drag_element_backwards, &#34;Drag element left&#34; },&#xA;&#xA;    [&#34;&amp;gt;f&#34;] = { paredit.api.drag_form_forwards, &#34;Drag form right&#34; },&#xA;    [&#34;&amp;lt;f&#34;] = { paredit.api.drag_form_backwards, &#34;Drag form left&#34; },&#xA;&#xA;    [&#34;&amp;lt;localleader&amp;gt;o&#34;] = { paredit.api.raise_form, &#34;Raise form&#34; },&#xA;    [&#34;&amp;lt;localleader&amp;gt;O&#34;] = { paredit.api.raise_element, &#34;Raise element&#34; },&#xA;&#xA;    [&#34;E&#34;] = { &#xA;      paredit.api.move_to_next_element,&#xA;      &#34;Jump to next element tail&#34;,&#xA;      -- by default all keybindings are dot repeatable&#xA;      repeatable = false &#xA;    },&#xA;    [&#34;B&#34;] = {&#xA;      paredit.api.move_to_prev_element, &#xA;      &#34;Jump to previous element head&#34;,&#xA;      repeatable = false&#xA;    },&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Language Support&lt;/h2&gt; &#xA;&lt;p&gt;As this is built using Treesitter it requires that you have the relevant Treesitter grammar installed for your language of choice. Additionally &lt;code&gt;nvim-paredit&lt;/code&gt; will need explicit support for the treesitter grammar as the node names and metadata of nodes vary between languages.&lt;/p&gt; &#xA;&lt;p&gt;Right now &lt;code&gt;nvim-paredit&lt;/code&gt; only has built in support for &lt;code&gt;clojure&lt;/code&gt; but exposes an extension API for adding support for other lisp dialects. This API is considered &lt;strong&gt;very alpha&lt;/strong&gt; and may change without warning to properly account for other languages when attempts are made to add support.&lt;/p&gt; &#xA;&lt;p&gt;Extensions can either be added as config when calling &lt;code&gt;setup&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-paredit&#34;).setup({&#xA;  extensions = {&#xA;    commonlisp = {&#xA;      -- Should return the &#39;root&#39; of the given Treesitter node. For example:&#xA;      -- The node at cursor in the below example is `()` or &#39;list_lit&#39;:&#xA;      --   &#39;(|)&#xA;      -- But the node root is `&#39;()` or &#39;quoting_lit&#39;&#xA;      get_node_root = function(node)&#xA;      end,&#xA;      -- This is the inverse of `get_node_root` for forms and should find the inner node for which&#xA;      -- the forms elements are direct children.&#xA;      --&#xA;      -- For example given the node `&#39;()` or &#39;quoting_lit&#39;, this function should return `()` or &#39;list_lit&#39;.&#xA;      unwrap_form = function(node)&#xA;      end,&#xA;      -- Accepts a Treesitter node and should return true or false depending on whether the given node&#xA;      -- can be considered a &#39;form&#39;&#xA;      node_is_form = function(node)&#xA;      end,&#xA;      -- Accepts a Treesitter node and should return true or false depending on whether the given node&#xA;      -- can be considered a &#39;comment&#39;&#xA;      node_is_comment = function(node)&#xA;      end,&#xA;      -- Accepts a Treesitter node representing a form and should return the &#39;edges&#39; of the node. This&#xA;      -- includes the node text and the range covered by the node&#xA;      get_node_edges = function(node)&#xA;        return {&#xA;          left = { text = &#34;#{&#34;, range = { 0, 0, 0, 2 } },&#xA;          right = { text = &#34;}&#34;, range = { 0, 5, 0, 6 } },&#xA;        }&#xA;      end,&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or by calling the &lt;code&gt;add_language_extension&lt;/code&gt; API directly before the setup. This would be the recommended approach for extension plugin authors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-paredit.lang&#34;).add_language_extension(&#34;commonlisp&#34;, { ... }).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;As no attempt has been made to add support for other grammars I have no idea if the language extension API&#39;s are actually sufficient for adding additional languages. They will evolve as attempts are made.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The core API is exposed as &lt;code&gt;paredit.api&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local paredit = require(&#34;nvim-paredit&#34;)&#xA;paredit.api.slurp_forwards()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;slurp_forwards&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;slurp_backwards&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;barf_forwards&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;barf_backwards&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;drag_element_forwards&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;drag_element_backwards&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;drag_form_forwards&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;drag_form_backwards&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;raise_element&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;raise_form&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;move_to_next_element&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;move_to_prev_element&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Prior Art&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/guns/vim-sexp&#34;&gt;vim-sexp&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Currently the de-facto s-expression editing plugin with the most extensive set of available editing operations. If you are looking for a more complete plugin with a wider range of supported languages then you might want to look into using this instead.&lt;/p&gt; &#xA;&lt;p&gt;The main reasons you might want to consider &lt;code&gt;nvim-paredit&lt;/code&gt; instead are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easier configuration and an exposed lua API&lt;/li&gt; &#xA; &lt;li&gt;Control over how the cursor is moved during slurp/barf. (For example if you don&#39;t want the cursor to always be moved)&lt;/li&gt; &#xA; &lt;li&gt;Recursive slurp/barf operations. If your cursor is in a nested form you can still slurp from the forms parent(s)&lt;/li&gt; &#xA; &lt;li&gt;Subjectively better out-of-the-box keybindings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/tpope/vim-sexp-mappings-for-regular-people&#34;&gt;vim-sexp-mappings-for-regular-people&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A companion to &lt;code&gt;vim-sexp&lt;/code&gt; which configures &lt;code&gt;vim-sexp&lt;/code&gt; with better mappings. The default mappings for &lt;code&gt;nvim-paredit&lt;/code&gt; were derived from here.&lt;/p&gt;</summary>
  </entry>
</feed>