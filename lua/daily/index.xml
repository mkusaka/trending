<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-02T01:32:48Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>otavioschwanck/arrow.nvim</title>
    <updated>2024-02-02T01:32:48Z</updated>
    <id>tag:github.com,2024-02-02:/otavioschwanck/arrow.nvim</id>
    <link href="https://github.com/otavioschwanck/arrow.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bookmark your files, separated by project, and quickly navigate through them.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;arrow.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Arrow.nvim is a plugin made to manage quick file bookmarks using a single UI. You can just map one key and have everything you need to get started.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mPdSC5s.png&#34; alt=&#34;arrow.nvim&#34;&gt; &lt;img src=&#34;https://i.imgur.com/LcvG406.gif&#34; alt=&#34;arrow.nvim_gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Lazy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;otavioschwanck/arrow.nvim&#34;,&#xA;  opts = {&#xA;    show_icons = true,&#xA;    leader_key = &#39;;&#39; -- Recommended to be a single key&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;otavioschwanck/arrow.nvim&#39;, config = function()&#xA;  require(&#39;arrow&#39;).setup({&#xA;    show_icons = true,&#xA;    leader_key = &#39;;&#39; -- Recommended to be a single key&#xA;  })&#xA;end }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Just press the leader_key set on setup and follow you heart. (Is that easy)&lt;/p&gt; &#xA;&lt;h2&gt;Differences from harpoon:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Single keymap needed&lt;/li&gt; &#xA; &lt;li&gt;Different UI to manage the bookmarks&lt;/li&gt; &#xA; &lt;li&gt;Statusline helpers&lt;/li&gt; &#xA; &lt;li&gt;Show only the filename (show path only when needed: same filename twice or too generic filename, like create, index, etc)&lt;/li&gt; &#xA; &lt;li&gt;Has colors and icons &amp;lt;3&lt;/li&gt; &#xA; &lt;li&gt;Has the delete mode to quickly delete items&lt;/li&gt; &#xA; &lt;li&gt;Files can be opened vertically or horizontally&lt;/li&gt; &#xA; &lt;li&gt;Still has the option to edit file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Advanced Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  show_icons = true,&#xA;  always_show_path = false,&#xA;  separate_by_branch = false, -- Bookmarks will be separated by git branch&#xA;  hide_handbook = false, -- set to true to hide the shortcuts on menu.&#xA;  save_path = function()&#xA;    return vim.fn.stdpath(&#34;cache&#34;) .. &#34;/arrow&#34;&#xA;  end,&#xA;  mappings = {&#xA;&#x9;&#x9;edit = &#34;e&#34;,&#xA;&#x9;&#x9;delete_mode = &#34;d&#34;,&#xA;&#x9;&#x9;clear_all_items = &#34;C&#34;,&#xA;&#x9;&#x9;toggle = &#34;s&#34;,&#xA;&#x9;&#x9;open_vertical = &#34;v&#34;,&#xA;&#x9;&#x9;open_horizontal = &#34;-&#34;,&#xA;&#x9;&#x9;quit = &#34;q&#34;,&#xA;  },&#xA;  leader_key = &#34;;&#34;,&#xA;  global_bookmarks = false, -- if true, arrow will save files globally (ignores separate_by_branch)&#xA;  index_keys = &#34;123456789zxcbnmZXVBNM,afghjklAFGHJKLwrtyuiopWRTYUIOP&#34;, -- keys mapped to bookmark index, i.e. 1st bookmark will be accessible by 1, and 12th - by c&#xA;  full_path_list = { &#34;update_stuff&#34; } -- filenames on this list will ALWAYS show the file path too.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also map previous and next key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;H&#34;, require(&#34;arrow.persist&#34;).previous)&#xA;vim.keymap.set(&#34;n&#34;, &#34;L&#34;, require(&#34;arrow.persist&#34;).next)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;C-s&amp;gt;&#34;, require(&#34;arrow.persist&#34;).toggle)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Statusline&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;require(&#39;arrow.statusline&#39;)&lt;/code&gt; to access the statusline helpers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local statusline = require(&#39;arrow.statusline&#39;)&#xA;statusline.is_on_arrow_file() -- return nil if current file is not on arrow.  Return the index if it is.&#xA;statusline.text_for_statusline() -- return the text to be shown in the statusline (the index if is on arrow or &#34;&#34; if not)&#xA;statusline.text_for_statusline_with_icons() -- Same, but with an bow and arrow icon ;D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/v7Rvagj.png&#34; alt=&#34;statusline&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ArrowFileIndex&lt;/li&gt; &#xA; &lt;li&gt;ArrowCurrentFile&lt;/li&gt; &#xA; &lt;li&gt;ArrowAction&lt;/li&gt; &#xA; &lt;li&gt;ArrowDeleteMode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Working with sessions plugins&lt;/h2&gt; &#xA;&lt;p&gt;If you have any error using arrow with a session plugin, like on mini.sessions, add this to the post load session hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;arrow.git&#34;).refresh_git_branch() -- only if separated_by_branch is true&#xA;require(&#34;arrow.persist&#34;).load_cache_file()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Obs: persistence.nvim works fine with arrow.&lt;/p&gt; &#xA;&lt;h3&gt;Do you like my work? Please, buy me a coffee&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/otavioschwanck&#34;&gt;https://www.buymeacoffee.com/otavioschwanck&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>wojciech-kulik/xcodebuild.nvim</title>
    <updated>2024-02-02T01:32:48Z</updated>
    <id>tag:github.com,2024-02-02:/wojciech-kulik/xcodebuild.nvim</id>
    <link href="https://github.com/wojciech-kulik/xcodebuild.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to Build, Run, and Test applications created with Xcode &amp; Swift.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üõ†Ô∏è xcodebuild.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A plugin that lets you move your iOS, iPadOS and macOS apps development to Neovim. It supports most of Xcode actions that are required to work with a project, including device selection, building, launching, and testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wojciech-kulik/xcodebuild.nvim/main/media/testing.png&#34; alt=&#34;Xcodebuild Testing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wojciech-kulik/xcodebuild.nvim/main/media/debugging.png&#34; alt=&#34;Xcodebuild Debugging&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üöß Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is in the early stage of development. It was tested on a limited number of projects and configurations. Therefore, it still could be buggy. If you find any issue don&#39;t hesitate to fix it and create a pull request or just report it.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve been looking for a solution to move my development to any other IDE than Xcode for a long time. It seems that this plugin + &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; + &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt; + &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt; + &lt;a href=&#34;https://github.com/SolaWing/xcode-build-server&#34;&gt;xcode-build-server&lt;/a&gt;, all together, provide everything that is needed to move to Neovim with iOS, iPadOS, and macOS apps development.&lt;/p&gt; &#xA;&lt;p&gt;Of course, you will still need Xcode for some project setup &amp;amp; management. Also, you may need to migrate to &lt;a href=&#34;https://github.com/tuist/tuist&#34;&gt;tuist&lt;/a&gt; or &lt;a href=&#34;https://github.com/yonaskolb/XcodeGen&#34;&gt;xcodegen&lt;/a&gt; to be able to add new files easily.&lt;/p&gt; &#xA;&lt;p&gt;It is also my first Neovim plugin. Hopefully, a good one üòÅ.&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support for iOS, iPadOS, and macOS apps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Project-based configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Configuration wizard to setup: project file, scheme, config, device, and test plan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Built based on core command line tools like &lt;code&gt;xcodebuild&lt;/code&gt; and &lt;code&gt;xcrun simctl&lt;/code&gt;. It doesn&#39;t require any external tools, only &lt;code&gt;xcbeautify&lt;/code&gt; to format logs, but it could be changed in configuration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Build, run and test actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Test Explorer to visually present all tests and results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; App deployment to selected iOS simulator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Uninstall mobile app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Running only selected tests (one test, one class, selected tests in visual mode, whole test plan).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Showing icons with test result next to each test.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Showing test duration next to each test.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Showing test errors in diagnostics and on the quickfix list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Showing build errors and warnings on the quickfix list.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Showing build progress bar based on the previous build time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Showing code coverage.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Showing preview of failed snapshot tests (if you use &lt;a href=&#34;https://github.com/pointfreeco/swift-snapshot-testing&#34;&gt;swift-snapshot-testing&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Advanced log parser to detect all errors, warnings, and failing tests and to present them nicely formatted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto saving files before build or test actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; helper functions to let you easily build, run, and attach the debugger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt; integration to show current device and project settings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; integration to show pickers with selectable project options.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Picker with all available actions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io&#34;&gt;Neovim&lt;/a&gt; (not sure which version, use the latest one üòÖ).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; used to present pickers by the plugin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; used to present code coverage report.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuist/xcbeautify&#34;&gt;xcbeautify&lt;/a&gt; - Xcode logs formatter (optional - you can set a different tool or disable formatting in the config).&lt;/li&gt; &#xA; &lt;li&gt;Xcode (make sure that &lt;code&gt;xcodebuild&lt;/code&gt; and &lt;code&gt;xcrun simctl&lt;/code&gt; work correctly).&lt;/li&gt; &#xA; &lt;li&gt;To get the best experience with apps development, you should install and configure &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; and &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt; to be able to debug.&lt;/li&gt; &#xA; &lt;li&gt;This plugin requires the project to be written in Swift. It was tested only with Xcode 15.&lt;/li&gt; &#xA; &lt;li&gt;Make sure to configure LSP properly for iOS/macOS apps. You can read how to do that in my post: &lt;a href=&#34;https://wojciechkulik.pl/ios/the-complete-guide-to-ios-macos-development-in-neovim&#34;&gt;The Complete Guide To iOS &amp;amp; macOS Development In Neovim&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install xcbeautify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin using your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;üí§ &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;wojciech-kulik/xcodebuild.nvim&#34;,&#xA;  dependencies = {&#xA;    &#34;nvim-telescope/telescope.nvim&#34;,&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;  },&#xA;  config = function()&#xA;    require(&#34;xcodebuild&#34;).setup({&#xA;        -- put some options here or leave it empty to use default settings&#xA;    })&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See default Xcodebuild.nvim config&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  restore_on_start = true, -- logs, diagnostics, and marks will be loaded on VimEnter (may affect performance)&#xA;  auto_save = true, -- save all buffers before running build or tests (command: silent wa!)&#xA;  show_build_progress_bar = true, -- shows [ ...    ] progress bar during build, based on the last duration&#xA;  prepare_snapshot_test_previews = true, -- prepares a list with failing snapshot tests&#xA;  test_search = {&#xA;    file_matching = &#34;filename_lsp&#34;, -- one of: filename, lsp, lsp_filename, filename_lsp. Check out README for details&#xA;    target_matching = true, -- checks if the test file target matches the one from logs. Try disabling it in case of not showing test results&#xA;    lsp_client = &#34;sourcekit&#34;, -- name of your LSP for Swift files&#xA;    lsp_timeout = 200, -- LSP timeout in milliseconds&#xA;  },&#xA;  commands = {&#xA;    cache_devices = true, -- cache recently loaded devices. Restart Neovim to clean cache.&#xA;    extra_build_args = &#34;-parallelizeTargets&#34;, -- extra arguments for `xcodebuild build`&#xA;    extra_test_args = &#34;-parallelizeTargets&#34;, -- extra arguments for `xcodebuild test`&#xA;    project_search_max_depth = 3, -- maxdepth of xcodeproj/xcworkspace search while using configuration wizard&#xA;  },&#xA;  logs = {&#xA;    auto_open_on_success_tests = false, -- open logs when tests succeeded&#xA;    auto_open_on_failed_tests = false, -- open logs when tests failed&#xA;    auto_open_on_success_build = false, -- open logs when build succeeded&#xA;    auto_open_on_failed_build = true, -- open logs when build failed&#xA;    auto_close_on_app_launch = false, -- close logs when app is launched&#xA;    auto_close_on_success_build = false, -- close logs when build succeeded (only if auto_open_on_success_build=false)&#xA;    auto_focus = true, -- focus logs buffer when opened&#xA;    filetype = &#34;objc&#34;, -- file type set for buffer with logs&#xA;    open_command = &#34;silent botright 20split {path}&#34;, -- command used to open logs panel. You must use {path} variable to load the log file&#xA;    logs_formatter = &#34;xcbeautify --disable-colored-output&#34;, -- command used to format logs, you can use &#34;&#34; to skip formatting&#xA;    only_summary = false, -- if true logs won&#39;t be displayed, just xcodebuild.nvim summary&#xA;    show_warnings = true, -- show warnings in logs summary&#xA;    notify = function(message, severity) -- function to show notifications from this module (like &#34;Build Failed&#34;)&#xA;      vim.notify(message, severity)&#xA;    end,&#xA;    notify_progress = function(message) -- function to show live progress (like during tests)&#xA;      vim.cmd(&#34;echo &#39;&#34; .. message .. &#34;&#39;&#34;)&#xA;    end,&#xA;  },&#xA;  marks = {&#xA;    show_signs = true, -- show each test result on the side bar&#xA;    success_sign = &#34;‚úî&#34;, -- passed test icon&#xA;    failure_sign = &#34;‚úñ&#34;, -- failed test icon&#xA;    show_test_duration = true, -- show each test duration next to its declaration&#xA;    show_diagnostics = true, -- add test failures to diagnostics&#xA;    file_pattern = &#34;*Tests.swift&#34;, -- test diagnostics will be loaded in files matching this pattern (if available)&#xA;  },&#xA;  quickfix = {&#xA;    show_errors_on_quickfixlist = true, -- add build/test errors to quickfix list&#xA;    show_warnings_on_quickfixlist = true, -- add build warnings to quickfix list&#xA;  },&#xA;  test_explorer = {&#xA;    enabled = true, -- enable Test Explorer&#xA;    auto_open = true, -- opens Test Explorer when tests are started&#xA;    open_command = &#34;botright 42vsplit Test Explorer&#34;, -- command used to open Test Explorer&#xA;    success_sign = &#34;‚úî&#34;, -- passed test icon&#xA;    failure_sign = &#34;‚úñ&#34;, -- failed test icon&#xA;    progress_sign = &#34;‚Ä¶&#34;, -- progress icon (only used when animate_status=false)&#xA;    disabled_sign = &#34;‚è∏&#34;, -- disabled test icon&#xA;    partial_execution_sign = &#34;‚Äê&#34;, -- icon for a class or target when only some tests were executed&#xA;    not_executed_sign = &#34; &#34;, -- not executed or partially executed test icon&#xA;    show_disabled_tests = false, -- show disabled tests&#xA;    animate_status = true, -- animate status while running tests&#xA;    cursor_follows_tests = true, -- moves cursor to the last test executed&#xA;  },&#xA;  code_coverage = {&#xA;    enabled = false, -- generate code coverage report and show marks&#xA;    file_pattern = &#34;*.swift&#34;, -- coverage will be shown in files matching this pattern&#xA;    -- configuration of line coverage presentation:&#xA;    covered_sign = &#34;&#34;,&#xA;    partially_covered_sign = &#34;‚îÉ&#34;,&#xA;    not_covered_sign = &#34;‚îÉ&#34;,&#xA;    not_executable_sign = &#34;&#34;,&#xA;  },&#xA;  code_coverage_report = {&#xA;    warning_coverage_level = 60,&#xA;    error_coverage_level = 30,&#xA;    open_expanded = false,&#xA;  },&#xA;  highlights = {&#xA;    -- you can override here any highlight group used by this plugin&#xA;    -- simple color: XcodebuildCoverageReportOk = &#34;#00ff00&#34;,&#xA;    -- link highlights: XcodebuildCoverageReportOk = &#34;DiagnosticOk&#34;,&#xA;    -- full customization: XcodebuildCoverageReportOk = { fg = &#34;#00ff00&#34;, bold = true },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üé® Customize Highlights&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See all highlights&lt;/summary&gt; &#xA; &lt;h4&gt;Test File&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestSuccessSign&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test passed sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestFailureSign&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test failed sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestSuccessDurationSign&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test duration of a passed test&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestFailureDurationSign&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test duration of a failed test&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Test Explorer&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerTest&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test name (function)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerClass&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test class&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerTarget&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test target&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerTestInProgress&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test in progress sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerTestPassed&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test passed sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerTestFailed&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test failed sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerTestDisabled&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test disabled sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerTestNotExecuted&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Test not executed sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerTestPartialExecution&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Not all tests executed sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Code Coverage (inline)&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageFullSign&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Covered line - sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageFullNumber&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Covered line - line number&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageFullLine&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Covered line - code&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoveragePartialSign&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Partially covered line - sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoveragePartialNumber&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Partially covered line - line number&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoveragePartialLine&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Partially covered line - code&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageNoneSign&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Not covered line - sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageNoneNumber&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Not covered line - line number&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageNoneLine&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Not covered line - code&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageNotExecutableSign&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Not executable line - sign&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageNotExecutableNumber&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Not executable line - line number&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageNotExecutableLine&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Not executable line - code&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h4&gt;Code Coverage (report)&lt;/h4&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageReportOk&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Percentage color when above &lt;code&gt;warning_coverage_level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageReportWarning&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Percentage color when below &lt;code&gt;warning_coverage_level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCoverageReportError&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Percentage color when below &lt;code&gt;error_coverage_level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üîé Test File Search - File Matching&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See all strategies&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;xcodebuild&lt;/code&gt; logs provide the following information about the test: target, test class, and test name. The plugin needs to find the file location based on that, which is not a trivial task.&lt;/p&gt; &#xA; &lt;p&gt;In order to support multiple cases, the plugin allows you to choose the search mode. It offers four modes to find a test class. You can change it by setting &lt;code&gt;test_search.file_matching&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;filename&lt;/code&gt; - it assumes that the test class name matches the file name. It finds matching files and then based on the build output, it checks whether the file belongs to the desired target.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;lsp&lt;/code&gt; - it uses LSP to find the class symbol. Each match is checked if it belongs to the desired target.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;filename_lsp&lt;/code&gt; first try &lt;code&gt;filename&lt;/code&gt; mode, if it fails try &lt;code&gt;lsp&lt;/code&gt; mode.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;lsp_filename&lt;/code&gt; first try &lt;code&gt;lsp&lt;/code&gt; mode, if it fails try &lt;code&gt;filename&lt;/code&gt; mode.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;code&gt;filename_lsp&lt;/code&gt; is the recommended mode, because &lt;code&gt;filename&lt;/code&gt; search is faster than &lt;code&gt;lsp&lt;/code&gt;, but you also have &lt;code&gt;lsp&lt;/code&gt; fallback if there is no match from &lt;code&gt;filename&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;üëâ If you notice that your test results don&#39;t appear or appear in incorrect files, try playing with these modes.&lt;/p&gt; &#xA; &lt;p&gt;üëâ If your test results don&#39;t appear, you can also try disabling &lt;code&gt;test_search.target_matching&lt;/code&gt;. This way the plugin will always use the first match without checking its target.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üì± Setup Your Neovim For iOS Development&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] I wrote an article that sums up all steps to set up your Neovim from scratch to develop iOS and macOS apps:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://wojciechkulik.pl/ios/the-complete-guide-to-ios-macos-development-in-neovim&#34;&gt;The Complete Guide To iOS &amp;amp; macOS Development In Neovim&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;You can also check out a sample Neovim configuration that I prepared for iOS development: &lt;a href=&#34;https://github.com/wojciech-kulik/ios-dev-starter-nvim&#34;&gt;ios-dev-starter-nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üì¶ Swift Packages Development&lt;/h3&gt; &#xA;&lt;p&gt;This plugin supports only iOS and macOS applications. However, if you develop Swift Package for one of those platforms, you can easily use this plugin by creating a sample iOS/macOS project in your root directory and adding your package as a dependency.&lt;/p&gt; &#xA;&lt;h3&gt;üî¨ DAP Integration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; plugin lets you debug applications like in any other IDE. On top of that &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt; extension will present for you all panels with stack, breakpoints, variables, logs, etc.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See nvim-dap configuration&lt;/summary&gt; &#xA; &lt;p&gt;To configure DAP for development:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Download codelldb VS Code plugin from: &lt;a href=&#34;https://github.com/vadimcn/codelldb/releases&#34;&gt;HERE&lt;/a&gt;. For macOS use &lt;code&gt;darwin&lt;/code&gt; version. Just unzip &lt;code&gt;vsix&lt;/code&gt; file and set paths below.&lt;/li&gt; &#xA;  &lt;li&gt;Install also &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt; for a nice GUI to debug.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;mfussenegger/nvim-dap&#34;,&#xA;  dependencies = {&#xA;    &#34;wojciech-kulik/xcodebuild.nvim&#34;&#xA;  },&#xA;  config = function()&#xA;    local dap = require(&#34;dap&#34;)&#xA;    local xcodebuild = require(&#34;xcodebuild.dap&#34;)&#xA;&#xA;    dap.configurations.swift = {&#xA;      {&#xA;        name = &#34;iOS App Debugger&#34;,&#xA;        type = &#34;codelldb&#34;,&#xA;        request = &#34;attach&#34;,&#xA;        program = xcodebuild.get_program_path,&#xA;        -- alternatively, you can wait for the process manually&#xA;        -- pid = xcodebuild.wait_for_pid,&#xA;        cwd = &#34;${workspaceFolder}&#34;,&#xA;        stopOnEntry = false,&#xA;        waitFor = true,&#xA;      },&#xA;    }&#xA;&#xA;    dap.adapters.codelldb = {&#xA;      type = &#34;server&#34;,&#xA;      port = &#34;13000&#34;,&#xA;      executable = {&#xA;        -- set path to the downloaded codelldb&#xA;        -- sample path: &#34;/Users/YOU/Downloads/codelldb-aarch64-darwin/extension/adapter/codelldb&#34;&#xA;        command = &#34;/path/to/codelldb/extension/adapter/codelldb&#34;,&#xA;        args = {&#xA;          &#34;--port&#34;,&#xA;          &#34;13000&#34;,&#xA;          &#34;--liblldb&#34;,&#xA;          -- make sure that this path is correct on your side&#xA;          &#34;/Applications/Xcode.app/Contents/SharedFrameworks/LLDB.framework/Versions/A/LLDB&#34;,&#xA;        },&#xA;      },&#xA;    }&#xA;&#xA;    -- disables annoying warning that requires hitting enter&#xA;    local orig_notify = require(&#34;dap.utils&#34;).notify&#xA;    require(&#34;dap.utils&#34;).notify = function(msg, log_level)&#xA;      if not string.find(msg, &#34;Either the adapter is slow&#34;) then&#xA;        orig_notify(msg, log_level)&#xA;      end&#xA;    end&#xA;&#xA;    -- sample keymaps to debug application&#xA;    vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;dd&#34;, xcodebuild.build_and_debug, { desc = &#34;Build &amp;amp; Debug&#34; })&#xA;    vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;dr&#34;, xcodebuild.debug_without_build, { desc = &#34;Debug Without Building&#34; })&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Make sure to open your project&#39;s root directory in Neovim and run &lt;code&gt;XcodebuildSetup&lt;/code&gt; to configure the project. The plugin needs several information like project file, scheme, config, device, and test plan to be able to run commands.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üîß Commands&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;üëâ See all user commands&lt;/summary&gt; &#xA; &lt;p&gt;Xcodebuild.nvim comes with the following commands:&lt;/p&gt; &#xA; &lt;h3&gt;General&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildSetup&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run configuration wizard to select project configuration&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildPicker&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show picker with all available actions&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildBuild&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build project&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCleanBuild&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build project (clean build)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildBuildRun&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build &amp;amp; run app&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildBuildForTesting&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Build for testing&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildRun&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run app without building&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCancel&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Cancel currently running action&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCleanDerivedData&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Deletes project&#39;s DerivedData&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildToggleLogs&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Toggle logs panel&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildOpenLogs&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Open logs panel&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildCloseLogs&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Close logs panel&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Testing&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTest&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run tests (whole test plan)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestTarget&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run test target (where the cursor is)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestClass&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run test class (where the cursor is)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestFunc&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run test (where the cursor is)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestSelected&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run selected tests (using visual mode)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestFailing&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Rerun previously failed tests&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildFailingSnapshots&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show a picker with failing snapshot tests&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Code Coverage&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildToggleCodeCoverage&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Toggle code coverage marks on the side bar&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildShowCodeCoverageReport&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Open HTML code coverage report&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildJumpToNextCoverage&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Jump to next code coverage mark&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildJumpToPrevCoverage&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Jump to previous code coverage mark&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Test Explorer&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerShow&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show Test Explorer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerHide&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Hide Test Explorer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerToggle&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Toggle Test Explorer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerRunSelectedTests&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Run Selected Tests&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildTestExplorerRerunTests&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Re-run recently selected tests&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;h3&gt;Configuration&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Command&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildSelectProject&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show project file picker&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildSelectScheme&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show scheme picker&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildSelectConfig&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show build configuration picker&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildSelectDevice&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show device picker&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildSelectTestPlan&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Show test plan picker&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildShowConfig&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Print current project configuration&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildBootSimulator&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Boot selected simulator&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;XcodebuildUninstall&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Uninstall mobile app&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;‚åò Sample Key Bindings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;X&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildPicker&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Show All Xcodebuild Actions&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xl&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildToggleLogs&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Toggle Xcodebuild Logs&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xb&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildBuild&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Build Project&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xr&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildBuildRun&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Build &amp;amp; Run Project&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xt&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildTest&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Run Tests&#34; })&#xA;vim.keymap.set(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;xt&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildTestSelected&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Run Selected Tests&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xT&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildTestClass&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Run This Test Class&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xf&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildTestTarget&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Run This Test Target&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xd&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildSelectDevice&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Select Device&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xp&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildSelectTestPlan&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Select Test Plan&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xs&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildFailingSnapshots&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Show Failing Snapshots&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xc&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildToggleCodeCoverage&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Toggle Code Coverage&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xC&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildShowCodeCoverageReport&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Show Code Coverage Report&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xe&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildTestExplorerToggle&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Toggle Test Explorer&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;[r&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildJumpToPrevCoverage&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Jump To Previous Coverage&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;]r&#34;, &#34;&amp;lt;cmd&amp;gt;XcodebuildJumpToNextCoverage&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Jump To Next Coverage&#34; })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;xq&#34;, &#34;&amp;lt;cmd&amp;gt;Telescope quickfix&amp;lt;cr&amp;gt;&#34;, { desc = &#34;Show QuickFix List&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Press &lt;code&gt;&amp;lt;leader&amp;gt;X&lt;/code&gt; to access the picker with all commands.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üìã Logs Panel&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press &lt;code&gt;o&lt;/code&gt; on a failed test in the summary section to jump to the failing location&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;q&lt;/code&gt; to close the panel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üß™ Test Explorer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Press &lt;code&gt;o&lt;/code&gt; to jump to the test implementation&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;t&lt;/code&gt; to run selected tests&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;T&lt;/code&gt; to re-run recently selected tests&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;R&lt;/code&gt; to reload test list&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;[&lt;/code&gt; to jump to the previous failed test&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;]&lt;/code&gt; to jump to the next failed test&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; to expand or collapse the current node&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; to expand or collapse all classes&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;q&lt;/code&gt; to close the Test Explorer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;üö• Lualine Integration&lt;/h3&gt; &#xA;&lt;p&gt;You can also integrate this plugin with &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wojciech-kulik/xcodebuild.nvim/main/media/lualine.png&#34; alt=&#34;Xcodebuild Lualine&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See Lualine configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lualine_x = {&#xA;  { &#34;diff&#34; },&#xA;  { &#34;&#39;Û∞ô® &#39; .. vim.g.xcodebuild_test_plan&#34; },&#xA;  { &#34;vim.g.xcodebuild_platform == &#39;macOS&#39; and &#39;ÔÑâ  macOS&#39; or &#39;ÔÑã &#39; .. vim.g.xcodebuild_device_name&#34; },&#xA;  { &#34;&#39;Óúë &#39; .. vim.g.xcodebuild_os&#34; },&#xA;  { &#34;encoding&#34; },&#xA;  { &#34;filetype&#34;, icon_only = true },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Global variables that you can use:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Variable&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;vim.g.xcodebuild_device_name&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Device name (ex. iPhone 15 Pro)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;vim.g.xcodebuild_os&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;OS version (ex. 16.4)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;vim.g.xcodebuild_platform&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Device platform (macOS or iPhone Simulator)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;vim.g.xcodebuild_config&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Selected build config (ex. Debug)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;vim.g.xcodebuild_scheme&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Selected project scheme (ex. MyApp)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;vim.g.xcodebuild_test_plan&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Selected Test Plan (ex. MyAppTests)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üß™ Code Coverage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wojciech-kulik/xcodebuild.nvim/main/media/coverage-report.png&#34; alt=&#34;Xcodebuild Code Coverage Report&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;See how to configure&lt;/summary&gt; Using xcodebuild.nvim you can also check the code coverage after running tests. &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Make sure that you enabled code coverage for desired targets in your test plan.&lt;/li&gt; &#xA;  &lt;li&gt;Enable code coverage in xcodebuild &lt;a href=&#34;https://raw.githubusercontent.com/wojciech-kulik/xcodebuild.nvim/main/#%EF%B8%8F-configuration&#34;&gt;config&lt;/a&gt;:&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;code_coverage = {&#xA;  enabled = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ol start=&#34;3&#34;&gt; &#xA;  &lt;li&gt;Toggle code coverage &lt;code&gt;:XcodebuildToggleCodeCoverage&lt;/code&gt; or &lt;code&gt;:lua require(&#34;xcodebuild.actions&#34;).toggle_code_coverage(true)&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;Run tests - once it&#39;s finished, code coverage should appear on the sidebar with line numbers.&lt;/li&gt; &#xA;  &lt;li&gt;You can jump between code coverage marks using &lt;code&gt;:XcodebuildJumpToPrevCoverage&lt;/code&gt; and &lt;code&gt;:XcodebuildJumpToNextCoverage&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;You can also check out the report using &lt;code&gt;:XcodebuildShowCodeCoverageReport&lt;/code&gt; command.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;The plugin sends &lt;code&gt;XcodebuildCoverageToggled&lt;/code&gt; event that you can use to disable other plugins presenting lines on the side bar (like &lt;code&gt;gitsigns&lt;/code&gt;). Example:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;User&#34;, {&#xA;  pattern = &#34;XcodebuildCoverageToggled&#34;,&#xA;  callback = function(event)&#xA;    local isOn = event.data&#xA;    require(&#34;gitsigns&#34;).toggle_signs(not isOn)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Coverage Report Keys:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Key&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;enter&lt;/code&gt; or &lt;code&gt;tab&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Expand or collapse the current node&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;o&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Open source file&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;[!CAUTION] From time to time, the code coverage may fail or some targets may be missing (Xcode&#39;s bug). Try running tests again then.&lt;/p&gt; &#xA;  &lt;p&gt;If you run tests, modify file and toggle code coverage AFTER that, the placement of marks will be incorrect (because it doesn&#39;t know about changes that you made). However, if you show code coverage and after that you modify the code, marks will be moving while you are editing the file.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;üì∏ Snapshot Tests Preview&lt;/h3&gt; &#xA;&lt;p&gt;This plugin offers a nice list of failing snapshot tests. For each test it generates a preview image combining reference, failure, and difference images into one. It works with &lt;a href=&#34;https://github.com/pointfreeco/swift-snapshot-testing&#34;&gt;swift-snapshot-testing&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:XcodebuildFailingSnapshots&lt;/code&gt; to see the list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wojciech-kulik/xcodebuild.nvim/main/media/snapshots.png&#34; alt=&#34;Xcodebuild Snapshots&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;üë®‚Äçüíª API&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use functions directly instead of user commands, then please see &lt;a href=&#34;https://raw.githubusercontent.com/wojciech-kulik/xcodebuild.nvim/main/lua/xcodebuild/actions.lua&#34;&gt;xcodebuild.actions&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;h3&gt;üß∞ Troubleshooting&lt;/h3&gt; &#xA;&lt;p&gt;Loading project configuration is a very complex task that relies on parsing multiple crazy outputs from &lt;code&gt;xcodebuild&lt;/code&gt; commands. Those logs are a pure nightmare to parse. It may not always work. In case of any issues with that, you can try manually providing the configuration by adding &lt;code&gt;.nvim/xcodebuild/settings.json&lt;/code&gt; file in your root directory.&lt;/p&gt; &#xA;&lt;p&gt;Sample &lt;code&gt;settings.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;platform&#34;: &#34;iOS&#34;,&#xA;  &#34;testPlan&#34;: &#34;UnitTests&#34;,&#xA;  &#34;config&#34;: &#34;Debug&#34;,&#xA;  &#34;xcodeproj&#34;: &#34;/path/to/project/App.xcodeproj&#34;,&#xA;  &#34;projectFile&#34;: &#34;/path/to/project/App.xcworkspace&#34;,&#xA;  &#34;projectCommand&#34;: &#34;-workspace &#39;/path/to/project/App.xcworkspace&#39;&#34;,&#xA;  &#34;bundleId&#34;: &#34;com.company.bundle-id&#34;,&#xA;  &#34;destination&#34;: &#34;00006000-000C58DC1ED8801E&#34;,&#xA;  &#34;productName&#34;: &#34;App&#34;,&#xA;  &#34;scheme&#34;: &#34;App&#34;,&#xA;  &#34;appPath&#34;: &#34;/Users/YOU/Library/Developer/Xcode/DerivedData/App-abafsafasdfasdf/Build/Products/Debug/App.app&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;platform&lt;/code&gt; - &lt;code&gt;macOS&lt;/code&gt; or &lt;code&gt;iOS&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;destination&lt;/code&gt; - simulator ID&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;projectFile&lt;/code&gt; / &lt;code&gt;projectCommand&lt;/code&gt; - can be &lt;code&gt;xcodeproj&lt;/code&gt; or &lt;code&gt;xcworkspace&lt;/code&gt;, the main project file that you use&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>