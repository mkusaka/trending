<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-07T01:41:38Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>luukvbaal/nnn.nvim</title>
    <updated>2023-06-07T01:41:38Z</updated>
    <id>tag:github.com,2023-06-07:/luukvbaal/nnn.nvim</id>
    <link href="https://github.com/luukvbaal/nnn.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;File manager for Neovim powered by nnn.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nnn.nvim&lt;/h1&gt; &#xA;&lt;p&gt;File manager for Neovim powered by &lt;a href=&#34;https://github.com/jarun/nnn&#34;&gt;nnn&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31730729/140781823-6810811c-9bd8-4ade-a1fe-5f225cb53c76.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Requires nnn to be installed, follow the &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Usage#installation&#34;&gt;instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Explorer mode requires nnn version v4.3. If your distribution doesn&#39;t provide version v4.3 from its repositories, install one of the provided &lt;a href=&#34;https://github.com/jarun/nnn/releases/tag/v4.3&#34;&gt;static binaries&lt;/a&gt;, &lt;a href=&#34;https://software.opensuse.org//download.html?project=home%3Astig124%3Annn&amp;amp;package=nnn&#34;&gt;OBS packages&lt;/a&gt; or &lt;a href=&#34;https://github.com/jarun/nnn/wiki/Usage#from-source&#34;&gt;build from source&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;Then install the plugin using your plugin manager:&lt;/p&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;luukvbaal/nnn.nvim&#39;&#xA;call plug#end()&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#34;nnn&#34;).setup()&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;luukvbaal/nnn.nvim&#34;,&#xA;  config = function() require(&#34;nnn&#34;).setup() end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The plugin offers two possible modes of operation.&lt;/p&gt; &#xA;&lt;h3&gt;Explorer Mode&lt;/h3&gt; &#xA;&lt;p&gt;Run command &lt;code&gt;:NnnExplorer&lt;/code&gt; to open nnn in a vertical split similar to &lt;code&gt;NERDTree&lt;/code&gt;/&lt;code&gt;nvim-tree&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this mode, the plugin makes use of nnn&#39;s &lt;code&gt;-F&lt;/code&gt; flag to listen for opened files. Pressing &lt;kbd&gt;Enter&lt;/kbd&gt; on a file will open that file in a new buffer, while keeping the nnn window open.&lt;/p&gt; &#xA;&lt;h3&gt;Picker Mode&lt;/h3&gt; &#xA;&lt;p&gt;Run command &lt;code&gt;:NnnPicker&lt;/code&gt; to open nnn in a floating window.&lt;/p&gt; &#xA;&lt;p&gt;In this mode nnn&#39;s &lt;code&gt;-p&lt;/code&gt; flag is used to listen for opened files on program exit. Picker mode implies only a single selection will be made before quitting nnn and thus the floating window.&lt;/p&gt; &#xA;&lt;h3&gt;Selection&lt;/h3&gt; &#xA;&lt;p&gt;In both modes it&#39;s possible to &lt;a href=&#34;https://github.com/jarun/nnn/wiki/concepts#selection&#34;&gt;select&lt;/a&gt; multiple files before pressing &lt;kbd&gt;Enter&lt;/kbd&gt;. Doing so will open the entire selection all at once, excluding the hovered file.&lt;/p&gt; &#xA;&lt;h3&gt;Bindings&lt;/h3&gt; &#xA;&lt;p&gt;Bind &lt;code&gt;NnnExplorer/NnnPicker&lt;/code&gt; to toggle the plugin on/off in normal and terminal mode. The commands accept a path as optional argument. To always open nnn in the directory of the currently active buffer, use &lt;code&gt;%:p:h&lt;/code&gt; as argument:&lt;/p&gt; &#xA;&lt;h3&gt;Custom Command Argument&lt;/h3&gt; &#xA;&lt;p&gt;Additionally, passing &lt;code&gt;cmd=&amp;lt;custom command&amp;gt;&lt;/code&gt; as argument will override the configured nnn command. This allows you to for example run one-off nnn commands with different option flags. &lt;code&gt;:NnnExplorer cmd=nnn\ -Pf /mnt&lt;/code&gt; will open explorer mode in &lt;code&gt;/mnt&lt;/code&gt; and run the nnn plugin mapped to &lt;kbd&gt;f&lt;/kbd&gt;. Spaces in the &lt;code&gt;cmd&lt;/code&gt; string must be escaped.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;tnoremap &amp;lt;C-A-n&amp;gt; &amp;lt;cmd&amp;gt;NnnExplorer&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;C-A-n&amp;gt; &amp;lt;cmd&amp;gt;NnnExplorer %:p:h&amp;lt;CR&amp;gt;&#xA;tnoremap &amp;lt;C-A-p&amp;gt; &amp;lt;cmd&amp;gt;NnnPicker&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;C-A-p&amp;gt; &amp;lt;cmd&amp;gt;NnnPicker&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Default options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cfg = {&#xA;  explorer = {&#xA;    cmd = &#34;nnn&#34;,       -- command override (-F1 flag is implied, -a flag is invalid!)&#xA;    width = 24,        -- width of the vertical split&#xA;    side = &#34;topleft&#34;,  -- or &#34;botright&#34;, location of the explorer window&#xA;    session = &#34;&#34;,      -- or &#34;global&#34; / &#34;local&#34; / &#34;shared&#34;&#xA;    tabs = true,       -- separate nnn instance per tab&#xA;    fullscreen = true, -- whether to fullscreen explorer window when current tab is empty&#xA;  },&#xA;  picker = {&#xA;    cmd = &#34;nnn&#34;,       -- command override (-p flag is implied)&#xA;    style = {&#xA;      width = 0.9,     -- percentage relative to terminal size when &amp;lt; 1, absolute otherwise&#xA;      height = 0.8,    -- ^&#xA;      xoffset = 0.5,   -- ^&#xA;      yoffset = 0.5,   -- ^&#xA;      border = &#34;single&#34;-- border decoration for example &#34;rounded&#34;(:h nvim_open_win)&#xA;    },&#xA;    session = &#34;&#34;,      -- or &#34;global&#34; / &#34;local&#34; / &#34;shared&#34;&#xA;    fullscreen = true, -- whether to fullscreen picker window when current tab is empty&#xA;  },&#xA;  auto_open = {&#xA;    setup = nil,       -- or &#34;explorer&#34; / &#34;picker&#34;, auto open on setup function&#xA;    tabpage = nil,     -- or &#34;explorer&#34; / &#34;picker&#34;, auto open when opening new tabpage&#xA;    empty = false,     -- only auto open on empty buffer&#xA;    ft_ignore = {      -- dont auto open for these filetypes&#xA;      &#34;gitcommit&#34;,&#xA;    }&#xA;  },&#xA;  auto_close = false,  -- close tabpage/nvim when nnn is last window&#xA;  replace_netrw = nil, -- or &#34;explorer&#34; / &#34;picker&#34;&#xA;  mappings = {},       -- table containing mappings, see below&#xA;  windownav = {        -- window movement mappings to navigate out of nnn&#xA;    left = &#34;&amp;lt;C-w&amp;gt;h&#34;,&#xA;    right = &#34;&amp;lt;C-w&amp;gt;l&#34;,&#xA;    next = &#34;&amp;lt;C-w&amp;gt;w&#34;,&#xA;    prev = &#34;&amp;lt;C-w&amp;gt;W&#34;,&#xA;  },&#xA;  buflisted = false,   -- whether or not nnn buffers show up in the bufferlist&#xA;  quitcd = nil,        -- or &#34;cd&#34; / tcd&#34; / &#34;lcd&#34;, command to run on quitcd file if found&#xA;  offset = false,      -- whether or not to write position offset to tmpfile(for use in preview-tui)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit (part of) this table to your preferences and pass it to the &lt;code&gt;setup()&lt;/code&gt; function i.e.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nnn&#34;).setup({&#xA;  picker = {&#xA;    cmd = &#34;tmux new-session nnn -Pp&#34;,&#xA;    style = { border = &#34;rounded&#34; },&#xA;    session = &#34;shared&#34;,&#xA;  },&#xA;  replace_netrw = &#34;picker&#34;,&#xA;  windownav = &#34;&amp;lt;C-l&amp;gt;&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mappings&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to map custom lua functions to keys which are passed the selected file or active nnn selection. A set of builtin functions is provided which can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  local builtin = require(&#34;nnn&#34;).builtin&#xA;  mappings = {&#xA;    { &#34;&amp;lt;C-t&amp;gt;&#34;, builtin.open_in_tab },       -- open file(s) in tab&#xA;    { &#34;&amp;lt;C-s&amp;gt;&#34;, builtin.open_in_split },     -- open file(s) in split&#xA;    { &#34;&amp;lt;C-v&amp;gt;&#34;, builtin.open_in_vsplit },    -- open file(s) in vertical split&#xA;    { &#34;&amp;lt;C-p&amp;gt;&#34;, builtin.open_in_preview },   -- open file in preview split keeping nnn focused&#xA;    { &#34;&amp;lt;C-y&amp;gt;&#34;, builtin.copy_to_clipboard }, -- copy file(s) to clipboard&#xA;    { &#34;&amp;lt;C-w&amp;gt;&#34;, builtin.cd_to_path },        -- cd to file directory&#xA;    { &#34;&amp;lt;C-e&amp;gt;&#34;, builtin.populate_cmdline },  -- populate cmdline (:) with file(s)&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create your own function mapping follow the function signature of the builtin functions which are passed a table of file names.&lt;/p&gt; &#xA;&lt;p&gt;Note that in both picker and explorer mode, the mapping will execute on the nnn selection if it exists.&lt;/p&gt; &#xA;&lt;h3&gt;Session&lt;/h3&gt; &#xA;&lt;p&gt;You can enable persistent sessions in nnn(&lt;code&gt;-S&lt;/code&gt; flag) by setting picker and explorer mode session to one of &lt;code&gt;&#34;&#34;&lt;/code&gt;(disabled), &lt;code&gt;&#34;global&#34;&lt;/code&gt; or &lt;code&gt;&#34;local&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can set the session &lt;code&gt;&#34;shared&#34;&lt;/code&gt; to share the same session between both explorer and picker mode (setting either one to &#34;shared&#34; will make the session shared).&lt;/p&gt; &#xA;&lt;h3&gt;Colors&lt;/h3&gt; &#xA;&lt;p&gt;Three highlight groups &lt;code&gt;NnnNormal&lt;/code&gt;, &lt;code&gt;NnnNormalNC&lt;/code&gt; and &lt;code&gt;NnnBorder&lt;/code&gt; are available to configure the colors for the active, inactive and picker window borders respectively.&lt;/p&gt; &#xA;&lt;h2&gt;Tips and tricks&lt;/h2&gt; &#xA;&lt;h3&gt;Git status&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jarun/nnn/tree/master/patches#list-of-patches&#34;&gt;Build&lt;/a&gt; and install nnn with the &lt;a href=&#34;https://github.com/jarun/nnn/raw/master/patches/gitstatus/mainline.diff&#34;&gt;gitstatus&lt;/a&gt; enable git status symbols in detail mode. Add the &lt;code&gt;-G&lt;/code&gt; flag to your command override to also enable symbols in normal mode.&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31730729/140726345-0d4005e4-0ed3-494f-9c51-bdac19f277f3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h3&gt;preview-tui&lt;/h3&gt; &#xA;&lt;p&gt;Setting the command override for picker mode to for example &lt;code&gt;tmux new-session nnn -P&amp;lt;plugin-key&amp;gt;&lt;/code&gt; will open &lt;code&gt;tmux&lt;/code&gt; inside the picker window and can be used to open &lt;a href=&#34;https://github.com/jarun/nnn/raw/master/plugins/preview-tui&#34;&gt;&lt;code&gt;preview-tui&lt;/code&gt;&lt;/a&gt; inside the floating window:&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31730729/140781363-fc81ccd0-c4f3-4cb8-a771-1c221dee603f.gif&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;p&gt;Include option &lt;code&gt;offset = true&lt;/code&gt; in your config to write the offset of the &lt;code&gt;NnnPicker&lt;/code&gt; window to a temporary file. This will allow &lt;code&gt;preview-tui&lt;/code&gt; to correctly draw ueberzug image previews, accounting for said offset.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iDvel/rime-ice</title>
    <updated>2023-06-07T01:41:38Z</updated>
    <id>tag:github.com,2023-06-07:/iDvel/rime-ice</id>
    <link href="https://github.com/iDvel/rime-ice" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rime 配置：雾凇拼音 | 长期维护的简体词库&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;雾凇拼音&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/demo.webp&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;功能齐全，词库体验良好，长期更新修订。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rime.im/&#34;&gt;RIME | 中州韵输入法引擎&lt;/a&gt; 是一个跨平台的输入法算法框架，这里是 Rime 的一个配置仓库。&lt;/p&gt; &#xA;&lt;p&gt;用户需要&lt;a href=&#34;https://rime.im/download/&#34;&gt;下载各平台对应的 Rime 发行版&lt;/a&gt;，并将此配置应用到配置目录。&lt;/p&gt; &#xA;&lt;p&gt;详细介绍：&lt;a href=&#34;https://dvel.me/posts/rime-ice/&#34;&gt;Rime 配置：雾凇拼音&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/iDvel/rime-ice/issues/133&#34;&gt;常见问题&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;基本套路&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;简体 | 全拼 | 双拼&lt;/li&gt; &#xA; &lt;li&gt;主要功能 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tumuyan/rime-melt&#34;&gt;melt_eng&lt;/a&gt; 英文输入&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dvel.me/posts/make-rime-en-better/&#34;&gt;优化英文输入体验&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://cheonhyeong.com/Simplified/download.html&#34;&gt;两分输入法&lt;/a&gt; 拼字&lt;/li&gt; &#xA;   &lt;li&gt;简繁切换&lt;/li&gt; &#xA;   &lt;li&gt;日期、时间、星期&lt;/li&gt; &#xA;   &lt;li&gt;自整理的 Emoji&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BlindingDark/rime-lua-select-character&#34;&gt;以词定字&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tumuyan/rime-melt/raw/master/lua/melt.lua&#34;&gt;长词优先&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/shewer/librime-lua-script/raw/main/lua/component/unicode.lua&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://wb98.gitee.io/&#34;&gt;数字、人民币大写&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;所有标点符号直接上屏，/ 模式改为 v 模式，/ 直接上屏&lt;/li&gt; &#xA;   &lt;li&gt;增加了许多拼音纠错&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;简体字表、词库 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/The-Table-of-General-Standard-Chinese-Characters&#34;&gt;《通用规范汉字表》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://bbs.pinyin.thunisoft.com/forum.php?mod=viewthread&amp;amp;tid=30049&#34;&gt;华宇野风系统词库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/thunlp/THUOCL&#34;&gt;清华大学开源词库&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gist.github.com/indiejoseph/eae09c673460aa0b56db&#34;&gt;《现代汉语常用词表》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/12102&#34;&gt;《现代汉语词典》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/1211&#34;&gt;《同义词词林》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://forum.freemdict.com/t/topic/11407&#34;&gt;《新华成语大词典》&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://ai.tencent.com/ailab/nlp/en/download.html&#34;&gt;腾讯词向量&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;词库修订 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;校对大量异形词、错别字、错误注音&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;长期维护词库&lt;/h2&gt; &#xA;&lt;p&gt;因为没有找到一份比较好的词库，干脆自己维护一个。综合了几个不错的词库，精心调教了很多。&lt;/p&gt; &#xA;&lt;p&gt;主要维护的词库：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;8105&lt;/code&gt; 字表。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;base&lt;/code&gt; 基础词库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ext&lt;/code&gt; 扩展词库，小词库。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tencent&lt;/code&gt; 扩展词库，大词库。&lt;/li&gt; &#xA; &lt;li&gt;Emoji&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;维护内容主要是异形词、错别字的校对，错误注音的修正，缺失的常用词汇的增添，词频的调整。&lt;/p&gt; &#xA;&lt;p&gt;欢迎在词库方面提 issue，我会及时更新修正。&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;使用说明&lt;/h2&gt; &#xA;&lt;p&gt;建议备份原先配置，清空配置目录。&lt;/p&gt; &#xA;&lt;h3&gt;手动安装&lt;/h3&gt; &#xA;&lt;p&gt;将仓库所有文件复制粘贴进去就好了。&lt;/p&gt; &#xA;&lt;p&gt;更新词库，手动覆盖 &lt;code&gt;cn_dicts&lt;/code&gt; &lt;code&gt;en_dcits&lt;/code&gt; &lt;code&gt;opencc&lt;/code&gt; 三个文件夹。&lt;/p&gt; &#xA;&lt;h3&gt;东风破 &lt;a href=&#34;https://github.com/rime/plum&#34;&gt;plum&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;所有配方（&lt;code&gt;others/recipes/*.recipe.yaml&lt;/code&gt;）只是简单地更新覆盖文件，适合更新词库时使用。后四个配方只是更新词库文件，并不更新 &lt;code&gt;rime_ice.dict.yaml&lt;/code&gt; 和 &lt;code&gt;melt_eng.dict.yaml&lt;/code&gt;，因为用户可能会挂载其他词库。如果更新后部署时报错，可能是增、删、改了文件，需要检查上面两个文件和词库的对应关系。&lt;/p&gt; &#xA;&lt;p&gt;安装或更新：全部文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/full&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：所有词库文件（包含下面三个）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/all_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：拼音词库文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/cn_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：英文词库文件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/en_dicts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;安装或更新：opencc(emoji)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bash rime-install iDvel/rime-ice:others/recipes/opencc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;仓输入法 &lt;a href=&#34;https://github.com/imfuxiao/Hamster&#34;&gt;Hamster&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;参考 &lt;a href=&#34;https://github.com/imfuxiao/Hamster/wiki/%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%22%E9%9B%BE%E6%B7%9E%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%96%B9%E6%A1%88%22&#34;&gt;如何导入&#34;雾淞拼音输入方案&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;自动部署脚本&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Mark24Code/rime-auto-deploy&#34;&gt;Mark24Code/rime-auto-deploy&lt;/a&gt; 一个自动部署脚本，集成了雾凇拼音，帮助无痛快速安装、部署 Rime 输入法（中州韵、小狼毫，鼠须管）以及部署配置。&lt;/p&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;使用 AUR helper 安装 &lt;a href=&#34;https://aur.archlinux.org/packages/rime-ice-git&#34;&gt;rime-ice-git&lt;/a&gt; 包即可。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# paru 默认会每次重新评估 pkgver，所以有新的提交时 paru 会自动更新，&#xA;# yay 默认未开启此功能，可以通过此命令开启&#xA;# yay -Y --devel --save&#xA;&#xA;paru -S rime-ice-git&#xA;# yay -S rime-ice-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;推荐使用&lt;a href=&#34;https://github.com/rime/home/wiki/Configuration#%E8%A3%9C%E9%9D%AA&#34;&gt;补丁&lt;/a&gt;的方式启用。&lt;/p&gt; &#xA;&lt;p&gt;参考下面的配置示例，修改对应输入法框架用户目录（见下）中的 &lt;code&gt;default.custom.yaml&lt;/code&gt; 文件&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;iBus 为 &lt;code&gt;$HOME/.config/ibus/rime/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fcitx5 为 &lt;code&gt;$HOME/.local/share/fcitx5/rime/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;default.custom.yaml&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;patch:&#xA;  # 仅使用「雾凇拼音」的默认配置，配置此行即可&#xA;  __include: rime_ice_suggestion:/&#xA;  # 以下根据自己所需自行定义，仅做参考。&#xA;  # 针对对应处方的定制条目，请使用 &amp;lt;recipe&amp;gt;.custom.yaml 中配置，例如 rime_ice.custom.yaml&#xA;  __patch:&#xA;    key_binder/+:&#xA;      select_first_character: &#34;bracketleft&#34; # 即 [&#xA;      select_last_character: &#34;bracketright&#34; # 即 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;感谢 ❤️&lt;/h2&gt; &#xA;&lt;p&gt;感谢上述提到的词库、方案及功能参考。&lt;/p&gt; &#xA;&lt;p&gt;感谢 &lt;a href=&#34;https://github.com/Huandeep&#34;&gt;@Huandeep&lt;/a&gt; 整理的多个词库。&lt;/p&gt; &#xA;&lt;p&gt;感谢所有贡献者。&lt;/p&gt; &#xA;&lt;p&gt;搜狗转 Rime：&lt;a href=&#34;https://github.com/lewangdev/scel2txt&#34;&gt;lewangdev/scel2txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;大量参考&lt;a href=&#34;http://www.jiaodui.com/bbs/&#34;&gt;校对网&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;Thanks to JetBrains for the OSS development license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jb.gg/OpenSourceSupport&#34;&gt;&lt;img src=&#34;https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.svg?sanitize=true&#34; alt=&#34;JetBrains&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;赞助 ☕&lt;/h2&gt; &#xA;&lt;p&gt;如果觉得项目不错，可以请 Dvel 吃个煎饼馃子。&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/iDvel/rime-ice/main/others/sponsor.webp&#34; alt=&#34;请 Dvel 吃个煎饼馃子&#34; width=&#34;600&#34;&gt;</summary>
  </entry>
  <entry>
    <title>elixir-tools/elixir-tools.nvim</title>
    <updated>2023-06-07T01:41:38Z</updated>
    <id>tag:github.com,2023-06-07:/elixir-tools/elixir-tools.nvim</id>
    <link href="https://github.com/elixir-tools/elixir-tools.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for Elixir&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;elixir-tools.nvim&lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h1&gt;Overview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/6XdGnxVA2A&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Discord-5865F3?style=flat&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;link=https://discord.gg/nNDMwTJ8&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;elixir-tools.nvim&lt;/code&gt; provides a nice experience for writing Elixir applications with &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: This plugin does not provide autocompletion, I recommend using &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: This plugin does not provide syntax highlighting, I recommend using &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elixir-lsp/elixir-ls&#34;&gt;ElixirLS&lt;/a&gt; installation and configuration (uses the Neovim built-in LSP client)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elixir-tools/credo-language-server&#34;&gt;credo-language-server&lt;/a&gt; integration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:Mix&lt;/code&gt; command with autocomplete&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-projectionist&#34;&gt;vim-projectionist&lt;/a&gt; support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Requires 0.8&lt;/p&gt; &#xA;&lt;h2&gt;lazy.nvim&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;elixir-tools/elixir-tools.nvim&#34;,&#xA;  event = { &#34;BufReadPre&#34;, &#34;BufNewFile&#34; },&#xA;  config = function()&#xA;    local elixir = require(&#34;elixir&#34;)&#xA;    local elixirls = require(&#34;elixir.elixirls&#34;)&#xA;&#xA;    elixir.setup {&#xA;      credo = {},&#xA;      elixirls = {&#xA;        enabled = true,&#xA;        settings = elixirls.settings {&#xA;          dialyzerEnabled = false,&#xA;          enableTestLenses = false,&#xA;        },&#xA;        on_attach = function(client, bufnr)&#xA;          vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;space&amp;gt;fp&#34;, &#34;:ElixirFromPipe&amp;lt;cr&amp;gt;&#34;, { buffer = true, noremap = true })&#xA;          vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;space&amp;gt;tp&#34;, &#34;:ElixirToPipe&amp;lt;cr&amp;gt;&#34;, { buffer = true, noremap = true })&#xA;          vim.keymap.set(&#34;v&#34;, &#34;&amp;lt;space&amp;gt;em&#34;, &#34;:ElixirExpandMacro&amp;lt;cr&amp;gt;&#34;, { buffer = true, noremap = true })&#xA;        end,&#xA;      }&#xA;    }&#xA;  end,&#xA;  dependencies = {&#xA;    &#34;nvim-lua/plenary.nvim&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;packer.nvim&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({ &#34;elixir-tools/elixir-tools.nvim&#34;, requires = { &#34;nvim-lua/plenary.nvim&#34; }})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h2&gt;Minimal Setup&lt;/h2&gt; &#xA;&lt;p&gt;The minimal setup will configure both ElixirLS and credo-language-server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;elixir&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ElixirLS and credo-language-server can be disabled by setting the &lt;code&gt;enabled&lt;/code&gt; flag in the respective options table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;elixir&#34;).setup({&#xA;  credo = {enable = false},&#xA;  elixirls = {enable = false},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Setup&lt;/h2&gt; &#xA;&lt;p&gt;While the plugin works with a minimal setup, it is much more useful if you add some personal configuration.&lt;/p&gt; &#xA;&lt;p&gt;Note: For ElixirLS, not specifying the &lt;code&gt;repo&lt;/code&gt;, &lt;code&gt;branch&lt;/code&gt;, or &lt;code&gt;tag&lt;/code&gt; options will default to the latest release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local elixir = require(&#34;elixir&#34;)&#xA;local elixirls = require(&#34;elixir.elixirls&#34;)&#xA;&#xA;elixir.setup {&#xA;  credo = {&#xA;    port = 9000, -- connect via TCP with the given port. mutually exclusive with `cmd`&#xA;    cmd = &#34;path/to/credo-language-server&#34;, -- path to the executable. mutually exclusive with `port`&#xA;    version = &#34;0.1.0-rc.1&#34;, -- version of credo-language-server to install and use. defaults to 0.0.5&#xA;    on_attach = function(client, bufnr)&#xA;      -- custom keybinds&#xA;    end&#xA;  },&#xA;  elixirls = {&#xA;    -- specify a repository and branch&#xA;    repo = &#34;mhanberg/elixir-ls&#34;, -- defaults to elixir-lsp/elixir-ls&#xA;    branch = &#34;mh/all-workspace-symbols&#34;, -- defaults to nil, just checkouts out the default branch, mutually exclusive with the `tag` option&#xA;    tag = &#34;v0.14.6&#34;, -- defaults to nil, mutually exclusive with the `branch` option&#xA;&#xA;    -- alternatively, point to an existing elixir-ls installation (optional)&#xA;    -- not currently supported by elixirls, but can be a table if you wish to pass other args `{&#34;path/to/elixirls&#34;, &#34;--foo&#34;}`&#xA;    cmd = &#34;/usr/local/bin/elixir-ls.sh&#34;,&#xA;&#xA;    -- default settings, use the `settings` function to override settings&#xA;    settings = elixirls.settings {&#xA;      dialyzerEnabled = true,&#xA;      fetchDeps = false,&#xA;      enableTestLenses = false,&#xA;      suggestSpecs = false,&#xA;    },&#xA;    on_attach = function(client, bufnr)&#xA;      vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;space&amp;gt;fp&#34;, &#34;:ElixirFromPipe&amp;lt;cr&amp;gt;&#34;, { buffer = true, noremap = true })&#xA;      vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;space&amp;gt;tp&#34;, &#34;:ElixirToPipe&amp;lt;cr&amp;gt;&#34;, { buffer = true, noremap = true })&#xA;      vim.keymap.set(&#34;v&#34;, &#34;&amp;lt;space&amp;gt;em&#34;, &#34;:ElixirExpandMacro&amp;lt;cr&amp;gt;&#34;, { buffer = true, noremap = true })&#xA;    end&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;h2&gt;ElixirLS&lt;/h2&gt; &#xA;&lt;h3&gt;Automatic Installation&lt;/h3&gt; &#xA;&lt;p&gt;When a compatible installation of ELixirLS is not found, you will be prompted to install it. The plugin will download the source code to the &lt;code&gt;.elixir_ls&lt;/code&gt; directory and compile it using the Elixir and OTP versions used by your current project.&lt;/p&gt; &#xA;&lt;p&gt;Caveat: This assumes you are developing your project locally (outside of something like Docker) and they will be available.&lt;/p&gt; &#xA;&lt;p&gt;Caveat: This currently downloads the language server into the &lt;code&gt;.elixir_ls&lt;/code&gt; directory in your repository, but it does install it into &lt;code&gt;~/.cache&lt;/code&gt; and will re-use it when needed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5523984/160333851-94d448d9-5c80-458c-aa0d-4c81528dde8f.gif&#34; alt=&#34;auto-install-elixirls&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Root Path Detection&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;elixir-tools.nvim&lt;/code&gt; should be able to properly set the root directory for umbrella and non-umbrella apps. The nvim-lspconfig project&#39;s root detection doesn&#39;t properly account for umbrella projects.&lt;/p&gt; &#xA;&lt;h3&gt;Run Tests&lt;/h3&gt; &#xA;&lt;p&gt;ElixirLS provides a codelens to identify and run your tests. If you configure &lt;code&gt;enableTestLenses = true&lt;/code&gt; in the settings table, you will see the codelens as virtual text in your editor and can run them with &lt;code&gt;vim.lsp.codelens.run()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5523984/159722637-ef1586d5-9d47-4e1a-b68b-6a90ad744098.gif&#34; alt=&#34;elixir-test-lens&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;:ElixirFromPipe&lt;/p&gt; &#xA;&lt;p&gt;: Convert pipe operator to nested expressions.&lt;/p&gt; &#xA;&lt;p&gt;:ElixirToPipe&lt;/p&gt; &#xA;&lt;p&gt;: Convert nested expressions to the pipe operator.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5523984/160508641-cedb6ebf-3ec4-4229-9708-aa360b15a2d5.gif&#34; alt=&#34;manipulate_pipes&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;:[range]ElixirExpandMacro&lt;/p&gt; &#xA;&lt;p&gt;: For the given [range], expand any macros and display it in a floating window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5523984/162372669-4782baba-1889-4145-8a4f-e3bf13a6450d.gif&#34; alt=&#34;expand_macro&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;:ElixirRestart&lt;/p&gt; &#xA;&lt;p&gt;: Restart ElixirLS, you must then reconnect your buffer with &lt;code&gt;:edit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;:ElixirOutputPanel&lt;/p&gt; &#xA;&lt;p&gt;: Open the output panel that displays logs and compiler information from the server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;elixir.elixirls&#34;).open_output_panel()&#xA;require(&#34;elixir.elixirls&#34;).open_output_panel({ window = &#34;split&#34; })&#xA;require(&#34;elixir.elixirls&#34;).open_output_panel({ window = &#34;vsplit&#34; })&#xA;require(&#34;elixir.elixirls&#34;).open_output_panel({ window = &#34;float&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;credo-language-server&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The credo-language-server integration utilizes &lt;code&gt;Mix.install/2&lt;/code&gt;, so you must be running Elixir &amp;gt;= 1.12&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses your project&#39;s Credo version.&lt;/li&gt; &#xA; &lt;li&gt;Full project diagnostics&lt;/li&gt; &#xA; &lt;li&gt;Code Actions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mix&lt;/h2&gt; &#xA;&lt;p&gt;You can run any &lt;code&gt;mix&lt;/code&gt; command in your project, complete with... autocomplete!&lt;/p&gt; &#xA;&lt;p&gt;:Mix {args}&lt;/p&gt; &#xA;&lt;p&gt;: Run any mix command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5523984/181859468-19d47a55-3f63-4af5-8698-4b5dd3459141.gif&#34; alt=&#34;elixir-nvim-mix-demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Projectionist&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tpope/vim-projectionist&#34;&gt;vim-projectionist&lt;/a&gt; definitions are provided for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Elixir files&lt;/li&gt; &#xA; &lt;li&gt;Phoenix Views&lt;/li&gt; &#xA; &lt;li&gt;Phoenix Controllers&lt;/li&gt; &#xA; &lt;li&gt;Phoenix Channels&lt;/li&gt; &#xA; &lt;li&gt;Wallaby/Hound Feature tests&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>