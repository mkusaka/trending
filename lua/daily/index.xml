<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-14T01:32:46Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xvzc/chezmoi.nvim</title>
    <updated>2025-05-14T01:32:46Z</updated>
    <id>tag:github.com,2025-05-14:/xvzc/chezmoi.nvim</id>
    <link href="https://github.com/xvzc/chezmoi.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chezmoi plugin for neovim&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;chezmoi.nvim&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;Edit your chezmoi-managed files and automatically apply.&lt;/p&gt; &#xA; &lt;img src=&#34;https://github.com/xvzc/chezmoi.nvim/assets/45588457/3053d4f9-a59c-4c29-b20c-b2c7a0e79a18&#34; alt=&#34;chezmoi.nvim demo&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What Is chezmoi.nvim?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;chezmoi.nvim&lt;/code&gt; is a plugin designed to assist in editing and applying chezmoi-managed files within &lt;code&gt;neovim&lt;/code&gt;. A notable distinction from the command line tool &lt;code&gt;chezmoi&lt;/code&gt; is that &lt;code&gt;chezmoi.nvim&lt;/code&gt; utilizes built-in neovim functions for file editing, allowing us to edit and watch multiple files simultaneously.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.9.0&#34;&gt;Neovim (v0.9.0)&lt;/a&gt; or the latest version&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twpayne/chezmoi&#34;&gt;chezmoi&lt;/a&gt; latest version&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lazy.nvim&#xA;{&#xA;  &#39;xvzc/chezmoi.nvim&#39;,&#xA;  dependencies = { &#39;nvim-lua/plenary.nvim&#39; },&#xA;  config = function()&#xA;    require(&#34;chezmoi&#34;).setup {&#xA;      -- your configurations&#xA;    }&#xA;  end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  edit = {&#xA;    watch = false,&#xA;    force = false,&#xA;  },&#xA;  events = {&#xA;    on_open = {&#xA;      notification = {&#xA;        enable = true,&#xA;        msg = &#34;Opened a chezmoi-managed file&#34;,&#xA;        opts = {},&#xA;      },&#xA;    },&#xA;    on_watch = {&#xA;      notification = {&#xA;        enable = true,&#xA;        msg = &#34;This file will be automatically applied&#34;,&#xA;        opts = {},&#xA;      },&#xA;    },&#xA;    on_apply = {&#xA;      notification = {&#xA;        enable = true,&#xA;        msg = &#34;Successfully applied&#34;,&#xA;        opts = {},&#xA;      },&#xA;    },&#xA;  },&#xA;  telescope = {&#xA;    select = { &#34;&amp;lt;CR&amp;gt;&#34; },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Automatically Running &lt;code&gt;chezmoi apply&lt;/code&gt; In Specific Directories&lt;/h3&gt; &#xA;&lt;p&gt;The below configuration wll allow you to automatically apply changes on files under chezmoi source path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;--  e.g. ~/.local/share/chezmoi/*&#xA;vim.api.nvim_create_autocmd({ &#34;BufRead&#34;, &#34;BufNewFile&#34; }, {&#xA;    pattern = { os.getenv(&#34;HOME&#34;) .. &#34;/.local/share/chezmoi/*&#34; },&#xA;    callback = function(ev)&#xA;        local bufnr = ev.buf&#xA;        local edit_watch = function()&#xA;            require(&#34;chezmoi.commands.__edit&#34;).watch(bufnr)&#xA;        end&#xA;        vim.schedule(edit_watch)&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Overriding Callback Functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;{&#xA;-- ...&#xA;  events = {&#xA;    on_open = {&#xA;      -- NOTE: This will override the default behavior of callback functions,&#xA;      -- including the invocation of notifications. If you want to override&#xA;      -- the default behavior but still show a notification on certain events,&#xA;      -- you should define the notification logic within your override function.&#xA;      override = function(bufnr)&#xA;        vim.notify(&#34;Opened a chezmoi-managed file&#34;)&#xA;      end,&#xA;    },&#xA;-- ...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telescope Integration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- telscope-config.lua&#xA;local telescope = require(&#34;telescope&#34;)&#xA;&#xA;telescope.setup {&#xA;  -- ... your telescope config&#xA;}&#xA;&#xA;telescope.load_extension(&#39;chezmoi&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cz&#39;, telescope.extensions.chezmoi.find_files, {})&#xA;&#xA;-- You can also search a specific target directory and override arguments&#xA;-- Here is an example with the default args&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;fc&#39;, function()&#xA;  telescope.extensions.chezmoi.find_files({&#xA;    targets = vim.fn.stdpath(&#34;config&#34;),&#xA;    -- This overrides the default arguments used with &#39;chezmoi list&#39;&#xA;    args = { &#xA;      &#34;--path-style&#34;,&#xA;      &#34;absolute&#34;,&#xA;      &#34;--include&#34;,&#xA;      &#34;files&#34;,&#xA;      &#34;--exclude&#34;,&#xA;      &#34;externals&#34;,&#xA;    }&#xA;  })&#xA;end, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;User Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:ChezmoiEdit &amp;lt;target&amp;gt; &amp;lt;args&amp;gt;&#xA;&#34; This will open &#39;~/.local/chezmoi/dot_zshrc&#39; and apply the changes on save&#xA;&#34; :ChezmoiEdit ~/.zshrc --watch&#xA;&#34; Arguments&#xA;&#34; --watch Automatically apply changes on save&#xA;&#34; --force force apply.&#xA;&#xA;:ChezmoiList &amp;lt;args&amp;gt;&#xA;&#34; :ChezmoiList --include=files&#xA;&#34; You can put any of command line arguments of &#39;chezmoi&#39; here&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/xvzc/chezmoi.nvim/raw/main/lua/chezmoi/commands/init.lua&#34;&gt;Commands&lt;/a&gt; for more information&lt;/p&gt; &#xA;&lt;h3&gt;List&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local managed_files = require(&#34;chezmoi.commands&#34;).list()&#xA;print(vim.inspect(managed_files))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Edit&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- NOTE: chezmoi.nvim utilizes builtin neovim functions for file editing instead of `chzmoi edit`&#xA;require(&#34;chezmoi.commands&#34;).edit({&#xA;    targets = { &#34;~/.zshrc&#34; },&#xA;    args = { &#34;--watch&#34; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>