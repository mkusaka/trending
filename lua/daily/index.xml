<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-22T01:35:50Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tzachar/cmp-ai</title>
    <updated>2023-12-22T01:35:50Z</updated>
    <id>tag:github.com,2023-12-22:/tzachar/cmp-ai</id>
    <link href="https://github.com/tzachar/cmp-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cmp-ai&lt;/h1&gt; &#xA;&lt;p&gt;AI source for &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a general purpose AI source for &lt;code&gt;cmp&lt;/code&gt;, easily adapted to any restapi supporting remote code completion.&lt;/p&gt; &#xA;&lt;p&gt;For now, HuggingFace SantaCoder, OpenAI Chat and Google Bard are implemeted.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You will need &lt;code&gt;plenary.nvim&lt;/code&gt; to use this plugin.&lt;/li&gt; &#xA; &lt;li&gt;For using OpenAI or HuggingFace, you will also need &lt;code&gt;curl&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For using Google Bard, you will need &lt;a href=&#34;https://github.com/dsdanielpark/Bard-API&#34;&gt;dsdanielpark/Bard-API&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using a plugin manager&lt;/h3&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim/&#34;&gt;Lazy&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return require(&#34;lazy&#34;).setup({&#xA;    {&#39;tzachar/cmp-ai&#39;, dependencies = &#39;nvim-lua/plenary.nvim&#39;},&#xA;    {&#39;hrsh7th/nvim-cmp&#39;, dependencies = {&#39;tzachar/cmp-ai&#39;}},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And later, tell &lt;code&gt;cmp&lt;/code&gt; to use this plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;cmp&#39;.setup {&#xA;    sources = {&#xA;        { name = &#39;cmp_ai&#39; },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Please note the use of &lt;code&gt;:&lt;/code&gt; instead of a &lt;code&gt;.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To use HuggingFace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cmp_ai = require(&#39;cmp_ai.config&#39;)&#xA;&#xA;cmp_ai:setup({&#xA;  max_lines = 1000,&#xA;  provider = &#39;HF&#39;,&#xA;  notify = true,&#xA;  notify_callback = function(msg)&#xA;    vim.notify(msg)&#xA;  end,&#xA;  run_on_every_keystroke = true,&#xA;  ignored_file_types = {&#xA;    -- default is not to ignore&#xA;    -- uncomment to ignore in lua:&#xA;    -- lua = true&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need to make sure you have the Hugging Face api key in you environment, &lt;code&gt;HF_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use OpenAI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cmp_ai = require(&#39;cmp_ai.config&#39;)&#xA;&#xA;cmp_ai:setup({&#xA;  max_lines = 1000,&#xA;  provider = &#39;OpenAI&#39;,&#xA;  provider_options = {&#xA;    model = &#39;gpt-4&#39;,&#xA;  },&#xA;  notify = true,&#xA;  notify_callback = function(msg)&#xA;    vim.notify(msg)&#xA;  end,&#xA;  run_on_every_keystroke = true,&#xA;  ignored_file_types = {&#xA;    -- default is not to ignore&#xA;    -- uncomment to ignore in lua:&#xA;    -- lua = true&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need to make sure you have the OpenAI api key in you environment, &lt;code&gt;OPENAI_API_KEY&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available models for OpenAI are &lt;code&gt;gpt-4&lt;/code&gt; and &lt;code&gt;gpt-3.5-turbo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To use Google Bard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cmp_ai = require(&#39;cmp_ai.config&#39;)&#xA;&#xA;cmp_ai:setup({&#xA;  max_lines = 1000,&#xA;  provider = &#39;Bard&#39;,&#xA;  notify = true,&#xA;  notify_callback = function(msg)&#xA;    vim.notify(msg)&#xA;  end,&#xA;  run_on_every_keystroke = true,&#xA;  ignored_file_types = {&#xA;    -- default is not to ignore&#xA;    -- uncomment to ignore in lua:&#xA;    -- lua = true&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will also need to follow the instructions on &lt;a href=&#34;https://github.com/dsdanielpark/Bard-API&#34;&gt;dsdanielpark/Bard-API&lt;/a&gt; to get the &lt;code&gt;__Secure-1PSID&lt;/code&gt; key, and set the environment variable &lt;code&gt;BARD_API_KEY&lt;/code&gt; accordingly (note that this plugin expects &lt;code&gt;BARD_API_KEY&lt;/code&gt; without a leading underscore).&lt;/p&gt; &#xA;&lt;p&gt;To use &lt;a href=&#34;https://ollama.ai&#34;&gt;Ollama&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cmp_ai = require(&#39;cmp_ai.config&#39;)&#xA;&#xA;cmp_ai:setup({&#xA;  max_lines = 100,&#xA;  provider = &#39;Ollama&#39;,&#xA;  provider_options = {&#xA;    model = &#39;codellama:7b-code&#39;,&#xA;  },&#xA;  notify = true,&#xA;  notify_callback = function(msg)&#xA;    vim.notify(msg)&#xA;  end,&#xA;  run_on_every_keystroke = true,&#xA;  ignored_file_types = {&#xA;    -- default is not to ignore&#xA;    -- uncomment to ignore in lua:&#xA;    -- lua = true&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;notify&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;As some completion sources can be quit slow, setting this to &lt;code&gt;true&lt;/code&gt; will trigger a notification when a completion starts and ends using &lt;code&gt;vim.notify&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;notify_callback&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The default notify function uses &lt;code&gt;vim.notify&lt;/code&gt;, but an override can be configured. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;notify_callback = function(msg)&#xA;  require(&#39;notify&#39;).notify(msg, vim.log.levels.INFO, {&#xA;    title = &#39;OpenAI&#39;,&#xA;    render = &#39;compact&#39;,&#xA;  })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;max_lines&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;How many lines of buffer context to use&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;run_on_every_keystroke&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Generate new completion items on every keystroke.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;ignored_file_types&lt;/code&gt; &lt;code&gt;(table: &amp;lt;string:bool&amp;gt;)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Which file types to ignore. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ignored_file_types = {&#xA;  html = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;cmp-ai&lt;/code&gt; will not offer completions when &lt;code&gt;vim.bo.filetype&lt;/code&gt; is &lt;code&gt;html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dedicated &lt;code&gt;cmp&lt;/code&gt; keybindings&lt;/h2&gt; &#xA;&lt;p&gt;As completions can take time, and you might not want to trigger expensive apis on every keystroke, you can configure &lt;code&gt;cmp-ai&lt;/code&gt; to trigger only with a specific key press. For example, to bind &lt;code&gt;cmp-ai&lt;/code&gt; to &lt;code&gt;&amp;lt;c-x&amp;gt;&lt;/code&gt;, you can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cmp.setup({&#xA;  ...&#xA;  mapping = {&#xA;    ...&#xA;    [&#39;&amp;lt;C-x&amp;gt;&#39;] = cmp.mapping(&#xA;      cmp.mapping.complete({&#xA;        config = {&#xA;          sources = cmp.config.sources({&#xA;            { name = &#39;cmp_ai&#39; },&#xA;          }),&#xA;        },&#xA;      }),&#xA;      { &#39;i&#39; }&#xA;    ),&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, make sure you do not pass &lt;code&gt;cmp-ai&lt;/code&gt; to the default list of &lt;code&gt;cmp&lt;/code&gt; sources.&lt;/p&gt; &#xA;&lt;h2&gt;Pretty Printing Menu Items&lt;/h2&gt; &#xA;&lt;p&gt;You can use the following to pretty print the completion menu (requires &lt;a href=&#34;https://github.com/onsails/lspkind-nvim&#34;&gt;lspkind&lt;/a&gt; and patched fonts (&lt;a href=&#34;https://www.nerdfonts.com&#34;&gt;https://www.nerdfonts.com&lt;/a&gt;)):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lspkind = require(&#39;lspkind&#39;)&#xA;&#xA;local source_mapping = {&#xA;  buffer = &#39;[Buffer]&#39;,&#xA;  nvim_lsp = &#39;[LSP]&#39;,&#xA;  nvim_lua = &#39;[Lua]&#39;,&#xA;  cmp_ai = &#39;[AI]&#39;,&#xA;  path = &#39;[Path]&#39;,&#xA;}&#xA;&#xA;require(&#39;cmp&#39;).setup({&#xA;  sources = {&#xA;    { name = &#39;cmp_ai&#39; },&#xA;  },&#xA;  formatting = {&#xA;    format = function(entry, vim_item)&#xA;      -- if you have lspkind installed, you can use it like&#xA;      -- in the following line:&#xA;      vim_item.kind = lspkind.symbolic(vim_item.kind, { mode = &#39;symbol&#39; })&#xA;      vim_item.menu = source_mapping[entry.source.name]&#xA;      if entry.source.name == &#39;cmp_ai&#39; then&#xA;        local detail = (entry.completion_item.labelDetails or {}).detail&#xA;        vim_item.kind = &#39;ïƒ§&#39;&#xA;        if detail and detail:find(&#39;.*%%.*&#39;) then&#xA;          vim_item.kind = vim_item.kind .. &#39; &#39; .. detail&#xA;        end&#xA;&#xA;        if (entry.completion_item.data or {}).multiline then&#xA;          vim_item.kind = vim_item.kind .. &#39; &#39; .. &#39;[ML]&#39;&#xA;        end&#xA;      end&#xA;      local maxwidth = 80&#xA;      vim_item.abbr = string.sub(vim_item.abbr, 1, maxwidth)&#xA;      return vim_item&#xA;    end,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sorting&lt;/h2&gt; &#xA;&lt;p&gt;You can bump &lt;code&gt;cmp-ai&lt;/code&gt; completions to the top of your completion menu like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local compare = require(&#39;cmp.config.compare&#39;)&#xA;cmp.setup({&#xA;  sorting = {&#xA;    priority_weight = 2,&#xA;    comparators = {&#xA;      require(&#39;cmp_ai.compare&#39;),&#xA;      compare.offset,&#xA;      compare.exact,&#xA;      compare.score,&#xA;      compare.recently_used,&#xA;      compare.kind,&#xA;      compare.sort_text,&#xA;      compare.length,&#xA;      compare.order,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>