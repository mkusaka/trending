<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-11T01:33:49Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hakonharnes/img-clip.nvim</title>
    <updated>2025-06-11T01:33:49Z</updated>
    <id>tag:github.com,2025-06-11:/hakonharnes/img-clip.nvim</id>
    <link href="https://github.com/hakonharnes/img-clip.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Embed images into any markup language, like LaTeX, Markdown or Typst&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üìã img-clip.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Effortlessly embed images into any markup language, like LaTeX, Markdown or Typst.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/HakonHarnes/img-clip.nvim/assets/89907156/ab4edc10-d296-4532-bfce-6abdd4f218bf&#34;&gt;https://github.com/HakonHarnes/img-clip.nvim/assets/89907156/ab4edc10-d296-4532-bfce-6abdd4f218bf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ö° Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üìã Paste images directly from your system clipboard&lt;/li&gt; &#xA; &lt;li&gt;üñ±Ô∏è Seamlessly drag and drop images from your web browser or file explorer&lt;/li&gt; &#xA; &lt;li&gt;üìÅ Embed images as files, web URLs, or Base64-encoded data&lt;/li&gt; &#xA; &lt;li&gt;üåê Automatically download and embed images from the web&lt;/li&gt; &#xA; &lt;li&gt;‚öôÔ∏è Process images using configurable shell commands&lt;/li&gt; &#xA; &lt;li&gt;üé® Configurable templates with placeholders for file paths, labels, and cursor positioning&lt;/li&gt; &#xA; &lt;li&gt;üìù Built-in templates for popular markup languages like LaTeX, Markdown, and Typst&lt;/li&gt; &#xA; &lt;li&gt;üîß Extensive configuration options, including per-project, per-directory, and per-filetype settings&lt;/li&gt; &#xA; &lt;li&gt;üîå Powerful API with example integrations for popular plugins like &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/stevearc/oil.nvim&#34;&gt;oil.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üíª Compatible with Linux, macOS, and Windows, including WSL!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üîß Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux:&lt;/strong&gt; &lt;a href=&#34;https://github.com/astrand/xclip&#34;&gt;xclip&lt;/a&gt; (x11) or &lt;a href=&#34;https://github.com/bugaevc/wl-clipboard&#34;&gt;wl-clipboard&lt;/a&gt; (wayland)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MacOS:&lt;/strong&gt; &lt;a href=&#34;https://github.com/jcsalterego/pngpaste&#34;&gt;pngpaste&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; No additional requirements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Run &lt;code&gt;:checkhealth img-clip&lt;/code&gt; after installation to ensure requirements are satisfied.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;HakonHarnes/img-clip.nvim&#34;,&#xA;  event = &#34;VeryLazy&#34;,&#xA;  opts = {&#xA;    -- add options here&#xA;    -- or leave it empty to use the default settings&#xA;  },&#xA;  keys = {&#xA;    -- suggested keymap&#xA;    { &#34;&amp;lt;leader&amp;gt;p&#34;, &#34;&amp;lt;cmd&amp;gt;PasteImage&amp;lt;cr&amp;gt;&#34;, desc = &#34;Paste image from system clipboard&#34; },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;p&gt;The plugin comes with the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;PasteImage&lt;/code&gt;: Pastes an image from the system clipboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImgClipDebug&lt;/code&gt;: Prints the debug log, including the output of shell commands&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImgClipConfig&lt;/code&gt;: Prints the current configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Consider binding &lt;code&gt;PasteImage&lt;/code&gt; to something like &lt;code&gt;&amp;lt;leader&amp;gt;p&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the Lua equivalent, which allows you to override your configuration by passing the options directly to the function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;img-clip&#34;).paste_image(opts?, input?) -- input is optional and can be a file path or URL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;img-clip&#34;).paste_image({ use_absolute_path = false, file_name = &#34;image.png&#34; }, &#34;/path/to/file.png&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;The plugin is highly configurable. Please refer to the default configuration below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  default = {&#xA;    -- file and directory options&#xA;    dir_path = &#34;assets&#34;, ---@type string | fun(): string&#xA;    extension = &#34;png&#34;, ---@type string | fun(): string&#xA;    file_name = &#34;%Y-%m-%d-%H-%M-%S&#34;, ---@type string | fun(): string&#xA;    use_absolute_path = false, ---@type boolean | fun(): boolean&#xA;    relative_to_current_file = false, ---@type boolean | fun(): boolean&#xA;&#xA;    -- template options&#xA;    template = &#34;$FILE_PATH&#34;, ---@type string | fun(context: table): string&#xA;    url_encode_path = false, ---@type boolean | fun(): boolean&#xA;    relative_template_path = true, ---@type boolean | fun(): boolean&#xA;    use_cursor_in_template = true, ---@type boolean | fun(): boolean&#xA;    insert_mode_after_paste = true, ---@type boolean | fun(): boolean&#xA;    insert_template_after_cursor = true, ---@type boolean | fun(): boolean&#xA;&#xA;    -- prompt options&#xA;    prompt_for_file_name = true, ---@type boolean | fun(): boolean&#xA;    show_dir_path_in_prompt = false, ---@type boolean | fun(): boolean&#xA;&#xA;    -- base64 options&#xA;    max_base64_size = 10, ---@type number | fun(): number&#xA;    embed_image_as_base64 = false, ---@type boolean | fun(): boolean&#xA;&#xA;    -- image options&#xA;    process_cmd = &#34;&#34;, ---@type string | fun(): string&#xA;    copy_images = false, ---@type boolean | fun(): boolean&#xA;    download_images = true, ---@type boolean | fun(): boolean&#xA;&#xA;    -- drag and drop options&#xA;    drag_and_drop = {&#xA;      enabled = true, ---@type boolean | fun(): boolean&#xA;      insert_mode = false, ---@type boolean | fun(): boolean&#xA;    },&#xA;  },&#xA;&#xA;  -- filetype specific options&#xA;  filetypes = {&#xA;    markdown = {&#xA;      url_encode_path = true, ---@type boolean | fun(): boolean&#xA;      template = &#34;![$CURSOR]($FILE_PATH)&#34;, ---@type string | fun(context: table): string&#xA;      download_images = false, ---@type boolean | fun(): boolean&#xA;    },&#xA;&#xA;    vimwiki = {&#xA;      url_encode_path = true, ---@type boolean | fun(): boolean&#xA;      template = &#34;![$CURSOR]($FILE_PATH)&#34;, ---@type string | fun(context: table): string&#xA;      download_images = false, ---@type boolean | fun(): boolean&#xA;    },&#xA;&#xA;    html = {&#xA;      template = &#39;&amp;lt;img src=&#34;$FILE_PATH&#34; alt=&#34;$CURSOR&#34;&amp;gt;&#39;, ---@type string | fun(context: table): string&#xA;    },&#xA;&#xA;    tex = {&#xA;      relative_template_path = false, ---@type boolean | fun(): boolean&#xA;      template = [[&#xA;\begin{figure}[h]&#xA;  \centering&#xA;  \includegraphics[width=0.8\textwidth]{$FILE_PATH}&#xA;  \caption{$CURSOR}&#xA;  \label{fig:$LABEL}&#xA;\end{figure}&#xA;    ]], ---@type string | fun(context: table): string&#xA;    },&#xA;&#xA;    typst = {&#xA;      template = [[&#xA;#figure(&#xA;  image(&#34;$FILE_PATH&#34;, width: 80%),&#xA;  caption: [$CURSOR],&#xA;) &amp;lt;fig-$LABEL&amp;gt;&#xA;    ]], ---@type string | fun(context: table): string&#xA;    },&#xA;&#xA;    rst = {&#xA;      template = [[&#xA;.. image:: $FILE_PATH&#xA;   :alt: $CURSOR&#xA;   :width: 80%&#xA;    ]], ---@type string | fun(context: table): string&#xA;    },&#xA;&#xA;    asciidoc = {&#xA;      template = &#39;image::$FILE_PATH[width=80%, alt=&#34;$CURSOR&#34;]&#39;, ---@type string | fun(context: table): string&#xA;    },&#xA;&#xA;    org = {&#xA;      template = [=[&#xA;#+BEGIN_FIGURE&#xA;[[file:$FILE_PATH]]&#xA;#+CAPTION: $CURSOR&#xA;#+NAME: fig:$LABEL&#xA;#+END_FIGURE&#xA;    ]=], ---@type string | fun(context: table): string&#xA;    },&#xA;  },&#xA;&#xA;  -- file, directory, and custom triggered options&#xA;  files = {}, ---@type table | fun(): table&#xA;  dirs = {}, ---@type table | fun(): table&#xA;  custom = {}, ---@type table | fun(): table&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Option values can be configured as either static values (e.g. &#34;assets&#34;), or by dynamically generating them through functions.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example: Dynamically set the dir path&lt;/summary&gt; &#xA; &lt;p&gt;To set the &lt;code&gt;dir_path&lt;/code&gt; to match the name of the currently opened file:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;dir_path = function()&#xA;  return vim.fn.expand(&#34;%:t:r&#34;)&#xA;end,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Processing images&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;process_cmd&lt;/code&gt; option allows you to specify a shell command to process the image before saving or embedding it as base64. The command should read the image data from the standard input and write the processed data to the standard output.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example: ImageMagick&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;process_cmd = &#34;convert - -quality 85 -&#34; -- compress the image with 85% quality&#xA;process_cmd = &#34;convert - -resize 50% -&#34; -- resize the image to 50% of its original size&#xA;process_cmd = &#34;convert - -colorspace Gray -&#34; -- convert the image to grayscale&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;Ensure the specified command and its dependencies are installed and accessible in your system&#39;s shell environment. The above examples require &lt;a href=&#34;https://imagemagick.org/index.php&#34;&gt;ImageMagick&lt;/a&gt; to be installed.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Filetypes&lt;/h3&gt; &#xA;&lt;p&gt;Filetype specific options will override the default (or global) configuration. Any option can be specified for a specific filetype. Filetype specific options are determined by the &lt;em&gt;filetype&lt;/em&gt; (see &lt;code&gt;:help filetype&lt;/code&gt;). You can override settings for any filetype by specifying it as the key in your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;filetypes = {&#xA;  &amp;lt;filetype&amp;gt; = { -- obtained from &#34;set filetype?&#34;&#xA;    -- add options here&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example: LaTeX-specific configuration&lt;/summary&gt; &#xA; &lt;p&gt;If you only want to use absolute file paths for LaTeX, then:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;filetypes = {&#xA;  tex = {&#xA;    use_absolute_path = true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Overriding options for specific files, directories or custom triggers&lt;/h3&gt; &#xA;&lt;p&gt;Options can be overridden for specific files, directories or based on custom conditions. This means that you can have different options for different projects, or even different files within the same project.&lt;/p&gt; &#xA;&lt;p&gt;For files and directories, you can specify settings that apply to only a specific file or directory using its absolute path (e.g. &lt;code&gt;/home/user/project/README.md&lt;/code&gt;). You can also specify a general file or directory name (e.g. &lt;code&gt;README.md&lt;/code&gt;) which will apply the settings to any &lt;code&gt;README.md&lt;/code&gt; file. For custom options, you can specify a &lt;em&gt;trigger&lt;/em&gt; function that returns a boolean value that is used to enable it.&lt;/p&gt; &#xA;&lt;p&gt;The plugin evaluates the options in the following order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Custom options&lt;/li&gt; &#xA; &lt;li&gt;File specific options&lt;/li&gt; &#xA; &lt;li&gt;Directory specific options&lt;/li&gt; &#xA; &lt;li&gt;Filetype specific options&lt;/li&gt; &#xA; &lt;li&gt;Default options&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- file specific options&#xA;files = {&#xA;  [&#34;/path/to/specific/file.md&#34;] = {&#xA;    template = &#34;Custom template for this file&#34;,&#xA;  },&#xA;  [&#34;README.md&#34;] = {&#xA;    template = &#34;Custom template for README.md files&#34;,&#xA;  },&#xA;},&#xA;&#xA;-- directory specific options&#xA;dirs = {&#xA;  [&#34;/path/to/project&#34;] = {&#xA;    template = &#34;Project specific template&#34;,&#xA;  },&#xA;},&#xA;&#xA;-- custom options&#xA;custom = {&#xA;  {&#xA;    trigger = function() -- returns true to enable&#xA;      return vim.fn.strftime(&#34;%A&#34;) == &#34;Monday&#34;&#xA;    end,&#xA;    template = &#34;Template for Mondays only&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The options can be nested arbitrarily deep:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;dirs = {&#xA;  [&#34;/home/user/markdown&#34;] = {&#xA;    template = &#34;template for this project&#34;,&#xA;&#xA;    filetypes = { -- filetype options nested inside dirs&#xA;      markdown = {&#xA;        template = &#34;markdown template&#34;&#xA;      }&#xA;    },&#xA;&#xA;    files = { -- file options nested inside dirs&#xA;      [&#34;readme.md&#34;] = {&#xA;        dir_path = &#34;images&#34;&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Project-specific settings with the &lt;code&gt;.img-clip.lua&lt;/code&gt; file&lt;/h3&gt; &#xA;&lt;p&gt;Project-specific settings can be specified in a &lt;code&gt;.img-clip.lua&lt;/code&gt; file in the root of your project. The plugin will automatically load this file and use it to override the default settings. If multiple files are found, the closest one to the current file (in any parent directory) will be used.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;.img-clip.lua&lt;/code&gt; should return a Lua table containing the options (similar to &lt;code&gt;opts&lt;/code&gt; in lazy.nvim):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  -- add options here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  default = {&#xA;    template = &#34;default template&#34;&#xA;  },&#xA;&#xA;  filetypes = {&#xA;    markdown = {&#xA;      template = &#34;markdown template&#34;&#xA;    }&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Templates&lt;/h3&gt; &#xA;&lt;p&gt;Templates in the plugin use placeholders that are dynamically replaced with the correct values at runtime. For available placeholders, see the following table and the &lt;a href=&#34;https://raw.githubusercontent.com/hakonharnes/img-clip.nvim/main/#demonstration&#34;&gt;demonstration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Placeholder&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$FILE_NAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;File name, including its extension.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image.png&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$FILE_NAME_NO_EXT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;File name, excluding its extension.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;image&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$FILE_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;File path.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;/path/to/image.png&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$LABEL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Figure label, generated from the file name, converted to lower-case and with spaces replaced by dashes.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;the-image&lt;/code&gt; (from &lt;code&gt;the image.png&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;$CURSOR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Indicates where the cursor will be placed after insertion if &lt;code&gt;use_cursor_in_template&lt;/code&gt; is true.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Templates can also be defined using functions with the above placeholders available as function parameters.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;template = function(context)&#xA;  return &#34;![&#34; .. context.cursor .. &#34;](&#34; .. context.file_path .. &#34;)&#34;&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üñ±Ô∏è Drag and drop&lt;/h2&gt; &#xA;&lt;p&gt;The drag and drop feature enables users to drag images from the web browser or file explorer into the terminal to automatically embed them, in normal mode. Drag and drop can also be enabled in insert mode by setting the &lt;code&gt;drag_and_drop.insert_mode&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;. For drag and drop to work properly, the terminal emulator must meet the following requirements:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The terminal emulator must paste the file path or URL to the image when it is dropped into the terminal.&lt;/li&gt; &#xA; &lt;li&gt;The text must be inserted in &lt;a href=&#34;https://cirw.in/blog/bracketed-paste&#34;&gt;bracketed paste mode&lt;/a&gt;, which allows Neovim to differentiate pasted text from typed-in text. This is required because the drag and drop feature is implemented by overriding &lt;code&gt;vim.paste()&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A list of terminal emulators and their capabilities is given below.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th rowspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;Terminal&lt;/th&gt; &#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;X11&lt;/th&gt; &#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;Wayland&lt;/th&gt; &#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;MacOS&lt;/th&gt; &#xA;   &lt;th colspan=&#34;2&#34; style=&#34;text-align:center;&#34;&gt;Windows&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt;URL&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt;URL&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt;URL&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt;File&lt;/th&gt; &#xA;   &lt;th style=&#34;text-align:center;&#34;&gt;URL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kovidgoyal/kitty&#34;&gt;Kitty&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/goblinfactory/konsole&#34;&gt;Konsole&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùìÔ∏è&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùìÔ∏è&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/wez/wezterm&#34;&gt;Wezterm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùìÔ∏è&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùìÔ∏è&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codeberg.org/dnkl/foot&#34;&gt;Foot&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Terminal_(macOS)&#34;&gt;Terminal.app&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm.app&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/vercel/hyper&#34;&gt;Hyper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùìÔ∏è&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùìÔ∏è&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Xterm&#34;&gt;XTerm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://apps.microsoft.com/detail/9N0DX20HK701&#34;&gt;Windows Terminal&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚úÖ&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/PowerShell&#34;&gt;PowerShell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cmderdev/cmder&#34;&gt;Cmder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Maximus5/ConEmu&#34;&gt;ConEmu&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ûñ&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;   &lt;td style=&#34;text-align:center;&#34;&gt;‚ùå&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] If you&#39;re having issues on Windows, try changing the default shell to &lt;code&gt;powershell&lt;/code&gt; or &lt;code&gt;pwsh&lt;/code&gt;. See &lt;code&gt;:h shell-powershell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] MacOS URLs only work in Safari.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üîå Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Telescope.nvim&lt;/h3&gt; &#xA;&lt;p&gt;The plugin can be integrated with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; to provide a seamless way to select and embed images using Telescope&#39;s powerful fuzzy finding capabilities.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function()&#xA;  local telescope = require(&#34;telescope.builtin&#34;)&#xA;  local actions = require(&#34;telescope.actions&#34;)&#xA;  local action_state = require(&#34;telescope.actions.state&#34;)&#xA;&#xA;  telescope.find_files({&#xA;    attach_mappings = function(_, map)&#xA;      local function embed_image(prompt_bufnr)&#xA;        local entry = action_state.get_selected_entry()&#xA;        local filepath = entry[1]&#xA;        actions.close(prompt_bufnr)&#xA;&#xA;        local img_clip = require(&#34;img-clip&#34;)&#xA;        img_clip.paste_image(nil, filepath)&#xA;      end&#xA;&#xA;      map(&#34;i&#34;, &#34;&amp;lt;CR&amp;gt;&#34;, embed_image)&#xA;      map(&#34;n&#34;, &#34;&amp;lt;CR&amp;gt;&#34;, embed_image)&#xA;&#xA;      return true&#xA;    end,&#xA;  })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The above function should be bound to a keymap, e.g. through lazy.nvim.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Snacks.nvim&lt;/h3&gt; &#xA;&lt;p&gt;The plugin can be integrated with &lt;a href=&#34;https://github.com/folke/snacks.nvim&#34;&gt;Snacks.nvim picker&lt;/a&gt; which includes built-in support for previewing media files.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function()&#xA;    Snacks.picker.files {&#xA;    &#x9;ft = { &#34;jpg&#34;, &#34;jpeg&#34;, &#34;png&#34;, &#34;webp&#34; },&#xA;    &#x9;confirm = function(self, item, _)&#xA;    &#x9;    self:close()&#xA;    &#x9;    require(&#34;img-clip&#34;).paste_image({}, &#34;./&#34; .. item.file) -- ./ is necessary for img-clip to recognize it as path&#xA;    &#x9;end,&#xA;    }&#xA;end()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The above function should be bound to a keymap, e.g. through lazy.nvim.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Oil.nvim&lt;/h3&gt; &#xA;&lt;p&gt;The plugin also integrates with &lt;a href=&#34;https://github.com/stevearc/oil.nvim&#34;&gt;oil.nvim&lt;/a&gt;, providing a convenient way to browse and select images using Oil&#39;s file explorer.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function()&#xA;  local oil = require(&#34;oil&#34;)&#xA;  local filename = oil.get_cursor_entry().name&#xA;  local dir = oil.get_current_dir()&#xA;  oil.close()&#xA;&#xA;  local img_clip = require(&#34;img-clip&#34;)&#xA;  img_clip.paste_image({}, dir .. filename)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;The above function should be bound to a keymap, e.g. through lazy.nvim.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Alternatively, you can invoke img-clip.nvim directly from your oil.nvim configuration:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;keymaps = {&#xA;  [&#34;&amp;lt;leader&amp;gt;p&#34;] = function()&#xA;    local oil = require(&#34;oil&#34;)&#xA;    local filename = oil.get_cursor_entry().name&#xA;    local dir = oil.get_current_dir()&#xA;    oil.close()&#xA;&#xA;    local img_clip = require(&#34;img-clip&#34;)&#xA;    img_clip.paste_image({}, dir .. filename)&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üôå Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! If you have any ideas, suggestions, or bug reports, please open an issue on the GitHub repository.&lt;/p&gt;</summary>
  </entry>
</feed>