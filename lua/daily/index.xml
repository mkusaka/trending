<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-03T01:41:57Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dstein64/nvim-scrollview</title>
    <updated>2023-06-03T01:41:57Z</updated>
    <id>tag:github.com,2023-06-03:/dstein64/nvim-scrollview</id>
    <link href="https://github.com/dstein64/nvim-scrollview" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ“œðŸ“¶ A Neovim plugin that displays interactive vertical scrollbars and signs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/dstein64/nvim-scrollview/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/dstein64/nvim-scrollview/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;nvim-scrollview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-scrollview&lt;/code&gt; is a Neovim plugin that displays interactive vertical scrollbars and signs. The plugin is customizable (see &lt;code&gt;:help scrollview-configuration&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/dstein64/media/raw/main/nvim-scrollview/screenshot.svg?raw=true&#34; width=&#34;600&#34;&gt; &#xA;&lt;p&gt;&lt;sub&gt;(a scrollbar and signs can be seen near the right edge of the preceding image)&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handling for folds&lt;/li&gt; &#xA; &lt;li&gt;Scrollbars can be dragged with the mouse&lt;/li&gt; &#xA; &lt;li&gt;Partially transparent scrollbars so that text is not covered&lt;/li&gt; &#xA; &lt;li&gt;Signs (&lt;code&gt;diagnostics&lt;/code&gt; and &lt;code&gt;search&lt;/code&gt; enabled by default)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim&amp;gt;=0.5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Scrollbar mouse dragging requires mouse support (see &lt;code&gt;:help &#39;mouse&#39;&lt;/code&gt;) and &lt;code&gt;nvim&amp;gt;=0.6&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Signs require &lt;code&gt;nvim&amp;gt;=0.7&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;A package manager can be used to install &lt;code&gt;nvim-scrollview&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Examples&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;http://vimhelp.appspot.com/repeat.txt.html#packages&#34;&gt;Vim8 packages&lt;/a&gt;: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;git clone https://github.com/dstein64/nvim-scrollview ~/.local/share/nvim/site/pack/plugins/start/nvim-scrollview&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/gmarik/vundle&#34;&gt;Vundle&lt;/a&gt;: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;Plugin &#39;dstein64/nvim-scrollview&#39;&lt;/code&gt; to &lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;:PluginInstall&lt;/code&gt; or &lt;code&gt;$ nvim +PluginInstall +qall&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-pathogen&#34;&gt;Pathogen&lt;/a&gt;: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;code&gt;git clone --depth=1 https://github.com/dstein64/nvim-scrollview ~/.local/share/nvim/site/bundle/nvim-scrollview&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;Plug &#39;dstein64/nvim-scrollview&#39;, { &#39;branch&#39;: &#39;main&#39; }&lt;/code&gt; to &lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;:PlugInstall&lt;/code&gt; or &lt;code&gt;$ nvim +PlugInstall +qall&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;dein.vim&lt;/a&gt;: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;call dein#add(&#39;dstein64/nvim-scrollview&#39;)&lt;/code&gt; to &lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;:call dein#install()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;NeoBundle&lt;/a&gt;: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;NeoBundle &#39;dstein64/nvim-scrollview&#39;&lt;/code&gt; to &lt;code&gt;~/.config/nvim/init.vim&lt;/code&gt;&lt;/li&gt; &#xA;    &lt;li&gt;Re-open Neovim or execute &lt;code&gt;:source ~/.config/nvim/init.vim&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;Add &lt;code&gt;use &#39;dstein64/nvim-scrollview&#39;&lt;/code&gt; to the packer startup function&lt;/li&gt; &#xA;    &lt;li&gt;&lt;code&gt;:PackerInstall&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-scrollview&lt;/code&gt; works automatically, displaying interactive scrollbars.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ScrollViewDisable&lt;/code&gt; disables the plugin. When arguments are given, the specified sign groups are disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ScrollViewEnable&lt;/code&gt; enables the plugin. This is only necessary if nvim-scrollview has previously been disabled. When arguments are given, the specified sign groups are enabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ScrollViewToggle&lt;/code&gt; toggles the plugin. When arguments are given, the specified sign groups are toggled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ScrollViewRefresh&lt;/code&gt; refreshes the scrollbars and signs. This is relevant when the scrollbars or signs are out-of-sync, which can occur as a result of some window arrangement actions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:ScrollViewNext&lt;/code&gt;, &lt;code&gt;:ScrollViewPrev&lt;/code&gt;, &lt;code&gt;:ScrollViewFirst&lt;/code&gt;, and &lt;code&gt;ScrollViewLast&lt;/code&gt; move the cursor to lines with signs. Arguments can specify which sign groups are considered.&lt;/li&gt; &#xA; &lt;li&gt;The scrollbars can be dragged and signs can be clicked. This requires a corresponding mapping, which is automatically configured when &lt;code&gt;scrollview_auto_mouse&lt;/code&gt; is set (see &lt;code&gt;:help scrollview-mouse-customization&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Signs&lt;/h2&gt; &#xA;&lt;p&gt;There is built-in support for various types of signs (referred to as &#34;sign groups&#34;), listed below. The functionality is similar to the sign column, but with the same positioning logic as the scrollbar.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;conflicts&lt;/code&gt;: git merge conflicts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cursor&lt;/code&gt;: cursor position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;diagnostics&lt;/code&gt;: errors, warnings, info, and hints&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;folds&lt;/code&gt;: closed folds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;loclist&lt;/code&gt;: items on the location list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;marks&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;quickfix&lt;/code&gt;: items on the quickfix list&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;search&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;spell&lt;/code&gt;: spell check items when the &lt;code&gt;spell&lt;/code&gt; option is enabled&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;textwidth&lt;/code&gt;: line lengths exceeding the value of the textwidth option, when non-zero&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trail&lt;/code&gt;: trailing whitespace, when the &lt;code&gt;list&lt;/code&gt; option is enabled and the &lt;code&gt;listchars&lt;/code&gt; option includes &#34;trail&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;search&lt;/code&gt; and &lt;code&gt;diagnostics&lt;/code&gt; groups are enabled by default.&lt;/p&gt; &#xA;&lt;p&gt;The plugin was written so that it&#39;s possible to extend the sign functionality in a Neovim configuration file or with a plugin. See the documentation for details. An &lt;a href=&#34;https://gist.github.com/dstein64/b5d9431ebeacae1fb963efc3f2c94cf4&#34;&gt;example&lt;/a&gt; was created to show how support for &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt; could be implemented. Plugin authors can tag their repos with &lt;code&gt;scrollview-signs&lt;/code&gt; for &lt;a href=&#34;https://github.com/topics/scrollview-signs&#34;&gt;discoverability&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;There are various settings that can be configured. Please see the documentation for details.&lt;/p&gt; &#xA;&lt;h4&gt;VimScript Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:scrollview_excluded_filetypes = [&#39;nerdtree&#39;]&#xA;let g:scrollview_current_only = v:true&#xA;let g:scrollview_winblend = 75&#xA;&#34; Position the scrollbar at the 80th character of the buffer&#xA;let g:scrollview_base = &#39;buffer&#39;&#xA;let g:scrollview_column = 80&#xA;&#34; Enable all sign groups (defaults to [&#39;diagnostics&#39;, &#39;search&#39;]).&#xA;&#34; Set to the empty list to disable all sign groups.&#xA;let g:scrollview_signs_on_startup = [&#39;all&#39;]&#xA;&#34; Show diagnostic signs only for errors.&#xA;let g:scrollview_diagnostics_severities =&#xA;      \ [luaeval(&#39;vim.diagnostic.severity.ERROR&#39;)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Lua Setup Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;scrollview&#39;).setup({&#xA;  excluded_filetypes = {&#39;nerdtree&#39;},&#xA;  current_only = true,&#xA;  winblend = 75,&#xA;  base = &#39;buffer&#39;,&#xA;  column = 80,&#xA;  signs_on_startup = {&#39;all&#39;},&#xA;  diagnostics_severities = {vim.diagnostic.severity.ERROR}&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be accessed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nvim&#34;&gt;:help nvim-scrollview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The underlying markup is in &lt;a href=&#34;https://raw.githubusercontent.com/dstein64/nvim-scrollview/main/doc/scrollview.txt&#34;&gt;scrollview.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Issues&lt;/h4&gt; &#xA;&lt;p&gt;Documentation for issues, along with some workarounds, can be accessed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nvim&#34;&gt;:help scrollview-issues&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some of the known issues are regarding scrollbar synchronization, error messages, session restoration, and scrollbar floating windows being included in the window count returned by &lt;code&gt;winnr(&#39;$&#39;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The source code has an &lt;a href=&#34;https://en.wikipedia.org/wiki/MIT_License&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dstein64/nvim-scrollview/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bkader/TidyPlates_WoTLK</title>
    <updated>2023-06-03T01:41:57Z</updated>
    <id>tag:github.com,2023-06-03:/bkader/TidyPlates_WoTLK</id>
    <link href="https://github.com/bkader/TidyPlates_WoTLK" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Backported TidyPlates &amp; TidyPlates_ThreatPlates.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TidyPlates v6.5.0 Backported for WoTLK&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;TidyPlates ThreatPlates&lt;/strong&gt; &lt;code&gt;v5.7&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bkader/TidyPlates_WoTLK/archive/refs/heads/main.zip&#34;&gt;Download the package.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open the archive, then open folder &lt;code&gt;TidyPlates_WoTLK-main&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;TidyPlates&lt;/code&gt; and any theme you want to use inside &lt;code&gt;Interface\AddOns&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enjoy!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Show Love &amp;amp; Support&lt;/h2&gt; &#xA;&lt;p&gt;Though it&#39;s not required and I have never asked for it but people keep asking for it, if you want to show love and support, your PayPal donations are most welcome to &lt;strong&gt;bkader[at]email.com&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Envi-Scripts/envi-receipts</title>
    <updated>2023-06-03T01:41:57Z</updated>
    <id>tag:github.com,2023-06-03:/Envi-Scripts/envi-receipts</id>
    <link href="https://github.com/Envi-Scripts/envi-receipts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Envi-Receipts&lt;/h1&gt; &#xA;&lt;p&gt;Envi-Receipts is a free open-source resource for ESX or QB-Core This script utilizes item metadata and a simple UI to create an immersive shopping experience!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOW SUPPORTS OX INVENTORY, QB-INVENTORY AND QS-INVENTORY V2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integration with ESX/QB-Core&lt;/strong&gt;: The system is compatible with popular frameworks, ensuring seamless functionality with your existing setup.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable item display&lt;/strong&gt;: You can easily add metadata to display item information in our realistic user interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ox_lib Support&lt;/strong&gt;: The Receipt System requires and supports ox_lib v3 for a clean user experience.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple and Advanced Usage&lt;/strong&gt;: The system provides both simple and advanced methods for using the Receipt System, catering to users with different needs and skill levels.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Server-side exports&lt;/strong&gt;: Several server-side exports are available for integrating the Receipt System with other resources or utilizing more advanced functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;User-friendly Menus&lt;/strong&gt;: The Receipt System offers an intuitive in-game menu for adding, reviewing, and managing items and receipts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible receipt printing&lt;/strong&gt;: Users can print receipts with customizable details, such as payment status and the number of copies.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add items to receipt&lt;/strong&gt;: The Receipt System allows users to easily add items to the bill by entering their details in the provided menu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clear receipt&lt;/strong&gt;: Users can clear the bill to remove all items and start fresh.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Show receipt&lt;/strong&gt;: The Receipt System provides a feature to review the items added to the receipt and their prices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Print receipt&lt;/strong&gt;: The system allows users to give a receipt to a player with the bill&#39;s contents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple item management&lt;/strong&gt;: You can add as many items as needed via simple or advanced methods, and choose to print the bill via the item, providing a lot of flexibility and possibilities.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realistic UI&lt;/strong&gt;: View the receipts and all it&#39;s info including tax, sub-total, itemised list and more!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tax System&lt;/strong&gt;: Will allow you to set your own tax percentage in the config file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AP-Government Compatibility&lt;/strong&gt;: Easy linked with AP Script&#39;s Government system to automatically calculate current item tax!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Custom Prop from BzZz&lt;/strong&gt;: Payment terminal prop from the amazingly talented BzZz! - &lt;a href=&#34;https://bzzz.tebex.io&#34;&gt;https://bzzz.tebex.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Preview: &lt;a href=&#34;https://youtu.be/srlHgmRgGWY&#34;&gt;https://youtu.be/srlHgmRgGWY&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Envi-Scripts/envi-receipts/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Envi-Scripts/envi-receipts/main/#11-add-items-into-qb-core&#34;&gt;Add Items into inventory/ qb-core&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Envi-Scripts/envi-receipts/main/#12-add-metadata-to-display-in-appjs&#34;&gt;Add Metadata to Display in App.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Envi-Scripts/envi-receipts/main/#13-ensure-you-have-ox_lib-v3-installed&#34;&gt;Ensure You Have ox_lib v3 Installed&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Envi-Scripts/envi-receipts/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Envi-Scripts/envi-receipts/main/#21-simple-method&#34;&gt;Simple Method&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Envi-Scripts/envi-receipts/main/#22-advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;1.1. Add Items into your qb-core or ox_inventory! (&#39;receipt&#39; and &#39;payment_terminal&#39;)&lt;/h3&gt; &#xA;&lt;h3&gt;1.1.2 Set up your items like this for additonal functionality! &lt;strong&gt;(OX INVENTORY ONLY)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;[&#39;receipt&#39;] = {&#xA;&#x9;label = &#39;Receipt&#39;,&#xA;&#x9;weight = 20, &#xA;&#x9;stack = false,&#xA;&#x9;close = true,&#xA;&#x9;description = nil,&#xA;&#x9;buttons = {&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;label = &#39;Show Receipt&#39;,&#xA;&#x9;&#x9;&#x9;action = function(slot)&#xA;&#x9;&#x9;&#x9;&#x9;TriggerEvent(&#39;envi-receipts:showReceiptToClosestPlayer&#39;, slot)&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;},&#xA;&#xA;[&#39;payment_terminal&#39;] = {&#xA;&#x9;label = &#39;Receipt Printer&#39;,&#xA;&#x9;weight = 2000, &#xA;&#x9;stack = false,&#xA;&#x9;close = true,&#xA;&#x9;description = &#39;A handy device for printing receipts on-the-go!&#39;,&#xA;&#x9;buttons = {&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;label = &#39;Print Receipt&#39;,&#xA;&#x9;&#x9;&#x9;action = function()&#xA;&#x9;&#x9;&#x9;&#x9;TriggerEvent(&#39;envi-receipts:quickPrint&#39;)&#xA;&#x9;&#x9;&#x9;end&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before using the Receipt System, ensure that you have added the necessary items into the appropriate resource. This will enable the system to recognize and process the items needed.&lt;/p&gt; &#xA;&lt;h3&gt;1.2. Add Metadata to Display in App.js &lt;strong&gt;(QB-INVENTORY ONLY)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To display the item information, insert the following code into your app.js file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;} else if (itemData.name == &#34;receipt&#34;) {&#xA;  var items = &#34;&#34;;&#xA;  var i = 1;&#xA;  while (itemData.info[&#34;item&#34; + i]) {&#xA;    items += &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Item &#34; + i + &#34;: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;&#34; + itemData.info[&#34;item&#34; + i] + &#34; - $&#34; + itemData.info[&#34;price&#34; + i] + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34;;&#xA;    i++;&#xA;  }&#xA;  $(&#34;.item-info-title&#34;).html(&#34;&amp;lt;p&amp;gt;&#34; + itemData.label + &#34;&amp;lt;/p&amp;gt;&#34;);&#xA;  $(&#34;.item-info-description&#34;).html(&#xA;    &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Date: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;&#34; + itemData.info.date + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;    &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Time: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;&#34; + itemData.info.time + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;    items +&#xA;    &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Total: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;$&#34; + itemData.info.total + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;    &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Tax Amount: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;$&#34; + itemData.info.tax_amount + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;    &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Total After Tax: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;$&#34; + itemData.info.total_after_tax + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;    &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Status: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;&#34; + itemData.info.description.split(&#39; - &#39;).pop() + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.2.2. Add Metadata to Display in qs-inventory/config/metadata.js &lt;strong&gt;(QS-INVENTORY ONLY)&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;        } else if (itemData.name == &#34;receipt&#34;) {&#xA;            $(&#34;.item-info-title&#34;).html(&#34;&amp;lt;p&amp;gt;&#34; + itemData.label + &#34;&amp;lt;/p&amp;gt;&#34;);&#xA;            $(&#34;.item-info-description&#34;).html(&#xA;              &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Date: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;&#34; + itemData.info.date + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;              &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Heure: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;&#34; + itemData.info.time + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;              &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Total: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;$&#34; + itemData.info.total + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;              &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Tax: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;$&#34; + itemData.info.tax_amount + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;              &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Total aprÃ¨s Tax: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;$&#34; + itemData.info.total_after_tax + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34; +&#xA;              &#34;&amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Status: &amp;lt;/strong&amp;gt;&amp;lt;span&amp;gt;&#34; + itemData.info.description + &#34;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&#34;&#xA;            );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.2.3. Register The Receipt Item in your Ox_Inventory (&lt;strong&gt;ONLY IF YOU ARE USING OX WITH QB-CORE!!&lt;/strong&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Add this to &lt;em&gt;ox_inventory &amp;gt; modules &amp;gt; items &amp;gt; client.lua&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Item(&#39;receipt&#39;, function(data, slot)&#xA;    TriggerEvent(&#34;envi-receipts:useReceipt&#34;, slot.metadata)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;1.3. Ensure You Have ox_lib Installed&lt;/h3&gt; &#xA;&lt;p&gt;Make sure you have ox_lib installed on your server. This library must be started before envi-receipts.&lt;/p&gt; &#xA;&lt;h2&gt;2. Usage&lt;/h2&gt; &#xA;&lt;h3&gt;2.1. Simple Method&lt;/h3&gt; &#xA;&lt;p&gt;The simple method of using the Receipt System involves the following steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger menu via item&lt;/strong&gt;: To open the Receipt System menu, interact with the in-game item.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add items manually&lt;/strong&gt;: Once the menu is open, you can add items to the receipt by entering their details in the provided menu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Show Basket&lt;/strong&gt;: You can review the items added to the receipt and their prices by checking the basket. If you need to remove any items, simply click the &#34;Clear Basket&#34; button.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Print Receipt&lt;/strong&gt;: After finalizing the items and their prices, click the &#34;Print Receipt&#34; button. You will be prompted to select whether the bill is paid in full or not and the number of receipt copies you want to print.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;2.2. Advanced Usage&lt;/h3&gt; &#xA;&lt;p&gt;To integrate the Receipt System into other resources or utilize server exports for more advanced functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;addToBill&lt;/strong&gt; This server-side export allows you to add an item to a player&#39;s bill:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- addToBill(player, itemName, itemPrice)&#xA;exports[&#39;envi-receipts&#39;]:addToBill(source, itemName, itemPrice)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;clearBill&lt;/strong&gt; This server-side export allows you to clear a player&#39;s bill:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- clearBill(player)&#xA;exports[&#39;envi-receipts&#39;]:clearBill(source)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;showBasket&lt;/strong&gt; This server-side export allows you to get a player&#39;s bill as a table of items and their prices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- showBasket(player)&#xA;local basket = exports[&#39;envi-receipts&#39;]:showBasket(source)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;giveBill&lt;/strong&gt; This server-side export allows you to give a receipt to a player with the bill&#39;s contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- giveBill(player, howMany, paid)&#xA;exports[&#39;envi-receipts&#39;]:giveBill(source, 1, true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you want to give a receipt for a single item, you can follow this sequence:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Clear the bill. Add the item to the bill. Give the bill to the player. Clear the bill again.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to do this after a QBCore.Function.AddItem in another script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;RegisterServerEvent(&#39;burger:example&#39;, function(source)&#xA; local Player = QB.Functions.GetPlayer(source)&#xA; Player.Functions.AddItem(&#34;burger&#34;, 1)&#xA; exports[&#39;envi-receipts&#39;]:clearBill(source)      -- clears any old data&#xA; exports[&#39;envi-receipts&#39;]:addToBill(source, &#34;Burger&#34;, 50)   -- adds it to the total bill&#xA; exports[&#39;envi-receipts&#39;]:giveBill(source, 1, true)  -- prints the items currently added and rewards receipt item&#xA; exports[&#39;envi-receipts&#39;]:clearBill(source)      -- clear the bill again for good measure&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add as many items as you like/ choose when to print the bill via the item. &lt;strong&gt;Lots of possibilities!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>