<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-13T01:33:30Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-neotest/neotest-go</title>
    <updated>2023-09-13T01:33:30Z</updated>
    <id>tag:github.com,2023-09-13:/nvim-neotest/neotest-go</id>
    <link href="https://github.com/nvim-neotest/neotest-go" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neotest-go&lt;/h1&gt; &#xA;&lt;p&gt;This plugin provides a go(lang) adapter for the &lt;a href=&#34;https://github.com/rcarriga/neotest&#34;&gt;Neotest&lt;/a&gt; framework.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Using packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;  &#34;nvim-neotest/neotest&#34;,&#xA;  requires = {&#xA;    &#34;nvim-neotest/neotest-go&#34;,&#xA;    -- Your other test adapters here&#xA;  },&#xA;  config = function()&#xA;    -- get neotest namespace (api call creates or returns namespace)&#xA;    local neotest_ns = vim.api.nvim_create_namespace(&#34;neotest&#34;)&#xA;    vim.diagnostic.config({&#xA;      virtual_text = {&#xA;        format = function(diagnostic)&#xA;          local message =&#xA;            diagnostic.message:gsub(&#34;\n&#34;, &#34; &#34;):gsub(&#34;\t&#34;, &#34; &#34;):gsub(&#34;%s+&#34;, &#34; &#34;):gsub(&#34;^%s+&#34;, &#34;&#34;)&#xA;          return message&#xA;        end,&#xA;      },&#xA;    }, neotest_ns)&#xA;    require(&#34;neotest&#34;).setup({&#xA;      -- your neotest config here&#xA;      adapters = {&#xA;        require(&#34;neotest-go&#34;),&#xA;      },&#xA;    })&#xA;  end,&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above mentioned &lt;code&gt;vim.diagnostic.config&lt;/code&gt; is optional but recommended if you enabled the &lt;code&gt;diagnostic&lt;/code&gt; option of neotest. Especially &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;testify&lt;/a&gt; makes heavy use of tabs and newlines in the error messages, which reduces the readability of the generated virtual text otherwise.&lt;/p&gt; &#xA;&lt;p&gt;You can also supply optional arguments to the setup function if you want to enable experimental features or provide more arguments to &lt;code&gt;go test&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).setup({&#xA;  adapters = {&#xA;    require(&#34;neotest-go&#34;)({&#xA;      experimental = {&#xA;        test_table = true,&#xA;      },&#xA;      args = { &#34;-count=1&#34;, &#34;-timeout=60s&#34; }&#xA;    })&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;: all usages of &lt;code&gt;require(&#39;neotest&#39;).run.run&lt;/code&gt; can be mapped to a command in your config (this is not included and should be done by the user)&lt;/p&gt; &#xA;&lt;h4&gt;Test single function&lt;/h4&gt; &#xA;&lt;p&gt;To test a single test hover over the test and run &lt;code&gt;require(&#39;neotest&#39;).run.run()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Please note that &lt;code&gt;testify&lt;/code&gt; test methods cannot be run using this function as &lt;code&gt;go test&lt;/code&gt; cannot run these tests individually using the &lt;code&gt;-run&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h4&gt;Test file&lt;/h4&gt; &#xA;&lt;p&gt;To test a file run &lt;code&gt;require(&#39;neotest&#39;).run.run(vim.fn.expand(&#39;%&#39;))&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Test directory&lt;/h4&gt; &#xA;&lt;p&gt;To test a directory run &lt;code&gt;require(&#39;neotest&#39;).run.run(&#34;path/to/directory&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Test suite&lt;/h4&gt; &#xA;&lt;p&gt;To test the full test suite run &lt;code&gt;require(&#39;neotest&#39;).run.run(&#34;path/to/root_project&#34;)&lt;/code&gt; e.g. &lt;code&gt;require(&#39;neotest&#39;).run.run(vim.fn.getcwd())&lt;/code&gt;, presuming that vim&#39;s directory is the same as the project root&lt;/p&gt; &#xA;&lt;h4&gt;Additional arguments&lt;/h4&gt; &#xA;&lt;p&gt;Additional arguments for the go test command can be sent using the &lt;code&gt;extra_args&lt;/code&gt; field e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neotest&#39;).run.run({path, extra_args = {&#34;-race&#34;}})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project is maintained by the nvim golang community. Please raise a PR if you are interested in adding new functionality or fixing any bugs If you are unsure of how this plugin works please read the &lt;a href=&#34;https://github.com/nvim-neotest/neotest#writing-adapters&#34;&gt;Writing adapters&lt;/a&gt; section of the Neotest README.&lt;/p&gt; &#xA;&lt;p&gt;If you are new to &lt;code&gt;lua&lt;/code&gt; please follow any of the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learnxinyminutes.com/docs/lua/&#34;&gt;https://learnxinyminutes.com/docs/lua/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lua.org/manual/5.1/&#34;&gt;https://www.lua.org/manual/5.1/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide&#34;&gt;https://github.com/nanotee/nvim-lua-guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>altermo/ultimate-autopair.nvim</title>
    <updated>2023-09-13T01:33:30Z</updated>
    <id>tag:github.com,2023-09-13:/altermo/ultimate-autopair.nvim</id>
    <link href="https://github.com/altermo/ultimate-autopair.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim autopair plugin designed to have all the features that an autopair plugin needs.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;&lt;span&gt;❗&lt;/span&gt; Ultimate-autopair is currently in the &lt;em&gt;alpha&lt;/em&gt; stage of development. Some aspects may change or break, and documentation might occasionally be inaccurate.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Ultimate-autopair.nvim 0.6.0&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/altermo/ultimate-autopair.nvim&#34;&gt;Ultimate-autopair&lt;/a&gt; plugin aims to always work as you expect, while making it relatively easy to configure. It has many features which other auto-pairing plugins lack: like multiline support, string/escape filtering and more. It is fully tested and has good docs.&lt;/p&gt; &#xA;&lt;p&gt;For development version, check out &lt;a href=&#34;https://github.com/altermo/ultimate-autopair.nvim/tree/development&#34;&gt;development&lt;/a&gt;&lt;br&gt; Requires &lt;strong&gt;neovim 0.9&lt;/strong&gt; (for older versions of neovim, check previous versions of plugin)&lt;br&gt; For many features, including string filtering, requires &lt;strong&gt;treesitter&lt;/strong&gt;.&lt;br&gt; &lt;span&gt;❗&lt;/span&gt; If your coming from &lt;code&gt;v0.5.3&lt;/code&gt; and want to update: remove the plugin totally and reinstall.\&lt;/p&gt; &#xA;&lt;p&gt;For new users, check out starter documentation (&lt;code&gt;:help ultimate-autopair&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;changelog of version 0.6.0&lt;/h2&gt; &#xA;&lt;details open=&#34;true&#34;&gt;&#xA; &lt;summary&gt;&lt;b&gt;BREAKING CHANGES&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;If your coming from a previous version with broken config, check out &lt;a href=&#34;https://raw.githubusercontent.com/altermo/ultimate-autopair.nvim/v0.6/Q&amp;amp;A.md&#34;&gt;Q&amp;amp;A&lt;/a&gt; first&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;string&lt;/code&gt; extension got removed in favour of &lt;code&gt;tsnode&lt;/code&gt; string node detection&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rule&lt;/code&gt; extension got removed in favour of new extension &lt;code&gt;cond&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;sub&lt;/code&gt; extension got removed until a better solution can be found&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Major new features&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;New extension &lt;code&gt;cond&lt;/code&gt;: create conditions&lt;/li&gt; &#xA;  &lt;li&gt;You can now use multiline&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tabout&lt;/code&gt; was moved from experimental to default (requires manual enable)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;b&gt;Major code improvements&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Tests now run over 1000% faster&lt;/li&gt; &#xA;  &lt;li&gt;Most things are type-hinted&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details open=&#34;true&#34;&gt;&#xA; &lt;summary&gt;&lt;b&gt;Packer&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use{&#xA;    &#39;altermo/ultimate-autopair.nvim&#39;,&#xA;    event={&#39;InsertEnter&#39;,&#39;CmdlineEnter&#39;},&#xA;    branch=&#39;v0.6&#39;,&#xA;    config=function ()&#xA;        require(&#39;ultimate-autopair&#39;).setup({&#xA;                --Config goes here&#xA;                })&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt;&#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Lazy&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;altermo/ultimate-autopair.nvim&#39;,&#xA;    event={&#39;InsertEnter&#39;,&#39;CmdlineEnter&#39;},&#xA;    branch=&#39;v0.6&#39;,&#xA;    opts={&#xA;        --Config goes here&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;p&gt;For the default configuration, refer to the documentation (&lt;code&gt;:help ultimate-autopair-default-config&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;demo&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://github.com/altermo/ultimate-autopair.nvim/assets/107814000/a30ba4fd-0a3b-49af-bcd8-67413c9a86d1&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Other plugins to supercharge auto-pairing&lt;/h3&gt; &#xA;&lt;p&gt;These are some other plugins which are related to pairing which have features that ultimate-autopair does not have.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RRethy/nvim-treesitter-endwise&#34;&gt;endwise&lt;/a&gt; wisely add &lt;code&gt;end&lt;/code&gt; in lua, ruby, etc...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abecodes/tabout.nvim&#34;&gt;tabout&lt;/a&gt; tab out of tsnode objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kylechui/nvim-surround&#34;&gt;surround&lt;/a&gt; delete, change surrounding parentheses and much more...&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-ts-autotag&#34;&gt;autotag&lt;/a&gt; auto add html tags&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;nvim-autopairs&lt;/a&gt; integration: read &lt;code&gt;:h ultimate-autopair-use-with-npairs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Donate&lt;/h3&gt; &#xA;&lt;p&gt;If you want to donate then you need to find the correct link (hint: 50₁₀):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;0a&lt;/a&gt; &lt;a href=&#34;&#34;&gt;0b&lt;/a&gt; &lt;a href=&#34;&#34;&gt;0c&lt;/a&gt; &lt;a href=&#34;&#34;&gt;0d&lt;/a&gt; &lt;a href=&#34;&#34;&gt;0e&lt;/a&gt; &lt;a href=&#34;&#34;&gt;0f&lt;/a&gt; &lt;a href=&#34;&#34;&gt;0g&lt;/a&gt; &lt;a href=&#34;&#34;&gt;0h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;1a&lt;/a&gt; &lt;a href=&#34;&#34;&gt;1b&lt;/a&gt; &lt;a href=&#34;&#34;&gt;1c&lt;/a&gt; &lt;a href=&#34;&#34;&gt;1d&lt;/a&gt; &lt;a href=&#34;&#34;&gt;1e&lt;/a&gt; &lt;a href=&#34;&#34;&gt;1f&lt;/a&gt; &lt;a href=&#34;&#34;&gt;1g&lt;/a&gt; &lt;a href=&#34;&#34;&gt;1h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;2a&lt;/a&gt; &lt;a href=&#34;&#34;&gt;2b&lt;/a&gt; &lt;a href=&#34;&#34;&gt;2c&lt;/a&gt; &lt;a href=&#34;&#34;&gt;2d&lt;/a&gt; &lt;a href=&#34;&#34;&gt;2e&lt;/a&gt; &lt;a href=&#34;&#34;&gt;2f&lt;/a&gt; &lt;a href=&#34;&#34;&gt;2g&lt;/a&gt; &lt;a href=&#34;&#34;&gt;2h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;3a&lt;/a&gt; &lt;a href=&#34;&#34;&gt;3b&lt;/a&gt; &lt;a href=&#34;&#34;&gt;3c&lt;/a&gt; &lt;a href=&#34;&#34;&gt;3d&lt;/a&gt; &lt;a href=&#34;&#34;&gt;3e&lt;/a&gt; &lt;a href=&#34;&#34;&gt;3f&lt;/a&gt; &lt;a href=&#34;&#34;&gt;3g&lt;/a&gt; &lt;a href=&#34;&#34;&gt;3h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;4a&lt;/a&gt; &lt;a href=&#34;&#34;&gt;4b&lt;/a&gt; &lt;a href=&#34;&#34;&gt;4c&lt;/a&gt; &lt;a href=&#34;&#34;&gt;4d&lt;/a&gt; &lt;a href=&#34;&#34;&gt;4e&lt;/a&gt; &lt;a href=&#34;&#34;&gt;4f&lt;/a&gt; &lt;a href=&#34;&#34;&gt;4g&lt;/a&gt; &lt;a href=&#34;&#34;&gt;4h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;5a&lt;/a&gt; &lt;a href=&#34;&#34;&gt;5b&lt;/a&gt; &lt;a href=&#34;&#34;&gt;5c&lt;/a&gt; &lt;a href=&#34;&#34;&gt;5d&lt;/a&gt; &lt;a href=&#34;&#34;&gt;5e&lt;/a&gt; &lt;a href=&#34;&#34;&gt;5f&lt;/a&gt; &lt;a href=&#34;&#34;&gt;5g&lt;/a&gt; &lt;a href=&#34;&#34;&gt;5h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;6a&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/altermo&#34;&gt;6b&lt;/a&gt; &lt;a href=&#34;&#34;&gt;6c&lt;/a&gt; &lt;a href=&#34;&#34;&gt;6d&lt;/a&gt; &lt;a href=&#34;&#34;&gt;6e&lt;/a&gt; &lt;a href=&#34;&#34;&gt;6f&lt;/a&gt; &lt;a href=&#34;&#34;&gt;6g&lt;/a&gt; &lt;a href=&#34;&#34;&gt;6h&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;7a&lt;/a&gt; &lt;a href=&#34;&#34;&gt;7b&lt;/a&gt; &lt;a href=&#34;&#34;&gt;7c&lt;/a&gt; &lt;a href=&#34;&#34;&gt;7d&lt;/a&gt; &lt;a href=&#34;&#34;&gt;7e&lt;/a&gt; &lt;a href=&#34;&#34;&gt;7f&lt;/a&gt; &lt;a href=&#34;&#34;&gt;7g&lt;/a&gt; &lt;a href=&#34;&#34;&gt;7h&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Chat&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#ultimate-autopair.nvim:matrix.org&#34;&gt;matrix&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>piersolenski/telescope-import.nvim</title>
    <updated>2023-09-13T01:33:30Z</updated>
    <id>tag:github.com,2023-09-13:/piersolenski/telescope-import.nvim</id>
    <link href="https://github.com/piersolenski/telescope-import.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Import modules with ease&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;🚢 telescope-import.nvim&lt;/h1&gt; &#xA;&lt;p&gt;An extension for &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; that allows you to import modules faster based on what you&#39;ve already imported in your project.&lt;/p&gt; &#xA;&lt;p&gt;Often we find ourselves importing the same modules over and over again in an existing project. Rather than typing out import statements from scratch or yanking them from other existing files, &lt;code&gt;nvim-telesope&lt;/code&gt; searches your project for existing import statements giving you a faster way to add them to the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/piersolenski/telescope-import.nvim/assets/1285419/014753e3-ea7b-4bad-9f86-fb2566bf27c1&#34;&gt;https://github.com/piersolenski/telescope-import.nvim/assets/1285419/014753e3-ea7b-4bad-9f86-fb2566bf27c1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🤖 Supported languages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Javascript / Typescript&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔩 Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/BurntSushi/ripgrep&#34;&gt;ripgrep&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lazy&#xA;{&#xA;  &#39;piersolenski/telescope-import.nvim&#39;,&#xA;  requires = &#39;nvim-telescope/telescope.nvim&#39;&#xA;  config = function()&#xA;    require(&#34;telescope&#34;).load_extension(&#34;import&#34;)&#xA;  end&#xA;}&#xA;&#xA;## ⚙️ Configuration&#xA;&#xA;```lua&#xA;require(&#34;telescope&#34;).setup({&#xA;  extensions = {&#xA;    import = {&#xA;      -- Add imports to the top of the file keeping the cursor in place&#xA;      insert_at_top = true,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Telescope import&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Additional language support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope-import.nvim&lt;/code&gt; uses regex to match import/require patterns. You can add your own by submitting a pull request that adds a filetype config to &lt;code&gt;filetypes.lua&lt;/code&gt;. The format should be as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- The regex for the import statement&#xA;  regex = [[^(?:import(?:[\&#34;&#39;\s]*([\w*{}\n, ]+)from\s*)?[\&#34;&#39;\s](.*?)[\&#34;&#39;\s].*)]],&#xA;  -- The Vim filetypes&#xA;  filetypes = { &#34;typescript&#34;, &#34;typescriptreact&#34;, &#34;javascript&#34;, &#34;react&#34; },&#xA;  -- The filetypes that ripgrep supports (find these via `rg --type-list`)&#xA;  extensions = { &#34;js&#34;, &#34;ts&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>