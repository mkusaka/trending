<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-28T01:46:03Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-neorg/neorg</title>
    <updated>2022-06-28T01:46:03Z</updated>
    <id>tag:github.com,2022-06-28:/nvim-neorg/neorg</id>
    <link href="https://github.com/nvim-neorg/neorg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Modernity meets insane extensibility. The future of organizing your life in Neovim.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/res/neorg.svg?sanitize=true&#34; width=&#34;300&#34;&gt; &#xA; &lt;h1&gt;Neorg - An Organized Future&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://neovim.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim%200.6+-brightgreen?style=for-the-badge&#34; alt=&#34;Neovim&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.gg/T6EgTAX7ht&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/discord-join-7289da?style=for-the-badge&amp;amp;logo=discord&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-GPL%20v3-brightgreen?style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#wip&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/status-WIP-informational?style=for-the-badge&#34; alt=&#34;Status&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Your New Life Organization Tool - All in Lua&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#summary&#34;&gt;Summary&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-showcase&#34;&gt;Showcase&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-installation&#34;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-setup&#34;&gt;Setup&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-usage&#34;&gt;Usage&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-modules&#34;&gt;Modules&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-roadmap&#34;&gt;Roadmap&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-philosophy&#34;&gt;Philosophy&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-faq&#34;&gt;FAQ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Neorg (&lt;em&gt;Neo&lt;/em&gt; - new, &lt;em&gt;org&lt;/em&gt; - organization) is a tool designed to reimagine organization as you know it. Grab some coffee, start writing some notes, let your editor handle the rest.&lt;/p&gt; &#xA;&lt;h3&gt;Why do we need Neorg?&lt;/h3&gt; &#xA;&lt;p&gt;There are currently projects designed to &lt;a href=&#34;https://github.com/kristijanhusak/orgmode.nvim&#34;&gt;clone org-mode from emacs&lt;/a&gt;, then what is the goal of this project?&lt;/p&gt; &#xA;&lt;p&gt;Whilst those projects are amazing, it&#39;s simply not enough for us. We need our &lt;em&gt;own, &lt;strong&gt;better&lt;/strong&gt;&lt;/em&gt; solution - one that will surpass &lt;em&gt;every&lt;/em&gt; other text editor. It&#39;s through our frustration of no native solution for Neovim and inconsistencies in the most popular markup formats that Neorg was born.&lt;/p&gt; &#xA;&lt;p&gt;To learn more about the philosophy of the project check the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/#-philosophy&#34;&gt;philosophy&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h6&gt;&lt;span&gt;‚ùó&lt;/span&gt; &lt;strong&gt;IMPORTANT&lt;/strong&gt;: Neorg is &lt;em&gt;alpha&lt;/em&gt; software. We consider it stable however be prepared for changes and potentially outdated documentation. We are advancing fast and while we are doing our best to keep the documentation up-to-date, this may not always be possible.&lt;/h6&gt; &#xA;&lt;h2&gt;üåü Showcase&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;A `.norg` file:&lt;/summary&gt; &#xA; &lt;img width=&#34;700&#34; alt=&#34;Showcase image of a Neorg document&#34; src=&#34;https://user-images.githubusercontent.com/76052559/150838408-1a021d7b-1891-4cab-b16e-6b755e741e87.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Concealing module enabled:&lt;/summary&gt; &#xA; &lt;img width=&#34;700&#34; alt=&#34;Image of a Neorg document with the concealer module enabled.&#34; src=&#34;https://user-images.githubusercontent.com/76052559/150838418-b443b92d-186a-45cb-ba84-06f03cdeea8a.png&#34;&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;First class treesitter support:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151668244-9805afc4-8c50-4925-85ec-1098aff5ede6.gif&#34; alt=&#34;First class treesitter support&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Treesitter powered editing:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151614059-41b590cd-07ea-437c-84b9-536de6d1adfa.gif&#34; alt=&#34;Treesitter powered editing&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Manage your tasks and projects with the GTD module:&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See your current projects&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151700321-e6912aff-2e87-409b-986e-dff37904b51b.gif&#34; alt=&#34;See your current projects&#34;&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Create a new task&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151699879-3a04518b-16e6-4eb4-b765-678a15b90fb4.gif&#34; alt=&#34;Create a new task&#34;&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Edit tasks in an efficient manner through the UI&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151700653-89c30e99-68e0-4873-8e1a-ecd25dd271c2.gif&#34; alt=&#34;Edit tasks in an efficient manner through the UI&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;And much more...&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Powerpoint-like presentations in Neovim with the presenter module:&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151674065-ed397716-9d26-4efc-9c2d-2dfdb5539edf.gif&#34; alt=&#34;Powerpoint-like presentations in Neovim with the presenter module&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Get syntax highlighting for any language supported by Neovim:&lt;/summary&gt; &#xA; &lt;p&gt;Plus fancy completion powered by &lt;code&gt;nvim-cmp&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/76052559/151668015-39a50439-5c95-4a18-9970-090fb68cfc0b.gif&#34; alt=&#34;Get syntax highlighting for any language supported by Neovim&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üîß Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Neorg requires at least Neovim 0.6+ to operate.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install it through your favorite plugin manager:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    config = function()&#xA;        require(&#39;neorg&#39;).setup {&#xA;            ... -- check out setup part...&#xA;        }&#xA;    end,&#xA;    requires = &#34;nvim-lua/plenary.nvim&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Every time Neorg hits a new release, a new tag is created by us, so you don&#39;t have to worry about all the updates inbetween. That means, adding &lt;code&gt;tag = &#34;*&#34;&lt;/code&gt; in Packer will update to latest stable release.&lt;/p&gt; &lt;p&gt;You can also pin Neorg to one specific version through e.g. &lt;code&gt;tag = &#34;0.0.9&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer (with lazyloading)&lt;/a&gt;:&lt;/p&gt; &lt;p&gt;Want to lazy load? Know that you&#39;ll have to jump through some hoops and hurdles to get it to work perfectly. You can use the &lt;code&gt;ft&lt;/code&gt; key to load Neorg only upon entering a &lt;code&gt;.norg&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    -- tag = &#34;latest&#34;,&#xA;    ft = &#34;norg&#34;,&#xA;    after = &#34;nvim-treesitter&#34;, -- You may want to specify Telescope here as well&#xA;    config = function()&#xA;        require(&#39;neorg&#39;).setup {&#xA;            ...&#xA;        }&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Although it&#39;s proven to work for a lot of people, you might need additional setups depending on how your lazyloading system is configured.&lt;/p&gt; &lt;p&gt;One important thing to ask yourself is: &#34;is it really worth it?&#34;. Neorg practically lazy loads itself: only a few lines of code are run on startup, these lines check whether the current extension is &lt;code&gt;.norg&lt;/code&gt;, if it&#39;s not then nothing else loads. You shouldn&#39;t have to worry about performance issues when it comes to startup, but hey, you do you :)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-neorg/neorg&#39; | Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can then put this initial configuration in your &lt;code&gt;init.vim&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;neorg&#39;).setup {&#xA;    ...&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Treesitter&lt;/h3&gt; &#xA;&lt;h6&gt;&lt;em&gt;Be sure to have &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; installed on your system for this step!&lt;/em&gt;&lt;/h6&gt; &#xA;&lt;p&gt;Neorg will automatically attempt to install the parsers for you upon entering a &lt;code&gt;.norg&lt;/code&gt; file if you have &lt;code&gt;core.defaults&lt;/code&gt; loaded. A command is also exposed to reinstall and/or update these parsers: &lt;code&gt;:Neorg sync-parsers&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;:Neorg sync-parsers&lt;/code&gt; command is only available when in a &lt;code&gt;.norg&lt;/code&gt; file, and the installation isn&#39;t reproducible. To make it permanent, you want to alter your treesitter configuration a little:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-treesitter.configs&#39;).setup {&#xA;    ensure_installed = { &#34;norg&#34;, --[[ other parsers you would wish to have ]] },&#xA;    highlight = { -- Be sure to enable highlights if you haven&#39;t!&#xA;        enable = true,&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE: Putting &lt;code&gt;&#34;norg_meta&#34;&lt;/code&gt; into your &lt;code&gt;ensure_installed&lt;/code&gt; table may trigger unintended errors. This is because &lt;code&gt;norg_meta&lt;/code&gt; isn&#39;t in the native &lt;code&gt;nvim-treesitter&lt;/code&gt; repositories, and the parser is only defined while using Neorg. This is why using &lt;code&gt;:Neorg sync-parsers&lt;/code&gt; is recommended.&lt;/p&gt; &#xA;&lt;h3&gt;Troubleshooting Treesitter&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Not using packer? Make sure that Neorg&#39;s &lt;code&gt;setup()&lt;/code&gt; gets called after &lt;code&gt;nvim-treesitter&lt;/code&gt;&#39;s setup.&lt;/li&gt; &#xA; &lt;li&gt;If on MacOS, ensure that the &lt;code&gt;CC&lt;/code&gt; environment variable points to a compiler that has C++14 support. You can run Neovim like so: &lt;code&gt;CC=/path/to/newer/compiler nvim -c &#34;TSInstallSync norg&#34;&lt;/code&gt; in your shell of choice to install the Neorg parser with a newer compiler. You may also want to export the &lt;code&gt;CC&lt;/code&gt; variable in general: &lt;code&gt;export CC=/path/to/newer/compiler&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Setup&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve got the basic stuff out the way now, but wait! That&#39;s not all. You&#39;ve installed Neorg - great! Now you have to configure it. By default, Neorg does nothing, and gives you nothing. You must tell it what you care about!&lt;/p&gt; &#xA;&lt;h3&gt;Default modules&lt;/h3&gt; &#xA;&lt;p&gt;Neorg runs on &lt;em&gt;modules&lt;/em&gt;, which are discussed and explained in more depth later on. Each module provides a single bit of functionality - they can then be stacked together to form the entire Neorg environment.&lt;/p&gt; &#xA;&lt;p&gt;The most common module you&#39;ll find is the &lt;code&gt;core.defaults&lt;/code&gt; module, which is basically a &#34;load all features&#34; switch. It gives you the full experience out of the box.&lt;/p&gt; &#xA;&lt;p&gt;The code snippet to enable all default modules is very straightforward:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;core.defaults&#34;] = {}&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can see &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki#default-modules&#34;&gt;here&lt;/a&gt; which modules are automatically required when loading &lt;code&gt;core.defaults&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;‚öô Usage&lt;/h2&gt; &#xA;&lt;p&gt;We recommend reading the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/docs/NFF-0.1-spec.md&#34;&gt;spec&lt;/a&gt; and familiarizing yourself with the new format. You can view a summary directly in your neovim instance by running &lt;code&gt;:h neorg&lt;/code&gt; if you don&#39;t like reading a lot!&lt;/p&gt; &#xA;&lt;p&gt;Afterwards it&#39;s as simple as hopping into a &lt;code&gt;.norg&lt;/code&gt; file and typing away.&lt;/p&gt; &#xA;&lt;p&gt;A good first step is to require the &lt;code&gt;core.norg.dirman&lt;/code&gt; module, it&#39;ll help you manage Neorg workspaces. Workspaces are basically isolated directories that you can jump between:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;core.defaults&#34;] = {},&#xA;        [&#34;core.norg.dirman&#34;] = {&#xA;            config = {&#xA;                workspaces = {&#xA;                    work = &#34;~/notes/work&#34;,&#xA;                    home = &#34;~/notes/home&#34;,&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changing workspaces is easy, just do &lt;code&gt;:Neorg workspace work&lt;/code&gt;, where &lt;code&gt;work&lt;/code&gt; is the name of your workspace. Note that &lt;code&gt;:Neorg&lt;/code&gt; is only available when the Neorg environment is loaded, i.e. when you&#39;re in a &lt;code&gt;.norg&lt;/code&gt; file or have loaded a &lt;code&gt;.norg&lt;/code&gt; file already in your Neovim session.&lt;/p&gt; &#xA;&lt;p&gt;If the Neorg environment isn&#39;t loaded you&#39;ll find a &lt;code&gt;:NeorgStart&lt;/code&gt; command which will launch Neorg and pop you in to your last (or only) workspace.&lt;/p&gt; &#xA;&lt;h4&gt;It works, cool! What are the next steps?&lt;/h4&gt; &#xA;&lt;p&gt;We recommend you add some core modules that can greatly improve your experience, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using the concealer module to enable icons (&lt;code&gt;core.norg.concealer&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Setting up a completion engine (&lt;code&gt;core.norg.completion&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Setting these up is discussed in the wiki, so be sure to check there!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You&#39;re now basically set&lt;/strong&gt;! The rest of this README will be additional information, so keep reading if you care about what makes Neorg tick, or you want to genuinely get good at using it.&lt;/p&gt; &#xA;&lt;h2&gt;ü•° Modules&lt;/h2&gt; &#xA;&lt;p&gt;As you saw previously, we loaded &lt;code&gt;core.defaults&lt;/code&gt; and recommended that you load &lt;code&gt;core.norg.dirman&lt;/code&gt;. As you probably know those are modules. But what are they, exactly?&lt;/p&gt; &#xA;&lt;p&gt;Modules are basically isolated bits of code that provide a specific subset of features. They can be docked into the environment at any time and can be essentially stacked together like lego bricks! They can bind themselves to events and callbacks and communicate with each other.&lt;/p&gt; &#xA;&lt;p&gt;To require a module, just do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        -- Require the module with the default configurations for it&#xA;        [&#34;your.required.module&#34;] = {},&#xA;&#xA;        -- Require the module, and override the configurations (with the &#34;config&#34; table)&#xA;        [&#34;your.required.module&#34;] = {&#xA;            config = {&#xA;                some_option = true&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As always, for a little more info you can consult the wiki page &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Installation#the-concept-of-modules&#34;&gt;here&lt;/a&gt;. To know which configurations are provided by default for a module, just click on their link: you&#39;ll go to the module page in the &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Core Modules&lt;/h3&gt; &#xA;&lt;p&gt;Here is a list of core modules that aren&#39;t part of &lt;code&gt;core.defaults&lt;/code&gt; and can be added individually by you.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to try by adding them to your Neorg setup.&lt;/p&gt; &#xA;&lt;!-- TODO: Use docgen to generate this automatically --&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of Core Modules:&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Module name&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Getting-Things-Done&#34;&gt;&lt;code&gt;core.gtd.base&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Manages your tasks with Neorg using the Getting Things Done methodology.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Completion&#34;&gt;&lt;code&gt;core.norg.completion&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;A wrapper to interface with several different completion engines.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Concealer&#34;&gt;&lt;code&gt;core.norg.concealer&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Enhances the basic Neorg experience by using icons instead of text.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Dirman&#34;&gt;&lt;code&gt;core.norg.dirman&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;This module is be responsible for managing directories full of .norg files.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Journal&#34;&gt;&lt;code&gt;core.norg.journal&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Easily create files for a journal.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Qol-Toc&#34;&gt;&lt;code&gt;core.norg.qol.toc&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Generates a Table of Contents from the Neorg file.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki/Core-Presenter&#34;&gt;&lt;code&gt;core.presenter&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Neorg module to create gorgeous presentation slides.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;External Modules&lt;/h3&gt; &#xA;&lt;p&gt;Users can contribute and create their own modules for Neorg. To use them, just download the plugin with your package manager, for instance with Packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;nvim-neorg/neorg&#34;,&#xA;    requires = &#34;john-cena/cool-neorg-plugin&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that it&#39;s as easy as loading the module it exposes normally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neorg&#39;).setup {&#xA;    load = {&#xA;        [&#34;cool.module&#34;] = {},&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;List of community modules:&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Module name&lt;/th&gt; &#xA;    &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/nvim-neorg/neorg-telescope&#34;&gt;&lt;code&gt;core.integrations.telescope&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Neorg integration with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/esquires/neorg-gtd-project-tags&#34;&gt;&lt;code&gt;external.gtd-project-tags&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Provides a view of tasks grouped with a project tag. Requires &lt;code&gt;core.gtd.base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/danymat/neorg-gtd-things&#34;&gt;&lt;code&gt;external.integrations.gtd-things&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Use Things3 database to fetch and update tasks instead. Requires &lt;code&gt;core.gtd.base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/max397574/neorg-contexts&#34;&gt;&lt;code&gt;external.context&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Display headings in which you are at the top of the window in a float popup.&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/max397574/neorg-kanban&#34;&gt;&lt;code&gt;external.kanban&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;left&#34;&gt;Display your gtd todos in a kanban-like board in floating windows. Requires &lt;code&gt;core.gtd.base&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;If you ever end up making a module for Neorg feel free to make a pull request and add it to this README!&lt;/p&gt; &#xA;&lt;h2&gt;‚ùì Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;Our goals are fairly simple:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Revise the org format: simple, extensible, unambiguous. Will make you feel right at home. Alternate markup formats have several flaws, but the most notable one is the requirement for &lt;strong&gt;complex parsers&lt;/strong&gt;. I really advise checking &lt;a href=&#34;https://talk.commonmark.org/t/beyond-markdown/2787&#34;&gt;some writeups&lt;/a&gt; out on how bad it can get at times. What if we told you it&#39;s possible to alleviate those problems, all whilst keeping that familiar feel? Enter the &lt;code&gt;.norg&lt;/code&gt; file format, whose &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/docs/NFF-0.1-spec.md&#34;&gt;base spec&lt;/a&gt; is practically complete. The cross between all the best things from org and the best things from markdown, revised and merged into one.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keybinds that &lt;em&gt;make sense&lt;/em&gt;: vim&#39;s keybind philosophy is unlike any other, and we want to keep that vibe. Keys form a &#34;language&#34;, one that you can speak, not one that you need to learn off by heart.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Infinite extensibility: no, that isn&#39;t a hyperbole. We mean it. Neorg is built upon an insanely modular and configurable backend - keep what you need, throw away what you don&#39;t care about. Use the defaults or change &#39;em. You are in control of what code runs and what code doesn&#39;t run!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Logic: everything has a reason, everything has logical meaning. If there&#39;s a feature, it&#39;s there because it&#39;s necessary, not because two people asked for it. If something has a more niche use case, it should be documented.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üó∫ Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;We track a high-level roadmap, so that you can know what to expect. Just do &lt;code&gt;:h neorg-roadmap&lt;/code&gt;. To know exactly what&#39;s being worked on, just check out the &lt;a href=&#34;https://github.com/nvim-neorg/neorg/pulls&#34;&gt;repo&#39;s PRs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìö FAQ&lt;/h2&gt; &#xA;&lt;!-- TODO(vhyrro): Populate with common issues --&gt; &#xA;&lt;p&gt;The wiki is the go-to place if you need answers to anything Neorg-related. Usage, Keybinds, User Callbacks, Modules, Events? It&#39;s all there, so we recommend you seriously go &lt;a href=&#34;https://github.com/nvim-neorg/neorg/wiki&#34;&gt;read it&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Have an idea? An improvement to existing functionality? Feedback in general?&lt;/p&gt; &#xA;&lt;p&gt;We seriously recommend you join our &lt;a href=&#34;https://discord.gg/T6EgTAX7ht&#34;&gt;discord&lt;/a&gt; to hang out and chat about your ideas, plus that you read the &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neorg/neorg/main/docs/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file for more info about developer-related stuff!&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Massive shoutouts go to all the contributors actively working on the project together to form a fantastic integrated workflow:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrossinek&#34;&gt;mrossinek&lt;/a&gt; - for basically being my second brain when it comes to developing new features and adding new syntax elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danymat&#34;&gt;danymat&lt;/a&gt; - for creating the excellent GTD workflow in Neorg that we literally use internally to plan new features&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And an extra thank you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Binx-Codes/&#34;&gt;Binx&lt;/a&gt; - for making that gorgeous logo for free!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bandithedoge&#34;&gt;bandithedoge&lt;/a&gt; - for converting the PNG version of the logo into SVG form&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Love what I do? Want to see more get done faster? Want to support future projects? Any sort of support is always heartwarming and fuels the urge to keep going &lt;span&gt;‚ù§Ô∏è&lt;/span&gt;. You can show support here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://buymeacoffee.com/vhyrro&#34;&gt;Buy me a coffee!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://liberapay.com/vhyrro&#34;&gt;Support me on LiberaPay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paypal.me/ewaczupryna?locale.x=en_GB&#34;&gt;Donate directly via paypal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://patreon.com/vhyrro&#34;&gt;Support me on Patreon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donate to my monero wallet: &lt;code&gt;86CXbnPLa14F458FRQFe26PRfffZTZDbUeb4NzYiHDtzcyaoMnfq1TqVU1EiBFrbKqGshFomDzxWzYX2kMvezcNu9TaKd9t&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donate via bitcoin: &lt;code&gt;bc1q4ey43t9hhstzdqh8kqcllxwnqlx9lfxqqh439s&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- TODO: Create table of donation links for all maintainers --&gt;</summary>
  </entry>
  <entry>
    <title>feline-nvim/feline.nvim</title>
    <updated>2022-06-28T01:46:03Z</updated>
    <id>tag:github.com,2022-06-28:/feline-nvim/feline.nvim</id>
    <link href="https://github.com/feline-nvim/feline.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A minimal, stylish and customizable statusline for Neovim written in Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;feline.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A minimal, stylish and customizable statusline / winbar for Neovim written in Lua&lt;/p&gt; &#xA;&lt;p&gt;Requires Neovim &amp;gt;= 0.7 (or &amp;gt;= 0.5 with the &lt;code&gt;0.5-compat&lt;/code&gt; branch)&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Feline is a Lua statusline plugin that prioritizes speed, customizability and minimalism. It&#39;s fast and never gets in your way. Feline only provides you with the necessary tools that you need to customize the statusline to your liking and avoids feature-bloat. It&#39;s also extremely customizable and allows you to configure it in any way you wish to. Feline also has reasonable defaults for those who don&#39;t want to configure things and just want a good out of the box experience.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ease-of-use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Complete customizability over every component.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/#default-providers&#34;&gt;Built-in providers&lt;/a&gt; such as:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Vi-mode&lt;/li&gt; &#xA;   &lt;li&gt;File info&lt;/li&gt; &#xA;   &lt;li&gt;Cursor position&lt;/li&gt; &#xA;   &lt;li&gt;Diagnostics (using &lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;Neovim&#39;s built-in LSP&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Git branch and diffs (using &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim/&#34;&gt;gitsigns.nvim&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;and many more&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Minimalistic, only provides the bare minimum and allows the user to build their own components very easily.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Winbar support.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Necessary &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Neovim v0.7 or greater (v0.5 or greater if using the &lt;code&gt;0.5-compat&lt;/code&gt; branch)&lt;/li&gt; &#xA;   &lt;li&gt;You must have 24-bit RGB color enabled in Neovim (do &lt;code&gt;:help &#39;termguicolors&#39;&lt;/code&gt; in Neovim for more info)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Optional &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Neovim v0.8 or greater - For winbar support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons/&#34;&gt;nvim-web-devicons&lt;/a&gt; - For icon support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/&#34;&gt;A patched font&lt;/a&gt; - For icon support&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim/&#34;&gt;gitsigns.nvim&lt;/a&gt; - For &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/#git&#34;&gt;git providers&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: Some of these configurations may be outdated and may need to be changed prior to use. A few of the configurations are missing a link because the link to them was removed due to the link no longer being valid.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default setup:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/29580810/114544000-d3028400-9c7b-11eb-856c-2feb166334b2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default no-icons setup:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/29580810/114742106-36201380-9d6d-11eb-9866-e8c0fef8a1bd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/crivotz/nv-ide/raw/master/lua/plugins/feline.lua&#34;&gt;Config by crivotz:&lt;/a&gt;&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3275600/114841377-0ce89d00-9dd8-11eb-82b4-b3ee332771c2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/6cdh/dotfiles/raw/62959d27344dade28d6dd638252cd82accb309ab/nvim/.config/nvim/lua/statusline.lua&#34;&gt;Config by 6cdh:&lt;/a&gt;&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/39000776/114838041-e68e2600-9e06-11eb-9334-431a627ff144.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Config by luizcoro2:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/70335871/115327167-dd81b980-a164-11eb-9c02-7a3a1b6a94b5.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Config by rafamadriz (classic):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gruvbox:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/116002735-a7bc5500-a5ea-11eb-82e3-86d1837902cf.png&#34; alt=&#34;image&#34;&gt; &lt;strong&gt;Nord:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/116002779-d3d7d600-a5ea-11eb-8772-7cb85d7bc324.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Config by rafamadriz (slant):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gruvbox:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/116002799-e94d0000-a5ea-11eb-9472-da0d75bbcceb.png&#34; alt=&#34;image&#34;&gt; &lt;strong&gt;Nord:&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/116002808-efdb7780-a5ea-11eb-97eb-caf7875e9a3d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Config by rafamadriz (VSCode):&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/67771985/117713773-9d42b380-b1c5-11eb-8a8b-76949c9b2db1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://gist.github.com/pianocomposer321/6151c458132a97590d21415db67361a6&#34;&gt;Config by pianocomposer321:&lt;/a&gt;&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/54072354/117869424-65d51500-b260-11eb-898c-0a0b987a6275.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/ibhagwan/nvim-lua/raw/main/lua/plugins/feline.lua&#34;&gt;Config by iBhagwan:&lt;/a&gt;&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/59988195/133922136-3d037c37-7a3f-4e1b-b42e-c50b22fedfdb.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/EdenEast/nyx/raw/8a9819e/config/.config/nvim/lua/eden/modules/ui/feline/init.lua&#34;&gt;Config by EdenEast&lt;/a&gt;&lt;/strong&gt; (Colors generated from applied colorscheme)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nightfox&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/137549252-333f074e-47a0-464f-ac8a-7ce0ee43433c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dayfox&lt;/strong&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2746374/137549328-eb5f51c2-bd7b-4c9e-9080-b6132b688459.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can add your own configuration to this list. If you&#39;re interested, simply make a &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/CONTRIBUTING.md&#34;&gt;Pull Request&lt;/a&gt; and I&#39;ll add it.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim/&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;feline-nvim/feline.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug/&#34;&gt;vim-plug&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;feline-nvim/feline.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using a compatibility branch&lt;/h3&gt; &#xA;&lt;p&gt;Feline has compatibility branches which are versions that have compatibility with an older Neovim version. The compatibility branches are old and usually don&#39;t contain the latest changes to Feline, though the changes may occasionally be backported. However, these branches are useful if you don&#39;t have the currently required minimum version of Neovim to use Feline. The compatibility branches are named like &lt;code&gt;{neovim-version}-compat&lt;/code&gt; where &lt;code&gt;{neovim-version}&lt;/code&gt; is the version of Neovim it maintains compatibility with. For example, the &lt;code&gt;0.5-compat&lt;/code&gt; branch is compatible with Neovim 0.5. Note that there may not be a compatibility branch for all versions and there may be gaps in the compatibility versions. Here&#39;s how you can install a compatibility branch instead of the master branch:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim/&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;feline-nvim/feline.nvim&#39;, branch = &#39;0.5-compat&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug/&#34;&gt;vim-plug&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;feline-nvim/feline.nvim&#39;, { &#39;branch&#39;: &#39;0.5-compat&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Compatibility branches for versions that are 4 or more (minor) versions older than the latest Neovim version may be removed at any time, so use them at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Using the default configuration&lt;/h3&gt; &#xA;&lt;p&gt;Once you&#39;ve installed Feline, it&#39;s extremely easy to get started with it. If you don&#39;t mind using the default settings, you can just call Feline&#39;s &lt;code&gt;setup()&lt;/code&gt; function in your configuration. Like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;feline&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that&#39;s it! It&#39;s as easy as that. If you want to setup the &lt;code&gt;&#39;winbar&#39;&lt;/code&gt; alongside the statusline, just add this line next to the previous line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;feline&#39;).winbar.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring Feline to fit your needs&lt;/h3&gt; &#xA;&lt;p&gt;If the default configuration doesn&#39;t fit your needs and you want to build your own statusline configuration, it&#39;s highly recommended to configure Feline to suit your needs. The only prerequisite is knowing the basics of Lua. Feline provides a ton of configuration options which can let you build your statusline exactly how you want it as long. To see how to do that, take a look at &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/USAGE.md&#34;&gt;USAGE&lt;/a&gt; or use &lt;code&gt;:help feline.txt&lt;/code&gt; inside Neovim to read the USAGE documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;h3&gt;Common issues&lt;/h3&gt; &#xA;&lt;h4&gt;Feline crashes or disappears for seemingly no reason&lt;/h4&gt; &#xA;&lt;p&gt;This can be caused if you forget to remove your other statusline plugins after installing Feline. Make sure all other statusline plugins are removed before you install Feline, that should fix the issue.&lt;/p&gt; &#xA;&lt;h3&gt;Reporting issues or feature requests&lt;/h3&gt; &#xA;&lt;p&gt;If you have an issue that you can&#39;t find the fix to in the documentation or want to request a feature you think is absolutely necessary, feel free to make a new &lt;a href=&#34;https://github.com/feline-nvim/feline.nvim/issues&#34;&gt;Issue&lt;/a&gt; and I will try my best to look into it. If you want to contribute to Feline, you can make a Pull Request. For more details, please see: &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why Feline?&lt;/h2&gt; &#xA;&lt;p&gt;Now, you might be thinking, why do we need another statusline plugin? We&#39;ve already got a bunch of brilliant statusline plugins like galaxyline, airline, lualine, expressline etc. and all of them are excellent. So then, why Feline?&lt;/p&gt; &#xA;&lt;p&gt;I&#39;d like the preface this by saying that what I&#39;m about to say can be (and probably is) very biased and opinionated. Take what&#39;s being said here with a grain of salt. All of this is purely my opinion and not a fact by any means, so it&#39;s fine to disagree. Moreover, any statement I make here may be incorrect or outdated. In which case, please feel free to make an &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/CONTRIBUTING.md&#34;&gt;Issue or Pull Request&lt;/a&gt; correcting it.&lt;/p&gt; &#xA;&lt;p&gt;I think that despite those plugins being neat, each have their own shortcomings. I find those shortcomings as too much to ignore. For example, most of the statusline plugins are not very customizable and the plugins only provide a limited amount of tools and options for customization. Feline, on the other hand, is built for customizability from the ground up. You are not limited in any way by what the plugin provides. You can control every individual component and its location, appearance, everything about it.&lt;/p&gt; &#xA;&lt;p&gt;Feline is also fast and never gets in your way. It lazy-loads most of its modules, which allows it to start up instantly. Statusline updates with Feline are also blazing fast, which provides for a really smooth experience.&lt;/p&gt; &#xA;&lt;p&gt;Feline is minimal and only implements the bare minimum required for you to get started. It both expects and invites you to make your own components and providers, because nobody understands you better than yourself. To help you do that, Feline provides all the tools and options you would need while also giving you a solid foundation to build from. One could say that the real goal of Feline is to make creating your own statusline as easy for you as possible, while also providing reasonable defaults that should be enough for most people.&lt;/p&gt; &#xA;&lt;p&gt;Documentation is another aspect where I found most statusline plugins to be very lacking. Feline is extremely easy to configure and well-documented, which allows anyone to be able to build their statusline as they wish to. It provides example for every option to allow anyone to easily understand the purpose of any option&lt;/p&gt; &#xA;&lt;p&gt;Lastly, anyone is welcome to contribute to Feline, either by making an Issue or through a Pull Request (see &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for further information). Any kind of contribution starting from fixing a minor typo to adding a massive new feature is welcome.&lt;/p&gt; &#xA;&lt;p&gt;And this plugin is named after cats, you won&#39;t get that anywhere else.&lt;/p&gt; &#xA;&lt;h2&gt;LICENSE&lt;/h2&gt; &#xA;&lt;p&gt;Feline is licensed under GNU GPLv3. For more info, see: &lt;a href=&#34;https://raw.githubusercontent.com/feline-nvim/feline.nvim/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;h3&gt;Naming&lt;/h3&gt; &#xA;&lt;p&gt;The name of this plugin is a silly pun based on the convention of the names of statusline plugins ending with &#39;line&#39;, while also being named after cats. And in a way this statusline is supposed to be as quick as a cat&#39;s instincts, so I guess the name fits.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/famiuhaque&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-blue.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>