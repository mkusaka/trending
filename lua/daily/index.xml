<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-05T01:30:55Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>altermo/nwm</title>
    <updated>2024-04-05T01:30:55Z</updated>
    <id>tag:github.com,2024-04-05:/altermo/nwm</id>
    <link href="https://github.com/altermo/nwm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A graphical display window manager in neovim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;span&gt;‚ùó&lt;/span&gt; NXWM is currently being rewritten to &lt;strong&gt;wayland&lt;/strong&gt;, which when merged will change most things&lt;/p&gt; &#xA;&lt;h1&gt;NXWM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;eovim &lt;strong&gt;X&lt;/strong&gt;11 &lt;strong&gt;W&lt;/strong&gt;indow &lt;strong&gt;M&lt;/strong&gt;anager allows you to use x11 windows as if they were buffers. When entering a x-window-buffer, you&#39;ll need to start insert-mode to focus the x-window (unless some configurations are set to do this automatically).&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libx11&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;glibc&lt;/code&gt; (or most other standard C libraries)&lt;/li&gt; &#xA; &lt;li&gt;Terminal supporting &lt;code&gt;TIOCGWINSZ&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Recommended terminal is &lt;code&gt;kitty&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Run &lt;code&gt;:lua= require&#39;nxwm&#39;.term_supported()&lt;/code&gt; to check &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;NOTE: some terminals may support &lt;code&gt;TIOCGWINSZ&lt;/code&gt; while still not working (like &lt;code&gt;neovim-qt&lt;/code&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use whichever package manager you like.&lt;br&gt; It is recommended to lock/pin the plugin to one version/branch because of changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lazy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#39;altermo/nxwm&#39;,branch=&#39;x11&#39;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;packer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;altermo/nxwm&#39;,branch=&#39;x11&#39;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;require(&#34;nxwm&#34;).setup({})&lt;/code&gt; is &lt;strong&gt;not required&lt;/strong&gt;, it is only there if you want to change the default config.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    --What happens when a new x-window is created&#xA;    on_win_open=function (buf,xwin)&#xA;        vim.cmd.vsplit()&#xA;        vim.api.nvim_set_current_buf(buf)&#xA;    end,&#xA;    --Configuration to pass to window&#xA;    --`conf` is global config&#xA;    on_win_get_conf=function (conf,xwin) return conf end,&#xA;    --How to handle when multiple windows in the same tabpage has the x-window-buffer open&#xA;    on_multiple_win_open=function (vwins,buf,xwin)&#xA;        for k,vwin in ipairs(vwins) do&#xA;            if k~=1 then&#xA;                local scratchbuf=vim.api.nvim_create_buf(false,true)&#xA;                vim.bo[scratchbuf].bufhidden=&#39;wipe&#39;&#xA;                vim.api.nvim_win_set_buf(vwin,scratchbuf)&#xA;            end&#xA;        end&#xA;    end,&#xA;    --Whether to be more verbose&#xA;    verbal=false,&#xA;    --Map to unfocus a window (multiple key mappings is not (yet) supported)&#xA;    unfocus_map=&#39;&amp;lt;A-F4&amp;gt;&#39;,&#xA;    --Create your own mappings&#xA;    --IMPORTANT: the x-window needs to be focused for such mappings to work&#xA;    maps={&#xA;        --{&#39;&amp;lt;C-A-del&amp;gt;&#39;,function () vim.cmd&#39;quitall!&#39; end},&#xA;        --Or you could also have lhs as a table&#xA;        --{{mods={&#39;control&#39;,&#39;mod1&#39;},key=&#39;Delete&#39;},function () vim.cmd&#39;quitall!&#39; end},&#xA;    },&#xA;    --Window-opt: auto focus x-window when entering x-window-buffer&#xA;    autofocus=false,&#xA;    --Window-opt: try-delete x-window if no vim-window shows buffer (similar to `bufhidden=wipe`)&#xA;    delhidden=true,&#xA;    --Window-opt: when click on x-window, goto that buffer (may not focus x-window)&#xA;    clickgoto=true,&#xA;    --Window-opt: offset the window this many x pixels (useful if terminal has padding)&#xA;    xoffset=0,&#xA;    --Window-opt: offset the window this many y pixels (useful if terminal has padding)&#xA;    yoffset=0,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Start (from wayland window manager)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Xwayland.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;Xwayland :99&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;DISPLAY=:99 WAYLAND_DISPLAY= {NXWM}&lt;/code&gt; in a &lt;strong&gt;terminal&lt;/strong&gt; where &lt;code&gt;{NXWM}&lt;/code&gt; is path to a terminal which runs Neovim and starts NXWM. &lt;br&gt; NOTE: the terminal should have it&#39;s start in the top left, have zero padding, have no title bar...&lt;br&gt; NOTE2: some applications (like &lt;code&gt;kitty&lt;/code&gt; with default config) tries (and fails) to spawn in wayland even when &lt;code&gt;WAYLAND_DISPLAY&lt;/code&gt; is empty...&lt;br&gt; Examples of how to start for specific terminals: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;kitty: &lt;code&gt;DISPLAY=:99 WAYLAND_DISPLAY= kitty -c NONE -o placement_strategy=top-left -o linux_display_server=x11 -e nvim -c &#39;lua require(&#34;nxwm&#34;).start()&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;alacritty: &lt;code&gt;DISPLAY=:99 WAYLAND_DISPLAY= alacritty --config-file /dev/null -e nvim -c &#39;lua require(&#34;nxwm&#34;).start()&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;wezterm: &lt;code&gt;DISPLAY=:99 WAYLAND_DISPLAY= wezterm -n --config enable_tab_bar=false --config window_padding=&#39;{left=0,right=0,top=0,bottom=0}&#39; start nvim -c &#39;lua require&#34;nxwm&#34;.start()&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Start (from Xephyr in x11)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;code&gt;Xephyr&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;Xephyr -ac -br -noreset :99&lt;/code&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You may add &lt;code&gt;-screen 800x600&lt;/code&gt; to set the Xephyr window size.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start your terminal emulator, passing &lt;code&gt;DISPLAY=:99&lt;/code&gt; to start it in the Xephyr session. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Wezterm example: &lt;code&gt;DISPLAY=:99 wezterm -n --config enable_tab_bar=false --config window_padding=&#39;{left=0,right=0,top=0,bottom=0}&#39; start nvim -c &#39;lua require&#34;nxwm&#34;.start()&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Start (from tty)&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/Earnestly/sx&#34;&gt;sx&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;sx {NXWM}&lt;/code&gt; in a &lt;strong&gt;tty&lt;/strong&gt; where &lt;code&gt;{NXWM}&lt;/code&gt; is path to a terminal which runs Neovim and starts NXWM.&lt;br&gt; NOTE: the terminal should have it&#39;s start in the top left, have zero padding, have no title bar...&lt;br&gt; Examples of how to start for specific terminals: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;kitty: &lt;code&gt;sx kitty -c NONE -o placement_strategy=top-left -e nvim -c &#39;lua require(&#34;nxwm&#34;).start()&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;alacritty: &lt;code&gt;sx alacritty --config-file /dev/null -e nvim -c &#39;lua require(&#34;nxwm&#34;).start()&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;wezterm: &lt;code&gt;sx wezterm -n --config enable_tab_bar=false --config window_padding=&#39;{left=0,right=0,top=0,bottom=0}&#39; start nvim -c &#39;lua require&#34;nxwm&#34;.start()&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &#xA;  &lt;!--+ neovim-qt: `nvim-qt --nofork -- -c &#39;lua require(&#34;nxwm&#34;).start()&#39;`--&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Use&lt;/h3&gt; &#xA;&lt;p&gt;Open up a terminal (with &lt;code&gt;:term&lt;/code&gt;) and run your wanted GUI. NOTE: x-windows aren&#39;t auto focused by default, so start insert (by pressing &lt;code&gt;i&lt;/code&gt; or similar) and then you&#39;ll focus the window. To unfocus an x-window, either click into another buffer, or press &lt;code&gt;alt-F4&lt;/code&gt;(unless the default config has been changed).&lt;/p&gt; &#xA;&lt;h4&gt;Donate&lt;/h4&gt; &#xA;&lt;p&gt;If you want to donate then you need to find the correct link (hint: No Break Here):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;10&lt;/a&gt; &lt;a href=&#34;&#34;&gt;11&lt;/a&gt; &lt;a href=&#34;&#34;&gt;12&lt;/a&gt; &lt;a href=&#34;&#34;&gt;13&lt;/a&gt; &lt;a href=&#34;&#34;&gt;14&lt;/a&gt; &lt;a href=&#34;&#34;&gt;15&lt;/a&gt; &lt;a href=&#34;&#34;&gt;16&lt;/a&gt; &lt;a href=&#34;&#34;&gt;17&lt;/a&gt; &lt;a href=&#34;&#34;&gt;18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;20&lt;/a&gt; &lt;a href=&#34;&#34;&gt;21&lt;/a&gt; &lt;a href=&#34;&#34;&gt;22&lt;/a&gt; &lt;a href=&#34;&#34;&gt;23&lt;/a&gt; &lt;a href=&#34;&#34;&gt;24&lt;/a&gt; &lt;a href=&#34;&#34;&gt;25&lt;/a&gt; &lt;a href=&#34;&#34;&gt;26&lt;/a&gt; &lt;a href=&#34;&#34;&gt;27&lt;/a&gt; &lt;a href=&#34;&#34;&gt;28&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;30&lt;/a&gt; &lt;a href=&#34;&#34;&gt;31&lt;/a&gt; &lt;a href=&#34;&#34;&gt;32&lt;/a&gt; &lt;a href=&#34;&#34;&gt;33&lt;/a&gt; &lt;a href=&#34;&#34;&gt;34&lt;/a&gt; &lt;a href=&#34;&#34;&gt;35&lt;/a&gt; &lt;a href=&#34;&#34;&gt;36&lt;/a&gt; &lt;a href=&#34;&#34;&gt;37&lt;/a&gt; &lt;a href=&#34;&#34;&gt;38&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;40&lt;/a&gt; &lt;a href=&#34;&#34;&gt;41&lt;/a&gt; &lt;a href=&#34;&#34;&gt;42&lt;/a&gt; &lt;a href=&#34;&#34;&gt;43&lt;/a&gt; &lt;a href=&#34;&#34;&gt;44&lt;/a&gt; &lt;a href=&#34;&#34;&gt;45&lt;/a&gt; &lt;a href=&#34;&#34;&gt;46&lt;/a&gt; &lt;a href=&#34;&#34;&gt;47&lt;/a&gt; &lt;a href=&#34;&#34;&gt;48&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;50&lt;/a&gt; &lt;a href=&#34;&#34;&gt;51&lt;/a&gt; &lt;a href=&#34;&#34;&gt;52&lt;/a&gt; &lt;a href=&#34;&#34;&gt;53&lt;/a&gt; &lt;a href=&#34;&#34;&gt;54&lt;/a&gt; &lt;a href=&#34;&#34;&gt;55&lt;/a&gt; &lt;a href=&#34;&#34;&gt;56&lt;/a&gt; &lt;a href=&#34;&#34;&gt;57&lt;/a&gt; &lt;a href=&#34;&#34;&gt;58&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;60&lt;/a&gt; &lt;a href=&#34;&#34;&gt;61&lt;/a&gt; &lt;a href=&#34;&#34;&gt;62&lt;/a&gt; &lt;a href=&#34;&#34;&gt;63&lt;/a&gt; &lt;a href=&#34;&#34;&gt;64&lt;/a&gt; &lt;a href=&#34;&#34;&gt;65&lt;/a&gt; &lt;a href=&#34;&#34;&gt;66&lt;/a&gt; &lt;a href=&#34;&#34;&gt;67&lt;/a&gt; &lt;a href=&#34;&#34;&gt;68&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;70&lt;/a&gt; &lt;a href=&#34;&#34;&gt;71&lt;/a&gt; &lt;a href=&#34;&#34;&gt;72&lt;/a&gt; &lt;a href=&#34;&#34;&gt;73&lt;/a&gt; &lt;a href=&#34;&#34;&gt;74&lt;/a&gt; &lt;a href=&#34;&#34;&gt;75&lt;/a&gt; &lt;a href=&#34;&#34;&gt;76&lt;/a&gt; &lt;a href=&#34;&#34;&gt;77&lt;/a&gt; &lt;a href=&#34;&#34;&gt;78&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;&#34;&gt;80&lt;/a&gt; &lt;a href=&#34;&#34;&gt;81&lt;/a&gt; &lt;a href=&#34;&#34;&gt;82&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/altermo&#34;&gt;83&lt;/a&gt; &lt;a href=&#34;&#34;&gt;84&lt;/a&gt; &lt;a href=&#34;&#34;&gt;85&lt;/a&gt; &lt;a href=&#34;&#34;&gt;86&lt;/a&gt; &lt;a href=&#34;&#34;&gt;87&lt;/a&gt; &lt;a href=&#34;&#34;&gt;88&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MeanderingProgrammer/markdown.nvim</title>
    <updated>2024-04-05T01:30:55Z</updated>
    <id>tag:github.com,2024-04-05:/MeanderingProgrammer/markdown.nvim</id>
    <link href="https://github.com/MeanderingProgrammer/markdown.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin to improve viewing Markdown files in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;markdown.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Plugin to improve viewing Markdown files in Neovim&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MeanderingProgrammer/markdown.nvim/main/demo/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions entirely inside of Neovim with no external windows&lt;/li&gt; &#xA; &lt;li&gt;Changes between &lt;code&gt;rendered&lt;/code&gt; view in normal mode and &lt;code&gt;raw&lt;/code&gt; view in all other modes&lt;/li&gt; &#xA; &lt;li&gt;Changes &lt;code&gt;conceallevel&lt;/code&gt; between &lt;code&gt;rendered&lt;/code&gt; and &lt;code&gt;raw&lt;/code&gt; view based on configuration&lt;/li&gt; &#xA; &lt;li&gt;Supports rendering &lt;code&gt;markdown&lt;/code&gt; injected into other file types&lt;/li&gt; &#xA; &lt;li&gt;Highlights headings with different groups depending on level and replaces &lt;code&gt;#&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Highlights code blocks and inline code to better stand out&lt;/li&gt; &#xA; &lt;li&gt;Replaces bullet points with provided character based on level&lt;/li&gt; &#xA; &lt;li&gt;Replaces block quote leading &lt;code&gt;&amp;gt;&lt;/code&gt; with provided character&lt;/li&gt; &#xA; &lt;li&gt;Updates table borders with better border characters, does NOT automatically align&lt;/li&gt; &#xA; &lt;li&gt;Basic support for &lt;code&gt;LaTeX&lt;/code&gt; if &lt;code&gt;pylatexenc&lt;/code&gt; is installed on system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Dependencies&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tree-sitter-grammars/tree-sitter-markdown&#34;&gt;markdown &amp;amp; markdown_inline&lt;/a&gt; parsers for &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;treesitter&lt;/a&gt;: Used to parse &lt;code&gt;markdown&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pylatexenc/&#34;&gt;pylatexenc&lt;/a&gt;: Used to transform &lt;code&gt;LaTeX&lt;/code&gt; strings to appropriate unicode using &lt;code&gt;latex2text&lt;/code&gt;, not a mandatory dependency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;Lazy.nvim&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;MeanderingProgrammer/markdown.nvim&#39;,&#xA;    name = &#39;render-markdown&#39;, -- Only needed if you have another plugin named markdown.nvim&#xA;    dependencies = { &#39;nvim-treesitter/nvim-treesitter&#39; },&#xA;    config = function()&#xA;        require(&#39;render-markdown&#39;).setup({})&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Below is the configuration that gets used by default, any part of it can be modified by the user.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    -- Capture groups that get pulled from markdown&#xA;    markdown_query = [[&#xA;        (atx_heading [&#xA;            (atx_h1_marker)&#xA;            (atx_h2_marker)&#xA;            (atx_h3_marker)&#xA;            (atx_h4_marker)&#xA;            (atx_h5_marker)&#xA;            (atx_h6_marker)&#xA;        ] @heading)&#xA;&#xA;        (fenced_code_block) @code&#xA;&#xA;        [&#xA;            (list_marker_plus)&#xA;            (list_marker_minus)&#xA;            (list_marker_star)&#xA;        ] @list_marker&#xA;&#xA;        (block_quote (block_quote_marker) @quote_marker)&#xA;        (block_quote (paragraph (inline (block_continuation) @quote_marker)))&#xA;&#xA;        (pipe_table) @table&#xA;        (pipe_table_header) @table_head&#xA;        (pipe_table_delimiter_row) @table_delim&#xA;        (pipe_table_row) @table_row&#xA;    ]],&#xA;    -- Capture groups that get pulled from inline markdown&#xA;    inline_query = [[&#xA;        (code_span) @code&#xA;    ]],&#xA;    -- Filetypes this plugin will run on&#xA;    file_types = { &#39;markdown&#39; },&#xA;    -- Vim modes that will show a rendered view of the markdown file&#xA;    -- All other modes will be uneffected by this plugin&#xA;    render_modes = { &#39;n&#39;, &#39;c&#39; },&#xA;    -- Characters that will replace the # at the start of headings&#xA;    headings = { &#39;Û∞≤° &#39;, &#39;Û∞≤£ &#39;, &#39;Û∞≤• &#39;, &#39;Û∞≤ß &#39;, &#39;Û∞≤© &#39;, &#39;Û∞≤´ &#39; },&#xA;    -- Character to use for the bullet points in lists&#xA;    bullets = { &#39;‚óè&#39;, &#39;‚óã&#39;, &#39;‚óÜ&#39;, &#39;‚óá&#39; },&#xA;    -- Character that will replace the &amp;gt; at the start of block quotes&#xA;    quote = &#39;‚îÉ&#39;,&#xA;    -- See :h &#39;conceallevel&#39; for more information about meaning of values&#xA;    conceal = {&#xA;        -- conceallevel used for buffer when not being rendered, get user setting&#xA;        default = vim.opt.conceallevel:get(),&#xA;        -- conceallevel used for buffer when being rendered&#xA;        rendered = 3,&#xA;    },&#xA;    -- Add a line above and below tables to complete look, ends up like a window&#xA;    fat_tables = true,&#xA;    -- Define the highlight groups to use when rendering various components&#xA;    highlights = {&#xA;        heading = {&#xA;            -- Background of heading line&#xA;            backgrounds = { &#39;DiffAdd&#39;, &#39;DiffChange&#39;, &#39;DiffDelete&#39; },&#xA;            -- Foreground of heading character only&#xA;            foregrounds = {&#xA;                &#39;markdownH1&#39;,&#xA;                &#39;markdownH2&#39;,&#xA;                &#39;markdownH3&#39;,&#xA;                &#39;markdownH4&#39;,&#xA;                &#39;markdownH5&#39;,&#xA;                &#39;markdownH6&#39;,&#xA;            },&#xA;        },&#xA;        -- Code blocks&#xA;        code = &#39;ColorColumn&#39;,&#xA;        -- Bullet points in list&#xA;        bullet = &#39;Normal&#39;,&#xA;        table = {&#xA;            -- Header of a markdown table&#xA;            head = &#39;@markup.heading&#39;,&#xA;            -- Non header rows in a markdown table&#xA;            row = &#39;Normal&#39;,&#xA;        },&#xA;        -- LaTeX blocks&#xA;        latex = &#39;@markup.math&#39;,&#xA;        -- Quote character in a block quote&#xA;        quote = &#39;@markup.quote&#39;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;:RenderMarkdownToggle&lt;/code&gt; - Switch between enabling &amp;amp; disabling this plugin&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Function can also be accessed directly through &lt;code&gt;require(&#39;render-markdown&#39;).toggle()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Purpose&lt;/h1&gt; &#xA;&lt;p&gt;There are many existing markdown rendering plugins in the Neovim ecosystem. However, most of these rely on syncing a separate browser window with the buffer. This is the correct way to do things to get full feature support, however I wanted something that worked completely inside of Neovim and made things look slightly &#34;nicer&#34;.&lt;/p&gt; &#xA;&lt;p&gt;The closest one I found to this was &lt;a href=&#34;https://github.com/lukas-reineke/headlines.nvim&#34;&gt;headlines.nvim&lt;/a&gt;, which is an awesome plugin that I took several ideas from. However it just didn&#39;t have quite what I was looking for. In particular I wanted something that would disappear completely when editing a file and quickly render some style when viewing the file. Hence this plugin.&lt;/p&gt; &#xA;&lt;h1&gt;Markdown Ecosystem&lt;/h1&gt; &#xA;&lt;p&gt;There are many &lt;code&gt;markdown&lt;/code&gt; plugins that specialize in different aspects of interacting with &lt;code&gt;markdown&lt;/code&gt; files. This plugin specializes in rendering the buffer inside of Neovim, for instance. As a result some plugins will clash with this one, whereas other plugins handle orthogonal concerns and can be used in addition to this one. Below is a categorized (incomplete) list of available plugins.&lt;/p&gt; &#xA;&lt;h2&gt;Render in Neovim&lt;/h2&gt; &#xA;&lt;p&gt;Using any of these plugins with this one will likely lead to undesired behavior as different functionality will clash.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/headlines.nvim&#34;&gt;headlines.nvim&lt;/a&gt; - Same high level idea and starting point of this plugin, but with different feature sets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Render in Browser&lt;/h2&gt; &#xA;&lt;p&gt;These can be used as a second pass to get a real preview of the &lt;code&gt;markdown&lt;/code&gt; file. Since they do not interact with the buffer directly there should be no issues.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iamcco/markdown-preview.nvim&#34;&gt;markdown-preview.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/euclio/vim-markdown-composer&#34;&gt;vim-markdown-composer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Orthogonal&lt;/h2&gt; &#xA;&lt;p&gt;These plugins handle functions completely separate from rendering and should also have no issues running alongside this plugin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any LSP which provides standard LSP capabilities, such as: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/artempyanykh/marksman&#34;&gt;marksman&lt;/a&gt; - General completion, definition, and reference functionality&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Feel-ix-343/markdown-oxide&#34;&gt;markdown-oxide&lt;/a&gt; - Adds Obsidian PKM features to LSP&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tadmccorkle/markdown.nvim&#34;&gt;markdown.nvim&lt;/a&gt; - Adds &lt;code&gt;markdown&lt;/code&gt; specific keybindings for interacting with &lt;code&gt;markdown&lt;/code&gt; files&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>