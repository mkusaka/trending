<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-27T01:38:47Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>p00f/clangd_extensions.nvim</title>
    <updated>2023-08-27T01:38:47Z</updated>
    <id>tag:github.com,2023-08-27:/p00f/clangd_extensions.nvim</id>
    <link href="https://github.com/p00f/clangd_extensions.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clangd&#39;s off-spec features for neovim&#39;s LSP client. Use https://sr.ht/~p00f/clangd_extensions.nvim instead&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36493671/152692205-837ec826-54d0-4257-9894-cc1a7ac8a114.svg?sanitize=true&#34; alt=&#34;clangd&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Requires Neovim 0.7+&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install this plugin using any plugin/package manager or see &lt;a href=&#34;https://neovim.io/doc/user/repeat.html#packages&#34;&gt;&lt;code&gt;:h packages&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration:&lt;/h2&gt; &#xA;&lt;p&gt;Set up clangd via lspconfig/vim.lsp.start, as usual. You don&#39;t need to call &lt;code&gt;require(&#34;clangd_extensions&#34;).setup&lt;/code&gt; if you like the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;clangd_extensions&#34;).setup({&#xA;    inlay_hints = {&#xA;        inline = vim.fn.has(&#34;nvim-0.10&#34;) == 1,&#xA;        -- Options other than `highlight&#39; and `priority&#39; only work&#xA;        -- if `inline&#39; is disabled&#xA;        -- Only show inlay hints for the current line&#xA;        only_current_line = false,&#xA;        -- Event which triggers a refresh of the inlay hints.&#xA;        -- You can make this { &#34;CursorMoved&#34; } or { &#34;CursorMoved,CursorMovedI&#34; } but&#xA;        -- not that this may cause  higher CPU usage.&#xA;        -- This option is only respected when only_current_line and&#xA;        -- autoSetHints both are true.&#xA;        only_current_line_autocmd = { &#34;CursorHold&#34; },&#xA;        -- whether to show parameter hints with the inlay hints or not&#xA;        show_parameter_hints = true,&#xA;        -- prefix for parameter hints&#xA;        parameter_hints_prefix = &#34;&amp;lt;- &#34;,&#xA;        -- prefix for all the other hints (type, chaining)&#xA;        other_hints_prefix = &#34;=&amp;gt; &#34;,&#xA;        -- whether to align to the length of the longest line in the file&#xA;        max_len_align = false,&#xA;        -- padding from the left if max_len_align is true&#xA;        max_len_align_padding = 1,&#xA;        -- whether to align to the extreme right or not&#xA;        right_align = false,&#xA;        -- padding from the right if right_align is true&#xA;        right_align_padding = 7,&#xA;        -- The color of the hints&#xA;        highlight = &#34;Comment&#34;,&#xA;        -- The highlight group priority for extmark&#xA;        priority = 100,&#xA;    },&#xA;    ast = {&#xA;        -- These are unicode, should be available in any font&#xA;        role_icons = {&#xA;            type = &#34;üÑ£&#34;,&#xA;            declaration = &#34;üÑì&#34;,&#xA;            expression = &#34;üÑî&#34;,&#xA;            statement = &#34;;&#34;,&#xA;            specifier = &#34;üÑ¢&#34;,&#xA;            [&#34;template argument&#34;] = &#34;üÜÉ&#34;,&#xA;        },&#xA;        kind_icons = {&#xA;            Compound = &#34;üÑ≤&#34;,&#xA;            Recovery = &#34;üÖÅ&#34;,&#xA;            TranslationUnit = &#34;üÖÑ&#34;,&#xA;            PackExpansion = &#34;üÑø&#34;,&#xA;            TemplateTypeParm = &#34;üÖÉ&#34;,&#xA;            TemplateTemplateParm = &#34;üÖÉ&#34;,&#xA;            TemplateParamObject = &#34;üÖÉ&#34;,&#xA;        },&#xA;        --[[ These require codicons (https://github.com/microsoft/vscode-codicons)&#xA;            role_icons = {&#xA;                type = &#34;Ó≠£&#34;,&#xA;                declaration = &#34;Ó™å&#34;,&#xA;                expression = &#34;Ó©±&#34;,&#xA;                specifier = &#34;ÓÆÜ&#34;,&#xA;                statement = &#34;Ó™Ü&#34;,&#xA;                [&#34;template argument&#34;] = &#34;Ó™í&#34;,&#xA;            },&#xA;&#xA;            kind_icons = {&#xA;                Compound = &#34;Ó™ã&#34;,&#xA;                Recovery = &#34;Ó™á&#34;,&#xA;                TranslationUnit = &#34;Ó´©&#34;,&#xA;                PackExpansion = &#34;Ó©º&#34;,&#xA;                TemplateTypeParm = &#34;Ó™í&#34;,&#xA;                TemplateTemplateParm = &#34;Ó™í&#34;,&#xA;                TemplateParamObject = &#34;Ó™í&#34;,&#xA;            }, ]]&#xA;&#xA;        highlights = {&#xA;            detail = &#34;Comment&#34;,&#xA;        },&#xA;    },&#xA;    memory_usage = {&#xA;        border = &#34;none&#34;,&#xA;    },&#xA;    symbol_info = {&#xA;        border = &#34;none&#34;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://clangd.llvm.org/extensions#inlay-hints&#34;&gt;Inlay hints&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36493671/152699601-61ad1640-96bf-4082-b553-75d4085c3496.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;Add this to your nvim-lspconfig / &lt;code&gt;vim.lsp.start()&lt;/code&gt;&#39;s &lt;code&gt;on_attach&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;clangd_extensions.inlay_hints&#34;).setup_autocmd()&#xA;require(&#34;clangd_extensions.inlay_hints&#34;).set_inlay_hints()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://clangd.llvm.org/extensions#ast&#34;&gt;View AST&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36493671/255611133-35f397d3-02f8-4d14-b70a-126be6c098fa.gif&#34; alt=&#34;image&#34;&gt; You can fold nodes using &lt;code&gt;zc&lt;/code&gt; and friends - the AST window has &lt;code&gt;shiftwidth=2&lt;/code&gt; and &lt;code&gt;foldmethod=indent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;:ClangdAST&lt;/code&gt; to view the ast with the current line as the range, &lt;code&gt;:&#39;&amp;lt;,&#39;&amp;gt;ClangdAST&lt;/code&gt; with a visual selection to view the ast with the selected lines as range. See how ranges are handled at &lt;a href=&#34;https://clangd.llvm.org/extensions#ast&#34;&gt;https://clangd.llvm.org/extensions#ast&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://clangd.llvm.org/extensions#code-completion-scores&#34;&gt;Completion scores&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Usage: For nvim-cmp&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cmp = require &#34;cmp&#34;&#xA;cmp.setup {&#xA;    -- ... rest of your cmp setup ...&#xA;&#xA;    sorting = {&#xA;        comparators = {&#xA;            cmp.config.compare.offset,&#xA;            cmp.config.compare.exact,&#xA;            cmp.config.compare.recently_used,&#xA;            require(&#34;clangd_extensions.cmp_scores&#34;),&#xA;            cmp.config.compare.kind,&#xA;            cmp.config.compare.sort_text,&#xA;            cmp.config.compare.length,&#xA;            cmp.config.compare.order,&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://clangd.llvm.org/extensions#symbol-info-request&#34;&gt;Symbol info&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36493671/152699367-dc928adf-d3ed-4e8e-a9d0-ca573f01c008.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;:ClangdSymbolInfo&lt;/code&gt; with the cursor at the desired symbol.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://clangd.llvm.org/extensions#type-hierarchy&#34;&gt;Type hierarchy&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/36493671/255609950-80bebd4a-9800-432d-9f0c-5e5519eeba6f.gif&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;:ClangdTypeHierarchy&lt;/code&gt; with the cursor over the desired type or a symbol of that type. &lt;code&gt;gd&lt;/code&gt; with the cursor over a type in a window to go to its definition.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://clangd.llvm.org/extensions#memory-usage&#34;&gt;Memory usage&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can fold items using &lt;code&gt;zc&lt;/code&gt; and friends - the memory usage window has &lt;code&gt;shiftwidth=2&lt;/code&gt; and &lt;code&gt;foldmethod=indent&lt;/code&gt;. &lt;img src=&#34;https://user-images.githubusercontent.com/36493671/152699322-9e537b1a-8253-45c1-ada3-752effeac39b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;:ClangdMemoryUsage&lt;/code&gt;. Preamble can be large so it is collapsed by default, to expand it use &lt;code&gt;:ClangdMemoryUsage expand_preamble&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementation status of &lt;a href=&#34;https://clangd.llvm.org/extensions&#34;&gt;extensions&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;‚òëÔ∏è Memory usage (implemented)&lt;/p&gt; &#xA;&lt;p&gt;‚òëÔ∏è AST (implemented)&lt;/p&gt; &#xA;&lt;p&gt;‚òëÔ∏è Symbol info request (implemented)&lt;/p&gt; &#xA;&lt;p&gt;‚òëÔ∏è Type hierarchy (implemented)&lt;/p&gt; &#xA;&lt;p&gt;‚òëÔ∏è Inlay hints (implemented)&lt;/p&gt; &#xA;&lt;p&gt;‚òëÔ∏è Switch between source/header (nvim-lspconfig already does this)&lt;/p&gt; &#xA;&lt;p&gt;‚òëÔ∏è File status (see lsp-status.nvim)&lt;/p&gt; &#xA;&lt;p&gt;‚òëÔ∏è Compilation commands (can be specified in lspconfig &lt;code&gt;init_options&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;‚òëÔ∏è Code completion scores (implemented)&lt;/p&gt; &#xA;&lt;p&gt;‚¨ú Force diagnostics generation (not sure)&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simrat39&#34;&gt;simrat39&lt;/a&gt; - the code for inlay hints was taken from &lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim&#34;&gt;rust-tools.nvim&lt;/a&gt; with very minor changes.&lt;/p&gt;</summary>
  </entry>
</feed>