<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-29T01:33:48Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hat0uma/csvview.nvim</title>
    <updated>2025-06-29T01:33:48Z</updated>
    <id>tag:github.com,2025-06-29:/hat0uma/csvview.nvim</id>
    <link href="https://github.com/hat0uma/csvview.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim plugin for CSV file editing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;csvview.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A comfortable CSV/TSV editing plugin for Neovim.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video controls src=&#34;https://github.com/user-attachments/assets/f529b978-9ae4-4413-b73a-f0fa431c900d&#34;&gt;&lt;/video&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tabular Display&lt;/strong&gt;: Displays CSV/TSV files in a virtual text table.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Updates&lt;/strong&gt;: Automatically refreshes the table as you edit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Asynchronous Parsing&lt;/strong&gt;: Smoothly handles large CSV files without blocking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Text Objects &amp;amp; Motions&lt;/strong&gt;: Conveniently select fields or move across fields/rows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Comment Ignoring&lt;/strong&gt;: Skips specified comment lines from the table display.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sticky Header&lt;/strong&gt;: Keeps the header row visible while scrolling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible Settings&lt;/strong&gt;: Customizable delimiter and comment prefix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Two Display Modes&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;highlight&lt;/code&gt;: Highlights delimiters.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;border&lt;/code&gt;: Uses a vertical border (&lt;code&gt;‚îÇ&lt;/code&gt;) as delimiters.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;display_mode = &#34;highlight&#34;&lt;/th&gt; &#xA;   &lt;th&gt;display_mode = &#34;border&#34;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/cb26e430-c3cb-407f-bb80-42c11ba7fa19&#34;&gt; &lt;/td&gt; &#xA;   &lt;td&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/17e5fc01-9a58-4801-b2a6-3d23ca48e26f&#34;&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h2&gt;‚ö° Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Neovim v0.10 or newer is required.&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin using your favorite package manager.&lt;/p&gt; &#xA;&lt;h3&gt;lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;hat0uma/csvview.nvim&#34;,&#xA;  ---@module &#34;csvview&#34;&#xA;  ---@type CsvView.Options&#xA;  opts = {&#xA;    parser = { comments = { &#34;#&#34;, &#34;//&#34; } },&#xA;    keymaps = {&#xA;      -- Text objects for selecting fields&#xA;      textobject_field_inner = { &#34;if&#34;, mode = { &#34;o&#34;, &#34;x&#34; } },&#xA;      textobject_field_outer = { &#34;af&#34;, mode = { &#34;o&#34;, &#34;x&#34; } },&#xA;      -- Excel-like navigation:&#xA;      -- Use &amp;lt;Tab&amp;gt; and &amp;lt;S-Tab&amp;gt; to move horizontally between fields.&#xA;      -- Use &amp;lt;Enter&amp;gt; and &amp;lt;S-Enter&amp;gt; to move vertically between rows and place the cursor at the end of the field.&#xA;      -- Note: In terminals, you may need to enable CSI-u mode to use &amp;lt;S-Tab&amp;gt; and &amp;lt;S-Enter&amp;gt;.&#xA;      jump_next_field_end = { &#34;&amp;lt;Tab&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;      jump_prev_field_end = { &#34;&amp;lt;S-Tab&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;      jump_next_row = { &#34;&amp;lt;Enter&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;      jump_prev_row = { &#34;&amp;lt;S-Enter&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;    },&#xA;  },&#xA;  cmd = { &#34;CsvViewEnable&#34;, &#34;CsvViewDisable&#34;, &#34;CsvViewToggle&#34; },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;hat0uma/csvview.nvim&#39;&#xA;lua require(&#39;csvview&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;csvview.nvim&lt;/code&gt; are highly customizable, Please refer to the following default settings.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Default Settings&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  parser = {&#xA;    --- The number of lines that the asynchronous parser processes per cycle.&#xA;    --- This setting is used to prevent monopolization of the main thread when displaying large files.&#xA;    --- If the UI freezes, try reducing this value.&#xA;    --- @type integer&#xA;    async_chunksize = 50,&#xA;&#xA;    --- The delimiter character&#xA;    --- You can specify a string, a table of delimiter characters for each file type, or a function that returns a delimiter character.&#xA;    --- Currently, only fixed-length strings are supported. Regular expressions such as \s+ are not supported.&#xA;    --- e.g:&#xA;    ---  delimiter = &#34;,&#34;&#xA;    ---  delimiter = function(bufnr) return &#34;,&#34; end&#xA;    ---  delimiter = {&#xA;    ---    default = &#34;,&#34;,&#xA;    ---    ft = {&#xA;    ---      tsv = &#34;\t&#34;,&#xA;    ---    },&#xA;    ---  }&#xA;    --- @type CsvView.Options.Parser.Delimiter&#xA;    delimiter = {&#xA;      default = &#34;,&#34;,&#xA;      ft = {&#xA;        tsv = &#34;\t&#34;,&#xA;      },&#xA;    },&#xA;&#xA;    --- The quote character&#xA;    --- If a field is enclosed in this character, it is treated as a single field and the delimiter in it will be ignored.&#xA;    --- e.g:&#xA;    ---  quote_char= &#34;&#39;&#34;&#xA;    --- You can also specify it on the command line.&#xA;    --- e.g:&#xA;    --- :CsvViewEnable quote_char=&#39;&#xA;    --- @type string&#xA;    quote_char = &#39;&#34;&#39;,&#xA;&#xA;    --- The comment prefix characters&#xA;    --- If the line starts with one of these characters, it is treated as a comment.&#xA;    --- Comment lines are not displayed in tabular format.&#xA;    --- You can also specify it on the command line.&#xA;    --- e.g:&#xA;    --- :CsvViewEnable comment=#&#xA;    --- @type string[]&#xA;    comments = {&#xA;      -- &#34;#&#34;,&#xA;      -- &#34;--&#34;,&#xA;      -- &#34;//&#34;,&#xA;    },&#xA;&#xA;    --- Maximum lookahead for multi-line fields&#xA;    --- This limits how many lines ahead the parser will look when trying to find &#xA;    --- the closing quote of a multi-line field. Setting this too high may cause&#xA;    --- performance issues when editing files with unmatched quotes.&#xA;    --- @type integer&#xA;    max_lookahead = 50,&#xA;  },&#xA;  view = {&#xA;    --- minimum width of a column&#xA;    --- @type integer&#xA;    min_column_width = 5,&#xA;&#xA;    --- spacing between columns&#xA;    --- @type integer&#xA;    spacing = 2,&#xA;&#xA;    --- The display method of the delimiter&#xA;    --- &#34;highlight&#34; highlights the delimiter&#xA;    --- &#34;border&#34; displays the delimiter with `‚îÇ`&#xA;    --- You can also specify it on the command line.&#xA;    --- e.g:&#xA;    --- :CsvViewEnable display_mode=border&#xA;    ---@type CsvView.Options.View.DisplayMode&#xA;    display_mode = &#34;highlight&#34;,&#xA;&#xA;    --- The line number of the header&#xA;    --- If this is set, the line is treated as a header. and used for sticky header feature.&#xA;    --- see also: `view.sticky_header`&#xA;    --- @type integer|false&#xA;    header_lnum = false,&#xA;&#xA;    --- The sticky header feature settings&#xA;    --- If `view.header_lnum` is set, the header line is displayed at the top of the window.&#xA;    sticky_header = {&#xA;      --- Whether to enable the sticky header feature&#xA;      --- @type boolean&#xA;      enabled = true,&#xA;&#xA;      --- The separator character for the sticky header window&#xA;      --- set `false` to disable the separator&#xA;      --- @type string|false&#xA;      separator = &#34;‚îÄ&#34;,&#xA;    },&#xA;  },&#xA;&#xA;  --- Keymaps for csvview.&#xA;  --- These mappings are only active when csvview is enabled.&#xA;  --- You can assign key mappings to each action defined in `opts.actions`.&#xA;  --- For example:&#xA;  --- ```lua&#xA;  --- keymaps = {&#xA;  ---   -- Text objects for selecting fields&#xA;  ---   textobject_field_inner = { &#34;if&#34;, mode = { &#34;o&#34;, &#34;x&#34; } },&#xA;  ---   textobject_field_outer = { &#34;af&#34;, mode = { &#34;o&#34;, &#34;x&#34; } },&#xA;  ---&#xA;  ---   -- Excel-like navigation:&#xA;  ---   -- Use &amp;lt;Tab&amp;gt; and &amp;lt;S-Tab&amp;gt; to move horizontally between fields.&#xA;  ---   -- Use &amp;lt;Enter&amp;gt; and &amp;lt;S-Enter&amp;gt; to move vertically between rows.&#xA;  ---   -- Note: In terminals, you may need to enable CSI-u mode to use &amp;lt;S-Tab&amp;gt; and &amp;lt;S-Enter&amp;gt;.&#xA;  ---   jump_next_field_end = { &#34;&amp;lt;Tab&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;  ---   jump_prev_field_end = { &#34;&amp;lt;S-Tab&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;  ---   jump_next_row = { &#34;&amp;lt;Enter&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;  ---   jump_prev_row = { &#34;&amp;lt;S-Enter&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;  ---&#xA;  ---   -- Custom key mapping example:&#xA;  ---   { &#34;&amp;lt;leader&amp;gt;h&#34;, function() print(&#34;hello&#34;) end, mode = &#34;n&#34; },&#xA;  --- }&#xA;  --- ```&#xA;  --- @type CsvView.Options.Keymaps&#xA;  keymaps = {},&#xA;&#xA;  --- Actions for keymaps.&#xA;  ---@type CsvView.Options.Actions&#xA;  actions = {&#xA;    -- See lua/csvview/config.lua&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;After opening a CSV file, use the following commands to interact with the plugin:&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:CsvViewEnable [options]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable CSV view with the specified options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:CsvViewDisable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable CSV view.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:CsvViewToggle [options]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle CSV view with the specified options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Command Options&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;delimiter&lt;/code&gt;&lt;/strong&gt; (string):&lt;br&gt; Specifies the field delimiter character. See &lt;code&gt;options.parser.delimiter&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;quote_char&lt;/code&gt;&lt;/strong&gt; (string):&lt;br&gt; The quote character for enclosing fields. See &lt;code&gt;options.parser.quote_char&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;comment&lt;/code&gt;&lt;/strong&gt; (string):&lt;br&gt; The comment prefix character. See &lt;code&gt;options.parser.comments&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;display_mode&lt;/code&gt;&lt;/strong&gt; (string):&lt;br&gt; Method for displaying delimiters. Possible values are &lt;code&gt;highlight&lt;/code&gt; and &lt;code&gt;border&lt;/code&gt;. See &lt;code&gt;options.view.display_mode&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;code&gt;header_lnum&lt;/code&gt;&lt;/strong&gt; (number):&lt;br&gt; Line number (1-based) to treat as a header. If set, that line remains ‚Äústicky‚Äù at the top when scrolling. See &lt;code&gt;options.view.header_lnum&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;To toggle CSV view, use the following command. By default, the delimiter is &lt;code&gt;,&lt;/code&gt; for CSV files and &lt;code&gt;\t&lt;/code&gt; for TSV files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:CsvViewToggle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To toggle CSV view with a custom field delimiter, a custom string delimiter and comment, use the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:CsvViewToggle delimiter=, quote_char=&#39; comment=# display_mode=border&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lua API&lt;/h3&gt; &#xA;&lt;p&gt;Below are the core Lua functions that you can call programmatically. If you want to map these functions to key bindings, you can use the &lt;code&gt;opts.keymaps&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;Basic Functions&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;require(&#39;csvview&#39;).enable()&lt;/code&gt;: Enable CSV view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require(&#39;csvview&#39;).disable()&lt;/code&gt;: Disable CSV view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require(&#39;csvview&#39;).toggle()&lt;/code&gt;: Toggle CSV view.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require(&#39;csvview&#39;).is_enabled()&lt;/code&gt;: Check if CSV view is enabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Jump Motions&lt;/h4&gt; &#xA;&lt;p&gt;You can move across CSV fields and rows with the following API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Basic usage:&#xA;require(&#34;csvview.jump&#34;).field(0, {&#xA;  pos = { 1, 2 },      -- Move to row=1, column=2&#xA;  mode = &#34;absolute&#34;,   -- &#34;absolute&#34;: interpret `pos` as absolute coords.&#xA;                       -- &#34;relative&#34;: interpret `pos` as offset from the current field.&#xA;  anchor = &#34;start&#34;,    -- &#34;start&#34;: place the cursor at field start, &#34;end&#34; : field end.&#xA;  col_wrap = true,     -- Wrap to the next/previous row when exceeding column bounds.&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Shortcuts for common movements:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Jump to the start of the next field like `w` motion.&#xA;require(&#34;csvview.jump&#34;).next_field_start(bufnr?)&#xA;-- Jump to the start of the previous field like `b` motion.&#xA;require(&#34;csvview.jump&#34;).prev_field_start(bufnr?)&#xA;-- Jump to the end of the next field like `e` motion.&#xA;require(&#34;csvview.jump&#34;).next_field_end(bufnr?)&#xA;-- Jump to the end of the previous field like `ge` motion.&#xA;require(&#34;csvview.jump&#34;).prev_field_end(bufnr?)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Text Objects&lt;/h4&gt; &#xA;&lt;p&gt;For selecting a CSV field via text objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;csvview.textobject&#34;).field(0, {&#xA;  include_delimiter = false -- Include the delimiter in the selection&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Cursor Information&lt;/h4&gt; &#xA;&lt;p&gt;Retrieve detailed information about the cursor position:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local info = require(&#34;csvview.util&#34;).get_cursor(bufnr)&#xA;&#xA;-- info returns:&#xA;-- {&#xA;--   kind   = &#34;field&#34; | &#34;comment&#34; | &#34;empty_line&#34;,&#xA;--   pos    = { 1, 2 },    -- 1-based [row, col] csv coordinates&#xA;--   anchor = &#34;start&#34; | &#34;end&#34; | &#34;inside&#34; | &#34;delimiter&#34;, -- The position of the cursor in the field&#xA;--   text   = &#34;the field content&#34;&#xA;-- }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;p&gt;This plugin provides the following events:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CsvViewAttach&lt;/td&gt; &#xA;   &lt;td&gt;Triggered after the initial metrics calculation is completed and the CsvView is attached.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CsvViewDetach&lt;/td&gt; &#xA;   &lt;td&gt;Triggered after the CsvView is detached.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;You can hook into these events as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local group = vim.api.nvim_create_augroup(&#34;CsvViewEvents&#34;, {})&#xA;vim.api.nvim_create_autocmd(&#34;User&#34;, {&#xA;  pattern = &#34;CsvViewAttach&#34;,&#xA;  group = group,&#xA;  callback = function(args)&#xA;    local bufnr = tonumber(args.data)&#xA;    print(&#34;CsvView is attached&#34;, bufnr)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üåà Highlights&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Group&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CsvViewDelimiter&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;link to &lt;code&gt;Comment&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used for &lt;code&gt;,&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CsvViewComment&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;link to &lt;code&gt;Comment&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used for comment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CsvViewStickyHeaderSeparator&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;link to &lt;code&gt;CsvViewDelimiter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used for sticky header separator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CsvViewHeaderLine&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;used for header highlighting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;CsvViewCol0&lt;/strong&gt; to &lt;strong&gt;CsvViewCol8&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;link to &lt;code&gt;csvCol0&lt;/code&gt; to &lt;code&gt;csvCol8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;used for field highlighting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;üìù TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Customizable delimiter character.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ignore comment lines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Motions and text objects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Enhanced editing features (e.g., sorting, filtering).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Row, column, and cell change events for integration with other plugins.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Not planned&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pre- and post-processing of files, such as reading/writing Excel files.&lt;/li&gt; &#xA; &lt;li&gt;Displaying tables embedded in Markdown as formatted tables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please open an issue or submit a pull request on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;üìÑ License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License.&lt;/p&gt; &#xA;&lt;h2&gt;üëè Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-context&#34;&gt;nvim-treesitter-context&lt;/a&gt; for inspiration of the sticky-header feature.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>