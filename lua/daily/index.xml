<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-09T01:40:36Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jbyuki/one-small-step-for-vimkind</title>
    <updated>2023-07-09T01:40:36Z</updated>
    <id>tag:github.com,2023-07-09:/jbyuki/one-small-step-for-vimkind</id>
    <link href="https://github.com/jbyuki/one-small-step-for-vimkind" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debug adapter for Neovim plugins&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;one-small-step-for-vimkind&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;one-small-step-for-vimkind&lt;/code&gt; is an &lt;strong&gt;adapter&lt;/strong&gt; for the Neovim lua language. See the &lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/overview&#34;&gt;DAP protocol&lt;/a&gt; to know more about adapters. It allows you to debug any lua code running in a Neovim instance.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Install using your prefered method for example using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;jbyuki/one-small-step-for-vimkind&#39;&#xA;&#xA;&#34; You will also need a comptabile DAP client&#xA;&#xA;Plug &#39;mfussenegger/nvim-dap&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing &lt;code&gt;one-small-step-for-vimkind&lt;/code&gt;, you will also need a DAP plugin which will allow you to interact with the adapter. There are mainly two available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Add these lines to work with &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local dap = require&#34;dap&#34;&#xA;dap.configurations.lua = { &#xA;  { &#xA;    type = &#39;nlua&#39;, &#xA;    request = &#39;attach&#39;,&#xA;    name = &#34;Attach to running Neovim instance&#34;,&#xA;  }&#xA;}&#xA;&#xA;dap.adapters.nlua = function(callback, config)&#xA;  callback({ type = &#39;server&#39;, host = config.host or &#34;127.0.0.1&#34;, port = config.port or 8086 })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set keybindings to interact with the nvim-dap client.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;F8&amp;gt;&#39;, [[:lua require&#34;dap&#34;.toggle_breakpoint()&amp;lt;CR&amp;gt;]], { noremap = true })&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;F9&amp;gt;&#39;, [[:lua require&#34;dap&#34;.continue()&amp;lt;CR&amp;gt;]], { noremap = true })&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;F10&amp;gt;&#39;, [[:lua require&#34;dap&#34;.step_over()&amp;lt;CR&amp;gt;]], { noremap = true })&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;S-F10&amp;gt;&#39;, [[:lua require&#34;dap&#34;.step_into()&amp;lt;CR&amp;gt;]], { noremap = true })&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;F12&amp;gt;&#39;, [[:lua require&#34;dap.ui.widgets&#34;.hover()&amp;lt;CR&amp;gt;]], { noremap = true })&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;F5&amp;gt;&#39;, [[:lua require&#34;osv&#34;.launch({port = 8086})&amp;lt;CR&amp;gt;]], { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch the server in the debuggee using &lt;code&gt;F5&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open another Neovim instance with the source file&lt;/li&gt; &#xA; &lt;li&gt;Place breakpoint with &lt;code&gt;F8&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Connect using the DAP client with &lt;code&gt;F9&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run your script/plugin in the debuggee&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Alternaltively you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open a lua file&lt;/li&gt; &#xA; &lt;li&gt;Place breakpoint&lt;/li&gt; &#xA; &lt;li&gt;Invoke &lt;code&gt;require&#34;osv&#34;.run_this()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jbyuki/lua-debug.nvim/raw/main/doc/osv.txt&#34;&gt;osv.txt&lt;/a&gt; for more detailed instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshoot&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;flatten.nvim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Set &lt;code&gt;nest_if_no_args&lt;/code&gt; to true. See &lt;a href=&#34;https://github.com/willothy/flatten.nvim/issues/41&#34;&gt;this issue&lt;/a&gt; for more informations.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging plugins&lt;/h3&gt; &#xA;&lt;p&gt;Breakpoints are path-sensitive so they should always be set in the executed file even though they might be multiple copies on the system.&lt;/p&gt; &#xA;&lt;p&gt;This is the case for &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; when developing local plugins. packer.nvim will create a symlink to the plugins files in the &lt;code&gt;nvim-data&lt;/code&gt; directory ( it can be located using &lt;code&gt;:echo stdpath(&#39;data&#39;)&lt;/code&gt;). Make sure to set the breakpoints inside the source files in the &lt;code&gt;nvim-data&lt;/code&gt; directory and not the local copy. The plugin directory can be found in &lt;code&gt;nvim-data/site/pack/packer/start/YOUR_PLUGIN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jbyuki/lua-debug.nvim/raw/main/doc/osv.txt&#34;&gt;osv.txt&lt;/a&gt; for more detailed instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Dropbox&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using a service like Dropbox to share your plugin file, there might be some issue arising with osv. The reason is that the path executed within Neovim and the path opened in dap doesn&#39;t match. Consequently, osv has no way to know if the current running script is the same file as the file opened inside the dap client. Try falling back to a local folder to see if this is the cause.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Neovim is waiting for input at startup. Aborting&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This appears when the osv&#39;s spawned headless neovim instance has an error at startup. Vim will usually wait for an user input but in case of osv, the instance is simply blocked. Resolve any errors that you see at startup. If there are none, the error might be due to the &#34;headlessness&#34;. Start using &lt;code&gt;nvim --headless&lt;/code&gt; to see if there are any errors.&lt;/p&gt; &#xA;&lt;h3&gt;Breakpoint is not hit&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt; : Make sure osv is not running.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start tracing with &lt;code&gt;:lua require&#34;osv&#34;.start_trace()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Perform the action that should be debugged (for ex. calling a function in your plugin)&lt;/li&gt; &#xA; &lt;li&gt;Stop tracing and display the results with &lt;code&gt;:lua =require&#34;osv&#34;.stop_trace()&lt;/code&gt; , the &lt;code&gt;=&lt;/code&gt; will pretty print the resulting lua table.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Make sure that the path is correct and the breakpoint is set to a line which effectively gets executed.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;Handlers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; attach&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; scope&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; setBreakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; stackTrace&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; threads&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; variables&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; stepIn&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; next&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; stepOut&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; continue&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; evaluate&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pause&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; terminate&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; disconnect&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; setVariable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; setFunctionBreakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; setExceptionBreakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; breakpointLocations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Events:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; initialized&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; stopped&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; terminated&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; exited&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Capabilities:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; supportsConditionalBreakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; supportsHitConditionalBreakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; supportsSetVariable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; supportTerminateDebuggee&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Name&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;it&#39;s a debugger for the moon language. - @tjdevries&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Plugin architecture&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://raw.githubusercontent.com/jbyuki/one-small-step-for-vimkind/main/ARCHITECTURE.md&#34;&gt;ARCHITECTURE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lua-debugger&#34;&gt;mfussenegger/nvim-lua-debugger&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/jbyuki/ntangle.nvim/wiki/How-to-use-ntangle.nvim&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>