<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-16T01:39:42Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dimaportenko/telescope-simulators.nvim</title>
    <updated>2023-02-16T01:39:42Z</updated>
    <id>tag:github.com,2023-02-16:/dimaportenko/telescope-simulators.nvim</id>
    <link href="https://github.com/dimaportenko/telescope-simulators.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A telescope.nvim extension to open iOS simulators and Android emulators.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope-simulators.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Welcome to the &lt;strong&gt;telescope-simulators.nvim&lt;/strong&gt; a &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; extension! This extension is designed to make it easy to open iOS simulators and Android emulators directly from within the Neovim text editor. You can quickly launch simulators and emulators without having to leave the comfort of your text editor. Whether you&#39;re developing mobile apps or simply testing your code, this extension will save you time and improve your workflow. Get ready to take your mobile development experience to the next level with &lt;strong&gt;telescope-simulators.nvim&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dimaportenko/telescope-simulators.nvim/main/docs/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;dimaportenko/telescope-simulators.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Telescope simulators run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;simulators&#34;).setup({&#xA;  android_emulator = false,&#xA;  apple_simulator = true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;This project is intended for people who do mobile app development and already have the necessary dependencies installed. The following command line tools are used in this project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;emulator&lt;/code&gt; (for Android)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;xcrun&lt;/code&gt; (for Apple simulators)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It has been tested on Mac OS, so if you are using a different operating system, your mileage may vary.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure that you have the latest version of these tools installed before using this project. If you encounter any issues, please refer to the official documentation for the relevant tool for guidance.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>liangxianzhe/nap.nvim</title>
    <updated>2023-02-16T01:39:42Z</updated>
    <id>tag:github.com,2023-02-16:/liangxianzhe/nap.nvim</id>
    <link href="https://github.com/liangxianzhe/nap.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickly move between next and previous NeoVim buffer, tab, file, quickfix, diagnostic, etc.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nap.nvim (next and previous)&lt;/h1&gt; &#xA;&lt;p&gt;Quickly jump between next and previous NeoVim buffer, tab, file, quickfix, diagnostic, etc.&lt;/p&gt; &#xA;&lt;p&gt;A lightweight plugin inspired by &lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;unimpaired.vim&lt;/a&gt;, but:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Focus on navigation, not editing or option toggling.&lt;/li&gt; &#xA; &lt;li&gt;Jump back and forth easily with a single key, instead of two keys.&lt;/li&gt; &#xA; &lt;li&gt;Written in Lua.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TLDR&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;b&lt;/code&gt; (buffer) as an example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c-n&amp;gt;b&lt;/code&gt;/&lt;code&gt;&amp;lt;c-p&amp;gt;b&lt;/code&gt; jump to next/previous buffer. Then just pressing &lt;code&gt;&amp;lt;c-n&amp;gt;&amp;lt;c-n&amp;gt;&amp;lt;c-n&amp;gt;&amp;lt;c-p&amp;gt;&amp;lt;c-p&amp;gt;...&lt;/code&gt; to cycle through buffers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c-n&amp;gt;B&lt;/code&gt;/&lt;code&gt;&amp;lt;c-p&amp;gt;B&lt;/code&gt; jump to last/first buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Operators&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Operator&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;a, A&lt;/td&gt; &#xA;   &lt;td&gt;Tab&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;b, B&lt;/td&gt; &#xA;   &lt;td&gt;Buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;d&lt;/td&gt; &#xA;   &lt;td&gt;Diagnostic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;l, L, C-l&lt;/td&gt; &#xA;   &lt;td&gt;Location list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;q, Q, C-q&lt;/td&gt; &#xA;   &lt;td&gt;Quickfix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s&lt;/td&gt; &#xA;   &lt;td&gt;Spell&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;t, T, C-t&lt;/td&gt; &#xA;   &lt;td&gt;Tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The following are not yet supported, feel free to suggest others:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add File operator, similar to unimpaired.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support count.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Add new operator&lt;/h2&gt; &#xA;&lt;p&gt;You can add/override operators or easily. For example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Gitsigns&lt;/a&gt;, &lt;code&gt;require(&#34;nap&#34;).nap(&#39;c&#39;, &#34;Gitsigns next_hunk&#34;, &#34;Gitsigns prev_hunk&#34;, &#34;Next diff&#34;, &#34;Previous diff&#34;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;With &lt;a href=&#34;https://github.com/stevearc/aerial.nvim&#34;&gt;Aerial&lt;/a&gt;, &lt;code&gt;require(&#34;nap&#34;).nap(&#34;o&#34;, &#34;AerialNext&#34;, &#34;AerialPrev&#34;, &#34;Next outline symbol&#34;, &#34;Previous outline symbol&#34;)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install and config&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;liangxianzhe/nap-nvim&lt;/code&gt; to your plugin manager.&lt;/p&gt; &#xA;&lt;p&gt;Add &lt;code&gt;require(&#34;nap&#34;).setup()&lt;/code&gt; to use default keys. Or change these default keys:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require(&#34;nap&#34;).setup({&#xA;    next_prefix = &#34;&amp;lt;c-n&amp;gt;&#34;&#xA;    prev_prefix = &#34;&amp;lt;c-p&amp;gt;&#34;&#xA;    next_repeat = &#34;&amp;lt;c-n&amp;gt;&#34;&#xA;    prev_repeat = &#34;&amp;lt;c-p&amp;gt;&#34;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We need two pairs of keys: &lt;code&gt;prefix&lt;/code&gt; keys to trigger the first jump, and &lt;code&gt;repeat&lt;/code&gt; keys to repeat with a single press. &lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; are chosen as defaults because most people don&#39;t map them.&lt;/p&gt; &#xA;&lt;p&gt;However, setting &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;repeat&lt;/code&gt; to the same key has one issue. When pressing &lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt; to repeat jump, vim will need to wait &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;timeoutlen&#39;&#34;&gt;timeoutlen&lt;/a&gt; to determine whether its is &lt;code&gt;&amp;lt;c-n&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;c-n&amp;gt;b&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Personally I use the following setup so I can cycle through using &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;C-Enter&amp;gt;&lt;/code&gt; much faster.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require(&#34;nap&#34;).setup({&#xA;    next_prefix = &#34;&amp;lt;space&amp;gt;&#34; -- I use ; as leader so space is free&#xA;    prev_prefix = &#34;&amp;lt;c-space&amp;gt;&#34; -- Used much less &#xA;    next_repeat = &#34;&amp;lt;cr&amp;gt;&#34; -- Enter is easy to press&#xA;    prev_repeat = &#34;&amp;lt;c-cr&amp;gt;&#34; -- C-Enter is easy too&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The best config for you depends on your leader key and your terminal. Here are a few examples, feel free to try it out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-n&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-p&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-Enter&amp;gt;&lt;/code&gt; (Some terminal doesn&#39;t support &lt;code&gt;C-Enter&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt; (If you remap leader key, the original leader key is near Enter)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-Space&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;;&lt;/code&gt; and &lt;code&gt;,&lt;/code&gt; (use Leap/Flit or similar plugins to free these two keys)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;]&lt;/code&gt; and &lt;code&gt;[&lt;/code&gt; (&#34;:help ]&#34; to check default mappings)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt; (&#34;:help &amp;gt;&#34; to check default mappings)&lt;/li&gt; &#xA; &lt;li&gt;Some &lt;code&gt;Alt&lt;/code&gt; prefixed keys (Need terminal supports)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-unimpaired&#34;&gt;unimpaired.vim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>