<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-25T01:40:50Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ray-x/navigator.lua</title>
    <updated>2022-08-25T01:40:50Z</updated>
    <id>tag:github.com,2022-08-25:/ray-x/navigator.lua</id>
    <link href="https://github.com/ray-x/navigator.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code analysis &amp; navigation plugin for Neovim. Navigate codes like a breezeüéê. Exploring LSP and üå≤Treesitter symbols a piece of üç∞. Take control like a boss ü¶ç.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Navigator&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Source code analysis and navigate tool&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easy code navigation, view diagnostic errors, see relationships of functions, variables&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A plugin combines the power of LSP and üå≤üè° Treesitter together. Not only provids a better highlight but also help you analyse symbol context effectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ctags fuzzy search &amp;amp; build ctags symbols&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://youtu.be/P1kd7Y8AatE&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/147378905-51eede5f-e36d-48f4-9799-ae562949babe.jpeg&#34; alt=&#34;a short intro of navigator&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some examples&lt;/p&gt; &#xA;&lt;h4&gt;Example: Javascript closure&lt;/h4&gt; &#xA;&lt;p&gt;The following screenshot shows javascript call tree üå≤ of variable &lt;code&gt;browser&lt;/code&gt; insides a closure. This feature is similar to incoming &amp;amp; outgoing calls from LSP. It is designed for the symbol analysis.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/126022829-291a7a2e-4d24-4fde-8293-5ae61562e67d.jpg&#34; alt=&#34;navigator&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explanation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first line of floating windows shows there are 3 references for the symbol &lt;span style=&#34;color:red&#34;&gt; &lt;em&gt;browser&lt;/em&gt; &lt;/span&gt; in closure.js&lt;/li&gt; &#xA; &lt;li&gt;The first reference of browser is an assignment, an emoji üìù indicates the value is changed in this line. In many cases, we search for references to find out when the value changed.&lt;/li&gt; &#xA; &lt;li&gt;The second reference of &lt;code&gt;browser&lt;/code&gt; is inside function &lt;code&gt;displayName&lt;/code&gt; and &lt;code&gt;displayName&lt;/code&gt; sit inside &lt;code&gt;makeFunc&lt;/code&gt;, So you will see &lt;code&gt; displayName{} &amp;lt;- makeFunc{}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The third similar to the second, as var browser is on the right side of &#39;=&#39;, the value not changed in this line and emoji is not shown.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example: C++ definition&lt;/h4&gt; &#xA;&lt;p&gt;C++ example: search reference and definition &lt;img src=&#34;https://user-images.githubusercontent.com/1681295/119215215-8bd7a080-bb0f-11eb-82fc-8cdf1955e6e7.jpg&#34; alt=&#34;cpp_ref&#34;&gt; You may find a ü¶ï dinosaur(d) on the line of &lt;code&gt;Rectangle rect,&lt;/code&gt; which means there is a definition (d for def) of rect in this line.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;- f main()&lt;/code&gt; means the definition is inside function main().&lt;/p&gt; &#xA;&lt;h4&gt;Golang struct type&lt;/h4&gt; &#xA;&lt;p&gt;Struct type references in multiple Go Ô≥ë files&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/119123823-54b3b180-ba73-11eb-8790-097601e10f6a.gif&#34; alt=&#34;go_reference&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This feature can provide you info in which function/class/method the variable was referenced. It is handy for a large project where class/function definition is too long to fit into the preview window. Also provides a bird&#39;s eye view of where the variable is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Referenced&lt;/li&gt; &#xA; &lt;li&gt;Modified&lt;/li&gt; &#xA; &lt;li&gt;Defined&lt;/li&gt; &#xA; &lt;li&gt;Called&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Features:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;LSP easy setup. Support the most commonly used lsp clients setup. Dynamic lsp activation based on buffer type. This also enables you to handle workspace with mixed types of codes (e.g. Go + javascript + yml). A better default setup is included for LSP clients.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Out of box experience. 10 lines of minimum vimrc can turn your neovim into a full-featured LSP &amp;amp; Treesitter powered IDE&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;UI with floating windows, navigator provides a visual way to manage and navigate through symbols, diagnostic errors, reference etc. It covers all features(handler) provided by LSP from commonly used search reference, to less commonly used search for interface implementation.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Code Action GUI&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Luv async thread and tasks&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit your code in preview window&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Async request with lsp.buf_request for reference search&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Treesitter symbol search. It is handy for large files (Some of LSP e.g. sumneko_lua, there is a 100kb file size limitation?). Also as LSP trying to hide details behind, Treesitter allows you to access all AST semantics.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;FZY search with either native C (if gcc installed) or Lua-JIT&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LSP multiple symbols highlight/marker and hop between document references&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Preview definination/references&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Better navigation for diagnostic errors, Navigate through all files/buffers that contain errors/warnings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Grouping references/implementation/incoming/outgoing based on file names.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Treesitter based variable/function context analysis. It is 10x times faster compared to purely rely on LSP. In most of the case, it takes treesitter less than 4 ms to read and render all nodes for a file of 1,000 LOC.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first plugin, IMO, allows you to search in all treesitter symbols in the workspace.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nerdfont, emoji for LSP and treesitter kind&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimize display (remove trailing bracket/space), display the caller of reference, de-duplicate lsp results (e.g reference in the same line). Using treesitter for file preview highlighter etc&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ccls call hierarchy (Non-standard &lt;code&gt;ccls/call&lt;/code&gt; API) supports&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Syntax folding based on treesitter or LSP_fold folding algorithm. (It behaves similar to vs-code); dedicated comment folding.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Treesitter symbols sidebar, LSP document symbole sidebar. Both with preview and folding&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Calltree: Display and expand Lsp incoming/outgoing calls hierarchy-tree with sidebar&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fully support LSP CodeAction, CodeLens, CodeLens action. Help you improve code quality.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;LRU cache for treesitter nodes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lazy loader friendly&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Multigrid support (different font and detachable)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Side panel (sidebar) and floating windows&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Why a new plugin&lt;/h1&gt; &#xA;&lt;p&gt;I&#39;d like to go beyond what the system is offering.&lt;/p&gt; &#xA;&lt;h1&gt;Similar projects / special mentions:&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/RishabhRD/nvim-lsputils&#34;&gt;nvim-lsputils&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-fzy.git&#34;&gt;nvim-fzy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amirrezaask/fuzzy.nvim&#34;&gt;fuzzy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;lspsaga&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gfanto/fzf-lsp.nvim&#34;&gt;fzf-lsp lsp with fzf as gui backend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-textobjects&#34;&gt;nvim-treesitter-textobjects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Require nvim-0.6.1 or above, nightly (0.8) prefered&lt;/p&gt; &#xA;&lt;p&gt;You can remove your lspconfig setup and use this plugin. The plugin depends on lspconfig and &lt;a href=&#34;https://github.com/ray-x/guihua.lua&#34;&gt;guihua.lua&lt;/a&gt;, which provides GUI and fzy support(migrate from &lt;a href=&#34;https://raw.githubusercontent.com/ray-x/navigator.lua/master/romgrk/fzy-lua-native&#34;&gt;romgrk&#39;s project&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;ray-x/guihua.lua&#39;, {&#39;do&#39;: &#39;cd lua/fzy &amp;amp;&amp;amp; make&#39; }&#xA;Plug &#39;ray-x/navigator.lua&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: Highly recommend: &#39;nvim-treesitter/nvim-treesitter&#39;&lt;/p&gt; &#xA;&lt;p&gt;Packer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#39;ray-x/navigator.lua&#39;,&#xA;    requires = {&#xA;        { &#39;ray-x/guihua.lua&#39;, run = &#39;cd lua/fzy &amp;amp;&amp;amp; make&#39; },&#xA;        { &#39;neovim/nvim-lspconfig&#39; },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Easy setup &lt;strong&gt;BOTH&lt;/strong&gt; lspconfig and navigator with one liner. Navigator covers around 20 most used LSP setup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require&#39;navigator&#39;.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample vimrc turning your neovim into a full-featured IDE&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call plug#begin(&#39;~/.vim/plugged&#39;)&#xA;&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;ray-x/guihua.lua&#39;, {&#39;do&#39;: &#39;cd lua/fzy &amp;amp;&amp;amp; make&#39; }&#xA;Plug &#39;ray-x/navigator.lua&#39;&#xA;&#xA;&#34; Plug &#39;hrsh7th/nvim-cmp&#39; and other plugins you commenly use...&#xA;&#xA;&#34; optional, if you need treesitter symbol support&#xA;Plug &#39;nvim-treesitter/nvim-treesitter&#39;, {&#39;do&#39;: &#39;:TSUpdate&#39;}&#xA;&#xA;call plug#end()&#xA;&#xA;&#34; No need for require(&#39;lspconfig&#39;), navigator will configure it for you&#xA;lua &amp;lt;&amp;lt;EOF&#xA;require&#39;navigator&#39;.setup()&#xA;EOF&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can remove your lspconfig.lua and use the hooks of navigator.lua. As the navigator will bind keys and handler for you. The LSP will be loaded lazily based on filetype.&lt;/p&gt; &#xA;&lt;p&gt;A treesitter only mode. In some cases LSP is buggy or not available, you can also use treesitter standalone&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call plug#begin(&#39;~/.vim/plugged&#39;)&#xA;&#xA;Plug &#39;ray-x/guihua.lua&#39;, {&#39;do&#39;: &#39;cd lua/fzy &amp;amp;&amp;amp; make&#39; }&#xA;Plug &#39;ray-x/navigator.lua&#39;&#xA;&#xA;&#34; Plug &#39;hrsh7th/nvim-compe&#39; and other plugins you commenly use...&#xA;&#xA;&#34; optional, if you need treesitter symbol support&#xA;Plug &#39;nvim-treesitter/nvim-treesitter&#39;, {&#39;do&#39;: &#39;:TSUpdate&#39;}&#xA;&#34; optional:&#xA;Plug &#39;nvim-treesitter/nvim-treesitter-refactor&#39; &#34; this provides &#34;go to def&#34; etc&#xA;&#xA;call plug#end()&#xA;&#xA;lua &amp;lt;&amp;lt;EOF&#xA;require&#39;navigator&#39;.setup()&#xA;EOF&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Work with nvim-cmp and nvim-autopairs&lt;/h2&gt; &#xA;&lt;p&gt;The buffer type of navigator floating windows is &lt;code&gt;guihua&lt;/code&gt; I would suggest disable &lt;code&gt;guihua&lt;/code&gt; for autocomplete. e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;nvim-autopairs&#39;).setup{&#xA;disable_filetype = { &#34;TelescopePrompt&#34; , &#34;guihua&#34;, &#34;guihua_rust&#34;, &#34;clap_input&#34; },&#xA;&#xA;if vim.o.ft == &#39;clap_input&#39; and vim.o.ft == &#39;guihua&#39; and vim.o.ft == &#39;guihua_rust&#39; then&#xA;  require&#39;cmp&#39;.setup.buffer { completion = {enable = false} }&#xA;end&#xA;&#xA;-- or with autocmd&#xA;vim.cmd(&#34;autocmd FileType guihua lua require(&#39;cmp&#39;).setup.buffer { enabled = false }&#34;)&#xA;vim.cmd(&#34;autocmd FileType guihua_rust lua require(&#39;cmp&#39;).setup.buffer { enabled = false }&#34;)&#xA;&#xA;...&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;All configure options&lt;/h2&gt; &#xA;&lt;p&gt;Nondefault configuration example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;require&#39;navigator&#39;.setup({&#xA;  debug = false, -- log output, set to true and log path: ~/.cache/nvim/gh.log&#xA;  width = 0.75, -- max width ratio (number of cols for the floating window) / (window width)&#xA;  height = 0.3, -- max list window height, 0.3 by default&#xA;  preview_height = 0.35, -- max height of preview windows&#xA;  border = {&#34;‚ï≠&#34;, &#34;‚îÄ&#34;, &#34;‚ïÆ&#34;, &#34;‚îÇ&#34;, &#34;‚ïØ&#34;, &#34;‚îÄ&#34;, &#34;‚ï∞&#34;, &#34;‚îÇ&#34;}, -- border style, can be one of &#39;none&#39;, &#39;single&#39;, &#39;double&#39;,&#xA;                                                     -- &#39;shadow&#39;, or a list of chars which defines the border&#xA;  on_attach = function(client, bufnr)&#xA;    -- your hook&#xA;  end,&#xA;  -- put a on_attach of your own here, e.g&#xA;  -- function(client, bufnr)&#xA;  --   -- the on_attach will be called at end of navigator on_attach&#xA;  -- end,&#xA;  -- The attach code will apply to all LSP clients&#xA;&#xA;  ts_fold = false,  -- modified version of treesitter folding&#xA;  default_mapping = true,  -- set to false if you will remap every key or if you using old version of nvim-&#xA;  keymaps = {{key = &#34;gK&#34;, func = vim.lsp.declaration, desc = &#39;declaration&#39;}}, -- a list of key maps&#xA;  -- this kepmap gK will override &#34;gD&#34; mapping function declaration()  in default kepmap&#xA;  -- please check mapping.lua for all keymaps&#xA;  treesitter_analysis = true, -- treesitter variable context&#xA;  treesitter_analysis_max_num = 100, -- how many items to run treesitter analysis&#xA;  -- this value prevent slow in large projects, e.g. found 100000 reference in a project&#xA;  transparency = 50, -- 0 ~ 100 blur the main window, 100: fully transparent, 0: opaque,  set to nil or 100 to disable it&#xA;&#xA;  lsp_signature_help = true, -- if you would like to hook ray-x/lsp_signature plugin in navigator&#xA;  -- setup here. if it is nil, navigator will not init signature help&#xA;  signature_help_cfg = nil, -- if you would like to init ray-x/lsp_signature plugin in navigator, and pass in your own config to signature help&#xA;  icons = {&#xA;    -- Code action&#xA;    code_action_icon = &#34;üèè&#34;, -- note: need terminal support, for those not support unicode, might crash&#xA;    -- Diagnostics&#xA;    diagnostic_head = &#39;üêõ&#39;,&#xA;    diagnostic_head_severity_1 = &#34;üà≤&#34;,&#xA;    -- refer to lua/navigator.lua for more icons setups&#xA;  },&#xA;  lsp_installer = false, -- set to true if you would like use the lsp installed by williamboman/nvim-lsp-installer&#xA;  mason = false, -- set to true if you would like use the lsp installed by williamboman/mason&#xA;  lsp = {&#xA;    enable = true,   -- skip lsp setup if disabled make sure add require(&#39;navigator.lspclient.mapping&#39;).setup() in you&#xA;    -- own on_attach&#xA;    code_action = {enable = true, sign = true, sign_priority = 40, virtual_text = true},&#xA;    code_lens_action = {enable = true, sign = true, sign_priority = 40, virtual_text = true},&#xA;    document_highlight = true, -- LSP reference highlight, &#xA;                               -- it might already supported by you setup, e.g. LunarVim&#xA;    format_on_save = true, -- set to false to disable lsp code format on save (if you are using prettier/efm/formater etc)&#xA;    format_options = {async=false}, -- async: disable by default, the option used in vim.lsp.buf.format({async={true|false}, name = &#39;xxx&#39;})&#xA;    disable_format_cap = {&#34;sqls&#34;, &#34;sumneko_lua&#34;, &#34;gopls&#34;},  -- a list of lsp disable format capacity (e.g. if you using efm or vim-codeformat etc), empty {} by default&#xA;         -- If you using null-ls and want null-ls format your code&#xA;         -- you should disable all other lsp and allow only null-ls.&#xA;    disable_lsp = {&#39;pylsd&#39;, &#39;sqlls&#39;}, -- a list of lsp server disabled for your project, e.g. denols and tsserver you may&#xA;    --want to enable one lsp server at a time&#xA;    -- to disable all default config and use your own lsp setup set&#xA;    -- disable_lsp = &#39;all&#39; and you may need to hook mapping.setup() in your on_attach&#xA;    -- Default {}&#xA;    diagnostic = {&#xA;      underline = true,&#xA;      virtual_text = true, -- show virtual for diagnostic message&#xA;      update_in_insert = false, -- update diagnostic message in insert mode&#xA;    },&#xA;&#xA;    diagnostic_scrollbar_sign = {&#39;‚ñÉ&#39;, &#39;‚ñÜ&#39;, &#39;‚ñà&#39;}, -- experimental:  diagnostic status in scroll bar area; set to false to disable the diagnostic sign,&#xA;    -- for other style, set to {&#39;‚ïç&#39;, &#39;ÔÆÜ&#39;} or {&#39;-&#39;, &#39;=&#39;}&#xA;    diagnostic_virtual_text = true,  -- show virtual for diagnostic message&#xA;    diagnostic_update_in_insert = false, -- update diagnostic message in insert mode&#xA;    disply_diagnostic_qf = true, -- always show quickfix if there are diagnostic errors, set to false if you  want to&#xA;    ignore it&#xA;    tsserver = {&#xA;      filetypes = {&#39;typescript&#39;} -- disable javascript etc,&#xA;      -- set to {} to disable the lspclient for all filetypes&#xA;    },&#xA;    ctags ={&#xA;      cmd = &#39;ctags&#39;,&#xA;      tagfile = &#39;tags&#39;,&#xA;      options = &#39;-R --exclude=.git --exclude=node_modules --exclude=test --exclude=vendor --excmd=number&#39;,&#xA;    },&#xA;    gopls = {   -- gopls setting&#xA;      on_attach = function(client, bufnr)  -- on_attach for gopls&#xA;        -- your special on attach here&#xA;        -- e.g. disable gopls format because a known issue https://github.com/golang/go/issues/45732&#xA;        print(&#34;i am a hook, I will disable document format&#34;)&#xA;        client.resolved_capabilities.document_formatting = false&#xA;      end,&#xA;      settings = {&#xA;        gopls = {gofumpt = false} -- disable gofumpt etc,&#xA;      }&#xA;    },&#xA;    -- the lsp setup can be a function, .e.g &#xA;    gopls = function()&#xA;      local go = pcall(require, &#34;go&#34;)&#xA;      if go then&#xA;        local cfg = require(&#34;go.lsp&#34;).config()&#xA;        cfg.on_attach = function(client)&#xA;          client.server_capabilities.documentFormattingProvider = false -- efm/null-ls&#xA;        end&#xA;        return cfg&#xA;      end&#xA;    end,&#xA;&#xA;    sumneko_lua = {&#xA;      sumneko_root_path = vim.fn.expand(&#34;$HOME&#34;) .. &#34;/github/sumneko/lua-language-server&#34;,&#xA;      sumneko_binary = vim.fn.expand(&#34;$HOME&#34;) .. &#34;/github/sumneko/lua-language-server/bin/macOS/lua-language-server&#34;,&#xA;    },&#xA;    servers = {&#39;cmake&#39;, &#39;ltex&#39;}, -- by default empty, and it should load all LSP clients avalible based on filetype&#xA;    -- but if you whant navigator load  e.g. `cmake` and `ltex` for you , you&#xA;    -- can put them in the `servers` list and navigator will auto load them.&#xA;    -- you could still specify the custom config  like this&#xA;    -- cmake = {filetypes = {&#39;cmake&#39;, &#39;makefile&#39;}, single_file_support = false},&#xA;  }&#xA;})&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LSP clients&lt;/h3&gt; &#xA;&lt;p&gt;Built clients:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local servers = {&#xA;  &#34;angularls&#34;, &#34;gopls&#34;, &#34;tsserver&#34;, &#34;flow&#34;, &#34;bashls&#34;, &#34;dockerls&#34;, &#34;julials&#34;, &#34;pylsp&#34;, &#34;pyright&#34;,&#xA;  &#34;jedi_language_server&#34;, &#34;jdtls&#34;, &#34;sumneko_lua&#34;, &#34;vimls&#34;, &#34;html&#34;, &#34;jsonls&#34;, &#34;solargraph&#34;, &#34;cssls&#34;,&#xA;  &#34;yamlls&#34;, &#34;clangd&#34;, &#34;ccls&#34;, &#34;sqls&#34;, &#34;denols&#34;, &#34;graphql&#34;, &#34;dartls&#34;, &#34;dotls&#34;,&#xA;  &#34;kotlin_language_server&#34;, &#34;nimls&#34;, &#34;intelephense&#34;, &#34;vuels&#34;, &#34;phpactor&#34;, &#34;omnisharp&#34;,&#xA;  &#34;r_language_server&#34;, &#34;rust_analyzer&#34;, &#34;terraformls&#34;, &#34;svelte&#34;, &#34;texlab&#34;, &#34;clojure_lsp&#34;, &#34;elixirls&#34;,&#xA;  &#34;sourcekit&#34;, &#34;fsautocomplete&#34;, &#34;vls&#34;, &#34;hls&#34;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigator will try to load avalible lsp server/client based on filetype. The clients has none default on_attach. incremental sync and debounce is enabled by navigator. And the lsp snippet will be enabled. So you could use COQ and nvim-cmp snippet expand.&lt;/p&gt; &#xA;&lt;p&gt;Other than above setup, additional none default setup are used for following lsp:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gopls&lt;/li&gt; &#xA; &lt;li&gt;clangd&lt;/li&gt; &#xA; &lt;li&gt;rust_analyzer&lt;/li&gt; &#xA; &lt;li&gt;sqls&lt;/li&gt; &#xA; &lt;li&gt;sumneko_lua&lt;/li&gt; &#xA; &lt;li&gt;pyright&lt;/li&gt; &#xA; &lt;li&gt;ccls&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please check &lt;a href=&#34;https://github.com/ray-x/navigator.lua/raw/26012cf9c172aa788a2e53018d94b32c5c75af75/lua/navigator/lspclient/clients.lua#L98-L234&#34;&gt;client setup&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The plugin can work with multiple LSP, e.g sqls+gopls+efm. But there are cases you may need to disable some of the servers. (Prevent loading multiple LSP for same source code.) e.g. I saw strange behaviours when I use pylsp+pyright+jedi together. If you have multiple similar LSP installed and have trouble with the plugin, please enable only one at a time.&lt;/p&gt; &#xA;&lt;h4&gt;Add your own servers&lt;/h4&gt; &#xA;&lt;p&gt;Above servers covered a small part neovim lspconfig support, You can still use lspconfig to add and config servers not in the list. If you would like to add a server not in the list, you can check this PR &lt;a href=&#34;https://github.com/ray-x/navigator.lua/pull/107&#34;&gt;https://github.com/ray-x/navigator.lua/pull/107&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, update following option in setup(if you do not want a PR):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;navigator&#39;setup{lsp={servers={&#39;cmake&#39;, &#39;lexls&#39;}}}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Above option add cmake and lexls to the default server list&lt;/p&gt; &#xA;&lt;h3&gt;Disable a lsp client loading from navigator&lt;/h3&gt; &#xA;&lt;p&gt;Note: If you have multiple lsp installed for same language, please only enable one at a time by disable others with e.g. &lt;code&gt;disable_lsp={&#39;denols&#39;, &#39;clangd&#39;}&lt;/code&gt; To disable a specific LSP, set &lt;code&gt;filetypes&lt;/code&gt; to {} e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;navigator&#39;.setup({&#xA;  lsp={&#xA;   pylsd={filetype={}}&#xA;  }&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;navigator&#39;.setup({&#xA;  lsp={&#xA;    disable_lsp = {&#39;pylsd&#39;, &#39;sqlls&#39;},&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Try it your self&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;playground&lt;/code&gt; folder, there is a &lt;code&gt;init.lua&lt;/code&gt; and source code for you to play with. Check &lt;a href=&#34;https://github.com/ray-x/navigator.lua/raw/master/playground/README.md&#34;&gt;playground/README.md&lt;/a&gt; for more details&lt;/p&gt; &#xA;&lt;h3&gt;Default keymaps&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;mode&lt;/th&gt; &#xA;   &lt;th&gt;key&lt;/th&gt; &#xA;   &lt;th&gt;function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;gr&lt;/td&gt; &#xA;   &lt;td&gt;async references, definitions and context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt;gr&lt;/td&gt; &#xA;   &lt;td&gt;show reference and context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;m-k&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;signature help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;c-k&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;signature help&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;gW&lt;/td&gt; &#xA;   &lt;td&gt;workspace symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;gD&lt;/td&gt; &#xA;   &lt;td&gt;declaration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;gd&lt;/td&gt; &#xA;   &lt;td&gt;definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;g0&lt;/td&gt; &#xA;   &lt;td&gt;document symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-]&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;go to definition (if multiple show listview)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;gp&lt;/td&gt; &#xA;   &lt;td&gt;definition preview (show Preview)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-LeftMouse&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;g&amp;lt;LeftMouse&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt;gt&lt;/td&gt; &#xA;   &lt;td&gt;treesitter document symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt;gT&lt;/td&gt; &#xA;   &lt;td&gt;treesitter symbol for all open buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt; ct&lt;/td&gt; &#xA;   &lt;td&gt;ctags symbol search&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt; cg&lt;/td&gt; &#xA;   &lt;td&gt;ctags symbol generate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;K&lt;/td&gt; &#xA;   &lt;td&gt;hover doc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Space&amp;gt;ca&lt;/td&gt; &#xA;   &lt;td&gt;code action (when you see üèè )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Space&amp;gt;la&lt;/td&gt; &#xA;   &lt;td&gt;code lens action (when you see a codelens indicator)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;v&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Space&amp;gt;ca&lt;/td&gt; &#xA;   &lt;td&gt;range code action (when you see üèè )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Space&amp;gt;rn&lt;/td&gt; &#xA;   &lt;td&gt;rename with floating window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt;re&lt;/td&gt; &#xA;   &lt;td&gt;rename (lsp default)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt;gi&lt;/td&gt; &#xA;   &lt;td&gt;hierarchy incoming calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt;go&lt;/td&gt; &#xA;   &lt;td&gt;hierarchy outgoing calls&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;gi&lt;/td&gt; &#xA;   &lt;td&gt;implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Space&amp;gt; D&lt;/td&gt; &#xA;   &lt;td&gt;type definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;gL&lt;/td&gt; &#xA;   &lt;td&gt;show line diagnostic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;gG&lt;/td&gt; &#xA;   &lt;td&gt;show diagnostic for all buffers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;]d&lt;/td&gt; &#xA;   &lt;td&gt;next diagnostic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;[d&lt;/td&gt; &#xA;   &lt;td&gt;previous diagnostic&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt; dt&lt;/td&gt; &#xA;   &lt;td&gt;diagnostic toggle(enable/disable)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;]r&lt;/td&gt; &#xA;   &lt;td&gt;next treesitter reference/usage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;[r&lt;/td&gt; &#xA;   &lt;td&gt;previous treesitter reference/usage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Space&amp;gt; wa&lt;/td&gt; &#xA;   &lt;td&gt;add workspace folder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Space&amp;gt; wr&lt;/td&gt; &#xA;   &lt;td&gt;remove workspace folder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Space&amp;gt; wl&lt;/td&gt; &#xA;   &lt;td&gt;print workspace folder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Leader&amp;gt;k&lt;/td&gt; &#xA;   &lt;td&gt;toggle reference highlight&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-p&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;previous item in list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-n&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;next item in list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;number 1~9&lt;/td&gt; &#xA;   &lt;td&gt;move to ith row/item in the list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Up&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;previous item in list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Down&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;next item in list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Ctrl-w&amp;gt;j&lt;/td&gt; &#xA;   &lt;td&gt;move cursor to preview (windows move to bottom view point)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Ctrl-w&amp;gt;k&lt;/td&gt; &#xA;   &lt;td&gt;move cursor to list (windows move to up view point)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-o&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;open preview file in nvim/Apply action&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-v&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;open preview file in nvim with vsplit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-s&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;open preview file in nvim with split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;Enter&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;open preview file in nvim/Apply action&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;ESC&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;close listview of floating window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-e&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;close listview of floating window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-q&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;close listview and send results to quickfix&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-b&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;previous page in listview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-f&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;next page in listview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;i/n&lt;/td&gt; &#xA;   &lt;td&gt;&amp;lt;C-s&amp;gt;&lt;/td&gt; &#xA;   &lt;td&gt;save the modification to preview window to file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Colors/Highlight:&lt;/h3&gt; &#xA;&lt;p&gt;You can override default highlight GuihuaListDark (listview) and GuihuaTextViewDark (code view) and GuihuaListHl (select item)&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi default GuihuaTextViewDark guifg=#e0d8f4 guibg=#332e55&#xA;hi default GuihuaListDark guifg=#e0d8f4 guibg=#103234&#xA;hi default GuihuaListHl guifg=#e0d8f4 guibg=#404254&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are other Lsp highlight been used in this plugin, e.g LspReferenceRead/Text/Write are used for document highlight, LspDiagnosticsXXX are used for diagnostic. Please check highlight.lua and dochighlight.lua for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Dependency&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lspconfig&lt;/li&gt; &#xA; &lt;li&gt;guihua.lua (provides floating window, FZY)&lt;/li&gt; &#xA; &lt;li&gt;Optional: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;treesitter (list treesitter symbols, object analysis)&lt;/li&gt; &#xA;   &lt;li&gt;lsp-signature (better signature help)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The plugin can be loaded lazily (packer &lt;code&gt;opt = true&lt;/code&gt; ), And it will check if optional plugins existance and load those plugins only if they existed.&lt;/p&gt; &#xA;&lt;p&gt;The terminal will need to be able to output nerdfont and emoji correctly. I am using Kitty with nerdfont (Victor Mono).&lt;/p&gt; &#xA;&lt;h2&gt;Integrat with mason (williamboman/mason.nvim) or lsp_installer (williamboman/nvim-lsp-installer, deprecated)&lt;/h2&gt; &#xA;&lt;p&gt;If you are using mason or lsp_installer and would like to use the lsp servers installed by lsp_installer. Please set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lsp_installer = true  --lsp_installer users, deprecated&#xA;mason = true -- mason user&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the config. Also please setup the lsp server from installer setup with &lt;code&gt;server:setup{opts}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;lsp-installer example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;      use({&#xA;        &#39;williamboman/nvim-lsp-installer&#39;,&#xA;        config = function()&#xA;          local lsp_installer = require(&#39;nvim-lsp-installer&#39;)&#xA;          lsp_installer.setup{}&#xA;        end,&#xA;      })&#xA;      use({&#xA;        &#39;ray-x/navigator.lua&#39;,&#xA;        config = function()&#xA;          require(&#39;navigator&#39;).setup({&#xA;            lsp_installer = true,&#xA;          })&#xA;        end,&#xA;      })&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for mason&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;      use(&#34;williamboman/mason.nvim&#34;)&#xA;      use({&#xA;        &#34;williamboman/mason-lspconfig.nvim&#34;,&#xA;        config = function()&#xA;          require(&#34;mason&#34;).setup()&#xA;          require(&#34;mason-lspconfig&#34;).setup({})&#xA;        end,&#xA;      })&#xA;&#xA;      use({&#xA;        &#34;ray-x/navigator.lua&#34;,&#xA;        requires = {&#xA;          { &#34;ray-x/guihua.lua&#34;, run = &#34;cd lua/fzy &amp;amp;&amp;amp; make&#34; },&#xA;          { &#34;neovim/nvim-lspconfig&#34; },&#xA;          { &#34;nvim-treesitter/nvim-treesitter&#34; },&#xA;        },&#xA;        config = function()&#xA;          require(&#34;navigator&#34;).setup({&#xA;            mason = true,&#xA;          })&#xA;        end,&#xA;      })&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please refer to &lt;a href=&#34;https://github.com/ray-x/navigator.lua/raw/master/playground/init_lsp_installer.lua&#34;&gt;lsp_installer_config&lt;/a&gt; for more info&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, Navigator can be used to startup the server installed by lsp-installer. as it will override the navigator setup&lt;/p&gt; &#xA;&lt;p&gt;To start LSP installed by lsp_installer, please use following setups&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;require&#39;navigator&#39;.setup({&#xA;  -- lsp_installer = false -- default value is false&#xA;  lsp = {&#xA;    tsserver = { cmd = {&#39;your tsserver installed by lsp_installer&#39;} }&#xA;  }&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;example cmd setup (mac) for pyright :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require&#39;navigator&#39;.setup({&#xA;  -- lsp_installer = false -- default value is false&#xA;&#xA;  lsp = {&#xA;    tsserver = {&#xA;      cmd = { &#34;/Users/username/.local/share/nvim/lsp_servers/python/node_modules/.bin/pyright-langserver&#34;, &#34;--stdio&#34; }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The lsp servers installed by nvim-lsp-installer is in following dir&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local path = require &#39;nvim-lsp-installer.path&#39;&#xA;local install_root_dir = path.concat {vim.fn.stdpath &#39;data&#39;, &#39;lsp_servers&#39;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you can setup binary full path to this: (e.g. with gopls) &lt;code&gt;install_root_dir .. &#39;/go/gopls&#39;&lt;/code&gt; So the config is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;local path = require &#39;nvim-lsp-installer.path&#39;&#xA;local install_root_dir = path.concat {vim.fn.stdpath &#39;data&#39;, &#39;lsp_servers&#39;}&#xA;&#xA;require&#39;navigator&#39;.setup({&#xA;  -- lsp_installer = false -- default value is false&#xA;&#xA;  lsp = {&#xA;    gopls = {&#xA;      cmd = { install_root_dir .. &#39;/go/gopls&#39; }&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use lsp_installer configs You can delegate the lsp server setup to lsp_installer with &lt;code&gt;server:setup{opts}&lt;/code&gt; Here is an example &lt;a href=&#34;https://github.com/ray-x/navigator.lua/raw/master/playground/init_lsp_installer.lua&#34;&gt;init_lsp_installer.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Integration with other lsp plugins (e.g. rust-tools, go.nvim, clangd extension)&lt;/h3&gt; &#xA;&lt;p&gt;There are lots of plugins provides lsp support&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;go.nvim allow you either hook gopls from go.nvim or from navigator and it can export the lsp setup from go.nvim.&lt;/li&gt; &#xA; &lt;li&gt;rust-tools and clangd allow you to setup on_attach from config server&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lua-dev.nvim&#34;&gt;lua-dev&lt;/a&gt; Dev setup for init.lua and plugin development. Navigator can extend lua setup with lua-dev. Here is an example to setup rust with rust-tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;navigator&#39;.setup({&#xA;  lsp = {&#xA;    disable_lsp = { &#34;rust_analyzer&#34;, &#34;clangd&#34; }, -- will not run rust_analyzer setup from navigator&#xA;    [&#39;lua-dev&#39;] = { runtime_path=true }  -- any non default lua-dev setups&#xA;  },&#xA;})&#xA;&#xA;require(&#39;rust-tools&#39;).setup({&#xA;  server = {&#xA;    on_attach = function(client, bufnr)&#xA;      require(&#39;navigator.lspclient.mapping&#39;).setup({client=client, bufnr=bufnr}) -- setup navigator keymaps here,&#xA;&#xA;      require(&#34;navigator.dochighlight&#34;).documentHighlight(bufnr)&#xA;      require(&#39;navigator.codeAction&#39;).code_action_prompt(bufnr)&#xA;      -- otherwise, you can define your own commands to call navigator functions&#xA;    end,&#xA;  }&#xA;})&#xA;&#xA;require(&#34;clangd_extensions&#34;).setup {&#xA;  server = {&#xA;    on_attach = function(client, bufnr)&#xA;      require(&#39;navigator.lspclient.mapping&#39;).setup({client=client, bufnr=bufnr}) -- setup navigator keymaps here,&#xA;      require(&#34;navigator.dochighlight&#34;).documentHighlight(bufnr)&#xA;      require(&#39;navigator.codeAction&#39;).code_action_prompt(bufnr)&#xA;      -- otherwise, you can define your own commands to call navigator functions&#xA;    end,&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to lua/navigator/lspclient/mapping.lua on key mappings. Should be able to work out-of-box.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &amp;lt;c-e&amp;gt; or &lt;code&gt;:q!&lt;/code&gt; to kill the floating window&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;up/down&amp;gt; (or &amp;lt;c-n&amp;gt;, &amp;lt;c-p&amp;gt;) to move&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;c-o&amp;gt; or &amp;lt;CR&amp;gt; to open location or apply code actions. Note: &amp;lt;CR&amp;gt; might be bound in insert mode by other plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;In &lt;code&gt;navigator.lua&lt;/code&gt; there is a default configuration. You can override the values by passing your own values&lt;/p&gt; &#xA;&lt;p&gt;e.g&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- The attach will be call at end of navigator on_attach()&#xA;require&#39;navigator&#39;.setup({on_attach = function(client, bufnr) require &#39;illuminate&#39;.on_attach(client)})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlight&lt;/h2&gt; &#xA;&lt;p&gt;Highlight I am using:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;LspReferenceRead, LspReferenceText and LspReferenceWrite are used for &lt;code&gt;autocmd CursorHold &amp;lt;buffer&amp;gt; lua vim.lsp.buf.document_highlight()&lt;/code&gt; That is where you saw the current symbol been highlighted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;GuihuaListDark and GuihuaTextViewDark is used for floating listvew and TextView. They are be based on current background (Normal) and PmenuSel&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In future, I will use NormalFloat for floating view. But ATM, most of colorscheme does not define NormalFloat&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can override the above highlight to fit your current colorscheme&lt;/p&gt; &#xA;&lt;h2&gt;commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;command&lt;/th&gt; &#xA;   &lt;th&gt;function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LspToggleFmt&lt;/td&gt; &#xA;   &lt;td&gt;toggle lsp auto format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LspKeymaps&lt;/td&gt; &#xA;   &lt;td&gt;show LSP releated keymaps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nctags {args}&lt;/td&gt; &#xA;   &lt;td&gt;show ctags symbols, args: -g regen ctags&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LspRestart&lt;/td&gt; &#xA;   &lt;td&gt;reload lsp&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LspToggleFmt&lt;/td&gt; &#xA;   &lt;td&gt;toggle lsp format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LspSymbols&lt;/td&gt; &#xA;   &lt;td&gt;document symbol in side panel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TSymobls&lt;/td&gt; &#xA;   &lt;td&gt;treesitter symbol in side panel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Calltree {args}&lt;/td&gt; &#xA;   &lt;td&gt;lsp call hierarchy call tree, args: -i (incomming default), -o (outgoing)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;colorscheme: &lt;a href=&#34;https://github.com/ray-x/aurora&#34;&gt;aurora&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;p&gt;Pls check the first part of README&lt;/p&gt; &#xA;&lt;h3&gt;Definition preview&lt;/h3&gt; &#xA;&lt;p&gt;Using treesitter and LSP to view the symbol definition&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/139771978-bbc970a5-be9f-42cf-8942-3477485bd89c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sidebar, folding, outline&lt;/h3&gt; &#xA;&lt;p&gt;Treesitter outline and Diagnostics &lt;img width=&#34;708&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1681295/174791609-0023e68f-f1f4-4335-9ea2-d2360e9f0bfd.png&#34;&gt; &lt;img width=&#34;733&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1681295/174804579-26f87fbf-426b-46d0-a7a3-a5aab69c032f.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Calltree (Expandable LSP call hierarchy) &lt;img width=&#34;769&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/1681295/176998572-e39fc968-4c8c-475d-b3b8-fb7991663646.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;GUI and multigrid support&lt;/h3&gt; &#xA;&lt;p&gt;You can load a different font size for floating win&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/139196378-bf69ade9-c916-42a9-a91f-cccb39b9c4eb.jpg&#34; alt=&#34;multigrid2&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Document Symbol and navigate through the list&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/148642747-1870b1a4-67c2-4a0d-8a41-d462ecdc663e.gif&#34; alt=&#34;doc_symbol_and_navigate&#34;&gt; The key binding to navigate in the list.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;up and down key&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Ctrl-f/b&amp;gt;&lt;/code&gt; for page up and down&lt;/li&gt; &#xA; &lt;li&gt;number key 1~9 go to the ith item.&lt;/li&gt; &#xA; &lt;li&gt;If there are loads of results, would be good to use fzy search prompt to filter out the result you are interested.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Workspace Symbol&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/workspace_symbol.gif?raw=true&#34; alt=&#34;workspace symbol&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;highlight document symbol and jump between reference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/120067627-f9f80680-c0bf-11eb-9216-18e5c8547f59.gif&#34; alt=&#34;multiple_symbol_hi3&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Current symbol highlight and jump backward/forward between symbols&lt;/h1&gt; &#xA;&lt;p&gt;Document highlight provided by LSP. Jump between symbols with treesitter (with &lt;code&gt;]r&lt;/code&gt; and &lt;code&gt;[r&lt;/code&gt;) &lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/doc_hl_jump.gif?raw=true&#34; alt=&#34;doc jump&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Diagnostic&lt;/h3&gt; &#xA;&lt;p&gt;Visual studio code style show errors minimap in scroll bar area (Check setup for &lt;code&gt;diagnostic_scrollbar_sign&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/128736430-e365523d-810c-4c16-a3b4-c74969f45f0b.jpg&#34; alt=&#34;diagnostic_scroll_bar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Diagnostic in single bufer&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/diag.jpg?raw=true&#34; alt=&#34;diagnostic&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Show diagnostic in all buffers&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/diagnostic_multiplefiles.jpg?raw=true&#34; alt=&#34;diagnostic multi files&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Edit in preview window&lt;/h3&gt; &#xA;&lt;p&gt;You can in place edit your code in floating window&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1681295/121832919-89cbc080-cd0e-11eb-9778-11d0f356b38d.mov&#34;&gt;https://user-images.githubusercontent.com/1681295/121832919-89cbc080-cd0e-11eb-9778-11d0f356b38d.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Note: This feature only avalible in &lt;code&gt;find reference&lt;/code&gt; and &lt;code&gt;find diagnostic&lt;/code&gt;, You can not add/remove lines in floating window)&lt;/p&gt; &#xA;&lt;h3&gt;Implementation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/118735346-967e0580-b883-11eb-8c1e-88c5810f7e05.jpg?raw=true&#34; alt=&#34;implementation&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fzy search in reference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/fzy_reference.jpg?raw=true&#34; alt=&#34;fzy_reference&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Code actions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/codeaction.jpg?raw=true&#34; alt=&#34;code actions&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Symbol rename&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/141081135-55f45c2d-28c6-4475-a083-e37dfabe9afd.jpg&#34; alt=&#34;rename&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fill struct with gopls&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/fill_struct.gif?raw=true&#34; alt=&#34;code actions fill struct&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Code preview with highlight&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/118900852-4bccbe00-b955-11eb-82f6-0747b1b64e7c.jpg&#34; alt=&#34;treesitter_preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Treesitter symbol&lt;/h3&gt; &#xA;&lt;p&gt;Treetsitter symbols in all buffers &lt;img src=&#34;https://user-images.githubusercontent.com/1681295/118734953-cc6eba00-b882-11eb-9db8-0a052630d57e.jpg?raw=true&#34; alt=&#34;treesitter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Signature help&lt;/h3&gt; &#xA;&lt;p&gt;Improved signature help with current parameter highlighted&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/signature_with_highlight.jpg?raw=true&#34; alt=&#34;signature&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/show_signnature.gif?raw=true&#34; alt=&#34;show_signature&#34; title=&#34;show_signature&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Call hierarchy (incomming/outgoing calls)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/142348079-49b71486-4f16-4f10-95c9-483aad11c262.jpg&#34; alt=&#34;incomming_calls&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Light bulb if codeAction available&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/lightbulb.jpg?raw=true&#34; alt=&#34;lightbulb&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Codelens&lt;/h3&gt; &#xA;&lt;p&gt;Codelens for gopls/golang. Garbage collection analyse:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/132428956-7835bf30-2ed5-4871-b2d7-7fbad22f63e8.jpg&#34; alt=&#34;codelens&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Codelens for C++/ccls. Symbol reference&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/132429134-abc6547e-79cc-44a4-b7a9-23550b895e51.jpg&#34; alt=&#34;codelens_cpp_ccls&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Predefined LSP symbol nerdfont/emoji&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/navigator/icon_nerd.jpg?raw=true&#34; alt=&#34;nerdfont&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;VS-code style folding with treesitter&lt;/h3&gt; &#xA;&lt;p&gt;Folding is using a hacked version of treesitter folding. (option: ts_fold)&lt;/p&gt; &#xA;&lt;h4&gt;folding function&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/148491596-6cd6c507-c157-4536-b8c4-dc969436763a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;folding comments&lt;/h4&gt; &#xA;&lt;p&gt;Multiline comments can be folded as it is treated as a block&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/148491845-5ffb18ea-f05d-4229-aec3-aa635b3de814.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Debug the plugin&lt;/h1&gt; &#xA;&lt;p&gt;One simple way to gether debug info and understand what is wrong is output the debug logs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;navigator&#39;.setup({&#xA;  debug = false, -- log output, set to true and log path: ~/.local/share/nvim/gh.log&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;-- a example of adding logs in the plugin&#xA;&#xA;local log = require&#34;navigator.util&#34;.log&#xA;&#xA;local definition_hdlr = util.mk_handler(function(err, locations, ctx, _)&#xA;  -- output your log&#xA;  log(&#39;[definition] log for locations&#39;, locations, &#34;and ctx&#34;, ctx)&#xA;  if err ~= nil then&#xA;    return&#xA;  end&#xA;end&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Break changes and known issues&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ray-x/navigator.lua/issues/1&#34;&gt;known issues I am working on&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Todo&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The project is in the early phase, bugs expected, PRs and suggestions are welcome&lt;/li&gt; &#xA; &lt;li&gt;Async (some of the requests is slow on large codebases and might be good to use co-rountine)&lt;/li&gt; &#xA; &lt;li&gt;More clients. I use go, python, js/ts, java, c/cpp, lua most of the time. Did not test other languages (e.g dart, swift etc)&lt;/li&gt; &#xA; &lt;li&gt;Configuration options&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Errors and Bug Reporting&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Please double check your setup and check if minium setup works or not&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It should works for 0.6.1, neovim 0.7.x prefered.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check console output&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check &lt;code&gt;LspInfo&lt;/code&gt; and treesitter status with &lt;code&gt;checkhealth&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Turn on log and attach the log to your issue if possible you can remove any personal/company info in the log&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Submit Issue with minium vimrc. Please check playground/init.lua as a vimrc template. !!!Please DONOT use a packer vimrc&lt;/p&gt; &lt;p&gt;that installs everything to default folder!!! Also check this repo &lt;a href=&#34;https://github.com/fky2015/navigator.nvim-bug-report&#34;&gt;navigator bug report&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Manas140/dotfiles</title>
    <updated>2022-08-25T01:40:50Z</updated>
    <id>tag:github.com,2022-08-25:/Manas140/dotfiles</id>
    <link href="https://github.com/Manas140/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Config files for my setup&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;AweDots&lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;Config files for AwesomeWm&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Manas140/dotfiles/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/Manas140/dotfiles?colorA=151515&amp;amp;colorB=8C977D&amp;amp;style=for-the-badge&amp;amp;logo=starship&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Manas140/dotfiles/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/Manas140/dotfiles?colorA=151515&amp;amp;colorB=B66467&amp;amp;style=for-the-badge&amp;amp;logo=bugatti&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Manas140/dotfiles/network/members&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/forks/Manas140/dotfiles?colorA=151515&amp;amp;colorB=8DA3B9&amp;amp;style=for-the-badge&amp;amp;logo=github&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/Manas140/dotfiles/awedots/preview.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Prerequisites&lt;/summary&gt; &#xA;   &lt;br&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;Must have, just to make sure everything works properly&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &#xA;   &lt;pre&gt;&lt;code&gt;alsa-plugins-pulseaudio awesome flameshot kitty pulseaudio redshift rofi xbacklight xsettingsd zsh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;Suggested, makes everything feel complete&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &#xA;   &lt;pre&gt;&lt;code&gt;alacritty bash firefox htop lf lite-xl mpv nvim zathura&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;  &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repo&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/Manas140/dotfiles.git &amp;amp;&amp;amp; cd dotfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install / Copy all configs&lt;/p&gt; &lt;pre&gt;&lt;code&gt;./install.sh &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Download submodules, includes config for Gtk3 &amp;amp; Nvim ... [ Optional ]&lt;/summary&gt; &#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code&gt;git submodule init&#xA;git submodule update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;Once Done,&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Follow Gtk3 installation over &lt;a href=&#34;https://github.com/paradise-theme/gtk&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;Follow Nvim installation over &lt;a href=&#34;https://github.com/manas140/conscious&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/blockquote&gt; &#xA;  &lt;/details&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;  &#xA;&lt;h2&gt;Usage [ Keybinds ]&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[Software]&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Print&lt;/td&gt; &#xA;   &lt;td&gt;flameshot gui&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + r&lt;/td&gt; &#xA;   &lt;td&gt;rofi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + Return&lt;/td&gt; &#xA;   &lt;td&gt;kitty&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[Hardware]&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fn + Arrow [Up,Down]&lt;/td&gt; &#xA;   &lt;td&gt;Volume Control&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fn + Arrow [Left,Right]&lt;/td&gt; &#xA;   &lt;td&gt;Brightness Control&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;[AwesomeWm]&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + d&lt;/td&gt; &#xA;   &lt;td&gt;open dashboard&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + q&lt;/td&gt; &#xA;   &lt;td&gt;kill focused window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alt + Tab&lt;/td&gt; &#xA;   &lt;td&gt;toggle window focus&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + Tab&lt;/td&gt; &#xA;   &lt;td&gt;toggle floating/tiling&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + space&lt;/td&gt; &#xA;   &lt;td&gt;toggle fullscreen&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + [1-9]&lt;/td&gt; &#xA;   &lt;td&gt;focus desktop 1-9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + Shift + [1-9]&lt;/td&gt; &#xA;   &lt;td&gt;move window to desktop 1-9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Super + Arrow [Up,Down,Left,Right]&lt;/td&gt; &#xA;   &lt;td&gt;resize window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Project references&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Colorscheme: &lt;a href=&#34;https://github.com/paradise-theme&#34;&gt;Paradise-theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fetch: &lt;a href=&#34;https://github.com/manas140/fetch&#34;&gt;Fetch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firefox: &lt;a href=&#34;https://github.com/migueravila/SimpleFox&#34;&gt;SimpleFox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nvim: &lt;a href=&#34;https://github.com/manas140/conscious&#34;&gt;Conscious&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rklyz&#34;&gt;Rklyz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-customs</title>
    <updated>2022-08-25T01:40:50Z</updated>
    <id>tag:github.com,2022-08-25:/qbcore-framework/qb-customs</id>
    <link href="https://github.com/qbcore-framework/qb-customs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Vehicle Customization For QB-Core&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-customs&lt;/h1&gt; &#xA;&lt;p&gt;Vehicle Customization For QB-Core&lt;/p&gt; &#xA;&lt;p&gt;Make sure to read the locations.lua settings VERY carefully. It has all the information needed to properly setup all your locations. Chances are if something is not working, your configuration for that location is wrong. Doublecheck before opening an issue.&lt;/p&gt; &#xA;&lt;p&gt;If you are still have having issues, enable the Config.Debug option at the top of config.lua. If you do open an issue, make sure to include all the debug information printed in the f8 menu, along with your Location configuration settings.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>