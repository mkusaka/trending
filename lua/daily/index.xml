<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-06T01:40:49Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Project-Sloth/ps-liveries</title>
    <updated>2023-04-06T01:40:49Z</updated>
    <id>tag:github.com,2023-04-06:/Project-Sloth/ps-liveries</id>
    <link href="https://github.com/Project-Sloth/ps-liveries" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NoPixel Inspired Liveries&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190289781-f36fb8c4-a98a-4792-9eb3-4b45d7adb1a4.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ps-liveries&lt;/h1&gt; &#xA;&lt;p&gt;NoPixel inspired liveries made from scratch for our community to enjoy and use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/91661118/169454003-488c8994-eec9-4b92-9b0c-f3a675be7d1b.png&#34; alt=&#34;Project Sloth Buttons&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Instructions&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure ps-liveries2.0&lt;/li&gt; &#xA; &lt;li&gt;Ensure ps-liveries1.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sounds Setup&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag [ps-liveries-sounds] into your &lt;code&gt;resources&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Ensure [ps-liveries-sounds] in your server CFG&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;2.0 Update&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2010 Ford Taurus - LSPD, BCSO, Troopers, Rangers&lt;/li&gt; &#xA; &lt;li&gt;2015 Ford Explorer - LSPD, BCSO, Troopers, Rangers&lt;/li&gt; &#xA; &lt;li&gt;2018 Dodge Charger - LSPD, BCSO, Troopers, Rangers, CPD&lt;/li&gt; &#xA; &lt;li&gt;2021 Ford F-150 - LSPD, BCSO, Troopers, Rangers&lt;/li&gt; &#xA; &lt;li&gt;2018 Dodge Durango - LSPD, BCSO, UC&lt;/li&gt; &#xA; &lt;li&gt;Helicopters AS350 - LSPD &amp;amp; BCSO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;2.0 Video Showcase&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=owYEB-8Gdtc&#34;&gt;Video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;2.0 Preview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/PFNsrKO.jpg&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://i.imgur.com/2PF6OeM.jpg&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://i.imgur.com/3sUs7as.jpg&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://i.imgur.com/Cas1c0N.jpg&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://i.imgur.com/3sUs7as.jpg&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://i.imgur.com/10HYP0o.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1.0 Cars Includes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2019 ZR1 Corvette - SASP, BCSO, Rangers&lt;/li&gt; &#xA; &lt;li&gt;2018 Dodge Demon - SASP, BCSO, Rangers&lt;/li&gt; &#xA; &lt;li&gt;2021 Ford Mustang - SASP, BCSO, Rangers&lt;/li&gt; &#xA; &lt;li&gt;2011 Ford Crownvic - LSPD, LSPD GHOST, CPD, BCSO&lt;/li&gt; &#xA; &lt;li&gt;2018 Dodge Charger - LSPD, BCSO, BCSO GHOST, CPD&lt;/li&gt; &#xA; &lt;li&gt;2020 Ford Explorer - LSPD, BCSO, BCSO GHOST, CPD&lt;/li&gt; &#xA; &lt;li&gt;Helicopters AS350 - LSPD &amp;amp; BCSO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;1.0 Showcase&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gvi1P7psSWQ&#34;&gt;Video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;1.0 Preview&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190525677-553eaa3b-a5da-44a9-abb1-59e410f59de8.jpg&#34; alt=&#34;VEPF9y7&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190526131-4f915832-df3b-4b2a-a7a8-b7dc6fc25974.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190525908-17695b5c-ae78-455b-8e46-be186cf03242.jpg&#34; alt=&#34;T5DYGad&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190526015-ab890b22-94bb-485a-b31f-3fa309b28b8e.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190290341-502d5181-4e55-4830-881a-099022015bb8.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190290347-eae30a19-dc9a-40c6-94aa-862d4ab96989.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190290360-1d6323fa-f13f-49ea-88f4-c3ebb183f929.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190290369-dad8a5fe-8a68-462e-88a9-f529b1b32f2c.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190290378-917ed8af-dd7d-449b-8bdc-d250afff16cb.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://cdn.discordapp.com/attachments/1019793471965503631/1030170977931378688/Picsart_22-10-13_13-30-31-938.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://cdn.discordapp.com/attachments/1019793471965503631/1031009840123883652/Screenshot_2342.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/82112471/190290385-db2466c8-bc73-44a5-ba90-6349b72525f0.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Livery Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Luceeiy&#34;&gt;Samael#1564&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Bunny5578&#34;&gt;bunnyüêá#1920&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LividDS&#34;&gt;LividDS#3397&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Polo4217&#34;&gt;Polo4217&lt;/a&gt; - 1.0 Handling Files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Sound Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gta5-mods.com/vehicles/ford-crown-victoria-4-6-modular-v8-engine-sound-oiv-add-on-fivem-sound&#34;&gt;Crown Victoria sound by Aquaphobic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gta5-mods.com/vehicles/dodge-charger-6-4-6-2sc-v8-engine-sound-oiv-add-on-fivem-sound&#34;&gt;Dodge Charger sound by Aquaphobic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;2.0 Car Models Credits&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://discord.gg/sHhAAZx&#34;&gt;SoCal Thero#3018&lt;/a&gt; on &lt;a href=&#34;https://forum.cfx.re/t/free-ocrps-leo-vehicle-pack-with-vehicle-template-light-template-and-call-sign-mod-ver-3-0/5015523&#34;&gt;CFX forums&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;1.0 Car Model Credits&lt;/h1&gt; &#xA;&lt;h3&gt;2019 ZR1 Corvette&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://discord.gg/eVUk88U&#34;&gt;Bloodshot#4652.&lt;/a&gt; He makes custom models, liveries and templates. Check out his Discord &lt;a href=&#34;https://discord.gg/eVUk88U&#34;&gt;here.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GTAPoliceMods &lt;a href=&#34;https://gtapolicemods.com/files/file/1314-non-els-2019-zr1-corvette-rb-bb-fivem-ready/&#34;&gt;link here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2018 Dodge Demon&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://discord.gg/eVUk88U&#34;&gt;Bloodshot#4652.&lt;/a&gt; He makes custom models, liveries and templates. Check out his Discord &lt;a href=&#34;https://discord.gg/eVUk88U&#34;&gt;here.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LSPDFR &lt;a href=&#34;https://www.lcpdfr.com/downloads/gta5mods/vehiclemodels/38261-non-els-2018-dodge-demon-rb-bb-fivem-ready/&#34;&gt;link here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2021 Ford Mustang&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://discord.gg/WDZxBke&#34;&gt;EarthLlamma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LSPDFR &lt;a href=&#34;https://www.lcpdfr.com/downloads/gta5mods/vehiclemodels/33618-non-els-2021-mach-1-mustang-rb-fivem-ready/&#34;&gt;link here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2011 Crown Victoria&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://www.lcpdfr.com/profile/378511-silent-s/&#34;&gt;Silent S.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LSPDFR [link here.]&lt;a href=&#34;https://www.lcpdfr.com/downloads/gta5mods/vehiclemodels/23301-fivem-readynon-els-2011-crown-victoria/&#34;&gt;https://www.lcpdfr.com/downloads/gta5mods/vehiclemodels/23301-fivem-readynon-els-2011-crown-victoria/&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Helicopters AS350&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://www.gta5-mods.com/users/SkylineGTRFreak&#34;&gt;SkylineGTRFreak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GTA5Mods &lt;a href=&#34;https://www.gta5-mods.com/vehicles/as-350-ecureuil&#34;&gt;link here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2018 Dodge Charger&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://www.gta5-mods.com/users/NorthernScot&#34;&gt;NorthernScot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GTA5Mods &lt;a href=&#34;https://www.gta5-mods.com/vehicles/2018-dodge-charger-r-b-liberty-ii#comments_tab&#34;&gt;link here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2020 Ford Explorer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Created by &lt;a href=&#34;https://www.gta5-mods.com/users/NorthernScot&#34;&gt;NorthernScot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GTA5Mods &lt;a href=&#34;https://www.gta5-mods.com/vehicles/non-els-2020-ford-explorer&#34;&gt;link here.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>james1236/backseat.nvim</title>
    <updated>2023-04-06T01:40:49Z</updated>
    <id>tag:github.com,2023-04-06:/james1236/backseat.nvim</id>
    <link href="https://github.com/james1236/backseat.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim plugin that uses GPT to highlight and explain code readability issues&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;backseat.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A neovim plugin that uses GPT to highlight and explain code readability issues. Get unsolicited advice of dubious quality in never-before-seen quantities! &lt;br&gt;&lt;br&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/32351696/229314187-f229664f-f396-4840-9765-8118810b3dae.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;User Command&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:Backseat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sends the current buffer to OpenAI to highlight readability feedback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:BackseatAsk &amp;lt;question&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Ask a question about the code in the current buffer (i.e What does the function on line 20 do?, Summarize this code)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:BackseatClear&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear all Backseat highlighting from the current buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:BackseatClearLine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Clear the current line of Backseat highlighting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If a buffer contains more than 100 lines, it will be split into multiple &amp;lt;= 100 line requests.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;OpenAI API key - You can get yours with a free account from &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;their website&lt;/a&gt;. If you don&#39;t have any more free credits, usage is very cheap at ~$0.004 per 100 lines submitted.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h3&gt;Lazy plugin manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;james1236/backseat.nvim&#34;,&#xA;    config = function()&#xA;        require(&#34;backseat&#34;).setup({&#xA;            -- Alternatively, set the env var $OPENAI_API_KEY by putting &#34;export OPENAI_API_KEY=sk-xxxxx&#34; in your ~/.bashrc&#xA;            openai_api_key = &#39;sk-xxxxxxxxxxxxxx&#39;, -- Get yours from platform.openai.com/account/api-keys&#xA;            openai_model_id = &#39;gpt-3.5-turbo&#39;, --gpt-4 (If you do not have access to a model, it says &#34;The model does not exist&#34;)&#xA;&#xA;            -- split_threshold = 100,&#xA;            -- additional_instruction = &#34;Respond snarkily&#34;, -- (GPT-3 will probably deny this request, but GPT-4 complies)&#xA;            -- highlight = {&#xA;            --     icon = &#39;Ô†µ&#39;, -- &#39;Ô†¥&#39;&#xA;            --     group = &#39;Comment&#39;,&#xA;            -- }&#xA;        })&#xA;    end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;The result of using &lt;code&gt;additional_instruction = &#34;Respond snarkily&#34;&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/32351696/229297495-6d145848-10bf-43eb-8c2a-ab4264f514b1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Config&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setup Table Name&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;openai_api_key&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Your OpenAI API key, needed to use their language models&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;openai_model_id&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;gpt-3.5-turbo&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The model&#39;s identifier, such as gpt-3.5-turbo and gpt-4&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;split_threshold&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;100&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The max number of lines of code sent per request (lower uses more tokens but increases number of suggestions)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;additional_instruction&lt;/code&gt;,&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An additional instruction to give the AI, like &#34;Make your responses more brief&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight.icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;Ô†¥&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The sign column icon to display for each line containing suggestions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;highlight.group&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;String&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The &lt;code&gt;:hi&lt;/code&gt; highlight color group for the icon and the suggestion text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;More Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/32351696/229299250-1fcb4135-2a6a-4663-9637-13af7c0ee7cd.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rebelot/terminal.nvim</title>
    <updated>2023-04-06T01:40:49Z</updated>
    <id>tag:github.com,2023-04-06:/rebelot/terminal.nvim</id>
    <link href="https://github.com/rebelot/terminal.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Terminal Manager for Neovim&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;terminal.nvim&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/assets/terminal.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;The Neovim Terminal Manager&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h1&gt;Terminal.nvim&lt;/h1&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;!--toc:start--&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminalnvim&#34;&gt;Terminal.nvim&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#config&#34;&gt;Config&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#configlayout&#34;&gt;config.layout&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#configlayoutopencmd&#34;&gt;config.layout.open_cmd:&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#float-layout&#34;&gt;Float Layout:&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#configcmd&#34;&gt;config.cmd&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#configautoclose&#34;&gt;config.autoclose&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#functions&#34;&gt;Functions&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#setup&#34;&gt;setup()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#settarget&#34;&gt;set_target()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#cycle&#34;&gt;cycle()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#run&#34;&gt;run()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#open&#34;&gt;open()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#close&#34;&gt;close()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#kill&#34;&gt;kill()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#toggle&#34;&gt;toggle()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#send&#34;&gt;send()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#currenttermindex&#34;&gt;current_term_index()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#currentterm&#34;&gt;current_term()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#move&#34;&gt;move()&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#keymaps&#34;&gt;Keymaps&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#example-mappings&#34;&gt;Example mappings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#commands&#34;&gt;Commands&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#termrun&#34;&gt;TermRun&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#termopen&#34;&gt;TermOpen&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#termclose&#34;&gt;TermClose&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#termtoggle&#34;&gt;TermToggle&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#termkill&#34;&gt;TermKill&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#termsend&#34;&gt;TermSend&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#termsettarget&#34;&gt;TermSetTarget&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminal-objects&#34;&gt;Terminal objects&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminalnew&#34;&gt;terminal:new()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminalopen&#34;&gt;terminal:open()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminalclose&#34;&gt;terminal:close()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminaltoggle&#34;&gt;terminal:toggle()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminalkill&#34;&gt;terminal:kill()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminalsend&#34;&gt;terminal:send()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#named-terminals&#34;&gt;Named Terminals&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#ipython&#34;&gt;IPython:&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#lazygit&#34;&gt;Lazygit:&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#htop&#34;&gt;Htop:&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#tips&#34;&gt;Tips&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#useful-terminal-mappings&#34;&gt;Useful terminal mappings&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#auto-insert-mode&#34;&gt;Auto insert mode&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#terminal-window-highlight&#34;&gt;terminal window highlight&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#statusline-integration&#34;&gt;Statusline integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rebelot/terminal.nvim/master/#donate&#34;&gt;Donate&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--toc:end--&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#39;rebelot/terminal.nvim&#39;,&#xA;    config = function()&#xA;        require(&#34;terminal&#34;).setup()&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;p&gt;Default config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    layout = { open_cmd = &#34;botright new&#34; },&#xA;    cmd = { vim.o.shell },&#xA;    autoclose = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;config.layout&lt;/h4&gt; &#xA;&lt;p&gt;Specify the layout of the terminal window.&lt;/p&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;table&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;{ open_cmd = &#34;botright new&#34; }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;config.layout.open_cmd:&lt;/h5&gt; &#xA;&lt;p&gt;Vim command used to create the new buffer and window.&lt;/p&gt; &#xA;&lt;h5&gt;Float Layout:&lt;/h5&gt; &#xA;&lt;p&gt;When &lt;code&gt;open_cmd = &#34;float&#34;&lt;/code&gt;, &lt;code&gt;layout.height&lt;/code&gt; and &lt;code&gt;layout.width&lt;/code&gt; are used to determine the height (lines) and width (columns) of the floating window. Values &lt;code&gt;&amp;lt;= 1&lt;/code&gt; are interpreted as percentage of screen space.&lt;/p&gt; &#xA;&lt;h4&gt;config.cmd&lt;/h4&gt; &#xA;&lt;p&gt;Default command for new terminals&lt;/p&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;table|string&lt;/code&gt; passed to &lt;code&gt;termopen&lt;/code&gt; (&lt;code&gt;:h jobstart()&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;{ vim.o.shell }&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;config.autoclose&lt;/h4&gt; &#xA;&lt;p&gt;Automatically close terminal window when the process exits (on &lt;code&gt;TermClose&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;bool&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h4&gt;setup()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;setup(config)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;config&lt;/code&gt; (&lt;code&gt;table&lt;/code&gt;): user configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Set up the plugin with user &lt;code&gt;config&lt;/code&gt;. A call to this function is always required.&lt;/p&gt; &#xA;&lt;h4&gt;set_target()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;set_target(index)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;index&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;): Terminal index.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Set the &lt;code&gt;index&lt;/code&gt; terminal as the target for other actions.&lt;/p&gt; &#xA;&lt;h4&gt;cycle()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;cycle(step)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;step&lt;/code&gt; (&lt;code&gt;integer&lt;/code&gt;): Increment number for cycling.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cycle between active terminals.&lt;/p&gt; &#xA;&lt;h4&gt;run()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;run(cmd?, opts?)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd&lt;/code&gt; (&lt;code&gt;table|string&lt;/code&gt;): command to be executed by the terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts&lt;/code&gt; (&lt;code&gt;table&lt;/code&gt;): options to be passed to &lt;code&gt;termopen&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run a command in terminal with given options. If no command is provided, user will be prompted to insert one; If &lt;code&gt;cmd&lt;/code&gt; is an empty string, &lt;code&gt;config.cmd&lt;/code&gt; will be used.&lt;/p&gt; &#xA;&lt;h4&gt;open()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;open(index, layout, force)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;index&lt;/code&gt;(&lt;code&gt;integer&lt;/code&gt;): terminal index&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;layout&lt;/code&gt; (&lt;code&gt;table&lt;/code&gt;): layout spec&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force&lt;/code&gt; (&lt;code&gt;bool&lt;/code&gt;): Force opening the terminal window even if it already visible in the current tab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open a terminal with given layout.&lt;/p&gt; &#xA;&lt;h4&gt;close()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;close(index)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;index&lt;/code&gt;(&lt;code&gt;integer&lt;/code&gt;): terminal index&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Close a terminal window.&lt;/p&gt; &#xA;&lt;h4&gt;kill()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;kill(index)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;index&lt;/code&gt;(&lt;code&gt;integer&lt;/code&gt;): terminal index&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Kill a terminal job and close its window.&lt;/p&gt; &#xA;&lt;h4&gt;toggle()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;toggle(index, layout, force)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;index&lt;/code&gt;(&lt;code&gt;integer&lt;/code&gt;): terminal index&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;layout&lt;/code&gt; (&lt;code&gt;table&lt;/code&gt;): layout spec&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force&lt;/code&gt; (&lt;code&gt;bool&lt;/code&gt;): Force opening the terminal window even if it already visible in the current tab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open a terminal with given layout, or close its window if it&#39;s visible in the current tab (unless &lt;code&gt;force&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;send()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;send(index, data)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;index&lt;/code&gt;(&lt;code&gt;integer&lt;/code&gt;): terminal index&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt; (&lt;code&gt;table|string&lt;/code&gt;): Text to be sent to the terminal via &lt;code&gt;chansend()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;current_term_index()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;current_term_index()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get the index of the terminal in the current window.&lt;/p&gt; &#xA;&lt;h4&gt;current_term()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;get_current_term()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Get the terminal object displayed in the current window.&lt;/p&gt; &#xA;&lt;h4&gt;move()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;move(index, layout)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Change the layout of the selected terminal, permanently.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Keymaps&lt;/h2&gt; &#xA;&lt;p&gt;Keymaps can be set up using the API defined in &lt;code&gt;terminal.mappings.&lt;/code&gt; When called with arguments, each keymap API function returns a pre-loaded function with given arguments. Otherwise, the corresponding terminal function will be called with default arguments. All keymap functions support a count by default, so that, for instance, &lt;code&gt;2&amp;lt;leader&amp;gt;to&lt;/code&gt; will toggle the terminal with index #2.&lt;/p&gt; &#xA;&lt;h5&gt;Example mappings&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local term_map = require(&#34;terminal.mappings&#34;)&#xA;vim.keymap.set({ &#34;n&#34;, &#34;x&#34; }, &#34;&amp;lt;leader&amp;gt;ts&#34;, term_map.operator_send, { expr = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;to&#34;, term_map.toggle)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tO&#34;, term_map.toggle({ open_cmd = &#34;enew&#34; }))&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tr&#34;, term_map.run)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tR&#34;, term_map.run(nil, { layout = { open_cmd = &#34;enew&#34; } }))&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tk&#34;, term_map.kill)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;t]&#34;, term_map.cycle_next)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;t[&#34;, term_map.cycle_prev)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tl&#34;, term_map.move({ open_cmd = &#34;belowright vnew&#34; }))&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tL&#34;, term_map.move({ open_cmd = &#34;botright vnew&#34; }))&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;th&#34;, term_map.move({ open_cmd = &#34;belowright new&#34; }))&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tH&#34;, term_map.move({ open_cmd = &#34;botright new&#34; }))&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;tf&#34;, term_map.move({ open_cmd = &#34;float&#34; }))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h4&gt;TermRun&lt;/h4&gt; &#xA;&lt;p&gt;:TermRun[!] [command]&lt;/p&gt; &#xA;&lt;p&gt;Run [command] in terminal. If command is empty, user will be prompted to enter one, falling back to &lt;code&gt;config.cmd&lt;/code&gt;. With [!] the new terminal window will replace the current buffer. Accepts &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;vertical&lt;/code&gt; modifiers to set the new terminal layout &lt;code&gt;open_cmd&lt;/code&gt;. (eg: &lt;code&gt;botright vertical TermRun ipython&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;TermOpen&lt;/h4&gt; &#xA;&lt;p&gt;:[count]TermOpen[!] [open_cmd]&lt;/p&gt; &#xA;&lt;p&gt;Open terminal with [count] index and layout specified by [open_cmd]. With [!], a new window will be created even if the terminal is already displayed in the current tab, otherwise the terminal will be focused. Also accepts &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;vertical&lt;/code&gt; modifiers to specify &lt;code&gt;open_cmd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;TermClose&lt;/h4&gt; &#xA;&lt;p&gt;:[count]TermClose&lt;/p&gt; &#xA;&lt;p&gt;Close terminal with [count] index.&lt;/p&gt; &#xA;&lt;h4&gt;TermToggle&lt;/h4&gt; &#xA;&lt;p&gt;:[count]TermToggle[!] [open_cmd]&lt;/p&gt; &#xA;&lt;p&gt;Toggle terminal with [count] index and layout specified by [open_cmd]. With [!], a new window will be created even if the terminal is already displayed in the current tab. Also accepts &lt;code&gt;split&lt;/code&gt; and &lt;code&gt;vertical&lt;/code&gt; modifiers to specify &lt;code&gt;open_cmd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;TermKill&lt;/h4&gt; &#xA;&lt;p&gt;:[count]TermKill&lt;/p&gt; &#xA;&lt;p&gt;Kill terminal with [count] index.&lt;/p&gt; &#xA;&lt;h4&gt;TermSend&lt;/h4&gt; &#xA;&lt;p&gt;:[count]TermSend [text]&lt;/p&gt; &#xA;&lt;p&gt;Send [text] to terminal with [count] index.&lt;/p&gt; &#xA;&lt;h4&gt;TermSetTarget&lt;/h4&gt; &#xA;&lt;p&gt;:[count]TermSetTarget&lt;/p&gt; &#xA;&lt;p&gt;Set terminal with [count] index as target for terminal actions.&lt;/p&gt; &#xA;&lt;h4&gt;TermMove&lt;/h4&gt; &#xA;&lt;p&gt;:[count]TermMove [open_cmd]&lt;/p&gt; &#xA;&lt;p&gt;Permanently change the terminal layout&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Terminal objects&lt;/h2&gt; &#xA;&lt;h4&gt;terminal:new()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;terminal:new(opts)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts&lt;/code&gt; (&lt;code&gt;table&lt;/code&gt;): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;layout (&lt;code&gt;table&lt;/code&gt;): layout spec&lt;/li&gt; &#xA;   &lt;li&gt;cmd (&lt;code&gt;table|string&lt;/code&gt;): command to be executed by the terminal&lt;/li&gt; &#xA;   &lt;li&gt;autoclose (&lt;code&gt;bool&lt;/code&gt;): automatically close terminal window when the process exits&lt;/li&gt; &#xA;   &lt;li&gt;cwd (&lt;code&gt;string|function-&amp;gt;string|nil&lt;/code&gt;): CWD of the terminal job.&lt;/li&gt; &#xA;   &lt;li&gt;Other fields passed to &lt;code&gt;jobstart&lt;/code&gt;: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;clear_env&lt;/li&gt; &#xA;     &lt;li&gt;env&lt;/li&gt; &#xA;     &lt;li&gt;on_exit&lt;/li&gt; &#xA;     &lt;li&gt;on_stdout&lt;/li&gt; &#xA;     &lt;li&gt;on_stderr&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;terminal:open()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;terminal:open(layout, force)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;layout&lt;/code&gt; (&lt;code&gt;table&lt;/code&gt;): layout spec&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force&lt;/code&gt; (&lt;code&gt;bool&lt;/code&gt;): Force opening the terminal window even if it already visible in the current tab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open the terminal with given layout.&lt;/p&gt; &#xA;&lt;h4&gt;terminal:close()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;terminal:close()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Close the terminal window in the current tab.&lt;/p&gt; &#xA;&lt;h4&gt;terminal:toggle()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;terminal:toggle(layout, force)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;layout&lt;/code&gt; (&lt;code&gt;table&lt;/code&gt;): layout spec&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;force&lt;/code&gt; (&lt;code&gt;bool&lt;/code&gt;): Force opening the terminal window even if it already visible in the current tab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Open the terminal with given layout, or close its window if it&#39;s visible in the current tab (unless &lt;code&gt;force&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;terminal:kill()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;terminal:kill()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kill a terminal job and close its window.&lt;/p&gt; &#xA;&lt;h4&gt;terminal:send()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;terminal:send(data)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Params:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;data&lt;/code&gt; (&lt;code&gt;table|string&lt;/code&gt;): Text to be sent to the terminal via &lt;code&gt;chansend()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Send text to terminal.&lt;/p&gt; &#xA;&lt;h3&gt;Named Terminals&lt;/h3&gt; &#xA;&lt;h5&gt;IPython:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local ipython = require(&#34;terminal&#34;).terminal:new({&#xA;    layout = { open_cmd = &#34;botright vertical new&#34; },&#xA;    cmd = { &#34;ipython&#34; },&#xA;    autoclose = true,&#xA;})&#xA;&#xA;vim.api.nvim_create_user_command(&#34;IPython&#34;, function()&#xA;    ipython:toggle(nil, true)&#xA;    local bufnr = vim.api.nvim_get_current_buf()&#xA;    vim.keymap.set(&#xA;        &#34;x&#34;,&#xA;        &#34;&amp;lt;leader&amp;gt;ts&#34;,&#xA;        function()&#xA;            vim.api.nvim_feedkeys(&#39;&#34;+y&#39;, &#39;n&#39;, false)&#xA;            ipython:send(&#34;%paste&#34;)&#xA;        end,&#xA;        { buffer = bufnr }&#xA;    )&#xA;    vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;t?&#34;, function()&#xA;        ipython:send(vim.fn.expand(&#34;&amp;lt;cexpr&amp;gt;&#34;) .. &#34;?&#34;)&#xA;    end, { buffer = bufnr })&#xA;end, {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Lazygit:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lazygit = require(&#34;terminal&#34;).terminal:new({&#xA;    layout = { open_cmd = &#34;float&#34;, height = 0.9, width = 0.9 },&#xA;    cmd = { &#34;lazygit&#34; },&#xA;    autoclose = true,&#xA;})&#xA;vim.env[&#34;GIT_EDITOR&#34;] = &#34;nvr -cc close -cc split --remote-wait +&#39;set bufhidden=wipe&#39;&#34;&#xA;vim.api.nvim_create_user_command(&#34;Lazygit&#34;, function(args)&#xA;    lazygit.cwd = args.args and vim.fn.expand(args.args)&#xA;    lazygit:toggle(nil, true)&#xA;end, { nargs = &#34;?&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Htop:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local htop = require(&#34;terminal&#34;).terminal:new({&#xA;    layout = { open_cmd = &#34;float&#34; },&#xA;    cmd = { &#34;htop&#34; },&#xA;    autoclose = true,&#xA;})&#xA;vim.api.nvim_create_user_command(&#34;Htop&#34;, function()&#xA;    htop:toggle(nil, true)&#xA;end, { nargs = &#34;?&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h5&gt;Useful terminal mappings&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;tnoremap &amp;lt;c-\&amp;gt;&amp;lt;c-\&amp;gt; &amp;lt;c-\&amp;gt;&amp;lt;c-n&amp;gt;&#xA;tnoremap &amp;lt;c-h&amp;gt; &amp;lt;c-\&amp;gt;&amp;lt;c-n&amp;gt;&amp;lt;c-w&amp;gt;h&#xA;tnoremap &amp;lt;c-j&amp;gt; &amp;lt;c-\&amp;gt;&amp;lt;c-n&amp;gt;&amp;lt;c-w&amp;gt;j&#xA;tnoremap &amp;lt;c-k&amp;gt; &amp;lt;c-\&amp;gt;&amp;lt;c-n&amp;gt;&amp;lt;c-w&amp;gt;k&#xA;tnoremap &amp;lt;c-l&amp;gt; &amp;lt;c-\&amp;gt;&amp;lt;c-n&amp;gt;&amp;lt;c-w&amp;gt;l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Auto insert mode&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd({ &#34;WinEnter&#34;, &#34;BufWinEnter&#34;, &#34;TermOpen&#34; }, {&#xA;    callback = function(args)&#xA;        if vim.startswith(vim.api.nvim_buf_get_name(args.buf), &#34;term://&#34;) then&#xA;            vim.cmd(&#34;startinsert&#34;)&#xA;        end&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;terminal window highlight&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;TermOpen&#34;, {&#xA;    command = [[setlocal nonumber norelativenumber winhl=Normal:NormalFloat]]&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Statusline integration&lt;/h5&gt; &#xA;&lt;p&gt;Use &lt;code&gt;terminal.current_term_index()&lt;/code&gt; to get the current terminal index and display it within the statusline.&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;Buy me coffee and support my work ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?business=VNQPHGW4JEM3S&amp;amp;no_recurring=0&amp;amp;item_name=Buy+me+coffee+and+support+my+work+%3B%29&amp;amp;currency_code=EUR&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>