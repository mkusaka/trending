<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-08T01:37:17Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jake-stewart/multicursor.nvim</title>
    <updated>2025-02-08T01:37:17Z</updated>
    <id>tag:github.com,2025-02-08:/jake-stewart/multicursor.nvim</id>
    <link href="https://github.com/jake-stewart/multicursor.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;multiple cursors in neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;multicursor.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Multiple cursors in Neovim which work how you expect. Now with help pages! &lt;code&gt;:h multicursor&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/a8c136dc-4786-447b-95c0-8e2a48f5776f&#34;&gt;https://github.com/user-attachments/assets/a8c136dc-4786-447b-95c0-8e2a48f5776f&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Visual and select modes with char/line/block selections&lt;/li&gt; &#xA; &lt;li&gt;Normal, insert, replace modes&lt;/li&gt; &#xA; &lt;li&gt;Undo/redo&lt;/li&gt; &#xA; &lt;li&gt;Virtualedit&lt;/li&gt; &#xA; &lt;li&gt;Autocompletion&lt;/li&gt; &#xA; &lt;li&gt;Snippet expansion (use &lt;code&gt;vim.snippet.expand&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Cursor specific registers for searching and yanking&lt;/li&gt; &#xA; &lt;li&gt;Match &amp;amp; split cursor selections with regex&lt;/li&gt; &#xA; &lt;li&gt;Transpose cursor selections&lt;/li&gt; &#xA; &lt;li&gt;Align cursor columns&lt;/li&gt; &#xA; &lt;li&gt;Easily extended with the Cursor API&lt;/li&gt; &#xA; &lt;li&gt;Works with most plugins and remaps&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Config (lazy.nvim)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;jake-stewart/multicursor.nvim&#34;,&#xA;    branch = &#34;1.0&#34;,&#xA;    config = function()&#xA;        local mc = require(&#34;multicursor-nvim&#34;)&#xA;&#xA;        mc.setup()&#xA;&#xA;        local set = vim.keymap.set&#xA;&#xA;        -- Add or skip cursor above/below the main cursor.&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;up&amp;gt;&#34;,&#xA;            function() mc.lineAddCursor(-1) end)&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;down&amp;gt;&#34;,&#xA;            function() mc.lineAddCursor(1) end)&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;&amp;lt;up&amp;gt;&#34;,&#xA;            function() mc.lineSkipCursor(-1) end)&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;&amp;lt;down&amp;gt;&#34;,&#xA;            function() mc.lineSkipCursor(1) end)&#xA;&#xA;        -- Add or skip adding a new cursor by matching word/selection&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;n&#34;,&#xA;            function() mc.matchAddCursor(1) end)&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;s&#34;,&#xA;            function() mc.matchSkipCursor(1) end)&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;N&#34;,&#xA;            function() mc.matchAddCursor(-1) end)&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;S&#34;,&#xA;            function() mc.matchSkipCursor(-1) end)&#xA;&#xA;        -- Add all matches in the document&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;A&#34;, mc.matchAllAddCursors)&#xA;&#xA;        -- You can also add cursors with any motion you prefer:&#xA;        -- set(&#34;n&#34;, &#34;&amp;lt;right&amp;gt;&#34;, function()&#xA;        --     mc.addCursor(&#34;w&#34;)&#xA;        -- end)&#xA;        -- set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;&amp;lt;right&amp;gt;&#34;, function()&#xA;        --     mc.skipCursor(&#34;w&#34;)&#xA;        -- end)&#xA;&#xA;        -- Rotate the main cursor.&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;left&amp;gt;&#34;, mc.nextCursor)&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;right&amp;gt;&#34;, mc.prevCursor)&#xA;&#xA;        -- Delete the main cursor.&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;x&#34;, mc.deleteCursor)&#xA;&#xA;        -- Add and remove cursors with control + left click.&#xA;        set(&#34;n&#34;, &#34;&amp;lt;c-leftmouse&amp;gt;&#34;, mc.handleMouse)&#xA;&#xA;        -- Easy way to add and remove cursors using the main cursor.&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;c-q&amp;gt;&#34;, mc.toggleCursor)&#xA;&#xA;        -- Clone every cursor and disable the originals.&#xA;        set({&#34;n&#34;, &#34;v&#34;}, &#34;&amp;lt;leader&amp;gt;&amp;lt;c-q&amp;gt;&#34;, mc.duplicateCursors)&#xA;&#xA;        set(&#34;n&#34;, &#34;&amp;lt;esc&amp;gt;&#34;, function()&#xA;            if not mc.cursorsEnabled() then&#xA;                mc.enableCursors()&#xA;            elseif mc.hasCursors() then&#xA;                mc.clearCursors()&#xA;            else&#xA;                -- Default &amp;lt;esc&amp;gt; handler.&#xA;            end&#xA;        end)&#xA;&#xA;        -- bring back cursors if you accidentally clear them&#xA;        set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;gv&#34;, mc.restoreCursors)&#xA;&#xA;        -- Align cursor columns.&#xA;        set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;a&#34;, mc.alignCursors)&#xA;&#xA;        -- Split visual selections by regex.&#xA;        set(&#34;v&#34;, &#34;S&#34;, mc.splitCursors)&#xA;&#xA;        -- Append/insert for each line of visual selections.&#xA;        set(&#34;v&#34;, &#34;I&#34;, mc.insertVisual)&#xA;        set(&#34;v&#34;, &#34;A&#34;, mc.appendVisual)&#xA;&#xA;        -- match new cursors within visual selections by regex.&#xA;        set(&#34;v&#34;, &#34;M&#34;, mc.matchCursors)&#xA;&#xA;        -- Rotate visual selection contents.&#xA;        set(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;t&#34;,&#xA;            function() mc.transposeCursors(1) end)&#xA;        set(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;T&#34;,&#xA;            function() mc.transposeCursors(-1) end)&#xA;&#xA;        -- Jumplist support&#xA;        set({&#34;v&#34;, &#34;n&#34;}, &#34;&amp;lt;c-i&amp;gt;&#34;, mc.jumpForward)&#xA;        set({&#34;v&#34;, &#34;n&#34;}, &#34;&amp;lt;c-o&amp;gt;&#34;, mc.jumpBackward)&#xA;&#xA;        -- Customize how cursors look.&#xA;        local hl = vim.api.nvim_set_hl&#xA;        hl(0, &#34;MultiCursorCursor&#34;, { link = &#34;Cursor&#34; })&#xA;        hl(0, &#34;MultiCursorVisual&#34;, { link = &#34;Visual&#34; })&#xA;        hl(0, &#34;MultiCursorSign&#34;, { link = &#34;SignColumn&#34;})&#xA;        hl(0, &#34;MultiCursorDisabledCursor&#34;, { link = &#34;Visual&#34; })&#xA;        hl(0, &#34;MultiCursorDisabledVisual&#34;, { link = &#34;Visual&#34; })&#xA;        hl(0, &#34;MultiCursorDisabledSign&#34;, { link = &#34;SignColumn&#34;})&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to Use&lt;/h2&gt; &#xA;&lt;p&gt;This section explains the basic usage of multicursor.nvim with the default config.&lt;/p&gt; &#xA;&lt;h4&gt;Selecting Cursors:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can add cursors above/below the current cursor with &lt;code&gt;&amp;lt;up&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;down&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can skip a line with &lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;up&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;down&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can match the word/selection under the cursor forwards or backwards with &lt;code&gt;&amp;lt;leader&amp;gt;n&lt;/code&gt; and &lt;code&gt;&amp;lt;leader&amp;gt;N&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can skip a match forwards or backwards using &lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt; and &lt;code&gt;&amp;lt;leader&amp;gt;S&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can add and remove cursors using the mouse with &lt;code&gt;&amp;lt;c-leftmouse&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Changing Cursors:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can rotate through cursors with &lt;code&gt;&amp;lt;left&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;right&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can delete the current cursor using &lt;code&gt;&amp;lt;leader&amp;gt;x&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can disable cursors with &lt;code&gt;&amp;lt;c-q&amp;gt;&lt;/code&gt;, which means only the main cursor moves.&lt;/li&gt; &#xA; &lt;li&gt;You can also press &lt;code&gt;&amp;lt;leader&amp;gt;&amp;lt;c-q&amp;gt;&lt;/code&gt; to duplicate cursors, disabling the originals.&lt;/li&gt; &#xA; &lt;li&gt;When cursors are disabled, you can press &lt;code&gt;&amp;lt;c-q&amp;gt;&lt;/code&gt; to add a cursor under the main cursor.&lt;/li&gt; &#xA; &lt;li&gt;You can press &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; to enable cursors again.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Using the Cursors:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Once you have your cursors, you use vim normally as you would with a single cursor.&lt;/li&gt; &#xA; &lt;li&gt;You can press &lt;code&gt;&amp;lt;leader&amp;gt;a&lt;/code&gt; to align cursor columns.&lt;/li&gt; &#xA; &lt;li&gt;You can press &lt;code&gt;S&lt;/code&gt; to split a visual selection by regex into multiple selections.&lt;/li&gt; &#xA; &lt;li&gt;You can press &lt;code&gt;M&lt;/code&gt; to run a regex within your visual selection, creating a new cursor for each match.&lt;/li&gt; &#xA; &lt;li&gt;You can press &lt;code&gt;&amp;lt;leader&amp;gt;t&lt;/code&gt; and &lt;code&gt;&amp;lt;leader&amp;gt;T&lt;/code&gt; to transpose visual selections, which means the text within each visual selection will be rotated between cursors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Finished:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you want to collapse your cursors back into one, press &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cursor API&lt;/h2&gt; &#xA;&lt;p&gt;All of the provided features are implemented using the Cursor API, which is accessible for writing your own complex multi-cursor logic. You can view the docs at &lt;code&gt;:h multicursor-api&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>