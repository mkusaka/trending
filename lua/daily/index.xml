<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-01T01:40:54Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Bekaboo/dropbar.nvim</title>
    <updated>2023-06-01T01:40:54Z</updated>
    <id>tag:github.com,2023-06-01:/Bekaboo/dropbar.nvim</id>
    <link href="https://github.com/Bekaboo/dropbar.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;IDE-like breadcrumbs, out of the box&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; dropbar.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;IDE-like breadcrumbs, out of the box&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/Bekaboo/dropbar.nvim/assets/76579810/28db72ab-d75c-46fe-8a9d-1f06b4440de9&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A polished, IDE-like, highly-customizable winbar for Neovim &lt;br&gt; with drop-down menu support and mutiple backends &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#options&#34;&gt;Options&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#general&#34;&gt;General&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#icons&#34;&gt;Icons&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#bar&#34;&gt;Bar&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#menu&#34;&gt;Menu&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#sources&#34;&gt;Sources&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#path&#34;&gt;Path&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#treesitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#lsp&#34;&gt;LSP&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#highlighting&#34;&gt;Highlighting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#developers&#34;&gt;Developers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#classes&#34;&gt;Classes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_t&#34;&gt;&lt;code&gt;dropbar_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_tree_t&#34;&gt;&lt;code&gt;dropbar_symbol_tree_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_t&#34;&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_entry_t&#34;&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_hl_info_t&#34;&gt;&lt;code&gt;dropbar_menu_hl_info_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_source_t&#34;&gt;&lt;code&gt;dropbar_source_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#making-a-new-source&#34;&gt;Making a New Source&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#similar-projects&#34;&gt;Similar Projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/assets/76579810/e8c1ac26-0321-4762-9975-b20fc3098c5a&#34;&gt;https://github.com/Bekaboo/dropbar.nvim/assets/76579810/e8c1ac26-0321-4762-9975-b20fc3098c5a&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Opening drop-down menus or go to definition with a single mouse click&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/Bekaboo/dropbar.nvim/assets/76579810/25282bf2-c90d-496b-9c37-0cbb6938ff5f&#34; alt=&#34;mouse-click&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Pick mode for quickly selecting a component in the winbar with shortcuts&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/Bekaboo/dropbar.nvim/assets/76579810/6126ceb1-0ad9-468b-89b9-457ce4110999&#34; alt=&#34;pick-mode&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Automatically truncating long components&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/Bekaboo/dropbar.nvim/assets/76579810/c3b03e7f-d6f7-4c60-9c0d-da038529e1c7&#34; alt=&#34;auto-truncate&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Multiple backbends that support fall-backs&lt;/p&gt; &lt;p&gt;&lt;code&gt;dropbar.nvim&lt;/code&gt; comes with four builtin sources:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/sources/lsp.lua&#34;&gt;lsp&lt;/a&gt;: gets symbols from language servers using nvim&#39;s builtin LSP framework&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/sources/markdown.lua&#34;&gt;markdown&lt;/a&gt;: a custom incremental parser that gets symbol information about markdown headings&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/sources/path.lua&#34;&gt;path&lt;/a&gt;: gets current file path&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/sources/treesitter.lua&#34;&gt;treesitter&lt;/a&gt;: gets symbols from treesitter parsers using nvim&#39;s builtin treesitter integration&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;To make a new source yourself, see &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#making-a-new-source&#34;&gt;making a new source&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For source fall-backs support, see &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#bar&#34;&gt;bar bptions&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Zero config &amp;amp; Zero dependency&lt;/p&gt; &lt;p&gt;&lt;code&gt;dropbar.nvim&lt;/code&gt; does not require &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;, &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; or any third-party UI libraries to work. As long as the language server or the treesitter parser is installed, it should work just fine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Show highlights in the drop-down menu according to current mouse/cursor position, see &lt;code&gt;:h mousemev&lt;/code&gt; and &lt;code&gt;:h &amp;lt;MouseMove&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;Preview symbol ranges in original window when hovering over them in the drop-down menu&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &lt;strong&gt;Nightly&lt;/strong&gt; (&amp;gt;= 0.10.0-dev)&lt;/li&gt; &#xA; &lt;li&gt;Optional &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;, if you want to see icons for different filetypes&lt;/li&gt; &#xA;   &lt;li&gt;Working language server installation for the lsp source to work&lt;/li&gt; &#xA;   &lt;li&gt;Working treesitter parser installation for the treesitter source to work&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lazy&#39;).setup({&#xA;  { &#39;Bekaboo/dropbar.nvim&#39; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function(use)&#xA;  use(&#39;Bekaboo/dropbar.nvim&#39;)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Using native package manager&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p ~/.local/share/nvim/site/pack/packages/&#xA;git clone https://github.com/Bekaboo/dropbar.nvim ~/.local/share/nvim/site/pack/packages/start/dropbar.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Lazy-loading is unneeded as it is already done in &lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/plugin/dropbar.lua&#34;&gt;plugin/dropbar.lua&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basics &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Moves the cursor around and see the winbar reflects your current context&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mouse support &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Click on a component in the winbar to open a drop-down menu of its siblings&lt;/li&gt; &#xA;   &lt;li&gt;Click on an entry in the drop-down menu to go to its location&lt;/li&gt; &#xA;   &lt;li&gt;Click on the indicator in the drop-down menu to open a sub-menu of its children&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Pick mode &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;require(&#39;dropbar.api&#39;).pick()&lt;/code&gt; to enter interactive pick mode or &lt;code&gt;require(&#39;dropbar.api&#39;).pick(&amp;lt;idx&amp;gt;)&lt;/code&gt; to directly select a component at &lt;code&gt;idx&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Inside interactive pick mode, press the corresponding pivot shown before each component to select it&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Default keymaps in drop-down menu &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;LeftMouse&amp;gt;&lt;/code&gt;: call the &lt;code&gt;on_click&lt;/code&gt; callback of the symbol at the mouse click&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;: find the first clickable symbol in the current drop-down menu entry and call its &lt;code&gt;on_click&lt;/code&gt; callback&lt;/li&gt; &#xA;   &lt;li&gt;To disable, remap or add new keymaps in the drop-down menu, see &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#menu&#34;&gt;menu options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt; A full list of all available options and their default values: &lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@class dropbar_configs_t&#xA;local opts = {&#xA;  general = {&#xA;    ---@type boolean|fun(buf: integer, win: integer): boolean&#xA;    enable = function(buf, win)&#xA;      return not vim.api.nvim_win_get_config(win).zindex&#xA;        and vim.bo[buf].buftype == &#39;&#39;&#xA;        and vim.api.nvim_buf_get_name(buf) ~= &#39;&#39;&#xA;        and not vim.wo[win].diff&#xA;    end,&#xA;    update_events = {&#xA;      &#39;CursorMoved&#39;,&#xA;      &#39;CursorMovedI&#39;,&#xA;      &#39;DirChanged&#39;,&#xA;      &#39;FileChangedShellPost&#39;,&#xA;      &#39;TextChanged&#39;,&#xA;      &#39;TextChangedI&#39;,&#xA;      &#39;VimResized&#39;,&#xA;      &#39;WinResized&#39;,&#xA;      &#39;WinScrolled&#39;,&#xA;    },&#xA;  },&#xA;  icons = {&#xA;    kinds = {&#xA;      use_devicons = true,&#xA;      symbols = {&#xA;        Array = &#39;󰅪 &#39;,&#xA;        Boolean = &#39; &#39;,&#xA;        BreakStatement = &#39;󰙧 &#39;,&#xA;        Call = &#39;󰃷 &#39;,&#xA;        CaseStatement = &#39;󱃙 &#39;,&#xA;        Class = &#39; &#39;,&#xA;        Color = &#39;󰏘 &#39;,&#xA;        Constant = &#39;󰏿 &#39;,&#xA;        Constructor = &#39; &#39;,&#xA;        ContinueStatement = &#39;→ &#39;,&#xA;        Copilot = &#39; &#39;,&#xA;        Declaration = &#39;󰙠 &#39;,&#xA;        Delete = &#39;󰩺 &#39;,&#xA;        DoStatement = &#39;󰑖 &#39;,&#xA;        Enum = &#39; &#39;,&#xA;        EnumMember = &#39; &#39;,&#xA;        Event = &#39; &#39;,&#xA;        Field = &#39; &#39;,&#xA;        File = &#39;󰈔 &#39;,&#xA;        Folder = &#39;󰉋 &#39;,&#xA;        ForStatement = &#39;󰑖 &#39;,&#xA;        Function = &#39;󰊕 &#39;,&#xA;        Identifier = &#39;󰀫 &#39;,&#xA;        IfStatement = &#39;󰇉 &#39;,&#xA;        Interface = &#39; &#39;,&#xA;        Keyword = &#39;󰌋 &#39;,&#xA;        List = &#39;󰅪 &#39;,&#xA;        Log = &#39;󰦪 &#39;,&#xA;        Lsp = &#39; &#39;,&#xA;        Macro = &#39;󰁌 &#39;,&#xA;        MarkdownH1 = &#39;󰉫 &#39;,&#xA;        MarkdownH2 = &#39;󰉬 &#39;,&#xA;        MarkdownH3 = &#39;󰉭 &#39;,&#xA;        MarkdownH4 = &#39;󰉮 &#39;,&#xA;        MarkdownH5 = &#39;󰉯 &#39;,&#xA;        MarkdownH6 = &#39;󰉰 &#39;,&#xA;        Method = &#39;󰆧 &#39;,&#xA;        Module = &#39;󰏗 &#39;,&#xA;        Namespace = &#39;󰅩 &#39;,&#xA;        Null = &#39;󰢤 &#39;,&#xA;        Number = &#39;󰎠 &#39;,&#xA;        Object = &#39;󰅩 &#39;,&#xA;        Operator = &#39;󰆕 &#39;,&#xA;        Package = &#39;󰆦 &#39;,&#xA;        Property = &#39; &#39;,&#xA;        Reference = &#39;󰦾 &#39;,&#xA;        Regex = &#39; &#39;,&#xA;        Repeat = &#39;󰑖 &#39;,&#xA;        Scope = &#39;󰅩 &#39;,&#xA;        Snippet = &#39;󰩫 &#39;,&#xA;        Specifier = &#39;󰦪 &#39;,&#xA;        Statement = &#39;󰅩 &#39;,&#xA;        String = &#39;󰉾 &#39;,&#xA;        Struct = &#39; &#39;,&#xA;        SwitchStatement = &#39;󰺟 &#39;,&#xA;        Text = &#39; &#39;,&#xA;        Type = &#39; &#39;,&#xA;        TypeParameter = &#39;󰆩 &#39;,&#xA;        Unit = &#39; &#39;,&#xA;        Value = &#39;󰎠 &#39;,&#xA;        Variable = &#39;󰀫 &#39;,&#xA;        WhileStatement = &#39;󰑖 &#39;,&#xA;      },&#xA;    },&#xA;    ui = {&#xA;      bar = {&#xA;        separator = &#39; &#39;,&#xA;        extends = &#39;…&#39;,&#xA;      },&#xA;      menu = {&#xA;        separator = &#39; &#39;,&#xA;        indicator = &#39; &#39;,&#xA;      },&#xA;    },&#xA;  },&#xA;  bar = {&#xA;    ---@type dropbar_source_t[]|fun(buf: integer, win: integer): dropbar_source_t[]&#xA;    sources = function(_, _)&#xA;      local sources = require(&#39;dropbar.sources&#39;)&#xA;      return {&#xA;        sources.path,&#xA;        {&#xA;          get_symbols = function(buf, cursor)&#xA;            if vim.bo[buf].ft == &#39;markdown&#39; then&#xA;              return sources.markdown.get_symbols(buf, cursor)&#xA;            end&#xA;            for _, source in ipairs({&#xA;              sources.lsp,&#xA;              sources.treesitter,&#xA;            }) do&#xA;              local symbols = source.get_symbols(buf, cursor)&#xA;              if not vim.tbl_isempty(symbols) then&#xA;                return symbols&#xA;              end&#xA;            end&#xA;            return {}&#xA;          end,&#xA;        },&#xA;      }&#xA;    end,&#xA;    padding = {&#xA;      left = 1,&#xA;      right = 1,&#xA;    },&#xA;    pick = {&#xA;      pivots = &#39;abcdefghijklmnopqrstuvwxyz&#39;,&#xA;    },&#xA;    truncate = true,&#xA;  },&#xA;  menu = {&#xA;    entry = {&#xA;      padding = {&#xA;        left = 1,&#xA;        right = 1,&#xA;      },&#xA;    },&#xA;    ---@type table&amp;lt;string, string|function|table&amp;lt;string, string|function&amp;gt;&amp;gt;&#xA;    keymaps = {&#xA;      [&#39;&amp;lt;LeftMouse&amp;gt;&#39;] = function()&#xA;        local api = require(&#39;dropbar.api&#39;)&#xA;        local menu = api.get_current_dropbar_menu()&#xA;        if not menu then&#xA;          return&#xA;        end&#xA;        local mouse = vim.fn.getmousepos()&#xA;        if mouse.winid ~= menu.win then&#xA;          local parent_menu = api.get_dropbar_menu(mouse.winid)&#xA;          if parent_menu and parent_menu.sub_menu then&#xA;            parent_menu.sub_menu:close()&#xA;          end&#xA;          if vim.api.nvim_win_is_valid(mouse.winid) then&#xA;            vim.api.nvim_set_current_win(mouse.winid)&#xA;          end&#xA;          return&#xA;        end&#xA;        menu:click_at({ mouse.line, mouse.column }, nil, 1, &#39;l&#39;)&#xA;      end,&#xA;      [&#39;&amp;lt;CR&amp;gt;&#39;] = function()&#xA;        local menu = require(&#39;dropbar.api&#39;).get_current_dropbar_menu()&#xA;        if not menu then&#xA;          return&#xA;        end&#xA;        local cursor = vim.api.nvim_win_get_cursor(menu.win)&#xA;        local component = menu.entries[cursor[1]]:first_clickable(cursor[2])&#xA;        if component then&#xA;          menu:click_on(component, nil, 1, &#39;l&#39;)&#xA;        end&#xA;      end,&#xA;    },&#xA;    ---@alias dropbar_menu_win_config_opts_t any|fun(menu: dropbar_menu_t):any&#xA;    ---@type table&amp;lt;string, dropbar_menu_win_config_opts_t&amp;gt;&#xA;    ---@see vim.api.nvim_open_win&#xA;    win_configs = {&#xA;      border = &#39;none&#39;,&#xA;      style = &#39;minimal&#39;,&#xA;      row = function(menu)&#xA;        return menu.parent_menu&#xA;            and menu.parent_menu.clicked_at&#xA;            and menu.parent_menu.clicked_at[1] - vim.fn.line(&#39;w0&#39;)&#xA;          or 1&#xA;      end,&#xA;      col = function(menu)&#xA;        return menu.parent_menu and menu.parent_menu._win_configs.width or 0&#xA;      end,&#xA;      relative = function(menu)&#xA;        return menu.parent_menu and &#39;win&#39; or &#39;mouse&#39;&#xA;      end,&#xA;      win = function(menu)&#xA;        return menu.parent_menu and menu.parent_menu.win&#xA;      end,&#xA;      height = function(menu)&#xA;        return math.max(&#xA;          1,&#xA;          math.min(&#xA;            #menu.entries,&#xA;            vim.go.pumheight ~= 0 and vim.go.pumheight&#xA;              or math.ceil(vim.go.lines / 4)&#xA;          )&#xA;        )&#xA;      end,&#xA;      width = function(menu)&#xA;        local min_width = vim.go.pumwidth ~= 0 and vim.go.pumwidth or 8&#xA;        if vim.tbl_isempty(menu.entries) then&#xA;          return min_width&#xA;        end&#xA;        return math.max(&#xA;          min_width,&#xA;          math.max(unpack(vim.tbl_map(function(entry)&#xA;            return entry:displaywidth()&#xA;          end, menu.entries)))&#xA;        )&#xA;      end,&#xA;    },&#xA;  },&#xA;  sources = {&#xA;    path = {&#xA;      ---@type string|fun(buf: integer): string&#xA;      relative_to = function(_)&#xA;        return vim.fn.getcwd()&#xA;      end,&#xA;      ---Can be used to filter out files or directories&#xA;      ---based on their name&#xA;      ---@type fun(name: string): boolean&#xA;      filter = function(_)&#xA;        return true&#xA;      end,&#xA;    },&#xA;    treesitter = {&#xA;      -- Lua pattern used to extract a short name from the node text&#xA;      -- Be aware that the match result must not be nil!&#xA;      name_pattern = string.rep(&#39;[#~%w%._%-&amp;gt;!]*&#39;, 4, &#39;%s*&#39;),&#xA;      -- The order matters! The first match is used as the type&#xA;      -- of the treesitter symbol and used to show the icon&#xA;      -- Types listed below must have corresponding icons&#xA;      -- in the `icons.kinds.symbols` table for the icon to be shown&#xA;      valid_types = {&#xA;        &#39;array&#39;,&#xA;        &#39;boolean&#39;,&#xA;        &#39;break_statement&#39;,&#xA;        &#39;call&#39;,&#xA;        &#39;case_statement&#39;,&#xA;        &#39;class&#39;,&#xA;        &#39;constant&#39;,&#xA;        &#39;constructor&#39;,&#xA;        &#39;continue_statement&#39;,&#xA;        &#39;delete&#39;,&#xA;        &#39;do_statement&#39;,&#xA;        &#39;enum&#39;,&#xA;        &#39;enum_member&#39;,&#xA;        &#39;event&#39;,&#xA;        &#39;for_statement&#39;,&#xA;        &#39;function&#39;,&#xA;        &#39;if_statement&#39;,&#xA;        &#39;interface&#39;,&#xA;        &#39;keyword&#39;,&#xA;        &#39;list&#39;,&#xA;        &#39;macro&#39;,&#xA;        &#39;method&#39;,&#xA;        &#39;module&#39;,&#xA;        &#39;namespace&#39;,&#xA;        &#39;null&#39;,&#xA;        &#39;number&#39;,&#xA;        &#39;operator&#39;,&#xA;        &#39;package&#39;,&#xA;        &#39;property&#39;,&#xA;        &#39;reference&#39;,&#xA;        &#39;repeat&#39;,&#xA;        &#39;scope&#39;,&#xA;        &#39;specifier&#39;,&#xA;        &#39;string&#39;,&#xA;        &#39;struct&#39;,&#xA;        &#39;switch_statement&#39;,&#xA;        &#39;type&#39;,&#xA;        &#39;type_parameter&#39;,&#xA;        &#39;unit&#39;,&#xA;        &#39;value&#39;,&#xA;        &#39;variable&#39;,&#xA;        &#39;while_statement&#39;,&#xA;        &#39;declaration&#39;,&#xA;        &#39;field&#39;,&#xA;        &#39;identifier&#39;,&#xA;        &#39;object&#39;,&#xA;        &#39;statement&#39;,&#xA;        &#39;text&#39;,&#xA;      },&#xA;    },&#xA;    lsp = {&#xA;      request = {&#xA;        -- Times to retry a request before giving up&#xA;        ttl_init = 60,&#xA;        interval = 1000, -- in ms&#xA;      },&#xA;    },&#xA;    markdown = {&#xA;      parse = {&#xA;        -- Number of lines to update when cursor moves out of the parsed range&#xA;        look_ahead = 200,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;General&lt;/h4&gt; &#xA;&lt;p&gt;These options live under &lt;code&gt;opts.general&lt;/code&gt; and are used to configure the general behavior of the plugin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.general.enable&lt;/code&gt;: &lt;code&gt;boolean|fun(buf: integer, win: integer): boolean&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Controls whether to enable the plugin for the current buffer and window&lt;/li&gt; &#xA;   &lt;li&gt;If a function is provided, it will be called with the current bufnr and winid and should return a boolean&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function(buf, win)&#xA;  return not vim.api.nvim_win_get_config(win).zindex&#xA;  and vim.bo[buf].buftype == &#39;&#39;&#xA;  and vim.api.nvim_buf_get_name(buf) ~= &#39;&#39;&#xA;  and not vim.wo[win].diff&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.general.update_events&lt;/code&gt;: &lt;code&gt;string[]&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List of events that should trigger an update of the dropbar&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;CursorMoved&#39;,&#xA;  &#39;CursorMovedI&#39;,&#xA;  &#39;DirChanged&#39;,&#xA;  &#39;FileChangedShellPost&#39;,&#xA;  &#39;TextChanged&#39;,&#xA;  &#39;TextChangedI&#39;,&#xA;  &#39;VimResized&#39;,&#xA;  &#39;WinResized&#39;,&#xA;  &#39;WinScrolled&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Icons&lt;/h4&gt; &#xA;&lt;p&gt;These options live under &lt;code&gt;opts.icons&lt;/code&gt; and are used to configure the icons used by the plugin:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.icons.kinds.use_devicons&lt;/code&gt;: &lt;code&gt;boolean&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Whether to use &lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; to show icons for different filetypes&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.icons.kinds.symbols&lt;/code&gt;: &lt;code&gt;table&amp;lt;string, string&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Table mapping the different kinds of symbols to their corresponding icons&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  Array = &#39;󰅪 &#39;,&#xA;  Boolean = &#39; &#39;,&#xA;  BreakStatement = &#39;󰙧 &#39;,&#xA;  Call = &#39;󰃷 &#39;,&#xA;  CaseStatement = &#39;󱃙 &#39;,&#xA;  Class = &#39; &#39;,&#xA;  Color = &#39;󰏘 &#39;,&#xA;  Constant = &#39;󰏿 &#39;,&#xA;  Constructor = &#39; &#39;,&#xA;  ContinueStatement = &#39;→ &#39;,&#xA;  Copilot = &#39; &#39;,&#xA;  Declaration = &#39;󰙠 &#39;,&#xA;  Delete = &#39;󰩺 &#39;,&#xA;  DoStatement = &#39;󰑖 &#39;,&#xA;  Enum = &#39; &#39;,&#xA;  EnumMember = &#39; &#39;,&#xA;  Event = &#39; &#39;,&#xA;  Field = &#39; &#39;,&#xA;  File = &#39;󰈔 &#39;,&#xA;  Folder = &#39;󰉋 &#39;,&#xA;  ForStatement = &#39;󰑖 &#39;,&#xA;  Function = &#39;󰊕 &#39;,&#xA;  Identifier = &#39;󰀫 &#39;,&#xA;  IfStatement = &#39;󰇉 &#39;,&#xA;  Interface = &#39; &#39;,&#xA;  Keyword = &#39;󰌋 &#39;,&#xA;  List = &#39;󰅪 &#39;,&#xA;  Log = &#39;󰦪 &#39;,&#xA;  Lsp = &#39; &#39;,&#xA;  Macro = &#39;󰁌 &#39;,&#xA;  MarkdownH1 = &#39;󰉫 &#39;,&#xA;  MarkdownH2 = &#39;󰉬 &#39;,&#xA;  MarkdownH3 = &#39;󰉭 &#39;,&#xA;  MarkdownH4 = &#39;󰉮 &#39;,&#xA;  MarkdownH5 = &#39;󰉯 &#39;,&#xA;  MarkdownH6 = &#39;󰉰 &#39;,&#xA;  Method = &#39;󰆧 &#39;,&#xA;  Module = &#39;󰏗 &#39;,&#xA;  Namespace = &#39;󰅩 &#39;,&#xA;  Null = &#39;󰢤 &#39;,&#xA;  Number = &#39;󰎠 &#39;,&#xA;  Object = &#39;󰅩 &#39;,&#xA;  Operator = &#39;󰆕 &#39;,&#xA;  Package = &#39;󰆦 &#39;,&#xA;  Property = &#39; &#39;,&#xA;  Reference = &#39;󰦾 &#39;,&#xA;  Regex = &#39; &#39;,&#xA;  Repeat = &#39;󰑖 &#39;,&#xA;  Scope = &#39;󰅩 &#39;,&#xA;  Snippet = &#39;󰩫 &#39;,&#xA;  Specifier = &#39;󰦪 &#39;,&#xA;  Statement = &#39;󰅩 &#39;,&#xA;  String = &#39;󰉾 &#39;,&#xA;  Struct = &#39; &#39;,&#xA;  SwitchStatement = &#39;󰺟 &#39;,&#xA;  Terminal = &#39; &#39;,&#xA;  Text = &#39; &#39;,&#xA;  Type = &#39; &#39;,&#xA;  TypeParameter = &#39;󰆩 &#39;,&#xA;  Unit = &#39; &#39;,&#xA;  Value = &#39;󰎠 &#39;,&#xA;  Variable = &#39;󰀫 &#39;,&#xA;  WhileStatement = &#39;󰑖 &#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.icons.ui.bar&lt;/code&gt;: &lt;code&gt;table&amp;lt;string, string&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Controls the icons used in the winbar UI&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  separator = &#39; &#39;,&#xA;  extends = &#39;…&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.icons.ui.menu&lt;/code&gt;: &lt;code&gt;table&amp;lt;string, string&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Controls the icons used in the menu UI&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  separator = &#39; &#39;,&#xA;  indicator = &#39; &#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Bar&lt;/h4&gt; &#xA;&lt;p&gt;These options live under &lt;code&gt;opts.bar&lt;/code&gt; and are used to control the behavior of the winbar:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.bar.sources&lt;/code&gt;: &lt;code&gt;dropbar_source_t[]|fun(buf: integer, win: integer): dropbar_source_t[]&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;List of sources to show in the winbar&lt;/li&gt; &#xA;   &lt;li&gt;If a function is provided, it will be called with the current bufnr and winid and should return a list of sources&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function(_, _)&#xA;  local sources = require(&#39;dropbar.sources&#39;)&#xA;  return {&#xA;    sources.path,&#xA;    {&#xA;      get_symbols = function(buf, cursor)&#xA;        if vim.bo[buf].ft == &#39;markdown&#39; then&#xA;          return sources.markdown.get_symbols(buf, cursor)&#xA;        end&#xA;        for _, source in ipairs({&#xA;          sources.lsp,&#xA;          sources.treesitter,&#xA;        }) do&#xA;          local symbols = source.get_symbols(buf, cursor)&#xA;          if not vim.tbl_isempty(symbols) then&#xA;            return symbols&#xA;          end&#xA;        end&#xA;        return {}&#xA;      end,&#xA;    },&#xA;  }&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Notice that in the default config we register the second source as an aggregation of LSP, treesitter, and markdown sources, so that we dynamically choose the best source for the current buffer or window. For more information about sources, see &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_source_t&#34;&gt;&lt;code&gt;dropbar_source_t&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.bar.padding&lt;/code&gt;: &lt;code&gt;{ left: number, right: number }&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Padding to use between the winbar and the window border&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;{ left = 1, right = 1 }&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.bar.pick.pivots&lt;/code&gt;: &lt;code&gt;string&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pivots to use in pick mode&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;&#39;abcdefghijklmnopqrstuvwxyz&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.bar.truncate&lt;/code&gt;: &lt;code&gt;boolean&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Whether to truncate the winbar if it doesn&#39;t fit in the window&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Menu&lt;/h4&gt; &#xA;&lt;p&gt;These options live under &lt;code&gt;opts.menu&lt;/code&gt; and are used to control the behavior of the menu:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.menu.entry.padding&lt;/code&gt;: &lt;code&gt;{ left: number, right: number }&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Padding to use between the menu entry and the menu border&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;{ left = 1, right = 1 }&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.menu.keymaps&lt;/code&gt;: &lt;code&gt;table&amp;lt;string, function|string|table&amp;lt;string, function&amp;gt;|table&amp;lt;string, string&amp;gt;&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Buffer-local keymaps in the menu&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;&amp;lt;key&amp;gt; = &amp;lt;function|string&amp;gt;&lt;/code&gt; to map a key in normal mode and visual mode in the menu buffer, or use &lt;code&gt;&amp;lt;key&amp;gt; = table&amp;lt;mode, function|string&amp;gt;&lt;/code&gt; to map a key in specific modes.&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  [&#39;&amp;lt;LeftMouse&amp;gt;&#39;] = function()&#xA;    local api = require(&#39;dropbar.api&#39;)&#xA;    local menu = api.get_current_dropbar_menu()&#xA;    if not menu then&#xA;      return&#xA;    end&#xA;    local mouse = vim.fn.getmousepos()&#xA;    if mouse.winid ~= menu.win then&#xA;      local parent_menu = api.get_dropbar_menu(mouse.winid)&#xA;      if parent_menu and parent_menu.sub_menu then&#xA;        parent_menu.sub_menu:close()&#xA;      end&#xA;      if vim.api.nvim_win_is_valid(mouse.winid) then&#xA;        vim.api.nvim_set_current_win(mouse.winid)&#xA;      end&#xA;      return&#xA;    end&#xA;    menu:click_at({ mouse.line, mouse.column }, nil, 1, &#39;l&#39;)&#xA;  end,&#xA;  [&#39;&amp;lt;CR&amp;gt;&#39;] = function()&#xA;    local menu = require(&#39;dropbar.api&#39;).get_current_dropbar_menu()&#xA;    if not menu then&#xA;      return&#xA;    end&#xA;    local cursor = vim.api.nvim_win_get_cursor(menu.win)&#xA;    local component = menu.entries[cursor[1]]:first_clickable(cursor[2])&#xA;    if component then&#xA;      menu:click_on(component, nil, 1, &#39;l&#39;)&#xA;    end&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.menu.win_configs&lt;/code&gt;: &lt;code&gt;table&amp;lt;string, dropbar_menu_win_config_opts_t&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Window configurations for the menu, see &lt;code&gt;:h nvim_open_win()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Each config key in &lt;code&gt;opts.menu.win_configs&lt;/code&gt; accepts either a plain value which will be passes directly to &lt;code&gt;nvim_open_win()&lt;/code&gt;, or a function that takes the current menu (see &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_t&#34;&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt;&lt;/a&gt;) as an argument and returns a value to be passed to &lt;code&gt;nvim_open_win()&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  border = &#39;none&#39;,&#xA;  style = &#39;minimal&#39;,&#xA;  row = function(menu)&#xA;    return menu.parent_menu&#xA;        and menu.parent_menu.clicked_at&#xA;        and menu.parent_menu.clicked_at[1] - vim.fn.line(&#39;w0&#39;)&#xA;      or 1&#xA;  end,&#xA;  col = function(menu)&#xA;    return menu.parent_menu and menu.parent_menu._win_configs.width or 0&#xA;  end,&#xA;  relative = function(menu)&#xA;    return menu.parent_menu and &#39;win&#39; or &#39;mouse&#39;&#xA;  end,&#xA;  win = function(menu)&#xA;    return menu.parent_menu and menu.parent_menu.win&#xA;  end,&#xA;  height = function(menu)&#xA;    return math.max(&#xA;      1,&#xA;      math.min(&#xA;        #menu.entries,&#xA;        vim.go.pumheight ~= 0 and vim.go.pumheight&#xA;          or math.ceil(vim.go.lines / 4)&#xA;      )&#xA;    )&#xA;  end,&#xA;  width = function(menu)&#xA;    local min_width = vim.go.pumwidth ~= 0 and vim.go.pumwidth or 8&#xA;    if vim.tbl_isempty(menu.entries) then&#xA;      return min_width&#xA;    end&#xA;    return math.max(&#xA;      min_width,&#xA;      math.max(unpack(vim.tbl_map(function(entry)&#xA;        return entry:displaywidth()&#xA;      end, menu.entries)))&#xA;    )&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Sources&lt;/h4&gt; &#xA;&lt;p&gt;These options live under &lt;code&gt;opts.sources&lt;/code&gt; and are used to control the behavior of each sources.&lt;/p&gt; &#xA;&lt;h5&gt;Path&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.sources.path.relative_to&lt;/code&gt;: &lt;code&gt;string|fun(buf: integer): string&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The path to use as the root of the relative path&lt;/li&gt; &#xA;   &lt;li&gt;If a function is provided, it will be called with the current buffer number as an argument and should return a string to use as the root of the relative path&lt;/li&gt; &#xA;   &lt;li&gt;Notice: currently does not support &lt;code&gt;..&lt;/code&gt; relative paths&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function(_)&#xA;  return vim.fn.getcwd()&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.sources.path.filter&lt;/code&gt;: &lt;code&gt;function(name: string): boolean&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A function that takes a file name and returns whether to include it in the results shown in the drop-down menu&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function(_)&#xA;  return true&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Treesitter&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.sources.treesitter.name_pattern&lt;/code&gt;: &lt;code&gt;string&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lua pattern used to extract a short name from the node text&lt;/li&gt; &#xA;   &lt;li&gt;Be aware! The matching result must not be nil&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;string.rep(&#39;[#~%w%._%-&amp;gt;!]*&#39;, 4, &#39;%s*&#39;)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.sources.treesitter.valid_types:&lt;/code&gt; &lt;code&gt;string[]&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A list of treesitter node types to include in the results&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;array&#39;,&#xA;  &#39;boolean&#39;,&#xA;  &#39;break_statement&#39;,&#xA;  &#39;call&#39;,&#xA;  &#39;case_statement&#39;,&#xA;  &#39;class&#39;,&#xA;  &#39;constant&#39;,&#xA;  &#39;constructor&#39;,&#xA;  &#39;continue_statement&#39;,&#xA;  &#39;delete&#39;,&#xA;  &#39;do_statement&#39;,&#xA;  &#39;enum&#39;,&#xA;  &#39;enum_member&#39;,&#xA;  &#39;event&#39;,&#xA;  &#39;for_statement&#39;,&#xA;  &#39;function&#39;,&#xA;  &#39;if_statement&#39;,&#xA;  &#39;interface&#39;,&#xA;  &#39;keyword&#39;,&#xA;  &#39;list&#39;,&#xA;  &#39;macro&#39;,&#xA;  &#39;method&#39;,&#xA;  &#39;module&#39;,&#xA;  &#39;namespace&#39;,&#xA;  &#39;null&#39;,&#xA;  &#39;number&#39;,&#xA;  &#39;operator&#39;,&#xA;  &#39;package&#39;,&#xA;  &#39;property&#39;,&#xA;  &#39;reference&#39;,&#xA;  &#39;repeat&#39;,&#xA;  &#39;scope&#39;,&#xA;  &#39;specifier&#39;,&#xA;  &#39;string&#39;,&#xA;  &#39;struct&#39;,&#xA;  &#39;switch_statement&#39;,&#xA;  &#39;type&#39;,&#xA;  &#39;type_parameter&#39;,&#xA;  &#39;unit&#39;,&#xA;  &#39;value&#39;,&#xA;  &#39;variable&#39;,&#xA;  &#39;while_statement&#39;,&#xA;  &#39;declaration&#39;,&#xA;  &#39;field&#39;,&#xA;  &#39;identifier&#39;,&#xA;  &#39;object&#39;,&#xA;  &#39;statement&#39;,&#xA;  &#39;text&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;LSP&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.sources.lsp.request.ttl_init&lt;/code&gt;: &lt;code&gt;number&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Number of times to retry a request before giving up&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;60&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.sources.lsp.request.interval&lt;/code&gt;: &lt;code&gt;number&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Number of milliseconds to wait between retries&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;1000&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Markdown&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;opts.sources.markdown.parse.look_ahead&lt;/code&gt;: &lt;code&gt;number&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Number of lines to update when cursor moves out of the parsed range&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;200&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar.nvim&lt;/code&gt; exposes a few functions in &lt;code&gt;lua/dropbar/api.lua&lt;/code&gt; that can be used to interact with the winbar or the drop-down menu:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_dropbar(buf: integer, win: integer): dropbar_t?&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get the dropbar associated with the given buffer and window&lt;/li&gt; &#xA;   &lt;li&gt;For more information about the &lt;code&gt;dropbar_t&lt;/code&gt; type, see &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_t&#34;&gt;&lt;code&gt;dropbar_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_current_dropbar(): dropbar_t?&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get the dropbar associated with the current buffer and window&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_dropbar_menu(win: integer): dropbar_menu_t?&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get the drop-down menu associated with the given window&lt;/li&gt; &#xA;   &lt;li&gt;For more information about the &lt;code&gt;dropbar_menu_t&lt;/code&gt; type, see &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_t&#34;&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_current_dropbr_menu(): dropbar_menu_t?&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Get the drop-down menu associated with the current window&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;goto_context_start(count: integer?)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Move the cursor to the start of the current context&lt;/li&gt; &#xA;   &lt;li&gt;If &lt;code&gt;count&lt;/code&gt; is 0 or &lt;code&gt;nil&lt;/code&gt;, go to the start of current context, or the start at previous context if cursor is already at the start of current context&lt;/li&gt; &#xA;   &lt;li&gt;If &lt;code&gt;count&lt;/code&gt; is positive, goto the start of &lt;code&gt;count&lt;/code&gt; previous context&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;select_next_context()&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open the menu of current context to select the next context&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pick(idx: integer?)&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Pick a component from current winbar&lt;/li&gt; &#xA;   &lt;li&gt;If &lt;code&gt;idx&lt;/code&gt; is &lt;code&gt;nil&lt;/code&gt;, enter interactive pick mode to select a component&lt;/li&gt; &#xA;   &lt;li&gt;If &lt;code&gt;idx&lt;/code&gt; is a number, directly pick the component at that index if it exists&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar.nvim&lt;/code&gt; defines the following highlight groups that, override them in your colorscheme to change the appearance of the drop-down menu, the names should be self-explanatory:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Highlight groups&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight group&lt;/th&gt; &#xA;    &lt;th&gt;Attributes&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindArray&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Array&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindBoolean&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Boolean&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindBreakStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Error&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindCall&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Function&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindCaseStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Conditional&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindClass&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindClass&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindConstant&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Constant&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindConstructor&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindConstructor&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindContinueStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Repeat&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindDeclaration&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindSnippet&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindDelete&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Error&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindDoStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Repeat&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindElseStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Conditional&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindEnum&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindEnum&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindEnumMember&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindEnumMember&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindEvent&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindEvent&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindField&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindField&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindFile&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;NormalFloat&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindFolder&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Directory&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindForStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Repeat&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindFunction&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Function&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindIdentifier&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindVariable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindIfStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Conditional&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindInterface&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindInterface&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindKeyword&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Keyword&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindList&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;SpecialChar&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindMacro&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Macro&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindMarkdownH1&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;markdownH1&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindMarkdownH2&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;markdownH2&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindMarkdownH3&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;markdownH3&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindMarkdownH4&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;markdownH4&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindMarkdownH5&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;markdownH5&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindMarkdownH6&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;markdownH6&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindMethod&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindMethod&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindModule&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindModule&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindNamespace&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;NameSpace&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindNull&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Constant&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindNumber&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Number&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindObject&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Statement&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindOperator&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Operator&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindPackage&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindModule&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindProperty&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindProperty&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindReference&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindReference&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindRepeat&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Repeat&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindScope&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;NameSpace&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindSpecifier&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Specifier&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Statement&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindString&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;String&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindStruct&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindStruct&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindSwitchStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Conditional&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindType&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindClass&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindTypeParameter&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindTypeParameter&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindUnit&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindUnit&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindValue&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Number&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindVariable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;CmpItemKindVariable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconKindWhileStatement&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Repeat&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconUIIndicator&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;SpecialChar&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconUIPickPivot&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;Error&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconUISeparator&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;SpecialChar&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarIconUISeparatorMenu&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;DropBarIconUISeparator&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DropBarMenuCurrentContext&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ link = &#39;PmenuSel&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;h3&gt;Architecture&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                    ┌──────────────────┐&#xA;                                    │winbar at win 1000│ {k}th symbol clicked&#xA;                                    │ contaning buf 1  ├──────────────────────┐&#xA;                                    └───────┬─▲────────┘                      │&#xA;                                            ▼ │                               │&#xA;                                _G.dropbar.get_dropbar_str()                  │&#xA;                                            │ ▲                               │&#xA;┌──────────────┐                     ┌──────▼─┴──────┐                        │&#xA;│sources       │                     │_G.dropbar.bars│                        │&#xA;│ ┌───┐        │                     └──────┬─▲──────┘                        │&#xA;│ │lsp│        │                 ┌───────┬──▼─┴──┬───────┐                    │&#xA;│ └───┘        │               ┌─▼─┐   ┌─┴─┐   ┌─┴─┐    ...                   │&#xA;│ ┌──────────┐ │               │[1]│   │[2]│   │[3]│                          │&#xA;│ │treesitter│ │               └─┬─┘   └─┬─┘   └─┬─┘                          │&#xA;│ └──────────┘ │                 │      ...     ...                           │&#xA;│  ...         │                 └──┬─▲─────────────┬──────┐                  │&#xA;└─────┬─▲──────┘                  ┌─▼─┴──┐       ┌──┴───┐ ...                 │&#xA;      │ │                         │[1000]│       │[1015]│                     │&#xA;      │ │                         └─┬─▲──┘       └──────┘                     │&#xA;      │ │              __tostring() │ │ return string cache                   │&#xA;      │ │                       ┌───▼─┴───┐                    ┌──────────────▼──────────────┐&#xA;      │ │                       │dropbar_t├────────────────────▶_G.dropbar.on_click_callbacks│&#xA;      │ │    On update events   └───┬─▲───┘  register symbol   └──────────────┬──────────────┘&#xA;      │ │ get_symbols(1, &amp;lt;cursor&amp;gt;)  │ │    on_click() callbacks               │&#xA;      │ └───────────────────────────┘ │                       ┌──────────┬────▼─────┬─────────┐&#xA;      └───────────────────────────────┘                   ┌───▼────┐ ┌───┴────┐ ┌───┴────┐   ...&#xA;  each source returns dropbar_symbol_t[]                  │[&#39;buf1&#39;]│ │[&#39;buf2&#39;]│ │[&#39;buf3&#39;]│&#xA; dropbar_t adds symbols as its components                 └───┬────┘ └───┬────┘ └───┬────┘&#xA;      dropbar_t flushes string cache                          │         ...        ...&#xA;                                                              └────────┬───────────────┬─────────┐&#xA;                                                                 ┌─────▼─────┐   ┌─────┴─────┐  ...&#xA;                                                                 │[&#39;win1000&#39;]│   │[&#39;win1015&#39;]│&#xA;                                                                 └─────┬─────┘   └─────┬─────┘&#xA;                                                                       │              ...&#xA;                                                        ┌─────────┬────▼────┬─────────┐&#xA;                                                    ┌───┴───┐    ...   ┌────┴────┐   ...&#xA;                                                    │[&#39;fn1&#39;]│          │[&#39;fn{k}&#39;]│&#xA;                                                    └───────┘          └────┬────┘&#xA;                                                                            ▼&#xA;                                            invoke _G.dropbar.bars[1][1000].components[k]:on_click()&#xA;                                                                            │&#xA;                                                                            ▼&#xA;                                                           open drop-down menu, goto symbol, etc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Classes&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;dropbar_t&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Declared and defined in &lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/bar.lua&#34;&gt;&lt;code&gt;lua/dropbar/bar.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_t&lt;/code&gt; is a class that represents a winbar.&lt;/p&gt; &#xA;&lt;p&gt;It gets symbols&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t[]&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; from sources&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_source_t&#34;&gt;&lt;code&gt;dropbar_source_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; and renders them to a string. It is also responsible for registering &lt;code&gt;on_click&lt;/code&gt; callbacks of each symbol in the global table &lt;code&gt;_G.dropbar.on_click_callbacks&lt;/code&gt; so that nvim knows which function to call when a symbol is clicked.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_t&lt;/code&gt; has the following fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the buffer the dropbar is attached to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;win&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the window the dropbar is attached to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sources&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_source_t&#34;&gt;&lt;code&gt;dropbar_source_t[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;sources&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_source_t&#34;&gt;&lt;code&gt;dropbar_source_t[]&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; that provide symbols to the dropbar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;separator&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;separator&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; between symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{left: integer, right: integer}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;padding to use between the winbar and the window border&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;extends&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;symbol&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; to use when a symbol is truncated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;components&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;symbols&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t[]&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; to render&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;string_cache&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string cache of the dropbar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;in_pick_mode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;whether the dropbar is in pick mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_t&lt;/code&gt; has the following methods:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:new(opts: dropbar_opts_t): dropbar_t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;constructor of &lt;code&gt;dropbar_t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:del()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;destructor of &lt;code&gt;dropbar_t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:displaywidth(): integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns the display width of the dropbar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:truncate()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;truncates the dropbar if it exceeds the display width &lt;br&gt; *side effect: changes dropbar components&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t[]&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:cat(plain: boolean?): string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;concatenates the dropbar components into a string with substrings for highlights and click support if &lt;code&gt;plain&lt;/code&gt; is not set; else returns a plain string without substrings for highlights and click support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:redraw()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;redraws the dropbar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:update()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;update dropbar components&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t[]&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; and redraw the dropbar afterwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:pick_mode_wrap(fn: fun(): T?): T?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;executes &lt;code&gt;fn&lt;/code&gt; in pick mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:pick(idx: integer?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;pick a component from dropbar in interactive pick mode if &lt;code&gt;idx&lt;/code&gt; is not given; else pick the &lt;code&gt;idx&lt;/code&gt;th component directly&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_t:__tostring(): string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;meta method to convert &lt;code&gt;dropbar_t&lt;/code&gt; to its string representation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Declared and defined in &lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/bar.lua&#34;&gt;&lt;code&gt;lua/dropbar/bar.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt; is a class that represents a symbol in a dropbar. It is the basic element of &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_t&#34;&gt;&lt;code&gt;dropbar_t&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_entry_t&#34;&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt; has the following fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;name of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;icon of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name_hl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;highlight of the name of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icon_hl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;highlight of the icon of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bar&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_t&#34;&gt;&lt;code&gt;dropbar_t?&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the dropbar&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_t&#34;&gt;&lt;code&gt;dropbar_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; the symbol belongs to, if the symbol is shown inside a winbar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;menu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_t&#34;&gt;&lt;code&gt;dropbar_menu_t?&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;menu&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_t&#34;&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; associated with the symbol, if the symbol is shown inside a winbar&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_entry_t&#34;&gt;&lt;code&gt;dropbar_menu_entry_t?&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the dropbar menu entry&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_entry_t&#34;&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; the symbol belongs to, if the symbol is shown inside a menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;symbol&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_tree_t&#34;&gt;&lt;code&gt;dropbar_symbol_tree_t?&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the dropbar tree symbol&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_tree_t&#34;&gt;&lt;code&gt;dropbar_symbol_tree_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; associated with the dropbar symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;data&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;any extra data associated with the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;bar_idx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;index of the symbol in the dropbar&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_t&#34;&gt;&lt;code&gt;dropbar_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;entry_idx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;index of the symbol in the menu entry&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_entry_t&#34;&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;on_click&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fun(this: dropbar_symbol_t, min_width: integer?, n_clicks: integer?, button: string?, modifiers: string?)|false?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;callback to invoke when the symbol is clicked, force disable &lt;code&gt;on_click&lt;/code&gt; when the value if set to &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt; has the following methods:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_t:new(opts: dropbar_symbol_t?): dropbar_symbol_t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;constructor of &lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_t:del()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;destructor of &lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_t:cat(plain: boolean?): string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;concatenates the symbol into a string with substrings for highlights and click support if &lt;code&gt;plain&lt;/code&gt; is not set; else returns a plain string without substrings for highlights and click support&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_t:displaywidth(): integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns the display width of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_t:bytewidth(): integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns the byte width of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_t:goto_start()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;moves the cursor to the start of the range of the dropbar tree symbol&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_tree_t&#34;&gt;&lt;code&gt;dropbar_symbol_tree_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; associated with the dropbar symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_t:swap_field(field: string, new_val: any)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;temporarily change the content of a dropbar symbol &lt;br&gt; *does not support replacing nil values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_t:restore()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;restore the content of a dropbar symbol after &lt;code&gt;dropbar_symbol_t:swap_field()&lt;/code&gt; is called &lt;br&gt; *does not support restoring nil values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;dropbar_symbol_tree_t&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Declared in &lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/sources/utils.lua&#34;&gt;&lt;code&gt;lua/dropbar/sources/utils.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_symbol_tree_t&lt;/code&gt; is a class that represents a tree structure in a dropbar.&lt;/p&gt; &#xA;&lt;p&gt;The main purpose of this class is to provide a common structure for symbols got from different sources, so that it is more convenient to convert them into &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt; that supports opening a drop-down menu on click.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                ┌─────────┐&#xA;                │file path├────┐&#xA;                └─────────┘    │&#xA;                   ┌──────┐    │&#xA;                   │TSNode├──┐ │&#xA;                   └──────┘  │ │&#xA;    ┌─────────────────────┐  │ │  ┌─────────────────────┐   ┌────────────────┐&#xA;    │lsp_document_symbol_t├──┼─┼──▶dropbar_symbol_tree_t├───▶dropbar_symbol_t│&#xA;    └─────────────────────┘  │ │  └──────────┬──────────┘   └────────────────┘&#xA; ┌────────────────────────┐  │ │             │&#xA; │lsp_symbol_information_t├──┘ │  provides a unified interface&#xA; └────────────────────────┘    │  to get the children, siblings,&#xA;┌─────────────────────────┐    │  range, or other information&#xA;│markdown_heading_symbol_t├────┘  used to generate a drop-down menu&#xA;└─────────────────────────┘       on click&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A &lt;code&gt;dropbar_symbol_tree_t&lt;/code&gt; instance should have the following fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;name of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;kind&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;kind/type of the symbol, used to determine the icon used for the symbol when it is converted to &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;children&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_tree_t[]?&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;children of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;siblings&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_tree_t[]?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;siblings of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;indtex of the symbol in its siblings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;range&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_symbol_range_t?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;range of the symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;data&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;any extra data associated with the tree symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;where &lt;code&gt;dropbar_symbol_range_t&lt;/code&gt; is a table with the following fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;start&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ line: integer, character: integer }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;start of the range, 0-indexed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ line: integer, character: integer }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;end of the range, 0-indexed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Declared and defined in &lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/menu.lua&#34;&gt;&lt;code&gt;lua/dropbar/menu.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt; is a class that represents a drop-down menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt; has the following fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;buf&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;buffer number of the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;win&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;window id of the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;is_opened&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;whether the menu is currently opened&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;entries&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_entry_t&#34;&gt;&lt;code&gt;dropbar_menu_entry_t[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;entries in the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;win_configs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;window configuration, value can be a function, see &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#menu&#34;&gt;menu configuration options&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;_win_configs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;table?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;evaluated window configuration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cursor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer[]?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;initial cursor position&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;prev_win&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;previous window, assigned when calling new() or automatically determined in open()&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sub_menu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;submenu, assigned when calling new() or automatically determined when a new menu opens&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;parent_menu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;parent menu, assigned when calling new() or automatically determined in open()&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clicked_at&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer[]?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;last position where the menu was clicked&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt; has the following methods:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:new(opts: dropbar_menu_opts_t?): dropbar_menu_t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;constructor of &lt;code&gt;dropbar_menu_t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:del()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;destructor of &lt;code&gt;dropbar_menu_t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:eval_win_config()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;evaluate window configuration and store the result in &lt;code&gt;_win_configs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:get_component_at(pos: integer[]): dropbar_symbol_t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;get the component&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; at position &lt;code&gt;pos&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:click_at(pos: integer[], min_width: integer?, n_clicks: integer?, button: string?, modifiers: string?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;simulate a click at &lt;code&gt;pos&lt;/code&gt; in the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:click_on(symbol: dropbar_symbol_t, min_width: integer?, n_clicks: integer?, button: string?, modifiers: string?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;simulate a click at the component &lt;code&gt;symbol&lt;/code&gt;&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; of the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:hl_line_range(line: integer, hl_info: dropbar_menu_hl_info_t)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;add highlight to a range in the menu buffer according to the line number and the highlight info&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_hl_info_t&#34;&gt;&lt;code&gt;dropbar_menu_hl_info_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:hl_line_single(line: integer, hlgroup: string?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;add highlight to a single line in the menu buffer; &lt;code&gt;hlgroups&lt;/code&gt; defaults to &lt;code&gt;&#39;DropBarMenuCurrentContext&#39;&lt;/code&gt;&lt;br&gt; *all other highlights added by this functions before will be cleared&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:make_buf()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;create the menu buffer from the entries&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_entry_t&#34;&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:open()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;open the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:close()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;close the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_t:toggle()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;toggle the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Declared and defined in &lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/menu.lua&#34;&gt;&lt;code&gt;lua/dropbar/menu.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt; is a class that represents an entry (row) in a drop-down menu. A &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_t&#34;&gt;&lt;code&gt;dropbar_menu_t&lt;/code&gt;&lt;/a&gt; instance is made up of multiple &lt;code&gt;dropbar_menu_entry_t&lt;/code&gt; instances while a &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_entry_t&#34;&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/a&gt; instance can contain multiple &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt; instances.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt; has the following fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;separator&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;separator to use in the entry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{left: integer, right: integer}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;padding to use between the menu entry and the menu border&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;components&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t[]&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;components&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t[]&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; in the entry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;menu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_t&#34;&gt;&lt;code&gt;dropbar_menu_t?&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the menu the entry belongs to&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idx&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the index of the entry in the menu&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_menu_entry_t&lt;/code&gt; has the following methods:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_entry_t:new(opts: dropbar_menu_entry_t?): dropbar_menu_entry_t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;constructor of &lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_entry_t:del()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;destructor of &lt;code&gt;dropbar_menu_entry_t&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_entry_t:cat(): string, dropbar_menu_hl_info_t&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;concatenate the components into a string, returns the string and highlight info&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_menu_hl_info_t&#34;&gt;&lt;code&gt;dropbar_menu_hl_info_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_entry_t:displaywidth(): integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;calculate the display width of the entry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_entry_t:bytewidth(): integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;calculate the byte width of the entry&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dropbar_menu_entry_t:first_clickable(offset: integer?): dropbar_symbol_t?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;get the first clickable component&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; in the dropbar menu entry starting from &lt;code&gt;offset&lt;/code&gt;, which defaults to 0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;dropbar_menu_hl_info_t&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Declared and defined in &lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/menu.lua&#34;&gt;&lt;code&gt;lua/dropbar/menu.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_menu_hl_info_t&lt;/code&gt; is a class that represents a highlight range in a single line of a drop-down menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_menu_hl_info_t&lt;/code&gt; has the following fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;start&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;start column of the higlighted range&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;end&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;end column of the higlighted range&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hlgroup&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;highlight group to use for the range&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;namespace to use for the range, &lt;code&gt;nil&lt;/code&gt; if using default namespace&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;dropbar_source_t&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Declared in &lt;a href=&#34;https://github.com/Bekaboo/dropbar.nvim/raw/master/lua/dropbar/sources/init.lua&#34;&gt;&lt;code&gt;lua/dropbar/sources/init.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_source_t&lt;/code&gt; is a class that represents a source of a drop-down menu.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dropbar_source_t&lt;/code&gt; has the following field:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;get_symbols&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function(buf: integer, cursor: integer[]): dropbar_symbol_t[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;returns the symbols&lt;sub&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t[]&lt;/code&gt;&lt;/a&gt;&lt;/sub&gt; to show in the winbar given buffer number &lt;code&gt;buf&lt;/code&gt; and cursor position &lt;code&gt;cursor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Making a New Source&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_source_t&#34;&gt;&lt;code&gt;dropbar_source_t&lt;/code&gt;&lt;/a&gt; instance is just a table with &lt;code&gt;get_symbols&lt;/code&gt; field set to a function that returns an array of &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#dropbar_symbol_t&#34;&gt;&lt;code&gt;dropbar_symbol_t&lt;/code&gt;&lt;/a&gt; instances given a buffer number and a cursor position.&lt;/p&gt; &#xA;&lt;p&gt;We have seen a simple example of a custom source in the &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#bar&#34;&gt;default config of &lt;code&gt;opts.bar.sources&lt;/code&gt;&lt;/a&gt; where the second source is set to a table with its field &lt;code&gt;get_symbols&lt;/code&gt; set to a function that gets symbols from either the markdown, LSP, or treesitter sources to achieve fall-back behavior.&lt;/p&gt; &#xA;&lt;p&gt;Here is another example of a custom source that will always return two symbols saying &#39;Hello&#39; and &#39;dropbar&#39; with highlights &lt;code&gt;&#39;hl-Keyword&#39;&lt;/code&gt; and &lt;code&gt;&#39;hl-Title&#39;&lt;/code&gt; and a smiling face shown in &lt;code&gt;&#39;hl-WarningMsg&#39;&lt;/code&gt; the start of the first symbol; clicking on the first symbol will show a notification message saying &#39;Have you smiled today?&#39;, followed by the smiling face icon used in the in dropbar symbol:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local bar = require(&#39;dropbar.bar&#39;)&#xA;local custom_source = {&#xA;  get_symbols = function(_, _)&#xA;    return {&#xA;      bar.dropbar_symbol_t:new({&#xA;        icon = &#39; &#39;,&#xA;        icon_hl = &#39;WarningMsg&#39;,&#xA;        name = &#39;Hello&#39;,&#xA;        name_hl = &#39;Keyword&#39;,&#xA;        on_click = function(self)&#xA;          vim.notify(&#39;Have you smiled today? &#39; .. self.icon)&#xA;        end,&#xA;      }),&#xA;      bar.dropbar_symbol_t:new({&#xA;        name = &#39;dropbar&#39;,&#xA;        name_hl = &#39;Title&#39;,&#xA;      }),&#xA;    }&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add this source to &lt;a href=&#34;https://raw.githubusercontent.com/Bekaboo/dropbar.nvim/master/#bar&#34;&gt;&lt;code&gt;opts.bar.sources&lt;/code&gt;&lt;/a&gt; table to see it in action:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;dropbar&#39;).setup({&#xA;  bar = {&#xA;    sources = {&#xA;      custom_source,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SmiteshP/nvim-navic&#34;&gt;nvim-navic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Achimobil/FS22_BigDisplay</title>
    <updated>2023-06-01T01:40:54Z</updated>
    <id>tag:github.com,2023-06-01:/Achimobil/FS22_BigDisplay</id>
    <link href="https://github.com/Achimobil/FS22_BigDisplay" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FS22_BigDisplay&lt;/h1&gt; &#xA;&lt;p&gt;Meine Digital Displays die unperformant mit Debug Methoden den Inhalt anzeigen, weil Giants die sonderzeichen vergessen hat&lt;/p&gt; &#xA;&lt;h1&gt;General&lt;/h1&gt; &#xA;&lt;h2&gt;DE&lt;/h2&gt; &#xA;&lt;p&gt;Alles in meinen Mods darf weder komplett noch in Teilen in eigene Mods kopiert oder in irgendeiner anderen Form weiterveröffentlicht werden, es sei denn es wird ausdrücklich erlaubt. Dies ist internationales Recht und wird durch das Urheberrecht abgedeckt. Wer trotzdem ohne Erlaubnis Teile von meinen Mods in seine Mods einbaut und veröffentlicht, gibt automatisch seine Mods zur uneingeschränkten Verwendung und Wiederveröffentlichung für mich frei. Ich behalte mir vor, von diesem Recht gebrauch zu machen. Das Einstellen meiner Mods auf anderen Downloadportalen ist nur mit dem jeweils auf das GitHub verweisenden Link erlaubt. Jegliche Form des Selbsthostings ist untersagt.&lt;/p&gt; &#xA;&lt;h2&gt;EN&lt;/h2&gt; &#xA;&lt;p&gt;Everything in my mods may not be copied in whole or in part into your own mods or republished in any other form, unless it is expressly permitted. This is international law and is covered by copyright law. Anyone who nevertheless incorporates parts of my mods into their mods and publishes them without permission automatically releases their mods for unrestricted use and republication for me. I reserve the right to make use of this right. Posting my mods on other download portals is only allowed with the link pointing to the GitHub. Any form of self-hosting is prohibited&lt;/p&gt;</summary>
  </entry>
</feed>