<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-05T01:33:44Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Cortex-Network/Darkmass-Data-Mining</title>
    <updated>2023-01-05T01:33:44Z</updated>
    <id>tag:github.com,2023-01-05:/Cortex-Network/Darkmass-Data-Mining</id>
    <link href="https://github.com/Cortex-Network/Darkmass-Data-Mining" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Data mining output for Darkmass 40k&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Darkmass-Data-Mining&lt;/h1&gt; &#xA;&lt;p&gt;Data mining output for Darkmass 40k&lt;/p&gt; &#xA;&lt;p&gt;If you want to get involved and help out please join here: &lt;a href=&#34;https://discord.gg/ZUeCNvjTDy&#34;&gt;https://discord.gg/ZUeCNvjTDy&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Website is live at &lt;a href=&#34;https://darkmass.gg&#34;&gt;https://darkmass.gg&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stevearc/oil.nvim</title>
    <updated>2023-01-05T01:33:44Z</updated>
    <id>tag:github.com,2023-01-05:/stevearc/oil.nvim</id>
    <link href="https://github.com/stevearc/oil.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim file explorer: edit your filesystem like a buffer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;oil.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt; like file explorer that lets you edit your filesystem like a normal Neovim buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/506791/209727111-6b4a11f4-634a-4efa-9461-80e9717cea94.mp4&#34;&gt;https://user-images.githubusercontent.com/506791/209727111-6b4a11f4-634a-4efa-9461-80e9717cea94.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#adapters&#34;&gt;Adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/oil.nvim/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+&lt;/li&gt; &#xA; &lt;li&gt;(optional) &lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; for file icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;oil.nvim supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function()&#xA;    use {&#xA;      &#39;stevearc/oil.nvim&#39;,&#xA;      config = function() require(&#39;oil&#39;).setup() end&#xA;    }&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    {&#39;stevearc/oil.nvim&#39;};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/oil.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/oil.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/oil.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/oil.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/oil/start/oil.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Add the following to your init.lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;oil&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then open a directory with &lt;code&gt;nvim .&lt;/code&gt;. Use &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; to open a file/directory, and &lt;code&gt;-&lt;/code&gt; to go up a directory. Otherwise, just treat it like a normal buffer and make changes as you like. Remember to &lt;code&gt;:w&lt;/code&gt; when you&#39;re done to actually perform the actions.&lt;/p&gt; &#xA;&lt;p&gt;If you want to mimic the &lt;code&gt;vim-vinegar&lt;/code&gt; method of navigating to the parent directory of a file, add this keymap:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;-&#34;, require(&#34;oil&#34;).open, { desc = &#34;Open parent directory&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can open a directory with &lt;code&gt;:edit &amp;lt;path&amp;gt;&lt;/code&gt; or &lt;code&gt;:Oil &amp;lt;path&amp;gt;&lt;/code&gt;. To open oil in a floating window, do &lt;code&gt;:Oil --float &amp;lt;path&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;oil&#34;).setup({&#xA;  -- Id is automatically added at the beginning, and name at the end&#xA;  -- See :help oil-columns&#xA;  columns = {&#xA;    &#34;icon&#34;,&#xA;    -- &#34;permissions&#34;,&#xA;    -- &#34;size&#34;,&#xA;    -- &#34;mtime&#34;,&#xA;  },&#xA;  -- Window-local options to use for oil buffers&#xA;  win_options = {&#xA;    wrap = false,&#xA;    signcolumn = &#34;no&#34;,&#xA;    cursorcolumn = false,&#xA;    foldcolumn = &#34;0&#34;,&#xA;    spell = false,&#xA;    list = false,&#xA;    conceallevel = 3,&#xA;    concealcursor = &#34;n&#34;,&#xA;  },&#xA;  -- Restore window options to previous values when leaving an oil buffer&#xA;  restore_win_options = true,&#xA;  -- Skip the confirmation popup for simple operations&#xA;  skip_confirm_for_simple_edits = false,&#xA;  -- Keymaps in oil buffer. Can be any value that `vim.keymap.set` accepts OR a table of keymap&#xA;  -- options with a `callback` (e.g. { callback = function() ... end, desc = &#34;&#34;, nowait = true })&#xA;  -- Additionally, if it is a string that matches &#34;action.&amp;lt;name&amp;gt;&#34;,&#xA;  -- it will use the mapping at require(&#34;oil.action&#34;).&amp;lt;name&amp;gt;&#xA;  -- Set to `false` to remove a keymap&#xA;  keymaps = {&#xA;    [&#34;g?&#34;] = &#34;actions.show_help&#34;,&#xA;    [&#34;&amp;lt;CR&amp;gt;&#34;] = &#34;actions.select&#34;,&#xA;    [&#34;&amp;lt;C-s&amp;gt;&#34;] = &#34;actions.select_vsplit&#34;,&#xA;    [&#34;&amp;lt;C-h&amp;gt;&#34;] = &#34;actions.select_split&#34;,&#xA;    [&#34;&amp;lt;C-p&amp;gt;&#34;] = &#34;actions.preview&#34;,&#xA;    [&#34;&amp;lt;C-c&amp;gt;&#34;] = &#34;actions.close&#34;,&#xA;    [&#34;&amp;lt;C-l&amp;gt;&#34;] = &#34;actions.refresh&#34;,&#xA;    [&#34;-&#34;] = &#34;actions.parent&#34;,&#xA;    [&#34;_&#34;] = &#34;actions.open_cwd&#34;,&#xA;    [&#34;`&#34;] = &#34;actions.cd&#34;,&#xA;    [&#34;~&#34;] = &#34;actions.tcd&#34;,&#xA;    [&#34;g.&#34;] = &#34;actions.toggle_hidden&#34;,&#xA;  },&#xA;  view_options = {&#xA;    -- Show files and directories that start with &#34;.&#34;&#xA;    show_hidden = false,&#xA;  },&#xA;  -- Configuration for the floating window in oil.open_float&#xA;  float = {&#xA;    -- Padding around the floating window&#xA;    padding = 2,&#xA;    max_width = 0,&#xA;    max_height = 0,&#xA;    border = &#34;rounded&#34;,&#xA;    win_options = {&#xA;      winblend = 10,&#xA;    },&#xA;  },&#xA;  adapters = {&#xA;    [&#34;oil://&#34;] = &#34;files&#34;,&#xA;    [&#34;oil-ssh://&#34;] = &#34;ssh&#34;,&#xA;  },&#xA;  -- When opening the parent of a file, substitute these url schemes&#xA;  remap_schemes = {&#xA;    [&#34;scp://&#34;] = &#34;oil-ssh://&#34;,&#xA;    [&#34;sftp://&#34;] = &#34;oil-ssh://&#34;,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adapters&lt;/h2&gt; &#xA;&lt;p&gt;Oil does all of its filesystem interaction through an &lt;em&gt;adapter&lt;/em&gt; abstraction. In practice, this means that oil can be used to view and modify files in more places than just the local filesystem, so long as the destination has an adapter implementation.&lt;/p&gt; &#xA;&lt;p&gt;Note that file operations work &lt;em&gt;across adapters&lt;/em&gt;. This means that you can use oil to copy files to/from a remote server using the ssh adapter just as easily as you can copy files from one directory to another on your local machine.&lt;/p&gt; &#xA;&lt;h3&gt;SSH&lt;/h3&gt; &#xA;&lt;p&gt;This adapter allows you to browse files over ssh, much like netrw. To use it, simply open a buffer using the following name template:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvim oil-ssh://[username@]hostname[:port]/[path]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should look familiar. In fact, if you replace &lt;code&gt;oil-ssh://&lt;/code&gt; with &lt;code&gt;sftp://&lt;/code&gt;, this is the exact same url format that netrw uses.&lt;/p&gt; &#xA;&lt;p&gt;While this adapter effectively replaces netrw for directory browsing, it still relies on netrw for file editing. When you open a file from oil, it will use the &lt;code&gt;scp://host/path/to/file.txt&lt;/code&gt; format that triggers remote editing via netrw.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;!-- API --&gt; &#xA;&lt;h3&gt;get_entry_on_line(bufnr, lnum)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_entry_on_line(bufnr, lnum): nil|oil.Entry&lt;/code&gt; &lt;br&gt; Get the entry on a specific line (1-indexed)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lnum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;get_cursor_entry()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_cursor_entry(): nil|oil.Entry&lt;/code&gt; &lt;br&gt; Get the entry currently under the cursor&lt;/p&gt; &#xA;&lt;h3&gt;discard_all_changes()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;discard_all_changes()&lt;/code&gt; &lt;br&gt; Discard all changes made to oil buffers&lt;/p&gt; &#xA;&lt;h3&gt;set_columns(cols)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;set_columns(cols)&lt;/code&gt; &lt;br&gt; Change the display columns for oil&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cols&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;oil.ColumnSpec[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;get_current_dir()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_current_dir(): nil|string&lt;/code&gt; &lt;br&gt; Get the current directory&lt;/p&gt; &#xA;&lt;h3&gt;open_float(dir)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;open_float(dir)&lt;/code&gt; &lt;br&gt; Open oil browser in a floating window&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When nil, open the parent of the current buffer, or the cwd if current buffer is not a file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;open(dir)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;open(dir)&lt;/code&gt; &lt;br&gt; Open oil browser for a directory&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When nil, open the parent of the current buffer, or the cwd if current buffer is not a file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;close()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;close()&lt;/code&gt; &lt;br&gt; Restore the buffer that was present when oil was opened&lt;/p&gt; &#xA;&lt;h3&gt;select(opts)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;select(opts)&lt;/code&gt; &lt;br&gt; Select the entry under the cursor&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;vertical&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the buffer in a vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;horizontal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the buffer in a horizontal split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;split&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;aboveleft&#34;|&#34;belowright&#34;|&#34;topleft&#34;|&#34;botright&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Split modifier&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;preview&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the buffer in a preview window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;save(opts)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;save(opts)&lt;/code&gt; &lt;br&gt; Save all changes&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;confirm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show confirmation when true, never when false, respect skip_confirm_for_simple_edits if nil&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;setup(opts)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;setup(opts)&lt;/code&gt; &lt;br&gt; Initialize oil&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- /API --&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why &#34;oil&#34;&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; From the &lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt; README, a quote by Drew Neil:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Split windows and the project drawer go together like oil and vinegar&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Vinegar was taken. Let&#39;s be oil. Plus, I think it&#39;s pretty slick ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why would I want to use oil vs any other plugin?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You like to use a netrw-like view to browse directories (as opposed to a file tree)&lt;/li&gt; &#xA; &lt;li&gt;AND you want to be able to edit your filesystem like a buffer&lt;/li&gt; &#xA; &lt;li&gt;AND you want to perform cross-directory actions. AFAIK there is no other plugin that does this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you don&#39;t need those features specifically, check out the alternatives listed below&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: Why write another plugin yourself instead of adding functionality to one that already exists&lt;/strong&gt;?&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Because I am a &lt;em&gt;maniac control freak&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: What are some alternatives?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-vinegar&#34;&gt;vim-vinegar&lt;/a&gt;: The granddaddy. This made me fall in love with single-directory file browsing. I stopped using it when I encountered netrw bugs and performance issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Shougo/defx.nvim&#34;&gt;defx.nvim&lt;/a&gt;: What I switched to after vim-vinegar. Much more flexible and performant, but requires python and the API is a little hard to work with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/elihunter173/dirbuf.nvim&#34;&gt;dirbuf.nvim&lt;/a&gt;: The first plugin I encountered that let you edit the filesystem like a buffer. Never used it because it &lt;a href=&#34;https://github.com/elihunter173/dirbuf.nvim/issues/7&#34;&gt;can&#39;t do cross-directory edits&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tamago324/lir.nvim&#34;&gt;lir.nvim&lt;/a&gt;: What I used prior to writing this plugin. Similar to vim-vinegar, but with better Neovim integration (floating windows, lua API).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-dirvish&#34;&gt;vim-dirvish&lt;/a&gt;: Never personally used, but well-established, stable, simple directory browser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trapd00r/vidir&#34;&gt;vidir&lt;/a&gt;: Never personally used, but might be the first plugin to come up with the idea of editing a directory like a buffer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There&#39;s also file trees like &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;neo-tree&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree&lt;/a&gt;, but they&#39;re really a different category entirely.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Wikia/LuaCache</title>
    <updated>2023-01-05T01:33:44Z</updated>
    <id>tag:github.com,2023-01-05:/Wikia/LuaCache</id>
    <link href="https://github.com/Wikia/LuaCache" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LuaCache&lt;/h1&gt; &#xA;&lt;p&gt;This extension exposes MediaWiki&#39;s ObjectCache through a Lua interface.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the extension folder to extensions/LuaCache/&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the following line to LocalSettings.php:&lt;/p&gt; &lt;p&gt;wfLoadExtension( &#39;LuaCache&#39; );&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage Example&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Module:Demo&#xA;local p = {}&#xA;&#xA;local cache = require &#39;mw.ext.LuaCache&#39;&#xA;&#xA;function p.test(frame)&#xA;&#x9;local args = frame.args&#xA;&#x9;local keyPrefix = args[1] or &#39;sample&#39;&#xA;&#xA;&#x9;local sampleValue = {&#xA;&#x9;&#x9;hello = &#39;World&#39;,&#xA;&#x9;&#x9;name = &#39;Alyanah&#39;,&#xA;&#x9;&#x9;counter = 0&#xA;&#x9;}&#xA;&#xA;&#x9;local results = {}&#xA;&#xA;&#x9;local handleValue = function(r)&#xA;&#x9;&#x9;if r ~= nil then&#xA;&#x9;&#x9;&#x9;sampleValue.counter = (r.counter or 0) + 1&#xA;&#x9;&#x9;&#x9;table.insert(results, &#39;Hello: &#39; .. tostring(r.hello))&#xA;&#x9;&#x9;&#x9;table.insert(results, &#39;Name: &#39; .. tostring(r.name))&#xA;&#x9;&#x9;&#x9;table.insert(results, &#39;Counter: &#39; .. tostring(r.counter))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;table.insert(results, &#39;(nil)&#39;)&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#xA;&#x9;-- Get an item from the cache&#xA;&#x9;-- This will be nil the first time this function is run,&#xA;&#x9;-- and it will have a value afterwards for as long as the&#xA;&#x9;-- item remains in cache.&#xA;&#x9;local singleTestKey = keyPrefix .. &#39;.singleTest&#39;&#xA;&#x9;local res = cache.get(singleTestKey)&#xA;&#x9;table.insert(results, &#39;cache.get(\&#39;&#39; .. singleTestKey .. &#39;\&#39;)&#39;)&#xA;&#x9;handleValue(res)&#xA;&#xA;&#x9;-- Set an item in the cache&#xA;&#x9;res = cache.set(singleTestKey, sampleValue)&#xA;&#x9;table.insert(results, &#39;cache.set returned &#39; .. tostring(res))&#xA;&#xA;&#x9;-- Get the item from the cache again&#xA;&#x9;res = cache.get(singleTestKey)&#xA;&#x9;table.insert(results, &#39;cache.get(\&#39;&#39; .. singleTestKey .. &#39;\&#39;)&#39;)&#xA;&#x9;handleValue(res)&#xA;&#x9;table.insert(results, &#39;&#39;)&#xA;&#xA;&#x9;-- Set the item in the cache with a 30s expiration&#xA;&#x9;res = cache.set(singleTestKey, sampleValue, 30)&#xA;&#x9;table.insert(results, &#39;cache.set returned &#39; .. tostring(res))&#xA;&#xA;&#x9;-- Set multiple items in the cache&#xA;&#x9;res = cache.setMulti({&#xA;&#x9;&#x9;[keyPrefix .. &#39;.multiTest.1&#39;] = {&#xA;&#x9;&#x9;&#x9;when = &#39;now&#39;,&#xA;&#x9;&#x9;&#x9;what = &#39;불고기&#39;&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;[keyPrefix .. &#39;.multiTest.2&#39;] = {&#xA;&#x9;&#x9;&#x9;when = &#39;tomorrow&#39;,&#xA;&#x9;&#x9;&#x9;what = &#39;김치찌개&#39;&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;[keyPrefix .. &#39;.multiTest.3&#39;] = {&#xA;&#x9;&#x9;&#x9;when = &#39;yesterday&#39;,&#xA;&#x9;&#x9;&#x9;what = &#39;순두부찌개&#39;&#xA;&#x9;&#x9;}&#xA;&#x9;})&#xA;&#x9;table.insert(results, &#39;cache.setMulti returned &#39; .. tostring(res))&#xA;&#xA;&#x9;-- Get one of the items from the cache&#xA;&#x9;res = cache.get(keyPrefix .. &#39;.multiTest.2&#39;)&#xA;&#x9;if res then&#xA;&#x9;&#x9;table.insert(results, &#39;When: &#39; .. tostring(res.when))&#xA;&#x9;&#x9;table.insert(results, &#39;What: &#39; .. tostring(res.what))&#xA;&#x9;else&#xA;&#x9;&#x9;table.insert(results, &#39;(nil)&#39;)&#xA;&#x9;end&#xA;&#xA;&#x9;-- Delete one of the items from the cache&#xA;&#x9;res = cache.delete(keyPrefix .. &#39;.multiTest.2&#39;)&#xA;&#x9;table.insert(results, &#39;cache.delete returned &#39; .. tostring(res))&#xA;&#xA;&#x9;-- Get all of those items&#xA;&#x9;res = cache.getMulti({&#xA;&#x9;&#x9;keyPrefix .. &#39;.multiTest.1&#39;,&#xA;&#x9;&#x9;keyPrefix .. &#39;.multiTest.2&#39;,&#xA;&#x9;&#x9;keyPrefix .. &#39;.multiTest.3&#39;,&#xA;&#x9;})&#xA;&#x9;for k, v in pairs(res) do&#xA;&#x9;&#x9;table.insert(results, tostring(k) .. &#39; = &#39;)&#xA;&#x9;&#x9;if v and type(v) == &#39;table&#39; then&#xA;&#x9;&#x9;&#x9;table.insert(results, &#39;When: &#39; .. tostring(v.when))&#xA;&#x9;&#x9;&#x9;table.insert(results, &#39;What: &#39; .. tostring(v.what))&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;table.insert(results, tostring(v))&#xA;&#x9;&#x9;end&#xA;&#x9;end&#xA;&#xA;&#x9;-- Format the results as preformatted wikitext&#xA;&#x9;return &#39; &#39; .. table.concat(results, &#39;\n &#39;)&#xA;end&#xA;&#xA;return p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;{{#invoke:Demo|test}}&#xA;&#xA;  ==&amp;gt;&#xA;&#xA;cache.get(&#39;sample.singleTest&#39;)&#xA;(nil)&#xA;cache.set returned true&#xA;cache.get(&#39;sample.singleTest&#39;)&#xA;Hello: World&#xA;Name: Alyanah&#xA;Counter: 0&#xA;&#xA;cache.set returned true&#xA;cache.setMulti returned true&#xA;When: tomorrow&#xA;What: 김치찌개&#xA;cache.delete returned true&#xA;sample.multiTest.3 = &#xA;When: yesterday&#xA;What: 순두부찌개&#xA;sample.multiTest.1 = &#xA;When: now&#xA;What: 불고기&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>