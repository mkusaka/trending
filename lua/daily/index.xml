<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-12T01:33:07Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>s1n7ax/nvim-window-picker</title>
    <updated>2025-01-12T01:33:07Z</updated>
    <id>tag:github.com,2025-01-12:/s1n7ax/nvim-window-picker</id>
    <link href="https://github.com/s1n7ax/nvim-window-picker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This plugins prompts the user to pick a window and returns the window id of the picked window&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-window-picker&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;hint = &#39;floating-big-letter&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/s1n7ax/nvim-window-picker/assets/18459807/8a6a57e2-8be0-4385-88a9-f49c6a088627&#34;&gt;https://github.com/s1n7ax/nvim-window-picker/assets/18459807/8a6a57e2-8be0-4385-88a9-f49c6a088627&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;hint = &#39;statusline-winbar&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/s1n7ax/nvim-window-picker/assets/18459807/8d9a790b-cbcb-455d-8d74-97c55b3cc9b0&#34;&gt;https://github.com/s1n7ax/nvim-window-picker/assets/18459807/8d9a790b-cbcb-455d-8d74-97c55b3cc9b0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugins prompts the user to pick a window and returns the window id of the picked window.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;lazy&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;s1n7ax/nvim-window-picker&#39;,&#xA;    name = &#39;window-picker&#39;,&#xA;    event = &#39;VeryLazy&#39;,&#xA;    version = &#39;2.*&#39;,&#xA;    config = function()&#xA;        require&#39;window-picker&#39;.setup()&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;s1n7ax/nvim-window-picker&#39;,&#xA;    tag = &#39;v2.*&#39;,&#xA;    config = function()&#xA;        require&#39;window-picker&#39;.setup()&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local picked_window_id = require(&#39;window-picker&#39;).pick_window()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can put the picked window id to good use&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;If you want to have custom properties just for one time, you can pass any of following directly to &lt;code&gt;pick_window()&lt;/code&gt; function itself to override the default behaviour.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#39;window-picker&#39;.setup({&#xA;    -- type of hints you want to get&#xA;    -- following types are supported&#xA;    -- &#39;statusline-winbar&#39; | &#39;floating-big-letter&#39;&#xA;    -- &#39;statusline-winbar&#39; draw on &#39;statusline&#39; if possible, if not &#39;winbar&#39; will be&#xA;    -- &#39;floating-big-letter&#39; draw big letter on a floating window&#xA;    -- used&#xA;    hint = &#39;statusline-winbar&#39;,&#xA;&#xA;    -- when you go to window selection mode, status bar will show one of&#xA;    -- following letters on them so you can use that letter to select the window&#xA;    selection_chars = &#39;FJDKSLA;CMRUEIWOQP&#39;,&#xA;&#xA;    -- This section contains picker specific configurations&#xA;    picker_config = {&#xA;        statusline_winbar_picker = {&#xA;            -- You can change the display string in status bar.&#xA;            -- It supports &#39;%&#39; printf style. Such as `return char .. &#39;: %f&#39;` to display&#xA;            -- buffer file path. See :h &#39;stl&#39; for details.&#xA;            selection_display = function(char, windowid)&#xA;                return &#39;%=&#39; .. char .. &#39;%=&#39;&#xA;            end,&#xA;&#xA;            -- whether you want to use winbar instead of the statusline&#xA;            -- &#34;always&#34; means to always use winbar,&#xA;            -- &#34;never&#34; means to never use winbar&#xA;            -- &#34;smart&#34; means to use winbar if cmdheight=0 and statusline if cmdheight &amp;gt; 0&#xA;            use_winbar = &#39;never&#39;, -- &#34;always&#34; | &#34;never&#34; | &#34;smart&#34;&#xA;        },&#xA;&#xA;        floating_big_letter = {&#xA;            -- window picker plugin provides bunch of big letter fonts&#xA;            -- fonts will be lazy loaded as they are being requested&#xA;            -- additionally, user can pass in a table of fonts in to font&#xA;            -- property to use instead&#xA;&#xA;            font = &#39;ansi-shadow&#39;, -- ansi-shadow |&#xA;        },&#xA;    },&#xA;&#xA;    -- whether to show &#39;Pick window:&#39; prompt&#xA;    show_prompt = true,&#xA;&#xA;    -- prompt message to show to get the user input&#xA;    prompt_message = &#39;Pick window: &#39;,&#xA;&#xA;    -- if you want to manually filter out the windows, pass in a function that&#xA;    -- takes two parameters. You should return window ids that should be&#xA;    -- included in the selection&#xA;    -- EX:-&#xA;    -- function(window_ids, filters)&#xA;    --    -- folder the window_ids&#xA;    --    -- return only the ones you want to include&#xA;    --    return {1000, 1001}&#xA;    -- end&#xA;    filter_func = nil,&#xA;&#xA;    -- following filters are only applied when you are using the default filter&#xA;    -- defined by this plugin. If you pass in a function to &#34;filter_func&#34;&#xA;    -- property, you are on your own&#xA;    filter_rules = {&#xA;        -- when there is only one window available to pick from, use that window&#xA;        -- without prompting the user to select&#xA;        autoselect_one = true,&#xA;&#xA;        -- whether you want to include the window you are currently on to window&#xA;        -- selection or not&#xA;        include_current_win = false,&#xA;&#xA;        -- whether to include windows marked as unfocusable&#xA;        include_unfocusable_windows = false,&#xA;&#xA;        -- filter using buffer options&#xA;        bo = {&#xA;            -- if the file type is one of following, the window will be ignored&#xA;            filetype = { &#39;NvimTree&#39;, &#39;neo-tree&#39;, &#39;notify&#39;, &#39;snacks_notif&#39; },&#xA;&#xA;            -- if the file type is one of following, the window will be ignored&#xA;            buftype = { &#39;terminal&#39; },&#xA;        },&#xA;&#xA;        -- filter using window options&#xA;        wo = {},&#xA;&#xA;        -- if the file path contains one of following names, the window&#xA;        -- will be ignored&#xA;        file_path_contains = {},&#xA;&#xA;        -- if the file name contains one of following names, the window will be&#xA;        -- ignored&#xA;        file_name_contains = {},&#xA;    },&#xA;&#xA;    -- You can pass in the highlight name or a table of content to set as&#xA;    -- highlight&#xA;    highlights = {&#xA;        enabled = true,&#xA;        statusline = {&#xA;            focused = {&#xA;                fg = &#39;#ededed&#39;,&#xA;                bg = &#39;#e35e4f&#39;,&#xA;                bold = true,&#xA;            },&#xA;            unfocused = {&#xA;                fg = &#39;#ededed&#39;,&#xA;                bg = &#39;#44cc41&#39;,&#xA;                bold = true,&#xA;            },&#xA;        },&#xA;        winbar = {&#xA;            focused = {&#xA;                fg = &#39;#ededed&#39;,&#xA;                bg = &#39;#e35e4f&#39;,&#xA;                bold = true,&#xA;            },&#xA;            unfocused = {&#xA;                fg = &#39;#ededed&#39;,&#xA;                bg = &#39;#44cc41&#39;,&#xA;                bold = true,&#xA;            },&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;window-picker&#39;).pick_window({&#xA;    hint = &#39;floating-big-letter&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Theming&lt;/h2&gt; &#xA;&lt;p&gt;If you just want to define the colors using Neovim Highlights, then it&#39;s totally possible. You can set following highlights manually.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowPickerStatusLine&lt;/code&gt; (currently focused window statusline highlights)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowPickerStatusLineNC&lt;/code&gt; (currently unfocused window statusline highlights)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowPickerWinBar&lt;/code&gt; (currently focused window winbar highlights)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WindowPickerWinBarNC&lt;/code&gt; (currently unfocused window winbar highlights)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Breaking changes in v2.0.0&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Before&lt;/em&gt;: return value from &lt;code&gt;selection_display&lt;/code&gt; will be wrapped by &lt;code&gt;&#39;%=&#39;&lt;/code&gt; and &lt;code&gt;&#39;%=&#39;&lt;/code&gt; to fill the empty space of status line or winbar.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;After&lt;/em&gt;: return value of &lt;code&gt;selection_display&lt;/code&gt; will be passed directly to the status line or winbar. This allows all the customizations available from statusline syntax. You can check &lt;code&gt;:help statusline&lt;/code&gt; for more info.&lt;/p&gt;</summary>
  </entry>
</feed>