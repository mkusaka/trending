<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-24T01:41:52Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>doums/suit.nvim</title>
    <updated>2022-08-24T01:41:52Z</updated>
    <id>tag:github.com,2022-08-24:/doums/suit.nvim</id>
    <link href="https://github.com/doums/suit.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim plugin that replaces default input and select text prompts with nice floating windows&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;suit.nvim&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://neovim.io/&#34;&gt;neovim&lt;/a&gt; plugin that replaces the default &lt;code&gt;vim.ui.input&lt;/code&gt; and &lt;code&gt;vim.ui.select&lt;/code&gt; implementations with floating windows.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Use your plugin manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;paq&#39;)({&#xA;  -- ...&#xA;  &#39;doums/suit.nvim&#39;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;suit&#39;).setup({&#xA;  input = {&#xA;    -- default prompt value&#xA;    default_prompt = &#39;Input: &#39;,&#xA;    -- border of the window (see `:h nvim_open_win`)&#xA;    border = &#39;single&#39;,&#xA;    -- highlight group for input&#xA;    hl_input = &#39;NormalFloat&#39;,&#xA;    -- highlight group for prompt&#xA;    hl_prompt = &#39;NormalFloat&#39;,&#xA;    -- highlight group for window border&#xA;    hl_border = &#39;FloatBorder&#39;,&#xA;    -- input width (in addition to the default value)&#xA;    width = 20,&#xA;    -- override arguments passed to `nvim_open_win` (see `:h nvim_open_win`)&#xA;    nvim_float_api = nil,&#xA;  },&#xA;  select = {&#xA;    -- default prompt value&#xA;    default_prompt = &#39;Select one of: &#39;,&#xA;    -- border of the window (see `:h nvim_open_win`)&#xA;    border = &#39;single&#39;,&#xA;    -- highlight group for select list&#xA;    hl_select = &#39;NormalFloat&#39;,&#xA;    -- highlight group for prompt&#xA;    hl_prompt = &#39;NormalFloat&#39;,&#xA;    -- highlight group for current selected item&#xA;    hl_selected_item = &#39;PmenuSel&#39;,&#xA;    -- highlight group for window border&#xA;    hl_border = &#39;FloatBorder&#39;,&#xA;    -- override arguments passed to `nvim_open_win` (see `:h nvim_open_win`)&#xA;    nvim_float_api = nil,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All default configuration values are listed &lt;a href=&#34;https://github.com/doums/suit.nvim/raw/main/lua/suit/config.lua&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;Keymaps should be intuitive.&lt;/p&gt; &#xA;&lt;p&gt;For input:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; to confirm&lt;br&gt; &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; to cancel&lt;/p&gt; &#xA;&lt;p&gt;For select:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt; to confirm the selected item&lt;br&gt; &lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt;, &lt;code&gt;q&lt;/code&gt; to cancel&lt;br&gt; &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt;, &lt;code&gt;&amp;lt;up&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;down&amp;gt;&lt;/code&gt; to navigate&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Mozilla Public License 2.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>phaazon/mind.nvim</title>
    <updated>2022-08-24T01:41:52Z</updated>
    <id>tag:github.com,2022-08-24:/phaazon/mind.nvim</id>
    <link href="https://github.com/phaazon/mind.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The power of trees at your fingertips.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;mind.nvim&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/506592/185793543-e12baf93-8329-4e3b-96d2-da38547691ee.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/phaazon/mind.nvim?color=cyan&amp;amp;style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/phaazon/mind.nvim?color=green&amp;amp;style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/phaazon/mind.nvim?style=for-the-badge&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/tag/phaazon/mind.nvim?color=pink&amp;amp;label=release&amp;amp;style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#installation&#34;&gt;Install&lt;/a&gt; · &lt;a href=&#34;https://github.com/phaazon/mind.nvim/wiki&#34;&gt;Wiki&lt;/a&gt; · &lt;a href=&#34;https://github.com/phaazon/mind.nvim/wiki/Screenshots&#34;&gt;Screenshots&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This plugin is a new take on note taking and task workflows. The idea is derived from using several famous plugins, such as &lt;a href=&#34;https://orgmode.org/&#34;&gt;org-mode&lt;/a&gt; or even standalone applications, like &lt;a href=&#34;https://www.notion.so/&#34;&gt;Notion&lt;/a&gt;, and add new and interesting ideas.&lt;/p&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#important-note-about-versioning&#34;&gt;Important note about versioning&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#nightly-users&#34;&gt;Nightly users&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaazon/mind.nvim/master/#keybindings&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h1&gt;Motivation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mind&lt;/strong&gt; is an organizer tool for Neovim. It can be used to accomplish and implement a wide variety of workflows. It is designed to quickly add items in trees. &lt;em&gt;Why a tree?&lt;/em&gt; Well, list of things like TODO lists are great but they lack the organization part. Most of them can be gathered in “lists of lists” — you probably have that on your phone. A list of list is basically a tree. But editing and operating a list of list is annoying, so it’s better to have a tool that has the concept of a node and a tree as a primitive.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mind&lt;/strong&gt; trees can be used to implement workflows like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Journaling. Have a node for each day, which parent will be the month, which parent will be the year, etc.&lt;/li&gt; &#xA; &lt;li&gt;Note taking. You are in the middle of a meeting and you heard something important? Don’t write that in a Markdown document in your &lt;code&gt;~/documents&lt;/code&gt; that is probably alreaddy a mess: open your &lt;strong&gt;Mind&lt;/strong&gt; tree and add it there!&lt;/li&gt; &#xA; &lt;li&gt;“Personal wiki.” Because of the nature of a tree, it is convenient to organize your personal notes about your work services, other teams’ products, OKRs, blablabla by simply creating trees in trees!&lt;/li&gt; &#xA; &lt;li&gt;Task management. Why not having a tasks tree with three or four sub-trees for your backlog, on-going work, finished work and cancelled tasks? It’s all possible!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The possibilities are endless.&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mind&lt;/strong&gt; features two main concepts; global trees and local trees:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A global tree is a tree that is unique to your machine / computer. Opening your main &lt;strong&gt;Mind&lt;/strong&gt; tree from Neovim will always open and edit that tree. It’s basically your central place for your &lt;strong&gt;Mind&lt;/strong&gt; nodes.&lt;/li&gt; &#xA; &lt;li&gt;A local tree is a tree that is relative to a given directory. &lt;strong&gt;Mind&lt;/strong&gt; implements a &lt;code&gt;cwd&lt;/code&gt;-based local form of tree, so you can even share those trees with other people (as long as they use &lt;strong&gt;Mind&lt;/strong&gt; as well).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Atop of that, &lt;strong&gt;Mind&lt;/strong&gt; has the concept of “project” trees, which are either a global tree, or a local tree. A global project tree is stored at the same place as your main tree and the purpose of such a tree is to be opened only when your &lt;code&gt;cwd&lt;/code&gt; is the same as the tree, but you don’t want the tree to be in the actual &lt;code&gt;cwd&lt;/code&gt;. That can be the case if you work on a project where you don’t want to check the tree in Git or any versioning system.&lt;/p&gt; &#xA;&lt;p&gt;On the other side, a local project tree is what it means: it lives in the &lt;code&gt;cwd&lt;/code&gt;, under &lt;code&gt;.mind&lt;/code&gt;, basically.&lt;/p&gt; &#xA;&lt;p&gt;Besides that, &lt;strong&gt;Mind&lt;/strong&gt; allows you to manipulate trees and nodes. Feature set:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Everything is interactive and relies on the most recent features of Neovim, including &lt;code&gt;vim.ui.input&lt;/code&gt; and &lt;code&gt;vim.ui.select&lt;/code&gt;. Very few dependencies on other plugins, so you can customize the UI by using the plugins you love.&lt;/li&gt; &#xA; &lt;li&gt;Cursor-base interaction. Open a tree and start interacting with it! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Expand / collapse nodes.&lt;/li&gt; &#xA;   &lt;li&gt;Add a node to a tree by adding it before or after the current node, or by adding it inside the current node at the beginning or end of its chilren.&lt;/li&gt; &#xA;   &lt;li&gt;Rename the node under the cursor.&lt;/li&gt; &#xA;   &lt;li&gt;Change the icon of the node under the cursor.&lt;/li&gt; &#xA;   &lt;li&gt;Delete the node under the cursor with a confirmation input.&lt;/li&gt; &#xA;   &lt;li&gt;Select a node to perform further operations on it.&lt;/li&gt; &#xA;   &lt;li&gt;Move nodes around!&lt;/li&gt; &#xA;   &lt;li&gt;Select nodes by path! — e.g. &lt;code&gt;/Tasks/On-going/3345: do this&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports user keybindings via keymaps. Keymaps are namespaced keybindings. They keymaps are fixed and defined by &lt;strong&gt;Mind&lt;/strong&gt;, and users can decide what to put in them. For instance, you have the &lt;em&gt;default&lt;/em&gt; keymap for default navigation, &lt;em&gt;selection&lt;/em&gt; keymap for when a node is selected, etc. etc.&lt;/li&gt; &#xA; &lt;li&gt;Nodes are just text, icons and some metadata by default. You can however decide to associate them with a &lt;em&gt;data file&lt;/em&gt;, for which the type is user-defined (by default Markdown), or you can turn them into URL nodes.&lt;/li&gt; &#xA; &lt;li&gt;A data node will open its file when triggered.&lt;/li&gt; &#xA; &lt;li&gt;A URL node will open its link when triggered.&lt;/li&gt; &#xA; &lt;li&gt;A well documented Lua API to create your own automatic workflow that don’t require user interaction!&lt;/li&gt; &#xA; &lt;li&gt;More to come!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;p&gt;This section will guide you through the list of steps you must take to be able to get started with &lt;strong&gt;Mind&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin was written against Neovim 0.8, which is currently a nightly version. This plugin &lt;em&gt;might&lt;/em&gt; not work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With a version of Neovim before 0.8.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this to your Lua code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;mind&#39;.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get a default experience. Feel free to customize later the &lt;code&gt;setup&lt;/code&gt; invocation (&lt;code&gt;:h mind.setup&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Important note about versioning&lt;/h3&gt; &#xA;&lt;p&gt;This plugin implements &lt;a href=&#34;https://semver.org&#34;&gt;SemVer&lt;/a&gt; via git branches and tags. Versions are prefixed with a &lt;code&gt;v&lt;/code&gt;, and only patch versions are git tags. Major and minor versions are git branches. You are &lt;strong&gt;very strongly advised&lt;/strong&gt; to use a major version dependency to be sure your config will not break when Mind gets updated.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Major versions always have the form &lt;code&gt;vM&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; is the major version. — e.g. &lt;code&gt;v2&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Minor versions always have the form &lt;code&gt;vM.N&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; is the major version and &lt;code&gt;N&lt;/code&gt; the minor. — e.g. &lt;code&gt;v2.0&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Patch versions always have the form &lt;code&gt;vM.N.P&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; is the major version, &lt;code&gt;N&lt;/code&gt; the minor and &lt;code&gt;P&lt;/code&gt; the patch. — e.g. &lt;code&gt;v2.0.0&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;It is strongly discouraged to use &lt;code&gt;master&lt;/code&gt; as that branch can introduce breaking changes at any time.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Nightly users&lt;/h3&gt; &#xA;&lt;p&gt;Mind supports nightly releases of Neovim. However, keep in mind that if you are on a nightly version, you must be &lt;strong&gt;on the last one&lt;/strong&gt;. If you are not, then you are exposed to Neovim compatibility issues / breakage.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;A wiki is planned, but for now, you can simply have a look at &lt;code&gt;:h mind-usage&lt;/code&gt; and &lt;code&gt;:h mind-commands&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Keybindings&lt;/h1&gt; &#xA;&lt;p&gt;The user commands defined by Mind are mapped to no keybindings by default. However, once you have a tree open, buffer-local keybindings are automatically inserted. You can change them by setting they behavior you want in &lt;code&gt;opts.keymaps&lt;/code&gt;. More information about that in &lt;code&gt;:h mind-config-keymaps&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>FAForever/fa</title>
    <updated>2022-08-24T01:41:52Z</updated>
    <id>tag:github.com,2022-08-24:/FAForever/fa</id>
    <link href="https://github.com/FAForever/fa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lua code for FAF&lt;/p&gt;&lt;hr&gt;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;FAF&lt;/th&gt; &#xA;   &lt;th&gt;FAF Develop&lt;/th&gt; &#xA;   &lt;th&gt;FAF Beta balance&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/FAForever/fa/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/FAForever/fa/actions/workflows/build.yaml/badge.svg?branch=deploy%2Ffaf&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/FAForever/fa/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/FAForever/fa/actions/workflows/build.yaml/badge.svg?branch=deploy%2Ffafdevelop&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/FAForever/fa/actions/workflows/build.yaml&#34;&gt;&lt;img src=&#34;https://github.com/FAForever/fa/actions/workflows/build.yaml/badge.svg?branch=deploy%2Ffafbeta&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Read this in other languages: &lt;a href=&#34;https://raw.githubusercontent.com/FAForever/fa/deploy/fafdevelop/README.md&#34;&gt;English&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/FAForever/fa/deploy/fafdevelop/README-russian.md&#34;&gt;Russian&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About Forged Alliance Forever&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/FAForever/fa/deploy/fafdevelop/images/impression-a.jpg&#34; alt=&#34;Impression of the game&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Forged Alliance Forever is a community-driven &lt;a href=&#34;https://github.com/FAForever&#34;&gt;project&lt;/a&gt; designed to facilitate online play for Supreme Commander: Forged Alliance. We are a thriving community with a self-made &lt;a href=&#34;https://github.com/FAForever/downlords-faf-client&#34;&gt;client&lt;/a&gt;, &lt;a href=&#34;https://github.com/FAForever/server&#34;&gt;backend&lt;/a&gt; and &lt;a href=&#34;https://github.com/FAForever/website&#34;&gt;website&lt;/a&gt;. We have an extensive library of community made maps, mods and co-op scenarios. We introduced a rating system based on &lt;a href=&#34;https://www.microsoft.com/en-us/research/project/trueskill-ranking-system/&#34;&gt;TrueSkill&lt;/a&gt; to provide a competitive environment with automated matchmaking. To see all that we have added it is best to experience it yourself by playing the game through the client.&lt;/p&gt; &#xA;&lt;p&gt;You can download the client on our &lt;a href=&#34;https://faforever.com/&#34;&gt;website&lt;/a&gt;. In order to play you will need to sync your account with Steam to prove you own a copy of &lt;a href=&#34;https://store.steampowered.com/app/9420/Supreme_Commander_Forged_Alliance/&#34;&gt;Supreme Commander: Forged Aliance&lt;/a&gt;. You can get in touch with the community through the &lt;a href=&#34;https://forum.faforever.com/&#34;&gt;forums&lt;/a&gt; and the official &lt;a href=&#34;https://discord.gg/mXahVSKGVb&#34;&gt;Discord server&lt;/a&gt;. The developers chat can be found on &lt;a href=&#34;https://zulip.com/&#34;&gt;Zulip&lt;/a&gt; - you can ask for access from the admin of this repository. The project is kept alive by donations to our &lt;a href=&#34;https://www.patreon.com/faf&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About this repository&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the changes to the Lua side of the game, such as balance changes, performance improvements, and additional features. The repository mimics the organization of the base game. A quick reference guide:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Folder&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;coderes*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Various textures required for the Lua debugger to work&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;effects&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blueprints, textures and meshes of effects and HLSL shaders that are used to render the game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;engine*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Engine documentation: all objects and their functions are documented&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;env&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Props, decals, splats, stratum layer and environmental effects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;etc*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Legacy - a rudimentary implementation of versioning control&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;images*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Images used by the repository, such as the banner at the top&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;loc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Localization files for the game, see the translation guidelines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lua&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lua files that control all the behavior outside of the physics simulation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;meshes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Meshes that do not belong to props, units or projectiles. E.g. the world border&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;projectiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blueprint files, textures and meshes of projectiles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;promotion*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Promotion material related to content surrounding the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;props&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blueprint files, textures and meshes of props&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;schook&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Legacy - the &lt;strong&gt;s&lt;/strong&gt;upreme &lt;strong&gt;c&lt;/strong&gt;ommander &lt;strong&gt;hook&lt;/strong&gt; folder that was used due to licensing issues&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scripts*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scripts used to automate tasks surrounding the game repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;setup*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Development files that allow you to launch the game using the repository&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;testmaps*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Test maps. E.g. the benchmark map shipped with the game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tests*&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unit tests that run on engine-oblivion functions. E.g. Testing string operations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;textures&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Textures used by the engine (as fallback) and UI&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;units&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Blueprint files, textures and meshes of units&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Files that are unchanged are retrieved from the base game. Folders with an asterisk (*) are not shipped to the user with the client. See the installation instructions in the contribution section for more information.&lt;/p&gt; &#xA;&lt;p&gt;Repositories that are directly related to the game:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FAForever/FA_Patcher&#34;&gt;Executable patcher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FAForever/FA-Binary-Patches&#34;&gt;Executable patches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FAForever/FADeepProbe&#34;&gt;Exception debugger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FAForever/fa-lua-vscode-extension&#34;&gt;FA Lua intellisense extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/FAForever/fa-lua-language-server&#34;&gt;FA Lua intellisense langauge server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Here is the complete &lt;a href=&#34;https://raw.githubusercontent.com/FAForever/fa/deploy/fafdevelop/changelog.md&#34;&gt;changelog&lt;/a&gt;. There is an &lt;a href=&#34;http://patchnotes.faforever.com/&#34;&gt;alternative changelog&lt;/a&gt; for balance patches in a user-friendly format.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are instructions &lt;a href=&#34;https://raw.githubusercontent.com/FAForever/fa/deploy/fafdevelop/setup/setup-english.md&#34;&gt;in English&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/FAForever/fa/deploy/fafdevelop/setup/setup-russian.md&#34;&gt;in Russian&lt;/a&gt; to help you set up a development environment. It is important that you discuss your contributions beforehand. You can do this by making a comment on an existing issue or, if it doesn&#39;t exist yet, by opening a new issue. Not all pull requests are merged by default. It is important that the changes align with the vision of the project.&lt;/p&gt; &#xA;&lt;p&gt;In general, before contributing, please read the &lt;a href=&#34;https://raw.githubusercontent.com/FAForever/fa/deploy/fafdevelop/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/FAForever/fa/deploy/fafdevelop/loc/guidelines.md&#34;&gt;translation guidelines&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>