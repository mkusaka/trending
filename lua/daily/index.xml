<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-17T01:38:32Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>johmsalas/text-case.nvim</title>
    <updated>2024-01-17T01:38:32Z</updated>
    <id>tag:github.com,2024-01-17:/johmsalas/text-case.nvim</id>
    <link href="https://github.com/johmsalas/text-case.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An all in one plugin for converting text case in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;text-case.nvim&lt;/h1&gt; &#xA;&lt;p&gt;An all in one plugin for converting text case in Neovim. It converts a piece of text to an indicated string case and also is capable of bulk replacing texts without changing cases&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/johmsalas/text-case.nvim/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;CI/CD&#34;&gt; &lt;img src=&#34;https://github.com/johmsalas/text-case.nvim/actions/workflows/neovim-nightly.yml/badge.svg?branch=main&#34; alt=&#34;Tests Neovim Nightly&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin runs its tests against the following versions of Neovim:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Neovim version&lt;/th&gt; &#xA;   &lt;th&gt;Remarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.9.4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All features work&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;0.8.3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Telescope extension is not working because Telescope itself requires at least Neovim version 0.9.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Quick conversion&lt;/h3&gt; &#xA;&lt;p&gt;Converts text under cursor to another case. Only 3 keys to convert the current text. &lt;sub&gt;Repeatable using &lt;code&gt;.&lt;/code&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Smartly guesses the current object using the following strategies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tree Sitter (if available) [WIP]&lt;/li&gt; &#xA; &lt;li&gt;Word under cursor&lt;/li&gt; &#xA; &lt;li&gt;Ignore word separators&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LSP conversion&lt;/h3&gt; &#xA;&lt;p&gt;Converts definition under cursor to another case. Use Language Server Protocol to modify the definition, references and usages of the word under cursor &lt;sub&gt;Repeatable using &lt;code&gt;.&lt;/code&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Targeted conversion&lt;/h3&gt; &#xA;&lt;p&gt;Converts given objects, it might require more key presses than the quick conversion but allows to control the specific target. &lt;sub&gt;Repeatable using &lt;code&gt;.&lt;/code&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supported targets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim objects: w, iw, aw, e, p, ...&lt;/li&gt; &#xA; &lt;li&gt;Selected text in visual mode&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bulk smart replacement&lt;/h3&gt; &#xA;&lt;p&gt;Converts all forms of a specific text, the replaced text will keep the original text case.&lt;/p&gt; &#xA;&lt;p&gt;If not specified, it replaces every instance of the text in the current file; But it could be also scoped to the selected block:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/johmsalas/text-case.nvim/main/screens/bulk-change-case-visual-block.gif&#34; alt=&#34;animation: Bulk Replacement&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;String case conversions&lt;/h3&gt; &#xA;&lt;p&gt;It is also a library of text case conversion methods. Useful for your LUA code.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Case&lt;/th&gt; &#xA;   &lt;th&gt;Example&lt;/th&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Upper case&lt;/td&gt; &#xA;   &lt;td&gt;LOREM IPSUM&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_constant_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lower case&lt;/td&gt; &#xA;   &lt;td&gt;lorem ipsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_lower_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Snake case&lt;/td&gt; &#xA;   &lt;td&gt;lorem_ipsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_snake_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dash case&lt;/td&gt; &#xA;   &lt;td&gt;lorem-ipsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_dash_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Title Dash case&lt;/td&gt; &#xA;   &lt;td&gt;Lorem-Ipsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_title_dash_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Constant case&lt;/td&gt; &#xA;   &lt;td&gt;LOREM_IPSUM&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_constant_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dot case&lt;/td&gt; &#xA;   &lt;td&gt;lorem.ipsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_dot_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Camel case&lt;/td&gt; &#xA;   &lt;td&gt;loremIpsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_camel_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pascal case&lt;/td&gt; &#xA;   &lt;td&gt;LoremIpsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_pascal_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Title case&lt;/td&gt; &#xA;   &lt;td&gt;Lorem Ipsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_title_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Path case&lt;/td&gt; &#xA;   &lt;td&gt;lorem/ipsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_path_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Phrase case&lt;/td&gt; &#xA;   &lt;td&gt;Lorem ipsum&lt;/td&gt; &#xA;   &lt;td&gt;textcase.api.to_phrase_case&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Character compatibility&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to transform the letter case of the latin alphabet (&lt;code&gt;[a-z]&lt;/code&gt;) as well as the special characters related to the latin alphabet (e.g. &lt;code&gt;á = Á&lt;/code&gt; or &lt;code&gt;ö&lt;/code&gt; =&amp;gt; &lt;code&gt;Ö&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Install with your favorite plugin manager.&lt;/p&gt; &#xA;&lt;h3&gt;Example in LUA using Packer.nvim with default options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;johmsalas/text-case.nvim&#34;,&#xA;  config = function()&#xA;    require(&#39;textcase&#39;).setup {}&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example for LazyVim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;johmsalas/text-case.nvim&#34;,&#xA;  dependencies = { &#34;nvim-telescope/telescope.nvim&#34; },&#xA;  config = function()&#xA;    require(&#34;textcase&#34;).setup({})&#xA;    require(&#34;telescope&#34;).load_extension(&#34;textcase&#34;)&#xA;  end,&#xA;  keys = {&#xA;    &#34;ga&#34;, -- Default invocation prefix&#xA;    { &#34;ga.&#34;, &#34;&amp;lt;cmd&amp;gt;TextCaseOpenTelescope&amp;lt;CR&amp;gt;&#34;, mode = { &#34;n&#34;, &#34;v&#34; }, desc = &#34;Telescope&#34; },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;All options with their default value&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- Set `default_keymappings_enabled` to false if you don&#39;t want automatic keymappings to be registered.&#xA;  default_keymappings_enabled = true,&#xA;  -- `prefix` is only considered if `default_keymappings_enabled` is true. It configures the prefix&#xA;  -- of the keymappings, e.g. `gau ` executes the `current_word` method with `to_upper_case`&#xA;  -- and `gaou` executes the `operator` method with `to_upper_case`.&#xA;  prefix = &#34;ga&#34;,&#xA;  -- If `substitude_command_name` is not nil, an additional command with the passed in name&#xA;  -- will be created that does the same thing as &#34;Subs&#34; does.&#xA;  substitude_command_name = nil,&#xA;  -- By default, all methods are enabled. If you set this option with some methods omitted,&#xA;  -- these methods will not be registered in the default keymappings. The methods will still&#xA;  -- be accessible when calling the exact lua function e.g.:&#xA;  -- &#34;&amp;lt;CMD&amp;gt;lua require(&#39;textcase&#39;).current_word(&#39;to_snake_case&#39;)&amp;lt;CR&amp;gt;&#34;&#xA;  enabled_methods = {&#xA;    &#34;to_upper_case&#34;,&#xA;    &#34;to_lower_case&#34;,&#xA;    &#34;to_snake_case&#34;,&#xA;    &#34;to_dash_case&#34;,&#xA;    &#34;to_title_dash_case&#34;,&#xA;    &#34;to_constant_case&#34;,&#xA;    &#34;to_dot_case&#34;,&#xA;    &#34;to_phrase_case&#34;,&#xA;    &#34;to_camel_case&#34;,&#xA;    &#34;to_pascal_case&#34;,&#xA;    &#34;to_title_case&#34;,&#xA;    &#34;to_path_case&#34;,&#xA;    &#34;to_upper_phrase_case&#34;,&#xA;    &#34;to_lower_phrase_case&#34;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example in VimScript using Plug with custom keybindings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;call plug#begin(&#39;~/.local/share/nvim/plugged&#39;)&#xA;Plug &#39;johmsalas/text-case.nvim&#39;&#xA;call plug#end()&#xA;&#xA;-- Example of custom keymapping&#xA;nnoremap gau :lua require(&#39;textcase&#39;).current_word(&#39;to_upper_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gal :lua require(&#39;textcase&#39;).current_word(&#39;to_lower_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gas :lua require(&#39;textcase&#39;).current_word(&#39;to_snake_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gad :lua require(&#39;textcase&#39;).current_word(&#39;to_dash_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gan :lua require(&#39;textcase&#39;).current_word(&#39;to_constant_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gad :lua require(&#39;textcase&#39;).current_word(&#39;to_dot_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaa :lua require(&#39;textcase&#39;).current_word(&#39;to_phrase_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gac :lua require(&#39;textcase&#39;).current_word(&#39;to_camel_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gap :lua require(&#39;textcase&#39;).current_word(&#39;to_pascal_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gat :lua require(&#39;textcase&#39;).current_word(&#39;to_title_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaf :lua require(&#39;textcase&#39;).current_word(&#39;to_path_case&#39;)&amp;lt;CR&amp;gt;&#xA;&#xA;nnoremap gaU :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_upper_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaL :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_lower_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaS :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_snake_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaD :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_dash_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaN :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_constant_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaD :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_dot_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaA :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_phrase_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaC :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_camel_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaP :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_pascal_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaT :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_title_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gaF :lua require(&#39;textcase&#39;).lsp_rename(&#39;to_path_case&#39;)&amp;lt;CR&amp;gt;&#xA;&#xA;nnoremap geu :lua require(&#39;textcase&#39;).operator(&#39;to_upper_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gel :lua require(&#39;textcase&#39;).operator(&#39;to_lower_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap ges :lua require(&#39;textcase&#39;).operator(&#39;to_snake_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap ged :lua require(&#39;textcase&#39;).operator(&#39;to_dash_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gen :lua require(&#39;textcase&#39;).operator(&#39;to_constant_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap ged :lua require(&#39;textcase&#39;).operator(&#39;to_dot_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gea :lua require(&#39;textcase&#39;).operator(&#39;to_phrase_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gec :lua require(&#39;textcase&#39;).operator(&#39;to_camel_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gep :lua require(&#39;textcase&#39;).operator(&#39;to_pascal_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap get :lua require(&#39;textcase&#39;).operator(&#39;to_title_case&#39;)&amp;lt;CR&amp;gt;&#xA;nnoremap gef :lua require(&#39;textcase&#39;).operator(&#39;to_path_case&#39;)&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/johmsalas/text-case.nvim/wiki&#34;&gt;Visit the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Telescope integration&lt;/h3&gt; &#xA;&lt;p&gt;To list conversion options using Telescope, register the extension in telescope and setup keybindings for normal and visual mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = function()&#xA;  require(&#39;textcase&#39;).setup {}&#xA;  require(&#39;telescope&#39;).load_extension(&#39;textcase&#39;)&#xA;  vim.api.nvim_set_keymap(&#39;n&#39;, &#39;ga.&#39;, &#39;&amp;lt;cmd&amp;gt;TextCaseOpenTelescope&amp;lt;CR&amp;gt;&#39;, { desc = &#34;Telescope&#34; })&#xA;  vim.api.nvim_set_keymap(&#39;v&#39;, &#39;ga.&#39;, &#34;&amp;lt;cmd&amp;gt;TextCaseOpenTelescope&amp;lt;CR&amp;gt;&#34;, { desc = &#34;Telescope&#34; })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above, when using in normal mode, it shows options for quick and LSP conversion of the string. It is also possible to trigger a list of options only for Quick Conversion, or only for LSP conversion It only works for normal mode, because LSP does not make sense for visual mode&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;gaa&#39;, &#34;&amp;lt;cmd&amp;gt;TextCaseOpenTelescopeQuickChange&amp;lt;CR&amp;gt;&#34;, { desc = &#34;Telescope Quick Change&#34; })&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;gai&#39;, &#34;&amp;lt;cmd&amp;gt;TextCaseOpenTelescopeLSPChange&amp;lt;CR&amp;gt;&#34;, { desc = &#34;Telescope LSP Change&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Which key integration&lt;/h3&gt; &#xA;&lt;p&gt;If which-key is preset, text-case.nvim registers descriptions for the conversion groups&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/johmsalas/text-case.nvim/main/screens/whichkey.png&#34; alt=&#34;screenshot: which-key menu&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Conversion based on LSP not working&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A requirement for LSP rename to work is to have LSP set in the buffer and the Language Server should have the rename capability enabled.&lt;/p&gt; &#xA;&lt;p&gt;To triage it, trigger LSP renaming using &lt;code&gt;:lua vim.lsp.buf.rename()&lt;/code&gt; while the cursor is on the symbol. If it works, file an issue on this plugin&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Useful commands are defined in the &lt;a href=&#34;https://raw.githubusercontent.com/johmsalas/text-case.nvim/main/Justfile&#34;&gt;&lt;code&gt;Justfile&lt;/code&gt;&lt;/a&gt; and can be listed with &lt;a href=&#34;https://github.com/casey/just&#34;&gt;&lt;code&gt;just&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Required packages to run tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;npm install -g typescript-language-server typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing with Neotest&lt;/h3&gt; &#xA;&lt;p&gt;The test runs executed in &lt;a href=&#34;https://raw.githubusercontent.com/johmsalas/text-case.nvim/main/tests/run.sh&#34;&gt;&lt;code&gt;tests/run.sh&lt;/code&gt;&lt;/a&gt; work via different environments defined in the folder &lt;a href=&#34;https://raw.githubusercontent.com/johmsalas/text-case.nvim/main/tests/environments&#34;&gt;&lt;code&gt;tests/environments&lt;/code&gt;&lt;/a&gt;. This is not compatible with the default &lt;a href=&#34;https://github.com/nvim-neotest/neotest-plenary#minimal-initlua&#34;&gt;Neotest setup&lt;/a&gt; though, because it will look for a &lt;code&gt;tests/minimal_init.lua&lt;/code&gt; file. Hence, there is a universal &lt;a href=&#34;https://raw.githubusercontent.com/johmsalas/text-case.nvim/main/tests/minimal_init.lua&#34;&gt;&lt;code&gt;tests/minimal_init.lua&lt;/code&gt; file&lt;/a&gt; that is just used for running tests with Neotest and that contains the setup of all environments combined. Neotest enables us to run single tests easily.&lt;/p&gt;</summary>
  </entry>
</feed>