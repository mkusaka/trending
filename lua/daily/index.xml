<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-08T01:40:35Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nacro90/numb.nvim</title>
    <updated>2023-03-08T01:40:35Z</updated>
    <id>tag:github.com,2023-03-08:/nacro90/numb.nvim</id>
    <link href="https://github.com/nacro90/numb.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Peek lines just when you intend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;numb.nvim&lt;/h1&gt; &#xA;&lt;p&gt;numb.nvim is a Neovim plugin that peeks lines of the buffer in non-obtrusive way.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Peeking the buffer while entering command &lt;code&gt;:{number}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://gist.githubusercontent.com/nacro90/d9fa04d88d3f757b9ba899fd38866405/raw/f5991c839a95ed92fcc3943f9b7853a0c620d018/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The colorscheme is &lt;a href=&#34;https://github.com/arzg/vim-substrata&#34;&gt;vim-substrata&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;nacro90/numb.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Paq&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;paq &#39;nacro90/numb.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;nacro90/numb.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Setup with default options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;numb&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using a init.vim instead of init.lua, you will need to load the plugin like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Vimscript&#34;&gt;:lua require(&#39;numb&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Disable the plugin globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;numb&#39;).disable()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After you disable the plugin, you can re-enable it by calling the &lt;code&gt;setup&lt;/code&gt; again.&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;You can customize the behaviour with following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;numb&#39;).setup{&#xA;  show_numbers = true, -- Enable &#39;number&#39; for the window while peeking&#xA;  show_cursorline = true, -- Enable &#39;cursorline&#39; for the window while peeking&#xA;  hide_relativenumbers = true, -- Enable turning off &#39;relativenumber&#39; for the window while peeking&#xA;  number_only = false, -- Peek only when the command is only a number instead of when it starts with a number&#xA;  centered_peeking = true, -- Peeked line will be centered relative to window&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running &lt;code&gt;setup&lt;/code&gt;, you are good to go. You can try with entering a number to the vim command line like &lt;code&gt;:3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you disable numb, your options are kept in the module level. So after you disable it, if you call &lt;code&gt;setup()&lt;/code&gt; with no overrides, numb will be enabled with your customized options (or default ones if you don&#39;t have any). You can override the options again with calling &lt;code&gt;setup{...}&lt;/code&gt; as mentioned above.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>JoosepAlviste/nvim-ts-context-commentstring</title>
    <updated>2023-03-08T01:40:35Z</updated>
    <id>tag:github.com,2023-03-08:/JoosepAlviste/nvim-ts-context-commentstring</id>
    <link href="https://github.com/JoosepAlviste/nvim-ts-context-commentstring" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim treesitter plugin for setting the commentstring based on the cursor location in a file.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;nvim-ts-context-commentstring&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A Neovim plugin for setting the &lt;code&gt;commentstring&lt;/code&gt; option based on the cursor location in the file. The location is checked via treesitter queries.&lt;/p&gt; &#xA;&lt;p&gt;This is useful when there are embedded languages in certain types of files. For example, Vue files can have many different sections, each of which can have a different style for comments.&lt;/p&gt; &#xA;&lt;p&gt;Note that this plugin &lt;em&gt;only&lt;/em&gt; changes the &lt;code&gt;commentstring&lt;/code&gt; setting. It does not add any mappings for commenting. It is recommended to use a commenting plugin like &lt;a href=&#34;https://github.com/tpope/vim-commentary/&#34;&gt;&lt;code&gt;vim-commentary&lt;/code&gt;&lt;/a&gt; alongside this plugin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9450943/185669080-a5f05064-c247-47f5-9b63-d34a9871186e.gif&#34; alt=&#34;Demo gif&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirements:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.5.0&#34;&gt;Neovim version 0.5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter/&#34;&gt;&lt;code&gt;nvim-treesitter&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use your favorite plugin manager. For example, here&#39;s how it would look like with Packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;JoosepAlviste/nvim-ts-context-commentstring&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setup:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Enable the module from &lt;code&gt;nvim-treesitter&lt;/code&gt; setup&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don&#39;t forget to use &lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide#using-lua-from-vimscript&#34;&gt;lua heredoc&lt;/a&gt; if you&#39;re using &lt;code&gt;init.vim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended: Using a commenting plugin&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to use a commenting plugin like &lt;a href=&#34;https://github.com/tpope/vim-commentary/&#34;&gt;&lt;code&gt;vim-commentary&lt;/code&gt;&lt;/a&gt; together with this plugin. &lt;code&gt;vim-commentary&lt;/code&gt; provides the mappings for commenting which use the &lt;code&gt;commentstring&lt;/code&gt; setting. This plugin adds to that by correctly setting the &lt;code&gt;commentstring&lt;/code&gt; setting so that &lt;code&gt;vim-commentary&lt;/code&gt; can do its thing even in more complex filetypes.&lt;/p&gt; &#xA;&lt;p&gt;There are ways to make this plugin more efficient with some commenting plugins. See the &lt;a href=&#34;https://raw.githubusercontent.com/JoosepAlviste/nvim-ts-context-commentstring/main/#integrations&#34;&gt;Integrations&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Adding support for more languages&lt;/h3&gt; &#xA;&lt;p&gt;Currently, the following languages are supported when they are injected with language tree (see &lt;a href=&#34;https://raw.githubusercontent.com/JoosepAlviste/nvim-ts-context-commentstring/main/lua/ts_context_commentstring/internal.lua&#34;&gt;&lt;code&gt;lua/ts_context_commentstring/internal.lua&lt;/code&gt;&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;javascript&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typescript&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tsx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;css&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scss&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;php&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;html&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;svelte&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vue&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;astro&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;handlebars&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;glimmer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;graphql&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This means that in any filetype, if the given languages are injected, this plugin should detect them and correctly set the &lt;code&gt;commentstring&lt;/code&gt;. For example, Vue files can be injected with &lt;code&gt;css&lt;/code&gt; or &lt;code&gt;javascript&lt;/code&gt;. Even though we don&#39;t configure anything for Vue explicitly, the &lt;code&gt;commentstring&lt;/code&gt; updating logic should still work.&lt;/p&gt; &#xA;&lt;p&gt;Support for more languages can be added quite easily by passing a &lt;code&gt;config&lt;/code&gt; table when configuring the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    config = {&#xA;      css = &#39;// %s&#39;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, some languages are not injected with language tree, but have multiple commenting styles in the same language. One such example is JavaScript with JSX. The JSX section is not an injected language, but a part of the tree generated by the &lt;code&gt;javascript&lt;/code&gt; treesitter parser.&lt;/p&gt; &#xA;&lt;p&gt;In this more complex case, this plugin supports adding queries for specific treesitter nodes. Each node can have its own unique commenting style. For example, here&#39;s how the default configuration for &lt;code&gt;javascript&lt;/code&gt; would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    config = {&#xA;      javascript = {&#xA;        __default = &#39;// %s&#39;,&#xA;        jsx_element = &#39;{/* %s */}&#39;,&#xA;        jsx_fragment = &#39;{/* %s */}&#39;,&#xA;        jsx_attribute = &#39;// %s&#39;,&#xA;        comment = &#39;// %s&#39;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;__default&lt;/code&gt; value is used when none of the other node types are seen. The rest of the keys refer to the type of the treesitter node. In this example, if your cursor is inside a &lt;code&gt;jsx_element&lt;/code&gt;, then the &lt;code&gt;{/* %s */}&lt;/code&gt; &lt;code&gt;commentstring&lt;/code&gt; will be set.&lt;/p&gt; &#xA;&lt;p&gt;Note that the language refers to the &lt;em&gt;treesitter&lt;/em&gt; language, not the filetype or the file extension.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, it is possible to have each &lt;code&gt;commentstring&lt;/code&gt; configuration be a table with custom keys. This can be used to configure separate single and multi-line comment styles (useful when integrating with a commenting plugin):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    config = {&#xA;      typescript = { __default = &#39;// %s&#39;, __multiline = &#39;/* %s */&#39; }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the custom key can be passed to &lt;code&gt;update_commentstring&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;ts_context_commentstring.internal&#39;).update_commentstring({&#xA;  key = &#39;__multiline&#39;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, it is possible to customize the tree traversal start location when calling &lt;code&gt;update_commentstring&lt;/code&gt;, this is useful in commenting plugin integrations. There are some useful helper functions exported from &lt;code&gt;ts_context_commentstring.utils&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;ts_context_commentstring.internal&#39;).calculate_commentstring {&#xA;  location = require(&#39;ts_context_commentstring.utils&#39;).get_cursor_location(),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to calculate your own &lt;code&gt;commentstring&lt;/code&gt; you are able to do so with the &lt;code&gt;custom_calculation&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    custom_calculation = function(node, language_tree)&#xA;        ...&#xA;    end&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a function that takes in the current node and the language tree which could be used for context like figuring out which language you should use a &lt;code&gt;commentstring&lt;/code&gt; for. You can also for example figure out which type the current node is. You need to return a &lt;code&gt;commentstring&lt;/code&gt; in the &lt;code&gt;custom_calculation&lt;/code&gt; if you want it to be set.&lt;/p&gt; &#xA;&lt;h3&gt;Behavior&lt;/h3&gt; &#xA;&lt;p&gt;The default behavior is to trigger &lt;code&gt;commentstring&lt;/code&gt; updating on &lt;code&gt;CursorHold&lt;/code&gt;. If your &lt;code&gt;updatetime&lt;/code&gt; setting is set to a high value, then the updating might not be triggered. Let me know if you&#39;d like to have this be customized by creating an issue. Another candidate might be the &lt;code&gt;CursorMoved&lt;/code&gt; autocommand.&lt;/p&gt; &#xA;&lt;p&gt;The default &lt;code&gt;CursorHold&lt;/code&gt; autocommand can be disabled by passing &lt;code&gt;enable_autocmd = false&lt;/code&gt; when setting up the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    enable_autocmd = false,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can call the &lt;code&gt;update_commentstring&lt;/code&gt; function manually:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;nnoremap &amp;lt;leader&amp;gt;c &amp;lt;cmd&amp;gt;lua require(&#39;ts_context_commentstring.internal&#39;).update_commentstring()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is not necessary to use this option if you are using &lt;code&gt;vim-commentary&lt;/code&gt;, the integration is set up automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Integrations&lt;/h3&gt; &#xA;&lt;p&gt;For some commenting plugins, it&#39;s possible to trigger the &lt;code&gt;commentstring&lt;/code&gt; calculation only when it is actually needed. Some commenting plugins require more configuration than others.&lt;/p&gt; &#xA;&lt;p&gt;Let me know if you&#39;d like to see more integrations for other commenting plugins. A PR is always appreciated :)&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/tpope/vim-commentary/&#34;&gt;&lt;code&gt;vim-commentary&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;There is an existing integration with &lt;code&gt;vim-commentary&lt;/code&gt;, which triggers the &lt;code&gt;commentstring&lt;/code&gt; updating logic only when needed (before commenting with &lt;code&gt;gc&lt;/code&gt;). If &lt;code&gt;vim-commentary&lt;/code&gt; is detected, then this plugin automatically sets up &lt;code&gt;vim-commentary&lt;/code&gt; mappings to first update the &lt;code&gt;commentstring&lt;/code&gt;, and then trigger &lt;code&gt;vim-commentary&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can override default mappings, or disable them by specifying &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    commentary_integration = {&#xA;      -- change default mapping&#xA;      Commentary = &#39;g/&#39;,&#xA;      -- disable default mapping&#xA;      CommentaryLine = false,&#xA;    },&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, update your mappings to include the &lt;code&gt;Context&lt;/code&gt; prefix&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#xA;  &#34;n&#34;,&#xA;  &#34;g/&#34;,&#xA;  &#39;&amp;lt;Plug&amp;gt;ContextCommentaryLine&#39;, -- Previously &#39;&amp;lt;Plug&amp;gt;CommentaryLine&#39;&#xA;  { silent = true, desc = &#34;Comment line&#34; }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/b3nj5m1n/kommentary&#34;&gt;&lt;code&gt;kommentary&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;kommentary&lt;/code&gt; can also trigger the &lt;code&gt;commentstring&lt;/code&gt; updating logic before commenting. However, it requires some configuration to set up.&lt;/p&gt; &#xA;&lt;p&gt;First, disable the &lt;code&gt;CursorHold&lt;/code&gt; autocommand of this plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    enable_autocmd = false,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, configure &lt;code&gt;kommentary&lt;/code&gt; to trigger the &lt;code&gt;commentstring&lt;/code&gt; updating logic with its &lt;code&gt;hook_function&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;kommentary.config&#39;).configure_language(&#39;typescriptreact&#39;, {&#xA;  single_line_comment_string = &#39;auto&#39;,&#xA;  multi_line_comment_strings = &#39;auto&#39;,&#xA;  hook_function = function()&#xA;    require(&#39;ts_context_commentstring.internal&#39;).update_commentstring()&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that currently the &lt;code&gt;&#39;default&#39;&lt;/code&gt; language configuration &lt;a href=&#34;https://github.com/b3nj5m1n/kommentary/raw/main/lua/kommentary/config.lua#L316&#34;&gt;does not run&lt;/a&gt; &lt;code&gt;hook_function&lt;/code&gt;, so explicit language configurations will need to be supplied as shown above. See &lt;a href=&#34;https://github.com/JoosepAlviste/nvim-ts-context-commentstring/issues/19#issuecomment-916334428&#34;&gt;issue #19&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/terrortylor/nvim-comment&#34;&gt;&lt;code&gt;nvim-comment&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-comment&lt;/code&gt; can easily be configured to trigger the &lt;code&gt;commentstring&lt;/code&gt; updating logic before commenting.&lt;/p&gt; &#xA;&lt;p&gt;First, disable the &lt;code&gt;CursorHold&lt;/code&gt; autocommand of this plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    enable_autocmd = false,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, configure &lt;code&gt;nvim_comment&lt;/code&gt; to trigger the &lt;code&gt;commentstring&lt;/code&gt; updating logic with its &lt;code&gt;hook&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim_comment&#34;).setup({&#xA;  hook = function()&#xA;    require(&#34;ts_context_commentstring.internal&#34;).update_commentstring()&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/numToStr/Comment.nvim&#34;&gt;&lt;code&gt;Comment.nvim&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;First, disable the &lt;code&gt;CursorHold&lt;/code&gt; autocommand of this plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    enable_autocmd = false,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, configure &lt;code&gt;Comment.nvim&lt;/code&gt; to trigger the &lt;code&gt;commentstring&lt;/code&gt; updating logic with its &lt;code&gt;pre_hook&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;Comment&#39;).setup {&#xA;  pre_hook = require(&#39;ts_context_commentstring.integrations.comment_nvim&#39;).create_pre_hook(),&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim#minicomment&#34;&gt;&lt;code&gt;mini.comment&lt;/code&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;mini.comment&lt;/code&gt; also relies on &lt;code&gt;commentstring&lt;/code&gt; option and implements hook functionality. It can be used to configure updating &lt;code&gt;commentstring&lt;/code&gt; before commenting.&lt;/p&gt; &#xA;&lt;p&gt;First, disable the &lt;code&gt;CursorHold&lt;/code&gt; autocommand of this plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  context_commentstring = {&#xA;    enable = true,&#xA;    enable_autocmd = false,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, configure &lt;code&gt;mini.comment&lt;/code&gt; to trigger the &lt;code&gt;commentstring&lt;/code&gt; updating logic by supplying custom &lt;code&gt;config.hooks.pre&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;mini.comment&#39;).setup({&#xA;  hooks = {&#xA;    pre = function()&#xA;      require(&#39;ts_context_commentstring.internal&#39;).update_commentstring()&#xA;    end,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;React:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9450943/185669182-d523c328-251e-41b0-a76e-d867c401a040.gif&#34; alt=&#34;React demo gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Svelte:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9450943/185669229-ad10848e-ba13-45e0-8447-a3a1f03eb85e.gif&#34; alt=&#34;Svelte demo gif&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HTML:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9450943/185669275-cdfa7fa4-092e-439b-822e-330559a7d4d7.gif&#34; alt=&#34;html&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nesting:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;I injected HTML into JavaScript strings and created multiple levels of nesting with language tree. This sort of nesting of languages works without any extra configuration in the plugin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/9450943/185669303-e6958706-f5b7-439c-98f7-2393e6325107.gif&#34; alt=&#34;nested&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cbochs/portal.nvim</title>
    <updated>2023-03-08T01:40:35Z</updated>
    <id>tag:github.com,2023-03-08:/cbochs/portal.nvim</id>
    <link href="https://github.com/cbochs/portal.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for improved location list navigation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Portal.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2467016/222644459-264e22e7-496a-4d4e-bfcb-e96efda0003d.gif&#34; alt=&#34;portal_showcase3 mov&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Theme: &lt;a href=&#34;https://github.com/rebelot/kanagawa.nvim&#34;&gt;kanagawa&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Look at you, sailing through [neovim] majestically, like an eagle... piloting a blimp.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Portal is a plugin that aims to build upon and enhance existing location lists (e.g. jumplist, changelist, quickfix list, etc.) and their associated motions (e.g. &lt;code&gt;&amp;lt;c-o&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;c-i&amp;gt;&lt;/code&gt;) by presenting jump locations to the user in the form of &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portals&#34;&gt;portals&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#quickstart&#34;&gt;quickstart&lt;/a&gt; section to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Labelled&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portals&#34;&gt;portals&lt;/a&gt; for immediate movement to a portal location&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#filters&#34;&gt;filters&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#slots&#34;&gt;slots&lt;/a&gt; for &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#builtin-queries&#34;&gt;well-known lists&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Composable&lt;/strong&gt; multiple location lists can be used in a single search&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extensible&lt;/strong&gt; able to search any list with custom queries&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.8.0&#34;&gt;Neovim &amp;gt;= 0.8&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.9 - optional, for &lt;a href=&#34;https://github.com/neovim/neovim/issues/17458&#34;&gt;floating window title&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#installation&#34;&gt;Install&lt;/a&gt; Portal.nvim using your preferred package manager&lt;/li&gt; &#xA; &lt;li&gt;Add keybinds for opening portals, both forwards and backwards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;o&#34;, &#34;&amp;lt;cmd&amp;gt;Portal jumplist backward&amp;lt;cr&amp;gt;&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;i&#34;, &#34;&amp;lt;cmd&amp;gt;Portal jumplist forward&amp;lt;cr&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Next steps&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check out the &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#settings&#34;&gt;default settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Explore the available &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#builtin-queries&#34;&gt;builtin&lt;/a&gt; queries&lt;/li&gt; &#xA; &lt;li&gt;Tune your search results with a custom &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#filters&#34;&gt;filter&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#slots&#34;&gt;slot list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Try combining multiple queries using the &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portal-api&#34;&gt;Portal API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;cbochs/portal.nvim&#34;,&#xA;    -- Optional dependencies&#xA;    dependencies = {&#xA;        &#34;cbochs/grapple.nvim&#34;,&#xA;        &#34;ThePrimeagen/harpoon&#34;&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;cbochs/portal.nvim&#34;,&#xA;    -- Optional dependencies&#xA;    requires = {&#xA;        &#34;cbochs/grapple.nvim&#34;,&#xA;        &#34;ThePrimeagen/harpoon&#34;&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;cbochs/portal.nvim&#34;&#xA;&#34; Optional dependencies&#xA;Plug &#34;cbochs/grapple.nvim&#34;&#xA;Plug &#34;ThePrimeagen/harpoon&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;The following are the default settings for Portal. &lt;strong&gt;Setup is not required&lt;/strong&gt;, but settings may be overridden by passing them as table arguments to the &lt;code&gt;portal#setup&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Default Settings&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;portal&#34;).setup({&#xA;    ---@type &#34;debug&#34; | &#34;info&#34; | &#34;warn&#34; | &#34;error&#34;&#xA;    log_level = &#34;warn&#34;,&#xA;&#xA;    ---The base filter applied to every search.&#xA;    ---@type Portal.SearchPredicate | nil&#xA;    filter = nil,&#xA;&#xA;    ---The maximum number of results for any search.&#xA;    ---@type integer | nil&#xA;    max_results = nil,&#xA;&#xA;    ---The maximum number of items that can be searched.&#xA;    ---@type integer&#xA;    lookback = 100,&#xA;&#xA;    ---An ordered list of keys for labelling portals.&#xA;    ---Labels will be applied in order, or to match slotted results.&#xA;    ---@type string[]&#xA;    labels = { &#34;j&#34;, &#34;k&#34;, &#34;h&#34;, &#34;l&#34; },&#xA;&#xA;    ---Keys used for exiting portal selection. Disable with [{key}] = false&#xA;    ---to `false`.&#xA;    ---@type table&amp;lt;string, boolean&amp;gt;&#xA;    escape = {&#xA;        [&#34;&amp;lt;esc&amp;gt;&#34;] = true,&#xA;    },&#xA;&#xA;    ---The raw window options used for the portal window&#xA;    window_options = {&#xA;        relative = &#34;cursor&#34;,&#xA;        width = 80,&#xA;        height = 3,&#xA;        col = 2,&#xA;        focusable = false,&#xA;        border = &#34;single&#34;,&#xA;        noautocmd = true,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Builtin Queries&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Builtin Queries and Examples&lt;/summary&gt; &#xA; &lt;p&gt;Builin queries have a standardized interface. Each builtin can be accessed via the &lt;code&gt;Portal&lt;/code&gt; command or lua API.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;: the &lt;code&gt;tunnel&lt;/code&gt; method provides the default entry point for searching a location list; the &lt;code&gt;tunnel_forward&lt;/code&gt; and &lt;code&gt;tunnel_backward&lt;/code&gt; are convenience methods for easy keybinds; and the &lt;code&gt;query&lt;/code&gt; method builds a &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalquery&#34;&gt;query&lt;/a&gt; for use in &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portaltunnel&#34;&gt;&lt;code&gt;portal#tunnel&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Command&lt;/strong&gt;: &lt;code&gt;:Portal {builtin} [direction]&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;API&lt;/strong&gt;: &lt;code&gt;require(&#34;portal.builtin&#34;).{builtin}&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;{builtin}.tunnel(opts)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;{builtin}.tunnel_forward(opts)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;{builtin}.tunnel_backward(opts)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;{builtin}.query(opts)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;code&gt;opts?&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalsearchoptions&#34;&gt;&lt;code&gt;Portal.SearchOptions&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;h4&gt;&lt;code&gt;changelist&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;p&gt;Filter, match, and iterate over Neovim&#39;s &lt;a href=&#34;https://neovim.io/doc/user/motion.html#changelist&#34;&gt;&lt;code&gt;:h changelist&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.start&lt;/code&gt;&lt;/strong&gt;: current change index&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.direction&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;backward&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.max_results&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;#settings.labels&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;changelist&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;cursor&lt;/code&gt;&lt;/strong&gt;: the changelist &lt;code&gt;lnum&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;select&lt;/code&gt;&lt;/strong&gt;: uses native &lt;code&gt;g;&lt;/code&gt; and &lt;code&gt;g,&lt;/code&gt; to preserve changelist ordering&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/strong&gt;: the search &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portaldirection&#34;&gt;direction&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/strong&gt;: the absolute distance between the start and current changelist entry&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Open a default search for the changelist&#xA;require(&#34;portal.builtin&#34;).changelist.tunnel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h4&gt;&lt;code&gt;grapple&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;p&gt;Filter, match, and iterate over tagged files from &lt;a href=&#34;https://github.com/cbochs/grapple.nvim&#34;&gt;grapple&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.start&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.direction&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;forward&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.max_results&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;#settings.labels&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;grapple&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/strong&gt;: the file tags&#39;s &lt;code&gt;bufnr&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;cursor&lt;/code&gt;&lt;/strong&gt;: the file tags&#39;s &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;select&lt;/code&gt;&lt;/strong&gt;: uses &lt;code&gt;grapple#select&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;key&lt;/code&gt;&lt;/strong&gt;: the file tags&#39;s key&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Open a default search for grapples&#39;s tags&#xA;require(&#34;portal.builtin&#34;).grapple.tunnel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h4&gt;&lt;code&gt;harpoon&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;p&gt;Filter, match, and iterate over marked files from &lt;a href=&#34;https://github.com/ThePrimeagen/harpoon&#34;&gt;harpoon&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.start&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.direction&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;forward&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.max_results&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;#settings.labels&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;harpoon&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/strong&gt;: the file mark&#39;s &lt;code&gt;bufnr&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;cursor&lt;/code&gt;&lt;/strong&gt;: the file mark&#39;s &lt;code&gt;row&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;select&lt;/code&gt;&lt;/strong&gt;: uses &lt;code&gt;harpoon.ui#nav_file&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;index&lt;/code&gt;&lt;/strong&gt;: the file mark&#39;s index&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Open a default search for harpoon&#39;s marks&#xA;require(&#34;portal.builtin&#34;).harpoon.tunnel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h4&gt;&lt;code&gt;jumplist&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;p&gt;Filter, match, and iterate over Neovim&#39;s &lt;a href=&#34;https://neovim.io/doc/user/motion.html#jumplist&#34;&gt;&lt;code&gt;:h jumplist&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.start&lt;/code&gt;&lt;/strong&gt;: current jump index&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.direction&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;backward&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.max_results&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;#settings.labels&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;jumplist&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/strong&gt;: the jumplist &lt;code&gt;bufnr&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;cursor&lt;/code&gt;&lt;/strong&gt;: the jumplist &lt;code&gt;lnum&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;select&lt;/code&gt;&lt;/strong&gt;: uses native &lt;code&gt;&amp;lt;c-o&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;c-i&amp;gt;&lt;/code&gt; to preserve jumplist ordering&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/strong&gt;: the search &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portaldirection&#34;&gt;direction&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;distance&lt;/code&gt;&lt;/strong&gt;: the absolute distance between the start and current jumplist entry&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Open a default search for the jumplist&#xA;require(&#34;portal.builtin&#34;).jumplist.tunnel()&#xA;&#xA;-- Open a queried search for the jumplist going backwards (&amp;lt;c-o&amp;gt;)&#xA;-- Query for two jumps:&#xA;-- 1. A jump that is in the same buffer as the current buffer&#xA;-- 2. A jump that is in a buffer that has been modified&#xA;require(&#34;portal.builtin&#34;).jumplist.tunnel_backward({&#xA;    slots = {&#xA;        function(value) return value.buffer == vim.fn.bufnr() end,&#xA;        function(value) return vim.api.nvim_buf_get_option(value.buffer, &#34;modified&#34;) end,&#xA;    }&#xA;})&#xA;&#xA;-- Open a filtered search for the jumplist going forwards (&amp;lt;c-i&amp;gt;)&#xA;-- Filters the results based on whether the buffer has been tagged&#xA;-- by grapple.nvim or not. Return a maximum of two results.&#xA;require(&#34;portal.builtin&#34;).jumplist.tunnel_forward({&#xA;    max_results = 2,&#xA;    filter = function(value)&#xA;        return require(&#34;grapple&#34;).exists({ buffer = value.buffer })&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA; &lt;h4&gt;&lt;code&gt;quickfix&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;p&gt;Filter, match, and iterate over Neovim&#39;s &lt;a href=&#34;http://neovim.io/doc/user/quickfix.html&#34;&gt;&lt;code&gt;:h quickfix&lt;/code&gt;&lt;/a&gt; list.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Defaults&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.start&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.direction&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;forward&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;opts.max_results&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;#settings.labels&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Content&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;&#34;quickfix&#34;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/strong&gt;: the quickfix &lt;code&gt;bufnr&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;cursor&lt;/code&gt;&lt;/strong&gt;: the quickfix &lt;code&gt;lnum&lt;/code&gt; and &lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;select&lt;/code&gt;&lt;/strong&gt;: uses &lt;code&gt;nvim_win_set_cursor&lt;/code&gt; for selection&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Open portals for the quickfix list (from the top)&#xA;require(&#34;portal.builtin&#34;).quickfix.tunnel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Portal API&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Portal API and Examples&lt;/summary&gt; &#xA; &lt;h4&gt;&lt;code&gt;portal#tunnel&lt;/code&gt;&lt;/h4&gt; &#xA; &lt;p&gt;The top-level method used for searching, opening, and selecting portals.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;API&lt;/strong&gt;: &lt;code&gt;require(&#34;portal&#34;).tunnel(queries)&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;code&gt;queries&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalquery&#34;&gt;&lt;code&gt;Portal.Query[]&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;details&gt; &#xA;  &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Run a simple filtered search over the jumplist&#xA;local query = require(&#34;portal.builtin&#34;).jumplist.query()&#xA;require(&#34;portal&#34;).tunnel(query)&#xA;&#xA;&#xA;-- Search both the jumplist and quickfix list&#xA;local jumplist = require(&#34;portal.builtin&#34;).jumplist&#xA;local jumplist_query = jumplist.query({ max_results = 1 })&#xA;&#xA;local quickfix = require(&#34;portal.builtin&#34;).quickfix&#xA;local quickfix_query = quickfix.query({ max_results = 1 })&#xA;&#xA;require(&#34;portal&#34;).tunnel({ jumplist_query, quickfix_query })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/details&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Portals&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;strong&gt;portal&lt;/strong&gt; is a labelled floating window showing a snippet of some buffer. The label indicates a key that can be used to navigate directly to the buffer location. A portal may also contain additional information, such as the buffer&#39;s name or the result&#39;s index.&lt;/p&gt; &#xA;&lt;img width=&#34;1043&#34; alt=&#34;portal_screenshot&#34; src=&#34;https://user-images.githubusercontent.com/2467016/222313082-8ae51576-5497-40e8-88d9-466ca504e22d.png&#34;&gt; &#xA;&lt;h2&gt;Search&lt;/h2&gt; &#xA;&lt;p&gt;To begin a search, a &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalquery&#34;&gt;query&lt;/a&gt; (or list of queries) must be provided to portal. Each query will contain a &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#filters&#34;&gt;filtered&lt;/a&gt; location list &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#iterators&#34;&gt;iterator&lt;/a&gt; and (optionally) one or more &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#slots&#34;&gt;slots&lt;/a&gt; to match against.&lt;/p&gt; &#xA;&lt;h3&gt;Filters&lt;/h3&gt; &#xA;&lt;p&gt;During a search, a &lt;strong&gt;filter&lt;/strong&gt; may be applied to remove any unwanted results from being displayed. More specifically, a filter is a &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalsearchpredicate&#34;&gt;predicate&lt;/a&gt; function which accepts some value and returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, indicating whether that value should be kept or discarded.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Filter for results that are in the same buffer&#xA;require(&#34;portal.builtin&#34;).jumplist({&#xA;    filter = function(v) return v.buffer == vim.fn.bufnr() end&#xA;})&#xA;&#xA;-- Filter for results that are in a modified buffer&#xA;require(&#34;portal.builtin&#34;).quickfix({&#xA;    filter = function(v) return vim.api.nvim_buf_get_option(v.buffer, &#34;modified&#34;) end&#xA;})&#xA;&#xA;-- Filter for buffers that have been tagged by grapple.nvim&#xA;require(&#34;portal.builtin&#34;).quickfix({&#xA;    filter = function(v) return require(&#34;grapple&#34;).exists({ buffer = v.buffer }) end&#xA;})&#xA;&#xA;-- Filter for results that are in some &#34;root&#34; directory&#xA;require(&#34;portal.builtin&#34;).jumplist({&#xA;    filter = function(v)&#xA;        local root_files = vim.fs.find({ &#34;.git&#34; }, { upward = true })&#xA;        if #root_files &amp;gt; 0 then&#xA;            local root_dir = vim.fs.dirname(root_files[1])&#xA;            local file_path = vim.api.nvim_buf_get_name(v.buffer)&#xA;            return string.match(file_path, (&#34;^%s&#34;):format(root_dir)) ~= nil&#xA;        end&#xA;        return true&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Slots&lt;/h3&gt; &#xA;&lt;p&gt;To search for an exact set of results, one or more &lt;strong&gt;slots&lt;/strong&gt; may be provided to a query. Each slot will attempt to be matched with its exact order (and index) preserved.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Try to match one result where the buffer is different than the&#xA;-- current buffer&#xA;require(&#34;portal.builtin&#34;).jumplist({&#xA;    slots = function(v) return v.buffer ~= vim.fn.bufnr() end&#xA;})&#xA;&#xA;-- Try to match two results where the buffer is different than the&#xA;-- current buffer&#xA;require(&#34;portal.builtin&#34;).jumplist({&#xA;    slots = {&#xA;        function(v) return v.buffer ~= vim.fn.bufnr() end,&#xA;        function(v) return v.buffer ~= vim.fn.bufnr() end,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Iterators&lt;/h3&gt; &#xA;&lt;p&gt;All searches are performed over an input location list. Portal uses declarative &lt;strong&gt;iterators&lt;/strong&gt; to prepare (&lt;code&gt;map&lt;/code&gt;), refine (&lt;code&gt;filter&lt;/code&gt;), match (&lt;code&gt;reduce&lt;/code&gt;), and &lt;code&gt;collect&lt;/code&gt; list search results. Iterators can be used to create custom queries.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Available operations&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;Iterable operations&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Operations which return a &lt;a href=&#34;https://www.lua.org/pil/7.3.html&#34;&gt;lua-style&lt;/a&gt; iterator.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.next(index?: number)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.iter()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Chainable operations&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Operations which return an iterator.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.start_at(n: integer)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.reverse()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.rrepeat(value: any)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.skip(n: integer)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.step_by(n: integer)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.take(n: integer)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.filter(f: fun(v: any): boolean)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.map(f: fun(v: any, i: any): any | nil&lt;/code&gt;: filters &lt;code&gt;nil&lt;/code&gt; values&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;&lt;strong&gt;Collect operations&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Operations which return a collection (list or table) of values.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.collect(): T[]&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.collect_table(): table&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.reduce(reducer: fun(acc, val, i): any, initial_state: any)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;Iterator.flatten()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Iterator = require(&#34;portal.iterator&#34;)&#xA;&#xA;-- Print all values in a list&#xA;local iter = Iterator:new({ 1, 2, 3})&#xA;for i, v in iter:iter() do&#xA;    print(v)&#xA;end&#xA;&#xA;-- Create the list { 7, 8, 9 }&#xA;Iterator:new({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })&#xA;    :start_at(7)&#xA;    :take(3)&#xA;    :collect()&#xA;&#xA;-- Create the list { 2, 4, 6, 8, 10 }&#xA;Iterator:new({ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 })&#xA;    :filter(function(v) return v % 2 == 0 end)&#xA;    :collect()&#xA;&#xA;-- Create the table { a = 1, b = 2 }&#xA;Iterator:new({ &#34;a&#34;, &#34;b&#34; })&#xA;    :map(function(v, i) return { v, i } end)&#xA;    :collect_table()&#xA;&#xA;-- Create a filtered and mapped table { 4, 6 }&#xA;Iterator:new({ 1, 2, 3})&#xA;    :filter(function(v) return v &amp;gt; 1 end)&#xA;    :map(function(v) return v * 2 end)&#xA;    :collect()&#xA;&#xA;-- Create the same filtered and mapped table { 4, 6 }&#xA;Iterator:new({ 1, 2, 3 })&#xA;    :map(function(v) if v &amp;gt; 1 then return v * 2 end end)&#xA;    :collect()&#xA;&#xA;-- Create the repeated list { 1, 1, 1 }&#xA;Iterator:rrepeat(1)&#xA;    :take(3)&#xA;    :collect()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Portal Types&lt;/h2&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Type Definitions&lt;/summary&gt; &#xA; &lt;h3&gt;&lt;code&gt;Portal.SearchOptions&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;p&gt;Options available for tuning a search query. See the &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#builtin-queries&#34;&gt;builtins&lt;/a&gt; section for information regarding search option defaults.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;table&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;start&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;integer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;direction&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portaldirection&#34;&gt;&lt;code&gt;Portal.Direction&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;max_results&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;integer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalsearchpredicate&#34;&gt;&lt;code&gt;Portal.SearchPredicate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;slots&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalsearchpredicate&#34;&gt;&lt;code&gt;Portal.SearchPredicate[]&lt;/code&gt;&lt;/a&gt; | &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;&lt;code&gt;Portal.Direction&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;p&gt;Used for indicating whether a search should be performed forwards or backwards.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;enum&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#34;forward&#34;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;&#34;backward&#34;&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;&lt;code&gt;Portal.SearchPredicate&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;p&gt;A specialized &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalpredicate&#34;&gt;predicate&lt;/a&gt; where the value argument provided is a &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalcontent&#34;&gt;&lt;code&gt;Portal.Content&lt;/code&gt;&lt;/a&gt; result.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;fun(c: Portal.Content): boolean&lt;/code&gt;&lt;/p&gt; &#xA; &lt;h3&gt;&lt;code&gt;Portal.Query&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;p&gt;Named tuple of &lt;code&gt;(source, slots)&lt;/code&gt;. Used as the input to &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portaltunnel&#34;&gt;&lt;code&gt;portal#tunnel&lt;/code&gt;&lt;/a&gt;. When no &lt;code&gt;slots&lt;/code&gt; are present, the &lt;code&gt;source&lt;/code&gt; iterator will be simply be collected and presented as the search results.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;table&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;source&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#iterators&#34;&gt;&lt;code&gt;Portal.Iterator&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;slots&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalsearchpredicate&#34;&gt;&lt;code&gt;Portal.SearchPredicate[]&lt;/code&gt;&lt;/a&gt; | &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;&lt;code&gt;Portal.Content&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;p&gt;Named tuple of &lt;code&gt;(type, buffer, cursor, select)&lt;/code&gt; used in opening and selecting a portal location. &lt;strong&gt;May contain&lt;/strong&gt; any additional data to aide in filtering, querying, and selecting a portal. See the &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#builtin-queries&#34;&gt;builtins&lt;/a&gt; section for information on which additional fields are present.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;table&lt;/code&gt;&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;type&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;string&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;integer&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;cursor&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;{ row: integer, col: integer }&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;&lt;code&gt;select&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;fun(c: Portal.Content)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;anything else&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;h3&gt;&lt;code&gt;Portal.Predicate&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;p&gt;Basic function type used for &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#filters&#34;&gt;filtering&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#slots&#34;&gt;matching&lt;/a&gt; values produced from an &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#iterators&#34;&gt;iterator&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;fun(v: any): boolean&lt;/code&gt;&lt;/p&gt; &#xA; &lt;h3&gt;&lt;code&gt;Portal.QueryGenerator&lt;/code&gt;&lt;/h3&gt; &#xA; &lt;p&gt;Generating function which transforms an input set of &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalsearchoptions&#34;&gt;&lt;code&gt;Portal.SearchOptions&lt;/code&gt;&lt;/a&gt; into a proper &lt;a href=&#34;https://raw.githubusercontent.com/cbochs/portal.nvim/main/#portalquery&#34;&gt;&lt;code&gt;Portal.Query&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;: &lt;code&gt;fun(o: Portal.SearchOptions, s: Portal.Settings): Portal.Query&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
</feed>