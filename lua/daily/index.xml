<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-11T01:35:07Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alpha2phi/neovim-for-beginner</title>
    <updated>2022-12-11T01:35:07Z</updated>
    <id>tag:github.com,2022-12-11:/alpha2phi/neovim-for-beginner</id>
    <link href="https://github.com/alpha2phi/neovim-for-beginner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A configuration for Neovim beginners.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neovim-for-beginner&lt;/h1&gt; &#xA;&lt;p&gt;Companion code for the &lt;a href=&#34;https://alpha2phi.medium.com/learn-neovim-the-practical-way-8818fcf4830f#545a&#34;&gt;Medium Neovim for Beginners series.&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>danymat/neogen</title>
    <updated>2022-12-11T01:35:07Z</updated>
    <id>tag:github.com,2022-12-11:/danymat/neogen</id>
    <link href="https://github.com/danymat/neogen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A better annotation generator. Supports multiple languages and annotation conventions.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://user-images.githubusercontent.com/5306901/141127528-ddff21bb-8da3-43da-8efe-9494a4f231d2.png&#34; width=&#34;250&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;h1&gt;Neogen - Your Annotation Toolkit&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://neovim.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim%200.6.1+-green.svg?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://www.lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1&gt;Table Of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#supported-languages&#34;&gt;Supported Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#adding-languages&#34;&gt;Adding Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#gifs&#34;&gt;GIFS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/#support&#34;&gt;Support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create annotations with one keybind, and jump your cursor in the inserted annotation&lt;/li&gt; &#xA; &lt;li&gt;Defaults for multiple languages and annotation conventions&lt;/li&gt; &#xA; &lt;li&gt;Extremely customizable and extensible&lt;/li&gt; &#xA; &lt;li&gt;Written in lua (and uses Tree-sitter)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5306901/135055065-08def797-e5af-49c9-b530-dd5973045c4e.gif&#34; alt=&#34;screen2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use your favorite package manager to install Neogen, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;danymat/neogen&#34;,&#xA;    config = function()&#xA;        require(&#39;neogen&#39;).setup {}&#xA;    end,&#xA;    requires = &#34;nvim-treesitter/nvim-treesitter&#34;,&#xA;    -- Uncomment next line if you want to follow only stable versions&#xA;    -- tag = &#34;*&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to keep it simple, you can use the &lt;code&gt;:Neogen&lt;/code&gt; command:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; will generate annotation for the function you&#39;re inside&#xA;:Neogen&#xA;&#34; or you can force a certain type of annotation.&#xA;&#34; It&#39;ll find the next upper node that matches the type&#xA;&#34; E.g if you&#39;re on a method of a class and do `:Neogen class`, it&#39;ll find the class declaration and generate the annotation.&#xA;:Neogen func|class|type|...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you like to use the lua API, I exposed a function to generate the annotations.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neogen&#39;).generate()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can bind it to your keybind of choice, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local opts = { noremap = true, silent = true }&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;Leader&amp;gt;nf&#34;, &#34;:lua require(&#39;neogen&#39;).generate()&amp;lt;CR&amp;gt;&#34;, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling the &lt;code&gt;generate&lt;/code&gt; function without any parameters will try to generate annotations for the current function.&lt;/p&gt; &#xA;&lt;p&gt;You can provide some options for the generate, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neogen&#39;).generate({&#xA;    type = &#34;func&#34; -- the annotation type to generate. Currently supported: func, class, type, file&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, I can add an other keybind to generate class annotations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local opts = { noremap = true, silent = true }&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;Leader&amp;gt;nc&#34;, &#34;:lua require(&#39;neogen&#39;).generate({ type = &#39;class&#39; })&amp;lt;CR&amp;gt;&#34;, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Snippet support&lt;/h3&gt; &#xA;&lt;p&gt;We added snippet support, and we provide defaults for some snippet engines. And this is done via the &lt;code&gt;snippet_engine&lt;/code&gt; option in neogen&#39;s setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;snippet_engine&lt;/code&gt; option will use provided engine to place the annotations:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently supported: &lt;code&gt;luasnip&lt;/code&gt;, &lt;code&gt;snippy&lt;/code&gt;, &lt;code&gt;vsnip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neogen&#39;).setup({ snippet_engine = &#34;luasnip&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s all ! You can now use your favorite snippet engine to control the annotation, like jumping between placeholders.&lt;/p&gt; &#xA;&lt;p&gt;Or, if you want to return the snippet as a string (to integrate with other snippet engines, for example), you can do it by using the &lt;code&gt;return_snippet&lt;/code&gt; option in the &lt;code&gt;generate&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;return_snippet&lt;/code&gt; option will return the annotations as lsp snippets.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local snippet, row, col = require(&#39;neogen&#39;).generate({ snippet_engine = &#34;luasnip&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then pass the snippet to the plugin&#39;s snippet expansion function.&lt;/p&gt; &#xA;&lt;h3&gt;Default cycling support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that this part is only useful if you don&#39;t use the snippets integration.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t want to use a snippet engine with Neogen, you can leverage Neogen&#39;s native jumps between placeholders. To map some keys to the cycling feature, you can do like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local opts = { noremap = true, silent = true }&#xA;vim.api.nvim_set_keymap(&#34;i&#34;, &#34;&amp;lt;C-l&amp;gt;&#34;, &#34;:lua require(&#39;neogen&#39;).jump_next&amp;lt;CR&amp;gt;&#34;, opts)&#xA;vim.api.nvim_set_keymap(&#34;i&#34;, &#34;&amp;lt;C-h&amp;gt;&#34;, &#34;:lua require(&#39;neogen&#39;).jump_prev&amp;lt;CR&amp;gt;&#34;, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if you want to use a key that&#39;s already used for completion purposes, take a look at the code snippet here:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;nvim-cmp&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local cmp = require(&#39;cmp&#39;)&#xA;local neogen = require(&#39;neogen&#39;)&#xA;&#xA;cmp.setup {&#xA;    ...&#xA;&#xA;    -- You must set mapping if you want.&#xA;    mapping = {&#xA;        [&#34;&amp;lt;tab&amp;gt;&#34;] = cmp.mapping(function(fallback)&#xA;            if neogen.jumpable() then&#xA;                neogen.jump_next()&#xA;            else&#xA;                fallback()&#xA;            end&#xA;        end, {&#xA;            &#34;i&#34;,&#xA;            &#34;s&#34;,&#xA;        }),&#xA;        [&#34;&amp;lt;S-tab&amp;gt;&#34;] = cmp.mapping(function(fallback)&#xA;            if neogen.jumpable(true) then&#xA;                neogen.jump_prev()&#xA;            else&#xA;                fallback()&#xA;            end&#xA;        end, {&#xA;            &#34;i&#34;,&#xA;            &#34;s&#34;,&#xA;        }),&#xA;    },&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neogen&#39;).setup {&#xA;    enabled = true,             --if you want to disable Neogen&#xA;    input_after_comment = true, -- (default: true) automatic jump (with insert mode) on inserted annotation&#xA;    -- jump_map = &#34;&amp;lt;C-e&amp;gt;&#34;       -- (DROPPED SUPPORT, see [here](#cycle-between-annotations) !) The keymap in order to jump in the annotation fields (in insert mode)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re not satisfied with the default configuration for a language, you can change the defaults like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neogen&#39;).setup {&#xA;    enabled = true,&#xA;    languages = {&#xA;        lua = {&#xA;            template = {&#xA;                annotation_convention = &#34;emmylua&#34; -- for a full list of annotation_conventions, see supported-languages below,&#xA;                ... -- for more template configurations, see the language&#39;s configuration file in configurations/{lang}.lua&#xA;                }&#xA;        },&#xA;        ...&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Languages&lt;/h2&gt; &#xA;&lt;p&gt;There is a list of supported languages and fields, with their annotation style&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Languages&lt;/th&gt; &#xA;   &lt;th&gt;Annotation Conventions&lt;/th&gt; &#xA;   &lt;th&gt;Supported annotation types&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sh&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://google.github.io/styleguide/shellguide.html&#34;&gt;Google Style Guide&lt;/a&gt; (&lt;code&gt;&#34;google_bash&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.doxygen.nl/manual/commands.html&#34;&gt;Doxygen&lt;/a&gt; (&lt;code&gt;&#34;doxygen&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;csharp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.microsoft.com/fr-fr/dotnet/csharp/language-reference/xmldoc/&#34;&gt;Xmldoc&lt;/a&gt; (&lt;code&gt;&#34;xmldoc&#34;&lt;/code&gt;) &lt;br&gt; &lt;a href=&#34;https://www.doxygen.nl/manual/commands.html&#34;&gt;Doxygen&lt;/a&gt; (&lt;code&gt;&#34;doxygen&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cpp&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.doxygen.nl/manual/commands.html&#34;&gt;Doxygen&lt;/a&gt; (&lt;code&gt;&#34;doxygen&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://go.dev/blog/godoc&#34;&gt;GoDoc&lt;/a&gt; (&lt;code&gt;&#34;godoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;java&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.oracle.com/javase/1.5.0/docs/tooldocs/windows/javadoc.html#documentationcomments&#34;&gt;Javadoc&lt;/a&gt; (&lt;code&gt;&#34;javadoc&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;javascript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jsdoc.app&#34;&gt;JSDoc&lt;/a&gt; (&lt;code&gt;&#34;jsdoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;javascriptreact&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jsdoc.app&#34;&gt;JSDoc&lt;/a&gt; (&lt;code&gt;&#34;jsdoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kotlinlang.org/docs/kotlin-doc.html&#34;&gt;KDoc&lt;/a&gt; (&lt;code&gt;&#34;kdoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://emmylua.github.io/&#34;&gt;Emmylua&lt;/a&gt; (&lt;code&gt;&#34;emmylua&#34;&lt;/code&gt;)&lt;br&gt; &lt;a href=&#34;https://stevedonovan.github.io/ldoc/manual/doc.md.html&#34;&gt;Ldoc&lt;/a&gt; (&lt;code&gt;&#34;ldoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.phpdoc.org/3.0/guide/references/phpdoc/index.html&#34;&gt;Php-doc&lt;/a&gt; (&lt;code&gt;&#34;phpdoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://google.github.io/styleguide/pyguide.html&#34;&gt;Google docstrings&lt;/a&gt; (&lt;code&gt;&#34;google_docstrings&#34;&lt;/code&gt;) &lt;br&gt; &lt;a href=&#34;https://numpydoc.readthedocs.io/en/latest/format.html&#34;&gt;Numpydoc&lt;/a&gt; (&lt;code&gt;&#34;numpydoc&#34;&lt;/code&gt;) &lt;br&gt; &lt;a href=&#34;https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html&#34;&gt;reST&lt;/a&gt; (&lt;code&gt;&#34;reST&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://yardoc.org/index.html&#34;&gt;YARD&lt;/a&gt; (&lt;code&gt;&#34;yard&#34;&lt;/code&gt;) &lt;br&gt; &lt;a href=&#34;https://github.com/ruby/rdoc&#34;&gt;Rdoc&lt;/a&gt; (&lt;code&gt;&#34;rdoc&#34;&lt;/code&gt;) &lt;br&gt; &lt;a href=&#34;http://tomdoc.org&#34;&gt;Tomdoc&lt;/a&gt; (&lt;code&gt;&#34;tomdoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://doc.rust-lang.org/rustdoc/what-is-rustdoc.html&#34;&gt;RustDoc&lt;/a&gt; (&lt;code&gt;&#34;rustdoc&#34;&lt;/code&gt;) &lt;br&gt; &lt;a href=&#34;https://stackoverflow.com/questions/30009650/how-do-you-document-function-arguments&#34;&gt;Alternative&lt;/a&gt; (&lt;code&gt;&#34;rust_alternative&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;typescript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jsdoc.app&#34;&gt;JSDoc&lt;/a&gt; (&lt;code&gt;&#34;jsdoc&#34;&lt;/code&gt;) &lt;br&gt; &lt;a href=&#34;https://tsdoc.org&#34;&gt;TSDoc&lt;/a&gt; (&lt;code&gt;&#34;tsdoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;typescriptreact&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jsdoc.app&#34;&gt;JSDoc&lt;/a&gt; (&lt;code&gt;&#34;jsdoc&#34;&lt;/code&gt;) &lt;br&gt; &lt;a href=&#34;https://tsdoc.org&#34;&gt;TSDoc&lt;/a&gt; (&lt;code&gt;&#34;tsdoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jsdoc.app&#34;&gt;JSDoc&lt;/a&gt; (&lt;code&gt;&#34;jsdoc&#34;&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;func&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Adding Languages&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Using the defaults to generate a new language support: &lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/docs/adding-languages.md&#34;&gt;Adding Languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;(advanced) Only if the defaults aren&#39;t enough, please see here: &lt;a href=&#34;https://raw.githubusercontent.com/danymat/neogen/main/docs/advanced-integration.md&#34;&gt;Advanced Integration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;GIFS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5306901/135055052-6ee6a5e8-3f30-4c41-872e-e624e21a1e98.gif&#34; alt=&#34;screen1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5306901/135055174-2a9d8b88-7b23-4513-af91-135d885783ec.gif&#34; alt=&#34;screen3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5306901/135056308-9808c231-b1fd-4c41-80bd-85a08d7286dd.gif&#34; alt=&#34;screen4&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Binx, for making that gorgeous logo for free! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/Binx-Codes/&#34;&gt;Github&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/u/binxatmachine&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;You like my plugin and want to express your gratitude 👼 ? You can suppport me by donating the equivalent of my morning coffee (no minimum required). I would really appreciate your support as it can motivate me to continue this journey 💝&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/danymat&#34;&gt;Donate here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jessarcher/dotfiles</title>
    <updated>2022-12-11T01:35:07Z</updated>
    <id>tag:github.com,2022-12-11:/jessarcher/dotfiles</id>
    <link href="https://github.com/jessarcher/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;$HOME sweet $HOME&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dotfiles&lt;/h1&gt; &#xA;&lt;p&gt;Home sweet home&lt;/p&gt;</summary>
  </entry>
</feed>