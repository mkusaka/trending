<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-04T01:38:23Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>echasnovski/mini.clue</title>
    <updated>2023-08-04T01:38:23Z</updated>
    <id>tag:github.com,2023-08-04:/echasnovski/mini.clue</id>
    <link href="https://github.com/echasnovski/mini.clue" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Show next key clues. Part of &#39;mini.nvim&#39; library.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/echasnovski/media/raw/main/mini.nvim/logo/logo_clue.png&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/echasnovski/mini.nvim&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h3&gt;Show next key clues&lt;/h3&gt; &#xA;&lt;p&gt;See more details in &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.clue/main/#features&#34;&gt;Features&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.clue/main/doc/mini-clue.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;⦿ This is a part of &lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt; library. Please use &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-clue.md&#34;&gt;this link&lt;/a&gt; if you want to mention this module.&lt;/p&gt; &#xA;&lt;p&gt;⦿ All contributions (issues, pull requests, discussions, etc.) are done inside of &#39;mini.nvim&#39;.&lt;/p&gt; &#xA;&lt;p&gt;⦿ See the repository page to learn about common design principles and configuration recipes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/CONTRIBUTING.md&#34;&gt;contributing guides of &#39;mini.nvim&#39;&lt;/a&gt; or leave a Github star for &#39;mini.nvim&#39; project and/or any its standalone Git repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/assets/24854248/ea931966-067c-48af-93e9-36e9b8afb0ae&#34;&gt;https://github.com/echasnovski/mini.nvim/assets/24854248/ea931966-067c-48af-93e9-36e9b8afb0ae&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Implement custom key query process to reach target key combination:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;Starts after customizable opt-in triggers (mode + keys).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Each key press narrows down set of possible targets.&lt;/p&gt; &lt;p&gt;Pressing &lt;code&gt;&amp;lt;BS&amp;gt;&lt;/code&gt; removes previous user entry.&lt;/p&gt; &lt;p&gt;Pressing &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;C-c&amp;gt;&lt;/code&gt; leads to an early stop.&lt;/p&gt; &lt;p&gt;Doesn&#39;t depend on &#39;timeoutlen&#39; and has basic support for &#39;langmap&#39;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Ends when there is at most one target left or user pressed &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;. Results into emulating pressing all query keys plus possible postkeys.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Show window (after configurable delay) with clues. It lists available next keys along with their descriptions (auto generated from descriptions present keymaps and user-supplied clues; preferring the former).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configurable &#34;postkeys&#34; for key combinations - keys which will be emulated after combination is reached during key query process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide customizable sets of clues for common built-in keys/concepts:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;g&lt;/code&gt; key.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;z&lt;/code&gt; key.&lt;/li&gt; &#xA;   &lt;li&gt;Window commands.&lt;/li&gt; &#xA;   &lt;li&gt;Built-in completion.&lt;/li&gt; &#xA;   &lt;li&gt;Marks.&lt;/li&gt; &#xA;   &lt;li&gt;Registers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lua functions to disable/enable triggers globally or per buffer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more details see these tags in help:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;*MiniClue-key-query-process*&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*MiniClue-examples*&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*MiniClue.config*&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*MiniClue.gen_clues*&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Works on all supported versions but using Neovim&amp;gt;=0.9 is recommended.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There is no functionality to create mappings in order to clearly separate two different tasks.&lt;/p&gt; &lt;p&gt;The best suggested practice is to manually create mappings with descriptions (&lt;code&gt;desc&lt;/code&gt; field in options), as they will be automatically used inside clue window.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Triggers are implemented as special buffer-local mappings. This leads to several caveats:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;They will override same regular buffer-local mappings and have precedence over global one.&lt;/p&gt; &lt;p&gt;Example: having set &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; as Normal mode trigger means that there should not be another &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; mapping.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;They need to be the latest created buffer-local mappings or they will not function properly. Most common indicator of this is that some mapping starts to work only after clue window is shown.&lt;/p&gt; &lt;p&gt;Example: &lt;code&gt;g&lt;/code&gt; is set as Normal mode trigger, but &lt;code&gt;gcc&lt;/code&gt; from &#39;mini.comment&#39; doesn&#39;t work right away. This is probably because there are some other buffer-local mappings starting with &lt;code&gt;g&lt;/code&gt; which were created after mapping for &lt;code&gt;g&lt;/code&gt; trigger. Most common places for this are in LSP server&#39;s &lt;code&gt;on_attach&lt;/code&gt; or during tree-sitter start in buffer.&lt;/p&gt; &lt;p&gt;To check if trigger is the most recent buffer-local mapping, execute &lt;code&gt;:&amp;lt;mode-char&amp;gt;map &amp;lt;trigger-keys&amp;gt;&lt;/code&gt; (like &lt;code&gt;:nmap g&lt;/code&gt; for previous example). Mapping for trigger should be the first listed.&lt;/p&gt; &lt;p&gt;This module makes the best effort to work out of the box and cover most common cases, but it is not full proof. The solution here is to ensure that triggers are created after making all buffer-local mappings: run either &lt;code&gt;MiniClue.setup()&lt;/code&gt; or &lt;code&gt;MiniClue.ensure_buf_triggers()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Descriptions from existing mappings take precedence over user-supplied clues. This is to ensure that information shown in clue window is as relevant as possible. To add/customize description of an already existing mapping, use &lt;code&gt;MiniClue.set_mapping_desc()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Due to technical difficulties, there is no full proof support for Operator-pending mode triggers (like &lt;code&gt;a&lt;/code&gt;/&lt;code&gt;i&lt;/code&gt; from &#39;mini.ai&#39;):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Doesn&#39;t work as part of a command in &#34;temporary Normal mode&#34; (like after &lt;code&gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; in Insert mode) due to implementation difficulties.&lt;/li&gt; &#xA;   &lt;li&gt;Can have unexpected behavior with custom operators.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Has (mostly solved) issues with macros:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;All triggers are disabled during macro recording due to technical reasons.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;@&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt; keys are specially mapped inside &lt;code&gt;MiniClue.setup()&lt;/code&gt; to temporarily disable triggers.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Config quick start&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local miniclue = require(&#39;mini.clue&#39;)&#xA;miniclue.setup({&#xA;  triggers = {&#xA;    -- Leader triggers&#xA;    { mode = &#39;n&#39;, keys = &#39;&amp;lt;Leader&amp;gt;&#39; },&#xA;    { mode = &#39;x&#39;, keys = &#39;&amp;lt;Leader&amp;gt;&#39; },&#xA;&#xA;    -- Built-in completion&#xA;    { mode = &#39;i&#39;, keys = &#39;&amp;lt;C-x&amp;gt;&#39; },&#xA;&#xA;    -- `g` key&#xA;    { mode = &#39;n&#39;, keys = &#39;g&#39; },&#xA;    { mode = &#39;x&#39;, keys = &#39;g&#39; },&#xA;&#xA;    -- Marks&#xA;    { mode = &#39;n&#39;, keys = &#34;&#39;&#34; },&#xA;    { mode = &#39;n&#39;, keys = &#39;`&#39; },&#xA;    { mode = &#39;x&#39;, keys = &#34;&#39;&#34; },&#xA;    { mode = &#39;x&#39;, keys = &#39;`&#39; },&#xA;&#xA;    -- Registers&#xA;    { mode = &#39;n&#39;, keys = &#39;&#34;&#39; },&#xA;    { mode = &#39;x&#39;, keys = &#39;&#34;&#39; },&#xA;    { mode = &#39;i&#39;, keys = &#39;&amp;lt;C-r&amp;gt;&#39; },&#xA;    { mode = &#39;c&#39;, keys = &#39;&amp;lt;C-r&amp;gt;&#39; },&#xA;&#xA;    -- Window commands&#xA;    { mode = &#39;n&#39;, keys = &#39;&amp;lt;C-w&amp;gt;&#39; },&#xA;&#xA;    -- `z` key&#xA;    { mode = &#39;n&#39;, keys = &#39;z&#39; },&#xA;    { mode = &#39;x&#39;, keys = &#39;z&#39; },&#xA;  },&#xA;&#xA;  clues = {&#xA;    -- Enhance this by adding descriptions for &amp;lt;Leader&amp;gt; mapping groups&#xA;    miniclue.gen_clues.builtin_completion(),&#xA;    miniclue.gen_clues.g(),&#xA;    miniclue.gen_clues.marks(),&#xA;    miniclue.gen_clues.registers(),&#xA;    miniclue.gen_clues.windows(),&#xA;    miniclue.gen_clues.z(),&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin can be installed as part of &#39;mini.nvim&#39; library (&lt;strong&gt;recommended&lt;/strong&gt;) or as a standalone Git repository.&lt;/p&gt; &#xA;&lt;!-- TODO: Uncomment use of `stable` branch before 0.10.0 release --&gt; &#xA;&lt;!-- There are two branches to install from: --&gt; &#xA;&lt;p&gt;During beta-testing phase there is only one branch to install from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default, &lt;strong&gt;recommended&lt;/strong&gt;) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - `stable` will be updated only upon releases with code tested during public beta-testing phase in `main` branch. --&gt; &#xA;&lt;p&gt;Here are code snippets for some common installation methods (use only one):&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;!-- &lt;td rowspan=2&gt;&#39;mini.nvim&#39; library&lt;/td&gt; --&gt; &#xA;    &lt;td rowspan=&#34;1&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = false },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;!-- &lt;tr&gt; --&gt; &#xA;   &lt;!--     &lt;td&gt;Stable&lt;/td&gt; &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; --&gt; &#xA;   &lt;!-- &lt;/tr&gt; --&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;!-- &lt;td rowspan=2&gt;Standalone plugin&lt;/td&gt; --&gt; &#xA;    &lt;td rowspan=&#34;1&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.clue&#39;, version = false },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;!-- &lt;tr&gt; --&gt; &#xA;   &lt;!--     &lt;td&gt;Stable&lt;/td&gt; &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.clue&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; --&gt; &#xA;   &lt;!-- &lt;/tr&gt; --&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;!-- &lt;td rowspan=2&gt;&#39;mini.nvim&#39; library&lt;/td&gt; --&gt; &#xA;    &lt;td rowspan=&#34;1&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;!-- &lt;tr&gt; --&gt; &#xA;   &lt;!--     &lt;td&gt;Stable&lt;/td&gt; &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.nvim&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; --&gt; &#xA;   &lt;!-- &lt;/tr&gt; --&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;!-- &lt;td rowspan=2&gt;Standalone plugin&lt;/td&gt; &lt;td&gt;Main&lt;/td&gt; &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.clue&#39;&lt;/code&gt;&lt;/td&gt; --&gt; &#xA;    &lt;td rowspan=&#34;1&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.clue&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;!-- &lt;tr&gt; --&gt; &#xA;   &lt;!--     &lt;td&gt;Stable&lt;/td&gt; &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.clue&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; --&gt; &#xA;   &lt;!-- &lt;/tr&gt; --&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;!-- &lt;td rowspan=2&gt;&#39;mini.nvim&#39; library&lt;/td&gt; --&gt; &#xA;    &lt;td rowspan=&#34;1&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;!-- &lt;tr&gt; --&gt; &#xA;   &lt;!--     &lt;td&gt;Stable&lt;/td&gt; &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; --&gt; &#xA;   &lt;!-- &lt;/tr&gt; --&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;!-- &lt;td rowspan=2&gt;Standalone plugin&lt;/td&gt; &lt;td&gt;Main&lt;/td&gt; &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.clue&#39;&lt;/code&gt;&lt;/td&gt; --&gt; &#xA;    &lt;td rowspan=&#34;1&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.clue&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;!-- &lt;tr&gt; --&gt; &#xA;   &lt;!--     &lt;td&gt;Stable&lt;/td&gt; &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.clue&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; --&gt; &#xA;   &lt;!-- &lt;/tr&gt; --&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call &lt;code&gt;require(&#39;mini.clue&#39;).setup()&lt;/code&gt; to enable its functionality. &lt;strong&gt;Needs to have triggers configured&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Default config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- No need to copy this inside `setup()`. Will be used automatically.&#xA;{&#xA;  -- Array of extra clues to show&#xA;  clues = {},&#xA;&#xA;  -- Array of opt-in triggers which start custom key query process.&#xA;  -- **Needs to have something in order to show clues**.&#xA;  triggers = {},&#xA;&#xA;  -- Clue window settings&#xA;  window = {&#xA;    -- Floating window config&#xA;    config = {},&#xA;&#xA;    -- Delay before showing clue window&#xA;    delay = 1000,&#xA;&#xA;    -- Keys to scroll inside the clue window&#xA;    scroll_down = &#39;&amp;lt;C-d&amp;gt;&#39;,&#xA;    scroll_up = &#39;&amp;lt;C-u&amp;gt;&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;folke/which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anuvyklack/hydra.nvim&#34;&gt;anuvyklack/hydra.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>JonnyBro/beatrun</title>
    <updated>2023-08-04T01:38:23Z</updated>
    <id>tag:github.com,2023-08-04:/JonnyBro/beatrun</id>
    <link href="https://github.com/JonnyBro/beatrun" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beatrun&lt;/h1&gt; &#xA;&lt;p&gt;Modified Beatrun&#39;s source code.&lt;br&gt;&lt;br&gt; There are lua modules, they are for Discord Rich Presence and Steam Presence to work, if you want pure Lua just don&#39;t extract them, but your Level and Map will not be shown in your Discord and Steam statuses.&lt;br&gt;&lt;br&gt; This version should works on any version of the game (Base version is known good, Chromium has some issues and I don&#39;t have time to fix them).&lt;/p&gt; &#xA;&lt;h2&gt;Animations&lt;/h2&gt; &#xA;&lt;p&gt;You can use &lt;em&gt;Beatrun Animations Installer&lt;/em&gt; if you want to change your animations, there are new ones (from Beatrun Reanimated project) and OG (but fixed) ones, OG is default.&lt;br&gt; Installer source can be found &lt;a href=&#34;https://raw.githubusercontent.com/JonnyBro/beatrun/master/BeatrunAnimInstaller/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Delete &lt;code&gt;beatrun&lt;/code&gt; folder in &lt;em&gt;addons&lt;/em&gt; if you have one!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;beatrun&lt;/code&gt; folder to &lt;em&gt;your_game_folder/garrysmod/addons&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Extract &lt;code&gt;lua&lt;/code&gt; folder to &lt;em&gt;your_game_folder/garrysmod&lt;/em&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;lua&lt;/code&gt; folder constains modules for Discord Rich Presense and Steam Presence to work. They are open source, visit &lt;a href=&#34;https://github.com/fluffy-servers/gmod-discord-rpc&#34;&gt;this&lt;/a&gt; to see the sources of DRP and &lt;a href=&#34;https://github.com/YuRaNnNzZZ/gmcl_steamrichpresencer&#34;&gt;this&lt;/a&gt; for SP.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Changes added by me&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://courses.beatrun.ru&#34;&gt;Custom online courses database&lt;/a&gt;, it&#39;s free 🤯!&lt;/li&gt; &#xA; &lt;li&gt;Configurations menu - You can find it in the tool menu, in the &lt;em&gt;Beatrun&lt;/em&gt; Category!&lt;br&gt; All of the settings below can be changed in the configuration menu.&lt;/li&gt; &#xA; &lt;li&gt;Allow Overdrive usage on the server - &lt;code&gt;Beatrun_AllowOverdriveInMultiplayer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Toggle between old and new (like in ME) Kick-Glitch - &lt;code&gt;Beatrun_OldKickGlitch&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Change HUD&#39;s colors - &lt;code&gt;Beatrun_HUDTextColor&lt;/code&gt;, &lt;code&gt;Beatrun_HUDCornerColor&lt;/code&gt;, &lt;code&gt;Beatrun_HUDFloatingXPColor&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Allow players to spawn props without admin rights - &lt;code&gt;Beatrun_AllowPropSpawn&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Disable grapple ability - &lt;code&gt;Beatrun_DisableGrapple&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Discord Rich Presence (extract &lt;code&gt;lua&lt;/code&gt; folder to &lt;code&gt;garrysmod&lt;/code&gt;, along side with &lt;code&gt;addons&lt;/code&gt; folder).&lt;/li&gt; &#xA; &lt;li&gt;Small camera punch when diving.&lt;/li&gt; &#xA; &lt;li&gt;Ability to remove ziplines that created with &lt;em&gt;Zipline Gun&lt;/em&gt; - RMB.&lt;/li&gt; &#xA; &lt;li&gt;Removed your SteamID from right corner, because I can.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Fixes and changes from previous version&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Beatrun_DisableGrapple&lt;/code&gt; - Disables grapple ability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;All changes and fixes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Course saving works with compression and without.&lt;/li&gt; &#xA; &lt;li&gt;Quick turnaround only with &lt;code&gt;Unarmed&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Fixed leaderboard sorting in gamemodes.&lt;/li&gt; &#xA; &lt;li&gt;Fixed grapple usage in courses and gamemodes.&lt;/li&gt; &#xA; &lt;li&gt;Fixed crash in DataTheft when touching data bank.&lt;/li&gt; &#xA; &lt;li&gt;Fixed error on course load.&lt;/li&gt; &#xA; &lt;li&gt;Fixed collisions issues.&lt;/li&gt; &#xA; &lt;li&gt;Fixed and tweaked player-player weapon damage.&lt;/li&gt; &#xA; &lt;li&gt;Proper Kick Glitch (Like in original ME: &lt;a href=&#34;https://www.youtube.com/watch?v=zK5y3NBUStc&#34;&gt;https://www.youtube.com/watch?v=zK5y3NBUStc&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Tweaked safety roll, now you can roll under things.&lt;/li&gt; &#xA; &lt;li&gt;You can now dive to your death =).&lt;/li&gt; &#xA; &lt;li&gt;Grapple fixes. Now it moves with entity it attached to and other players can see it.&lt;/li&gt; &#xA; &lt;li&gt;More reliable grappling.&lt;/li&gt; &#xA; &lt;li&gt;Merged some anims into 1 file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Gamemodes menu&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Related&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/JonnyBro/beatrun-anims&#34;&gt;Beatrun-Anims&lt;/a&gt; - Sources of animations from Beatrun.&lt;/p&gt; &#xA;&lt;h1&gt;Credits &amp;lt;3&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;modeltexturesbones - Beatrun Reanimated project.&lt;/li&gt; &#xA; &lt;li&gt;All contributors.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Marskey/telescope-sg</title>
    <updated>2023-08-04T01:38:23Z</updated>
    <id>tag:github.com,2023-08-04:/Marskey/telescope-sg</id>
    <link href="https://github.com/Marskey/telescope-sg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Ast-grep picker for telescop.nvim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Telescope ast-grep&lt;/h1&gt; &#xA;&lt;p&gt;ast-grep picker for telescope.nvim&lt;/p&gt; &#xA;&lt;p&gt;Inspired by this &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim/pull/2611&#34;&gt;PR&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Marskey/telescope-sg/main/img/telescope-sg.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requires&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;ast-grep&lt;/code&gt; to be installed ( version &amp;gt;= 0.10.0 ). You can install it by the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --global @ast-grep/cli&#xA;pip install ast-grep-cli&#xA;cargo install ast-grep&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What it does&lt;/h2&gt; &#xA;&lt;p&gt;ast-grep is a AST-based tool to search code by pattern code. Think it as your old-friend grep but it matches AST nodes instead of text. You can write patterns as if you are writing ordinary code. It will match all code that has the same syntactical structure. You can use $ sign + upper case letters as wildcard, e.g. $MATCH, to match any single AST node. Think it as REGEX dot ., except it is not textual.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://ast-grep.github.io/&#34;&gt;ast-grep&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Check Health&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you call &lt;code&gt;:checkhealth telescope&lt;/code&gt; after intalling to ensure everything is set up correctly.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup {&#xA;    extensions = {&#xA;        ast_grep = {&#xA;            command = {&#xA;                &#34;sg&#34;,&#xA;                &#34;--json=stream&#34;,&#xA;            }, -- must have --json and -p&#xA;            grep_open_files = false, -- search in opened files&#xA;            lang = nil, -- string value, specify language for ast-grep `nil` for default&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Telescope ast_grep&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>