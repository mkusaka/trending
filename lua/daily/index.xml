<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-31T01:36:44Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vigoux/notifier.nvim</title>
    <updated>2022-08-31T01:36:44Z</updated>
    <id>tag:github.com,2022-08-31:/vigoux/notifier.nvim</id>
    <link href="https://github.com/vigoux/notifier.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Non-intrusive notification system for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;notifier.nvim&lt;/code&gt; non-intrusive notification system for neovim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/39092278/186714682-f51ea665-6fca-4442-bad8-8cc7fda2f138.gif&#34; alt=&#34;Showcase&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;code&gt;packer.nvim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;vigoux/notifier.nvim&#34;,&#xA;  config = function()&#xA;    require&#39;notifier&#39;.setup {&#xA;    -- You configuration here&#xA;    }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default configuration is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  ignore_messages = {}, -- Ignore message from LSP servers with this name&#xA;  status_width = something, -- COmputed using &#39;columns&#39; and &#39;textwidth&#39;&#xA;  components = {  -- Order of the components to draw from top to bottom (first nvim notifications, then lsp)&#xA;    &#34;nvim&#34;,  -- Nvim notifications (vim.notify and such)&#xA;    &#34;lsp&#34;  -- LSP status updates&#xA;  },&#xA;  notify = {&#xA;    clear_time = 5000, -- Time in milisecond before removing a vim.notifiy notification, 0 to make them sticky&#xA;    min_level = vim.log.level.INFO, -- Minimum log level to print the notification&#xA;  },&#xA;  component_name_recall = false -- Whether to prefix the title of the notification by the component name&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This plugin provides some commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:NotifierClear   &#34; Clear the vim.notify items&#xA;:NotifierReplay  &#34; Replay all vim.notify items&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This plugin defines multiple highlight groups that you can configure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;NotifierTitle&lt;/code&gt;: the title of the notification (&lt;code&gt;lsp:..&lt;/code&gt; and &lt;code&gt;nvim&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NotifierIcon&lt;/code&gt;: Icon of the notification (if any)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NotifierContent&lt;/code&gt;: the content of the notification&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NotifierContentDim&lt;/code&gt;: dimmed content of the notification&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;vim.notify&lt;/code&gt; options&lt;/h2&gt; &#xA;&lt;p&gt;This plugin supports two options for &lt;code&gt;vim.notify&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;title: string -- The title for this notification&#xA;icon: string -- The icon for this notification, must be of display width 1 (see strdisplaywidth())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknoledgement&lt;/h2&gt; &#xA;&lt;p&gt;Heavily inspired by &lt;a href=&#34;https://github.com/j-hui/fidget.nvim&#34;&gt;fidget.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Handle LSP progress&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Hook into &lt;code&gt;vim.notify&lt;/code&gt; and friends &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow to customize log levels&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; When out, hook into &lt;code&gt;ui_attach&lt;/code&gt; to route more messages from nvim&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add docs for &lt;code&gt;status.push&lt;/code&gt; and &lt;code&gt;status.pop&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Djancyp/regex.nvim</title>
    <updated>2022-08-31T01:36:44Z</updated>
    <id>tag:github.com,2022-08-31:/Djancyp/regex.nvim</id>
    <link href="https://github.com/Djancyp/regex.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple regex helper&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Regex Nvim&lt;/h1&gt; &#xA;&lt;p&gt;Helps you to live test your regex from your code.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Djancyp/nvim-plugin-demo/raw/main/regex.nvim/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;Djancyp/regex.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;regex-nvim&#39;).Setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Toggle command&lt;/h3&gt; &#xA;&lt;p&gt;You need to run this command while your cursor is on the regex. Please check the demo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:RegexHelper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Set Multiple Paths for World-lists&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;regex-nvim&#39;).Setup({&#xA;  paths:{&#xA;    emails = &#34;&amp;lt;path to world-list&amp;gt;&#34;&#xA;    dates = &#34;&amp;lt;path to world-list&amp;gt;&#34;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mods&lt;/h3&gt; &#xA;&lt;p&gt;Ones you attach the regex helper.&lt;/p&gt; &#xA;&lt;h4&gt;Normal Mode&lt;/h4&gt; &#xA;&lt;p&gt;you can switch in between different regex line.&lt;/p&gt; &#xA;&lt;h4&gt;Insert Mode&lt;/h4&gt; &#xA;&lt;p&gt;you can change your regex and will live update the helper buffer.&lt;/p&gt; &#xA;&lt;h4&gt;Insert Mode in Helper Buffer.&lt;/h4&gt; &#xA;&lt;p&gt;As soon as you start to type your last attached regex will try to validate&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt; &#xA;&lt;p&gt;Please make sure to update tests as appropriate.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>akinsho/flutter-tools.nvim</title>
    <updated>2022-08-31T01:36:44Z</updated>
    <id>tag:github.com,2022-08-31:/akinsho/flutter-tools.nvim</id>
    <link href="https://github.com/akinsho/flutter-tools.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tools to help create flutter apps in neovim using the native lsp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flutter-tools.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Build flutter and dart applications in neovim using the native LSP. It adds the ability to easily launch flutter applications, debug them, as well as extending/exposing LSP functionality such as the widget guides, an outline view of your widgets, and hot reloading.&lt;/p&gt; &#xA;&lt;p&gt;This plugin draws inspiration from &lt;a href=&#34;https://github.com/emacs-lsp/lsp-dart&#34;&gt;&lt;code&gt;emacs-lsp/lsp-dart&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/iamcco/coc-flutter&#34;&gt;&lt;code&gt;coc-flutter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/scalameta/nvim-metals&#34;&gt;&lt;code&gt;nvim-metals&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;New to Neovim&#39;s LSP Client?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Skip this section if you have already configured nvim lsp.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you haven&#39;t set up nvim&#39;s lsp client before there are a few things you should know/steps to follow before setting up this plugin.&lt;/p&gt; &#xA;&lt;p&gt;This plugin only enhances and adds to the functionality provided by nvim. &lt;strong&gt;It does not by itself provide autocompletion, code actions or configure how errors from the language server are displayed&lt;/strong&gt;. This is all handled by configuring the lsp client.&lt;/p&gt; &#xA;&lt;p&gt;This plugin handles things like starting and managing flutter application processes allowing for hot reloading, hot restarting, selecting devices/emulators to run as well as niceties like an outline window, widget guides etc. Other core lsp functionality has to be configured via nvim lsp.&lt;/p&gt; &#xA;&lt;p&gt;To set up the lsp client please read the lsp documentation this can be found in &lt;code&gt;:h lsp&lt;/code&gt; as well &lt;code&gt;nvim-lspconfig&lt;/code&gt;&#39;s &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig#lsp-overview&#34;&gt;README&lt;/a&gt; which provides information on how to setup &lt;em&gt;autocompletion&lt;/em&gt; and &lt;em&gt;code-actions&lt;/em&gt;, those are not configured via this plugin üôè.&lt;/p&gt; &#xA;&lt;p&gt;A minimal native LSP configuration might look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt; &#34; Show hover&#xA;nnoremap K &amp;lt;Cmd&amp;gt;lua vim.lsp.buf.hover()&amp;lt;CR&amp;gt;&#xA; &#34; Jump to definition&#xA;nnoremap gd &amp;lt;Cmd&amp;gt;lua vim.lsp.buf.definition()&amp;lt;CR&amp;gt;&#xA; &#34; Open code actions using the default lsp UI, if you want to change this please see the plugins above&#xA;nnoremap &amp;lt;leader&amp;gt;ca &amp;lt;Cmd&amp;gt;lua vim.lsp.buf.code_action()&amp;lt;CR&amp;gt;&#xA; &#34; Open code actions for the selected visual range&#xA;xnoremap &amp;lt;leader&amp;gt;ca &amp;lt;Cmd&amp;gt;lua vim.lsp.buf.range_code_action()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note this is not a replacement for reading the documentation, this is only to show new users what some basic setup might look like.&lt;/p&gt; &#xA;&lt;h2&gt;Prerequisites&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim 0.7.0+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notices&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This plugin no longer relies on dart code&#39;s debugger as flutter and dart now ship with a native debugger. Versions of flutter before version 2.10.0 will still require the old dart code debugger. Setup instructions for this can be found &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation#dart&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Migration for existing users of the Dart code debugger on older flutter versions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  local debugger_dir = path.join(fn.stdpath(&#34;cache&#34;), &#34;dart-code&#34;)&#xA;  local debugger_path = path.join(debugger_dir, &#34;out&#34;, &#34;dist&#34;, &#34;debug.js&#34;)&#xA;&#xA;  -- In config section for the debugger&#xA;  debugger = {&#xA;    enabled = true,&#xA;    register.configurations = function()&#xA;      local dap = require(&#34;dap&#34;)&#xA;      dap.adapters.dart = {&#xA;        type = &#34;executable&#34;,&#xA;        command = &#34;node&#34;,&#xA;        args = { debugger_path, &#34;flutter&#34; },&#xA;      }&#xA;      -- Other configuration herek&#xA;    end,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;:FlutterOutline&lt;/code&gt; command has been renamed to &lt;code&gt;:FlutterOutlineOpen&lt;/code&gt;, and a &lt;code&gt;:FlutterOutlineToggle&lt;/code&gt; has been added.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;using &lt;code&gt;vim-plug&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;akinsho/flutter-tools.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using &lt;code&gt;packer.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;akinsho/flutter-tools.nvim&#39;, requires = &#39;nvim-lua/plenary.nvim&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This plugin depends on &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;, please make sure it is installed.&lt;/p&gt; &#xA;&lt;h2&gt;Warning&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;flutter tools does not depend on &lt;code&gt;nvim-lspconfig&lt;/code&gt;. The two can co-exist but please ensure you do &lt;strong&gt;NOT&lt;/strong&gt; configure &lt;code&gt;dartls&lt;/code&gt; using &lt;code&gt;lspconfig&lt;/code&gt;. It will be automatically set up by this plugin instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You might encounter issues using this plugin on the &lt;code&gt;master&lt;/code&gt; channel of flutter.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Vimscript&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#34;flutter-tools&#34;).setup{} -- use defaults&#xA;EOF&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lua&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;flutter-tools&#34;).setup{} -- use defaults&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h4&gt;Run flutter app with hot reloading&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/flutter-tools.nvim/main/.github/hot_reload.gif&#34; alt=&#34;hot reload&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Start emulators or connected devices&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/112320203-b5f31a80-8ca6-11eb-90b8-9ac934a842da.png&#34; alt=&#34;flutter-devices&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Visualise colours from LSP&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/153088850-a14f9e67-4d28-47ad-a768-c6c318524951.png&#34; alt=&#34;lsp-colours&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Visualise logs&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/flutter-tools.nvim/main/.github/dev_log.png&#34; alt=&#34;dev log&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Widget guides (experimental, default: disabled)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/flutter-tools.nvim/main/.github/outline_guide.png&#34; alt=&#34;Widget guides&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Outline window&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/flutter-tools.nvim/main/.github/outline.gif&#34; alt=&#34;Outline window&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Closing Tags&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/akinsho/flutter-tools.nvim/main/.github/closing_tags.png&#34; alt=&#34;closing tags&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Statusline decorations&lt;/h3&gt; &#xA;&lt;h4&gt;App version&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/126676393-ad42019d-c56e-4cc7-b139-8e050e4861e8.png&#34; alt=&#34;app_version&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterRun&lt;/code&gt; - Run the current project. This needs to be run from within a flutter project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterDevices&lt;/code&gt; - Brings up a list of connected devices to select from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterEmulators&lt;/code&gt; - Similar to devices but shows a list of emulators to choose from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterReload&lt;/code&gt; - Reload the running project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterRestart&lt;/code&gt; - Restart the current project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterQuit&lt;/code&gt; - Ends a running session.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterDetach&lt;/code&gt; - Ends a running session locally but keeps the process running on the device.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterOutlineToggle&lt;/code&gt; - Toggle the outline window showing the widget tree for the given file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterOutlineOpen&lt;/code&gt; - Opens an outline window showing the widget tree for the given file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterDevTools&lt;/code&gt; - Starts a Dart Dev Tools server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterCopyProfilerUrl&lt;/code&gt; - Copies the profiler url to your system clipboard (+ register). Note that commands &lt;code&gt;FlutterRun&lt;/code&gt; and &lt;code&gt;FlutterDevTools&lt;/code&gt; must be executed first.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterLspRestart&lt;/code&gt; - This command restarts the dart language server, and is intended for situations where it begins to work incorrectly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterSuper&lt;/code&gt; - Go to super class, method using custom LSP method &lt;code&gt;dart/textDocument/super&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterReanalyze&lt;/code&gt; - Forces LSP server reanalyze using custom LSP method &lt;code&gt;dart/reanalyze&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;FlutterRun&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The flutter run command can also optionally take arguments that you might otherwise pass on the commandline such as &lt;code&gt;:FlutterRun --flavor &amp;lt;tasty&amp;gt;&lt;/code&gt;, &lt;code&gt;:FlutterRun --no-sound-null-safety&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;code&gt;FlutterOutline&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The outline window allows you to see the high level layout of the current buffer. You can also apply code actions by pressing &lt;kbd&gt;a&lt;/kbd&gt; on a widget. Then selecting a code action and pressing &lt;kbd&gt;Enter&lt;/kbd&gt;. Please note you have to wait very briefly for the code action to be applied and the window to be updated.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/127739980-04517ad2-679f-4f6c-bca4-4dd85372287b.gif&#34; alt=&#34;code_action_flutter&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Full Configuration&lt;/h3&gt; &#xA;&lt;p&gt;Please note you do &lt;em&gt;not&lt;/em&gt; need to copy and paste this whole block, this is just to show what options are available You can add keys from the block beneath if there is any behaviour you would like to override or change.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Only one of &lt;code&gt;flutter_path&lt;/code&gt; and &lt;code&gt;flutter_lookup_cmd&lt;/code&gt; should be set. These two keys are two ways of solving the same problem so will conflict if both are set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;-- alternatively you can override the default configs&#xA;require(&#34;flutter-tools&#34;).setup {&#xA;  ui = {&#xA;    -- the border type to use for all floating windows, the same options/formats&#xA;    -- used for &#34;:h nvim_open_win&#34; e.g. &#34;single&#34; | &#34;shadow&#34; | {&amp;lt;table-of-eight-chars&amp;gt;}&#xA;    border = &#34;rounded&#34;,&#xA;    -- This determines whether notifications are show with `vim.notify` or with the plugin&#39;s custom UI&#xA;    -- please note that this option is eventually going to be deprecated and users will need to&#xA;    -- depend on plugins like `nvim-notify` instead.&#xA;    notification_style = &#39;native&#39; | &#39;plugin&#39;&#xA;  },&#xA;  decorations = {&#xA;    statusline = {&#xA;      -- set to true to be able use the &#39;flutter_tools_decorations.app_version&#39; in your statusline&#xA;      -- this will show the current version of the flutter app from the pubspec.yaml file&#xA;      app_version = false,&#xA;      -- set to true to be able use the &#39;flutter_tools_decorations.device&#39; in your statusline&#xA;      -- this will show the currently running device if an application was started with a specific&#xA;      -- device&#xA;      device = false,&#xA;    }&#xA;  },&#xA;  debugger = { -- integrate with nvim dap + install dart code debugger&#xA;    enabled = false,&#xA;    run_via_dap = false, -- use dap instead of a plenary job to run flutter apps&#xA;    register_configurations = function(paths)&#xA;      require(&#34;dap&#34;).configurations.dart = {&#xA;        &amp;lt;put here config that you would find in .vscode/launch.json&amp;gt;&#xA;      }&#xA;    end,&#xA;  },&#xA;  flutter_path = &#34;&amp;lt;full/path/if/needed&amp;gt;&#34;, -- &amp;lt;-- this takes priority over the lookup&#xA;  flutter_lookup_cmd = nil, -- example &#34;dirname $(which flutter)&#34; or &#34;asdf where flutter&#34;&#xA;  fvm = false, -- takes priority over path, uses &amp;lt;workspace&amp;gt;/.fvm/flutter_sdk if enabled&#xA;  widget_guides = {&#xA;    enabled = false,&#xA;  },&#xA;  closing_tags = {&#xA;    highlight = &#34;ErrorMsg&#34;, -- highlight for the closing tag&#xA;    prefix = &#34;&amp;gt;&#34;, -- character to use for close tag e.g. &amp;gt; Widget&#xA;    enabled = true -- set to false to disable&#xA;  },&#xA;  dev_log = {&#xA;    enabled = true,&#xA;    open_cmd = &#34;tabedit&#34;, -- command to use to open the log buffer&#xA;  },&#xA;  dev_tools = {&#xA;    autostart = false, -- autostart devtools server if not detected&#xA;    auto_open_browser = false, -- Automatically opens devtools in the browser&#xA;  },&#xA;  outline = {&#xA;    open_cmd = &#34;30vnew&#34;, -- command to use to open the outline buffer&#xA;    auto_open = false -- if true this will open the outline automatically when it is first populated&#xA;  },&#xA;  lsp = {&#xA;    color = { -- show the derived colours for dart variables&#xA;      enabled = false, -- whether or not to highlight color variables at all, only supported on flutter &amp;gt;= 2.10&#xA;      background = false, -- highlight the background&#xA;      foreground = false, -- highlight the foreground&#xA;      virtual_text = true, -- show the highlight using virtual text&#xA;      virtual_text_str = &#34;‚ñ†&#34;, -- the virtual text character to highlight&#xA;    },&#xA;    on_attach = my_custom_on_attach,&#xA;    capabilities = my_custom_capabilities -- e.g. lsp_status capabilities&#xA;    --- OR you can specify a function to deactivate or change or control how the config is created&#xA;    capabilities = function(config)&#xA;      config.specificThingIDontWant = false&#xA;      return config&#xA;    end,&#xA;    -- see the link below for details on each option:&#xA;    -- https://github.com/dart-lang/sdk/blob/master/pkg/analysis_server/tool/lsp_spec/README.md#client-workspace-configuration&#xA;    settings = {&#xA;      showTodos = true,&#xA;      completeFunctionCalls = true,&#xA;      analysisExcludedFolders = {&#34;&amp;lt;path-to-flutter-sdk-packages&amp;gt;&#34;},&#xA;      renameFilesWithClasses = &#34;prompt&#34;, -- &#34;always&#34;&#xA;      enableSnippets = true,&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override any options available in the &lt;code&gt;lspconfig&lt;/code&gt; setup, this call essentially wraps it and adds some extra &lt;code&gt;flutter&lt;/code&gt; specific handlers and utilisation options.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; By default this plugin excludes analysis of the packages in the flutter SDK. If for example you jump to the definition of &lt;code&gt;StatelessWidget&lt;/code&gt;, the lsp will not try and index the 100s (maybe 1000s) of files in that directory. If for some reason you would like this behaviour set &lt;code&gt;analysisExcludedFolders = {}&lt;/code&gt; You cannot/should not edit the files in the sdk directly so diagnostic analysis of these file is pointless.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Exclude Note for Windows:&lt;/strong&gt; To ignore packages installed with pub, consider adding &lt;code&gt;vim.fn.expand(&#34;$HOME/AppData/Local/Pub/Cache&#34;)&lt;/code&gt; to &lt;code&gt;analysisExcludedFolders&lt;/code&gt; if you are using PowerShell.&lt;/p&gt; &#xA;&lt;h4&gt;Flutter binary&lt;/h4&gt; &#xA;&lt;p&gt;In order to run flutter commands you &lt;em&gt;might&lt;/em&gt; need to pass either a &lt;em&gt;path&lt;/em&gt; or a &lt;em&gt;command&lt;/em&gt; to the plugin so it can find your installation of flutter. Most people will not need this since it will find the executable path of &lt;code&gt;flutter&lt;/code&gt; if it is in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If using something like &lt;code&gt;asdf&lt;/code&gt; or some other version manager or in some other custom way, then you need to pass in a command by specifying &lt;code&gt;flutter_lookup_cmd = &amp;lt;my-command&amp;gt;&lt;/code&gt;. If you have a full path already you can pass it in using &lt;code&gt;flutter_path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are on linux and using &lt;code&gt;snap&lt;/code&gt;, this plugin will automatically set the &lt;code&gt;flutter_lookup_cmd&lt;/code&gt; to &lt;code&gt;flutter sdk-path&lt;/code&gt; which allows finding &lt;code&gt;snap&lt;/code&gt; installations of flutter. If this doesn&#39;t work for any reason likely an old version of flutter before this command was added, you can set your &lt;code&gt;flutter_path&lt;/code&gt; to &lt;code&gt;&#34;&amp;lt;INSERT-HOME-DIRECTORY&amp;gt;/snap/flutter/common/flutter/bin/flutter&#34;&lt;/code&gt; which is where this is usually installed by &lt;code&gt;snap&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Highlights&lt;/h3&gt; &#xA;&lt;h4&gt;Widget guides&lt;/h4&gt; &#xA;&lt;p&gt;To configure the highlight colour you can override the &lt;code&gt;FlutterWidgetGuides&lt;/code&gt; highlight group.&lt;/p&gt; &#xA;&lt;h4&gt;Notifications&lt;/h4&gt; &#xA;&lt;p&gt;The highlights for flutter-tools notifications and popups can be changed by overriding the default highlight groups&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterNotificationNormal&lt;/code&gt; - this changes the highlight of the notification content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterNotificationBorder&lt;/code&gt; - this changes the highlight of the notification border.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterPopupNormal&lt;/code&gt; - this changes the highlight of the popup content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterPopupBorder&lt;/code&gt; - this changes the highlight of the popup border.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FlutterPopupSelected&lt;/code&gt; - this changes the highlight of the popup&#39;s selected line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Statusline decorations (Unstable)&lt;/h3&gt; &#xA;&lt;p&gt;You can add metadata about the flutter application to your statusline using the &lt;code&gt;g:flutter_tools_decorations&lt;/code&gt; dictionary that is created if you have set any of the decorations to &lt;code&gt;true&lt;/code&gt; in your configuration.&lt;/p&gt; &#xA;&lt;p&gt;The currently supported decorations are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;App version - The current version of the app from the &lt;code&gt;pubspec.yaml&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Device - the device passed to the flutter run command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add them to your config you can do something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;function _G.statusLine()&#xA;  return vim.g.flutter_tools_decorations.app_version&#xA;end&#xA;vim.opt.statusline =&#39;%!v:statusLine()&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;code&gt;:h statusline&lt;/code&gt; for more information on how to create a statusline.&lt;/p&gt; &#xA;&lt;h3&gt;Telescope Integration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/22454918/113897929-495a3e80-97c3-11eb-959f-9574319cd93c.png&#34; alt=&#34;telescope picker&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can list available commands in this plugin using &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to set this up, you can explicitly load the extension.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).load_extension(&#34;flutter&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or alternatively telescope can lazy load extension but the &lt;code&gt;Telescope&lt;/code&gt; command will not autocomplete lazy loaded modules.&lt;/p&gt; &#xA;&lt;p&gt;This can be accessed using &lt;code&gt;Telescope flutter commands&lt;/code&gt; or &lt;code&gt;require(&#39;telescope&#39;).extensions.flutter.commands()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;FVM&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35163478/137667084-98c00c4b-ff8c-4d1e-869e-d2d51cf86f7e.png&#34; alt=&#34;telescope fvm&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://fvm.app/&#34;&gt;fvm&lt;/a&gt; installed and enabled in your config, you can change your Flutter SDK via a Telescope picker.&lt;/p&gt; &#xA;&lt;p&gt;This can be accessed using &lt;code&gt;Telescope flutter fvm&lt;/code&gt; or &lt;code&gt;require(&#39;telescope&#39;).extensions.flutter.fvm()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Requires nvim-dap&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- with packer&#xA;use &#39;mfussenegger/nvim-dap&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This plugin integrates with &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; to provide debug capabilities. Currently if &lt;code&gt;debugger.enabled&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; in the user&#39;s config &lt;strong&gt;it will expect &lt;code&gt;nvim-dap&lt;/code&gt; to be installed&lt;/strong&gt;. If &lt;code&gt;dap&lt;/code&gt; is this plugin will use &lt;code&gt;flutter&lt;/code&gt; or &lt;code&gt;dart&lt;/code&gt; native debugger to debug your project.&lt;/p&gt; &#xA;&lt;p&gt;To use the debugger you need to run &lt;code&gt;:lua require(&#39;dap&#39;).continue()&amp;lt;CR&amp;gt;&lt;/code&gt;. This will start your app. You should then be able to use &lt;code&gt;dap&lt;/code&gt; commands to begin to debug it. For more information on how to use &lt;code&gt;nvim-dap&lt;/code&gt; please read the project&#39;s README or see &lt;code&gt;:h dap&lt;/code&gt;. Note that running the app this way will prevent commands such as &lt;code&gt;:FlutterRestart&lt;/code&gt;, &lt;code&gt;:FlutterReload&lt;/code&gt; from working.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you prefer always running your app via dap, you can set &lt;code&gt;debugger.run_via_dap = true&lt;/code&gt; in your config. This way you benefit from the debugging abilities of DAP, AND you can still use &lt;code&gt;:FlutterRestart&lt;/code&gt;, &lt;code&gt;:FlutterReload&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;debugger.register_configurations&lt;/code&gt; to register custom runner configuration (for example for different targets or flavor). If your flutter repo contains launch configurations in &lt;code&gt;.vscode/launch.json&lt;/code&gt; you can use them via this config :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  debugger = {&#xA;    enabled = true,&#xA;    register_configurations = function(_)&#xA;      require(&#34;dap&#34;).configurations.dart = {}&#xA;      require(&#34;dap.ext.vscode&#34;).load_launchjs()&#xA;    end,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since there is an overlap between this plugin&#39;s log buffer and the repl buffer when running via dap, you may use the &lt;code&gt;dev_log.enabled&lt;/code&gt; configuration option if you want.&lt;/p&gt; &#xA;&lt;p&gt;Also see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt; - a plugin which provides a nice UI for &lt;code&gt;nvim-dap&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;The LSP isn&#39;t starting what do I do?&lt;/h3&gt; &#xA;&lt;p&gt;One of the commonest reasons this happens is that for some reason your local flutter binary either can&#39;t be found or is throwing an error. You can see the output of this by checking the lsp logs. You can do this by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua vim.cmd(&#39;edit &#39;..vim.lsp.get_log_path())&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will open your lsp logs. You can then check for any error messages.&lt;/p&gt;</summary>
  </entry>
</feed>