<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-18T01:34:53Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>qbcore-framework/qb-apartments</title>
    <updated>2022-11-18T01:34:53Z</updated>
    <id>tag:github.com,2022-11-18:/qbcore-framework/qb-apartments</id>
    <link href="https://github.com/qbcore-framework/qb-apartments" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Apartment Script Used With QB-Core üè†&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-apartments&lt;/h1&gt; &#xA;&lt;p&gt;Apartments System for QB-Core Framework &lt;span&gt;üè¢&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;QBCore Framework&#xA;Copyright (C) 2021 Joshua Eger&#xA;&#xA;This program is free software: you can redistribute it and/or modify&#xA;it under the terms of the GNU General Public License as published by&#xA;the Free Software Foundation, either version 3 of the License, or&#xA;(at your option) any later version.&#xA;&#xA;This program is distributed in the hope that it will be useful,&#xA;but WITHOUT ANY WARRANTY; without even the implied warranty of&#xA;MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#xA;GNU General Public License for more details.&#xA;&#xA;You should have received a copy of the GNU General Public License&#xA;along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;qb-core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-clothing&#34;&gt;qb-clothing&lt;/a&gt; - To save outfits&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-houses&#34;&gt;qb-houses&lt;/a&gt; - House logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-interior&#34;&gt;qb-interior&lt;/a&gt; - Interior logic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-weathersync&#34;&gt;qb-weathersync&lt;/a&gt; - To desync weather while inside&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-spawn&#34;&gt;qb-spawn&lt;/a&gt; - To spawn the player at apartment if last location was in apartment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mp3XL4Y.jpg&#34; alt=&#34;Inside Apartment&#34;&gt; &lt;img src=&#34;https://i.imgur.com/3DH9RFw.jpg&#34; alt=&#34;Inside Apartment&#34;&gt; &lt;img src=&#34;https://imgur.com/1giGyt1.png&#34; alt=&#34;Enter Apartment&#34;&gt; &lt;img src=&#34;https://imgur.com/t6crf4c.png&#34; alt=&#34;Stash&#34;&gt; &lt;img src=&#34;https://imgur.com/I0YLuQA.png&#34; alt=&#34;Saved Outfits&#34;&gt; &lt;img src=&#34;https://imgur.com/q1Yx3nS.png&#34; alt=&#34;Log Out&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Door Bell&lt;/li&gt; &#xA; &lt;li&gt;Stash&lt;/li&gt; &#xA; &lt;li&gt;Log Out Marker&lt;/li&gt; &#xA; &lt;li&gt;Saved Outfits&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download the script and put it in the &lt;code&gt;[qb]&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Import &lt;code&gt;qb-apartments.sql&lt;/code&gt; in your database&lt;/li&gt; &#xA; &lt;li&gt;Add the following code to your server.cfg/resouces.cfg&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;ensure qb-core&#xA;ensure qb-interior&#xA;ensure qb-weathersync&#xA;ensure qb-clothing&#xA;ensure qb-houses&#xA;ensure qb-spawn&#xA;ensure qb-apartments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Apartments = {} -- Don&#39;t touch&#xA;&#xA;Apartments.SpawnOffset = 30 -- Don&#39;t touch&#xA;&#xA;Apartments.Locations = {&#xA;    [&#34;apartment1&#34;] = { -- Needs to be unique&#xA;        name = &#34;apartment1&#34;, -- Apartment id&#xA;        label = &#34;South Rockford Drive&#34;, -- Apartment Label (for Blip and other stuff)&#xA;        coords = {&#xA;            enter = {x = -667.372, y = -1106.034, z = 14.629, h = 65.033}, -- Enter Apartment Marker Location&#xA;            doorbell = {x = -667.601, y = -1107.354, z = 15.133, h = 65.033}, -- Exit Apartment Marker Location&#xA;        }&#xA;    },&#xA;    [&#34;apartment2&#34;] = {&#xA;        name = &#34;apartment2&#34;,&#xA;        label = &#34;Morningwood Blvd&#34;,&#xA;        coords = {&#xA;            enter = {x = -1288.046, y = -430.126, z = 35.077, h = 305.348},&#xA;            doorbell = {x = -667.682, y = -1105.876, z = 14.629, h = 65.033},&#xA;        }&#xA;    },&#xA;    [&#34;apartment3&#34;] = {&#xA;        name = &#34;apartment3&#34;,&#xA;        label = &#34;Integrity Way&#34;,&#xA;        coords = {&#xA;            enter = {x = 269.075, y = -640.672, z = 42.02, h = 70.01},&#xA;            doorbell = {x = -667.682, y = -1105.876, z = 14.629, h = 65.033},&#xA;        }&#xA;    },&#xA;    [&#34;apartment4&#34;] = {&#xA;        name = &#34;apartment4&#34;,&#xA;        label = &#34;Tinsel Towers&#34;,&#xA;        coords = {&#xA;            enter = {x = -621.016, y = 46.677, z = 43.591, h = 179.36},&#xA;            doorbell = {x = -667.682, y = -1105.876, z = 14.629, h = 65.033},&#xA;        }&#xA;    },&#xA;    [&#34;apartment5&#34;] = {&#xA;        name = &#34;apartment5&#34;,&#xA;        label = &#34;Fantastic Plaza&#34;,&#xA;        coords = {&#xA;            enter = {x = 291.517, y = -1078.674, z = 29.405, h = 270.75},&#xA;            doorbell = {x = -667.682, y = -1105.876, z = 14.629, h = 65.033},&#xA;        }&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Saecki/crates.nvim</title>
    <updated>2022-11-18T01:34:53Z</updated>
    <id>tag:github.com,2022-11-18:/Saecki/crates.nvim</id>
    <link href="https://github.com/Saecki/crates.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A neovim plugin that helps managing crates.io dependencies&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;crates.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/saecki/crates.nvim/actions/workflows/CI.yml&#34;&gt;&lt;img src=&#34;https://github.com/saecki/crates.nvim/actions/workflows/CI.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://tokei.rs/b1/github/saecki/crates.nvim?category=code&#34; alt=&#34;LOC&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A neovim plugin that helps managing crates.io dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to open issues.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Complete crate versions and features&lt;/li&gt; &#xA; &lt;li&gt;Completion sources for: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ms-jpq/coq_nvim&#34;&gt;coq.nvim&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls.nvim&lt;/a&gt; code actions&lt;/li&gt; &#xA; &lt;li&gt;Update crates to newest compatible version&lt;/li&gt; &#xA; &lt;li&gt;Upgrade crates to newest version&lt;/li&gt; &#xA; &lt;li&gt;Respect existing version requirements and update them in an elegant way (&lt;code&gt;smart_insert&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Automatically load when opening a &lt;code&gt;Cargo.toml&lt;/code&gt; file (&lt;code&gt;autoload&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Live update while editing (&lt;code&gt;autoupdate&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Show version and upgrade candidates &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Indicate if compatible version is a pre-release or yanked&lt;/li&gt; &#xA;   &lt;li&gt;Indicate if no version is compatible&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open floating window with crate info &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Open documentation, crates.io, repository and homepage urls&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open floating window with crate versions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Select a version by pressing enter (&lt;code&gt;popup.keys.select&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open floating window with crate features &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Navigate the feature hierarchy&lt;/li&gt; &#xA;   &lt;li&gt;Enable/disable features&lt;/li&gt; &#xA;   &lt;li&gt;Indicate if a feature is enabled directly or transitively&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Open floating window with crate dependencies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Navigate the dependency hierarchy&lt;/li&gt; &#xA;   &lt;li&gt;Indicate if a dependency is optional&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43008152/134776663-aae0d50a-ee6e-4539-a766-8cccc629c21a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Popup&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43008152/134776682-c995b48a-cad5-43d4-80e8-ee3637a5a78a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Completion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/43008152/134776687-c1359967-4b96-460b-b5f2-2d80b6a09208.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To use with neovim 0.6 or to stay on a stable release.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;saecki/crates.nvim&#39;, { &#39;tag&#39;: &#39;v0.3.0&#39; }&#xA;&#xA;lua require(&#39;crates&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;strong&gt;packer.nvim&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;saecki/crates.nvim&#39;,&#xA;    tag = &#39;v0.3.0&#39;,&#xA;    requires = { &#39;nvim-lua/plenary.nvim&#39; },&#xA;    config = function()&#xA;        require(&#39;crates&#39;).setup()&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re feeling adventurous and want to use the newest features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;saecki/crates.nvim&#39;&#xA;&#xA;lua require(&#39;crates&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;strong&gt;packer.nvim&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;saecki/crates.nvim&#39;,&#xA;    requires = { &#39;nvim-lua/plenary.nvim&#39; },&#xA;    config = function()&#xA;        require(&#39;crates&#39;).setup()&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For lazy loading.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#39;saecki/crates.nvim&#39;,&#xA;    event = { &#34;BufRead Cargo.toml&#34; },&#xA;    requires = { { &#39;nvim-lua/plenary.nvim&#39; } },&#xA;    config = function()&#xA;        require(&#39;crates&#39;).setup()&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; source&lt;/h3&gt; &#xA;&lt;p&gt;Just add it to your list of sources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;cmp&#39;).setup {&#xA;    ...&#xA;    sources = {&#xA;        { name = &#34;path&#34; },&#xA;        { name = &#34;buffer&#34; },&#xA;        { name = &#34;nvim_lsp&#34; },&#xA;        ...&#xA;        { name = &#34;crates&#34; },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or add it lazily.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;BufRead&#34;, {&#xA;    group = vim.api.nvim_create_augroup(&#34;CmpSourceCargo&#34;, { clear = true }),&#xA;    pattern = &#34;Cargo.toml&#34;,&#xA;    callback = function()&#xA;        cmp.setup.buffer({ sources = { { name = &#34;crates&#34; } } })&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/ms-jpq/coq_nvim&#34;&gt;coq.nvim&lt;/a&gt; source&lt;/h3&gt; &#xA;&lt;p&gt;Enable it in the setup, and optionally change the display name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;crates&#39;).setup {&#xA;    ...&#xA;    src = {&#xA;        ...&#xA;        coq = {&#xA;            enabled = true,&#xA;            name = &#34;crates.nvim&#34;,&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls.nvim&lt;/a&gt; source&lt;/h3&gt; &#xA;&lt;p&gt;Enable it in the setup, and optionally change the display name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#39;null-ls&#39;)&#xA;require(&#39;crates&#39;).setup {&#xA;    ...&#xA;    null_ls = {&#xA;        enabled = true,&#xA;        name = &#34;crates.nvim&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the type of some fields see &lt;a href=&#34;https://raw.githubusercontent.com/Saecki/crates.nvim/main/teal/crates/config.tl&#34;&gt;&lt;code&gt;teal/crates/config.tl&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Default&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The icons in the default configuration require a patched font.&lt;br&gt; Any &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Font&lt;/a&gt; should work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;crates&#39;).setup {&#xA;    smart_insert = true,&#xA;    insert_closing_quote = true,&#xA;    avoid_prerelease = true,&#xA;    autoload = true,&#xA;    autoupdate = true,&#xA;    loading_indicator = true,&#xA;    date_format = &#34;%Y-%m-%d&#34;,&#xA;    thousands_separator = &#34;.&#34;,&#xA;    notification_title = &#34;Crates&#34;,&#xA;    curl_args = { &#34;-sL&#34;, &#34;--retry&#34;, &#34;1&#34; },&#xA;    disable_invalid_feature_diagnostic = false,&#xA;    text = {&#xA;        loading = &#34;  Ôáé Loading&#34;,&#xA;        version = &#34;  ÔÅò %s&#34;,&#xA;        prerelease = &#34;  ÔÅ™ %s&#34;,&#xA;        yanked = &#34;  ÔÅñ %s&#34;,&#xA;        nomatch = &#34;  ÔÅô No match&#34;,&#xA;        upgrade = &#34;  ÔÇ™ %s&#34;,&#xA;        error = &#34;  ÔÅó Error fetching crate&#34;,&#xA;    },&#xA;    highlight = {&#xA;        loading = &#34;CratesNvimLoading&#34;,&#xA;        version = &#34;CratesNvimVersion&#34;,&#xA;        prerelease = &#34;CratesNvimPreRelease&#34;,&#xA;        yanked = &#34;CratesNvimYanked&#34;,&#xA;        nomatch = &#34;CratesNvimNoMatch&#34;,&#xA;        upgrade = &#34;CratesNvimUpgrade&#34;,&#xA;        error = &#34;CratesNvimError&#34;,&#xA;    },&#xA;    popup = {&#xA;        autofocus = false,&#xA;        copy_register = &#39;&#34;&#39;,&#xA;        style = &#34;minimal&#34;,&#xA;        border = &#34;none&#34;,&#xA;        show_version_date = false,&#xA;        show_dependency_version = true,&#xA;        max_height = 30,&#xA;        min_width = 20,&#xA;        padding = 1,&#xA;        text = {&#xA;            title = &#34;ÔÜ≤ %s&#34;,&#xA;            pill_left = &#34;ÓÇ∂&#34;,&#xA;            pill_right = &#34;ÓÇ¥&#34;,&#xA;            description = &#34;%s&#34;,&#xA;            created_label = &#34;ÔÅ≥ created        &#34;,&#xA;            created = &#34;%s&#34;,&#xA;            updated_label = &#34;ÔÄ° updated        &#34;,&#xA;            updated = &#34;%s&#34;,&#xA;            downloads_label = &#34;ÔÅ£ downloads      &#34;,&#xA;            downloads = &#34;%s&#34;,&#xA;            homepage_label = &#34;ÔÄï homepage       &#34;,&#xA;            homepage = &#34;%s&#34;,&#xA;            repository_label = &#34;Óú• repository     &#34;,&#xA;            repository = &#34;%s&#34;,&#xA;            documentation_label = &#34;ÔÖú documentation  &#34;,&#xA;            documentation = &#34;%s&#34;,&#xA;            crates_io_label = &#34;ÔÜ≤ crates.io      &#34;,&#xA;            crates_io = &#34;%s&#34;,&#xA;            categories_label = &#34;ÔÄâ categories     &#34;,&#xA;            keywords_label = &#34;ÔÅ© keywords       &#34;,&#xA;            version = &#34;  %s&#34;,&#xA;            prerelease = &#34;ÔÅ™ %s&#34;,&#xA;            yanked = &#34;ÔÅñ %s&#34;,&#xA;            version_date = &#34;  %s&#34;,&#xA;            feature = &#34;  %s&#34;,&#xA;            enabled = &#34;ÔÖä %s&#34;,&#xA;            transitive = &#34;ÔÖÜ %s&#34;,&#xA;            normal_dependencies_title = &#34;ÔÉ® Dependencies&#34;,&#xA;            build_dependencies_title = &#34;Óàè Build dependencies&#34;,&#xA;            dev_dependencies_title = &#34;ÔÉÉ Dev dependencies&#34;,&#xA;            dependency = &#34;  %s&#34;,&#xA;            optional = &#34;ÔÅô %s&#34;,&#xA;            dependency_version = &#34;  %s&#34;,&#xA;            loading = &#34; Ôáé &#34;,&#xA;        },&#xA;        highlight = {&#xA;            title = &#34;CratesNvimPopupTitle&#34;,&#xA;            pill_text = &#34;CratesNvimPopupPillText&#34;,&#xA;            pill_border = &#34;CratesNvimPopupPillBorder&#34;,&#xA;            description = &#34;CratesNvimPopupDescription&#34;,&#xA;            created_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            created = &#34;CratesNvimPopupValue&#34;,&#xA;            updated_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            updated = &#34;CratesNvimPopupValue&#34;,&#xA;            downloads_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            downloads = &#34;CratesNvimPopupValue&#34;,&#xA;            homepage_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            homepage = &#34;CratesNvimPopupUrl&#34;,&#xA;            repository_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            repository = &#34;CratesNvimPopupUrl&#34;,&#xA;            documentation_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            documentation = &#34;CratesNvimPopupUrl&#34;,&#xA;            crates_io_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            crates_io = &#34;CratesNvimPopupUrl&#34;,&#xA;            categories_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            keywords_label = &#34;CratesNvimPopupLabel&#34;,&#xA;            version = &#34;CratesNvimPopupVersion&#34;,&#xA;            prerelease = &#34;CratesNvimPopupPreRelease&#34;,&#xA;            yanked = &#34;CratesNvimPopupYanked&#34;,&#xA;            version_date = &#34;CratesNvimPopupVersionDate&#34;,&#xA;            feature = &#34;CratesNvimPopupFeature&#34;,&#xA;            enabled = &#34;CratesNvimPopupEnabled&#34;,&#xA;            transitive = &#34;CratesNvimPopupTransitive&#34;,&#xA;            normal_dependencies_title = &#34;CratesNvimPopupNormalDependenciesTitle&#34;,&#xA;            build_dependencies_title = &#34;CratesNvimPopupBuildDependenciesTitle&#34;,&#xA;            dev_dependencies_title = &#34;CratesNvimPopupDevDependenciesTitle&#34;,&#xA;            dependency = &#34;CratesNvimPopupDependency&#34;,&#xA;            optional = &#34;CratesNvimPopupOptional&#34;,&#xA;            dependency_version = &#34;CratesNvimPopupDependencyVersion&#34;,&#xA;            loading = &#34;CratesNvimPopupLoading&#34;,&#xA;        },&#xA;        keys = {&#xA;            hide = { &#34;q&#34;, &#34;&amp;lt;esc&amp;gt;&#34; },&#xA;            open_url = { &#34;&amp;lt;cr&amp;gt;&#34; },&#xA;            select = { &#34;&amp;lt;cr&amp;gt;&#34; },&#xA;            select_alt = { &#34;s&#34; },&#xA;            toggle_feature = { &#34;&amp;lt;cr&amp;gt;&#34; },&#xA;            copy_value = { &#34;yy&#34; },&#xA;            goto_item = { &#34;gd&#34;, &#34;K&#34;, &#34;&amp;lt;C-LeftMouse&amp;gt;&#34; },&#xA;            jump_forward = { &#34;&amp;lt;c-i&amp;gt;&#34; },&#xA;            jump_back = { &#34;&amp;lt;c-o&amp;gt;&#34;, &#34;&amp;lt;C-RightMouse&amp;gt;&#34; },&#xA;        },&#xA;    },&#xA;    src = {&#xA;        insert_closing_quote = true,&#xA;        text = {&#xA;            prerelease = &#34; ÔÅ™ pre-release &#34;,&#xA;            yanked = &#34; ÔÅñ yanked &#34;,&#xA;        },&#xA;        coq = {&#xA;            enabled = false,&#xA;            name = &#34;Crates&#34;,&#xA;        },&#xA;    },&#xA;    null_ls = {&#xA;        enabled = false,&#xA;        name = &#34;Crates&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Plain text&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Replace these fields if you don&#39;t have a patched font.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;crates&#39;).setup {&#xA;    text = {&#xA;        loading = &#34;  Loading...&#34;,&#xA;        version = &#34;  %s&#34;,&#xA;        prerelease = &#34;  %s&#34;,&#xA;        yanked = &#34;  %s yanked&#34;,&#xA;        nomatch = &#34;  Not found&#34;,&#xA;        upgrade = &#34;  %s&#34;,&#xA;        error = &#34;  Error fetching crate&#34;,&#xA;    },&#xA;    popup = {&#xA;        text = {&#xA;            title = &#34;# %s&#34;,&#xA;            pill_left = &#34;&#34;,&#xA;            pill_right = &#34;&#34;,&#xA;            created_label = &#34;created        &#34;,&#xA;            updated_label = &#34;updated        &#34;,&#xA;            downloads_label = &#34;downloads      &#34;,&#xA;            homepage_label = &#34;homepage       &#34;,&#xA;            repository_label = &#34;repository     &#34;,&#xA;            documentation_label = &#34;documentation  &#34;,&#xA;            crates_io_label = &#34;crates.io      &#34;,&#xA;            categories_label = &#34;categories     &#34;,&#xA;            keywords_label = &#34;keywords       &#34;,&#xA;            version = &#34;%s&#34;,&#xA;            prerelease = &#34;%s pre-release&#34;,&#xA;            yanked = &#34;%s yanked&#34;,&#xA;            enabled = &#34;* s&#34;,&#xA;            transitive = &#34;~ s&#34;,&#xA;            normal_dependencies_title = &#34;  Dependencies&#34;,&#xA;            build_dependencies_title = &#34;  Build dependencies&#34;,&#xA;            dev_dependencies_title = &#34;  Dev dependencies&#34;,&#xA;            optional = &#34;? %s&#34;,&#xA;            loading = &#34; ...&#34;,&#xA;        },&#xA;    },&#xA;    src = {&#xA;        text = {&#xA;            prerelease = &#34; pre-release &#34;,&#xA;            yanked = &#34; yanked &#34;,&#xA;        },&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Setup config and auto commands.&#xA;require(&#39;crates&#39;).setup(cfg: Config)&#xA;&#xA;-- Disable UI elements (virtual text and diagnostics).&#xA;require(&#39;crates&#39;).hide()&#xA;-- Enable UI elements (virtual text and diagnostics).&#xA;require(&#39;crates&#39;).show()&#xA;-- Enable or disable UI elements (virtual text and diagnostics).&#xA;require(&#39;crates&#39;).toggle()&#xA;-- Update data. Optionally specify which `buf` to update.&#xA;require(&#39;crates&#39;).update(buf: integer|nil)&#xA;-- Reload data (clears cache). Optionally specify which `buf` to reload.&#xA;require(&#39;crates&#39;).reload(buf: integer|nil)&#xA;&#xA;-- Upgrade the crate on the current line.&#xA;-- If the `alt` flag is passed as true, the opposite of the `smart_insert` config&#xA;-- option will be used to insert the version.&#xA;require(&#39;crates&#39;).upgrade_crate(alt: boolean|nil)&#xA;-- Upgrade the crates on the lines visually selected.&#xA;-- See `crates.upgrade_crate()`.&#xA;require(&#39;crates&#39;).upgrade_crates(alt: boolean|nil)&#xA;-- Upgrade all crates in the buffer.&#xA;-- See `crates.upgrade_crate()`.&#xA;require(&#39;crates&#39;).upgrade_all_crates(alt: boolean|nil)&#xA;&#xA;-- Update the crate on the current line.&#xA;-- See `crates.upgrade_crate()`.&#xA;require(&#39;crates&#39;).update_crate(alt: boolean|nil)&#xA;-- Update the crates on the lines visually selected.&#xA;-- See `crates.upgrade_crate()`.&#xA;require(&#39;crates&#39;).update_crates(alt: boolean|nil)&#xA;-- Update all crates in the buffer.&#xA;-- See `crates.upgrade_crate()`.&#xA;require(&#39;crates&#39;).update_all_crates(alt: boolean|nil)&#xA;&#xA;-- Open the homepage of the crate on the current line.&#xA;require(&#39;crates&#39;).open_homepage()&#xA;-- Open the repository page of the crate on the current line.&#xA;require(&#39;crates&#39;).open_repository()&#xA;-- Open the documentation page of the crate on the current line.&#xA;require(&#39;crates&#39;).open_documentation()&#xA;-- Open the `crates.io` page of the crate on the current line.&#xA;require(&#39;crates&#39;).open_crates_io()&#xA;&#xA;-- Returns whether there is information to show in a popup.&#xA;require(&#39;crates&#39;).popup_available(): boolean&#xA;-- Show/hide popup with crate details, all versions, all features or details about one feature.&#xA;-- If `popup.autofocus` is disabled calling this again will focus the popup.&#xA;require(&#39;crates&#39;).show_popup()&#xA;-- Same as `crates.show_popup()` but always show crate details.&#xA;require(&#39;crates&#39;).show_crate_popup()&#xA;-- Same as `crates.show_popup()` but always show versions.&#xA;require(&#39;crates&#39;).show_versions_popup()&#xA;-- Same as `crates.show_popup()` but always show features or features details.&#xA;require(&#39;crates&#39;).show_features_popup()&#xA;-- Same as `crates.show_popup()` but always show depedencies.&#xA;require(&#39;crates&#39;).show_dependencies_popup()&#xA;-- Focus the popup (jump into the floating window).&#xA;-- Optionally specify the line to jump to, inside the popup.&#xA;require(&#39;crates&#39;).focus_popup(line: integer|nil)&#xA;-- Hide the popup.&#xA;require(&#39;crates&#39;).hide_popup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Key mappings&lt;/h3&gt; &#xA;&lt;p&gt;Some examples of key mappings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;ct :lua require(&#39;crates&#39;).toggle()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cr :lua require(&#39;crates&#39;).reload()&amp;lt;cr&amp;gt;&#xA;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cv :lua require(&#39;crates&#39;).show_versions_popup()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cf :lua require(&#39;crates&#39;).show_features_popup()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cd :lua require(&#39;crates&#39;).show_dependencies_popup()&amp;lt;cr&amp;gt;&#xA;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cu :lua require(&#39;crates&#39;).update_crate()&amp;lt;cr&amp;gt;&#xA;vnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cu :lua require(&#39;crates&#39;).update_crates()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;ca :lua require(&#39;crates&#39;).update_all_crates()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cU :lua require(&#39;crates&#39;).upgrade_crate()&amp;lt;cr&amp;gt;&#xA;vnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cU :lua require(&#39;crates&#39;).upgrade_crates()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cA :lua require(&#39;crates&#39;).upgrade_all_crates()&amp;lt;cr&amp;gt;&#xA;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cH :lua require(&#39;crates&#39;).open_homepage()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cR :lua require(&#39;crates&#39;).open_repository()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cD :lua require(&#39;crates&#39;).open_documentation()&amp;lt;cr&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;cC :lua require(&#39;crates&#39;).open_crates_io()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;vim.keymap.set&lt;/code&gt; to map lua function to keys directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local crates = require(&#39;crates&#39;)&#xA;local opts = { noremap = true, silent = true }&#xA;&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;ct&#39;, crates.toggle, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cr&#39;, crates.reload, opts)&#xA;&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cv&#39;, crates.show_versions_popup, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cf&#39;, crates.show_features_popup, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cd&#39;, crates.show_dependencies_popup, opts)&#xA;&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cu&#39;, crates.update_crate, opts)&#xA;vim.keymap.set(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;cu&#39;, crates.update_crates, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;ca&#39;, crates.update_all_crates, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cU&#39;, crates.upgrade_crate, opts)&#xA;vim.keymap.set(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;cU&#39;, crates.upgrade_crates, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cA&#39;, crates.upgrade_all_crates, opts)&#xA;&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cH&#39;, crates.open_homepage, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cR&#39;, crates.open_repository, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cD&#39;, crates.open_documentation, opts)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;cC&#39;, crates.open_crates_io, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Show appropriate documentation in &lt;code&gt;Cargo.toml&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;How you might integrate &lt;code&gt;show_popup&lt;/code&gt; into your &lt;code&gt;init.vim&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nnoremap &amp;lt;silent&amp;gt; K :call &amp;lt;SID&amp;gt;show_documentation()&amp;lt;cr&amp;gt;&#xA;function! s:show_documentation()&#xA;    if (index([&#39;vim&#39;,&#39;help&#39;], &amp;amp;filetype) &amp;gt;= 0)&#xA;        execute &#39;h &#39;.expand(&#39;&amp;lt;cword&amp;gt;&#39;)&#xA;    elseif (index([&#39;man&#39;], &amp;amp;filetype) &amp;gt;= 0)&#xA;        execute &#39;Man &#39;.expand(&#39;&amp;lt;cword&amp;gt;&#39;)&#xA;    elseif (expand(&#39;%:t&#39;) == &#39;Cargo.toml&#39; &amp;amp;&amp;amp; luaeval(&#39;require(&#34;crates&#34;).popup_available()&#39;))&#xA;        lua require(&#39;crates&#39;).show_popup()&#xA;    else&#xA;        lua vim.lsp.buf.hover()&#xA;    endif&#xA;endfunction&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How you might integrate &lt;code&gt;show_popup&lt;/code&gt; into your &lt;code&gt;init.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function show_documentation()&#xA;    local filetype = vim.bo.filetype&#xA;    if vim.tbl_contains({ &#39;vim&#39;,&#39;help&#39; }, filetype) then&#xA;        vim.cmd(&#39;h &#39;..vim.fn.expand(&#39;&amp;lt;cword&amp;gt;&#39;))&#xA;    elseif vim.tbl_contains({ &#39;man&#39; }, filetype) then&#xA;        vim.cmd(&#39;Man &#39;..vim.fn.expand(&#39;&amp;lt;cword&amp;gt;&#39;))&#xA;    elseif vim.fn.expand(&#39;%:t&#39;) == &#39;Cargo.toml&#39; and require(&#39;crates&#39;).popup_available() then&#xA;        require(&#39;crates&#39;).show_popup()&#xA;    else&#xA;        vim.lsp.buf.hover()&#xA;    end&#xA;end&#xA;&#xA;vim.keymap.set(&#39;n&#39;, &#39;K&#39;, show_documentation, { noremap = true, silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim&#34;&gt;simrat39/rust-tools.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-crates&#34;&gt;mhinz/vim-crates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shift-d/crates.nvim&#34;&gt;shift-d/crates.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kahgeh/ls-crates.nvim&#34;&gt;kahgeh/ls-crates.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Afenar/AfenarUI</title>
    <updated>2022-11-18T01:34:53Z</updated>
    <id>tag:github.com,2022-11-18:/Afenar/AfenarUI</id>
    <link href="https://github.com/Afenar/AfenarUI" rel="alternate"></link>
    <summary type="html">&lt;p&gt;World of Warcraft User Interface&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>