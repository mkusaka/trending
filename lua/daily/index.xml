<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-23T01:45:16Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rcarriga/nvim-notify</title>
    <updated>2022-06-23T01:45:16Z</updated>
    <id>tag:github.com,2022-06-23:/rcarriga/nvim-notify</id>
    <link href="https://github.com/rcarriga/nvim-notify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fancy, configurable, notification manager for NeoVim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-notify&lt;/h1&gt; &#xA;&lt;p&gt;A fancy, configurable, notification manager for NeoVim&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130856848-e8289850-028f-4f49-82f1-5ea1b8912f5e.gif&#34; alt=&#34;notify&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Credit to &lt;a href=&#34;https://github.com/sunjon&#34;&gt;sunjon&lt;/a&gt; for &lt;a href=&#34;https://neovim.discourse.group/t/wip-animated-notifications-plugin/448&#34;&gt;the design&lt;/a&gt; that inspired the appearance of this plugin.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#Installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#viewing-history&#34;&gt;Viewing History&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#highlights&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#render-style&#34;&gt;Render Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#animation-style&#34;&gt;Animation Style&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#opening-the-window&#34;&gt;Opening the window&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/#changing-the-window&#34;&gt;Changing the window&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install nvim-notify with the package manager of your choice.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;strong&gt;dein&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#34;rcarriga/nvim-notify&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;rcarriga/nvim-notify&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Simply call the module with a message!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;notify&#34;)(&#34;My super important message&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Other plugins can use the notification windows by setting it as your default notify function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify = require(&#34;notify&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can supply a level to change the border highlighting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify(&#34;This is an error message&#34;, &#34;error&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Updating an existing notification is also possible!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/152641078-92f3da72-f49f-4705-aec8-86512693445f.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use treesitter highlighting inside notifications with opacity changing&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/165042795-565878a3-9c6d-4c0b-ab0d-6858515835c5.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are a number of custom options that can be supplied in a table as the third argument. See &lt;code&gt;:h NotifyOptions&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Sample code for the first GIF above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local plugin = &#34;My Awesome Plugin&#34;&#xA;&#xA;vim.notify(&#34;This is an error message.\nSomething went wrong!&#34;, &#34;error&#34;, {&#xA;  title = plugin,&#xA;  on_open = function()&#xA;    vim.notify(&#34;Attempting recovery.&#34;, vim.log.levels.WARN, {&#xA;      title = plugin,&#xA;    })&#xA;    local timer = vim.loop.new_timer()&#xA;    timer:start(2000, 0, function()&#xA;      vim.notify({ &#34;Fixing problem.&#34;, &#34;Please wait...&#34; }, &#34;info&#34;, {&#xA;        title = plugin,&#xA;        timeout = 3000,&#xA;        on_close = function()&#xA;          vim.notify(&#34;Problem solved&#34;, nil, { title = plugin })&#xA;          vim.notify(&#34;Error code 0x0395AF&#34;, 1, { title = plugin })&#xA;        end,&#xA;      })&#xA;    end)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use plenary&#39;s async library to avoid using callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local async = require(&#34;plenary.async&#34;)&#xA;local notify = require(&#34;notify&#34;).async&#xA;&#xA;async.run(function()&#xA;  notify(&#34;Let&#39;s wait for this to close&#34;).events.close()&#xA;  notify(&#34;It closed!&#34;)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set a custom filetype to take advantage of treesitter highlighting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.notify(text, &#34;info&#34;, {&#xA;  title = &#34;My Awesome Plugin&#34;,&#xA;  on_open = function(win)&#xA;    local buf = vim.api.nvim_win_get_buf(win)&#xA;    vim.api.nvim_buf_set_option(buf, &#34;filetype&#34;, &#34;markdown&#34;)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the wiki for more examples!&lt;/p&gt; &#xA;&lt;h3&gt;Viewing History&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; installed then you can use the &lt;code&gt;notify&lt;/code&gt; extension to search the history:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope notify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in lua&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).extensions.notify.notify(&amp;lt;opts&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you lazy load &lt;code&gt;telescope&lt;/code&gt; you should manually call &lt;code&gt;require(&#34;telescope&#34;).load_extension(&#34;notify&#34;)&lt;/code&gt; before using the above commands. If you don&#39;t lazy load &lt;code&gt;telescope&lt;/code&gt; then &lt;code&gt;notify&lt;/code&gt; does this for you.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/136264308-2fcdfe57-a8f6-4b34-8ea1-e3a8349bc581.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;There is a command to display a log of the history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Notifications&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24252670/136264653-83038119-634b-48e7-8e8a-0edf4546efe2.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;You can get a list of past notifications with the history function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;notify&#34;).history()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;You can optionally call the &lt;code&gt;setup&lt;/code&gt; function to provide configuration options&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h notify.Config&lt;/code&gt; for options and &lt;code&gt;:h notify.setup()&lt;/code&gt; for default values.&lt;/p&gt; &#xA;&lt;h3&gt;Highlights&lt;/h3&gt; &#xA;&lt;p&gt;You can define custom highlights by supplying highlight groups for each of the levels. The naming scheme follows a simple structure: &lt;code&gt;Notify&amp;lt;upper case level name&amp;gt;&amp;lt;section&amp;gt;&lt;/code&gt;. If you want to use custom levels, you can define the highlights for them or they will follow the &lt;code&gt;INFO&lt;/code&gt; highlights by default.&lt;/p&gt; &#xA;&lt;p&gt;Here are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;highlight NotifyERRORBorder guifg=#8A1F1F&#xA;highlight NotifyWARNBorder guifg=#79491D&#xA;highlight NotifyINFOBorder guifg=#4F6752&#xA;highlight NotifyDEBUGBorder guifg=#8B8B8B&#xA;highlight NotifyTRACEBorder guifg=#4F3552&#xA;highlight NotifyERRORIcon guifg=#F70067&#xA;highlight NotifyWARNIcon guifg=#F79000&#xA;highlight NotifyINFOIcon guifg=#A9FF68&#xA;highlight NotifyDEBUGIcon guifg=#8B8B8B&#xA;highlight NotifyTRACEIcon guifg=#D484FF&#xA;highlight NotifyERRORTitle  guifg=#F70067&#xA;highlight NotifyWARNTitle guifg=#F79000&#xA;highlight NotifyINFOTitle guifg=#A9FF68&#xA;highlight NotifyDEBUGTitle  guifg=#8B8B8B&#xA;highlight NotifyTRACETitle  guifg=#D484FF&#xA;highlight link NotifyERRORBody Normal&#xA;highlight link NotifyWARNBody Normal&#xA;highlight link NotifyINFOBody Normal&#xA;highlight link NotifyDEBUGBody Normal&#xA;highlight link NotifyTRACEBody Normal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Render Style&lt;/h3&gt; &#xA;&lt;p&gt;The appearance of the notifications can be configured, using either built-in methods or custome functions. See &lt;code&gt;:help notify-render()&lt;/code&gt; for details&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;default&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/141534868-fdcc9d03-9f7b-47fd-acfc-5a20b98e4e0a.png&#34; alt=&#34;default&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#34;minimal&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/141534952-bb0cf491-5bb4-473c-9a67-8adb5b23b232.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feel free to submit custom rendering functions to share with others!&lt;/p&gt; &#xA;&lt;h3&gt;Animation Style&lt;/h3&gt; &#xA;&lt;p&gt;The animation is designed to work in stages. The first stage is the opening of the window, and all subsequent stages can changes the position or opacity of the window. You can use one of the built-in styles or provide your own in the setup.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&#34;fade_in_slide_out&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924913-f3a61f2c-2330-4426-a787-3cd7494fccc0.gif&#34; alt=&#34;fade_slide&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&#34;fade&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924911-a89bef9b-e815-4aa5-a255-84bc23dd8c8e.gif&#34; alt=&#34;fade&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&#34;slide&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924905-656cabfc-9eb7-4e22-b6da-8a2a1f508fa5.gif&#34; alt=&#34;slide&#34;&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&#34;static&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/130924902-8c77b5a1-6d13-48f4-98a9-866e58cb76e4.gif&#34; alt=&#34;static&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom styles can be provided by setting the config &lt;code&gt;stages&lt;/code&gt; value to a list of functions.&lt;/p&gt; &#xA;&lt;p&gt;If you create a custom style, feel free to open a PR to submit it as a built-in style!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NB.&lt;/strong&gt; This is a prototype API that is open to change. I am looking for feedback on both issues or extra data that could be useful in creating animation styles.&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/rcarriga/nvim-notify/master/lua/notify/stages/&#34;&gt;built-in styles&lt;/a&gt; to see examples&lt;/p&gt; &#xA;&lt;h4&gt;Opening the window&lt;/h4&gt; &#xA;&lt;p&gt;The first function in the list should return a table to be provided to &lt;code&gt;nvim_open_win&lt;/code&gt;, optionally including an extra &lt;code&gt;opacity&lt;/code&gt; key which can be between 0-100.&lt;/p&gt; &#xA;&lt;p&gt;The function is given a state table that contains the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;message: table&lt;/code&gt; State of the message to be shown &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;width&lt;/code&gt; Width of the message buffer&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;height&lt;/code&gt; Height of the message buffer&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;open_windows: integer[]&lt;/code&gt; List of all window IDs currently showing messages&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;buffer: integer&lt;/code&gt; The buffer containing the rendered notification message.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a notification can&#39;t be shown at the moment the function should return &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Changing the window&lt;/h4&gt; &#xA;&lt;p&gt;All following functions should return the goal values for the window to reach from it&#39;s current point. They will receive the same state object as the initial function and a second argument of the window ID.&lt;/p&gt; &#xA;&lt;p&gt;The following fields can be returned in a table:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;col&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;row&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;width&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These can be provided as either numbers or as a table. If they are provided as numbers then they will change instantly the value given.&lt;/p&gt; &#xA;&lt;p&gt;If they are provided as a table, they will be treated as a value to animate towards. This uses a dampened spring algorithm to provide a natural feel to the movement.&lt;/p&gt; &#xA;&lt;p&gt;The table must contain the goal value as the 1st index (e.g. &lt;code&gt;{10}&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;All other values are provided with keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;damping: number&lt;/code&gt; How motion decays over time. Values less than 1 mean the spring can overshoot. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bounds: &amp;gt;= 0&lt;/li&gt; &#xA;   &lt;li&gt;Default: 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;frequency: number&lt;/code&gt; How fast the spring oscillates &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bounds: &amp;gt;= 0&lt;/li&gt; &#xA;   &lt;li&gt;Default: 1&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;complete: fun(value: number): bool&lt;/code&gt; Function to determine if value has reached its goal. If not provided it will complete when the value rounded to 2 decimal places is equal to the goal.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once the last function has reached its goals, the window is removed.&lt;/p&gt; &#xA;&lt;p&gt;One of the stages should also return the key &lt;code&gt;time&lt;/code&gt; set to true. This is treated as the stage which the notification is on a timer. The goals of this stage are not used to check if it is complete. The next stage will start once the notification reaches its timeout.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rcarriga/nvim-dap-ui</title>
    <updated>2022-06-23T01:45:16Z</updated>
    <id>tag:github.com,2022-06-23:/rcarriga/nvim-dap-ui</id>
    <link href="https://github.com/rcarriga/nvim-dap-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A UI for nvim-dap&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-dap-ui&lt;/h1&gt; &#xA;&lt;p&gt;This is still early stage software. Bugs are expected and there may be breaking changes!&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;A UI for &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; which provides a good out of the box configuration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126842672-de9c6b78-eec2-4187-b48e-977686ec4080.png&#34; alt=&#34;Preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with your favourite package manager alongside nvim-dap&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/dein.vim&#34;&gt;&lt;strong&gt;dein&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#34;mfussenegger/nvim-dap&#34;)&#xA;call dein#add(&#34;rcarriga/nvim-dap-ui&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;strong&gt;vim-plug&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;mfussenegger/nvim-dap&#39;&#xA;Plug &#39;rcarriga/nvim-dap-ui&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;rcarriga/nvim-dap-ui&#34;, requires = {&#34;mfussenegger/nvim-dap&#34;} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;nvim-dap-ui is built on the idea of &#34;elements&#34;. These elements are windows which provide different features.&lt;/p&gt; &#xA;&lt;p&gt;The UI is split between a sidebar which sits on the side of the screen, and a tray which sits on the bottom of the screen by default. Both of these can contain any of the available elements and the position of each can be changed to any side of the screen.&lt;/p&gt; &#xA;&lt;p&gt;Elements can also be displayed temporarily in a floating window.&lt;/p&gt; &#xA;&lt;p&gt;You can supply an object to the &lt;code&gt;require(&#34;dapui&#34;).setup()&lt;/code&gt; function to configure the elements.&lt;/p&gt; &#xA;&lt;p&gt;Default settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).setup({&#xA;  icons = { expanded = &#34;▾&#34;, collapsed = &#34;▸&#34; },&#xA;  mappings = {&#xA;    -- Use a table to apply multiple mappings&#xA;    expand = { &#34;&amp;lt;CR&amp;gt;&#34;, &#34;&amp;lt;2-LeftMouse&amp;gt;&#34; },&#xA;    open = &#34;o&#34;,&#xA;    remove = &#34;d&#34;,&#xA;    edit = &#34;e&#34;,&#xA;    repl = &#34;r&#34;,&#xA;    toggle = &#34;t&#34;,&#xA;  },&#xA;  -- Expand lines larger than the window&#xA;  -- Requires &amp;gt;= 0.7&#xA;  expand_lines = vim.fn.has(&#34;nvim-0.7&#34;),&#xA;  -- Layouts define sections of the screen to place windows.&#xA;  -- The position can be &#34;left&#34;, &#34;right&#34;, &#34;top&#34; or &#34;bottom&#34;.&#xA;  -- The size specifies the height/width depending on position.&#xA;  -- Elements are the elements shown in the layout (in order).&#xA;  -- Layouts are opened in order so that earlier layouts take priority in window sizing.&#xA;  layouts = {&#xA;    {&#xA;      elements = {&#xA;      -- Elements can be strings or table with id and size keys.&#xA;        { id = &#34;scopes&#34;, size = 0.25 },&#xA;        &#34;breakpoints&#34;,&#xA;        &#34;stacks&#34;,&#xA;        &#34;watches&#34;,&#xA;      },&#xA;      size = 40,&#xA;      position = &#34;left&#34;,&#xA;    },&#xA;    {&#xA;      elements = {&#xA;        &#34;repl&#34;,&#xA;        &#34;console&#34;,&#xA;      },&#xA;      size = 10,&#xA;      position = &#34;bottom&#34;,&#xA;    },&#xA;  },&#xA;  floating = {&#xA;    max_height = nil, -- These can be integers or a float between 0 and 1.&#xA;    max_width = nil, -- Floats will be treated as percentage of your screen.&#xA;    border = &#34;single&#34;, -- Border style. Can be &#34;single&#34;, &#34;double&#34; or &#34;rounded&#34;&#xA;    mappings = {&#xA;      close = { &#34;q&#34;, &#34;&amp;lt;Esc&amp;gt;&#34; },&#xA;    },&#xA;  },&#xA;  windows = { indent = 1 },&#xA;  render = {&#xA;    max_type_length = nil, -- Can be integer or nil.&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Variable Scopes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126842891-c5175f13-5eb7-4d0a-9dae-620c4d31448a.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;scopes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays the available scopes and variables within them.&lt;/p&gt; &#xA;&lt;p&gt;Mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;edit&lt;/code&gt;: Edit the value of a variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;expand&lt;/code&gt;: Toggle showing any children of variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;repl&lt;/code&gt;: Send variable to REPL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Threads and Stack Frames&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126843106-5dce09dc-49d0-4aaa-ba98-fd8f17b31414.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;stacks&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Displays the running threads and their stack frames.&lt;/p&gt; &#xA;&lt;p&gt;Mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;open&lt;/code&gt;: Jump to a place within the stack frame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;: Toggle displaying &lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/specification#Types_StackFrame&#34;&gt;subtle&lt;/a&gt; frames&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Watch Expressions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126843390-4e1575d8-9d7d-4f43-8680-094cfe9eae63.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;watches&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Allows creation of expressions to watch the value of in the context of the current frame. This uses a prompt buffer for input. To enter a new expression, just enter insert mode and you will see a prompt appear. Press enter to submit&lt;/p&gt; &#xA;&lt;p&gt;Mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;expand&lt;/code&gt;: Toggle showing the children of an expression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remove&lt;/code&gt;: Remove the watched expression.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;edit&lt;/code&gt;: Edit an expression or set the value of a child variable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;repl&lt;/code&gt;: Send expression to REPL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Breakpoints&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126843577-361645e4-6265-40eb-86dc-d6607512a15e.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;breakpoints&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;List all breakpoints currently set.&lt;/p&gt; &#xA;&lt;p&gt;Mappings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;open&lt;/code&gt;: Jump to the location the breakpoint is set&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toggle&lt;/code&gt;: Enable/disable the selected breakpoint&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;REPL&lt;/h3&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;repl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The REPL provided by nvim-dap.&lt;/p&gt; &#xA;&lt;h3&gt;Console&lt;/h3&gt; &#xA;&lt;p&gt;Element ID: &lt;code&gt;console&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The console window used by nvim-dap for the integrated terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started simply call the setup method on startup, optionally providing custom settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can open, close and toggle the windows with corresponding functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).open()&#xA;require(&#34;dapui&#34;).close()&#xA;require(&#34;dapui&#34;).toggle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of the functions optionally takes either &lt;code&gt;&#34;sidebar&#34;&lt;/code&gt; or &lt;code&gt;&#34;tray&#34;&lt;/code&gt; as an argument to only change the specified component.&lt;/p&gt; &#xA;&lt;p&gt;You can use nvim-dap events to open and close the windows automatically (&lt;code&gt;:help dap-extensions&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local dap, dapui = require(&#34;dap&#34;), require(&#34;dapui&#34;)&#xA;dap.listeners.after.event_initialized[&#34;dapui_config&#34;] = function()&#xA;  dapui.open()&#xA;end&#xA;dap.listeners.before.event_terminated[&#34;dapui_config&#34;] = function()&#xA;  dapui.close()&#xA;end&#xA;dap.listeners.before.event_exited[&#34;dapui_config&#34;] = function()&#xA;  dapui.close()&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Floating Elements&lt;/h3&gt; &#xA;&lt;p&gt;For elements that are not opened in the tray or sidebar, you can open them in a floating window.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126844102-8789effb-4276-4599-afe6-a074b019c38d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).float_element(&amp;lt;element ID&amp;gt;, &amp;lt;optional settings&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not provide an element ID, you will be queried to select one.&lt;/p&gt; &#xA;&lt;p&gt;The optional settings can included the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;width: number&lt;/code&gt; Width of the window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;height: number&lt;/code&gt; Height of the window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enter: boolean&lt;/code&gt; Enter the floating window&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Call the same function again while the window is open and the cursor will jump to the floating window. The REPL will automatically jump to the floating window on open.&lt;/p&gt; &#xA;&lt;h3&gt;Evaluate Expression&lt;/h3&gt; &#xA;&lt;p&gt;For a one time expression evaluation, you can call a hover window to show a value&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24252670/126844454-691d691c-4550-46fe-89dc-25e1e9681545.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dapui&#34;).eval(&amp;lt;expression&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If an expression is not provided it will use the word under the cursor, or if in visual mode, the currently highlighted text. You can define a visual mapping like so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;vnoremap &amp;lt;M-k&amp;gt; &amp;lt;Cmd&amp;gt;lua require(&#34;dapui&#34;).eval()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call the same function again while the window is open to jump to the eval window.&lt;/p&gt; &#xA;&lt;p&gt;The same mappings as the variables element apply within the hover window.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zmartzone/lua-resty-openidc</title>
    <updated>2022-06-23T01:45:16Z</updated>
    <id>tag:github.com,2022-06-23:/zmartzone/lua-resty-openidc</id>
    <link href="https://github.com/zmartzone/lua-resty-openidc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenID Connect Relying Party and OAuth 2.0 Resource Server implementation in Lua for NGINX / OpenResty&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/zmartzone/lua-resty-openidc/actions/workflows/docker-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/zmartzone/lua-resty-openidc/actions/workflows/docker-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://openid.net/certification&#34;&gt;&lt;img width=&#34;184&#34; height=&#34;96&#34; align=&#34;right&#34; src=&#34;http://openid.net/wordpress-content/uploads/2016/04/oid-l-certification-mark-l-rgb-150dpi-90mm@2x.png&#34; alt=&#34;OpenID Certification&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;lua-resty-openidc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;lua-resty-openidc&lt;/strong&gt; is a library for &lt;a href=&#34;http://nginx.org/&#34;&gt;NGINX&lt;/a&gt; implementing the &lt;a href=&#34;http://openid.net/specs/openid-connect-core-1_0.html&#34;&gt;OpenID Connect&lt;/a&gt; &lt;strong&gt;Relying Party (RP)&lt;/strong&gt; and/or the &lt;a href=&#34;https://tools.ietf.org/html/rfc6749&#34;&gt;OAuth 2.0&lt;/a&gt; &lt;strong&gt;Resource Server (RS)&lt;/strong&gt; functionality.&lt;/p&gt; &#xA;&lt;p&gt;When used as an OpenID Connect Relying Party it authenticates users against an OpenID Connect Provider using &lt;a href=&#34;http://openid.net/specs/openid-connect-discovery-1_0.html&#34;&gt;OpenID Connect Discovery&lt;/a&gt; and the Basic Client Profile (i.e. the Authorization Code flow). When used as an OAuth 2.0 Resource Server it can validate OAuth 2.0 Bearer Access Tokens against an Authorization Server or, in case a JSON Web Token is used for an Access Token, verification can happen against a pre-configured secret/key .&lt;/p&gt; &#xA;&lt;p&gt;It maintains sessions for authenticated users by leveraging &lt;code&gt;lua-resty-session&lt;/code&gt; thus offering a configurable choice between storing the session state in a client-side browser cookie or use in of the server-side storage mechanisms &lt;code&gt;shared-memory|memcache|redis&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It supports server-wide caching of resolved Discovery documents and validated Access Tokens.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as a reverse proxy terminating OAuth/OpenID Connect in front of an origin server so that the origin server/services can be protected with the relevant standards without implementing those on the server itself.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;lua-resty-openidc&lt;/strong&gt; depends on the following packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nginx.org/&#34;&gt;NGINX&lt;/a&gt; and &lt;a href=&#34;https://github.com/simpl/ngx_devel_kit&#34;&gt;&lt;code&gt;ngx_devel_kit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.lua.org/&#34;&gt;Lua&lt;/a&gt; or &lt;a href=&#34;http://luajit.org/luajit.html&#34;&gt;LuaJIT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;&lt;code&gt;lua-nginx-module&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.kyne.com.au/~mark/software/lua-cjson.php&#34;&gt;&lt;code&gt;lua-cjson&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-resty-string&#34;&gt;&lt;code&gt;lua-resty-string&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The dependencies above come automatically with &lt;a href=&#34;http://openresty.org/&#34;&gt;OpenResty&lt;/a&gt;. You will need to install two extra pure-Lua dependencies that implement session management and HTTP client functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pintsized/lua-resty-http&#34;&gt;&lt;code&gt;lua-resty-http&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bungle/lua-resty-session&#34;&gt;&lt;code&gt;lua-resty-session&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Typically - when running as an OpenID Connect RP or an OAuth 2.0 server that consumes JWT access tokens - you&#39;ll also need to install the following dependency:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cdbattags/lua-resty-jwt&#34;&gt;&lt;code&gt;lua-resty-jwt&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;lua-resty-jwt&lt;/code&gt; dependency above is &lt;em&gt;not&lt;/em&gt; required when running as an OAuth 2.0 Resource Server (only) using remote introspection for access token validation.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;opm&lt;/code&gt; execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; opm install zmartzone/lua-resty-openidc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;luarocks&lt;/code&gt; execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; luarocks install lua-resty-openidc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise copy &lt;code&gt;openidc.lua&lt;/code&gt; somewhere in your &lt;code&gt;lua_package_path&lt;/code&gt; under a directory named &lt;code&gt;resty&lt;/code&gt;. If you are using &lt;a href=&#34;http://openresty.org/&#34;&gt;OpenResty&lt;/a&gt;, the default location would be &lt;code&gt;/usr/local/openresty/lualib/resty&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration for Google+ Signin&lt;/h2&gt; &#xA;&lt;p&gt;Sample &lt;code&gt;nginx.conf&lt;/code&gt; configuration for authenticating users against Google+ Signin, protecting a reverse-proxied path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;events {&#xA;  worker_connections 128;&#xA;}&#xA;&#xA;http {&#xA;&#xA;  lua_package_path &#39;~/lua/?.lua;;&#39;;&#xA;&#xA;  resolver 8.8.8.8;&#xA;&#xA;  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;&#xA;  lua_ssl_verify_depth 5;&#xA;&#xA;  # cache for discovery metadata documents&#xA;  lua_shared_dict discovery 1m;&#xA;  # cache for JWKs&#xA;  lua_shared_dict jwks 1m;&#xA;&#xA;  # NB: if you have &#34;lua_code_cache off;&#34;, use:&#xA;  # set $session_secret xxxxxxxxxxxxxxxxxxx;&#xA;  # see: https://github.com/bungle/lua-resty-session#notes-about-turning-lua-code-cache-off&#xA;&#xA;  server {&#xA;    listen 8080;&#xA;&#xA;    location / {&#xA;&#xA;      access_by_lua_block {&#xA;&#xA;          local opts = {&#xA;             -- the full redirect URI must be protected by this script&#xA;             -- if the URI starts with a / the full redirect URI becomes&#xA;             -- ngx.var.scheme..&#34;://&#34;..ngx.var.http_host..opts.redirect_uri&#xA;             -- unless the scheme was overridden using opts.redirect_uri_scheme or an X-Forwarded-Proto header in the incoming request&#xA;             redirect_uri = &#34;https://MY_HOST_NAME/redirect_uri&#34;,&#xA;             -- up until version 1.6.1 you&#39;d specify&#xA;             -- redirect_uri_path = &#34;/redirect_uri&#34;,&#xA;             -- and could not set the hostname&#xA;&#xA;             -- The discovery endpoint of the OP. Enable to get the URI of all endpoints (Token, introspection, logout...)&#xA;             discovery = &#34;https://accounts.google.com/.well-known/openid-configuration&#34;,&#xA;&#xA;             -- Access to OP Token endpoint requires an authentication. Several authentication modes are supported:&#xA;             --token_endpoint_auth_method = [&#34;client_secret_basic&#34;|&#34;client_secret_post&#34;|&#34;private_key_jwt&#34;|&#34;client_secret_jwt&#34;],&#xA;             -- o If token_endpoint_auth_method is set to &#34;client_secret_basic&#34;, &#34;client_secret_post&#34;, or &#34;client_secret_jwt&#34;, authentication to Token endpoint is using client_id and client_secret&#xA;             --   For non compliant OPs to OAuth 2.0 RFC 6749 for client Authentication (cf. https://tools.ietf.org/html/rfc6749#section-2.3.1)&#xA;             --   client_id and client_secret MUST be invariant when url encoded&#xA;             client_id = &#34;&amp;lt;client_id&amp;gt;&#34;,&#xA;             client_secret = &#34;&amp;lt;client_secret&amp;gt;&#34;,&#xA;             -- o If token_endpoint_auth_method is set to &#34;private_key_jwt&#34; authentication to Token endpoint is using client_id, client_rsa_private_key and client_rsa_private_key_id to compute a signed JWT&#xA;             --   client_rsa_private_key is the RSA private key to be used to sign the JWT generated by lua-resty-openidc for authentication to the OP&#xA;             --   client_rsa_private_key_id (optional) is the key id to be set in the JWT header to identify which public key the OP shall use to verify the JWT signature&#xA;             --client_id = &#34;&amp;lt;client_id&amp;gt;&#34;,&#xA;             --client_rsa_private_key=[[-----BEGIN RSA PRIVATE KEY-----&#xA;MIIEogIBAAKCAQEAiThmpvXBYdur716D2q7fYKirKxzZIU5QrkBGDvUOwg5izcTv&#xA;[...]&#xA;h2JHukolz9xf6qN61QMLSd83+kwoBr2drp6xg3eGDLIkQCQLrkY=&#xA;-----END RSA PRIVATE KEY-----]],&#xA;             --client_rsa_private_key_id=&#34;key id#1&#34;,&#xA;             --   Life duration expressed in seconds of the signed JWT generated by lua-resty-openidc for authentication to the OP.&#xA;             --   (used when token_endpoint_auth_method is set to &#34;private_key_jwt&#34; or &#34;client_secret_jwt&#34; authentication). Default is 60 seconds.&#xA;             --client_jwt_assertion_expires_in = 60,&#xA;             -- When using https to any OP endpoints, enforcement of SSL certificate check can be mandated (&#34;yes&#34;) or not (&#34;no&#34;).&#xA;             --ssl_verify = &#34;no&#34;,&#xA;             -- Connection keepalive with the OP can be enabled (&#34;yes&#34;) or disabled (&#34;no&#34;).&#xA;             --keepalive = &#34;no&#34;,&#xA;&#xA;             --response_mode=form_post can be used to make lua-resty-openidc use the [OAuth 2.0 Form Post Response Mode](https://openid.net/specs/oauth-v2-form-post-response-mode-1_0.html). *Note* for modern browsers you will need to set [`$session_cookie_samesite`](https://github.com/bungle/lua-resty-session#string-sessioncookiesamesite) to `None` with form_post unless your OpenID Connect Provider and Relying Party share the same domain.&#xA;             --authorization_params = { hd=&#34;zmartzone.eu&#34; },&#xA;             --scope = &#34;openid email profile&#34;,&#xA;             -- Refresh the users id_token after 900 seconds without requiring re-authentication&#xA;             --refresh_session_interval = 900,&#xA;             --iat_slack = 600,&#xA;             --redirect_uri_scheme = &#34;https&#34;,&#xA;             --logout_path = &#34;/logout&#34;,&#xA;             --redirect_after_logout_uri = &#34;/&#34;,&#xA;             -- Where should the user be redirected after logout from the RP. This option overides any end_session_endpoint that the OP may have provided in the discovery response.&#xA;             --redirect_after_logout_with_id_token_hint = true,&#xA;             -- Whether the redirection after logout should include the id token as an hint (if available). This option is used only if redirect_after_logout_uri is set.&#xA;             --post_logout_redirect_uri = &#34;https://www.zmartzone.eu/logoutSuccessful&#34;,&#xA;             -- Where does the RP requests that the OP redirects the user after logout. If this option is set to a relative URI, it will be relative to the OP&#39;s logout endpoint, not the RP&#39;s.&#xA;&#xA;             --accept_none_alg = false&#xA;             -- if your OpenID Connect Provider doesn&#39;t sign its id tokens&#xA;             -- (uses the &#34;none&#34; signature algorithm) then set this to true.&#xA;&#xA;             --accept_unsupported_alg = true&#xA;             -- if you want to reject tokens signed using an algorithm&#xA;             -- not supported by lua-resty-jwt set this to false. If&#xA;             -- you leave it unset or set it to true, the token signature will not be&#xA;             -- verified when an unsupported algorithm is used.&#xA;&#xA;             --renew_access_token_on_expiry = true&#xA;             -- whether this plugin shall try to silently renew the access token once it is expired if a refresh token is available.&#xA;             -- if it fails to renew the token, the user will be redirected to the authorization endpoint.&#xA;             --access_token_expires_in = 3600&#xA;             -- Default lifetime in seconds of the access_token if no expires_in attribute is present in the token endpoint response.&#xA;&#xA;             --access_token_expires_leeway = 0&#xA;             --  Expiration leeway for access_token renewal. If this is set, renewal will happen access_token_expires_leeway seconds before the token expiration. This avoids errors in case the access_token just expires when arriving to the OAuth Resource Server.&#xA;&#xA;             --force_reauthorize = false&#xA;             -- When force_reauthorize is set to true the authorization flow will be executed even if a token has been cached already&#xA;             --session_contents = {id_token=true}&#xA;             -- Whitelist of session content to enable. This can be used to reduce the session size.&#xA;             -- When not set everything will be included in the session.&#xA;             -- Available are:&#xA;             -- id_token, enc_id_token, user, access_token (includes refresh token)&#xA;&#xA;             -- You can specify timeouts for connect/send/read as a single number (setting all timeouts) or as a table. Values are in milliseconds&#xA;             -- timeout = 1000&#xA;             -- timeout = { connect = 500, send = 1000, read = 1000 }&#xA;&#xA;             --use_nonce = false&#xA;             -- By default the authorization request includes the&#xA;             -- nonce paramter. You can use this option to disable it&#xA;             -- which may be necessary when talking to a broken OpenID&#xA;             -- Connect provider that ignores the paramter as the&#xA;             -- id_token will be rejected otherwise.&#xA;&#xA;             --revoke_tokens_on_logout = false&#xA;             -- When revoke_tokens_on_logout is set to true a logout notifies the authorization server that previously obtained refresh and access tokens are no longer needed. This requires that revocation_endpoint is discoverable.&#xA;             -- If there is no revocation endpoint supplied or if there are errors on revocation the user will not be notified and the logout process continues normally.&#xA;&#xA;             -- Optional : use outgoing proxy to the OpenID Connect provider endpoints with the proxy_opts table :&#xA;             -- this requires lua-resty-http &amp;gt;= 0.12&#xA;             -- proxy_opts = {&#xA;             --    http_proxy  = &#34;http://&amp;lt;proxy_host&amp;gt;:&amp;lt;proxy_port&amp;gt;/&#34;,&#xA;             --    https_proxy = &#34;http://&amp;lt;proxy_host&amp;gt;:&amp;lt;proxy_port&amp;gt;/&#34;&#xA;             -- }&#xA;&#xA;             -- Lifecycle Hooks&#xA;             --&#xA;             -- lifecycle = {&#xA;             --    on_created = handle_created,&#xA;             --    on_authenticated = handle_authenticated,&#xA;             --    on_regenerated = handle_regenerated&#xA;             --    on_logout = handle_logout&#xA;             -- }&#xA;             --&#xA;             -- where `handle_created`, `handle_authenticated`, `handle_regenerated` and `handle_logout` are callables&#xA;             -- accepting a single argument `session`&#xA;             --&#xA;             --  -- `on_created` hook is invoked *after* a session has been created in&#xA;             --     `openidc_authorize` immediately prior to saving the session&#xA;             --  -- `on_authenticated` hook is invoked *after* receiving authorization response in&#xA;             --     `openidc_authorization_response` immediately prior to saving the session&#xA;             --     Starting with lua-resty-openidc 1.7.5 this receives the decoded id_token as second and the response of the token endpoint as third argument      &#xA;             --  -- `on_regenerated` is invoked immediately after the&#xA;                     a new access token has been obtained via token&#xA;                     refresh and is called with the regenerated session table&#xA;             --  -- `on_logout` hook is invoked *before* a session is destroyed in&#xA;             --     `openidc_logout`&#xA;             --&#xA;             --  Any, all or none of the hooks may be used. Empty `lifecycle` does nothing.&#xA;             --  A hook that returns a truthy value causes the lifecycle action they are taking part of to fail.&#xA;&#xA;             -- Optional : add decorator for HTTP request that is&#xA;             -- applied when lua-resty-openidc talks to the OpenID Connect&#xA;             -- provider directly. Can be used to provide extra HTTP headers&#xA;             -- or add other similar behavior.&#xA;             -- http_request_decorator = function(req)&#xA;             --   local h = req.headers or {}&#xA;             --   h[EXTRA_HEADER] = &#39;my extra header&#39;&#xA;             --   req.headers = h&#xA;             --   return req&#xA;             -- end,&#xA;&#xA;             -- use_pkce = false,&#xA;             -- when set to true the &#34;Proof Key for Code Exchange&#34; as&#xA;             -- defined in RFC 7636 will be used. The code challenge&#xA;             -- method will alwas be S256&#xA;&#xA;          }&#xA;&#xA;          -- call authenticate for OpenID Connect user authentication&#xA;          local res, err = require(&#34;resty.openidc&#34;).authenticate(opts)&#xA;&#xA;          if err then&#xA;            ngx.status = 500&#xA;            ngx.say(err)&#xA;            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)&#xA;          end&#xA;&#xA;          -- at this point res is a Lua table with 3 keys:&#xA;          --   id_token    : a Lua table with the claims from the id_token (required)&#xA;          --   access_token: the access token (optional)&#xA;          --   user        : a Lua table with the claims returned from the user info endpoint (optional)&#xA;&#xA;          --if res.id_token.hd ~= &#34;zmartzone.eu&#34; then&#xA;          --  ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          --end&#xA;&#xA;          --if res.user.email ~= &#34;hans.zandbelt@zmartzone.eu&#34; then&#xA;          --  ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          --end&#xA;&#xA;          -- set headers with user info: this will overwrite any existing headers&#xA;          -- but also scrub(!) them in case no value is provided in the token&#xA;          ngx.req.set_header(&#34;X-USER&#34;, res.id_token.sub)&#xA;      }&#xA;&#xA;      proxy_pass http://localhost:80;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check authentication only&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- check session, but do not redirect to auth if not already logged in&#xA;local res, err = require(&#34;resty.openidc&#34;).authenticate(opts, nil, &#34;pass&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check authentication only and deny unauthenticated access&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- check session, do not redirect to auth if not already logged in but return an error instead&#xA;local res, err = require(&#34;resty.openidc&#34;).authenticate(opts, nil, &#34;deny&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sessions and Locking&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;authenticate&lt;/code&gt; function returns the current session object as its forth return argument. If you have configured lua-resty-session to use a server side storage backend that uses locking, the session may still be locked when it is returned. In this case you may want to close it explicitly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local res, err, target, session = require(&#34;resty.openidc&#34;).authenticate(opts)&#xA;session:close()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caching&lt;/h2&gt; &#xA;&lt;p&gt;lua-resty-openidc can use &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/#lua_shared_dict&#34;&gt;shared memory caches&lt;/a&gt; for several things. If you want it to use the caches, you must use &lt;code&gt;lua_shared_dict&lt;/code&gt; in your &lt;code&gt;nginx.conf&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Currently up to four caches are used&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the cache named &lt;code&gt;discovery&lt;/code&gt; stores the OpenID Connect Disovery metadata of your OpenID Connect Provider. Cache items expire after 24 hours unless overriden by &lt;code&gt;opts.discovery_expires_in&lt;/code&gt; (a value given in seconds) . This cache will store one item per issuer URI and you can look up the discovery document yourself to get an estimate for the size required - usually a few kB per OpenID Connect Provider.&lt;/li&gt; &#xA; &lt;li&gt;the cache named &lt;code&gt;jwks&lt;/code&gt; stores the key material of your OpenID Connect Provider if it is provided via the JWKS endpoint. Cache items expire after 24 hours unless overriden by &lt;code&gt;opts.jwks_expires_in&lt;/code&gt;. This cache will store one item per JWKS URI and you can look up the jwks yourself to get an estimate for the size required - usually a few kB per OpenID Connect Provider.&lt;/li&gt; &#xA; &lt;li&gt;the cache named &lt;code&gt;introspection&lt;/code&gt; stores the result of OAuth2 token introspection. Cache items expire when the corresponding token expires. Tokens with unknown expiry are not cached at all. This cache will contain one entry per introspected access token - usually this will be a few kB per token.&lt;/li&gt; &#xA; &lt;li&gt;the cache named &lt;code&gt;jwt_verification&lt;/code&gt; stores the result of JWT verification. Cache items expire when the corresponding token expires. Tokens with unknown expiry are not cached for two minutes. This cache will contain one entry per verified JWT - usually this will be a few kB per token.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Caching of Introspection and JWT Verification Results&lt;/h2&gt; &#xA;&lt;p&gt;Note the &lt;code&gt;jwt_verification&lt;/code&gt; and &lt;code&gt;introspection&lt;/code&gt; caches are shared between all configured locations. If you are using locations with different &lt;code&gt;opts&lt;/code&gt; configuration the shared cache may allow a token that is valid for only one location to be accepted by another if it is read from the cache. In order to avoid cache confusion it is recommended to set &lt;code&gt;opts.cache_segment&lt;/code&gt; to unique strings for each set of related locations.&lt;/p&gt; &#xA;&lt;h2&gt;Revoke tokens&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;revoke_tokens(opts, session)&lt;/code&gt; function revokes the current refresh and access token. In contrast to a full logout, the session cookie will not be destroyed and the endsession endpoint will not be called. The function returns &lt;code&gt;true&lt;/code&gt; if both tokens were revoked successfully. This function might be helpful in scenarios where you want to destroy/remove a session from the server side.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;revoke_token(opts, token_type_hint, token)&lt;/code&gt; it is also possible to revoke a specific token. &lt;code&gt;token_type_hint&lt;/code&gt; can usually be &lt;code&gt;refresh_token&lt;/code&gt; or &lt;code&gt;access_token&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sample Configuration for OAuth 2.0 JWT Token Validation&lt;/h2&gt; &#xA;&lt;p&gt;Sample &lt;code&gt;nginx.conf&lt;/code&gt; configuration for verifying Bearer JWT Access Tokens against a pre-configured secret/key. Once successfully verified, the NGINX server may function as a reverse proxy to an internal origin server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;events {&#xA;  worker_connections 128;&#xA;}&#xA;&#xA;http {&#xA;&#xA;  lua_package_path &#39;~/lua/?.lua;;&#39;;&#xA;&#xA;  resolver 8.8.8.8;&#xA;&#xA;  # cache for JWT verification results&#xA;  lua_shared_dict jwt_verification 10m;&#xA;&#xA;  server {&#xA;    listen 8080;&#xA;&#xA;    location /api {&#xA;&#xA;      access_by_lua &#39;&#xA;&#xA;          local opts = {&#xA;&#xA;            -- 1. example of a shared secret for HS??? signature verification&#xA;            --symmetric_key = &#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#34;,&#xA;            -- in versions up to 1.6.1 this option&#39;s key would have been secret&#xA;            -- rather than symmetric_key&#xA;&#xA;            -- 2. another example of a public cert for RS??? signature verification&#xA;            public_key = [[-----BEGIN CERTIFICATE-----&#xA;MIIC0DCCAbigAwIBAgIGAVSbMZs1MA0GCSqGSIb3DQEBCwUAMCkxCzAJBgNVBAYTAlVTMQwwCgYD&#xA;VQQKEwNibGExDDAKBgNVBAMTA2JsYTAeFw0xNjA1MTAxNTAzMjBaFw0yNjA1MDgxNTAzMjBaMCkx&#xA;CzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNibGExDDAKBgNVBAMTA2JsYTCCASIwDQYJKoZIhvcNAQEB&#xA;BQADggEPADCCAQoCggEBAIcLtHjX2GFxYv1033dvfohyCU6nsuR1qoDXfHTG3Mf/Yj4BfLHtMjJr&#xA;nR3sgHItH3B6qZPnfErfsN0LP4uZ10/74CrWVqT5dy6ecXMqYtz/KNJ8rG0vY8vltc417AU4fie8&#xA;gyeWv/Z6wHWUCf3NHRV8GfFgfuvywgUpHo8ujpUPFr+zrPr8butrzJPq1h3+r0f5P45tfWOdpjCT&#xA;gsTzK6urUG0k3WkwdDYapL3wRCAw597nYfgKzzXuh9N0ZL3Uj+eJ6BgCzUZDLXABpMBZfk6hmmzp&#xA;cAFV4nTf1AaAs/EOwVE0YgZBJiBrueMcteAIxKrKjEHgThU2Zs9gN9cSFicCAwEAATANBgkqhkiG&#xA;9w0BAQsFAAOCAQEAQLU1A58TrSwrEccCIy0wxiGdCwQbaNMohzirc41zRMCXleJXbtsn1vv85J6A&#xA;RmejeH5f/JbDqRRRArGMdLooGbqjWG/lwZT456Q6DXqF2plkBvh37kp/GjthGyR8ODJn5ekZwxuB&#xA;OcTuruRhqYOIJjiYZSgK/P0zUw1cjLwUJ9ig/O6ozYmof83974fygA/wK3SgFNEoFlTkTpOvZhVW&#xA;9kLfCVA/CRBfJNKnz5PWBBxd/3XSEuP/fcWqKGTy7zZso4MTB0NKgWO4duGTgMyZbM4onJPyA0CY&#xA;lAc5Csj0o5Q+oEhPUAVBIF07m4rd0OvAVPOCQ2NJhQSL1oWASbf+fg==&#xA;-----END CERTIFICATE-----]],&#xA;            -- in versions up to 1.6.1 this option&#39;s key would have been secret&#xA;            -- rather than public_key&#xA;&#xA;            -- 3. alternatively one can point to a so-called Discovery document that&#xA;            -- contains &#34;jwks_uri&#34; entry; the jwks endpoint must provide either an &#34;x5c&#34; entry&#xA;            -- or both the &#34;n&#34; modulus and &#34;e&#34; exponent entries for RSA signature verification&#xA;            -- discovery = &#34;https://accounts.google.com/.well-known/openid-configuration&#34;,&#xA;&#xA;             -- the signature algorithm that you expect has been used;&#xA;             -- can be a single string or a table.&#xA;             -- You should set this for security reasons in order to&#xA;             -- avoid accepting a token claiming to be signed by HMAC&#xA;             -- using a public RSA key.&#xA;             --token_signing_alg_values_expected = { &#34;RS256&#34; }&#xA;&#xA;             -- if you want to accept unsigned tokens (using the&#xA;             -- &#34;none&#34; signature algorithm) then set this to true.&#xA;             --accept_none_alg = false&#xA;&#xA;             -- if you want to reject tokens signed using an algorithm&#xA;             -- not supported by lua-resty-jwt set this to false. If&#xA;             -- you leave it unset, the token signature will not be&#xA;             -- verified at all.&#xA;             --accept_unsupported_alg = true&#xA;&#xA;             -- the expiration time in seconds for jwk cache, default is 1 day.&#xA;             --jwk_expires_in = 24 * 60 * 60&#xA;&#xA;             -- It may be necessary to force verification for a bearer token and ignore the existing cached&#xA;             -- verification results. If so you need to set set the jwt_verification_cache_ignore option to true.&#xA;             -- jwt_verification_cache_ignore = true&#xA;&#xA;             -- optional name of a cache-segment if you need separate&#xA;             -- caches for differently configured locations&#xA;             -- cache_segment = &#39;api&#39;&#xA;          }&#xA;&#xA;          -- call bearer_jwt_verify for OAuth 2.0 JWT validation&#xA;          local res, err = require(&#34;resty.openidc&#34;).bearer_jwt_verify(opts)&#xA;&#xA;           if err or not res then&#xA;            ngx.status = 403&#xA;            ngx.say(err and err or &#34;no access_token provided&#34;)&#xA;            ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          end&#xA;&#xA;          -- at this point res is a Lua table that represents the (validated) JSON&#xA;          -- payload in the JWT token; now we typically do not want to allow just any&#xA;          -- token that was issued by the Authorization Server but we want to apply&#xA;          -- some access restrictions via client IDs or scopes&#xA;&#xA;          --if res.scope ~= &#34;edit&#34; then&#xA;          --  ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          --end&#xA;&#xA;          --if res.client_id ~= &#34;ro_client&#34; then&#xA;          --  ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          --end&#xA;      &#39;;&#xA;&#xA;       proxy_pass http://localhost:80;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample Configuration for PingFederate OAuth 2.0&lt;/h2&gt; &#xA;&lt;p&gt;Sample &lt;code&gt;nginx.conf&lt;/code&gt; configuration for validating Bearer Access Tokens against a PingFederate OAuth 2.0 Authorization Server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;events {&#xA;  worker_connections 128;&#xA;}&#xA;&#xA;http {&#xA;&#xA;  lua_package_path &#39;~/lua/?.lua;;&#39;;&#xA;&#xA;  resolver 8.8.8.8;&#xA;&#xA;  lua_ssl_trusted_certificate /opt/local/etc/openssl/cert.pem;&#xA;  lua_ssl_verify_depth 5;&#xA;&#xA;  # cache for validation results&#xA;  lua_shared_dict introspection 10m;&#xA;&#xA;  server {&#xA;    listen 8080;&#xA;&#xA;    location /api {&#xA;&#xA;      access_by_lua &#39;&#xA;&#xA;          local opts = {&#xA;             introspection_endpoint=&#34;https://localhost:9031/as/introspect.oauth2&#34;,&#xA;             client_id=&#34;rs_client&#34;,&#xA;             client_secret=&#34;2Federate&#34;,&#xA;             ssl_verify = &#34;no&#34;,&#xA;&#xA;             -- Defaults to &#34;exp&#34; - Controls the TTL of the introspection cache&#xA;             -- https://tools.ietf.org/html/rfc7662#section-2.2&#xA;             -- introspection_expiry_claim = &#34;exp&#34;&#xA;&#xA;             -- optional name of a cache-segment if you need separate&#xA;             -- caches for differently configured locations&#xA;             -- cache_segment = &#39;api&#39;&#xA;          }&#xA;&#xA;          -- call introspect for OAuth 2.0 Bearer Access Token validation&#xA;          local res, err = require(&#34;resty.openidc&#34;).introspect(opts)&#xA;&#xA;          if err then&#xA;            ngx.status = 403&#xA;            ngx.say(err)&#xA;            ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          end&#xA;&#xA;          -- at this point res is a Lua table that represents the JSON&#xA;          -- object returned from the introspection/validation endpoint&#xA;&#xA;          --if res.scope ~= &#34;edit&#34; then&#xA;          --  ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          --end&#xA;&#xA;          --if res.client_id ~= &#34;ro_client&#34; then&#xA;          --  ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          --end&#xA;      &#39;;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample Configuration for passing bearer OAuth 2.0 access tokens as cookie&lt;/h2&gt; &#xA;&lt;p&gt;Sample &lt;code&gt;nginx.conf&lt;/code&gt; configuration for validating Bearer Access Tokens passed as cookie against a ORY/Hydra Authorization Server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;events {&#xA;  worker_connections 128;&#xA;}&#xA;&#xA;http {&#xA;&#xA;  lua_package_path &#39;~/lua/?.lua;;&#39;;&#xA;&#xA;  resolver 8.8.8.8;&#xA;&#xA;  lua_ssl_trusted_certificate /opt/local/etc/openssl/cert.pem;&#xA;  lua_ssl_verify_depth 5;&#xA;&#xA;  # cache for validation results&#xA;  lua_shared_dict introspection 10m;&#xA;&#xA;  server {&#xA;    listen 8080;&#xA;&#xA;    location /api {&#xA;&#xA;      access_by_lua &#39;&#xA;&#xA;          local opts = {&#xA;             -- sets the URI of the introspection endpoint&#xA;             introspection_endpoint=&#34;https://localhost:9031/oauth2/introspect&#34;,&#xA;&#xA;             -- alternatively if your OAuth2 Provider provides a discovery document that contains the&#xA;             -- introspection_endpoint claim you can leave the introspection_endpoint option&#xA;             -- unset and instead use&#xA;             -- discovery = &#34;https://my-oauth2-provider/.well-known/oauth-authorization-server&#34;,&#xA;&#xA;             client_id=&#34;admin&#34;,&#xA;             client_secret=&#34;demo-password&#34;,&#xA;             ssl_verify = &#34;no&#34;,&#xA;&#xA;             -- Defines the interval in seconds after which a cached and introspected access token needs&#xA;             -- to be refreshed by introspecting (and validating) it again against the Authorization Server.&#xA;             -- When not defined the value is 0, which means it only expires after the `exp` (or alternative,&#xA;             -- see introspection_expiry_claim) hint as returned by the Authorization Server&#xA;             -- introspection_interval = 60,&#xA;&#xA;             -- Defines the way in which bearer OAuth 2.0 access tokens can be passed to this Resource Server.&#xA;             -- &#34;cookie&#34; as a cookie header called &#34;PA.global&#34; or using the name specified after &#34;:&#34;&#xA;             -- &#34;header&#34; &#34;Authorization: bearer&#34; header&#xA;             -- When not defined the default &#34;Authorization: bearer&#34; header is used&#xA;             -- auth_accept_token_as = &#34;cookie:PA&#34;,&#xA;&#xA;             -- If header is used header field is Authorization&#xA;             -- auth_accept_token_as_header_name = &#34;cf-Access-Jwt-Assertion&#34;&#xA;&#xA;             -- Authentication method for the OAuth 2.0 Authorization Server introspection endpoint,&#xA;             -- Used to authenticate the client to the introspection endpoint with a client_id/client_secret&#xA;             -- Defaults to &#34;client_secret_post&#34;&#xA;             -- introspection_endpoint_auth_method = &#34;client_secret_basic&#34;,&#xA;&#xA;             -- Specify the names of cookies separated by whitespace to pickup from the browser and send along on backchannel&#xA;             -- calls to the OP and AS endpoints.&#xA;             -- When not defined, no such cookies are sent.&#xA;             -- pass_cookies = &#34;JSESSION&#34;&#xA;&#xA;             -- Defaults to &#34;exp&#34; - Controls the TTL of the introspection cache&#xA;             -- https://tools.ietf.org/html/rfc7662#section-2.2&#xA;             -- introspection_expiry_claim = &#34;exp&#34;&#xA;&#xA;             -- It may be necessary to force an introspection call for an access_token and ignore the existing cached&#xA;             -- introspection results. If so you need to set set the introspection_cache_ignore option to true.&#xA;             -- introspection_cache_ignore = true&#xA;&#xA;             -- optional name of a cache-segment if you need separate&#xA;             -- caches for differently configured locations&#xA;             -- cache_segment = &#39;api&#39;&#xA;          }&#xA;&#xA;          -- call introspect for OAuth 2.0 Bearer Access Token validation&#xA;          local res, err = require(&#34;resty.openidc&#34;).introspect(opts)&#xA;&#xA;          if err then&#xA;            ngx.status = 403&#xA;            ngx.say(err)&#xA;            ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          end&#xA;&#xA;          -- at this point res is a Lua table that represents the JSON&#xA;          -- object returned from the introspection/validation endpoint&#xA;&#xA;          --if res.scope ~= &#34;edit&#34; then&#xA;          --  ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          --end&#xA;&#xA;          --if res.client_id ~= &#34;ro_client&#34; then&#xA;          --  ngx.exit(ngx.HTTP_FORBIDDEN)&#xA;          --end&#xA;      &#39;;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;Logging can be customized, including using custom logger and remapping OpenIDC&#39;s default log levels, e.g:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local openidc = require(&#34;resty.openidc&#34;)&#xA;openidc.set_logging(nil, { DEBUG = ngx.INFO })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;ve created a dockerized setup for the test in order to simplify the installation of dependencies.&lt;/p&gt; &#xA;&lt;p&gt;In order to run the tests perform&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker build -f tests/Dockerfile . -t lua-resty-openidc/test&#xA;$ docker run -it --rm lua-resty-openidc/test:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if you want to create &lt;a href=&#34;https://keplerproject.github.io/luacov/&#34;&gt;luacov&lt;/a&gt; coverage while testing use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ docker run -it --rm -e coverage=t lua-resty-openidc/test:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as the second command&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;For generic questions, see the Wiki pages with Frequently Asked Questions at:&lt;br&gt; &lt;a href=&#34;https://github.com/zmartzone/lua-resty-openidc/wiki&#34;&gt;https://github.com/zmartzone/lua-resty-openidc/wiki&lt;/a&gt;&lt;br&gt; Any questions/issues should go to the Github Discussons or Issues tracker.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;This software is open sourced by ZmartZone IAM but not supported commercially as such. Any questions/issues should go to the Github Discussions or Issues tracker. See also the DISCLAIMER file in this directory.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>