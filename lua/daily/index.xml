<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-01T01:43:20Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GCBallesteros/jupytext.nvim</title>
    <updated>2023-12-01T01:43:20Z</updated>
    <id>tag:github.com,2023-12-01:/GCBallesteros/jupytext.nvim</id>
    <link href="https://github.com/GCBallesteros/jupytext.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Jupyter notebooks on neovim powered by Jupytext&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jupytext.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Seamlessly open &lt;a href=&#34;http://jupyter.org&#34;&gt;Jupyter Notebooks&lt;/a&gt; as there associated plain text alternatives. Powered by &lt;a href=&#34;https://www.github.com/mwouts/jupytext&#34;&gt;jupytext&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;jupytext.nvim&lt;/code&gt; is a lua port of the original &lt;a href=&#34;https://www.github.com/goerz/jupytext.vim&#34;&gt;jupytext.vim&lt;/a&gt; with some additional features and a simpler configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lazy.nvim&lt;/code&gt; example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;GCBallesteros/jupytext.nvim&#34;,&#xA;  config = true,&#xA;  -- Depending on your nvim distro or config you may need to make the loading not lazy&#xA;  -- lazy=false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;jupytext.nvim&lt;/code&gt; to run correctly you will also need to make sure that you have the &lt;code&gt;jupytext&lt;/code&gt; CLI installed (&lt;code&gt;pip install jupytext&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;jupytext&lt;/code&gt; is available and yet when you open a notebook you still see a wall of inscrutable JSON then it may be that &lt;code&gt;jupytext.nvim&lt;/code&gt; wasn&#39;t available due to lazy loading. The easiest fix is to not lazy load this plugin. For example if using &lt;code&gt;lazy.nvim&lt;/code&gt; just set &lt;code&gt;lazy=false&lt;/code&gt;. This plugin is tiny and will be a rounding error on your startup time.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The only configuration parameter available is the jupytext style you want to use for the plain text version of the files. The default configuration is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  style = &#34;hydrogen&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need something different pass your own configuration to &lt;code&gt;require(&#34;jupytext&#34;).setup&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;jupytext&#34;).setup({ style = &#34;light&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is a lua port of &lt;a href=&#34;https://www.github.com/goerz/jupytext.vim&#34;&gt;goerz/jupytext.vim&lt;/a&gt; and it wouldn&#39;t have existed without it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kevinhwang91/nvim-hlslens</title>
    <updated>2023-12-01T01:43:20Z</updated>
    <id>tag:github.com,2023-12-01:/kevinhwang91/nvim-hlslens</id>
    <link href="https://github.com/kevinhwang91/nvim-hlslens" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hlsearch Lens for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-hlslens&lt;/h1&gt; &#xA;&lt;p&gt;nvim-hlslens helps you better glance at matched information, seamlessly jump between matched instances.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17562139/144654751-0d439610-b913-4e72-b473-e49db3317fab.mp4&#34;&gt;https://user-images.githubusercontent.com/17562139/144654751-0d439610-b913-4e72-b473-e49db3317fab.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#table-of-contents&#34;&gt;Table of contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#quickstart&#34;&gt;Quickstart&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#minimal-configuration&#34;&gt;Minimal configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#start-hlslens&#34;&gt;Start hlslens&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#stop-hlslens&#34;&gt;Stop hlslens&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#setup-and-description&#34;&gt;Setup and description&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#highlight&#34;&gt;Highlight&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#advanced-configuration&#34;&gt;Advanced configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#customize-configuration&#34;&gt;Customize configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#customize-virtual-text&#34;&gt;Customize virtual text&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#integrate-with-other-plugins&#34;&gt;Integrate with other plugins&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/haya14busa/vim-asterisk&#34;&gt;vim-asterisk&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/kevinhwang91/nvim-ufo&#34;&gt;nvim-ufo&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/mg979/vim-visual-multi&#34;&gt;vim-visual-multi&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#feedback&#34;&gt;Feedback&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully customizable style of virtual text&lt;/li&gt; &#xA; &lt;li&gt;Clear highlighting and virtual text when cursor is out of range&lt;/li&gt; &#xA; &lt;li&gt;Display search result dynamically while cursor is moving&lt;/li&gt; &#xA; &lt;li&gt;Display search result for the current matched instance while searching&lt;/li&gt; &#xA; &lt;li&gt;Display search result for some built-in commands that support incsearch (need Neovim 0.8.0)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Need &lt;code&gt;vim.api.nvim_parse_cmd&lt;/code&gt; to parse built-in commands if incsearch is enabled.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; 0.7.2 or later&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinhwang91/nvim-ufo&#34;&gt;nvim-ufo&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install nvim-hlslens with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;kevinhwang91/nvim-hlslens&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Minimal configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;hlslens&#39;).setup()&#xA;&#xA;local kopts = {noremap = true, silent = true}&#xA;&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;n&#39;,&#xA;    [[&amp;lt;Cmd&amp;gt;execute(&#39;normal! &#39; . v:count1 . &#39;n&#39;)&amp;lt;CR&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]],&#xA;    kopts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;N&#39;,&#xA;    [[&amp;lt;Cmd&amp;gt;execute(&#39;normal! &#39; . v:count1 . &#39;N&#39;)&amp;lt;CR&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]],&#xA;    kopts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;*&#39;, [[*&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], kopts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;#&#39;, [[#&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], kopts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;g*&#39;, [[g*&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], kopts)&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;g#&#39;, [[g#&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], kopts)&#xA;&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;Leader&amp;gt;l&#39;, &#39;&amp;lt;Cmd&amp;gt;noh&amp;lt;CR&amp;gt;&#39;, kopts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;After using &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/#minimal-configuration&#34;&gt;Minimal configuration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Hlslens will add virtual text at the end of the line if the room is enough for virtual text, otherwise, add a floating window to overlay the statusline to display lens.&lt;/p&gt; &#xA;&lt;p&gt;You can glance at the result provided by lens while searching when &lt;code&gt;incsearch&lt;/code&gt; is on. Hlslens also supports &lt;code&gt;&amp;lt;C-g&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;C-t&amp;gt;&lt;/code&gt; to move to the next and previous match.&lt;/p&gt; &#xA;&lt;h4&gt;Start hlslens&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Press &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;?&lt;/code&gt; to search text, &lt;code&gt;/s&lt;/code&gt; and &lt;code&gt;/e&lt;/code&gt; offsets are supported;&lt;/li&gt; &#xA; &lt;li&gt;Invoke API &lt;code&gt;require(&#39;hlslens&#39;).start()&lt;/code&gt;;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Stop hlslens&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run ex command &lt;code&gt;nohlsearch&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Map key to &lt;code&gt;:nohlsearch&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Invoke API &lt;code&gt;require(&#39;hlslens&#39;).stop()&lt;/code&gt;;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Setup and description&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    auto_enable = {&#xA;        description = [[Enable nvim-hlslens automatically]],&#xA;        default = true&#xA;    },&#xA;    enable_incsearch = {&#xA;        description = [[When `incsearch` option is on and enable_incsearch is true, add lens&#xA;            for the current matched instance]],&#xA;        default = true&#xA;    },&#xA;    calm_down = {&#xA;        description = [[If calm_down is true, clear all lens and highlighting When the cursor is&#xA;            out of the position range of the matched instance or any texts are changed]],&#xA;        default = false,&#xA;    },&#xA;    nearest_only = {&#xA;        description = [[Only add lens for the nearest matched instance and ignore others]],&#xA;        default = false&#xA;    },&#xA;    nearest_float_when = {&#xA;        description = [[When to open the floating window for the nearest lens.&#xA;            &#39;auto&#39;: floating window will be opened if room isn&#39;t enough for virtual text;&#xA;            &#39;always&#39;: always use floating window instead of virtual text;&#xA;            &#39;never&#39;: never use floating window for the nearest lens]],&#xA;        default = &#39;auto&#39;,&#xA;    },&#xA;    float_shadow_blend = {&#xA;        description = [[Winblend of the nearest floating window. `:h winbl` for more details]],&#xA;        default = 50,&#xA;    },&#xA;    virt_priority = {&#xA;        description = [[Priority of virtual text, set it lower to overlay others.&#xA;        `:h nvim_buf_set_extmark` for more details]],&#xA;        default = 100,&#xA;    },&#xA;    override_lens  = {&#xA;        description = [[Hackable function for customizing the lens. If you like hacking, you&#xA;            should search `override_lens` and inspect the corresponding source code.&#xA;            There&#39;s no guarantee that this function will not be changed in the future. If it is&#xA;            changed, it will be listed in the CHANGES file.&#xA;            @param render table an inner module for hlslens, use `setVirt` to set virtual text&#xA;            @param splist table (1,1)-indexed position&#xA;            @param nearest boolean whether nearest lens&#xA;            @param idx number nearest index in the plist&#xA;            @param relIdx number relative index, negative means before current position,&#xA;                                  positive means after&#xA;        ]],&#xA;        default = nil&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Highlight&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi default link HlSearchNear IncSearch&#xA;hi default link HlSearchLens WildMenu&#xA;hi default link HlSearchLensNear IncSearch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;HlSearchLensNear: highlight the nearest virtual text for the floating window&lt;/li&gt; &#xA; &lt;li&gt;HlSearchLens: highlight virtual text except for the nearest one&lt;/li&gt; &#xA; &lt;li&gt;HlSearchNear: highlight the nearest matched instance&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;HlSearchLensToggle&lt;/code&gt;: Toggle nvim-hlslens enable/disable&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HlSearchLensEnable&lt;/code&gt;: Enable nvim-hlslens&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;HlSearchLensDisable&lt;/code&gt;: Disable nvim-hlslens&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/lua/hlslens.lua&#34;&gt;hlslens.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Customize configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;hlslens&#39;).setup({&#xA;    calm_down = true,&#xA;    nearest_only = true,&#xA;    nearest_float_when = &#39;always&#39;&#xA;})&#xA;&#xA;-- run `:nohlsearch` and export results to quickfix&#xA;-- if Neovim is 0.8.0 before, remap yourself.&#xA;vim.keymap.set({&#39;n&#39;, &#39;x&#39;}, &#39;&amp;lt;Leader&amp;gt;L&#39;, function()&#xA;    vim.schedule(function()&#xA;        if require(&#39;hlslens&#39;).exportLastSearchToQuickfix() then&#xA;            vim.cmd(&#39;cw&#39;)&#xA;        end&#xA;    end)&#xA;    return &#39;:noh&amp;lt;CR&amp;gt;&#39;&#xA;end, {expr = true})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17562139/144655283-f5e3cf34-6c14-464d-9e09-6f57140c0dda.mp4&#34;&gt;https://user-images.githubusercontent.com/17562139/144655283-f5e3cf34-6c14-464d-9e09-6f57140c0dda.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Customize virtual text&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;hlslens&#39;).setup({&#xA;    override_lens = function(render, posList, nearest, idx, relIdx)&#xA;        local sfw = vim.v.searchforward == 1&#xA;        local indicator, text, chunks&#xA;        local absRelIdx = math.abs(relIdx)&#xA;        if absRelIdx &amp;gt; 1 then&#xA;            indicator = (&#39;%d%s&#39;):format(absRelIdx, sfw ~= (relIdx &amp;gt; 1) and &#39;▲&#39; or &#39;▼&#39;)&#xA;        elseif absRelIdx == 1 then&#xA;            indicator = sfw ~= (relIdx == 1) and &#39;▲&#39; or &#39;▼&#39;&#xA;        else&#xA;            indicator = &#39;&#39;&#xA;        end&#xA;&#xA;        local lnum, col = unpack(posList[idx])&#xA;        if nearest then&#xA;            local cnt = #posList&#xA;            if indicator ~= &#39;&#39; then&#xA;                text = (&#39;[%s %d/%d]&#39;):format(indicator, idx, cnt)&#xA;            else&#xA;                text = (&#39;[%d/%d]&#39;):format(idx, cnt)&#xA;            end&#xA;            chunks = {{&#39; &#39;, &#39;Ignore&#39;}, {text, &#39;HlSearchLensNear&#39;}}&#xA;        else&#xA;            text = (&#39;[%s %d]&#39;):format(indicator, idx)&#xA;            chunks = {{&#39; &#39;, &#39;Ignore&#39;}, {text, &#39;HlSearchLens&#39;}}&#xA;        end&#xA;        render.setVirt(0, lnum - 1, col - 1, chunks, nearest)&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;864px&#34; src=&#34;https://user-images.githubusercontent.com/17562139/115062493-fd26a100-9f1c-11eb-9305-20ef83d08e40.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Integrate with other plugins&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/haya14busa/vim-asterisk&#34;&gt;vim-asterisk&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- packer&#xA;use &#39;haya14busa/vim-asterisk&#39;&#xA;&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;*&#39;, [[&amp;lt;Plug&amp;gt;(asterisk-z*)&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], {})&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;#&#39;, [[&amp;lt;Plug&amp;gt;(asterisk-z#)&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], {})&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;g*&#39;, [[&amp;lt;Plug&amp;gt;(asterisk-gz*)&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], {})&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;g#&#39;, [[&amp;lt;Plug&amp;gt;(asterisk-gz#)&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], {})&#xA;&#xA;vim.api.nvim_set_keymap(&#39;x&#39;, &#39;*&#39;, [[&amp;lt;Plug&amp;gt;(asterisk-z*)&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], {})&#xA;vim.api.nvim_set_keymap(&#39;x&#39;, &#39;#&#39;, [[&amp;lt;Plug&amp;gt;(asterisk-z#)&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], {})&#xA;vim.api.nvim_set_keymap(&#39;x&#39;, &#39;g*&#39;, [[&amp;lt;Plug&amp;gt;(asterisk-gz*)&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], {})&#xA;vim.api.nvim_set_keymap(&#39;x&#39;, &#39;g#&#39;, [[&amp;lt;Plug&amp;gt;(asterisk-gz#)&amp;lt;Cmd&amp;gt;lua require(&#39;hlslens&#39;).start()&amp;lt;CR&amp;gt;]], {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/kevinhwang91/nvim-ufo&#34;&gt;nvim-ufo&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The lens has been adapted to the folds of nvim-ufo, still need remap &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; action if you want to peek at folded lines.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- packer&#xA;use {&#39;kevinhwang91/nvim-ufo&#39;, requires = &#39;kevinhwang91/promise-async&#39;}&#xA;&#xA;-- if Neovim is 0.8.0 before, remap yourself.&#xA;local function nN(char)&#xA;    local ok, winid = hlslens.nNPeekWithUFO(char)&#xA;    if ok and winid then&#xA;        -- Safe to override buffer scope keymaps remapped by ufo,&#xA;        -- ufo will restore previous buffer keymaps before closing preview window&#xA;        -- Type &amp;lt;CR&amp;gt; will switch to preview window and fire `trace` action&#xA;        vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;CR&amp;gt;&#39;, function()&#xA;            local keyCodes = api.nvim_replace_termcodes(&#39;&amp;lt;Tab&amp;gt;&amp;lt;CR&amp;gt;&#39;, true, false, true)&#xA;            api.nvim_feedkeys(keyCodes, &#39;im&#39;, false)&#xA;        end, {buffer = true})&#xA;    end&#xA;end&#xA;&#xA;vim.keymap.set({&#39;n&#39;, &#39;x&#39;}, &#39;n&#39;, function() nN(&#39;n&#39;) end)&#xA;vim.keymap.set({&#39;n&#39;, &#39;x&#39;}, &#39;N&#39;, function() nN(&#39;N&#39;) end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/mg979/vim-visual-multi&#34;&gt;vim-visual-multi&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17562139/144655345-9185df0e-e27e-4877-9ee6-d0acb811c907.mp4&#34;&gt;https://user-images.githubusercontent.com/17562139/144655345-9185df0e-e27e-4877-9ee6-d0acb811c907.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- packer&#xA;use &#39;mg979/vim-visual-multi&#39;&#xA;&#xA;local hlslens = require(&#39;hlslens&#39;)&#xA;if hlslens then&#xA;    local overrideLens = function(render, posList, nearest, idx, relIdx)&#xA;        local _ = relIdx&#xA;        local lnum, col = unpack(posList[idx])&#xA;&#xA;        local text, chunks&#xA;        if nearest then&#xA;            text = (&#39;[%d/%d]&#39;):format(idx, #posList)&#xA;            chunks = {{&#39; &#39;, &#39;Ignore&#39;}, {text, &#39;VM_Extend&#39;}}&#xA;        else&#xA;            text = (&#39;[%d]&#39;):format(idx)&#xA;            chunks = {{&#39; &#39;, &#39;Ignore&#39;}, {text, &#39;HlSearchLens&#39;}}&#xA;        end&#xA;        render.setVirt(0, lnum - 1, col - 1, chunks, nearest)&#xA;    end&#xA;    local lensBak&#xA;    local config = require(&#39;hlslens.config&#39;)&#xA;    local gid = vim.api.nvim_create_augroup(&#39;VMlens&#39;, {})&#xA;    vim.api.nvim_create_autocmd(&#39;User&#39;, {&#xA;        pattern = {&#39;visual_multi_start&#39;, &#39;visual_multi_exit&#39;},&#xA;        group = gid,&#xA;        callback = function(ev)&#xA;            if ev.match == &#39;visual_multi_start&#39; then&#xA;                lensBak = config.override_lens&#xA;                config.override_lens = overrideLens&#xA;            else&#xA;                config.override_lens = lensBak&#xA;            end&#xA;            hlslens.start()&#xA;        end&#xA;    })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you get an issue or come up with an awesome idea, don&#39;t hesitate to open an issue in github.&lt;/li&gt; &#xA; &lt;li&gt;If you think this plugin is useful or cool, consider rewarding it a star.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The project is licensed under a BSD-3-clause license. See &lt;a href=&#34;https://raw.githubusercontent.com/kevinhwang91/nvim-hlslens/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>