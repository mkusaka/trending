<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-25T01:45:12Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>anuvyklack/hydra.nvim</title>
    <updated>2022-06-25T01:45:12Z</updated>
    <id>tag:github.com,2022-06-25:/anuvyklack/hydra.nvim</id>
    <link href="https://github.com/anuvyklack/hydra.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bind a bunch of key bindings together.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hydra.nvim&lt;/h1&gt; &#xA;&lt;!-- &lt;img align=&#34;right&#34; width=&#34;300&#34; src=&#34;./hydra.png&#34;&gt; --&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;300&#34; src=&#34;https://user-images.githubusercontent.com/13056013/172239710-a18e3a2f-1b96-40f2-833e-c424f2962577.png&#34;&gt; &#xA;&lt;!--&#xA;&lt;p align=&#34;center&#34;&gt;&#xA;  &lt;img width=&#34;200&#34; src=&#34;./hydra.png&#34;&gt;&#xA;&lt;/p&gt;&#xA;--&gt; &#xA;&lt;p&gt;This is the Neovim implementation of the famous &lt;a href=&#34;https://github.com/abo-abo/hydra&#34;&gt;Emacs Hydra&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;h2&gt;Description for Poets&lt;/h2&gt; &#xA;&lt;p&gt;Once you summon the Hydra through the prefixed binding (the body + any one head), all heads can be called in succession with only a short extension.&lt;/p&gt; &#xA;&lt;p&gt;The Hydra is vanquished once Hercules, any binding that isn&#39;t the Hydra&#39;s head, arrives. Note that Hercules, besides vanquishing the Hydra, will still serve his original purpose, calling his proper command. This makes the Hydra very seamless.&lt;/p&gt; &#xA;&lt;h2&gt;Description for Pragmatics&lt;/h2&gt; &#xA;&lt;p&gt;Imagine you want to change the size of your current window. Vim allows you to do it with &lt;code&gt;&amp;lt;C-w&amp;gt;+&lt;/code&gt;, &lt;code&gt;&amp;lt;C-w&amp;gt;-&lt;/code&gt;, &lt;code&gt;&amp;lt;C-w&amp;gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-w&amp;gt;&amp;gt;&lt;/code&gt; bindings. So, you have to press &lt;code&gt;&amp;lt;C-w&amp;gt;+&amp;lt;C-w&amp;gt;+&amp;lt;C-w&amp;gt;+&amp;lt;C-w&amp;gt;&amp;lt;&amp;lt;C-w&amp;gt;&amp;lt;&amp;lt;C-w&amp;gt;&amp;lt;...&lt;/code&gt; as many times as you need (I know about count prefixes, but I was never fun of them). Hydra allows you to press &lt;code&gt;&amp;lt;C-w&amp;gt;&lt;/code&gt; just once and then get access to any &lt;code&gt;&amp;lt;C-w&amp;gt;...&lt;/code&gt; bindings without pressing the prefix again: &lt;code&gt;&amp;lt;C-w&amp;gt;+++++--&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt;. Or buffer side scrolling: instead of &lt;code&gt;zlzlzlzlzlzl...&lt;/code&gt; press &lt;code&gt;zlllllllllhhhl&lt;/code&gt; to freely scroll buffer left and right. Any key other than bind to a hydra will stop hydra state and do what they should.&lt;/p&gt; &#xA;&lt;p&gt;Hydra also allows assigning a custom hint to such group of keybindings to allows you an easy glance at what you can do.&lt;/p&gt; &#xA;&lt;p&gt;If you want to quickly understand the concept, you can watch &lt;a href=&#34;https://www.youtube.com/watch?v=_qZliI1BKzI&#34;&gt;the original Emacs Hydra video demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- (mabe I will create our own later &lt;span&gt;😄&lt;/span&gt;). --&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#sample-hydras&#34;&gt;Sample Hydras&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#side-scroll&#34;&gt;Side scroll&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#git&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#community-wiki&#34;&gt;Community wiki&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#instalation&#34;&gt;Instalation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#how-to-create-hydra&#34;&gt;How to create hydra&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#name&#34;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#mode&#34;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#body&#34;&gt;&lt;code&gt;body&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#config&#34;&gt;&lt;code&gt;config&lt;/code&gt;&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#exit&#34;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#foreign-keys&#34;&gt;&lt;code&gt;foreign-keys&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#color&#34;&gt;&lt;code&gt;color&lt;/code&gt;&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#more-about-colors-concept&#34;&gt;More about colors concept&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#amaranth-color&#34;&gt;Amaranth color&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#blue-and-teal-colors&#34;&gt;Blue and teal colors&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#pink-color&#34;&gt;Pink color&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#buffer&#34;&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#invoke_on_body&#34;&gt;&lt;code&gt;invoke_on_body&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#on_enter-and-on_exit&#34;&gt;&lt;code&gt;on_enter&lt;/code&gt; and &lt;code&gt;on_exit&lt;/code&gt;&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#meta-accessors&#34;&gt;meta-accessors&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#timeout&#34;&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#hint&#34;&gt;&lt;code&gt;hint&lt;/code&gt;&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#position&#34;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#border&#34;&gt;&lt;code&gt;border&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#hydras-heads&#34;&gt;Hydra&#39;s heads&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#head&#34;&gt;&lt;code&gt;head&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#rhs&#34;&gt;&lt;code&gt;rhs&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#opts&#34;&gt;&lt;code&gt;opts&lt;/code&gt;&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#private&#34;&gt;&lt;code&gt;private&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#exit-1&#34;&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#desc&#34;&gt;&lt;code&gt;desc&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#expr-silent&#34;&gt;&lt;code&gt;expr&lt;/code&gt;, &lt;code&gt;silent&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#nowait&#34;&gt;&lt;code&gt;nowait&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#mode-1&#34;&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#hint-1&#34;&gt;&lt;code&gt;hint&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#public-methods&#34;&gt;Public methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#highlight&#34;&gt;Highlight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#drawbacks&#34;&gt;Drawbacks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/anuvyklack/hydra.nvim/master/#how-it-works-under-the-hood&#34;&gt;How it works under the hood&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Sample Hydras&lt;/h2&gt; &#xA;&lt;h3&gt;Side scroll&lt;/h3&gt; &#xA;&lt;p&gt;Simple hydra to scroll screen to the side with auto generated hint.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13056013/174493857-eb30b9a9-9078-40f8-a076-bc290acc26bf.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Hydra = require(&#39;hydra&#39;)&#xA;&#xA;Hydra({&#xA;   name = &#39;Side scroll&#39;,&#xA;   mode = &#39;n&#39;,&#xA;   body = &#39;z&#39;,&#xA;   heads = {&#xA;      { &#39;h&#39;, &#39;5zh&#39; },&#xA;      { &#39;l&#39;, &#39;5zl&#39;, { desc = &#39;←/→&#39; } },&#xA;      { &#39;H&#39;, &#39;zH&#39; },&#xA;      { &#39;L&#39;, &#39;zL&#39;, { desc = &#39;half screen ←/→&#39; } },&#xA;   }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Git&lt;/h3&gt; &#xA;&lt;p&gt;A full fledged git &#34;submode&#34;:&lt;/p&gt; &#xA;&lt;!-- Finally, you can even create your custom submode, for example for git: --&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13056013/174571437-4445dd84-c5f1-4dc8-b22a-3fbf71ac69a2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The code is huge but, simple. For this hydra you need next plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Gitsigns&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Hydra = require(&#39;hydra&#39;)&#xA;local gitsigns = require(&#39;gitsigns&#39;)&#xA;&#xA;local hint = [[&#xA; _J_: next hunk   _s_: stage hunk        _d_: show deleted   _b_: blame line&#xA; _K_: prev hunk   _u_: undo stage hunk   _p_: preview hunk   _B_: blame show full &#xA; ^ ^              _S_: stage buffer      ^ ^                 _/_: show base file&#xA; ^&#xA; ^ ^              _&amp;lt;Enter&amp;gt;_: Neogit              _q_: exit&#xA;]]&#xA;&#xA;Hydra({&#xA;   hint = hint,&#xA;   config = {&#xA;      color = &#39;pink&#39;,&#xA;      invoke_on_body = true,&#xA;      hint = {&#xA;         position = &#39;bottom&#39;,&#xA;         border = &#39;rounded&#39;&#xA;      },&#xA;      on_enter = function()&#xA;         vim.bo.modifiable = false&#xA;         gitsigns.toggle_signs(true)&#xA;         gitsigns.toggle_linehl(true)&#xA;      end,&#xA;      on_exit = function()&#xA;         gitsigns.toggle_signs(false)&#xA;         gitsigns.toggle_linehl(false)&#xA;         gitsigns.toggle_deleted(false)&#xA;         vim.cmd &#39;echo&#39; -- clear the echo area&#xA;      end&#xA;   },&#xA;   mode = {&#39;n&#39;,&#39;x&#39;},&#xA;   body = &#39;&amp;lt;leader&amp;gt;g&#39;,&#xA;   heads = {&#xA;      { &#39;J&#39;, function()&#xA;            if vim.wo.diff then return &#39;]c&#39; end&#xA;            vim.schedule(function() gitsigns.next_hunk() end)&#xA;            return &#39;&amp;lt;Ignore&amp;gt;&#39;&#xA;         end, { expr = true } },&#xA;      { &#39;K&#39;, function()&#xA;            if vim.wo.diff then return &#39;[c&#39; end&#xA;            vim.schedule(function() gitsigns.prev_hunk() end)&#xA;            return &#39;&amp;lt;Ignore&amp;gt;&#39;&#xA;         end, { expr = true } },&#xA;      { &#39;s&#39;, &#39;:Gitsigns stage_hunk&amp;lt;CR&amp;gt;&#39;, { silent = true } },&#xA;      { &#39;u&#39;, gitsigns.undo_stage_hunk },&#xA;      { &#39;S&#39;, gitsigns.stage_buffer },&#xA;      { &#39;p&#39;, gitsigns.preview_hunk },&#xA;      { &#39;d&#39;, gitsigns.toggle_deleted, { nowait = true } },&#xA;      { &#39;b&#39;, gitsigns.blame_line },&#xA;      { &#39;B&#39;, function() gitsigns.blame_line{ full = true } end },&#xA;      { &#39;/&#39;, gitsigns.show, { exit = true } }, -- show the base of the file&#xA;      { &#39;&amp;lt;Enter&amp;gt;&#39;, &#39;&amp;lt;cmd&amp;gt;Neogit&amp;lt;CR&amp;gt;&#39;, { exit = true } },&#xA;      { &#39;q&#39;, nil, { exit = true, nowait = true } },&#xA;   }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Community wiki&lt;/h3&gt; &#xA;&lt;p&gt;You can find more hydras in the project&#39;s &lt;a href=&#34;https://github.com/anuvyklack/hydra.nvim/wiki/Community-hydras&#34;&gt;community wiki&lt;/a&gt;. Feel free to add your own or edit the existing ones.&lt;/p&gt; &#xA;&lt;h2&gt;Instalation&lt;/h2&gt; &#xA;&lt;p&gt;To install with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt; use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;anuvyklack/hydra.nvim&#39;, &#xA;    requires = &#39;anuvyklack/keymap-layer.nvim&#39; -- needed only for pink hydras&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How to create hydra&lt;/h2&gt; &#xA;&lt;p&gt;To create hydra you need to call Hydra&#39;s constructor with input parameters table of the next form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Hydra = require(&#39;hydra&#39;)&#xA;Hydra({&#xA;    name = &#34;Hydra&#39;s name&#34;,&#xA;    hint = [[...]] -- multiline string&#xA;    config = {...}&#xA;    mode = &#39;n&#39;,&#xA;    body = &#39;&amp;lt;leader&amp;gt;o&#39;,&#xA;    heads = {...},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each of the fields of this table is described in details below.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;name&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The name of the hydra. Not necessary, used only in auto-generated hint.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;string | string[]&lt;/code&gt; (default: &lt;code&gt;&#39;n&#39;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Mode or modes in which this hydra will exist. Same format as &lt;code&gt;vim.keymap.set()&lt;/code&gt; accepts.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;body&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To summon the hydra you need to press in sequence keys corresponds to &lt;code&gt;body&lt;/code&gt; + any &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, if body is &lt;code&gt;z&lt;/code&gt; and heads are: &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, you can invoke hydra with any of the &lt;code&gt;za&lt;/code&gt;, &lt;code&gt;zb&lt;/code&gt;, &lt;code&gt;zc&lt;/code&gt; keybindings.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;config&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;table&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;With this table, you can set the behavior of the whole hydra, which later can be customized for each head particularly. Below is a list of all options.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;exit&lt;/code&gt; option (heads can override it) defines what will happen after executing head&#39;s command:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;exit = false&lt;/code&gt; (the default) means that the hydra state will continue — you&#39;ll still see the hint and be able to use hydra bindings;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;exit = true&lt;/code&gt; means that the hydra state will stop.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;foreign-keys&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;foreign-keys&lt;/code&gt; option belongs to the body and decides what to do when a key is pressed that doesn&#39;t belong to any head:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;foreign-keys = nil&lt;/code&gt; (the default) means that the hydra state will stop and the foreign key will do whatever it was supposed to do if there was no hydra state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;foreign-keys = &#34;warn&#34;&lt;/code&gt; will not stop the hydra state, but instead will issue a warning without running the foreign key.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;foreign-keys = &#34;run&#34;&lt;/code&gt; will not stop the hydra state, and try to run the foreign key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;color&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;color&lt;/code&gt; option is a shortcut for both &lt;code&gt;exit&lt;/code&gt; and &lt;code&gt;foreign-keys&lt;/code&gt; options and aggregates them in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;| color    | toggle                             |&#xA;|----------+------------------------------------|&#xA;| red      |                                    |&#xA;| blue     | exit = true                        |&#xA;| amaranth | foreign-keys = &#39;warn&#39;              |&#xA;| teal     | foreign-keys = &#39;warn&#39;, exit = true |&#xA;| pink     | foreign-keys = &#39;run&#39;               |&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s also a trick to make you instantly aware of the current hydra keys that you&#39;re about to press: the keys will be highlighted with the appropriate color.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;exit&lt;/code&gt; and &lt;code&gt;foreign_keys&lt;/code&gt; options are higher priority than &lt;code&gt;color&lt;/code&gt; option and can&#39;t be overridden by it. I.e, if manually set values of &lt;code&gt;exit&lt;/code&gt; and &lt;code&gt;foreign_keys&lt;/code&gt; options contradict the color option value, then exactly thees values will be taken into account and for &lt;code&gt;color&lt;/code&gt; option the matching value will be automatically set&lt;/p&gt; &#xA;&lt;h5&gt;More about colors concept&lt;/h5&gt; &#xA;&lt;p&gt;Each hydra head has a basic associated color, red or blue, that determines whether or not the hydra will continue after the head is called:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;red head will execute the command and continue the state&lt;/li&gt; &#xA; &lt;li&gt;blue head will execute the command and stop the state&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They may have a reddish or a bluish face that isn&#39;t exactly red or blue, but that&#39;s what they are underneath.&lt;/p&gt; &#xA;&lt;p&gt;Overall, the hydra body can have one of five variants of the basic colors: amaranth, teal, pink, red, blue. They (according to basic color) determines the default behavior of all the heads; and determines what happens when a key that is not associated to a head is pressed. The following table summarizes the effects of the different colors.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Body Color&lt;/th&gt; &#xA;   &lt;th&gt;Basic color&lt;/th&gt; &#xA;   &lt;th&gt;Executing NON-HEAD&lt;/th&gt; &#xA;   &lt;th&gt;Executing HEAD&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;amaranth&lt;/td&gt; &#xA;   &lt;td&gt;red&lt;/td&gt; &#xA;   &lt;td&gt;Disallow and Continue&lt;/td&gt; &#xA;   &lt;td&gt;Continue&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;teal&lt;/td&gt; &#xA;   &lt;td&gt;blue&lt;/td&gt; &#xA;   &lt;td&gt;Disallow and Continue&lt;/td&gt; &#xA;   &lt;td&gt;Quit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pink&lt;/td&gt; &#xA;   &lt;td&gt;red&lt;/td&gt; &#xA;   &lt;td&gt;Allow and Continue&lt;/td&gt; &#xA;   &lt;td&gt;Continue&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;red&lt;/td&gt; &#xA;   &lt;td&gt;red&lt;/td&gt; &#xA;   &lt;td&gt;Allow and Quit&lt;/td&gt; &#xA;   &lt;td&gt;Continue&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;blue&lt;/td&gt; &#xA;   &lt;td&gt;blue&lt;/td&gt; &#xA;   &lt;td&gt;Allow and Quit&lt;/td&gt; &#xA;   &lt;td&gt;Quit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Amaranth color&lt;/h5&gt; &#xA;&lt;p&gt;The amaranth color wasn&#39;t chosen by accident because it is the variation of the red color, but it has the sense underneath. According to &lt;a href=&#34;http://en.wikipedia.org/wiki/Amaranth&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The word amaranth comes from the Greek word amaranton, meaning &#34;unwilting&#34; (from the verb marainesthai, meaning &#34;wilt&#34;). The word was applied to amaranth because it did not soon fade and so symbolized immortality.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Hydras with amaranth body are impossible to quit with any binding except a blue head.&lt;/p&gt; &#xA;&lt;h5&gt;Blue and teal colors&lt;/h5&gt; &#xA;&lt;p&gt;A blue hydra has little sense in Vim since it works exactly like standard Vim multi-key keybinding with addition you can add a custom hint to it.&lt;/p&gt; &#xA;&lt;p&gt;A teal hydra working the same way, except it blocks all other keys which are not hydra heads, what can be useful.&lt;/p&gt; &#xA;&lt;h5&gt;Pink color&lt;/h5&gt; &#xA;&lt;p&gt;Pink hydra is of a different nature. It is a &lt;a href=&#34;https://github.com/anuvyklack/keymap-layer.nvim&#34;&gt;key-layer&lt;/a&gt; inside, so all keys except overwritten are work as usual. Even &lt;code&gt;[count]&lt;/code&gt; prefixes.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;true | number&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Define hydra only for particular buffer. If &lt;code&gt;true&lt;/code&gt; — the current buffer will be used.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;invoke_on_body&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;By default, to invoke the hydra you need to press in sequence keys corresponds to &lt;code&gt;body&lt;/code&gt; + any non-private &lt;code&gt;head&lt;/code&gt; (about private heads see later). This option allows you to summon hydra by pressing only the &lt;code&gt;body&lt;/code&gt; keys.&lt;/p&gt; &#xA;&lt;!-- When `true` invoke hydra when only `body` keys have been pressed. --&gt; &#xA;&lt;h4&gt;&lt;code&gt;on_enter&lt;/code&gt; and &lt;code&gt;on_exit&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Functions that will be called on enter and on exit hydra.&lt;/p&gt; &#xA;&lt;h5&gt;meta-accessors&lt;/h5&gt; &#xA;&lt;p&gt;Inside the &lt;code&gt;on_enter&lt;/code&gt; functions the &lt;code&gt;vim.o&lt;/code&gt;, &lt;code&gt;vim.go&lt;/code&gt;, &lt;code&gt;vim.bo&lt;/code&gt; and &lt;code&gt;vim.wo&lt;/code&gt; &lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide#using-meta-accessors&#34;&gt;meta-accessors&lt;/a&gt; are redefined to work the way you think they should. If you want some option value to be temporary changed while Hydra is active, you need just set it with one of this meta-accessor in the &lt;code&gt;on_enter&lt;/code&gt; function. And that&#39;s it. No need to set it back in &lt;code&gt;on_exit&lt;/code&gt; function. All other will be done automatically in the backstage.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;    on_enter = function()&#xA;       print(&#39;Hydra enter&#39;)&#xA;       vim.bo.modifiable = false  -- temporary set `nomodifiable` while Hydra is active&#xA;    end,&#xA;    on_exit = function()&#xA;       print(&#39;Hydra exit&#39;)&#xA;       -- No need to set modifiable back here&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;timeout&lt;/code&gt; option set a timer after which the hydra will be automatically disabled. Calling any head will refresh the timer. (see &lt;code&gt;:help timeout&lt;/code&gt;, &lt;code&gt;:help timeoutlen&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout = true&lt;/code&gt; — enable timer and set its to &lt;code&gt;&#39;timeoutlen&#39;&lt;/code&gt; option value;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout = false&lt;/code&gt; — disabled timer: the hydra will wait as long as you want, until you manually cancel it;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout = 5000&lt;/code&gt; — set timer to desired amount of milliseconds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;hint&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;table&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Table with settings for the hint window. Read about hint below.&lt;/p&gt; &#xA;&lt;p&gt;Defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;hint = {&#xA;    position = &#39;bottom&#39;,&#xA;    border = &#39;none&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;position&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;string&lt;/code&gt; (default: &lt;code&gt;&#34;bottom&#34;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Set the position of the hint. Should be one from the next table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  top-left   |   top    |  top-right&#xA;-------------+----------+--------------&#xA; middle-left |  middle  | middle-right&#xA;-------------+----------+--------------&#xA; bottom-left |  bottom  | bottom-right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;border&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;string&lt;/code&gt; (default: &lt;code&gt;&#39;none&#39;&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The border of the hint window. See &lt;code&gt;:help nvim_open_win()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Hydra&#39;s heads&lt;/h3&gt; &#xA;&lt;p&gt;Each hydra&#39;s head has the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ head, rhs, opts }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which is pretty-much compares to the signature of the &lt;code&gt;vim.keymap.set()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;head&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;lhs&lt;/code&gt; (left-hand-side) of the mapping, i.e the keys you press to call an action.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;rhs&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;string | function | nil&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Right-hand-side of the mapping. Can be &lt;code&gt;nil&lt;/code&gt; which means just do nothing, but if you also want to pass &lt;code&gt;opts&lt;/code&gt; table, you need to pass &lt;code&gt;nil&lt;/code&gt; explicitly.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;opts&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;table&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A table with head options to tune its behavior.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;private&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When the hydra hides (not active), the private head does not bounce outside.&lt;/p&gt; &#xA;&lt;!-- When the hydra hides, this head does not stick out.  --&gt; &#xA;&lt;p&gt;I.e., the private head is unreachable outside of the hydra state.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stop the hydra state after executing a command corresponds to such head.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All exit heads are also private.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If no &lt;code&gt;exit&lt;/code&gt; head is specified, the &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; key will be set by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Remind that &lt;code&gt;rhs&lt;/code&gt; can be &lt;code&gt;nil&lt;/code&gt;, so the pure escape head looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#39;&amp;lt;Esc&amp;gt;&#39;, nil, { exit = true } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;&lt;code&gt;desc&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;string | false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The description that will be shown in the auto-generated part of the hint. If &lt;code&gt;false&lt;/code&gt; won&#39;t be show in the hint window&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;expr&lt;/code&gt;, &lt;code&gt;silent&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Built-in map arguments. See:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:help :map-&amp;lt;expr&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help :map-&amp;lt;silent&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;&lt;code&gt;nowait&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Only relevant for &lt;code&gt;pink&lt;/code&gt; hydra. For all others will be skipped. The &lt;code&gt;pink&lt;/code&gt; hydra is a &lt;a href=&#34;https://github.com/anuvyklack/keymap-layer.nvim&#34;&gt;layer&lt;/a&gt; inside, and Layer binds its keymaps buffer local, which makes flag &lt;code&gt;nowait&lt;/code&gt; available. See &lt;code&gt;:help :map-&amp;lt;nowait&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This allows, for example bind exit key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config = {&#xA;    color = &#39;pink&#39;,&#xA;}&#xA;...&#xA;heads = {&#xA;    { &#39;q&#39;, nil, { nowait = true } }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which will exit layer, without waiting &lt;code&gt;&amp;amp;timeoutlen&lt;/code&gt; milliseconds for possible continuation.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;&lt;code&gt;string | string[]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Overwrite &lt;code&gt;mode&lt;/code&gt; field for this particular head. Only relevant for &lt;code&gt;pink&lt;/code&gt; hydra, for all others will be ignored.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;hint&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;multiline string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can create any hint you wish.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;horizontal&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;vertical&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13056013/174572353-ffa1961d-39ab-4b29-be31-f71196fc91cf.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13056013/174571913-898b4d23-393b-4bda-8358-44acf5ce9b71.png&#34; alt=&#34;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To highlight a key, just wrap it in underscores. Note that the key must belong to one of the heads. The key will be highlighted with the color that is appropriate to the behavior of the key, i.e. if the key will make the hydra exit, the color will be blue.&lt;/p&gt; &#xA;&lt;p&gt;To insert an empty character, use &lt;code&gt;^&lt;/code&gt;. It won&#39;t be rendered. The only use of it is to have your code aligned as nicely as the result.&lt;/p&gt; &#xA;&lt;p&gt;If you pass no &lt;code&gt;hint&lt;/code&gt;, then one line hint will be generated automatically. The keys and their descriptions will be placed in the order heads were passed in the &lt;code&gt;heads&lt;/code&gt; table. Heads with &lt;code&gt;desc = false&lt;/code&gt; in &lt;code&gt;opts&lt;/code&gt; table will be skipped.&lt;/p&gt; &#xA;&lt;p&gt;Every head that won&#39;t be found in the manually created hint, will be automatically added at the bottom of the hint window according to rules of auto generated hint.&lt;/p&gt; &#xA;&lt;h2&gt;Public methods&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Hydra:activate()&lt;/code&gt; — a public method, which serves to activate hydra programmatically.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Highlight&lt;/h2&gt; &#xA;&lt;p&gt;Hydra defines next highlight groups with their defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;HydraRed         #FF5733&#xA;HydraBlue        #5EBCF6&#xA;HydraAmaranth    #ff1757&#xA;HydraTeal        #00a1a1&#xA;HydraPink        #ff55de&#xA;HydraHint  link  NormalFloat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;HydraHint&lt;/code&gt; defines the fore- and background of the hint window.&lt;/p&gt; &#xA;&lt;h2&gt;Drawbacks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;[count]&lt;/code&gt; is not supported in a red, amaranth and teal hydras (see &lt;code&gt;:help count&lt;/code&gt;). But supported in pink hydra since it is a &lt;a href=&#34;https://github.com/anuvyklack/keymap-layer.nvim&#34;&gt;layer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How it works under the hood&lt;/h2&gt; &#xA;&lt;p&gt;You can read about the internal mechanics in the &lt;a href=&#34;https://github.com/anuvyklack/hydra.nvim/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- vim: set tw=90: --&gt;</summary>
  </entry>
  <entry>
    <title>williamboman/nvim-lsp-installer</title>
    <updated>2022-06-25T01:45:12Z</updated>
    <id>tag:github.com,2022-06-25:/williamboman/nvim-lsp-installer</id>
    <link href="https://github.com/williamboman/nvim-lsp-installer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin that allow you to seamlessly manage LSP servers with :LspInstall. With full Windows support!&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/6705160/118490159-f064bb00-b71d-11eb-883e-4affbd020074.png&#34; alt=&#34;nvim-lsp-installer&#34; width=&#34;50%&#34;&gt; &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#about&#34;&gt;About&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#requirements&#34;&gt;Requirements&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#minimum-requirements&#34;&gt;Minimum requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#additional-requirements&#34;&gt;Additional requirements&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#available-lsps&#34;&gt;Available LSPs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#logo&#34;&gt;Logo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#default-configuration&#34;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Neovim plugin that allow you to manage LSP servers (servers are installed inside &lt;code&gt;:echo stdpath(&#34;data&#34;)&lt;/code&gt; by default). It works in tandem with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt;&lt;sup&gt;1&lt;/sup&gt; by registering a hook that enhances the &lt;code&gt;PATH&lt;/code&gt; environment variable, allowing neovim&#39;s LSP client to locate the server executable installed by nvim-lsp-installer.&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;On top of just providing commands for installing &amp;amp; uninstalling LSP servers, it:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provides a graphical UI&lt;/li&gt; &#xA; &lt;li&gt;provides the ability to check for, and upgrade to, new server versions through a single interface&lt;/li&gt; &#xA; &lt;li&gt;supports installing custom versions of LSP servers (for example &lt;code&gt;:LspInstall rust_analyzer@nightly&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;relaxes the minimum requirements by attempting multiple different utilities (for example, only one of &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;curl&lt;/code&gt;, or &lt;code&gt;Invoke-WebRequest&lt;/code&gt; is required for HTTP requests)&lt;/li&gt; &#xA; &lt;li&gt;hosts &lt;a href=&#34;https://github.com/williamboman/nvim-lspconfig-test&#34;&gt;a suite of system tests&lt;/a&gt; for all supported servers&lt;/li&gt; &#xA; &lt;li&gt;has full support for Windows &lt;img src=&#34;https://user-images.githubusercontent.com/6705160/131256603-cacf7f66-dfa9-4515-8ae4-0e42d08cfc6a.png&#34; height=&#34;20&#34;&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;sup&gt;1 - while lspconfig is the main target, this plugin may also be used for other use cases&lt;/sup&gt; &lt;br&gt; &lt;sup&gt;2 - some servers don&#39;t provide an executable, in which case the full command to spawn the server is provided instead&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685720-782e33ba-172c-44b6-8558-fb4e98495294.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685404-2cd34b25-166e-4c84-b9dd-1d5580dc2bdd.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685322-a537f021-5850-4bbc-8be2-1ece5678d205.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150685324-1310ae7d-67bf-4053-872c-d27e8a4c4b80.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150686052-fd5c4d54-b4da-4cb3-bb82-a094526ee5b5.png&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/6705160/150686059-f1be8131-1274-4f62-9aa8-345599cbd8bc.png&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Requires neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt; and &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Minimum requirements&lt;/h3&gt; &#xA;&lt;p&gt;The minimum recommended requirements are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Unix systems: git(1), curl(1) or wget(1), unzip(1), tar(1), gzip(1)&lt;/li&gt; &#xA; &lt;li&gt;For Windows systems: powershell, git, tar, and &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7zip&lt;/a&gt; or &lt;a href=&#34;https://peazip.github.io/&#34;&gt;peazip&lt;/a&gt; or &lt;a href=&#34;https://github.com/mholt/archiver&#34;&gt;archiver&lt;/a&gt; or &lt;a href=&#34;https://www.winzip.com/&#34;&gt;winzip&lt;/a&gt; or &lt;a href=&#34;https://www.win-rar.com/&#34;&gt;WinRAR&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Additional requirements&lt;/h3&gt; &#xA;&lt;p&gt;Additional requirements to install &amp;amp; run all servers are (depending on usage):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js (LTS) &amp;amp; npm&lt;/li&gt; &#xA; &lt;li&gt;Python3 &amp;amp; pip3&lt;/li&gt; &#xA; &lt;li&gt;go &amp;gt;= 1.17&lt;/li&gt; &#xA; &lt;li&gt;cargo&lt;/li&gt; &#xA; &lt;li&gt;Ruby &amp;amp; gem&lt;/li&gt; &#xA; &lt;li&gt;PHP &amp;amp; Composer&lt;/li&gt; &#xA; &lt;li&gt;JDK&lt;/li&gt; &#xA; &lt;li&gt;Julia&lt;/li&gt; &#xA; &lt;li&gt;dotnet&lt;/li&gt; &#xA; &lt;li&gt;ghcup&lt;/li&gt; &#xA; &lt;li&gt;luarocks&lt;/li&gt; &#xA; &lt;li&gt;meson&lt;/li&gt; &#xA; &lt;li&gt;ninja&lt;/li&gt; &#xA; &lt;li&gt;pwsh&lt;/li&gt; &#xA; &lt;li&gt;rebar3&lt;/li&gt; &#xA; &lt;li&gt;valac&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/nvim-lsp-installer&#34;,&#xA;    &#34;neovim/nvim-lspconfig&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;vim-plug&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;williamboman/nvim-lsp-installer&#34;&#xA;Plug &#34;neovim/nvim-lspconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;nvim-lsp-installer will only make sure that Neovim can find your installed servers, it does not set up any servers for you automatically. You will have to set up your servers yourself (for example via &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;lspconfig&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;In order for nvim-lsp-installer to register the necessary hooks at the right moment, &lt;strong&gt;make sure you call the &lt;code&gt;require(&#34;nvim-lsp-installer&#34;).setup()&lt;/code&gt; function before you set up any servers&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h3&gt;Commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstallInfo&lt;/code&gt; - opens a graphical overview of your language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstall [--sync] [server] ...&lt;/code&gt; - installs/reinstalls language servers. Runs in a blocking fashion if the &lt;code&gt;--sync&lt;/code&gt; argument is passed (only recommended for scripting purposes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstall [--sync] &amp;lt;server&amp;gt; ...&lt;/code&gt; - uninstalls language servers. Runs in a blocking fashion if the &lt;code&gt;--sync&lt;/code&gt; argument is passed (only recommended for scripting purposes).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstallAll [--no-confirm]&lt;/code&gt; - uninstalls all language servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstallLog&lt;/code&gt; - opens the log file in a new tab window&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspPrintInstalled&lt;/code&gt; - prints all installed language servers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of nvim-lsp-installer when calling the &lt;code&gt;.setup()&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).setup({&#xA;    automatic_installation = true, -- automatically detect which servers to install (based on which servers are set up via lspconfig)&#xA;    ui = {&#xA;        icons = {&#xA;            server_installed = &#34;✓&#34;,&#xA;            server_pending = &#34;➜&#34;,&#xA;            server_uninstalled = &#34;✗&#34;&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available LSPs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Server name&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;AWK&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;awk_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Angular&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;angularls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ansible&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ansiblels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Apex&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apex_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arduino &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/arduino_language_server/README.md&#34;&gt;(docs!!!)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;arduino_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Assembly (GAS/NASM, GO)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;asm_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Astro&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;astro&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bash&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bashls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Beancount&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;beancount&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bicep&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bicep&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;csharp_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C# &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/omnisharp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;omnisharp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;C++&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CMake&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cssmodules_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clarity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clarity_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clojure&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clojure_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CodeQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;codeqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;crystalline&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crystal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;scry&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cucumber&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;cucumber_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dart&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dartls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Deno&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;denols&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dhall&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dhall_lsp_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diagnostic (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;diagnosticls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;serve_d&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dockerls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Dot&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EFM (general purpose server)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;efm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESLint &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/eslint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elixir&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elixirls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Elm&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;elmls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ember&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ember&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Emmet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;emmet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Erlang&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;erlangls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;F#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fsautocomplete&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Flux&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;flux_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foam (OpenFOAM)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;foam_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fortran&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;fortls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;golangci_lint_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Go&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gopls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Grammarly&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;grammarly&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GraphQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;graphql&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Groovy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;groovyls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;html&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Haxe&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;haxe_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hoon&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;hoon_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Java &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/jdtls/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jdtls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;quick_lint_js&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jsonnet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jsonnet_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Julia &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/julials/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;julials&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kotlin&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;kotlin_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ltex&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LaTeX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;texlab&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lelwel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lelwel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sumneko_lua&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;marksman&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prosemd_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;remark_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Markdown&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zk&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Metamath Zero&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mm0_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nickel&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nickel_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nim&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nix&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rnix&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OCaml&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ocamllsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Objective C&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ccls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OneScript, 1C:Enterprise&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bsl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenCL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;opencl_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;intelephense&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;phpactor&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;psalm&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Perl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;perlnavigator&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Powershell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;powershell_es&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Prisma&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;prismals&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Puppet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;puppet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PureScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;purescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;jedi_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pyright&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcery&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/pylsp/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pylsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;R&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;r_language_server&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rescriptls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reason&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;reason_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Robot Framework&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;robotframework_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rome&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rome&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ruby&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solargraph&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Rust&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;rust_analyzer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SQL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sqls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Salt&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;salt_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shopify Theme Check&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;theme_check&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Slint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;slint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solang&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Solidity (VSCode)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;solidity_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sorbet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sorbet&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sphinx&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;esbonio&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stylelint&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;stylelint_lsp&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Svelte&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svelte&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Swift&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sourcekit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svlangserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SystemVerilog&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;verible&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TOML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;taplo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tailwind CSS&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tailwindcss&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Teal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;teal_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;terraformls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Terraform &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/nvim-lsp-installer/main/lua/nvim-lsp-installer/servers/tflint/README.md&#34;&gt;(docs)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tflint&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;V&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vala&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vala_ls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VimL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vimls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Visualforce&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;visualforce&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;volar&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;vuels&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;XML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;lemminx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YAML&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yamlls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zig&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;zls&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;Illustrations in the logo are derived from &lt;a href=&#34;https://schauderbasis.de/&#34;&gt;@Kaligule&lt;/a&gt;&#39;s &#34;Robots&#34; collection.&lt;/p&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- A list of servers to automatically install if they&#39;re not already installed. Example: { &#34;rust_analyzer&#34;, &#34;sumneko_lua&#34; }&#xA;    -- This setting has no relation with the `automatic_installation` setting.&#xA;    ensure_installed = {},&#xA;&#xA;    -- Whether servers that are set up (via lspconfig) should be automatically installed if they&#39;re not already installed.&#xA;    -- This setting has no relation with the `ensure_installed` setting.&#xA;    -- Can either be:&#xA;    --   - false: Servers are not automatically installed.&#xA;    --   - true: All servers set up via lspconfig are automatically installed.&#xA;    --   - { exclude: string[] }: All servers set up via lspconfig, except the ones provided in the list, are automatically installed.&#xA;    --       Example: automatic_installation = { exclude = { &#34;rust_analyzer&#34;, &#34;solargraph&#34; } }&#xA;    automatic_installation = false,&#xA;&#xA;    ui = {&#xA;        -- Whether to automatically check for outdated servers when opening the UI window.&#xA;        check_outdated_servers_on_open = true,&#xA;&#xA;        -- The border to use for the UI window. Accepts same border values as |nvim_open_win()|.&#xA;        border = &#34;none&#34;,&#xA;&#xA;        icons = {&#xA;            -- The list icon to use for installed servers.&#xA;            server_installed = &#34;◍&#34;,&#xA;            -- The list icon to use for servers that are pending installation.&#xA;            server_pending = &#34;◍&#34;,&#xA;            -- The list icon to use for servers that are not installed.&#xA;            server_uninstalled = &#34;◍&#34;,&#xA;        },&#xA;        keymaps = {&#xA;            -- Keymap to expand a server in the UI&#xA;            toggle_server_expand = &#34;&amp;lt;CR&amp;gt;&#34;,&#xA;            -- Keymap to install the server under the current cursor position&#xA;            install_server = &#34;i&#34;,&#xA;            -- Keymap to reinstall/update the server under the current cursor position&#xA;            update_server = &#34;u&#34;,&#xA;            -- Keymap to check for new version for the server under the current cursor position&#xA;            check_server_version = &#34;c&#34;,&#xA;            -- Keymap to update all installed servers&#xA;            update_all_servers = &#34;U&#34;,&#xA;            -- Keymap to check which installed servers are outdated&#xA;            check_outdated_servers = &#34;C&#34;,&#xA;            -- Keymap to uninstall a server&#xA;            uninstall_server = &#34;X&#34;,&#xA;        },&#xA;    },&#xA;&#xA;    -- The directory in which to install all servers.&#xA;    install_root_dir = path.concat { vim.fn.stdpath &#34;data&#34;, &#34;lsp_servers&#34; },&#xA;&#xA;    pip = {&#xA;        -- These args will be added to `pip install` calls. Note that setting extra args might impact intended behavior&#xA;        -- and is not recommended.&#xA;        --&#xA;        -- Example: { &#34;--proxy&#34;, &#34;https://proxyserver&#34; }&#xA;        install_args = {},&#xA;    },&#xA;&#xA;    -- Controls to which degree logs are written to the log file. It&#39;s useful to set this to vim.log.levels.DEBUG when&#xA;    -- debugging issues with server installations.&#xA;    log_level = vim.log.levels.INFO,&#xA;&#xA;    -- Limit for the maximum amount of servers to be installed at the same time. Once this limit is reached, any further&#xA;    -- servers that are requested to be installed will be put in a queue.&#xA;    max_concurrent_installers = 4,&#xA;&#xA;    github = {&#xA;        -- The template URL to use when downloading assets from GitHub.&#xA;        -- The placeholders are the following (in order):&#xA;        -- 1. The repository (e.g. &#34;rust-lang/rust-analyzer&#34;)&#xA;        -- 2. The release version (e.g. &#34;v0.3.0&#34;)&#xA;        -- 3. The asset name (e.g. &#34;rust-analyzer-v0.3.0-x86_64-unknown-linux-gnu.tar.gz&#34;)&#xA;        download_url_template = &#34;https://github.com/%s/releases/download/%s/%s&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>SpaceVim/SpaceVim</title>
    <updated>2022-06-25T01:45:12Z</updated>
    <id>tag:github.com,2022-06-25:/SpaceVim/SpaceVim</id>
    <link href="https://github.com/SpaceVim/SpaceVim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A community-driven modular vim/neovim distribution - The ultimate vimrc&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://spacevim.org/&#34;&gt; &lt;img src=&#34;https://spacevim.org/logo.png&#34; width=&#34;600&#34; alt=&#34;SpaceVim&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.element.io/#/room/#spacevim:matrix.org&#34;&gt;Chat&lt;/a&gt; | &lt;a href=&#34;https://spacevim.org/quick-start-guide/&#34;&gt;Quick Start Guide&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/SpaceVim&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SpaceVim/SpaceVim/actions/workflows/check.yml?query=branch%3Amaster&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/SpaceVim/SpaceVim/test&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/SpaceVim/SpaceVim&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/SpaceVim/SpaceVim.svg?sanitize=true&#34; alt=&#34;Codecov coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://spacevim.org/SpaceVim-release-v1.9.0/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Release-1.9.0-8700FF.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SpaceVim/SpaceVim/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;GPLv3 License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/spacevim/spacevim&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/spacevim/spacevim&#34; alt=&#34;Docker Pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/13142418/148374827-5f7aeaaa-e69b-441e-b872-408b47f4da04.png&#34; alt=&#34;welcome page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;SpaceVim is a community-driven modular Vim/Neovim distribution. It manages collections of plugins in layers, which help to collect related packages together to provide IDE-like features.&lt;/p&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/SpaceVim/SpaceVim/wiki/Following-HEAD&#34;&gt;following-HEAD&lt;/a&gt; page for what happened since last release.&lt;/p&gt; &#xA;&lt;h2&gt;Support SpaceVim&lt;/h2&gt; &#xA;&lt;p&gt;This project wouldn&#39;t exist without all the people who &lt;a href=&#34;https://raw.githubusercontent.com/SpaceVim/SpaceVim/master/CONTRIBUTING.md&#34;&gt;contributed&lt;/a&gt;, We are thankful for any contributions from the community.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SpaceVim/SpaceVim/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/spacevim/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best way to support SpaceVim is to contribute to it either by reporting bugs, helping the community on the &lt;a href=&#34;https://app.element.io/#/room/#spacevim:matrix.org&#34;&gt;Matrix Chat&lt;/a&gt;, or sending pull requests.&lt;/p&gt; &#xA;&lt;p&gt;For more information please check our &lt;a href=&#34;https://spacevim.org/development/&#34;&gt;development guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you use SpaceVim in your daily work and feel that it has made your life easier, please consider buying me a coffee or becoming a backer on &lt;a href=&#34;https://opencollective.com/spacevim&#34;&gt;opencollective&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/spacevim&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://az743702.vo.msecnd.net/cdn/kofi4.png?v=f&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits &amp;amp; Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gabirel/Hack-SpaceVim&#34;&gt;Hack-SpaceVim&lt;/a&gt; by &lt;a href=&#34;https://github.com/Gabirel&#34;&gt;@Gabirel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://everettjf.gitbooks.io/spacevimtutorial/content/&#34;&gt;SpaceVimTutorial&lt;/a&gt; by &lt;a href=&#34;https://github.com/everettjf&#34;&gt;@everettjf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Jackiexiao/10-minutes-to-SpaceVim&#34;&gt;10-minutes-to-SpaceVim&lt;/a&gt; by &lt;a href=&#34;https://github.com/Jackiexiao&#34;&gt;@Jackiexiao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iXPS_NHLj9k&#34;&gt;A First Look At SpaceVim&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCVls1GmFKf6WlTraIb_IaJg&#34;&gt;@DistroTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3xB501CJDB8&#34;&gt;Getting Started With SpaceVim&lt;/a&gt; by &lt;a href=&#34;https://www.youtube.com/channel/UCfU_sitghekwveLh6yM_xuA&#34;&gt;FOSS King&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/vimdoc&#34;&gt;vimdoc&lt;/a&gt; generate doc file for SpaceVim&lt;/li&gt; &#xA; &lt;li&gt;Authors of all the plugins used in SpaceVim.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim:set nowrap: --&gt;</summary>
  </entry>
</feed>