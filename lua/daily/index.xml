<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-28T02:21:47Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>williamboman/mason-lspconfig.nvim</title>
    <updated>2022-07-28T02:21:47Z</updated>
    <id>tag:github.com,2022-07-28:/williamboman/mason-lspconfig.nvim</id>
    <link href="https://github.com/williamboman/mason-lspconfig.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extension to mason.nvim that makes it easier to use lspconfig with mason.nvim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/williamboman/mason-lspconfig.nvim/actions?query=workflow%3ATests+branch%3Amain+event%3Apush&#34;&gt;&lt;img src=&#34;https://github.com/williamboman/mason-lspconfig.nvim/workflows/Tests/badge.svg?sanitize=true&#34; alt=&#34;GitHub CI&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/platform-linux%20macOS%20windows-blue&#34; alt=&#34;Platforms&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/repo-size/williamboman/mason-lspconfig.nvim&#34; alt=&#34;Repository size&#34;&gt; &lt;a href=&#34;https://github.com/sponsors/williamboman&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/williamboman?style=flat-square&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;mason-lspconfig.nvim&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;code&gt;mason-lspconfig&lt;/code&gt; bridges &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt; with the &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/a&gt; plugin - making it easier to use the both plugins together. &lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;mason-lspconfig.nvim&lt;/code&gt; closes some gaps that exist between &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;lspconfig&lt;/code&gt;. Its main responsibilities is to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;register a setup hook with &lt;code&gt;lspconfig&lt;/code&gt; that ensures servers installed with &lt;code&gt;mason.nvim&lt;/code&gt; are set up with the necessary configuration&lt;/li&gt; &#xA; &lt;li&gt;provide extra convenience APIs such as the &lt;code&gt;:LspInstall&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;allow you to (i) automatically install, and (ii) automatically set up a predefined list of servers&lt;/li&gt; &#xA; &lt;li&gt;translate between &lt;code&gt;lspconfig&lt;/code&gt; server names and &lt;code&gt;mason.nvim&lt;/code&gt; package names (e.g. &lt;code&gt;sumneko_lua &amp;lt;-&amp;gt; lua-language-server&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use this extension if you use &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;lspconfig&lt;/code&gt; (it&#39;s strongly recommended for Windows users).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this plugin uses the &lt;code&gt;lspconfig&lt;/code&gt; server names in the APIs it exposes - not &lt;code&gt;mason.nvim&lt;/code&gt; package names. &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/doc/server-mapping.md&#34;&gt;See this table for a complete mapping.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lspconfig&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/mason.nvim&#34;,&#xA;    &#34;williamboman/mason-lspconfig.nvim&#34;,&#xA;    &#34;neovim/nvim-lspconfig&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vim-plug&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;williamboman/mason.nvim&#39;&#xA;Plug &#39;williamboman/mason-lspconfig.nvim&#39;&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;require(&#34;mason-lspconfig&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; section for information about which settings are available.&lt;/p&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspInstall [&amp;lt;server&amp;gt;...]&lt;/code&gt; - installs the provided servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:LspUninstall &amp;lt;server&amp;gt; ...&lt;/code&gt; - uninstalls the provided servers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason-lspconfig.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/williamboman/mason-lspconfig.nvim/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason-lspconfig&#34;).setup({&#xA;    ensure_installed = { &#34;sumneko_lua&#34;, &#34;rust_analyzer&#34; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- A list of servers to automatically install if they&#39;re not already installed. Example: { &#34;rust_analyzer@nightly&#34;, &#34;sumneko_lua&#34; }&#xA;    -- This setting has no relation with the `automatic_installation` setting.&#xA;    ensure_installed = {},&#xA;&#xA;    -- Whether servers that are set up (via lspconfig) should be automatically installed if they&#39;re not already installed.&#xA;    -- This setting has no relation with the `ensure_installed` setting.&#xA;    -- Can either be:&#xA;    --   - false: Servers are not automatically installed.&#xA;    --   - true: All servers set up via lspconfig are automatically installed.&#xA;    --   - { exclude: string[] }: All servers set up via lspconfig, except the ones provided in the list, are automatically installed.&#xA;    --       Example: automatic_installation = { exclude = { &#34;rust_analyzer&#34;, &#34;solargraph&#34; } }&#xA;    automatic_installation = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>JoshParnell/ltheory</title>
    <updated>2022-07-28T02:21:47Z</updated>
    <id>tag:github.com,2022-07-28:/JoshParnell/ltheory</id>
    <link href="https://github.com/JoshParnell/ltheory" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Limit Theory&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Limit Theory&lt;/h1&gt; &#xA;&lt;p&gt;Limit Theory is a now-cancelled open world space simulation game.&lt;/p&gt; &#xA;&lt;p&gt;This repository is the game (not engine) code for the second generation of LT&#39;s development, when all work was migrated to C and Lua. For the older, C++/LTSL Limit Theory, see &lt;a href=&#34;https://github.com/JoshParnell/ltheory-old&#34;&gt;https://github.com/JoshParnell/ltheory-old&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/JoshParnell/ltheory/master/res/tex2d/screenshot.png&#34; alt=&#34;LT Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;To build Limit Theory, you&#39;ll need a few standard developer tools. All of them are available to download for free.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python: &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git: &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Git LFS: &lt;a href=&#34;https://git-lfs.github.com/&#34;&gt;https://git-lfs.github.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio Community: &lt;a href=&#34;https://visualstudio.microsoft.com/vs/&#34;&gt;https://visualstudio.microsoft.com/vs/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;CMake: &lt;a href=&#34;https://cmake.org/download/&#34;&gt;https://cmake.org/download/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;With the above prerequisites installed, open a &lt;strong&gt;Git Bash terminal&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Checking out the Repository&lt;/h2&gt; &#xA;&lt;p&gt;First, use &lt;code&gt;cd&lt;/code&gt; to change directories to the place where you want to download LT.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cd ~/Desktop/&amp;lt;path where you want to put the LT source&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before doing any other &lt;code&gt;git&lt;/code&gt; commands, make sure LFS is installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git lfs install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You should see &lt;code&gt;Git LFS initialized&lt;/code&gt; or a similar message. &lt;strong&gt;Important&lt;/strong&gt;: if you forget to install and initialize Git LFS, most of the resources will probably be broken, and the whole process will likely fail in strange and mysterious ways. This is a common gotcha with projects that use LFS. Make sure you do the above step!&lt;/p&gt; &#xA;&lt;p&gt;Now, you can download the repository:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone --recursive https://github.com/JoshParnell/ltheory.git ltheory&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compiling&lt;/h2&gt; &#xA;&lt;p&gt;Once you have the repository, the build process proceeds in two steps (as with other CMake builds): generating the build files, and then building. There is a Python script &lt;code&gt;configure.py&lt;/code&gt; at the top level of the repository to help you do this easily.&lt;/p&gt; &#xA;&lt;p&gt;From a terminal in the directory of the checked-out repository, run&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python configure.py&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This runs CMake to generate the build files. Then, to compile,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python configure.py build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running a Lua App&lt;/h2&gt; &#xA;&lt;p&gt;If the compilation is successful, you now have &lt;code&gt;bin/lt64.exe&lt;/code&gt;, which is the main executable. This program launches a Lua script. The intention was for Limit Theory (and all mods) to be broken into many Lua scripts, which would then implement the gameplay, using script functions exposed by the underlying engine.&lt;/p&gt; &#xA;&lt;p&gt;To launch a Lua script, you can again use the python helper:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python configure.py run&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the default script (&#39;LTheory&#39;), or&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;python configure.py run &amp;lt;script_name_without_extension&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;to run a specific script. All top-level scripts are in the &lt;code&gt;script/App&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h1&gt;Example of the Entire Process&lt;/h1&gt; &#xA;&lt;p&gt;An example of the entire sequence of commands to run LT, starting from nothing (but having the prerequisites installed):&lt;/p&gt; &#xA;&lt;p&gt;Open Git Bash. Each line below is one command, some of which will take a while to complete:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ~/Desktop&#xA;git lfs install&#xA;git clone --recursive https://github.com/JoshParnell/ltheory.git ltheory&#xA;cd ltheory&#xA;python configure.py&#xA;python configure.py build&#xA;python configure.py run&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>nezu-cc/ServerCrasher</title>
    <updated>2022-07-28T02:21:47Z</updated>
    <id>tag:github.com,2022-07-28:/nezu-cc/ServerCrasher</id>
    <link href="https://github.com/nezu-cc/ServerCrasher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CS:GO Server Crasher&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Server Crasher&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains sources for the CS:GO server crasher. (NL, GS, AW and a native version)&lt;/p&gt; &#xA;&lt;p&gt;Sources are being released as a &#34;no u&#34; move (to prevent people from selling my work without my permission)&lt;/p&gt; &#xA;&lt;p&gt;Feel free to do whatever you want with them as long as you comply with the MIT license&lt;/p&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nezu-cc/ServerCrasher/main/ding.png&#34; alt=&#34;DING DONG&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>