<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-18T01:39:16Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ChristianChiarulli/onedark.nvim</title>
    <updated>2023-05-18T01:39:16Z</updated>
    <id>tag:github.com,2023-05-18:/ChristianChiarulli/onedark.nvim</id>
    <link href="https://github.com/ChristianChiarulli/onedark.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My take on the iconic Onedark colorscheme&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/29136904/237932638-9fc9c69c-3ed1-4fe6-9ee5-2d9a46ca6c7a.png&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/ChristianChiarulli/onedark.nvim/releases/latest&#34;&gt; &lt;img alt=&#34;Latest release&#34; src=&#34;https://img.shields.io/github/v/release/ChristianChiarulli/onedark.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=56b6c2&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ChristianChiarulli/onedark.nvim/pulse&#34;&gt; &lt;img alt=&#34;Last commit&#34; src=&#34;https://img.shields.io/github/last-commit/lunarvim/LunarVim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=98c379&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ChristianChiarulli/onedark.nvim/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/ChristianChiarulli/onedark.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=d19a66&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/ChristianChiarulli/onedark.nvim/stargazers&#34;&gt; &lt;img alt=&#34;Stars&#34; src=&#34;https://img.shields.io/github/stars/ChristianChiarulli/onedark.nvim?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=c678dd&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://patreon.com/chrisatmachine&#34; title=&#34;Donate to this project using Patreon&#34;&gt; &lt;img alt=&#34;Patreon donate button&#34; src=&#34;https://img.shields.io/badge/patreon-donate-yellow.svg?style=for-the-badge&amp;amp;logo=starship&amp;amp;color=e06c75&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=chrisatmachine&#34;&gt; &lt;img alt=&#34;follow on Twitter&#34; src=&#34;https://img.shields.io/twitter/follow/chrisatmachine?style=for-the-badge&amp;amp;logo=twitter&amp;amp;color=61afef&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA; &lt;p&gt;My take on the iconic Onedark colorscheme. Ported for Neovim 100% Lua.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/29136904/237923271-802491ea-e632-4257-962b-731ae3dffd3a.png&#34; alt=&#34;demo1&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use your favorite plugin manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;ChristianChiarulli/onedark.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Colors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/29136904/237921566-cc91c828-7728-42a3-b5b5-5ce110a3c5e3.png&#34; alt=&#34;colors&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Made With&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LunarVim/colorgen-nvim&#34;&gt;colorgen-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChristianChiarulli/colorblender&#34;&gt;colorblender&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joshdick/onedark.vim&#34;&gt;onedark.vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atom/atom&#34;&gt;&lt;img alt=&#34;atom&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/atom.png?v8&#34;&gt;) Atom RIP ðŸ’€&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aaditeynair/conduct.nvim</title>
    <updated>2023-05-18T01:39:16Z</updated>
    <id>tag:github.com,2023-05-18:/aaditeynair/conduct.nvim</id>
    <link href="https://github.com/aaditeynair/conduct.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A project management plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;conduct.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A project management plugin for Neovim with session support&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#projects&#34;&gt;Projects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#sessions&#34;&gt;Sessions&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#project-config-structure&#34;&gt;Project Config Structure&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#keybinds&#34;&gt;Keybinds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#presets&#34;&gt;Presets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/aaditeynair/conduct.nvim/main/#telescope&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Intuitive and easy to manage projects&lt;/li&gt; &#xA; &lt;li&gt;Run commands or Lua functions on keybindings&lt;/li&gt; &#xA; &lt;li&gt;Presets for multiple projects that share some similarities&lt;/li&gt; &#xA; &lt;li&gt;Store multiple sessions for a single project&lt;/li&gt; &#xA; &lt;li&gt;Provides hooks to customize your experience&lt;/li&gt; &#xA; &lt;li&gt;Easy to use API&lt;/li&gt; &#xA; &lt;li&gt;Telescope integration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0 (might work with earlier version)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;lazy.nvim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;aaditeynair/conduct.nvim&#34;,&#xA;    dependencies = &#34;nvim-lua/plenary.nvim&#34;,&#xA;    cmd = {&#xA;        &#34;ConductNewProject&#34;,&#xA;        &#34;ConductLoadProject&#34;,&#xA;        &#34;ConductLoadLastProject&#34;,&#xA;        &#34;ConductLoadProjectConfig&#34;,&#xA;        &#34;ConductReloadProjectConfig&#34;,&#xA;        &#34;ConductDeleteProject&#34;,&#xA;        &#34;ConductRenameProject&#34;,&#xA;        &#34;ConductProjectNewSession&#34;,&#xA;        &#34;ConductProjectLoadSession&#34;,&#xA;        &#34;ConductProjectDeleteSession&#34;,&#xA;        &#34;ConductProjectRenameSession&#34;,&#xA;    },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conduct&#34;).setup({&#xA;    -- define function that you bind to a key in a project config&#xA;    functions = {},&#xA;&#xA;    -- define presets for projects&#xA;    presets = {},&#xA;&#xA;    hooks = {&#xA;        before_session_save = function() end,&#xA;        before_session_load = function() end,&#xA;        after_session_load = function() end,&#xA;        before_project_load = function() end,&#xA;        after_project_load = function() end,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Projects&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Args&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductNewProject&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Creates a new project with the supplied name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductLoadProject&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Loads the supplied project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductLoadLastProject&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Loads the last opened project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductRenameProject&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;old_name&lt;/code&gt; &lt;code&gt;new_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Renames the project with &lt;code&gt;old_name&lt;/code&gt; to &lt;code&gt;new_name&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductDeleteProject&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deletes the project with the supplied name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductLoadProjectConfig&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Loads the project config file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductReloadProjectConfig&lt;/td&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;Reloads the config file of the active project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Sessions&lt;/h3&gt; &#xA;&lt;p&gt;One of the main differences between conduct.nvim and other project management plugins, is its ability to store multiple session for a single project. This allows you to switch between different contexts in the code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;These commands only work when a project is active&lt;/em&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Args&lt;/th&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductProjectNewSession&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;session_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Saves current session and creates a new session with the supplied name. The new session is made the active session&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductProjectLoadSession&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;session_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Saves the current session and loads the supplied session&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductProjectDeleteSession&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;session_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deletes the supplied session&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ConductProjectRenameSession&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;old_name&lt;/code&gt; &lt;code&gt;new_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Renames &lt;code&gt;old_name&lt;/code&gt; session to &lt;code&gt;new_name&lt;/code&gt; even if &lt;code&gt;old_name&lt;/code&gt; is the active session&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Project Config Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;project name&#34;,&#xA;  &#34;cwd&#34;: &#34;/home/user/project/foo&#34;,&#xA;  &#34;variables&#34;: [],&#xA;  &#34;preset&#34;: &#34;&#34;,&#xA;  &#34;keybinds&#34;: []&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;name&lt;/td&gt; &#xA;   &lt;td&gt;project name. only change the project name via the rename command. this is only for the API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cwd&lt;/td&gt; &#xA;   &lt;td&gt;path to project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;variables&lt;/td&gt; &#xA;   &lt;td&gt;object with keys as variable names and value as the variable value&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;preset&lt;/td&gt; &#xA;   &lt;td&gt;name of preset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keybinds&lt;/td&gt; &#xA;   &lt;td&gt;list containing a keybindings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Keybinds&lt;/h3&gt; &#xA;&lt;p&gt;The keybinds property should be a list that contains data in the following manner:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;keybinds&#34;: [[&#34;keybinding&#34;, &#34;command&#34;, &#34;type&#34;]]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;keybinding: the key combination of the binding (&#34;&#xA;  &lt;leader&gt;&#xA;   hi&#34;, &#34;&#xA;   &lt;leader&gt;&#xA;    so&#34;)&#xA;   &lt;/leader&gt;&#xA;  &lt;/leader&gt;&lt;/li&gt; &#xA; &lt;li&gt;command: can be a vim command or the name of a function&lt;/li&gt; &#xA; &lt;li&gt;type: can be either &lt;code&gt;command&lt;/code&gt; or &lt;code&gt;function&lt;/code&gt;. If not provided, it is assumed as command&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Variables&lt;/h3&gt; &#xA;&lt;p&gt;Variables can only be used in the &lt;code&gt;command&lt;/code&gt; type keybindings. They can be mentioned using the &lt;code&gt;${variable_name}&lt;/code&gt; syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;variables&#34;: {&#xA;    &#34;flags&#34;: &#34;-la&#34;&#xA;  },&#xA;  &#34;keybinds&#34;: [[&#34;&amp;lt;leader&amp;gt;so&#34;, &#34;TermOpen control ls ${flags}&#34;]]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Presets&lt;/h2&gt; &#xA;&lt;p&gt;Presets can be used to setup keybinds for multiple projects that might share similarities&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conduct&#34;).setup({&#xA;    presets = {&#xA;        node = {&#xA;            keybinds = {&#xA;                {&#34;&amp;lt;leader&amp;gt;sd&#34;, &#34;TermOpen dev-server npm run dev&#34;, &#34;command&#34;}&#xA;                {&#34;&amp;lt;leader&amp;gt;sb&#34;, &#34;TermOpen build npm run build&#34;, &#34;command&#34;}&#xA;            }&#xA;        }&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;personal-blog-react&#34;,&#xA;  &#34;cwd&#34;: &#34;/home/user/project/blog&#34;,&#xA;  &#34;variables&#34;: [],&#xA;  &#34;preset&#34;: &#34;node&#34;,&#xA;  &#34;keybinds&#34;: []&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;p&gt;Define functions when setting up conduct.nvim and bind keys to them in the project config&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conduct&#34;).setup({&#xA;    functions = {&#xA;        run_npm_server = function()&#xA;            local tm = require(&#34;termnames&#34;)&#xA;            if not tm.terminal_exists(&#34;server&#34;) then&#xA;                tm.create_terminal(&#34;server&#34;)&#xA;            end&#xA;&#xA;            tm.run_terminal_cmd({&#34;server&#34;, &#34;npm run dev&#34;})&#xA;        end,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;name&#34;: &#34;personal-blog-react&#34;,&#xA;  &#34;cwd&#34;: &#34;/home/user/project/blog&#34;,&#xA;  &#34;variables&#34;: [],&#xA;  &#34;preset&#34;: &#34;&#34;,&#xA;  &#34;keybinds&#34;: [[&#34;&amp;lt;leader&amp;gt;so&#34;, &#34;run_npm_server&#34;, &#34;function&#34;]]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Telescope&lt;/h2&gt; &#xA;&lt;p&gt;Conduct.nvim provides telescope integration for switching between projects and sessions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;telescope.load_extension(&#34;conduct&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run &lt;code&gt;:Telescope conduct projects&lt;/code&gt; to search and load a project and run &lt;code&gt;:Telescope conduct sessions&lt;/code&gt; to switch between project sessions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Theo-Steiner/togglescope</title>
    <updated>2023-05-18T01:39:16Z</updated>
    <id>tag:github.com,2023-05-18:/Theo-Steiner/togglescope</id>
    <link href="https://github.com/Theo-Steiner/togglescope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;togglescope&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Togglescope&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Togglescope&lt;/strong&gt; is an extension for &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim#pickers&#34;&gt;telescope.nvim&lt;/a&gt; that allows you to toggle between two picker configurations with just one keypress.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/40017636/234332528-1dc07a2a-d8a3-4be2-ac79-7882d0bbc0e9.gif&#34; alt=&#34;togglescope in action&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example Use Case&lt;/h2&gt; &#xA;&lt;p&gt;By default, telescope&#39;s live_grep or find_files pickers do not search through hidden or gitignored files. I sometimes find myself grepping for a string, only to then remember that the string I&#39;m looking for is in some random file inside an ignored directory.&lt;/p&gt; &#xA;&lt;p&gt;Now if you&#39;re like me, and you struggle to remember how to launch a picker with a configuration that doesn&#39;t ignore the file you&#39;re looking for, &lt;strong&gt;togglescope&lt;/strong&gt; is the tool for you!&lt;/p&gt; &#xA;&lt;p&gt;Just hit the keymap you configured, and like magic your picker&#39;s configuration is swapped with a config more suitable to the special job you&#39;re trying to do. If you change your mind and want your default config back, just hit the same keymap again and everything returns to the way it was.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &amp;amp; configure togglescope with any package manager. There&#39;s three steps to the process:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the package as a dependency to &lt;code&gt;&#34;nvim-telescope/telescope.nvim&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add your togglescope configuration under &lt;code&gt;extensions.togglescope&lt;/code&gt; to your telescope config&lt;/li&gt; &#xA; &lt;li&gt;Set up keymaps for your modified pickers&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;With Lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    --- 1. Register &#34;Theo-Steiner/togglescope&#34; as a dependency to telescope&#xA;  &#34;nvim-telescope/telescope.nvim&#34;,&#xA;  dependencies = { &#xA;      &#34;Theo-Steiner/togglescope&#34;&#xA;    },&#xA;    --- 2. Configure togglescope in the extensions setting of your telescope config&#xA;  config = function()&#xA;    require(&#34;telescope&#34;).setup({&#xA;      extensions = {&#xA;        togglescope = {&#xA;          find_files = {&#xA;            [&#39;&amp;lt;C-^&amp;gt;&#39;] = {&#xA;              hidden = true,&#xA;            }&#xA;          }&#xA;        }&#xA;      },&#xA;    })&#xA;  end,&#xA;    --- 3. Configure a keymap to launch the togglescope picker&#xA;  keys = {&#xA;    {&#xA;      &#34;&amp;lt;leader&amp;gt;ff&#34;,&#xA;      function()&#xA;        require(&#39;telescope&#39;).extensions.togglescope.find_files()&#xA;      end&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Togglescope is configured via &lt;code&gt;extensions.togglescope&lt;/code&gt; of your telescope config. A valid &lt;code&gt;extensions.togglescope&lt;/code&gt; config is structured as &lt;code&gt;picker_name &amp;gt; keymap &amp;gt; picker_config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;--- A picker that you want to add a toggleable config to.&#xA;--- All builtin pickers of telescope are valid as picker_name.&#xA;--- @type &#39;find_files&#39; | &#39;live_grep&#39; | &#39;grep_string&#39; ...and so on&#xA;--- @see github.com/nvim-telescope/telescope.nvim#pickers&#xA;local picker_name = &#39;find_files&#39;&#xA;&#xA;--- The keymap that toggles between the toggleable config and the default config.&#xA;--- For now the keymap will always be set in insert and normal mode.&#xA;--- If necessary I might make this configurable at a later point.&#xA;--- @type &#39;&amp;lt;C-^&amp;gt;&#39; | &#39;&amp;lt;C-f&amp;gt;&#39; | &#39;&amp;lt;C-y&amp;gt;&#39; ...whatever you want!&#xA;local keymap = &#39;&amp;lt;C-^&amp;gt;&#39;&#xA;&#xA;--- The toggleable_config you want to switch to when you hit your keybinding.&#xA;--- &#39;togglescope_title&#39; is a special property that allows you to set a title&#xA;--- that is displayed when your toggleable config is active.&#xA;--- @type {[string]: any, togglescope_title: string} ...any valid picker config!&#xA;local toggleable_config = {&#xA;    no_ignore = true,&#xA;    togglescope_title = &#34;Find Files (hidden)&#34;&#xA;}&#xA;&#xA;--- @type {[picker_name]: {[keymap]: toggleable_config}}&#xA;local togglescope_config = {[picker_name]: {[keymap]: toggleable_config}}&#xA;&#xA;require(&#34;telescope&#34;).setup({&#xA;    extensions = {&#xA;        togglescope = togglescope_config&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For every &lt;code&gt;picker_name&lt;/code&gt; you add as a top level key to your &lt;code&gt;togglescope_config&lt;/code&gt;, togglescope will generate a modified picker that has a keymapping to toggle between your toggleable config and the picker&#39;s default config (the config you originially launched the picker with). These modified pickers are accessible from &lt;code&gt;require(&#39;telescope&#39;).extensions.togglescope&lt;/code&gt; and can be used as you would use builtin telescope pickers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;--- old keymap&#xA;{&#xA;    &#34;&amp;lt;leader&amp;gt;ff&#34;,&#xA;    function()&#xA;        require(&#39;telescope.builtin&#39;).find_files()&#xA;    end&#xA;}&#xA;--- simply becomes&#xA;{&#xA;    &#34;&amp;lt;leader&amp;gt;ff&#34;,&#xA;    function()&#xA;        require(&#39;telescope&#39;).extensions.togglescope.find_files()&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Togglescope Recipies&lt;/h2&gt; &#xA;&lt;p&gt;I thought it might be useful to collect a few useful togglescope configs, so that users can just copy/paste a config they are interested in!&lt;/p&gt; &#xA;&lt;h3&gt;How I (Author) Use Togglescope&lt;/h3&gt; &#xA;&lt;p&gt;For now I use togglescope to toggle between searching through hidden files using the find_files and live_grep pickers with BurntSushi/ripgrep as a search engine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local togglescope_config = {&#xA;    --- configure find_files as a togglescope picker&#xA;    find_files = { &#xA;        --- on alternate file hotkey &amp;lt;C-^&amp;gt; toggle to the below config&#xA;        [&#39;&amp;lt;C-^&amp;gt;&#39;] = {&#xA;            --- search through hidden files/directories&#xA;            hidden = true,&#xA;            --- search through ignored directories/files &#xA;            --- (I occasionally want to look into node_modules)&#xA;            no_ignore = true,&#xA;            --- when this config is active, set the title to this&#xA;            togglescope_title = &#34;Find Files (hidden)&#34;&#xA;        }&#xA;    },&#xA;    --- configure find_files as a togglescope picker&#xA;    live_grep = {&#xA;        --- on alternate file hotkey &amp;lt;C-^&amp;gt; toggle to the below config&#xA;        [&#39;&amp;lt;C-^&amp;gt;&#39;] = {&#xA;            --- flags are passed to ripgrep using &#34;additional_args&#34;&#xA;            additional_args = {&#xA;                --- search through hidden files/directories&#xA;                &#39;--hidden&#39;,&#xA;                --- search through ignored directories/files &#xA;                &#39;--no-ignore&#39;,&#xA;                --- specify a glob for the search&#xA;                &#34;-g&#34;,&#xA;                --- ignore the glob of &#34;package-lock.json&#34; &#xA;                &#34;!package-lock.json&#34;,&#xA;            },&#xA;            --- when this config is active, set the title to this&#xA;            togglescope_title = &#34;Live Grep (hidden)&#34;&#xA;        }&#xA;    }&#xA;} &#xA;require(&#39;telescope&#39;).setup({&#xA;    extensions = {&#xA;        --- configure togglescope with the above config&#xA;        togglescope = togglescope_config&#xA;    },&#xA;    defaults = {&#xA;        --- set an ignore pattern to always ignore files in the .git directory&#xA;        file_ignore_patterns = { &#34;^.git/&#34; },&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This extension was heavily influenced and inspired by &lt;a href=&#34;https://github.com/molecule-man/telescope-menufacture&#34;&gt;https://github.com/molecule-man/telescope-menufacture&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>