<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:47:46Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iElden/BetterBalancedGame</title>
    <updated>2022-07-13T01:47:46Z</updated>
    <id>tag:github.com,2022-07-13:/iElden/BetterBalancedGame</id>
    <link href="https://github.com/iElden/BetterBalancedGame" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>X3eRo0/dired.nvim</title>
    <updated>2022-07-13T01:47:46Z</updated>
    <id>tag:github.com,2022-07-13:/X3eRo0/dired.nvim</id>
    <link href="https://github.com/X3eRo0/dired.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Emacs dired like file manager for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;dired.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A file browser inspired from Emacs Dired for neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/24680989/178328330-f7e3f502-b83b-4559-9d4d-606389a6a5ea.png&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/24680989/178287820-a1826d5f-2109-4c1d-a38d-38fe549ccc11.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.6.0&#34;&gt;Neovim 0.6&lt;/a&gt; or higher.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use {&#xA;    &#34;X3eRo0/dired.nvim&#34;,&#xA;    requires = &#34;MunifTanjim/nui.nvim&#34;,&#xA;    config = function()&#xA;        require(&#34;dired&#34;).setup {&#xA;            path_separator = &#34;/&#34;,&#xA;            show_banner = false,&#xA;            show_hidden = true&#xA;        }&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;You can require this plugin and use it like this.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;dired&#34;).setup {&#xA;    path_separator = &#34;/&#34;,&#xA;    show_banner = false,&#xA;    show_hidden = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run the command &lt;code&gt;:Dired&lt;/code&gt; to open a buffer for your current directory. Press &lt;code&gt;-&lt;/code&gt; in any buffer to open a directory buffer for its parent. Editing a directory will also open up a buffer, overriding Netrw.&lt;/p&gt; &#xA;&lt;p&gt;Inside a directory buffer, there are the following keybindings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;: Open the file or directory at the cursor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d&lt;/code&gt;: Create new directories and files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;D&lt;/code&gt;: Delete a directories or files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;R&lt;/code&gt;: Rename a directories or files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-&lt;/code&gt;: Open parent directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.&lt;/code&gt;: Toggle show_hidden.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;,&lt;/code&gt;: Change sort_order.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get directory listing from &#34;ls&#34; dired mode.&lt;/li&gt; &#xA; &lt;li&gt;Allow moving and copying of files.&lt;/li&gt; &#xA; &lt;li&gt;Allow changing file permissions.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>rmagatti/auto-session</title>
    <updated>2022-07-13T01:47:46Z</updated>
    <id>tag:github.com,2022-07-13:/rmagatti/auto-session</id>
    <link href="https://github.com/rmagatti/auto-session" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A small automated session manager for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üóíÔ∏è Description&lt;/h1&gt; &#xA;&lt;p&gt;Auto Session takes advantage of Neovim&#39;s existing session management capabilities to provide seamless automatic session management.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/rmagatti/readme-assets/raw/main/auto-session-zoomed.gif&#34; width=&#34;1000&#34;&gt; &#xA;&lt;h1&gt;üí° Behaviour&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When starting &lt;code&gt;nvim&lt;/code&gt; with no arguments, auto-session will try to restore an existing session for the current &lt;code&gt;cwd&lt;/code&gt; if one exists.&lt;/li&gt; &#xA; &lt;li&gt;When starting &lt;code&gt;nvim .&lt;/code&gt; with some argument, auto-session will do nothing.&lt;/li&gt; &#xA; &lt;li&gt;Even after starting &lt;code&gt;nvim&lt;/code&gt; with an argument, a session can still be manually restored by running &lt;code&gt;:RestoreSession&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Any session saving and restoration takes into consideration the current working directory &lt;code&gt;cwd&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When piping to &lt;code&gt;nvim&lt;/code&gt;, e.g: &lt;code&gt;cat myfile | nvim&lt;/code&gt;, auto-session behaves like #2.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; Please note that if there are errors in your config, restoring the session might fail, if that happens, auto session will then disable auto saving for the current session. Manually saving a session can still be done by calling &lt;code&gt;:SaveSession&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;üì¶ Installation&lt;/h1&gt; &#xA;&lt;p&gt;Any plugin manager should do, I use &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;rmagatti/auto-session&#39;,&#xA;  config = function()&#xA;    require(&#39;auto-session&#39;).setup {&#xA;      log_level = &#39;info&#39;,&#xA;      auto_session_suppress_dirs = {&#39;~/&#39;, &#39;~/Projects&#39;}&#xA;    }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;‚öôÔ∏è Configuration&lt;/h1&gt; &#xA;&lt;h3&gt;Default&lt;/h3&gt; &#xA;&lt;p&gt;Auto Session by default stores sessions in &lt;code&gt;vim.fn.stdpath(&#39;data&#39;)..&#34;/sessions/&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Custom&lt;/h3&gt; &#xA;&lt;p&gt;One can set the auto_session root dir that will be used for auto session saving and restoring.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;let g:auto_session_root_dir = path/to/my/custom/dir&#xA;&#xA;&#34; or use lua&#xA;lua &amp;lt;&amp;lt; EOF&#xA;local opts = {&#xA;  log_level = &#39;info&#39;,&#xA;  auto_session_enable_last_session = false,&#xA;  auto_session_root_dir = vim.fn.stdpath(&#39;data&#39;)..&#34;/sessions/&#34;,&#xA;  auto_session_enabled = true,&#xA;  auto_save_enabled = nil,&#xA;  auto_restore_enabled = nil,&#xA;  auto_session_suppress_dirs = nil,&#xA;  auto_session_use_git_branch = nil,&#xA;  -- the configs below are lua only&#xA;  bypass_session_save_file_types = nil&#xA;}&#xA;&#xA;require(&#39;auto-session&#39;).setup(opts)&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Statusline&lt;/h3&gt; &#xA;&lt;p&gt;One can show the current session name in the statusline by using an auto-session helper function.&lt;/p&gt; &#xA;&lt;p&gt;Lualine example config and how it looks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup{&#xA;  options = {&#xA;    theme = &#39;tokyonight&#39;,&#xA;  },&#xA;  sections = {lualine_c = {require(&#39;auto-session-library&#39;).current_session_name}}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;1904&#34; alt=&#34;Screen Shot 2021-10-30 at 3 58 57 PM&#34; src=&#34;https://user-images.githubusercontent.com/2881382/139559478-8edefdb8-8254-42e7-a0f3-babd3dfd6ff2.png&#34;&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Config&lt;/th&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;log_level&lt;/td&gt; &#xA;   &lt;td&gt;&#39;debug&#39;, &#39;info&#39;, &#39;error&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;info&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Sets the log level of the plugin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_session_enable_last_session&lt;/td&gt; &#xA;   &lt;td&gt;false, true&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Loads the last loaded session if session for cwd does not exist&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_session_root_dir&lt;/td&gt; &#xA;   &lt;td&gt;&#34;/some/path/you/want&#34;&lt;/td&gt; &#xA;   &lt;td&gt;vim.fn.stdpath(&#39;data&#39;)..&#34;/sessions/&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Changes the root dir for sessions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_session_enabled&lt;/td&gt; &#xA;   &lt;td&gt;false, true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enables/disables the plugin&#39;s auto save &lt;em&gt;and&lt;/em&gt; restore features&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_session_create_enabled&lt;/td&gt; &#xA;   &lt;td&gt;false, true&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enables/disables the plugin&#39;s session auto creation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_save_enabled&lt;/td&gt; &#xA;   &lt;td&gt;false, true, nil&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;Enables/disables auto saving&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_restore_enabled&lt;/td&gt; &#xA;   &lt;td&gt;false, true, nil&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;Enables/disables auto restoring&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_session_suppress_dirs&lt;/td&gt; &#xA;   &lt;td&gt;[&#34;list&#34;, &#34;of paths&#34;]&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;Suppress session create/restore if in one of the list of dirs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_session_allowed_dirs&lt;/td&gt; &#xA;   &lt;td&gt;[&#34;list&#34;, &#34;of paths&#34;]&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;Allow session create/restore if in one of the list of dirs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;auto_session_use_git_branch&lt;/td&gt; &#xA;   &lt;td&gt;false, true, nil&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;Use the git branch to differentiate the session name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;auto_session_suppress_dirs&lt;/code&gt; and &lt;code&gt;auto_session_allowed_dirs&lt;/code&gt; support base paths with &lt;code&gt;*&lt;/code&gt; wildcard (e.g.: &lt;code&gt;/my/base/path/*&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Lua Only Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Config&lt;/th&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bypass_session_save_file_types&lt;/td&gt; &#xA;   &lt;td&gt;[&#34;list&#34;, &#34;of filetype names&#34;]&lt;/td&gt; &#xA;   &lt;td&gt;nil&lt;/td&gt; &#xA;   &lt;td&gt;Bypass session save if &lt;em&gt;only&lt;/em&gt; buffer open is of one of these filetypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Recommended sessionoptions config&lt;/h4&gt; &#xA;&lt;p&gt;For a better experience with the plugin overall using this config for &lt;code&gt;sessionoptions&lt;/code&gt; is recommended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Lua&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.o.sessionoptions=&#34;blank,buffers,curdir,folds,help,tabpages,winsize,winpos,terminal&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;VimL&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;set sessionoptions+=winpos,terminal,folds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; if you use &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&#39;s lazy loading feature, and you have the &lt;code&gt;options&lt;/code&gt; value in your &lt;code&gt;sessionoptions&lt;/code&gt; beware it might lead to weird behaviour with the lazy loading, especially around key-based lazy loading where keymaps are kept and thus the lazy loading mapping packer creates never gets set again.&lt;/p&gt; &#xA;&lt;h3&gt;Last Session&lt;/h3&gt; &#xA;&lt;p&gt;This optional feature enables the keeping track and loading of the last session. This loading of a last session happens only when a &lt;code&gt;RestoreSession&lt;/code&gt; could not find a session for the current dir. This feature can come in handy when starting Neovim from a GUI for example. &lt;span&gt;‚ö†&lt;/span&gt; This feature is still experimental and as of right now it interferes with the plugin&#39;s ability to auto create new sessions when opening Neovim in a new directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;auto-session&#39;).setup {&#xA;    auto_session_enable_last_session=true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; WARNING &lt;span&gt;‚ö†&lt;/span&gt; If the directory does not exist, default directory will be used and an error message will be printed.&lt;/p&gt; &#xA;&lt;h1&gt;üì¢ Commands&lt;/h1&gt; &#xA;&lt;p&gt;Auto Session exposes two commands that can be used or mapped to any keybindings for manually saving and restoring sessions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;:SaveSession &#34; saves or creates a session in the currently set `auto_session_root_dir`.&#xA;:SaveSession ~/my/custom/path &#34; saves or creates a session in the specified directory path.&#xA;:RestoreSession &#34; restores a previously saved session based on the `cwd`.&#xA;:RestoreSession ~/my/custom/path &#34; restores a previously saved session based on the provided path.&#xA;:RestoreSessionFromFile ~/session/path &#34; restores any currently saved session&#xA;:DeleteSession &#34; deletes a session in the currently set `auto_session_root_dir`.&#xA;:DeleteSession ~/my/custom/path &#34; deleetes a session based on the provided path.&#xA;:Autosession search&#xA;:Autosession delete&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;Autosession {delete|search}&lt;/code&gt; command to open a picker using &lt;code&gt;vim.ui.select&lt;/code&gt; this will allow you to either delete or search for a session to restore.&lt;/p&gt; &#xA;&lt;h2&gt;ü™ù Command Hooks&lt;/h2&gt; &#xA;&lt;h4&gt;Command hooks are a list of commands that get executed at different stages of the session management lifecycle.&lt;/h4&gt; &#xA;&lt;p&gt;Command hooks exist in the format: {hook_name}&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{pre_save}: executes &lt;em&gt;before&lt;/em&gt; a session is saved&lt;/li&gt; &#xA; &lt;li&gt;{post_save}: executes &lt;em&gt;after&lt;/em&gt; a session is saved&lt;/li&gt; &#xA; &lt;li&gt;{pre_restore}: executs &lt;em&gt;before&lt;/em&gt; a session is restored&lt;/li&gt; &#xA; &lt;li&gt;{post_restore}: executs &lt;em&gt;after&lt;/em&gt; a session is restored&lt;/li&gt; &#xA; &lt;li&gt;{pre_delete}: executs &lt;em&gt;before&lt;/em&gt; a session is deleted&lt;/li&gt; &#xA; &lt;li&gt;{post_delete}: executs &lt;em&gt;after&lt;/em&gt; a session is deleted&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Hooks are configured by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;let g:auto_session_{hook_name}_cmds = [&#34;{hook_command1}&#34;, &#34;{hook_command2}&#34;]&#xA;&#xA;&#34; or use lua&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;auto-session&#39;).setup {&#xA;    {hook_name}_cmds = {&#34;{hook_command1}&#34;, &#34;{hook_command2}&#34;}&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;hook_command&lt;/code&gt; is a valid command mode command. e.g. to close NERDTree before saving the session.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;let g:auto_session_pre_save_cmds = [&#34;tabdo NERDTreeClose&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hooks can also be lua functions For example to update the directory of the session in nvim-tree:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function restore_nvim_tree()&#xA;    local nvim_tree = require(&#39;nvim-tree&#39;)&#xA;    nvim_tree.change_dir(vim.fn.getcwd())&#xA;    nvim_tree.refresh()&#xA;end&#xA;&#xA;require(&#39;auto-session&#39;).setup {&#xA;    {hook_name}_cmds = {&#34;{vim_cmd_1}&#34;, restore_nvim_tree, &#34;{vim_cmd_2}&#34;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disabling the plugin&lt;/h2&gt; &#xA;&lt;p&gt;One might run into issues with Firenvim or another plugin and want to disable auto_session altogether based on some condition. For this example, as to not try and save sessions for Firenvim, we disable the plugin if the started_by_firenvim variable is set.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;if exists(&#39;g:started_by_firenvim&#39;)&#xA;  let g:auto_session_enabled = v:false&#xA;endif&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One can also disable the plugin by setting the &lt;code&gt;auto_session_enabled&lt;/code&gt; option to false at startup.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nvim &#34;+let g:auto_session_enabled = v:false&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöß Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;For troubleshooting refer to the &lt;a href=&#34;https://github.com/rmagatti/auto-session/wiki/Troubleshooting&#34;&gt;wiki page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üî≠ Session Lens&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rmagatti/session-lens&#34;&gt;Session Lens&lt;/a&gt; is a companion plugin to auto-session built on top of &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope.nvim&lt;/a&gt; for easy switching between existing sessions.&lt;/p&gt; &#xA;&lt;p&gt;See installation and usage instructions in the plugin&#39;s page.&lt;/p&gt; &#xA;&lt;h3&gt;Preview&lt;/h3&gt; &#xA;&lt;img src=&#34;https://github.com/rmagatti/readme-assets/raw/main/session-lens.gif&#34; width=&#34;1000&#34;&gt; &#xA;&lt;h1&gt;Compatibility&lt;/h1&gt; &#xA;&lt;p&gt;Neovim &amp;gt; 0.5&lt;/p&gt; &#xA;&lt;p&gt;Tested with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NVIM v0.5.0-dev+a1ec36f&#xA;Build type: Release&#xA;LuaJIT 2.1.0-beta3&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>