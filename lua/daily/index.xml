<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-21T01:39:35Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vigoux/azy.nvim</title>
    <updated>2022-09-21T01:39:35Z</updated>
    <id>tag:github.com,2022-09-21:/vigoux/azy.nvim</id>
    <link href="https://github.com/vigoux/azy.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple and fast fuzzy finder for neovim&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/39092278/190636426-0e94f07f-94a2-4226-90d8-425cfa0c38eb.gif&#34; alt=&#34;azy&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING: This plugin is meant to be used with neovim 0.8&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;azy.nvim&lt;/code&gt; fuzzy finder for &lt;code&gt;neovim&lt;/code&gt; based on &lt;code&gt;fzy&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This plugin provides a simple UI to select an item from a list.&lt;/p&gt; &#xA;&lt;p&gt;It has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast fuzzy matching: powered by &lt;a href=&#34;https://github.com/jhawthorn/fzy&#34;&gt;fzy&lt;/a&gt;, the search runs on multiple threads and allows for very fast search&lt;/li&gt; &#xA; &lt;li&gt;Both asynchronous and synchronous UIs: asynchronous UIs allow to incrementally add results to match against&lt;/li&gt; &#xA; &lt;li&gt;Lua / C mix: this plugin is very much an lua interface to &lt;a href=&#34;https://github.com/jhawthorn/fzy&#34;&gt;fzy&lt;/a&gt;, so the performance-critical parts are as fast as they could be.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can join us of &lt;a href=&#34;https://matrix.to/#/#azy.nvim:matrix.org&#34;&gt;the matrix room&lt;/a&gt; to ask any question or suggestion !&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;WARNING: this plugin will clash with &lt;a href=&#34;https://github.com/mfussenegger/nvim-fzy&#34;&gt;nvim-fzy&lt;/a&gt; so you need to only have one of these installed at a time&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;As this plugin requires the compilation of a small C library, you will have to have the following system dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;C&lt;/code&gt; compiler in your path, to compile the library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pkg-config&lt;/code&gt;, to search for the dependencies&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;luajit&lt;/code&gt; and it&#39;s headers (&lt;code&gt;libluajit-5.1-dev&lt;/code&gt; on Ubuntu), to link against it&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libpthread&lt;/code&gt; and it&#39;s headers (intalled by default on Ubuntu), that&#39;s a dependency to build &lt;code&gt;fzy&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using &lt;code&gt;packer.nvim&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;vigoux/azy.nvim&#39;, run = &#39;make lib&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You can configure &lt;code&gt;azy&lt;/code&gt; as any other plugin using the &lt;code&gt;azy.setup&lt;/code&gt; function. Note though that this is not required for this plugin to work, as it only configures the features of &lt;code&gt;azy&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;azy&#39;.setup {&#xA;  preview = false -- Whether to preview selected items on the fly (this is an unstable feature, feedback appreciated)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This plugin provides a bunch of builtin searchs. These builtin functions return a function suitable for &lt;code&gt;vim.keymap.set&lt;/code&gt; when called, so that one can do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;Leader&amp;gt;e&#34;, require&#39;azy.builtins&#39;.files(), {})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Examples of how to use the functions below can be found &lt;a href=&#34;https://github.com/vigoux/azy.nvim/wiki/Examples&#34;&gt;here&lt;/a&gt;. This is editable by everyone so feel free to add your lines there.&lt;/p&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;p&gt;In an &lt;code&gt;azy&lt;/code&gt; UI, you can do the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Down&amp;gt;&lt;/code&gt; moves the cursor to the next&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;Up&amp;gt;&lt;/code&gt; moves the cursor to the previous item&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; confirms the selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-V&amp;gt;&lt;/code&gt; confirm but open in a vertical split&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-H&amp;gt;&lt;/code&gt; confirm but open in a split&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; (only in normal mode) exists without confirm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Builtins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;azy.builtins.files(paths)&lt;/code&gt;: files under &lt;code&gt;paths&lt;/code&gt;. Respects both the local &lt;code&gt;.gitignore&lt;/code&gt; file and &lt;code&gt;.ignore&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azy.builtins.files_contents(paths)&lt;/code&gt;: contents of the files under &lt;code&gt;paths&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azy.builtins.help()&lt;/code&gt;: help tags, opens the selected tag on confirm&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azy.builtins.buffers()&lt;/code&gt;: opened buffers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azy.builtins.quickfix()&lt;/code&gt;: items in the quickfix list&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LSP-related&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;azy.builtins.lsp.references()&lt;/code&gt;: references to the symbol under the cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azy.builtins.lsp.document_symbol()&lt;/code&gt;: symbols in the current buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;azy.builtins.lsp.workspace_symbols()&lt;/code&gt;: symbols defined in the current workspace&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customizing&lt;/h2&gt; &#xA;&lt;p&gt;This plugin provides some highlight groups to customize its look:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AzyMatch&lt;/code&gt;: to highlight positions in the string that match the query&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AzyDim&lt;/code&gt;: for extra informations (dimmed)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AzyStandout&lt;/code&gt;: for extra informations (standout)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performances&lt;/h2&gt; &#xA;&lt;p&gt;I made this plugin so that I don&#39;t &lt;em&gt;feel&lt;/em&gt; any blocking when I am typing. This means that in some cases where the number of entries to search from is huge, you might encounter some performance problems.&lt;/p&gt; &#xA;&lt;p&gt;If that is the case, feel free to report an issue with the list of entries that caused the problem, and what you did when encountering the problem, and I&#39;ll be glad to look into it.&lt;/p&gt; &#xA;&lt;p&gt;Note though that on reasonably sized word lists, you should not encounter any problem.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore, using an asynchronous UI, as the results are incrementally sorted, one should not &lt;em&gt;feel&lt;/em&gt; any blocking point. For the record, using the asychronous UI, search in a directory with more than 300K does not lead to any blocking (any update takes less that 10ms).&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;This project can be considered my own version ov &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The goal of this plugin will be different than &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;. This plugin focuses on speed and non-intrusivness rather that configurability.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AckslD/nvim-FeMaco.lua</title>
    <updated>2022-09-21T01:39:35Z</updated>
    <id>tag:github.com,2022-09-21:/AckslD/nvim-FeMaco.lua</id>
    <link href="https://github.com/AckslD/nvim-FeMaco.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Catalyze your Fenced Markdown Code-block editing!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FeMaco&lt;/h1&gt; &#xA;&lt;p&gt;&lt;span&gt;‚ùó&lt;/span&gt; Originally this was written for only markdown code blocks. However this plugin now support any language injection in any language!&lt;/p&gt; &#xA;&lt;p&gt;Catalyze your &lt;strong&gt;Fe&lt;/strong&gt;nced &lt;strong&gt;Ma&lt;/strong&gt;rkdown &lt;strong&gt;Co&lt;/strong&gt;de-block editing!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23341710/182566777-492c5e81-95fc-4443-ae6a-23ba2519960e.png&#34; alt=&#34;FeMoco_cluster&#34;&gt; (based on &lt;a href=&#34;https://en.wikipedia.org/wiki/FeMoco#/media/File:FeMoco_cluster.svg&#34;&gt;this&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;A small plugin allowing to edit injected language trees with correct filetype in a floating window. This allows you to use all of your config for your favorite language. The buffer will be also linked to a temporary file in order to allow LSPs to work properly.&lt;/p&gt; &#xA;&lt;p&gt;Powered by treesitter, lua and coffee.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/23341710/182567238-e1f7bbcc-1f0c-43de-b17d-9d5576aba873.mp4&#34;&gt;https://user-images.githubusercontent.com/23341710/182567238-e1f7bbcc-1f0c-43de-b17d-9d5576aba873.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For example using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;AckslD/nvim-FeMaco.lua&#39;,&#xA;  config = &#39;require(&#34;femaco&#34;).setup()&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;&lt;code&gt;nvim-treesitter&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Pass a dictionary into &lt;code&gt;require(&#34;femaco&#34;).setup()&lt;/code&gt; with callback functions. These are the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;femaco&#39;).setup({&#xA;  -- should prepare a new buffer and return the winid&#xA;  -- by default opens a floating window&#xA;  -- provide a different callback to change this behaviour&#xA;  -- @param opts: the return value from float_opts&#xA;  prepare_buffer = function(opts)&#xA;    local buf = vim.api.nvim_create_buf(false, false)&#xA;    return vim.api.nvim_open_win(buf, true, opts)&#xA;  end,&#xA;  -- should return options passed to nvim_open_win&#xA;  -- @param code_block: data about the code-block with the keys&#xA;  --   * range&#xA;  --   * lines&#xA;  --   * lang&#xA;  float_opts = function(code_block)&#xA;    return {&#xA;      relative = &#39;cursor&#39;,&#xA;      width = clip_val(5, 120, vim.api.nvim_win_get_width(0) - 10),  -- TODO how to offset sign column etc?&#xA;      height = clip_val(5, #code_block.lines, vim.api.nvim_win_get_height(0) - 6),&#xA;      anchor = &#39;NW&#39;,&#xA;      row = 0,&#xA;      col = 0,&#xA;      style = &#39;minimal&#39;,&#xA;      border = &#39;rounded&#39;,&#xA;      zindex = 1,&#xA;    }&#xA;  end,&#xA;  -- return filetype to use for a given lang&#xA;  -- lang can be nil&#xA;  ft_from_lang = function(lang)&#xA;    return lang&#xA;  end,&#xA;  -- what to do after opening the float&#xA;  post_open_float = function(winnr)&#xA;    vim.wo.signcolumn = &#39;no&#39;&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Call &lt;code&gt;:FeMaco&lt;/code&gt; or &lt;code&gt;require(&#39;femaco.edit&#39;).edit_code_block()&lt;/code&gt; with your cursor on a code-block. Edit the content, then save and/or close the popup to update the original buffer.&lt;/p&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to everyone working on neovim core, lua-api, treesitter etc which have made plugins like these a joy to create!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gennaro-tedesco/nvim-peekup</title>
    <updated>2022-09-21T01:39:35Z</updated>
    <id>tag:github.com,2022-09-21:/gennaro-tedesco/nvim-peekup</id>
    <link href="https://github.com/gennaro-tedesco/nvim-peekup" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üëÄ dynamically interact with vim registers&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;img width=&#34;300&#34; height=&#34;300&#34; src=&#34;https://user-images.githubusercontent.com/15387611/189754366-359af924-48c8-4f58-8d21-589d5e5c2276.png&#34;&gt; &lt;br&gt; nvim-peekup &lt;br&gt; &lt;/h1&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt; &lt;img alt=&#34;PR&#34; src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat&#34;&gt; &lt;img alt=&#34;Lua&#34; src=&#34;https://img.shields.io/badge/lua-%232C2D72.svg?&amp;amp;style=flat&amp;amp;logo=lua&amp;amp;logoColor=white&#34;&gt; &lt;a href=&#34;https://github.com/gennaro-tedesco/nvim-peekup/releases&#34;&gt; &lt;img alt=&#34;releases&#34; src=&#34;https://img.shields.io/github/release/gennaro-tedesco/nvim-peekup&#34;&gt; &lt;/a&gt; &lt;/h2&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;neovim registers made easy!&lt;/h4&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gennaro-tedesco/nvim-peekup/master/#Installation&#34;&gt;Installation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/gennaro-tedesco/nvim-peekup/master/#Usage&#34;&gt;Usage&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/gennaro-tedesco/nvim-peekup/master/#Features-in-short&#34;&gt;Features in short&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/gennaro-tedesco/nvim-peekup/master/#Customisation&#34;&gt;Customisation&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://raw.githubusercontent.com/gennaro-tedesco/nvim-peekup/master/#Feedback&#34;&gt;Feedback&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p&gt;Finally vim registers made easy and fun! No more headaches with cumbersome keystrokes &lt;code&gt;&#34;&amp;lt;register&amp;gt;p&lt;/code&gt;, no more forgetting where the yanked text is: peek into the vim registers in floating window and pick up the text you want with &lt;code&gt;nvim-peekup&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/15387611/189754642-323b574f-433f-439a-9bcb-2f20fe0bc0c3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install it using your favourite plugin manager; for instance if you are using vim-plug&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;gennaro-tedesco/nvim-peekup&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Open the peekup window with the default keymapping &lt;code&gt;&#34;&#34;&lt;/code&gt;. Scroll and browse the list of registers ordered by type and select the register you want by simply pressing the corresponding character (letter or number, no need to prepend &lt;code&gt;&#34;&lt;/code&gt;): you receive visual confirmation for your choice and the text is copied into the default register. The peekup window automatically closes and you can now easily put (&lt;code&gt;p&lt;/code&gt;) your yanked text anywhere you want.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; to manually close the window otherwise (the peekup window closes automatically also when changing windows focus).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/15387611/113494882-03645880-94ed-11eb-90f5-1beeeeeee09a.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Default commands&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;open peekup window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;close peekup window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;any character&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;select and copy text from the corresponding &#34; register&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;scroll the list up and down&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;Up&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Down&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;move to next registers type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&#34;x&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;empty all registers (outside the peekup window)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Notice that since characters keystrokes copy the text from the corresponding register, the peekup window does not obey the standard vim motion commands. Arrow keys move among registers sections (they can also use the corresponding marks &lt;code&gt;&#39;n, &#39;l, &#39;s&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;To change default mapping to open the peekup window simply specify the right hand side of&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let g:peekup_open = &#39;&amp;lt;leader&amp;gt;&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to directly paste before or after the current cursor position (without having to issue &lt;code&gt;p&lt;/code&gt; after the selection) simply specify values for the options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let g:peekup_paste_before = &#39;&amp;lt;leader&amp;gt;P&#39;&#xA;let g:peekup_paste_after = &#39;&amp;lt;leader&amp;gt;p&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exposed interfaces&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;option&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;method&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;g:peekup_open&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;PeekupOpen&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;open peekup window and interact&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;g:peekup_paste_before&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;PeekupPasteBefore&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;directly paste before cursor upon selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;g:peekup_paste_after&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;PeekupPasteAfter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;directly paste after cursor upon selection&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;g:peekup_empty_registers&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;PeekupEmptyRegisters&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;clear all registers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;see also &lt;code&gt;:help peekup-usage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features in short&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;peekup floating window with registers content&lt;/li&gt; &#xA; &lt;li&gt;visual confirmation of selected text&lt;/li&gt; &#xA; &lt;li&gt;peekup closes automatically, put (&lt;code&gt;p&lt;/code&gt;) the yanked text anywhere&lt;/li&gt; &#xA; &lt;li&gt;keymap to empty all registers&lt;/li&gt; &#xA; &lt;li&gt;fully customisable layout and behaviour&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Customisation&lt;/h2&gt; &#xA;&lt;p&gt;The look and the behaviour of the registers floating window is fully customisable. In order to do so simply override the &lt;a href=&#34;https://github.com/gennaro-tedesco/nvim-peekup/raw/master/lua/nvim-peekup/config.lua&#34;&gt;dictionary configuration entries&lt;/a&gt; specifying the below in your nvim configurations (init.vim or any other option file being sourced at start-up), say&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34; geometry configuration&#xA;lua require(&#39;nvim-peekup.config&#39;).geometry[&#34;height&#34;] = 0.8&#xA;lua require(&#39;nvim-peekup.config&#39;).geometry[&#34;title&#34;] = &#39;An awesome window title&#39;&#xA;lua require(&#39;nvim-peekup.config&#39;).geometry[&#34;wrap&#34;] = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are to be expressed as ratios of the entire window size, therefore 0 &amp;lt; x &amp;lt; 1.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34; behaviour of the peekup window on keystroke&#xA;lua require(&#39;nvim-peekup.config&#39;).on_keystroke[&#34;delay&#34;] = &#39;300ms&#39;&#xA;lua require(&#39;nvim-peekup.config&#39;).on_keystroke[&#34;autoclose&#34;] = false&#xA;lua require(&#39;nvim-peekup.config&#39;).on_keystroke[&#34;paste_reg&#34;] = &#39;&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;delay&lt;/code&gt; expresses the delay before the peekup window closes automatically, after selecting the register. Obviously, &lt;code&gt;autoclose&lt;/code&gt; set to false prevents such behaviour (and the user must close the window manually). &lt;code&gt;delay&lt;/code&gt; can be set to the empty string to not delay at all, i.e.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lua require(&#39;nvim-peekup.config&#39;).on_keystroke[&#34;delay&#34;] = &#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The selected paste goes into the default register &lt;code&gt;*&lt;/code&gt;: change accordingly if needed.&lt;/p&gt; &#xA;&lt;h2&gt;Help tags&lt;/h2&gt; &#xA;&lt;p&gt;Access the documentation with &lt;code&gt;:h nvim-peekup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Unit tests&lt;/h2&gt; &#xA;&lt;p&gt;We make use of the busted framework for unit tests; run them with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;busted -C lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you find this plugin useful consider awarding it a ‚≠ê, it is a great way to give feedback! Otherwise, any additional suggestions or merge request is warmly welcome!&lt;/p&gt; &#xA;&lt;p&gt;This plugin was inspired by &lt;a href=&#34;https://github.com/junegunn/vim-peekaboo&#34;&gt;vim-peekaboo&lt;/a&gt;, which in addition also allows to paste in insert mode. However, &lt;code&gt;nvim-peekup&lt;/code&gt; offers a fresh interactive and visual experience with registers and, not that it matters, is in average more than 4 times faster at start-up:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nvim --startuptime start.log -c quit &amp;amp;&amp;amp; grep &#34;peekup|peekaboo&#34; start.log&#xA;elapsed&#xA;000.051  000.051: sourcing ~/.config/nvim/plugged/nvim-peekup/plugin/nvim-peekup.vim&#xA;000.212  000.212: sourcing ~/.config/nvim/plugged/vim-peekaboo/plugin/peekaboo.vim&#xA;000.195  000.195: sourcing ~/.config/nvim/plugged/vim-peekaboo/autoload/peekaboo.vim&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>