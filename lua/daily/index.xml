<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-07T01:35:33Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rohKane/progressbar</title>
    <updated>2024-01-07T01:35:33Z</updated>
    <id>tag:github.com,2024-01-07:/rohKane/progressbar</id>
    <link href="https://github.com/rohKane/progressbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;QBCore Progressbar edited by me and inspired by NoPixel 4.0.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;This is QBCore Progressbar edited by me and inspired by NoPixel 4.0.&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/rohKane/progressbar/assets/47999933/93ffa56f-215e-4138-a667-ae3be2de6aab&#34; alt=&#34;Screenshot 2024-01-06 175641&#34;&gt; &lt;img src=&#34;https://github.com/rohKane/progressbar/assets/47999933/bb656b22-017a-411a-bb7a-6196fab0844a&#34; alt=&#34;Screenshot 2024-01-06 174953&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Progressbar&lt;/h1&gt; &#xA;&lt;p&gt;Dependency for creating progressbars in QB-Core.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;QB-Core Functions&lt;/h2&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;QBCore.Functions.Progressbar(&lt;strong&gt;name&lt;/strong&gt;: string, &lt;strong&gt;label&lt;/strong&gt;: string, &lt;strong&gt;duration&lt;/strong&gt;: number, &lt;strong&gt;useWhileDead&lt;/strong&gt;: boolean, &lt;strong&gt;canCancel&lt;/strong&gt;: boolean, &lt;strong&gt;disableControls&lt;/strong&gt;: table, &lt;strong&gt;animation&lt;/strong&gt;: table, &lt;strong&gt;prop&lt;/strong&gt;: table, &lt;strong&gt;propTwo&lt;/strong&gt;: table, &lt;strong&gt;onFinish&lt;/strong&gt;: function, &lt;strong&gt;onCancel&lt;/strong&gt;: function) &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Create a new progressbar from the built in qb-core functions.&lt;br&gt; &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;QBCore.Functions.Progressbar(&#34;random_task&#34;, &#34;Doing something&#34;, 5000, false, true, {&#xA;   disableMovement = false,&#xA;   disableCarMovement = false,&#xA;   disableMouse = false,&#xA;   disableCombat = true,&#xA;}, {&#xA;   animDict = &#34;mp_suicide&#34;,&#xA;   anim = &#34;pill&#34;,&#xA;   flags = 49,&#xA;}, {}, {}, function()&#xA;   -- Done&#xA;end, function()&#xA;   -- Cancel&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exports&lt;/h2&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Progress(&lt;strong&gt;data&lt;/strong&gt;: string, &lt;strong&gt;handler&lt;/strong&gt;: function)&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Creates a new progress bar directly from the export, always use the built in qb-core function if possible.&lt;br&gt; &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;exports[&#39;progressbar&#39;]:Progress({&#xA;   name = &#34;random_task&#34;,&#xA;   duration = 5000,&#xA;   label = &#34;Doing something&#34;,&#xA;   useWhileDead = false,&#xA;   canCancel = true,&#xA;   controlDisables = {&#xA;       disableMovement = false,&#xA;       disableCarMovement = false,&#xA;       disableMouse = false,&#xA;       disableCombat = true,&#xA;   },&#xA;   animation = {&#xA;       animDict = &#34;mp_suicide&#34;,&#xA;       anim = &#34;pill&#34;,&#xA;       flags = 49,&#xA;   },&#xA;   prop = {},&#xA;   propTwo = {}&#xA;}, function(cancelled)&#xA;   if not cancelled then&#xA;       -- finished&#xA;   else&#xA;       -- cancelled&#xA;   end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Props Example:&lt;/strong&gt;&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;exports[&#39;progressbar&#39;]:Progress({&#xA;   name = &#34;random_task&#34;,&#xA;   duration = 5000,&#xA;   label = &#34;Doing something&#34;,&#xA;   useWhileDead = false,&#xA;   canCancel = true,&#xA;   controlDisables = {&#xA;       disableMovement = false,&#xA;       disableCarMovement = false,&#xA;       disableMouse = false,&#xA;       disableCombat = true,&#xA;   },&#xA;   animation = {&#xA;       animDict = &#34;missheistdockssetup1clipboard@base&#34;,&#xA;       anim = &#34;pill&#34;,&#xA;       flags = 49,&#xA;   },&#xA;   prop = {&#xA;     model = &#39;prop_notepad_01&#39;,&#xA;     bone = 18905,&#xA;     coords = vec3(0.1, 0.02, 0.05),&#xA;     rotation = vec3(10.0, 0.0, 0.0),&#xA;   },&#xA;   propTwo = {&#xA;     model = &#39;prop_pencil_01&#39;,&#xA;     bone = 58866,&#xA;     coords = vec3(0.11, -0.02, 0.001),&#xA;     rotation = vec3(-120.0, 0.0, 0.0),&#xA;   }&#xA;}, function(cancelled)&#xA;   if not cancelled then&#xA;       -- finished&#xA;   else&#xA;       -- cancelled&#xA;   end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;isDoingSomething()&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Returns a boolean (true/false) depending on if a progressbar is present.&lt;br&gt; &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;     &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local busy = exports[&#34;progressbar&#34;]:isDoingSomething()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;ProgressWithStartEvent(&lt;strong&gt;data&lt;/strong&gt;: table, &lt;strong&gt;start&lt;/strong&gt;: function, &lt;strong&gt;finish&lt;/strong&gt;: function)&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Works like a normal progressbar, the data parameter should be the same as the data passed into the &lt;code&gt;Progress&lt;/code&gt; export above.&lt;br&gt; The start function gets triggered upon the start of the progressbar.&lt;br&gt; The finish handler is the same as the &lt;code&gt;handler&lt;/code&gt; parameter in the &lt;code&gt;Progress&lt;/code&gt; export above.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;ProgressWithTickEvent(&lt;strong&gt;data&lt;/strong&gt;: table, &lt;strong&gt;tick&lt;/strong&gt;: function, &lt;strong&gt;finish&lt;/strong&gt;: function)&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Works like a normal progressbar, the data parameter should be the same as the data passed into the &lt;code&gt;Progress&lt;/code&gt; export above.&lt;br&gt; The tick function gets triggered every frame while the progressbar is active.&lt;br&gt; The finish handler is the same as the &lt;code&gt;handler&lt;/code&gt; parameter in the &lt;code&gt;Progress&lt;/code&gt; export above.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;ProgressWithTickEvent(&lt;strong&gt;data&lt;/strong&gt;: table, &lt;strong&gt;start&lt;/strong&gt;: function, &lt;strong&gt;tick&lt;/strong&gt;: function, &lt;strong&gt;finish&lt;/strong&gt;: function)&lt;/p&gt; &#xA;    &lt;blockquote&gt; &#xA;     &lt;p&gt;Works like a normal progressbar, the data parameter should be the same as the data passed into the &lt;code&gt;Progress&lt;/code&gt; export above.&lt;br&gt; The start function gets triggered upon the start of the progressbar.&lt;br&gt; The tick function gets triggered every frame while the progressbar is active.&lt;br&gt; The finish handler is the same as the &lt;code&gt;handler&lt;/code&gt; parameter in the &lt;code&gt;Progress&lt;/code&gt; export above.&lt;/p&gt; &#xA;    &lt;/blockquote&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>zk-org/zk-nvim</title>
    <updated>2024-01-07T01:35:33Z</updated>
    <id>tag:github.com,2024-01-07:/zk-org/zk-nvim</id>
    <link href="https://github.com/zk-org/zk-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim extension for zk&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;zk-nvim&lt;/h1&gt; &#xA;&lt;p&gt;Neovim extension for the &lt;a href=&#34;https://github.com/zk-org/zk&#34;&gt;&lt;code&gt;zk&lt;/code&gt;&lt;/a&gt; plain text note-taking assistant.&lt;/p&gt; &#xA;&lt;h2&gt;News: We Are In Maintenance Mode&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] As of January 2nd, the original brain behind zk, &lt;a href=&#34;https://github.com/mickael-menu&#34;&gt;MickaÃ«l Menu&lt;/a&gt;, made the difficult decision to retire from zk and the suite of programs supporting it. He put out a &lt;a href=&#34;https://github.com/zk-org/zk/discussions/371&#34;&gt;call for maintainers&lt;/a&gt;, which has garnerned enough response to enable the project to continue! So zk is definitely still here for you. E.g., &lt;a href=&#34;https://github.com/kabouzeid&#34;&gt;kabouzeid&lt;/a&gt; who conceived the &lt;code&gt;zk-nvim&lt;/code&gt; plugin has signed up as a maintainer too, which is excellent!&lt;/p&gt; &#xA; &lt;p&gt;During this transition phase, we are placing the project into a maintenance mode, which means we are going to address existing issues and any teething problems with transferring the code bases to the new &lt;a href=&#34;https://github.com/zk-org&#34;&gt;zk-org&lt;/a&gt; organisation, which is where you can now find all the related projects. It also gives us new maintainers the space to get up to speed with the code base, which will help us address new issues and feature requests when they come.&lt;/p&gt; &#xA; &lt;p&gt;So for now, feel free to lodge new issues, but please withold on feature requests until we are out of maintenance mode. This will help keep our issues boards concise and pr&#39;s easier to manage.&lt;/p&gt; &#xA; &lt;p&gt;The &lt;a href=&#34;https://github.com/zk-org/zk/discussions/371&#34;&gt;call to maintainers&lt;/a&gt; is still open. Please comment there if you feel commited enough to come onboard! PR&#39;s, ideas, discussions and conversations are still and always will be warmly welcomed, with or without &#39;maintainer&#39; status â¤ï¸&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;code&gt;zk-nvim&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;code&gt;zk&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Neovim&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;latest&lt;/td&gt; &#xA;   &lt;td&gt;0.13.0&lt;/td&gt; &#xA;   &lt;td&gt;0.8.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Via &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use(&#34;zk-org/zk-nvim&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Via &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;Plug &#39;zk-org/zk-nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Via &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;zk-org/zk-nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;zk&#34;).setup({&#xA;      -- See Setup section below&#xA;    })&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the best experience, it&#39;s recommended to also install either &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt; or &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This plugin will setup and start the LSP server for you, do &lt;em&gt;not&lt;/em&gt; call &lt;code&gt;require(&#34;lspconfig&#34;).zk.setup()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;zk&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;The default configuration&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;zk&#34;).setup({&#xA;  -- can be &#34;telescope&#34;, &#34;fzf&#34;, &#34;fzf_lua&#34; or &#34;select&#34; (`vim.ui.select`)&#xA;  -- it&#39;s recommended to use &#34;telescope&#34;, &#34;fzf&#34; or &#34;fzf_lua&#34;&#xA;  picker = &#34;select&#34;,&#xA;&#xA;  lsp = {&#xA;    -- `config` is passed to `vim.lsp.start_client(config)`&#xA;    config = {&#xA;      cmd = { &#34;zk&#34;, &#34;lsp&#34; },&#xA;      name = &#34;zk&#34;,&#xA;      -- on_attach = ...&#xA;      -- etc, see `:h vim.lsp.start_client()`&#xA;    },&#xA;&#xA;    -- automatically attach buffers in a zk notebook that match the given filetypes&#xA;    auto_attach = {&#xA;      enabled = true,&#xA;      filetypes = { &#34;markdown&#34; },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;setup&lt;/code&gt; function will not add any key mappings for you. If you want to add key mappings, see the &lt;a href=&#34;https://raw.githubusercontent.com/zk-org/zk-nvim/main/#example-mappings&#34;&gt;example mappings&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Notebook Directory Discovery&lt;/h3&gt; &#xA;&lt;p&gt;When you run a notebook command, this plugin will look for a notebook in the following places and order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;the current buffer path (i.e. the file you are currently editing),&lt;/li&gt; &#xA; &lt;li&gt;the current working directory,&lt;/li&gt; &#xA; &lt;li&gt;the &lt;code&gt;$ZK_NOTEBOOK_DIR&lt;/code&gt; environment variable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We recommend you to export the &lt;code&gt;$ZK_NOTEBOOK_DIR&lt;/code&gt; environment variable, so that a notebook can always be found.&lt;/p&gt; &#xA;&lt;p&gt;It is worth noting that for some notebook commands you can explicitly specify a notebook by providing a path to any file or directory within the notebook. An explicitly provided path will always take precedence and override the automatic notebook discovery. However, this is always optional, and usually not necessary.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;After you have installed the plugin and added the setup code to your config, you are good to go. If you are not familiar with &lt;code&gt;zk&lt;/code&gt;, we recommend you to also read the &lt;a href=&#34;https://github.com/zk-org/zk/tree/main/docs&#34;&gt;&lt;code&gt;zk&lt;/code&gt; docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When using the default config, the &lt;code&gt;zk&lt;/code&gt; LSP client will automatically attach itself to buffers inside your notebook and provide capabilities like completion, hover and go-to-definition; see &lt;a href=&#34;https://github.com/zk-org/zk/issues/22&#34;&gt;https://github.com/zk-org/zk/issues/22&lt;/a&gt; for a full list of what is supported.&lt;/p&gt; &#xA;&lt;p&gt;Try out different &lt;a href=&#34;https://raw.githubusercontent.com/zk-org/zk-nvim/main/#built-in-commands&#34;&gt;commands&lt;/a&gt; such as &lt;code&gt;:ZkNotes&lt;/code&gt; or &lt;code&gt;:ZkNew&lt;/code&gt;, see what they can do, and learn as you go.&lt;/p&gt; &#xA;&lt;h2&gt;Built-in Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Indexes the notebook&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zkindex&#xA;:ZkIndex [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Creates and edits a new note&#xA;&#34;&#xA;&#34; Use the `inline = true` option to insert the content of the created note at the caret position, instead of writing the note on the file system.&#xA;&#34;&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zknew&#xA;:ZkNew [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Creates a new note and uses the last visual selection as the title while replacing the selection with a link to the new note&#xA;&#34;&#xA;&#34; Use the `inline = true` option to replace the selection with the content of the created note, instead of writing the note on the file system.&#xA;&#34;&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zknew&#xA;:&#39;&amp;lt;,&#39;&amp;gt;ZkNewFromTitleSelection [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Creates a new note and uses the last visual selection as the content while replacing the selection with a link to the new note&#xA;&#34;&#xA;&#34; Use the `inline = true` option to replace the selection with the content of the created note, instead of writing the note on the file system.&#xA;&#34;&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zknew&#xA;:&#39;&amp;lt;,&#39;&amp;gt;ZkNewFromContentSelection [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; cd into the notebook root&#xA;&#34; params&#xA;&#34;   (optional) additional options&#xA;:ZkCd [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Opens a notes picker&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zklist&#xA;:ZkNotes [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Opens a notes picker for the backlinks of the current buffer&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zklist&#xA;:ZkBacklinks [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Opens a notes picker for the outbound links of the current buffer&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zklist&#xA;:ZkLinks [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Inserts a link at the cursor location or around the selected text.&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zklist&#xA;&#34;   One additional option is `matchSelected` (boolean) which is only applicable to inserting a link around selected text. If `true`, the note picker will search for notes similar to the selected text. Otherwise, the note picker will load all notes to filter through.&#xA;&#34;    e.g. :&#39;&amp;lt;&#39;&amp;gt;ZkInsertLinkAtSelection {matchSelected = true}&#xA;:ZkInsertLink &#xA;:&#39;&amp;lt;,&#39;&amp;gt;ZkInsertLinkAtSelection [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Opens a notes picker, filters for notes that match the text in the last visual selection&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zklist&#xA;:&#39;&amp;lt;,&#39;&amp;gt;ZkMatch [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Opens a notes picker, filters for notes with the selected tags&#xA;&#34; params&#xA;&#34;   (optional) additional options, see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zktaglist&#xA;:ZkTags [{options}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; parameter can be any valid &lt;em&gt;Lua&lt;/em&gt; expression that evaluates to a table. For a list of available options, refer to the &lt;a href=&#34;https://github.com/zk-org/zk/raw/main/docs/editors-integration.md#custom-commands&#34;&gt;&lt;code&gt;zk&lt;/code&gt; docs&lt;/a&gt;. In addition, &lt;code&gt;options.notebook_path&lt;/code&gt; can be used to explicitly specify a notebook by providing a path to any file or directory within the notebook; see &lt;a href=&#34;https://raw.githubusercontent.com/zk-org/zk-nvim/main/#notebook-directory-discovery&#34;&gt;Notebook Directory Discovery&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:ZkNew { dir = &#34;daily&#34;, date = &#34;yesterday&#34; }&#xA;:ZkNotes { createdAfter = &#34;3 days ago&#34;, tags = { &#34;work&#34; } }&#xA;:&#39;&amp;lt;,&#39;&amp;gt;ZkNewFromTitleSelection &#34; this will use your last visual mode selection. Note that you *must* call this command with the &#39;&amp;lt;,&#39;&amp;gt; range.&#xA;:ZkCd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Via Lua&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can access the underlying Lua function of a command, with &lt;code&gt;require(&#34;zk.commands&#34;).get&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Examples:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;zk.commands&#34;).get(&#34;ZkNew&#34;)({ dir = &#34;daily&#34; })&#xA;require(&#34;zk.commands&#34;).get(&#34;ZkNotes&#34;)({ createdAfter = &#34;3 days ago&#34;, tags = { &#34;work&#34; } })&#xA;require(&#34;zk.commands&#34;).get(&#34;ZkNewFromTitleSelection&#34;)()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---A thin wrapper around `vim.api.nvim_add_user_command` which parses the `params.args` of the command as a Lua table and passes it on to `fn`.&#xA;---@param name string&#xA;---@param fn function&#xA;---@param opts? table {needs_selection} makes sure the command is called with a range&#xA;---@see vim.api.nvim_add_user_command&#xA;require(&#34;zk.commands&#34;).add(name, fn, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Example 1:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Let us add a custom &lt;code&gt;:ZkOrphans&lt;/code&gt; command that will list all notes that are orphans, i.e. not referenced by any other note.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local zk = require(&#34;zk&#34;)&#xA;local commands = require(&#34;zk.commands&#34;)&#xA;&#xA;commands.add(&#34;ZkOrphans&#34;, function(options)&#xA;  options = vim.tbl_extend(&#34;force&#34;, { orphan = true }, options or {})&#xA;  zk.edit(options, { title = &#34;Zk Orphans&#34; })&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This adds the &lt;code&gt;:ZkOrphans [{options}]&lt;/code&gt; vim user command, which accepts an &lt;code&gt;options&lt;/code&gt; Lua table as an argument. We can execute it like this &lt;code&gt;:ZkOrphans { tags = { &#34;work&#34; } }&lt;/code&gt; for example.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: The &lt;code&gt;zk.edit&lt;/code&gt; function is from the &lt;a href=&#34;https://raw.githubusercontent.com/zk-org/zk-nvim/main/#high-level-api&#34;&gt;high-level API&lt;/a&gt;, which also contains other functions that might be useful for your custom commands.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;Example 2:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chances are that this will not be our only custom command following this pattern. So let&#39;s also add a &lt;code&gt;:ZkRecents&lt;/code&gt; command and make the pattern a bit more reusable.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local zk = require(&#34;zk&#34;)&#xA;local commands = require(&#34;zk.commands&#34;)&#xA;&#xA;local function make_edit_fn(defaults, picker_options)&#xA;  return function(options)&#xA;    options = vim.tbl_extend(&#34;force&#34;, defaults, options or {})&#xA;    zk.edit(options, picker_options)&#xA;  end&#xA;end&#xA;&#xA;commands.add(&#34;ZkOrphans&#34;, make_edit_fn({ orphan = true }, { title = &#34;Zk Orphans&#34; }))&#xA;commands.add(&#34;ZkRecents&#34;, make_edit_fn({ createdAfter = &#34;2 weeks ago&#34; }, { title = &#34;Zk Recents&#34; }))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;High-level API&lt;/h2&gt; &#xA;&lt;p&gt;The high-level API is inspired by the commands provided by the &lt;code&gt;zk&lt;/code&gt; CLI tool; see &lt;code&gt;zk --help&lt;/code&gt;. It&#39;s mainly used for the implementation of built-in and custom commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Cd into the notebook root&#xA;--&#xA;---@param options? table&#xA;require(&#34;zk&#34;).cd(options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Creates and edits a new note&#xA;--&#xA;---@param options? table additional options&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zknew&#xA;require(&#34;zk&#34;).new(options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Indexes the notebook&#xA;--&#xA;---@param options? table additional options&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zkindex&#xA;require(&#34;zk&#34;).index(options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Opens a notes picker, and calls the callback with the selection&#xA;--&#xA;---@param options? table additional options&#xA;---@param picker_options? table options for the picker&#xA;---@param cb function&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zklist&#xA;---@see zk.ui.pick_notes&#xA;require(&#34;zk&#34;).pick_notes(options, picker_options, cb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Opens a tags picker, and calls the callback with the selection&#xA;--&#xA;---@param options? table additional options&#xA;---@param picker_options? table options for the picker&#xA;---@param cb function&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zktaglist&#xA;---@see zk.ui.pick_tags&#xA;require(&#34;zk&#34;).pick_tags(options, picker_options, cb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Opens a notes picker, and edits the selected notes&#xA;--&#xA;---@param options? table additional options&#xA;---@param picker_options? table options for the picker&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zklist&#xA;---@see zk.ui.pick_notes&#xA;require(&#34;zk&#34;).edit(options, picker_options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;The functions in the API module give you maximum flexibility and provide only a thin Lua friendly layer around &lt;code&gt;zk&lt;/code&gt;&#39;s LSP API. You can use it to write your own specialized functions for interacting with &lt;code&gt;zk&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@param path? string path to explicitly specify the notebook&#xA;---@param options? table additional options&#xA;---@param cb function callback function&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zkindex&#xA;require(&#34;zk.api&#34;).index(path, options, function(err, stats)&#xA;  -- do something with the stats&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@param path? string path to explicitly specify the notebook&#xA;---@param options? table additional options&#xA;---@param cb function callback function&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zknew&#xA;require(&#34;zk.api&#34;).new(path, options, function(err, res)&#xA;  file_path = res.path&#xA;  -- do something with the new file path&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@param path? string path to explicitly specify the notebook&#xA;---@param options table additional options&#xA;---@param cb function callback function&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zklist&#xA;require(&#34;zk.api&#34;).list(path, options, function(err, notes)&#xA;  -- do something with the notes&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---@param path? string path to explicitly specify the notebook&#xA;---@param options? table additional options&#xA;---@param cb function callback function&#xA;---@see https://github.com/zk-org/zk/blob/main/docs/editors-integration.md#zktaglist&#xA;require(&#34;zk.api&#34;).tag.list(path, options, function(err, tags)&#xA;  -- do something with the tags&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pickers&lt;/h2&gt; &#xA;&lt;p&gt;Used by the &lt;a href=&#34;https://raw.githubusercontent.com/zk-org/zk-nvim/main/#high-level-api&#34;&gt;high-level API&lt;/a&gt; to display the results of the &lt;a href=&#34;https://raw.githubusercontent.com/zk-org/zk-nvim/main/#api&#34;&gt;API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Opens a notes picker&#xA;--&#xA;---@param notes list&#xA;---@param options? table containing {picker}, {title}, {multi_select} keys&#xA;---@param cb function&#xA;require(&#34;zk.ui&#34;).pick_notes(notes, options, cb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---Opens a tags picker&#xA;--&#xA;---@param tags list&#xA;---@param options? table containing {picker}, {title}, {multi_select} keys&#xA;---@param cb function&#xA;require(&#34;zk.ui&#34;).pick_tags(tags, options, cb)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;---To be used in zk.api.list as the `selection` in the additional options table&#xA;--&#xA;---@param options table the same options that are use for pick_notes&#xA;---@return table api selection&#xA;require(&#34;zk.ui&#34;).get_pick_notes_list_api_selection(options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example Mappings&lt;/h2&gt; &#xA;&lt;p&gt;Add these global mappings in your main Neovim config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local opts = { noremap=true, silent=false }&#xA;&#xA;-- Create a new note after asking for its title.&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;zn&#34;, &#34;&amp;lt;Cmd&amp;gt;ZkNew { title = vim.fn.input(&#39;Title: &#39;) }&amp;lt;CR&amp;gt;&#34;, opts)&#xA;&#xA;-- Open notes.&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;zo&#34;, &#34;&amp;lt;Cmd&amp;gt;ZkNotes { sort = { &#39;modified&#39; } }&amp;lt;CR&amp;gt;&#34;, opts)&#xA;-- Open notes associated with the selected tags.&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;zt&#34;, &#34;&amp;lt;Cmd&amp;gt;ZkTags&amp;lt;CR&amp;gt;&#34;, opts)&#xA;&#xA;-- Search for the notes matching a given query.&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;zf&#34;, &#34;&amp;lt;Cmd&amp;gt;ZkNotes { sort = { &#39;modified&#39; }, match = { vim.fn.input(&#39;Search: &#39;) } }&amp;lt;CR&amp;gt;&#34;, opts)&#xA;-- Search for the notes matching the current visual selection.&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;zf&#34;, &#34;:&#39;&amp;lt;,&#39;&amp;gt;ZkMatch&amp;lt;CR&amp;gt;&#34;, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add additional key mappings for Markdown buffers located in a &lt;code&gt;zk&lt;/code&gt; notebook, using &lt;code&gt;ftplugin&lt;/code&gt;. First, make sure it is enabled in your Neovim config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;filetype plugin on&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, create a new file under &lt;code&gt;~/.config/nvim/ftplugin/markdown.lua&lt;/code&gt; to setup the mappings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Add the key mappings only for Markdown files in a zk notebook.&#xA;if require(&#34;zk.util&#34;).notebook_root(vim.fn.expand(&#39;%:p&#39;)) ~= nil then&#xA;  local function map(...) vim.api.nvim_buf_set_keymap(0, ...) end&#xA;  local opts = { noremap=true, silent=false }&#xA;  &#xA;  -- Open the link under the caret.&#xA;  map(&#34;n&#34;, &#34;&amp;lt;CR&amp;gt;&#34;, &#34;&amp;lt;Cmd&amp;gt;lua vim.lsp.buf.definition()&amp;lt;CR&amp;gt;&#34;, opts)&#xA;  &#xA;  -- Create a new note after asking for its title.&#xA;  -- This overrides the global `&amp;lt;leader&amp;gt;zn` mapping to create the note in the same directory as the current buffer.&#xA;  map(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;zn&#34;, &#34;&amp;lt;Cmd&amp;gt;ZkNew { dir = vim.fn.expand(&#39;%:p:h&#39;), title = vim.fn.input(&#39;Title: &#39;) }&amp;lt;CR&amp;gt;&#34;, opts)&#xA;  -- Create a new note in the same directory as the current buffer, using the current selection for title.&#xA;  map(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;znt&#34;, &#34;:&#39;&amp;lt;,&#39;&amp;gt;ZkNewFromTitleSelection { dir = vim.fn.expand(&#39;%:p:h&#39;) }&amp;lt;CR&amp;gt;&#34;, opts)&#xA;  -- Create a new note in the same directory as the current buffer, using the current selection for note content and asking for its title.&#xA;  map(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;znc&#34;, &#34;:&#39;&amp;lt;,&#39;&amp;gt;ZkNewFromContentSelection { dir = vim.fn.expand(&#39;%:p:h&#39;), title = vim.fn.input(&#39;Title: &#39;) }&amp;lt;CR&amp;gt;&#34;, opts)&#xA;&#xA;  -- Open notes linking to the current buffer.&#xA;  map(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;zb&#34;, &#34;&amp;lt;Cmd&amp;gt;ZkBacklinks&amp;lt;CR&amp;gt;&#34;, opts)&#xA;  -- Alternative for backlinks using pure LSP and showing the source context.&#xA;  --map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;zb&#39;, &#39;&amp;lt;Cmd&amp;gt;lua vim.lsp.buf.references()&amp;lt;CR&amp;gt;&#39;, opts)&#xA;  -- Open notes linked by the current buffer.&#xA;  map(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;zl&#34;, &#34;&amp;lt;Cmd&amp;gt;ZkLinks&amp;lt;CR&amp;gt;&#34;, opts)&#xA;  &#xA;  -- Preview a linked note.&#xA;  map(&#34;n&#34;, &#34;K&#34;, &#34;&amp;lt;Cmd&amp;gt;lua vim.lsp.buf.hover()&amp;lt;CR&amp;gt;&#34;, opts)&#xA;  -- Open the code actions for a visual selection.&#xA;  map(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;za&#34;, &#34;:&#39;&amp;lt;,&#39;&amp;gt;lua vim.lsp.buf.range_code_action()&amp;lt;CR&amp;gt;&#34;, opts)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Miscellaneous&lt;/h1&gt; &#xA;&lt;h2&gt;Syntax Highlighting Tips&lt;/h2&gt; &#xA;&lt;p&gt;You can extend Neovim&#39;s built-in Markdown syntax with proper highlighting and conceal support for &lt;code&gt;[[Wikilinks]]&lt;/code&gt;, and conceal support for standard &lt;code&gt;[Markdown Links]()&lt;/code&gt;. Create a new file under &lt;code&gt;~/.config/nvim/after/syntax/markdown.vim&lt;/code&gt; for this purpose:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; markdownWikiLink is a new region&#xA;syn region markdownWikiLink matchgroup=markdownLinkDelimiter start=&#34;\[\[&#34; end=&#34;\]\]&#34; contains=markdownUrl keepend oneline concealends&#xA;&#34; markdownLinkText is copied from runtime files with &#39;concealends&#39; appended&#xA;syn region markdownLinkText matchgroup=markdownLinkTextDelimiter start=&#34;!\=\[\%(\%(\_[^][]\|\[\_[^][]*\]\)*]\%( \=[[(]\)\)\@=&#34; end=&#34;\]\%( \=[[(]\)\@=&#34; nextgroup=markdownLink,markdownId skipwhite contains=@markdownInline,markdownLineStart concealends&#xA;&#34; markdownLink is copied from runtime files with &#39;conceal&#39; appended&#xA;syn region markdownLink matchgroup=markdownLinkDelimiter start=&#34;(&#34; end=&#34;)&#34; contains=markdownUrl keepend contained conceal&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then enable conceal with &lt;code&gt;:setlocal conceallevel=2&lt;/code&gt;, see &lt;code&gt;:h &#39;conceallevel&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that if you are using &lt;code&gt;nvim-treesitter&lt;/code&gt; for Markdown, don&#39;t forget to enable &lt;code&gt;additional_vim_regex_highlighting&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-treesitter.configs&#34;).setup({&#xA;  -- ...&#xA;  highlight = {&#xA;    -- ...&#xA;    additional_vim_regex_highlighting = { &#34;markdown&#34; }&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;nvim-lsp-installer&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Not recommended, instead install the &lt;a href=&#34;https://github.com/zk-org/zk&#34;&gt;&lt;code&gt;zk&lt;/code&gt;&lt;/a&gt; CLI tool and make it available in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you insist to use nvim-lsp-installer for &lt;code&gt;zk&lt;/code&gt;, the following code snippet should guide you on how to setup the &lt;code&gt;zk&lt;/code&gt; server when installed via nvim-lsp-installer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-lsp-installer&#34;).on_server_ready(function(server)&#xA;  local opts = {&#xA;    -- customize your options as usual&#xA;    --&#xA;    -- on_attach = ...&#xA;    -- etc, see `:h vim.lsp.start_client()`&#xA;  }&#xA;  if server.name == &#34;zk&#34; then&#xA;    require(&#34;zk&#34;).setup({&#xA;      lsp = {&#xA;        config = vim.tbl_extend(&#34;force&#34;, server:get_default_options(), opts),&#xA;      },&#xA;    })&#xA;  else&#xA;    server:setup(opts)&#xA;  end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Telescope Plugin&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Not recommended, instead just use the &lt;a href=&#34;https://raw.githubusercontent.com/zk-org/zk-nvim/main/#built-in-commands&#34;&gt;:ZkNotes or :ZkTags commands&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;It&#39;s possible (but not required) to also load the notes and tags pickers as a telescope plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).load_extension(&#34;zk&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope zk notes&#xA;:Telescope zk notes createdAfter=3\ days\ ago&#xA;:Telescope zk tags&#xA;:Telescope zk tags created=today&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>