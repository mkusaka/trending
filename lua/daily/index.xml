<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-02T01:38:44Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>folke/persistence.nvim</title>
    <updated>2023-03-02T01:38:44Z</updated>
    <id>tag:github.com,2023-03-02:/folke/persistence.nvim</id>
    <link href="https://github.com/folke/persistence.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üíæ Simple session management for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üíæ Persistence&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Persistence&lt;/strong&gt; is a simple lua plugin for automated session management.&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;automatically saves the active session under &lt;code&gt;~/.local/state/nvim/sessions&lt;/code&gt; on exit&lt;/li&gt; &#xA; &lt;li&gt;simple API to restore the current or last session&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.7.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use({&#xA;  &#34;folke/persistence.nvim&#34;,&#xA;  event = &#34;BufReadPre&#34;, -- this will only start session saving when an actual file was opened&#xA;  module = &#34;persistence&#34;,&#xA;  config = function()&#xA;    require(&#34;persistence&#34;).setup()&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;Plug &#39;folke/persistence.nvim&#39;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#34;persistence&#34;).setup {&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Persistence comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  dir = vim.fn.expand(vim.fn.stdpath(&#34;state&#34;) .. &#34;/sessions/&#34;), -- directory where session files are saved&#xA;  options = { &#34;buffers&#34;, &#34;curdir&#34;, &#34;tabpages&#34;, &#34;winsize&#34; }, -- sessionoptions used for saving&#xA;  pre_save = nil, -- a function to call before saving the session&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Persistence&lt;/strong&gt; works well with plugins like &lt;code&gt;startify&lt;/code&gt; or &lt;code&gt;dashboard&lt;/code&gt;. It will never restore a session automatically, but you can of course write an autocmd that does exactly that if you want.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- restore the session for the current directory&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;qs&#34;, [[&amp;lt;cmd&amp;gt;lua require(&#34;persistence&#34;).load()&amp;lt;cr&amp;gt;]], {})&#xA;&#xA;-- restore the last session&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;ql&#34;, [[&amp;lt;cmd&amp;gt;lua require(&#34;persistence&#34;).load({ last = true })&amp;lt;cr&amp;gt;]], {})&#xA;&#xA;-- stop Persistence =&amp;gt; session won&#39;t be saved on exit&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;qd&#34;, [[&amp;lt;cmd&amp;gt;lua require(&#34;persistence&#34;).stop()&amp;lt;cr&amp;gt;]], {})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>mrjones2014/smart-splits.nvim</title>
    <updated>2023-03-02T01:38:44Z</updated>
    <id>tag:github.com,2023-03-02:/mrjones2014/smart-splits.nvim</id>
    <link href="https://github.com/mrjones2014/smart-splits.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üß† Smart, directional Neovim and tmux split resizing and navigation. Think about splits in terms of &#34;up/down/left/right&#34;.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üß† smart-splits.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Smart, directional Neovim split resizing and navigation, with &lt;code&gt;tmux&lt;/code&gt; pane navigation. &lt;code&gt;smart-splits.nvim&lt;/code&gt; lets you think about split resizing in terms of &#34;move the divider to the left/right/up/down&#34; which can feel much more natural. It also allows you to move through splits in a circular fashion (e.g. moving left at the left edge jumps to the right edge, and vice versa, and same for top and bottom edges). Additionally, if enabled, it can provide seamless navigation between Neovim splits and &lt;code&gt;tmux&lt;/code&gt; panes. See &lt;a href=&#34;https://raw.githubusercontent.com/mrjones2014/smart-splits.nvim/master/#tmux-integration&#34;&gt;Tmux Integration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8648891/201928611-4338e3cb-cca9-4e15-92c6-0405b7072279.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;With Packer.nvim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use(&#39;mrjones2014/smart-splits.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can set ignored &lt;code&gt;buftype&lt;/code&gt;s or &lt;code&gt;filetype&lt;/code&gt;s which will be ignored when figuring out if your cursor is currently at an edge split for resizing. This is useful in order to ignore &#34;sidebar&#34; type buffers while resizing, such as &lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt; which tries to maintain its own width unless manually resized. Note that nothing is ignored when moving between splits, only when resizing.&lt;/p&gt; &#xA;&lt;p&gt;Defaults are shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;smart-splits&#39;).setup({&#xA;  -- Ignored filetypes (only while resizing)&#xA;  ignored_filetypes = {&#xA;    &#39;nofile&#39;,&#xA;    &#39;quickfix&#39;,&#xA;    &#39;prompt&#39;,&#xA;  },&#xA;  -- Ignored buffer types (only while resizing)&#xA;  ignored_buftypes = { &#39;NvimTree&#39; },&#xA;  -- the default number of lines/columns to resize by at a time&#xA;  default_amount = 3,&#xA;  -- whether to wrap to opposite side when cursor is at an edge&#xA;  -- e.g. by default, moving left at the left edge will jump&#xA;  -- to the rightmost window, and vice versa, same for up/down.&#xA;  wrap_at_edge = true,&#xA;  -- when moving cursor between splits left or right,&#xA;  -- place the cursor on the same row of the *screen*&#xA;  -- regardless of line numbers. False by default.&#xA;  -- Can be overridden via function parameter, see Usage.&#xA;  move_cursor_same_row = false,&#xA;  -- resize mode options&#xA;  resize_mode = {&#xA;    -- key to exit persistent resize mode&#xA;    quit_key = &#39;&amp;lt;ESC&amp;gt;&#39;,&#xA;    -- keys to use for moving in resize mode&#xA;    -- in order of left, down, up&#39; right&#xA;    resize_keys = { &#39;h&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39; },&#xA;    -- set to true to silence the notifications&#xA;    -- when entering/exiting persistent resize mode&#xA;    silent = false,&#xA;    -- must be functions, they will be executed when&#xA;    -- entering or exiting the resize mode&#xA;    hooks = {&#xA;      on_enter = nil,&#xA;      on_leave = nil,&#xA;    },&#xA;  },&#xA;  -- ignore these autocmd events (via :h eventignore) while processing&#xA;  -- smart-splits.nvim computations, which involve visiting different&#xA;  -- buffers and windows. These events will be ignored during processing,&#xA;  -- and un-ignored on completed. This only applies to resize events,&#xA;  -- not cursor movement events.&#xA;  ignored_events = {&#xA;    &#39;BufEnter&#39;,&#xA;    &#39;WinEnter&#39;,&#xA;  },&#xA;  -- enable or disable the tmux integration&#xA;  tmux_integration = true,&#xA;  -- disable tmux navigation if current tmux pane is zoomed&#xA;  disable_tmux_nav_when_zoomed = true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hooks&lt;/h3&gt; &#xA;&lt;p&gt;The hook table allows you to define callbacks for the &lt;code&gt;on_enter&lt;/code&gt; and &lt;code&gt;on_leave&lt;/code&gt; events of the resize mode.&lt;/p&gt; &#xA;&lt;h5&gt;Examples:&lt;/h5&gt; &#xA;&lt;p&gt;Integration with &lt;a href=&#34;https://github.com/kwkarlwang/bufresize.nvim&#34;&gt;bufresize.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;smart-splits&#39;).setup({&#xA;  resize_mode = {&#xA;    hooks = {&#xA;      on_leave = require(&#39;bufresize&#39;).register,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom messages when using resize mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;smart-splits&#39;).setup({&#xA;  resize_mode = {&#xA;    silent = true,&#xA;    hooks = {&#xA;      on_enter = function()&#xA;        vim.notify(&#39;Entering resize mode&#39;)&#xA;      end,&#xA;      on_leave = function()&#xA;        vim.notify(&#39;Exiting resize mode, bye&#39;)&#xA;      end,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;With Lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- resizing splits&#xA;-- amount defaults to 3 if not specified&#xA;-- use absolute values, no + or -&#xA;-- the functions also check for a range,&#xA;-- so for example if you bind `&amp;lt;A-h&amp;gt;` to `resize_left`,&#xA;-- then `10&amp;lt;A-h&amp;gt;` will `resize_left` by `(10 * config.default_amount)`&#xA;require(&#39;smart-splits&#39;).resize_up(amount)&#xA;require(&#39;smart-splits&#39;).resize_down(amount)&#xA;require(&#39;smart-splits&#39;).resize_left(amount)&#xA;require(&#39;smart-splits&#39;).resize_right(amount)&#xA;-- moving between splits&#xA;-- pass same_row as a boolean to override the default&#xA;-- for the move_cursor_same_row config option.&#xA;-- See Configuration.&#xA;require(&#39;smart-splits&#39;).move_cursor_up()&#xA;require(&#39;smart-splits&#39;).move_cursor_down()&#xA;require(&#39;smart-splits&#39;).move_cursor_left(same_row)&#xA;require(&#39;smart-splits&#39;).move_cursor_right(same_row)&#xA;-- Swapping buffers directionally with the window to the specified direction&#xA;require(&#39;smart-splits&#39;).swap_buf_up()&#xA;require(&#39;smart-splits&#39;).swap_buf_down()&#xA;require(&#39;smart-splits&#39;).swap_buf_left()&#xA;require(&#39;smart-splits&#39;).swap_buf_right()&#xA;-- persistent resize mode&#xA;-- temporarily remap your configured resize keys to&#xA;-- smart resize left, down, up, and right, respectively,&#xA;-- press &amp;lt;ESC&amp;gt; to stop resize mode (unless you&#39;ve set a different key in config)&#xA;-- resize keys also accept a range, e.e. pressing `5j` will resize down 5 times the default_amount&#xA;require(&#39;smart-splits&#39;).start_resize_mode()&#xA;&#xA;-- recommended mappings&#xA;-- resizing splits&#xA;-- these keymaps will also accept a range,&#xA;-- for example `10&amp;lt;A-h&amp;gt;` will `resize_left` by `(10 * config.default_amount)`&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;A-h&amp;gt;&#39;, require(&#39;smart-splits&#39;).resize_left)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;A-j&amp;gt;&#39;, require(&#39;smart-splits&#39;).resize_down)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;A-k&amp;gt;&#39;, require(&#39;smart-splits&#39;).resize_up)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;A-l&amp;gt;&#39;, require(&#39;smart-splits&#39;).resize_right)&#xA;-- moving between splits&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-h&amp;gt;&#39;, require(&#39;smart-splits&#39;).move_cursor_left)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-j&amp;gt;&#39;, require(&#39;smart-splits&#39;).move_cursor_down)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-k&amp;gt;&#39;, require(&#39;smart-splits&#39;).move_cursor_up)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-l&amp;gt;&#39;, require(&#39;smart-splits&#39;).move_cursor_right)&#xA;-- swapping buffers between windows&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;h&#39;, require(&#39;smart-splits&#39;).swap_buf_left)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;j&#39;, require(&#39;smart-splits&#39;).swap_buf_down)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;k&#39;, require(&#39;smart-splits&#39;).swap_buf_up)&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;&amp;lt;leader&amp;gt;l&#39;, require(&#39;smart-splits&#39;).swap_buf_right)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tmux Integration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;smart-splits.nvim&lt;/code&gt; can also enable seamless navigation between Neovim splits and &lt;code&gt;tmux&lt;/code&gt; panes. You will need to set up keymaps in your tmux config to match the Neovim keymaps.&lt;/p&gt; &#xA;&lt;p&gt;You can either add the following snippet to your &lt;code&gt;~/.tmux.conf&lt;/code&gt;/&lt;code&gt;~/.config/tmux/tmux.conf&lt;/code&gt; file (customizing the keys and resize amount if desired):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tmux&#34;&gt;# Smart pane switching with awareness of Vim splits.&#xA;# See: https://github.com/christoomey/vim-tmux-navigator&#xA;is_vim=&#34;ps -o state= -o comm= -t &#39;#{pane_tty}&#39; \&#xA;    | grep -iqE &#39;^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$&#39;&#34;&#xA;bind-key -n C-h if-shell &#34;$is_vim&#34; &#39;send-keys C-h&#39;  &#39;select-pane -L&#39;&#xA;bind-key -n C-j if-shell &#34;$is_vim&#34; &#39;send-keys C-j&#39;  &#39;select-pane -D&#39;&#xA;bind-key -n C-k if-shell &#34;$is_vim&#34; &#39;send-keys C-k&#39;  &#39;select-pane -U&#39;&#xA;bind-key -n C-l if-shell &#34;$is_vim&#34; &#39;send-keys C-l&#39;  &#39;select-pane -R&#39;&#xA;&#xA;bind-key -n M-h if-shell &#34;$is_vim&#34; &#39;send-keys M-h&#39; &#39;resize-pane -L 3&#39;&#xA;bind-key -n M-j if-shell &#34;$is_vim&#34; &#39;send-keys M-j&#39; &#39;resize-pane -D 3&#39;&#xA;bind-key -n M-k if-shell &#34;$is_vim&#34; &#39;send-keys M-k&#39; &#39;resize-pane -U 3&#39;&#xA;bind-key -n M-l if-shell &#34;$is_vim&#34; &#39;send-keys M-l&#39; &#39;resize-pane -R 3&#39;&#xA;&#xA;tmux_version=&#39;$(tmux -V | sed -En &#34;s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p&#34;)&#39;&#xA;if-shell -b &#39;[ &#34;$(echo &#34;$tmux_version &amp;lt; 3.0&#34; | bc)&#34; = 1 ]&#39; \&#xA;    &#34;bind-key -n &#39;C-\\&#39; if-shell \&#34;$is_vim\&#34; &#39;send-keys C-\\&#39;  &#39;select-pane -l&#39;&#34;&#xA;if-shell -b &#39;[ &#34;$(echo &#34;$tmux_version &amp;gt;= 3.0&#34; | bc)&#34; = 1 ]&#39; \&#xA;    &#34;bind-key -n &#39;C-\\&#39; if-shell \&#34;$is_vim\&#34; &#39;send-keys C-\\\\&#39;  &#39;select-pane -l&#39;&#34;&#xA;&#xA;bind-key -T copy-mode-vi &#39;C-h&#39; select-pane -L&#xA;bind-key -T copy-mode-vi &#39;C-j&#39; select-pane -D&#xA;bind-key -T copy-mode-vi &#39;C-k&#39; select-pane -U&#xA;bind-key -T copy-mode-vi &#39;C-l&#39; select-pane -R&#xA;bind-key -T copy-mode-vi &#39;C-\&#39; select-pane -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, alternatively, install the &lt;a href=&#34;https://github.com/christoomey/vim-tmux-navigator#tmux&#34;&gt;vim-tmux-navigator&lt;/a&gt; &lt;code&gt;tmux&lt;/code&gt; plugin with &lt;a href=&#34;https://github.com/tmux-plugins/tpm&#34;&gt;Tmux Plugin Manager (TPM)&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tmux&#34;&gt;set -g @plugin &#39;christoomey/vim-tmux-navigator&#39;&#xA;run &#39;~/.tmux/plugins/tpm/tpm&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting the Option Key Working on MacOS&lt;/h3&gt; &#xA;&lt;p&gt;Note that to use the alt/option key in keymaps on macOS, you may need to change some terminal settings for Neovim to recognize the key properly.&lt;/p&gt; &#xA;&lt;h4&gt;Kitty&lt;/h4&gt; &#xA;&lt;p&gt;Add the following configuration option to &lt;code&gt;~/.config/kitty/kitty.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;macos_option_as_alt both&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Alacritty&lt;/h4&gt; &#xA;&lt;p&gt;Add the following key bindings to &lt;code&gt;~/.config/alacritty/alacritty.yml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# for Alt+h/j/k/l&#xA;key_bindings:&#xA;  - { key: J, mods: Alt, chars: &#34;\x1bj&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>MunifTanjim/nui.nvim</title>
    <updated>2023-03-02T01:38:44Z</updated>
    <id>tag:github.com,2023-03-02:/MunifTanjim/nui.nvim</id>
    <link href="https://github.com/MunifTanjim/nui.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UI Component Library for Neovim.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/MunifTanjim/nui.nvim/ci.yml?branch=main&amp;amp;label=CI&amp;amp;style=for-the-badge&#34; alt=&#34;GitHub Workflow Status: CI&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/MunifTanjim/nui.nvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/gh/MunifTanjim/nui.nvim/master?style=for-the-badge&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/license/MunifTanjim/nui.nvim?color=%23000080&amp;amp;style=for-the-badge&#34; alt=&#34;License&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;nui.nvim&lt;/h1&gt; &#xA;&lt;p&gt;UI Component Library for Neovim.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/v0.5.0&#34;&gt;Neovim 0.5.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugins with your preferred plugin manager. For example, with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;code&gt;vim-plug&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;MunifTanjim/nui.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Blocks&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/text&#34;&gt;NuiText&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Quickly add highlighted text on the buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/text&#34;&gt;Check Detailed Documentation for &lt;code&gt;nui.text&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.text&#34;&gt;Check Wiki Page for &lt;code&gt;nui.text&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/line&#34;&gt;NuiLine&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Quickly add line containing highlighted text chunks on the buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/line&#34;&gt;Check Detailed Documentation for &lt;code&gt;nui.line&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.line&#34;&gt;Check Wiki Page for &lt;code&gt;nui.line&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/tree&#34;&gt;NuiTree&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Quickly render tree-like structured content on the buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/tree&#34;&gt;Check Detailed Documentation for &lt;code&gt;nui.tree&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.tree&#34;&gt;Check Wiki Page for &lt;code&gt;nui.tree&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/layout&#34;&gt;Layout&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/media/layout.gif&#34; alt=&#34;Layout GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Popup = require(&#34;nui.popup&#34;)&#xA;local Layout = require(&#34;nui.layout&#34;)&#xA;&#xA;local popup_one, popup_two = Popup({&#xA;  enter = true,&#xA;  border = &#34;single&#34;,&#xA;}), Popup({&#xA;  border = &#34;double&#34;,&#xA;})&#xA;&#xA;local layout = Layout(&#xA;  {&#xA;    position = &#34;50%&#34;,&#xA;    size = {&#xA;      width = 80,&#xA;      height = &#34;60%&#34;,&#xA;    },&#xA;  },&#xA;  Layout.Box({&#xA;    Layout.Box(popup_one, { size = &#34;40%&#34; }),&#xA;    Layout.Box(popup_two, { size = &#34;60%&#34; }),&#xA;  }, { dir = &#34;row&#34; })&#xA;)&#xA;&#xA;local current_dir = &#34;row&#34;&#xA;&#xA;popup_one:map(&#34;n&#34;, &#34;r&#34;, function()&#xA;  if current_dir == &#34;col&#34; then&#xA;    layout:update(Layout.Box({&#xA;      Layout.Box(popup_one, { size = &#34;40%&#34; }),&#xA;      Layout.Box(popup_two, { size = &#34;60%&#34; }),&#xA;    }, { dir = &#34;row&#34; }))&#xA;&#xA;    current_dir = &#34;row&#34;&#xA;  else&#xA;    layout:update(Layout.Box({&#xA;      Layout.Box(popup_two, { size = &#34;60%&#34; }),&#xA;      Layout.Box(popup_one, { size = &#34;40%&#34; }),&#xA;    }, { dir = &#34;col&#34; }))&#xA;&#xA;    current_dir = &#34;col&#34;&#xA;  end&#xA;end, {})&#xA;&#xA;layout:mount()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/layout&#34;&gt;Check Detailed Documentation for &lt;code&gt;nui.layout&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.layout&#34;&gt;Check Wiki Page for &lt;code&gt;nui.layout&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/popup&#34;&gt;Popup&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/media/popup.gif&#34; alt=&#34;Popup GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Popup = require(&#34;nui.popup&#34;)&#xA;local event = require(&#34;nui.utils.autocmd&#34;).event&#xA;&#xA;local popup = Popup({&#xA;  enter = true,&#xA;  focusable = true,&#xA;  border = {&#xA;    style = &#34;rounded&#34;,&#xA;  },&#xA;  position = &#34;50%&#34;,&#xA;  size = {&#xA;    width = &#34;80%&#34;,&#xA;    height = &#34;60%&#34;,&#xA;  },&#xA;})&#xA;&#xA;-- mount/open the component&#xA;popup:mount()&#xA;&#xA;-- unmount component when cursor leaves buffer&#xA;popup:on(event.BufLeave, function()&#xA;  popup:unmount()&#xA;end)&#xA;&#xA;-- set content&#xA;vim.api.nvim_buf_set_lines(popup.bufnr, 0, 1, false, { &#34;Hello World&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/popup&#34;&gt;Check Detailed Documentation for &lt;code&gt;nui.popup&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.popup&#34;&gt;Check Wiki Page for &lt;code&gt;nui.popup&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/input&#34;&gt;Input&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/media/input.gif&#34; alt=&#34;Input GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Input = require(&#34;nui.input&#34;)&#xA;local event = require(&#34;nui.utils.autocmd&#34;).event&#xA;&#xA;local input = Input({&#xA;  position = &#34;50%&#34;,&#xA;  size = {&#xA;    width = 20,&#xA;  },&#xA;  border = {&#xA;    style = &#34;single&#34;,&#xA;    text = {&#xA;      top = &#34;[Howdy?]&#34;,&#xA;      top_align = &#34;center&#34;,&#xA;    },&#xA;  },&#xA;  win_options = {&#xA;    winhighlight = &#34;Normal:Normal,FloatBorder:Normal&#34;,&#xA;  },&#xA;}, {&#xA;  prompt = &#34;&amp;gt; &#34;,&#xA;  default_value = &#34;Hello&#34;,&#xA;  on_close = function()&#xA;    print(&#34;Input Closed!&#34;)&#xA;  end,&#xA;  on_submit = function(value)&#xA;    print(&#34;Input Submitted: &#34; .. value)&#xA;  end,&#xA;})&#xA;&#xA;-- mount/open the component&#xA;input:mount()&#xA;&#xA;-- unmount component when cursor leaves buffer&#xA;input:on(event.BufLeave, function()&#xA;  input:unmount()&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/input&#34;&gt;Check Detailed Documentation for &lt;code&gt;nui.input&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.input&#34;&gt;Check Wiki Page for &lt;code&gt;nui.input&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/menu&#34;&gt;Menu&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/media/menu.gif&#34; alt=&#34;Menu GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Menu = require(&#34;nui.menu&#34;)&#xA;local event = require(&#34;nui.utils.autocmd&#34;).event&#xA;&#xA;local menu = Menu({&#xA;  position = &#34;50%&#34;,&#xA;  size = {&#xA;    width = 25,&#xA;    height = 5,&#xA;  },&#xA;  border = {&#xA;    style = &#34;single&#34;,&#xA;    text = {&#xA;      top = &#34;[Choose-an-Element]&#34;,&#xA;      top_align = &#34;center&#34;,&#xA;    },&#xA;  },&#xA;  win_options = {&#xA;    winhighlight = &#34;Normal:Normal,FloatBorder:Normal&#34;,&#xA;  },&#xA;}, {&#xA;  lines = {&#xA;    Menu.item(&#34;Hydrogen (H)&#34;),&#xA;    Menu.item(&#34;Carbon (C)&#34;),&#xA;    Menu.item(&#34;Nitrogen (N)&#34;),&#xA;    Menu.separator(&#34;Noble-Gases&#34;, {&#xA;      char = &#34;-&#34;,&#xA;      text_align = &#34;right&#34;,&#xA;    }),&#xA;    Menu.item(&#34;Helium (He)&#34;),&#xA;    Menu.item(&#34;Neon (Ne)&#34;),&#xA;    Menu.item(&#34;Argon (Ar)&#34;),&#xA;  },&#xA;  max_width = 20,&#xA;  keymap = {&#xA;    focus_next = { &#34;j&#34;, &#34;&amp;lt;Down&amp;gt;&#34;, &#34;&amp;lt;Tab&amp;gt;&#34; },&#xA;    focus_prev = { &#34;k&#34;, &#34;&amp;lt;Up&amp;gt;&#34;, &#34;&amp;lt;S-Tab&amp;gt;&#34; },&#xA;    close = { &#34;&amp;lt;Esc&amp;gt;&#34;, &#34;&amp;lt;C-c&amp;gt;&#34; },&#xA;    submit = { &#34;&amp;lt;CR&amp;gt;&#34;, &#34;&amp;lt;Space&amp;gt;&#34; },&#xA;  },&#xA;  on_close = function()&#xA;    print(&#34;Menu Closed!&#34;)&#xA;  end,&#xA;  on_submit = function(item)&#xA;    print(&#34;Menu Submitted: &#34;, item.text)&#xA;  end,&#xA;})&#xA;&#xA;-- mount the component&#xA;menu:mount()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/menu&#34;&gt;Check Detailed Documentation for &lt;code&gt;nui.menu&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.menu&#34;&gt;Check Wiki Page for &lt;code&gt;nui.menu&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/split&#34;&gt;Split&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/media/split.gif&#34; alt=&#34;Split GIF&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Split = require(&#34;nui.split&#34;)&#xA;local event = require(&#34;nui.utils.autocmd&#34;).event&#xA;&#xA;local split = Split({&#xA;  relative = &#34;editor&#34;,&#xA;  position = &#34;bottom&#34;,&#xA;  size = &#34;20%&#34;,&#xA;})&#xA;&#xA;-- mount/open the component&#xA;split:mount()&#xA;&#xA;-- unmount component when cursor leaves buffer&#xA;split:on(event.BufLeave, function()&#xA;  split:unmount()&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/lua/nui/split&#34;&gt;Check Detailed Documentation for &lt;code&gt;nui.split&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.split&#34;&gt;Check Wiki Page for &lt;code&gt;nui.split&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Extendibility&lt;/h2&gt; &#xA;&lt;p&gt;Each of the &lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/#blocks&#34;&gt;blocks&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/#components&#34;&gt;components&lt;/a&gt; can be extended to add new methods or change their behaviors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local Timer = Popup:extend(&#34;Timer&#34;)&#xA;&#xA;function Timer:init(popup_options)&#xA;  local options = vim.tbl_deep_extend(&#34;force&#34;, popup_options or {}, {&#xA;    border = &#34;double&#34;,&#xA;    focusable = false,&#xA;    position = { row = 0, col = &#34;100%&#34; },&#xA;    size = { width = 10, height = 1 },&#xA;    win_options = {&#xA;      winhighlight = &#34;Normal:Normal,FloatBorder:SpecialChar&#34;,&#xA;    },&#xA;  })&#xA;&#xA;  Timer.super.init(self, options)&#xA;end&#xA;&#xA;function Timer:countdown(time, step, format)&#xA;  local function draw_content(text)&#xA;    local gap_width = 10 - vim.api.nvim_strwidth(text)&#xA;    vim.api.nvim_buf_set_lines(self.bufnr, 0, -1, false, {&#xA;      string.format(&#xA;        &#34;%s%s%s&#34;,&#xA;        string.rep(&#34; &#34;, math.floor(gap_width / 2)),&#xA;        text,&#xA;        string.rep(&#34; &#34;, math.ceil(gap_width / 2))&#xA;      ),&#xA;    })&#xA;  end&#xA;&#xA;  self:mount()&#xA;&#xA;  local remaining_time = time&#xA;&#xA;  draw_content(format(remaining_time))&#xA;&#xA;  vim.fn.timer_start(step, function()&#xA;    remaining_time = remaining_time - step&#xA;&#xA;    draw_content(format(remaining_time))&#xA;&#xA;    if remaining_time &amp;lt;= 0 then&#xA;      self:unmount()&#xA;    end&#xA;  end, { [&#34;repeat&#34;] = math.ceil(remaining_time / step) })&#xA;end&#xA;&#xA;local timer = Timer()&#xA;&#xA;timer:countdown(10000, 1000, function(time)&#xA;  return tostring(time / 1000) .. &#34;s&#34;&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;nui.object&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A small object library is bundled with &lt;code&gt;nui.nvim&lt;/code&gt;. It is, more or less, a clone of the &lt;a href=&#34;https://github.com/kikito/middleclass&#34;&gt;&lt;code&gt;kikito/middleclass&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim/wiki/nui.object&#34;&gt;Check Wiki Page for &lt;code&gt;nui.object&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Licensed under the MIT License. Check the &lt;a href=&#34;https://raw.githubusercontent.com/MunifTanjim/nui.nvim/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for details.&lt;/p&gt;</summary>
  </entry>
</feed>