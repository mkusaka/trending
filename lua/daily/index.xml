<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-28T01:43:05Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>harrisoncramer/gitlab.nvim</title>
    <updated>2023-06-28T01:43:05Z</updated>
    <id>tag:github.com,2023-06-28:/harrisoncramer/gitlab.nvim</id>
    <link href="https://github.com/harrisoncramer/gitlab.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Gitlab integration with Neovim that lets you review MRs within the editor.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitlab.nvim&lt;/h1&gt; &#xA;&lt;p&gt;This Neovim plugin is designed to make it easy to review Gitlab MRs from within the editor. This means you can do things like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create, edit, and delete comments on an MR&lt;/li&gt; &#xA; &lt;li&gt;Reply to exisiting comments&lt;/li&gt; &#xA; &lt;li&gt;Read MR summaries&lt;/li&gt; &#xA; &lt;li&gt;Approve an MR&lt;/li&gt; &#xA; &lt;li&gt;Revoke approval for an MR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/32515581/233739969-216dad6e-fa77-417f-9d2d-5e875ab2fb40.mp4&#34;&gt;https://user-images.githubusercontent.com/32515581/233739969-216dad6e-fa77-417f-9d2d-5e875ab2fb40.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ll need to have an environment variable available in your shell that you use to authenticate with Gitlab&#39;s API. It should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export GITLAB_TOKEN=&#34;your_gitlab_token&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then install the plugin. Here&#39;s what it looks like with &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;harrisoncramer/gitlab.nvim&#34;,&#xA;  dependencies = {&#xA;    &#34;rcarriga/nvim-notify&#34;,&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;    &#34;nvim-lua/plenary.nvim&#34;&#xA;  },&#xA;  build = function () require(&#34;gitlab&#34;).build() end, -- Builds the Go binary&#xA;  config = function()&#xA;    vim.opt.termguicolors = true -- This is required if you aren&#39;t already initializing notify&#xA;    require(&#34;notify&#34;).setup({ background_colour = &#34;#000000&#34; })  -- This is required if you aren&#39;t already initializing notify&#xA;    require(&#34;gitlab&#34;).setup()&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And with Packer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;harrisoncramer/gitlab.nvim&#39;,&#xA;  requires = {&#xA;    &#34;rcarriga/nvim-notify&#34;,&#xA;    &#34;MunifTanjim/nui.nvim&#34;,&#xA;    &#34;nvim-lua/plenary.nvim&#34;&#xA;  },&#xA;  run = function() require(&#34;gitlab&#34;).build() end,&#xA;  config = function()&#xA;    vim.opt.termguicolors = true&#xA;    require(&#34;notify&#34;).setup({ background_colour = &#34;#000000&#34; })&#xA;    require(&#34;gitlab&#34;).setup() -- This can be found under the project details section of your Gitlab repository.&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuring per Gitlab Repository&lt;/h2&gt; &#xA;&lt;p&gt;By default, the plugin will not connect to a gitlab repository. You must add a &lt;code&gt;.gitlab.nvim&lt;/code&gt; file to the root of your directory. The plugin will read that file and use it as the project ID. The file should only contain the ID of the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;112415&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The tool will look for and interact with MRs against a &#34;main&#34; branch. You can configure this by passing in the &lt;code&gt;base_branch&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitlab&#39;).setup({ base_branch = &#39;master&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;main&lt;/code&gt; as your branch and you add a &lt;code&gt;.gitlab.nvim&lt;/code&gt; configuration file, you can call an empty setup function and the plugin will work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitlab&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is the default setup function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;gitlab&#34;).setup({&#xA;  base_branch = &#34;main&#34;,&#xA;  port = 20136, -- The port of the Go server, which runs in the background&#xA;  keymaps = {&#xA;    popup = { -- The popup for comment creation, editing, and replying&#xA;      exit = &#34;&amp;lt;Esc&amp;gt;&#34;,&#xA;      perform_action = &#34;&amp;lt;leader&amp;gt;s&#34;, -- Once in normal mode, does action&#xA;    },&#xA;    discussion_tree = { -- The discussion tree that holds all comments&#xA;      jump_to_location = &#34;o&#34;,&#xA;      edit_comment = &#34;e&#34;,&#xA;      delete_comment = &#34;dd&#34;,&#xA;      reply_to_comment = &#34;r&#34;,&#xA;      toggle_node = &#34;t&#34;,&#xA;    },&#xA;    dialogue = { -- The confirmation dialogue for deleting comments&#xA;      focus_next = { &#34;j&#34;, &#34;&amp;lt;Down&amp;gt;&#34;, &#34;&amp;lt;Tab&amp;gt;&#34; },&#xA;      focus_prev = { &#34;k&#34;, &#34;&amp;lt;Up&amp;gt;&#34;, &#34;&amp;lt;S-Tab&amp;gt;&#34; },&#xA;      close = { &#34;&amp;lt;Esc&amp;gt;&#34;, &#34;&amp;lt;C-c&amp;gt;&#34; },&#xA;      submit = { &#34;&amp;lt;CR&amp;gt;&#34;, &#34;&amp;lt;Space&amp;gt;&#34; },&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;First, check out the branch that you want to review locally. Then open Neovim and the reviewer will be initialized. The &lt;code&gt;project_id&lt;/code&gt; you specify in your configuration file must match the project_id of the Gitlab project your terminal is inside of. The &lt;code&gt;summary&lt;/code&gt; command will pull down the MR description into a buffer so that you can read it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;gitlab&#34;).summary()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;approve&lt;/code&gt; command will approve the merge request for the current branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;gitlab&#34;).approve()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;revoke&lt;/code&gt; command will revoke approval for the merge request for the current branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;gitlab&#34;).revoke()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;comment&lt;/code&gt; command will open up a NUI popover that will allow you to create a Gitlab comment on the current line. To send the comment, use &lt;code&gt;&amp;lt;leader&amp;gt;s&lt;/code&gt; while the comment popup is open:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;gitlab&#34;).comment()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Discussions&lt;/h3&gt; &#xA;&lt;p&gt;Gitlab groups threads of notes together into &#34;disucssions.&#34; To get a list of all the discussions for the current MR, use the &lt;code&gt;list_discussions&lt;/code&gt; command. This command will open up a split view of all the comments on the current merge request. You can jump to the comment location by using the &lt;code&gt;o&lt;/code&gt; key in the tree buffer, and you can reply to a thread by using the &lt;code&gt;r&lt;/code&gt; keybinding in the tree buffer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;gitlab&#34;).list_discussions()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Within the discussion tree, there are several functions that you can call, however, it&#39;s better to use the keybindings provided in the setup function. If you want to call them manually, they are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;gitlab&#34;).delete_comment()&#xA;require(&#34;gitlab&#34;).edit_comment()&#xA;require(&#34;gitlab&#34;).reply()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;The plugin does not set up any keybindings outside of these buffers, you need to set them up yourself. Here&#39;s what I&#39;m using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local gitlab = require(&#34;gitlab&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;gls&#34;, gitlab.summary)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;glA&#34;, gitlab.approve)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;glR&#34;, gitlab.revoke)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;glc&#34;, gitlab.create_comment)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;gld&#34;, gitlab.list_discussions)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Diff Views&lt;/h2&gt; &#xA;&lt;p&gt;This plugin does not provide you with a diff view out of the box for viewing changes. That is already handled by other plugins. I highly recommend using Diffview to see which files have changed in an MR. This is the function that I&#39;m using to accomplish this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Review changes against develop (will break if no develop branch present)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;gR&#34;, function()&#xA;  local isDiff = vim.fn.getwinvar(nil, &#34;&amp;amp;diff&#34;)&#xA;  local bufName = vim.api.nvim_buf_get_name(0)&#xA;  if isDiff ~= 0 or u.string_starts(bufName, &#34;diff&#34;) then&#xA;    vim.cmd.tabclose()&#xA;    vim.cmd.tabprev()&#xA;  else&#xA;    vim.cmd.DiffviewOpen(&#34;main&#34;)&#xA;  end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Which looks like this in my editor:&lt;/p&gt; &#xA;&lt;img width=&#34;1727&#34; alt=&#34;Screenshot 2023-04-21 at 6 37 39 PM&#34; src=&#34;https://user-images.githubusercontent.com/32515581/233744560-0d718c92-f810-4fde-b40d-8b6f42eb6f0e.png&#34;&gt; &#xA;&lt;p&gt;This is useful if you plan to leave comments on the diff, because this plugin currently only supports leaving comments on lines that have been added or modified. I&#39;m currenly working on adding functionality to allow users to leave comments on any lines, including those that have been deleted or untouched.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xiyaowong/transparent.nvim</title>
    <updated>2023-06-28T01:43:05Z</updated>
    <id>tag:github.com,2023-06-28:/xiyaowong/transparent.nvim</id>
    <link href="https://github.com/xiyaowong/transparent.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Remove all background colors to make nvim transparent&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;transparent.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Remove all background colors to make nvim transparent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/47070852/226154013-bc0168ba-c914-442e-9132-1e86d1899bc5.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;xiyaowong/transparent.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Same as other normal plugins, use your favourite plugin manager to install.&lt;/p&gt; &#xA;&lt;p&gt;NOTE:&lt;br&gt; It is recommended not to lazy load this plugin to avoid some strange phenomena.&lt;br&gt; The execution of each function in the plugin is very fast and the time consumption can be ignored.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All available options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;transparent&#34;).setup({&#xA;  groups = { -- table: default groups&#xA;    &#39;Normal&#39;, &#39;NormalNC&#39;, &#39;Comment&#39;, &#39;Constant&#39;, &#39;Special&#39;, &#39;Identifier&#39;,&#xA;    &#39;Statement&#39;, &#39;PreProc&#39;, &#39;Type&#39;, &#39;Underlined&#39;, &#39;Todo&#39;, &#39;String&#39;, &#39;Function&#39;,&#xA;    &#39;Conditional&#39;, &#39;Repeat&#39;, &#39;Operator&#39;, &#39;Structure&#39;, &#39;LineNr&#39;, &#39;NonText&#39;,&#xA;    &#39;SignColumn&#39;, &#39;CursorLineNr&#39;, &#39;EndOfBuffer&#39;,&#xA;  },&#xA;  extra_groups = {}, -- table: additional groups that should be cleared&#xA;  exclude_groups = {}, -- table: groups you don&#39;t want to clear&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add additional highlight groups by explicitly assigning the variable &#34;g:transparent_groups&#34;, which is the more recommended way.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you want to add group &lt;code&gt;ExtraGroup&lt;/code&gt;, you can do it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.transparent_groups = vim.list_extend(vim.g.transparent_groups or {}, { &#34;ExtraGroup&#34; })&#xA;-- vimscript: let g:transparent_groups = extend(get(g:, &#39;transparent_groups&#39;, []), [&#34;ExtraGroup&#34;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can execute this statement anywhere and as many times as you want, without worrying about whether the plugin has already been loaded or not.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is an example about &lt;a href=&#34;https://github.com/akinsho/bufferline.nvim&#34;&gt;akinsho/bufferline.nvim&lt;/a&gt;. Simply copy it and paste it after initializing bufferline in your configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.g.transparent_groups = vim.list_extend(&#xA;  vim.g.transparent_groups or {},&#xA;  vim.tbl_map(function(v)&#xA;    return v.hl_group&#xA;  end, vim.tbl_values(require(&#39;bufferline.config&#39;).highlights))&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This plugin will provide a global variable: &lt;code&gt;g:transparent_enabled&lt;/code&gt;(lua: &lt;code&gt;vim.g.transparent_enabled&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Some plugins or themes support setting transparency, and you can use this variable as a flag.&lt;br&gt; eg: &lt;code&gt;vim.g.tokyonight_transparent = vim.g.transparent_enabled&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The plugin will cache and automatically apply transparency settings, so you only need to call the following command.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How to enable transparent for plugin panels?&lt;/h3&gt; &#xA;&lt;p&gt;You can try adding this highlight group to the options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  extra_groups = {&#xA;    &#34;NormalFloat&#34;, -- plugins which have float panel such as Lazy, Mason, LspInfo&#xA;    &#34;NvimTreeNormal&#34; -- NvimTree&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;:TransparentEnable&#xA;:TransparentDisable&#xA;:TransparentToggle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Migration Guide 2023/3/20&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;remove &lt;code&gt;enable=true&lt;/code&gt; in your config.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;start Neovim&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;:TransparentEnable&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;It&#39;s done, the status of &lt;code&gt;enable&lt;/code&gt; will cached and the transparent effect is applyed on you neovim, enjoy :)&lt;/p&gt; &#xA;&lt;h2&gt;Aknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Kjwon15/vim-transparent&#34;&gt;vim-transparent&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>