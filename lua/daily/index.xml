<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-04T01:46:04Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shawngrimes/CloudJumper</title>
    <updated>2022-08-04T01:46:04Z</updated>
    <id>tag:github.com,2022-08-04:/shawngrimes/CloudJumper</id>
    <link href="https://github.com/shawngrimes/CloudJumper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Corona game using clouds&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cloud Jumper&lt;/h1&gt; &#xA;&lt;p&gt;A horizontal scrolling Corona game using basic physics.&lt;/p&gt; &#xA;&lt;p&gt;Developed by: &lt;a href=&#34;http://www.shawngrimes.me&#34;&gt;Shawn Grimes&lt;/a&gt; for &lt;a href=&#34;http://www.appliedclub.org&#34;&gt;APPlied Club&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Artwork provided by &lt;a href=&#34;http://www.vickiwenderlich.com&#34;&gt;Vicki Wenderlich&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Image Scaling&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run ScalingSample project&lt;/li&gt; &#xA; &lt;li&gt;Open config.lua, change scale=&#34;letterBox&#34;&lt;/li&gt; &#xA; &lt;li&gt;Demo difference on each device&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Creating a Game&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Open CloudJumper base&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The code in the CloudJumper base scrolls random clouds across the background.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open Physics Editor&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Drag in Cloud1,2,3 and char_walk_2&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create physics objects See this &lt;a href=&#34;http://www.codeandweb.com/blog/2012/05/24/getting-started-with-coronasdk-and-physicseditor-tutorial&#34;&gt;Corona Physics Editor Tutorial&lt;/a&gt; for more information on using &lt;a href=&#34;http://www.codeandweb.com/&#34;&gt;Physics Editor&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add physics library to CloudJumper base&lt;/p&gt; &lt;pre&gt;&lt;code&gt;-- init physics&#xA;local physics = require(&#34;physics&#34;)&#xA;physics.start()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now add our exported physics file from Physics Editor&lt;/p&gt; &lt;pre&gt;&lt;code&gt;local physicsData = (require &#34;CloudPhysics&#34;).physicsData(1.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add score label&lt;/p&gt; &lt;pre&gt;&lt;code&gt;------Create Clouds to walk on&#xA;--create display group for walking clouds&#xA;local walkingCloudDisplayGroup=display.newGroup()&#xA;&#xA;local walkingCloudSpeed=.05&#xA;&#xA;--Create a label to count how many clouds have passed&#xA;local scoreCount=0&#xA;local scoreLabel=display.newText(&#34;Score: 0&#34;, 10,40, native.systemFontBold , 48)&#xA;scoreLabel:setTextColor(255, 255, 255)&#xA;&#xA;walkingCloudDisplayGroup:insert(scoreLabel)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the app in the simulator, you should see the new score label added to the scene.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create initial platforms&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;--Create function to remove clouds when they travel off the scene&#xA;    local function removeWalkingCloud(cloudToRemove)&#xA;&#x9;    scoreCount=scoreCount+1&#xA;&#x9;    scoreLabel.text=&#34;Score: &#34;..scoreCount&#xA;&#x9;    cloudToRemove:removeSelf()&#xA;&#x9;    cloudToRemove=nil&#xA;    end&#xA;&#x9;&#xA;&#x9;--Create variables to track the location of the last cloud&#xA;&#x9;local lastX=0&#xA;&#x9;local lastY=display.contentWidth/2&#xA;&#x9;&#xA;&#x9;local function createStartingWalkingClouds()&#xA;&#x9;    for i=1,5 do&#xA;&#x9;&#x9;    local walkingCloud=display.newImage(&#34;cloud2.png&#34;)&#xA;&#x9;&#x9;    physics.addBody(walkingCloud,physicsData:get(&#34;cloud2&#34;))&#xA;&#x9;&#x9;    walkingCloud.bodyType=&#34;static&#34;&#xA;&#x9;&#x9;    walkingCloud.x=lastX+walkingCloud.contentWidth/2&#xA;&#x9;&#x9;    lastX=lastX+walkingCloud.contentWidth&#xA;&#x9;&#x9;    walkingCloud.y=lastY&#xA;    &#xA;&#x9;&#x9;    local walkingCloudDistance=- walkingCloud.x - walkingCloud.contentWidth/2&#xA;&#x9;&#x9;    local walkingCloudTravelSpeed= math.abs(walkingCloudDistance/walkingCloudSpeed)&#xA;&#x9;&#x9;    walkingCloud.transition=transition.to(walkingCloud,{time=walkingCloudTravelSpeed, x=-walkingCloud.x-walkingCloud.contentWidth/2, onComplete=removeWalkingCloud})&#xA;&#x9;&#x9;    walkingCloudDisplayGroup:insert(walkingCloud)&#xA;&#x9;    end&#xA;    end&#xA;&#xA;&#x9;createStartingWalkingClouds()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt;Run the app in the simulator, you should see the foreground clouds.&lt;/li&gt; &#xA; &lt;li&gt;Add our hero&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;    --Create hero object&#xA;    --include movieclip object&#xA;    local movieClip=require(&#34;movieclip&#34;)&#xA;&#xA;    local heroAngel=movieClip.newAnim({&#34;char_jump_1.png&#34;,&#34;char_jump_2.png&#34;,&#34;char_shoot_1.png&#34;,&#34;char_shoot_2.png&#34;,&#34;char_walk_1.png&#34;,&#34;char_walk_2.png&#34;})&#xA;    heroAngel.x=heroAngel.contentWidth&#xA;    heroAngel.y=50&#xA;    heroAngel:setSpeed(0.4)&#xA;    heroAngel:play({startFrame=1,endFrame=2,loop=0,remove=false})&#xA;    physics.addBody(heroAngel,physicsData:get(&#34;char_walk_2&#34;))&#xA;&#xA;&#x9;````&#xA;11. Run the app in the simulator, you should see the hero character fall from the sky and land on the foreground clouds.  Then he falls over :( &#xA;11. Fix the hero so he&#39;s upright and doesn&#39;t fall over.  We are going to attach him to a rectangle object below with a pivot joint.  Pivot joints can only move up and down and this will prevent the hero angel from rotating.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;--This physics joint keeps our angel upright&#xA;local rect = display.newRect( 50, 50, 100, 100 )&#xA;rect:setFillColor( 255, 255, 255, 100 )&#xA;rect.isVisible = true  -- optional&#xA;rect.y=display.contentHeight&#xA;physics.addBody( rect, &#34;static&#34;,{ isSensor = true } )&#xA;local pistonJoint=physics.newJoint(&#34;piston&#34;,heroAngel, rect,heroAngel.x,heroAngel.y,0,-100)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;12. Now set the rect.isVisible = false to hide it on the scene.&#xA;&#xA;12. Let&#39;s make the hero jump when we touch the screen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;--Function to make the angel jump when the screen is tapped&#xA;local function jumpAngel(event)&#xA; &#x9;heroAngel:applyLinearImpulse( 0, -225, heroAngel.x, heroAngel.y )&#xA;end&#xA;Runtime:addEventListener(&#34;tap&#34;, jumpAngel)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;13.  Let&#39;s add a better jump function to make sure you can&#39;t infinite jump with collision detection:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;--Function to make the angel jump when the screen is tapped&#xA;local isJumping=false&#xA;local function jumpAngel(event)&#xA;    if(isJumping ~= true) then&#xA;    &#x9;--Change to flying frames&#xA;&#x9;    heroAngel:play({startFrame=1,endFrame=2,loop=0,remove=false})&#xA;&#x9;    isJumping=true&#xA;&#x9;&#x9; heroAngel:applyLinearImpulse( 0, -200, heroAngel.x, heroAngel.y )&#xA;    end&#xA;end&#xA;Runtime:addEventListener(&#34;tap&#34;, jumpAngel)&#xA;&#xA;--Reset the angel when he lands&#xA;local function onLocalCollision(self, event)&#xA;    if ( event.phase == &#34;began&#34; ) then&#xA;&#x9;    isJumping=false&#xA;&#x9;    --Change back to walking frames&#xA;&#x9;    heroAngel:play({startFrame=5,endFrame=6,loop=0,remove=false})&#xA;    end&#xA;end&#xA;heroAngel.collision = onLocalCollision&#xA;heroAngel:addEventListener( &#34;collision&#34;, heroAngel )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;14. Adjust gravity if tap is held&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;--Function to adjust gravity if touching and flying local function adjustGravityForTouch(event) if ( event.phase==&#34;began&#34; ) then print(&#34;changing gravity&#34;) physics.setGravity( 0, 2.4 ) elseif(event.phase==&#34;ended&#34;) then print(&#34;gravity normal&#34;) physics.setGravity( 0, 9.8 ) end end Runtime:addEventListener(&#34;touch&#34;, adjustGravityForTouch)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Adding Polish&#xA;------&#xA;1. Open CloudJumper-NeedsPolish&#xA;2. Run and show current state of game&#xA;3. Introduce [Corona Director Class](http://developer.anscamobile.com/code/director-class-10)&#xA;4. Rename main.lua to GameScene.lua&#xA;5. Create new main.lua&#xA;6. Copy code to main.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;-------------------------------------------------------------------------------------&#xA;--&#xA;-- main.lua&#xA;--&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;pre&gt;&lt;code&gt;-- Your code here&#xA;&#xA;-- IMPORT DIRECTOR CLASS&#xA;local director = require(&#34;director&#34;)&#xA;    &#xA;-- CREATE A MAIN GROUP&#xA;local mainGroup = display.newGroup()&#xA;&#xA;-- MAIN FUNCTION&#xA;local main = function ()&#xA;    -- Add the group from director class&#xA;    mainGroup:insert(director.directorView)&#xA;    &#xA;    director:changeScene(&#34;MainMenuScene&#34;)&#xA;    &#xA;    -- Return true to signal that the function was successful&#xA;    return true&#xA;end&#xA;&#xA;main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;7. Create MainMenuScene.lua&#xA;8. Copy template.lua code into MainMenuScene.lua&#xA;9. Create background image in MainMenuScene.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;local mainMenuBackground=display.newImage(&#34;Cloud_Jumper_TitleScreen.png&#34;)&#xA;localGroup:insert(mainMenuBackground)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;10. Run the app, you should see the MainMenu Scene now.&#xA;10. Add a play button:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;local ui = require(&#34;ui&#34;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;local playButtonPressed = function (event )&#xA;&#x9;&#x9;if event.phase == &#34;release&#34; then&#xA;&#x9;&#x9;&#x9;director:changeScene( &#34;GameScene&#34;, &#34;overFromRight&#34; )&#xA;&#x9;&#x9;end&#xA;end&#xA;&#xA;local playButton = ui.newButton{&#xA;&#x9;default = &#34;button_play_up.png&#34;,&#xA;&#x9;over = &#34;button_play_down.png&#34;,&#xA;&#x9;onEvent = playButtonPressed,&#xA;&#x9;id = &#34;btn001&#34;,&#xA;&#x9;text = &#34;&#34;,&#xA;&#x9;font = &#34;Trebuchet-BoldItalic&#34;,&#xA;&#x9;textColor = { 51, 51, 51, 255 },&#xA;&#x9;size = 22,&#xA;&#x9;emboss = true&#xA;}&#xA;&#xA;playButton:setReferencePoint(display.CenterReferencePoint)&#xA;playButton.x=display.contentWidth/2&#xA;playButton.y=display.contentHeight-display.contentHeight/5&#xA;&#xA;--Add start button to local group&#xA;localGroup:insert(playButton)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;11. Now open GameScene.lua&#xA;12. At the top add:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;module(..., package.seeall)&#xA;&#xA;new = function ()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;13. At the bottom add:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;return localGroup&#xA;    &#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;14. Run the game.  You should be able to launch the gameplay scene now.&#xA;14. Restarting the game&#xA;15. Let&#39;s add a restart button to our game over logic.  Line 215, add:&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;--Show restart button&#xA;local ui=require(&#34;ui&#34;)&#xA;local restartButtonPressed = function (event )&#xA;    if event.phase == &#34;release&#34; then&#xA;&#x9;    --Clean up the scene before we start it again&#xA;&#x9;    cleanUpScene()&#xA;&#x9;    director:changeScene( &#34;GameScene&#34;, &#34;overFromRight&#34; )&#xA;    end&#xA;end&#xA;&#xA;--Create a restart Button&#xA;local restartButton = ui.newButton{&#xA;    default = &#34;button_restart_up.png&#34;,&#xA;    over = &#34;button_restart_down.png&#34;,&#xA;    onEvent = restartButtonPressed,&#xA;    id = &#34;btn001&#34;,&#xA;    text = &#34;&#34;,&#xA;    font = &#34;Trebuchet-BoldItalic&#34;,&#xA;    textColor = { 51, 51, 51, 255 },&#xA;    size = 22,&#xA;    emboss = true&#xA;}&#xA;&#x9;    &#xA;restartButton:setReferencePoint(display.CenterReferencePoint)&#xA;restartButton.x=display.contentWidth/2&#xA;restartButton.y=restartButton.y + restartButton.contentHeight&#xA;localGroup:insert(restartButton)&#x9;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;16. How about some background music?&#xA;17. Open main.lua and add the following around line 17 (after `local main = function ()` ):&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;--Play background music&#xA;local backgroundMusicObject = audio.loadStream(&#34;backgroundMusic.mp3&#34;)&#xA;audio.play(backgroundMusicObject)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;18. Run the game now&#xA;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>