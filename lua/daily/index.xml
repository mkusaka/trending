<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-01T01:38:35Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ethanholz/nvim-lastplace</title>
    <updated>2023-04-01T01:38:35Z</updated>
    <id>tag:github.com,2023-04-01:/ethanholz/nvim-lastplace</id>
    <link href="https://github.com/ethanholz/nvim-lastplace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Lua rewrite of vim-lastplace&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-lastplace&lt;/h1&gt; &#xA;&lt;p&gt;A Lua rewrite of vim-lastplace&lt;/p&gt; &#xA;&lt;p&gt;Heavily inspired by &lt;a href=&#34;https://github.com/farmergreg/vim-lastplace&#34;&gt;https://github.com/farmergreg/vim-lastplace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#39;ethanholz/nvim-lastplace&#39;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;paq&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;paq &#39;ethanholz/nvim-lastplace&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the following to your init.lua:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-lastplace&#39;.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may set options using the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-lastplace&#39;.setup {&#xA;    lastplace_ignore_buftype = {&#34;quickfix&#34;, &#34;nofile&#34;, &#34;help&#34;},&#xA;    lastplace_ignore_filetype = {&#34;gitcommit&#34;, &#34;gitrebase&#34;, &#34;svn&#34;, &#34;hgcommit&#34;},&#xA;    lastplace_open_folds = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For those of you still using Vimscript to configure your init.vim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua require&#39;nvim-lastplace&#39;.setup{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now set options using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:lastplace_ignore_buftype = &#34;quickfix,nofile,help&#34;&#xA;let g:lastplace_ignore_filetype = &#34;gitcommit,gitrebase,svn,hgcommit&#34;&#xA;let g:lastplace_open_folds = 1&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Escapingbug/dotaxctf</title>
    <updated>2023-04-01T01:38:35Z</updated>
    <id>tag:github.com,2023-04-01:/Escapingbug/dotaxctf</id>
    <link href="https://github.com/Escapingbug/dotaxctf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dota X CTF Game&lt;/h1&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;The restricted API set &lt;strong&gt;is expected&lt;/strong&gt;. The game bots are not expected to be fully controllable like a normal Dota game. It&#39;s better focusing on using the existing features. Most of the lacking APIs are design choices intended. Feel free to report missing features, but we are not trying to guarantee a complete control environment. One may see that as part of the game rule itself.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;Rules you should follow:&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;strong&gt;not a hacking challenge&lt;/strong&gt; but a programming challenge. (Or, you might think that this should be to exploit the knowledge of the Dota game?) So, &lt;strong&gt;DO NOT HACK THE INFRASTRUCTURE&lt;/strong&gt;. You will lose points or even get banned because of that. The infrastructure hacking include: try leverage the infra to get more running time (or any other case of sandbox escaping, the sandbox &lt;strong&gt;is not your target&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you find any bug, you could send up a Pull Request to explain and fix that. You may get extra points because of that.&lt;/p&gt; &#xA;&lt;p&gt;Have fun, instead of hacking everything, bro!&lt;/p&gt; &#xA;&lt;h2&gt;How to Play&lt;/h2&gt; &#xA;&lt;p&gt;Read the source code!&lt;/p&gt; &#xA;&lt;p&gt;This is a Dota2 custom map, the contents here are the &lt;code&gt;vscripts&lt;/code&gt; directory of the custom map. To setup and run the map:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;download the game (dota2), and when downloading on Steam, right click on the Dota2 -&amp;gt; property -&amp;gt; DLC -&amp;gt; check &lt;code&gt;Dota 2 Workshop Tools DLC&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;start the game and choose &lt;code&gt;Launch Dota 2 - Tools&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;create a new custom map&lt;/li&gt; &#xA; &lt;li&gt;copy this repo to &lt;code&gt;dota2/game/dota_addons/[your map name]/script/vscripts&lt;/code&gt;, note that this repo &lt;strong&gt;is&lt;/strong&gt; the vscripts itself.&lt;/li&gt; &#xA; &lt;li&gt;copy &lt;a href=&#34;https://github.com/escapingbug/dotaxctf-contents&#34;&gt;dotaxctf-contents repo&lt;/a&gt; to &lt;code&gt;dota2/content/dota_addons/[your map name]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;after launching the tools, choose hammer.&lt;/li&gt; &#xA; &lt;li&gt;open &lt;code&gt;template_map&lt;/code&gt; dotaxctf-contents repo (which is copied to &lt;code&gt;dota2/content/dota_addons/[your map name]/maps&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;F9&lt;/code&gt; to build with default settings.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When our game runs, we will be using this setting. The &lt;code&gt;server.py&lt;/code&gt; is the example server serving example code. When running the game, the server will accept your scripts. Each round you will be able to send up the script, and it will be sent back to the client (game) the next round. All other information should be explored by reading the source code!&lt;/p&gt; &#xA;&lt;h2&gt;Hints&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://moddota.com/api/#!/vscripts&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Devs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/escapingbug&#34;&gt;anciety&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/liangjs&#34;&gt;liangjs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kdxcxs&#34;&gt;kdxcxs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xljkqq&#34;&gt;xljkqq&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2023/3/21 21:13] fix: remove shop and spawn heros as a circle.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/20&#34;&gt;#20&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/21 22:00] feat: support getting hero&#39;s candidate id.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/21&#34;&gt;#21&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/23 13:30] fix: remove non-hero units after round ends.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/23&#34;&gt;#23&lt;/a&gt;, reporter: AAA剑圣)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/24 00:22] feat: support &lt;code&gt;GetItemInSlot(slot)&lt;/code&gt; to return a sandboxed item.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/24&#34;&gt;#24&lt;/a&gt;, reporter: AAA剑圣)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/27 00:22] feat: support getting game time by &lt;code&gt;GetGameTime()&lt;/code&gt;.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/28&#34;&gt;#28&lt;/a&gt;, reporter: Syclover)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/27 23:53] fix: use &lt;code&gt;npc:GetEntityIndex()&lt;/code&gt; and &lt;code&gt;npc:GetTeam()&lt;/code&gt; to avoid unexpect behaviors.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/27&#34;&gt;#27&lt;/a&gt;, reporter: 114@x1ct34m)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/28 09:11] fix: ban nonhero units for hero choosing.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/31&#34;&gt;#31&lt;/a&gt;,reporter: 114@x1ct34m)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/28 09:16] feat: clean up items when round ends.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/30&#34;&gt;#30&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/29 08:46] fix: place history.scores updates to correct loc.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/32&#34;&gt;#32&lt;/a&gt;, reporter: AAA剑圣)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/29 11:18] feat: print with &lt;code&gt;[Sandbox.candidate_name]&lt;/code&gt; banner to support checking specified hero&#39;s log.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/33&#34;&gt;#33&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/29 15:26] feat: print with &lt;code&gt;[Sandbox.candidate_name.script]&lt;/code&gt; banner when script got an error.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/35&#34;&gt;#35&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/29 21:44] fix: remove all nonempty entities after round ends.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/36&#34;&gt;#36&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/29 22:49] feat: update panel state when round ends.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/37&#34;&gt;#37&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;[2023/3/30 02:43] feat: print with &lt;code&gt;[Sandbox.candidate_name.script.load]&lt;/code&gt; banner for loading error log.(&lt;a href=&#34;https://github.com/Escapingbug/dotaxctf/pull/38&#34;&gt;#38&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>vuki656/package-info.nvim</title>
    <updated>2023-04-01T01:38:35Z</updated>
    <id>tag:github.com,2023-04-01:/vuki656/package-info.nvim</id>
    <link href="https://github.com/vuki656/package-info.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;✍️ All the npm/yarn commands I don&#39;t want to type&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://github.com/vuki656/vuki656/raw/master/media/package-info/logo.png&#34; width=&#34;315&#34;&gt; &#xA; &lt;h2&gt;All the &lt;code&gt;npm&lt;/code&gt;/&lt;code&gt;yarn&lt;/code&gt;/&lt;code&gt;pnpm&lt;/code&gt; commands I don&#39;t want to type&lt;/h2&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&amp;amp;logo=lua&amp;amp;logoColor=white&#34; alt=&#34;Lua&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/License-GPL%20v3-brightgreen?style=flat-square&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Status-Beta-informational?style=flat-square&#34; alt=&#34;Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Neovim-0.5+-green.svg?style=flat-square&amp;amp;logo=Neovim&amp;amp;logoColor=white&#34; alt=&#34;Neovim&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display latest dependency versions as virtual text&lt;/li&gt; &#xA; &lt;li&gt;Upgrade dependency on current line to latest version&lt;/li&gt; &#xA; &lt;li&gt;Delete dependency on current line&lt;/li&gt; &#xA; &lt;li&gt;Install a different version of a dependency on current line&lt;/li&gt; &#xA; &lt;li&gt;Install new dependency&lt;/li&gt; &#xA; &lt;li&gt;Automatic package manager detection&lt;/li&gt; &#xA; &lt;li&gt;Loading animation hook (to be placed in status bar or anywhere else)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Display Latest Package Version&lt;/h3&gt; &#xA; &lt;img src=&#34;https://github.com/vuki656/vuki656/raw/master/media/package-info/display.gif&#34; width=&#34;500&#34;&gt; &#xA; &lt;p&gt;Runs &lt;code&gt;npm outdated --json&lt;/code&gt; in the background and then compares the output with versions in &lt;code&gt;package.json&lt;/code&gt; and displays them as virtual text.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Keybinding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#xA;    &#34;n&#34;,&#xA;    &#34;&amp;lt;leader&amp;gt;ns&#34;,&#xA;    &#34;&amp;lt;cmd&amp;gt;lua require(&#39;package-info&#39;).show()&amp;lt;cr&amp;gt;&#34;,&#xA;    { silent = true, noremap = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; after the first outdated dependency fetch, it will show the cached results for the next hour instead of re-fetching every time.&lt;/li&gt; &#xA; &lt;li&gt;If you would like to force re-fetching every time you can provide &lt;code&gt;force = true&lt;/code&gt; like in the example below:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#xA;    &#34;n&#34;,&#xA;    &#34;&amp;lt;leader&amp;gt;ns&#34;,&#xA;    &#34;&amp;lt;cmd&amp;gt;lua require(&#39;package-info&#39;).show({ force = true })&amp;lt;cr&amp;gt;&#34;,&#xA;    { silent = true, noremap = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Delete Dependency&lt;/h3&gt; &#xA; &lt;img src=&#34;https://github.com/vuki656/vuki656/raw/master/media/package-info/delete.gif&#34; width=&#34;500&#34;&gt; &#xA; &lt;p&gt;Runs &lt;code&gt;yarn remove&lt;/code&gt;, &lt;code&gt;npm uninstall&lt;/code&gt;, or &lt;code&gt;pnpm uninstall&lt;/code&gt; in the background and reloads the buffer.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Keybinding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#xA;    &#34;n&#34;,&#xA;    &#34;&amp;lt;leader&amp;gt;nd&#34;,&#xA;    &#34;&amp;lt;cmd&amp;gt;lua require(&#39;package-info&#39;).delete()&amp;lt;cr&amp;gt;&#34;,&#xA;    { silent = true, noremap = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Install Different Version&lt;/h3&gt; &#xA; &lt;img src=&#34;https://github.com/vuki656/vuki656/raw/master/media/package-info/change.gif&#34; width=&#34;500&#34;&gt; &#xA; &lt;p&gt;Runs &lt;code&gt;npm install dependency@version&lt;/code&gt;, &lt;code&gt;yarn upgrade dependency@version&lt;/code&gt;, or &lt;code&gt;pnpm update dependency&lt;/code&gt; in the background and reloads the buffer.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Keybinding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#xA;    &#34;n&#34;,&#xA;    &#34;&amp;lt;leader&amp;gt;np&#34;,&#xA;    &#34;&amp;lt;cmd&amp;gt;lua require(&#39;package-info&#39;).change_version()&amp;lt;cr&amp;gt;&#34;,&#xA;    { silent = true, noremap = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Install New Dependency&lt;/h3&gt; &#xA; &lt;img src=&#34;https://github.com/vuki656/vuki656/raw/master/media/package-info/install.gif&#34; width=&#34;500&#34;&gt; &#xA; &lt;p&gt;Runs &lt;code&gt;npm install dependency&lt;/code&gt;, &lt;code&gt;yarn add dependency&lt;/code&gt;, or &lt;code&gt;pnpm add dependency&lt;/code&gt; in the background and reloads the buffer.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Keybinding&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_set_keymap(&#xA;    &#34;n&#34;,&#xA;    &#34;&amp;lt;leader&amp;gt;ni&#34;,&#xA;    &#34;&amp;lt;cmd&amp;gt;lua require(&#39;package-info&#39;).install()&amp;lt;cr&amp;gt;&#34;,&#xA;    { silent = true, noremap = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;Loading Hook&lt;/h3&gt; &#xA; &lt;img src=&#34;https://github.com/vuki656/vuki656/raw/master/media/package-info/loading.gif&#34; width=&#34;500&#34;&gt; &#xA; &lt;p&gt;Function that can be placed anywhere to display the loading status from the plugin.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Usage&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It can be used anywhere in &lt;code&gt;neovim&lt;/code&gt; by invoking &lt;code&gt;return require(&#39;package-info&#39;).get_status()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local package_info = require(&#34;package-info&#34;)&#xA;&#xA;-- Galaxyline&#xA;section.left[10] = {&#xA;    PackageInfoStatus = {&#xA;        provider = function()&#xA;            return package_info.get_status()&#xA;        end,&#xA;    },&#xA;}&#xA;&#xA;-- Feline&#xA;components.right.active[5] = {&#xA;    provider = function()&#xA;        return package_info.get_status()&#xA;    end,&#xA;    hl = {&#xA;        style = &#34;bold&#34;,&#xA;    },&#xA;    left_sep = &#34;  &#34;,&#xA;    right_sep = &#34; &#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚡️ Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.6.0&lt;/li&gt; &#xA; &lt;li&gt;Npm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ryanoasis/nerd-fonts/tree/gh-pages&#34;&gt;Patched font&lt;/a&gt; if you want icons&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#34;vuki656/package-info.nvim&#34;,&#xA;    requires = &#34;MunifTanjim/nui.nvim&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;package-info&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Defaults&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    colors = {&#xA;        up_to_date = &#34;#3C4048&#34;, -- Text color for up to date dependency virtual text&#xA;        outdated = &#34;#d19a66&#34;, -- Text color for outdated dependency virtual text&#xA;    },&#xA;    icons = {&#xA;        enable = true, -- Whether to display icons&#xA;        style = {&#xA;            up_to_date = &#34;|  &#34;, -- Icon for up to date dependencies&#xA;            outdated = &#34;|  &#34;, -- Icon for outdated dependencies&#xA;        },&#xA;    },&#xA;    autostart = true -- Whether to autostart when `package.json` is opened&#xA;    hide_up_to_date = false -- It hides up to date versions when displaying virtual text&#xA;    hide_unstable_versions = false, -- It hides unstable versions from version list e.g next-11.1.3-canary3&#xA;    -- Can be `npm`, `yarn`, or `pnpm`. Used for `delete`, `install` etc...&#xA;    -- The plugin will try to auto-detect the package manager based on&#xA;    -- `yarn.lock` or `package-lock.json`. If none are found it will use the&#xA;    -- provided one, if nothing is provided it will use `yarn`&#xA;    package_manager = `yarn`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;256 Color Terminals&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the vim option &lt;code&gt;termguicolors&lt;/code&gt; is false, package-info switches to 256 color mode.&lt;/li&gt; &#xA; &lt;li&gt;In this mode &lt;a href=&#34;https://jonasjacek.github.io/colors/&#34;&gt;cterm color numbers&lt;/a&gt; are used instead of truecolor hex codes and the color defaults are:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;colors = {&#xA;    up_to_date = &#34;237&#34;, -- cterm Grey237&#xA;    outdated = &#34;173&#34;, -- cterm LightSalmon3&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⌨️ All Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Plugin has no default Keybindings&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can copy the ones below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Show dependency versions&#xA;vim.keymap.set({ &#34;n&#34; }, &#34;&amp;lt;LEADER&amp;gt;ns&#34;, require(&#34;package-info&#34;).show, { silent = true, noremap = true })&#xA;&#xA;-- Hide dependency versions&#xA;vim.keymap.set({ &#34;n&#34; }, &#34;&amp;lt;LEADER&amp;gt;nc&#34;, require(&#34;package-info&#34;).hide, { silent = true, noremap = true })&#xA;&#xA;-- Toggle dependency versions&#xA;vim.keymap.set({ &#34;n&#34; }, &#34;&amp;lt;LEADER&amp;gt;nt&#34;, require(&#34;package-info&#34;).toggle, { silent = true, noremap = true })&#xA;&#xA;-- Update dependency on the line&#xA;vim.keymap.set({ &#34;n&#34; }, &#34;&amp;lt;LEADER&amp;gt;nu&#34;, require(&#34;package-info&#34;).update, { silent = true, noremap = true })&#xA;&#xA;-- Delete dependency on the line&#xA;vim.keymap.set({ &#34;n&#34; }, &#34;&amp;lt;LEADER&amp;gt;nd&#34;, require(&#34;package-info&#34;).delete, { silent = true, noremap = true })&#xA;&#xA;-- Install a new dependency&#xA;vim.keymap.set({ &#34;n&#34; }, &#34;&amp;lt;LEADER&amp;gt;ni&#34;, require(&#34;package-info&#34;).install, { silent = true, noremap = true })&#xA;&#xA;-- Install a different dependency version&#xA;vim.keymap.set({ &#34;n&#34; }, &#34;&amp;lt;LEADER&amp;gt;np&#34;, require(&#34;package-info&#34;).change_version, { silent = true, noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🔭 Telescope&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Highly inspired by &lt;a href=&#34;https://github.com/tsakirist/telescope-lazy.nvim&#34;&gt;telescope-lazy.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).setup({&#xA;    extensions = {&#xA;        package_info = {&#xA;            -- Optional theme (the extension doesn&#39;t set a default theme)&#xA;            theme = &#34;ivy&#34;,&#xA;        },&#xA;    },&#xA;})&#xA;&#xA;require(&#34;telescope&#34;).load_extension(&#34;package_info&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Available Commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Telescope package_info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;📝 Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Display might be slow on a project with a lot of dependencies. This is due to the &lt;code&gt;npm outdated --json&lt;/code&gt; command taking a long time. Nothing can be done about that&lt;/li&gt; &#xA; &lt;li&gt;Idea was inspired by &lt;a href=&#34;https://github.com/akinsho&#34;&gt;akinsho&lt;/a&gt; and his &lt;a href=&#34;https://github.com/akinsho/dependency-assist.nvim&#34;&gt;dependency-assist.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Readme template stolen from &lt;a href=&#34;https://github.com/folke&#34;&gt;folke&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>