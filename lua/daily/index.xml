<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-17T01:35:31Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>woosaaahh/sj.nvim</title>
    <updated>2022-09-17T01:35:31Z</updated>
    <id>tag:github.com,2022-09-17:/woosaaahh/sj.nvim</id>
    <link href="https://github.com/woosaaahh/sj.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Search based navigation combined with quick jump features.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woosaaahh/sj.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woosaaahh/sj.nvim/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woosaaahh/sj.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woosaaahh/sj.nvim/main/#why-this-plugin&#34;&gt;Why this plugin ?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/woosaaahh/sj.nvim/main/#know-issues&#34;&gt;Known issues&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;SJ - Search and Jump&lt;/h1&gt; &#xA;&lt;p&gt;Search based navigation combined with quick jump features.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/woosaaahh/sj.nvim/main/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To use this plugin, you need :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to have &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;Neovim&lt;/a&gt; &lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/nightly&#34;&gt;&#39;nightly&#39;&lt;/a&gt; version installed ;&lt;/li&gt; &#xA; &lt;li&gt;to add &lt;code&gt;woosaaahh/sj.nvim&lt;/code&gt; in your plugin manager configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are some examples :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt; &lt;code&gt;Plug &#39;woosaaahh/sj.nvim&#39;&lt;/code&gt; ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; &lt;code&gt;use &#39;woosaaahh/sj.nvim&#39;&lt;/code&gt; ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/savq/paq-nvim&#34;&gt;paq-nvim&lt;/a&gt; &lt;code&gt;&#34;woosaaahh/sj.nvim&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this plugin is to quickly navigate to any characters/words that are visible in the current buffer and quickly jump to any match.&lt;/p&gt; &#xA;&lt;p&gt;To do so, use a keymap (&lt;a href=&#34;https://raw.githubusercontent.com/woosaaahh/sj.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;) and type a pattern.&lt;/p&gt; &#xA;&lt;p&gt;As soon as you use the keymap and start typing the pattern :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the highights in the buffer will change ;&lt;/li&gt; &#xA; &lt;li&gt;all matches will be highlighted and will have a label assigned to them ;&lt;/li&gt; &#xA; &lt;li&gt;the current pattern is displayed in the command line.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now you can :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;jump to the first match by pressing the &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; key or &lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt; ;&lt;/li&gt; &#xA; &lt;li&gt;jump to any matches by typing &lt;code&gt;:&lt;/code&gt;, then the label assigned to the match ;&lt;/li&gt; &#xA; &lt;li&gt;delete previous characters by pressing &lt;code&gt;&amp;lt;Backspace&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;Control-h&amp;gt;&lt;/code&gt; ;&lt;/li&gt; &#xA; &lt;li&gt;delete the pattern by pressing &lt;code&gt;&amp;lt;Control-u&amp;gt;&lt;/code&gt; ;&lt;/li&gt; &#xA; &lt;li&gt;cancel everything by pressing the &lt;code&gt;&amp;lt;Escape&amp;gt;&lt;/code&gt; key.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notes :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is an &lt;code&gt;auto_jump&lt;/code&gt; feature which will automatically jump to a match if it is the only one in the visible area. You will not have to type &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt; or &lt;code&gt;:&lt;/code&gt; and a label ;&lt;/li&gt; &#xA; &lt;li&gt;If there are no matches for the current pattern, the pattern in the command line will be displayed in a different color. Starting from &lt;code&gt;0.2.0&lt;/code&gt;, you can restore the last matching pattern by pressing &lt;code&gt;&amp;lt;Alt-Backspace&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here is the default configuration :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local config = {&#xA;&#x9;auto_jump = false, -- automatically jump if there is only one match&#xA;&#x9;use_overlay = true, -- apply an overlay to better identify labels and matches&#xA;&#x9;separator = &#34;:&#34;, -- separator used to extract pattern and label from the user input&#xA;&#x9;label_as_prefix = false, -- if true, the label will be positioned before the match&#xA;&#xA;&#x9;-- stylua: ignore&#xA;&#x9;labels = {&#xA;&#x9;&#x9;&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;, &#34;f&#34;, &#34;g&#34;, &#34;h&#34;, &#34;i&#34;, &#34;j&#34;, &#34;k&#34;, &#34;l&#34;, &#34;m&#34;,&#xA;&#x9;&#x9;&#34;n&#34;, &#34;o&#34;, &#34;p&#34;, &#34;q&#34;, &#34;r&#34;, &#34;s&#34;, &#34;t&#34;, &#34;u&#34;, &#34;v&#34;, &#34;w&#34;, &#34;x&#34;, &#34;y&#34;, &#34;z&#34;,&#xA;&#x9;&#x9;&#34;A&#34;, &#34;B&#34;, &#34;C&#34;, &#34;D&#34;, &#34;E&#34;, &#34;F&#34;, &#34;G&#34;, &#34;H&#34;, &#34;I&#34;, &#34;J&#34;, &#34;K&#34;, &#34;L&#34;, &#34;M&#34;,&#xA;&#x9;&#x9;&#34;N&#34;, &#34;O&#34;, &#34;P&#34;, &#34;Q&#34;, &#34;R&#34;, &#34;S&#34;, &#34;T&#34;, &#34;U&#34;, &#34;V&#34;, &#34;W&#34;, &#34;X&#34;, &#34;Y&#34;, &#34;Z&#34;,&#xA;&#x9;&#x9;&#34;0&#34;, &#34;1&#34;, &#34;2&#34;, &#34;3&#34;, &#34;4&#34;, &#34;5&#34;, &#34;6&#34;, &#34;7&#34;, &#34;8&#34;, &#34;9&#34;, &#34;,&#34;, &#34;;&#34;, &#34;!&#34;,&#xA;&#x9;},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and here is a configuration sample :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local sj = require(&#34;sj&#34;)&#xA;sj.setup({&#xA;&#x9;-- automatically jump on a match if it is the only one&#xA;&#x9;auto_jump = true,&#xA;&#x9;-- help to better identify labels and matches&#xA;&#x9;use_overlay = true,&#xA;&#x9;highlights = {&#xA;&#x9;&#x9;-- used for the labels&#xA;&#x9;&#x9;SjLabel = { bold = false },&#xA;&#x9;&#x9;-- used for everything that is not a match&#xA;&#x9;&#x9;SjOverlay = { bold = false, italic = false },&#xA;&#x9;&#x9;-- used to highlight matches&#xA;&#x9;&#x9;SjSearch = { bold = false },&#xA;&#x9;&#x9;-- used in the cmd line when the pattern has no matches&#xA;&#x9;&#x9;SjWarning = { bold = false },&#xA;&#x9;},&#xA;})&#xA;vim.keymap.set(&#34;n&#34;, &#34;s&#34;, sj.run)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Why this plugin ?&lt;/h2&gt; &#xA;&lt;p&gt;Using vertical/horizontal navigation with &lt;code&gt;&amp;lt;count&amp;gt;k/j&lt;/code&gt;, &lt;code&gt;:&amp;lt;count&amp;gt;&amp;lt;CR&amp;gt;&lt;/code&gt;, &lt;code&gt;H/M/L/f/F/t/T/,/;b/e/w^/$&lt;/code&gt;, is a very good way to navigate. But with the keyboards I use, I have to press the &lt;code&gt;&amp;lt;Shift&amp;gt;&lt;/code&gt; key to type numbers and some of them are a bit to far for my fingers. Once on the good line, I have to repeat pressing some vertical movement keys too much.&lt;/p&gt; &#xA;&lt;p&gt;When navigating in a buffer, I often find the search based navigation to be easier, faster and more precise. But if there are too many matches, I have to repeat pressing a key to cycle between the matches. By adding jump features with labels, I can quickly jump to the match I want.&lt;/p&gt; &#xA;&lt;p&gt;For me, one small caveat of the &#39;jump plugins&#39;, is that they generate the labels or &#39;hint keys&#39; based on the cursor position. That is understandable and efficient but within the same buffer area, it means that you can have different labels for the same pattern/position which make the keys sequence for a jump less predictables. Also, in some contexts, you don&#39;t know if you&#39;ll have to use a 1, 2 or 3 characters for the label.&lt;/p&gt; &#xA;&lt;p&gt;By using a search pattern with a 1 character label, you can narrow the list of labels and you already know all the keys except one character for the label.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is fairly new and some things might change in the next days or weeks.&lt;/p&gt; &#xA;&lt;p&gt;Right now :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;del&gt;I don&#39;t know how to catch the &lt;code&gt;&amp;lt;Backspace&amp;gt;&lt;/code&gt; key, hence the &lt;code&gt;&amp;lt;Control-h&amp;gt;&lt;/code&gt;&lt;/del&gt; modified by &lt;a href=&#34;https://github.com/woosaaahh/sj.nvim/commit/e18ae6141113a12c58c7d396dc995966bb1af28f&#34;&gt;e18ae614&lt;/a&gt; ;&lt;/li&gt; &#xA; &lt;li&gt;&lt;del&gt;If a match is at the beginning of an indentend line, there is an offset of the label&lt;/del&gt; modified by &lt;a href=&#34;https://github.com/woosaaahh/sj.nvim/commit/90b7b99becb5e9fcd1e9cdd03ee4b4f8ce4851db&#34;&gt;90b7b99b&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jevajs/Jeva</title>
    <updated>2022-09-17T01:35:31Z</updated>
    <id>tag:github.com,2022-09-17:/jevajs/Jeva</id>
    <link href="https://github.com/jevajs/Jeva" rel="alternate"></link>
    <summary type="html">&lt;p&gt;All scripts and code used through videos/tutorials on Jeva. Created and maintained by @ThatZiv&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jeva&lt;/h1&gt; &#xA;&lt;p&gt;All scripts and code used through videos/tutorials on Jeva&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>linkease/istore</title>
    <updated>2022-09-17T01:35:31Z</updated>
    <id>tag:github.com,2022-09-17:/linkease/istore</id>
    <link href="https://github.com/linkease/istore" rel="alternate"></link>
    <summary type="html">&lt;p&gt;一个 Openwrt 标准的软件中心，纯脚本实现，只依赖Openwrt标准组件。支持其它固件开发者集成到自己的固件里面。更方便入门用户搜索安装插件。The iStore is a app store for OpenWRT&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iStore&lt;/h1&gt; &#xA;&lt;h2&gt;介绍&lt;/h2&gt; &#xA;&lt;p&gt;iStore 是一个&lt;a href=&#34;https://github.com/linkease/istore&#34;&gt;开源&lt;/a&gt;且标准的 OpenWRT 软件中心实现。&lt;/p&gt; &#xA;&lt;p&gt;是属于易有云团队的固件 &lt;a href=&#34;https://github.com/istoreos&#34;&gt;iStoreOS&lt;/a&gt; 的一部分。&lt;/p&gt; &#xA;&lt;p&gt;iStore 的设计目标：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;方便用户安装插件&lt;/li&gt; &#xA; &lt;li&gt;每个插件都有教程，方便初学者入门使用插件&lt;/li&gt; &#xA; &lt;li&gt;适配所有的 OpenWRT 皮肤，以及移动端&lt;/li&gt; &#xA; &lt;li&gt;全部基于 OpenWRT 的标准接口开发，不用以前 KoolShare LEDE 的特有的插件风格的软件中心&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;iStore 的无法弥补的缺陷：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;因为 OpenWRT 版本特别多，导致不同平台的插件依赖不一样。所以即使你的系统能安装 iStore，iStore 里面的插件不一定能安装&lt;/li&gt; &#xA; &lt;li&gt;我们需要固件开发者自主集成 iStore，并解决 iStore 里面的各种插件的依赖&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;我们建议固件开发者集成 iStore，这样固件开发者只需要发布一个精简固件，用户可以按需安装自己喜欢的插件。还能共享插件的教程，独立更新某个插件版本。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;21版本的固件安装iStore需要依赖 &lt;code&gt;luci-compat&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;功能预览&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/linkease/istore/main/preview/istore-preview.png&#34; alt=&#34;istore-preview.png&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>