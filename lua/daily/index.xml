<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-28T01:35:13Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-tree/nvim-web-devicons</title>
    <updated>2022-11-28T01:35:13Z</updated>
    <id>tag:github.com,2022-11-28:/nvim-tree/nvim-web-devicons</id>
    <link href="https://github.com/nvim-tree/nvim-web-devicons" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lua `fork` of vim-web-devicons for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nvim-web-devicons&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;code&gt;lua&lt;/code&gt; fork of &lt;a href=&#34;https://github.com/ryanoasis/vim-devicons&#34;&gt;vim-devicons&lt;/a&gt;. This plugin provides the same icons &lt;em&gt;as well as&lt;/em&gt; colors for each icon.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;A patched font&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-tree/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use &#39;nvim-tree/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;This adds all the highlight groups for the devicons i.e. it calls &lt;code&gt;vim.api.nvim_set_hl&lt;/code&gt; for all icons this might need to be re-called in a &lt;code&gt;Colorscheme&lt;/code&gt; to re-apply cleared highlights if the color scheme changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.setup {&#xA; -- your personnal icons can go here (to override)&#xA; -- you can specify color or cterm_color instead of specifying both of them&#xA; -- DevIcon will be appended to `name`&#xA; override = {&#xA;  zsh = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#428850&#34;,&#xA;    cterm_color = &#34;65&#34;,&#xA;    name = &#34;Zsh&#34;&#xA;  }&#xA; };&#xA; -- globally enable different highlight colors per icon (default to true)&#xA; -- if set to false all icons will have the default icon&#39;s color&#xA; color_icons = true;&#xA; -- globally enable default icons (default to false)&#xA; -- will get overriden by `get_icons` option&#xA; default = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Icon&lt;/h3&gt; &#xA;&lt;p&gt;Get the icon for a given file by passing in the &lt;code&gt;name&lt;/code&gt;, the &lt;code&gt;extension&lt;/code&gt; and an &lt;em&gt;optional&lt;/em&gt; options &lt;code&gt;table&lt;/code&gt;. The name is passed in to check for an exact match e.g. &lt;code&gt;.bashrc&lt;/code&gt; if there is no exact name match the extension is used. Calls &lt;code&gt;.setup()&lt;/code&gt; if it hasn&#39;t already ran.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can used to change how the plugin works the keys include &lt;code&gt;default = &amp;lt;boolean&amp;gt;&lt;/code&gt;. If the default key is set to true this function will return a default if there is no matching icon e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, { default = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check if the setup function was already called with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.has_loaded()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get icon and color code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_icon_color&lt;/code&gt; differs from &lt;code&gt;get_icon&lt;/code&gt; only in the second return value. &lt;code&gt;get_icon_cterm_color&lt;/code&gt; returns cterm color instead of gui color &lt;code&gt;get_icon&lt;/code&gt; returns icon and highlight name. If you want to get color code, you can use this function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local icon, color = require&#39;nvim-web-devicons&#39;.get_icon_color(&#34;init.lua&#34;, &#34;lua&#34;)&#xA;assert(icon == &#34;&#34;)&#xA;assert(color == &#34;#51a0cf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get all icons&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to get all of the registered icons with the &lt;code&gt;get_icons()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icons()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be useful for debugging purposes or for creating custom highlights for each icon.&lt;/p&gt; &#xA;&lt;h3&gt;Set an icon&lt;/h3&gt; &#xA;&lt;p&gt;You can override individual icons with the &lt;code&gt;set_icon({...})&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_icon {&#xA;  zsh = {&#xA;    icon = &#34;&#34;,&#xA;    color = &#34;#428850&#34;,&#xA;    cterm_color = &#34;65&#34;,&#xA;    name = &#34;Zsh&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override the default icon with the &lt;code&gt;set_default_icon(icon, color)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_default_icon(&#39;&#39;, &#39;#6d8086&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting icons by filetype&lt;/h3&gt; &#xA;&lt;p&gt;You can get the icon and colors associated with a filetype using the &lt;code&gt;by_filetype&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).get_icon_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_colors_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_color_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_cterm_color_by_filetype(filetype, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These functions are the same as their counterparts without the &lt;code&gt;_by_filetype&lt;/code&gt; suffix, but they take a filetype instead of a name/extension.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;get_icon_name_by_filetype(filetype)&lt;/code&gt; to get the icon name associated with the filetype.&lt;/p&gt;</summary>
  </entry>
</feed>