<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-13T01:59:38Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hrsh7th/nvim-cmp</title>
    <updated>2022-06-13T01:59:38Z</updated>
    <id>tag:github.com,2022-06-13:/hrsh7th/nvim-cmp</id>
    <link href="https://github.com/hrsh7th/nvim-cmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A completion plugin for neovim coded in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-cmp&lt;/h1&gt; &#xA;&lt;p&gt;A completion engine plugin for neovim written in Lua. Completion sources are installed from external repositories and &#34;sourced&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/629908/139000570-3ac39587-a88b-43c6-b35e-207489719359.mp4&#34; width=&#34;100%&#34;&gt;&lt;/video&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Readme!&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;There is a Github issue that documents &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/issues/231&#34;&gt;breaking changes&lt;/a&gt; for nvim-cmp. Subscribe to the issue to be notified of upcoming breaking changes.&lt;/li&gt; &#xA; &lt;li&gt;This is my hobby project. You can support me via GitHub sponsors.&lt;/li&gt; &#xA; &lt;li&gt;Bug reports are welcome, but don&#39;t expect a fix unless you provide minimal configuration and steps to reproduce your issue.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Concept&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full support for LSP completion related capabilities&lt;/li&gt; &#xA; &lt;li&gt;Powerful customizability via Lua functions&lt;/li&gt; &#xA; &lt;li&gt;Smart handling of key mappings&lt;/li&gt; &#xA; &lt;li&gt;No flicker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;h3&gt;Recommended Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This example configuration uses &lt;code&gt;vim-plug&lt;/code&gt; as the plugin manager and &lt;code&gt;vim-vsnip&lt;/code&gt; as a snippet plugin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;call plug#begin(s:plug_dir)&#xA;Plug &#39;neovim/nvim-lspconfig&#39;&#xA;Plug &#39;hrsh7th/cmp-nvim-lsp&#39;&#xA;Plug &#39;hrsh7th/cmp-buffer&#39;&#xA;Plug &#39;hrsh7th/cmp-path&#39;&#xA;Plug &#39;hrsh7th/cmp-cmdline&#39;&#xA;Plug &#39;hrsh7th/nvim-cmp&#39;&#xA;&#xA;&#34; For vsnip users.&#xA;Plug &#39;hrsh7th/cmp-vsnip&#39;&#xA;Plug &#39;hrsh7th/vim-vsnip&#39;&#xA;&#xA;&#34; For luasnip users.&#xA;&#34; Plug &#39;L3MON4D3/LuaSnip&#39;&#xA;&#34; Plug &#39;saadparwaiz1/cmp_luasnip&#39;&#xA;&#xA;&#34; For ultisnips users.&#xA;&#34; Plug &#39;SirVer/ultisnips&#39;&#xA;&#34; Plug &#39;quangnguyen30192/cmp-nvim-ultisnips&#39;&#xA;&#xA;&#34; For snippy users.&#xA;&#34; Plug &#39;dcampos/nvim-snippy&#39;&#xA;&#34; Plug &#39;dcampos/cmp-snippy&#39;&#xA;&#xA;call plug#end()&#xA;&#xA;set completeopt=menu,menuone,noselect&#xA;&#xA;lua &amp;lt;&amp;lt;EOF&#xA;  -- Setup nvim-cmp.&#xA;  local cmp = require&#39;cmp&#39;&#xA;&#xA;  cmp.setup({&#xA;    snippet = {&#xA;      -- REQUIRED - you must specify a snippet engine&#xA;      expand = function(args)&#xA;        vim.fn[&#34;vsnip#anonymous&#34;](args.body) -- For `vsnip` users.&#xA;        -- require(&#39;luasnip&#39;).lsp_expand(args.body) -- For `luasnip` users.&#xA;        -- require(&#39;snippy&#39;).expand_snippet(args.body) -- For `snippy` users.&#xA;        -- vim.fn[&#34;UltiSnips#Anon&#34;](args.body) -- For `ultisnips` users.&#xA;      end,&#xA;    },&#xA;    window = {&#xA;      -- completion = cmp.config.window.bordered(),&#xA;      -- documentation = cmp.config.window.bordered(),&#xA;    },&#xA;    mapping = cmp.mapping.preset.insert({&#xA;      [&#39;&amp;lt;C-b&amp;gt;&#39;] = cmp.mapping.scroll_docs(-4),&#xA;      [&#39;&amp;lt;C-f&amp;gt;&#39;] = cmp.mapping.scroll_docs(4),&#xA;      [&#39;&amp;lt;C-Space&amp;gt;&#39;] = cmp.mapping.complete(),&#xA;      [&#39;&amp;lt;C-e&amp;gt;&#39;] = cmp.mapping.abort(),&#xA;      [&#39;&amp;lt;CR&amp;gt;&#39;] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.&#xA;    }),&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;nvim_lsp&#39; },&#xA;      { name = &#39;vsnip&#39; }, -- For vsnip users.&#xA;      -- { name = &#39;luasnip&#39; }, -- For luasnip users.&#xA;      -- { name = &#39;ultisnips&#39; }, -- For ultisnips users.&#xA;      -- { name = &#39;snippy&#39; }, -- For snippy users.&#xA;    }, {&#xA;      { name = &#39;buffer&#39; },&#xA;    })&#xA;  })&#xA;&#xA;  -- Set configuration for specific filetype.&#xA;  cmp.setup.filetype(&#39;gitcommit&#39;, {&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;cmp_git&#39; }, -- You can specify the `cmp_git` source if you were installed it.&#xA;    }, {&#xA;      { name = &#39;buffer&#39; },&#xA;    })&#xA;  })&#xA;&#xA;  -- Use buffer source for `/` (if you enabled `native_menu`, this won&#39;t work anymore).&#xA;  cmp.setup.cmdline(&#39;/&#39;, {&#xA;    mapping = cmp.mapping.preset.cmdline(),&#xA;    sources = {&#xA;      { name = &#39;buffer&#39; }&#xA;    }&#xA;  })&#xA;&#xA;  -- Use cmdline &amp;amp; path source for &#39;:&#39; (if you enabled `native_menu`, this won&#39;t work anymore).&#xA;  cmp.setup.cmdline(&#39;:&#39;, {&#xA;    mapping = cmp.mapping.preset.cmdline(),&#xA;    sources = cmp.config.sources({&#xA;      { name = &#39;path&#39; }&#xA;    }, {&#xA;      { name = &#39;cmdline&#39; }&#xA;    })&#xA;  })&#xA;&#xA;  -- Setup lspconfig.&#xA;  local capabilities = require(&#39;cmp_nvim_lsp&#39;).update_capabilities(vim.lsp.protocol.make_client_capabilities())&#xA;  -- Replace &amp;lt;YOUR_LSP_SERVER&amp;gt; with each lsp server you&#39;ve enabled.&#xA;  require(&#39;lspconfig&#39;)[&#39;&amp;lt;YOUR_LSP_SERVER&amp;gt;&#39;].setup {&#xA;    capabilities = capabilities&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Where can I find more completion sources?&lt;/h3&gt; &#xA;&lt;p&gt;Have a look at the &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki/List-of-sources&#34;&gt;Wiki&lt;/a&gt; and the &lt;code&gt;nvim-cmp&lt;/code&gt; &lt;a href=&#34;https://github.com/topics/nvim-cmp&#34;&gt;GitHub topic&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Where can I find advanced configuration examples?&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>folke/which-key.nvim</title>
    <updated>2022-06-13T01:59:38Z</updated>
    <id>tag:github.com,2022-06-13:/folke/which-key.nvim</id>
    <link href="https://github.com/folke/which-key.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üí• Create key bindings that stick. WhichKey is a lua plugin for Neovim 0.5 that displays a popup with possible keybindings of the command you started typing.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üí• Which Key&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; is a lua plugin for Neovim 0.5 that displays a popup with possible key bindings of the command you started typing. Heavily inspired by the original &lt;a href=&#34;https://github.com/justbur/emacs-which-key&#34;&gt;emacs-which-key&lt;/a&gt; and &lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;vim-which-key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439438-669f8d00-a804-11eb-9b5b-c7122bd9acac.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ú® Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;opens a popup with suggestions to complete a key binding&lt;/li&gt; &#xA; &lt;li&gt;works with any setting for &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;timeoutlen&#39;&#34;&gt;timeoutlen&lt;/a&gt;, including instantly (&lt;code&gt;timeoutlen=0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;works correctly with built-in key bindings&lt;/li&gt; &#xA; &lt;li&gt;works correctly with buffer-local mappings&lt;/li&gt; &#xA; &lt;li&gt;extensible plugin architecture&lt;/li&gt; &#xA; &lt;li&gt;built-in plugins: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;marks:&lt;/strong&gt; shows your marks when you hit one of the jump keys.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;registers:&lt;/strong&gt; shows the contents of your registers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;presets:&lt;/strong&gt; built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;spelling:&lt;/strong&gt; spelling suggestions inside the which-key popup&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;Plug &#39;folke/which-key.nvim&#39;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;  require(&#34;which-key&#34;).setup {&#xA;    -- your configuration comes here&#xA;    -- or leave it empty to use the default settings&#xA;    -- refer to the configuration section below&#xA;  }&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use {&#xA;  &#34;folke/which-key.nvim&#34;,&#xA;  config = function()&#xA;    require(&#34;which-key&#34;).setup {&#xA;      -- your configuration comes here&#xA;      -- or leave it empty to use the default settings&#xA;      -- refer to the configuration section below&#xA;    }&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è IMPORTANT: the timeout when &lt;strong&gt;WhichKey&lt;/strong&gt; opens is controlled by the vim setting &lt;a href=&#34;https://neovim.io/doc/user/options.html#&#39;timeoutlen&#39;&#34;&gt;timeoutlen&lt;/a&gt;. Please refer to the documentation to properly set it up. Setting it to &lt;code&gt;0&lt;/code&gt;, will effectively always show &lt;strong&gt;WhichKey&lt;/strong&gt; immediately, but a setting of &lt;code&gt;500&lt;/code&gt; (500ms) is probably more appropriate.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è don&#39;t create any keymappings yourself to trigger WhichKey. Unlike with &lt;em&gt;vim-which-key&lt;/em&gt;, we do this fully automatically. Please remove any left-over triggers you might have from using &lt;em&gt;vim-which-key&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üöë You can run &lt;code&gt;:checkhealth which_key&lt;/code&gt; to see if there&#39;s any conflicting keymaps that will prevent triggering &lt;strong&gt;WhichKey&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;WhichKey comes with the following defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  plugins = {&#xA;    marks = true, -- shows a list of your marks on &#39; and `&#xA;    registers = true, -- shows your registers on &#34; in NORMAL or &amp;lt;C-r&amp;gt; in INSERT mode&#xA;    spelling = {&#xA;      enabled = false, -- enabling this will show WhichKey when pressing z= to select spelling suggestions&#xA;      suggestions = 20, -- how many suggestions should be shown in the list?&#xA;    },&#xA;    -- the presets plugin, adds help for a bunch of default keybindings in Neovim&#xA;    -- No actual key bindings are created&#xA;    presets = {&#xA;      operators = true, -- adds help for operators like d, y, ... and registers them for motion / text object completion&#xA;      motions = true, -- adds help for motions&#xA;      text_objects = true, -- help for text objects triggered after entering an operator&#xA;      windows = true, -- default bindings on &amp;lt;c-w&amp;gt;&#xA;      nav = true, -- misc bindings to work with windows&#xA;      z = true, -- bindings for folds, spelling and others prefixed with z&#xA;      g = true, -- bindings for prefixed with g&#xA;    },&#xA;  },&#xA;  -- add operators that will trigger motion and text object completion&#xA;  -- to enable all native operators, set the preset / operators plugin above&#xA;  operators = { gc = &#34;Comments&#34; },&#xA;  key_labels = {&#xA;    -- override the label used to display some keys. It doesn&#39;t effect WK in any other way.&#xA;    -- For example:&#xA;    -- [&#34;&amp;lt;space&amp;gt;&#34;] = &#34;SPC&#34;,&#xA;    -- [&#34;&amp;lt;cr&amp;gt;&#34;] = &#34;RET&#34;,&#xA;    -- [&#34;&amp;lt;tab&amp;gt;&#34;] = &#34;TAB&#34;,&#xA;  },&#xA;  icons = {&#xA;    breadcrumb = &#34;¬ª&#34;, -- symbol used in the command line area that shows your active key combo&#xA;    separator = &#34;‚ûú&#34;, -- symbol used between a key and it&#39;s label&#xA;    group = &#34;+&#34;, -- symbol prepended to a group&#xA;  },&#xA;  popup_mappings = {&#xA;    scroll_down = &#39;&amp;lt;c-d&amp;gt;&#39;, -- binding to scroll down inside the popup&#xA;    scroll_up = &#39;&amp;lt;c-u&amp;gt;&#39;, -- binding to scroll up inside the popup&#xA;  },&#xA;  window = {&#xA;    border = &#34;none&#34;, -- none, single, double, shadow&#xA;    position = &#34;bottom&#34;, -- bottom, top&#xA;    margin = { 1, 0, 1, 0 }, -- extra window margin [top, right, bottom, left]&#xA;    padding = { 2, 2, 2, 2 }, -- extra window padding [top, right, bottom, left]&#xA;    winblend = 0&#xA;  },&#xA;  layout = {&#xA;    height = { min = 4, max = 25 }, -- min and max height of the columns&#xA;    width = { min = 20, max = 50 }, -- min and max width of the columns&#xA;    spacing = 3, -- spacing between columns&#xA;    align = &#34;left&#34;, -- align columns left, center or right&#xA;  },&#xA;  ignore_missing = false, -- enable this to hide mappings for which you didn&#39;t specify a label&#xA;  hidden = { &#34;&amp;lt;silent&amp;gt;&#34;, &#34;&amp;lt;cmd&amp;gt;&#34;, &#34;&amp;lt;Cmd&amp;gt;&#34;, &#34;&amp;lt;CR&amp;gt;&#34;, &#34;call&#34;, &#34;lua&#34;, &#34;^:&#34;, &#34;^ &#34;}, -- hide mapping boilerplate&#xA;  show_help = true, -- show help message on the command line when the popup is visible&#xA;  triggers = &#34;auto&#34;, -- automatically setup triggers&#xA;  -- triggers = {&#34;&amp;lt;leader&amp;gt;&#34;} -- or specify a list manually&#xA;  triggers_blacklist = {&#xA;    -- list of mode / prefixes that should never be hooked by WhichKey&#xA;    -- this is mostly relevant for key maps that start with a native binding&#xA;    -- most people should not need to change this&#xA;    i = { &#34;j&#34;, &#34;k&#34; },&#xA;    v = { &#34;j&#34;, &#34;k&#34; },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü™Ñ Setup&lt;/h2&gt; &#xA;&lt;p&gt;With the default settings, &lt;strong&gt;WhichKey&lt;/strong&gt; will work out of the box for most builtin keybindings, but the real power comes from documenting and organizing your own keybindings.&lt;/p&gt; &#xA;&lt;p&gt;To document and/or setup your own mappings, you need to call the &lt;code&gt;register&lt;/code&gt; method&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local wk = require(&#34;which-key&#34;)&#xA;wk.register(mappings, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default options for &lt;code&gt;opts&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  mode = &#34;n&#34;, -- NORMAL mode&#xA;  -- prefix: use &#34;&amp;lt;leader&amp;gt;f&#34; for example for mapping everything related to finding files&#xA;  -- the prefix is prepended to every mapping part of `mappings`&#xA;  prefix = &#34;&#34;,&#xA;  buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings&#xA;  silent = true, -- use `silent` when creating keymaps&#xA;  noremap = true, -- use `noremap` when creating keymaps&#xA;  nowait = false, -- use `nowait` when creating keymaps&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùï When you specify a command in your mapping that starts with &lt;code&gt;&amp;lt;Plug&amp;gt;&lt;/code&gt;, then we automatically set &lt;code&gt;noremap=false&lt;/code&gt;, since you always want recursive keybindings in this case&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;‚å®Ô∏è Mappings&lt;/h3&gt; &#xA;&lt;p&gt;Group names use the special &lt;code&gt;name&lt;/code&gt; key in the tables. There&#39;s multiple ways to define the mappings. &lt;code&gt;wk.register&lt;/code&gt; can be called multiple times from anywhere in your config files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local wk = require(&#34;which-key&#34;)&#xA;-- As an example, we will create the following mappings:&#xA;--  * &amp;lt;leader&amp;gt;ff find files&#xA;--  * &amp;lt;leader&amp;gt;fr show recent files&#xA;--  * &amp;lt;leader&amp;gt;fb Foobar&#xA;-- we&#39;ll document:&#xA;--  * &amp;lt;leader&amp;gt;fn new file&#xA;--  * &amp;lt;leader&amp;gt;fe edit file&#xA;-- and hide &amp;lt;leader&amp;gt;1&#xA;&#xA;wk.register({&#xA;  f = {&#xA;    name = &#34;file&#34;, -- optional group name&#xA;    f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; }, -- create a binding with label&#xA;    r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34;, noremap=false, buffer = 123 }, -- additional options for creating the keymap&#xA;    n = { &#34;New File&#34; }, -- just a label. don&#39;t create any mapping&#xA;    e = &#34;Edit File&#34;, -- same as above&#xA;    [&#34;1&#34;] = &#34;which_key_ignore&#34;,  -- special label to hide it in the popup&#xA;    b = { function() print(&#34;bar&#34;) end, &#34;Foobar&#34; } -- you can also pass functions!&#xA;  },&#xA;}, { prefix = &#34;&amp;lt;leader&amp;gt;&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see more examples&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- all of the mappings below are equivalent&#xA;&#xA;-- method 2&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;&#34;] = {&#xA;    f = {&#xA;      name = &#34;+file&#34;,&#xA;      f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;      r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;      n = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;    },&#xA;  },&#xA;})&#xA;&#xA;-- method 3&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;f&#34;] = {&#xA;    name = &#34;+file&#34;,&#xA;    f = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;    r = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;    n = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;  },&#xA;})&#xA;&#xA;-- method 4&#xA;wk.register({&#xA;  [&#34;&amp;lt;leader&amp;gt;f&#34;] = { name = &#34;+file&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;ff&#34;] = { &#34;&amp;lt;cmd&amp;gt;Telescope find_files&amp;lt;cr&amp;gt;&#34;, &#34;Find File&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;fr&#34;] = { &#34;&amp;lt;cmd&amp;gt;Telescope oldfiles&amp;lt;cr&amp;gt;&#34;, &#34;Open Recent File&#34; },&#xA;  [&#34;&amp;lt;leader&amp;gt;fn&#34;] = { &#34;&amp;lt;cmd&amp;gt;enew&amp;lt;cr&amp;gt;&#34;, &#34;New File&#34; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; The default label is &lt;code&gt;keymap.desc&lt;/code&gt; or &lt;code&gt;keymap.rhs&lt;/code&gt; or &lt;code&gt;&#34;&#34;&lt;/code&gt;, &lt;code&gt;:h nvim_set_keymap()&lt;/code&gt; to get more details about &lt;code&gt;desc&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;üöô Operators, Motions and Text Objects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;WhichKey&lt;/strong&gt; provides help to work with operators, motions and text objects.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;[count]operator[count][text-object]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;operators can be configured with the &lt;code&gt;operators&lt;/code&gt; option &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;set &lt;code&gt;plugins.presets.operators&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to automatically configure vim built-in operators&lt;/li&gt; &#xA;   &lt;li&gt;set this to &lt;code&gt;false&lt;/code&gt;, to only include the list you configured in the &lt;code&gt;operators&lt;/code&gt; option.&lt;/li&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L5&#34;&gt;here&lt;/a&gt; for the full list part of the preset&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;text objects are automatically retrieved from &lt;strong&gt;operator pending&lt;/strong&gt; key maps (&lt;code&gt;omap&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;set &lt;code&gt;plugins.presets.text_objects&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; to configure built-in text objects&lt;/li&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L43&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;motions are part of the preset &lt;code&gt;plugins.presets.motions&lt;/code&gt; setting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;see &lt;a href=&#34;https://github.com/folke/which-key.nvim/raw/main/lua/which-key/plugins/presets/init.lua#L20&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How to disable some operators? (like v)&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- make sure to run this code before calling setup()&#xA;-- refer to the full lists at https://github.com/folke/which-key.nvim/blob/main/lua/which-key/plugins/presets/init.lua&#xA;local presets = require(&#34;which-key.plugins.presets&#34;)&#xA;presets.operators[&#34;v&#34;] = nil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;When the &lt;strong&gt;WhichKey&lt;/strong&gt; popup is open, you can use the following key bindings (they are also displayed at the bottom of the screen):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;hit one of the keys to open a group or execute a key binding&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;esc&amp;gt;&lt;/code&gt; to cancel and close the popup&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;bs&amp;gt;&lt;/code&gt; go up one level&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c-d&amp;gt;&lt;/code&gt; scroll down&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;c-u&amp;gt;&lt;/code&gt; scroll up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Apart from the automatic opening, you can also manually open &lt;strong&gt;WhichKey&lt;/strong&gt; for a certain &lt;code&gt;prefix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ùóÔ∏è don&#39;t create any keymappings yourself to trigger WhichKey. Unlike with &lt;em&gt;vim-which-key&lt;/em&gt;, we do this fully automatically. Please remove any left-over triggers you might have from using &lt;em&gt;vim-which-key&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:WhichKey &#34; show all mappings&#xA;:WhichKey &amp;lt;leader&amp;gt; &#34; show all &amp;lt;leader&amp;gt; mappings&#xA;:WhichKey &amp;lt;leader&amp;gt; v &#34; show all &amp;lt;leader&amp;gt; mappings for VISUAL mode&#xA;:WhichKey &#39;&#39; v &#34; show ALL mappings for VISUAL mode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üî• Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Four built-in plugins are included with &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Marks&lt;/h3&gt; &#xA;&lt;p&gt;Shows a list of your buffer local and global marks when you hit ` or &#39;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439573-8f278700-a804-11eb-80ca-bb9263e6d937.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Registers&lt;/h3&gt; &#xA;&lt;p&gt;Shows a list of your buffer local and global registers when you hit &#34; in &lt;em&gt;NORMAL&lt;/em&gt; mode, or &lt;code&gt;&amp;lt;c-r&amp;gt;&lt;/code&gt; in &lt;em&gt;INSERT&lt;/em&gt; mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439609-98b0ef00-a804-11eb-9385-97c7d5ff4113.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Presets&lt;/h3&gt; &#xA;&lt;p&gt;Built-in key binding help for &lt;code&gt;motions&lt;/code&gt;, &lt;code&gt;text-objects&lt;/code&gt;, &lt;code&gt;operators&lt;/code&gt;, &lt;code&gt;windows&lt;/code&gt;, &lt;code&gt;nav&lt;/code&gt;, &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;g&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/116439871-df9ee480-a804-11eb-9529-800e167db65c.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Spelling&lt;/h3&gt; &#xA;&lt;p&gt;When enabled, this plugin hooks into &lt;code&gt;z=&lt;/code&gt; and replaces the full-screen spelling suggestions window by a list of suggestions within &lt;strong&gt;WhichKey&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/292349/118102022-1c361880-b38d-11eb-8e82-79ad266d9bb8.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üé® Colors&lt;/h2&gt; &#xA;&lt;p&gt;The table below shows all the highlight groups defined for &lt;strong&gt;WhichKey&lt;/strong&gt; with their default link.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;   &lt;th&gt;Defaults to&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKey&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Function&lt;/td&gt; &#xA;   &lt;td&gt;the key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyGroup&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Keyword&lt;/td&gt; &#xA;   &lt;td&gt;a group&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeySeparator&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;DiffAdded&lt;/td&gt; &#xA;   &lt;td&gt;the separator between the key and its label&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyDesc&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Identifier&lt;/td&gt; &#xA;   &lt;td&gt;the label of the key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyFloat&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;   &lt;td&gt;Normal in the popup window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;WhichKeyValue&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Comment&lt;/td&gt; &#xA;   &lt;td&gt;used by plugins that provide values&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-disable-file MD033 --&gt; &#xA;&lt;!-- markdownlint-configure-file { &#34;MD013&#34;: { &#34;line_length&#34;: 120 } } --&gt; &#xA;&lt;!-- markdownlint-configure-file { &#34;MD004&#34;: { &#34;style&#34;: &#34;sublist&#34; } } --&gt;</summary>
  </entry>
  <entry>
    <title>ThePrimeagen/harpoon</title>
    <updated>2022-06-13T01:59:38Z</updated>
    <id>tag:github.com,2022-06-13:/ThePrimeagen/harpoon</id>
    <link href="https://github.com/ThePrimeagen/harpoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Harpoon&lt;/h1&gt; &#xA; &lt;h5&gt;Getting you where you want with the fewest keystrokes.&lt;/h5&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://www.lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://neovim.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim%200.5+-green.svg?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ThePrimeagen/harpoon/master/harpoon.png&#34; alt=&#34;Harpoon&#34;&gt; -- image provided by &lt;strong&gt;Bob Rust&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚áÅ WIP&lt;/h2&gt; &#xA;&lt;p&gt;This is not fully baked, though used by several people. If you experience any issues, see some improvement you think would be amazing, or just have some feedback for harpoon (or me), make an issue!&lt;/p&gt; &#xA;&lt;h2&gt;‚áÅ The Problems:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You&#39;re working on a codebase. medium, large, tiny, whatever. You find yourself frequenting a small set of files and you are tired of using a fuzzy finder, &lt;code&gt;:bnext&lt;/code&gt; &amp;amp; &lt;code&gt;:bprev&lt;/code&gt; are getting too repetitive, alternate file doesn&#39;t quite cut it, etc etc.&lt;/li&gt; &#xA; &lt;li&gt;You want to execute some project specific commands or have any number of persistent terminals that can be easily navigated to.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;‚áÅ The Solutions:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The ability to specify, or on the fly, mark and create persisting key strokes to go to the files you want.&lt;/li&gt; &#xA; &lt;li&gt;Unlimited terminals and navigation.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;‚áÅ Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim 0.5.0+ required&lt;/li&gt; &#xA; &lt;li&gt;install using your favorite plugin manager (&lt;code&gt;vim-plug&lt;/code&gt; in this example)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39; &#34; don&#39;t forget to add this one if you don&#39;t have it yet!&#xA;Plug &#39;ThePrimeagen/harpoon&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚áÅ Harpooning&lt;/h2&gt; &#xA;&lt;p&gt;here we&#39;ll explain how to wield the power of the harpoon:&lt;/p&gt; &#xA;&lt;h3&gt;Marks&lt;/h3&gt; &#xA;&lt;p&gt;you mark files you want to revisit later on&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.mark&#34;).add_file()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Navigation&lt;/h3&gt; &#xA;&lt;p&gt;view all project marks with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).toggle_quick_menu()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can go up and down the list, enter, delete or reorder. &lt;code&gt;q&lt;/code&gt; and &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; exit and save the menu&lt;/p&gt; &#xA;&lt;p&gt;you also can switch to any mark without bringing up the menu, use the below with the desired mark index&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).nav_file(3)                  -- navigates to file 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can also cycle the list in both directions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua require(&#34;harpoon.ui&#34;).nav_next()                   -- navigates to next mark&#xA;:lua require(&#34;harpoon.ui&#34;).nav_prev()                   -- navigates to previous mark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Terminal Navigation&lt;/h3&gt; &#xA;&lt;p&gt;this works like file navigation except that if there is no terminal at the specified index a new terminal is created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.term&#34;).gotoTerminal(1)             -- navigates to term 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commands to Terminals&lt;/h3&gt; &#xA;&lt;p&gt;commands can be sent to any terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.term&#34;).sendCommand(1, &#34;ls -La&#34;)    -- sends ls -La to tmux window 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;further more commands can be stored for later quick&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#39;harpoon.cmd-ui&#39;).toggle_quick_menu()       -- shows the commands menu&#xA;lua require(&#34;harpoon.term&#34;).sendCommand(1, 1)           -- sends command 1 to term 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tmux Support&lt;/h3&gt; &#xA;&lt;p&gt;tmux is supported out of the box and can be used as a drop-in replacement to normal terminals by simply switching &lt;code&gt;&#39;term&#39; with &#39;tmux&#39;&lt;/code&gt; like so&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.tmux&#34;).gotoTerminal(1)             -- goes to the first tmux window&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(1, &#34;ls -La&#34;)    -- sends ls -La to tmux window 1&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(1, 1)           -- sends command 1 to tmux window 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sendCommand&lt;/code&gt; and &lt;code&gt;goToTerminal&lt;/code&gt; also accept any valid &lt;a href=&#34;https://man7.org/linux/man-pages/man1/tmux.1.html#COMMANDS&#34;&gt;tmux pane identifier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua require(&#34;harpoon.tmux&#34;).gotoTerminal(&#34;{down-of}&#34;)   -- focus the pane directly below&#xA;lua require(&#34;harpoon.tmux&#34;).sendCommand(&#34;%3&#34;, &#34;ls&#34;)     -- send a command to the pane with id &#39;%3&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you switch to a tmux window you can always switch back to neovim, this is a little bash script that will switch to the window which is running neovim.&lt;/p&gt; &#xA;&lt;p&gt;In your &lt;code&gt;tmux.conf&lt;/code&gt; (or anywhere you have keybinds), add this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bind-key -r G run-shell &#34;path-to-harpoon/harpoon/scripts/tmux/switch-back-to-nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Telescope Support&lt;/h3&gt; &#xA;&lt;p&gt;1st register harpoon as a telescope extension&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;telescope&#34;).load_extension(&#39;harpoon&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;currently only marks are supported in telescope&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Telescope harpoon marks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚áÅ Configuration&lt;/h2&gt; &#xA;&lt;p&gt;if configuring harpoon is desired it must be done through harpoons setup function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;harpoon&#34;).setup({ ... })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Global Settings&lt;/h3&gt; &#xA;&lt;p&gt;here are all the available global settings with their default values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;global_settings = {&#xA;    -- sets the marks upon calling `toggle` on the ui, instead of require `:w`.&#xA;    save_on_toggle = false,&#xA;&#xA;    -- saves the harpoon file upon every change. disabling is unrecommended.&#xA;    save_on_change = true,&#xA;&#xA;    -- sets harpoon to run the command immediately as it&#39;s passed to the terminal when calling `sendCommand`.&#xA;    enter_on_sendcmd = false,&#xA;&#xA;    -- closes any tmux windows harpoon that harpoon creates when you close Neovim.&#xA;    tmux_autoclose_windows = false,&#xA;&#xA;    -- filetypes that you want to prevent from adding to the harpoon list menu.&#xA;    excluded_filetypes = { &#34;harpoon&#34; },&#xA;&#xA;    -- set marks specific to each git branch inside git repository&#xA;    mark_branch = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preconfigured Terminal Commands&lt;/h3&gt; &#xA;&lt;p&gt;to preconfigure terminal commands for later use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;projects = {&#xA;    -- Yes $HOME works&#xA;    [&#34;$HOME/personal/vim-with-me/server&#34;] = {&#xA;        term = {&#xA;            cmds = {&#xA;                &#34;./env &amp;amp;&amp;amp; npx ts-node src/index.ts&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚áÅ Logging&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;logs are written to &lt;code&gt;harpoon.log&lt;/code&gt; within the nvim cache path (&lt;code&gt;:echo stdpath(&#34;cache&#34;)&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;available log levels are &lt;code&gt;trace&lt;/code&gt;, &lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, or &lt;code&gt;fatal&lt;/code&gt;. &lt;code&gt;warn&lt;/code&gt; is default&lt;/li&gt; &#xA; &lt;li&gt;log level can be set with &lt;code&gt;vim.g.harpoon_log_level&lt;/code&gt; (must be &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;setup()&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;launching nvim with &lt;code&gt;HARPOON_LOG=debug nvim&lt;/code&gt; takes precedence over &lt;code&gt;vim.g.harpoon_log_level&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;invalid values default back to &lt;code&gt;warn&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚áÅ Others&lt;/h2&gt; &#xA;&lt;h4&gt;How do Harpoon marks differ from vim global marks&lt;/h4&gt; &#xA;&lt;p&gt;they serve a similar purpose however harpoon marks differ in a few key ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;They auto update their position within the file&lt;/li&gt; &#xA; &lt;li&gt;They are saved &lt;em&gt;per project&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;They can be hand edited vs replaced (swapping is easier)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;The Motivation behind Harpoon terminals&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;I want to use the terminal since I can gF and &#xA;  &lt;c-w&gt;&#xA;   gF to any errors arising from execution that are within the terminal that are not appropriate for something like dispatch. (not just running tests but perhaps a server that runs for X amount of time before crashing).&#xA;  &lt;/c-w&gt;&lt;/li&gt; &#xA; &lt;li&gt;I want the terminal to be persistent and I can return to one of many terminals with some finger wizardry and reparse any of the execution information that was not necessarily error related.&lt;/li&gt; &#xA; &lt;li&gt;I would like to have commands that can be tied to terminals and sent them without much thinking. Some sort of middle ground between vim-test and just typing them into a terminal (configuring netflix&#39;s television project isn&#39;t quite building and there are tons of ways to configure).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Use a dynamic width for the Harpoon popup menu&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes the default width of &lt;code&gt;60&lt;/code&gt; is not wide enough. The following example demonstrates how to configure a custom width by setting the menu&#39;s width relative to the current window&#39;s width.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;harpoon&#34;).setup({&#xA;    menu = {&#xA;        width = vim.api.nvim_win_get_width(0) - 4,&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚áÅ Social&lt;/h2&gt; &#xA;&lt;p&gt;For questions about Harpoon, there&#39;s a #harpoon channel on &lt;a href=&#34;https://discord.gg/theprimeagen&#34;&gt;the Primagen&#39;s Discord&lt;/a&gt; server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/theprimeagen&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.twitch.tv/theprimeagen&#34;&gt;Twitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/ThePrimeagen&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>