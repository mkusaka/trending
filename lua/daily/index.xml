<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-26T01:47:08Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mfussenegger/nvim-jdtls</title>
    <updated>2022-06-26T01:47:08Z</updated>
    <id>tag:github.com,2022-06-26:/mfussenegger/nvim-jdtls</id>
    <link href="https://github.com/mfussenegger/nvim-jdtls" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extensions for the built-in LSP support in Neovim for eclipse.jdt.ls&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-jdtls&lt;/h1&gt; &#xA;&lt;p&gt;Extensions for the built-in &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;Language Server Protocol&lt;/a&gt; support in &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt; (&amp;gt;= 0.6.0) for &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Audience&lt;/h2&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS principle&lt;/a&gt; and targets users with some experience with Neovim, Java and its build tools Maven or Gradle who prefer configuration as code over GUI configuration. Easy of use is not the main priority.&lt;/p&gt; &#xA;&lt;p&gt;If you prioritize easy of use over simplicity, you may want to use an alternative:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc-java&#34;&gt;coc-java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.eclipse.org/ide/&#34;&gt;Eclipse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;organize_imports&lt;/code&gt; function to organize imports&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;extract_variable&lt;/code&gt; function to introduce a local variable&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;extract_constant&lt;/code&gt; function to extract a constant&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;extract_method&lt;/code&gt; function to extract a block of code into a method&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Open class file contents&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Code action extensions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate constructors&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate &lt;code&gt;toString&lt;/code&gt; function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;hashCode&lt;/code&gt; and &lt;code&gt;equals&lt;/code&gt; generation.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Extract variables or methods&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Generate delegate methods&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Move package, instance method, static method or type&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;javap&lt;/code&gt; command to show bytecode of current file&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;jol&lt;/code&gt; command to show memory usage of current file (&lt;code&gt;jol_path&lt;/code&gt; must be set)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;jshell&lt;/code&gt; command to open up jshell with classpath from project set&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Debugger support via &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls/issues/3&#34;&gt;a demo&lt;/a&gt; to see some of the functionality in action.&lt;/p&gt; &#xA;&lt;h2&gt;Plugin Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim (&amp;gt;= 0.6.0)&lt;/li&gt; &#xA; &lt;li&gt;nvim-jdtls is a plugin. Install it like any other Vim plugin: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-jdtls&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-jdtls&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language Server Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt; by following their &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls#installation&#34;&gt;Installation instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;To configure &lt;code&gt;nvim-jdtls&lt;/code&gt;, add the following in &lt;code&gt;ftplugin/java.lua&lt;/code&gt; within the neovim configuration base directory (e.g. &lt;code&gt;~/.config/nvim/ftplugin/java.lua&lt;/code&gt;, see &lt;code&gt;:help base-directory&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Watch out for the 💀, it indicates that you must adjust something.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- See `:help vim.lsp.start_client` for an overview of the supported `config` options.&#xA;local config = {&#xA;  -- The command that starts the language server&#xA;  -- See: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line&#xA;  cmd = {&#xA;&#xA;    -- 💀&#xA;    &#39;java&#39;, -- or &#39;/path/to/java11_or_newer/bin/java&#39;&#xA;            -- depends on if `java` is in your $PATH env variable and if it points to the right version.&#xA;&#xA;    &#39;-Declipse.application=org.eclipse.jdt.ls.core.id1&#39;,&#xA;    &#39;-Dosgi.bundles.defaultStartLevel=4&#39;,&#xA;    &#39;-Declipse.product=org.eclipse.jdt.ls.core.product&#39;,&#xA;    &#39;-Dlog.protocol=true&#39;,&#xA;    &#39;-Dlog.level=ALL&#39;,&#xA;    &#39;-Xms1g&#39;,&#xA;    &#39;--add-modules=ALL-SYSTEM&#39;,&#xA;    &#39;--add-opens&#39;, &#39;java.base/java.util=ALL-UNNAMED&#39;,&#xA;    &#39;--add-opens&#39;, &#39;java.base/java.lang=ALL-UNNAMED&#39;,&#xA;&#xA;    -- 💀&#xA;    &#39;-jar&#39;, &#39;/path/to/jdtls_install_location/plugins/org.eclipse.equinox.launcher_VERSION_NUMBER.jar&#39;,&#xA;         -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^&#xA;         -- Must point to the                                                     Change this to&#xA;         -- eclipse.jdt.ls installation                                           the actual version&#xA;&#xA;&#xA;    -- 💀&#xA;    &#39;-configuration&#39;, &#39;/path/to/jdtls_install_location/config_SYSTEM&#39;,&#xA;                    -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^^^^^&#xA;                    -- Must point to the                      Change to one of `linux`, `win` or `mac`&#xA;                    -- eclipse.jdt.ls installation            Depending on your system.&#xA;&#xA;&#xA;    -- 💀&#xA;    -- See `data directory configuration` section in the README&#xA;    &#39;-data&#39;, &#39;/path/to/unique/per/project/workspace/folder&#39;&#xA;  },&#xA;&#xA;  -- 💀&#xA;  -- This is the default if not provided, you can remove it. Or adjust as needed.&#xA;  -- One dedicated LSP server &amp;amp; client will be started per unique root_dir&#xA;  root_dir = require(&#39;jdtls.setup&#39;).find_root({&#39;.git&#39;, &#39;mvnw&#39;, &#39;gradlew&#39;}),&#xA;&#xA;  -- Here you can configure eclipse.jdt.ls specific settings&#xA;  -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request&#xA;  -- for a list of options&#xA;  settings = {&#xA;    java = {&#xA;    }&#xA;  },&#xA;&#xA;  -- Language server `initializationOptions`&#xA;  -- You need to extend the `bundles` with paths to jar files&#xA;  -- if you want to use additional eclipse.jdt.ls plugins.&#xA;  --&#xA;  -- See https://github.com/mfussenegger/nvim-jdtls#java-debug-installation&#xA;  --&#xA;  -- If you don&#39;t plan on using the debugger or other eclipse.jdt.ls plugins you can remove this&#xA;  init_options = {&#xA;    bundles = {}&#xA;  },&#xA;}&#xA;-- This starts a new client &amp;amp; server,&#xA;-- or attaches to an existing client &amp;amp; server depending on the `root_dir`.&#xA;require(&#39;jdtls&#39;).start_or_attach(config)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;ftplugin/java.lua&lt;/code&gt; logic is executed each time a &lt;code&gt;FileType&lt;/code&gt; event triggers. This happens every time you open a &lt;code&gt;.java&lt;/code&gt; file or when you invoke &lt;code&gt;:set ft=java&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;You can also find more &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls/wiki/Sample-Configurations&#34;&gt;complete configuration examples in the Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have trouble getting jdtls to work, please read the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h3&gt;data directory configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;eclipse.jdt.ls&lt;/code&gt; stores project specific data within the folder set via the &lt;code&gt;-data&lt;/code&gt; flag. If you&#39;re using &lt;code&gt;eclipse.jdt.ls&lt;/code&gt; with multiple different projects you must use a dedicated data directory per project.&lt;/p&gt; &#xA;&lt;p&gt;An example how you could accomplish that is to infer the workspace directory name from the current working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- If you started neovim within `~/dev/xy/project-1` this would resolve to `project-1`&#xA;local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), &#39;:p:h:t&#39;)&#xA;&#xA;local workspace_dir = &#39;/path/to/workspace-root/&#39; .. project_name&#xA;--                                               ^^&#xA;--                                               string concattenation in Lua&#xA;&#xA;local config = {&#xA;  cmd = {&#xA;    ...,&#xA;&#xA;    &#39;-data&#39;, workspace_dir,&#xA;&#xA;    ...,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;...&lt;/code&gt; is not valid Lua in this context. It is meant as placeholder for the other options from the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#configuration&#34;&gt;Configuration&lt;/a&gt; section above.)&lt;/p&gt; &#xA;&lt;h3&gt;nvim-lspconfig and nvim-jdtls differences&lt;/h3&gt; &#xA;&lt;p&gt;Both nvim-lspconfig and nvim-jdtls use the client built into neovim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;  ┌────────────┐           ┌────────────────┐&#xA;  │ nvim-jdtls │           │ nvim-lspconfig │&#xA;  └────────────┘           └────────────────┘&#xA;       |                         |&#xA;      start_or_attach           nvim_lsp.jdtls.setup&#xA;       │                              |&#xA;       │                             setup java filetype hook&#xA;       │    ┌─────────┐                  │&#xA;       └───►│ vim.lsp │◄─────────────────┘&#xA;            └─────────┘&#xA;                .start_client&#xA;                .buf_attach_client&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some differences between the two:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;setup&lt;/code&gt; of lspconfig creates a &lt;code&gt;java&lt;/code&gt; &lt;code&gt;filetype&lt;/code&gt; hook itself and provides some defaults for the &lt;code&gt;cmd&lt;/code&gt; of the &lt;code&gt;config&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; delegates the choice when to call &lt;code&gt;start_or_attach&lt;/code&gt; to the user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; adds some logic to handle &lt;code&gt;jdt://&lt;/code&gt; URIs. These are necessary to load source code from third party libraries or the JDK.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; adds some additional handlers and sets same extra capabilities to enable all the extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You could use either to start the &lt;code&gt;eclipse.jdt.ls&lt;/code&gt; client, but it is recommended to use the &lt;code&gt;start_or_attach&lt;/code&gt; method from &lt;code&gt;nvim-jdtls&lt;/code&gt; because of the additional capabilities it configures and because of the &lt;code&gt;jdt://&lt;/code&gt; URI handling.&lt;/p&gt; &#xA;&lt;p&gt;You &lt;strong&gt;must not&lt;/strong&gt; use both at the same time for java. You&#39;d end up with two clients and two language server instances.&lt;/p&gt; &#xA;&lt;h3&gt;UI picker customization&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;: You can get a better UI for code-actions and other functions by overriding the &lt;code&gt;jdtls.ui&lt;/code&gt; picker. See &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls/wiki/UI-Extensions&#34;&gt;UI Extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; extends the capabilities of the built-in LSP support in Neovim, so all the functions mentioned in &lt;code&gt;:help lsp&lt;/code&gt; will work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; provides some extras, for those you&#39;ll want to create additional mappings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;nnoremap &amp;lt;A-o&amp;gt; &amp;lt;Cmd&amp;gt;lua require&#39;jdtls&#39;.organize_imports()&amp;lt;CR&amp;gt;&#xA;nnoremap crv &amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_variable()&amp;lt;CR&amp;gt;&#xA;vnoremap crv &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_variable(true)&amp;lt;CR&amp;gt;&#xA;nnoremap crc &amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_constant()&amp;lt;CR&amp;gt;&#xA;vnoremap crc &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_constant(true)&amp;lt;CR&amp;gt;&#xA;vnoremap crm &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;jdtls&#39;).extract_method(true)&amp;lt;CR&amp;gt;&#xA;&#xA;&#xA;-- If using nvim-dap&#xA;-- This requires java-debug and vscode-java-test bundles, see install steps in this README further below.&#xA;nnoremap &amp;lt;leader&amp;gt;df &amp;lt;Cmd&amp;gt;lua require&#39;jdtls&#39;.test_class()&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;leader&amp;gt;dn &amp;lt;Cmd&amp;gt;lua require&#39;jdtls&#39;.test_nearest_method()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some methods are better exposed via commands. As a shortcut you can also call &lt;code&gt;:lua require(&#39;jdtls.setup&#39;).add_commands()&lt;/code&gt; to declare these.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s recommended to call &lt;code&gt;add_commands&lt;/code&gt; within the &lt;code&gt;on_attach&lt;/code&gt; handler that can be set on the &lt;code&gt;config&lt;/code&gt; table which is passed to &lt;code&gt;start_or_attach&lt;/code&gt;. If you use jdtls together with nvim-dap, call &lt;code&gt;add_commands&lt;/code&gt; &lt;em&gt;after&lt;/em&gt; &lt;code&gt;setup_dap&lt;/code&gt; to ensure it includes debugging related commands. (More about this is in the debugger setup section further below)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimL&#34;&gt;command! -buffer -nargs=? -complete=custom,v:lua.require&#39;jdtls&#39;._complete_compile JdtCompile lua require(&#39;jdtls&#39;).compile(&amp;lt;f-args&amp;gt;)&#xA;command! -buffer -nargs=? -complete=custom,v:lua.require&#39;jdtls&#39;._complete_set_runtime JdtSetRuntime lua require(&#39;jdtls&#39;).set_runtime(&amp;lt;f-args&amp;gt;)&#xA;command! -buffer JdtUpdateConfig lua require(&#39;jdtls&#39;).update_project_config()&#xA;command! -buffer JdtJol lua require(&#39;jdtls&#39;).jol()&#xA;command! -buffer JdtBytecode lua require(&#39;jdtls&#39;).javap()&#xA;command! -buffer JdtJshell lua require(&#39;jdtls&#39;).jshell()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Reference&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;code&gt;:help jdtls&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugger (via nvim-dap)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; provides integration with &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Once setup correctly, it enables the following additional functionality:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Debug applications via explicit configurations&lt;/li&gt; &#xA; &lt;li&gt;Debug automatically discovered main classes&lt;/li&gt; &#xA; &lt;li&gt;Debug junit tests. Either whole classes or individual test methods&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For 1 &amp;amp; 2 to work, &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt; needs to load the &lt;a href=&#34;https://github.com/microsoft/java-debug&#34;&gt;java-debug&lt;/a&gt; extension. For 3 to work, it also needs to load the &lt;a href=&#34;https://github.com/microsoft/vscode-java-test&#34;&gt;vscode-java-test&lt;/a&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;For usage instructions once installed, read the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; help. Debugging junit test classes or methods will be possible via these two functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;jdtls&#39;.test_class()&#xA;require&#39;jdtls&#39;.test_nearest_method()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;java-debug installation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone &lt;a href=&#34;https://github.com/microsoft/java-debug&#34;&gt;java-debug&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigate into the cloned repository (&lt;code&gt;cd java-debug&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./mvnw clean install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set or extend the &lt;code&gt;initializationOptions&lt;/code&gt; (= &lt;code&gt;init_options&lt;/code&gt; of the &lt;code&gt;config&lt;/code&gt; from &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#Configuration&#34;&gt;configuration&lt;/a&gt;) as follows:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config[&#39;init_options&#39;] = {&#xA;  bundles = {&#xA;    vim.fn.glob(&#34;path/to/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-*.jar&#34;)&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nvim-dap setup&lt;/h3&gt; &#xA;&lt;p&gt;You also need to call &lt;code&gt;require(&#39;jdtls&#39;).setup_dap()&lt;/code&gt; to have it register a &lt;code&gt;java&lt;/code&gt; adapter.&lt;/p&gt; &#xA;&lt;p&gt;To do that, extend the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#Configuration&#34;&gt;configuration&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config[&#39;on_attach&#39;] = function(client, bufnr)&#xA;  -- With `hotcodereplace = &#39;auto&#39; the debug adapter will try to apply code changes&#xA;  -- you make during a debug session immediately.&#xA;  -- Remove the option if you do not want that.&#xA;  require(&#39;jdtls&#39;).setup_dap({ hotcodereplace = &#39;auto&#39; })&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nvim-dap configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-jdtls&lt;/code&gt; includes functionality to discover main classes and create &lt;code&gt;nvim-dap&lt;/code&gt; configuration entries for them.&lt;/p&gt; &#xA;&lt;p&gt;To discover the main classes you have to call &lt;code&gt;require(&#39;jdtls.dap&#39;).setup_dap_main_class_configs()&lt;/code&gt; or use the &lt;code&gt;JdtRefreshDebugConfigs&lt;/code&gt; command. It will only discover classes once eclipse.jdt.ls fully loaded the project. Depending on the project that may take a while. Because of that, calling &lt;code&gt;require(&#39;jdtls.dap&#39;).setup_dap_main_class_configs()&lt;/code&gt; as part of an &lt;code&gt;on_attach&lt;/code&gt; handler may not work well.&lt;/p&gt; &#xA;&lt;p&gt;For manual configuration see &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Java&#34;&gt;nvim-dap Adapter Installation Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get an overview of all available &lt;code&gt;attach&lt;/code&gt; and &lt;code&gt;launch&lt;/code&gt; options, take a look at &lt;a href=&#34;https://github.com/microsoft/vscode-java-debug#options&#34;&gt;java-debug options&lt;/a&gt;. Keep in mind that any &lt;code&gt;java.debug&lt;/code&gt; options are settings of the vscode-java client extension and not understood by the debug-adapter itself.&lt;/p&gt; &#xA;&lt;h3&gt;vscode-java-test installation&lt;/h3&gt; &#xA;&lt;p&gt;To be able to debug junit tests, it is necessary to install the bundles from &lt;a href=&#34;https://github.com/microsoft/vscode-java-test&#34;&gt;vscode-java-test&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Navigate into the folder (&lt;code&gt;cd vscode-java-test&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run build-plugin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extend the bundles in the nvim-jdtls config:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;-- This bundles definition is the same as in the previous section (java-debug installation)&#xA;local bundles = {&#xA;  vim.fn.glob(&#34;path/to/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-*.jar&#34;),&#xA;};&#xA;&#xA;-- This is the new part&#xA;vim.list_extend(bundles, vim.split(vim.fn.glob(&#34;/path/to/microsoft/vscode-java-test/server/*.jar&#34;), &#34;\n&#34;))&#xA;config[&#39;init_options&#39;] = {&#xA;  bundles = bundles;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;The client exits with an error / eclipse.jdt.ls stopped working&lt;/h3&gt; &#xA;&lt;p&gt;This can have two reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your &lt;code&gt;cmd&lt;/code&gt; definition in the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#configuration&#34;&gt;Configuration&lt;/a&gt; is wrong.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Check the log files. Use &lt;code&gt;:JdtShowLogs&lt;/code&gt; or open the log file manually. &lt;code&gt;:lua print(vim.fn.stdpath(&#39;cache&#39;))&lt;/code&gt; lists the path, there should be a &lt;code&gt;lsp.log&lt;/code&gt;. You may have to increase the log level. See &lt;code&gt;:help vim.lsp.set_log_level()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure you can start the language server standalone by invoking the &lt;code&gt;cmd&lt;/code&gt; defined in the configuration manually within a terminal.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;The data folder got corrupted.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Wipe the folder and ensure that it is in a dedicated directory and not within your project repository. See &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#data-directory-configuration&#34;&gt;data directory configuration&lt;/a&gt;. You can use &lt;code&gt;:JdtWipeDataAndRestart&lt;/code&gt; to do this.&lt;/p&gt; &#xA;&lt;h3&gt;Nothing happens when opening a Java file and I can&#39;t use any &lt;code&gt;vim.lsp.buf&lt;/code&gt; functions&lt;/h3&gt; &#xA;&lt;p&gt;This can have several reasons:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;You didn&#39;t follow &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#configuration&#34;&gt;Configuration&lt;/a&gt; closely and aren&#39;t invoking &lt;code&gt;require(&#39;jdtls&#39;).start_or_attach(config)&lt;/code&gt; as part of a &lt;code&gt;java&lt;/code&gt; &lt;code&gt;filetype&lt;/code&gt; event. Go back to the configuration section and follow it closely.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You made a mistake in your configuration and there is a failure happening when you open the file. Try &lt;code&gt;:set ft=java&lt;/code&gt; and look at the &lt;code&gt;:messages&lt;/code&gt; output.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;eclipse.jdt.ls is starting but it cannot recognize your project, or it cannot import it properly. Try running &lt;code&gt;:JdtCompile full&lt;/code&gt; or &lt;code&gt;:lua require(&#39;jdtls&#39;).compile(&#39;full&#39;)&lt;/code&gt;. It should open the &lt;code&gt;quickfix&lt;/code&gt; list with errors if eclipse.jdt.ls started but cannot handle your project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Check the log files. Use &lt;code&gt;:JdtShowLogs&lt;/code&gt; or open the log file manually. &lt;code&gt;:lua print(vim.fn.stdpath(&#39;cache&#39;))&lt;/code&gt; lists the path, there should be a &lt;code&gt;lsp.log&lt;/code&gt;. You may have to increase the log level. See &lt;code&gt;:help vim.lsp.set_log_level()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Error: Unable to access jarfile&lt;/h3&gt; &#xA;&lt;p&gt;Either the file doesn&#39;t exist or you&#39;re using &lt;code&gt;~&lt;/code&gt; characters in your path. Neovim doesn&#39;t automatically expand &lt;code&gt;~&lt;/code&gt; characters in the &lt;code&gt;cmd&lt;/code&gt; definition. You either need to write them out or wrap the fragments in &lt;code&gt;vim.fn.expand&lt;/code&gt; calls.&lt;/p&gt; &#xA;&lt;h3&gt;Unrecognized option: --add-modules=ALL-SYSTEM&lt;/h3&gt; &#xA;&lt;p&gt;Eclipse.jdt.ls requires at least Java 11. You&#39;re using a lower version.&lt;/p&gt; &#xA;&lt;h3&gt;is a non-project file, only syntax errors are reported&lt;/h3&gt; &#xA;&lt;p&gt;You&#39;re opening a single file without having a Gradle or Maven project. You need to use Gradle or Maven for the full functionality.&lt;/p&gt; &#xA;&lt;h3&gt;Java XY language features are not available&lt;/h3&gt; &#xA;&lt;p&gt;You need to set the language level via the Gradle or Maven configuration.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re starting eclipse.jdt.ls with a Java version that&#39;s different from the one the project uses, you need to configure the available Java runtimes. Add them to the &lt;code&gt;config&lt;/code&gt; from the &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-jdtls/master/#configuration&#34;&gt;configuration section&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local config = {&#xA;  ..., -- not valid Lua, this is a placeholder for your other properties.&#xA;  settings = {&#xA;    java = {&#xA;      configuration = {&#xA;        -- See https://github.com/eclipse/eclipse.jdt.ls/wiki/Running-the-JAVA-LS-server-from-the-command-line#initialize-request&#xA;        -- And search for `interface RuntimeOption`&#xA;        -- The `name` is NOT arbitrary, but must match one of the elements from `enum ExecutionEnvironment` in the link above&#xA;        runtimes = {&#xA;          {&#xA;            name = &#34;JavaSE-11&#34;,&#xA;            path = &#34;/usr/lib/jvm/java-11-openjdk/&#34;,&#xA;          },&#xA;          {&#xA;            name = &#34;JavaSE-17&#34;,&#xA;            path = &#34;/usr/lib/jvm/java-17-openjdk/&#34;,&#xA;          },&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the language level at runtime using the &lt;code&gt;:JdtSetRuntime&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Diagnostics and completion suggestions are slow&lt;/h3&gt; &#xA;&lt;p&gt;Completion requests can be quite expensive on big projects. If you&#39;re using some kind of auto-completion plugin that triggers completion requests automatically, consider deactivating it or tuning it so it is less aggressive. Triggering a completion request on each typed character is likely overloading &lt;a href=&#34;https://github.com/eclipse/eclipse.jdt.ls&#34;&gt;eclipse.jdt.ls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Newly added dependencies are not found&lt;/h3&gt; &#xA;&lt;p&gt;You can try running &lt;code&gt;:JdtUpdateConfig&lt;/code&gt; to refresh the configuration. If that doesn&#39;t work you&#39;ll need to restart the language server.&lt;/p&gt; &#xA;&lt;h3&gt;Language server doesn&#39;t find classes that should be there&lt;/h3&gt; &#xA;&lt;p&gt;The language server supports &lt;a href=&#34;https://gradle.org/&#34;&gt;gradle&lt;/a&gt; and &lt;a href=&#34;https://maven.apache.org/ref/3.8.4/&#34;&gt;maven&lt;/a&gt; as build tools. Your project should either have a &lt;code&gt;pom.xml&lt;/code&gt; or &lt;code&gt;settings.gradle&lt;/code&gt; and &lt;code&gt;build.gradle&lt;/code&gt; file to declare the dependencies.&lt;/p&gt; &#xA;&lt;p&gt;As an alternative you could manually specify the dependencies within your nvim-jdtls configuration like the following, but this is not recommended.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;config.settings = {&#xA;    java = {&#xA;      project = {&#xA;        referencedLibraries = {&#xA;          &#39;/path/to/dependencyA.jar&#39;,&#xA;          &#39;/path/to/dependencyB.jar&#39;,&#xA;        },&#xA;      }&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you modify files outside of Neovim (for example with a git checkout), the language client and language server may not detect these changes and the state of the file on disk diverges with the mental model of the language server. If that happens, you need to open all changed files within Neovim and reload them with &lt;code&gt;:e!&lt;/code&gt; to synchronize the state.&lt;/p&gt; &#xA;&lt;h3&gt;Indentation settings from eclipse formatting configuration are not recognized&lt;/h3&gt; &#xA;&lt;p&gt;This is expected. The Neovim &lt;code&gt;shiftwidth&lt;/code&gt; and &lt;code&gt;tabstop&lt;/code&gt; settings have a higher priority.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brainfucksec/neovim-lua</title>
    <updated>2022-06-26T01:47:08Z</updated>
    <id>tag:github.com,2022-06-26:/brainfucksec/neovim-lua</id>
    <link href="https://github.com/brainfucksec/neovim-lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim KISS configuration with Lua&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/logo.png&#34; alt=&#34;neovim-lua_logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; Neovim KISS configuration with Lua &lt;/h3&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#directory-tree&#34;&gt;Directory Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#files-and-settings&#34;&gt;Files and Settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#lsp-configuration&#34;&gt;LSP Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#appearance&#34;&gt;Appearance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#configuration-check&#34;&gt;Configuration Check&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#screenshots&#34;&gt;Screenshots&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; - A use-package inspired plugin manager for Neovim&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;feline.nvim&lt;/a&gt; - A minimal, stylish and customizable statusline for Neovim written in Lua&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt; - A collection of common configurations for Neovim&#39;s built-in language server client&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; - Auto completion plugin&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt; - Snippet Engine for Neovim written in Lua&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt; - A File Explorer written In Lua&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;indentBlankline&lt;/a&gt; - Adds indentation guides to all lines (including empty lines)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/windwp/nvim-autopairs&#34;&gt;nvim-autopairs&lt;/a&gt; - A super powerful autopairs for Neovim&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/preservim/tagbar&#34;&gt;Tagbar&lt;/a&gt; - A class outline viewer for Vim&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns&lt;/a&gt; - Super fast git decorations implemented purely in lua/teal&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; - Nvim Treesitter configurations and abstraction layer&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt;alpha-nvim&lt;/a&gt; - A fast and highly customizable greeter for neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt; - A Lua fork of vim-devicons&lt;/p&gt; &#xA;&lt;h2&gt;Directory Tree&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;${HOME}/.config/nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;├── lua&#xA;│&amp;nbsp;&amp;nbsp; ├── core&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── autocmds.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── colors.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── keymaps.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── options.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── statusline.lua&#xA;│&amp;nbsp;&amp;nbsp; ├── plugins&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── alpha-nvim.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── indent-blankline.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── nvim-cmp.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── nvim-lspconfig.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── nvim-tree.lua&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── nvim-treesitter.lua&#xA;│&amp;nbsp;&amp;nbsp; └── packer_init.lua&#xA;├── plugin&#xA;│&amp;nbsp;&amp;nbsp; └── packer_compiled.lua&#xA;└── init.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Files and Settings&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;/nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/init.lua&#34;&gt;init.lua&lt;/a&gt;: Main configuration file that call &lt;code&gt;lua&lt;/code&gt; modules&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua&#34;&gt;lua&lt;/a&gt;: Folder of &lt;code&gt;lua&lt;/code&gt; modules, here reside all the Lua modules that needed. These modules are called from &lt;code&gt;init.lua&lt;/code&gt; file (see below).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide#where-to-put-lua-files&#34;&gt;https://github.com/nanotee/nvim-lua-guide#where-to-put-lua-files&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/nvim/lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/packer_init.lua&#34;&gt;packer_init.lua&lt;/a&gt;: Load plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;/nvim/lua/core&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/autocmds.lua&#34;&gt;autocmds.lua&lt;/a&gt;: Define autocommands with Lua APIs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/colors.lua&#34;&gt;colors.lua&lt;/a&gt;: Define Neovim and plugins color scheme&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/keymaps.lua&#34;&gt;keymaps.lua&lt;/a&gt;: Keymaps configuration file, vim/neovim and plugins keymaps&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/options.lua&#34;&gt;options.lua&lt;/a&gt;: General Neovim settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/statusline.lua&#34;&gt;statusline.lua&lt;/a&gt;: Statusline configuration file&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;/nvim/lua/plugins&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/packer.lua&#34;&gt;packer.lua&lt;/a&gt;: Plugin manager settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/alpha-nvim.lua&#34;&gt;alpha-nvim.lua&lt;/a&gt;: Dashboard&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/indent-blankline.lua&#34;&gt;indent-blankline.lua&lt;/a&gt;: Indent line&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/nvim-cmp.lua&#34;&gt;nvim-cmp.lua&lt;/a&gt;: Autocompletion settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/nvim-lspconfig.lua&#34;&gt;nvim-lspconfig.lua&lt;/a&gt;: LSP configuration (language servers, keybinding)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;: File manager settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;: Treesitter interface configuration&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/neovim/neovim/releases/latest&#34;&gt;Neovim v0.7.x&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.nerdfonts.com/font-downloads&#34;&gt;Nerd Fonts&lt;/a&gt;, (for the font of the screenshots install &lt;a href=&#34;https://github.com/slavfox/Cozette&#34;&gt;Cozette Font&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://github.com/npm/cli&#34;&gt;npm&lt;/a&gt; for download packages of LSP language servers, see: &lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/#lsp-configuration&#34;&gt;LSP Configuration&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a backup of your current &lt;code&gt;nvim&lt;/code&gt; folder if necessary:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;mv ~/.config/nvim ~/.config/nvim.backup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Download neovim-lua with &lt;code&gt;git&lt;/code&gt; and copy the &lt;code&gt;nvim&lt;/code&gt; folder in the &lt;code&gt;${HOME}/.config&lt;/code&gt; directory:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;git clone https://github.com/brainfucksec/neovim-lua.git&#xA;cd neovim-lua/&#xA;cp -Rv nvim ~/.config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; for install and manage the plugins:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;git clone --depth 1 https://github.com/wbthomason/packer.nvim\&#xA; ~/.local/share/nvim/site/pack/packer/start/packer.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Run Neovim with &lt;code&gt;PackerSync&lt;/code&gt; command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;nvim +PackerSync&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;LSP Configuration&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install LSP language servers with &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;sudo npm install -g bash-language-server pyright vscode-langservers-extracted typescript typescript-language-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install additional packages for plugins support:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;C, C++:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://clangd.llvm.org/installation.html&#34;&gt;clang&lt;/a&gt; for use LSP with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#clangd&#34;&gt;clangd&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;ctags&lt;/a&gt; to view tags with &lt;a href=&#34;https://github.com/preservim/tagbar&#34;&gt;Tagbar&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Python:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/pynvim&#34;&gt;pynvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Open a source file of one of the supported languages with Neovim, and run command &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig#built-in-commands&#34;&gt;:LspInfo&lt;/a&gt; for testing the LSP support.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Languages Currently Supported&lt;/h3&gt; &#xA;&lt;p&gt;Lua - &lt;a href=&#34;https://neovim.io/doc/user/lua.html&#34;&gt;builtin&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Bash - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#bashls&#34;&gt;bashls&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Python - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#pyright&#34;&gt;pyright&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;C, C++ - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#clangd&#34;&gt;clangd&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;HTML, CSS, JSON - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#html&#34;&gt;vscode-html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JavaScript, TypeScript - &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#tsserver&#34;&gt;tsserver&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md&#34;&gt;nvim-lspconfig #doc/server_configurations.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Appearance&lt;/h2&gt; &#xA;&lt;h3&gt;Available Colorschemes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/navarasu/onedark.nvim&#34;&gt;OneDark&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/tanvirtin/monokai.nvim&#34;&gt;Neovim Monokai&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/rose-pine/neovim&#34;&gt;Rose Pine&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fonts:&lt;/strong&gt; &lt;a href=&#34;https://github.com/slavfox/Cozette&#34;&gt;Cozette&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Icons:&lt;/strong&gt; &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The color scheme is defined in the following files (default: OneDark):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim UI - &lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/core/colors.lua&#34;&gt;nvim/lua/core/colors.lua&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Load nvim color scheme:&#xA;...color_scheme = pcall(require, &#39;onedark&#39;)&#xA;require(&#39;onedark&#39;).setup {&#xA;    style = &#39;darker&#39;&#xA;}&#xA;require(&#39;onedark&#39;).load()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Statusline - &lt;a href=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/nvim/lua/plugins/feline.lua&#34;&gt;nvim/lua/plugins/feline.lua&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Set colorscheme (from core/colors.lua/colorscheme_name)&#xA;local colors = require(&#39;core/colors&#39;).onedark_dark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration check&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open nvim and run command &lt;code&gt;checkhealth&lt;/code&gt;, you should not see any error in the output (except for the one related to the Python 2 interpreter if don&#39;t have it):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:checkhealth&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/checkhealth.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can also use the &lt;code&gt;startuptime&lt;/code&gt; option to read the nvim startup logs:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-term&#34;&gt;nvim --startuptime &amp;gt; /tmp/nvim-start.log&#xA;&#xA;nvim /tmp/nvim-start.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See: &lt;code&gt;:help startuptime&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/banner.png&#34;&gt; &lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt; &lt;b&gt;(Click to expand)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;strong&gt;OneDark (darker)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/1-onedark_1.png&#34; alt=&#34;onedark_1&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/2-onedark_2.png&#34; alt=&#34;onedark_2&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Monokai&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/3-monokai_1.png&#34; alt=&#34;monokai_1&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/4-monokai_2.png&#34; alt=&#34;monokai_2&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Rosé Pine&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/5-rose-pine_1.png&#34; alt=&#34;rose-pine_1&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/brainfucksec/neovim-lua/main/img/6-rose-pine_2.png&#34; alt=&#34;rose-pine_2&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Guides and resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://neovim.io/doc/user/lua.html&#34;&gt;https://neovim.io/doc/user/lua.html&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide&#34;&gt;https://github.com/nanotee/nvim-lua-guide&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://dev.to/vonheikemen/everything-you-need-to-know-to-configure-neovim-using-lua-3h58&#34;&gt;https://dev.to/vonheikemen/everything-you-need-to-know-to-configure-neovim-using-lua-3h58&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.old.reddit.com/r/neovim/&#34;&gt;https://www.old.reddit.com/r/neovim/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other Neovim Lua projects and examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/LunarVim/Neovim-from-scratch&#34;&gt;https://github.com/LunarVim/Neovim-from-scratch&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/siduck76/NvChad&#34;&gt;https://github.com/siduck76/NvChad&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/artart222/CodeArt&#34;&gt;https://github.com/artart222/CodeArt&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/crivotz/nv-ide&#34;&gt;https://github.com/crivotz/nv-ide&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lua resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Lua in Y minutes - &lt;a href=&#34;https://learnxinyminutes.com/docs/lua/&#34;&gt;https://learnxinyminutes.com/docs/lua/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lua Quick Guide - &lt;a href=&#34;https://github.com/medwatt/Notes/raw/main/Lua/Lua_Quick_Guide.ipynb&#34;&gt;https://github.com/medwatt/Notes/blob/main/Lua/Lua_Quick_Guide.ipynb&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lua 5.4 Reference Manual - &lt;a href=&#34;https://www.lua.org/manual/5.4/&#34;&gt;https://www.lua.org/manual/5.4/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;As all my setups I try to follow the &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS&lt;/a&gt; principle, probably some concepts may not be valid for everyone. Then feel free to take what you need but &lt;strong&gt;don&#39;t install anything without checking first!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Thanks to all the authors of the sources mentioned above, to all the others from whom I &#34;stole&#34; some configs and thanks to the users of /r/Neovim subreddit for the support of the configuration :)&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nshen/learn-neovim-lua</title>
    <updated>2022-06-26T01:47:08Z</updated>
    <id>tag:github.com,2022-06-26:/nshen/learn-neovim-lua</id>
    <link href="https://github.com/nshen/learn-neovim-lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim 配置实战：从 0 到 1 打造自己的 IDE&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;📜 Neovim 配置实战：从 0 到 1 打造自己的 IDE&lt;/h2&gt; &#xA;&lt;p&gt;《学习 Neovim 全 lua 配置》已经在稀土掘金专业编辑的指点下完全重写。&lt;/p&gt; &#xA;&lt;p&gt;新名字是：&lt;a href=&#34;https://juejin.cn/book/7051157342770954277&#34;&gt;《Neovim 配置实战：从 0 到 1 打造自己的 IDE》&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;好消息是新版本由掘金专业把关，目录经过了优化，解释也更加详细，所有动图都重新截取了。&lt;/p&gt; &#xA;&lt;p&gt;内容翻新的同时代码也进行了比较大幅的改动，文章质量肯定更高了。&lt;/p&gt; &#xA;&lt;p&gt;坏消息是变成了收费小册了，但价格不高，现在预售中，前 7 天是限时最低折扣可直接无脑付款，后来的朋友可以找我索取最低 7 折的折扣码。&lt;/p&gt; &#xA;&lt;p&gt;第一次写收费小册，希望大家能够少喝一杯咖啡，十几块钱支持一下。&lt;/p&gt; &#xA;&lt;p&gt;但如果你跟我一样手头很紧的话也仍然可以查看 &lt;a href=&#34;https://github.com/nshen/learn-neovim-lua/tree/bak&#34;&gt;旧版备份&lt;/a&gt;，但旧版不会再更新了。&lt;/p&gt; &#xA;&lt;h2&gt;新版购买链接&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://juejin.cn/book/7051157342770954277&#34;&gt;Neovim 配置实战：从 0 到 1 打造自己的 IDE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;下边是掘金小册介绍：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/181506/158575190-4cc79ee3-1485-45d6-a82c-6449242cbfc7.jpg&#34; alt=&#34;0a0f17793e35487d939955ce1ddc1ba5_tplv-k3u1fbpfcp-watermark&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;由于近来 VSCode 越来越臃肿，已经逐渐脱离了其高性能、轻量级的定位。而随着 Neovim 0.5+ 版本的发布，内置 LSP 的支持，让 Lua&amp;nbsp; 成了编辑器的一等语言，使得古老的 VIM 编辑器变得更加现代化了。&lt;/p&gt; &#xA;&lt;p&gt;加上这些年 Windows 系统的快速发展 ，WSL2 、Windows Terminal 的推出，Windows 命令行也有了 UTF8、GPU 加速文本渲染引擎的支持，使我们有能力，也有理由转到更加轻便高效、面向未来的 Neovim 编辑器上做程序开发，提升开发效率。&lt;/p&gt; &#xA;&lt;p&gt;如果你在 Google 上搜索 &#34;Years of Vim&#34; ，会看到很多高手都已经用 VIM 编辑器 10 年以上了，他们都会一直维护一个属于自己独一无二的配置，彼此各不相同，通过不断地调教，使之越来越适合自己，达到了“人剑合一”的境界。&lt;/p&gt; &#xA;&lt;p&gt;学会调教 &amp;nbsp;Neovim&amp;nbsp; 在程序开发生涯中是非常有意义的一件事，&lt;strong&gt;让编辑器适配你的习惯，而不是无限地追赶编辑器的更新，也是成为“10 倍速程序员”必经之路。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;这里展示一下学完本小册后，大致的配置效果：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/181506/158575466-2d3be027-a4a3-482f-b884-02b20f66fba3.gif&#34; alt=&#34;features2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;从 VSCode 转移到 Neovim 时 ，我也看了很多文档，参考了很多配置资料，尝试了很多插件，走了很多弯路，最终我对 Neovim 的配置已经完全可以满足我对代码编辑器的需求了。我把配置方法写成小册，通过对这个小册的学习，你也可以把 Neovim&amp;nbsp; 配置成你希望的样子，也许跟我的完全不同。&lt;/p&gt; &#xA;&lt;p&gt;小册分为 &lt;strong&gt;基建篇&lt;/strong&gt; 和 &lt;strong&gt;代码篇&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;在 &lt;strong&gt;基建篇&lt;/strong&gt; 中，我们会先从安装 Neovim 开始，介绍配置文件位置，以及我们应该如何组织配置文件、快捷键如何设置、插件如何安装和管理。然后通过逐个介绍目前流行的插件安装方式和使用方法来补全文本编辑器所需的所有功能。&lt;/p&gt; &#xA;&lt;p&gt;基建篇完成后，你将会得到一个现代化的文本编辑器。&lt;/p&gt; &#xA;&lt;p&gt;在 &lt;strong&gt;代码篇&lt;/strong&gt; 中，我们会补全程序开发相关的功能，包括如何实现代码高亮、什么是内置 LSP、如何配置内置 LSP、代码如何补全 代码格式化、UI 可否美化等。之后还会专门针对前端开发和 rust 开发所必备的插件配置介绍，一步一步帮助你将手中的 Neovim 装配成 VSCode 般的开发环境。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0540cdcdd8314d198eb79cead70442c7~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;xmind.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;你会学到什么？&lt;/h2&gt; &#xA;&lt;p&gt;本小册包含大量&lt;strong&gt;动图演示&lt;/strong&gt;，章节相对独立，参照配置每完成一章，即可立刻看到反馈效果。总的来说，你将收获：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于最新版本的 Neovim ，从零开始基于 Lua 搭建现代化 Neovim 开发环境。&lt;/li&gt; &#xA; &lt;li&gt;了解 Neovim 的配置原理与思路，以及完整的配套源码。&lt;/li&gt; &#xA; &lt;li&gt;最重要的是你会得到属于你的专属 Neovim 版本。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/645c93365927495aa51f7951b5437d8c~tplv-k3u1fbpfcp-watermark.image?&#34; alt=&#34;0-2.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;适宜人群&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;适合有一点 VIM 基础的使用者（至少知道怎么编辑文件和退出 VIM 😁）。&lt;/li&gt; &#xA; &lt;li&gt;有程序开发基础，有可以访问 Github 的网络环境，想要提升开发效率与开发体验的程序开发人员。&lt;/li&gt; &#xA; &lt;li&gt;想要系统学习 Neovim 配置，却被网上零散过时的 VIM 配置教程困扰的同学们。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>