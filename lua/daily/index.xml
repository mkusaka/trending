<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-05T01:49:10Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jerrykuku/luci-app-vssr</title>
    <updated>2022-06-05T01:49:10Z</updated>
    <id>tag:github.com,2022-06-05:/jerrykuku/luci-app-vssr</id>
    <link href="https://github.com/jerrykuku/luci-app-vssr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HelloWorld是一个以用户最佳主观体验为导向的插件，它支持多种主流协议和多种自定义视频分流服务，拥有精美的操作界面，并配上直观的节点信息。&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/jerrykuku/staff/master/helloworld-logo1.png&#34; width=&#34;500px&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt; An OpenWrt Internet surfing plug-in &lt;/h1&gt; &#xA; &lt;h3 align=&#34;center&#34;&gt; HelloWorld是一个以用户最佳主观体验为导向的插件，它支持多种主流协议和多种自定义视频分流服务，拥有精美的操作界面，并配上直观的节点信息。&lt;br&gt;&lt;br&gt; &lt;/h3&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/jerrykuku/luci-app-vssr/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-brightgreen.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jerrykuku/luci-app-vssr/pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jerrykuku/luci-app-vssr/issues/new&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Issues-welcome-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jerrykuku/luci-app-vssr/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/release-v1.25-blue.svg?&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/jerrykuku/luci-app-vssr/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/jerrykuku/luci-app-vssr/total&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://t.me/PIN1Group&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Contact-telegram-blue&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;b&gt;&lt;br&gt;支持全部类型的节点分流&lt;/b&gt;&lt;br&gt; 目前只适配最新版 argon主题 （其他主题下应该也可以用 但显示应该不会很完美）&lt;br&gt; 目前Lean最新版本的openwrt 已经可以直接拉取源码到 package/lean 下直接进行勾选并编译。&lt;/p&gt; &#xA;&lt;h3&gt;更新日志 2022-04-23 v1.25&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;UPDATE: 适配19.07 LuCI。&lt;/li&gt; &#xA; &lt;li&gt;FIX: 继续优化订阅节点时旗帜匹配的准确性。&lt;/li&gt; &#xA; &lt;li&gt;FIX: 优化了一些block的间距问题，同时优化了暗黑模式下的颜色显示【最好搭配最新版argon主题】。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;详情见&lt;a href=&#34;https://raw.githubusercontent.com/jerrykuku/luci-app-vssr/master/relnotes.txt&#34;&gt;具体日志&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;插件介绍&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;基于 Lean ssrp 全新MOD的 Hello World ,在原插件的基础上做了一些优化用户操作体验的修改，感谢插件原作者所做出的的努力和贡献！&lt;/li&gt; &#xA; &lt;li&gt;节点列表支持国旗显示并且页面打开自动检测节点的连接时间。&lt;/li&gt; &#xA; &lt;li&gt;支持各种分流组合，并且可以自己编辑所有分流的域名，相当于七组自定义分流。&lt;/li&gt; &#xA; &lt;li&gt;将节点订阅转移至[高级设置]请悉知。&lt;/li&gt; &#xA; &lt;li&gt;底部状态栏：左边显示国旗地区以及IP,右边为四个站点的可访问状态，彩色为可访问，灰色为不能访问。&lt;/li&gt; &#xA; &lt;li&gt;优化了国旗匹配方法。&lt;/li&gt; &#xA; &lt;li&gt;建议搭配Argon主题，以达到最佳的显示效果。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;欢迎提交bug。&lt;/p&gt; &#xA;&lt;h3&gt;如何编译&lt;/h3&gt; &#xA;&lt;p&gt;假设你的Lean openwrt（最新版本19.07） 在 lede 目录下&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd lede/package/lean/  &#xA;&#xA;git clone https://github.com/jerrykuku/lua-maxminddb.git  #git lua-maxminddb 依赖&#xA;&#xA;git clone https://github.com/jerrykuku/luci-app-vssr.git  &#xA;&#xA;make menuconfig&#xA;&#xA;make -j1 V=s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;问题解决&lt;/h3&gt; &#xA;&lt;p&gt;使用lede最新源码编译失败，报错缺少依赖：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;satisfy_dependencies_for: Cannot satisfy the following dependencies for luci-app-vssr:&#xA;- shadowsocksr-libev-ssr-local&#xA;- shadowsocksr-libev-ssr-redir&#xA;- shadowsocksr-libev-ssr-check&#xA;- xray-core&#xA;- xray-plugin&#xA;- shadowsocksr-libev-ssr-server&#xA;opkg_install_cmd: Cannot install package luci-app-vssr.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;原因是lede缺少软件源，解决办法，清除缓存重新下载编译：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# 1.清除缓存&#xA;rm -rf tmp&#xA;&#xA;# 2.feeds.conf文件添加源&#xA;src-git helloworld https://github.com/fw876/helloworld&#xA;src-git passwall https://github.com/xiaorouji/openwrt-passwall&#xA;&#xA;# 3.重新执行升级安装下载编译等操作&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make -j8 download V=s&#xA;make -j1 V=s&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;或者也可以完全删除lede，重新git并修改feeds.conf（比较耗时）&lt;/p&gt; &#xA;&lt;h3&gt;感谢&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/coolsnowwolf/lede&#34;&gt;https://github.com/coolsnowwolf/lede&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;我的其它项目&lt;/h3&gt; &#xA;&lt;p&gt;Argon theme ：&lt;a href=&#34;https://github.com/jerrykuku/luci-theme-argon&#34;&gt;https://github.com/jerrykuku/luci-theme-argon&lt;/a&gt;&lt;br&gt; 京东签到插件 ：&lt;a href=&#34;https://github.com/jerrykuku/luci-app-jd-dailybonus&#34;&gt;https://github.com/jerrykuku/luci-app-jd-dailybonus&lt;/a&gt;&lt;br&gt; openwrt-nanopi-r1s-h5 ： &lt;a href=&#34;https://github.com/jerrykuku/openwrt-nanopi-r1s-h5&#34;&gt;https://github.com/jerrykuku/openwrt-nanopi-r1s-h5&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lewis6991/gitsigns.nvim</title>
    <updated>2022-06-05T01:49:10Z</updated>
    <id>tag:github.com,2022-06-05:/lewis6991/gitsigns.nvim</id>
    <link href="https://github.com/lewis6991/gitsigns.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Git integration for buffers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;gitsigns.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/lewis6991/gitsigns.nvim/workflows/CI/badge.svg?branch=main&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/lewis6991/gitsigns.nvim&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/gitsigns-nvim/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitsigns-nvim/community.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Super fast git decorations implemented purely in lua/teal.&lt;/p&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hunk Actions&lt;/th&gt; &#xA;   &lt;th&gt;Line Blame&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_actions.gif&#34; width=&#34;450em&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lewis6991/media/main/gitsigns_blame.gif&#34; width=&#34;450em&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Signs for added, removed, and changed lines&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous using &lt;a href=&#34;https://github.com/luvit/luv/raw/master/docs.md&#34;&gt;luv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Navigation between hunks&lt;/li&gt; &#xA; &lt;li&gt;Stage hunks (with undo)&lt;/li&gt; &#xA; &lt;li&gt;Preview diffs of hunks (with word diff)&lt;/li&gt; &#xA; &lt;li&gt;Customisable (signs, highlights, mappings, etc)&lt;/li&gt; &#xA; &lt;li&gt;Status bar integration&lt;/li&gt; &#xA; &lt;li&gt;Git blame a specific line using virtual text.&lt;/li&gt; &#xA; &lt;li&gt;Hunk text object&lt;/li&gt; &#xA; &lt;li&gt;Automatically follow files moved in the index.&lt;/li&gt; &#xA; &lt;li&gt;Live intra-line word diff&lt;/li&gt; &#xA; &lt;li&gt;Ability to display deleted/changed lines via virtual lines.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://yadm.io/&#34;&gt;yadm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Neovim &amp;gt;= 0.5.0&lt;/p&gt; &lt;p&gt;Note: If you are running a development version of Neovim (aka &lt;code&gt;master&lt;/code&gt;), then breakage may occur if your build is behind latest.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Newish version of git. Older versions may not work with some features.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;lewis6991/gitsigns.nvim&#39;,&#xA;  -- tag = &#39;release&#39; -- To use the latest release&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;lewis6991/gitsigns.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For basic setup with all batteries included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitsigns&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; gitsigns can be setup directly in the plugin spec:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;lewis6991/gitsigns.nvim&#39;,&#xA;  config = function()&#xA;    require(&#39;gitsigns&#39;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configuration can be passed to the setup function. Here is an example with most of the default settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitsigns&#39;).setup {&#xA;  signs = {&#xA;    add          = {hl = &#39;GitSignsAdd&#39;   , text = &#39;│&#39;, numhl=&#39;GitSignsAddNr&#39;   , linehl=&#39;GitSignsAddLn&#39;},&#xA;    change       = {hl = &#39;GitSignsChange&#39;, text = &#39;│&#39;, numhl=&#39;GitSignsChangeNr&#39;, linehl=&#39;GitSignsChangeLn&#39;},&#xA;    delete       = {hl = &#39;GitSignsDelete&#39;, text = &#39;_&#39;, numhl=&#39;GitSignsDeleteNr&#39;, linehl=&#39;GitSignsDeleteLn&#39;},&#xA;    topdelete    = {hl = &#39;GitSignsDelete&#39;, text = &#39;‾&#39;, numhl=&#39;GitSignsDeleteNr&#39;, linehl=&#39;GitSignsDeleteLn&#39;},&#xA;    changedelete = {hl = &#39;GitSignsChange&#39;, text = &#39;~&#39;, numhl=&#39;GitSignsChangeNr&#39;, linehl=&#39;GitSignsChangeLn&#39;},&#xA;  },&#xA;  signcolumn = true,  -- Toggle with `:Gitsigns toggle_signs`&#xA;  numhl      = false, -- Toggle with `:Gitsigns toggle_numhl`&#xA;  linehl     = false, -- Toggle with `:Gitsigns toggle_linehl`&#xA;  word_diff  = false, -- Toggle with `:Gitsigns toggle_word_diff`&#xA;  watch_gitdir = {&#xA;    interval = 1000,&#xA;    follow_files = true&#xA;  },&#xA;  attach_to_untracked = true,&#xA;  current_line_blame = false, -- Toggle with `:Gitsigns toggle_current_line_blame`&#xA;  current_line_blame_opts = {&#xA;    virt_text = true,&#xA;    virt_text_pos = &#39;eol&#39;, -- &#39;eol&#39; | &#39;overlay&#39; | &#39;right_align&#39;&#xA;    delay = 1000,&#xA;    ignore_whitespace = false,&#xA;  },&#xA;  current_line_blame_formatter = &#39;&amp;lt;author&amp;gt;, &amp;lt;author_time:%Y-%m-%d&amp;gt; - &amp;lt;summary&amp;gt;&#39;,&#xA;  sign_priority = 6,&#xA;  update_debounce = 100,&#xA;  status_formatter = nil, -- Use default&#xA;  max_file_length = 40000,&#xA;  preview_config = {&#xA;    -- Options passed to nvim_open_win&#xA;    border = &#39;single&#39;,&#xA;    style = &#39;minimal&#39;,&#xA;    relative = &#39;cursor&#39;,&#xA;    row = 0,&#xA;    col = 1&#xA;  },&#xA;  yadm = {&#xA;    enable = false&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For information on configuring neovim via lua please see &lt;a href=&#34;https://github.com/nanotee/nvim-lua-guide&#34;&gt;nvim-lua-guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Keymaps&lt;/h3&gt; &#xA;&lt;p&gt;Gitsigns provides an &lt;code&gt;on_attach&lt;/code&gt; callback which can be used to setup buffer mappings.&lt;/p&gt; &#xA;&lt;p&gt;Here is a suggested example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitsigns&#39;).setup{&#xA;  ...&#xA;  on_attach = function(bufnr)&#xA;    local gs = package.loaded.gitsigns&#xA;&#xA;    local function map(mode, l, r, opts)&#xA;      opts = opts or {}&#xA;      opts.buffer = bufnr&#xA;      vim.keymap.set(mode, l, r, opts)&#xA;    end&#xA;&#xA;    -- Navigation&#xA;    map(&#39;n&#39;, &#39;]c&#39;, function()&#xA;      if vim.wo.diff then return &#39;]c&#39; end&#xA;      vim.schedule(function() gs.next_hunk() end)&#xA;      return &#39;&amp;lt;Ignore&amp;gt;&#39;&#xA;    end, {expr=true})&#xA;&#xA;    map(&#39;n&#39;, &#39;[c&#39;, function()&#xA;      if vim.wo.diff then return &#39;[c&#39; end&#xA;      vim.schedule(function() gs.prev_hunk() end)&#xA;      return &#39;&amp;lt;Ignore&amp;gt;&#39;&#xA;    end, {expr=true})&#xA;&#xA;    -- Actions&#xA;    map({&#39;n&#39;, &#39;v&#39;}, &#39;&amp;lt;leader&amp;gt;hs&#39;, &#39;:Gitsigns stage_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map({&#39;n&#39;, &#39;v&#39;}, &#39;&amp;lt;leader&amp;gt;hr&#39;, &#39;:Gitsigns reset_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hS&#39;, gs.stage_buffer)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hu&#39;, gs.undo_stage_hunk)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hR&#39;, gs.reset_buffer)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hp&#39;, gs.preview_hunk)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hb&#39;, function() gs.blame_line{full=true} end)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tb&#39;, gs.toggle_current_line_blame)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hd&#39;, gs.diffthis)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hD&#39;, function() gs.diffthis(&#39;~&#39;) end)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;td&#39;, gs.toggle_deleted)&#xA;&#xA;    -- Text object&#xA;    map({&#39;o&#39;, &#39;x&#39;}, &#39;ih&#39;, &#39;:&amp;lt;C-U&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note this requires Neovim v0.7 which introduces &lt;code&gt;vim.keymap.set&lt;/code&gt;. If you are using Neovim with version prior to v0.7 then use the following:&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;gitsigns&#39;).setup {&#xA;  ...&#xA;  on_attach = function(bufnr)&#xA;    local function map(mode, lhs, rhs, opts)&#xA;        opts = vim.tbl_extend(&#39;force&#39;, {noremap = true, silent = true}, opts or {})&#xA;        vim.api.nvim_buf_set_keymap(bufnr, mode, lhs, rhs, opts)&#xA;    end&#xA;&#xA;    -- Navigation&#xA;    map(&#39;n&#39;, &#39;]c&#39;, &#34;&amp;amp;diff ? &#39;]c&#39; : &#39;&amp;lt;cmd&amp;gt;Gitsigns next_hunk&amp;lt;CR&amp;gt;&#39;&#34;, {expr=true})&#xA;    map(&#39;n&#39;, &#39;[c&#39;, &#34;&amp;amp;diff ? &#39;[c&#39; : &#39;&amp;lt;cmd&amp;gt;Gitsigns prev_hunk&amp;lt;CR&amp;gt;&#39;&#34;, {expr=true})&#xA;&#xA;    -- Actions&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, &#39;:Gitsigns stage_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hs&#39;, &#39;:Gitsigns stage_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, &#39;:Gitsigns reset_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;v&#39;, &#39;&amp;lt;leader&amp;gt;hr&#39;, &#39;:Gitsigns reset_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hS&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns stage_buffer&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hu&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns undo_stage_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hR&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns reset_buffer&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hp&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns preview_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hb&#39;, &#39;&amp;lt;cmd&amp;gt;lua require&#34;gitsigns&#34;.blame_line{full=true}&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;tb&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns toggle_current_line_blame&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hd&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns diffthis&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;hD&#39;, &#39;&amp;lt;cmd&amp;gt;lua require&#34;gitsigns&#34;.diffthis(&#34;~&#34;)&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;td&#39;, &#39;&amp;lt;cmd&amp;gt;Gitsigns toggle_deleted&amp;lt;CR&amp;gt;&#39;)&#xA;&#xA;    -- Text object&#xA;    map(&#39;o&#39;, &#39;ih&#39;, &#39;:&amp;lt;C-U&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;    map(&#39;x&#39;, &#39;ih&#39;, &#39;:&amp;lt;C-U&amp;gt;Gitsigns select_hunk&amp;lt;CR&amp;gt;&#39;)&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Non-Goals&lt;/h2&gt; &#xA;&lt;h3&gt;Implement every feature in &lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is actively developed and by one of the most well regarded vim plugin developers. Gitsigns will only implement features of this plugin if: it is simple, or, the technologies leveraged by Gitsigns (LuaJIT, Libuv, Neovim&#39;s API, etc) can provide a better experience.&lt;/p&gt; &#xA;&lt;h3&gt;Support for other VCS&lt;/h3&gt; &#xA;&lt;p&gt;There aren&#39;t any active developers of this plugin who use other kinds of VCS, so adding support for them isn&#39;t feasible. However a well written PR with a commitment of future support could change this.&lt;/p&gt; &#xA;&lt;h2&gt;Status Line&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;b:gitsigns_status&lt;/code&gt; or &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt;. &lt;code&gt;b:gitsigns_status&lt;/code&gt; is formatted using &lt;code&gt;config.status_formatter&lt;/code&gt;. &lt;code&gt;b:gitsigns_status_dict&lt;/code&gt; is a dictionary with the keys &lt;code&gt;added&lt;/code&gt;, &lt;code&gt;removed&lt;/code&gt;, &lt;code&gt;changed&lt;/code&gt; and &lt;code&gt;head&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;set statusline+=%{get(b:,&#39;gitsigns_status&#39;,&#39;&#39;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the current branch use the variable &lt;code&gt;b:gitsigns_head&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Comparison with &lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;vim-gitgutter&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;   &lt;th&gt;gitsigns&lt;/th&gt; &#xA;   &lt;th&gt;gitgutter&lt;/th&gt; &#xA;   &lt;th&gt;Note&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shows signs for added, modified, and removed lines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Asynchronous&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Runs diffs in-process (no IO or pipes)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Via &lt;a href=&#34;https://github.com/neovim/neovim/pull/14536&#34;&gt;lua&lt;/a&gt; or FFI.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Only adds signs for drawn lines&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Via Neovims decoration API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Updates immediately&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;* Triggered on CursorHold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ensures signs are always up to date&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Watches the git dir to do so&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Never saves the buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;span&gt;❗&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;* Writes &lt;a href=&#34;https://github.com/airblade/vim-gitgutter/raw/0f98634b92da9a35580b618c11a6d2adc42d9f90/autoload/gitgutter/diff.vim#L106&#34;&gt;buffer&lt;/a&gt; (and index) to short lived temp files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Quick jumping between hunks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stage/reset/preview individual hunks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stage/reset hunks in range/selection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; &lt;span&gt;❗&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;* Only stage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stage/reset all hunks in buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Undo staged hunks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Word diff in buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Word diff in hunk preview&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Show deleted/changes lines directly in buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Via &lt;a href=&#34;https://github.com/neovim/neovim/pull/15351&#34;&gt;virtual lines&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stage partial hunks&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hunk text object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Diff against index or any commit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Folding of unchanged text&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Fold text showing whether folded lines have been changed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Load hunk locations into the quickfix or location list&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Optional line highlighting&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Optional line number highlighting&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Optional counts on signs&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Customizable signs and mappings&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Customizable extra diff arguments&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Can be toggled globally or per buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt; *&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;* Through the detach/attach functions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Statusline integration&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Works with &lt;a href=&#34;https://yadm.io/&#34;&gt;yadm&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Live blame in buffer (using virtual text)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blame preview&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Automatically follows open files moved with &lt;code&gt;git mv&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLI with completion&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;*&lt;/td&gt; &#xA;   &lt;td&gt;* Provides individual commands for some actions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Open diffview with any revision/commit&lt;/td&gt; &#xA;   &lt;td&gt;&lt;span&gt;✅&lt;/span&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;As of 2021-07-05&lt;/p&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/tpope/vim-repeat&#34;&gt;vim-repeat&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If installed, &lt;code&gt;stage_hunk()&lt;/code&gt; and &lt;code&gt;reset_hunk()&lt;/code&gt; are repeatable with the &lt;code&gt;.&lt;/code&gt; (dot) operator.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/tpope/vim-fugitive&#34;&gt;vim-fugitive&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;When viewing revisions of a file (via &lt;code&gt;:0Gclog&lt;/code&gt; for example), Gitsigns will attach to the fugitive buffer with the base set to the commit immediately before the commit of that revision. This means the signs placed in the buffer reflect the changes introduced by that revision of the file.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Null-ls can provide code actions from Gitsigns. To setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;&#xA;null_ls.setup {&#xA;  sources = {&#xA;    null_ls.builtins.code_actions.gitsigns,&#xA;    ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Will enable &lt;code&gt;:lua vim.lsp.buf.code_action()&lt;/code&gt; to retrieve code actions from Gitsigns.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;trouble.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If installed and enabled (via &lt;code&gt;config.trouble&lt;/code&gt;; defaults to true if installed), &lt;code&gt;:Gitsigns setqflist&lt;/code&gt; or &lt;code&gt;:Gitsigns seqloclist&lt;/code&gt; will open Trouble instead of Neovim&#39;s built-in quickfix or location list windows.&lt;/p&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc-git&#34;&gt;coc-git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;vim-gitgutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mhinz/vim-signify&#34;&gt;vim-signify&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>projekt0n/github-nvim-theme</title>
    <updated>2022-06-05T01:49:10Z</updated>
    <id>tag:github.com,2022-06-05:/projekt0n/github-nvim-theme</id>
    <link href="https://github.com/projekt0n/github-nvim-theme" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Github theme for Neovim and Terminals written in Lua&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/S6SlCiV.png&#34; alt=&#34;github-nvim-theme&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Status&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/actions/workflows/lint.yml&#34;&gt;&lt;img src=&#34;https://github.com/projekt0n/github-nvim-theme/actions/workflows/lint.yml/badge.svg?sanitize=true&#34; alt=&#34;Linting&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/projekt0n&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/twitter-projekt0n-blue&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/projekt0n&#34;&gt;&lt;img src=&#34;https://img.shields.io/liberapay/goal/projekt0n.svg?logo=liberapay&#34; alt=&#34;Liberapay Goal Progress&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports the latest Neovim 0.5 features like TreeSitter and LSP&lt;/li&gt; &#xA; &lt;li&gt;Minimal inactive statusline (only work with &lt;strong&gt;Vim&#39;s Default StatusLine&lt;/strong&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Vim terminal colors&lt;/li&gt; &#xA; &lt;li&gt;Darker background for sidebar-like windows&lt;/li&gt; &#xA; &lt;li&gt;Color configs for &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;Alacritty&lt;/a&gt;, &lt;a href=&#34;https://konsole.kde.org/&#34;&gt;Konsole&lt;/a&gt;, &lt;a href=&#34;https://github.com/microsoft/terminal&#34;&gt;Windows Terminal&lt;/a&gt;, &lt;a href=&#34;https://wiki.archlinux.org/title/x_resources&#34;&gt;Xresources&lt;/a&gt;, &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt;, &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/conf.html?highlight=include&#34;&gt;kitty&lt;/a&gt; and &lt;a href=&#34;https://github.com/tmux/tmux/wiki&#34;&gt;tmux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Most elegant &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/LUALINE.md#screenshots&#34;&gt;&lt;strong&gt;lualine&lt;/strong&gt; theme&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the theme with your preferred package manager:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;projekt0n/github-nvim-theme&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;projekt0n/github-nvim-theme&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Enable the colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;colorscheme github_*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#39;github-theme&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;colors&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;You can override specific color groups to use other groups or a hex color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;comment_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;italic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for comments (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dark_float&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Float windows like the lsp diagnostics windows get a darker background.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dark_sidebar&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sidebar like windows like &lt;code&gt;NvimTree&lt;/code&gt; get a darker background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dev&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Developer Mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;function_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for functions (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hide_end_of_buffer&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enabling this option, will hide filler lines (~) after the end of the buffer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;hide_inactive_statusline&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enabling this option, will hide inactive statuslines and replace them with a thin border instead. Should work with the standard &lt;strong&gt;StatusLine&lt;/strong&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keyword_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;italic&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for keywords (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;msg_area_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for messages and cmdline (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;overrides&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;function&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Override specific highlight groups. The function accpet colors as argument. You can also add a non-exists highlight by enabling the &lt;code&gt;dev&lt;/code&gt; mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sidebars&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set a darker background on sidebar-like windows. For example: &lt;code&gt;{&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;theme_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dark&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set theme variant (options: &lt;code&gt;dark&lt;/code&gt;/&lt;code&gt;dimmed&lt;/code&gt;/&lt;code&gt;dark_default&lt;/code&gt;/&lt;code&gt;dark_colorblind&lt;/code&gt;/&lt;code&gt;light&lt;/code&gt;/&lt;code&gt;light_default&lt;/code&gt;/&lt;code&gt;light_colorblind&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;transparent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable this to disable setting the background color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;variable_style&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NONE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Highlight style for variables and identifiers (check &lt;code&gt;:help highlight-args&lt;/code&gt; for options)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;vim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Example config in VimScript&#xA;&#34; NOTE: Configuration needs to be set BEFORE loading the color scheme with `colorscheme` command&#xA;let g:github_function_style = &#34;italic&#34;&#xA;let g:github_sidebars = [&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;]&#xA;&#xA;&#34; Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;let g:github_colors = {&#xA;  \ &#39;hint&#39;: &#39;orange&#39;,&#xA;  \ &#39;error&#39;: &#39;#ff0000&#39;&#xA;\ }&#xA;&#xA;&#34; Load the colorscheme&#xA;colorscheme github_dark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;lua&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example config in Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dark&#34;,&#xA;  function_style = &#34;italic&#34;,&#xA;  sidebars = {&#34;qf&#34;, &#34;vista_kind&#34;, &#34;terminal&#34;, &#34;packer&#34;},&#xA;&#xA;  -- Change the &#34;hint&#34; color to the &#34;orange&#34; color, and make the &#34;error&#34; color bright red&#xA;  colors = {hint = &#34;orange&#34;, error = &#34;#ff0000&#34;},&#xA;&#xA;  -- Overwrite the highlight groups&#xA;  overrides = function(c)&#xA;    return {&#xA;      htmlTag = {fg = c.red, bg = &#34;#282c34&#34;, sp = c.hint, style = &#34;underline&#34;},&#xA;      DiagnosticHint = {link = &#34;LspDiagnosticsDefaultHint&#34;},&#xA;      -- this will remove the highlight groups&#xA;      TSField = {},&#xA;    }&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lualine Support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;hide_inactive_statusline&lt;/code&gt; option is deprecated for lualine. That means it does not force the underline style to StatusLineNC highlight.&lt;/p&gt; &#xA;&lt;p&gt;Installation docs and screenshots at &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/LUALINE.md&#34;&gt;LUALINE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Terminal Themes&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;To generate the configs &lt;code&gt;make terminal&lt;/code&gt; or &lt;code&gt;:luafile lua/github-theme/terminal/init.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Extra color configs for &lt;strong&gt;Alacritty&lt;/strong&gt;, &lt;strong&gt;Konsole&lt;/strong&gt;, &lt;strong&gt;Windows Terminal&lt;/strong&gt;, &lt;strong&gt;Xresources&lt;/strong&gt;, &lt;strong&gt;iTerm&lt;/strong&gt;, &lt;strong&gt;kitty&lt;/strong&gt;, and &lt;strong&gt;tmux&lt;/strong&gt; can be found in &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/terminal/&#34;&gt;terminal&lt;/a&gt; directory. To use them, refer to their respective documentation.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alacritty - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/alacritty&#34;&gt;terminal/alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Konsole - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/konsole&#34;&gt;terminal/konsole&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows Terminal - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/windows_terminal&#34;&gt;terminal/windows_terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Xresources - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/xresources&#34;&gt;terminal/xresources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;iTerm - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/iterm&#34;&gt;terminal/iterm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;kitty - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/kitty&#34;&gt;terminal/kitty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;tmux - &lt;a href=&#34;https://github.com/projekt0n/github-nvim-theme/tree/main/terminal/tmux&#34;&gt;terminal/tmux&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Making &lt;code&gt;undercurls&lt;/code&gt; work properly in &lt;strong&gt;Tmux&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To have undercurls show up and in color, add the following to your &lt;strong&gt;Tmux&lt;/strong&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Undercurl&#xA;set -g default-terminal &#34;${TERM}&#34;&#xA;set -as terminal-overrides &#39;,*:Smulx=\E[4::%p1%dm&#39;  # undercurl support&#xA;set -as terminal-overrides &#39;,*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&amp;amp;%d::%p1%{255}%&amp;amp;%d%;m&#39;  # underscore colours - needs tmux-3.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Plugin Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;Builtin lsp diagnostics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dense-analysis/ale&#34;&gt;dense-analysis/ale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/projekt0n/circles.nvim&#34;&gt;projekt0n/circles.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neoclide/coc.nvim&#34;&gt;neoclide/coc.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;glepnir/dashboard-nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;lewis6991/gitsigns.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;lukas-reineke/indent-blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lsp-trouble.nvim&#34;&gt;folke/lsp-trouble.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;glepnir/lspsaga.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;nvim-lualine/lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;TimUntersberger/neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;akinsho/nvim-bufferline.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;hrsh7th/nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-compe&#34;&gt;hrsh7th/nvim-compe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;rcarriga/nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;kyazdani42/nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter/nvim-treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;kyazdani42/nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;nvim-telescope/telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;airblade/vim-gitgutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;folke/which-key.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📺 Screenshots&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Font: &lt;a href=&#34;https://www.jetbrains.com/lp/mono/&#34;&gt;JetBrains Mono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Terminal: &lt;a href=&#34;https://sw.kovidgoyal.net/kitty&#34;&gt;kitty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Icon: &lt;a href=&#34;https://github.com/kyazdani42/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;StatusLine: &lt;strong&gt;Default&lt;/strong&gt;. &lt;a href=&#34;https://github.com/ful1e5/dotfiles/raw/a2777f85b104622dd82f4adfc6ad032e3ff074bf/nvim/.config/nvim/lua/options.lua#L19-L30&#34;&gt;dotfiles/nvim/.config/nvim/lua/options.lua#L19-L30&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;dotfiles: &lt;a href=&#34;https://github.com/ful1e5/dotfiles/tree/main/nvim/.config/nvim&#34;&gt;ful1e5/dotfiles/nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Theme Styles&lt;/h3&gt; &#xA;&lt;h4&gt;Dark&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_dark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dark&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/XWxKWc8.png&#34; alt=&#34;github_dark&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Dimmed&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_dimmed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dimmed&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/lMk4ifs.png&#34; alt=&#34;github_dimmed&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Dark Default&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_dark_default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dark_default&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/ZfZcBGN.png&#34; alt=&#34;github_dark_default&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Dark Colorblind (Beta)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_dark_colorblind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;dark_colorblind&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/OIXgRL4.png&#34; alt=&#34;github_dark_colorblind&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Light&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_light&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;light&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/OPwBDI4.png&#34; alt=&#34;github_light&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Light Default&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_light_default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;light_default&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/r9uPo5B.png&#34; alt=&#34;github_light_default&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Light Colorblind (Beta)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;colorscheme github_light_colorblind&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  theme_style = &#34;light_colorblind&#34;,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/fL4ZOUg.png&#34; alt=&#34;github_light_colorblind&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Syntax Styles&lt;/h3&gt; &#xA;&lt;h4&gt;Default&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/V0DsNa0.png&#34; alt=&#34;github_default_syntax&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Normal&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;let g:github_comment_style = &#34;NONE&#34;&#xA;let g:github_keyword_style = &#34;NONE&#34;&#xA;let g:github_function_style = &#34;NONE&#34;&#xA;let g:github_variable_style = &#34;NONE&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  comment_style = &#34;NONE&#34;,&#xA;  keyword_style = &#34;NONE&#34;,&#xA;  function_style = &#34;NONE&#34;,&#xA;  variable_style = &#34;NONE&#34;&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/aRDXkWp.png&#34; alt=&#34;github_normal_syntax&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Italic&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;let g:github_comment_style = &#34;italic&#34;&#xA;let g:github_keyword_style = &#34;italic&#34;&#xA;let g:github_function_style = &#34;italic&#34;&#xA;let g:github_variable_style = &#34;italic&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  comment_style = &#34;italic&#34;,&#xA;  keyword_style = &#34;italic&#34;,&#xA;  function_style = &#34;italic&#34;,&#xA;  variable_style = &#34;italic&#34;&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/5wr3dyQ.png&#34; alt=&#34;github_italic_syntax&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Minimal config&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; VimScript&#xA;let g:github_dark_sidebar = 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#34;github-theme&#34;).setup({&#xA;  dark_sidebar = false,&#xA;  -- other config&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/rAsEukW.png&#34; alt=&#34;github_minimal&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Telescope&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://imgur.com/XX7tixL.png&#34; alt=&#34;github_telescope&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://raw.githubusercontent.com/projekt0n/github-nvim-theme/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;, any suggestions for features and contributions to the continuing code masterelopment can be made via the issue tracker or code contributions via a &lt;code&gt;Fork&lt;/code&gt; &amp;amp; &lt;code&gt;Pull requests&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>