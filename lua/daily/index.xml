<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-19T01:42:27Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>0x2XPx/2Take1-script-Archive</title>
    <updated>2022-08-19T01:42:27Z</updated>
    <id>tag:github.com,2022-08-19:/0x2XPx/2Take1-script-Archive</id>
    <link href="https://github.com/0x2XPx/2Take1-script-Archive" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a Archive of Lua scripts for the 2Take1 mod menu. I&#39;m not the owner of any of these scripts, this is just an archive for any public script.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Archive of lua scripts for the 2Take1 menu. Non of these are made by me.&lt;/p&gt; &#xA;&lt;p&gt;Every Script with it&#39;s own directory also has it&#39;s own readme with an installation guide + their original github (if they have one)&lt;/p&gt; &#xA;&lt;p&gt;Put every other Script into your scripts folder, at &#34;C:\Users\USERNAME\AppData\Roaming\PopstarDevs\2Take1Menu\scripts&#34;&lt;/p&gt; &#xA;&lt;p&gt;Note, if you are searching for an older version of a script thats not in this branch, go to the old-scripts branch. Also, I only update every 6-8 days or when there are alot of scripts that have updated.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nguyenvukhang/nvim-toggler</title>
    <updated>2022-08-19T01:42:27Z</updated>
    <id>tag:github.com,2022-08-19:/nguyenvukhang/nvim-toggler</id>
    <link href="https://github.com/nguyenvukhang/nvim-toggler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;invert text in vim, purely with lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-toggler&lt;/h1&gt; &#xA;&lt;p&gt;Invert text in vim, purely with lua.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nguyenvukhang/nvim-toggler/raw/assets/demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nguyenvukhang/nvim-toggler/main/#install&#34;&gt;Install&lt;/a&gt; &amp;nbsp;Â·&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/nguyenvukhang/nvim-toggler/main/#run&#34;&gt;Run&lt;/a&gt; &amp;nbsp;Â·&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/nguyenvukhang/nvim-toggler/main/#custom-inverses&#34;&gt;Custom inverses&lt;/a&gt; &amp;nbsp;Â·&amp;nbsp; &lt;a href=&#34;https://raw.githubusercontent.com/nguyenvukhang/nvim-toggler/main/#custom-keymaps&#34;&gt;Custom keymaps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#39;nguyenvukhang/nvim-toggler&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nguyenvukhang/nvim-toggler&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;require(&#39;nvim-toggler&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; init.vim or .vimrc&#xA;lua &amp;lt;&amp;lt; EOF&#xA;require(&#39;nvim-toggler&#39;)&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once that is set, the default binding is &lt;code&gt;&amp;lt;leader&amp;gt;i&lt;/code&gt; to invert the word under your cursor.&lt;/p&gt; &#xA;&lt;h2&gt;Custom inverses&lt;/h2&gt; &#xA;&lt;p&gt;You can specify custom togglables with the &lt;code&gt;setup()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;require(&#39;nvim-toggler&#39;).setup({&#xA;  [&#39;vim&#39;] = &#39;emacs&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The defaults are defined in &lt;a href=&#34;https://github.com/nguyenvukhang/nvim-toggler/raw/main/lua/nvim-toggler.lua&#34;&gt;the one and only lua file&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Custom keymaps&lt;/h2&gt; &#xA;&lt;p&gt;To remap toggling to something else like &lt;code&gt;&amp;lt;leader&amp;gt;cl&lt;/code&gt;, simply do&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- init.lua&#xA;vim.keymap.set({ &#39;n&#39;, &#39;v&#39; }, &#39;&amp;lt;leader&amp;gt;cl&#39;, require(&#39;nvim-toggler&#39;).toggle)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>edluffy/hologram.nvim</title>
    <updated>2022-08-19T01:42:27Z</updated>
    <id>tag:github.com,2022-08-19:/edluffy/hologram.nvim</id>
    <link href="https://github.com/edluffy/hologram.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ‘» A cross platform terminal image viewer for Neovim. Extensible and fast, written in Lua and C. Works on macOS and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/28115337/185177835-27fd08cd-864e-4f10-85ad-751d7a4eb431.png&#34; alt=&#34;hologram.nvim&#34; width=&#34;500&#34;&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A cross platform terminal image viewer for Neovim. Extensible and fast, written in Lua and C.&lt;br&gt; Works on macOS and Linux with current support for Kitty Graphics Protocol.&lt;br&gt; Highly experimental, expect breaking changes ðŸš§. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/28115337/185186641-0c532c02-76fc-4e24-9ea6-638f23d30df4.gif&#34; alt=&#34;showcase&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;edluffy/hologram.nvim&#39;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;Plug &#39;edluffy/hologram.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Hologram.nvim allows you to view inline images directly inside a Neovim buffer. Requires the following setup in &lt;code&gt;init.lua&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;hologram&#39;).setup{&#xA;    auto_display = true -- WIP automatic markdown image display, may be prone to breaking&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Exposed API&lt;/h1&gt; &#xA;&lt;p&gt;There are plans for parts of Hologram to be able to be used in other plugins, such as its image functionality.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;image.lua&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Minimal example - save as a file (e.g. minimal.lua) then run with &lt;code&gt;:luafile %&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local source = &#39;/Users/.../Documents/my-image.png&#39;&#xA;local buf = vim.api.nvim_get_current_buf()&#xA;local image = require(&#39;hologram.image&#39;):new(source, {})&#xA;&#xA;-- Image should appear below this line, then disappear after 5 seconds&#xA;&#xA;image:display(5, 0, buf, {})&#xA;&#xA;vim.defer_fn(function()&#xA;    image:delete(0, {free = true})&#xA;end, 5000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Image:new(source, keys)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Creates a new image object and sends image data with transmission keys to terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Image:new(source, {&#xA;    format = 100, -- format in which image data is sent&#xA;    transmission_type = &#39;f&#39;, -- transmission medium used&#xA;    data_width = nil, -- px. width of image&#xA;    data_height = nil, -- px. height of image&#xA;    data_size = nil, -- size of data to read from file&#xA;    data_offset = nil, -- offset from which to read file data&#xA;    image_number = nil, -- image number&#xA;    compressed = nil, -- whether data is compressed or not&#xA;    image_id = nil, -- image id&#xA;    placement_id = 1, -- placement id&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more details see &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol/#control-data-reference&#34;&gt;https://sw.kovidgoyal.net/kitty/graphics-protocol/#control-data-reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;Image:display(row, col, buf, keys)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Every image can be displayed an arbitrary number of times on the screen, with different adjustments applied. These operations do not require the re-transmission of image data and are as a result very fast and lightweight. There should be no flicker or delay after an adjustment is made.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Image:display(row, col, buf, {&#xA;    x_offset = nil, -- left edge of image area to start displaying from (px.)&#xA;    y_offset = nil, -- top edge of image area to start displaying from (px.)&#xA;    width = nil, -- width of image area to display&#xA;    height = nil, -- height of image area to display&#xA;    cell_x = nil, -- x-offset within first cell to start displaying from (px.)&#xA;    cell_y = nil, -- y-offset within first cell to start displaying from (px.)&#xA;    cols = nil, -- number of columns to display over&#xA;    rows = nil, -- number of rows to display over&#xA;    z_index = 0, -- vertical stacking order of image&#xA;    placement_id = 1, -- placement id&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Image:delete(buf, opts)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Deletes the image located in &lt;code&gt;buf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;Image:delete(id, {&#xA;    free = false -- when deleting image, free stored image data and also extmark of image. (default: false)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Roadmap&lt;/h1&gt; &#xA;&lt;p&gt;Core functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/graphics-protocol.html&#34;&gt;Kitty Graphics Protocol&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Ability to transfer .png format files and display at an arbitrary location in an nvim buffer.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Retain image transparency when being displayed.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Retain image position when scrolling.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extend to work with file formats other than png, like jpg.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more transmission mediums apart from direct (data is transmitted within escape code itself), e.g files and temporary files - add download and display image from url?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Auto crop image when partly out of bounds.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Ability to transfer animation frame data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support for &lt;a href=&#34;https://iterm2.com/documentation-images.html#:~:text=Inline%20Images%20Protocol-,Inline%20Images%20Protocol,8%2Dbit%2Dclean%20environment&#34;&gt;Iterm2 Images Protocol&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;(potential) Support for Sixel format.&lt;/li&gt; &#xA; &lt;li&gt;Extend to work with &lt;a href=&#34;https://github.com/tmux/tmux/wiki&#34;&gt;tmux&lt;/a&gt; - wrap with DCS passthrough sequences?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Extensions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Floating image preview for .pdf, .md and .tex.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Live file preview for .pdf and .md (using window splits).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Live equation preview for .tex format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Misc:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Switch to bare C implementation for base64 image encoding.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>