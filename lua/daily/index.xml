<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-22T01:36:28Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vxpm/ferris.nvim</title>
    <updated>2023-10-22T01:36:28Z</updated>
    <id>tag:github.com,2023-10-22:/vxpm/ferris.nvim</id>
    <link href="https://github.com/vxpm/ferris.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for interacting with Rust-Analyzer&#39;s LSP extensions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ferris.nvim ðŸ¦€&lt;/h1&gt; &#xA;&lt;p&gt;a neovim plugin for interacting with Rust Analyzer&#39;s LSP extensions&lt;/p&gt; &#xA;&lt;h2&gt;installation &amp;amp; usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;note: this plugin has only been tested with neovim 0.9+&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;with lazy.nvim:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;vxpm/ferris.nvim&#39;&#xA;    opts = {&#xA;        -- your options here&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the available options (and their default values) are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    -- If true, will automatically create commands for each LSP method&#xA;    create_commands = true, -- bool&#xA;    -- Handler for URL&#39;s (used for opening documentation)&#xA;    url_handler = &#34;xdg-open&#34;, -- string | function(string)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can also manually call the methods by requiring them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local view_mem_layout = require(&#34;ferris.methods.view_memory_layout&#34;)&#xA;&#xA;-- call the returned function to execute the request&#xA;view_mem_layout()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;don&#39;t forget to call &lt;code&gt;setup&lt;/code&gt; on &lt;code&gt;require(&#34;ferris&#34;)&lt;/code&gt; beforehand, though! (not needed if you&#39;re using the &lt;code&gt;opts&lt;/code&gt; field in lazy.nvim)&lt;/p&gt; &#xA;&lt;h2&gt;available methods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;sub&gt;&lt;sup&gt;please do not mind the terrible screenshots... i was too lazy&lt;/sup&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand Macro&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.expand_macro&#34;)&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://postimg.cc/G4rBPYbV&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/8zfhSB9p/image.png&#34; alt=&#34;image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Join Lines&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.join_lines&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;View HIR&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.view_hir&#34;)&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://postimg.cc/bSxydCSJ&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/nr5CRNHv/image.png&#34; alt=&#34;image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;View MIR&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.view_mir&#34;)&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://postimg.cc/wt19DTRn&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/R0Rq5WSC/image.png&#34; alt=&#34;image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;View Memory Layout&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.view_memory_layout&#34;)&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://postimg.cc/56f1nmFB&#34;&gt;&lt;img src=&#34;https://i.postimg.cc/02wQ5WkB/image.png&#34; alt=&#34;image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;View Item Tree&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.view_item_tree&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;View Syntax Tree&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.view_syntax_tree&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Open Cargo.toml&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.open_cargo_toml&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Open Parent Module&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.open_parent_module&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Open Documentation&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.open_documentation&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Reload Workspace&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.reload_workspace&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Rebuild Macros&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;require(&#34;ferris.methods.rebuild_macros&#34;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;special thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim&#34;&gt;rust-tools&lt;/a&gt; for being the reason why this plugins exists. initially, i didn&#39;t want any of the features it offered &lt;em&gt;except&lt;/em&gt; for recursive expansion of macros, so i made &lt;a href=&#34;https://github.com/vxpm/rust-expand-macro.nvim&#34;&gt;rust-expand-macro.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;however, i found myself wanting to use other methods as well, which led me to making ferris!&lt;/p&gt; &#xA;&lt;p&gt;in comparison to rust-tools, this plugin is &#34;simpler&#34;: it does not configure Rust Analyzer for you nor does it provide debugging utilities. i myself consider this a benefit, but it&#39;s up to your judgement.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>joechrisellis/lsp-format-modifications.nvim</title>
    <updated>2023-10-22T01:36:28Z</updated>
    <id>tag:github.com,2023-10-22:/joechrisellis/lsp-format-modifications.nvim</id>
    <link href="https://github.com/joechrisellis/lsp-format-modifications.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP formatting, but only on modified text regions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp-format-modifications.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Use LSP to format only modified text in Neovim (like &lt;a href=&#34;https://github.com/Microsoft/vscode/issues/44075&#34;&gt;VSCode&#39;s format modifications feature&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h1&gt;What problem does this solve?&lt;/h1&gt; &#xA;&lt;p&gt;Many projects suggest contributors use an autoformatter to keep code style consistent.&lt;/p&gt; &#xA;&lt;p&gt;However, in larger projects with legacy code, there can be plenty of places where the style deviates from the autoformatter&#39;s preference.&lt;/p&gt; &#xA;&lt;p&gt;In that case, you don&#39;t want to format entire files â€” you&#39;ll be left with very noisy diffs!&lt;/p&gt; &#xA;&lt;p&gt;You also don&#39;t want to comb through all of the changes you&#39;ve made, manually applying the autoformatter before you commit. We are too lazy for that!&lt;/p&gt; &#xA;&lt;p&gt;One reasonable solution is to run the autoformatter over the changed lines as defined by the revision control system. &lt;a href=&#34;https://github.com/Microsoft/vscode/issues/44075&#34;&gt;VSCode can do this&lt;/a&gt; â€” and this is something that I didn&#39;t find an analog for in Neovim. Hence, this plugin!&lt;/p&gt; &#xA;&lt;h1&gt;Getting started&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neovim â‰¥0.8 is required&lt;/strong&gt;. Neovim 0.8 has a more flexible API for LSP formatting, which this plugin leverages.&lt;/li&gt; &#xA; &lt;li&gt;Any LSP server that you want to use with this plugin must support the &lt;a href=&#34;https://learn.microsoft.com/en-us/dotnet/api/microsoft.visualstudio.languageserver.protocol.servercapabilities.documentrangeformattingprovider?view=visualstudiosdk-2022&#34;&gt;&lt;code&gt;DocumentRangeFormattingProvider&lt;/code&gt; server capability&lt;/a&gt; â€” &lt;code&gt;lsp-format-modifications.nvim&lt;/code&gt; will warn if an unsupported LSP server is used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;nvim-lua/plenary.nvim&lt;/a&gt; is required (hint: you are probably already using this).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install with your favourite plugin manager â€” for example, with &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vimscript&#34;&gt;Plug &#39;nvim-lua/plenary.nvim&#39;&#xA;Plug &#39;joechrisellis/lsp-format-modifications.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration and usage&lt;/h2&gt; &#xA;&lt;p&gt;In terms of basic usage:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#34;lsp-format-modifications&#34;.format_modifications(&amp;lt;lsp-client&amp;gt;, &amp;lt;bufnr&amp;gt;, &amp;lt;config&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... will format the modifications in the buffer with ID &lt;code&gt;&amp;lt;bufnr&amp;gt;&lt;/code&gt; using LSP client &lt;code&gt;&amp;lt;lsp-client&amp;gt;&lt;/code&gt;, according to the options specified in &lt;code&gt;&amp;lt;config&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For convenience, you may choose to create a user command that does this for you. For example, in your LSP &lt;code&gt;on_attach&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local on_attach = function(client, bufnr)&#xA;  -- your usual configuration â€” options, keymaps, etc&#xA;  -- ...&#xA;&#xA;  vim.api.nvim_buf_create_user_command(&#xA;    bufnr,&#xA;    &#34;FormatModifications&#34;,&#xA;    function()&#xA;      local lsp_format_modifications = require&#34;lsp-format-modifications&#34;&#xA;      lsp_format_modifications.format_modifications(client, bufnr)&#xA;    end,&#xA;    {}&#xA;  )&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d prefer to instead format-on-save, try:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local on_attach = function(client, bufnr)&#xA;  -- your usual configuration â€” options, keymaps, etc&#xA;  -- ...&#xA;&#xA;  local augroup_id = vim.api.nvim_create_augroup(&#xA;    &#34;FormatModificationsDocumentFormattingGroup&#34;,&#xA;    { clear = false }&#xA;  )&#xA;  vim.api.nvim_clear_autocmds({ group = augroup_id, buffer = bufnr })&#xA;&#xA;  vim.api.nvim_create_autocmd(&#xA;    { &#34;BufWritePre&#34; },&#xA;    {&#xA;      group = augroup_id,&#xA;      buffer = bufnr,&#xA;      callback = function()&#xA;        local lsp_format_modifications = require&#34;lsp-format-modifications&#34;&#xA;        lsp_format_modifications.format_modifications(client, bufnr)&#xA;      end,&#xA;    }&#xA;  )&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;A complete configuration table is below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local config = {&#xA;  -- The callback that is invoked to compute a diff so that we know what to&#xA;  -- format. This defaults to vim.diff with some sensible defaults.&#xA;  diff_callback = function(compareee_content, buf_content)&#xA;    return vim.diff(compareee_content, buf_content, {...})&#xA;  end,&#xA;&#xA;  -- The callback that is invoked to actually do the formatting on the changed&#xA;  -- hunks. Defaults to vim.lsp.buf.format (requires Neovim â‰¥ 0.8).&#xA;  format_callback = vim.lsp.buf.format,&#xA;&#xA;  -- The VCS to use. Possible options are: &#34;git&#34;, &#34;hg&#34;. Defaults to &#34;git&#34;.&#xA;  vcs = &#34;git&#34;,&#xA;&#xA;  -- EXPERIMENTAL: when true, do not attempt to format the outermost empty&#xA;  -- lines in diff hunks, and do not touch hunks consisting of entirely empty&#xA;  -- lines. For some LSP servers, this can result in more intuitive behaviour.&#xA;  experimental_empty_line_handling = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caveats and issues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please raise an issue if something is wrong â€” but read this section first.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In my experience with LSP, I&#39;ve found that most language servers have imperfect support for range formatting. A lot of the time, selecting and formatting a range results in the formatter also capturing some of the surrounding text. I&#39;m not totally sure why this is, but the upshot is that &lt;em&gt;for some language servers, &lt;code&gt;:FormatModifications&lt;/code&gt; might capture more than just the lines in the hunk&lt;/em&gt;. This is usually not a big deal.&lt;/p&gt; &#xA;&lt;p&gt;A good way to test whether &lt;code&gt;lsp-format-modifications.nvim&lt;/code&gt; is playing up, or whether it&#39;s just your language server, is to visually select the changed range and hit &lt;code&gt;gq&lt;/code&gt; (invoking &lt;code&gt;formatexpr&lt;/code&gt;). If you see the same problem, it&#39;s more likely to be problem with your language server.&lt;/p&gt; &#xA;&lt;h2&gt;Supported VCSs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;VCS&lt;/th&gt; &#xA;   &lt;th&gt;Works with &lt;code&gt;lsp-format-modifications.nvim&lt;/code&gt;?&lt;/th&gt; &#xA;   &lt;th&gt;More info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://git-scm.com&#34;&gt;Git&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.mercurial-scm.org&#34;&gt;Mercurial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;Implemented in &lt;a href=&#34;https://github.com/joechrisellis/lsp-format-modifications.nvim/pull/3&#34;&gt;this PR&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Adding support for a new VCS is fairly simple (see &lt;a href=&#34;https://github.com/joechrisellis/lsp-format-modifications.nvim/pull/3&#34;&gt;this PR&lt;/a&gt; for an example) â€” pull requests are very welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Tested language servers&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language server&lt;/th&gt; &#xA;   &lt;th&gt;Works with &lt;code&gt;lsp-format-modifications.nvim&lt;/code&gt;?&lt;/th&gt; &#xA;   &lt;th&gt;More info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;clangd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;tsserver&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;null_ls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;See &lt;a href=&#34;https://github.com/joechrisellis/lsp-format-modifications.nvim/issues/1#issuecomment-1275302811&#34;&gt;this issue&lt;/a&gt; for how to get set up â€” only sources that support range formatting will work.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;lua-language-server&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;âœ…&lt;/td&gt; &#xA;   &lt;td&gt;For best results, set the &lt;code&gt;experimental_empty_line_handling&lt;/code&gt; option in config.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>