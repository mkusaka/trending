<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-04T01:50:59Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kylechui/nvim-surround</title>
    <updated>2022-07-04T01:50:59Z</updated>
    <id>tag:github.com,2022-07-04:/kylechui/nvim-surround</id>
    <link href="https://github.com/kylechui/nvim-surround" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim plugin for adding/changing/deleting surrounding delimiter pairs. Written with ‚ù§Ô∏è in Lua.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-surround&lt;/h1&gt; &#xA;&lt;p&gt;Surround selections, stylishly &lt;span&gt;üòé&lt;/span&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: This plugin is still in early development, so some things might not be fully fleshed out or stable. Feel free to open an issue or pull request!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;video src=&#34;https://user-images.githubusercontent.com/48545987/176824692-28c16e7b-5f30-4ba9-8f23-6d4b9c050428.mp4&#34; type=&#34;video/mp4&#34; width=&#34;800&#34;&gt; &#xA; &lt;/video&gt;&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ú®&lt;/span&gt; Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add/change/remove surrounding pairs and HTML tags&lt;/li&gt; &#xA; &lt;li&gt;Dot-repeat previous actions&lt;/li&gt; &#xA; &lt;li&gt;Change &lt;em&gt;only&lt;/em&gt; the surrounding HTML tag&#39;s element type, and leave its attributes&lt;/li&gt; &#xA; &lt;li&gt;Use a single character as an alias for several text-objects &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;E.g. &lt;code&gt;q&lt;/code&gt; is aliased to &lt;code&gt;`,&#39;,&#34;&lt;/code&gt;, so &lt;code&gt;csqb&lt;/code&gt; replaces the &lt;em&gt;nearest&lt;/em&gt; set of quotes with parentheses&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;üì¶&lt;/span&gt; Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install this plugin with your favorite package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;use({&#xA;    &#34;kylechui/nvim-surround&#34;,&#xA;    config = function()&#xA;        require(&#34;nvim-surround&#34;).setup({&#xA;            -- Configuration here, or leave empty to use defaults&#xA;        })&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;Plug &#34;kylechui/nvim-surround&#34;&#xA;&#xA;lua &amp;lt;&amp;lt; EOF&#xA;    require(&#34;nvim-surround&#34;).setup({&#xA;        -- Configuration here, or leave empty to use defaults&#xA;    })&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚öô&lt;/span&gt; Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The default configuration is as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-surround&#34;).setup({&#xA;    keymaps = { -- vim-surround style keymaps&#xA;        insert = &#34;ys&#34;,&#xA;        visual = &#34;S&#34;,&#xA;        delete = &#34;ds&#34;,&#xA;        change = &#34;cs&#34;,&#xA;    },&#xA;    delimiters = {&#xA;        pairs = {&#xA;            [&#34;(&#34;] = { &#34;( &#34;, &#34; )&#34; },&#xA;            [&#34;)&#34;] = { &#34;(&#34;, &#34;)&#34; },&#xA;            [&#34;{&#34;] = { &#34;{ &#34;, &#34; }&#34; },&#xA;            [&#34;}&#34;] = { &#34;{&#34;, &#34;}&#34; },&#xA;            [&#34;&amp;lt;&#34;] = { &#34;&amp;lt; &#34;, &#34; &amp;gt;&#34; },&#xA;            [&#34;&amp;gt;&#34;] = { &#34;&amp;lt;&#34;, &#34;&amp;gt;&#34; },&#xA;            [&#34;[&#34;] = { &#34;[ &#34;, &#34; ]&#34; },&#xA;            [&#34;]&#34;] = { &#34;[&#34;, &#34;]&#34; },&#xA;        },&#xA;        separators = {&#xA;            [&#34;&#39;&#34;] = { &#34;&#39;&#34;, &#34;&#39;&#34; },&#xA;            [&#39;&#34;&#39;] = { &#39;&#34;&#39;, &#39;&#34;&#39; },&#xA;            [&#34;`&#34;] = { &#34;`&#34;, &#34;`&#34; },&#xA;        },&#xA;        HTML = {&#xA;            [&#34;t&#34;] = true, -- Use &#34;t&#34; for HTML-style mappings&#xA;        },&#xA;        aliases = {&#xA;            [&#34;a&#34;] = &#34;&amp;gt;&#34;, -- Single character aliases apply everywhere&#xA;            [&#34;b&#34;] = &#34;)&#34;,&#xA;            [&#34;B&#34;] = &#34;}&#34;,&#xA;            [&#34;r&#34;] = &#34;]&#34;,&#xA;            [&#34;q&#34;] = { &#39;&#34;&#39;, &#34;&#39;&#34;, &#34;`&#34; }, -- Table aliases only apply for changes/deletions&#xA;        },&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All keys should be one character &lt;em&gt;exactly&lt;/em&gt;. To overwrite any functionality, you only need to specify the keys that you wish to modify. To disable any functionality, simply set the corresponding key&#39;s value to &lt;code&gt;false&lt;/code&gt;. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-surround&#34;).setup({&#xA;    delimiters = {&#xA;        pairs = {&#xA;            [&#34;b&#34;] = { &#34;{&#34;, &#34;}&#34; },&#xA;        },&#xA;        HTML = { -- Disables HTML-style mappings&#xA;            [&#34;t&#34;] = false,&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚úÖ&lt;/span&gt; TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find a better way to use &lt;code&gt;operatorfunc&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;There&#39;s probably a better way to avoid the &lt;code&gt;va&#34;&lt;/code&gt; white space situation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Shoutouts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;vim-surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvimminisurround&#34;&gt;mini.surround&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Like this project? Give it a &lt;span&gt;‚≠ê&lt;/span&gt; to show your support!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kyazdani42/nvim-web-devicons</title>
    <updated>2022-07-04T01:50:59Z</updated>
    <id>tag:github.com,2022-07-04:/kyazdani42/nvim-web-devicons</id>
    <link href="https://github.com/kyazdani42/nvim-web-devicons" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lua `fork` of vim-web-devicons for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nvim-web-devicons&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;code&gt;lua&lt;/code&gt; fork of &lt;a href=&#34;https://github.com/ryanoasis/vim-devicons&#34;&gt;vim-devicons&lt;/a&gt;. This plugin provides the same icons &lt;em&gt;as well as&lt;/em&gt; colors for each icon.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;A patched font&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;This adds all the highlight groups for the devicons i.e. it calls &lt;code&gt;highlight IconNameDevicon guifg=&#39;&amp;lt;color&amp;gt;&#39; ctermfg=&#39;&amp;lt;cterm_color&amp;gt;&#39;&lt;/code&gt; for all icons this might need to be re-called in a &lt;code&gt;Colorscheme&lt;/code&gt; to re-apply cleared highlights if the color scheme changes&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.setup {&#xA; -- your personnal icons can go here (to override)&#xA; -- you can specify color or cterm_color instead of specifying both of them&#xA; -- DevIcon will be appended to `name`&#xA; override = {&#xA;  zsh = {&#xA;    icon = &#34;Óûï&#34;,&#xA;    color = &#34;#428850&#34;,&#xA;    cterm_color = &#34;65&#34;,&#xA;    name = &#34;Zsh&#34;&#xA;  }&#xA; };&#xA; -- globally enable default icons (default to false)&#xA; -- will get overriden by `get_icons` option&#xA; default = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get Icon&lt;/h3&gt; &#xA;&lt;p&gt;Get the icon for a given file by passing in the &lt;code&gt;name&lt;/code&gt;, the &lt;code&gt;extension&lt;/code&gt; and an &lt;em&gt;optional&lt;/em&gt; options &lt;code&gt;table&lt;/code&gt;. The name is passed in to check for an exact match e.g. &lt;code&gt;.bashrc&lt;/code&gt; if there is no exact name match the extension is used. Calls &lt;code&gt;.setup()&lt;/code&gt; if it hasn&#39;t already ran.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, options)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The optional &lt;code&gt;options&lt;/code&gt; argument can used to change how the plugin works the keys include &lt;code&gt;default = &amp;lt;boolean&amp;gt;&lt;/code&gt;. If the default key is set to true this function will return a default if there is no matching icon e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icon(filename, extension, { default = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check if the setup function was already called with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.has_loaded()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get icon and color code&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_icon_color&lt;/code&gt; differs from &lt;code&gt;get_icon&lt;/code&gt; only in the second return value. &lt;code&gt;get_icon_cterm_color&lt;/code&gt; returns cterm color instead of gui color &lt;code&gt;get_icon&lt;/code&gt; returns icon and highlight name. If you want to get color code, you can use this function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local icon, color = require&#39;nvim-web-devicons&#39;.get_icon_color(&#34;init.lua&#34;, &#34;lua&#34;)&#xA;assert(icon == &#34;Óò†&#34;)&#xA;assert(color == &#34;#51a0cf&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Get all icons&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to get all of the registered icons with the &lt;code&gt;get_icons()&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-web-devicons&#39;.get_icons()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be useful for debugging purposes or for creating custom highlights for each icon.&lt;/p&gt; &#xA;&lt;h3&gt;Set an icon&lt;/h3&gt; &#xA;&lt;p&gt;You can override individual icons with the &lt;code&gt;set_icon({...})&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_icon {&#xA;  zsh = {&#xA;    icon = &#34;Óûï&#34;,&#xA;    color = &#34;#428850&#34;,&#xA;    cterm_color = &#34;65&#34;,&#xA;    name = &#34;Zsh&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can override the default icon with the &lt;code&gt;set_default_icon(icon, color)&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).set_default_icon(&#39;ÔÉ∂&#39;, &#39;#6d8086&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Getting icons by filetype&lt;/h3&gt; &#xA;&lt;p&gt;You can get the icon and colors associated with a filetype using the &lt;code&gt;by_filetype&lt;/code&gt; functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-web-devicons&#34;).get_icon_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_colors_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_color_by_filetype(filetype, opts)&#xA;require(&#34;nvim-web-devicons&#34;).get_icon_cterm_color_by_filetype(filetype, opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These functions are the same as their counterparts without the &lt;code&gt;_by_filetype&lt;/code&gt; suffix, but they take a filetype instead of a name/extension.&lt;/p&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;get_icon_name_by_filetype(filetype)&lt;/code&gt; to get the icon name associated with the filetype.&lt;/p&gt;</summary>
  </entry>
</feed>