<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-21T01:34:41Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chentoast/marks.nvim</title>
    <updated>2024-02-21T01:34:41Z</updated>
    <id>tag:github.com,2024-02-21:/chentoast/marks.nvim</id>
    <link href="https://github.com/chentoast/marks.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A better user experience for viewing and interacting with Vim marks.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;marks.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A better user experience for interacting with and manipulating Vim marks. Requires Neovim 0.5+.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chentoast/marks.nvim/assets/marks-demo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Screenshot:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chentoast/marks.nvim/assets/demo_screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;view marks in the sign column&lt;/li&gt; &#xA; &lt;li&gt;quickly add, delete, and toggle marks&lt;/li&gt; &#xA; &lt;li&gt;cycle between marks&lt;/li&gt; &#xA; &lt;li&gt;preview marks in floating windows&lt;/li&gt; &#xA; &lt;li&gt;extract marks to quickfix/location list&lt;/li&gt; &#xA; &lt;li&gt;set bookmarks with sign/virtual text annotations for quick navigation across buffers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;I recommend you use your favorite vim plugin manager, like vim-plug, or packer.&lt;/p&gt; &#xA;&lt;p&gt;For example, using vim-plug, you would add the following line:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Plug &#39;chentoast/marks.nvim&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to manually install, you can clone this repository, and add the path to the cloned repo to your runtimepath: &lt;code&gt;set rtp+=/path/to/cloned/repo&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;marks&#39;.setup {&#xA;  -- whether to map keybinds or not. default true&#xA;  default_mappings = true,&#xA;  -- which builtin marks to show. default {}&#xA;  builtin_marks = { &#34;.&#34;, &#34;&amp;lt;&#34;, &#34;&amp;gt;&#34;, &#34;^&#34; },&#xA;  -- whether movements cycle back to the beginning/end of buffer. default true&#xA;  cyclic = true,&#xA;  -- whether the shada file is updated after modifying uppercase marks. default false&#xA;  force_write_shada = false,&#xA;  -- how often (in ms) to redraw signs/recompute mark positions. &#xA;  -- higher values will have better performance but may cause visual lag, &#xA;  -- while lower values may cause performance penalties. default 150.&#xA;  refresh_interval = 250,&#xA;  -- sign priorities for each type of mark - builtin marks, uppercase marks, lowercase&#xA;  -- marks, and bookmarks.&#xA;  -- can be either a table with all/none of the keys, or a single number, in which case&#xA;  -- the priority applies to all marks.&#xA;  -- default 10.&#xA;  sign_priority = { lower=10, upper=15, builtin=8, bookmark=20 },&#xA;  -- disables mark tracking for specific filetypes. default {}&#xA;  excluded_filetypes = {},&#xA;  -- disables mark tracking for specific buftypes. default {}&#xA;  excluded_buftypes = {},&#xA;  -- marks.nvim allows you to configure up to 10 bookmark groups, each with its own&#xA;  -- sign/virttext. Bookmarks can be used to group together positions and quickly move&#xA;  -- across multiple buffers. default sign is &#39;!@#$%^&amp;amp;*()&#39; (from 0 to 9), and&#xA;  -- default virt_text is &#34;&#34;.&#xA;  bookmark_0 = {&#xA;    sign = &#34;âš‘&#34;,&#xA;    virt_text = &#34;hello world&#34;,&#xA;    -- explicitly prompt for a virtual line annotation when setting a bookmark from this group.&#xA;    -- defaults to false.&#xA;    annotate = false,&#xA;  },&#xA;  mappings = {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;:help marks-setup&lt;/code&gt; for all of the keys that can be passed to the setup function.&lt;/p&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;The following default mappings are included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    mx              Set mark x&#xA;    m,              Set the next available alphabetical (lowercase) mark&#xA;    m;              Toggle the next available mark at the current line&#xA;    dmx             Delete mark x&#xA;    dm-             Delete all marks on the current line&#xA;    dm&amp;lt;space&amp;gt;       Delete all marks in the current buffer&#xA;    m]              Move to next mark&#xA;    m[              Move to previous mark&#xA;    m:              Preview mark. This will prompt you for a specific mark to&#xA;                    preview; press &amp;lt;cr&amp;gt; to preview the next mark.&#xA;                    &#xA;    m[0-9]          Add a bookmark from bookmark group[0-9].&#xA;    dm[0-9]         Delete all bookmarks from bookmark group[0-9].&#xA;    m}              Move to the next bookmark having the same type as the bookmark under&#xA;                    the cursor. Works across buffers.&#xA;    m{              Move to the previous bookmark having the same type as the bookmark under&#xA;                    the cursor. Works across buffers.&#xA;    dm=             Delete the bookmark under the cursor.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set &lt;code&gt;default_mappings = false&lt;/code&gt; in the setup function if you don&#39;t want to have these mapped.&lt;/p&gt; &#xA;&lt;p&gt;You can change the keybindings by setting the &lt;code&gt;mapping&lt;/code&gt; table in the setup function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;marks&#39;.setup {&#xA;  mappings = {&#xA;    set_next = &#34;m,&#34;,&#xA;    next = &#34;m]&#34;,&#xA;    preview = &#34;m:&#34;,&#xA;    set_bookmark0 = &#34;m0&#34;,&#xA;    prev = false -- pass false to disable only this default mapping&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following keys are available to be passed to the mapping table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  set_next               Set next available lowercase mark at cursor.&#xA;  toggle                 Toggle next available mark at cursor.&#xA;  delete_line            Deletes all marks on current line.&#xA;  delete_buf             Deletes all marks in current buffer.&#xA;  next                   Goes to next mark in buffer.&#xA;  prev                   Goes to previous mark in buffer.&#xA;  preview                Previews mark (will wait for user input). press &amp;lt;cr&amp;gt; to just preview the next mark.&#xA;  set                    Sets a letter mark (will wait for input).&#xA;  delete                 Delete a letter mark (will wait for input).&#xA;&#xA;  set_bookmark[0-9]      Sets a bookmark from group[0-9].&#xA;  delete_bookmark[0-9]   Deletes all bookmarks from group[0-9].&#xA;  delete_bookmark        Deletes the bookmark under the cursor.&#xA;  next_bookmark          Moves to the next bookmark having the same type as the&#xA;                         bookmark under the cursor.&#xA;  prev_bookmark          Moves to the previous bookmark having the same type as the&#xA;                         bookmark under the cursor.&#xA;  next_bookmark[0-9]     Moves to the next bookmark of the same group type. Works by&#xA;                         first going according to line number, and then according to buffer&#xA;                         number.&#xA;  prev_bookmark[0-9]     Moves to the previous bookmark of the same group type. Works by&#xA;                         first going according to line number, and then according to buffer&#xA;                         number.&#xA;  annotate               Prompts the user for a virtual line annotation that is then placed&#xA;                         above the bookmark. Requires neovim 0.6+ and is not mapped by default.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;marks.nvim also provides a list of &lt;code&gt;&amp;lt;Plug&amp;gt;&lt;/code&gt; mappings for you, in case you want to map things via vimscript. The list of provided mappings are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;Plug&amp;gt;(Marks-set)&#xA;&amp;lt;Plug&amp;gt;(Marks-setnext)&#xA;&amp;lt;Plug&amp;gt;(Marks-toggle)&#xA;&amp;lt;Plug&amp;gt;(Marks-delete)&#xA;&amp;lt;Plug&amp;gt;(Marks-deleteline)&#xA;&amp;lt;Plug&amp;gt;(Marks-deletebuf)&#xA;&amp;lt;Plug&amp;gt;(Marks-preview)&#xA;&amp;lt;Plug&amp;gt;(Marks-next)&#xA;&amp;lt;Plug&amp;gt;(Marks-prev)&#xA;&#xA;&amp;lt;Plug&amp;gt;(Marks-delete-bookmark)&#xA;&amp;lt;Plug&amp;gt;(Marks-next-bookmark)&#xA;&amp;lt;Plug&amp;gt;(Marks-prev-bookmark)&#xA;&amp;lt;Plug&amp;gt;(Marks-set-bookmark[0-9])&#xA;&amp;lt;Plug&amp;gt;(Marks-delete-bookmark[0-9])&#xA;&amp;lt;Plug&amp;gt;(Marks-toggle-bookmark[0-9])&#xA;&amp;lt;Plug&amp;gt;(Marks-next-bookmark[0-9])&#xA;&amp;lt;Plug&amp;gt;(Marks-prev-bookmark[0-9])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;:help marks-mappings&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Highlights and Commands&lt;/h2&gt; &#xA;&lt;p&gt;marks.nvim defines the following highlight groups:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MarkSignHL&lt;/code&gt; The highlight group for displayed mark signs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MarkSignNumHL&lt;/code&gt; The highlight group for the number line in a signcolumn.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;MarkVirtTextHL&lt;/code&gt; The highlight group for bookmark virtual text annotations.&lt;/p&gt; &#xA;&lt;p&gt;marks.nvim also defines the following commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:MarksToggleSigns[ buffer]&lt;/code&gt; Toggle signs globally. Also accepts an optional buffer number to toggle signs for that buffer only.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:MarksListBuf&lt;/code&gt; Fill the location list with all marks in the current buffer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:MarksListGlobal&lt;/code&gt; Fill the location list with all global marks in open buffers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:MarksListAll&lt;/code&gt; Fill the location list with all marks in all open buffers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:BookmarksList group_number&lt;/code&gt; Fill the location list with all bookmarks of group &#34;group_number&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:BookmarksListAll&lt;/code&gt; Fill the location list with all bookmarks, across all groups.&lt;/p&gt; &#xA;&lt;p&gt;There are also corresponding commands for those who prefer the quickfix list:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:MarksQFListBuf&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:MarksQFListGlobal&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:MarksQFListAll&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:BookmarksQFList group_number&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:BookmarksQFListAll&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kshenoy/vim-signature&#34;&gt;vim-signature&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MattesGroeger/vim-bookmarks&#34;&gt;vim-bookmarks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Todos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operator pending mappings and count aware movement mappings&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kkharji/sqlite.lua</title>
    <updated>2024-02-21T01:34:41Z</updated>
    <id>tag:github.com,2024-02-21:/kkharji/sqlite.lua</id>
    <link href="https://github.com/kkharji/sqlite.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SQLite LuaJIT binding with a very simple api.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sqlite.lua ðŸ’«&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt;/&lt;a href=&#34;https://luajit.org&#34;&gt;LuaJIT&lt;/a&gt; binding and a highly opinionated wrapper for storing, retrieving, caching, and persisting &lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite&lt;/a&gt; databases. &lt;a href=&#34;https://github.com/kkharji/sqlite.lua&#34;&gt;sqlite.lua&lt;/a&gt; present new possibilities for plugin development and while it&#39;s primarily created for &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim&lt;/a&gt;, it support all luajit environments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kkharji/sqlite.lua/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kkharji/sqlite.lua/raw/master/doc/sqlite.txt&#34;&gt;Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kkharji/sqlite.lua/raw/master/lua/sqlite/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kkharji/sqlite.lua#-powered-by-sqlitelua&#34;&gt;Powered By sqlite.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2361214/202757101-65735d52-2927-4de0-8d69-b078b66aaca6.svg?sanitize=true&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;âœ¨ Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Connect, reconnect, close sql db connections &lt;code&gt;sqlite:open/sql:close&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Evaluate any sqlite statement and return result if any &lt;code&gt;sqlite:eval&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Helper function over &lt;code&gt;sqlite:eval&lt;/code&gt; to do all sort of operation.&lt;/li&gt; &#xA; &lt;li&gt;High level API with &lt;code&gt;sqlite.tbl&lt;/code&gt; for better experience.&lt;/li&gt; &#xA; &lt;li&gt;lua tables deserialization/serialization (in helper functions and high level api)&lt;/li&gt; &#xA; &lt;li&gt;90% test coverage.&lt;/li&gt; &#xA; &lt;li&gt;Up-to-date docs and changelog&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ðŸš§ Installation&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer.nvim&lt;/a&gt; (Neovim)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;kkharji/sqlite.lua&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://luarocks.org/&#34;&gt;luarocks&lt;/a&gt; (LuaJIT)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;luarocks install sqlite luv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ensure you have &lt;code&gt;sqlite3&lt;/code&gt; installed locally.&lt;/strong&gt; (if you are on mac it might be installed already)&lt;/p&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.sqlite.org/download.html&#34;&gt;Download precompiled&lt;/a&gt; and set &lt;code&gt;let g:sqlite_clib_path = path/to/sqlite3.dll&lt;/code&gt; (note: &lt;code&gt;/&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h4&gt;Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo pacman -S sqlite # Arch&#xA;sudo apt-get install sqlite3 libsqlite3-dev # Ubuntu&#xA;sudo dnf install sqlite sqlite-devel # Fedora&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nix (home-manager)&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;programs.neovim.plugins = [&#xA;    {&#xA;      plugin = pkgs.vimPlugins.sqlite-lua;&#xA;      config = &#34;let g:sqlite_clib_path = &#39;${pkgs.sqlite.out}/lib/libsqlite3.so&#39;&#34;;&#xA;    }&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Notes:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure you install &lt;code&gt;pkgs.sqlite&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you are using home-manager on OSX, you must replace &lt;code&gt;libsqlite3.so&lt;/code&gt; with &lt;code&gt;libsqlite3.dylib&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ðŸ”¥ Powered by sqlite.lua&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kkharji/impatient.nvim&#34;&gt;https://github.com/kkharji/impatient.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-smart-history.nvim&#34;&gt;https://github.com/nvim-telescope/telescope-smart-history.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-frecency.nvim&#34;&gt;https://github.com/nvim-telescope/telescope-frecency.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kkharji/lispdocs.nvim&#34;&gt;https://github.com/kkharji/lispdocs.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope-cheat.nvim&#34;&gt;https://github.com/nvim-telescope/telescope-cheat.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>