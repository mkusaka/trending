<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-07T01:47:47Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rxyhn/dotfiles</title>
    <updated>2022-06-07T01:47:47Z</updated>
    <id>tag:github.com,2022-06-07:/rxyhn/dotfiles</id>
    <link href="https://github.com/rxyhn/dotfiles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My awesomewm dotfiles for awesome people! ‚ú®&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/rxhyn-dotfile-header.png&#34; alt=&#34;Home Preview&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#wrench--setup&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-setup.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rxyhn/dotfiles/wiki&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-wiki.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#ocean--gallery&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-gallery.png&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#money_with_wings--tip-jar&#34;&gt;&lt;img width=&#34;150px&#34; style=&#34;padding: 0 10px;&#34; src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/button-tipjar.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- RICE PREVIEW --&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/aesthetic.png&#34; alt=&#34;Rice Preview&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;!-- BADGES --&gt; &#xA;&lt;h1&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img alt=&#34;&#34; align=&#34;left&#34; src=&#34;https://img.shields.io/github/stars/rxyhn/dotfiles?color=162026&amp;amp;labelColor=162026&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img alt=&#34;&#34; align=&#34;right&#34; src=&#34;https://badges.pufler.dev/visits/rxyhn/dotfiles?style=for-the-badge&amp;amp;color=162026&amp;amp;logoColor=white&amp;amp;labelColor=162026&#34;&gt; &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Hi there! Thanks for dropping by! &lt;span&gt;üíô&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://awesomewm.org/&#34;&gt;&lt;img alt=&#34;AwesomeWM Logo&#34; height=&#34;150&#34; align=&#34;left&#34; src=&#34;https://awesomewm.org/doc/api/images/AUTOGEN_wibox_logo_logo_and_name.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;b&gt; Rxyhn&#39;s Aesthetic AwesomeWM Configuration Files! &lt;/b&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome to my AwesomeWM configuration files!&lt;/p&gt; &#xA;&lt;p&gt;This is my personal collection of configuration files.&lt;/p&gt; &#xA;&lt;p&gt;You might be here for looking my AwesomeWM configuration files? or looking for &lt;strong&gt;Linux Rice&lt;/strong&gt; reference?&lt;/p&gt; &#xA;&lt;p&gt;feel free to steal anything from here but don&#39;t forget to give me &lt;strong&gt;credits&lt;/strong&gt; :)&lt;/p&gt; &#xA;&lt;p&gt;AwesomeWM is the most powerful and highly configurable, next generation framework window manager for X, Although it takes time and effort to configure it, but I&#39;m very satisfied with the result.&lt;/p&gt; &#xA;&lt;p&gt;This is a beautiful user interface isn&#39;t it?&lt;/p&gt; &#xA;&lt;p&gt;These dotfiles are made with love, for sure.&lt;/p&gt; &#xA;&lt;!-- INFORMATION --&gt; &#xA;&lt;h2&gt;&lt;span&gt;‚ùÑ&lt;/span&gt; ‚Äé &lt;samp&gt;Information&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here are some details about my setup:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;OS:&lt;/strong&gt; &lt;a href=&#34;https://archlinux.org&#34;&gt;Arch Linux&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;WM:&lt;/strong&gt; &lt;a href=&#34;https://github.com/awesomeWM/awesome&#34;&gt;awesome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Terminal:&lt;/strong&gt; &lt;a href=&#34;https://github.com/alacritty/alacritty&#34;&gt;alacritty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shell:&lt;/strong&gt; &lt;a href=&#34;https://www.zsh.org/&#34;&gt;zsh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/neovim/neovim&#34;&gt;neovim&lt;/a&gt; / &lt;a href=&#34;https://github.com/microsoft/vscode&#34;&gt;vscode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compositor:&lt;/strong&gt; &lt;a href=&#34;https://github.com/yshui/picom&#34;&gt;picom&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Application Launcher:&lt;/strong&gt; &lt;a href=&#34;https://github.com/davatorium/rofi&#34;&gt;rofi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Music Player&lt;/strong&gt; &lt;a href=&#34;https://github.com/ncmpcpp/ncmpcpp&#34;&gt;ncmpcpp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AwesomeWM Modules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/blingcorp/bling&#34;&gt;bling&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adds new layouts, modules, and widgets that try to primarily focus on window management&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/andOrlando/rubato&#34;&gt;rubato&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Creates smooth animations with a slope curve for awesomeWM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/xinhaoyuan/layout-machi&#34;&gt;layout-machi&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Manual layout for Awesome with an interactive editor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/andOrlando/color&#34;&gt;color&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Clean and efficient api for color conversion in lua&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/Aire-One/awesome-battery_widget&#34;&gt;UPower Battery Widget&lt;/a&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A UPowerGlib based battery widget for the Awesome WM&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Main Features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dashboard&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full Animated Dock&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Info Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Control Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Notification Center&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Word Clock Lockscreen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Exit Screen&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Music Player&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;App Launcher&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Github Activity Previews&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brightness / Volume OSD&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Battery Indicator&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wifi Indicator&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This repo has a wiki! You can check it by clicking &lt;del&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UIp6_0kct_U&#34;&gt;here&lt;/a&gt;&lt;/del&gt; &lt;a href=&#34;https://github.com/rxyhn/dotfiles/wiki&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- SETUP --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üîß&lt;/span&gt; ‚Äé &lt;samp&gt;Setup&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This is step-by-step how to install these dotfiles. Just &lt;a href=&#34;https://en.wikipedia.org/wiki/RTFM&#34;&gt;R.T.F.M&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;1. Install Required Dependencies and Enable Services&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; ‚Äé &lt;strong&gt;This setup instructions only provided for Arch Linux (and other Arch-based distributions)&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;Assuming your &lt;em&gt;AUR Helper&lt;/em&gt; is &lt;a href=&#34;https://github.com/Morganamilo/paru&#34;&gt;paru&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;First of all you should install the &lt;a href=&#34;https://github.com/awesomeWM/awesome/&#34;&gt;git version of AwesomeWM&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -S awesome-git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Install necessary dependencies&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;paru -Sy picom-git alacritty rofi todo-bin acpi acpid acpi_call upower \&#xA;jq inotify-tools polkit-gnome xdotool xclip gpick ffmpeg blueman \&#xA;pipewire pipewire-alsa pipewire-pulse pamixer brightnessctl scrot redshift \&#xA;feh mpv mpd mpc mpdris2 ncmpcpp playerctl --needed &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Enable Services&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;systemctl --user enable mpd.service&#xA;systemctl --user start mpd.service&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;2. Install My AwesomeWM Dotfiles&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Clone this repository&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --recurse-submodules https://github.com/rxyhn/dotfiles.git&#xA;cd dotfiles &amp;amp;&amp;amp; git submodule update --remote --merge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Copy config files&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -r config/* ~/.config/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Install a few fonts (mainly icon fonts) in order for text and icons to be rendered properly.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -r misc/fonts/* ~/.fonts/&#xA;# or to ~/.local/share/fonts&#xA;cp -r misc/fonts/* ~/.local/share/fonts/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;And run this command for your system to detect the newly installed fonts.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;fc-cache -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;Finally, now you can login with AwesomeWM&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;Congratulations, at this point you have installed this aesthetic dotfiles! &lt;span&gt;üéâ&lt;/span&gt;&lt;/p&gt; &#xA; &lt;p&gt;Log out from your current desktop session and log in into AwesomeWM&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- MISCELLANEOUS --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üçÄ&lt;/span&gt; ‚Äé &lt;samp&gt;Miscellaneous&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;VSCode Theme&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/93292023/170319552-a42b920d-9f59-44d9-a9ad-b3aeed55bf6a.png&#34; alt=&#34;VSCode Preview&#34; width=&#34;500px&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;span&gt;üåå&lt;/span&gt; ‚Äé &lt;samp&gt;Aesthetic VSCode&lt;/samp&gt;&lt;/p&gt; &#xA; &lt;p&gt;Setup:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt; &lt;p&gt;Install required extension&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=iocave.customize-ui&#34;&gt;Customize UI&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=antfu.icons-carbon&#34;&gt;Carbon Product Icons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;p&gt;note: You can use any themes, but some of the colors will be overwritten by mine&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;li&gt; &lt;p&gt;copy config file&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp misc/vscode/User/settings.json ~/.config/Code/User&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;GTK Theme&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/93292023/172054111-51b8e48f-d558-45da-8480-73e574fee6dc.png&#34; alt=&#34;gtk theme preview&#34; width=&#34;500px&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ú®&lt;/span&gt; ‚Äé &lt;samp&gt;Aesthetic-Dark gtk theme&lt;/samp&gt;&lt;/p&gt; &#xA; &lt;p&gt;Setup:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cp -rf misc/themes/* ~/.themes/&#xA;# or to /usr/share/themes&#xA;sudo cp -rf misc/themes/* /usr/share/themes/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;to apply the theme can use &lt;a href=&#34;https://archlinux.org/packages/community/x86_64/lxappearance&#34;&gt;lxappearance&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Touchpad tap-to-click &amp;amp; natural (reverse) scrolling (&lt;a href=&#34;https://wiki.archlinux.org/title/Libinput#Tapping_button_re-mapping&#34;&gt;libinput&lt;/a&gt;)&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;/etc/X11/xorg.conf.d/30-touchpad.conf&lt;/code&gt;&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-cfg&#34;&gt;Section &#34;InputClass&#34;&#xA;    Identifier &#34;touchpad&#34;&#xA;    Driver &#34;libinput&#34;&#xA;    MatchIsTouchpad &#34;on&#34;&#xA;    Option &#34;Tapping&#34; &#34;on&#34;&#xA;    Option &#34;TappingButtonMap&#34; &#34;lmr&#34;&#xA;    Option &#34;NaturalScrolling&#34; &#34;true&#34;&#xA;EndSection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- GALLERY --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üåä&lt;/span&gt; ‚Äé &lt;samp&gt;Gallery&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Simple, Minimalist and Modern Bar&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/wibar.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Aesthetic Dashboard with neat grid layout and Notification Center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/dashboard.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Complete information, Info Center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/info-center.png&#34; width=&#34;500px&#34; alt=&#34;dashboard preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;MacOS like control center&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/control-center.png&#34; width=&#34;500px&#34; alt=&#34;control center preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Custom mouse-friendly ncmpcpp UI&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/ncmpcpp.png&#34; width=&#34;500px&#34; alt=&#34;ncmpcpp preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Lockscreen with &lt;a href=&#34;https://github.com/RMTT/lua-pam&#34;&gt;PAM Integration&lt;/a&gt;&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/lockscreen.png&#34; width=&#34;500px&#34; alt=&#34;word clock lockscreen preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;b&gt;Minimalist Exitscreen&lt;/b&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#--------&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/assets/exitscreen.png&#34; width=&#34;500px&#34; alt=&#34;exitscreen preview&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- HISTORY --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üóæ&lt;/span&gt; ‚Äé &lt;samp&gt;History&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Ngl this is started when im feel bored lol and decided to start using Linux, more precisely in January 2022. Fyi im a &lt;strong&gt;new Linux user,&lt;/strong&gt; when it&#39;s in &lt;a href=&#34;https://facebook.com/groups/linuxart&#34;&gt;Linuxer Desktop Art&lt;/a&gt; i saw a linux setup that caught my eye, then I&#39;m interested in and trying something similar, So yeaaaaaah this is my current setup, my purpose of doing this is to hone my skills to make an attractive UI and also as a hobby. I wanna say thank you to those of you who like and love my setup &amp;lt;3&lt;/p&gt; &#xA;&lt;pre align=&#34;center&#34;&gt;&#xA;&lt;a href=&#34;https://raw.githubusercontent.com/rxyhn/dotfiles/main/#japan--history&#34;&gt;&#xA;&lt;img alt=&#34;&#34; align=&#34;center&#34; width=&#34;96%&#34; src=&#34;https://api.star-history.com/svg?repos=rxyhn/dotfiles&amp;amp;type=Date&#34;&gt;&#xA;&lt;/a&gt;&#xA;&lt;/pre&gt; &#xA;&lt;!-- TIP JAR --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üí∏&lt;/span&gt; ‚Äé &lt;samp&gt;TIP JAR&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If you enjoyed it and would like to show your appreciation, you may want to tip me here.&lt;/p&gt; &#xA;&lt;p&gt;It is never required but always appreciated.&lt;/p&gt; &#xA;&lt;p&gt;Thanks from the bottom of my heart! ‚Äé &lt;span&gt;üíó&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/rxyhn&#34;&gt;&lt;img src=&#34;https://ko-fi.com/img/githubbutton_sm.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- ACKNOWLEDGEMENTS --&gt; &#xA;&lt;h2&gt;&lt;span&gt;üí°&lt;/span&gt; ‚Äé &lt;samp&gt;Acknowledgements&lt;/samp&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Special thanks to&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;Contributors&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/rxyhn&#34;&gt;&lt;code&gt;rxyhn&lt;/code&gt;&lt;/a&gt; &lt;em&gt;there&#39;s nothing wrong with thanking yourself right?&lt;/em&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ner0z&#34;&gt;&lt;code&gt;ner0z&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/paulhersch&#34;&gt;&lt;code&gt;paulhersch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/ChocolateBread799&#34;&gt;&lt;code&gt;ChocolateBread799&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/janleigh&#34;&gt;&lt;code&gt;janleigh&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/rototrash&#34;&gt;&lt;code&gt;rototrash&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;em&gt;And for them, ofc.&lt;/em&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/elenapan&#34;&gt;&lt;code&gt;elenapan&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/manilarome&#34;&gt;&lt;code&gt;manilarome&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/JavaCafe01&#34;&gt;&lt;code&gt;JavaCafe01&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://github.com/andOrlando&#34;&gt;&lt;code&gt;andOrlando&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/rxyhn/AwesomeWM-Dotfiles/raw/main/.github/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?style=flat-square&amp;amp;label=License&amp;amp;message=GPL-3.0&amp;amp;logoColor=eceff4&amp;amp;logo=github&amp;amp;colorA=162026&amp;amp;colorB=162026&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qbcore-framework/qb-target</title>
    <updated>2022-06-07T01:47:47Z</updated>
    <id>tag:github.com,2022-06-07:/qbcore-framework/qb-target</id>
    <link href="https://github.com/qbcore-framework/qb-target" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A better interaction system for FiveM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qb-target&lt;/h1&gt; &#xA;&lt;p&gt;qb-target is a targeting solution that allows interaction with any predefined entity, model, entity type or polyzone. While activated you can easily and safely replace markers and distance checking, instead relying on intuitive design to improve player experiences and optimize interaction.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Lots of credits goes to &lt;a href=&#34;https://github.com/overextended/qtarget&#34;&gt;qtarget&lt;/a&gt; for rewriting all of bt-target to make it more optimized and this resource is pretty much a fork of it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Huge credit to &lt;a href=&#34;https://github.com/brentN5/bt-target&#34;&gt;bt-target&lt;/a&gt; from brentN5 for making the target a thing!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Credit to &lt;a href=&#34;https://github.com/MiddleSkillz/ms-peds&#34;&gt;ms-peds&lt;/a&gt; for allowing me to use their awesome ped spawner inside the target!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dependency&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mkafrin/PolyZone&#34;&gt;PolyZone&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Optional Dependency&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/qbcore-framework/qb-core&#34;&gt;QBCore&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Information&lt;/h2&gt; &#xA;&lt;p&gt;This repository was originally a direct fork and now it&#39;s own repository as it&#39;s basically qtarget but with lots of changes to it to make it better, most of the code comes from qtarget as I find their work awesome on this and what they&#39;ve achieved with it.&lt;/p&gt; &#xA;&lt;p&gt;You are free to help through Pull Requests and leave as much suggestions or issues, I love some help!&lt;/p&gt; &#xA;&lt;p&gt;The TEMPLATES.md and EXAMPLES.md are always being improved and new examples can be made on request, just let me know!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Maintains compatibility with bt-target while providing improved utility and performance&lt;/li&gt; &#xA; &lt;li&gt;Optimised and improved raycasting function allows interaction with a wider range of entities&lt;/li&gt; &#xA; &lt;li&gt;Add generic options to apply for all players, peds, vehicles, or objects&lt;/li&gt; &#xA; &lt;li&gt;Trigger an event, function or command after clicking an option, with the ability to pass any data through&lt;/li&gt; &#xA; &lt;li&gt;Define distance on a per-option or overall basis when triggering a target option&lt;/li&gt; &#xA; &lt;li&gt;Ability to redefine or remove options and add new options without replacing old ones&lt;/li&gt; &#xA; &lt;li&gt;Update the option list when moving towards or away from a target with variable distances on their options&lt;/li&gt; &#xA; &lt;li&gt;Support for entity bones, with built-in tables for opening vehicle doors&lt;/li&gt; &#xA; &lt;li&gt;Support checking for job, gang, citizenid, items, or specific entities&lt;/li&gt; &#xA; &lt;li&gt;Utilise the &lt;code&gt;canInteract&lt;/code&gt; function for advanced checks to show or hide an option based on any trigger&lt;/li&gt; &#xA; &lt;li&gt;Ped spawner to spawn peds and assign target options to them all in one place&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nvim-neo-tree/neo-tree.nvim</title>
    <updated>2022-06-07T01:47:47Z</updated>
    <id>tag:github.com,2022-06-07:/nvim-neo-tree/neo-tree.nvim</id>
    <link href="https://github.com/nvim-neo-tree/neo-tree.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin to manage the file system and other tree like structures.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Neo-tree.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Neo-tree is a Neovim plugin to browse the file system and other tree like structures in whatever style suits you, including sidebars, floating windows, netrw split style, or all of them at once!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-with-right-aligned-symbols.png&#34; alt=&#34;Neo-tree file system&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Breaking Changes BAD &lt;span&gt;üí£&lt;/span&gt; &lt;span&gt;üëø&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The biggest and most important feature of Neo-tree is that we will never knowingly push a breaking change and interrupt your day. Bugs happen, but breaking changes can always be avoided. When breaking changes are needed, there will be a new branch that you can opt into, when it is a good time for you.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/#what-is-a-breaking-change&#34;&gt;What is a Breaking Change?&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Changelog#20&#34;&gt;Changelog 2.0&lt;/a&gt; for breaking changes and deprecations in 2.0.&lt;/p&gt; &#xA;&lt;h3&gt;User Experience GOOD &lt;span&gt;üôÇ&lt;/span&gt; &lt;span&gt;üëç&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Aside from being polite about breaking changes, Neo-tree is also focused on the little details of user experience. Everything should work exactly as you would expect a sidebar to work without all of the glitchy behavior that is normally accepted in (neo)vim sidebars. I can&#39;t stand glitchy behavior, and neither should you!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neo-tree won&#39;t let other buffers take over its window.&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree won&#39;t leave its window scrolled to the last line when there is plenty of room to display the whole tree.&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree does not need to be manually refreshed (set &lt;code&gt;use_libuv_file_watcher=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree can intelligently follow the current file (set &lt;code&gt;follow_current_file=true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree is thoughtful about maintaining or setting focus on the right node&lt;/li&gt; &#xA; &lt;li&gt;Neo-tree windows in different tabs are completely separate&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;respect_gitignore&lt;/code&gt; actually works!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Neo-tree is smooth, efficient, stable, and pays attention to the little details. If you find anything janky, wanky, broken, or unintuitive, please open an issue so we can fix it.&lt;/p&gt; &#xA;&lt;h2&gt;Minimal Quickstart&lt;/h2&gt; &#xA;&lt;h4&gt;Minimal Example for Packer:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Unless you are still migrating, remove the deprecated commands from v1.x&#xA;vim.cmd([[ let g:neo_tree_remove_legacy_commands = 1 ]])&#xA;&#xA;use {&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    branch = &#34;v2.x&#34;,&#xA;    requires = { &#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;kyazdani42/nvim-web-devicons&#34;, -- not strictly required, but recommended&#xA;      &#34;MunifTanjim/nui.nvim&#34;,&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After installing, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Press &lt;code&gt;?&lt;/code&gt; in the Neo-tree window to view the list of mappings.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;h4&gt;Longer Example for Packer:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;nvim-neo-tree/neo-tree.nvim&#34;,&#xA;    branch = &#34;v2.x&#34;,&#xA;    requires = { &#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;kyazdani42/nvim-web-devicons&#34;, -- not strictly required, but recommended&#xA;      &#34;MunifTanjim/nui.nvim&#34;,&#xA;      {&#xA;        -- only needed if you want to use the commands with &#34;_with_window_picker&#34; suffix&#xA;        &#39;s1n7ax/nvim-window-picker&#39;,&#xA;        tag = &#34;1.*&#34;,&#xA;        config = function()&#xA;          require&#39;window-picker&#39;.setup({&#xA;            autoselect_one = true,&#xA;            include_current = false,&#xA;            filter_rules = {&#xA;              -- filter using buffer options&#xA;              bo = {&#xA;                -- if the file type is one of following, the window will be ignored&#xA;                filetype = { &#39;neo-tree&#39;, &#34;neo-tree-popup&#34;, &#34;notify&#34;, &#34;quickfix&#34; },&#xA;&#xA;                -- if the buffer type is one of following, the window will be ignored&#xA;                buftype = { &#39;terminal&#39; },&#xA;              },&#xA;            },&#xA;            other_win_hl_color = &#39;#e35e4f&#39;,&#xA;          })&#xA;        end,&#xA;      }&#xA;    },&#xA;    config = function ()&#xA;      -- Unless you are still migrating, remove the deprecated commands from v1.x&#xA;      vim.cmd([[ let g:neo_tree_remove_legacy_commands = 1 ]])&#xA;&#xA;      -- If you want icons for diagnostic errors, you&#39;ll need to define them somewhere:&#xA;      vim.fn.sign_define(&#34;DiagnosticSignError&#34;,&#xA;        {text = &#34;ÔÅó &#34;, texthl = &#34;DiagnosticSignError&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignWarn&#34;,&#xA;        {text = &#34;ÔÅ± &#34;, texthl = &#34;DiagnosticSignWarn&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignInfo&#34;,&#xA;        {text = &#34;ÔÅö &#34;, texthl = &#34;DiagnosticSignInfo&#34;})&#xA;      vim.fn.sign_define(&#34;DiagnosticSignHint&#34;,&#xA;        {text = &#34;Ô†¥&#34;, texthl = &#34;DiagnosticSignHint&#34;})&#xA;      -- NOTE: this is changed from v1.x, which used the old style of highlight groups&#xA;      -- in the form &#34;LspDiagnosticsSignWarning&#34;&#xA;&#xA;      require(&#34;neo-tree&#34;).setup({&#xA;        close_if_last_window = false, -- Close Neo-tree if it is the last window left in the tab&#xA;        popup_border_style = &#34;rounded&#34;,&#xA;        enable_git_status = true,&#xA;        enable_diagnostics = true,&#xA;        default_component_configs = {&#xA;          container = {&#xA;            enable_character_fade = true&#xA;          },&#xA;          indent = {&#xA;            indent_size = 2,&#xA;            padding = 1, -- extra padding on left hand side&#xA;            -- indent guides&#xA;            with_markers = true,&#xA;            indent_marker = &#34;‚îÇ&#34;,&#xA;            last_indent_marker = &#34;‚îî&#34;,&#xA;            highlight = &#34;NeoTreeIndentMarker&#34;,&#xA;            -- expander config, needed for nesting files&#xA;            with_expanders = nil, -- if nil and file nesting is enabled, will enable expanders&#xA;            expander_collapsed = &#34;Ôë†&#34;,&#xA;            expander_expanded = &#34;Ôëº&#34;,&#xA;            expander_highlight = &#34;NeoTreeExpander&#34;,&#xA;          },&#xA;          icon = {&#xA;            folder_closed = &#34;Óóø&#34;,&#xA;            folder_open = &#34;Óóæ&#34;,&#xA;            folder_empty = &#34;Ô∞ä&#34;,&#xA;            -- The next two settings are only a fallback, if you use nvim-web-devicons and configure default icons there&#xA;            -- then these will never be used.&#xA;            default = &#34;*&#34;,&#xA;            highlight = &#34;NeoTreeFileIcon&#34;&#xA;          },&#xA;          modified = {&#xA;            symbol = &#34;[+]&#34;,&#xA;            highlight = &#34;NeoTreeModified&#34;,&#xA;          },&#xA;          name = {&#xA;            trailing_slash = false,&#xA;            use_git_status_colors = true,&#xA;            highlight = &#34;NeoTreeFileName&#34;,&#xA;          },&#xA;          git_status = {&#xA;            symbols = {&#xA;              -- Change type&#xA;              added     = &#34;&#34;, -- or &#34;‚úö&#34;, but this is redundant info if you use git_status_colors on the name&#xA;              modified  = &#34;&#34;, -- or &#34;ÔëÑ&#34;, but this is redundant info if you use git_status_colors on the name&#xA;              deleted   = &#34;‚úñ&#34;,-- this can only be used in the git_status source&#xA;              renamed   = &#34;Ôïî&#34;,-- this can only be used in the git_status source&#xA;              -- Status type&#xA;              untracked = &#34;ÔÑ®&#34;,&#xA;              ignored   = &#34;Ôë¥&#34;,&#xA;              unstaged  = &#34;Ôò∞&#34;,&#xA;              staged    = &#34;ÔÅÜ&#34;,&#xA;              conflict  = &#34;Óúß&#34;,&#xA;            }&#xA;          },&#xA;        },&#xA;        window = {&#xA;          position = &#34;left&#34;,&#xA;          width = 40,&#xA;          mapping_options = {&#xA;            noremap = true,&#xA;            nowait = true,&#xA;          },&#xA;          mappings = {&#xA;            [&#34;&amp;lt;space&amp;gt;&#34;] = { &#xA;                &#34;toggle_node&#34;, &#xA;                nowait = false, -- disable `nowait` if you have existing combos starting with this char that you want to use &#xA;            },&#xA;            [&#34;&amp;lt;2-LeftMouse&amp;gt;&#34;] = &#34;open&#34;,&#xA;            [&#34;&amp;lt;cr&amp;gt;&#34;] = &#34;open&#34;,&#xA;            [&#34;S&#34;] = &#34;open_split&#34;,&#xA;            [&#34;s&#34;] = &#34;open_vsplit&#34;,&#xA;            -- [&#34;S&#34;] = &#34;split_with_window_picker&#34;,&#xA;            -- [&#34;s&#34;] = &#34;vsplit_with_window_picker&#34;,&#xA;            [&#34;t&#34;] = &#34;open_tabnew&#34;,&#xA;            [&#34;w&#34;] = &#34;open_with_window_picker&#34;,&#xA;            [&#34;C&#34;] = &#34;close_node&#34;,&#xA;            [&#34;a&#34;] = { &#xA;              &#34;add&#34;,&#xA;              -- some commands may take optional config options, see `:h neo-tree-mappings` for details&#xA;              config = {&#xA;                show_path = &#34;none&#34; -- &#34;none&#34;, &#34;relative&#34;, &#34;absolute&#34;&#xA;              }&#xA;            },&#xA;            [&#34;A&#34;] = &#34;add_directory&#34;, -- also accepts the config.show_path option.&#xA;            [&#34;d&#34;] = &#34;delete&#34;,&#xA;            [&#34;r&#34;] = &#34;rename&#34;,&#xA;            [&#34;y&#34;] = &#34;copy_to_clipboard&#34;,&#xA;            [&#34;x&#34;] = &#34;cut_to_clipboard&#34;,&#xA;            [&#34;p&#34;] = &#34;paste_from_clipboard&#34;,&#xA;            [&#34;c&#34;] = &#34;copy&#34;, -- takes text input for destination&#xA;            [&#34;m&#34;] = &#34;move&#34;, -- takes text input for destination&#xA;            [&#34;q&#34;] = &#34;close_window&#34;,&#xA;            [&#34;R&#34;] = &#34;refresh&#34;,&#xA;            [&#34;?&#34;] = &#34;show_help&#34;,&#xA;          }&#xA;        },&#xA;        nesting_rules = {},&#xA;        filesystem = {&#xA;          filtered_items = {&#xA;            visible = false, -- when true, they will just be displayed differently than normal items&#xA;            hide_dotfiles = true,&#xA;            hide_gitignored = true,&#xA;            hide_hidden = true, -- only works on Windows for hidden files/directories&#xA;            hide_by_name = {&#xA;              --&#34;node_modules&#34;&#xA;            },&#xA;            hide_by_pattern = { -- uses glob style patterns&#xA;              --&#34;*.meta&#34;&#xA;            },&#xA;            never_show = { -- remains hidden even if visible is toggled to true&#xA;              --&#34;.DS_Store&#34;,&#xA;              --&#34;thumbs.db&#34;&#xA;            },&#xA;          },&#xA;          follow_current_file = false, -- This will find and focus the file in the active buffer every&#xA;                                       -- time the current file is changed while the tree is open.&#xA;          group_empty_dirs = false, -- when true, empty folders will be grouped together&#xA;          hijack_netrw_behavior = &#34;open_default&#34;, -- netrw disabled, opening a directory opens neo-tree&#xA;                                                  -- in whatever position is specified in window.position&#xA;                                -- &#34;open_current&#34;,  -- netrw disabled, opening a directory opens within the&#xA;                                                  -- window like netrw would, regardless of window.position&#xA;                                -- &#34;disabled&#34;,    -- netrw left alone, neo-tree does not handle opening dirs&#xA;          use_libuv_file_watcher = false, -- This will use the OS level file watchers to detect changes&#xA;                                          -- instead of relying on nvim autocmd events.&#xA;          window = {&#xA;            mappings = {&#xA;              [&#34;&amp;lt;bs&amp;gt;&#34;] = &#34;navigate_up&#34;,&#xA;              [&#34;.&#34;] = &#34;set_root&#34;,&#xA;              [&#34;H&#34;] = &#34;toggle_hidden&#34;,&#xA;              [&#34;/&#34;] = &#34;fuzzy_finder&#34;,&#xA;              [&#34;f&#34;] = &#34;filter_on_submit&#34;,&#xA;              [&#34;&amp;lt;c-x&amp;gt;&#34;] = &#34;clear_filter&#34;,&#xA;              [&#34;[g&#34;] = &#34;prev_git_modified&#34;,&#xA;              [&#34;]g&#34;] = &#34;next_git_modified&#34;,&#xA;            }&#xA;          }&#xA;        },&#xA;        buffers = {&#xA;          follow_current_file = true, -- This will find and focus the file in the active buffer every&#xA;                                       -- time the current file is changed while the tree is open.&#xA;          group_empty_dirs = true, -- when true, empty folders will be grouped together&#xA;          show_unloaded = true,&#xA;          window = {&#xA;            mappings = {&#xA;              [&#34;bd&#34;] = &#34;buffer_delete&#34;,&#xA;              [&#34;&amp;lt;bs&amp;gt;&#34;] = &#34;navigate_up&#34;,&#xA;              [&#34;.&#34;] = &#34;set_root&#34;,&#xA;            }&#xA;          },&#xA;        },&#xA;        git_status = {&#xA;          window = {&#xA;            position = &#34;float&#34;,&#xA;            mappings = {&#xA;              [&#34;A&#34;]  = &#34;git_add_all&#34;,&#xA;              [&#34;gu&#34;] = &#34;git_unstage_file&#34;,&#xA;              [&#34;ga&#34;] = &#34;git_add_file&#34;,&#xA;              [&#34;gr&#34;] = &#34;git_revert_file&#34;,&#xA;              [&#34;gc&#34;] = &#34;git_commit&#34;,&#xA;              [&#34;gp&#34;] = &#34;git_push&#34;,&#xA;              [&#34;gg&#34;] = &#34;git_commit_and_push&#34;,&#xA;            }&#xA;          }&#xA;        }&#xA;      })&#xA;&#xA;      vim.cmd([[nnoremap \ :Neotree reveal&amp;lt;cr&amp;gt;]])&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;The above configuration is not everything that can be changed, it&#39;s just the parts you might want to change first.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree&lt;/code&gt; for full documentation. You can also preview that online at &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/doc/neo-tree.txt&#34;&gt;doc/neo-tree.txt&lt;/a&gt;, although it&#39;s best viewed within vim.&lt;/p&gt; &#xA;&lt;p&gt;To see all of the default config options with commentary, you can view it online at &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/lua/neo-tree/defaults.lua&#34;&gt;lua/neo-tree/defaults.lua&lt;/a&gt;. You can also paste it into a buffer after installing Neo-tree by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:lua require(&#34;neo-tree&#34;).paste_default_config()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The &lt;code&gt;:Neotree&lt;/code&gt; Command&lt;/h2&gt; &#xA;&lt;p&gt;The single &lt;code&gt;:Neotree&lt;/code&gt; command accepts a range of arguments that give you full control over the details of what and where it will show. For example, the following command will open a file browser on the right hand side, &#34;revealing&#34; the currently active file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree filesystem reveal right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Arguments can be specified as either a key=value pair or just as the value. The key=value form is more verbose but may help with clarity. For example, the command above can also be specified as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree source=filesystem reveal=true position=right&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All arguments are optional and can be specified in any order. If you issue the command without any arguments, it will use default values for everything. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will open the filesystem source on the left hand side and focus it, if you are using the default config.&lt;/p&gt; &#xA;&lt;h3&gt;Tab Completion&lt;/h3&gt; &#xA;&lt;p&gt;Neotree supports tab completion for all arguments. Once a given argument has a value, it will stop suggesting those completions. It will also offer completions for paths. The simplest way to disambiguate a path from another type of argument is to start them with &lt;code&gt;/&lt;/code&gt; or &lt;code&gt;./&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Arguments&lt;/h3&gt; &#xA;&lt;p&gt;Here is the full list of arguments you can use:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;action&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;What to do. Can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;focus&lt;/td&gt; &#xA;   &lt;td&gt;Show and/or switch focus to the specified Neotree window. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;show&lt;/td&gt; &#xA;   &lt;td&gt;Show the window, but keep focus on your current window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;close&lt;/td&gt; &#xA;   &lt;td&gt;Close the window(s) specified. Can be combined with &#34;position&#34; and/or &#34;source&#34; to specify which window(s) to close.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;source&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;What to show. Can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filesystem&lt;/td&gt; &#xA;   &lt;td&gt;Show a file browser. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;buffers&lt;/td&gt; &#xA;   &lt;td&gt;Show a list of currently open buffers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;git_status&lt;/td&gt; &#xA;   &lt;td&gt;Show the output of &lt;code&gt;git status&lt;/code&gt; in a tree layout.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;position&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Where to show it, can be one of:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;left&lt;/td&gt; &#xA;   &lt;td&gt;Open as left hand sidebar. DEFAULT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;right&lt;/td&gt; &#xA;   &lt;td&gt;Open as right hand sidebar.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;/td&gt; &#xA;   &lt;td&gt;Open as floating window.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;current&lt;/td&gt; &#xA;   &lt;td&gt;Open within the current window, like netrw or vinegar would.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;toggle&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Adding this means that the window will be closed if it is already open.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;dir&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The directory to set as the root/cwd of the specified window. If you include a directory as one of the arguments, it will be assumed to be this option, you don&#39;t need the full dir=/path. You may use any value that can be passed to the &#39;expand&#39; function, such as &lt;code&gt;%:p:h:h&lt;/code&gt; to specify two directories up from the current file. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree ./relative/path&#xA;:Neotree /home/user/relative/path&#xA;:Neotree dir=/home/user/relative/path&#xA;:Neotree position=current dir=relative/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;git_base&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;The base that is used to calculate the git status for each dir/file. By default it uses &lt;code&gt;HEAD&lt;/code&gt;, so it shows all changes that are not yet committed. You can for example work on a feature branch, and set it to &lt;code&gt;main&lt;/code&gt;. It will show all changes that happened on the feature branch and main since you branched off.&lt;/p&gt; &#xA;&lt;p&gt;Any git ref, commit, tag, or sha will work.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree main&#xA;:Neotree v1.0&#xA;:Neotree git_base=8fe34be&#xA;:Neotree git_base=HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Adding this will make Neotree automatically find and focus the current file when it opens.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal_file&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A path to a file to reveal. This supersedes the &#34;reveal&#34; flag so there is no need to specify both. Use this if you want to reveal something other than the current file. If you include a path to a file as one of the arguments, it will be assumed to be this option. Like &#34;dir&#34;, you can pass any value that can be passed to the &#39;expand&#39; function. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree reveal_file=/home/user/my/file.text&#xA;:Neotree position=current dir=%:p:h:h reveal_file=%:p&#xA;:Neotree current %:p:h:h %:p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One neat trick you can do with this is to open a Neotree window which is focused on the file under the cursor using the &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt; keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nnoremap gd :Neotree float reveal_file=&amp;lt;cfile&amp;gt; reveal_force_cwd&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;reveal_force_cwd&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This is a boolean flag. Normally, if you use one of the reveal options and the given file is not within the current working directory, you will be asked if you want to change the current working directory. If you include this flag, it will automatically change the directory without prompting. This option implies &#34;reveal&#34;, so you do not need to specify both.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree-commands&lt;/code&gt; for details and a full listing of available arguments.&lt;/p&gt; &#xA;&lt;h3&gt;File Nesting&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neo-tree-file-nesting&lt;/code&gt; for more details about file nesting.&lt;/p&gt; &#xA;&lt;h3&gt;Netrw Hijack&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;:edit .&#xA;:[v]split .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If &lt;code&gt;&#34;filesystem.window.position&#34;&lt;/code&gt; is set to &lt;code&gt;&#34;current&#34;&lt;/code&gt;, or if you have specified &lt;code&gt;filesystem.netrw_hijack_behavior = &#34;open_current&#34;&lt;/code&gt;, then any command that would open a directory will open neo-tree in the specified window.&lt;/p&gt; &#xA;&lt;h2&gt;Sources&lt;/h2&gt; &#xA;&lt;p&gt;Neo-tree is built on the idea of supporting various sources. Sources are basically interface implementations whose job it is to provide a list of hierarchical items to be rendered, along with commands that are appropriate to those items.&lt;/p&gt; &#xA;&lt;h3&gt;filesystem&lt;/h3&gt; &#xA;&lt;p&gt;The default source is &lt;code&gt;filesystem&lt;/code&gt;, which displays your files and folders. This is the default source in commands when none is specified.&lt;/p&gt; &#xA;&lt;p&gt;This source can be used to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browse the filesystem&lt;/li&gt; &#xA; &lt;li&gt;Control the current working directory of nvim&lt;/li&gt; &#xA; &lt;li&gt;Add/Copy/Delete/Move/Rename files and directories&lt;/li&gt; &#xA; &lt;li&gt;Search the filesystem&lt;/li&gt; &#xA; &lt;li&gt;Monitor git status and lsp diagnostics for the current working directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;buffers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-buffers.png&#34; alt=&#34;Neo-tree buffers&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Another available source is &lt;code&gt;buffers&lt;/code&gt;, which displays your open buffers. This is the same list you would see from &lt;code&gt;:ls&lt;/code&gt;. To show with the &lt;code&gt;buffers&lt;/code&gt; list, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree buffers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;git_status&lt;/h3&gt; &#xA;&lt;p&gt;This view take the results of the &lt;code&gt;git status&lt;/code&gt; command and display them in a tree. It includes commands for adding, unstaging, reverting, and committing.&lt;/p&gt; &#xA;&lt;p&gt;The screenshot below shows the result of &lt;code&gt;:Neotree float git_status&lt;/code&gt; while the filesystem is open in a sidebar:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/nvim-neo-tree/resources/raw/main/images/Neo-tree-git_status.png&#34; alt=&#34;Neo-tree git_status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can specify a different git base here as well. But be aware that it is not possible to unstage / revert a file that is already committed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Neotree float git_status git_base=main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration and Customization&lt;/h2&gt; &#xA;&lt;p&gt;This is designed to be flexible. The way that is achieved is by making everything a function, or a string that identifies a built-in function. All of the built-in functions can be replaced with your own implementation, or you can add new ones.&lt;/p&gt; &#xA;&lt;p&gt;Each node in the tree is created from the renderer specified for the given node type, and each renderer is a list of component configs to be rendered in order. Each component is a function, either built-in or specified in your config. Those functions simply return the text and highlight group for the component.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there is an events system that you can hook into. If you want to show some new data point related to your files, gather it in the &lt;code&gt;before_render&lt;/code&gt; event, create a component to display it, and reference that component in the renderer for the &lt;code&gt;file&lt;/code&gt; and/or &lt;code&gt;directory&lt;/code&gt; type.&lt;/p&gt; &#xA;&lt;p&gt;Details on how to configure everything is in the help file at &lt;code&gt;:h neo-tree-configuration&lt;/code&gt; or online at &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/raw/main/doc/neo-tree.txt&#34;&gt;neo-tree.txt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Recipes for customizations can be found on the &lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim/wiki/Recipes&#34;&gt;wiki&lt;/a&gt;. Recipes include things like adding a component to show the &lt;a href=&#34;https://github.com/ThePrimeagen/harpoon&#34;&gt;Harpoon&lt;/a&gt; index for files, or responding to the &lt;code&gt;&#34;file_opened&#34;&lt;/code&gt; event to auto clear the search when you open a file.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;There are many tree plugins for (neo)vim, so why make another one? Well, I wanted something that was:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Easy to maintain and enhance.&lt;/li&gt; &#xA; &lt;li&gt;Stable.&lt;/li&gt; &#xA; &lt;li&gt;Easy to customize.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Easy to maintain and enhance&lt;/h3&gt; &#xA;&lt;p&gt;This plugin is designed to grow and be flexible. This is accomplished by making the code as decoupled and functional as possible. Hopefully new contributors will find it easy to work with.&lt;/p&gt; &#xA;&lt;p&gt;One big difference between this plugin and the ones that came before it, which is also what finally pushed me over the edge into making a new plugin, is that we now have libraries to build upon that did not exist when other tree plugins were created. Most notably, &lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvm&lt;/a&gt;. Building upon shared libraries will go a long way in making neo-tree easy to maintain.&lt;/p&gt; &#xA;&lt;h3&gt;Stable&lt;/h3&gt; &#xA;&lt;p&gt;This project will have releases and release tags that follow a simplified Semantic Versioning scheme. The quickstart instructions will always refer to the latest stable major version. Following the &lt;strong&gt;main&lt;/strong&gt; branch is for contributors and those that always want bleeding edge. There will be branches for &lt;strong&gt;v1.x&lt;/strong&gt;, &lt;strong&gt;v2.x&lt;/strong&gt;, etc which will receive updates after a short testing period in &lt;strong&gt;main&lt;/strong&gt;. You should be safe to follow those branches and be sure your tree won&#39;t break in an update. There will also be tags for each release pushed to those branches named &lt;strong&gt;v1.1&lt;/strong&gt;, &lt;strong&gt;v1.2&lt;/strong&gt;, etc. If stability is critical to you, or a bug accidentally make it into &lt;strong&gt;v1.x&lt;/strong&gt;, you can use those tags instead. It&#39;s possible we may backport bug fixes to those tags, but no garauntees on that.&lt;/p&gt; &#xA;&lt;p&gt;There will never be a breaking change within a major version (1.x, 2.x, etc.) If a breaking change is needed, there will be depracation warnings in the prior major version, and the breaking change will happen in the next major version.&lt;/p&gt; &#xA;&lt;h3&gt;Easy to Customize&lt;/h3&gt; &#xA;&lt;p&gt;Neo-tree follows in the spirit of plugins like &lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/noib3/nvim-cokeline&#34;&gt;nvim-cokeline&lt;/a&gt;. Everything will be configurable and take either strings, tables, or functions. You can take sane defaults or build your tree items from scratch. There should be the ability to add any features you can think of through existing hooks in the setup function.&lt;/p&gt; &#xA;&lt;h2&gt;What is a Breaking Change?&lt;/h2&gt; &#xA;&lt;p&gt;As of v1.30, a breaking change is defined as anything that &lt;em&gt;changes&lt;/em&gt; existing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vim commands (&lt;code&gt;:NeoTreeShow&lt;/code&gt;, &lt;code&gt;:NeoTreeReveal&lt;/code&gt;, etc)&lt;/li&gt; &#xA; &lt;li&gt;configuration options that are passed into the &lt;code&gt;setup()&lt;/code&gt; function&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NeoTree*&lt;/code&gt; highlight groups&lt;/li&gt; &#xA; &lt;li&gt;lua functions exported in the following modules that are not prefixed with &lt;code&gt;_&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.events&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.manager&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.*&lt;/code&gt; (init.lua files)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.sources.*.commands&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.ui.renderer&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;neo-tree.utils&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If there are other functions you would like to use that are not yet considered part of the public API, please open an issue so we can discuss it.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are encouraged. Please see &lt;a href=&#34;https://raw.githubusercontent.com/nvim-neo-tree/neo-tree.nvim/v2.x/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project relies upon these two excellent libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt; for all UI components, including the tree!&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lua/plenary.nvim&#34;&gt;plenary.nvim&lt;/a&gt; for backend utilities, such as scanning the filesystem.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The design is heavily inspired by these excellent plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt;lualine.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/noib3/nvim-cokeline&#34;&gt;nvim-cokeline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Everything I know about writing a tree control in lua, I learned from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>