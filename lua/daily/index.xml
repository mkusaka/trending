<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-23T01:38:56Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>beyond-all-reason/Beyond-All-Reason</title>
    <updated>2023-03-23T01:38:56Z</updated>
    <id>tag:github.com,2023-03-23:/beyond-all-reason/Beyond-All-Reason</id>
    <link href="https://github.com/beyond-all-reason/Beyond-All-Reason" rel="alternate"></link>
    <summary type="html">&lt;p&gt;www.beyondallreason.info&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beyond-All-Reason&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/discord/225695362004811776&#34; alt=&#34;Discord&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Open source RTS game built on top of the Spring RTS Engine&lt;/p&gt; &#xA;&lt;h2&gt;Where to download&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.beyondallreason.info/download&#34;&gt;https://www.beyondallreason.info/download&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to play&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.beyondallreason.info/guides&#34;&gt;https://www.beyondallreason.info/guides&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Beyond All Reason (BAR), consists of 2 primary components, the lobby (Chobby - &lt;a href=&#34;https://github.com/beyond-all-reason/BYAR-Chobby&#34;&gt;https://github.com/beyond-all-reason/BYAR-Chobby&lt;/a&gt;) and the game code itself (this repository).&lt;/p&gt; &#xA;&lt;p&gt;The game runs on top of the Spring engine &lt;a href=&#34;https://github.com/spring/spring&#34;&gt;https://github.com/spring/spring&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In order to develop the game (this repository) you first need a working install of the lobby/launcher. There are 2 ways to do this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Follow &lt;a href=&#34;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&#34;&gt;the guide in the Chobby README&lt;/a&gt;. First download a &lt;a href=&#34;https://github.com/beyond-all-reason/BYAR-Chobby/releases&#34;&gt;release of Chobby&lt;/a&gt; and then launch Chobby, this will automatically download and install the engine and other dependencies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.beyondallreason.info/download#How-To-Install&#34;&gt;Download the full BAR application&lt;/a&gt; from the website and run it. This is probably what you will have done if you have previously installed and played the game.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once you have a working install of BAR you need a local development copy of the game code to work with. This code will live in the BAR install directory.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;To find the BAR install directory simply open the launcher (not full game) and click the &#34;Open install directory&#34; button. This is one of the 3 buttons (&lt;code&gt;Toggle log&lt;/code&gt; and &lt;code&gt;Upload log&lt;/code&gt; are the other 2). For Windows installs this might be your user&#39;s &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the BAR install directory create the empty file &lt;code&gt;devmode.txt&lt;/code&gt;. E.g: &lt;code&gt;AppData/Local/Programs/Beyond-All-Reason/data/devmode.txt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the BAR install directory in the &lt;code&gt;data&lt;/code&gt; folder in the &lt;code&gt;games&lt;/code&gt; sub-directory (create &lt;code&gt;games&lt;/code&gt; if it doesn&#39;t exist) clone the code for this repository into a directory with a name ending in &lt;code&gt;.sdd&lt;/code&gt;. For example:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/beyond-all-reason/Beyond-All-Reason.git BAR.sdd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ensure that you have the correct path by looking for the file &lt;code&gt;Beyond-All-Reason/data/games/BAR.sdd/modinfo.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you have the game code launch the full game from the launcher as normal. Then go to &lt;code&gt;Settings &amp;gt; Developer &amp;gt; Singleplayer&lt;/code&gt; and select &lt;code&gt;Beyond All Reason Dev&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Now you can launch a match normally through the game UI. This match will use the dev copy of the LUA code which is in &lt;code&gt;BAR-install-directory/data/games/BAR.sdd&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If developing Chobby also clone the code into the &lt;code&gt;games&lt;/code&gt; directory. Follow the guide in the &lt;a href=&#34;https://github.com/beyond-all-reason/BYAR-Chobby#developing-the-lobby&#34;&gt;Chobby README&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;More on the &lt;code&gt;.sdd&lt;/code&gt; directory to run raw LUA and the structure expected by Spring Engine is &lt;a href=&#34;https://springrts.com/wiki/Gamedev:Structure&#34;&gt;documented here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nvim-treesitter/nvim-treesitter-refactor</title>
    <updated>2023-03-23T01:38:56Z</updated>
    <id>tag:github.com,2023-03-23:/nvim-treesitter/nvim-treesitter-refactor</id>
    <link href="https://github.com/nvim-treesitter/nvim-treesitter-refactor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Refactor module for nvim-treesitter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-treesitter-refactor&lt;/h1&gt; &#xA;&lt;p&gt;Refactor modules for &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;nvim-treesitter-refactor&lt;/code&gt; with your favorite package manager, or using the default &lt;code&gt;pack&lt;/code&gt; feature of Neovim!&lt;/p&gt; &#xA;&lt;p&gt;Note: This plugin requires &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; installed.&lt;/p&gt; &#xA;&lt;h3&gt;Using a package manager&lt;/h3&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;, put this in your &lt;code&gt;init.vim&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;nvim-treesitter/nvim-treesitter-refactor&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlight definitions&lt;/h2&gt; &#xA;&lt;p&gt;Highlights definition and usages of the current symbol under the cursor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt;EOF&#xA;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  refactor = {&#xA;    highlight_definitions = {&#xA;      enable = true,&#xA;      -- Set to false if you have an `updatetime` of ~100.&#xA;      clear_on_cursor_move = true,&#xA;    },&#xA;  },&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlight current scope&lt;/h2&gt; &#xA;&lt;p&gt;Highlights the block from the current scope where the cursor is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt;EOF&#xA;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  refactor = {&#xA;    highlight_current_scope = { enable = true },&#xA;  },&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Smart rename&lt;/h2&gt; &#xA;&lt;p&gt;Renames the symbol under the cursor within the current scope (and current file).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt;EOF&#xA;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  refactor = {&#xA;    smart_rename = {&#xA;      enable = true,&#xA;      -- Assign keymaps to false to disable them, e.g. `smart_rename = false`.&#xA;      keymaps = {&#xA;        smart_rename = &#34;grr&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;p&gt;Provides &#34;go to definition&#34; for the symbol under the cursor, and lists the definitions from the current file. If you use &lt;code&gt;goto_definition_lsp_fallback&lt;/code&gt; instead of &lt;code&gt;goto_definition&lt;/code&gt; in the config below &lt;code&gt;vim.lsp.buf.definition&lt;/code&gt; is used if nvim-treesitter can not resolve the variable. &lt;code&gt;goto_next_usage&lt;/code&gt;/&lt;code&gt;goto_previous_usage&lt;/code&gt; go to the next usage of the identifier under the cursor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lua &amp;lt;&amp;lt;EOF&#xA;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  refactor = {&#xA;    navigation = {&#xA;      enable = true,&#xA;      -- Assign keymaps to false to disable them, e.g. `goto_definition = false`.&#xA;      keymaps = {&#xA;        goto_definition = &#34;gnd&#34;,&#xA;        list_definitions = &#34;gnD&#34;,&#xA;        list_definitions_toc = &#34;gO&#34;,&#xA;        goto_next_usage = &#34;&amp;lt;a-*&amp;gt;&#34;,&#xA;        goto_previous_usage = &#34;&amp;lt;a-#&amp;gt;&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>