<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-19T01:38:48Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>xxddpac/wArmor</title>
    <updated>2023-11-19T01:38:48Z</updated>
    <id>tag:github.com,2023-11-19:/xxddpac/wArmor</id>
    <link href="https://github.com/xxddpac/wArmor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An WAF Framework based on OpenResty&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;wArmor - An WAF Framework based on OpenResty&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.murphysec.com/console/report/1725060297802076160/1725063962646499328&#34;&gt;&lt;img src=&#34;https://www.murphysec.com/platform3/v31/badge/1725063962646499328.svg?sanitize=true&#34; alt=&#34;Security Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;性能并发&lt;/h3&gt; &#xA;&lt;p&gt;原生 &lt;code&gt;Nginx&lt;/code&gt; 是基于事件驱动架构、异步非阻塞设计和轻量级进程的核心特性，实现了高性能和高并发的Web服务。 &lt;code&gt;wArmor&lt;/code&gt; 充分利用了 &lt;code&gt;Openresty&lt;/code&gt; 官方提供的异步非阻塞模块，如 &lt;code&gt;resty.http&lt;/code&gt; 、&lt;code&gt;resty.redis&lt;/code&gt; 、&lt;code&gt;resty.mysql&lt;/code&gt; 和 &lt;code&gt;resty.logger.socket&lt;/code&gt; 等，确保实现功能的同时也保证 &lt;code&gt;Nginx&lt;/code&gt; 的高并发稳定性。&lt;/p&gt; &#xA;&lt;h3&gt;规则热更新&lt;/h3&gt; &#xA;&lt;p&gt;将 &lt;code&gt;WAF&lt;/code&gt; 规则单独抽出为一个 &lt;code&gt;API&lt;/code&gt; 服务，可在平台上针对规则、配置进行变更并实时通知 &lt;code&gt;WAF&lt;/code&gt; 而无需重启 &lt;code&gt;Nginx&lt;/code&gt; 。&lt;/p&gt; &#xA;&lt;h3&gt;编排联动&lt;/h3&gt; &#xA;&lt;p&gt;引入了灵活的 &lt;code&gt;IP黑白名单&lt;/code&gt; 机制，可配合其他安全工具进行联动，&lt;code&gt;WAF&lt;/code&gt; 的主要任务是拦截恶意请求并记录相关日志，而其他工具负责检测和更新 &lt;code&gt;IP黑名单&lt;/code&gt; 。这样的分工协同确保了高效的安全响应。 另外 &lt;code&gt;IP黑白名单&lt;/code&gt; 支持永久、临时封禁也同样可在平台上进行手动更新。&lt;/p&gt; &#xA;&lt;h3&gt;灰度验证(TODO)&lt;/h3&gt; &#xA;&lt;p&gt;考虑到 &lt;code&gt;Nginx&lt;/code&gt; 多集群部署的情况，后续也会提供选择性关闭热更新的选项，以便在特定 &lt;code&gt;Nginx&lt;/code&gt; 集群上进行规则更新。这使得灰度测试变得更加容易，确保规则的更新不会影响整个环境的正常运行， 一旦在特定集群上确认规则的正常工作，随后即可批量下发规则到其余集群。&lt;/p&gt; &#xA;&lt;h3&gt;规则引擎API文档&lt;/h3&gt; &#xA;&lt;p&gt;访问 &lt;code&gt;http://rule_engine_ip:9999//swagger/index.html#/&lt;/code&gt; API文档，针对 &lt;code&gt;规则&lt;/code&gt; 、 &lt;code&gt;配置&lt;/code&gt; 、 &lt;code&gt;IP黑白名单&lt;/code&gt; 增删改查，某些枚举值含义参考枚举对应关系。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xxddpac/wArmor/main/rule_engine/images/api.png&#34; alt=&#34;api&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;规则引擎部署&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;mysql&lt;/code&gt; 数据库&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;创建 &lt;code&gt;waf&lt;/code&gt; 数据库&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;    CREATE DATABASE waf CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新建 &lt;code&gt;config&lt;/code&gt; 配置表&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;    CREATE TABLE IF NOT EXISTS config&#xA;    (&#xA;        id         INT AUTO_INCREMENT PRIMARY KEY COMMENT &#39;配置模式主键ID&#39;,&#xA;        operator   VARCHAR(10) NOT NULL COMMENT &#39;操作人&#39;,&#xA;        mode       INT         NOT NULL COMMENT &#39;配置模式&#39;,&#xA;        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,&#xA;        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新建 &lt;code&gt;ip&lt;/code&gt; 黑白名单表&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;    CREATE TABLE IF NOT EXISTS ip&#xA;    (&#xA;        id          INT AUTO_INCREMENT PRIMARY KEY COMMENT &#39;黑白名单主键ID&#39;,&#xA;        operator    VARCHAR(10)  NOT NULL COMMENT &#39;操作人&#39;,&#xA;        comment     VARCHAR(255) NOT NULL COMMENT &#39;备注信息&#39;,&#xA;        ip_type     INT          NOT NULL COMMENT &#39;黑白名单类型&#39;,&#xA;        block_type  INT       DEFAULT 1 COMMENT &#39;封禁类型&#39;,&#xA;        ip_address  VARCHAR(15)  NOT NULL COMMENT &#39;黑白名单IP&#39;,&#xA;        expire_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;黑名单封禁时间&#39;,&#xA;        created_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,&#xA;        updated_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;&#xA;    )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新建 &lt;code&gt;rule&lt;/code&gt; 规则表&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;#主表&#xA;CREATE TABLE IF NOT EXISTS rule&#xA;(&#xA;    id              INT AUTO_INCREMENT PRIMARY KEY COMMENT &#39;规则主键ID&#39;,&#xA;    operator        VARCHAR(10)  NOT NULL COMMENT &#39;操作人&#39;,&#xA;    rule_variable   INT          NOT NULL COMMENT &#39;规则变量&#39;,&#xA;    rule_type       INT          NOT NULL COMMENT &#39;规则类型&#39;,&#xA;    status          BOOLEAN      NOT NULL COMMENT &#39;规则开启状态&#39;,&#xA;    rule_action     INT          NOT NULL COMMENT &#39;规则执行动作&#39;,&#xA;    description     VARCHAR(255) NOT NULL COMMENT &#39;规则描述&#39;,&#xA;    severity        INT          NOT NULL COMMENT &#39;风险级别&#39;,&#xA;    rules_operation VARCHAR(3)   NOT NULL COMMENT &#39;规则匹配条件(and/or)&#39;,&#xA;    created_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,&#xA;    updated_at      TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;#关联表&#xA;CREATE TABLE rules&#xA;(&#xA;    id         INT AUTO_INCREMENT PRIMARY KEY COMMENT &#39;规则匹配详情主键ID&#39;,&#xA;    rule_id    INT          NOT NULL COMMENT &#39;规则表外键&#39;,&#xA;    rules      VARCHAR(255) NOT NULL COMMENT &#39;规则详情&#39;,&#xA;    FOREIGN KEY (rule_id) REFERENCES rule (id) ON DELETE CASCADE,&#xA;    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,&#xA;    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#39;更新时间&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;启动 &lt;code&gt;rule_engine&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;config core.config.toml&lt;/code&gt; 作为规则引擎配置文件，需自行配置&lt;code&gt;mysql&lt;/code&gt;、&lt;code&gt;redis&lt;/code&gt; 相关信息&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start rule_engine&#xA;./bin/rule_engine -config core.config.toml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# check ping&#xA;curl http://rule_engine_ip:9999/ping&#xA;# pong&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;设定 &lt;code&gt;waf&lt;/code&gt; 配置模式&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -X POST -H &#34;Content-Type: application/json&#34; -d &#39; {&#xA;                &#34;operator&#34;:&#34;wArmor&#34;,&#xA;                &#34;mode&#34;: 1&#xA;            }&#39; http://rule_engine_ip:9999/api/v1/config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;创建 &lt;code&gt;路径遍历&lt;/code&gt; 规则&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; curl -X POST -H &#34;Content-Type: application/json&#34; -d &#39; {&#xA;                &#34;rule_variable&#34;: 1,&#xA;                &#34;operator&#34;: &#34;wArmor&#34;,&#xA;                &#34;rule_type&#34;: 4,&#xA;                &#34;status&#34;: true,&#xA;                &#34;rules&#34;: [&#xA;                    &#34;(?:etc/\\W*passwd)&#34;,&#xA;                    &#34;(?:/|\\|\\\\)?(?:\\.\\./)+&#34;&#xA;                ],&#xA;                &#34;rule_action&#34;: 2,&#xA;                &#34;description&#34;: &#34;当检测到路径遍历攻击时waf将重定向拦截此行为&#34;,&#xA;                &#34;rules_operation&#34;: &#34;or&#34;,&#xA;                &#34;severity&#34;: 3&#xA;            }&#39; http://rule_engine_ip:9999/api/v1/rule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;创建 &lt;code&gt;敏感信息监控&lt;/code&gt; 规则&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; curl -X POST -H &#34;Content-Type: application/json&#34; -d &#39; {&#xA;                &#34;rule_variable&#34;: 6,&#xA;                &#34;operator&#34;: &#34;wArmor&#34;,&#xA;                &#34;rule_type&#34;: 9,&#xA;                &#34;status&#34;: true,&#xA;                &#34;rules&#34;: [&#34;You have an error in your SQL syntax&#34;],&#xA;                &#34;rule_action&#34;: 3,&#xA;                &#34;description&#34;: &#34;检测响应体是否包含原始sql错误信息而泄露表结构信息,开发者应处理该错误返回&#34;,&#xA;                &#34;rules_operation&#34;: &#34;or&#34;,&#xA;                &#34;severity&#34;: 2&#xA;            }&#39; http://rule_engine_ip:9999/api/v1/rule&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WAF部署&lt;/h2&gt; &#xA;&lt;h3&gt;安装 &lt;code&gt;libmaxminddb&lt;/code&gt; 库&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget -P /usr/local/src https://github.com/maxmind/libmaxminddb/releases/download/1.7.1/libmaxminddb-1.7.1.tar.gz&#xA;tar -zxvf libmaxminddb-1.7.1.tar.gz&#xA;cd libmaxminddb-1.7.1&#xA;./configure&#xA;make &amp;amp;&amp;amp; make install&#xA;echo /usr/local/lib &amp;gt;&amp;gt; /etc/ld.so.conf.d/local.conf&#xA;ldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;将 &lt;code&gt;GeoLite2-City.mmdb&lt;/code&gt; 拷贝至 &lt;code&gt;/usr/local/share/GeoIP&lt;/code&gt; 目录下。&lt;/p&gt; &#xA;&lt;h3&gt;安装 &lt;code&gt;Openresty&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /usr/local/src&#xA;wget https://openresty.org/download/openresty-1.21.4.2.tar.gz&#xA;tar zxf openresty-1.21.4.2.tar.gz&#xA;cd openresty-1.21.4.2&#xA;./configure --prefix=/usr/local/openresty \&#xA;--with-http_ssl_module \&#xA;--with-http_v2_module \&#xA;--with-http_realip_module \&#xA;--with-http_sub_module \&#xA;--with-http_stub_status_module \&#xA;--with-http_auth_request_module \&#xA;--with-http_secure_link_module \&#xA;--with-stream \&#xA;--with-stream_ssl_module \&#xA;--with-stream_realip_module \&#xA;--without-http_fastcgi_module \&#xA;--without-mail_pop3_module \&#xA;--without-mail_imap_module \&#xA;--without-mail_smtp_module&#xA;&#xA;make &amp;amp;&amp;amp; make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;config.lua&lt;/code&gt; 作为 &lt;code&gt;waf&lt;/code&gt; 的配置文件，需自行配置&lt;code&gt;mysql&lt;/code&gt;、&lt;code&gt;redis&lt;/code&gt;、&lt;code&gt;syslog&lt;/code&gt; 等信息， 并将 &lt;code&gt;waf&lt;/code&gt; 文件夹拷贝至 &lt;code&gt;/usr/local/openresty&lt;/code&gt; 目录下。&lt;/p&gt; &#xA;&lt;p&gt;编辑 &lt;code&gt;nginx&lt;/code&gt; 配置文件 &lt;code&gt;/usr/local/openresty/nginx/conf/nginx.conf&lt;/code&gt; ，在 &lt;code&gt;http&lt;/code&gt; 模块下新增&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lua_shared_dict waf_rule 20m;&#xA;lua_shared_dict waf_config 1m;&#xA;lua_shared_dict waf_ip 20m;&#xA;&#xA;lua_package_path &#34;/usr/local/openresty/waf/?.lua;/usr/local/openresty/waf/lib/?.lua;;&#34;;&#xA;init_worker_by_lua_file /usr/local/openresty/waf/worker.lua;&#xA;access_by_lua_file /usr/local/openresty/waf/waf.lua;&#xA;body_filter_by_lua_file /usr/local/openresty/waf/body_filter.lua;&#xA;header_filter_by_lua_file /usr/local/openresty/waf/header_filter.lua;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;重启 &lt;code&gt;nginx&lt;/code&gt; 服务&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/usr/local/openresty/nginx/sbin/nginx -s reload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果部署一切正常，访问 &lt;code&gt;http://nginx_ip/api/v1/rule?query=../../etc/passwd&lt;/code&gt; 浏览器会出现拦截信息。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xxddpac/wArmor/main/rule_engine/images/waf.png&#34; alt=&#34;waf&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;拦截日志会异步写入远程 &lt;code&gt;syslog-ng&lt;/code&gt; 服务器。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;路径遍历&lt;/code&gt; 被拦截日志&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;program&#34;: &#34;wArmor&#34;,&#xA;  &#34;rule_action&#34;: &#34;重定向&#34;,&#xA;  &#34;city&#34;: &#34;杭州&#34;,&#xA;  &#34;country&#34;: &#34;中国&#34;,&#xA;  &#34;latitude&#34;: &#34;30.2994&#34;,&#xA;  &#34;longitude&#34;: &#34;120.1612&#34;,&#xA;  &#34;iso_code&#34;: &#34;CN&#34;,&#xA;  &#34;request_server_name&#34;: &#34;*******&#34;,&#xA;  &#34;request_uri&#34;: &#34;/api/v1/rule?query=../../etc/passwd&#34;,&#xA;  &#34;request_ua&#34;: &#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36&#34;,&#xA;  &#34;timestamp&#34;: &#34;2023-11-15 17:18:45&#34;,&#xA;  &#34;request_id&#34;: &#34;a2deb9c0-d003-47c2-96f4-452c8f1d502e&#34;,&#xA;  &#34;request_ip&#34;: &#34;********&#34;,&#xA;  &#34;severity&#34;: &#34;中危&#34;,&#xA;  &#34;rule_id&#34;: 1,&#xA;  &#34;request_data&#34;: &#34;&#34;,&#xA;  &#34;mode&#34;: &#34;拦截模式&#34;,&#xA;  &#34;request_method&#34;: &#34;GET&#34;,&#xA;  &#34;rule_type&#34;: &#34;路径遍历&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;敏感信息监控&lt;/code&gt; 日志&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;rule_type&#34;: &#34;敏感信息&#34;,&#xA;  &#34;rule_id&#34;: 2,&#xA;  &#34;response&#34;: &#34;{\&#34;code\&#34;:400,\&#34;msg\&#34;:\&#34;Error 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;rules VARCHAR(255) NOT NULL COMMENT &#39;规则详情&#39;,    \\n        \\t   FOREIGN KEY (rule_id) RE&#39; at line 4\&#34;,\&#34;data\&#34;:null}&#34;,&#xA;  &#34;request_server_name&#34;: &#34;*****&#34;,&#xA;  &#34;request_uri&#34;: &#34;/api/v1/user/list&#34;,&#xA;  &#34;severity&#34;: &#34;高危&#34;,&#xA;  &#34;timestamp&#34;: &#34;2023-11-17 14:41:12&#34;,&#xA;  &#34;program&#34;: &#34;wArmor&#34;,&#xA;  &#34;request_method&#34;: &#34;GET&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;架构设计&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/xxddpac/wArmor/main/rule_engine/images/wArmor.jpg&#34; alt=&#34;wArmor&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;文末&lt;/h2&gt; &#xA;&lt;p&gt;感谢 &lt;a href=&#34;https://github.com/bukaleyang/zhongkui-waf&#34;&gt;bukaleyang/zhongkui-waf&lt;/a&gt; 项目, &lt;code&gt;wArmor&lt;/code&gt; 在其基础上进行了二次开发，并进行了性能和架构上的优化。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;WAF&lt;/code&gt; 与规则解耦实现热更新,现在每次规则变动都无需重启线上的 &lt;code&gt;Nginx&lt;/code&gt; 服务，规则的热更新提升了灵活性和维护效率。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;规则引入变量提高检查速度,&lt;code&gt;WAF&lt;/code&gt; 知道要检查 &lt;code&gt;HTTP&lt;/code&gt; 的哪个部分标识，而不必每次请求都遍历所有规则,提升了规则检查的速度。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;日志性能优化,使用非阻塞的 &lt;code&gt;resty.logger.socket&lt;/code&gt; 实现日志的异步写入，在高并发情况下保证了稳定性，避免了阻塞对业务的影响。另外日志中增加了请求的唯一ID， 这在处理问题时非常有用，根据ID可以快速在海量日志中检索到对应的请求日志。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>