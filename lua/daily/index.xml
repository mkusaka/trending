<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-08T01:39:46Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HiPhish/rainbow-delimiters.nvim</title>
    <updated>2023-07-08T01:39:46Z</updated>
    <id>tag:github.com,2023-07-08:/HiPhish/rainbow-delimiters.nvim</id>
    <link href="https://github.com/HiPhish/rainbow-delimiters.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rainbow delimiters for Neovim with Tree-sitter&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. default-role:: code&lt;/p&gt; &#xA;&lt;p&gt;############################### Rainbow delimiters for Neovim ###############################&lt;/p&gt; &#xA;&lt;p&gt;This Neovim plugin provides alternating syntax highlighting (“rainbow parentheses”) for Neovim, powered by &lt;code&gt;Tree-sitter&lt;/code&gt;_. The goal is to have a hackable plugin which allows for different configuration of queries and strategies, both globally and per file type. Users can override and extend the built-in defaults through their own configuration.&lt;/p&gt; &#xA;&lt;p&gt;This is a fork of &lt;code&gt;nvim-ts-rainbow2&lt;/code&gt;&lt;em&gt;, which was implemented as a module for &lt;code&gt;nvim-treessiter&lt;/code&gt;&lt;/em&gt;. However, since nvim-treesitter has deprecated the module system I had to create this standalone plugin.&lt;/p&gt; &#xA;&lt;p&gt;Installation and setup ######################&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Install it like any other Neovim plugin. You will need a Tree-sitter parser for each language you want to use rainbow delimiters with.&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Configuration is done by setting entries in the Vim script dictionary &lt;code&gt;g:rainbow_delimiters&lt;/code&gt;. Here is an example for the default configuration:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: vim&lt;/p&gt; &#xA;&lt;p&gt;let g:rainbow_delimiters = { \ &#39;strategy&#39;: { \ &#39;&#39;: rainbow_delimiters#strategy.global, \ &#39;vim&#39;: rainbow_delimiters#strategy.local, \ }, \ &#39;query&#39;: { \ &#39;&#39;: &#39;rainbow-delimiters&#39;, \ &#39;lua&#39;: &#39;rainbow-blocks&#39;, \ }, \ &#39;highlight&#39;: [ \ &#39;RainbowDelimiterRed&#39;, \ &#39;RainbowDelimiterYellow&#39;, \ &#39;RainbowDelimiterBlue&#39;, \ &#39;RainbowDelimiterOrange&#39;, \ &#39;RainbowDelimiterGreen&#39;, \ &#39;RainbowDelimiterViolet&#39;, \ &#39;RainbowDelimiterCyan&#39;, \ ], \ }&lt;/p&gt; &#xA;&lt;p&gt;The equivalent code in Lua:&lt;/p&gt; &#xA;&lt;p&gt;.. code:: lua&lt;/p&gt; &#xA;&lt;p&gt;-- This module contains a number of default definitions local rainbow_delimiters = require &#39;rainbow-delimiters&#39;&lt;/p&gt; &#xA;&lt;p&gt;vim.g.rainbow_delimiters = { strategy = { [&#39;&#39;] = rainbow_delimiters.strategy[&#39;global&#39;], vim = rainbow_delimiters.strategy[&#39;local&#39;], }, query = { [&#39;&#39;] = &#39;rainbow-delimiters&#39;, lua = &#39;rainbow-blocks&#39;, }, highlight = { &#39;RainbowDelimiterRed&#39;, &#39;RainbowDelimiterYellow&#39;, &#39;RainbowDelimiterBlue&#39;, &#39;RainbowDelimiterOrange&#39;, &#39;RainbowDelimiterGreen&#39;, &#39;RainbowDelimiterViolet&#39;, &#39;RainbowDelimiterCyan&#39;, }, }&lt;/p&gt; &#xA;&lt;p&gt;Please refer to the &lt;code&gt;manual&lt;/code&gt;_ for more details. For those who prefer a &lt;code&gt;setup&lt;/code&gt; function there is the module &lt;code&gt;rainbow-delimiters.setup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Help wanted ###########&lt;/p&gt; &#xA;&lt;p&gt;There are only so many languages which I understand to the point that I can write queries for them. If you want support for a new language please consider contributing code. See the CONTRIBUTING_ for details.&lt;/p&gt; &#xA;&lt;p&gt;Status of the plugin ####################&lt;/p&gt; &#xA;&lt;p&gt;Tree-sitter support in Neovim is still experimental. This plugin and its API should be considered stable insofar as breaking changes will only happen if changes to Neovim necessitates them.&lt;/p&gt; &#xA;&lt;p&gt;.. warning::&lt;/p&gt; &#xA;&lt;p&gt;There is currently a shortcoming in Neovim&#39;s Tree-sitter API which makes it so that only the first node of a capture group can be highlighted. Please see &lt;code&gt;neovim/neovim#17099&lt;/code&gt;_ for details. Affected queries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTML &lt;code&gt;rainbow-delimiters&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSX (Javascript + React.js) &lt;code&gt;rainbow-delimiters-react&lt;/code&gt; (affects React tags only)&lt;/li&gt; &#xA; &lt;li&gt;Python (&lt;code&gt;rainbow-delimiters&lt;/code&gt;) (affects only the &lt;code&gt;for ... in&lt;/code&gt; inside comprehensions)&lt;/li&gt; &#xA; &lt;li&gt;TSX (Typescript + React.js) &lt;code&gt;rainbow-delimiters-react&lt;/code&gt; (affects React tags only)&lt;/li&gt; &#xA; &lt;li&gt;Vue.js &lt;code&gt;rainbow-delimiters&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most of these are related to HTML-like tags, so you can use an alternative query instead. See the manual_ (&lt;code&gt;:h ts-rainbow-query&lt;/code&gt;) for a list of extra queries.&lt;/p&gt; &#xA;&lt;p&gt;Screenshots ###########&lt;/p&gt; &#xA;&lt;h1&gt;Bash&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133420-4eec7fd3-9458-42ef-ba11-43c1ad9db26b.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133420-4eec7fd3-9458-42ef-ba11-43c1ad9db26b.png&lt;/a&gt; :alt: Screenshot of a Bash script with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;h1&gt;C&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133423-8b4f1f00-634a-42c1-9ebc-69f8057a63e6.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133423-8b4f1f00-634a-42c1-9ebc-69f8057a63e6.png&lt;/a&gt; :alt: Screenshot of a C program with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;h1&gt;Common Lisp&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133425-85496400-4e24-4afd-805c-55ca3665c4d9.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133425-85496400-4e24-4afd-805c-55ca3665c4d9.png&lt;/a&gt; :alt: Screenshot of a Common Lisp program with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;h1&gt;Java&lt;/h1&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133426-7615f902-e39f-4625-bb91-2e757233c7ba.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133426-7615f902-e39f-4625-bb91-2e757233c7ba.png&lt;/a&gt; :alt: Screenshot of a Java program with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;h1&gt;LaTeX&lt;/h1&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;blocks&lt;/code&gt; query to highlight the entire &lt;code&gt;\begin&lt;/code&gt; and &lt;code&gt;\end&lt;/code&gt; instructions.&lt;/p&gt; &#xA;&lt;p&gt;.. image:: &lt;a href=&#34;https://user-images.githubusercontent.com/4954650/212133427-46182f57-bfd8-4cbe-be1f-9aad5ddfd796.png&#34;&gt;https://user-images.githubusercontent.com/4954650/212133427-46182f57-bfd8-4cbe-be1f-9aad5ddfd796.png&lt;/a&gt; :alt: Screenshot of a LaTeX document with alternating coloured delimiters&lt;/p&gt; &#xA;&lt;p&gt;License #######&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the Apache-2.0 license. Please see the &lt;code&gt;LICENSE&lt;/code&gt;_ file for details.&lt;/p&gt; &#xA;&lt;p&gt;Migrating from nvim-ts-rainbow2 ###############################&lt;/p&gt; &#xA;&lt;p&gt;Rainbow-Delimiters uses different settings than nvim-ts-rainbow2, but converting the configuration is straight-forward. The biggest change is where the settings are stored.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Settings are stored in the global variable &lt;code&gt;g:rainbow-delimiters&lt;/code&gt;, which has the same keys as the old settings&lt;/li&gt; &#xA; &lt;li&gt;The default strategy and query have index &lt;code&gt;&#39;&#39;&lt;/code&gt; (empty string) instead of &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default highlight groups have the prefix &lt;code&gt;RainbowDelimiter&lt;/code&gt; instead of &lt;code&gt;TSRainbow&lt;/code&gt;, e.g. &lt;code&gt;RainbowDelimiterRed&lt;/code&gt; instead of &lt;code&gt;TSRainbowRed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The default query is now called &lt;code&gt;rainbow-delimiters&lt;/code&gt; instead of &lt;code&gt;rainbow-parens&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The public Lua module is called &lt;code&gt;rainbow-delimiters&lt;/code&gt; instead of &lt;code&gt;ts-rainbow&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The name of the default query is now &lt;code&gt;rainbow-delimiters&lt;/code&gt; because for some languages like HTML the notion of &#34;parentheses&#34; does not make any sense. In HTML the only meaningful delimiter is the tag. Hence the generic notion of a &#34;delimiter&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Attribution ###########&lt;/p&gt; &#xA;&lt;p&gt;This is a fork of a previous Neovim plugin, the original repository is available under &lt;a href=&#34;https://sr.ht/~p00f/nvim-ts-rainbow/&#34;&gt;https://sr.ht/~p00f/nvim-ts-rainbow/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Attributions from the original author&lt;/h1&gt; &#xA;&lt;p&gt;Huge thanks to @vigoux, @theHamsta, @sogaiu, @bfredl and @sunjon and @steelsojka for all their help&lt;/p&gt; &#xA;&lt;p&gt;.. _Tree-sitter: &lt;a href=&#34;https://tree-sitter.github.io/tree-sitter/&#34;&gt;https://tree-sitter.github.io/tree-sitter/&lt;/a&gt; .. _nvim-treesitter: &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;https://github.com/nvim-treesitter/nvim-treesitter&lt;/a&gt; .. _CONTRIBUTING: CONTRIBUTING.rst .. _LICENSE: LICENSE .. _manual: doc/rainbow-delimiters.txt .. _neovim/neovim#17099: &lt;a href=&#34;https://github.com/neovim/neovim/pull/17099&#34;&gt;https://github.com/neovim/neovim/pull/17099&lt;/a&gt; .. _nvim-ts-rainbow2: &lt;a href=&#34;https://gitlab.com/HiPhish/nvim-ts-rainbow2&#34;&gt;https://gitlab.com/HiPhish/nvim-ts-rainbow2&lt;/a&gt; .. _nvim-treessiter: &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;https://github.com/nvim-treesitter/nvim-treesitter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>XingangPan/SCNN</title>
    <updated>2023-07-08T01:39:46Z</updated>
    <id>tag:github.com,2023-07-08:/XingangPan/SCNN</id>
    <link href="https://github.com/XingangPan/SCNN" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Spatial CNN for traffic lane detection (AAAI2018)&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Spatial CNN for Traffic Lane Detection&lt;/h2&gt; &#xA;&lt;h3&gt;Paper&lt;/h3&gt; &#xA;&lt;p&gt;Xingang Pan, Jianping Shi, Ping Luo, Xiaogang Wang, Xiaoou Tang. &lt;a href=&#34;https://arxiv.org/abs/1712.06080&#34;&gt;&#34;Spatial As Deep: Spatial CNN for Traffic Scene Understanding&#34;&lt;/a&gt;, AAAI2018&lt;/p&gt; &#xA;&lt;p&gt;This code is modified from &lt;a href=&#34;https://github.com/facebook/fb.resnet.torch&#34;&gt;fb.resnet.torch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Demo video is available &lt;a href=&#34;https://youtu.be/ey5XPs1012k&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img align=&#34;middle&#34; width=&#34;700&#34; height=&#34;280&#34; src=&#34;https://raw.githubusercontent.com/XingangPan/SCNN/master/CNNvsSCNN.jpg&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Spatial CNN enables explicit and effective spatial information propagation between neurons in the same layer of a CNN.&lt;/li&gt; &#xA; &lt;li&gt;It is extremly effective in cases where objects have strong shape priors like the long thin continuous property of lane lines.&lt;br&gt; VGG16+SCNN outperforms ResNet101 on lane detection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://torch.ch/docs/getting-started.html&#34;&gt;Torch&lt;/a&gt;, please follow the installation instructions at &lt;a href=&#34;https://github.com/facebook/fb.resnet.torch&#34;&gt;fb.resnet.torch&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Matlab (for tools/prob2lines), version R2014a or later.&lt;/li&gt; &#xA; &lt;li&gt;Opencv (for tools/lane_evaluation), version 2.4.8 (later 2.4.x should also work).&lt;/li&gt; &#xA; &lt;li&gt;Hardware: For testing, GPU with 3G memory suffices. For training, we recommend 4xGPU with 12G memory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Before Start&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the SCNN repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;git clone https://github.com/XingangPan/SCNN.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We&#39;ll call the directory that you cloned SCNN as &lt;code&gt;$SCNN_ROOT&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download CULane dataset&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;mkdir -p data/CULane&#xA;cd data/CULane&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Download &lt;a href=&#34;https://xingangpan.github.io/projects/CULane.html&#34;&gt;CULane&lt;/a&gt; dataset and extract here. (Note: If you have downloaded the dataset before 16th April 2018, please update the raw annotations of train&amp;amp;val set as described in the dataset website.)&lt;br&gt; You should have structure like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;$SCNN_ROOT/data/CULane/driver_xx_xxframe    # data folders x6&#xA;$SCNN_ROOT/data/CULane/laneseg_label_w16    # lane segmentation labels&#xA;$SCNN_ROOT/data/CULane/list                 # data lists&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download our pre-trained models to &lt;code&gt;./experiments/pretrained&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;cd $SCNN_ROOT/experiments/pretrained&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Download &lt;a href=&#34;https://drive.google.com/open?id=1Wv3r3dCYNBwJdKl_WPEfrEOt-XGaROKu&#34;&gt;our best performed model&lt;/a&gt; here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run test script&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;cd $SCNN_ROOT&#xA;sh ./experiments/test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Testing results (probability map of lane markings) are saved in &lt;code&gt;experiments/predicts/&lt;/code&gt; by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Get curve line from probability map&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;cd tools/prob2lines&#xA;matlab -nodisplay -r &#34;main;exit&#34;  # or you may simply run main.m from matlab interface&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The generated line coordinates would be saved in &lt;code&gt;tools/prob2lines/output/&lt;/code&gt; by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Calculate precision, recall, and F-measure&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;cd $SCNN_ROOT/tools/lane_evaluation&#xA;make&#xA;sh Run.sh   # it may take over 30min to evaluate&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note: &lt;code&gt;Run.sh&lt;/code&gt; evaluate each scenario separately while &lt;code&gt;run.sh&lt;/code&gt; evaluate the whole. You may use &lt;code&gt;calTotal.m&lt;/code&gt; to calculate overall performance from all senarios.&lt;br&gt; By now, you should be able to reproduce our result in the paper.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Training&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download VGG16 pretrained on ImageNet &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;cd $SCNN_ROOT/experiments/models&#xA;&lt;/code&gt;&lt;/pre&gt; Download VGG16 model &lt;a href=&#34;https://drive.google.com/open?id=12RLXY6o8gaGMY1K1g6d447Iby9ewVIyV&#34;&gt;here&lt;/a&gt; and move it to &lt;code&gt;$SCNN_ROOT/experiments/models/vgg&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Generate SCNN model &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;th SCNN-gen.lua&#xA;&lt;/code&gt;&lt;/pre&gt; The generated model will be saved in &lt;code&gt;./vgg_SCNN_DULR9_w9&lt;/code&gt; by default.&lt;/li&gt; &#xA; &lt;li&gt;Training SCNN &lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;cd $SCNN_ROOT&#xA;sh ./experiments/train.sh&#xA;&lt;/code&gt;&lt;/pre&gt; The training process should start and trained models would be saved in &lt;code&gt;$SCNN_ROOT/experiments/models/vgg_SCNN_DULR_w9&lt;/code&gt; by default.&lt;br&gt; Then you can test the trained model following the Testing steps above. If your model position or name is changed, remember to set them to yours accordingly.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other Implementations&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tensorflow&lt;/strong&gt; implementation reproduced by &lt;a href=&#34;https://github.com/cardwing&#34;&gt;cardwing&lt;/a&gt;: &lt;a href=&#34;https://github.com/cardwing/Codes-for-Lane-Detection&#34;&gt;https://github.com/cardwing/Codes-for-Lane-Detection&lt;/a&gt;.&lt;br&gt; [new!] &lt;strong&gt;Pytorch&lt;/strong&gt; implementation reproduced by &lt;a href=&#34;https://github.com/voldemortX&#34;&gt;voldemortX&lt;/a&gt;: &lt;a href=&#34;https://github.com/voldemortX/pytorch-auto-drive&#34;&gt;https://github.com/voldemortX/pytorch-auto-drive&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Citing SCNN or CULane&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{pan2018SCNN,  &#xA;  author = {Xingang Pan, Jianping Shi, Ping Luo, Xiaogang Wang, and Xiaoou Tang},  &#xA;  title = {Spatial As Deep: Spatial CNN for Traffic Scene Understanding},  &#xA;  booktitle = {AAAI Conference on Artificial Intelligence (AAAI)},  &#xA;  month = {February},  &#xA;  year = {2018}  &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Acknowledgment&lt;/h3&gt; &#xA;&lt;p&gt;Most work for building CULane dataset is done by &lt;a href=&#34;https://xiaohangzhan.github.io/&#34;&gt;Xiaohang Zhan&lt;/a&gt;, Jun Li, and Xudong Cao. We thank them for their helpful contribution.&lt;/p&gt;</summary>
  </entry>
</feed>