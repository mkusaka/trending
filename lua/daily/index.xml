<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-21T01:49:35Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ThePrimeagen/refactoring.nvim</title>
    <updated>2022-07-21T01:49:35Z</updated>
    <id>tag:github.com,2022-07-21:/ThePrimeagen/refactoring.nvim</id>
    <link href="https://github.com/ThePrimeagen/refactoring.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Refactoring library based off the Refactoring book by Martin Fowler&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;refactoring.nvim&lt;/h1&gt; &#xA; &lt;h5&gt;The Refactoring library based off the Refactoring book by Martin Fowler&lt;/h5&gt; &#xA; &lt;h6&gt;&#39;If I use an environment that has good automated refactorings, I can trust those refactorings&#39; - Martin Fowler&lt;/h6&gt; &#xA; &lt;p&gt;&lt;a href=&#34;http://www.lua.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Lua-blue.svg?style=for-the-badge&amp;amp;logo=lua&#34; alt=&#34;Lua&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://neovim.io&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Neovim%20Nightly-green.svg?style=for-the-badge&amp;amp;logo=neovim&#34; alt=&#34;Neovim Nightly&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/Work%20In%20Progress-orange?style=for-the-badge&#34; alt=&#34;Work In Progress&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#packer&#34;&gt;Setup Using Packer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#features&#34;&gt;Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#supported-languages&#34;&gt;Supported Languages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#refactoring-features&#34;&gt;Refactoring Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#debug-features&#34;&gt;Debug Features&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring&#34;&gt;Configuration for Refactoring Operations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-direct&#34;&gt;Using Direct Remaps&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-builtin&#34;&gt;Using Built-In Neovim Selection&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-refactoring-telescope&#34;&gt;Using Telescope&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug&#34;&gt;Configuration for Debug Operations&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification&#34;&gt;Customizing Printf and Print Var Statements&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification-printf&#34;&gt;Customizing Printf Statements&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-debug-stringification-print-var&#34;&gt;Customizing Print Var Statements&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-prompt&#34;&gt;Configuration for Type Prompt Operations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;a name=&#34;installation&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;a name=&#34;requirements&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Neovim Nightly&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Treesitter&lt;/li&gt; &#xA; &lt;li&gt;Plenary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup Using Packer&lt;a name=&#34;packer&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;ThePrimeagen/refactoring.nvim&#34;,&#xA;    requires = {&#xA;        {&#34;nvim-lua/plenary.nvim&#34;},&#xA;        {&#34;nvim-treesitter/nvim-treesitter&#34;}&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;a name=&#34;features&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Supported Languages&lt;a name=&#34;supported-languages&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Given that this is a work in progress, the languages supported for the operations listed below is &lt;strong&gt;constantly changing&lt;/strong&gt;. As of now, these languages are supported (with individual support for each function may vary):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TypeScript&lt;/li&gt; &#xA; &lt;li&gt;JavaScript&lt;/li&gt; &#xA; &lt;li&gt;Lua&lt;/li&gt; &#xA; &lt;li&gt;C/C++&lt;/li&gt; &#xA; &lt;li&gt;Golang&lt;/li&gt; &#xA; &lt;li&gt;Python&lt;/li&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;PHP&lt;/li&gt; &#xA; &lt;li&gt;Ruby&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Refactoring Features&lt;a name=&#34;refactoring-features&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support for various common refactoring operations &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;106: Extract Function&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Extracts the last highlighted code from visual mode to a separate function&lt;/li&gt; &#xA;     &lt;li&gt;Optionally prompts for function param types and return types (see &lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/#config-prompt&#34;&gt;configuration for type prompt operations&lt;/a&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;Also possible to Extract Block.&lt;/li&gt; &#xA;     &lt;li&gt;Both Extract Function and Extract Block have the capability to extract to a separate file.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;119: Extract Variable&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;In visual mode, extracts occurences of a selected expression to its own variable, replacing occurences of that expression with the variable&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;123: Inline Variable&lt;/strong&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Inverse of extract variable&lt;/li&gt; &#xA;     &lt;li&gt;Replaces all occurences of a variable with its value&lt;/li&gt; &#xA;     &lt;li&gt;Can be used in normal mode or visual mode &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;Using this function in normal mode will automatically find the variable under the cursor and inline it&lt;/li&gt; &#xA;       &lt;li&gt;Using this function in visual mode will find the variable(s) in the visual selection. &#xA;        &lt;ul&gt; &#xA;         &lt;li&gt;If there is more than one variable in the selection, the plugin will prompt for which variable to inline,&lt;/li&gt; &#xA;         &lt;li&gt;If there is only one variable in the visual selection, it will automatically inline that variable&lt;/li&gt; &#xA;        &lt;/ul&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debug Features&lt;a name=&#34;debug-features&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Also comes with various useful features for debugging &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Printf:&lt;/strong&gt; Automated insertion of print statement to mark the calling of a function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Print var:&lt;/strong&gt; Automated insertion of print statement to print a variable at a given point in the code. This map can be made with either visual or normal mode: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Using this function in visual mode will print out whatever is in the visual selection.&lt;/li&gt; &#xA;     &lt;li&gt;Passing &lt;code&gt;{ normal = true }&lt;/code&gt; to the function will automatically find the variable under the cursor and print it from normal mode without needing visual mode at all&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Cleanup:&lt;/strong&gt; Automated cleanup of all print statements generated by the plugin&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;a name=&#34;configuration&#34;&gt;&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways to configure this plugin. Below are some example configurations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setup Function&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;No matter which configuration option you use, you must first call the setup function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here are all the available options for the setup function and their defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({&#xA;    prompt_func_return_type = {&#xA;        go = false,&#xA;        java = false,&#xA;&#xA;        cpp = false,&#xA;        c = false,&#xA;        h = false,&#xA;        hpp = false,&#xA;        cxx = false,&#xA;    },&#xA;    prompt_func_param_type = {&#xA;        go = false,&#xA;        java = false,&#xA;&#xA;        cpp = false,&#xA;        c = false,&#xA;        h = false,&#xA;        hpp = false,&#xA;        cxx = false,&#xA;    },&#xA;    printf_statements = {},&#xA;    print_var_statements = {},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See each of the sections below for details on each configuration option.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration for Refactoring Operations&lt;a name=&#34;config-refactoring&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h4&gt;Using Direct Remaps&lt;a name=&#34;config-refactoring-direct&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you want to make remaps for a specific refactoring operation, you can do so by configuring the plugin like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Remaps for the refactoring operations currently offered by the plugin&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;re&#34;, [[ &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Function&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;rf&#34;, [[ &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Function To File&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;rv&#34;, [[ &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Variable&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;ri&#34;, [[ &amp;lt;Esc&amp;gt;&amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Inline Variable&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;&#xA;-- Extract block doesn&#39;t need visual mode&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;rb&#34;, [[ &amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Block&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;rbf&#34;, [[ &amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Extract Block To File&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;&#xA;-- Inline variable can also pick up the identifier currently under the cursor without visual mode&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;ri&#34;, [[ &amp;lt;Cmd&amp;gt;lua require(&#39;refactoring&#39;).refactor(&#39;Inline Variable&#39;)&amp;lt;CR&amp;gt;]], {noremap = true, silent = true, expr = false})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice that these maps (except the last two) are &lt;strong&gt;visual mode&lt;/strong&gt; remaps, and that ESC is pressed before executing the command. As of now, these are both necessary for the plugin to work.&lt;/p&gt; &#xA;&lt;h4&gt;Using Built-In Neovim Selection&lt;a name=&#34;config-refactoring-builtin&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;You can also set up the plugin to prompt for a refactoring operation to apply using Neovim&#39;s built in selection API. Here is an example remap to demonstrate this functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- prompt for a refactor to apply when the remap is triggered&#xA;vim.api.nvim_set_keymap(&#xA;    &#34;v&#34;,&#xA;    &#34;&amp;lt;leader&amp;gt;rr&#34;,&#xA;    &#34;:lua require(&#39;refactoring&#39;).select_refactor()&amp;lt;CR&amp;gt;&#34;,&#xA;    { noremap = true, silent = true, expr = false }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This remap should also be made in &lt;strong&gt;visual mode&lt;/strong&gt;, or functionality for some refactors will not work properly.&lt;/p&gt; &#xA;&lt;h4&gt;Using Telescope&lt;a name=&#34;config-refactoring-telescope&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you would prefer to use Telescope to choose a refactor when you&#39;re in visual mode, you can do so use using the &lt;strong&gt;Telescope extension.&lt;/strong&gt; Here is an example config for this setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- load refactoring Telescope extension&#xA;require(&#34;telescope&#34;).load_extension(&#34;refactoring&#34;)&#xA;&#xA;-- remap to open the Telescope refactoring menu in visual mode&#xA;vim.api.nvim_set_keymap(&#xA;&#x9;&#34;v&#34;,&#xA;&#x9;&#34;&amp;lt;leader&amp;gt;rr&#34;,&#xA;&#x9;&#34;&amp;lt;Esc&amp;gt;&amp;lt;cmd&amp;gt;lua require(&#39;telescope&#39;).extensions.refactoring.refactors()&amp;lt;CR&amp;gt;&#34;,&#xA;&#x9;{ noremap = true }&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration for Debug Operations&lt;a name=&#34;config-debug&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Finally, you can configure remaps for the debug operations of this plugin like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- You can also use below = true here to to change the position of the printf&#xA;-- statement (or set two remaps for either one). This remap must be made in normal mode.&#xA;vim.api.nvim_set_keymap(&#xA;&#x9;&#34;n&#34;,&#xA;&#x9;&#34;&amp;lt;leader&amp;gt;rp&#34;,&#xA;&#x9;&#34;:lua require(&#39;refactoring&#39;).debug.printf({below = false})&amp;lt;CR&amp;gt;&#34;,&#xA;&#x9;{ noremap = true }&#xA;)&#xA;&#xA;-- Print var&#xA;&#xA;-- Remap in normal mode and passing { normal = true } will automatically find the variable under the cursor and print it&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;rv&#34;, &#34;:lua require(&#39;refactoring&#39;).debug.print_var({ normal = true })&amp;lt;CR&amp;gt;&#34;, { noremap = true })&#xA;-- Remap in visual mode will print whatever is in the visual selection&#xA;vim.api.nvim_set_keymap(&#34;v&#34;, &#34;&amp;lt;leader&amp;gt;rv&#34;, &#34;:lua require(&#39;refactoring&#39;).debug.print_var({})&amp;lt;CR&amp;gt;&#34;, { noremap = true })&#xA;&#xA;-- Cleanup function: this remap should be made in normal mode&#xA;vim.api.nvim_set_keymap(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;rc&#34;, &#34;:lua require(&#39;refactoring&#39;).debug.cleanup({})&amp;lt;CR&amp;gt;&#34;, { noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customizing Printf and Print Var Statements&lt;a name=&#34;config-debug-stringification&#34;&gt;&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;It is possible to override the statements used in the printf and print var functionalities.&lt;/p&gt; &#xA;&lt;h5&gt;Customizing Printf Statements&lt;a name=&#34;config-debug-stringification-printf&#34;&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;You can add to the printf statements for any language by adding something like the below to your configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({&#xA;  -- overriding printf statement for cpp&#xA;  printf_statements = {&#xA;      -- add a custom printf statement for cpp&#xA;      cpp = {&#xA;          &#39;std::cout &amp;lt;&amp;lt; &#34;%s&#34; &amp;lt;&amp;lt; std::endl;&#39;&#xA;      }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In any custom printf statement, it is possible to optionally add a max of &lt;strong&gt;one %s&lt;/strong&gt; pattern, which is where the debug path will go. For an example custom printf statement, go to &lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/lua/refactoring/tests/debug/printf&#34;&gt;this folder&lt;/a&gt;, select your language, and click on &lt;code&gt;multiple-statements/printf.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Customizing Print Var Statements&lt;a name=&#34;config-debug-stringification-print-var&#34;&gt;&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;p&gt;The print var functionality can also be extended for any given language, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({&#xA;  -- overriding printf statement for cpp&#xA;  print_var_statements = {&#xA;      -- add a custom print var statement for cpp&#xA;      cpp = {&#xA;          &#39;printf(&#34;a custom statement %%s %s&#34;, %s)&#39;&#xA;      }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In any custom print var statement, it is possible to optionally add a max of &lt;strong&gt;two %s&lt;/strong&gt; patterns, which is where the debug path and the actual variable reference will go, respectively. To add a literal &#34;%s&#34; to the string, escape the sequence like this: &lt;code&gt;%%s&lt;/code&gt;. For an example custom print var statement, go to &lt;a href=&#34;https://raw.githubusercontent.com/ThePrimeagen/refactoring.nvim/master/lua/refactoring/tests/debug/print_var&#34;&gt;this folder&lt;/a&gt;, select your language, and view &lt;code&gt;multiple-statements/print_var.config&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; for either of these functions, if you have multiple custom statements, the plugin will prompt for which one should be inserted. If you just have one custom statement in your config, it will override the default automatically.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration for Type Prompt Operations&lt;a name=&#34;config-prompt&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;For certain languages like Golang, types are required for functions that return an object(s) and parameters of functions. Unfortunately, for some parameters and functions there is no way to automatically find their type. In those instances, we want to provide a way to input a type instead of inserting a placeholder value.&lt;/p&gt; &#xA;&lt;p&gt;By default all prompts are turned off. The configuration below shows how to enable prompts for all the languages currently supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;refactoring&#39;).setup({&#xA;    -- prompt for return type&#xA;    prompt_func_return_type = {&#xA;        go = true,&#xA;        cpp = true,&#xA;        c = true,&#xA;        java = true,&#xA;    },&#xA;    -- prompt for function parameters&#xA;    prompt_func_param_type = {&#xA;        go = true,&#xA;        cpp = true,&#xA;        c = true,&#xA;        java = true,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>alpinelinux/docker-alpine</title>
    <updated>2022-07-21T01:49:35Z</updated>
    <id>tag:github.com,2022-07-21:/alpinelinux/docker-alpine</id>
    <link href="https://github.com/alpinelinux/docker-alpine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official Alpine Linux Docker image. Win at minimalism!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;docker-alpine&lt;/h1&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://hub.docker.com/r/_/alpine/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/stars/_/alpine.svg?sanitize=true&#34; alt=&#34;alpine&#34;&gt;&lt;/a&gt;&lt;/span&gt; &lt;span class=&#34;image&#34;&gt;&lt;a class=&#34;image&#34; href=&#34;https://hub.docker.com/r/_/alpine/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/_/alpine.svg?sanitize=true&#34; alt=&#34;alpine&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The official Docker image for &lt;a href=&#34;https://alpinelinux.org&#34;&gt;Alpine Linux&lt;/a&gt;. The image is only 5MB and has access to a package repository that is much more featureful than other BusyBox based images.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_why&#34;&gt;Why&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Docker images today are big. Usually much larger than they need to be. There are a lot of ways to make them smaller, but the Docker populace still jumps to the &lt;code&gt;ubuntu&lt;/code&gt; base image for most projects. The size savings over &lt;code&gt;ubuntu&lt;/code&gt; and other bases are huge:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;REPOSITORY  TAG     IMAGE ID      CREATED      SIZE&#xA;alpine      latest  961769676411  4 weeks ago  5.58MB&#xA;ubuntu      latest  2ca708c1c9cc  2 days ago   64.2MB&#xA;debian      latest  c2c03a296d23  9 days ago   114MB&#xA;centos      latest  67fa590cfc1c  4 weeks ago  202MB&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;There are images such as &lt;code&gt;progrium/busybox&lt;/code&gt; which get us close to a minimal container and package system, but these particular BusyBox builds piggyback on the OpenWRT package index, which is often lacking and not tailored towards generic everyday applications. Alpine Linux has a much more featureful and up to date &lt;a href=&#34;https://pkgs.alpinelinux.org&#34;&gt;Package Index&lt;/a&gt;:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code&gt;$ docker run progrium/busybox opkg-install nodejs&#xA;Unknown package &#39;nodejs&#39;.&#xA;Collected errors:&#xA; * opkg_install_cmd: Cannot install package nodejs.&#xA;&#xA;$ docker run alpine apk add --no-cache nodejs&#xA;fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/main/x86_64/APKINDEX.tar.gz&#xA;fetch http://dl-cdn.alpinelinux.org/alpine/v3.9/community/x86_64/APKINDEX.tar.gz&#xA;(1/7) Installing ca-certificates (20190108-r0)&#xA;(2/7) Installing c-ares (1.15.0-r0)&#xA;(3/7) Installing libgcc (8.3.0-r0)&#xA;(4/7) Installing http-parser (2.8.1-r0)&#xA;(5/7) Installing libstdc++ (8.3.0-r0)&#xA;(6/7) Installing libuv (1.23.2-r0)&#xA;(7/7) Installing nodejs (10.14.2-r0)&#xA;Executing busybox-1.29.3-r10.trigger&#xA;Executing ca-certificates-20190108-r0.trigger&#xA;OK: 31 MiB in 21 packages&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This makes Alpine Linux a great image base for utilities, as well as production applications. &lt;a href=&#34;https://www.alpinelinux.org/about/&#34;&gt;Read more about Alpine Linux here&lt;/a&gt; and it will become obvious how its mantra fits in right at home with Docker images.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Note&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; All of the example outputs above were last generated/updated on May 3rd 2019. &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_usage&#34;&gt;Usage&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Stop doing this:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;FROM ubuntu-debootstrap:14.04&#xA;RUN apt-get update -q   &amp;amp;&amp;amp; DEBIAN_FRONTEND=noninteractive apt-get install -qy mysql-client   &amp;amp;&amp;amp; apt-get clean   &amp;amp;&amp;amp; rm -rf /var/lib/apt&#xA;ENTRYPOINT [&#34;mysql&#34;]&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This took 28 seconds to build and yields a 169 MB image. Start doing this:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;FROM alpine:3.9&#xA;RUN apk add --no-cache mysql-client&#xA;ENTRYPOINT [&#34;mysql&#34;]&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Only 4 seconds to build and results in a 41 MB image!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>jgm/djot</title>
    <updated>2022-07-21T01:49:35Z</updated>
    <id>tag:github.com,2022-07-21:/jgm/djot</id>
    <link href="https://github.com/jgm/djot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light markup language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Djot&lt;/h1&gt; &#xA;&lt;p&gt;Djot is a light markup syntax. It derives most of its features from &lt;a href=&#34;https://spec.commonmark.org&#34;&gt;commonmark&lt;/a&gt;, but it fixes a few things that made commonmark&#39;s syntax complex and difficult to parse efficiently. It is also much fuller-featured than commonmark, with support for definition lists, footnotes, tables, several new kinds of inline formatting (insert, delete, highlight, superscript, subscript), math, smart punctuation, attributes that can be applied to any element, and generic containers for block-level, inline-level, and raw content.&lt;/p&gt; &#xA;&lt;p&gt;The project began as an attempt to implement some of the ideas I suggested in my essay &lt;a href=&#34;https://johnmacfarlane.net/beyond-markdown.html&#34;&gt;Beyond Markdown&lt;/a&gt;. I wanted to keep the good parts of Markdown, while fixing the pain points. I also wanted to extend the syntax to make djot a more flexible tool for writing. (See &lt;a href=&#34;https://raw.githubusercontent.com/jgm/djot/main/#rationale&#34;&gt;Rationale&lt;/a&gt;, below.)&lt;/p&gt; &#xA;&lt;p&gt;This repository contains a reference implementation, written in Lua, and a &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/jgm/djot/raw/master/doc/syntax.html&#34;&gt;syntax description&lt;/a&gt;. Despite being written in an interpreted language, the reference implementation is very fast (converting a 260K test document in 141 ms on an M1 mac using the standard &lt;code&gt;lua&lt;/code&gt; interpreter). It can produce an AST, rendered HTML, or a stream of match tokens that identify elements by source position, which could be used for syntax highlighting or a linting tool.&lt;/p&gt; &#xA;&lt;p&gt;We also provide a custom pandoc writer for djot (&lt;code&gt;djot-writer.lua&lt;/code&gt;), so that documents in other formats can be converted to djot format, and a custom pandoc reader (&lt;code&gt;djot-reader.lua&lt;/code&gt;), so that djot documents can be converted to any format pandoc supports. To use these, just put them in your working directory and use &lt;code&gt;pandoc -f djot-reader.lua&lt;/code&gt; to convert from djot, and &lt;code&gt;pandoc -t djot-writer.lua&lt;/code&gt; to convert to djot. (You&#39;ll need pandoc version 2.18 or higher.)&lt;/p&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;Here are some design goals:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;It should be possible to parse djot markup in linear time, with no backtracking.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Parsing of inline elements should be &#34;local&#34; and not depend on what references are defined later. This is not the case in commonmark: &lt;code&gt;[foo][bar]&lt;/code&gt; might be &#34;[foo]&#34; followed by a link with text &#34;bar&#34;, or &#34;[foo][bar]&#34;, or a link with text &#34;foo&#34;, or a link with text &#34;foo&#34; followed by &#34;[bar]&#34;, depending on whether the references &lt;code&gt;[foo]&lt;/code&gt; and &lt;code&gt;[bar]&lt;/code&gt; are defined elsewhere (perhaps later) in the document. This non-locality makes accurate syntax highlighting nearly impossible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules for emphasis should be simpler. The fact that doubled characters are used for strong emphasis in commonmark leads to many potential ambiguities, which are resolved by a daunting list of 17 rules. It is hard to form a good mental model of these rules. Most of the time they interpret things the way a human would most naturally interpret them---but not always.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Expressive blind spots should be avoided. In commonmark, you&#39;re out of luck if you want to produce the HTML &lt;code&gt;a&amp;lt;emph&amp;gt;?&amp;lt;/emph&amp;gt;b&lt;/code&gt;, because the flanking rules classify the first asterisk in &lt;code&gt;a*?*b&lt;/code&gt; as right-flanking. There is a way around this, but it&#39;s ugly (using a numerical entity instead of &lt;code&gt;a&lt;/code&gt;). In djot there should not be expressive blind spots of this kind.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules for what content belongs to a list item should be simple. In commonmark, content under a list item must be indented as far as the first non-space content after the list marker (or five spaces after the marker, in case the list item begins with indented code). Many people get confused when their indented content is not indented far enough and does not get included in the list item.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Parsers should not be forced to recognize unicode character classes, HTML tags, or entities, or perform unicode case folding. That adds a lot of complexity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The syntax should be friendly to hard-wrapping: hard-wrapping a paragraph should not lead to different interpretations, e.g. when a number followed by a period ends up at the beginning of a line. (I anticipate that many will ask, why hard-wrap at all? Answer: so that your document is readable just as it is, without conversion to HTML and without special editor modes that soft-wrap long lines. Remember that source readability was one of the prime goals of Markdown and Commonmark.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The syntax should compose uniformly, in the following sense: if a sequence of lines has a certain meaning outside a list item or block quote, it should have the same meaning inside it. This principle is &lt;a href=&#34;https://spec.commonmark.org/0.30/#principle-of-uniformity&#34;&gt;articulated in the commonmark spec&lt;/a&gt;, but the spec doesn&#39;t completely abide by it (see commonmark/commonmark-spec#634).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It should be possible to attach arbitrary attributes to any element.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There should be generic containers for text, inline content, and block-level content, to which arbitrary attributes can be applied. This allows for extensibility using AST transformations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The syntax should be kept as simple as possible, consistent with these goals. Thus, for example, we don&#39;t need two different styles of headings or code blocks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;These goals motivated the following decisions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Block-level elements can&#39;t interrupt paragraphs (or headings), because of goal 7. So in djot the following is a single paragraph, not (as commonmark sees it) a paragraph followed by an ordered list followed by a block quote followed by a section heading:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;My favorite number is probably the number&#xA;1. It&#39;s the smallest natural number that is&#xA;&amp;gt; 0. With pencils, though, I prefer a&#xA;# 2.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Commonmark does make some concessions to goal 7, by forbidding lists beginning with markers other than &lt;code&gt;1.&lt;/code&gt; to interrupt paragraphs. But this is a compromise and a sacrifice of regularity and predictability in the syntax. Better just to have a general rule.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;An implication of the last decision is that, although &#34;tight&#34; lists are still possible (without blank lines between items), a &lt;em&gt;sublist&lt;/em&gt; must always be preceded by a blank line. Thus, instead of&lt;/p&gt; &lt;pre&gt;&lt;code&gt;- Fruits&#xA;  - apple&#xA;  - orange&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;you must write&lt;/p&gt; &lt;pre&gt;&lt;code&gt;- Fruits&#xA;&#xA;  - apple&#xA;  - orange&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;(This blank line doesn&#39;t count against &#34;tightness.&#34;) reStructuredText makes the same design decision.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Also to promote goal 7, we allow headings to &#34;lazily&#34; span multiple lines:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;## My excessively long section heading is too&#xA;long to fit on one line.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While we&#39;re at it, we&#39;ll simplify by removing setext-style (underlined) headings. We don&#39;t really need two heading syntaxes (goal 11).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To meet goal 5, we have a very simple rule: anything that is indented beyond the start of the list marker belongs in the list item.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;1. list item&#xA;&#xA;  &amp;gt; block quote inside item 1&#xA;&#xA;2. second item&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In commonmark, this would be parsed as two separate lists with a block quote between them, because the block quote is not indented far enough. What kept us from using this simple rule in commonmark was indented code blocks. If list items are going to contain an indented code block, we need to know at what column to start counting the indentation, so we fixed on the column that makes the list look best (the first column of non-space content after the marker):&lt;/p&gt; &lt;pre&gt;&lt;code&gt;1.  A commonmark list item with an indented code block in it.&#xA;&#xA;        code!&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In djot, we just get rid of indented code blocks. Most people prefer fenced code blocks anyway, and we don&#39;t need two different ways of writing code blocks (goal 11).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To meet goal 6 and to avoid the complex rules commonmark adopted for handling raw HTML, we simply do not allow raw HTML, except in explicitly marked contexts, e.g. &lt;code&gt;`&amp;lt;a id=&#34;foo&#34;&amp;gt;`{=html}&lt;/code&gt; or&lt;/p&gt; &lt;pre&gt;&lt;code&gt;``` =html&#xA;&amp;lt;table&amp;gt;&#xA;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;foo&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&#xA;&amp;lt;/table&amp;gt;&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Unlike Markdown, djot is not HTML-centric. Djot documents might be rendered to a variety of different formats, so although we want to provide the flexibility to include raw content in any output format, there is no reason to privilege HTML. For similar reasons we do not interpret HTML entities, as commonmark does.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To meet goal 2, we make reference link parsing local. Anything that looks like &lt;code&gt;[foo][bar]&lt;/code&gt; or &lt;code&gt;[foo][]&lt;/code&gt; gets treated as a reference link, regardless of whether &lt;code&gt;[foo]&lt;/code&gt; is defined later in the document. A corollary is that we must get rid of shortcut link syntax, with just a single bracket pair, &lt;code&gt;[like this]&lt;/code&gt;. It must always be clear what is a link without needing to know the surrounding context.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In support of goal 6, reference links are no longer case-insensitive. Supporting this beyond an ASCII context would require building in unicode case folding to every implementation, and it doesn&#39;t seem necessary.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A space or newline is required after &lt;code&gt;&amp;gt;&lt;/code&gt; in block quotes, to avoid the violations of the principle of uniformity noted in goal 8:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&amp;gt;This is not a&#xA;&amp;gt;block quote in djot.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To meet goal 3, we avoid using doubled characters for strong emphasis. Instead, we use &lt;code&gt;_&lt;/code&gt; for emphasis and &lt;code&gt;*&lt;/code&gt; for strong emphasis. Emphasis can begin with one of these characters, as long as it is not followed by a space, and will end when a similar character is encountered, as long as it is not preceded by a space and some different characters have occurred in between. In the case of overlap, the first one to be closed takes precedence. (This simple rule also avoids the need we had in commonmark to determine unicode character classes---goal 6.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Taken just by itself, this last change would introduce a number of expressive blind spots. For example, given the simple rule,&lt;/p&gt; &lt;pre&gt;&lt;code&gt;_(_foo_)_&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;parses as&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;em&amp;gt;(&amp;lt;/em&amp;gt;foo&amp;lt;em&amp;gt;)&amp;lt;/em&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;rather than&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;em&amp;gt;(&amp;lt;em&amp;gt;foo&amp;lt;/em&amp;gt;)&amp;lt;/em&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want the latter interpretation, djot allows you to use the syntax&lt;/p&gt; &lt;pre&gt;&lt;code&gt;_({_foo_})_&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;{_&lt;/code&gt; is a &lt;code&gt;_&lt;/code&gt; that can only open emphasis, and the &lt;code&gt;_}&lt;/code&gt; is a &lt;code&gt;_&lt;/code&gt; that can only close emphasis. The same can be done with &lt;code&gt;*&lt;/code&gt; or any other inline formatting marker that is ambiguous between an opener and closer. These curly braces are &lt;em&gt;required&lt;/em&gt; for certain inline markup, e.g. &lt;code&gt;{=highlighting=}&lt;/code&gt;, &lt;code&gt;{+insert+}&lt;/code&gt;, and &lt;code&gt;{-delete-}&lt;/code&gt;, since the characters &lt;code&gt;=&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, and &lt;code&gt;-&lt;/code&gt; are found often in ordinary text.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In support of goal 1, code span parsing does not backtrack. So if you open a code span and don&#39;t close it, it extends to the end of the paragraph. That is similar to the way fenced code blocks work in commonmark.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;This is `inline code.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In support of goal 9, a generic attribute syntax is introduced. Attributes can be attached to any block-level element by putting them on the line before it, and to any inline-level element by putting them directly after it.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{#introduction}&#xA;This is the introductory paragraph, with&#xA;an identifier `introduction`.&#xA;&#xA;                           {.important color=&#34;blue&#34; #heading}&#xA;## heading&#xA;&#xA;The word *atelier*{weight=&#34;600&#34;} is French.&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Since we are going to have generic attributes, we no longer support quoted titles in links. One can add a title attribute if needed, but this isn&#39;t very common, so we don&#39;t need a special syntax for it:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;[Link text](url){title=&#34;Click me!&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fenced divs and bracketed spans are introduced in order to allow attributes to be attached to arbitrary sequences of block-level or inline-level elements. For example,&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{#warning .sidebar}&#xA;::: Warning&#xA;This is a warning.&#xA;Here is a word in [français]{lang=fr}.&#xA;:::&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Syntax&lt;/h2&gt; &#xA;&lt;p&gt;For a full syntax reference, see the &lt;a href=&#34;https://htmlpreview.github.io/?https://github.com/jgm/djot/raw/master/doc/syntax.html&#34;&gt;syntax description&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A vim syntax highlighting definition for djot is provided in &lt;code&gt;editors/vim/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Playground&lt;/h2&gt; &#xA;&lt;p&gt;You can play with djot on the live &lt;a href=&#34;https://djot.net/playground/&#34;&gt;djot playground&lt;/a&gt;, designed by @dtinth.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Lua library&lt;/h2&gt; &#xA;&lt;h3&gt;Quick start&lt;/h3&gt; &#xA;&lt;p&gt;If you just want to parse some input and produce HTML:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local djot = require(&#34;djot&#34;)&#xA;local input = &#34;This is *djot*&#34;&#xA;local parser = djot.Parser:new(input)&#xA;parser:parse()&#xA;local html = parser:render_html()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;In more depth&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local djot = require(&#34;djot&#34;)&#xA;&#xA;-- Create a parser with input string and options:&#xA;local parser = djot.Parser:new(input, options)&#xA;-- Parse the document:&#xA;parser:parse()&#xA;&#xA;-- &#39;options&#39; may be omitted, but if present it should be&#xA;-- a table with the following boolean fields (both defaulting&#xA;-- to false):&#xA;--&#xA;-- verbose: if true, warnings are emitted to stderr.&#xA;-- sourcepos: if true, source positions are tracked.&#xA;&#xA;-- At this point we have a list of &#34;matches&#34;&#xA;-- (including start/end -- position and an annotation like &#39;+blockquote&#39;).&#xA;local matches = parser:get_matches()&#xA;&#xA;-- &#39;matches&#39; is an array of match objects; to deal with them, you&#39;ll need&#xA;local match = require(&#34;djot.match&#34;)&#xA;local startpos, endpos, annotation = match.unpack_match(matches[1])&#xA;&#xA;-- Here &#39;startpos&#39; and &#39;endpos&#39; are integer byte positions in the&#xA;-- input string, and &#39;annotation&#39; is a string starting with &#39;+&#39;&#xA;-- or &#39;-&#39;, e.g. &#39;+blockquote&#39;.&#xA;&#xA;-- You can use &#39;matches_pattern&#39; to check the match&#39;s annotation&#xA;-- against a Lua pattern without unpacking it:&#xA;if match.matches_pattern(matches[1], &#39;blockquote&#39;) then&#xA;  -- second argument is a Lua pattern&#xA;  print (&#34;It&#39;s either +blockquote or -blockquote!&#34;)&#xA;end&#xA;&#xA;-- To render the stream of matches in a human-readable form:&#xA;parser:render_matches(io.stdout)&#xA;-- or as a string&#xA;local matches_string = parser:render_matches()&#xA;&#xA;-- After parsing, warnings can also be obtained as a Lua table:&#xA;local warnings = parser.warnings&#xA;&#xA;-- To build an AST from the list of matches:&#xA;parser:build_ast()&#xA;&#xA;-- The AST is now available as a Lua table, parser.ast&#xA;-- It can be modified programatically and any changes&#xA;-- you make will be reflected in rendered HTML.&#xA;&#xA;-- To render the AST in human-readable form:&#xA;parser:render_ast(io.stdout)&#xA;-- or as a string:&#xA;local ast_string = parser:render_ast()&#xA;-- This function will call &#39;build_ast&#39; automatically if the&#xA;-- AST is not built.&#xA;&#xA;-- To render the AST as an HTML string:&#xA;local html = parser:render_html()&#xA;-- Or, to send the HTML output to a handle:&#xA;parser:render_html(io.stdout)&#xA;-- This function will call &#39;build_ast&#39; automatically if the&#xA;-- AST is not built.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The code&lt;/h2&gt; &#xA;&lt;p&gt;The code for djot (excluding the test suite) is standard Lua, compatible with 5.1--5.4, including luajit. It has no external dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make install&lt;/code&gt; will build the rockspec and install the library and executable using luarocks. Once installed, the library can be used by Lua programs, and the executable can be run using &lt;code&gt;djot&lt;/code&gt;. &lt;code&gt;djot -h&lt;/code&gt; will give help output.&lt;/p&gt; &#xA;&lt;p&gt;If you can&#39;t assume that lua or luajit will be installed on the target machine, you can use &lt;code&gt;make djotbin&lt;/code&gt; to create a portable binary that includes luajit and the necessary scripts. (This assumes you have &lt;code&gt;luastatic&lt;/code&gt; installed, and &lt;code&gt;libluajit&lt;/code&gt; in the &lt;code&gt;/usr/local&lt;/code&gt; tree.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make test&lt;/code&gt; will run the tests, and &lt;code&gt;make testall&lt;/code&gt; will also run some tests of pathological cases.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The code and documentation are released under the MIT license.&lt;/p&gt;</summary>
  </entry>
</feed>