<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-09T01:31:59Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GustavEikaas/easy-dotnet.nvim</title>
    <updated>2025-03-09T01:31:59Z</updated>
    <id>tag:github.com,2025-03-09:/GustavEikaas/easy-dotnet.nvim</id>
    <link href="https://github.com/GustavEikaas/easy-dotnet.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin written in Lua for working with .Net projects in Neovim. Makes it easier to run/test/build/debug projects. Supports both F# and C#&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://git.io/typing-svg&#34;&gt;&lt;img src=&#34;https://readme-typing-svg.demolab.com?font=Fira+Code&amp;amp;size=32&amp;amp;pause=1000&amp;amp;width=435&amp;amp;lines=easy-dotnet.nvim&#34; alt=&#34;Typing SVG&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dotfyle.com/plugins/GustavEikaas/easy-dotnet.nvim&#34;&gt; &lt;img src=&#34;https://dotfyle.com/plugins/GustavEikaas/easy-dotnet.nvim/shield?style=flat&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Simplifying .NET development in Neovim&lt;/h2&gt; &#xA;&lt;p&gt;Are you a .NET developer looking to harness the power of Neovim for your daily coding tasks? Look no further! easy-dotnet.nvim is here to streamline your workflow and make .NET development in Neovim a breeze.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;💡 &lt;strong&gt;Tip:&lt;/strong&gt; This plugin and all its features should work for both &lt;strong&gt;C#&lt;/strong&gt; and &lt;strong&gt;F#&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] I need feedback! The last months I have had a blast developing this plugin, i have gotten a lot of feedback from you guys, and I want more! Please dont hesitate to file an issue with an improvement/bug/question etc.. And most importantly thank you guys for using my plugin :D&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;As a developer transitioning from Rider to Neovim, I found myself missing the simplicity of running projects with just a single button click. Tired of typing out lengthy terminal commands for common tasks like running, testing, and managing user secrets, I decided to create easy-dotnet.nvim. This plugin aims to bridge the gap between the convenience of IDEs like Rider and the flexibility of Neovim.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#easy-dotnet.nvim&#34;&gt;Easy-dotnet.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#simplifying-.net-development-in-neovim&#34;&gt;Simplifying .NET development in Neovim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#without-options&#34;&gt;Without options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#with-options&#34;&gt;With options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#lua-functions&#34;&gt;Lua functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#vim-commands&#34;&gt;Vim commands&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#testrunner&#34;&gt;Testrunner&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#keymaps&#34;&gt;Keymaps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#debugging-tests&#34;&gt;Debugging tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#running-tests-directly-from-buffer&#34;&gt;Running tests from buffer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#debugging-tests-directly-from-buffer&#34;&gt;Debugging tests from buffer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#project-view&#34;&gt;Project view&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#keymaps&#34;&gt;Keymaps&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#outdated&#34;&gt;Outdated&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#add&#34;&gt;Add&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#add-package&#34;&gt;Add package&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#project-mappings&#34;&gt;Project mappings&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#add-reference&#34;&gt;Add reference&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#package-autocomplete&#34;&gt;Package autocomplete&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#new&#34;&gt;New&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#project&#34;&gt;Project&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#configuration-file&#34;&gt;Configuration file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#integrating-with-nvim-tree&#34;&gt;Integrating with nvim-tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#integrating-with-neo-tree&#34;&gt;Integrating with neo-tree&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#entityframework&#34;&gt;EntityFramework&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#migrations&#34;&gt;Migrations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#language-injections&#34;&gt;Language injections&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#showcase&#34;&gt;Showcase&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#requirements-2&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#support-matrix&#34;&gt;Support matrix&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#nvim-dap-configuration&#34;&gt;Nvim-dap configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#basic-example&#34;&gt;Basic example&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#advanced-example&#34;&gt;Advanced example&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#advanced-configurations&#34;&gt;Advanced configurations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#overseer&#34;&gt;Overseer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solution, slnx, csproj and fsproj support: Whether its a single project or a solution containing multiple projects easy-dotnet has you covered.&lt;/li&gt; &#xA; &lt;li&gt;Action Commands: Execute common tasks like building, running, testing, cleaning and restoring with ease.&lt;/li&gt; &#xA; &lt;li&gt;User Secrets Management: Edit, create, and preview .NET user secrets directly within Neovim.&lt;/li&gt; &#xA; &lt;li&gt;Debugging Helpers: While easy-dotnet.nvim doesn&#39;t set up DAP (Debugger Adapter Protocol) for you, it provides useful helper functions for debugging. These include resolving the DLL you are debugging and rebuilding before launching DAP, ensuring a smooth debugging experience.&lt;/li&gt; &#xA; &lt;li&gt;Test runner: Test runner similiar to the one you find in Rider.&lt;/li&gt; &#xA; &lt;li&gt;Outdated command: Makes checking outdated packages a breeze using virtual text&lt;/li&gt; &#xA; &lt;li&gt;(csproj/fsproj) mappings: Keymappings for .csproj and .fsproj files are automatically available&lt;/li&gt; &#xA; &lt;li&gt;Auto bootstrap namespace: Automatically inserts namespace when opening a newly created &lt;code&gt;.cs&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;Create dotnet templates like with &lt;code&gt;dotnet new&lt;/code&gt;, automatically adding them to the current solution&lt;/li&gt; &#xA; &lt;li&gt;Package autocomplete inside .csproj and .fsproj files &lt;a href=&#34;https://raw.githubusercontent.com/GustavEikaas/easy-dotnet.nvim/main/#package-autocomplete&#34;&gt;Check it out&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/rider/Language_Injections.html#use-comments&#34;&gt;Rider-like&lt;/a&gt; syntax highlighting for injected languages (sql, json and xml) based on comments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim needs to be built with &lt;strong&gt;LuaJIT&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jq&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Although not &lt;em&gt;required&lt;/em&gt; by the plugin, it is highly recommended to install one of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;fzf-lua&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Remember to also setup the cmp source for autocomplete&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Without options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lazy.nvim&#xA;{&#xA;  &#34;GustavEikaas/easy-dotnet.nvim&#34;,&#xA;  dependencies = { &#34;nvim-lua/plenary.nvim&#34;, &#39;nvim-telescope/telescope.nvim&#39;, },&#xA;  config = function()&#xA;    require(&#34;easy-dotnet&#34;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;With options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lazy.nvim&#xA;{&#xA;  &#34;GustavEikaas/easy-dotnet.nvim&#34;,&#xA;  -- &#39;nvim-telescope/telescope.nvim&#39; or &#39;ibhagwan/fzf-lua&#39;&#xA;  -- are highly recommended for a better experience&#xA;  dependencies = { &#34;nvim-lua/plenary.nvim&#34;, &#39;nvim-telescope/telescope.nvim&#39;, },&#xA;  config = function()&#xA;    local function get_secret_path(secret_guid)&#xA;      local path = &#34;&#34;&#xA;      local home_dir = vim.fn.expand(&#39;~&#39;)&#xA;      if require(&#34;easy-dotnet.extensions&#34;).isWindows() then&#xA;        local secret_path = home_dir ..&#xA;            &#39;\\AppData\\Roaming\\Microsoft\\UserSecrets\\&#39; .. secret_guid .. &#34;\\secrets.json&#34;&#xA;        path = secret_path&#xA;      else&#xA;        local secret_path = home_dir .. &#34;/.microsoft/usersecrets/&#34; .. secret_guid .. &#34;/secrets.json&#34;&#xA;        path = secret_path&#xA;      end&#xA;      return path&#xA;    end&#xA;&#xA;    local dotnet = require(&#34;easy-dotnet&#34;)&#xA;    -- Options are not required&#xA;    dotnet.setup({&#xA;      --Optional function to return the path for the dotnet sdk (e.g C:/ProgramFiles/dotnet/sdk/8.0.0)&#xA;      -- easy-dotnet will resolve the path automatically if this argument is omitted, for a performance improvement you can add a function that returns a hardcoded string&#xA;      -- You should define this function to return a hardcoded path for a performance improvement 🚀&#xA;      get_sdk_path = get_sdk_path,&#xA;      ---@type TestRunnerOptions&#xA;      test_runner = {&#xA;        ---@type &#34;split&#34; | &#34;float&#34; | &#34;buf&#34;&#xA;        viewmode = &#34;float&#34;,&#xA;        enable_buffer_test_execution = true, --Experimental, run tests directly from buffer&#xA;        noBuild = true,&#xA;        noRestore = true,&#xA;          icons = {&#xA;            passed = &#34;&#34;,&#xA;            skipped = &#34;&#34;,&#xA;            failed = &#34;&#34;,&#xA;            success = &#34;&#34;,&#xA;            reload = &#34;&#34;,&#xA;            test = &#34;&#34;,&#xA;            sln = &#34;󰘐&#34;,&#xA;            project = &#34;󰘐&#34;,&#xA;            dir = &#34;&#34;,&#xA;            package = &#34;&#34;,&#xA;          },&#xA;        mappings = {&#xA;          run_test_from_buffer = { lhs = &#34;&amp;lt;leader&amp;gt;r&#34;, desc = &#34;run test from buffer&#34; },&#xA;          filter_failed_tests = { lhs = &#34;&amp;lt;leader&amp;gt;fe&#34;, desc = &#34;filter failed tests&#34; },&#xA;          debug_test = { lhs = &#34;&amp;lt;leader&amp;gt;d&#34;, desc = &#34;debug test&#34; },&#xA;          go_to_file = { lhs = &#34;g&#34;, desc = &#34;got to file&#34; },&#xA;          run_all = { lhs = &#34;&amp;lt;leader&amp;gt;R&#34;, desc = &#34;run all tests&#34; },&#xA;          run = { lhs = &#34;&amp;lt;leader&amp;gt;r&#34;, desc = &#34;run test&#34; },&#xA;          peek_stacktrace = { lhs = &#34;&amp;lt;leader&amp;gt;p&#34;, desc = &#34;peek stacktrace of failed test&#34; },&#xA;          expand = { lhs = &#34;o&#34;, desc = &#34;expand&#34; },&#xA;          expand_node = { lhs = &#34;E&#34;, desc = &#34;expand node&#34; },&#xA;          expand_all = { lhs = &#34;-&#34;, desc = &#34;expand all&#34; },&#xA;          collapse_all = { lhs = &#34;W&#34;, desc = &#34;collapse all&#34; },&#xA;          close = { lhs = &#34;q&#34;, desc = &#34;close testrunner&#34; },&#xA;          refresh_testrunner = { lhs = &#34;&amp;lt;C-r&amp;gt;&#34;, desc = &#34;refresh testrunner&#34; }&#xA;        },&#xA;        --- Optional table of extra args e.g &#34;--blame crash&#34;&#xA;        additional_args = {}&#xA;      },&#xA;      ---@param action &#34;test&#34; | &#34;restore&#34; | &#34;build&#34; | &#34;run&#34;&#xA;      terminal = function(path, action, args)&#xA;        local commands = {&#xA;          run = function()&#xA;            return string.format(&#34;dotnet run --project %s %s&#34;, path, args)&#xA;          end,&#xA;          test = function()&#xA;            return string.format(&#34;dotnet test %s %s&#34;, path, args)&#xA;          end,&#xA;          restore = function()&#xA;            return string.format(&#34;dotnet restore %s %s&#34;, path, args)&#xA;          end,&#xA;          build = function()&#xA;            return string.format(&#34;dotnet build %s %s&#34;, path, args)&#xA;          end&#xA;        }&#xA;&#xA;        local command = commands[action]() .. &#34;\r&#34;&#xA;        vim.cmd(&#34;vsplit&#34;)&#xA;        vim.cmd(&#34;term &#34; .. command)&#xA;      end,&#xA;      secrets = {&#xA;        path = get_secret_path&#xA;      },&#xA;      csproj_mappings = true,&#xA;      fsproj_mappings = true,&#xA;      auto_bootstrap_namespace = {&#xA;          --block_scoped, file_scoped&#xA;          type = &#34;block_scoped&#34;,&#xA;          enabled = true&#xA;      },&#xA;      -- choose which picker to use with the plugin&#xA;      -- possible values are &#34;telescope&#34; | &#34;fzf&#34; | &#34;basic&#34;&#xA;      picker = &#34;telescope&#34; &#xA;    })&#xA;&#xA;    -- Example command&#xA;    vim.api.nvim_create_user_command(&#39;Secrets&#39;, function()&#xA;      dotnet.secrets()&#xA;    end, {})&#xA;&#xA;    -- Example keybinding&#xA;    vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;C-p&amp;gt;&#34;, function()&#xA;      dotnet.run_project()&#xA;    end)&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;h3&gt;Lua functions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Legend&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;TS&amp;gt;&lt;/code&gt; -&amp;gt; Telescope selector&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;DArgs&amp;gt;&lt;/code&gt; -&amp;gt; Dotnet args (e.g &lt;code&gt;--no-build&lt;/code&gt;, &lt;code&gt;--configuration release&lt;/code&gt;). Always optional&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;TS Default&amp;gt;&lt;/code&gt; -&amp;gt; Telescope selector but persists the selection for all future use&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;sln&amp;gt;&lt;/code&gt; -&amp;gt; Solution file (in some cases .csproj or .fsproj is used as fallback if no .sln file exists)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Function&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.run_profile()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet run --project &amp;lt;TS&amp;gt; --launch-profile &amp;lt;TS&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.run()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet run --project &amp;lt;TS&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.run_default()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet run --project &amp;lt;TS Default&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.run_profile_default()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet run --project &amp;lt;TS Default&amp;gt; --launch-profile &amp;lt;TS&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.build()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet build &amp;lt;TS&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.build_solution()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet build &amp;lt;sln&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.build_quickfix()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet build &amp;lt;TS&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt; and opens build errors in the quickfix list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.build_default()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet build &amp;lt;TS Default&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.build_default_quickfix()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet build &amp;lt;TS Default&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt; and opens build errors in the quickfix list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.project_view()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens the project view&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.project_view_default()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens the project view for your default project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.test()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet test &amp;lt;TS&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.test_solution()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet test &amp;lt;TS&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.test_default()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet test &amp;lt;TS Default&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.restore()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet restore &amp;lt;sln&amp;gt; &amp;lt;Dargs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.clean()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet clean &amp;lt;sln&amp;gt; &amp;lt;DArgs&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.remove_package()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.add_package()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.testrunner()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows or hides the testrunner&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.testrunner_refresh()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Refreshes the testrunner&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.testrunner_refresh_build()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Builds the sln, then refreshes the testrunner&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.is_dotnet_project()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns &lt;code&gt;true&lt;/code&gt; if a &lt;code&gt;.csproj&lt;/code&gt; or &lt;code&gt;.sln&lt;/code&gt; file is present in the current working directory or subfolders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.try_get_selected_solution()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If a solution is selected, returns &lt;code&gt;{ basename: string, path: string }&lt;/code&gt;, otherwise &lt;code&gt;nil&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.new()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Telescope picker for creating a new template based on &lt;code&gt;Dotnet new&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.outdated()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Runs &lt;code&gt;Dotnet outdated&lt;/code&gt; in supported file types (&lt;code&gt;.csproj&lt;/code&gt;, &lt;code&gt;.fsproj&lt;/code&gt;, &lt;code&gt;Directory.Packages.props&lt;/code&gt;, &lt;code&gt;Packages.props&lt;/code&gt;) and displays virtual text with the latest package versions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.solution_select()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select the solution file for easy-dotnet.nvim to use, useful when multiple .sln files are present in the project.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.solution_add()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet sln &amp;lt;sln&amp;gt; add &amp;lt;TS&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.solution_remove()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet sln &amp;lt;sln&amp;gt; remove &amp;lt;TS&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.ef_migrations_remove()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Removes the last applied Entity Framework migration&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.ef_migrations_add(name: string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Adds a new Entity Framework migration with the specified name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.ef_migrations_list()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Lists all applied Entity Framework migrations.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.ef_database_drop()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Drops the database for the selected project.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.ef_database_update()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Updates the database to the latest migration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.ef_database_update_pick()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens a Telescope picker to update the database to a selected migration.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.createfile(path)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Spawns a Telescope picker for creating a new file based on a &lt;code&gt;.NET new&lt;/code&gt; template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.secrets()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Opens Telescope picker for &lt;code&gt;.NET user-secrets&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.get_debug_dll()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the DLL from the &lt;code&gt;bin/debug&lt;/code&gt; folder&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.get_environment_variables(project_name, project_path)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the environment variables from the &lt;code&gt;launchSetting.json&lt;/code&gt; file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dotnet.reset()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Deletes all files persisted by &lt;code&gt;easy-dotnet.nvim&lt;/code&gt;. Use this if unable to pick a different solution or project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local dotnet = require(&#34;easy-dotnet&#34;)&#xA;dotnet.get_environment_variables(project_name, project_path)&#xA;dotnet.is_dotnet_project()                                 &#xA;dotnet.try_get_selected_solution()                         &#xA;dotnet.get_debug_dll()                                     &#xA;dotnet.reset()                                             &#xA;dotnet.test()&#xA;dotnet.test_solution()&#xA;dotnet.test_default()&#xA;dotnet.testrunner()&#xA;dotnet.testrunner_refresh()&#xA;dotnet.testrunner_refresh_build()&#xA;dotnet.new()&#xA;dotnet.outdated()&#xA;dotnet.add_package()&#xA;dotnet.remove_package()&#xA;dotnet.solution_select()&#xA;dotnet.ef_migrations_remove()&#xA;dotnet.ef_migrations_add(name: string)&#xA;dotnet.ef_migrations_list()&#xA;dotnet.ef_database_drop()&#xA;dotnet.ef_database_update()&#xA;dotnet.ef_database_update_pick()&#xA;dotnet.createfile(path: string)                                    &#xA;dotnet.build()                           &#xA;dotnet.build_solution()&#xA;dotnet.build_quickfix()                 &#xA;dotnet.build_default()                 &#xA;dotnet.build_default_quickfix()       &#xA;dotnet.project_view()&#xA;dotnet.project_view_default()&#xA;dotnet.run()&#xA;dotnet.run_profile_default()&#xA;dotnet.run_default()&#xA;dotnet.secrets()                                                          &#xA;dotnet.clean()                                                           &#xA;dotnet.restore()                   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vim commands&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;Run :Dotnet in nvim to list all commands&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Dotnet testrunner&#xA;Dotnet testrunner refresh&#xA;Dotnet testrunner refresh build&#xA;Dotnet run&#xA;Dotnet run default&#xA;Dotnet run profile&#xA;Dotnet run profile default&#xA;Dotnet test&#xA;Dotnet test default&#xA;Dotnet test solution&#xA;Dotnet build&#xA;Dotnet build quickfix&#xA;Dotnet build solution&#xA;Dotnet build default&#xA;Dotnet build default quickfix&#xA;Dotnet add package&#xA;Dotnet remove package&#xA;Dotnet project view&#xA;Dotnet project view default&#xA;Dotnet ef database update&#xA;Dotnet ef database update pick&#xA;Dotnet ef database drop&#xA;Dotnet ef migrations add&#xA;Dotnet ef migrations remove&#xA;Dotnet ef migrations list&#xA;Dotnet secrets&#xA;Dotnet restore&#xA;Dotnet clean&#xA;Dotnet new&#xA;Dotnet createfile&#xA;Dotnet solution select&#xA;Dotnet solution add&#xA;Dotnet solution remove&#xA;Dotnet outdated&#xA;Dotnet reset&#xA;checkhealth easy-dotnet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testrunner&lt;/h2&gt; &#xA;&lt;p&gt;Integrated test runner inspired by Rider IDE &lt;img src=&#34;https://github.com/user-attachments/assets/874a1ef1-18cb-43f6-a477-834a783cf785&#34; alt=&#34;image&#34;&gt; &lt;img src=&#34;https://github.com/user-attachments/assets/2d0512f3-f807-4fbd-bf64-a57eb3c06b18&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Should support all test adapters like NUnit, XUnit, MSTest, Expecto etc.. If you are experiencing issues with any test adapter please let me know&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Test runner window &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Different viewmodes (float/buf/split)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Grouped by namespace&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Passed, skipped, failed&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Configurable highlights&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Filter failed tests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Test counting&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Unit test name&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Collapsable hieararchy&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Peek stack trace&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run sln,project,namespace,test&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Aggregate test results&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Go to file&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keymaps&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;W&lt;/code&gt; -&amp;gt; Collapse all&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;E&lt;/code&gt; -&amp;gt; Expand all&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;o&lt;/code&gt; -&amp;gt; Expand/collapse under cursor&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;r&lt;/code&gt; -&amp;gt; Run test under cursor&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;d&lt;/code&gt; -&amp;gt; &lt;code&gt;[Experimental]&lt;/code&gt; Debug test under cursor using nvim-dap&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;R&lt;/code&gt; -&amp;gt; Run all tests&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;p&lt;/code&gt; -&amp;gt; Peek stacktrace on failed test&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;fe&lt;/code&gt; -&amp;gt; Show only failed tests&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;g&lt;/code&gt; -&amp;gt; Go to file&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;q&lt;/code&gt; -&amp;gt; Close window&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;gf&lt;/code&gt; -&amp;gt; Go to file (inside stacktrace float)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Debugging tests&lt;/h3&gt; &#xA;&lt;p&gt;Using the keybinding &lt;code&gt;&amp;lt;leader&amp;gt;d&lt;/code&gt; will set a breakpoint in the test and launch nvim-dap&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/b56891c9-1b65-4522-8057-43eff3d1102d&#34;&gt;https://github.com/user-attachments/assets/b56891c9-1b65-4522-8057-43eff3d1102d&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running tests directly from buffer&lt;/h3&gt; &#xA;&lt;p&gt;Gutter signs will appear indicating runnable tests&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;r&lt;/code&gt; to run test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Testrunner discovery must have completed before entering the buffer for the signs to appear&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/1a22fe4d-81c2-4f5a-86b1-c87f7b6fb701&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Debugging tests directly from buffer&lt;/h3&gt; &#xA;&lt;p&gt;Gutter signs will appear indicating runnable tests&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;leader&amp;gt;d&lt;/code&gt; to debug test&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Nvim dap must be installed and coreclr adapter must be configured&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/209aca03-397a-424f-973c-c53bae260031&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project view&lt;/h2&gt; &#xA;&lt;p&gt;Get a comprehensive overview of a project&#39;s dependencies, and easily manage NuGet packages and project references.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/2e0e2e25-0a2b-4864-bc3b-64b4048967e5&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project Details&lt;/strong&gt;: View project name, solution, language, and target version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Project References&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;View project references.&lt;/li&gt; &#xA;   &lt;li&gt;Add or remove project references.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;NuGet Packages&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;View package references.&lt;/li&gt; &#xA;   &lt;li&gt;Add or remove NuGet package references.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Keymaps&lt;/h3&gt; &#xA;&lt;p&gt;Keymaps are region-specific and work based on context (e.g., when hovering over a project/package or its header):&lt;/p&gt; &#xA;&lt;h4&gt;Project References:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt;: Add project reference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r&lt;/code&gt;: Remove project reference.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Package References:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt;: Add package reference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;r&lt;/code&gt;: Remove package reference.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;C-b&amp;gt;&lt;/code&gt;: View package in browser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Outdated&lt;/h2&gt; &#xA;&lt;p&gt;Run the command &lt;code&gt;Dotnet outdated&lt;/code&gt; in one of the supported filetypes, virtual text with packages latest version will appear&lt;/p&gt; &#xA;&lt;p&gt;Supports the following filetypes&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;*.csproj&lt;/li&gt; &#xA; &lt;li&gt;*.fsproj&lt;/li&gt; &#xA; &lt;li&gt;Directory.Packages.props&lt;/li&gt; &#xA; &lt;li&gt;Packages.props&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/496caec1-a18b-487a-8a37-07c4bb9fa113&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;This functionality relies on dotnet-outdated-tool, install using &lt;code&gt;dotnet tool install -g dotnet-outdated-tool&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Add&lt;/h2&gt; &#xA;&lt;h3&gt;Add package&lt;/h3&gt; &#xA;&lt;p&gt;Adding nuget packages are available using the &lt;code&gt;:Dotnet add package&lt;/code&gt; command. This will allow you to browse for nuget packages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/00a9d38a-6afe-42ec-b971-04191fee1d59&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;This functionality relies on &lt;code&gt;jq&lt;/code&gt; so ensure that is installed on your system.&lt;/p&gt; &#xA;&lt;h2&gt;Project mappings&lt;/h2&gt; &#xA;&lt;p&gt;Key mappings are available automatically within &lt;code&gt;.csproj&lt;/code&gt; and &lt;code&gt;.fsproj&lt;/code&gt; files&lt;/p&gt; &#xA;&lt;h3&gt;Add reference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;leader&amp;gt;ar&lt;/code&gt; -&amp;gt; Opens a telescope picker for selecting which project reference to add&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/dec096be-8a87-4dd8-aaec-8c22849d1640&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Package autocomplete&lt;/h3&gt; &#xA;&lt;p&gt;When editing package references inside a .csproject file it is possible to enable autocomplete. This will trigger autocomplete for &lt;code&gt;&amp;lt;PackageReference Include=&#34;&amp;lt;cmp-trigger&amp;gt;&#34; Version=&#34;&amp;lt;cmp-trigger&amp;gt;&#34; /&amp;gt;&lt;/code&gt; This functionality relies on &lt;code&gt;jq&lt;/code&gt; so ensure that is installed on your system.&lt;/p&gt; &#xA;&lt;h4&gt;Using nvim-cmp&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    cmp.register_source(&#34;easy-dotnet&#34;, require(&#34;easy-dotnet&#34;).package_completion_source)&#xA;    ...&#xA;    sources = cmp.config.sources({&#xA;        { name = &#39;nvim_lsp&#39;    },&#xA;        { name = &#39;easy-dotnet&#39; },&#xA;        ...&#xA;    }),&#xA;    ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using Blink.cmp&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;saghen/blink.cmp&#34;,&#xA;  version = &#34;*&#34;,&#xA;  config = function()&#xA;    require(&#34;blink.cmp&#34;).setup {&#xA;      fuzzy = { implementation = &#34;prefer_rust_with_warning&#34; },&#xA;      sources = {&#xA;        default = { &#34;lsp&#34;, &#34;easy-dotnet&#34;, &#34;path&#34; },&#xA;        providers = {&#xA;          [&#34;easy-dotnet&#34;] = {&#xA;            name = &#34;easy-dotnet&#34;,&#xA;            enabled = true,&#xA;            module = &#34;easy-dotnet.completion.blink&#34;,&#xA;            score_offset = 10000,&#xA;            async = true,&#xA;          },&#xA;        },&#xA;      },&#xA;    }&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/81809aa8-704b-4481-9445-3985ddef6c98&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Latest is added as a snippet to make it easier to select the latest version&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/2b59735f-941e-44d2-93cf-76b13ac3e76f&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;New&lt;/h2&gt; &#xA;&lt;p&gt;Create dotnet templates as with &lt;code&gt;dotnet new &amp;lt;templatename&amp;gt;&lt;/code&gt; Try it out by running &lt;code&gt;Dotnet new&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Project&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/aa067c17-3611-4490-afc8-41d98a526729&#34;&gt;https://github.com/user-attachments/assets/aa067c17-3611-4490-afc8-41d98a526729&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configuration file&lt;/h3&gt; &#xA;&lt;p&gt;If a configuration file is selected it will&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create the configuration file and place it next to your solution file. (solution files and gitignore files are placed in cwd)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Integrating with nvim-tree&lt;/h3&gt; &#xA;&lt;p&gt;Adding the following configuration to your nvim-tree will allow for creating files using dotnet templates&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    require(&#34;nvim-tree&#34;).setup({&#xA;      on_attach = function(bufnr)&#xA;        local api = require(&#39;nvim-tree.api&#39;)&#xA;&#xA;        local function opts(desc)&#xA;          return { desc = &#39;nvim-tree: &#39; .. desc, buffer = bufnr, noremap = true, silent = true, nowait = true }&#xA;        end&#xA;&#xA;        vim.keymap.set(&#39;n&#39;, &#39;A&#39;, function()&#xA;          local node = api.tree.get_node_under_cursor()&#xA;          local path = node.type == &#34;directory&#34; and node.absolute_path or vim.fs.dirname(node.absolute_path)&#xA;          require(&#34;easy-dotnet&#34;).create_new_item(path)&#xA;        end, opts(&#39;Create file from dotnet template&#39;))&#xA;      end&#xA;    })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Integrating with neo-tree&lt;/h3&gt; &#xA;&lt;p&gt;Adding the following configuration to your neo-tree will allow for creating files using dotnet templates&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;      require(&#34;neo-tree&#34;).setup({&#xA;      ---...other options&#xA;        filesystem = {&#xA;          window = {&#xA;            mappings = {&#xA;              -- Make the mapping anything you want&#xA;              [&#34;R&#34;] = &#34;easy&#34;,&#xA;            },&#xA;          },&#xA;          commands = {&#xA;            [&#34;easy&#34;] = function(state)&#xA;              local node = state.tree:get_node()&#xA;              local path = node.type == &#34;directory&#34; and node.path or vim.fs.dirname(node.path)&#xA;              require(&#34;easy-dotnet&#34;).create_new_item(path, function()&#xA;                require(&#34;neo-tree.sources.manager&#34;).refresh(state.name)&#xA;              end)&#xA;            end&#xA;          }&#xA;        },&#xA;      })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;EntityFramework&lt;/h2&gt; &#xA;&lt;p&gt;Common EntityFramework commands have been added mainly to reduce the overhead of writing &lt;code&gt;--project .. --startup-project ..&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;This functionality relies on dotnet-ef tool, install using &lt;code&gt;dotnet tool install --global dotnet-ef&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Dotnet ef database update&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dotnet ef database update pick&lt;/code&gt; --allows to pick which migration to apply&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dotnet ef database drop&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Migrations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Dotnet ef migrations add &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dotnet ef migrations remove&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Dotnet ef migrations list&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Language injections&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/help/rider/Language_Injections.html#use-comments&#34;&gt;Rider-like&lt;/a&gt; syntax highlighting for injected languages (sql, json and xml) based on comments.&lt;/p&gt; &#xA;&lt;p&gt;Just add single-line comment like &lt;code&gt;//language=json&lt;/code&gt; before string to start using this.&lt;/p&gt; &#xA;&lt;h3&gt;Showcase&lt;/h3&gt; &#xA;&lt;p&gt;Language injection with raw json string as an example.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/2057bf66-e207-479c-8bd9-35714cdb7e24&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;This functionality is based on &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt; and parsers for &lt;code&gt;sql&lt;/code&gt;, &lt;code&gt;json&lt;/code&gt; and &lt;code&gt;xml&lt;/code&gt;, so make sure you have these parsers installed: &lt;code&gt;:TSInstall sql json xml&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Support matrix&lt;/h3&gt; &#xA;&lt;h4&gt;Strings&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;string&lt;/th&gt; &#xA;   &lt;th&gt;sql&lt;/th&gt; &#xA;   &lt;th&gt;json&lt;/th&gt; &#xA;   &lt;th&gt;xml&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;quoted&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;verbatim&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;raw&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;regexp quoted&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;regexp verbatim&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;regexp raw&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Interpolated strings&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;interpolated string&lt;/th&gt; &#xA;   &lt;th&gt;json&lt;/th&gt; &#xA;   &lt;th&gt;xml&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;quoted&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;verbatim&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;raw&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;regexp quoted&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;regexp verbatim&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;regexp raw&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Nvim-dap configuration&lt;/h2&gt; &#xA;&lt;p&gt;While its out of the scope of this plugin to setup dap, we do provide a few helpful functions to make it easier.&lt;/p&gt; &#xA;&lt;h3&gt;Basic example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local M = {}&#xA;&#xA;--- Rebuilds the project before starting the debug session&#xA;---@param co thread&#xA;local function rebuild_project(co, path)&#xA;  local spinner = require(&#34;easy-dotnet.ui-modules.spinner&#34;).new()&#xA;  spinner:start_spinner(&#34;Building&#34;)&#xA;  vim.fn.jobstart(string.format(&#34;dotnet build %s&#34;, path), {&#xA;    on_exit = function(_, return_code)&#xA;      if return_code == 0 then&#xA;        spinner:stop_spinner(&#34;Built successfully&#34;)&#xA;      else&#xA;        spinner:stop_spinner(&#34;Build failed with exit code &#34; .. return_code, vim.log.levels.ERROR)&#xA;        error(&#34;Build failed&#34;)&#xA;      end&#xA;      coroutine.resume(co)&#xA;    end,&#xA;  })&#xA;  coroutine.yield()&#xA;end&#xA;&#xA;M.register_net_dap = function()&#xA;  local dap = require(&#34;dap&#34;)&#xA;  local dotnet = require(&#34;easy-dotnet&#34;)&#xA;  local debug_dll = nil&#xA;&#xA;  local function ensure_dll()&#xA;    if debug_dll ~= nil then&#xA;      return debug_dll&#xA;    end&#xA;    local dll = dotnet.get_debug_dll()&#xA;    debug_dll = dll&#xA;    return dll&#xA;  end&#xA;&#xA;  for _, value in ipairs({ &#34;cs&#34;, &#34;fsharp&#34; }) do&#xA;    dap.configurations[value] = {&#xA;      {&#xA;        type = &#34;coreclr&#34;,&#xA;        name = &#34;launch - netcoredbg&#34;,&#xA;        request = &#34;launch&#34;,&#xA;        env = function()&#xA;          local dll = ensure_dll()&#xA;          local vars = dotnet.get_environment_variables(dll.project_name, dll.relative_project_path)&#xA;          return vars or nil&#xA;        end,&#xA;        program = function()&#xA;          local dll = ensure_dll()&#xA;          local co = coroutine.running()&#xA;          rebuild_project(co, dll.project_path)&#xA;          return dll.relative_dll_path&#xA;        end,&#xA;        cwd = function()&#xA;          local dll = ensure_dll()&#xA;          return dll.relative_project_path&#xA;        end,&#xA;&#xA;      }&#xA;    }&#xA;  end&#xA;&#xA;  dap.listeners.before[&#39;event_terminated&#39;][&#39;easy-dotnet&#39;] = function()&#xA;    debug_dll = nil&#xA;  end&#xA;&#xA;  dap.adapters.coreclr = {&#xA;    type = &#34;executable&#34;,&#xA;    command = &#34;netcoredbg&#34;,&#xA;    args = { &#34;--interpreter=vscode&#34; },&#xA;  }&#xA;end&#xA;&#xA;return M&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For profiles to be read it must contain a profile with the name of your csproject The file is expected to be in the Properties/launchsettings.json relative to your .csproject file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;profiles&#34;: {&#xA;    &#34;NeovimDebugProject.Api&#34;: {&#xA;      &#34;commandName&#34;: &#34;Project&#34;,&#xA;      &#34;dotnetRunMessages&#34;: true,&#xA;      &#34;launchBrowser&#34;: true,&#xA;      &#34;launchUrl&#34;: &#34;swagger&#34;,&#xA;      &#34;environmentVariables&#34;: {&#xA;        &#34;ASPNETCORE_ENVIRONMENT&#34;: &#34;Development&#34;&#xA;      },&#xA;      &#34;applicationUrl&#34;: &#34;https://localhost:7073;http://localhost:7071&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced example&lt;/h3&gt; &#xA;&lt;p&gt;Dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;which-key&lt;/li&gt; &#xA; &lt;li&gt;overseer&lt;/li&gt; &#xA; &lt;li&gt;netcoredbg&lt;/li&gt; &#xA; &lt;li&gt;dap&lt;/li&gt; &#xA; &lt;li&gt;easy-dotnet&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overseer template:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local tmpl = {&#xA;  name = &#34;Build .NET App With Spinner&#34;,&#xA;  builder = function(params)&#xA;    local logPath = vim.fn.stdpath(&#34;data&#34;) .. &#34;/easy-dotnet/build.log&#34;&#xA;    function filter_warnings(line)&#xA;      if not line:find(&#34;warning&#34;) then&#xA;        return line:match(&#34;^(.+)%((%d+),(%d+)%)%: (.+)$&#34;)&#xA;      end&#xA;    end&#xA;    return {&#xA;      name = &#34;build&#34;,&#xA;      cmd = &#34;dotnet build /flp:v=q /flp:logfile=&#34; .. logPath,&#xA;      components = {&#xA;        { &#34;on_complete_dispose&#34;, timeout = 30 },&#xA;        &#34;default&#34;,&#xA;        &#34;show_spinner&#34;,&#xA;        { &#34;unique&#34;, replace = true },&#xA;        {&#xA;          &#34;on_output_parse&#34;,&#xA;          parser = {&#xA;            diagnostics = {&#xA;              { &#34;extract&#34;, filter_warnings, &#34;filename&#34;, &#34;lnum&#34;, &#34;col&#34;, &#34;text&#34; },&#xA;            },&#xA;          },&#xA;        },&#xA;        {&#xA;          &#34;on_result_diagnostics_quickfix&#34;,&#xA;          open = true,&#xA;          close = true,&#xA;        },&#xA;      },&#xA;      cwd = require(&#34;easy-dotnet&#34;).get_debug_dll().relative_project_path,&#xA;    }&#xA;  end,&#xA;}&#xA;return tmpl&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Overseer component&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  desc = &#34;Show Spinner&#34;,&#xA;  -- Define parameters that can be passed in to the component&#xA;  -- The params passed in will match the params defined above&#xA;  constructor = function(params)&#xA;    local num = 0&#xA;    local spinner_frames = { &#34;⣾&#34;, &#34;⣽&#34;, &#34;⣻&#34;, &#34;⢿&#34;, &#34;⡿&#34;, &#34;⣟&#34;, &#34;⣯&#34;, &#34;⣷&#34; }&#xA;&#xA;    local notification = vim.notify(spinner_frames[1] .. &#34; Building&#34;, &#34;info&#34;, {&#xA;      timeout = false,&#xA;    })&#xA;&#xA;    local timer = vim.loop.new_timer()&#xA;&#xA;    return {&#xA;      on_init = function(self, task)&#xA;        timer:start(&#xA;          100,&#xA;          100,&#xA;          vim.schedule_wrap(function()&#xA;            num = num + 1&#xA;            local new_spinner = num % #spinner_frames&#xA;            notification =&#xA;              vim.notify(spinner_frames[new_spinner + 1] .. &#34; Building&#34;, &#34;info&#34;, { replace = notification })&#xA;          end)&#xA;        )&#xA;      end,&#xA;      on_complete = function(self, task, code)&#xA;        vim.notify(&#34;&#34;, &#34;info&#34;, { replace = notification, timeout = 1 })&#xA;        timer:stop()&#xA;        return code&#xA;      end,&#xA;    }&#xA;  end,&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dap Config&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  {&#xA;    &#34;mfussenegger/nvim-dap&#34;,&#xA;    opts = function(_, opts)&#xA;      local dap = require(&#34;dap&#34;)&#xA;      if not dap.adapters[&#34;netcoredbg&#34;] then&#xA;        require(&#34;dap&#34;).adapters[&#34;netcoredbg&#34;] = {&#xA;          type = &#34;executable&#34;,&#xA;          command = vim.fn.exepath(&#34;netcoredbg&#34;),&#xA;          args = { &#34;--interpreter=vscode&#34; },&#xA;          -- console = &#34;internalConsole&#34;,&#xA;        }&#xA;      end&#xA;&#xA;      local dotnet = require(&#34;easy-dotnet&#34;)&#xA;      local debug_dll = nil&#xA;      local function ensure_dll()&#xA;        if debug_dll ~= nil then&#xA;          return debug_dll&#xA;        end&#xA;        local dll = dotnet.get_debug_dll()&#xA;        debug_dll = dll&#xA;        return dll&#xA;      end&#xA;&#xA;      for _, lang in ipairs({ &#34;cs&#34;, &#34;fsharp&#34;, &#34;vb&#34; }) do&#xA;        dap.configurations[lang] = {&#xA;          {&#xA;            log_level = &#34;DEBUG&#34;,&#xA;            type = &#34;netcoredbg&#34;,&#xA;            justMyCode = false,&#xA;            stopAtEntry = false,&#xA;            name = &#34;Default&#34;,&#xA;            request = &#34;launch&#34;,&#xA;            env = function()&#xA;              local dll = ensure_dll()&#xA;              local vars = dotnet.get_environment_variables(dll.project_name, dll.relative_project_path)&#xA;              return vars or nil&#xA;            end,&#xA;            program = function()&#xA;              require(&#34;overseer&#34;).enable_dap()&#xA;              local dll = ensure_dll()&#xA;              return dll.relative_dll_path&#xA;            end,&#xA;            cwd = function()&#xA;              local dll = ensure_dll()&#xA;              return dll.relative_project_path&#xA;            end,&#xA;            preLaunchTask = &#34;Build .NET App With Spinner&#34;,&#xA;          },&#xA;        }&#xA;&#xA;        dap.listeners.before[&#34;event_terminated&#34;][&#34;easy-dotnet&#34;] = function()&#xA;          debug_dll = nil&#xA;        end&#xA;      end&#xA;    end,&#xA;    keys = {&#xA;      { &#34;&amp;lt;leader&amp;gt;d&#34;, &#34;&#34;, desc = &#34;+debug&#34;, mode = { &#34;n&#34;, &#34;v&#34; } },&#xA;      -- HYDRA MODE&#xA;      -- NOTE: the delay is set to prevent the which-key hints to appear&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;d&amp;lt;space&amp;gt;&#34;,&#xA;        function()&#xA;          require(&#34;which-key&#34;).show({ delay = 1000000000, keys = &#34;&amp;lt;leader&amp;gt;d&#34;, loop = true })&#xA;        end,&#xA;        desc = &#34;DAP Hydra Mode (which-key)&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dR&#34;,&#xA;        function()&#xA;          local dap = require(&#34;dap&#34;)&#xA;          local extension = vim.fn.expand(&#34;%:e&#34;)&#xA;          dap.run(dap.configurations[extension][1])&#xA;        end,&#xA;        desc = &#34;Run default configuration&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dB&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).set_breakpoint(vim.fn.input(&#34;Breakpoint condition: &#34;))&#xA;        end,&#xA;        desc = &#34;Breakpoint Condition&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;db&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).toggle_breakpoint()&#xA;        end,&#xA;        desc = &#34;Toggle Breakpoint&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dc&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).continue()&#xA;        end,&#xA;        desc = &#34;Continue&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;da&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).continue({ before = get_args })&#xA;        end,&#xA;        desc = &#34;Run with Args&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dC&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).run_to_cursor()&#xA;        end,&#xA;        desc = &#34;Run to Cursor&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dg&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).goto_()&#xA;        end,&#xA;        desc = &#34;Go to Line (No Execute)&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;di&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).step_into()&#xA;        end,&#xA;        desc = &#34;Step Into&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dj&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).down()&#xA;        end,&#xA;        desc = &#34;Down&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dk&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).up()&#xA;        end,&#xA;        desc = &#34;Up&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dl&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).run_last()&#xA;        end,&#xA;        desc = &#34;Run Last&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;do&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).step_out()&#xA;        end,&#xA;        desc = &#34;Step Out&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dO&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).step_over()&#xA;        end,&#xA;        desc = &#34;Step Over&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dp&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).pause()&#xA;        end,&#xA;        desc = &#34;Pause&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dr&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).repl.toggle()&#xA;        end,&#xA;        desc = &#34;Toggle REPL&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;ds&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).session()&#xA;        end,&#xA;        desc = &#34;Session&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dt&#34;,&#xA;        function()&#xA;          require(&#34;dap&#34;).terminate()&#xA;        end,&#xA;        desc = &#34;Terminate&#34;,&#xA;      },&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;dw&#34;,&#xA;        function()&#xA;          require(&#34;dap.ui.widgets&#34;).hover()&#xA;        end,&#xA;        desc = &#34;Widgets&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced configurations&lt;/h2&gt; &#xA;&lt;h3&gt;Overseer&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/franroa&#34;&gt;franroa&lt;/a&gt; for sharing his configuration with the community&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It watches the run and test commands&lt;/li&gt; &#xA; &lt;li&gt;It creates a list of tasks to have a history&lt;/li&gt; &#xA; &lt;li&gt;other things that can be configured with overseer, like running those tasks in the order you want&lt;/li&gt; &#xA; &lt;li&gt;If used with resession, the tasks are run automatically on opening the project (this is specially interesting if you have errors in your build and have to leave the coding session. It will pop up the quickfix list in the next day)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  {&#xA;    &#34;GustavEikaas/easy-dotnet.nvim&#34;,&#xA;    dependencies = { &#34;nvim-lua/plenary.nvim&#34;, &#34;nvim-telescope/telescope.nvim&#34; },&#xA;    config = function()&#xA;      local logPath = vim.fn.stdpath(&#34;data&#34;) .. &#34;/easy-dotnet/build.log&#34;&#xA;      local dotnet = require(&#34;easy-dotnet&#34;)&#xA;&#xA;      dotnet.setup({&#xA;        terminal = function(path, action)&#xA;          local commands = {&#xA;            run = function()&#xA;              return &#34;dotnet run --project &#34; .. path&#xA;            end,&#xA;            test = function()&#xA;              return &#34;dotnet test &#34; .. path&#xA;            end,&#xA;            restore = function()&#xA;              return &#34;dotnet restore --configfile &#34; .. os.getenv(&#34;NUGET_CONFIG&#34;) .. &#34; &#34; .. path&#xA;            end,&#xA;            build = function()&#xA;              return &#34;dotnet build  &#34; .. path .. &#34; /flp:v=q /flp:logfile=&#34; .. logPath&#xA;            end,&#xA;          }&#xA;&#xA;          local function filter_warnings(line)&#xA;            if not line:find(&#34;warning&#34;) then&#xA;              return line:match(&#34;^(.+)%((%d+),(%d+)%)%: (.+)$&#34;)&#xA;            end&#xA;          end&#xA;&#xA;          local overseer_components = {&#xA;            { &#34;on_complete_dispose&#34;, timeout = 30 },&#xA;            &#34;default&#34;,&#xA;            { &#34;unique&#34;, replace = true },&#xA;            {&#xA;              &#34;on_output_parse&#34;,&#xA;              parser = {&#xA;                diagnostics = {&#xA;                  { &#34;extract&#34;, filter_warnings, &#34;filename&#34;, &#34;lnum&#34;, &#34;col&#34;, &#34;text&#34; },&#xA;                },&#xA;              },&#xA;            },&#xA;            {&#xA;              &#34;on_result_diagnostics_quickfix&#34;,&#xA;              open = true,&#xA;              close = true,&#xA;            },&#xA;          }&#xA;&#xA;          if action == &#34;run&#34; or action == &#34;test&#34; then&#xA;            table.insert(overseer_components, { &#34;restart_on_save&#34;, paths = { LazyVim.root.git() } })&#xA;          end&#xA;&#xA;          local command = commands[action]()&#xA;          local task = require(&#34;overseer&#34;).new_task({&#xA;            strategy = {&#xA;              &#34;toggleterm&#34;,&#xA;              use_shell = false,&#xA;              direction = &#34;horizontal&#34;,&#xA;              open_on_start = false,&#xA;            },&#xA;            name = action,&#xA;            cmd = command,&#xA;            cwd = LazyVim.root.git(),&#xA;            components = overseer_components,&#xA;          })&#xA;          task:start()&#xA;        end&#xA;      })&#xA;    end,&#xA;  },&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Update the plugin to latest version&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;:checkhealth easy-dotnet&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Highlight groups&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see all highlight groups&lt;/summary&gt; &#xA; &lt;!--hl start--&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Highlight group&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerSolution&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Question&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerProject&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Character&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerTest&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Normal&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerSubcase&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Conceal&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerDir&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Directory&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerPackage&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;Include&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerPassed&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticOk&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerFailed&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticError&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestRunnerRunning&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;em&gt;DiagnosticWarn&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;!-- hl-end --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Signs&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to see all signs&lt;/summary&gt; &#xA; &lt;!--sign start--&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;--override example&#xA;vim.fn.sign_define(&#34;EasyDotnetTestSign&#34;, { text = &#34;&#34;, texthl = &#34;Character&#34; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Sign&lt;/th&gt; &#xA;    &lt;th&gt;Highlight&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestSign&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Character&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestPassed&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;EasyDotnetTestRunnerPassed&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestFailed&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;EasyDotnetTestRunnerFailed&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestSkipped&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;(none)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;strong&gt;EasyDotnetTestError&lt;/strong&gt;&lt;/td&gt; &#xA;    &lt;td&gt;EasyDotnetTestRunnerFailed&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;!-- sign-end --&gt; &#xA;&lt;/details&gt;</summary>
  </entry>
  <entry>
    <title>sphamba/smear-cursor.nvim</title>
    <updated>2025-03-09T01:31:59Z</updated>
    <id>tag:github.com,2025-03-09:/sphamba/smear-cursor.nvim</id>
    <link href="https://github.com/sphamba/smear-cursor.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌠 Neovim plugin to animate the cursor with a smear effect in all terminals&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Smear cursor for Neovim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Neovim plugin to animate the cursor with a smear effect in all terminals. Inspired by &lt;a href=&#34;https://neovide.dev/features.html#animated-cursor&#34;&gt;Neovide&#39;s animated cursor&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin is intended for terminals/GUIs that can only display text and do not have graphical capabilities (unlike &lt;a href=&#34;https://neovide.dev/&#34;&gt;Neovide&lt;/a&gt;, or the &lt;a href=&#34;https://sw.kovidgoyal.net/kitty/&#34;&gt;Kitty&lt;/a&gt; terminal). Also, check out the &lt;a href=&#34;https://github.com/karb94/neoscroll.nvim&#34;&gt;karb94/neoscroll.nvim&lt;/a&gt; plugin for smooth scrolling!&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://private-user-images.githubusercontent.com/17217484/389300116-fc95b4df-d791-4c53-9141-4f870eb03ab2.mp4?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MzI0NzY0NDAsIm5iZiI6MTczMjQ3NjE0MCwicGF0aCI6Ii8xNzIxNzQ4NC8zODkzMDAxMTYtZmM5NWI0ZGYtZDc5MS00YzUzLTkxNDEtNGY4NzBlYjAzYWIyLm1wND9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDExMjQlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQxMTI0VDE5MjIyMFomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg1NjFhZjJlODQ4YmU2NjAzY2EzY2I3NWMzMzI5MWQ1Njk2MTExYmEwYmExNTMwMThmYTJjYjE2ZjIyOThjNjMmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0In0.Skw2VVyVWVkMe4ht6mvl_AZ_6QasJm8O6qsIZmcQ2XE&#34;&gt;Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] After enabling the plugin in your configuration, you can toggle the smear cursor on and off with the &lt;code&gt;:SmearCursorToggle&lt;/code&gt; command or with &lt;code&gt;:lua require(&#34;smear_cursor&#34;).toggle()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Minimum requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.10.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://lazy.folke.io/&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;~/.config/nvim/lua/plugins/smear_cursor.lua&lt;/code&gt;, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;sphamba/smear-cursor.nvim&#34;,&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In your &lt;code&gt;init.vim&lt;/code&gt;, add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call plug#begin()&#xA;Plug &#39;sphamba/smear-cursor.nvim&#39;&#xA;call plug#end()&#xA;&#xA;lua require(&#39;smear_cursor&#39;).enabled = true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙ Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;https://lazy.folke.io/&#34;&gt;lazy.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Here are the default configuration options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  &#34;sphamba/smear-cursor.nvim&#34;,&#xA;&#xA;  opts = {&#xA;    -- Smear cursor when switching buffers or windows.&#xA;    smear_between_buffers = true,&#xA;&#xA;    -- Smear cursor when moving within line or to neighbor lines.&#xA;    -- Use `min_horizontal_distance_smear` and `min_vertical_distance_smear` for finer control&#xA;    smear_between_neighbor_lines = true,&#xA;&#xA;    -- Draw the smear in buffer space instead of screen space when scrolling&#xA;    scroll_buffer_space = true,&#xA;&#xA;    -- Set to `true` if your font supports legacy computing symbols (block unicode symbols).&#xA;    -- Smears will blend better on all backgrounds.&#xA;    legacy_computing_symbols_support = false,&#xA;&#xA;    -- Smear cursor in insert mode.&#xA;    -- See also `vertical_bar_cursor_insert_mode` and `distance_stop_animating_vertical_bar`.&#xA;    smear_insert_mode = true,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Refer to &lt;a href=&#34;https://github.com/sphamba/smear-cursor.nvim/raw/main/lua/smear_cursor/config.lua&#34;&gt;&lt;code&gt;lua/smear_cursor/config.lua&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/sphamba/smear-cursor.nvim/raw/main/lua/smear_cursor/color.lua&#34;&gt;&lt;code&gt;lua/smear_cursor/color.lua&lt;/code&gt;&lt;/a&gt; for the full list of configuration options that can be set with &lt;code&gt;opts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] Some terminals override the cursor color set by Neovim. If that is the case, manually put the actual cursor color in your config to get a matching smear color:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  opts = {&#xA;    -- Smear cursor color. Defaults to Cursor GUI color if not set.&#xA;    -- Set to &#34;none&#34; to match the text color at the target cursor position.&#xA;    cursor_color = &#34;#d3cdc3&#34;,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🔥 Faster smear&lt;/summary&gt; &#xA; &lt;p&gt;As an example of further configuration, you can tune the smear dynamics to be snappier:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  opts = {                         -- Default  Range&#xA;    stiffness = 0.8,               -- 0.6      [0, 1]&#xA;    trailing_stiffness = 0.5,      -- 0.3      [0, 1]&#xA;    distance_stop_animating = 0.5, -- 0.1      &amp;gt; 0&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;🔥 FIRE HAZARD 🔥&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;p&gt;Feel free to experiment with all the configuration options, but be aware that some combinations may cause your cursor to flicker or even &lt;strong&gt;catch fire&lt;/strong&gt;. That can happen with the following settings:&lt;/p&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  opts = {&#xA;    cursor_color = &#34;#ff8800&#34;,&#xA;    stiffness = 0.3,&#xA;    trailing_stiffness = 0.1,&#xA;    trailing_exponent = 5,&#xA;    hide_target_hack = true,&#xA;    gamma = 1,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🌌 Transparent background&lt;/summary&gt; &#xA; &lt;p&gt;Drawing the smear over a transparent background works better when using a font that supports legacy computing symbols, therefore setting the following option:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  opts = {&#xA;    legacy_computing_symbols_support = true,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If your font does not support legacy computing symbols, there will be a shadow under the smear. You may set a color for this shadow to be less noticeable:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  opts = {&#xA;    transparent_bg_fallback_color = &#34;#303030&#34;,&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;🔲 No GUI colors&lt;/summary&gt; &#xA; &lt;p&gt;If you are not using &lt;code&gt;termguicolors&lt;/code&gt;, you need to manually set a color gradient for the smear (it can be a single color):&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  opts = {&#xA;    cterm_cursor_colors = { 240, 245, 250, 255 },&#xA;    cterm_bg = 235,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you are not using &lt;code&gt;guicursor&lt;/code&gt;, and you notice the cursor getting duplicated (smear visible at the same time as the &lt;em&gt;real&lt;/em&gt; cursor), try setting&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  opts = {&#xA;    hide_target_hack = true,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;init.vim&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can set the configuration variables in your &lt;code&gt;init.vim&lt;/code&gt; file like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;lua require(&#39;smear_cursor&#39;).setup({&#xA;    \cursor_color = &#39;#d3cdc3&#39;,&#xA;\})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🤕 Known issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is a shadow around the smear (text become invisible). This is inherent to the way the smear is rendered, as Neovim is not able to render superimposed characters. The shadow is less noticeable when the smear is moving faster (see configuration options).&lt;/li&gt; &#xA; &lt;li&gt;Likely not compatible with other plugins that modify the cursor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;h2&gt;👨‍💻 Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please feel free to open an issue or a pull request if you have any suggestions or improvements! This project uses &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt; hooks to ensure code quality (with &lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua&#34;&gt;StyLua&lt;/a&gt;) and meaningful commit messages (following &lt;a href=&#34;https://www.conventionalcommits.org/&#34;&gt;Conventional Commits&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.10.2&lt;/li&gt; &#xA; &lt;li&gt;Make&lt;/li&gt; &#xA; &lt;li&gt;pre-commit (&lt;code&gt;pip install pre-commit&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make install&lt;/code&gt; to install the pre-commit hooks&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt;</summary>
  </entry>
</feed>