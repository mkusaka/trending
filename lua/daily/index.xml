<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-29T01:30:30Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chrisgrieser/nvim-rulebook</title>
    <updated>2023-09-29T01:30:30Z</updated>
    <id>tag:github.com,2023-09-29:/chrisgrieser/nvim-rulebook</id>
    <link href="https://github.com/chrisgrieser/nvim-rulebook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Add inline-comments to ignore rules, or lookup rule documentation online.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-rulebook 📖&lt;/h1&gt; &#xA;&lt;!-- LTeX: enabled=true --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dotfyle.com/plugins/chrisgrieser/nvim-rulebook&#34;&gt;&lt;img src=&#34;https://dotfyle.com/plugins/chrisgrieser/nvim-rulebook/shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add inline-comments to ignore rules, or lookup rule documentation online.&lt;/p&gt; &#xA;&lt;p&gt;Some LSPs provide code actions for that – this plugin adds commands for linters and LSPs that don&#39;t.&lt;/p&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#supported-sources&#34;&gt;Supported Sources&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#rule-lookup&#34;&gt;Rule Lookup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#add-ignore-comment&#34;&gt;Add Ignore Comment&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#customize-built-in-sources&#34;&gt;Customize Built-in Sources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up official rule documentation, falling back to a web search if the source does not have rule documentation.&lt;/li&gt; &#xA; &lt;li&gt;Add inline-comments to ignore rules like &lt;code&gt;// eslint disable-next-line some-rule&lt;/code&gt;. Supports previous line, same line, and enclosing lines.&lt;/li&gt; &#xA; &lt;li&gt;QoL: auto-select a rule if it is the only one in the current line; if the line has no diagnostic, search forward up to the next line that does.&lt;/li&gt; &#xA; &lt;li&gt;Includes built-in support for various linters. Zero plugin configuration required if you only need to use built-in sources.&lt;/li&gt; &#xA; &lt;li&gt;Customizing built-in sources or adding your own sources is easy. PRs to add more built-ins are welcome.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Sources&lt;/h2&gt; &#xA;&lt;p&gt;You easily add a custom source via the &lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/#configuration&#34;&gt;plugin configuration&lt;/a&gt;. Though, please consider making a PR to add support for a source if it is missing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-rulebook/main/lua/rulebook/data&#34;&gt;Rule Data for the supported linters&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- INFO use `make update_readme` to automatically update this section --&gt; &#xA;&lt;!-- auto-generated: start --&gt; &#xA;&lt;h3&gt;Rule Lookup&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;LTeX&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Lua Diagnostics.&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;biome&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eslint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;markdownlint&lt;/code&gt; *&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pylint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ruff&lt;/code&gt; *&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selene&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;shellcheck&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stylelint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yamllint&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;* These sources do not support opening the exact rule site and therefore fall back to an index page which contains the rule. The code is copied to the clipboard for easier selection of the rule at the site.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Add Ignore Comment&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://valentjn.github.io/ltex/advanced-usage.html&#34;&gt;LTeX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/pyright/#/comments&#34;&gt;Pyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://biomejs.dev/linter/#ignoring-code&#34;&gt;biome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1&#34;&gt;eslint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pylint.readthedocs.io/en/latest/user_guide/messages/message_control.html&#34;&gt;pylint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kampfkarren.github.io/selene/usage/filtering.html#allowingdenying-lints-for-an-entire-file&#34;&gt;selene&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.shellcheck.net/wiki/Ignore&#34;&gt;shellcheck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stylelint.io/user-guide/ignore-code/&#34;&gt;stylelint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vale.sh/docs/topics/config/#markup-based-configuration&#34;&gt;vale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://yamllint.readthedocs.io/en/stable/disable_with_comments.html&#34;&gt;yamllint&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- auto-generated: end --&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin requires diagnostics provided by a source that supports neovim&#39;s built-in diagnostics system. (nvim&#39;s built-in LSP client or &lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt; are such sources.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lazy.nvim&#xA;{&#xA;&#x9;&#34;chrisgrieser/nvim-rulebook&#34;,&#xA;&#x9;keys = {&#xA;&#x9;&#x9;{ &#34;&amp;lt;leader&amp;gt;i&#34;, function() require(&#34;rulebook&#34;).ignoreRule() end },&#xA;&#x9;&#x9;{ &#34;&amp;lt;leader&amp;gt;l&#34;, function() require(&#34;rulebook&#34;).lookupRule() end },&#xA;&#x9;}&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- packer&#xA;use { &#34;chrisgrieser/nvim-rulebook&#34; }&#xA;&#xA;-- in your config&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;i&#34;, function() require(&#34;rulebook&#34;).ignoreRule() end)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;l&#34;, function() require(&#34;rulebook&#34;).lookupRule() end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration is completely optional, the plugin works fine out of the box. The Configuration is only needed when you want to customize a source or add custom sources.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;defaultConfig = {&#xA;&#x9;ignoreRuleComments = {&#xA;&#x9;&#x9;selene = {&#xA;&#x9;&#x9;&#x9;comment = &#34;-- selene: allow(%s)&#34;,&#xA;&#x9;&#x9;&#x9;location = &#34;prevLine&#34;,&#xA;&#x9;&#x9;},&#xA;&#x9;&#x9;-- ... (full list of supported sources can be found in the README)&#xA;&#xA;&#x9;&#x9;yourCustomSource = {&#xA;&#x9;&#x9;&#x9;-- %s will be replaced with rule-id&#xA;&#x9;&#x9;&#x9;comment = &#34;// disabling-comment %s&#34;,&#xA;&#xA;&#x9;&#x9;&#x9;-- &#34;prevLine&#34;|&#34;sameLine&#34;|&#34;encloseLine&#34;&#xA;&#x9;&#x9;&#x9;location = &#34;prevLine&#34;,&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;-- if location is &#34;encloseLine&#34;, needs to be a list of two strings&#xA;&#x9;&#x9;anotherCustomSource = {&#xA;&#x9;&#x9;&#x9;comment = { &#34;// disable-rule %s&#34;, &#34;// enable-rule %s&#34; },&#xA;&#x9;&#x9;&#x9;location = &#34;encloseLine&#34;,&#xA;&#x9;&#x9;}&#xA;&#x9;},&#xA;&#xA;&#x9;ruleDocumentations = {&#xA;&#x9;&#x9;selene = &#34;https://kampfkarren.github.io/selene/lints/%s.html&#34;&#xA;&#x9;&#x9;-- ... (full list of supported sources can be found in the README)&#xA;&#xA;&#x9;&#x9;-- Search URL when no documentation definition is available for a&#xA;&#x9;&#x9;-- diagnostic source. &#34;%s&#34; will be replaced with the diagnostic source &amp;amp; code.&#xA;&#x9;&#x9;-- Default is the DDG &#34;Ducky Search&#34; (automatically opening first result).&#xA;&#x9;&#x9;fallback = &#34;https://duckduckgo.com/?q=%s+%%21ducky&amp;amp;kl=en-us&#34;,&#xA;&#xA;&#x9;&#x9;-- the value of the rule documentions accept either a string or a function&#xA;&#x9;&#x9;-- if a string, %s will be replaced with rule-id&#xA;&#x9;&#x9;-- if a function, takes a diagnostic object as argument must return a url&#xA;&#x9;&#x9;yourCustomSource = &#34;https://my-docs/%s.hthml&#34;,&#xA;&#x9;&#x9;anotherCustomSource = function(diag)&#xA;&#x9;&#x9;&#x9;-- ...&#xA;&#x9;&#x9;&#x9;return url&#xA;&#x9;&#x9;end,&#xA;&#x9;}&#xA;&#xA;&#x9;-- If no diagnostic is found, in current line, search this meany lines &#xA;&#x9;-- forward for diagnostics before aborting.&#xA;&#x9;forwSearchLines = 10,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The plugin uses &lt;a href=&#34;https://neovim.io/doc/user/lua.html#vim.ui.select()&#34;&gt;vim.ui.select&lt;/a&gt;, so the appearance of the rule selection can be customized by using a UI-plugin like &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Customize Built-in Sources&lt;/h2&gt; &#xA;&lt;p&gt;Built-in sources be customized by overwriting them in the configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- use `disable-line` instead of the default `disable-next-line` for eslint&#xA;defaultConfig = {&#xA;&#x9;ignoreRuleComments = {&#xA;&#x9;&#x9;eslint = {&#xA;&#x9;&#x9;&#x9;comment = &#34;// eslint-disable-line %s&#34;,&#xA;&#x9;&#x9;&#x9;location = &#34;sameLine&#34;,&#xA;&#x9;&#x9;} &#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The diagnostics have to contain the necessary data, &lt;a href=&#34;https://neovim.io/doc/user/diagnostic.html#diagnostic-structure&#34;&gt;that is a diagnostic code and diagnostic source&lt;/a&gt;. Most LSPs and most linters configured for &lt;code&gt;nvim-lint&lt;/code&gt; do that, but some diagnostic sources do not (for example &lt;code&gt;efm-langserver&lt;/code&gt; with incorrectly defined &lt;code&gt;errorformat&lt;/code&gt;). Please open an issue at the diagnostics provider to fix.&lt;/li&gt; &#xA; &lt;li&gt;This plugin does &lt;em&gt;not&lt;/em&gt; hook into &lt;code&gt;vim.lsp.buf.code_action&lt;/code&gt;, but provides its own selector.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;!-- vale Google.FirstPerson = NO --&gt; &#xA;&lt;p&gt;&lt;strong&gt;About Me&lt;/strong&gt;&lt;br&gt; In my day job, I am a sociologist studying the social mechanisms underlying the digital economy. For my PhD project, I investigate the governance of the app economy and how software ecosystems manage the tension between innovation and compatibility. If you are interested in this subject, feel free to get in touch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Blog&lt;/strong&gt;&lt;br&gt; I also occasionally blog about vim: &lt;a href=&#34;https://nanotipsforvim.prose.sh&#34;&gt;Nano Tips for Vim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Profiles&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/user/pseudometapseudo&#34;&gt;reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discordapp.com/users/462774483044794368/&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chris-grieser.de/&#34;&gt;Academic Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/pseudo_meta&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkm.social/@pseudometa&#34;&gt;Mastodon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/profile/Christopher-Grieser&#34;&gt;ResearchGate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/christopher-grieser-ba693b17a/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Buy Me a Coffee&lt;/strong&gt; &lt;br&gt; &lt;a href=&#34;https://ko-fi.com/Y8Y86SQ91&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://cdn.ko-fi.com/cdn/kofi1.png?v=3&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Qbox-project/qbx_core</title>
    <updated>2023-09-29T01:30:30Z</updated>
    <id>tag:github.com,2023-09-29:/Qbox-project/qbx_core</id>
    <link href="https://github.com/Qbox-project/qbx_core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;qbx_core&lt;/h1&gt; &#xA;&lt;p&gt;This is just it&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>roobert/palette.nvim</title>
    <updated>2023-09-29T01:30:30Z</updated>
    <id>tag:github.com,2023-09-29:/roobert/palette.nvim</id>
    <link href="https://github.com/roobert/palette.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎨 Palette - A beautiful, versatile, systematic, Neovim theme system&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;🎨 Palette&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Beautiful, Versatile, Systematic &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/roobert/palette.nvim/assets/226654/56afa310-04f0-42cc-9901-a212d1853ee7&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Palette&lt;/em&gt; is a Neovim theme system to make creating and customising themes easy.&lt;/p&gt; &#xA;&lt;p&gt;Highlight groups are logically arranged to strike a harmonious balance between clarity and aesthetic appeal.&lt;/p&gt; &#xA;&lt;p&gt;Caching ensures themes are performant.&lt;/p&gt; &#xA;&lt;p&gt;Build easily distributable themes using the provided &lt;code&gt;build&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;Generate application color schemes, such as for &lt;code&gt;LS_COLORS&lt;/code&gt; and &lt;code&gt;iterm2&lt;/code&gt; for matching terminal feel.&lt;/p&gt; &#xA;&lt;h2&gt;Theory&lt;/h2&gt; &#xA;&lt;p&gt;The theme is broken up into three sets of colors: &lt;em&gt;main&lt;/em&gt;, &lt;em&gt;accent&lt;/em&gt;, and &lt;em&gt;state&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Main Colors&lt;/h3&gt; &#xA;&lt;p&gt;The main colors are used for the background, cursorline color, and to color the code and comments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github-production-user-asset-6210df.s3.amazonaws.com/226654/270648812-f229d2a0-7b99-425e-bffc-062bf387c4d8.png&#34; alt=&#34;Main colors screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Accent Colors&lt;/h3&gt; &#xA;&lt;p&gt;Accent colors can be used to bring special attention to highlight groups, in this case &lt;em&gt;constants&lt;/em&gt; and &lt;em&gt;integers&lt;/em&gt; are highlighted with colors not in the main palette: &lt;img src=&#34;https://github.com/roobert/palette.nvim/assets/226654/2d7ff03c-f1d5-46b9-9359-973fcf7002ed&#34; alt=&#34;Accent colors screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;State Colors&lt;/h3&gt; &#xA;&lt;p&gt;There are five different state colors which represent:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;error&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;warn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ok&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;info&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These are used by Diagnostics, git, etc. Anywhere where a state is represented:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github-production-user-asset-6210df.s3.amazonaws.com/226654/270648776-623c7916-adcd-4d8e-a2f2-e0c28353af65.png&#34; alt=&#34;Accent colors screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Built-In Colors&lt;/h2&gt; &#xA;&lt;p&gt;There are two built-in &lt;em&gt;main&lt;/em&gt; palettes: &lt;em&gt;dark&lt;/em&gt; and &lt;em&gt;light&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are three built-in &lt;em&gt;accent&lt;/em&gt; palettes: &lt;em&gt;pastel&lt;/em&gt;, &lt;em&gt;dark&lt;/em&gt; and &lt;em&gt;bright&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are three built-in &lt;em&gt;state&lt;/em&gt; palettes: &lt;em&gt;pastel&lt;/em&gt;, &lt;em&gt;dark&lt;/em&gt; and &lt;em&gt;bright&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Palettes&lt;/h2&gt; &#xA;&lt;p&gt;Custom palettes can be defined like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;roobert/palette.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    require(&#34;palette&#34;).setup({&#xA;      palettes = {&#xA;        main = &#34;custom_main_palette&#34;,&#xA;        accent = &#34;custom_accent_palette&#34;,&#xA;        state = &#34;custom_state_palette&#34;,&#xA;      },&#xA;&#xA;      custom_palettes = {&#xA;        main = {&#xA;          custom_main_palette = {&#xA;            color0 = &#34;#191d33&#34;,&#xA;            color1 = &#34;#1A1E39&#34;,&#xA;            color2 = &#34;#383f5e&#34;,&#xA;            color3 = &#34;#4e5470&#34;,&#xA;            color4 = &#34;#7b7f94&#34;,&#xA;            color5 = &#34;#a7a9b7&#34;,&#xA;            color6 = &#34;#bdbfc9&#34;,&#xA;            color7 = &#34;#d3d4db&#34;,&#xA;            color8 = &#34;#e9e9ed&#34;,&#xA;          },&#xA;        },&#xA;        accent = {&#xA;          custom_accent_palette = {&#xA;            accent0 = &#34;#D97C8F&#34;,&#xA;            accent1 = &#34;#D9AE7E&#34;,&#xA;            accent2 = &#34;#D9D87E&#34;,&#xA;            accent3 = &#34;#A5D9A7&#34;,&#xA;            accent4 = &#34;#8BB9C8&#34;,&#xA;            accent5 = &#34;#C9A1D3&#34;,&#xA;            accent6 = &#34;#B8A1D9&#34;,&#xA;          },&#xA;        },&#xA;        state = {&#xA;          custom_state_palette = {&#xA;            error = &#34;#D97C8F&#34;,&#xA;            warning = &#34;#D9AE7E&#34;,&#xA;            hint = &#34;#D9D87E&#34;,&#xA;            ok = &#34;#A5D9A7&#34;,&#xA;            info = &#34;#8BB9C8&#34;,&#xA;          },&#xA;        },&#xA;      },&#xA;    })&#xA;&#xA;    vim.cmd([[colorscheme palette]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlight Groups&lt;/h2&gt; &#xA;&lt;p&gt;The highlight groups are spit into &lt;a href=&#34;https://github.com/roobert/palette.nvim/tree/main/lua/palette/highlights&#34;&gt;multiple files&lt;/a&gt;, &lt;code&gt;_defaults.lua&lt;/code&gt; contains the default highlight groups, and then there is a file for each set of additional highlight groups, e.g: &lt;code&gt;python.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The highlight groups use the following colors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;9 main colors, named: &lt;code&gt;color0&lt;/code&gt;-&lt;code&gt;color8&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;7 accent colors, named: &lt;code&gt;accent0&lt;/code&gt;-&lt;code&gt;accent7&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;5 state colors, named: &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;, &lt;code&gt;hint&lt;/code&gt;, &lt;code&gt;ok&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additional colors can be added to any palette, with any name, and then used in custom &lt;a href=&#34;https://github.com/roobert/palette.nvim/tree/main#overriding-highlight-groups---built-in-method&#34;&gt;highlight overrides&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Derived Palettes&lt;/h2&gt; &#xA;&lt;p&gt;Palettes (including the defaults) can be used to generate new color schemes.&lt;/p&gt; &#xA;&lt;p&gt;This works by the user specifying a base color and the base palette which is then used to establish the tone difference to generate a new palette.&lt;/p&gt; &#xA;&lt;p&gt;Note: The resulting colors will match the length of the source color table.&lt;/p&gt; &#xA;&lt;p&gt;See an example of a derived theme in the next section.&lt;/p&gt; &#xA;&lt;h2&gt;Caching&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Palette&lt;/em&gt; implements automatic caching.&lt;/p&gt; &#xA;&lt;p&gt;The cache is stored in the &lt;code&gt;palette&lt;/code&gt; (or theme name, if a distributable) directory under your users cache directory, typically: &lt;code&gt;~/.cache/nvim/palette/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Gallery&lt;/h2&gt; &#xA;&lt;p&gt;Built-in &lt;em&gt;dark&lt;/em&gt; &lt;em&gt;main&lt;/em&gt; palette:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/roobert/palette.nvim/assets/226654/56afa310-04f0-42cc-9901-a212d1853ee7&#34; alt=&#34;Palette built-in dark theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Built-in &lt;em&gt;light&lt;/em&gt; &lt;em&gt;main&lt;/em&gt; palette:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/roobert/palette.nvim/assets/226654/43544e66-92b9-41b2-87f2-4f944a2e2bb4&#34; alt=&#34;Palette built-in light theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A custom derived theme inspired by Life Aquatic&#39;s Team Zissou colors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/roobert/palette.nvim/assets/226654/2d92821a-dd78-4828-b08e-1557a5665856&#34; alt=&#34;Team Zissou theme&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🛠️ Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;roobert/palette&#39;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    vim.cmd(&#34;colorscheme palette&#34;)&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;⚙️ Configuration Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Overriding Default Palettes&lt;/h3&gt; &#xA;&lt;p&gt;Example overriding the default palettes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;roobert/palette.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    require(&#34;palette&#34;).setup({&#xA;      palettes = {&#xA;        -- dark or light&#xA;        main = &#34;light&#34;,&#xA;&#xA;        -- pastel, bright or dark&#xA;        accent = &#34;dark&#34;,&#xA;        state = &#34;dark&#34;,&#xA;      },&#xA;&#xA;      italics = true,&#xA;      transparent_background = false,&#xA;    })&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom &lt;em&gt;Main&lt;/em&gt; Palette&lt;/h3&gt; &#xA;&lt;p&gt;An example of using a custom &lt;em&gt;main&lt;/em&gt; palette:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;roobert/palette.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    require(&#34;palette&#34;).setup({&#xA;      palettes = {&#xA;        main = &#34;dust_dusk&#34;,&#xA;      },&#xA;&#xA;      italics = true,&#xA;      transparent_background = false,&#xA;&#xA;      custom_palettes = {&#xA;        main = {&#xA;          -- dusk theme taken from roobert/dust.nvim&#xA;          dust_dusk = {&#xA;            color0 = &#34;#121527&#34;,&#xA;            color1 = &#34;#1A1E39&#34;,&#xA;            color2 = &#34;#232A4D&#34;,&#xA;            color3 = &#34;#3E4D89&#34;,&#xA;            color4 = &#34;#687BBA&#34;,&#xA;            color5 = &#34;#A4B1D6&#34;,&#xA;            color6 = &#34;#bdbfc9&#34;,&#xA;            color7 = &#34;#DFE5F1&#34;,&#xA;            color8 = &#34;#e9e9ed&#34;,&#xA;          }&#xA;        },&#xA;        accent = {},&#xA;        state = {},&#xA;      }&#xA;    })&#xA;&#xA;    vim.cmd([[colorscheme palette]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Derived Theme&lt;/h3&gt; &#xA;&lt;p&gt;An example of using a &lt;em&gt;derived&lt;/em&gt; theme based on the built-in &lt;em&gt;dark&lt;/em&gt; palette, with a couple of color overrides merged into the generated palette table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;roobert/palette.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    require(&#34;palette&#34;).setup({&#xA;      palettes = {&#xA;        main = &#34;team_zissou&#34;,&#xA;        accent = &#34;pastel&#34;,&#xA;        state = &#34;pastel&#34;,&#xA;      },&#xA;&#xA;      custom_palettes = {&#xA;        main = {&#xA;          -- a blue theme, based off the built-in dark palette&#xA;          team_zissou = vim.tbl_extend(&#xA;            &#34;force&#34;,&#xA;            require(&#34;palette.generator&#34;).generate_colors(&#xA;              require(&#34;palette.colors&#34;).main[&#34;dark&#34;],&#xA;              &#34;#04213b&#34;&#xA;            ),&#xA;            {&#xA;              -- override background and cursor-line&#xA;              color0 = &#34;#191d33&#34;,&#xA;              color1 = &#34;#1A1E39&#34;,&#xA;              -- override most prominent colors (strings, etc.)&#xA;              color7 = &#34;#e9e9ed&#34;,&#xA;              color8 = &#34;#d3d4db&#34;,&#xA;            }&#xA;          ),&#xA;        },&#xA;      }&#xA;    })&#xA;&#xA;    vim.cmd([[colorscheme palette]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lighten / Darken&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s possible to use &lt;code&gt;lighten()&lt;/code&gt; and &lt;code&gt;darken()&lt;/code&gt; to lighten and darken colors. In this example a default color is being overridden:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;roobert/palette.nvim&#34;,&#xA;    lazy = false,&#xA;    priority = 1000,&#xA;    config = function()&#xA;        -- Reference the dark palette&#xA;        local dark_palette = require(&#34;palette.colors&#34;).main[&#34;dark&#34;]&#xA;&#xA;        -- Lighten the cursor-line&#xA;        dark_palette.color1 = require(&#34;palette.utils&#34;).lighten(dark_palette[&#34;color1&#34;])&#xA;&#xA;        require(&#34;palette&#34;).setup({&#xA;          palettes = {&#xA;            -- Reference the custom theme&#xA;            main = &#34;custom_lighter_cursorline&#34;,&#xA;          },&#xA;          custom_palettes = {&#xA;            main = {&#xA;              -- Create a custom theme&#xA;              custom_lighter_cursorline = dark_palette,&#xA;            }&#xA;          },&#xA;        })&#xA;&#xA;        vim.cmd([[colorscheme palette]])&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Overriding Highlight Groups - Built-In Method&lt;/h3&gt; &#xA;&lt;p&gt;An example of overriding specific highlight groups using the built-in method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;roobert/palette.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    -- alias so we can easily reference theme colors&#xA;    a = require(&#34;palette.theme&#34;).accent&#xA;&#xA;    require(&#34;palette&#34;).setup({&#xA;      -- custom highlight groups can override any highlight groups&#xA;      -- add one table per override:&#xA;      custom_highlights = {&#xA;        {&#xA;          -- highlight group, or nil&#xA;          &#34;Normal&#34;,&#xA;          -- foreground, or nil&#xA;          a.accent0,&#xA;          -- background, or nil&#xA;          &#34;#00ff00&#34;,&#xA;          -- style(s) to apply, or nil&#xA;          { &#34;italic&#34;, &#34;underline&#34;, &#34;bold&#34; },&#xA;        },&#xA;      }&#xA;    })&#xA;&#xA;    vim.cmd([[colorscheme palette]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Overriding Highlight Groups - Normal Method&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively highlight groups can be overridden in the normal way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;roobert/palette.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    require(&#34;palette&#34;).setup({})&#xA;&#xA;    vim.cmd([[colorscheme palette]])&#xA;&#xA;    -- example of specific highlight group override..&#xA;    vim.cmd([[highlight Normal guifg=&#34;#ff0000&#34;]])&#xA;&#xA;    -- example of specific highlight group override using palette color&#xA;    a = require(&#34;palette.theme&#34;).accent&#xA;    vim.cmd([[highlight Normal guifg=a.accent0]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Caching&lt;/h2&gt; &#xA;&lt;p&gt;To adjust caching or set a custom cache path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;roobert/palette.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    require(&#34;palette&#34;).setup({&#xA;      caching = true,&#xA;      -- typically: ~/.cache/nvim/palette/&#xA;      cache_dir = vim.fn.stdpath(&#34;cache&#34;) .. &#34;/palette&#34;,&#xA;    })&#xA;&#xA;    vim.cmd([[colorscheme palette]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support for &lt;code&gt;LS_COLORS&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/sharkdp/vivid&#34;&gt;Vivid&lt;/a&gt; is a generator for the &lt;code&gt;LS_COLORS&lt;/code&gt; environment variable that controls the colorized output of &lt;code&gt;ls&lt;/code&gt;, &lt;code&gt;tree&lt;/code&gt;, &lt;code&gt;fd&lt;/code&gt;, &lt;code&gt;bfs&lt;/code&gt;, &lt;code&gt;dust&lt;/code&gt; and many other tools.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/roobert/palette.nvim/assets/226654/e7e5ac09-dfbd-4fa6-b258-8f2da9332511&#34; alt=&#34;Custom LS_COLORS screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;vivid.lua&lt;/code&gt; script to generate a &lt;code&gt;vivid&lt;/code&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install vivid&#xA;mkdir -p ~/.config/vivid/themes&#xA;&#xA;# optionally:&#xA;# * customize vivid/filetypes.yml&#xA;# * change which palettes are used&#xA;./bin/vivid.lua palette dark pastel bright palette_dark&#xA;&#xA;cp -v vivid/themes/* ~/.config/vivid/themes/&#xA;&#xA;# add to ~/.zshrc or ~/.bashrc&#xA;LS_COLORS=&#34;$(vivid generate palette_dark)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Support for &lt;code&gt;iterm2&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/roobert/palette.nvim/assets/226654/1ba8953d-2ce8-4c1c-8e7b-4f7e776f9859&#34; alt=&#34;iterm2 screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Generate theme for iterm2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/iterm2.lua palette dark pastel &amp;gt; terminal/palette.itermcolors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Import the theme through &lt;code&gt;Settings -&amp;gt; Profiles -&amp;gt; Colors -&amp;gt; Import&lt;/code&gt; and then select from the preset list.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Themes for Distribution&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s always possible to share your theme by sharing a code block like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;roobert/palette.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    require(&#34;palette&#34;).setup({&#xA;      palettes = {&#xA;        -- built in colorscheme: grey&#xA;        main = &#34;dust_dusk&#34;,&#xA;        -- built in accents: pastel, bright, dark&#xA;        accent = &#34;pastel&#34;,&#xA;        state = &#34;pastel&#34;,&#xA;      },&#xA;&#xA;      italics = true,&#xA;      transparent_background = false,&#xA;&#xA;      custom_palettes = {&#xA;        main = {&#xA;          dust_dusk = {&#xA;            color0 = &#34;#121527&#34;,&#xA;            color1 = &#34;#1A1E39&#34;,&#xA;            color2 = &#34;#232A4D&#34;,&#xA;            color3 = &#34;#3E4D89&#34;,&#xA;            color4 = &#34;#687BBA&#34;,&#xA;            color5 = &#34;#A4B1D6&#34;,&#xA;            color6 = &#34;#bdbfc9&#34;,&#xA;            color7 = &#34;#DFE5F1&#34;,&#xA;            color8 = &#34;#e9e9ed&#34;,&#xA;          },&#xA;        },&#xA;      },&#xA;      accent = {},&#xA;      state = {},&#xA;    })&#xA;&#xA;    vim.cmd([[colorscheme palette]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, if you&#39;d like to be able to give people a code block like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#34;username/colorscheme_name.nvim&#34;,&#xA;  lazy = false,&#xA;  priority = 1000,&#xA;  config = function()&#xA;    vim.cmd([[colorscheme colorscheme_name]])&#xA;  end,&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A build script is provided and can be used like this:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork this repository or click &#34;Use this template&#34; button and name your fork/copy &lt;code&gt;&amp;lt;your-theme-name&amp;gt;.nvim&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Output your custom theme color palettes:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:lua print(vim.inspect(require(&#34;palette.theme&#34;)))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Write the palette and accents to &lt;code&gt;lua/palette/colors.lua&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the build script:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/build.sh &amp;lt;new theme name&amp;gt; &amp;lt;main palette name&amp;gt; &amp;lt;accent palette name&amp;gt; &amp;lt;state palette name&amp;gt;&#xA;# e.g:&#xA;./bin/build.sh dust dusk pastel pastel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Optionally add support for &lt;a href=&#34;https://github.com/roobert/palette.nvim/tree/main#support-for-ls_colors&#34;&gt;LS_COLORS&lt;/a&gt; and &lt;a href=&#34;https://github.com/roobert/palette.nvim#support-for-iterm2&#34;&gt;iterm2&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;README.md&lt;/code&gt; with screenshots, etc.&lt;/li&gt; &#xA; &lt;li&gt;Release your theme to the world!&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>