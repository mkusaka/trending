<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-07T01:35:14Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>chadvandy/cbfm_wh3</title>
    <updated>2022-09-07T01:35:14Z</updated>
    <id>tag:github.com,2022-09-07:/chadvandy/cbfm_wh3</id>
    <link href="https://github.com/chadvandy/cbfm_wh3" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Community Bug-Fix Mod for Warhammer III. Please feel free to make pull requests, issues, etc!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Community Bug Fix Mod: Warhammer III&lt;/h1&gt; &#xA;&lt;p&gt;Community Bug-Fix Mod for Warhammer III. Please feel free to make pull requests, issues, etc!&lt;/p&gt; &#xA;&lt;h3&gt;Getting Set Up&lt;/h3&gt; &#xA;&lt;p&gt;To get ready to work on the CBFM, you just need to have a GitHub account and the &lt;a href=&#34;https://desktop.github.com/&#34;&gt;GitHub Desktop&lt;/a&gt; application installed on your PC. You also need to have RPFM set up, with a MyMod path set.&lt;/p&gt; &#xA;&lt;p&gt;Once the two above are done, open up GitHub Desktop and login to your account. Should be in &#34;File -&amp;gt; Options&#34;. Then, in GitHub Desktop, press &#34;File -&amp;gt; Clone Repository&#34;. This will make a &#34;clone&#34; of the CBFM repository of data on your own computer, which you can edit and change at will, locally. Select &#34;URL&#34;, decide a local path ending in &#34;zzz_community_bugfix_mod&#34;, and then in the URL slot type in &#34;chadvandy/cbfm_wh3&#34;. Press &#34;Clone&#34;, and it will be added onto your PC on the path decided!&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;You may have to make a &#34;Fork&#34; of this repository. That will be your own &#34;version&#34; of the CBFM repository, on your own github. Aside from that, everything will function as normal&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.discordapp.com/attachments/597937992773926962/962385197674934292/unknown.png&#34; alt=&#34;Image showing the popup w/ an example &amp;quot;local path&amp;quot; set.&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;And now you have the entire repository of CBFM installed onto your PC. Next up you will want to go to RPFM -&amp;gt; MyMod -&amp;gt; Warhammer 3 -&amp;gt; New MyMod, and set the name to &lt;code&gt;zzz_community_bugfix_mod&lt;/code&gt;. It will open an empty .pack called &lt;code&gt;zzz_community_bugfix_mod&lt;/code&gt; - just use MyMod -&amp;gt; Import and it&#39;ll grab all the relevant files, and you&#39;re ready to go!&lt;/p&gt; &#xA;&lt;h3&gt;Making Edits&lt;/h3&gt; &#xA;&lt;p&gt;Going forward, all you have to do is work on your edits. After each bugfix, please make a commit with a clear title that targets the &#34;Issue&#34; that is fixed with that commit - it&#39;ll be easier to keep track through that, instead of batch-editing fixes which can make it less wieldy with different db file names and the like. Make sure to have very clear file names, and always use &lt;code&gt;zzz_cbfm_&lt;/code&gt; as the prefix for your file names if you aren&#39;t overwriting any vanilla files.&lt;/p&gt; &#xA;&lt;p&gt;When you have a good set of fixes prepared, you will have to make a Pull Request. Be descriptive of your changes, and I or someone else will quickly review to make sure they pass standards and then pass them forward!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;VERY IMPORTANT:&lt;/strong&gt; If you delete a file in RPFM and use extract, &lt;em&gt;RPFM will not delete the file locally&lt;/em&gt;, and so GitHub won&#39;t know to delete the file. You can just wipe the entire MyMod local folder prior to extracting the contents in RPFM, so you can assure your .pack file&#39;s contents are the only things on the repo.&lt;/p&gt; &#xA;&lt;h3&gt;Rebasing your .Pack file&lt;/h3&gt; &#xA;&lt;p&gt;To make sure your .pack file is 100% lined up with our latest version, open up the MyMod file, delete everything within, and then use Import. This will pull in every single file from our repo, and will remove any leftover files on your end that might be old (if you haven&#39;t submitted a fix in a while, etc). You may also have to rebase your fork by changing branches or creating a new one based off of our master branch.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m sorry for all the github speak, google it if you don&#39;t know what I mean, I&#39;m not helpful enough to detail everything. I&#39;ll probably edit this later to be more clear. Thanks!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ellisonleao/gruvbox.nvim</title>
    <updated>2022-09-07T01:35:14Z</updated>
    <id>tag:github.com,2022-09-07:/ellisonleao/gruvbox.nvim</id>
    <link href="https://github.com/ellisonleao/gruvbox.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lua port of the most famous vim colorscheme&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; &lt;img src=&#34;https://i.postimg.cc/WpQzgxVh/plugin-Icon.png&#34; width=&#34;80px&#34;&gt;&lt;br&gt;gruvbox.nvim&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/intent/user?screen_name=ellisonleao&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/ellisonleao?style=for-the-badge&#34; style=&#34;vertical-align:center&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ellisonleao/gruvbox.nvim/main/#&#34;&gt;&lt;img alt=&#34;Made with Lua&#34; src=&#34;https://img.shields.io/badge/Made%20with%20Lua-blueviolet.svg?style=for-the-badge&amp;amp;logo=lua&#34; style=&#34;vertical-align:center&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A port of &lt;a href=&#34;https://github.com/gruvbox-community/gruvbox&#34;&gt;gruvbox community&lt;/a&gt; theme to lua with &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;treesitter&lt;/a&gt; support!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://i.postimg.cc/fy3tnGFt/gruvbox-themes.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Prerequisites&lt;/h1&gt; &#xA;&lt;p&gt;Neovim 0.7.0+&lt;/p&gt; &#xA;&lt;h1&gt;Installing&lt;/h1&gt; &#xA;&lt;p&gt;Using &lt;code&gt;packer&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use { &#34;ellisonleao/gruvbox.nvim&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Basic Usage&lt;/h1&gt; &#xA;&lt;p&gt;Inside &lt;code&gt;init.vim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;set background=dark &#34; or light if you want light mode&#xA;colorscheme gruvbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside &lt;code&gt;init.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.o.background = &#34;dark&#34; -- or &#34;light&#34; for light mode&#xA;vim.cmd([[colorscheme gruvbox]])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Additional settings for gruvbox are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- setup must be called before loading the colorscheme&#xA;-- Default options:&#xA;require(&#34;gruvbox&#34;).setup({&#xA;  undercurl = true,&#xA;  underline = true,&#xA;  bold = true,&#xA;  italic = true,&#xA;  strikethrough = true,&#xA;  invert_selection = false,&#xA;  invert_signs = false,&#xA;  invert_tabline = false,&#xA;  invert_intend_guides = false,&#xA;  inverse = true, -- invert background for search, diffs, statuslines and errors&#xA;  contrast = &#34;&#34;, -- can be &#34;hard&#34;, &#34;soft&#34; or empty string&#xA;  overrides = {},&#xA;})&#xA;vim.cmd(&#34;colorscheme gruvbox&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Overriding Highlight groups&lt;/h2&gt; &#xA;&lt;p&gt;If you don&#39;t enjoy the current color for a specific highlight group, now you can just override it in the setup. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;gruvbox&#34;).setup({&#xA;    overrides = {&#xA;        SignColumn = {bg = &#34;#ff9900&#34;}&#xA;    }&#xA;})&#xA;vim.cmd(&#34;colorscheme gruvbox&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that the override values must follow the attributes from the highlight group map, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;fg&lt;/strong&gt; - foreground color&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bg&lt;/strong&gt; - background color&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;bold&lt;/strong&gt; - true or false for bold font&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;italic&lt;/strong&gt; - true or false for italic font&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other values can be seen in &lt;code&gt;:h synIDattr&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>levouh/tint.nvim</title>
    <updated>2022-09-07T01:35:14Z</updated>
    <id>tag:github.com,2022-09-07:/levouh/tint.nvim</id>
    <link href="https://github.com/levouh/tint.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dim inactive windows in Neovim using window-local highlight namespaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;span&gt;👓&lt;/span&gt; tint.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Tint inactive windows in Neovim using window-local highlight namespaces.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚠&lt;/span&gt; Caveats&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This feature was added via &lt;a href=&#34;https://github.com/neovim/neovim/pull/13457&#34;&gt;!13457&lt;/a&gt;. Your version of Neovim must include this change in order for this to work.&lt;/li&gt; &#xA; &lt;li&gt;If you are noticing that certain colors are not being tinted, it is because likely they are defined &lt;em&gt;after&lt;/em&gt; &lt;code&gt;tint&lt;/code&gt; has been loaded and are &#34;standalone&#34; (i.e. not &lt;code&gt;link&lt;/code&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;tint&lt;/code&gt; applies changes to your colorscheme (i.e. the global highlight namespace with &lt;code&gt;ns_id=0&lt;/code&gt;) &lt;em&gt;when its &lt;code&gt;setup&lt;/code&gt; function is called&lt;/em&gt;. From this then, if you are lazy-loading a different plugin that declares its own standalone highlight groups and loads after &lt;code&gt;tint&lt;/code&gt;, they will likely not work as intended.&lt;/li&gt; &#xA;   &lt;li&gt;To help work around this (perhaps until a better solution is found), you can use &lt;code&gt;require(&#34;tint&#34;).refresh()&lt;/code&gt; after a plugin loads if you are having issues with its colors.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Highlight groups that &#34;replace&#34; another in unfocused windows (e.g. &lt;code&gt;NormalNC&lt;/code&gt; &#34;replacing&#34; &lt;code&gt;Normal&lt;/code&gt;) must have &lt;em&gt;both&lt;/em&gt; highlight groups defined. The &lt;code&gt;*NC&lt;/code&gt; group is what will be tinted in unfocused windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🎬&lt;/span&gt; Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/31262046/188533069-966c663b-5be7-49ce-b389-60bb3b10c572.gif&#34; alt=&#34;tint&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;❔&lt;/span&gt; About&lt;/h2&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://github.com/neovim/neovim/pull/13457&#34;&gt;window-local highlight namespaces&lt;/a&gt;, this plugin will iterate over each highlight group in the active colorscheme when the plugin is setup and either brighten or darken each value (based on what you configure) for inactive windows.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚙&lt;/span&gt; Setup&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/levouh/tint.nvim/master/DOC.md&#34;&gt;docs&lt;/a&gt; or &lt;code&gt;:h tint&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Default configuration&#xA;require(&#34;tint&#34;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you want to override the defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Override some defaults&#xA;require(&#34;tint&#34;).setup({&#xA;  tint = -45,  -- Darken colors, use a positive value to brighten&#xA;  saturation = 0.6,  -- Saturation to preserve&#xA;  transforms = require(&#34;tint&#34;).transforms.SATURATE_TINT,  -- Showing default behavior, but value here can be predefined set of transforms&#xA;  tint_background_colors = true,  -- Tint background portions of highlight groups&#xA;  highlight_ignore_patterns = { &#34;WinSeparator&#34;, &#34;Status.*&#34; },  -- Highlight group patterns to ignore, see `string.find`&#xA;  window_ignore_function = function(winid)&#xA;    local bufid = vim.api.nvim_win_get_buf(winid)&#xA;    local buftype = vim.api.nvim_buf_get_option(bufid, &#34;buftype&#34;)&#xA;    local floating = vim.api.nvim_win_get_config(winid).relative ~= &#34;&#34;&#xA;&#xA;    -- Do not tint `terminal` or floating windows, tint everything else&#xA;    return buftype == &#34;terminal&#34; or floating&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom color transformations&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h tint-transforms_api&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;If you come up with a cool set of transformations that you think might be useful to others, see the &lt;a href=&#34;https://raw.githubusercontent.com/levouh/tint.nvim/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; on how you can make this available for others.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Handle transformations of highlight groups for the tinted namespace yourself&#xA;require(&#34;tint&#34;).setup({&#xA;  transforms = {&#xA;    require(&#34;tint.transforms&#34;).saturate(0.5),&#xA;    function(r, g, b, hl_group_info)&#xA;      print(&#34;Higlight group name: &#34; .. hl_group_info.hl_group_name)&#xA;&#xA;      local hl_def = vim.api.nvim_get_hl_by_name(hl_group_info.hl_group_name)&#xA;      print(&#34;Highlight group definition: &#34; .. vim.inspect(hl_def))&#xA;&#xA;      return r + 1, g + 1, b + 1&#xA;    end&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bounding colors to some threshold&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h tint-transforms-tint_with_threshold&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;p&gt;Your colorscheme might have colors that are slightly different from your default editor background, and those that are much further away. You want the colors that are further away tinted more, and those that are closer tinted less. In order to achieve this, you can set some arbitrary &#34;tint bounding color&#34; and keep all tinted colors some threshold away from it.&lt;/p&gt; &#xA;&lt;p&gt;Setting this to the &lt;code&gt;background&lt;/code&gt; portion of your &lt;code&gt;Normal&lt;/code&gt; highlight group is usually the easiest way to go.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;tint&#34;).setup({&#xA;  transforms = {&#xA;    require(&#34;tint.transforms&#34;).tint_with_threshold(-100, &#34;#1C1C1C&#34;, 150),  -- Try to tint by `-100`, but keep all colors at least `150` away from `#1C1C1C`&#xA;    require(&#34;tint.transforms&#34;).saturate(0.5),&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;span&gt;🖥&lt;/span&gt; API&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/levouh/tint.nvim/master/DOC.md&#34;&gt;docs&lt;/a&gt; or &lt;code&gt;:h tint&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;❤️&lt;/span&gt; Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The harder part of the plugin to dim colors from &lt;a href=&#34;https://stackoverflow.com/questions/72424838/programmatically-lighten-or-darken-a-hex-color-in-lua-nvim-highlight-colors&#34;&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The general idea from &lt;a href=&#34;https://github.com/sunjon/Shade.nvim&#34;&gt;Shade.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bfredl&lt;/code&gt; for making everyones life better&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;williamboman&lt;/code&gt; for adding saturation to better mimic the way &lt;code&gt;Shade&lt;/code&gt; looks&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>