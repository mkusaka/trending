<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-20T01:31:05Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MeanderingProgrammer/render-markdown.nvim</title>
    <updated>2024-08-20T01:31:05Z</updated>
    <id>tag:github.com,2024-08-20:/MeanderingProgrammer/render-markdown.nvim</id>
    <link href="https://github.com/MeanderingProgrammer/render-markdown.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin to improve viewing Markdown files in Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;render-markdown.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Plugin to improve viewing Markdown files in Neovim&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Repo has been renamed from &lt;code&gt;markdown.nvim&lt;/code&gt; to make things more consistent.&lt;/p&gt; &#xA; &lt;p&gt;Github will redirect all requests so nothing should break for most users.&lt;/p&gt; &#xA; &lt;p&gt;For &lt;code&gt;lazy.nvim&lt;/code&gt; &amp;amp; &lt;code&gt;tokyonight.nvim&lt;/code&gt; users changing the plugin name will remove custom highlights until the following is merged &lt;a href=&#34;https://github.com/folke/tokyonight.nvim/pull/620&#34;&gt;#620&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;In the meantime you can fix this by adding the following to your config:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;tokyonight&#39;).setup({&#xA;    plugins = { markdown = true },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;For &lt;code&gt;rocks.nvim&lt;/code&gt; users migrate to the new &lt;a href=&#34;https://luarocks.org/modules/MeanderingProgrammer/render-markdown.nvim&#34;&gt;LuaRock&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Rocks prune markdown.nvim&#xA;:Rocks install render-markdown.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- panvimdoc-ignore-start --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/663a34c5-0438-4688-8204-332065f65835&#34; alt=&#34;Heading&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/162986e1-91f0-4e13-a83f-6183d58b0fcb&#34; alt=&#34;Table&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/3f76e73e-b3a0-4cd8-90c1-208c5070659c&#34; alt=&#34;Quote&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/9e8909e4-7256-45fc-b481-4aba8850ebc3&#34; alt=&#34;LaTeX&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/4324ea72-a017-4175-9f9d-363da5e5f6ba&#34; alt=&#34;Callout&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- panvimdoc-ignore-end --&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Functions entirely inside of Neovim with no external windows&lt;/li&gt; &#xA; &lt;li&gt;Changes between &lt;code&gt;rendered&lt;/code&gt; view in normal mode and &lt;code&gt;raw&lt;/code&gt; view in all other modes&lt;/li&gt; &#xA; &lt;li&gt;Supports anti-conceal behavior, removing any virtual text added by this plugin on the line the cursor is on, this does have a performance penalty and can be disabled&lt;/li&gt; &#xA; &lt;li&gt;Changes window options between &lt;code&gt;rendered&lt;/code&gt; and &lt;code&gt;raw&lt;/code&gt; view based on configuration &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Effects &lt;code&gt;conceallevel&lt;/code&gt; &amp;amp; &lt;code&gt;concealcursor&lt;/code&gt; by default&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports rendering &lt;code&gt;markdown&lt;/code&gt; injected into other file types&lt;/li&gt; &#xA; &lt;li&gt;Renders the following &lt;code&gt;markdown&lt;/code&gt; components: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Headings: highlight depending on level and replaces &lt;code&gt;#&lt;/code&gt; with icon&lt;/li&gt; &#xA;   &lt;li&gt;Horizontal breaks: replace with full-width lines&lt;/li&gt; &#xA;   &lt;li&gt;Code blocks: highlight to better stand out &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Adds language icon [^1], requires icon provider (&lt;code&gt;mini.icons&lt;/code&gt; or &lt;code&gt;nvim-web-devicons&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;Left pad lines within block [^1]&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Inline code: highlight to better stand out&lt;/li&gt; &#xA;   &lt;li&gt;List bullet points: replace with provided icon based on level&lt;/li&gt; &#xA;   &lt;li&gt;Checkboxes: replace with provided icon based on whether they are checked&lt;/li&gt; &#xA;   &lt;li&gt;Block quotes: replace leading &lt;code&gt;&amp;gt;&lt;/code&gt; with provided icon&lt;/li&gt; &#xA;   &lt;li&gt;Tables: replace border characters, handles misaligned tables but does NOT align according to delimiter indicator&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/orgs/community/discussions/16925&#34;&gt;Callouts&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Github &amp;amp; Obsidian out of the box, supports user defined as well&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Custom checkbox states [^1], function similar to &lt;code&gt;callouts&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Adds icon before images / links [^1]&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;LaTeX&lt;/code&gt; blocks: renders formulas if &lt;code&gt;latex&lt;/code&gt; parser and &lt;code&gt;pylatexenc&lt;/code&gt; are installed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Disable rendering when file is larger than provided value&lt;/li&gt; &#xA; &lt;li&gt;Support custom handlers which are ran identically to builtin handlers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;[^1]: Requires neovim &amp;gt;= &lt;code&gt;0.10.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.9.0&lt;/code&gt; (minimum) &lt;code&gt;&amp;gt;= 0.10.0&lt;/code&gt; (recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;treesitter&lt;/a&gt; parsers: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/tree-sitter-grammars/tree-sitter-markdown&#34;&gt;markdown &amp;amp; markdown_inline&lt;/a&gt;: Used to parse &lt;code&gt;markdown&lt;/code&gt; files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/latex-lsp/tree-sitter-latex&#34;&gt;latex&lt;/a&gt; (Optional): Used to get &lt;code&gt;LaTeX&lt;/code&gt; blocks from &lt;code&gt;markdown&lt;/code&gt; files&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Icon provider plugin (Optional): Used for icon above code blocks &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-icons.md&#34;&gt;mini.icons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-web-devicons&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;System dependencies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://pypi.org/project/pylatexenc/&#34;&gt;pylatexenc&lt;/a&gt; (Optional): Used to transform &lt;code&gt;LaTeX&lt;/code&gt; strings to appropriate unicode using &lt;code&gt;latex2text&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;h2&gt;lazy.nvim&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;MeanderingProgrammer/render-markdown.nvim&#39;,&#xA;    opts = {},&#xA;    dependencies = { &#39;nvim-treesitter/nvim-treesitter&#39;, &#39;echasnovski/mini.nvim&#39; }, -- if you use the mini.nvim suite&#xA;    -- dependencies = { &#39;nvim-treesitter/nvim-treesitter&#39;, &#39;echasnovski/mini.icons&#39; }, -- if you use standalone mini plugins&#xA;    -- dependencies = { &#39;nvim-treesitter/nvim-treesitter&#39;, &#39;nvim-tree/nvim-web-devicons&#39; }, -- if you prefer nvim-web-devicons&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;rocks.nvim&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is available on &lt;a href=&#34;https://luarocks.org/modules/MeanderingProgrammer/render-markdown.nvim&#34;&gt;LuaRocks&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Rocks install render-markdown.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;packer.nvim&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#39;MeanderingProgrammer/render-markdown.nvim&#39;,&#xA;    after = { &#39;nvim-treesitter&#39; },&#xA;    requires = { &#39;echasnovski/mini.nvim&#39;, opt = true }, -- if you use the mini.nvim suite&#xA;    -- requires = { &#39;echasnovski/mini.icons&#39;, opt = true }, -- if you use standalone mini plugins&#xA;    -- requires = { &#39;nvim-tree/nvim-web-devicons&#39;, opt = true }, -- if you prefer nvim-web-devicons&#xA;    config = function()&#xA;        require(&#39;render-markdown&#39;).setup({})&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:RenderMarkdown&lt;/code&gt; | &lt;code&gt;:RenderMarkdown enable&lt;/code&gt; - Enable this plugin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can also be accessed directly through &lt;code&gt;require(&#39;render-markdown&#39;).enable()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:RenderMarkdown disable&lt;/code&gt; - Disable this plugin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can also be accessed directly through &lt;code&gt;require(&#39;render-markdown&#39;).disable()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:RenderMarkdown toggle&lt;/code&gt; - Switch between enabling &amp;amp; disabling this plugin &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can also be accessed directly through &lt;code&gt;require(&#39;render-markdown&#39;).toggle()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:RenderMarkdown expand&lt;/code&gt; - Increase anti-conceal margin above and below by 1 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can also be accessed directly through &lt;code&gt;require(&#39;render-markdown&#39;).expand()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:RenderMarkdown contract&lt;/code&gt; - Decrease anti-conceal margin above and below by 1 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can also be accessed directly through &lt;code&gt;require(&#39;render-markdown&#39;).contract()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki&#34;&gt;Wiki&lt;/a&gt; for examples and images associated with different configuration options.&lt;/p&gt; &#xA;&lt;p&gt;The full default configuration is provided below for reference.&lt;/p&gt; &#xA;&lt;p&gt;Any part of it can be modified however for many fields this does not make much sense.&lt;/p&gt; &#xA;&lt;p&gt;Some of the more useful fields are discussed further down.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Full Default Configuration&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    -- Whether Markdown should be rendered by default or not&#xA;    enabled = true,&#xA;    -- Maximum file size (in MB) that this plugin will attempt to render&#xA;    -- Any file larger than this will effectively be ignored&#xA;    max_file_size = 10.0,&#xA;    -- Milliseconds that must pass before updating marks, updates occur&#xA;    -- within the context of the visible window, not the entire buffer&#xA;    debounce = 100,&#xA;    -- Pre configured settings that will attempt to mimic various target&#xA;    -- user experiences. Any user provided settings will take precedence.&#xA;    --  obsidian: mimic Obsidian UI&#xA;    --  lazy:     will attempt to stay up to date with LazyVim configuration&#xA;    --  none:     does nothing&#xA;    preset = &#39;none&#39;,&#xA;    -- Capture groups that get pulled from markdown&#xA;    markdown_query = [[&#xA;        (atx_heading [&#xA;            (atx_h1_marker)&#xA;            (atx_h2_marker)&#xA;            (atx_h3_marker)&#xA;            (atx_h4_marker)&#xA;            (atx_h5_marker)&#xA;            (atx_h6_marker)&#xA;        ] @heading)&#xA;&#xA;        (thematic_break) @dash&#xA;&#xA;        (fenced_code_block) @code&#xA;&#xA;        [&#xA;            (list_marker_plus)&#xA;            (list_marker_minus)&#xA;            (list_marker_star)&#xA;        ] @list_marker&#xA;&#xA;        (task_list_marker_unchecked) @checkbox_unchecked&#xA;        (task_list_marker_checked) @checkbox_checked&#xA;&#xA;        (block_quote) @quote&#xA;&#xA;        (pipe_table) @table&#xA;    ]],&#xA;    -- Capture groups that get pulled from quote nodes&#xA;    markdown_quote_query = [[&#xA;        [&#xA;            (block_quote_marker)&#xA;            (block_continuation)&#xA;        ] @quote_marker&#xA;    ]],&#xA;    -- Capture groups that get pulled from inline markdown&#xA;    inline_query = [[&#xA;        (code_span) @code&#xA;&#xA;        (shortcut_link) @shortcut&#xA;&#xA;        [(inline_link) (full_reference_link) (image)] @link&#xA;    ]],&#xA;    -- The level of logs to write to file: vim.fn.stdpath(&#39;state&#39;) .. &#39;/render-markdown.log&#39;&#xA;    -- Only intended to be used for plugin development / debugging&#xA;    log_level = &#39;error&#39;,&#xA;    -- Filetypes this plugin will run on&#xA;    file_types = { &#39;markdown&#39; },&#xA;    -- Vim modes that will show a rendered view of the markdown file&#xA;    -- All other modes will be uneffected by this plugin&#xA;    render_modes = { &#39;n&#39;, &#39;c&#39; },&#xA;    -- Set to avoid seeing warnings for conflicts in health check&#xA;    acknowledge_conflicts = false,&#xA;    anti_conceal = {&#xA;        -- This enables hiding any added text on the line the cursor is on&#xA;        enabled = true,&#xA;        -- Number of lines above cursor to show&#xA;        above = 0,&#xA;        -- Number of lines below cursor to show&#xA;        below = 0,&#xA;    },&#xA;    latex = {&#xA;        -- Whether LaTeX should be rendered, mainly used for health check&#xA;        enabled = true,&#xA;        -- Executable used to convert latex formula to rendered unicode&#xA;        converter = &#39;latex2text&#39;,&#xA;        -- Highlight for LaTeX blocks&#xA;        highlight = &#39;RenderMarkdownMath&#39;,&#xA;        -- Amount of empty lines above LaTeX blocks&#xA;        top_pad = 0,&#xA;        -- Amount of empty lines below LaTeX blocks&#xA;        bottom_pad = 0,&#xA;    },&#xA;    heading = {&#xA;        -- Turn on / off heading icon &amp;amp; background rendering&#xA;        enabled = true,&#xA;        -- Turn on / off any sign column related rendering&#xA;        sign = true,&#xA;        -- Determines how the icon fills the available space:&#xA;        --  inline:  underlying &#39;#&#39;s are concealed resulting in a left aligned icon&#xA;        --  overlay: result is left padded with spaces to hide any additional &#39;#&#39;&#xA;        position = &#39;overlay&#39;,&#xA;        -- Replaces &#39;#+&#39; of &#39;atx_h._marker&#39;&#xA;        -- The number of &#39;#&#39; in the heading determines the &#39;level&#39;&#xA;        -- The &#39;level&#39; is used to index into the array using a cycle&#xA;        icons = { &#39;󰲡 &#39;, &#39;󰲣 &#39;, &#39;󰲥 &#39;, &#39;󰲧 &#39;, &#39;󰲩 &#39;, &#39;󰲫 &#39; },&#xA;        -- Added to the sign column if enabled&#xA;        -- The &#39;level&#39; is used to index into the array using a cycle&#xA;        signs = { &#39;󰫎 &#39; },&#xA;        -- Width of the heading background:&#xA;        --  block: width of the heading text&#xA;        --  full:  full width of the window&#xA;        -- Can also be an array of the above values in which case the &#39;level&#39; is used&#xA;        -- to index into the array using a clamp&#xA;        width = &#39;full&#39;,&#xA;        -- Amount of padding to add to the left of headings&#xA;        left_pad = 0,&#xA;        -- Amount of padding to add to the right of headings when width is &#39;block&#39;&#xA;        right_pad = 0,&#xA;        -- Minimum width to use for headings when width is &#39;block&#39;&#xA;        min_width = 0,&#xA;        -- Determins if a border is added above and below headings&#xA;        border = false,&#xA;        -- Highlight the start of the border using the foreground highlight&#xA;        border_prefix = false,&#xA;        -- Used above heading for border&#xA;        above = &#39;▄&#39;,&#xA;        -- Used below heading for border&#xA;        below = &#39;▀&#39;,&#xA;        -- The &#39;level&#39; is used to index into the array using a clamp&#xA;        -- Highlight for the heading icon and extends through the entire line&#xA;        backgrounds = {&#xA;            &#39;RenderMarkdownH1Bg&#39;,&#xA;            &#39;RenderMarkdownH2Bg&#39;,&#xA;            &#39;RenderMarkdownH3Bg&#39;,&#xA;            &#39;RenderMarkdownH4Bg&#39;,&#xA;            &#39;RenderMarkdownH5Bg&#39;,&#xA;            &#39;RenderMarkdownH6Bg&#39;,&#xA;        },&#xA;        -- The &#39;level&#39; is used to index into the array using a clamp&#xA;        -- Highlight for the heading and sign icons&#xA;        foregrounds = {&#xA;            &#39;RenderMarkdownH1&#39;,&#xA;            &#39;RenderMarkdownH2&#39;,&#xA;            &#39;RenderMarkdownH3&#39;,&#xA;            &#39;RenderMarkdownH4&#39;,&#xA;            &#39;RenderMarkdownH5&#39;,&#xA;            &#39;RenderMarkdownH6&#39;,&#xA;        },&#xA;    },&#xA;    code = {&#xA;        -- Turn on / off code block &amp;amp; inline code rendering&#xA;        enabled = true,&#xA;        -- Turn on / off any sign column related rendering&#xA;        sign = true,&#xA;        -- Determines how code blocks &amp;amp; inline code are rendered:&#xA;        --  none:     disables all rendering&#xA;        --  normal:   adds highlight group to code blocks &amp;amp; inline code, adds padding to code blocks&#xA;        --  language: adds language icon to sign column if enabled and icon + name above code blocks&#xA;        --  full:     normal + language&#xA;        style = &#39;full&#39;,&#xA;        -- Determines where language icon is rendered:&#xA;        --  right: right side of code block&#xA;        --  left:  left side of code block&#xA;        position = &#39;left&#39;,&#xA;        -- An array of language names for which background highlighting will be disabled&#xA;        -- Likely because that language has background highlights itself&#xA;        disable_background = { &#39;diff&#39; },&#xA;        -- Width of the code block background:&#xA;        --  block: width of the code block&#xA;        --  full:  full width of the window&#xA;        width = &#39;full&#39;,&#xA;        -- Amount of padding to add to the left of code blocks&#xA;        left_pad = 0,&#xA;        -- Amount of padding to add to the right of code blocks when width is &#39;block&#39;&#xA;        right_pad = 0,&#xA;        -- Minimum width to use for code blocks when width is &#39;block&#39;&#xA;        min_width = 0,&#xA;        -- Determins how the top / bottom of code block are rendered:&#xA;        --  thick: use the same highlight as the code body&#xA;        --  thin:  when lines are empty overlay the above &amp;amp; below icons&#xA;        border = &#39;thin&#39;,&#xA;        -- Used above code blocks for thin border&#xA;        above = &#39;▄&#39;,&#xA;        -- Used below code blocks for thin border&#xA;        below = &#39;▀&#39;,&#xA;        -- Highlight for code blocks&#xA;        highlight = &#39;RenderMarkdownCode&#39;,&#xA;        -- Highlight for inline code&#xA;        highlight_inline = &#39;RenderMarkdownCodeInline&#39;,&#xA;    },&#xA;    dash = {&#xA;        -- Turn on / off thematic break rendering&#xA;        enabled = true,&#xA;        -- Replaces &#39;---&#39;|&#39;***&#39;|&#39;___&#39;|&#39;* * *&#39; of &#39;thematic_break&#39;&#xA;        -- The icon gets repeated across the window&#39;s width&#xA;        icon = &#39;─&#39;,&#xA;        -- Width of the generated line:&#xA;        --  &amp;lt;integer&amp;gt;: a hard coded width value&#xA;        --  full:      full width of the window&#xA;        width = &#39;full&#39;,&#xA;        -- Highlight for the whole line generated from the icon&#xA;        highlight = &#39;RenderMarkdownDash&#39;,&#xA;    },&#xA;    bullet = {&#xA;        -- Turn on / off list bullet rendering&#xA;        enabled = true,&#xA;        -- Replaces &#39;-&#39;|&#39;+&#39;|&#39;*&#39; of &#39;list_item&#39;&#xA;        -- How deeply nested the list is determines the &#39;level&#39;&#xA;        -- The &#39;level&#39; is used to index into the array using a cycle&#xA;        -- If the item is a &#39;checkbox&#39; a conceal is used to hide the bullet instead&#xA;        icons = { &#39;●&#39;, &#39;○&#39;, &#39;◆&#39;, &#39;◇&#39; },&#xA;        -- Padding to add to the left of bullet point&#xA;        left_pad = 0,&#xA;        -- Padding to add to the right of bullet point&#xA;        right_pad = 0,&#xA;        -- Highlight for the bullet icon&#xA;        highlight = &#39;RenderMarkdownBullet&#39;,&#xA;    },&#xA;    -- Checkboxes are a special instance of a &#39;list_item&#39; that start with a &#39;shortcut_link&#39;&#xA;    -- There are two special states for unchecked &amp;amp; checked defined in the markdown grammar&#xA;    checkbox = {&#xA;        -- Turn on / off checkbox state rendering&#xA;        enabled = true,&#xA;        unchecked = {&#xA;            -- Replaces &#39;[ ]&#39; of &#39;task_list_marker_unchecked&#39;&#xA;            icon = &#39;󰄱 &#39;,&#xA;            -- Highlight for the unchecked icon&#xA;            highlight = &#39;RenderMarkdownUnchecked&#39;,&#xA;        },&#xA;        checked = {&#xA;            -- Replaces &#39;[x]&#39; of &#39;task_list_marker_checked&#39;&#xA;            icon = &#39;󰱒 &#39;,&#xA;            -- Highligh for the checked icon&#xA;            highlight = &#39;RenderMarkdownChecked&#39;,&#xA;        },&#xA;        -- Define custom checkbox states, more involved as they are not part of the markdown grammar&#xA;        -- As a result this requires neovim &amp;gt;= 0.10.0 since it relies on &#39;inline&#39; extmarks&#xA;        -- Can specify as many additional states as you like following the &#39;todo&#39; pattern below&#xA;        --   The key in this case &#39;todo&#39; is for healthcheck and to allow users to change its values&#xA;        --   &#39;raw&#39;:       Matched against the raw text of a &#39;shortcut_link&#39;&#xA;        --   &#39;rendered&#39;:  Replaces the &#39;raw&#39; value when rendering&#xA;        --   &#39;highlight&#39;: Highlight for the &#39;rendered&#39; icon&#xA;        custom = {&#xA;            todo = { raw = &#39;[-]&#39;, rendered = &#39;󰥔 &#39;, highlight = &#39;RenderMarkdownTodo&#39; },&#xA;        },&#xA;    },&#xA;    quote = {&#xA;        -- Turn on / off block quote &amp;amp; callout rendering&#xA;        enabled = true,&#xA;        -- Replaces &#39;&amp;gt;&#39; of &#39;block_quote&#39;&#xA;        icon = &#39;▋&#39;,&#xA;        -- Whether to repeat icon on wrapped lines. Requires neovim &amp;gt;= 0.10. This will obscure text if&#xA;        -- not configured correctly with :h &#39;showbreak&#39;, :h &#39;breakindent&#39; and :h &#39;breakindentopt&#39;. A&#xA;        -- combination of these that is likely to work is showbreak = &#39;  &#39; (2 spaces), breakindent = true,&#xA;        -- breakindentopt = &#39;&#39; (empty string). These values are not validated by this plugin. If you want&#xA;        -- to avoid adding these to your main configuration then set them in win_options for this plugin.&#xA;        repeat_linebreak = false,&#xA;        -- Highlight for the quote icon&#xA;        highlight = &#39;RenderMarkdownQuote&#39;,&#xA;    },&#xA;    pipe_table = {&#xA;        -- Turn on / off pipe table rendering&#xA;        enabled = true,&#xA;        -- Pre configured settings largely for setting table border easier&#xA;        --  heavy:  use thicker border characters&#xA;        --  double: use double line border characters&#xA;        --  round:  use round border corners&#xA;        --  none:   does nothing&#xA;        preset = &#39;none&#39;,&#xA;        -- Determines how the table as a whole is rendered:&#xA;        --  none:   disables all rendering&#xA;        --  normal: applies the &#39;cell&#39; style rendering to each row of the table&#xA;        --  full:   normal + a top &amp;amp; bottom line that fill out the table when lengths match&#xA;        style = &#39;full&#39;,&#xA;        -- Determines how individual cells of a table are rendered:&#xA;        --  overlay: writes completely over the table, removing conceal behavior and highlights&#xA;        --  raw:     replaces only the &#39;|&#39; characters in each row, leaving the cells unmodified&#xA;        --  padded:  raw + cells are padded with inline extmarks to make up for any concealed text&#xA;        cell = &#39;padded&#39;,&#xA;        -- Gets placed in delimiter row for each column, position is based on alignmnet&#xA;        alignment_indicator = &#39;━&#39;,&#xA;        -- Characters used to replace table border&#xA;        -- Correspond to top(3), delimiter(3), bottom(3), vertical, &amp;amp; horizontal&#xA;        -- stylua: ignore&#xA;        border = {&#xA;            &#39;┌&#39;, &#39;┬&#39;, &#39;┐&#39;,&#xA;            &#39;├&#39;, &#39;┼&#39;, &#39;┤&#39;,&#xA;            &#39;└&#39;, &#39;┴&#39;, &#39;┘&#39;,&#xA;            &#39;│&#39;, &#39;─&#39;,&#xA;        },&#xA;        -- Highlight for table heading, delimiter, and the line above&#xA;        head = &#39;RenderMarkdownTableHead&#39;,&#xA;        -- Highlight for everything else, main table rows and the line below&#xA;        row = &#39;RenderMarkdownTableRow&#39;,&#xA;        -- Highlight for inline padding used to add back concealed space&#xA;        filler = &#39;RenderMarkdownTableFill&#39;,&#xA;    },&#xA;    -- Callouts are a special instance of a &#39;block_quote&#39; that start with a &#39;shortcut_link&#39;&#xA;    -- Can specify as many additional values as you like following the pattern from any below, such as &#39;note&#39;&#xA;    --   The key in this case &#39;note&#39; is for healthcheck and to allow users to change its values&#xA;    --   &#39;raw&#39;:       Matched against the raw text of a &#39;shortcut_link&#39;, case insensitive&#xA;    --   &#39;rendered&#39;:  Replaces the &#39;raw&#39; value when rendering&#xA;    --   &#39;highlight&#39;: Highlight for the &#39;rendered&#39; text and quote markers&#xA;    callout = {&#xA;        note = { raw = &#39;[!NOTE]&#39;, rendered = &#39;󰋽 Note&#39;, highlight = &#39;RenderMarkdownInfo&#39; },&#xA;        tip = { raw = &#39;[!TIP]&#39;, rendered = &#39;󰌶 Tip&#39;, highlight = &#39;RenderMarkdownSuccess&#39; },&#xA;        important = { raw = &#39;[!IMPORTANT]&#39;, rendered = &#39;󰅾 Important&#39;, highlight = &#39;RenderMarkdownHint&#39; },&#xA;        warning = { raw = &#39;[!WARNING]&#39;, rendered = &#39;󰀪 Warning&#39;, highlight = &#39;RenderMarkdownWarn&#39; },&#xA;        caution = { raw = &#39;[!CAUTION]&#39;, rendered = &#39;󰳦 Caution&#39;, highlight = &#39;RenderMarkdownError&#39; },&#xA;        -- Obsidian: https://help.a.md/Editing+and+formatting/Callouts&#xA;        abstract = { raw = &#39;[!ABSTRACT]&#39;, rendered = &#39;󰨸 Abstract&#39;, highlight = &#39;RenderMarkdownInfo&#39; },&#xA;        todo = { raw = &#39;[!TODO]&#39;, rendered = &#39;󰗡 Todo&#39;, highlight = &#39;RenderMarkdownInfo&#39; },&#xA;        success = { raw = &#39;[!SUCCESS]&#39;, rendered = &#39;󰄬 Success&#39;, highlight = &#39;RenderMarkdownSuccess&#39; },&#xA;        question = { raw = &#39;[!QUESTION]&#39;, rendered = &#39;󰘥 Question&#39;, highlight = &#39;RenderMarkdownWarn&#39; },&#xA;        failure = { raw = &#39;[!FAILURE]&#39;, rendered = &#39;󰅖 Failure&#39;, highlight = &#39;RenderMarkdownError&#39; },&#xA;        danger = { raw = &#39;[!DANGER]&#39;, rendered = &#39;󱐌 Danger&#39;, highlight = &#39;RenderMarkdownError&#39; },&#xA;        bug = { raw = &#39;[!BUG]&#39;, rendered = &#39;󰨰 Bug&#39;, highlight = &#39;RenderMarkdownError&#39; },&#xA;        example = { raw = &#39;[!EXAMPLE]&#39;, rendered = &#39;󰉹 Example&#39;, highlight = &#39;RenderMarkdownHint&#39; },&#xA;        quote = { raw = &#39;[!QUOTE]&#39;, rendered = &#39;󱆨 Quote&#39;, highlight = &#39;RenderMarkdownQuote&#39; },&#xA;    },&#xA;    link = {&#xA;        -- Turn on / off inline link icon rendering&#xA;        enabled = true,&#xA;        -- Inlined with &#39;image&#39; elements&#xA;        image = &#39;󰥶 &#39;,&#xA;        -- Fallback icon for &#39;inline_link&#39; elements&#xA;        hyperlink = &#39;󰌹 &#39;,&#xA;        -- Applies to the fallback inlined icon&#xA;        highlight = &#39;RenderMarkdownLink&#39;,&#xA;        -- Define custom destination patterns so icons can quickly inform you of what a link&#xA;        -- contains. Applies to &#39;inline_link&#39; and wikilink nodes.&#xA;        -- Can specify as many additional values as you like following the &#39;web&#39; pattern below&#xA;        --   The key in this case &#39;web&#39; is for healthcheck and to allow users to change its values&#xA;        --   &#39;pattern&#39;:   Matched against the destination text see :h lua-pattern&#xA;        --   &#39;icon&#39;:      Gets inlined before the link text&#xA;        --   &#39;highlight&#39;: Highlight for the &#39;icon&#39;&#xA;        custom = {&#xA;            web = { pattern = &#39;^http[s]?://&#39;, icon = &#39;󰖟 &#39;, highlight = &#39;RenderMarkdownLink&#39; },&#xA;        },&#xA;    },&#xA;    sign = {&#xA;        -- Turn on / off sign rendering&#xA;        enabled = true,&#xA;        -- Applies to background of sign text&#xA;        highlight = &#39;RenderMarkdownSign&#39;,&#xA;    },&#xA;    -- Window options to use that change between rendered and raw view&#xA;    win_options = {&#xA;        -- See :h &#39;conceallevel&#39;&#xA;        conceallevel = {&#xA;            -- Used when not being rendered, get user setting&#xA;            default = vim.api.nvim_get_option_value(&#39;conceallevel&#39;, {}),&#xA;            -- Used when being rendered, concealed text is completely hidden&#xA;            rendered = 3,&#xA;        },&#xA;        -- See :h &#39;concealcursor&#39;&#xA;        concealcursor = {&#xA;            -- Used when not being rendered, get user setting&#xA;            default = vim.api.nvim_get_option_value(&#39;concealcursor&#39;, {}),&#xA;            -- Used when being rendered, disable concealing text in all modes&#xA;            rendered = &#39;&#39;,&#xA;        },&#xA;    },&#xA;    -- More granular configuration mechanism, allows different aspects of buffers&#xA;    -- to have their own behavior. Values default to the top level configuration&#xA;    -- if no override is provided. Supports the following fields:&#xA;    --   enabled, max_file_size, debounce, render_modes, anti_conceal, heading, code,&#xA;    --   dash, bullet, checkbox, quote, pipe_table, callout, link, sign, win_options&#xA;    overrides = {&#xA;        -- Overrides for different buftypes, see :h &#39;buftype&#39;&#xA;        buftype = {&#xA;            nofile = {&#xA;                sign = { enabled = false },&#xA;            },&#xA;        },&#xA;    },&#xA;    -- Mapping from treesitter language to user defined handlers&#xA;    -- See &#39;Custom Handlers&#39; document for more info&#xA;    custom_handlers = {},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;We use the following definitions when discussing indexing into arrays:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Cycle: Indexed &lt;code&gt;mod&lt;/code&gt; the length. Example: &lt;code&gt;{ 1, 2, 3 }&lt;/code&gt; @ 4 = 1.&lt;/li&gt; &#xA; &lt;li&gt;Clamp: Indexed normally but larger values use the last value in the array. Example: &lt;code&gt;{ 1, 2, 3 }&lt;/code&gt; @ 4 = 3.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Headings&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/Headings&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    heading = {&#xA;        -- Turn on / off heading icon &amp;amp; background rendering&#xA;        enabled = true,&#xA;        -- Turn on / off any sign column related rendering&#xA;        sign = true,&#xA;        -- Determines how the icon fills the available space:&#xA;        --  inline:  underlying &#39;#&#39;s are concealed resulting in a left aligned icon&#xA;        --  overlay: result is left padded with spaces to hide any additional &#39;#&#39;&#xA;        position = &#39;overlay&#39;,&#xA;        -- Replaces &#39;#+&#39; of &#39;atx_h._marker&#39;&#xA;        -- The number of &#39;#&#39; in the heading determines the &#39;level&#39;&#xA;        -- The &#39;level&#39; is used to index into the array using a cycle&#xA;        icons = { &#39;󰲡 &#39;, &#39;󰲣 &#39;, &#39;󰲥 &#39;, &#39;󰲧 &#39;, &#39;󰲩 &#39;, &#39;󰲫 &#39; },&#xA;        -- Added to the sign column if enabled&#xA;        -- The &#39;level&#39; is used to index into the array using a cycle&#xA;        signs = { &#39;󰫎 &#39; },&#xA;        -- Width of the heading background:&#xA;        --  block: width of the heading text&#xA;        --  full:  full width of the window&#xA;        -- Can also be an array of the above values in which case the &#39;level&#39; is used&#xA;        -- to index into the array using a clamp&#xA;        width = &#39;full&#39;,&#xA;        -- Amount of padding to add to the left of headings&#xA;        left_pad = 0,&#xA;        -- Amount of padding to add to the right of headings when width is &#39;block&#39;&#xA;        right_pad = 0,&#xA;        -- Minimum width to use for headings when width is &#39;block&#39;&#xA;        min_width = 0,&#xA;        -- Determins if a border is added above and below headings&#xA;        border = false,&#xA;        -- Highlight the start of the border using the foreground highlight&#xA;        border_prefix = false,&#xA;        -- Used above heading for border&#xA;        above = &#39;▄&#39;,&#xA;        -- Used below heading for border&#xA;        below = &#39;▀&#39;,&#xA;        -- The &#39;level&#39; is used to index into the array using a clamp&#xA;        -- Highlight for the heading icon and extends through the entire line&#xA;        backgrounds = {&#xA;            &#39;RenderMarkdownH1Bg&#39;,&#xA;            &#39;RenderMarkdownH2Bg&#39;,&#xA;            &#39;RenderMarkdownH3Bg&#39;,&#xA;            &#39;RenderMarkdownH4Bg&#39;,&#xA;            &#39;RenderMarkdownH5Bg&#39;,&#xA;            &#39;RenderMarkdownH6Bg&#39;,&#xA;        },&#xA;        -- The &#39;level&#39; is used to index into the array using a clamp&#xA;        -- Highlight for the heading and sign icons&#xA;        foregrounds = {&#xA;            &#39;RenderMarkdownH1&#39;,&#xA;            &#39;RenderMarkdownH2&#39;,&#xA;            &#39;RenderMarkdownH3&#39;,&#xA;            &#39;RenderMarkdownH4&#39;,&#xA;            &#39;RenderMarkdownH5&#39;,&#xA;            &#39;RenderMarkdownH6&#39;,&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Blocks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/CodeBlocks&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    code = {&#xA;        -- Turn on / off code block &amp;amp; inline code rendering&#xA;        enabled = true,&#xA;        -- Turn on / off any sign column related rendering&#xA;        sign = true,&#xA;        -- Determines how code blocks &amp;amp; inline code are rendered:&#xA;        --  none:     disables all rendering&#xA;        --  normal:   adds highlight group to code blocks &amp;amp; inline code, adds padding to code blocks&#xA;        --  language: adds language icon to sign column if enabled and icon + name above code blocks&#xA;        --  full:     normal + language&#xA;        style = &#39;full&#39;,&#xA;        -- Determines where language icon is rendered:&#xA;        --  right: right side of code block&#xA;        --  left:  left side of code block&#xA;        position = &#39;left&#39;,&#xA;        -- An array of language names for which background highlighting will be disabled&#xA;        -- Likely because that language has background highlights itself&#xA;        disable_background = { &#39;diff&#39; },&#xA;        -- Width of the code block background:&#xA;        --  block: width of the code block&#xA;        --  full:  full width of the window&#xA;        width = &#39;full&#39;,&#xA;        -- Amount of padding to add to the left of code blocks&#xA;        left_pad = 0,&#xA;        -- Amount of padding to add to the right of code blocks when width is &#39;block&#39;&#xA;        right_pad = 0,&#xA;        -- Minimum width to use for code blocks when width is &#39;block&#39;&#xA;        min_width = 0,&#xA;        -- Determins how the top / bottom of code block are rendered:&#xA;        --  thick: use the same highlight as the code body&#xA;        --  thin:  when lines are empty overlay the above &amp;amp; below icons&#xA;        border = &#39;thin&#39;,&#xA;        -- Used above code blocks for thin border&#xA;        above = &#39;▄&#39;,&#xA;        -- Used below code blocks for thin border&#xA;        below = &#39;▀&#39;,&#xA;        -- Highlight for code blocks&#xA;        highlight = &#39;RenderMarkdownCode&#39;,&#xA;        -- Highlight for inline code&#xA;        highlight_inline = &#39;RenderMarkdownCodeInline&#39;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dashed Line&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/DashedLine&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    dash = {&#xA;        -- Turn on / off thematic break rendering&#xA;        enabled = true,&#xA;        -- Replaces &#39;---&#39;|&#39;***&#39;|&#39;___&#39;|&#39;* * *&#39; of &#39;thematic_break&#39;&#xA;        -- The icon gets repeated across the window&#39;s width&#xA;        icon = &#39;─&#39;,&#xA;        -- Width of the generated line:&#xA;        --  &amp;lt;integer&amp;gt;: a hard coded width value&#xA;        --  full:      full width of the window&#xA;        width = &#39;full&#39;,&#xA;        -- Highlight for the whole line generated from the icon&#xA;        highlight = &#39;RenderMarkdownDash&#39;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List Bullets&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/ListBullets&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    bullet = {&#xA;        -- Turn on / off list bullet rendering&#xA;        enabled = true,&#xA;        -- Replaces &#39;-&#39;|&#39;+&#39;|&#39;*&#39; of &#39;list_item&#39;&#xA;        -- How deeply nested the list is determines the &#39;level&#39;&#xA;        -- The &#39;level&#39; is used to index into the array using a cycle&#xA;        -- If the item is a &#39;checkbox&#39; a conceal is used to hide the bullet instead&#xA;        icons = { &#39;●&#39;, &#39;○&#39;, &#39;◆&#39;, &#39;◇&#39; },&#xA;        -- Padding to add to the left of bullet point&#xA;        left_pad = 0,&#xA;        -- Padding to add to the right of bullet point&#xA;        right_pad = 0,&#xA;        -- Highlight for the bullet icon&#xA;        highlight = &#39;RenderMarkdownBullet&#39;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Checkboxes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/Checkboxes&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    -- Checkboxes are a special instance of a &#39;list_item&#39; that start with a &#39;shortcut_link&#39;&#xA;    -- There are two special states for unchecked &amp;amp; checked defined in the markdown grammar&#xA;    checkbox = {&#xA;        -- Turn on / off checkbox state rendering&#xA;        enabled = true,&#xA;        unchecked = {&#xA;            -- Replaces &#39;[ ]&#39; of &#39;task_list_marker_unchecked&#39;&#xA;            icon = &#39;󰄱 &#39;,&#xA;            -- Highlight for the unchecked icon&#xA;            highlight = &#39;RenderMarkdownUnchecked&#39;,&#xA;        },&#xA;        checked = {&#xA;            -- Replaces &#39;[x]&#39; of &#39;task_list_marker_checked&#39;&#xA;            icon = &#39;󰱒 &#39;,&#xA;            -- Highligh for the checked icon&#xA;            highlight = &#39;RenderMarkdownChecked&#39;,&#xA;        },&#xA;        -- Define custom checkbox states, more involved as they are not part of the markdown grammar&#xA;        -- As a result this requires neovim &amp;gt;= 0.10.0 since it relies on &#39;inline&#39; extmarks&#xA;        -- Can specify as many additional states as you like following the &#39;todo&#39; pattern below&#xA;        --   The key in this case &#39;todo&#39; is for healthcheck and to allow users to change its values&#xA;        --   &#39;raw&#39;:       Matched against the raw text of a &#39;shortcut_link&#39;&#xA;        --   &#39;rendered&#39;:  Replaces the &#39;raw&#39; value when rendering&#xA;        --   &#39;highlight&#39;: Highlight for the &#39;rendered&#39; icon&#xA;        custom = {&#xA;            todo = { raw = &#39;[-]&#39;, rendered = &#39;󰥔 &#39;, highlight = &#39;RenderMarkdownTodo&#39; },&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Block Quotes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/BlockQuotes&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    quote = {&#xA;        -- Turn on / off block quote &amp;amp; callout rendering&#xA;        enabled = true,&#xA;        -- Replaces &#39;&amp;gt;&#39; of &#39;block_quote&#39;&#xA;        icon = &#39;▋&#39;,&#xA;        -- Whether to repeat icon on wrapped lines. Requires neovim &amp;gt;= 0.10. This will obscure text if&#xA;        -- not configured correctly with :h &#39;showbreak&#39;, :h &#39;breakindent&#39; and :h &#39;breakindentopt&#39;. A&#xA;        -- combination of these that is likely to work is showbreak = &#39;  &#39; (2 spaces), breakindent = true,&#xA;        -- breakindentopt = &#39;&#39; (empty string). These values are not validated by this plugin. If you want&#xA;        -- to avoid adding these to your main configuration then set them in win_options for this plugin.&#xA;        repeat_linebreak = false,&#xA;        -- Highlight for the quote icon&#xA;        highlight = &#39;RenderMarkdownQuote&#39;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tables&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/Tables&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    pipe_table = {&#xA;        -- Turn on / off pipe table rendering&#xA;        enabled = true,&#xA;        -- Pre configured settings largely for setting table border easier&#xA;        --  heavy:  use thicker border characters&#xA;        --  double: use double line border characters&#xA;        --  round:  use round border corners&#xA;        --  none:   does nothing&#xA;        preset = &#39;none&#39;,&#xA;        -- Determines how the table as a whole is rendered:&#xA;        --  none:   disables all rendering&#xA;        --  normal: applies the &#39;cell&#39; style rendering to each row of the table&#xA;        --  full:   normal + a top &amp;amp; bottom line that fill out the table when lengths match&#xA;        style = &#39;full&#39;,&#xA;        -- Determines how individual cells of a table are rendered:&#xA;        --  overlay: writes completely over the table, removing conceal behavior and highlights&#xA;        --  raw:     replaces only the &#39;|&#39; characters in each row, leaving the cells unmodified&#xA;        --  padded:  raw + cells are padded with inline extmarks to make up for any concealed text&#xA;        cell = &#39;padded&#39;,&#xA;        -- Gets placed in delimiter row for each column, position is based on alignmnet&#xA;        alignment_indicator = &#39;━&#39;,&#xA;        -- Characters used to replace table border&#xA;        -- Correspond to top(3), delimiter(3), bottom(3), vertical, &amp;amp; horizontal&#xA;        -- stylua: ignore&#xA;        border = {&#xA;            &#39;┌&#39;, &#39;┬&#39;, &#39;┐&#39;,&#xA;            &#39;├&#39;, &#39;┼&#39;, &#39;┤&#39;,&#xA;            &#39;└&#39;, &#39;┴&#39;, &#39;┘&#39;,&#xA;            &#39;│&#39;, &#39;─&#39;,&#xA;        },&#xA;        -- Highlight for table heading, delimiter, and the line above&#xA;        head = &#39;RenderMarkdownTableHead&#39;,&#xA;        -- Highlight for everything else, main table rows and the line below&#xA;        row = &#39;RenderMarkdownTableRow&#39;,&#xA;        -- Highlight for inline padding used to add back concealed space&#xA;        filler = &#39;RenderMarkdownTableFill&#39;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Callouts&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/Callouts&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    -- Callouts are a special instance of a &#39;block_quote&#39; that start with a &#39;shortcut_link&#39;&#xA;    -- Can specify as many additional values as you like following the pattern from any below, such as &#39;note&#39;&#xA;    --   The key in this case &#39;note&#39; is for healthcheck and to allow users to change its values&#xA;    --   &#39;raw&#39;:       Matched against the raw text of a &#39;shortcut_link&#39;, case insensitive&#xA;    --   &#39;rendered&#39;:  Replaces the &#39;raw&#39; value when rendering&#xA;    --   &#39;highlight&#39;: Highlight for the &#39;rendered&#39; text and quote markers&#xA;    callout = {&#xA;        note = { raw = &#39;[!NOTE]&#39;, rendered = &#39;󰋽 Note&#39;, highlight = &#39;RenderMarkdownInfo&#39; },&#xA;        tip = { raw = &#39;[!TIP]&#39;, rendered = &#39;󰌶 Tip&#39;, highlight = &#39;RenderMarkdownSuccess&#39; },&#xA;        important = { raw = &#39;[!IMPORTANT]&#39;, rendered = &#39;󰅾 Important&#39;, highlight = &#39;RenderMarkdownHint&#39; },&#xA;        warning = { raw = &#39;[!WARNING]&#39;, rendered = &#39;󰀪 Warning&#39;, highlight = &#39;RenderMarkdownWarn&#39; },&#xA;        caution = { raw = &#39;[!CAUTION]&#39;, rendered = &#39;󰳦 Caution&#39;, highlight = &#39;RenderMarkdownError&#39; },&#xA;        -- Obsidian: https://help.a.md/Editing+and+formatting/Callouts&#xA;        abstract = { raw = &#39;[!ABSTRACT]&#39;, rendered = &#39;󰨸 Abstract&#39;, highlight = &#39;RenderMarkdownInfo&#39; },&#xA;        todo = { raw = &#39;[!TODO]&#39;, rendered = &#39;󰗡 Todo&#39;, highlight = &#39;RenderMarkdownInfo&#39; },&#xA;        success = { raw = &#39;[!SUCCESS]&#39;, rendered = &#39;󰄬 Success&#39;, highlight = &#39;RenderMarkdownSuccess&#39; },&#xA;        question = { raw = &#39;[!QUESTION]&#39;, rendered = &#39;󰘥 Question&#39;, highlight = &#39;RenderMarkdownWarn&#39; },&#xA;        failure = { raw = &#39;[!FAILURE]&#39;, rendered = &#39;󰅖 Failure&#39;, highlight = &#39;RenderMarkdownError&#39; },&#xA;        danger = { raw = &#39;[!DANGER]&#39;, rendered = &#39;󱐌 Danger&#39;, highlight = &#39;RenderMarkdownError&#39; },&#xA;        bug = { raw = &#39;[!BUG]&#39;, rendered = &#39;󰨰 Bug&#39;, highlight = &#39;RenderMarkdownError&#39; },&#xA;        example = { raw = &#39;[!EXAMPLE]&#39;, rendered = &#39;󰉹 Example&#39;, highlight = &#39;RenderMarkdownHint&#39; },&#xA;        quote = { raw = &#39;[!QUOTE]&#39;, rendered = &#39;󱆨 Quote&#39;, highlight = &#39;RenderMarkdownQuote&#39; },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/Links&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    link = {&#xA;        -- Turn on / off inline link icon rendering&#xA;        enabled = true,&#xA;        -- Inlined with &#39;image&#39; elements&#xA;        image = &#39;󰥶 &#39;,&#xA;        -- Fallback icon for &#39;inline_link&#39; elements&#xA;        hyperlink = &#39;󰌹 &#39;,&#xA;        -- Applies to the fallback inlined icon&#xA;        highlight = &#39;RenderMarkdownLink&#39;,&#xA;        -- Define custom destination patterns so icons can quickly inform you of what a link&#xA;        -- contains. Applies to &#39;inline_link&#39; and wikilink nodes.&#xA;        -- Can specify as many additional values as you like following the &#39;web&#39; pattern below&#xA;        --   The key in this case &#39;web&#39; is for healthcheck and to allow users to change its values&#xA;        --   &#39;pattern&#39;:   Matched against the destination text see :h lua-pattern&#xA;        --   &#39;icon&#39;:      Gets inlined before the link text&#xA;        --   &#39;highlight&#39;: Highlight for the &#39;icon&#39;&#xA;        custom = {&#xA;            web = { pattern = &#39;^http[s]?://&#39;, icon = &#39;󰖟 &#39;, highlight = &#39;RenderMarkdownLink&#39; },&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Signs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/wiki/Signs&#34;&gt;Wiki Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    sign = {&#xA;        -- Turn on / off sign rendering&#xA;        enabled = true,&#xA;        -- Applies to background of sign text&#xA;        highlight = &#39;RenderMarkdownSign&#39;,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Colors&lt;/h1&gt; &#xA;&lt;p&gt;The table below shows all the highlight groups with their default link&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Highlight Group&lt;/th&gt; &#xA;   &lt;th&gt;Default Group&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH1&lt;/td&gt; &#xA;   &lt;td&gt;@markup.heading.1.markdown&lt;/td&gt; &#xA;   &lt;td&gt;H1 icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH2&lt;/td&gt; &#xA;   &lt;td&gt;@markup.heading.2.markdown&lt;/td&gt; &#xA;   &lt;td&gt;H2 icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH3&lt;/td&gt; &#xA;   &lt;td&gt;@markup.heading.3.markdown&lt;/td&gt; &#xA;   &lt;td&gt;H3 icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH4&lt;/td&gt; &#xA;   &lt;td&gt;@markup.heading.4.markdown&lt;/td&gt; &#xA;   &lt;td&gt;H4 icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH5&lt;/td&gt; &#xA;   &lt;td&gt;@markup.heading.5.markdown&lt;/td&gt; &#xA;   &lt;td&gt;H5 icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH6&lt;/td&gt; &#xA;   &lt;td&gt;@markup.heading.6.markdown&lt;/td&gt; &#xA;   &lt;td&gt;H6 icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH1Bg&lt;/td&gt; &#xA;   &lt;td&gt;DiffAdd&lt;/td&gt; &#xA;   &lt;td&gt;H1 background line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH2Bg&lt;/td&gt; &#xA;   &lt;td&gt;DiffChange&lt;/td&gt; &#xA;   &lt;td&gt;H2 background line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH3Bg&lt;/td&gt; &#xA;   &lt;td&gt;DiffDelete&lt;/td&gt; &#xA;   &lt;td&gt;H3 background line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH4Bg&lt;/td&gt; &#xA;   &lt;td&gt;DiffDelete&lt;/td&gt; &#xA;   &lt;td&gt;H4 background line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH5Bg&lt;/td&gt; &#xA;   &lt;td&gt;DiffDelete&lt;/td&gt; &#xA;   &lt;td&gt;H5 background line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownH6Bg&lt;/td&gt; &#xA;   &lt;td&gt;DiffDelete&lt;/td&gt; &#xA;   &lt;td&gt;H6 background line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownCode&lt;/td&gt; &#xA;   &lt;td&gt;ColorColumn&lt;/td&gt; &#xA;   &lt;td&gt;Code block background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownCodeInline&lt;/td&gt; &#xA;   &lt;td&gt;RenderMarkdownCode&lt;/td&gt; &#xA;   &lt;td&gt;Inline code background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownBullet&lt;/td&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;List item bullet points&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownQuote&lt;/td&gt; &#xA;   &lt;td&gt;@markup.quote&lt;/td&gt; &#xA;   &lt;td&gt;Block quote marker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownDash&lt;/td&gt; &#xA;   &lt;td&gt;LineNr&lt;/td&gt; &#xA;   &lt;td&gt;Thematic break line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownLink&lt;/td&gt; &#xA;   &lt;td&gt;@markup.link.label.markdown_inline&lt;/td&gt; &#xA;   &lt;td&gt;Image &amp;amp; hyperlink icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownSign&lt;/td&gt; &#xA;   &lt;td&gt;SignColumn&lt;/td&gt; &#xA;   &lt;td&gt;Sign column background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownMath&lt;/td&gt; &#xA;   &lt;td&gt;@markup.math&lt;/td&gt; &#xA;   &lt;td&gt;LaTeX lines&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownUnchecked&lt;/td&gt; &#xA;   &lt;td&gt;@markup.list.unchecked&lt;/td&gt; &#xA;   &lt;td&gt;Unchecked checkbox&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownChecked&lt;/td&gt; &#xA;   &lt;td&gt;@markup.list.checked&lt;/td&gt; &#xA;   &lt;td&gt;Checked checkbox&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownTodo&lt;/td&gt; &#xA;   &lt;td&gt;@markup.raw&lt;/td&gt; &#xA;   &lt;td&gt;Todo custom checkbox&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownTableHead&lt;/td&gt; &#xA;   &lt;td&gt;@markup.heading&lt;/td&gt; &#xA;   &lt;td&gt;Pipe table heading rows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownTableRow&lt;/td&gt; &#xA;   &lt;td&gt;Normal&lt;/td&gt; &#xA;   &lt;td&gt;Pipe table body rows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownTableFill&lt;/td&gt; &#xA;   &lt;td&gt;Conceal&lt;/td&gt; &#xA;   &lt;td&gt;Pipe table inline padding&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownSuccess&lt;/td&gt; &#xA;   &lt;td&gt;DiagnosticOk&lt;/td&gt; &#xA;   &lt;td&gt;Success related callouts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownInfo&lt;/td&gt; &#xA;   &lt;td&gt;DiagnosticInfo&lt;/td&gt; &#xA;   &lt;td&gt;Info related callouts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownHint&lt;/td&gt; &#xA;   &lt;td&gt;DiagnosticHint&lt;/td&gt; &#xA;   &lt;td&gt;Hint related callouts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownWarn&lt;/td&gt; &#xA;   &lt;td&gt;DiagnosticWarn&lt;/td&gt; &#xA;   &lt;td&gt;Warning related callouts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RenderMarkdownError&lt;/td&gt; &#xA;   &lt;td&gt;DiagnosticError&lt;/td&gt; &#xA;   &lt;td&gt;Error related callouts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Info&lt;/h1&gt; &#xA;&lt;h2&gt;vimwiki&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/vimwiki/vimwiki&#34;&gt;vimwiki&lt;/a&gt; overrides the &lt;code&gt;filetype&lt;/code&gt; of &lt;code&gt;markdown&lt;/code&gt; files, as such there are additional setup steps.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Add &lt;code&gt;vimwiki&lt;/code&gt; to the &lt;code&gt;file_types&lt;/code&gt; configuration of this plugin&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;render-markdown&#39;).setup({&#xA;    file_types = { &#39;markdown&#39;, &#39;vimwiki&#39; },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Register &lt;code&gt;markdown&lt;/code&gt; as the parser for &lt;code&gt;vimwiki&lt;/code&gt; files&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.treesitter.language.register(&#39;markdown&#39;, &#39;vimwiki&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;obsidian.nvim&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/epwalsh/obsidian.nvim&#34;&gt;obsidian.nvim&lt;/a&gt; provides UI functionality that is enabled by default. While there may be a way to have the 2 work together, for the foreseeable future only one of these plugins should be used for the UI. If you choose this plugin disable the &lt;code&gt;obsidian.nvim&lt;/code&gt; UI with:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;obsidian&#39;).setup({&#xA;    ui = { enable = false },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also do something more custom like lazy loading this plugin via a command and adding logic to the config method to disable &lt;code&gt;obsidian.nvim&lt;/code&gt; as suggested in &lt;a href=&#34;https://github.com/MeanderingProgrammer/render-markdown.nvim/issues/116&#34;&gt;#116&lt;/a&gt;, though things like this can break at any time given the reliance on internal logic:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;    &#39;MeanderingProgrammer/render-markdown.nvim&#39;,&#xA;    cmd = { &#39;RenderMarkdown&#39; },&#xA;    dependencies = { &#39;nvim-treesitter/nvim-treesitter&#39;, &#39;echasnovski/mini.nvim&#39; },&#xA;    config = function()&#xA;        require(&#39;obsidian&#39;).get_client().opts.ui.enable = false&#xA;        vim.api.nvim_buf_clear_namespace(0, vim.api.nvim_get_namespaces()[&#39;ObsidianUI&#39;], 0, -1)&#xA;        require(&#39;render-markdown&#39;).setup({})&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Images&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Images are only supported so far as this plugin will not interfere with others like &lt;a href=&#34;https://github.com/3rd/image.nvim&#34;&gt;image.nvim&lt;/a&gt;, however nothing is done natively by this plugin. It is recommended to enable the &lt;code&gt;only_render_image_at_cursor&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Additional&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MeanderingProgrammer/render-markdown.nvim/main/doc/limitations.md&#34;&gt;Limitations&lt;/a&gt;: Known limitations of this plugin&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MeanderingProgrammer/render-markdown.nvim/main/doc/custom-handlers.md&#34;&gt;Custom Handlers&lt;/a&gt;: Allow users to integrate custom rendering for either unsupported languages or to override / extend builtin implementations&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MeanderingProgrammer/render-markdown.nvim/main/doc/troubleshooting.md&#34;&gt;Troubleshooting Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MeanderingProgrammer/render-markdown.nvim/main/doc/purpose.md&#34;&gt;Purpose&lt;/a&gt;: Why this plugin exists&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/MeanderingProgrammer/render-markdown.nvim/main/doc/markdown-ecosystem.md&#34;&gt;Markdown Ecosystem&lt;/a&gt;: Information about other &lt;code&gt;markdown&lt;/code&gt; related plugins and how they co-exist&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>