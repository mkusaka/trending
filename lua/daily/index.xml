<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-17T01:49:27Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>p00f/nvim-ts-rainbow</title>
    <updated>2022-08-17T01:49:27Z</updated>
    <id>tag:github.com,2022-08-17:/p00f/nvim-ts-rainbow</id>
    <link href="https://github.com/p00f/nvim-ts-rainbow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Rainbow parentheses for neovim using tree-sitter. https://sr.ht/~p00f/nvim-ts-rainbow preferred&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ðŸŒˆ nvim-ts-rainbow ðŸŒˆ&lt;/h1&gt; &#xA;&lt;p&gt;Rainbow parentheses for neovim using tree-sitter. This is a module for &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt;, not a standalone plugin. It requires and is configured via nvim-treesitter&lt;/p&gt; &#xA;&lt;p&gt;Should work with any language supported by nvim-treesitter. If any language is missing, please open an issue/PR.&lt;/p&gt; &#xA;&lt;p&gt;Only neovim nightly is targeted.&lt;/p&gt; &#xA;&lt;h2&gt;Installation and setup&lt;/h2&gt; &#xA;&lt;p&gt;Install and set up nvim-treesitter according to their documentation. Install this plugin, then add a &lt;code&gt;rainbow&lt;/code&gt; section in the &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter#modules&#34;&gt;call to &lt;code&gt;require(&#34;nvim-treesitter.configs&#34;).setup()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;nvim-treesitter.configs&#34;).setup {&#xA;  highlight = {&#xA;      -- ...&#xA;  },&#xA;  -- ...&#xA;  rainbow = {&#xA;    enable = true,&#xA;    -- disable = { &#34;jsx&#34;, &#34;cpp&#34; }, list of languages you want to disable the plugin for&#xA;    extended_mode = true, -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -&amp;gt; boolean&#xA;    max_file_lines = nil, -- Do not enable for files with more than n lines, int&#xA;    -- colors = {}, -- table of hex strings&#xA;    -- termcolors = {} -- table of colour name strings&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to enable it only for some filetypes and disable it for everything else, see &lt;a href=&#34;https://github.com/p00f/nvim-ts-rainbow/issues/30#issuecomment-850991264&#34;&gt;https://github.com/p00f/nvim-ts-rainbow/issues/30#issuecomment-850991264&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Colours&lt;/h3&gt; &#xA;&lt;p&gt;To change the colours you can set them in the setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup{&#xA;  rainbow = {&#xA;    -- Setting colors&#xA;    colors = {&#xA;      -- Colors here&#xA;    },&#xA;    -- Term colors&#xA;    termcolors = {&#xA;      -- Term colors here&#xA;    }&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to override some colours (you can only change colours 1 through 7 this way), you can do it in your init.vim: (thanks @delphinus !). You can also use this while writing a colorscheme&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi rainbowcol1 guifg=#123456&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/p00f/nvim-ts-rainbow/master/screenshots/java.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The screenshots below use a different colorscheme&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fennel:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/p00f/nvim-ts-rainbow/master/screenshots/fnlwezterm.png&#34; alt=&#34;alt text&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/p00f/nvim-ts-rainbow/master/screenshots/fnltreesitter.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;C++:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/p00f/nvim-ts-rainbow/master/screenshots/cpp.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Latex (with tag begin-end matching)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/p00f/nvim-ts-rainbow/master/screenshots/latex_.png&#34; alt=&#34;alt text&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Huge thanks to @vigoux, @theHamsta, @sogaiu, @bfredl and @sunjon and @steelsojka for all their help&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>akinsho/git-conflict.nvim</title>
    <updated>2022-08-17T01:49:27Z</updated>
    <id>tag:github.com,2022-08-17:/akinsho/git-conflict.nvim</id>
    <link href="https://github.com/akinsho/git-conflict.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A plugin to visualise and resolve merge conflicts in neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;git-conflict.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/22454918/159362564-a66d8c23-f7dc-4d1d-8e88-c5c73a49047e.mov&#34;&gt;https://user-images.githubusercontent.com/22454918/159362564-a66d8c23-f7dc-4d1d-8e88-c5c73a49047e.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A plugin to visualise and resolve conflicts in neovim. This plugin was inspired by &lt;a href=&#34;https://github.com/rhysd/conflict-marker.vim&#34;&gt;conflict-marker.vim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This plugin is under active development, it should generally work but you&#39;re likely to encounter some bugs during usage. The current commands and mappings are also subject to change.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nvim 0.7+&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#39;akinsho/git-conflict.nvim&#39;, tag = &#34;*&#34;, config = function()&#xA;  require(&#39;git-conflict&#39;).setup()&#xA;end}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I recommend using the tag field of you package manager as so your version of this plugin is only updated when a new tag is pushed as &lt;code&gt;main&lt;/code&gt; itself might be unstable.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  default_mappings = true, -- disable buffer local mapping created by this plugin&#xA;  disable_diagnostics = false, -- This will disable the diagnostics in a buffer whilst it is conflicted&#xA;  highlights = { -- They must have background color, otherwise the default color will be used&#xA;    incoming = &#39;DiffText&#39;,&#xA;    current = &#39;DiffAdd&#39;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GitConflictChooseOurs&lt;/code&gt; - Select the current changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GitConflictChooseTheirs&lt;/code&gt; - Select the incoming changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GitConflictChooseBoth&lt;/code&gt; - Select both changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GitConflictChooseNone&lt;/code&gt; - Select both none of the changes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GitConflictNextConflict&lt;/code&gt; - Move to the next conflict.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GitConflictPrevConflict&lt;/code&gt; - Move to the previous conflict.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GitConflictListQf&lt;/code&gt; - Get all conflict to quickfix&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Listing conflicts&lt;/h3&gt; &#xA;&lt;p&gt;You can list conflicts in the quick fix list using the &lt;code&gt;GitConflictListQf&lt;/code&gt; command&lt;/p&gt; &#xA;&lt;img width=&#34;475&#34; alt=&#34;Screen Shot 2022-03-27 at 12 03 43&#34; src=&#34;https://user-images.githubusercontent.com/22454918/160278511-705a0361-a387-4fc1-8b20-bd799bf85b82.png&#34;&gt; &#xA;&lt;p&gt;quickfix displayed using &lt;a href=&#34;https://gitlab.com/yorickpeterse/nvim-pqf&#34;&gt;nvim-pqf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Autocommands&lt;/h2&gt; &#xA;&lt;p&gt;When a conflict is detected by this plugin a &lt;code&gt;User&lt;/code&gt; autocommand is fired called &lt;code&gt;GitConflictDetected&lt;/code&gt;. When this is resolved another command is fired called &lt;code&gt;GitConflictResolved&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Either of these can be used to run logic whilst dealing with conflicts e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocommand(&#39;User&#39;, {&#xA;  pattern = &#39;GitConflictDetected&#39;,&#xA;  callback = function()&#xA;    vim.notify(&#39;Conflict detected in &#39;..vim.fn.expand(&#39;&amp;lt;afile&amp;gt;&#39;))&#xA;    vim.keymap.set(&#39;n&#39;, &#39;cww&#39;, function()&#xA;      engage.conflict_buster()&#xA;      create_buffer_local_mappings()&#xA;    end)&#xA;  end&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mappings&lt;/h2&gt; &#xA;&lt;p&gt;This plugin offers default buffer local mappings inside of conflicted files. This is primarily because applying these mappings only to relevant buffers is not possible through global mappings. A user can however disable these by setting &lt;code&gt;default_mappings = false&lt;/code&gt; anyway and create global mappings as shown below. The default mappings are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;o&lt;/kbd&gt; - choose ours&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;t&lt;/kbd&gt; - choose theirs&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;b&lt;/kbd&gt; - choose both&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;c&lt;/kbd&gt;&lt;kbd&gt;0&lt;/kbd&gt; - choose none&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;]&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt; - move to previous conflict&lt;/li&gt; &#xA; &lt;li&gt;&lt;kbd&gt;[&lt;/kbd&gt;&lt;kbd&gt;x&lt;/kbd&gt; - move to next conflict&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you would rather not use these then disable default mappings an you can then map these yourself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#39;n&#39;, &#39;co&#39;, &#39;&amp;lt;Plug&amp;gt;(git-conflict-ours)&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;ct&#39;, &#39;&amp;lt;Plug&amp;gt;(git-conflict-theirs)&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;cb&#39;, &#39;&amp;lt;Plug&amp;gt;(git-conflict-both)&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;c0&#39;, &#39;&amp;lt;Plug&amp;gt;(git-conflict-none)&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;]x&#39;, &#39;&amp;lt;Plug&amp;gt;(git-conflict-prev-conflict)&#39;)&#xA;vim.keymap.set(&#39;n&#39;, &#39;[x&#39;, &#39;&amp;lt;Plug&amp;gt;(git-conflict-next-conflict)&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please read this&lt;/strong&gt; - This plugin is not intended to do anything other than provide fancy visuals and some mappings to handle conflict resolution It will not be expanded to become a full git management plugin, there are a zillion plugins that do that already, this won&#39;t be one of those.&lt;/p&gt; &#xA;&lt;h3&gt;Feature requests&lt;/h3&gt; &#xA;&lt;p&gt;Open source should be collaborative, if you have an idea for a feature you&#39;d like to see added. Submit a PR rather than a feature request.&lt;/p&gt;</summary>
  </entry>
</feed>