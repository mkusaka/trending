<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-27T01:40:13Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lvimuser/lsp-inlayhints.nvim</title>
    <updated>2022-08-27T01:40:13Z</updated>
    <id>tag:github.com,2022-08-27:/lvimuser/lsp-inlayhints.nvim</id>
    <link href="https://github.com/lvimuser/lsp-inlayhints.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp-inlayhints.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Partial implementation of &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/&#34;&gt;LSP&lt;/a&gt; inlay hint.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add &lt;code&gt;lvimuser/lsp-inlayhints.nvim&lt;/code&gt; using your favorite plugin manager and call &lt;code&gt;require(&#34;lsp-inlayhints&#34;).setup()&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/lvimuser/lsp-inlayhints.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can lazy load it on &lt;code&gt;module&lt;/code&gt; or &lt;code&gt;LspAttach&lt;/code&gt; event if you&#39;re calling it &lt;strong&gt;after&lt;/strong&gt; nvim has attached the server.&lt;/p&gt; &#xA;&lt;h3&gt;on_attach&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lsp-inlayhints&#34;).on_attach(client, bufnr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;LspAttach&lt;/h3&gt; &#xA;&lt;p&gt;For &amp;gt;0.8, you can use the &lt;code&gt;LspAttach&lt;/code&gt; event:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_augroup(&#34;LspAttach_inlayhints&#34;, {})&#xA;vim.api.nvim_create_autocmd(&#34;LspAttach&#34;, {&#xA;  group = &#34;LspAttach_inlayhints&#34;,&#xA;  callback = function(args)&#xA;    if not (args.data and args.data.client_id) then&#xA;      return&#xA;    end&#xA;&#xA;    local bufnr = args.buf&#xA;    local client = vim.lsp.get_client_by_id(args.data.client_id)&#xA;    require(&#34;lsp-inlayhints&#34;).on_attach(client, bufnr)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;p&gt;If and which &lt;code&gt;InlayHints&lt;/code&gt; are provided depends on the language server&#39;s configuration. &lt;strong&gt;Read their docs&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Highlight&lt;/h4&gt; &#xA;&lt;p&gt;Highlight group is &lt;code&gt;LspInlayHint&lt;/code&gt;; defaults to &lt;code&gt;Comment&lt;/code&gt; foreground with &lt;code&gt;CursorLine&lt;/code&gt; background, creating a &#39;block&#39;-like effect.&lt;/p&gt; &#xA;&lt;p&gt;A common suggestion is to use &lt;code&gt;Comment&lt;/code&gt;, either by linking it (&lt;code&gt;hi link LspInlayHint Comment&lt;/code&gt;) or setting it in the options.&lt;/p&gt; &#xA;&lt;p&gt;VSCode&#39;s dark theme is similar to &lt;code&gt;hi LspInlayHint guifg=#d8d8d8 guibg=#3a3a3a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Default Configuration&lt;/h4&gt; &#xA;&lt;p&gt;You only need to pass the options you want to override.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local default_config = {&#xA;  inlay_hints = {&#xA;    parameter_hints = {&#xA;      show = true,&#xA;      prefix = &#34;&amp;lt;- &#34;,&#xA;      separator = &#34;, &#34;,&#xA;      remove_colon_start = false,&#xA;      remove_colon_end = true,&#xA;    },&#xA;    type_hints = {&#xA;      -- type and other hints&#xA;      show = true,&#xA;      prefix = &#34;&#34;,&#xA;      separator = &#34;, &#34;,&#xA;      remove_colon_start = false,&#xA;      remove_colon_end = false,&#xA;    },&#xA;    only_current_line = false,&#xA;    -- separator between types and parameter hints. Note that type hints are&#xA;    -- shown before parameter&#xA;    labels_separator = &#34;  &#34;,&#xA;    -- whether to align to the length of the longest line in the file&#xA;    max_len_align = false,&#xA;    -- padding from the left if max_len_align is true&#xA;    max_len_align_padding = 1,&#xA;    -- highlight group&#xA;    highlight = &#34;LspInlayHint&#34;,&#xA;  },&#xA;  enabled_at_startup = true,&#xA;  debug_mode = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Languages&lt;/h2&gt; &#xA;&lt;p&gt;Should work for &lt;strong&gt;all&lt;/strong&gt; languages that implement the spec. Tested on &lt;code&gt;rust-analyzer (via rust-tools.nvim)&lt;/code&gt;, &lt;code&gt;fsautocomplete (via ionide.vim)&lt;/code&gt;, &lt;code&gt;sumneko_lua&lt;/code&gt;, &lt;code&gt;gopls&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;rust-tools.nvim&lt;/code&gt;, set &lt;code&gt;autoSetHints = false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Typescript&lt;/h3&gt; &#xA;&lt;p&gt;While &lt;code&gt;tsserver&lt;/code&gt; doesn&#39;t (strictly) implement the spec, there&#39;s a built-in workaround for it.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/typescript-language-server/typescript-language-server#workspacedidchangeconfiguration&#34;&gt;https://github.com/typescript-language-server/typescript-language-server#workspacedidchangeconfiguration&lt;/a&gt; for the options.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Example configuration to enable inlay hints in TypeScript and JavaScript, using lspconfig:&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;lspconfig.tsserver.setup({&#xA;  settings = {&#xA;    typescript = {&#xA;      inlayHints = {&#xA;        includeInlayParameterNameHints = &#39;all&#39;,&#xA;        includeInlayParameterNameHintsWhenArgumentMatchesName = false,&#xA;        includeInlayFunctionParameterTypeHints = true,&#xA;        includeInlayVariableTypeHints = true,&#xA;        includeInlayPropertyDeclarationTypeHints = true,&#xA;        includeInlayFunctionLikeReturnTypeHints = true,&#xA;        includeInlayEnumMemberValueHints = true,&#xA;      }&#xA;    },&#xA;    javascript = {&#xA;      inlayHints = {&#xA;        includeInlayParameterNameHints = &#39;all&#39;,&#xA;        includeInlayParameterNameHintsWhenArgumentMatchesName = false,&#xA;        includeInlayFunctionParameterTypeHints = true,&#xA;        includeInlayVariableTypeHints = true,&#xA;        includeInlayPropertyDeclarationTypeHints = true,&#xA;        includeInlayFunctionLikeReturnTypeHints = true,&#xA;        includeInlayEnumMemberValueHints = true,&#xA;      }&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Clangd&lt;/h3&gt; &#xA;&lt;p&gt;Builtin support. See &lt;a href=&#34;https://clangd.llvm.org/extensions#inlay-hints&#34;&gt;https://clangd.llvm.org/extensions#inlay-hints&lt;/a&gt; and &lt;a href=&#34;https://clangd.llvm.org/config#inlayhints&#34;&gt;https://clangd.llvm.org/config#inlayhints&lt;/a&gt;. If using &lt;code&gt;p00f/clangd_extensions.nvim&lt;/code&gt;, set &lt;code&gt;autoSetHints = false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Golang&lt;/h3&gt; &#xA;&lt;p&gt;Implements the spec. Configuration: &lt;a href=&#34;https://github.com/golang/tools/raw/master/gopls/doc/inlayHints.md&#34;&gt;https://github.com/golang/tools/blob/master/gopls/doc/inlayHints.md&lt;/a&gt;. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;gopls&#34;: {&#xA;  &#34;hints&#34;: {&#xA;    &#34;assignVariableTypes&#34;: true,&#xA;    &#34;compositeLiteralFields&#34;: true,&#xA;    &#34;constantValues&#34;: true,&#xA;    &#34;functionTypeParameters&#34;: true,&#xA;    &#34;parameterNames&#34;: true,&#xA;    &#34;rangeVariableTypes&#34;: true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;code&gt;ray-x/go.nvim&lt;/code&gt;, set &lt;code&gt;lsp_inlay_hints = { enable = false }&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Java (jdtls)&lt;/h3&gt; &#xA;&lt;p&gt;Available settings: &lt;a href=&#34;https://github.com/redhat-developer/vscode-java/raw/master/package.json#L868-L892&#34;&gt;https://github.com/redhat-developer/vscode-java/blob/master/package.json#L868-L892&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Server doesn&#39;t set &lt;code&gt;inlayHintProvider&lt;/code&gt; &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#serverCapabilities&#34;&gt;capability&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Server doesn&#39;t specify &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintKind&#34;&gt;InlayHintKind&lt;/a&gt; and its options refer only to parameters.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Builtin workaround: attach regardless and treat unspecified hints as &lt;code&gt;Parameter&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;p&gt;If a server implements inlay hints on a different endpoint/method (not &lt;code&gt;textDocument/inlayHint&lt;/code&gt;), raise an issue with the request/response details to check the possibility of a workaround.&lt;/p&gt; &#xA;&lt;h2&gt;Available commands:&lt;/h2&gt; &#xA;&lt;h3&gt;toggle&lt;/h3&gt; &#xA;&lt;p&gt;Enable/disable the plugin globally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lsp-inlayhints&#39;).toggle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;reset&lt;/h3&gt; &#xA;&lt;p&gt;Clears all inlay hints in the current buffer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lsp-inlayhints&#39;).reset()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;p&gt;InlayHints (extmarks) get pushed to the line below when commenting lines. See: &lt;a href=&#34;https://github.com/lvimuser/lsp-inlayhints.nvim/issues/2#issuecomment-1197975664&#34;&gt;https://github.com/lvimuser/lsp-inlayhints.nvim/issues/2#issuecomment-1197975664&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Missing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHint_resolve&#34;&gt;Resolve request&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Command|Execute|TextEdits. Ref: &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#inlayHintLabelPart&#34;&gt;inlayHintLabelPart&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Originally based on simrat39&#39;s &lt;a href=&#34;https://github.com/simrat39/rust-tools.nvim&#34;&gt;rust-tools.nvim&lt;/a&gt; implementation.&lt;/p&gt; &#xA;&lt;p&gt;References:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nvim&#39;s builtin codelens&lt;/li&gt; &#xA; &lt;li&gt;VSCode&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hrsh7th/cmp-calc</title>
    <updated>2022-08-27T01:40:13Z</updated>
    <id>tag:github.com,2022-08-27:/hrsh7th/cmp-calc</id>
    <link href="https://github.com/hrsh7th/cmp-calc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;nvim-cmp source for math calculation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;cmp-calc&lt;/h1&gt; &#xA;&lt;p&gt;nvim-cmp source for math calculation.&lt;/p&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;cmp&#39;.setup {&#xA;  sources = {&#xA;    { name = &#39;calc&#39; }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>brenoprata10/nvim-highlight-colors</title>
    <updated>2022-08-27T01:40:13Z</updated>
    <id>tag:github.com,2022-08-27:/brenoprata10/nvim-highlight-colors</id>
    <link href="https://github.com/brenoprata10/nvim-highlight-colors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Highlight colors for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-highlight-colors&lt;/h1&gt; &#xA;&lt;p&gt;Highlight colors with neovim&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/26099427/179988116-ff24d0a7-084d-403f-bca8-63dd7bb08fed.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Displays colors based on their HEX/rgb/hsl value&lt;/li&gt; &#xA; &lt;li&gt;Super fast no matter the amount of colors&lt;/li&gt; &#xA; &lt;li&gt;See the colors change as you edit them&lt;/li&gt; &#xA; &lt;li&gt;CSS variables support&lt;/li&gt; &#xA; &lt;li&gt;Tailwind CSS support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Add this to your init.vim&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set termguicolors&#xA;set t_Co=256&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install plugin with Plug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;brenoprata10/nvim-highlight-colors&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call &lt;code&gt;setup&lt;/code&gt; function to initialize plugin by default:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;require(&#39;nvim-highlight-colors&#39;).setup {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;There are only two available command for now:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HighlightColorsOn&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Turns on highlight feature&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HighlightColorsOff&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Turns off highlight feature&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HighlightColorsToggle&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Toggles highlight feature&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You might also use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lua require(&#34;nvim-highlight-colors&#34;).turnOff()&#xA;lua require(&#34;nvim-highlight-colors&#34;).turnOn()&#xA;lua require(&#34;nvim-highlight-colors&#34;).toggle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customization&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Options&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;render&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;first_column(default), foreground, background&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Changes how the colors will be rendered&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enable_tailwind&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;boolean(defaults to &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Adds highlight to tailwind colors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Here is how you might use the options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lua require(&#34;nvim-highlight-colors&#34;).setup {&#xA;&#x9;render = &#39;background&#39;, -- or &#39;foreground&#39; or &#39;first_column&#39;&#xA;&#x9;enable_tailwind = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Tailwind CSS support:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/26099427/184542562-855fcdd4-c08d-4805-b756-8cbbf442382f.png&#34; alt=&#34;Screenshot from 2022-08-14 16-49-35&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add RGB support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add RGBA support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multicolor per line support (for &#39;foreground&#39; and &#39;background&#39; render mode)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Detect variables in css files and evaluate their value&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create &lt;code&gt;Toggle&lt;/code&gt; option for better usability&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add option config to colorize whole background of colors(much like &lt;code&gt;colorizer&lt;/code&gt; plugin)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Detect SCSS variable in scss files and evaluate their value&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Detect Stylus variable in styl files and evaluate their value&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>