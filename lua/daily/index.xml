<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-11-01T01:32:41Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Saghen/blink.cmp</title>
    <updated>2024-11-01T01:32:41Z</updated>
    <id>tag:github.com,2024-11-01:/Saghen/blink.cmp</id>
    <link href="https://github.com/Saghen/blink.cmp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Performant, batteries-included completion plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] This plugin is &lt;em&gt;beta&lt;/em&gt; quality. Expect breaking changes and many bugs&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Blink Completion (blink.cmp)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;blink.cmp&lt;/strong&gt; is a completion plugin with support for LSPs and external sources while updating on every keystroke with minimal overhead (0.5-4ms async). It achieves this by writing the fuzzy searching in SIMD to easily handle &amp;gt;20k items. It provides extensibility via hooks into the trigger, sources and rendering pipeline. Plenty of work has been put into making each stage of the pipeline as intelligent as possible, such as frecency and proximity bonus on fuzzy matching, and this work is on-going.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/9849e57a-3c2c-49a8-959c-dbb7fef78c80&#34;&gt;https://github.com/user-attachments/assets/9849e57a-3c2c-49a8-959c-dbb7fef78c80&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works out of the box with no additional configuration&lt;/li&gt; &#xA; &lt;li&gt;Updates on every keystroke (0.5-4ms async, single core)&lt;/li&gt; &#xA; &lt;li&gt;Typo resistant fuzzy with frecency and proximity bonus&lt;/li&gt; &#xA; &lt;li&gt;Extensive LSP support (&lt;a href=&#34;https://raw.githubusercontent.com/Saghen/blink.cmp/main/LSP_TRACKER.md&#34;&gt;tracker&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Native &lt;code&gt;vim.snippet&lt;/code&gt; support (including &lt;code&gt;friendly-snippets&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;External sources support (including &lt;a href=&#34;https://github.com/Saghen/blink.compat&#34;&gt;compatibility with &lt;code&gt;nvim-cmp&lt;/code&gt; sources&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Auto-bracket support based on semantic tokens (experimental, opt-in)&lt;/li&gt; &#xA; &lt;li&gt;Signature help (experimental, opt-in)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Saghen/blink.cmp/main/#compared-to-nvim-cmp&#34;&gt;Comparison with nvim-cmp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.10+&lt;/li&gt; &#xA; &lt;li&gt;curl&lt;/li&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;lazy.nvim&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;saghen/blink.cmp&#39;,&#xA;  lazy = false, -- lazy loading handled internally&#xA;  -- optional: provides snippets for the snippet source&#xA;  dependencies = &#39;rafamadriz/friendly-snippets&#39;,&#xA;&#xA;  -- use a release tag to download pre-built binaries&#xA;  version = &#39;v0.*&#39;,&#xA;  -- OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust&#xA;  -- build = &#39;cargo build --release&#39;,&#xA;  -- If you use nix, you can build from source using latest nightly rust with:&#xA;  -- build = &#39;nix run .#build-plugin&#39;,&#xA;&#xA;  ---@module &#39;blink.cmp&#39;&#xA;  ---@type blink.cmp.Config&#xA;  opts = {&#xA;    -- &#39;default&#39; for mappings similar to built-in completion&#xA;    -- &#39;super-tab&#39; for mappings similar to vscode (tab to accept, arrow keys to navigate)&#xA;    -- see the &#34;default configuration&#34; section below for full documentation on how to define&#xA;    -- your own keymap. when defining your own, no keybinds will be assigned automatically.&#xA;    keymap = &#39;default&#39;,&#xA;&#xA;    highlight = {&#xA;      -- sets the fallback highlight groups to nvim-cmp&#39;s highlight groups&#xA;      -- useful for when your theme doesn&#39;t support blink.cmp&#xA;      -- will be removed in a future release, assuming themes add support&#xA;      use_nvim_cmp_as_default = true,&#xA;    },&#xA;    -- set to &#39;mono&#39; for &#39;Nerd Font Mono&#39; or &#39;normal&#39; for &#39;Nerd Font&#39;&#xA;    -- adjusts spacing to ensure icons are aligned&#xA;    nerd_font_variant = &#39;normal&#39;,&#xA;&#xA;    -- experimental auto-brackets support&#xA;    -- accept = { auto_brackets = { enabled = true } }&#xA;&#xA;    -- experimental signature help support&#xA;    -- trigger = { signature_help = { enabled = true } }&#xA;  }&#xA;},&#xA;&#xA;-- LSP servers and clients communicate what features they support through &#34;capabilities&#34;.&#xA;--  By default, Neovim support a subset of the LSP specification.&#xA;--  With blink.cmp, Neovim has *more* capabilities which must be communicated to the LSP servers.&#xA;--  Explanation from TJ: https://youtu.be/m8C0Cq9Uv9o?t=1275&#xA;--&#xA;-- This can vary by config, but in-general for nvim-lspconfig:&#xA;&#xA;{&#xA;  &#39;neovim/nvim-lspconfig&#39;,&#xA;  dependencies = { &#39;saghen/blink.cmp&#39; },&#xA;  config = function(_, opts)&#xA;    local lspconfig = require(&#39;lspconfig&#39;)&#xA;    for server, config in pairs(opts.servers) do&#xA;      config.capabilities = require(&#39;blink.cmp&#39;).get_lsp_capabilities(config.capabilities)&#xA;      lspconfig[server].setup(config)&#xA;    end&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For LazyVim/distro users, you can disable nvim-cmp via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ &#39;hrsh7th/nvim-cmp&#39;, enabled = false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;mini.deps&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- use a release tag to download pre-built binaries&#xA;MiniDeps.add({&#xA;  source = &#34;saghen/blink.cmp&#34;,&#xA;  depends = {&#xA;  &#34;rafamadriz/friendly-snippets&#34;,&#xA;  },&#xA;  checkout = &#34;some.version&#34;, -- check releases for latest tag&#xA;})&#xA;&#xA;-- OR build from source, requires nightly: https://rust-lang.github.io/rustup/concepts/channels.html#working-with-nightly-rust&#xA;local function build_blink(params)&#xA;  vim.notify(&#39;Building blink.cmp&#39;, vim.log.levels.INFO)&#xA;  local obj = vim.system({ &#39;cargo&#39;, &#39;build&#39;, &#39;--release&#39; }, { cwd = params.path }):wait()&#xA;  if obj.code == 0 then&#xA;    vim.notify(&#39;Building blink.cmp done&#39;, vim.log.levels.INFO)&#xA;  else&#xA;    vim.notify(&#39;Building blink.cmp failed&#39;, vim.log.levels.ERROR)&#xA;  end&#xA;end&#xA;&#xA;MiniDeps.add({&#xA;  source = &#39;Saghen/blink.cmp&#39;,&#xA;  hooks = {&#xA;    post_install = build_blink,&#xA;    post_checkout = build_blink,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Highlight groups&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Group&lt;/th&gt; &#xA;    &lt;th&gt;Default&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpMenu&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Pmenu&lt;/td&gt; &#xA;    &lt;td&gt;The completion menu window&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpMenuBorder&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Pmenu&lt;/td&gt; &#xA;    &lt;td&gt;The completion menu window border&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpMenuSelection&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;PmenuSel&lt;/td&gt; &#xA;    &lt;td&gt;The completion menu window selected item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpLabel&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Pmenu&lt;/td&gt; &#xA;    &lt;td&gt;Label of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpLabelDeprecated&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Comment&lt;/td&gt; &#xA;    &lt;td&gt;Deprecated label of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpLabelMatch&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Pmenu&lt;/td&gt; &#xA;    &lt;td&gt;(Currently unused) Label of the completion item when it matches the query&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpKind&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Special&lt;/td&gt; &#xA;    &lt;td&gt;Kind icon/text of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpKind&amp;lt;kind&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Special&lt;/td&gt; &#xA;    &lt;td&gt;Kind icon/text of the completion item&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpDoc&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;    &lt;td&gt;The documentation window&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpDocBorder&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;FloatBorder&lt;/td&gt; &#xA;    &lt;td&gt;The documentation window border&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpDocCursorLine&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Visual&lt;/td&gt; &#xA;    &lt;td&gt;The documentation window cursor line&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpSignatureHelp&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;NormalFloat&lt;/td&gt; &#xA;    &lt;td&gt;The signature help window&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpSignatureHelpBorder&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;FloatBorder&lt;/td&gt; &#xA;    &lt;td&gt;The signature help window border&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;BlinkCmpSignatureHelpActiveParameter&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;LspSignatureActiveParameter&lt;/td&gt; &#xA;    &lt;td&gt;Active parameter of the signature help&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Default configuration&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;!-- config:start --&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  -- the keymap may be a preset (&#39;default&#39; | &#39;super-tab&#39;) OR a table of keys =&amp;gt; command[]&#xA;  -- when defining your own, no keybinds will be assigned automatically.&#xA;  -- you may pass a function in the command array where returning true &#xA;  -- will prevent the next command from running&#xA;  --&#xA;  -- &#34;default&#34; keymap&#xA;  --   [&#39;&amp;lt;C-space&amp;gt;&#39;] = { &#39;show&#39;, &#39;show_documentation&#39;, &#39;hide_documentation&#39; },&#xA;  --   [&#39;&amp;lt;C-e&amp;gt;&#39;] = { &#39;hide&#39; },&#xA;  --   [&#39;&amp;lt;C-y&amp;gt;&#39;] = { &#39;select_and_accept&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;C-p&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-n&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;C-b&amp;gt;&#39;] = { &#39;scroll_documentation_up&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-f&amp;gt;&#39;] = { &#39;scroll_documentation_down&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;Tab&amp;gt;&#39;] = { &#39;snippet_forward&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = { &#39;snippet_backward&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  -- &#34;super-tab&#34; keymap&#xA;  --   you may want to set `trigger.completion.show_in_snippet = false` when using &#34;super-tab&#34;&#xA;  --   or use `window.autocomplete.selection = &#34;manual&#34; | &#34;auto_insert&#34;`&#xA;  --&#xA;  --   [&#39;&amp;lt;C-space&amp;gt;&#39;] = { &#39;show&#39;, &#39;show_documentation&#39;, &#39;hide_documentation&#39; },&#xA;  --   [&#39;&amp;lt;C-e&amp;gt;&#39;] = { &#39;hide&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;Tab&amp;gt;&#39;] = {&#xA;  --     function(cmp)&#xA;  --       if cmp.is_in_snippet() then return cmp.accept()&#xA;  --       else return cmp.select_and_accept() end&#xA;  --     end,&#xA;  --     &#39;snippet_forward&#39;,&#xA;  --     &#39;fallback&#39;&#xA;  --   },&#xA;  --   [&#39;&amp;lt;S-Tab&amp;gt;&#39;] = { &#39;snippet_backward&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;Up&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;Down&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-p&amp;gt;&#39;] = { &#39;select_prev&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-n&amp;gt;&#39;] = { &#39;select_next&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  --   [&#39;&amp;lt;C-b&amp;gt;&#39;] = { &#39;scroll_documentation_up&#39;, &#39;fallback&#39; },&#xA;  --   [&#39;&amp;lt;C-f&amp;gt;&#39;] = { &#39;scroll_documentation_down&#39;, &#39;fallback&#39; },&#xA;  --&#xA;  -- available commands:&#xA;  --   show, hide, accept, select_and_accept, select_prev, select_next, show_documentation, hide_documentation,&#xA;  --   scroll_documentation_up, scroll_documentation_down, snippet_forward, snippet_backward, fallback&#xA;  keymap = &#39;default&#39;,&#xA;&#xA;  accept = {&#xA;    create_undo_point = true,&#xA;    auto_brackets = {&#xA;      enabled = false,&#xA;      default_brackets = { &#39;(&#39;, &#39;)&#39; },&#xA;      override_brackets_for_filetypes = {},&#xA;      -- Overrides the default blocked filetypes&#xA;      force_allow_filetypes = {},&#xA;      blocked_filetypes = {},&#xA;      -- Synchronously use the kind of the item to determine if brackets should be added&#xA;      kind_resolution = {&#xA;        enabled = true,&#xA;        blocked_filetypes = { &#39;typescriptreact&#39;, &#39;javascriptreact&#39;, &#39;vue&#39; },&#xA;      },&#xA;      -- Asynchronously use semantic token to determine if brackets should be added&#xA;      semantic_token_resolution = {&#xA;        enabled = true,&#xA;        blocked_filetypes = {},&#xA;        -- How long to wait for semantic tokens to return before assuming no brackets should be added&#xA;        timeout_ms = 400,&#xA;      },&#xA;    },&#xA;  },&#xA;&#xA;  trigger = {&#xA;    completion = {&#xA;      -- &#39;prefix&#39; will fuzzy match on the text before the cursor&#xA;      -- &#39;full&#39; will fuzzy match on the text before *and* after the cursor&#xA;      -- example: &#39;foo_|_bar&#39; will match &#39;foo_&#39; for &#39;prefix&#39; and &#39;foo__bar&#39; for &#39;full&#39;&#xA;      keyword_range = &#39;prefix&#39;,&#xA;      -- regex used to get the text when fuzzy matching&#xA;      -- changing this may break some sources, so please report if you run into issues&#xA;      -- TODO: shouldnt this also affect the accept command? should this also be per language?&#xA;      keyword_regex = &#39;[%w_\\-]&#39;,&#xA;      -- after matching with keyword_regex, any characters matching this regex at the prefix will be excluded&#xA;      exclude_from_prefix_regex = &#39;[\\-]&#39;,&#xA;      -- LSPs can indicate when to show the completion window via trigger characters&#xA;      -- however, some LSPs (i.e. tsserver) return characters that would essentially&#xA;      -- always show the window. We block these by default&#xA;      blocked_trigger_characters = { &#39; &#39;, &#39;\n&#39;, &#39;\t&#39; },&#xA;      -- when true, will show the completion window when the cursor comes after a trigger character after accepting an item&#xA;      show_on_accept_on_trigger_character = true,&#xA;      -- when true, will show the completion window when the cursor comes after a trigger character when entering insert mode&#xA;      show_on_insert_on_trigger_character = true,&#xA;      -- list of additional trigger characters that won&#39;t trigger the completion window when the cursor comes after a trigger character when entering insert mode/accepting an item&#xA;      show_on_x_blocked_trigger_characters = { &#34;&#39;&#34;, &#39;&#34;&#39;, &#39;(&#39; },&#xA;      -- when false, will not show the completion window automatically when in a snippet&#xA;      show_in_snippet = true,&#xA;    },&#xA;&#xA;    signature_help = {&#xA;      enabled = false,&#xA;      blocked_trigger_characters = {},&#xA;      blocked_retrigger_characters = {},&#xA;      -- when true, will show the signature help window when the cursor comes after a trigger character when entering insert mode&#xA;      show_on_insert_on_trigger_character = true,&#xA;    },&#xA;  },&#xA;&#xA;  fuzzy = {&#xA;    -- frencency tracks the most recently/frequently used items and boosts the score of the item&#xA;    use_frecency = true,&#xA;    -- proximity bonus boosts the score of items matching nearby words&#xA;    use_proximity = true,&#xA;    max_items = 200,&#xA;    -- controls which sorts to use and in which order, these three are currently the only allowed options&#xA;    sorts = { &#39;label&#39;, &#39;kind&#39;, &#39;score&#39; },&#xA;&#xA;    prebuilt_binaries = {&#xA;      -- Whether or not to automatically download a prebuilt binary from github. If this is set to `false`&#xA;      -- you will need to manually build the fuzzy binary dependencies by running `cargo build --release`&#xA;      download = true,&#xA;      -- When downloading a prebuilt binary, force the downloader to resolve this version. If this is unset&#xA;      -- then the downloader will attempt to infer the version from the checked out git tag (if any).&#xA;      --&#xA;      -- Beware that if the FFI ABI changes while tracking main then this may result in blink breaking.&#xA;      force_version = nil,&#xA;      -- When downloading a prebuilt binary, force the downloader to use this system triple. If this is unset&#xA;      -- then the downloader will attempt to infer the system triple from `jit.os` and `jit.arch`.&#xA;      -- Check the latest release for all available system triples&#xA;      --&#xA;      -- Beware that if the FFI ABI changes while tracking main then this may result in blink breaking.&#xA;      force_system_triple = nil,&#xA;    },&#xA;  },&#xA;&#xA;  sources = {&#xA;    -- list of enabled providers&#xA;    completion = { &#xA;      enabled_providers = { &#39;lsp&#39;, &#39;path&#39;, &#39;snippets&#39;, &#39;buffer&#39; },&#xA;    }&#xA;&#xA;    -- Please see https://github.com/Saghen/blink.compat for using `nvim-cmp` sources&#xA;    providers = {&#xA;      lsp = {&#xA;        name = &#39;LSP&#39;,&#xA;        module = &#39;blink.cmp.sources.lsp&#39;,&#xA;&#xA;        --- *All* of the providers have the following options available&#xA;        --- NOTE: All of these options may be functions to get dynamic behavior&#xA;        --- See the type definitions for more information&#xA;        enabled = true, -- whether or not to enable the provider&#xA;        transform_items = nil, -- function to transform the items before they&#39;re returned&#xA;        should_show_items = true, -- whether or not to show the items&#xA;        max_items = nil, -- maximum number of items to return&#xA;        min_keyword_length = 0, -- minimum number of characters to trigger the provider&#xA;        fallback_for = {}, -- if any of these providers return 0 items, it will fallback to this provider&#xA;        score_offset = 0, -- boost/penalize the score of the items&#xA;        override = nil, -- override the source&#39;s functions&#xA;      },&#xA;      path = {&#xA;        name = &#39;Path&#39;,&#xA;        module = &#39;blink.cmp.sources.path&#39;,&#xA;        score_offset = 3,&#xA;        opts = {&#xA;          trailing_slash = false,&#xA;          label_trailing_slash = true,&#xA;          get_cwd = function(context) return vim.fn.expand((&#39;#%d:p:h&#39;):format(context.bufnr)) end,&#xA;          show_hidden_files_by_default = false,&#xA;        }&#xA;      },&#xA;      snippets = {&#xA;        name = &#39;Snippets&#39;,&#xA;        module = &#39;blink.cmp.sources.snippets&#39;,&#xA;        score_offset = -3,&#xA;        opts = {&#xA;          friendly_snippets = true,&#xA;          search_paths = { vim.fn.stdpath(&#39;config&#39;) .. &#39;/snippets&#39; },&#xA;          global_snippets = { &#39;all&#39; },&#xA;          extended_filetypes = {},&#xA;          ignored_filetypes = {},&#xA;        }&#xA;&#xA;        --- Example usage for disabling the snippet provider after pressing trigger characters (i.e. &#34;.&#34;)&#xA;        -- enabled = function(ctx) return ctx ~= nil and ctx.trigger.kind == vim.lsp.protocol.CompletionTriggerKind.TriggerCharacter end,&#xA;      },&#xA;      buffer = {&#xA;        name = &#39;Buffer&#39;,&#xA;        module = &#39;blink.cmp.sources.buffer&#39;,&#xA;        fallback_for = { &#39;lsp&#39; },&#xA;      },&#xA;    },&#xA;  },&#xA;&#xA;  windows = {&#xA;    autocomplete = {&#xA;      min_width = 15,&#xA;      max_height = 10,&#xA;      border = &#39;none&#39;,&#xA;      winhighlight = &#39;Normal:BlinkCmpMenu,FloatBorder:BlinkCmpMenuBorder,CursorLine:BlinkCmpMenuSelection,Search:None&#39;,&#xA;      -- keep the cursor X lines away from the top/bottom of the window&#xA;      scrolloff = 2,&#xA;      -- which directions to show the window,&#xA;      -- falling back to the next direction when there&#39;s not enough space&#xA;      direction_priority = { &#39;s&#39;, &#39;n&#39; },&#xA;      -- Controls whether the completion window will automatically show when typing&#xA;      auto_show = true,&#xA;      -- Controls how the completion items are selected&#xA;      -- &#39;preselect&#39; will automatically select the first item in the completion list&#xA;      -- &#39;manual&#39; will not select any item by default&#xA;      -- &#39;auto_insert&#39; will not select any item by default, and insert the completion items automatically when selecting them&#xA;      selection = &#39;preselect&#39;,&#xA;      -- Controls how the completion items are rendered on the popup window&#xA;      -- &#39;simple&#39; will render the item&#39;s kind icon the left alongside the label&#xA;      -- &#39;reversed&#39; will render the label on the left and the kind icon + name on the right&#xA;      -- &#39;minimal&#39; will render the label on the left and the kind name on the right&#xA;      -- &#39;function(blink.cmp.CompletionRenderContext): blink.cmp.Component[]&#39; for custom rendering&#xA;      draw = &#39;simple&#39;,&#xA;      -- Controls the cycling behavior when reaching the beginning or end of the completion list.&#xA;      cycle = {&#xA;        -- When `true`, calling `select_next` at the *bottom* of the completion list will select the *first* completion item.&#xA;        from_bottom = true,&#xA;        -- When `true`, calling `select_prev` at the *top* of the completion list will select the *last* completion item.&#xA;        from_top = true,&#xA;      },&#xA;    },&#xA;    documentation = {&#xA;      min_width = 10,&#xA;      max_width = 60,&#xA;      max_height = 20,&#xA;      border = &#39;padded&#39;,&#xA;      winhighlight = &#39;Normal:BlinkCmpDoc,FloatBorder:BlinkCmpDocBorder,CursorLine:BlinkCmpDocCursorLine,Search:None&#39;,&#xA;      -- which directions to show the documentation window,&#xA;      -- for each of the possible autocomplete window directions,&#xA;      -- falling back to the next direction when there&#39;s not enough space&#xA;      direction_priority = {&#xA;        autocomplete_north = { &#39;e&#39;, &#39;w&#39;, &#39;n&#39;, &#39;s&#39; },&#xA;        autocomplete_south = { &#39;e&#39;, &#39;w&#39;, &#39;s&#39;, &#39;n&#39; },&#xA;      },&#xA;      -- Controls whether the documentation window will automatically show when selecting a completion item&#xA;      auto_show = false,&#xA;      auto_show_delay_ms = 500,&#xA;      update_delay_ms = 50,&#xA;    },&#xA;    signature_help = {&#xA;      min_width = 1,&#xA;      max_width = 100,&#xA;      max_height = 10,&#xA;      border = &#39;padded&#39;,&#xA;      winhighlight = &#39;Normal:BlinkCmpSignatureHelp,FloatBorder:BlinkCmpSignatureHelpBorder&#39;,&#xA;    },&#xA;    ghost_text = {&#xA;      enabled = false,&#xA;    },&#xA;  },&#xA;&#xA;  highlight = {&#xA;    ns = vim.api.nvim_create_namespace(&#39;blink_cmp&#39;),&#xA;    -- sets the fallback highlight groups to nvim-cmp&#39;s highlight groups&#xA;    -- useful for when your theme doesn&#39;t support blink.cmp&#xA;    -- will be removed in a future release, assuming themes add support&#xA;    use_nvim_cmp_as_default = false,&#xA;  },&#xA;&#xA;  -- set to &#39;mono&#39; for &#39;Nerd Font Mono&#39; or &#39;normal&#39; for &#39;Nerd Font&#39;&#xA;  -- adjusts spacing to ensure icons are aligned&#xA;  nerd_font_variant = &#39;normal&#39;,&#xA;&#xA;  -- don&#39;t show completions or signature help for these filetypes. Keymaps are also disabled.&#xA;  blocked_filetypes = {},&#xA;&#xA;  kind_icons = {&#xA;    Text = &#39;󰉿&#39;,&#xA;    Method = &#39;󰊕&#39;,&#xA;    Function = &#39;󰊕&#39;,&#xA;    Constructor = &#39;󰒓&#39;,&#xA;&#xA;    Field = &#39;󰜢&#39;,&#xA;    Variable = &#39;󰆦&#39;,&#xA;    Property = &#39;󰖷&#39;,&#xA;&#xA;    Class = &#39;󱡠&#39;,&#xA;    Interface = &#39;󱡠&#39;,&#xA;    Struct = &#39;󱡠&#39;,&#xA;    Module = &#39;󰅩&#39;,&#xA;&#xA;    Unit = &#39;󰪚&#39;,&#xA;    Value = &#39;󰦨&#39;,&#xA;    Enum = &#39;󰦨&#39;,&#xA;    EnumMember = &#39;󰦨&#39;,&#xA;&#xA;    Keyword = &#39;󰻾&#39;,&#xA;    Constant = &#39;󰏿&#39;,&#xA;&#xA;    Snippet = &#39;󱄽&#39;,&#xA;    Color = &#39;󰏘&#39;,&#xA;    File = &#39;󰈔&#39;,&#xA;    Reference = &#39;󰬲&#39;,&#xA;    Folder = &#39;󰉋&#39;,&#xA;    Event = &#39;󱐋&#39;,&#xA;    Operator = &#39;󰪚&#39;,&#xA;    TypeParameter = &#39;󰬛&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;!-- config:end --&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Community Sources&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/netmute/blink-cmp-ctags&#34;&gt;ctags&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/niuiic/blink-cmp-rg.nvim&#34;&gt;ripgrep&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The plugin use a 4 stage pipeline: trigger -&amp;gt; sources -&amp;gt; fuzzy -&amp;gt; render&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Trigger:&lt;/strong&gt; Controls when to request completion items from the sources and provides a context downstream with the current query (i.e. &lt;code&gt;hello.wo|&lt;/code&gt;, the query would be &lt;code&gt;wo&lt;/code&gt;) and the treesitter object under the cursor (i.e. for intelligently enabling/disabling sources). It respects trigger characters passed by the LSP (or any other source) and includes it in the context for sending to the LSP.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sources:&lt;/strong&gt; Provides a common interface for and merges the results of completion, trigger character, resolution of additional information and cancellation. Some sources are builtin: &lt;code&gt;LSP&lt;/code&gt;, &lt;code&gt;buffer&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;snippets&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fuzzy:&lt;/strong&gt; Rust &amp;lt;-&amp;gt; Lua FFI which performs both filtering and sorting of the items&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Filtering:&lt;/strong&gt; The fuzzy matching uses smith-waterman, same as FZF, but implemented in SIMD for ~6x the performance of FZF (TODO: add benchmarks). Due to the SIMD&#39;s performance, the prefiltering phase on FZF was dropped to allow for typos. Similar to fzy/fzf, additional points are given to prefix matches, characters with capitals (to promote camelCase/PascalCase first char matching) and matches after delimiters (to promote snake_case first char matching)&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;strong&gt;Sorting:&lt;/strong&gt; Combines fuzzy matching score with frecency and proximity bonus. Each completion item may also include a &lt;code&gt;score_offset&lt;/code&gt; which will be added to this score to demote certain sources. The &lt;code&gt;snippets&lt;/code&gt; source takes advantage of this to avoid taking precedence over the LSP source. The parameters here still need to be tuned, so please let me know if you find some magical parameters!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Responsible for placing the autocomplete, documentation and function parameters windows. All of the rendering can be overridden following a syntax similar to incline.nvim. It uses the neovim window decoration provider to provide next to no overhead from highlighting.&lt;/p&gt; &#xA;&lt;h2&gt;Compared to nvim-cmp&lt;/h2&gt; &#xA;&lt;h3&gt;Advantages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Avoids the complexity of nvim-cmp&#39;s configuration by providing sensible defaults&lt;/li&gt; &#xA; &lt;li&gt;Updates on every keystroke with 0.5-4ms of overhead, versus nvim-cmp&#39;s default debounce of 60ms with 2-50ms hitches from processing &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Setting nvim-cmp&#39;s debounce to 0ms leads to visible stuttering. If you&#39;d like to stick with nvim-cmp, try &lt;a href=&#34;https://github.com/yioneko/nvim-cmp&#34;&gt;yioneko&#39;s fork&lt;/a&gt; or the more recent &lt;a href=&#34;https://github.com/iguanacucumber/magazine.nvim&#34;&gt;magazine.nvim&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Boosts completion item score via frecency &lt;em&gt;and&lt;/em&gt; proximity bonus. nvim-cmp only boosts score via proximity bonus and optionally by recency&lt;/li&gt; &#xA; &lt;li&gt;Typo-resistant fuzzy matching unlike nvim-cmp&#39;s fzf-style fuzzy matching&lt;/li&gt; &#xA; &lt;li&gt;Core sources (buffer, snippets, path, lsp) are built-in versus nvim-cmp&#39;s exclusively external sources&lt;/li&gt; &#xA; &lt;li&gt;Built-in auto bracket and signature help support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Planned missing features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Significantly less testing and documentation&lt;/li&gt; &#xA; &lt;li&gt;Ghost text&lt;/li&gt; &#xA; &lt;li&gt;Matched character highlighting&lt;/li&gt; &#xA; &lt;li&gt;Cmdline completions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Special Thanks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hrsh7th/&#34;&gt;@hrsh7th&lt;/a&gt; nvim-cmp used as inspiration and nvim-path implementation modified for path source&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/garymjr&#34;&gt;@garymjr&lt;/a&gt; nvim-snippets implementation modified for snippets source&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redxtech&#34;&gt;@redxtech&lt;/a&gt; Help with design and testing&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/aaditya-sahay&#34;&gt;@aaditya-sahay&lt;/a&gt; Help with rust, design and testing&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stefanboca&#34;&gt;@stefanboca&lt;/a&gt; Author of &lt;a href=&#34;https://github.com/saghen/blink.compat&#34;&gt;blink.compat&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/scottmckendry&#34;&gt;@scottmckendry&lt;/a&gt; Actively contributing to the project&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Balssh&#34;&gt;@balssh&lt;/a&gt; Manages nixpkg and nixvim&lt;/p&gt;</summary>
  </entry>
</feed>