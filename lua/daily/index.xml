<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-15T01:31:28Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>icholy/lsplinks.nvim</title>
    <updated>2024-03-15T01:31:28Z</updated>
    <id>tag:github.com,2024-03-15:/icholy/lsplinks.nvim</id>
    <link href="https://github.com/icholy/lsplinks.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP textDocument/documentLink support for neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LSPLINKS&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Support for &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocument_documentLink&#34;&gt;document links&lt;/a&gt; for neovim &lt;strong&gt;0.9+&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;The default behaviour of &lt;a href=&#34;https://neovim.io/doc/user/various.html#gx&#34;&gt;gx&lt;/a&gt; is described in the neovim help as:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Opens the current filepath or URL (decided by &lt;code&gt;&amp;lt;cfile&amp;gt;&lt;/code&gt;, &#39;isfname&#39;) at cursor using the system default handler, by calling vim.ui.open().&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This plugin extends this behaviour to support LSP document links.&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites:&lt;/h3&gt; &#xA;&lt;p&gt;An LSP server which supports &lt;code&gt;textDocument/documentLink&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration:&lt;/h3&gt; &#xA;&lt;p&gt;Call &lt;code&gt;setup&lt;/code&gt; to initialise the plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local lsplinks = require(&#34;lsplinks&#34;)&#xA;lsplinks.setup()&#xA;vim.keymap.set(&#34;n&#34;, &#34;gx&#34;, lsplinks.gx)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lazy Configuration:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;icholy/lsplinks.nvim&#34;,&#xA;    setup = function()&#xA;        local lsplinks = require(&#34;lsplinks&#34;)&#xA;        lsplinks.setup()&#xA;        vim.keymap.set(&#34;n&#34;, &#34;gx&#34;, lsplinks.gx)&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Demo 1:&lt;/h3&gt; &#xA;&lt;p&gt;Jump to &lt;code&gt;$ref&lt;/code&gt; links in swagger/openapi files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/oSDPU1e.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Demo 2:&lt;/h3&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;https://pkg.go.dev&#34;&gt;https://pkg.go.dev&lt;/a&gt; from your &lt;code&gt;go.mod&lt;/code&gt; or import statements.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/z0Kpslr.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Mintimate/oh-my-rime</title>
    <updated>2024-03-15T01:31:28Z</updated>
    <id>tag:github.com,2024-03-15:/Mintimate/oh-my-rime</id>
    <link href="https://github.com/Mintimate/oh-my-rime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Simple Config Template Of Rime By Mintimate. QQ Chat-Group: 703260572&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/demo.webp&#34; alt=&#34;样式&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README.md&#34;&gt;中文 - 简体简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README_zh-CHT.md&#34;&gt;中文 - 繁體簡介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/README_en.md&#34;&gt;English - Brief&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;一套快速初始化rime的模板方案，因为平时我使用&lt;code&gt;oh-my-zsh&lt;/code&gt;，希望大家在用这个模板的时候，有种用&lt;code&gt;omz&lt;/code&gt;的感觉；所以我给它取名叫&lt;code&gt;oh-my-rime&lt;/code&gt;，你也可以叫它&lt;code&gt;薄荷输入法&lt;/code&gt;，亦或者&lt;code&gt;Mint Input&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;如果你下载遇到困难，使用GitHub Action推送的镜像仓库：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gitlab.mintimate.cn/Mintimate/oh-my-rime&#34;&gt;oh-my-rime: https://gitlab.mintimate.cn/Mintimate/oh-my-rime&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Oh-my-rime指南&lt;/h2&gt; &#xA;&lt;p&gt;rime配置教程：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mintimate.cn/2023/03/18/rimeQuickInit&#34;&gt;跨平台的开源输入法Rime定制指南，打造强大的个性化输入法&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bilibili.com/video/BV12M411T7gf&#34;&gt;Bilibili視頻: https://www.bilibili.com/video/BV12M411T7gf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yc4AivDDpMM&#34;&gt;Youtube視頻: https://www.youtube.com/watch?v=yc4AivDDpMM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果你有QQ帐号，可以加入群聊（禁止广告）: 703260572&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;强烈建议&lt;a href=&#34;https://www.mintimate.cc&#34;&gt;配合文档: https://www.mintimate.cc&lt;/a&gt;进行操作!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;本输入方案内包含：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;薄荷拼音-全拼输入: 全拼输入，适合的人群最多，所以也是默认的输入；&lt;/li&gt; &#xA; &lt;li&gt;小鹤双拼-薄荷定制: 基于小鹤双拼，添加定制内容。支持输入音形(形码)；&lt;/li&gt; &#xA; &lt;li&gt;薄荷拼音-小鹤混输: 全拼输入的同时，支持小鹤双拼；&lt;/li&gt; &#xA; &lt;li&gt;地球拼音-薄荷定制: 基于地球拼音，添加定制内容，扩展海量词库；&lt;/li&gt; &#xA; &lt;li&gt;五笔九八-薄荷简版: 基于五笔98的精简版本，期待大家的PR。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;你可以在安装后，使用『Ctrl』+『~』进行切换。（默认激活的是『薄荷拼音-全拼输入』）。&lt;/p&gt; &#xA;&lt;h3&gt;安装&lt;/h3&gt; &#xA;&lt;p&gt;以下教程，适用于Linux、macOS和Windows（Xp~）&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;安装&lt;a href=&#34;https://rime.im/&#34;&gt;Rime输入法&lt;/a&gt;并注销或重启电脑；&lt;/li&gt; &#xA; &lt;li&gt;下载本仓库所有配置文件到本地rime配置文件；&lt;/li&gt; &#xA; &lt;li&gt;重新部署Rime&lt;/li&gt; &#xA; &lt;li&gt;开始使用&lt;/li&gt; &#xA; &lt;li&gt;根据自己习惯，进行二次修改&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;需要注意: Windows 7 和 Windows Xp只能使用 0.14.3 版本的Weasel，无法使用本输入方案的全部功能，需要手动更新librime支援库：&lt;a href=&#34;https://www.mintimate.cc/zh/guide/faQ.html#winxp%E5%92%8Cwin7%E4%BD%BF%E7%94%A8%E8%96%84%E8%8D%B7%E8%BE%93%E5%85%A5%E6%B3%95&#34;&gt;WinXP和Win7使用薄荷输入法&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;p&gt;本地rime配置文件默认地址，如下&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Weasel: &lt;code&gt;%APPDATA%\Rime&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mac OS X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Squirrel: &lt;code&gt;~/Library/Rime&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iBus:&lt;code&gt; ~/.config/ibus/rime&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;本地rime日志文件默认地址如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Weasel: &lt;code&gt;%TEMP%&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Mac OS X &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Squirrel: &lt;code&gt;$TMPDIR&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Linux &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;iBus:&lt;code&gt; /tmp&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;配置文件说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;default.custom.yaml&lt;/code&gt; 设置输入法、如何切换输入法、翻页等&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;squirrel.custom.yaml&lt;/code&gt; 鼠须管( Mac 版本 )设置哪些软件默认英文输入，输入法皮肤等&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;weasel.custom.yaml&lt;/code&gt; 小狼毫( Win 版本 )设置哪些软件默认英文输入，输入法皮肤等&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;配置文件中大部分都有注释。&lt;/p&gt; &#xA;&lt;h2&gt;词库定制以及更新&lt;/h2&gt; &#xA;&lt;p&gt;本仓库的词库目录&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/dicts&#34;&gt;dicts&lt;/a&gt;，主要有：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/rime-ice&#34;&gt;雾凇拼音词库&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yanhuacuo/98wubi-tables&#34;&gt;98五笔词库&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;详细说明：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;dicts&#xA;├── custom_simple.dict.yaml    # 自定义词库（建议自己添加的词库可以放这里）&#xA;├── other_emoji.dict.yaml      # emoji 词库&#xA;├── other_kaomoji.dict.yaml    # 颜文字词库（按vv进行激活）&#xA;├── rime_ice.41448.dict.yaml   # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.8105.dict.yaml    # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.base.dict.yaml    # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.ext.dict.yaml     # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.cn_en.txt         # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.en.dict.yaml      # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.en_ext.dict.yaml  # 雾凇词库（GitHub action自动更新）&#xA;├── rime_ice.others.dict.yaml  # 雾凇词库（GitHub action自动更新）&#xA;├── terra_pinyin_base.dict.yaml     # 地球拼音自带词库&#xA;├── terra_pinyin_ext.dict.yaml      # 地球拼音自带词库&#xA;├── terra_rime_ice.base.dict.yaml   # 基于Python脚本自动转换雾凇并Action自动更新&#xA;└── wubi98_base.dict.yaml           # 五笔基础词库&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;后续更新词库；可以下载本仓库&lt;code&gt;dicts&lt;/code&gt;内的文件，除了&lt;code&gt;custom_simple.dict.yaml&lt;/code&gt;的文件，其他都进行覆盖替换即可。&lt;/p&gt; &#xA;&lt;p&gt;如果想自己扩展词库，可以在输入法的字典配置文件内进行导入，比如薄荷拼音字典配置文件&lt;a href=&#34;https://raw.githubusercontent.com/Mintimate/oh-my-rime/main/rime_mint.dict.yaml&#34;&gt;rime_mint.dict.yaml&lt;/a&gt;内：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;name: rime_mint                  # 注意name和文件名一致&#xA;version: &#34;2024.02.11&#34;&#xA;sort: by_weight&#xA;# 此处为 输入法所用到的词库，既补充拓展词库的地方&#xA;# 雾凇拼音词库，由Github Robot自动更新&#xA;import_tables:&#xA;  - dicts/custom_simple          # 自定义&#xA;  - dicts/rime_ice.8105          # 霧凇拼音 常用字集合&#xA;  - dicts/rime_ice.41448         # 霧凇拼音 完整字集合&#xA;  - dicts/rime_ice.base          # 雾凇拼音 https://github.com/iDvel/rime-ice&#xA;  - dicts/rime_ice.ext           # 雾凇拼音 https://github.com/iDvel/rime-ice&#xA;  - dicts/other_kaomoji          # 颜文字表情（按`vv`呼出)&#xA;  - dicts/other_emoji            # Emoji(仅仅作为补充，实际使用一般是OpenCC生效)&#xA;  - dicts/rime_ice.others        # 雾凇拼音 others词库（用于自动纠错）&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;支持&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mintimate.cn&#34;&gt;Mintimate&#39;s Blog: https://www.mintimate.cn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://afdian.net/a/mintimate&#34;&gt;Mintimate的爱发电: 加入电圈，支持创造!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://space.bilibili.com/355567627&#34;&gt;Bilibili：@Mintimate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCI7LLdUGNzkcKOE7grAqCoA&#34;&gt;Youtube：@Mintimate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;参考/致谢&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rime/home/wiki/RimeWithSchemata&#34;&gt;Rime-RimeWithSchemata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chenhe.me/post/oh-my-rime&#34;&gt;Rime/小狼豪/鼠须管 输入法配置记&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Iorest/rime-setting&#34;&gt;rime-setting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/rime-ice&#34;&gt;雾凇拼音 | 长期维护的简体词库&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mirtlecn/rime-radical-pinyin&#34;&gt;rime-radical-pinyin | Rime 部件拆字输入方案（全拼双拼）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;推荐项目&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.98wubi.com/&#34;&gt;98五笔，十分好用的五笔输入方案&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iDvel/rime-ice&#34;&gt;雾凇拼音，很优秀的中文词库&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;尤其是雾凇拼音，本方案配置中，大量参考参考了雾凇拼音。词库部分，使用Python同步雾凇拼音的基础词库并启用雾凇拼音默认没有启用的ext扩展词库。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;⭐⭐⭐&lt;/h2&gt; &#xA;&lt;h2&gt;Star History&lt;/h2&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&amp;amp;theme=dark&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&#34;&gt; &#xA; &lt;img alt=&#34;Star History Chart&#34; src=&#34;https://api.star-history.com/svg?repos=Mintimate/oh-my-rime&amp;amp;type=Timeline&#34;&gt; &#xA;&lt;/picture&gt;</summary>
  </entry>
  <entry>
    <title>Zeioth/compiler.nvim</title>
    <updated>2024-03-15T01:31:28Z</updated>
    <id>tag:github.com,2024-03-15:/Zeioth/compiler.nvim</id>
    <link href="https://github.com/Zeioth/compiler.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim compiler for building and running your code without having to configure anything&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim&#34;&gt;Compiler.nvim&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Neovim compiler for building and running your code without having to configure anything.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Zeioth/compiler.nvim/assets/3357792/7c31d02c-2e8d-4562-bcec-323d8a468f67&#34; alt=&#34;screenshot_2023-06-19_13-59-07_947251291&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://discord.gg/ymcMaSnq7d&#34; rel=&#34;nofollow&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1121138836525813760?color=azure&amp;amp;labelColor=6DC2A4&amp;amp;logo=discord&amp;amp;logoColor=black&amp;amp;label=Join the discord server&amp;amp;style=for-the-badge&#34; data-canonical-src=&#34;https://img.shields.io/discord/1121138836525813760&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#why&#34;&gt;Why&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#supported-languages&#34;&gt;Supported languages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#required-system-dependencies&#34;&gt;Required system dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#how-to-install&#34;&gt;How to install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#how-to-use-basic-usage&#34;&gt;Basic usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#creating-a-solution-optional&#34;&gt;Creating a solution (optional)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#build-automation-utilities-optional&#34;&gt;Build automation utilities (optional)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Zeioth/compiler.nvim/main/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;Those familiar with Visual Studio IDE will remember how convenient it was to just press a button and having your program compiled and running. I wanted to bring that same user experience to Neovim.&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;More info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/languages/asm.lua&#34;&gt;asm x86-64&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/languages/c.lua&#34;&gt;c&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/languages/cpp.lua&#34;&gt;c++&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/languages/cs.lua&#34;&gt;c#&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/cs-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/dart.lua&#34;&gt;dart&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/dart-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/elixir.lua&#34;&gt;elixir&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/elixir-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/languages/fsharp.lua&#34;&gt;f#&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/fsharp-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/dart.lua&#34;&gt;flutter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/dart-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/go.lua&#34;&gt;go&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/java.lua&#34;&gt;java&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/java-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/javascript.lua&#34;&gt;javascript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/javascript-interpreter&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/kotlin.lua&#34;&gt;kotlin&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/java-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/lua.lua&#34;&gt;lua&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/make.lua&#34;&gt;make&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/perl.lua&#34;&gt;perl&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/python.lua&#34;&gt;python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/python-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/r.lua&#34;&gt;r&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/ruby.lua&#34;&gt;ruby&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/rust.lua&#34;&gt;rust&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/shell.lua&#34;&gt;shell&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/shell-interpreter&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/swift.lua&#34;&gt;swift&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/typescript.lua&#34;&gt;typescript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/typescript-transpiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/vb.lua&#34;&gt;visual basic dotnet&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/visual-basic-dotnet-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/raw/main/lua/compiler/languages/zig.lua&#34;&gt;zig&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/zig-compiler&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Required system dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Some languages require you manually install their compilers in your machine, so compiler.nvim is able to call them. &lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/wiki/how-to-install-the-required-dependencies&#34;&gt;Please check here&lt;/a&gt;, as the packages will be different depending your operative system.&lt;/p&gt; &#xA;&lt;h2&gt;How to install&lt;/h2&gt; &#xA;&lt;p&gt;lazy.nvim package manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{ -- This plugin&#xA;  &#34;Zeioth/compiler.nvim&#34;,&#xA;  cmd = {&#34;CompilerOpen&#34;, &#34;CompilerToggleResults&#34;, &#34;CompilerRedo&#34;},&#xA;  dependencies = { &#34;stevearc/overseer.nvim&#34; },&#xA;  opts = {},&#xA;},&#xA;{ -- The task runner we use&#xA;  &#34;stevearc/overseer.nvim&#34;,&#xA;  commit = &#34;68a2d344cea4a2e11acfb5690dc8ecd1a1ec0ce0&#34;,&#xA;  cmd = { &#34;CompilerOpen&#34;, &#34;CompilerToggleResults&#34;, &#34;CompilerRedo&#34; },&#xA;  opts = {&#xA;    task_list = {&#xA;      direction = &#34;bottom&#34;,&#xA;      min_height = 25,&#xA;      max_height = 25,&#xA;      default_detail = 1&#xA;    },&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommended mappings&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Open compiler&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;F6&amp;gt;&#39;, &#34;&amp;lt;cmd&amp;gt;CompilerOpen&amp;lt;cr&amp;gt;&#34;, { noremap = true, silent = true })&#xA;&#xA;-- Redo last selected option&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;S-F6&amp;gt;&#39;,&#xA;     &#34;&amp;lt;cmd&amp;gt;CompilerStop&amp;lt;cr&amp;gt;&#34; -- (Optional, to dispose all tasks before redo)&#xA;  .. &#34;&amp;lt;cmd&amp;gt;CompilerRedo&amp;lt;cr&amp;gt;&#34;,&#xA; { noremap = true, silent = true })&#xA;&#xA;-- Toggle compiler results&#xA;vim.api.nvim_set_keymap(&#39;n&#39;, &#39;&amp;lt;S-F7&amp;gt;&#39;, &#34;&amp;lt;cmd&amp;gt;CompilerToggleResults&amp;lt;cr&amp;gt;&#34;, { noremap = true, silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:CompilerOpen&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows the adecuated compiler for your buffer&#39;s filetype.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:CompilerToggleResults&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open or close the compiler results.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:CompilerRedo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redo the last selected option.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;:CompilerStop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Dispose all tasks.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to use (Basic usage)&lt;/h2&gt; &#xA;&lt;p&gt;This is what happen when you select &lt;code&gt;build &amp;amp; run&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, or &lt;code&gt;run&lt;/code&gt; in the compiler:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;compiler.nvim will look for the conventional entry point file for the current language you are using. To achieve this, it searches in your current working directory for the next files&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language&lt;/th&gt; &#xA;   &lt;th&gt;Default entry point&lt;/th&gt; &#xA;   &lt;th&gt;Default output&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;asm x86-64&lt;/td&gt; &#xA;   &lt;td&gt;./main.asm&lt;/td&gt; &#xA;   &lt;td&gt;./bin/program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c&lt;/td&gt; &#xA;   &lt;td&gt;./main.c&lt;/td&gt; &#xA;   &lt;td&gt;./bin/program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c++&lt;/td&gt; &#xA;   &lt;td&gt;./main.cpp&lt;/td&gt; &#xA;   &lt;td&gt;./bin/program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c#&lt;/td&gt; &#xA;   &lt;td&gt;./Program.cs&lt;/td&gt; &#xA;   &lt;td&gt;./bin/Program.exe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dart&lt;/td&gt; &#xA;   &lt;td&gt;./lib/main.dart&lt;/td&gt; &#xA;   &lt;td&gt;./bin/main&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;elixir&lt;/td&gt; &#xA;   &lt;td&gt;./mix.exs&lt;/td&gt; &#xA;   &lt;td&gt;./_build/&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;f#&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/fsharp-compiler&#34;&gt;see here&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;./bin/&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;flutter&lt;/td&gt; &#xA;   &lt;td&gt;./pubspec.yaml&lt;/td&gt; &#xA;   &lt;td&gt;./build/&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;go&lt;/td&gt; &#xA;   &lt;td&gt;./main.go&lt;/td&gt; &#xA;   &lt;td&gt;./bin/program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;java&lt;/td&gt; &#xA;   &lt;td&gt;./Main.java&lt;/td&gt; &#xA;   &lt;td&gt;./bin/Main.class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;javascript&lt;/td&gt; &#xA;   &lt;td&gt;./src/index.js&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kotlin&lt;/td&gt; &#xA;   &lt;td&gt;./Main.kt&lt;/td&gt; &#xA;   &lt;td&gt;./bin/MainKt.class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lua&lt;/td&gt; &#xA;   &lt;td&gt;./main.lua&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;make&lt;/td&gt; &#xA;   &lt;td&gt;./Makefile&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;perl&lt;/td&gt; &#xA;   &lt;td&gt;./main.pl&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;python&lt;/td&gt; &#xA;   &lt;td&gt;./main.py&lt;/td&gt; &#xA;   &lt;td&gt;./bin/program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;r&lt;/td&gt; &#xA;   &lt;td&gt;./main.r&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ruby&lt;/td&gt; &#xA;   &lt;td&gt;./main.rb&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rust&lt;/td&gt; &#xA;   &lt;td&gt;./main.rs&lt;/td&gt; &#xA;   &lt;td&gt;./bin/program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;shell&lt;/td&gt; &#xA;   &lt;td&gt;./main.sh&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;swift&lt;/td&gt; &#xA;   &lt;td&gt;./main.swift&lt;/td&gt; &#xA;   &lt;td&gt;./bin/program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;typescript&lt;/td&gt; &#xA;   &lt;td&gt;./src/index.ts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;visual basic .net&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/visual-basic-dotnet-compiler&#34;&gt;see here&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;./bin/&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zig&lt;/td&gt; &#xA;   &lt;td&gt;./build.zig&lt;/td&gt; &#xA;   &lt;td&gt;./zig-out/bin/build&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This is how the compilation results look after selecting &lt;code&gt;Build &amp;amp; run program&lt;/code&gt; in c &lt;img src=&#34;https://github.com/Zeioth/compiler.nvim/assets/3357792/42c4ec0d-4446-4ac6-9c4a-478a32d23ca7&#34; alt=&#34;screenshot_2023-06-19_13-59-37_766847673&#34;&gt; &lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/wiki/When-to-use-every-option&#34;&gt;For more info see wiki - when to use every option&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Creating a solution (optional)&lt;/h2&gt; &#xA;&lt;p&gt;If you want to have more control, you can create a &lt;code&gt;.solution.toml&lt;/code&gt; file in your working directory by using this template where every [entry] represents a program to compile&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[HelloWorld]&#xA;entry_point = &#34;/path/to/my/entry_point_file/main.c&#34;&#xA;output = &#34;/path/where/the/program/will/be/written/hello_world&#34;&#xA;arguments = &#34;&#34;&#xA;&#xA;[SOLUTION]&#xA;executable = &#34;/program/to/execute/after/the/solution/has/compiled/my_program&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/wiki/solution-examples&#34;&gt;For more examples see wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build automation utilities (optional)&lt;/h2&gt; &#xA;&lt;p&gt;If any of these files exist in your current working directory, they will be automatically detected and displayed on &lt;a href=&#34;https://github.com/Zeioth/compiler.nvim&#34;&gt;Compiler.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Build automation utility&lt;/th&gt; &#xA;   &lt;th&gt;More info&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/bau/make.lua&#34;&gt;Makefile&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/wiki/Makefile-build-automation-utility&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/bau/cmake.lua&#34;&gt;CMakeLists.txt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/wiki/CMake-build-automation-utility&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/bau/gradle.lua&#34;&gt;build.gradle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/wiki/gradle-build-automation-utility&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/compiler.nvim/raw/main/lua/compiler/bau/nodejs.lua&#34;&gt;package.json&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/wiki/nodejs-build-automation-utility&#34;&gt;+info&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Create &lt;code&gt;~/c-example/main.c&lt;/code&gt; and paste this code. Then do &lt;code&gt;:cd ~/c-example/&lt;/code&gt; to change the working directory to the project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&#xA;&#xA;int main() {&#xA;    printf(&#34;Hello, World!\n&#34;);&#xA;    return 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open the compiler and select &lt;code&gt;Build and run&lt;/code&gt;. You will see the compilation results.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/Zeioth/compiler.nvim/assets/3357792/fd102350-ca44-4501-9cb0-db2ea0093264&#34; alt=&#34;screenshot_2023-07-25_23-56-57_069109256&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;I get errors when compiling:&lt;/strong&gt; You have to &lt;code&gt;:cd /your/project/root_dir&lt;/code&gt; before calling &lt;a href=&#34;https://starchart.cc/Zeioth/Compiler.nvim&#34;&gt;Compiler.nvim&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;How can I auto &lt;code&gt;:cd&lt;/code&gt; my projects?&lt;/strong&gt; Use &lt;a href=&#34;https://github.com/ahmedkhalf/project.nvim/pull/131&#34;&gt;this fork&lt;/a&gt; of the plugin &lt;code&gt;project.nvim&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I don&#39;t have time to read:&lt;/strong&gt; If you prefer you can try &lt;a href=&#34;https://github.com/NormalNvim/NormalNvim&#34;&gt;NormalNvim&lt;/a&gt; which comes with the compiler pre-installed. Just open some code and hit F6!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;How can I add a language that is not supported yet?&lt;/strong&gt; Fork the project, and go to the directory &lt;code&gt;/compiler/languages&lt;/code&gt;. Copy &lt;code&gt;c.lua&lt;/code&gt; and rename it to any language you would like to add, for example &lt;code&gt;ruby.lua&lt;/code&gt;. Now modify the file the way you want. It is important you name the file as the filetype of the language you are implementing. Then please, submit a PR to this repo so everyone can benefit from it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;How can I change the way the compiler works?&lt;/strong&gt; Same as the previous one.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;How can I add an automation build utility that is not supported yet?&lt;/strong&gt; Fork the project, and go to the directory &lt;code&gt;/compiler/bau&lt;/code&gt;. Copy &lt;code&gt;make.lua&lt;/code&gt; and rename it to the build automation utility you want to add, for example &lt;code&gt;maven.lua&lt;/code&gt;. Now modify the file the way you want. Note that you will also have to modify &lt;code&gt;/utilities-bau.lua&lt;/code&gt; and change the function &lt;code&gt;get_bau_opts()&lt;/code&gt; so it can parse the utility you want to add. Then please, submit a PR to this repo so everyone can benefit from it.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Is this plugin just a compiler, or can I run scripts too?&lt;/strong&gt; Yes you can. But if your script receive arguments, we recommend you to use the terminal instead, because creating a &lt;code&gt;.solution.toml&lt;/code&gt; file just to be able to pass arguments to your simple shell script is probably a overkill, and not the right tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;I&#39;m a windows user, do I need to do something special?&lt;/strong&gt; You have to &lt;a href=&#34;https://www.youtube.com/watch?v=fFbLUEQsRhM&#34;&gt;enable WSL&lt;/a&gt;, and run nvim inside. Otherwise it would be impossible for you to install the &lt;a href=&#34;https://github.com/Zeioth/Compiler.nvim/wiki/how-to-install-the-required-dependencies&#34;&gt;required dependencies&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;How can I disable notifications when compiling?&lt;/strong&gt; Check &lt;a href=&#34;https://github.com/stevearc/overseer.nvim/issues/158#issuecomment-1631542247&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How can I compile videogames?&lt;/h3&gt; &#xA;&lt;p&gt;The workflow of game development is essentially very different from just compiling and running a program. It involve loading editing and running scenes. While there is no way for us to support it directly, here I offer you some tricks:&lt;/p&gt; &#xA;&lt;h4&gt;Godot engine&lt;/h4&gt; &#xA;&lt;p&gt;To &lt;code&gt;Build and run a godot scene&lt;/code&gt;, use the command &lt;code&gt;godot /my/scene.tscn&lt;/code&gt; on the terminal. This works really well: It&#39;s fast and simple.&lt;/p&gt; &#xA;&lt;h4&gt;Unity&lt;/h4&gt; &#xA;&lt;p&gt;The recommended way is to have 2 monitors, one with nvim and your code, and another one with your unity scenes to run the game. Unity has &lt;a href=&#34;https://docs.unity3d.com/Manual/CommandLineArguments.html&#34;&gt;some terminal commands&lt;/a&gt;, but working with them is quite a painful experience.&lt;/p&gt; &#xA;&lt;h2&gt;🌟 Support the project&lt;/h2&gt; &#xA;&lt;p&gt;If you want to help me, please star this repository to increase the visibility of the project.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/Zeioth/Compiler.nvim&#34;&gt;&lt;img src=&#34;https://starchart.cc/Zeioth/Compiler.nvim.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Thanks to all contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/zeioth/compiler.nvim/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=zeioth/compiler.nvim&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust, go, swift&lt;/code&gt; require the user to initialize the package before using its respective cli &lt;code&gt;cargo, go, swift&lt;/code&gt;. Let&#39;s explain this on &lt;code&gt;+more info&lt;/code&gt;. → Let&#39;s evaluate the pros and cons of auto initializing a package if do not exist already, so this process is automatic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Building systems → meson&lt;/code&gt; is planned. Auto discovery of options defined by the user is planned.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cli → pip&lt;/code&gt; look for improvements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cli → cargo&lt;/code&gt; look for improvements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cli → dart pub&lt;/code&gt; look for improvements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cli → go build&lt;/code&gt; look for improvements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cli → elixir&lt;/code&gt; look for improvements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cli → zig&lt;/code&gt; look for improvements.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Building systems → maven&lt;/code&gt; is planned. Auto discovery of options defined by the user is planned.&lt;/li&gt; &#xA; &lt;li&gt;Consider adding rake support.&lt;/li&gt; &#xA; &lt;li&gt;Better Windows compatibility when not using WSL: The commands &lt;code&gt;rm -rf&lt;/code&gt; and &lt;code&gt;mkdir -p&lt;/code&gt; only exist on unix. To support Windows without WSL we should run the equivalent powershell command when Windows is detected.&lt;/li&gt; &#xA; &lt;li&gt;Aditionally, we will also have to compile for &lt;code&gt;asm&lt;/code&gt; win64 architecture, if the detected OS is windows.&lt;/li&gt; &#xA; &lt;li&gt;Aditionally, we will also have to add an option to compile for &lt;code&gt;Build for windows (flutter)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>