<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-05T01:34:39Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>samjwill/nvim-unception</title>
    <updated>2022-11-05T01:34:39Z</updated>
    <id>tag:github.com,2022-11-05:/samjwill/nvim-unception</id>
    <link href="https://github.com/samjwill/nvim-unception" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A plugin that leverages Neovim&#39;s built-in RPC functionality to simplify opening files from within Neovim&#39;s terminal emulator without unintentionally nesting sessions.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-unception&lt;/h1&gt; &#xA;&lt;p&gt;A plugin that leverages Neovim&#39;s built-in &lt;code&gt;RPC&lt;/code&gt; functionality to simplify opening files from within Neovim&#39;s terminal emulator without unintentionally nesting sessions.&lt;/p&gt; &#xA;&lt;p&gt;Terminal buffers will no longer enter a state of &#34;inception&#34; in which an instance of Neovim is open within an instance of Neovim. Instead, the desired files and directories will be opened by the &#34;host&#34; Neovim session, which leverages &lt;code&gt;:argadd&lt;/code&gt; to update its own arguments.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/25990267/170632310-8bbee2fa-672b-4385-9dea-7ed4501a0558.mp4&#34;&gt;https://user-images.githubusercontent.com/25990267/170632310-8bbee2fa-672b-4385-9dea-7ed4501a0558.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Working with Git&lt;/h2&gt; &#xA;&lt;p&gt;There are a few options for using Neovim as your editor for git from within Neovim itself.&lt;/p&gt; &#xA;&lt;p&gt;The first option is to make git defer editing to the host session, and block until the host unloads the buffer being edited. This can be done by setting your git &lt;code&gt;core.editor&lt;/code&gt; to pass the &lt;code&gt;g:unception_block_while_host_edits=1&lt;/code&gt; argument (like &lt;a href=&#34;https://github.com/samjwill/dotfiles/raw/ba56af2ff49cd23ac19fcffe7840a78c58a89c9b/.gitconfig#L5&#34;&gt;this&lt;/a&gt;). Note that the terminal will be blocked until the commit buffer is unloaded.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example workflow with this flag set:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/25990267/199399213-a0b72114-99b4-4b4b-9a14-8d7a7fc0bb3e.mp4&#34;&gt;https://user-images.githubusercontent.com/25990267/199399213-a0b72114-99b4-4b4b-9a14-8d7a7fc0bb3e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that if Neovim&#39;s &lt;code&gt;&#39;hidden&#39;&lt;/code&gt; option is set, the buffer will not be unloaded upon running &lt;code&gt;:wq&lt;/code&gt;. Instead &lt;code&gt;:bdelete&lt;/code&gt; will need to be called on the git commit message buffer to trigger the &lt;code&gt;BufUnload&lt;/code&gt; event and unblock the shell.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, if you would like to be able to edit using Neovim directly inside of a nested session, you can disable unception altogether by setting your git &lt;code&gt;core.editor&lt;/code&gt; to pass the &lt;code&gt;g:unception_disable=1&lt;/code&gt; argument (like &lt;a href=&#34;https://github.com/samjwill/dotfiles/raw/c59477c47867fb8f5560ba01d17722443428bc7e/.gitconfig#L5&#34;&gt;this&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Lastly, setting your &lt;code&gt;core.editor&lt;/code&gt; to another file editor, such as GNU nano would also work.&lt;/p&gt; &#xA;&lt;h2&gt;Can this work with terminal-toggling plugins?&lt;/h2&gt; &#xA;&lt;p&gt;Yep! See the &lt;a href=&#34;https://github.com/samjwill/nvim-unception/wiki&#34;&gt;wiki&lt;/a&gt; for setup info.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Neovim 0.7 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;samjwill/nvim-unception&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;use &#34;samjwill/nvim-unception&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;The plugin tells Neovim to automatically start a local server listening to a named pipe at launch. Upon launching a new Neovim session within a terminal emulator buffer, the arguments are forwarded to the aforementioned Neovim server session via the pipe, and the server session replaces the buffer under the cursor (the terminal buffer) with the first file/directory argument specified.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;This plugin works well enough for me but your mileage may vary. If you find an issue, feel free to create one detailing the problem on the GitHub repo, and I&#39;ll try to fix it if I&#39;m able. If you run into a problem, Unception can be temporarily disabled when launching Neovim like so: &lt;code&gt;nvim --cmd &#34;let g:unception_disable=1&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other Neovim command-line arguments that do not involve editing a file or directory may not work as expected from &lt;em&gt;within&lt;/em&gt; the terminal emulator (e.g. passing &lt;code&gt;-b&lt;/code&gt; to edit in binary mode when inside of a terminal buffer will not propagate binary mode to the file when it&#39;s unnested, and opening a file as read-only when the server session is not set to read-only mode will not result in a read-only buffer). See &lt;code&gt;:help vim-arguments&lt;/code&gt; for how these are typically used. Note that any arguments that might not work when launched from within a Neovim terminal buffer should work just fine when launching Neovim normally. They should also behave as as they do by default if you pass the disable flag described above, even if launched from within a terminal buffer.&lt;/p&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;For usage details and options (such as opening the file buffers in new tabs rather than the current window), see &lt;a href=&#34;https://github.com/samjwill/nvim-unception/raw/main/doc/nvim-unception.txt&#34;&gt;doc/nvim-unception.txt&lt;/a&gt;, or, after installation, run &lt;code&gt;:help nvim-unception&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dbalatero/VimMode.spoon</title>
    <updated>2022-11-05T01:34:39Z</updated>
    <id>tag:github.com,2022-11-05:/dbalatero/VimMode.spoon</id>
    <link href="https://github.com/dbalatero/VimMode.spoon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Adds vim keybindings to all OS X inputs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VimMode.spoon&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/dbalatero/VimMode.spoon&#34;&gt;&lt;img src=&#34;https://travis-ci.com/dbalatero/VimMode.spoon.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;🚀&lt;/span&gt; This library will add Vim motions and operators to all your input fields on OS X. Why should Emacs users have all the fun?&lt;/p&gt; &#xA;&lt;figure&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/images/vim-mode.gif&#34; alt=&#34;Example of VimMode.spoon&#34;&gt; &#xA; &lt;figcaption&gt;&#xA;   This uses Hammerspoon, but don&#39;t worry - the [quick installer](#quick-installation) is a 1-line bash command to get everything setup. &#xA; &lt;/figcaption&gt; &#xA;&lt;/figure&gt; &#xA;&lt;p&gt;Not all motions or operators are implemented, but you can open an issue if you&#39;re missing something.&lt;/p&gt; &#xA;&lt;p&gt;The plugin will not work with system inputs marked as secure, such as password fields or anything in 1Password, as it can&#39;t read those fields!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#quick-installation&#34;&gt;Quick Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#current-support&#34;&gt;Current Support&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#flavors-of-vimmode&#34;&gt;Flavors of VimMode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#motions&#34;&gt;Motions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#other&#34;&gt;Other&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#binding-jk-to-enter-normal-mode&#34;&gt;Binding jk to enter normal mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#binding-a-single-keystroke-to-enter-normal-mode&#34;&gt;Binding a single keystroke to enter normal mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#disabling-vim-mode-for-certain-apps&#34;&gt;Disabling vim mode for certain apps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#disabling-the-floating-alert-when-you-enter-vim-modes&#34;&gt;Disabling the floating alert when you enter Vim mode(s)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#enabling-screen-dim-when-you-enter-normal-mode&#34;&gt;Enabling screen dim when you enter normal mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#beta-features&#34;&gt;Beta Features&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#block-cursor-mode&#34;&gt;Block cursor mode&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#enforce-fallback-mode-with-url-patterns&#34;&gt;Enforce fallback mode with URL patterns&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#manual-installation&#34;&gt;Manual Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Installation&lt;/h2&gt; &#xA;&lt;p&gt;Run this command in Terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash &amp;lt;(curl -s https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/bin/installer)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then &lt;em&gt;read the post-install info&lt;/em&gt; printed at the end and follow the instructions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you prefer, follow the &lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/#manual-instructions&#34;&gt;Manual Instructions&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t trust the script, please &lt;a href=&#34;https://github.com/dbalatero/VimMode.spoon/raw/master/bin/installer&#34;&gt;audit it&lt;/a&gt;. It should be pretty straight-forward to read, and doesn&#39;t require root/sudo.&lt;/li&gt; &#xA; &lt;li&gt;It is safe to run this script multiple times.&lt;/li&gt; &#xA; &lt;li&gt;It will not break your existing Hammerspoon setup if you have one.&lt;/li&gt; &#xA; &lt;li&gt;It is progressive - it only sets up what is missing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To enter normal mode, hit whichever key you bind to it (see below for key bind instructions)&lt;/li&gt; &#xA; &lt;li&gt;To exit normal mode, press &lt;kbd&gt;i&lt;/kbd&gt; and you&#39;re back to a normal OS X input.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Staying up to date&lt;/h2&gt; &#xA;&lt;p&gt;To update the plugin, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd ~/.hammerspoon/Spoons/VimMode.spoon &amp;amp;&amp;amp; git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Current Support&lt;/h2&gt; &#xA;&lt;h3&gt;Flavors of VimMode.&lt;/h3&gt; &#xA;&lt;p&gt;There are two flavors of Vim mode that we try to enable using feature detection.&lt;/p&gt; &#xA;&lt;h4&gt;Advanced Mode&lt;/h4&gt; &#xA;&lt;p&gt;Advanced mode gets turned on when we detect the accessibility features we need to make it work. If the field you are focused in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports the OS X accessibility API&lt;/li&gt; &#xA; &lt;li&gt;Is not a rich field with images, embeds, etc&lt;/li&gt; &#xA; &lt;li&gt;Is not a &lt;code&gt;contentEditable&lt;/code&gt; rich field in the web browser, I&#39;m not touching that with a 10-foot pole&lt;/li&gt; &#xA; &lt;li&gt;Is not one of these applications that don&#39;t completely implement the Accessibility API: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Slack.app (Electron)&lt;/li&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://github.com/dbalatero/VimMode.spoon/raw/ddce96de8f0edd0f9285e66fc76b4bdcc74916b4/lib/accessibility_buffer.lua#L9-L11&#34;&gt;this file&lt;/a&gt; for reasons why these apps are broken and disabled out of the box.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In advanced mode, we actually can read in the value of the focused field and modify cursor position/selection with theoretical perfect accuracy. In this mode, I strive to make sure all Vim motions are as accurate as the editor. I&#39;m sure they are not, though, and would appreciate bug reports!&lt;/p&gt; &#xA;&lt;h4&gt;Fallback mode&lt;/h4&gt; &#xA;&lt;p&gt;In fallback mode, we just map Vim motions/operators to built-in text keyboard shortcuts in OS X, and fire them blindly. This works pretty well, and is how the original version of this plugin worked. There is some behavior that doesn&#39;t match Vim however, which we cannot emulate without having the context that Advanced Mode gives.&lt;/p&gt; &#xA;&lt;h3&gt;Motions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;A&lt;/kbd&gt; - jump to end of line&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;G&lt;/kbd&gt; - jump to last line of input&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;I&lt;/kbd&gt; - jump to beginning of line&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;0&lt;/code&gt; - beginning of line&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;$&lt;/code&gt; - end of line&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;f&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;F&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;t&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;T&amp;lt;char&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;a&lt;/kbd&gt; - move right and enter insert&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;b&lt;/kbd&gt; - back by word&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;B&lt;/kbd&gt; - back by big word (&lt;code&gt;:h WORD&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;e&lt;/kbd&gt; - fwd to end of word&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;kbd&gt;E&lt;/kbd&gt; - fwd to end of big word (&lt;code&gt;:h WORD&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;gg&lt;/code&gt; - top of buffer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;hjkl&lt;/code&gt; - arrow keys&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;w&lt;/kbd&gt; fwd by word&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;W&lt;/kbd&gt; fwd by big word (&lt;code&gt;:h WORD&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;iw&lt;/code&gt; - in word&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;i&#39;&lt;/code&gt; - in single quotes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;i(&lt;/code&gt; - in parens&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;i{&lt;/code&gt; - in braces&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;i&amp;lt;&lt;/code&gt; - in angle brackets&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;i`&lt;/code&gt; - in backticks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;i&#34;&lt;/code&gt; - in double quotes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Operators&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;c&lt;/kbd&gt; - delete to end of line, exit normal mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;d&lt;/kbd&gt; delete to end of line&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;c&lt;/kbd&gt; - delete and exit normal mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;d&lt;/kbd&gt; - delete&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;cc&lt;/code&gt; - delete line and enter insert mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;dd&lt;/code&gt; - delete line&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;r&amp;lt;char&amp;gt;&lt;/code&gt; to replace - currently broken&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;x&lt;/kbd&gt; to delete char under cursor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;i&lt;/kbd&gt; to go back to insert mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;o&lt;/kbd&gt; - add new line below, exit normal mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;shift&lt;/kbd&gt; + &lt;kbd&gt;o&lt;/kbd&gt; - add new line above, exit normal mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;p&lt;/kbd&gt; to paste&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;s&lt;/kbd&gt; to delete under cursor, exit normal mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;^r&lt;/code&gt; to redo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;u&lt;/kbd&gt; to undo&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;y&lt;/kbd&gt; to yank to clipboard&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;kbd&gt;/&lt;/kbd&gt; to trigger &lt;code&gt;cmd+f&lt;/code&gt; search (when &lt;code&gt;cmd+f&lt;/code&gt; is supported in app)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; visual mode with &lt;kbd&gt;v&lt;/kbd&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; UTF-8 support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;^d&lt;/code&gt; - page down&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;^u&lt;/code&gt; - page down&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; support prefixing commands with numbers to repeat them (e.g. &lt;code&gt;2dw&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Here are all the configuration options available for you. Add/edit your config in &lt;code&gt;~/.hammerspoon/init.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Binding jk to enter normal mode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local VimMode = hs.loadSpoon(&#39;VimMode&#39;)&#xA;local vim = VimMode:new()&#xA;&#xA;vim:enterWithSequence(&#39;jk&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This sequence only watches for simple characters - it can&#39;t handle uppercase (&lt;code&gt;enterWithSequence(&#39;JK&#39;)&lt;/code&gt;) or any other modifier keys (&lt;kbd&gt;ctrl&lt;/kbd&gt;, &lt;kbd&gt;shift&lt;/kbd&gt;). This is meant to handle the popularity of people binding &lt;code&gt;jj&lt;/code&gt;, &lt;code&gt;jk&lt;/code&gt;, or &lt;code&gt;kj&lt;/code&gt; to entering normal mode in Vim.&lt;/p&gt; &#xA;&lt;p&gt;The sequence also times out by default after &lt;code&gt;140ms&lt;/code&gt; - if you type a &lt;code&gt;j&lt;/code&gt; and wait for the timeout, it will type the &lt;code&gt;j&lt;/code&gt; for you. You can control the timeout like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- timeout after 100ms instead. this is a nicer default for `jk`, but needs to&#xA;-- be more like 140ms for `jj` to be caught quickly enough.&#xA;&#xA;vim:enterWithSequence(&#39;jk&#39;, 100)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have a sequence of &lt;code&gt;jk&lt;/code&gt; and you go to type &lt;code&gt;ja&lt;/code&gt; it will immediately pass through the &lt;code&gt;ja&lt;/code&gt; keys without any latency either. I wanted this to work close to &lt;code&gt;inoremap jk &amp;lt;esc&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Binding a single keystroke to enter normal mode&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Basic key binding to ctrl+;&#xA;-- You can choose any key binding you want here, see:&#xA;--   https://www.hammerspoon.org/docs/hs.hotkey.html#bind&#xA;&#xA;vim:bindHotKeys({ enter = {{&#39;ctrl&#39;}, &#39;;&#39;} })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Forcing fallback mode for certain apps&lt;/h3&gt; &#xA;&lt;p&gt;Some apps work best in fallback mode. To force fallback mode for these apps, do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local VimMode = hs.loadSpoon(&#39;VimMode&#39;)&#xA;local vim = VimMode:new()&#xA;&#xA;-- Dwarf Fortress needs to use fallback mode :)j&#xA;vim:useFallbackMode(&#39;dwarfort.exe&#39;)&#xA;&#xA;-- same w/ Chrome&#xA;vim:useFallbackMode(&#39;Google Chrome&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabling vim mode for certain apps&lt;/h3&gt; &#xA;&lt;p&gt;You probably want to disable this Vim mode in the terminal, or any actual instance of Vim. Calling &lt;code&gt;vim:disableForApp(...)&lt;/code&gt; allows you to disable or enable Vim mode depending on which window is in focus.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local VimMode = hs.loadSpoon(&#39;VimMode&#39;)&#xA;local vim = VimMode:new()&#xA;&#xA;-- sometimes you need to check Activity Monitor to get the app&#39;s&#xA;-- real name&#xA;vim:disableForApp(&#39;Code&#39;)&#xA;vim:disableForApp(&#39;iTerm&#39;)&#xA;vim:disableForApp(&#39;MacVim&#39;)&#xA;vim:disableForApp(&#39;Terminal&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Disabling the floating alert when you enter Vim mode(s)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local VimMode = hs.loadSpoon(&#39;VimMode&#39;)&#xA;local vim = VimMode:new()&#xA;&#xA;vim:shouldShowAlertInNormalMode(false)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Enabling screen dim when you enter normal mode&lt;/h3&gt; &#xA;&lt;p&gt;This turns on a Flux-style dim when you enter normal mode.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local VimMode = hs.loadSpoon(&#39;VimMode&#39;)&#xA;local vim = VimMode:new()&#xA;&#xA;vim:shouldDimScreenInNormalMode(true)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Beta Features&lt;/h2&gt; &#xA;&lt;p&gt;There are a few beta features you can try out right now and give feedback on:&lt;/p&gt; &#xA;&lt;h3&gt;Block cursor mode&lt;/h3&gt; &#xA;&lt;p&gt;This adds an experimental block cursor on top of the current character, to emulate what it looks like in Vim. This only works in fields that support Advanced Mode.&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/59429/103227216-cdb34080-48fb-11eb-9bc5-b0004a2b64ae.png&#34;&gt; &#xA;&lt;p&gt;To enable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim:enableBetaFeature(&#39;block_cursor_overlay&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discussed in&lt;/strong&gt;: &lt;a href=&#34;https://github.com/dbalatero/VimMode.spoon/issues/63&#34;&gt;#63&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Enforce fallback mode with URL patterns&lt;/h3&gt; &#xA;&lt;p&gt;Some websites just really need to be forced into fallback mode at all times, and the detection we have isn&#39;t good enough to do so. This &lt;em&gt;may&lt;/em&gt; be deprecated going forward in favor of getting better field detection or handling rich fields better.&lt;/p&gt; &#xA;&lt;p&gt;This currently only works for Chrome and Safari, as Firefox has a trash AppleScript interface.&lt;/p&gt; &#xA;&lt;p&gt;To enable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim:enableBetaFeature(&#39;fallback_only_urls&#39;)&#xA;&#xA;-- When entering normal mode on any URL that matches any of the patterns below,&#xA;-- we will enforce fallback mode.&#xA;vim:setFallbackOnlyUrlPatterns({&#xA;  &#34;docs.google.com&#34;,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Discussed in&lt;/strong&gt;: &lt;a href=&#34;https://github.com/dbalatero/VimMode.spoon/issues/71&#34;&gt;#71&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Manual Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;http://www.hammerspoon.org/go/&#34;&gt;Hammerspoon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, run this in your Terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir -p ~/.hammerspoon/Spoons&#xA;git clone https://github.com/dbalatero/VimMode.spoon \&#xA;  ~/.hammerspoon/Spoons/VimMode.spoon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify your &lt;code&gt;~/.hammerspoon/init.lua&lt;/code&gt; file to contain the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local VimMode = hs.loadSpoon(&#39;VimMode&#39;)&#xA;local vim = VimMode:new()&#xA;&#xA;vim&#xA;  :disableForApp(&#39;Code&#39;)&#xA;  :disableForApp(&#39;MacVim&#39;)&#xA;  :disableForApp(&#39;zoom.us&#39;)&#xA;  :enterWithSequence(&#39;jk&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;There are unit tests and integration tests!&lt;/p&gt; &#xA;&lt;p&gt;To run the unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd VimMode.spoon&#xA;&#xA;bin/dev-setup&#xA;busted spec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the integration tests, there is a bit of setup, which you can read about in the &lt;a href=&#34;https://raw.githubusercontent.com/dbalatero/VimMode.spoon/master/docs/Integration_Tests.md&#34;&gt;&lt;code&gt;docs/Integration_Tests.md&lt;/code&gt;&lt;/a&gt; document. However, once you setup, it should just be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bundle exec rspec spec&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sile-typesetter/sile</title>
    <updated>2022-11-05T01:34:39Z</updated>
    <id>tag:github.com,2022-11-05:/sile-typesetter/sile</id>
    <link href="https://github.com/sile-typesetter/sile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simon’s Improved Layout Engine&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/sile-typesetter/sile/actions?workflow=Build&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/sile-typesetter/sile/Build?label=Linux%20Build&amp;amp;logo=Github&#34; alt=&#34;Actions Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cirrus-ci.com/github/sile-typesetter/sile/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/cirrus/github/sile-typesetter/sile?label=FreeBSD%20Build&amp;amp;logo=freebsd&#34; alt=&#34;Cirrus Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/siletypesetter/sile/builds&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/cloud/build/siletypesetter/sile?label=Docker%20Build&amp;amp;logo=Docker&#34; alt=&#34;Docker Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/sile-typesetter/sile/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/azure-devops/build/sile-typesetter/069c3e31-ee59-4bd6-b395-1f1059acd8db/1?label=Windows%20Build&amp;amp;logo=Azuredevops&#34; alt=&#34;Azure Build Status&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/sile-typesetter/sile/actions?workflow=Luacheck&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/sile-typesetter/sile/Luacheck?label=Luacheck&amp;amp;logo=Lua&#34; alt=&#34;Luacheck Lint Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/sile-typesetter/sile?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/sile-typesetter/sile?label=Coverage&amp;amp;logo=Coveralls&#34; alt=&#34;Coveralls Coverage Status&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://gitter.im/simoncozens/sile?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/simoncozens/sile?color=blue&amp;amp;label=Chat&amp;amp;logo=Gitter&#34; alt=&#34;Chat on Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://conventionalcommits.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Conventional%20Commits-1.0.0-blue.svg?sanitize=true&#34; alt=&#34;Conventional Commits&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://commitizen.github.io/cz-cli/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Commitizen-friendly-blue.svg?sanitize=true&#34; alt=&#34;Commitizen Friendly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is SILE?&lt;/h2&gt; &#xA;&lt;p&gt;SILE is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Typesetting&#34;&gt;typesetting&lt;/a&gt; system; its job is to produce beautiful printed documents. Conceptually, SILE is similar to &lt;a href=&#34;https://en.wikipedia.org/wiki/TeX&#34;&gt;TeX&lt;/a&gt;—from which it borrows some concepts and even syntax and algorithms—but the similarities end there. Rather than being a derivative of the TeX family SILE is a new typesetting and layout engine written from the ground up using modern technologies and borrowing some ideas from graphical systems such as &lt;a href=&#34;https://en.wikipedia.org/wiki/Adobe_InDesign&#34;&gt;InDesign&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Where does it run?&lt;/h2&gt; &#xA;&lt;p&gt;SILE can be &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#download-and-installation&#34;&gt;downloaded &amp;amp; installed&lt;/a&gt; to your system or &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#use-as-a-CI-job&#34;&gt;run remotely as a CI job&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What can I do with SILE (that I can’t do with TeX)?&lt;/h2&gt; &#xA;&lt;p&gt;First, have a look at the &lt;a href=&#34;http://www.sile-typesetter.org/examples/&#34;&gt;usage examples gallery&lt;/a&gt;. SILE allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Produce complex document layouts using frames.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Easily extend the typesetting system in a high-level programming language (Lua).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Directly process XML to PDF without the use of XSL stylesheets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Typeset text on a grid.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Download and Installation&lt;/h2&gt; &#xA;&lt;h3&gt;For macOS&lt;/h3&gt; &#xA;&lt;p&gt;A formula is available for &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt; that can install either stable or head versions. For the latest prebuilt stable release:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install sile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or to build and install from the latest git commit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install sile --HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note the Homebrew package does not automatically install the &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#default-font&#34;&gt;default font&lt;/a&gt;. The easiest way to install Gentium Plus is through the &lt;a href=&#34;https://github.com/Homebrew/homebrew-cask-fonts&#34;&gt;Homebrew Fonts caskroom&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew tap homebrew/cask-fonts&#xA;$ brew install --cask font-gentium-plus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;For Linux&lt;/h3&gt; &#xA;&lt;h4&gt;Arch Linux&lt;/h4&gt; &#xA;&lt;p&gt;Arch Linux has a prebuilt &lt;a href=&#34;https://archlinux.org/packages/community/x86_64/sile/&#34;&gt;SILE package&lt;/a&gt; in the official package repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pacman -S sile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The official package uses Lua 5.4. Alternatively, a package that uses LuaJIT may be built manually from the &lt;a href=&#34;https://wiki.archlinux.org/index.php/Arch_User_Repository&#34;&gt;Arch User Repository&lt;/a&gt; using &lt;a href=&#34;https://aur.archlinux.org/packages/sile-luajit/&#34;&gt;sile-luajit&lt;/a&gt;. A VCS package is also available as &lt;a href=&#34;https://aur.archlinux.org/packages/sile-git/&#34;&gt;sile-git&lt;/a&gt; to build from the latest Git commit.&lt;/p&gt; &#xA;&lt;h4&gt;NixOS&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://nixos.org/nix&#34;&gt;Nix &lt;code&gt;sile&lt;/code&gt; package&lt;/a&gt; is available in both the stable and unstable channels; the unstable channel having the latest stable SILE releases and the stable channel being frozen on NixOS releases. You can use all the usual Nix tricks including adding SILE into a &lt;code&gt;nix shell&lt;/code&gt; environment or executing it directly with &lt;code&gt;nix run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See additional usage notes in the &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#nix&#34;&gt;Nix section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Ubuntu&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://launchpad.net/~sile-typesetter/+archive/ubuntu/sile&#34;&gt;PPA&lt;/a&gt; is available for Ubuntu users with packages of SILE and all the necessary dependencies. We introduced support starting with Bionic (18.04) and maintain packages for all Ubuntu release series since for as long as they are supported by Canonical.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo add-apt-repository ppa:sile-typesetter/sile&#xA;$ sudo apt-get update&#xA;$ sudo apt-get install sile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Void Linux&lt;/h4&gt; &#xA;&lt;p&gt;Void Linux packages are available in the default package manager.&lt;/p&gt; &#xA;&lt;h4&gt;Other&lt;/h4&gt; &#xA;&lt;p&gt;Other Linux distros may install via &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#from-source&#34;&gt;source&lt;/a&gt;, via &lt;a href=&#34;https://docs.brew.sh/Homebrew-on-Linux&#34;&gt;Linux Brew&lt;/a&gt;, or via &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#nixos&#34;&gt;Nix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;For BSD&lt;/h3&gt; &#xA;&lt;p&gt;Install from OpenBSD &lt;a href=&#34;http://ports.su/print/sile&#34;&gt;ports&lt;/a&gt;, via &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#from-source&#34;&gt;source&lt;/a&gt;, or via &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#nixos&#34;&gt;Nix&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;For Windows&lt;/h3&gt; &#xA;&lt;p&gt;There is no installer yet (track the status in &lt;a href=&#34;https://github.com/sile-typesetter/sile/issues/410&#34;&gt;issue #410&lt;/a&gt;). Nobody is currently maintaining Windows compatibility in SILE and we expect the state to be a bit broken. Users of WSL (Windows Subsytem for Linux) may use the package manager of their choice depending on the system installed, including the respective &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#arch-linux&#34;&gt;Arch Linux&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#ubuntu&#34;&gt;Ubuntu&lt;/a&gt; packages, &lt;a href=&#34;https://docs.brew.sh/Homebrew-on-Linux&#34;&gt;Linux Brew&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#from-source&#34;&gt;source&lt;/a&gt;, or via [Nix][#nixos].&lt;/p&gt; &#xA;&lt;p&gt;Some early work is present in the repository that should enable builds via CMake and Visual Studio, see discussion in &lt;a href=&#34;https://github.com/sile-typesetter/sile/pull/567&#34;&gt;issue #567&lt;/a&gt;, but it needs a refresh for current dependencies. Prebuilt Windows binaries are supposed to be generated by the Azure &lt;a href=&#34;https://dev.azure.com/sile-typesetter/sile/_build?view=runs&#34;&gt;build pipeline&lt;/a&gt; and may be downloaded by selecting a build, opening the Windows job, selecting the artifact link from the final stage, and using the download button next to the sile folder.&lt;/p&gt; &#xA;&lt;h3&gt;Multi-Platform &amp;amp; Containers&lt;/h3&gt; &#xA;&lt;h4&gt;Docker&lt;/h4&gt; &#xA;&lt;p&gt;Docker images are available as &lt;a href=&#34;https://hub.docker.com/repository/docker/siletypesetter/sile&#34;&gt;siletypesetter/sile&lt;/a&gt;. Released versions are tagged to match (e.g. &lt;code&gt;v0.10.0&lt;/code&gt;), the latest release will be tagged &lt;code&gt;latest&lt;/code&gt;, and a &lt;code&gt;master&lt;/code&gt; tag is also available with the freshest development build. In order to be useful you need to tell the Docker run command a way to reach your source documents (and hence also to give it a place to write the output) as well as tell it who you are on the host machine so the output generated inside the container can be created with the expected ownership properties. You may find it easiest to run with an alias like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ alias sile=&#39;docker run -it --volume &#34;$(pwd):/data&#34; --user &#34;$(id -u):$(id -g)&#34; siletypesetter/sile:latest&#39;&#xA;$ sile input.sil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One notable issue with using SILE from a Docker container is that by default it will not have access to your system’s fonts. To work around this you can map a folder of fonts (in any organization usable by fontconfig) into the container. This could be your system’s default font directory, your user one, a folder with project specific resources, or anything of your choosing. You can see where fonts are found on your system using &lt;code&gt;fc-list&lt;/code&gt;. The path of your choosing from the host system should be mounted as a volume on &lt;code&gt;/fonts&lt;/code&gt; inside the container like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ docker run -it --volume &#34;/usr/share/fonts:/fonts&#34; --volume &#34;$(pwd):/data&#34; --user &#34;$(id -u):$(id -g)&#34; siletypesetter/sile:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nix&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;nix&lt;/code&gt; package manager is available as a standalone package manager on many platforms other than NixOS including most Linux and BSD distributions, macOS, and even for Windows via WSL; and thus presents a viable alternative way to run SILE on most systems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nixos.org/nix&#34;&gt;Nix packages&lt;/a&gt; are available in both the stable and unstable channels. Because all packages are first made available in the unstable channel and then eventually make their way into the stable channel, to get the latest stable SILE releases we recommend hitting up the unstable channel first. You can use all the usual Nix tricks including launching a new shell with the &lt;code&gt;sile&lt;/code&gt; command available or running it directly from any shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix shell nixpkgs/nixpkgs-unstable#sile&#xA;$ sile &amp;lt;arguments&amp;gt;&#xA;&#xA;$ nix run nixpkgs/nixpkgs-unstable#sile -- &amp;lt;arguments&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The SILE source repository is also a valid Nix &lt;a href=&#34;https://nixos.wiki/wiki/Flakes#Installing_flakes&#34;&gt;Flake&lt;/a&gt; which means you can run any specific version or the latest unreleased development code directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix run github:sile-typesetter/sile/v0.14.3 -- &amp;lt;arguments&amp;gt;&#xA;$ nix run github:sile-typesetter/sile -- &amp;lt;sile arguments&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;SILE source code can be downloaded from &lt;a href=&#34;http://www.sile-typesetter.org/&#34;&gt;its website&lt;/a&gt; or directly from &lt;a href=&#34;https://github.com/sile-typesetter/sile/releases&#34;&gt;the GitHub releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;SILE is written in the Lua programming language, so you will need a working Lua installation on your system (Lua 5.1, 5.2, 5.3, 5.4, and LuaJIT (2.0, 2.1, or OpenResty) are fully supported). It also relies on external libraries to access fonts and write PDF files. Its preferred combination of libraries is &lt;a href=&#34;http://www.freedesktop.org/wiki/Software/HarfBuzz/&#34;&gt;Harfbuzz&lt;/a&gt; and &lt;a href=&#34;https://github.com/sile-typesetter/libtexpdf&#34;&gt;libtexpdf&lt;/a&gt;, a PDF creation library extracted from TeX. Harfbuzz (minimum version 1.1.3) should be available from your operating system&#39;s package manager. For Harfbuzz to work you will also need fontconfig installed. SILE also requires the &lt;a href=&#34;http://icu-project.org&#34;&gt;ICU&lt;/a&gt; libraries for Unicode handling.&lt;/p&gt; &#xA;&lt;p&gt;On macOS, ICU can be installed via Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install icu4c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After that, you might need to set environment variables. If you try to &lt;code&gt;brew link&lt;/code&gt; and you get a series of messages including something like these two lines, you will need to run that export line to correctly set your path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;For pkg-config to find icu4c you may need to set:&#xA;  export PKG_CONFIG_PATH=&#34;/usr/local/opt/icu4c/lib/pkgconfig&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally you may install the Lua libraries listed in the &lt;a href=&#34;https://github.com/sile-typesetter/sile/raw/master/sile-dev-1.rockspec&#34;&gt;rockspec&lt;/a&gt; to your system (using either your system&#39;s package manager or &lt;a href=&#34;http://luarocks.org/en/Download&#34;&gt;luarocks&lt;/a&gt; (&lt;code&gt;luarocks install --only-deps sile-dev-1.rockspec&lt;/code&gt;). By default all the required Lua libraries will be downloaded and bundled alongside the SILE the instalation. If you downloaded a source tarball these dependencies are included, if you are using a git clone of the source repository the build system will require &lt;code&gt;luarocks&lt;/code&gt; to fetch them during build. Note that OpenSSL development headers will be required for one of the Lua modules to compile¹. If your system has all the required packages already you may add &lt;code&gt;--with-system-luarocks&lt;/code&gt; to the &lt;code&gt;./configure&lt;/code&gt; command to avoid bundling them.&lt;/p&gt; &#xA;&lt;p&gt;¹ &lt;sub&gt;OpenSSL development headers are required to build &lt;em&gt;luasec&lt;/em&gt;, please make sure they are setup &lt;em&gt;BEFORE&lt;/em&gt; trying to build SILE! If you use your system’s Luarocks packages this will be done for you, otherwise make sure you can compile luasec. You can try just this step in isolation before building SILE using &lt;code&gt;luarocks --tree=/tmp install luasec&lt;/code&gt;.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are building from a git clone, start by running the script to setup your environment (if you are using the source tarball this is unnecessary):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./bootstrap.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once your dependencies are installed, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ./configure&#xA;$ make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will place the SILE libraries and executable in a sensible location.&lt;/p&gt; &#xA;&lt;p&gt;On some systems you may also need to run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sudo ldconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;… before trying to execute &lt;code&gt;sile&lt;/code&gt; to make the system aware of the newly installed libraries.&lt;/p&gt; &#xA;&lt;h3&gt;Default Font&lt;/h3&gt; &#xA;&lt;p&gt;Since SILE v0.9.5, the default font has been Gentium Plus which is freely available from &lt;a href=&#34;http://software.sil.org/gentium/download/&#34;&gt;SIL’s site&lt;/a&gt;. It is not absolutely required that you install it, but if this font is not installed on your system, you won&#39;t be able to use the examples without modification. (Previously we used Gentium Basic, but that&#39;s getting harder to get hold of.)&lt;/p&gt; &#xA;&lt;h3&gt;Testing the installation&lt;/h3&gt; &#xA;&lt;p&gt;If all goes well, after installation you should be able to render a sample document. Try creating a file &lt;code&gt;test.sil&lt;/code&gt; with this content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sil&#34;&gt;\begin{document}&#xA;Hello world!&#xA;\end{document}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And render it to a PDF like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ sile test.sil&#xA;SILE v0.12.5 (Lua 5.4)&#xA;&amp;lt;test.sil&amp;gt;&#xA;[1]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now have a PDF file &lt;code&gt;test.pdf&lt;/code&gt; ready for review.&lt;/p&gt; &#xA;&lt;h2&gt;Use as a CI job&lt;/h2&gt; &#xA;&lt;p&gt;There are actually many ways to run SILE remotely as part of a CI work flow. Because packages are available for many platforms, one way would be to just use your platforms native package installation system to pull them into whatever CI runner environment you already use. Another way is to pull in the prebuilt Docker container and run that.&lt;/p&gt; &#xA;&lt;p&gt;As a case study, here is how a workflow could be setup in GitHub Actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: SILE&#xA;on: [ push, pull_request ]&#xA;jobs:&#xA;  sile:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;      - name: Checkout&#xA;        uses: actions/checkout@v3&#xA;      - name: Render document with SILE&#xA;        uses: sile-typesetter/sile@v0&#xA;        with:&#xA;          args: my-document.sil&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add to your repository as &lt;code&gt;.github/workflows/sile.yaml&lt;/code&gt;. This work flow assumes your project has a source file &lt;code&gt;my-document.sil&lt;/code&gt; and will leave behind a &lt;code&gt;my-document.pdf&lt;/code&gt;. Note the comments in &lt;a href=&#34;https://raw.githubusercontent.com/sile-typesetter/sile/master/#docker&#34;&gt;the section about Docker&lt;/a&gt; regarding version tags.&lt;/p&gt; &#xA;&lt;h2&gt;Finding Out More&lt;/h2&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;http://sile-typesetter.org/manual/sile-latest.pdf&#34;&gt;full SILE manual&lt;/a&gt; for more information about what SILE is and how it can help you. There are example documents (source and PDF) &lt;a href=&#34;http://www.sile-typesetter.org/examples/&#34;&gt;on the SILE website&lt;/a&gt;. There&#39;s also an &lt;a href=&#34;https://github.com/sile-typesetter/sile/wiki/faq&#34;&gt;FAQ&lt;/a&gt; available.&lt;/p&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;Please report bugs and send patches and pull requests at the &lt;a href=&#34;https://github.com/sile-typesetter/sile&#34;&gt;github repository&lt;/a&gt;. For questions and discussion, please join the &lt;a href=&#34;https://groups.google.com/d/forum/sile-users&#34;&gt;mailing list&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;日本語利用者は&lt;a href=&#34;https://groups.google.com/d/forum/sile-users-ja&#34;&gt;メーリングリスト&lt;/a&gt;に参加してください。&lt;/p&gt; &#xA;&lt;h2&gt;License Terms&lt;/h2&gt; &#xA;&lt;p&gt;SILE is distributed under the &lt;a href=&#34;http://choosealicense.com/licenses/mit/&#34;&gt;MIT licence&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>