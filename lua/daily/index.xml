<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-06T01:35:52Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stevearc/aerial.nvim</title>
    <updated>2022-09-06T01:35:52Z</updated>
    <id>tag:github.com,2022-09-06:/stevearc/aerial.nvim</id>
    <link href="https://github.com/stevearc/aerial.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim plugin for a code outline window&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;aerial.nvim&lt;/h1&gt; &#xA;&lt;p&gt;A code outline window for skimming and quick navigation&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#treesitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#lsp&#34;&gt;LSP&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#markdown&#34;&gt;Markdown&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#keymaps&#34;&gt;Keymaps&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#default-keybindings&#34;&gt;Default keybindings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#third-party-integrations&#34;&gt;Third-party integrations&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#telescope&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#fzf&#34;&gt;Fzf&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#lualine&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#highlight&#34;&gt;Highlight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/506791/122652728-18688500-d0f5-11eb-80aa-910f7e6a5f46.mp4&#34;&gt;https://user-images.githubusercontent.com/506791/122652728-18688500-d0f5-11eb-80aa-910f7e6a5f46.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.5+ for LSP symbols, 0.7+ for treesitter symbols&lt;/li&gt; &#xA; &lt;li&gt;One or more of the following: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A working LSP setup (see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; with languages installed&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;aerial supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function()&#xA;    use {&#xA;      &#39;stevearc/aerial.nvim&#39;,&#xA;      config = function() require(&#39;aerial&#39;).setup() end&#xA;    }&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    {&#39;stevearc/aerial.nvim&#39;};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/aerial.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/aerial.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/aerial.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/aerial.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/aerial/start/aerial.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Somewhere in your init.lua you will need to call &lt;code&gt;aerial.setup()&lt;/code&gt;. See below for &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#options&#34;&gt;a full list of options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;aerial&#39;).setup({})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition, you will need to follow the setup steps for at least one of the symbol sources listed below. You can configure your preferred source(s) with the &lt;code&gt;backends&lt;/code&gt; option (see &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/aerial.nvim/master/#options&#34;&gt;Options&lt;/a&gt;). The default is to prefer Treesitter when it&#39;s available and fall back to LSP.&lt;/p&gt; &#xA;&lt;h3&gt;Treesitter&lt;/h3&gt; &#xA;&lt;p&gt;First ensure you have &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; installed and configured for all languages you want to support. That&#39;s all! Aerial will automatically fetch symbols from treesitter.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Supported languages&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;bash&lt;/li&gt; &#xA;  &lt;li&gt;c&lt;/li&gt; &#xA;  &lt;li&gt;c_sharp&lt;/li&gt; &#xA;  &lt;li&gt;cpp&lt;/li&gt; &#xA;  &lt;li&gt;dart&lt;/li&gt; &#xA;  &lt;li&gt;elixir&lt;/li&gt; &#xA;  &lt;li&gt;go&lt;/li&gt; &#xA;  &lt;li&gt;java&lt;/li&gt; &#xA;  &lt;li&gt;javascript&lt;/li&gt; &#xA;  &lt;li&gt;json&lt;/li&gt; &#xA;  &lt;li&gt;julia&lt;/li&gt; &#xA;  &lt;li&gt;lua&lt;/li&gt; &#xA;  &lt;li&gt;make&lt;/li&gt; &#xA;  &lt;li&gt;markdown&lt;/li&gt; &#xA;  &lt;li&gt;norg&lt;/li&gt; &#xA;  &lt;li&gt;org&lt;/li&gt; &#xA;  &lt;li&gt;php&lt;/li&gt; &#xA;  &lt;li&gt;proto&lt;/li&gt; &#xA;  &lt;li&gt;python&lt;/li&gt; &#xA;  &lt;li&gt;rst&lt;/li&gt; &#xA;  &lt;li&gt;ruby&lt;/li&gt; &#xA;  &lt;li&gt;rust&lt;/li&gt; &#xA;  &lt;li&gt;scala&lt;/li&gt; &#xA;  &lt;li&gt;teal&lt;/li&gt; &#xA;  &lt;li&gt;tsx&lt;/li&gt; &#xA;  &lt;li&gt;typescript&lt;/li&gt; &#xA;  &lt;li&gt;vim&lt;/li&gt; &#xA;  &lt;li&gt;yaml&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Don&#39;t see your language here? &lt;a href=&#34;https://github.com/stevearc/aerial.nvim/issues/new?assignees=stevearc&amp;amp;labels=enhancement&amp;amp;template=feature-request--treesitter-language-.md&amp;amp;title=&#34;&gt;Request support for it&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;LSP&lt;/h3&gt; &#xA;&lt;p&gt;First ensure you have a functioning LSP setup (see &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;). Once complete, add the aerial &lt;code&gt;on_attach&lt;/code&gt; callback to your config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Set up your LSP clients here, using the aerial on_attach method&#xA;require(&#34;lspconfig&#34;).vimls.setup{&#xA;  on_attach = require(&#34;aerial&#34;).on_attach,&#xA;}&#xA;-- Repeat this for each language server you have configured&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have your own custom &lt;code&gt;on_attach&lt;/code&gt; function, call aerial&#39;s &lt;code&gt;on_attach&lt;/code&gt; from inside it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function my_custom_attach(client, bufnr)&#xA;  -- your code here&#xA;  require(&#34;aerial&#34;).on_attach(client, bufnr)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Markdown&lt;/h3&gt; &#xA;&lt;p&gt;There is a simple custom backend that does rudimentary parsing of markdown headers. It should work well enough in most cases, but does not parse the full markdown spec.&lt;/p&gt; &#xA;&lt;p&gt;There is now an experimental &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter/issues/872&#34;&gt;treesitter parser for markdown&lt;/a&gt;, so you can install that and try the treesitter backend instead.&lt;/p&gt; &#xA;&lt;h3&gt;Keymaps&lt;/h3&gt; &#xA;&lt;p&gt;While not required, you may want to add some keymaps for aerial. The best way to do this is with the &lt;code&gt;on_attach&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;aerial&#34;).setup({&#xA;  on_attach = function(bufnr)&#xA;    -- Toggle the aerial window with &amp;lt;leader&amp;gt;a&#xA;    vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;&amp;lt;leader&amp;gt;a&#39;, &#39;&amp;lt;cmd&amp;gt;AerialToggle!&amp;lt;CR&amp;gt;&#39;, {})&#xA;    -- Jump forwards/backwards with &#39;{&#39; and &#39;}&#39;&#xA;    vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;{&#39;, &#39;&amp;lt;cmd&amp;gt;AerialPrev&amp;lt;CR&amp;gt;&#39;, {})&#xA;    vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;}&#39;, &#39;&amp;lt;cmd&amp;gt;AerialNext&amp;lt;CR&amp;gt;&#39;, {})&#xA;    -- Jump up the tree with &#39;[[&#39; or &#39;]]&#39;&#xA;    vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;[[&#39;, &#39;&amp;lt;cmd&amp;gt;AerialPrevUp&amp;lt;CR&amp;gt;&#39;, {})&#xA;    vim.api.nvim_buf_set_keymap(bufnr, &#39;n&#39;, &#39;]]&#39;, &#39;&amp;lt;cmd&amp;gt;AerialNextUp&amp;lt;CR&amp;gt;&#39;, {})&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;arg&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialToggle[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;left&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open or close the aerial window. With &lt;code&gt;[!]&lt;/code&gt; cursor stays in current window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialOpen[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;left&lt;/code&gt;/&lt;code&gt;right&lt;/code&gt;/&lt;code&gt;float&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open the aerial window. With &lt;code&gt;[!]&lt;/code&gt; cursor stays in current window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialOpenAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open an aerial window for each visible window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialClose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close the aerial window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialCloseAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close all visible aerial windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialCloseAllButCurrent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close all visible aerial windows except for the focused one&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialPrev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N=1&lt;/td&gt; &#xA;   &lt;td&gt;Jump backwards N symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialNext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N=1&lt;/td&gt; &#xA;   &lt;td&gt;Jump forwards N symbols&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialPrevUp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N=1&lt;/td&gt; &#xA;   &lt;td&gt;Jump up the tree N levels, moving backwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialNextUp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N=1&lt;/td&gt; &#xA;   &lt;td&gt;Jump up the tree N levels, moving forwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialGo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N=1, &lt;code&gt;v&lt;/code&gt;/&lt;code&gt;h&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the Nth symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialTreeOpen[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expand tree at current location. &lt;code&gt;[!]&lt;/code&gt; makes it recursive.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialTreeClose[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Collapse tree at current location. &lt;code&gt;[!]&lt;/code&gt; makes it recursive.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialTreeToggle[!]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle tree at current location. &lt;code&gt;[!]&lt;/code&gt; makes it recursive.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialTreeOpenAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Open all tree nodes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialTreeCloseAll&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Collapse all tree nodes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialTreeSetCollapseLevel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;N&lt;/td&gt; &#xA;   &lt;td&gt;Collapse symbols at a depth greater than N (0 collapses all)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialTreeSyncFolds&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sync code folding with current tree state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AerialInfo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Print out debug info related to aerial&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Call the setup function to change the default behavior&#xA;require(&#34;aerial&#34;).setup({&#xA;  -- Priority list of preferred backends for aerial.&#xA;  -- This can be a filetype map (see :help aerial-filetype-map)&#xA;  backends = { &#34;treesitter&#34;, &#34;lsp&#34;, &#34;markdown&#34; },&#xA;&#xA;  layout = {&#xA;    -- These control the width of the aerial window.&#xA;    -- They can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    -- min_width and max_width can be a list of mixed types.&#xA;    -- max_width = {40, 0.2} means &#34;the lesser of 40 columns or 20% of total&#34;&#xA;    max_width = { 40, 0.2 },&#xA;    width = nil,&#xA;    min_width = 10,&#xA;&#xA;    -- Enum: prefer_right, prefer_left, right, left, float&#xA;    -- Determines the default direction to open the aerial window. The &#39;prefer&#39;&#xA;    -- options will open the window in the other direction *if* there is a&#xA;    -- different buffer in the way of the preferred direction&#xA;    default_direction = &#34;prefer_right&#34;,&#xA;&#xA;    -- Enum: edge, group, window&#xA;    --   edge   - open aerial at the far right/left of the editor&#xA;    --   group  - open aerial to the right/left of the group of windows containing the current buffer&#xA;    --   window - open aerial to the right/left of the current window&#xA;    placement = &#34;window&#34;,&#xA;  },&#xA;&#xA;  -- Enum: persist, close, auto, global&#xA;  --   persist - aerial window will stay open until closed&#xA;  --   close   - aerial window will close when original file is no longer visible&#xA;  --   auto    - aerial window will stay open as long as there is a visible&#xA;  --             buffer to attach to&#xA;  --   global  - same as &#39;persist&#39;, and will always show symbols for the current buffer&#xA;  close_behavior = &#34;auto&#34;,&#xA;&#xA;  -- Set to false to remove the default keybindings for the aerial buffer&#xA;  default_bindings = true,&#xA;&#xA;  -- Disable aerial on files with this many lines&#xA;  disable_max_lines = 10000,&#xA;&#xA;  -- Disable aerial on files this size or larger (in bytes)&#xA;  disable_max_size = 2000000, -- Default 2MB&#xA;&#xA;  -- A list of all symbols to display. Set to false to display all symbols.&#xA;  -- This can be a filetype map (see :help aerial-filetype-map)&#xA;  -- To see all available values, see :help SymbolKind&#xA;  filter_kind = {&#xA;    &#34;Class&#34;,&#xA;    &#34;Constructor&#34;,&#xA;    &#34;Enum&#34;,&#xA;    &#34;Function&#34;,&#xA;    &#34;Interface&#34;,&#xA;    &#34;Module&#34;,&#xA;    &#34;Method&#34;,&#xA;    &#34;Struct&#34;,&#xA;  },&#xA;&#xA;  -- Enum: split_width, full_width, last, none&#xA;  -- Determines line highlighting mode when multiple splits are visible.&#xA;  -- split_width   Each open window will have its cursor location marked in the&#xA;  --               aerial buffer. Each line will only be partially highlighted&#xA;  --               to indicate which window is at that location.&#xA;  -- full_width    Each open window will have its cursor location marked as a&#xA;  --               full-width highlight in the aerial buffer.&#xA;  -- last          Only the most-recently focused window will have its location&#xA;  --               marked in the aerial buffer.&#xA;  -- none          Do not show the cursor locations in the aerial window.&#xA;  highlight_mode = &#34;split_width&#34;,&#xA;&#xA;  -- Highlight the closest symbol if the cursor is not exactly on one.&#xA;  highlight_closest = true,&#xA;&#xA;  -- Highlight the symbol in the source buffer when cursor is in the aerial win&#xA;  highlight_on_hover = false,&#xA;&#xA;  -- When jumping to a symbol, highlight the line for this many ms.&#xA;  -- Set to false to disable&#xA;  highlight_on_jump = 300,&#xA;&#xA;  -- Define symbol icons. You can also specify &#34;&amp;lt;Symbol&amp;gt;Collapsed&#34; to change the&#xA;  -- icon when the tree is collapsed at that symbol, or &#34;Collapsed&#34; to specify a&#xA;  -- default collapsed icon. The default icon set is determined by the&#xA;  -- &#34;nerd_font&#34; option below.&#xA;  -- If you have lspkind-nvim installed, it will be the default icon set.&#xA;  -- This can be a filetype map (see :help aerial-filetype-map)&#xA;  icons = {},&#xA;&#xA;  -- Control which windows and buffers aerial should ignore.&#xA;  -- If close_behavior is &#34;global&#34;, focusing an ignored window/buffer will&#xA;  -- not cause the aerial window to update.&#xA;  -- If open_automatic is true, focusing an ignored window/buffer will not&#xA;  -- cause an aerial window to open.&#xA;  -- If open_automatic is a function, ignore rules have no effect on aerial&#xA;  -- window opening behavior; it&#39;s entirely handled by the open_automatic&#xA;  -- function.&#xA;  ignore = {&#xA;    -- Ignore unlisted buffers. See :help buflisted&#xA;    unlisted_buffers = true,&#xA;&#xA;    -- List of filetypes to ignore.&#xA;    filetypes = {},&#xA;&#xA;    -- Ignored buftypes.&#xA;    -- Can be one of the following:&#xA;    -- false or nil - No buftypes are ignored.&#xA;    -- &#34;special&#34;    - All buffers other than normal buffers are ignored.&#xA;    -- table        - A list of buftypes to ignore. See :help buftype for the&#xA;    --                possible values.&#xA;    -- function     - A function that returns true if the buffer should be&#xA;    --                ignored or false if it should not be ignored.&#xA;    --                Takes two arguments, `bufnr` and `buftype`.&#xA;    buftypes = &#34;special&#34;,&#xA;&#xA;    -- Ignored wintypes.&#xA;    -- Can be one of the following:&#xA;    -- false or nil - No wintypes are ignored.&#xA;    -- &#34;special&#34;    - All windows other than normal windows are ignored.&#xA;    -- table        - A list of wintypes to ignore. See :help win_gettype() for the&#xA;    --                possible values.&#xA;    -- function     - A function that returns true if the window should be&#xA;    --                ignored or false if it should not be ignored.&#xA;    --                Takes two arguments, `winid` and `wintype`.&#xA;    wintypes = &#34;special&#34;,&#xA;  },&#xA;&#xA;  -- When you fold code with za, zo, or zc, update the aerial tree as well.&#xA;  -- Only works when manage_folds = true&#xA;  link_folds_to_tree = false,&#xA;&#xA;  -- Fold code when you open/collapse symbols in the tree.&#xA;  -- Only works when manage_folds = true&#xA;  link_tree_to_folds = true,&#xA;&#xA;  -- Use symbol tree for folding. Set to true or false to enable/disable&#xA;  -- &#39;auto&#39; will manage folds if your previous foldmethod was &#39;manual&#39;&#xA;  manage_folds = false,&#xA;&#xA;  -- Set default symbol icons to use patched font icons (see https://www.nerdfonts.com/)&#xA;  -- &#34;auto&#34; will set it to true if nvim-web-devicons or lspkind-nvim is installed.&#xA;  nerd_font = &#34;auto&#34;,&#xA;&#xA;  -- Call this function when aerial attaches to a buffer.&#xA;  -- Useful for setting keymaps. Takes a single `bufnr` argument.&#xA;  on_attach = nil,&#xA;&#xA;  -- Call this function when aerial first sets symbols on a buffer.&#xA;  -- Takes a single `bufnr` argument.&#xA;  on_first_symbols = nil,&#xA;&#xA;  -- Automatically open aerial when entering supported buffers.&#xA;  -- This can be a function (see :help aerial-open-automatic)&#xA;  open_automatic = false,&#xA;&#xA;  -- Run this command after jumping to a symbol (false will disable)&#xA;  post_jump_cmd = &#34;normal! zz&#34;,&#xA;&#xA;  -- When true, aerial will automatically close after jumping to a symbol&#xA;  close_on_select = false,&#xA;&#xA;  -- Show box drawing characters for the tree hierarchy&#xA;  show_guides = false,&#xA;&#xA;  -- The autocmds that trigger symbols update (not used for LSP backend)&#xA;  update_events = &#34;TextChanged,InsertLeave&#34;,&#xA;&#xA;  -- Customize the characters used when show_guides = true&#xA;  guides = {&#xA;    -- When the child item has a sibling below it&#xA;    mid_item = &#34;├─&#34;,&#xA;    -- When the child item is the last in the list&#xA;    last_item = &#34;└─&#34;,&#xA;    -- When there are nested child guides to the right&#xA;    nested_top = &#34;│ &#34;,&#xA;    -- Raw indentation&#xA;    whitespace = &#34;  &#34;,&#xA;  },&#xA;&#xA;  -- Options for opening aerial in a floating win&#xA;  float = {&#xA;    -- Controls border appearance. Passed to nvim_open_win&#xA;    border = &#34;rounded&#34;,&#xA;&#xA;    -- Enum: cursor, editor, win&#xA;    --   cursor - Opens float on top of the cursor&#xA;    --   editor - Opens float centered in the editor&#xA;    --   win    - Opens float centered in the window&#xA;    relative = &#34;cursor&#34;,&#xA;&#xA;    -- These control the height of the floating window.&#xA;    -- They can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)&#xA;    -- min_height and max_height can be a list of mixed types.&#xA;    -- min_height = {8, 0.1} means &#34;the greater of 8 rows or 10% of total&#34;&#xA;    max_height = 0.9,&#xA;    height = nil,&#xA;    min_height = { 8, 0.1 },&#xA;&#xA;    override = function(conf)&#xA;      -- This is the config that will be passed to nvim_open_win.&#xA;      -- Change values here to customize the layout&#xA;      return conf&#xA;    end,&#xA;  },&#xA;&#xA;  lsp = {&#xA;    -- Fetch document symbols when LSP diagnostics update.&#xA;    -- If false, will update on buffer changes.&#xA;    diagnostics_trigger_update = true,&#xA;&#xA;    -- Set to false to not update the symbols when there are LSP errors&#xA;    update_when_errors = true,&#xA;&#xA;    -- How long to wait (in ms) after a buffer change before updating&#xA;    -- Only used when diagnostics_trigger_update = false&#xA;    update_delay = 300,&#xA;  },&#xA;&#xA;  treesitter = {&#xA;    -- How long to wait (in ms) after a buffer change before updating&#xA;    update_delay = 300,&#xA;  },&#xA;&#xA;  markdown = {&#xA;    -- How long to wait (in ms) after a buffer change before updating&#xA;    update_delay = 300,&#xA;  },&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All possible SymbolKind values can be found &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/specifications/specification-3-17/#symbolKind&#34;&gt;in the LSP spec&lt;/a&gt;. These are the values used for configuring icons, highlight groups, and filtering.&lt;/p&gt; &#xA;&lt;h2&gt;Default Keybindings&lt;/h2&gt; &#xA;&lt;p&gt;The default keybindings in the aerial window. You can add your own in &lt;code&gt;ftplugin/aerial.vim&lt;/code&gt;, and remove these by setting &lt;code&gt;default_bindings = false&lt;/code&gt;. The default bindings are set in &lt;a href=&#34;https://github.com/stevearc/aerial.nvim/raw/master/lua/aerial/bindings.lua#L4&#34;&gt;bindings.lua&lt;/a&gt;, which you can use as a reference if you want to set your own bindings.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;?&lt;/code&gt;/&lt;code&gt;g?&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show default keymaps&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the symbol under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-v&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the symbol in a vertical split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-s&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the symbol in a horizontal split&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Scroll to the symbol (stay in aerial buffer)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-j&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go down one line and scroll to that symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;C-k&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Go up one line and scroll to that symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the previous symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the next symbol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[[&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump up the tree, moving backwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;]]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump up the tree, moving forwards&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;q&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close the aerial window&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;o&lt;/code&gt;/&lt;code&gt;za&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Toggle the symbol under the cursor open/closed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;O&lt;/code&gt;/&lt;code&gt;zA&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Recursive toggle the symbol under the cursor open/closed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;l&lt;/code&gt;/&lt;code&gt;zo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expand the symbol under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;L&lt;/code&gt;/&lt;code&gt;zO&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Recursive expand the symbol under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;h&lt;/code&gt;/&lt;code&gt;zc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Collapse the symbol under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;H&lt;/code&gt;/&lt;code&gt;zC&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Recursive collapse the symbol under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;zR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Expand all nodes in the tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;zM&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Collapse all nodes in the tree&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;zx&lt;/code&gt;/&lt;code&gt;zX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Sync code folding to the tree (useful if they get out of sync)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;2-LeftMouse&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Jump to the symbol under the cursor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Third-party integrations&lt;/h2&gt; &#xA;&lt;h3&gt;Telescope&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope&lt;/a&gt; installed, there is an extension for fuzzy finding and jumping to symbols. It functions similarly to the builtin &lt;code&gt;lsp_document_symbols&lt;/code&gt; picker, the main difference being that it uses the aerial backend for the source (e.g. LSP, treesitter, etc) and that it filters out some symbols (see the &lt;code&gt;filter_kind&lt;/code&gt; option).&lt;/p&gt; &#xA;&lt;p&gt;You can activate the picker with &lt;code&gt;:Telescope aerial&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want the command to autocomplete, you can load the extension first:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).load_extension(&#39;aerial&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The extension can be customized with the following options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).setup({&#xA;  extensions = {&#xA;    aerial = {&#xA;      -- Display symbols as &amp;lt;root&amp;gt;.&amp;lt;parent&amp;gt;.&amp;lt;symbol&amp;gt;&#xA;      show_nesting = true&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;fzf&lt;/h3&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://github.com/junegunn/fzf.vim&#34;&gt;fzf&lt;/a&gt; installed you can trigger fuzzy finding with &lt;code&gt;:call aerial#fzf()&lt;/code&gt;. To create a mapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;nmap &amp;lt;silent&amp;gt; &amp;lt;leader&amp;gt;ds &amp;lt;cmd&amp;gt;call aerial#fzf()&amp;lt;cr&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lualine&lt;/h3&gt; &#xA;&lt;p&gt;There is a lualine component to display the symbols for your current cursor position&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lualine&#34;).setup({&#xA;  sections = {&#xA;    lualine_x = { &#34;aerial&#34; },&#xA;&#xA;    -- Or you can customize it&#xA;    lualine_y = { &#34;aerial&#34;,&#xA;      -- The separator to be used to separate symbols in status line.&#xA;      sep = &#39; ) &#39;,&#xA;&#xA;      -- The number of symbols to render top-down. In order to render only &#39;N&#39; last&#xA;      -- symbols, negative numbers may be supplied. For instance, &#39;depth = -1&#39; can&#xA;      -- be used in order to render only current symbol.&#xA;      depth = nil,&#xA;&#xA;      -- When &#39;dense&#39; mode is on, icons are not rendered near their symbols. Only&#xA;      -- a single icon that represents the kind of current symbol is rendered at&#xA;      -- the beginning of status line.&#xA;      dense = false,&#xA;&#xA;      -- The separator to be used to separate symbols in dense mode.&#xA;      dense_sep = &#39;.&#39;,&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Highlight&lt;/h2&gt; &#xA;&lt;p&gt;There are highlight groups created for each &lt;code&gt;SymbolKind&lt;/code&gt;. There will be one for the name of the symbol (&lt;code&gt;Aerial&amp;lt;SymbolKind&amp;gt;&lt;/code&gt;, and one for the icon (&lt;code&gt;Aerial&amp;lt;SymbolKind&amp;gt;Icon&lt;/code&gt;). For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;hi link AerialClass Type&#xA;hi link AerialClassIcon Special&#xA;hi link AerialFunction Special&#xA;hi AerialFunctionIcon guifg=#cb4b16 guibg=NONE guisp=NONE gui=NONE cterm=NONE&#xA;&#xA;&#34; There&#39;s also this group for the cursor position&#xA;hi link AerialLine QuickFixLine&#xA;&#34; If highlight_mode=&#34;split_width&#34;, you can set a separate color for the&#xA;&#34; non-current location highlight&#xA;hi AerialLineNC guibg=Gray&#xA;&#xA;&#34; You can customize the guides (if show_guide=true)&#xA;hi link AerialGuide Comment&#xA;&#34; You can set a different guide color for each level&#xA;hi AerialGuide1 guifg=Red&#xA;hi AerialGuide2 guifg=Blue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Q: I accidentally opened a file into the aerial window and it looks bad. How can I prevent this from happening?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try installing &lt;a href=&#34;https://github.com/stevearc/stickybuf.nvim&#34;&gt;stickybuf&lt;/a&gt;. It was designed to prevent exactly this problem.&lt;/p&gt;</summary>
  </entry>
</feed>