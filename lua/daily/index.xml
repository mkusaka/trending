<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-08T01:47:59Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>glepnir/template.nvim</title>
    <updated>2022-07-08T01:47:59Z</updated>
    <id>tag:github.com,2022-07-08:/glepnir/template.nvim</id>
    <link href="https://github.com/glepnir/template.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quickly insert templates into file&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Template.nvim&lt;/h2&gt; &#xA;&lt;p&gt;Quickly insert templates into file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/41671631/177514324-aad607cd-a25b-4c1e-ab81-13d780ec10f0.gif&#34; height=&#34;50%&#34; weight=&#34;50%&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- with packer&#xA;&#xA;use {&#39;glepnir/template.nvim&#39;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local temp = require(&#39;tempalte&#39;)&#xA;&#xA;temp.temp_dir -- template directory&#xA;temp.author   -- your name&#xA;temp.email    -- email address&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Template Grammer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;{{_date_}}&lt;/code&gt; insert current date&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;{{_cursor_}}&lt;/code&gt; set cursor here&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;{{_file_name}}&lt;/code&gt; current file name&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;{{_author_}}&lt;/code&gt; author info&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;{{_email_}}&lt;/code&gt; email adrress&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;{{_variable_}}&lt;/code&gt; variable name&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Define your tempalte&lt;/h3&gt; &#xA;&lt;p&gt;Define a template for a go file. template named &lt;code&gt;main_owner.go&lt;/code&gt; in &lt;code&gt;temp.temp_dir&lt;/code&gt; .in my local config it to &lt;code&gt;~/.config/nvim/template&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Copyright {{_date_}} {{_author_}}. All rights reserved.&#xA;// Use of this source code is governed by a BSD-style&#xA;// license that can be found in the LICENSE file.&#xA;&#xA;package {{_file_name}}&#xA;&#xA;func main() {&#xA; {{_cursor_}}&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work with exist file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;if there has a file &lt;code&gt;main.go&lt;/code&gt;, and open it input &lt;code&gt;Template &amp;lt;Tab&amp;gt;&lt;/code&gt; . select the template &lt;code&gt;main_owner&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will insert template to this file like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Copyright 2022-07-05 21:05:36 glephunter. All rights reserved.&#xA;// Use of this source code is governed by a BSD-style&#xA;// license that can be found in the LICENSE file.&#xA;&#xA;package main&#xA;&#xA;func main() {&#xA; | -- cusror in there&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work with not exist file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;use &lt;code&gt;Template test.go &amp;lt;TAB&amp;gt;&lt;/code&gt;, it will create a file named &lt;code&gt;test.go&lt;/code&gt; in current path and auto open this file insert template.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work with not exist file and custom variable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;a lua template file named &lt;code&gt;nvim_temp.lua&lt;/code&gt;, content is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local api,fn = vim.api,vim.fn&#xA;local {{_variable_}}&#xA;&#xA;{{_cursor_}}&#xA;&#xA;return {{_variable_}}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;use &lt;code&gt;Template test.lua var=template &amp;lt;TAB&amp;gt;&lt;/code&gt; then it will auto fill template name &lt;code&gt;nvim_temp&lt;/code&gt; if there only has one lua template file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local api,fn = vim.api,vim.fn&#xA;local template&#xA;&#xA;| -- cursor here&#xA;&#xA;return template&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Work with exist file and custom variable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;use &lt;code&gt;Template var=tempalte &amp;lt;TAB&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find all templates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;template.nvim use &lt;code&gt;telescope&lt;/code&gt;. so you need register template telescope extension to &lt;code&gt;telescope&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA;require(&#34;telescope&#34;).load_extension(&#39;find_template&#39;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use &lt;code&gt;Telescope find_template&lt;/code&gt; to check all templates&lt;/p&gt; &#xA;&lt;h2&gt;Donate&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PayPal-00457C?style=for-the-badge&amp;amp;logo=paypal&amp;amp;logoColor=white&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to support my work financially, buy me a drink through &lt;a href=&#34;https://paypal.me/bobbyhub&#34;&gt;paypal&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licenese MIT&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>ray-x/lsp_signature.nvim</title>
    <updated>2022-07-08T01:47:59Z</updated>
    <id>tag:github.com,2022-07-08:/ray-x/lsp_signature.nvim</id>
    <link href="https://github.com/ray-x/lsp_signature.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LSP signature hint as you type&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lsp_signature.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Show function signature when you type&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This nvim plugin is made for completion plugins that do not support signature help. Need neovim-0.6.1+ and enable nvim-lsp. (check neovim-0.5 branch for earlier version support)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Inspired by &lt;a href=&#34;https://github.com/nvim-lua/completion-nvim&#34;&gt;completion-nvim&lt;/a&gt;, which does have lots of cool features.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fully asynchronous lsp buf request.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Virtual text available&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Golang with markdown&lt;/h5&gt; &#xA;&lt;p&gt;Highlight with &#34;Search&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/1681295/122633027-a7879400-d119-11eb-95ff-d06e6aeeb0b2.mov&#34;&gt;https://user-images.githubusercontent.com/1681295/122633027-a7879400-d119-11eb-95ff-d06e6aeeb0b2.mov&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Lua&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1681295/109505092-5b73fd80-7af0-11eb-9ec7-15b297c6e3be.png?raw=true&#34; alt=&#34;lua&#34; title=&#34;lua&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;The plugin also re-write the builtin lsp signature allow the parameter highlight&lt;/h4&gt; &#xA;&lt;img width=&#34;1230&#34; alt=&#34;signature_with_virtual_hint&#34; src=&#34;https://user-images.githubusercontent.com/1681295/122689853-11628380-d269-11eb-994f-65974fb1312d.png&#34;&gt; &#xA;&lt;h4&gt;Using virtual text to show the next parameter&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ray-x/files/raw/master/img/signature/virtual_text.jpg?raw=true&#34; alt=&#34;virtual_hint&#34; title=&#34;show_virtual_text&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Virtual text only mode&lt;/h4&gt; &#xA;&lt;p&gt;(from @fdioguardi)&lt;/p&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;virtual_text_only&#34; src=&#34;https://user-images.githubusercontent.com/1681295/120172944-e3c88280-c246-11eb-95a6-40a0bbc1df9c.png&#34;&gt; &#xA;&lt;h4&gt;Multiple signatures&lt;/h4&gt; &#xA;&lt;p&gt;In case some of the languages allow function overload, the plugin will show all available signatures&lt;/p&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;multiple_signature&#34; src=&#34;https://user-images.githubusercontent.com/1681295/120487194-17e3a500-c3f9-11eb-9561-82b3854694c5.png&#34;&gt; &#xA;&lt;img width=&#34;600&#34; alt=&#34;signature2&#34; src=&#34;https://user-images.githubusercontent.com/1681295/120487380-43ff2600-c3f9-11eb-9684-f6e7a1f8e170.png&#34;&gt; &#xA;&lt;p&gt;To switch between the signatures, use &lt;code&gt;select_signature_key&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Install:&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; dein&#xA;dein#add(&#39;ray-x/lsp_signature.nvim&#39;)&#xA;&#xA;&#34; plug&#xA;Plug &#39;ray-x/lsp_signature.nvim&#39;&#xA;&#xA;&#34; Packer&#xA;use {&#xA;  &#34;ray-x/lsp_signature.nvim&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup / Attach the plugin&lt;/h1&gt; &#xA;&lt;p&gt;In your init.lua, call setup()&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;cfg = {...}  -- add you config here&#xA;require &#34;lsp_signature&#34;.setup(cfg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, call on_attach() when the LSP client attaches to a buffer&lt;/p&gt; &#xA;&lt;p&gt;e.g. gopls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local golang_setup = {&#xA;  on_attach = function(client, bufnr)&#xA;    ...&#xA;    require &#34;lsp_signature&#34;.on_attach()  -- Note: add in lsp client on-attach&#xA;    ...&#xA;  end,&#xA;  ...&#xA;}&#xA;&#xA;require&#39;lspconfig&#39;.gopls.setup(golang_setup)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;h3&gt;Floating window borders&lt;/h3&gt; &#xA;&lt;p&gt;If you have a recent enough build of Neovim, you can configure borders in the signature help floating window(Thanks &lt;a href=&#34;https://github.com/gbrlsnchs&#34;&gt;@Gabriel Sanches&lt;/a&gt; for the PR):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local example_setup = {&#xA;  on_attach = function(client, bufnr)&#xA;    ...&#xA;    require &#34;lsp_signature&#34;.on_attach({&#xA;      bind = true, -- This is mandatory, otherwise border config won&#39;t get registered.&#xA;      handler_opts = {&#xA;        border = &#34;rounded&#34;&#xA;      }&#xA;    }, bufnr)&#xA;    ...&#xA;  end,&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  require&#39;lspconfig&#39;.gopls.setup()&#xA;  require &#34;lsp_signature&#34;.setup({&#xA;    bind = true, -- This is mandatory, otherwise border config won&#39;t get registered.&#xA;    handler_opts = {&#xA;      border = &#34;rounded&#34;&#xA;    }&#xA;  })&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Keybinds&lt;/h3&gt; &#xA;&lt;p&gt;No default keybinds are provided. There are two keybinds available:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;toggle_key: Toggle the signature help window.&lt;/li&gt; &#xA; &lt;li&gt;select_signature_key: Select the current signature when mulitple signature is avalible.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Full configuration (with default values)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;&#xA; cfg = {&#xA;  debug = false, -- set to true to enable debug logging&#xA;  log_path = vim.fn.stdpath(&#34;cache&#34;) .. &#34;/lsp_signature.log&#34;, -- log dir when debug is on&#xA;  -- default is  ~/.cache/nvim/lsp_signature.log&#xA;  verbose = false, -- show debug line number&#xA;&#xA;  bind = true, -- This is mandatory, otherwise border config won&#39;t get registered.&#xA;               -- If you want to hook lspsaga or other signature handler, pls set to false&#xA;  doc_lines = 10, -- will show two lines of comment/doc(if there are more than two lines in doc, will be truncated);&#xA;                 -- set to 0 if you DO NOT want any API comments be shown&#xA;                 -- This setting only take effect in insert mode, it does not affect signature help in normal&#xA;                 -- mode, 10 by default&#xA;&#xA;  floating_window = true, -- show hint in a floating window, set to false for virtual text only mode&#xA;&#xA;  floating_window_above_cur_line = true, -- try to place the floating above the current line when possible Note:&#xA;  -- will set to true when fully tested, set to false will use whichever side has more space&#xA;  -- this setting will be helpful if you do not want the PUM and floating win overlap&#xA;&#xA;  floating_window_off_x = 1, -- adjust float windows x position.&#xA;  floating_window_off_y = 0, -- adjust float windows y position. e.g -2 move window up 2 lines; 2 move down 2 lines&#xA;&#xA;  fix_pos = false,  -- set to true, the floating window will not auto-close until finish all parameters&#xA;  hint_enable = true, -- virtual hint enable&#xA;  hint_prefix = &#34;🐼 &#34;,  -- Panda for parameter, NOTE: for the terminal not support emoji, might crash&#xA;  hint_scheme = &#34;String&#34;,&#xA;  hi_parameter = &#34;LspSignatureActiveParameter&#34;, -- how your parameter will be highlight&#xA;  max_height = 12, -- max height of signature floating_window, if content is more than max_height, you can scroll down&#xA;                   -- to view the hiding contents&#xA;  max_width = 80, -- max_width of signature floating_window, line will be wrapped if exceed max_width&#xA;  handler_opts = {&#xA;    border = &#34;rounded&#34;   -- double, rounded, single, shadow, none&#xA;  },&#xA;&#xA;  always_trigger = false, -- sometime show signature on new line or in middle of parameter can be confusing, set it to false for #58&#xA;&#xA;  auto_close_after = nil, -- autoclose signature float win after x sec, disabled if nil.&#xA;  extra_trigger_chars = {}, -- Array of extra characters that will trigger signature completion, e.g., {&#34;(&#34;, &#34;,&#34;}&#xA;  zindex = 200, -- by default it will be on top of all floating windows, set to &amp;lt;= 50 send it to bottom&#xA;&#xA;  padding = &#39;&#39;, -- character to pad on left and right of signature can be &#39; &#39;, or &#39;|&#39;  etc&#xA;&#xA;  transparency = nil, -- disabled by default, allow floating win transparent value 1~100&#xA;  shadow_blend = 36, -- if you using shadow as border use this set the opacity&#xA;  shadow_guibg = &#39;Black&#39;, -- if you using shadow as border use this set the color e.g. &#39;Green&#39; or &#39;#121315&#39;&#xA;  timer_interval = 200, -- default timer check interval set to lower value if you want to reduce latency&#xA;  toggle_key = nil -- toggle signature on and off in insert mode,  e.g. toggle_key = &#39;&amp;lt;M-x&amp;gt;&#39;&#xA;&#xA;  select_signature_key = nil, -- cycle to next signature, e.g. &#39;&amp;lt;M-n&amp;gt;&#39; function overloading&#xA;}&#xA;&#xA;-- recommended:&#xA;require&#39;lsp_signature&#39;.setup(cfg) -- no need to specify bufnr if you don&#39;t use toggle_key&#xA;&#xA;-- You can also do this inside lsp on_attach&#xA;-- note: on_attach deprecated&#xA;require&#39;lsp_signature&#39;.on_attach(cfg, bufnr) -- no need to specify bufnr if you don&#39;t use toggle_key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Signature in status line&lt;/h3&gt; &#xA;&lt;p&gt;Sample config&lt;/p&gt; &#xA;&lt;p&gt;API&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lsp_signature&#34;).status_line(max_width)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;return a table&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  label = &#39;func fun_name(arg1, arg2...)&#39;&#xA;  hint = &#39;arg1&#39;,&#xA;  range = {start = 13, [&#39;end&#39;] = 17 }&#xA;  doc = &#39;func_name return arg1 + arg2 ...&#39;&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In your statusline or winbar&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local current_signature = function(width)&#xA;  if not pcall(require, &#39;lsp_signature&#39;) then return end&#xA;  local sig = require(&#34;lsp_signature&#34;).status_line(width)&#xA;  return sig.label .. &#34;🐼&#34; .. sig.hint&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.redd.it/b842vy1dm6681.png&#34; alt=&#34;signature in status line&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Should signature floating windows fixed&lt;/h3&gt; &#xA;&lt;p&gt;fix_pos can be a function, it took two element, first is the signature result for your signature, second is lsp client.&lt;/p&gt; &#xA;&lt;p&gt;You can provide a function.&lt;/p&gt; &#xA;&lt;p&gt;e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;fix_pos = function(signatures, lspclient)&#xA;   if signatures[1].activeParameter &amp;gt;= 0 and #signatures[1].parameters == 1 then&#xA;     return false&#xA;   end&#xA;   if lspclient.name == &#39;sumneko_lua&#39; then&#xA;     return true&#xA;   end&#xA;   return false&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sample config with cmp, luasnipet and autopair&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ray-x/lsp_signature.nvim/raw/master/tests/init_paq.lua&#34;&gt;init.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Q&amp;amp;A:&lt;/h3&gt; &#xA;&lt;p&gt;Q: What is the default colorscheme in screenshot:&lt;/p&gt; &#xA;&lt;p&gt;A: &lt;a href=&#34;https://github.com/ray-x/aurora&#34;&gt;aurora&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Q: I can not see border after enable border = &#34;single&#34;/&#34;rounded&#34;&lt;/p&gt; &#xA;&lt;p&gt;A: Try another colorscheme (e.g. colorscheme aurora, or colorscheme luna). If issue persists, please submit an issue&lt;/p&gt; &#xA;&lt;p&gt;Q: It is not working 😡&lt;/p&gt; &#xA;&lt;p&gt;A: Here is some trouble shooting: &lt;a href=&#34;https://github.com/ray-x/lsp_signature.nvim/issues/1&#34;&gt;https://github.com/ray-x/lsp_signature.nvim/issues/1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are using JDTLS, please read this: issue &lt;a href=&#34;https://github.com/ray-x/lsp_signature.nvim/issues/97&#34;&gt;#97&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Q:I do not like the pop window background highlight, how to change it?&lt;/p&gt; &#xA;&lt;p&gt;A: Redefine your &lt;code&gt;NormalFloat&lt;/code&gt; and &lt;code&gt;FloatBorder&lt;/code&gt;, esp if your colorscheme dose not define it.&lt;/p&gt; &#xA;&lt;p&gt;Q: How to change parameter highlight&lt;/p&gt; &#xA;&lt;p&gt;A: By default, the highlight is using &#34;LspSignatureActiveParameter&#34; defined in your colorscheme, you can either override &#34;LspSignatureActiveParameter&#34; or define, e.g. use &lt;code&gt;IncSearch&lt;/code&gt; setup({ hi_parameter = &#34;IncSearch&#34;})&lt;/p&gt; &#xA;&lt;p&gt;Q: I can not see 🐼 in virtual text&lt;/p&gt; &#xA;&lt;p&gt;A: It is emoji, not nerdfont. Please check how to enable emoji for your terminal.&lt;/p&gt; &#xA;&lt;p&gt;Q: Working with cmp/coq. The floating windows block cmp/coq&lt;/p&gt; &#xA;&lt;p&gt;A: A few options here, z-index, floating_window_above_cur_line, floating_window_off_x/y, toggle_key. You can find the best setup for your workflow.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>AckslD/nvim-neoclip.lua</title>
    <updated>2022-07-08T01:47:59Z</updated>
    <id>tag:github.com,2022-07-08:/AckslD/nvim-neoclip.lua</id>
    <link href="https://github.com/AckslD/nvim-neoclip.lua" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clipboard manager neovim plugin with telescope integration&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-neoclip.lua&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;This is a story about Bob&lt;/em&gt; 👷.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Bob loves vim&lt;/em&gt; ❤️.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Bob likes to yank&lt;/em&gt; ©️.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Bob knows about registers but sometimes forgets them&lt;/em&gt; ®️.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;This is what happens to Bob everyday&lt;/em&gt; 🚧:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Bob yanks some line.&lt;/em&gt; 😀&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Bob yanks another line.&lt;/em&gt; 🤔&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Bob realises he actually wanted the first.&lt;/em&gt; 🙁&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;But it is gone and Bob is now sad.&lt;/em&gt; 😢&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Don&#39;t be like Bob, use neoclip!&lt;/em&gt; 🎉&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;neoclip&lt;/code&gt; is a clipboard manager for neovim inspired by for example &lt;a href=&#34;https://github.com/cdown/clipmenu&#34;&gt;&lt;code&gt;clipmenu&lt;/code&gt;&lt;/a&gt;. It records everything that gets yanked in your vim session (up to a limit which is by default 1000 entries but can be configured). You can then select an entry in the history using &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;&lt;code&gt;fzf-lua&lt;/code&gt;&lt;/a&gt; which then gets populated in a register of your choice.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re on latest nightly (works if &lt;code&gt;:echo exists(&#39;##RecordingLeave&#39;)&lt;/code&gt; returns &lt;code&gt;1&lt;/code&gt;) &lt;code&gt;neoclip&lt;/code&gt; will also keep track of any recorded macro (opt-out) which you can search for using &lt;code&gt;telescope&lt;/code&gt;, put back in a register or simply replay.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it!&lt;/p&gt; &#xA;&lt;p&gt;Oh, some more things, you can define an optional filter if you don&#39;t want some things to be saved and custom actions to take.&lt;/p&gt; &#xA;&lt;p&gt;Hold on, &lt;code&gt;neoclip&lt;/code&gt; optionally also supports persistent history between sessions powered by &lt;a href=&#34;https://github.com/kkharji/sqlite.lua&#34;&gt;&lt;code&gt;sqlite.lua&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23341710/140090515-83a08f0f-85f9-4278-bcbe-48e4d8442ace.png&#34; alt=&#34;neoclip&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;AckslD/nvim-neoclip.lua&#34;,&#xA;  requires = {&#xA;    -- you&#39;ll need at least one of these&#xA;    -- {&#39;nvim-telescope/telescope.nvim&#39;},&#xA;    -- {&#39;ibhagwan/fzf-lua&#39;},&#xA;  }&#xA;  config = function()&#xA;    require(&#39;neoclip&#39;).setup()&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;require(&#39;neoclip&#39;).setup()&lt;/code&gt; is called, only the autocommand (for &lt;code&gt;TextYankPost&lt;/code&gt; event) is setup to save yanked things. This means that &lt;code&gt;telescope&lt;/code&gt; is not required at this point if you lazy load it.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use persistent history between sessions you also need &lt;a href=&#34;https://github.com/kkharji/sqlite.lua&#34;&gt;&lt;code&gt;sqlite.lua&lt;/code&gt;&lt;/a&gt; installed, for example by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;AckslD/nvim-neoclip.lua&#34;,&#xA;  requires = {&#xA;    {&#39;kkharji/sqlite.lua&#39;, module = &#39;sqlite&#39;},&#xA;    -- you&#39;ll need at least one of these&#xA;    -- {&#39;nvim-telescope/telescope.nvim&#39;},&#xA;    -- {&#39;ibhagwan/fzf-lua&#39;},&#xA;  }&#xA;  config = function()&#xA;    require(&#39;neoclip&#39;).setup()&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can configure &lt;code&gt;neoclip&lt;/code&gt; by passing a table to &lt;code&gt;setup&lt;/code&gt; (all are optional). The following are the defaults and the keys are explained below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;AckslD/nvim-neoclip.lua&#34;,&#xA;  config = function()&#xA;    require(&#39;neoclip&#39;).setup({&#xA;      history = 1000,&#xA;      enable_persistent_history = false,&#xA;      length_limit = 1048576,&#xA;      continuous_sync = false,&#xA;      db_path = vim.fn.stdpath(&#34;data&#34;) .. &#34;/databases/neoclip.sqlite3&#34;,&#xA;      filter = nil,&#xA;      preview = true,&#xA;      default_register = &#39;&#34;&#39;,&#xA;      default_register_macros = &#39;q&#39;,&#xA;      enable_macro_history = true,&#xA;      content_spec_column = false,&#xA;      on_paste = {&#xA;        set_reg = false,&#xA;      },&#xA;      on_replay = {&#xA;        set_reg = false,&#xA;      },&#xA;      keys = {&#xA;        telescope = {&#xA;          i = {&#xA;            select = &#39;&amp;lt;cr&amp;gt;&#39;,&#xA;            paste = &#39;&amp;lt;c-p&amp;gt;&#39;,&#xA;            paste_behind = &#39;&amp;lt;c-k&amp;gt;&#39;,&#xA;            replay = &#39;&amp;lt;c-q&amp;gt;&#39;,  -- replay a macro&#xA;            delete = &#39;&amp;lt;c-d&amp;gt;&#39;,  -- delete an entry&#xA;            custom = {},&#xA;          },&#xA;          n = {&#xA;            select = &#39;&amp;lt;cr&amp;gt;&#39;,&#xA;            paste = &#39;p&#39;,&#xA;            paste_behind = &#39;P&#39;,&#xA;            replay = &#39;q&#39;,&#xA;            delete = &#39;d&#39;,&#xA;            custom = {},&#xA;          },&#xA;        },&#xA;        fzf = {&#xA;          select = &#39;default&#39;,&#xA;          paste = &#39;ctrl-p&#39;,&#xA;          paste_behind = &#39;ctrl-k&#39;,&#xA;          custom = {},&#xA;        },&#xA;      },&#xA;    })&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;history&lt;/code&gt;: The max number of entries to store (default 1000).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enable_persistent_history&lt;/code&gt;: If set to &lt;code&gt;true&lt;/code&gt; the history is stored on &lt;code&gt;VimLeavePre&lt;/code&gt; using &lt;a href=&#34;https://github.com/tami5/sqlite.lua&#34;&gt;&lt;code&gt;sqlite.lua&lt;/code&gt;&lt;/a&gt; and lazy loaded when querying.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;length_limit&lt;/code&gt;: The max number of characters of an entry to be stored (default 1MiB). If the length of the yanked string is larger than the limit, it will not be stored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;continuous_sync&lt;/code&gt;: If set to &lt;code&gt;true&lt;/code&gt;, the runtime history is synced with the persistent storage everytime it&#39;s changed or queried. If you often use multiple sessions in parallel and wants the history synced you might want to enable this. Of by default cause it might cause delays since the history is written to file everytime you yank something. Although, I don&#39;t really notice a slowdown. Alternatively see &lt;code&gt;db_pull&lt;/code&gt; and &lt;code&gt;db_push&lt;/code&gt; functions &lt;a href=&#34;https://raw.githubusercontent.com/AckslD/nvim-neoclip.lua/main/#sync-database&#34;&gt;below&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;db_path&lt;/code&gt;: The path to the sqlite database to store history if &lt;code&gt;enable_persistent_history=true&lt;/code&gt;. Defaults to &lt;code&gt;vim.fn.stdpath(&#34;data&#34;) .. &#34;/databases/neoclip.sqlite3&lt;/code&gt; which on my system is &lt;code&gt;~/.local/share/nvim/databases/neoclip.sqlite3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: A function to filter what entries to store (default all are stored). This function filter should return &lt;code&gt;true&lt;/code&gt; (include the yanked entry) or &lt;code&gt;false&lt;/code&gt; (don&#39;t include it) based on a table as the only argument, which has the following keys: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;event&lt;/code&gt;: The event from &lt;code&gt;TextYankPost&lt;/code&gt; (see &lt;code&gt;:help TextYankPost&lt;/code&gt; for which keys it contains).&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;filetype&lt;/code&gt;: The filetype of the buffer where the yank happened.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;buffer_name&lt;/code&gt;: The name of the buffer where the yank happened.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;preview&lt;/code&gt;: Whether to show a preview (default) of the current entry or not. Useful for for example multiline yanks. When yanking the filetype is recorded in order to enable correct syntax highlighting in the preview. NOTE: in order to use the dynamic title showing the type of content and number of lines you need to configure &lt;code&gt;telescope&lt;/code&gt; with the &lt;code&gt;dynamic_preview_title = true&lt;/code&gt; option.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_register&lt;/code&gt;: What register to use by default when not specified (e.g. &lt;code&gt;Telescope neoclip&lt;/code&gt;). Can be a string such as &lt;code&gt;&#39;&#34;&#39;&lt;/code&gt; (single register) or a table of strings such as &lt;code&gt;{&#39;&#34;&#39;, &#39;+&#39;, &#39;*&#39;}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default_register_macros&lt;/code&gt;: What register to use for macros by default when not specified (e.g. &lt;code&gt;Telescope macroscope&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;enable_macro_history&lt;/code&gt;: If &lt;code&gt;true&lt;/code&gt; (default) any recorded macro will be saved, see &lt;a href=&#34;https://raw.githubusercontent.com/AckslD/nvim-neoclip.lua/main/#macros&#34;&gt;macros&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;content_spec_colunm&lt;/code&gt;: Can be set to &lt;code&gt;true&lt;/code&gt; (default &lt;code&gt;false&lt;/code&gt;) to use instead of the preview. It will only show the type and number of lines next to the first line of the entry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on_paste&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;set_reg&lt;/code&gt;: if the register should be populated when pressing the key to paste directly.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;on_replay&lt;/code&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;set_reg&lt;/code&gt;: if the register should be populated when pressing the key to replay a recorded macro.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keys&lt;/code&gt;: keys to use for the different pickers (&lt;code&gt;telescope&lt;/code&gt; and &lt;code&gt;fzf-lua&lt;/code&gt;). With &lt;code&gt;telescope&lt;/code&gt; normal key-syntax is supported and both insert &lt;code&gt;i&lt;/code&gt; and normal mode &lt;code&gt;n&lt;/code&gt;. With &lt;code&gt;fzf-lua&lt;/code&gt; only insert mode is supported and &lt;code&gt;fzf&lt;/code&gt;-style key-syntax needs to be used. You can also use the &lt;code&gt;custom&lt;/code&gt; entry to specify custom actions to take on certain key-presses, see &lt;a href=&#34;https://raw.githubusercontent.com/AckslD/nvim-neoclip.lua/main/#custom-actions&#34;&gt;below&lt;/a&gt; for more details. NOTE: these are only set in the &lt;code&gt;telescope&lt;/code&gt; buffer and you need to setup your own keybindings to for example open &lt;code&gt;telescope&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See screenshot section below for how the settings above might affect the looks.&lt;/p&gt; &#xA;&lt;h3&gt;Custom actions&lt;/h3&gt; &#xA;&lt;p&gt;You can specify custom actions in the &lt;code&gt;keys&lt;/code&gt; entry in the settings. For example you can do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neoclip&#39;).setup({&#xA;  ...&#xA;  keys = {&#xA;    ...&#xA;    n = {&#xA;      ...&#xA;      custom = {&#xA;        [&#39;&amp;lt;space&amp;gt;&#39;] = function(opts)&#xA;          print(vim.inspect(opts))&#xA;        end,&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which when pressing &lt;code&gt;&amp;lt;space&amp;gt;&lt;/code&gt; in normal mode will print something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  register_names = { &#39;&#34;&#39; },&#xA;  entry = {&#xA;    contents = { &#34;which when pressing `&amp;lt;space&amp;gt;` in normal mode will print something like:&#34; },&#xA;    filetype = &#34;markdown&#34;,&#xA;    regtype = &#34;l&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to do your custom action and also populate a register and/or paste you can call &lt;code&gt;neoclip&lt;/code&gt;s built-in handlers, such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;neoclip&#39;).setup({&#xA;  ...&#xA;  keys = {&#xA;    ...&#xA;    n = {&#xA;      ...&#xA;      custom = {&#xA;        [&#39;&amp;lt;space&amp;gt;&#39;] = function(opts)&#xA;          -- do your stuff&#xA;          -- ...&#xA;          local handlers = require(&#39;neoclip.handlers&#39;)&#xA;          -- optionally set the registers with the entry&#xA;          -- handlers.set_registers(opts.register_names, opts.entry)&#xA;          -- optionally paste entry&#xA;          -- handlers.paste(opts.entry, &#39;p&#39;)&#xA;          -- optionally paste entry behind&#xA;          -- handlers.paste(opts.entry, &#39;P&#39;)&#xA;        end,&#xA;      },&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Yanks&lt;/h3&gt; &#xA;&lt;p&gt;Yank all you want and then do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope neoclip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if using &lt;code&gt;telescope&lt;/code&gt; or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require(&#39;neoclip.fzf&#39;)()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if using &lt;code&gt;fzf-lua&lt;/code&gt;, which will show you a history of the yanks that happened in the current session. If you pick (default &lt;code&gt;&amp;lt;cr&amp;gt;&lt;/code&gt;) one this will then replace the current &lt;code&gt;&#34;&lt;/code&gt; (unnamed) register.&lt;/p&gt; &#xA;&lt;p&gt;If you instead want to directly paste it you can press by default &lt;code&gt;&amp;lt;c-p&amp;gt;&lt;/code&gt; in insert mode and &lt;code&gt;p&lt;/code&gt; in normal. Paste behind is by default &lt;code&gt;&amp;lt;c-k&amp;gt;&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; respectively.&lt;/p&gt; &#xA;&lt;p&gt;If you want to replace another register with an entry from the history you can do for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope neoclip a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if using &lt;code&gt;telescope&lt;/code&gt; or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require(&#39;neoclip.fzf&#39;)(&#39;a&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if using &lt;code&gt;fzf-lua&lt;/code&gt;, which will replace register &lt;code&gt;a&lt;/code&gt;. The register &lt;code&gt;[0-9a-z]&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; (&lt;code&gt;&#34;&lt;/code&gt;) are supported.&lt;/p&gt; &#xA;&lt;p&gt;The following special registers are support:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;&lt;/code&gt;: &lt;code&gt;Telescope neoclip unnamed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*&lt;/code&gt;: &lt;code&gt;Telescope neoclip star&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;+&lt;/code&gt;: &lt;code&gt;Telescope neoclip plus&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and &lt;code&gt;Telescope neoclip&lt;/code&gt; (and &lt;code&gt;Telescope neoclip default&lt;/code&gt;) will use what you set &lt;code&gt;default_register&lt;/code&gt; in the &lt;code&gt;setup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify more registers to populate in a single command with the &lt;code&gt;extra&lt;/code&gt; keyword argument which supports registers separated by comma, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope neoclip a extra=star,plus,b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if using &lt;code&gt;telescope&lt;/code&gt; or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require(&#39;neoclip.fzf&#39;)({&#39;a&#39;, &#39;star&#39;, &#39;plus&#39;, &#39;b&#39;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;if using &lt;code&gt;fzf-lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Macros&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;enable_macro_history&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; (default) in the &lt;a href=&#34;https://raw.githubusercontent.com/AckslD/nvim-neoclip.lua/main/#configuration&#34;&gt;&lt;code&gt;setup&lt;/code&gt;&lt;/a&gt; then any recorded macro will be stored and can later be accessed using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Telescope macroscope&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or equivalently (which is probably the better way if you&#39;re lazy loading &lt;code&gt;telescope&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:lua require(&#39;telescope&#39;).extensions.macroscope.default()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same arguments are supported as for the &lt;code&gt;neoclip&lt;/code&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: This feature requires latest nightly and in particular &lt;a href=&#34;https://github.com/neovim/neovim/pull/16684&#34;&gt;this PR&lt;/a&gt;. You can check that your neovim supports this by checking that &lt;code&gt;:echo exists(&#39;##RecordingLeave&#39;)&lt;/code&gt; returns &lt;code&gt;1&lt;/code&gt;. If not then everything will work normally except that no macro will be saved in the history of &lt;code&gt;neoclip&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Start/stop&lt;/h3&gt; &#xA;&lt;p&gt;If you temporarily don&#39;t want &lt;code&gt;neoclip&lt;/code&gt; to record anything you can use the following calls:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:lua require(&#39;neoclip&#39;).start()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:lua require(&#39;neoclip&#39;).stop()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:lua require(&#39;neoclip&#39;).toggle()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sync database&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t want to use the setting &lt;code&gt;continuous_sync&lt;/code&gt;, but still keep two instances of neovim synchronized in their &lt;code&gt;neoclip&lt;/code&gt; history you can use the functions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:lua require(&#39;neoclip&#39;).db_pull()&lt;/code&gt;: Pulls the database (overwrites any local history in the current session).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:lua require(&#39;neoclip&#39;).db_push()&lt;/code&gt;: Pushes to the database (overwrites any history previous saved in the database).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Remove entries&lt;/h3&gt; &#xA;&lt;p&gt;You can remove entries manually using the keybinds for &lt;code&gt;delete&lt;/code&gt;. You can also delete the whole history with &lt;code&gt;:lua require(&#39;neoclip&#39;).clear_history()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Duplicate yanks are not stored, but rather pushed forward in the history such that they are the first choice when searching for previous yanks. Equality is checked using content and also type (ie charwise, linewise or blockwise), so if you have to yanks with the same content but when yanked charwise and the other linewise, these are considered two different entries. However, the filetype in the buffer when the yanked happened is not, so if you yank &lt;code&gt;print(&#39;hello&#39;)&lt;/code&gt; in a &lt;code&gt;python&lt;/code&gt; file and then in a &lt;code&gt;lua&lt;/code&gt; file you&#39;ll have a single entry which will be previewed using &lt;code&gt;lua&lt;/code&gt; syntax.&lt;/li&gt; &#xA; &lt;li&gt;If you lazy load &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/a&gt; with &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer&lt;/code&gt;&lt;/a&gt; with for example the key &lt;code&gt;module = telescope&lt;/code&gt;, then it&#39;s better to use e.g. &lt;code&gt;:lua require(&#39;telescope&#39;).extensions.neoclip.default()&lt;/code&gt; than &lt;code&gt;:Telescope neoclip&lt;/code&gt; (or &lt;code&gt;:lua require(&#39;telescope&#39;).extensions.neoclip[&#39;&amp;lt;reg&amp;gt;&#39;]()&lt;/code&gt; over &lt;code&gt;:Telescope neoclip &amp;lt;reg&amp;gt;&lt;/code&gt;) for keybindings since it will properly load &lt;code&gt;telescope&lt;/code&gt; before calling the extension.&lt;/li&gt; &#xA; &lt;li&gt;If you don&#39;t want to store pure whitespace yanks you could specify a filter as: &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local function is_whitespace(line)&#xA;  return vim.fn.match(line, [[^\s*$]]) ~= -1&#xA;end&#xA;&#xA;local function all(tbl, check)&#xA;  for _, entry in ipairs(tbl) do&#xA;    if not check(entry) then&#xA;      return false&#xA;    end&#xA;  end&#xA;  return true&#xA;end&#xA;&#xA;require(&#39;neoclip&#39;).setup{&#xA;  ...&#xA;  filter = function(data)&#xA;    return not all(data.event.regcontents, is_whitespace)&#xA;  end,&#xA;  ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For some plugin managers it seems necessary to do &lt;pre&gt;&lt;code&gt;:lua require(&#39;telescope&#39;).load_extension(&#39;neoclip&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; before being able to call &lt;code&gt;:Telescope neoclip&lt;/code&gt; (packer does not seem to need this). However, &lt;code&gt;:lua require(&#39;telescope&#39;).extensions.neoclip.default()&lt;/code&gt; seems to work without having to load. It also seems that calling through &lt;code&gt;lua&lt;/code&gt; seems necessary to play well with the (optional) persistent history if you&#39;re using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;&lt;code&gt;vim-plug&lt;/code&gt;&lt;/a&gt;, see discussion &lt;a href=&#34;https://github.com/AckslD/nvim-neoclip.lua/issues/32&#34;&gt;here&lt;/a&gt; for details. If you find out what is causing this, I&#39;d be very happy to know :)&lt;/li&gt; &#xA; &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;&lt;code&gt;packer&lt;/code&gt;&lt;/a&gt;, don&#39;t forget to &lt;code&gt;PackerCompile&lt;/code&gt; after adding the plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks @cdown for the inspiration with &lt;a href=&#34;https://github.com/cdown/clipmenu&#34;&gt;&lt;code&gt;clipmenu&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Thanks @fdschmidt93 for help understanding some &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;&lt;code&gt;telescope&lt;/code&gt;&lt;/a&gt; concepts.&lt;/li&gt; &#xA; &lt;li&gt;Thanks @ibhagwan for providing the code example to support &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;&lt;code&gt;fzf-lua&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;preview = true&lt;/code&gt; and &lt;code&gt;content_spec_column = false&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23341710/140090515-83a08f0f-85f9-4278-bcbe-48e4d8442ace.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;preview = false&lt;/code&gt; and &lt;code&gt;content_spec_column = true&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23341710/140090472-3271affa-7efd-40bd-9d20-562b2074b261.png&#34; alt=&#34;content_spec_column&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;preview = false&lt;/code&gt; and &lt;code&gt;content_spec_column = false&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/23341710/140090327-30bfff28-83ff-4695-82b8-8d4abfd68546.png&#34; alt=&#34;clean&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>