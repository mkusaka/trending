<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-14T01:36:42Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jayp0521/mason-null-ls.nvim</title>
    <updated>2022-09-14T01:36:42Z</updated>
    <id>tag:github.com,2022-09-14:/jayp0521/mason-null-ls.nvim</id>
    <link href="https://github.com/jayp0521/mason-null-ls.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mason-null-ls&lt;/h1&gt; &#xA;&lt;p&gt;Install or upgrade the required tools needed for null-ls where available in Mason.&lt;/p&gt; &#xA;&lt;p&gt;Currently installation of the tools must occur using a command on startup.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;require(&#34;mason-null-ls&#34;).check_install()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Uses Mason do the heavy lifting of installing the dependencies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Can automatically parse the null-ls table and install the necessary tools available in Mason.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note: Going through all null-ls builtins and mapping it to the correct tool name in Mason is still a WIP. Feel free to create an issue or PR with a source you would like available immediately.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim.git&#34;&gt;mason.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim.git&#34;&gt;null-ls.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Neovim &amp;gt;0.7&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Packer Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;&#x9;&#34;jayp0521/mason-null-ls.nvim&#34;,&#xA;&#x9;after = {&#xA;&#x9;&#x9;&#34;null-ls.nvim&#34;,&#xA;&#x9;&#x9;&#34;mason.nvim&#34;,&#xA;&#x9;},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommended&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;&#x9;&#34;jayp0521/mason-null-ls.nvim&#34;,&#xA;&#x9;after = {&#xA;&#x9;&#x9;&#34;null-ls.nvim&#34;,&#xA;&#x9;&#x9;&#34;mason.nvim&#34;,&#xA;&#x9;},&#xA;&#x9;config = function()&#xA;&#x9;&#x9;require(&#34;mason-null-ls&#34;).setup({&#xA;&#x9;&#x9;&#x9;automatic_installation = true,&#xA;&#x9;&#x9;})&#xA;&#x9;&#x9;require(&#34;mason-null-ls&#34;).check_install(true)&#xA;&#x9;end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;mason-null-ls&#39;).setup {&#xA;&#xA;  -- a list of all tools you want to ensure are installed upon&#xA;  -- start; they should be the names Mason uses for each tool&#xA;  ensure_installed = {&#xA;&#xA;    -- you can pin a tool to a particular version&#xA;    { &#39;golangci-lint&#39;, version = &#39;1.47.0&#39; },&#xA;&#xA;    -- you can turn off/on auto_update per tool&#xA;    { &#39;shellcheck&#39;, auto_update = true },&#xA;&#xA;    &#39;stylua&#39;,&#xA;    &#39;shellcheck&#39;,&#xA;    &#39;editorconfig-checker&#39;,&#xA;    &#39;revive&#39;,&#xA;    &#39;shellcheck&#39;,&#xA;    &#39;shfmt&#39;,&#xA;    &#39;staticcheck&#39;,&#xA;    &#39;vint&#39;,&#xA;  },&#xA;&#xA;&#x9;null_ls_sources = {&#xA;&#x9;&#x9;-- Will install the all necessary tools from Mason, in this case `write-good`.&#xA;&#x9;&#x9;-- Source must map to the source name in `null-ls`.&#xA;&#x9;&#x9;-- Pinning a version or toggling auto_update per tool is not supported.&#xA;&#x9;&#x9;&#39;write_good&#39;,&#xA;&#x9;},&#xA;&#xA;  -- if set to true this will check each tool for updates. If updates&#xA;  -- are available the tool will be updated. This setting does not&#xA;  -- affect :MasonNullLsUpdate or :MasonNullLsInstall.&#xA;  -- Default: false&#xA;  auto_update = false,&#xA;&#xA;  -- if set to true, the tool will check null-ls for the available sources,&#xA;  -- and then install the dependency(ies) if available in mason.&#xA;  -- Default: true&#xA;  automatic_installation = true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;:MasonNullLsInstall&lt;/code&gt; - only installs tools that are missing or at the incorrect version &lt;code&gt;:MasonNullLsUpdate&lt;/code&gt; - install missing tools and update already installed tools&lt;/p&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;p&gt;Upon completion of any &lt;code&gt;mason-null-ls&lt;/code&gt; initiated installation/update a user event will be emitted named &lt;code&gt;MasonNullLsUpdateCompleted&lt;/code&gt;. To use this event you can setup an event handler like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  vim.api.nvim_create_autocmd(&#39;User&#39;, {&#xA;    pattern = &#39;MasonNullLsUpdateCompleted&#39;,&#xA;    callback = function()&#xA;      vim.schedule(print &#39;mason-null-ls has finished&#39;)&#xA;    end,&#xA;  })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Suggestions / Complaints / Help&lt;/h2&gt; &#xA;&lt;p&gt;Create an issue at: &lt;a href=&#34;https://github.com/jayp0521/mason-null-ls.nvim/issues&#34;&gt;https://github.com/jayp0521/mason-null-ls.nvim/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;p&gt;This tool depends on &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;null-ls.nvim&lt;/code&gt; as mentioned earlier. It is also heavily inspired by &lt;a href=&#34;https://github.com/WhoIsSethDaniel/mason-tool-installer.nvim&#34;&gt;&lt;code&gt;mason-tool-installer&lt;/code&gt;&lt;/a&gt;. Much of the code and even this README.md is based off of it.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rouge8/neotest-rust</title>
    <updated>2022-09-14T01:36:42Z</updated>
    <id>tag:github.com,2022-09-14:/rouge8/neotest-rust</id>
    <link href="https://github.com/rouge8/neotest-rust" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neotest adapter for Rust, using cargo-nextest.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neotest-rust&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rcarriga/neotest&#34;&gt;Neotest&lt;/a&gt; adapter for Rust, using &lt;a href=&#34;https://nexte.st/&#34;&gt;cargo-nextest&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; and the parser for Rust.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;neotest&#34;).setup({&#xA;  adapters = {&#xA;    require(&#34;neotest-rust&#34;)&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supports standard library tests, &lt;a href=&#34;https://github.com/la10736/rstest&#34;&gt;&lt;code&gt;rstest&lt;/code&gt;&lt;/a&gt;, Tokio&#39;s &lt;code&gt;[#tokio::test]&lt;/code&gt;, and more. Does not support &lt;code&gt;rstest&lt;/code&gt;&#39;s parametrized tests.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Does not support running the whole test suite, only individual tests or files.&lt;/li&gt; &#xA; &lt;li&gt;Assumes unit tests in &lt;code&gt;main.rs&lt;/code&gt;, &lt;code&gt;mod.rs&lt;/code&gt;, and &lt;code&gt;lib.rs&lt;/code&gt; are in a &lt;code&gt;tests&lt;/code&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;Does not support &lt;code&gt;rstest&lt;/code&gt;&#39;s &lt;code&gt;#[case]&lt;/code&gt; macro.&lt;/li&gt; &#xA; &lt;li&gt;When running tests for a &lt;code&gt;main.rs&lt;/code&gt; in an integration test subdirectory (e.g. &lt;code&gt;tests/testsuite/main.rs&lt;/code&gt;), all tests in that subdirectory will be run (e.g. all tests in &lt;code&gt;tests/testsuite/&lt;/code&gt;). This is because Cargo lacks the capability to specify a test file.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>David-Kunz/markid</title>
    <updated>2022-09-14T01:36:42Z</updated>
    <id>tag:github.com,2022-09-14:/David-Kunz/markid</id>
    <link href="https://github.com/David-Kunz/markid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Neovim extension to highlight same-name identifiers with the same color.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;markid&lt;/h1&gt; &#xA;&lt;p&gt;A Neovim extension to highlight same-name identifiers with the same color.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Syntax highlighting is mostly based on element kinds of the abstract syntax tree. This sometimes leads to different visual representations of the same variable, consider this example:&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1009936/189521828-cca98d82-1959-4c7f-8d54-8f9bd9ceaa65.png&#34; height=&#34;100&#34;&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;myParam&lt;/code&gt; has the colors yellow and white, making it hard for the developer to recognise that both represent the same thing.&lt;/p&gt; &#xA;&lt;p&gt;Now with markid, it&#39;s ensured that same-name identifiers are represented with the same color:&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1009936/189521962-680a28f2-2351-4c8c-96b1-12cc67ff59f4.png&#34; height=&#34;100&#34;&gt; &#xA;&lt;p&gt;Here&#39;s a slightly more complicated example, try to track the flow of &lt;code&gt;qux&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1009936/189522794-cae13379-6b99-4976-b429-5e5414549945.png&#34; height=&#34;500&#34;&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/1009936/189522795-12beae5d-dea5-463a-ad00-860282a3d040.png&#34; height=&#34;500&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Requirements: &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; including a parser for your language&lt;/p&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Plug &#39;David-Kunz/markid&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use &#39;David-Kunz/markid&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable the &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; plugin:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  markid = { enable = true }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;These are the configuration options (with defaults):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local m = require&#39;markid&#39;&#xA;require&#39;nvim-treesitter.configs&#39;.setup {&#xA;  markid = {&#xA;    enable = true,&#xA;    colors = m.colors.medium,&#xA;    queries = m.queries,&#xA;    is_supported = function(lang)&#xA;      local queries = configs.get_module(&#34;markid&#34;).queries&#xA;      return pcall(vim.treesitter.parse_query, lang, queries[lang] or queries[&#39;default&#39;])&#xA;    end&#xA;  }&#xA;}&#xA;&#xA;m.colors = {&#xA;  dark = { &#39;#619e9d&#39;, &#39;#9E6162&#39;, &#39;#81A35C&#39;, &#39;#7E5CA3&#39;, &#39;#9E9261&#39;, &#39;#616D9E&#39;, &#39;#97687B&#39;, &#39;#689784&#39;, &#39;#999C63&#39;, &#39;#66639C&#39;, &#39;#967869&#39;, &#39;#698796&#39;, &#39;#9E6189&#39;, &#39;#619E76&#39; },&#xA;  bright = { &#39;#f5c0c0&#39;, &#39;#f5d3c0&#39;, &#39;#f5eac0&#39;, &#39;#dff5c0&#39;, &#39;#c0f5c8&#39;, &#39;#c0f5f1&#39;, &#39;#c0dbf5&#39;, &#39;#ccc0f5&#39;, &#39;#f2c0f5&#39; },&#xA;  medium = {&#39;#c99d9d&#39;, &#39;#c9a99d&#39;, &#39;#c9b79d&#39;, &#39;#c9c39d&#39;, &#39;#bdc99d&#39;, &#39;#a9c99d&#39;, &#39;#9dc9b6&#39;, &#39;#9dc2c9&#39;, &#39;#9da9c9&#39;, &#39;#b29dc9&#39;, &#39;#c99dc1&#39; }&#xA;}&#xA;&#xA;m.queries = {&#xA;  default = &#39;(identifier) @markid&#39;,&#xA;  javascript = [[&#xA;          (identifier) @markid&#xA;          (property_identifier) @markid&#xA;          (shorthand_property_identifier_pattern) @markid&#xA;        ]]&#xA;}&#xA;m.queries.typescript = m.queries.javascript&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>