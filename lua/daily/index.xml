<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-03T01:31:59Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>rmehri01/onenord.nvim</title>
    <updated>2024-03-03T01:31:59Z</updated>
    <id>tag:github.com,2024-03-03:/rmehri01/onenord.nvim</id>
    <link href="https://github.com/rmehri01/onenord.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üèîÔ∏è A Neovim theme that combines the Nord and Atom One Dark color palettes for a more vibrant programming experience.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üèîÔ∏è onenord.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/52933714/138731499-c4092892-46cf-45e6-8947-edb5dfe32c06.png&#34; alt=&#34;Screenshot of the onenord theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/52933714/144966905-4b17902b-53bb-4de7-8bd8-bb7d72603ca6.png&#34; alt=&#34;Screenshot of the onenordlight theme&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;OneNord is a Neovim theme written in Lua that combines the &lt;a href=&#34;https://www.nordtheme.com&#34;&gt;Nord&lt;/a&gt; and &lt;a href=&#34;https://github.com/atom/atom/tree/master/packages/one-dark-ui&#34;&gt;Atom One Dark&lt;/a&gt; color palettes. More specifically, it seeks to add more vibrance to the Nord theme and provide a great programming experience by leveraging &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h3&gt;Plugin Support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;Treesitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter-context&#34;&gt;Treesitter Context&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;LSP Diagnostics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/trouble.nvim&#34;&gt;Trouble&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Git Signs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;Git Gutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;Cmp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;NvimTree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;NeoTree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt;WhichKey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;Indent Blankline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;BufferLine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;Notify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;Lightspeed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;Sneak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/phaazon/hop.nvim&#34;&gt;Hop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lambdalisue/fern.vim&#34;&gt;Fern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;Barbar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;LSP Saga&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;Dap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SmiteshP/nvim-navic&#34;&gt;Navic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sr.ht/~p00f/nvim-ts-rainbow/&#34;&gt;nvim-ts-rainbow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via your favourite package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; If you are using Vim Plug&#xA;Plug &#39;rmehri01/onenord.nvim&#39;, { &#39;branch&#39;: &#39;main&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- If you are using Packer&#xA;use &#39;rmehri01/onenord.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;For the defaults, simply enable the colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Vim Script&#xA;colorscheme onenord&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Lua&#xA;require(&#39;onenord&#39;).setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;onenord&lt;/code&gt; theme for &lt;code&gt;Lualine&lt;/code&gt;, specify it in your lualine settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    -- ... your lualine config&#xA;    theme = &#39;onenord&#39;&#xA;    -- ... your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration of different options is done through a setup function which will handle setting the colors, so there&#39;s no need to set &lt;code&gt;colorscheme&lt;/code&gt; yourself! This is an example of the function with the default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;onenord&#39;).setup({&#xA;  theme = nil, -- &#34;dark&#34; or &#34;light&#34;. Alternatively, remove the option and set vim.o.background instead&#xA;  borders = true, -- Split window borders&#xA;  fade_nc = false, -- Fade non-current windows, making them more distinguishable&#xA;  -- Style that is applied to various groups: see `highlight-args` for options&#xA;  styles = {&#xA;    comments = &#34;NONE&#34;,&#xA;    strings = &#34;NONE&#34;,&#xA;    keywords = &#34;NONE&#34;,&#xA;    functions = &#34;NONE&#34;,&#xA;    variables = &#34;NONE&#34;,&#xA;    diagnostics = &#34;underline&#34;,&#xA;  },&#xA;  disable = {&#xA;    background = false, -- Disable setting the background color&#xA;    float_background = false, -- Disable setting the background color for floating windows&#xA;    cursorline = false, -- Disable the cursorline&#xA;    eob_lines = true, -- Hide the end-of-buffer lines&#xA;  },&#xA;  -- Inverse highlight for different groups&#xA;  inverse = {&#xA;    match_paren = false,&#xA;  },&#xA;  custom_highlights = {}, -- Overwrite default highlight groups&#xA;  custom_colors = {}, -- Overwrite default colors&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is an example of overwriting the default highlight groups and colors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require(&#34;onenord.colors&#34;).load()&#xA;&#xA;require(&#34;onenord&#34;).setup({&#xA;  custom_highlights = {&#xA;    [&#34;@constructor&#34;] = { fg = colors.dark_blue },&#xA;  },&#xA;  custom_colors = {&#xA;    red = &#34;#ffffff&#34;,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you use the &lt;code&gt;light&lt;/code&gt; and &lt;code&gt;dark&lt;/code&gt; keys, the override will be specific to those themes, otherwise they apply to both:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require(&#34;onenord.colors&#34;).load()&#xA;&#xA;require(&#34;onenord&#34;).setup({&#xA;  custom_highlights = {&#xA;    light = {&#xA;      [&#34;@constructor&#34;] = { fg = colors.dark_blue }, -- only applies in light theme&#xA;    },&#xA;  },&#xA;  custom_colors = {&#xA;    blue = &#34;#0000ff&#34;, -- applies in both themes&#xA;    light = {&#xA;      red = &#34;#000000&#34;, -- only applies in light theme&#xA;    },&#xA;    dark = {&#xA;      red = &#34;#ffffff&#34;, -- only applies in dark theme&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the OneNord color palette for other plugins using &lt;code&gt;local colors = require(&#34;onenord.colors&#34;).load()&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;h3&gt;LSP Saga&lt;/h3&gt; &#xA;&lt;p&gt;For custom LSP kind colors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;lspsaga&#34;).setup({&#xA;  ui = {&#xA;    kind = require(&#34;onenord.integrations.lspsaga&#34;).custom_kind(),&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;p&gt;Extra color configs for &lt;a href=&#34;https://raw.githubusercontent.com/rmehri01/onenord.nvim/main/extras/kitty/&#34;&gt;Kitty&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rmehri01/onenord.nvim/main/extras/alacritty/&#34;&gt;Alacritty&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rmehri01/onenord.nvim/main/extras/iterm/&#34;&gt;iTerm&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/rmehri01/onenord.nvim/main/extras/warp/&#34;&gt;Warp&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/rmehri01/onenord.nvim/main/extras/xresources/&#34;&gt;Xresources&lt;/a&gt; can be found in &lt;a href=&#34;https://github.com/rmehri01/onenord.nvim/raw/main/extras&#34;&gt;extras&lt;/a&gt;. To use them, refer to their respective documentation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/52933714/139562438-d05ceebe-cf01-4948-bdab-6d0969f22087.png&#34; alt=&#34;An example of the Kitty onenord theme&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There is also a version for &lt;a href=&#34;https://github.com/rmehri01/onenord-jetbrains&#34;&gt;JetBrains IDEs&lt;/a&gt; if you are interested!&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;I was highly inspired by these other awesome themes, check them out!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/folke/tokyonight.nvim&#34;&gt;tokyonight.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/navarasu/onedark.nvim&#34;&gt;onedark.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NvChad/NvChad#theme-showcase&#34;&gt;NvChad&#39;s Nord Theme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marko-cerovac/material.nvim&#34;&gt;material.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shaunsingh/nord.nvim&#34;&gt;nord.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kenzok8/small</title>
    <updated>2024-03-03T01:31:59Z</updated>
    <id>tag:github.com,2024-03-03:/kenzok8/small</id>
    <link href="https://github.com/kenzok8/small" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ssr passwall bypass‰æùËµñ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github-readme-stats.vercel.app/api?username=kenzok8&amp;amp;show_icons=true&amp;amp;theme=radical&#34; alt=&#34;Anurag&#39;s GitHub stats&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1 align=&#34;center&#34; smmall&lt; h1&gt; &lt;img src=&#34;https://img.shields.io/github/issues/kenzok8/small?color=green&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/kenzok8/small?color=yellow&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/kenzok8/small?color=orange&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/languages/code-size/kenzok8/small?color=blueviolet&#34;&gt; &lt;/h1&gt;&#xA;&lt;/div&gt; &#xA;&lt;img src=&#34;https://v2.jinrishici.com/one.svg?font-size=24&amp;amp;spacing=2&amp;amp;color=Black&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Êääopenwrt-packages‰∏ésmall‰ªìÂ∫ìÈáçÊñ∞ÂΩíÁ±ªÔºåssr„ÄÅpasswall„ÄÅvssr‰ª•Âèä‰æùËµñÂêàÂπ∂small&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;‰ΩøÁî®ÊñπÂºè&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;&#xA;ÈªòËÆ§ssr‰∏épasswallÁöÑÊèí‰ª∂‰∏é‰æùËµñÊï¥ÂêàÂåÖ&#xA;&#xA;‰ΩøÁî®ÊñπÊ≥ïÔºöÂ∞ÜÊï¥ÂêàÂåÖ‰∏ä‰º†Âà∞openwrtËÆæÂ§áÁöÑtmpÁõÆÂΩïÔºåËæìÂÖ•ÂëΩ‰ª§ opkg install *.ipk&#xA;&#xA;ÈªòËÆ§ÂéãÁº©ÂåÖÈáåÂåÖÂê´ssr passwall bypass passwall2 Êèí‰ª∂&#xA;&#xA;Â¶ÇÊûúÂçïÁã¨ÂÆâË£Össr‰∏é‰æùËµñÔºårm -rf {*passwall*,*bypass*,*vssr*}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;ÂñúÊ¨¢ËøΩÊñ∞ÁöÑÂèØ‰ª•Âéª‰∏ãËΩΩsmall-packageÔºåËØ•‰ªìÂ∫ìÊØèÂ§©Ëá™Âä®ÂêåÊ≠•Êõ¥Êñ∞&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kenzok8/small-package&#34;&gt;small-package‰ªìÂ∫ìÂú∞ÂùÄ&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Êèí‰ª∂ÊØèÊó•Êõ¥Êñ∞‰∏ãËΩΩ:&lt;/h5&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kenzok8/small/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/kenzok8/small?style=for-the-badge&amp;amp;label=%E6%8F%92%E4%BB%B6%E4%B8%8B%E8%BD%BD&#34; alt=&#34;GitHub release (latest by date)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/kenzok8/small&#34;&gt;ssr+passwall‰æùËµñ‰ªìÂ∫ì&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://op.dllkids.xyz/&#34;&gt;openwrtÂõ∫‰ª∂‰∏éÊèí‰ª∂‰∏ãËΩΩ&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;‰ΩøÁî®&lt;/h4&gt; &#xA;&lt;p&gt;‰∏ÄÈîÆÂëΩ‰ª§&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;sed -i &#39;$a src-git kenzo https://github.com/kenzok8/openwrt-packages&#39; feeds.conf.default&#xA;sed -i &#39;$a src-git small https://github.com/kenzok8/small&#39; feeds.conf.default&#xA;git pull&#xA;./scripts/feeds update -a&#xA;./scripts/feeds install -a&#xA;make menuconfig&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ê≥®ÊÑè&lt;/h4&gt; &#xA;&lt;p&gt;ÁºñËØëÊñ∞ÁâàSing-boxÂíåhysteriaÔºåÈúÄgolangÁâàÊú¨1.20ÊàñËÄÖ‰ª•‰∏äÁâàÊú¨ ÔºåÂèØ‰ª•Áî®‰ª•‰∏ãÂëΩ‰ª§&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;rm -rf feeds/packages/lang/golang&#xA;git clone https://github.com/sbwml/packages_lang_golang -b 22.x feeds/packages/lang/golang&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>michaelrommel/nvim-silicon</title>
    <updated>2024-03-03T01:31:59Z</updated>
    <id>tag:github.com,2024-03-03:/michaelrommel/nvim-silicon</id>
    <link href="https://github.com/michaelrommel/nvim-silicon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;neovim plugin to create code images using the external silicon tool.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-silicon&lt;/h1&gt; &#xA;&lt;p&gt;Plugin to create code images using the external &lt;code&gt;silicon&lt;/code&gt; tool.&lt;/p&gt; &#xA;&lt;p&gt;This differs from &lt;code&gt;silicon.nvim&lt;/code&gt; as that plugin uses a rust binding to call directly into the silicon rust library.&lt;/p&gt; &#xA;&lt;p&gt;The plugin has been mentioned in a recent YouTube video by &#34;Dreams of Code&#34;, titled &lt;a href=&#34;https://youtu.be/ig_HLrssAYE?si=R2OXs7EgcLZ8dj6r&#34;&gt;&#34;Create beautiful code screenshots in Neovim. Without damaging your wrists.&#34;&lt;/a&gt; Thank you, Dreams of Code, for the nice words!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Right now, the plugin supports most options, that the original &lt;code&gt;silicon&lt;/code&gt; tool offers. The advanced and nice features that @krivahtoo implemented, like watermarking are missing, but maybe one can use a watermarked background for this. Clipboard support, might not work cross platform, e.g. inside a WSL2 installation, because from there you do not have access to the system clipboard and there may not be an X server running.&lt;/p&gt; &#xA;&lt;p&gt;This implementation supports selected line ranges, also highlighting of a line and removing superfluous indents and adding consisten padding or a separator between the numbers and the code.&lt;/p&gt; &#xA;&lt;p&gt;Example code image:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/michaelrommel/nvim-silicon/main/assets/2024-03-01T20-33-20_code.png&#34; alt=&#34;Example code image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The typefact used in this example is called &#34;Victor Mono&#34; from Rune Bj√∏rner√•s. You can find it &lt;a href=&#34;https://rubjo.github.io/victor-mono/&#34;&gt;here&lt;/a&gt;. Please consider using this typeface and sponsor Rune as well. Not visible in the screenshot, my go-to terminal emulator is &lt;a href=&#34;https://wezfurlong.org/wezterm/index.html&#34;&gt;Wezterm&lt;/a&gt;. Please show him some love, too.&lt;/p&gt; &#xA;&lt;h3&gt;Ranges&lt;/h3&gt; &#xA;&lt;p&gt;If a range is visually selected it does not matter, whether it is block, line or normally selected. The range is then taken as complete lines: from the line in which the selection starts up to the line in which the selection ends. If no selection is made, the whole file is taken as input. If you only want to select a single line, then you would have to manually select it with &lt;code&gt;Shift-V&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;You can mark a single line as to be highlighted using the standard vim &lt;code&gt;mark&lt;/code&gt; command with the mark &lt;code&gt;h&lt;/code&gt;, the default key combination would be &lt;code&gt;mh&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Colours and background image&lt;/h3&gt; &#xA;&lt;p&gt;You can define either your own solid background colour or provide the path to a background image, setting both is not supported by &lt;code&gt;silicon&lt;/code&gt; itself. The default colour setting for the shadow colour has also now been removed to let you consistently decide, which colour you want on both accounts.&lt;/p&gt; &#xA;&lt;h3&gt;Gobbling and padding&lt;/h3&gt; &#xA;&lt;p&gt;With the &lt;code&gt;gobble&lt;/code&gt; parameter set to true, the longest common set of leading whitespace in each line is removed, making it easy to share screenshots of code fragments deep down in a nested structure. However, after removing all that whitespace, you now have the opion to insert arbitrary characters between the line number rendered by &lt;code&gt;silicon&lt;/code&gt; and the code fragment. Since you can use any string, you can - apart from padding blanks - also insert vertical bars etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;    num_separator = &#34;\u{258f} &#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Language options&lt;/h3&gt; &#xA;&lt;p&gt;The underlying &lt;code&gt;silicon&lt;/code&gt; command uses the rust &lt;code&gt;syntect&lt;/code&gt; create for syntax detection and highlighting along with some heuristics. This plugin used the &lt;code&gt;vim.bo.filetype&lt;/code&gt; as &lt;code&gt;--language&lt;/code&gt; argument but users reported that some filetypes are not recognized, e.g. fortran.&lt;/p&gt; &#xA;&lt;p&gt;Therefore - in order not to break existing configs - now the following methods are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if the users set the &lt;code&gt;language&lt;/code&gt; option in their config, this is used verbatim&lt;/li&gt; &#xA; &lt;li&gt;if none is set, first the argument &lt;code&gt;--language &amp;lt;filetype&amp;gt;&lt;/code&gt; is used as before, but if the &lt;code&gt;silicon&lt;/code&gt; execution errors out, then&lt;/li&gt; &#xA; &lt;li&gt;the file&#39;s extension is used as &lt;code&gt;--language &amp;lt;extension&amp;gt;&lt;/code&gt; argument in a second attempt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This change hopefully does not break s.b. config but improves the chances of getting an image.&lt;/p&gt; &#xA;&lt;h3&gt;silicon&#39;s own config files&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;silicon&lt;/code&gt; has the option of using an own config file, usually located at &lt;code&gt;${HOME}/.config/silicon/config&lt;/code&gt;, but you can find out the location on your system with &lt;code&gt;silicon --config-file&lt;/code&gt;. There common options can be defined, but the problem is, that command line arguments that &lt;code&gt;nvim=silicon&lt;/code&gt; supplies and the same arguments in the config file lead to errors.&lt;/p&gt; &#xA;&lt;p&gt;Now in order to have both worlds, there is now a &lt;code&gt;disable_defaults&lt;/code&gt; option. This will then only set the command argument. Nothing is added, so if a mandatory option like output destination selection or language is not given either in the config file or the options table, there likely is an error to be expected. So now you can split your arguments between the silicon config file and the neovim lua opts table, depending for instance on how you synchronize your configs across computersC. Note that still conflicting arguments in both locations, like &lt;code&gt;background&lt;/code&gt; and &lt;code&gt;background_image&lt;/code&gt; still have to be avoided.&lt;/p&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;~/.config/silicon/config&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;--output=&#34;./code.png&#34;&#xA;--language=&#34;javascript&#34;&#xA;--background=&#34;#00ff00&#34;&#xA;--pad-horiz=10&#xA;--pad-vert=5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-silicon.lua&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- create code images&#xA;local opts = {&#xA;&#x9;&#34;michaelrommel/nvim-silicon&#34;,&#xA;&#x9;dir = &#39;/Users/rommel/Software/michael/nvim-silicon&#39;,&#xA;&#x9;lazy = true,&#xA;&#x9;cmd = &#34;Silicon&#34;,&#xA;&#x9;opts = {&#xA;&#x9;}&#xA;}&#xA;return opts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will render any file with &lt;code&gt;javascript&lt;/code&gt; syntax highlighting in a file named &lt;code&gt;./code.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;With the &lt;code&gt;lazy.nvim&lt;/code&gt; package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;&#x9;&#34;michaelrommel/nvim-silicon&#34;,&#xA;&#x9;lazy = true,&#xA;&#x9;cmd = &#34;Silicon&#34;,&#xA;&#x9;config = function()&#xA;&#x9;&#x9;require(&#34;silicon&#34;).setup({&#xA;&#x9;&#x9;&#x9;-- Configuration here, or leave empty to use defaults&#xA;&#x9;&#x9;&#x9;font = &#34;VictorMono NF=34;Noto Emoji=34&#34;&#xA;&#x9;&#x9;})&#xA;&#x9;end&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;setup&lt;/code&gt; function accepts the following table (shown with the builtin defaults):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;&#x9;-- disable_defaults will disable all builtin default settings apart&#xA;&#x9;-- from the base arguments, that are needed to call silicon at all, see&#xA;&#x9;-- mandatory_options below, also those options can be overridden&#xA;&#x9;-- all of the settings could be overridden in the lua setup call,&#xA;&#x9;-- but this clashes with the use of an external silicon --config=file,&#xA;&#x9;-- see issue #9&#xA;&#x9;disable_defaults = false,&#xA;&#x9;-- turn on debug messages&#xA;&#x9;debug = false,&#xA;&#x9;-- most of them could be overridden with other &#xA;&#x9;-- the font settings with size and fallback font&#xA;&#x9;font = &#34;VictorMono NF=34;Noto Emoji&#34;,&#xA;&#x9;-- the theme to use, depends on themes available to silicon&#xA;&#x9;theme = &#34;gruvbox-dark&#34;,&#xA;&#x9;-- the background color outside the rendered os window&#xA;&#x9;-- (in hexcode string e.g &#34;#076678&#34;)&#xA;&#x9;background = nil,&#xA;&#x9;-- a path to a background image&#xA;&#x9;background_image = nil,&#xA;&#x9;-- the paddings to either side&#xA;&#x9;pad_horiz = 100,&#xA;&#x9;pad_vert = 80,&#xA;&#x9;-- whether to have the os window rendered with rounded corners&#xA;&#x9;no_round_corner = false,&#xA;&#x9;-- whether to put the close, minimize, maximise traffic light &#xA;&#x9;-- controls on the border&#xA;&#x9;no_window_controls = false,&#xA;&#x9;-- whether to turn off the line numbers&#xA;&#x9;no_line_number = false,&#xA;&#x9;-- with which number the line numbering shall start&#xA;&#x9;line_offset = 1,&#xA;&#x9;-- here a function is used to return the actual source code line number&#xA;&#x9;-- line_offset = function(args)&#xA;&#x9;-- &#x9;return args.line1&#xA;&#x9;-- end,&#xA;&#x9;-- the distance between lines of code&#xA;&#x9;line_pad = 0,&#xA;&#x9;-- the rendering of tab characters as so many space characters&#xA;&#x9;tab_width = 4,&#xA;&#x9;-- with which language the syntax highlighting shall be done, should be&#xA;&#x9;-- a function that returns either a language name or an extension like &#34;js&#34;&#xA;&#x9;language = function()&#xA;&#x9;&#x9;return vim.bo.filetype&#xA;&#x9;end,&#xA;&#x9;-- if the shadow below the os window should have be blurred&#xA;&#x9;shadow_blur_radius = 16,&#xA;&#x9;-- the offset of the shadow in x and y directions&#xA;&#x9;shadow_offset_x = 8,&#xA;&#x9;shadow_offset_y = 8,&#xA;&#x9;-- the color of the shadow (in hexcode string e.g &#34;#100808&#34;)&#xA;&#x9;shadow_color = nil,&#xA;&#x9;-- whether to strip of superfluous leading whitespace&#xA;&#x9;gobble = true,&#xA;&#x9;-- a string to pad each line with after gobbling removed larger indents,&#xA;&#x9;num_separator = nil,&#xA;&#x9;-- here a bar glyph is used to draw a vertial line and some space&#xA;&#x9;-- num_separator = &#34;\u{258f} &#34;,&#xA;&#x9;-- whether to put the image onto the clipboard, may produce an error,&#xA;&#x9;-- if run on WSL2&#xA;&#x9;to_clipboard = false,&#xA;&#x9;-- a string or function returning a string that defines the title&#xA;&#x9;-- showing in the image, only works in silicon versions greater than v0.5.1&#xA;&#x9;window_title = nil,&#xA;&#x9;-- here a function is used to get the name of the current buffer&#xA;&#x9;-- window_title = function()&#xA;&#x9;-- &#x9;return vim.fn.fnamemodify(&#xA;&#x9;-- &#x9;&#x9;vim.api.nvim_buf_get_name(vim.api.nvim_get_current_buf()),&#xA;&#x9;-- &#x9;&#x9;&#34;:t&#34;&#xA;&#x9;-- &#x9;&#x9;)&#xA;&#x9;-- end,&#xA;&#x9;-- the silicon command, put an absolute location here, if the&#xA;&#x9;-- command is not in your ${PATH}&#xA;&#x9;command = &#34;silicon&#34;,&#xA;&#x9;-- a string or function that defines the path to the output image&#xA;&#x9;output = function()&#xA;&#x9;&#x9;return &#34;./&#34; .. os.date(&#34;!%Y-%m-%dT%H-%M-%S&#34;) .. &#34;_code.png&#34;&#xA;&#x9;end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The mandatory options, that are used, even when the option &lt;code&gt;disable_defaults&lt;/code&gt; is set to true are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- without that silicon cannot run. But you can override the command&#xA;-- option in your lua config&#xA;M.mandatory_options = {&#xA;&#x9;command = &#39;silicon&#39;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>