<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-06T01:33:59Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bitterteasweetorange/nvim</title>
    <updated>2023-01-06T01:33:59Z</updated>
    <id>tag:github.com,2023-01-06:/bitterteasweetorange/nvim</id>
    <link href="https://github.com/bitterteasweetorange/nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim 0.8 configuration for coding React and TypeScript&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/bitterteasweetorange/nivm/raw/main/screenshot.png&#34; alt=&#34;screenshot&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>barrett-ruth/import-cost.nvim</title>
    <updated>2023-01-06T01:33:59Z</updated>
    <id>tag:github.com,2023-01-06:/barrett-ruth/import-cost.nvim</id>
    <link href="https://github.com/barrett-ruth/import-cost.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Display javascript import costs inside of neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;import-cost.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Display the costs of javascript imports inside neovim with the power of &lt;a href=&#34;https://github.com/wix/import-cost/tree/master/packages/import-cost&#34;&gt;import-cost&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/62671086/210295248-916a8d81-22c9-432a-87fd-cf539879bf0c.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install regularly with your neovim package manager&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;install.sh&lt;/code&gt; with your node.js package manager to setup import-cost:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sh install.sh &#39;&amp;lt;your-package-manager&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, a config with &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;yarn&lt;/a&gt; and &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; may look like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lazy&#39;).setup {&#xA;    {&#xA;        &#39;barrett-ruth/import-cost.nvim&#39;,&#xA;        build = &#39;sh install.sh yarn&#39;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Configure via the setup function (or use the defaults with no arguments):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;import-cost&#39;).setup(opts)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h import-cost&lt;/code&gt; for more information&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;CommonJS support&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wix/import-cost/&#34;&gt;wix/import-cost&lt;/a&gt;: provides the node backend that calculates the import costs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=wix.vscode-import-cost&#34;&gt;import-cost&lt;/a&gt;: the original VSCode plugin that started it all&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yardnsm/vim-import-cOst&#34;&gt;vim-import-cost&lt;/a&gt;: inspired me to do it in neovim!&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>petertriho/nvim-scrollbar</title>
    <updated>2023-01-06T01:33:59Z</updated>
    <id>tag:github.com,2023-01-06:/petertriho/nvim-scrollbar</id>
    <link href="https://github.com/petertriho/nvim-scrollbar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extensible Neovim Scrollbar&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;nvim-scrollbar&lt;/h1&gt; &#xA; &lt;h5&gt;Extensible Neovim Scrollbar&lt;/h5&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petertriho/nvim-scrollbar/main/assets/diagnostics.gif&#34; alt=&#34;diagnostics&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ALE&lt;/li&gt; &#xA; &lt;li&gt;Cursor&lt;/li&gt; &#xA; &lt;li&gt;Diagnostics (COC and Native)&lt;/li&gt; &#xA; &lt;li&gt;Git (requires &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Search (requires &lt;a href=&#34;https://github.com/kevinhwang91/nvim-hlslens&#34;&gt;nvim-hlslens&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.1&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinhwang91/nvim-hlslens&#34;&gt;nvim-hlslens&lt;/a&gt; (optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;petertriho/nvim-scrollbar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use(&#34;petertriho/nvim-scrollbar&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;scrollbar&#34;).setup()&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Search&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/petertriho/nvim-scrollbar/main/assets/search.gif&#34; alt=&#34;search&#34;&gt;&lt;/p&gt; &#xA; &lt;h4&gt;Setup (Packer)&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;kevinhwang91/nvim-hlslens&#34;,&#xA;  config = function()&#xA;    -- require(&#39;hlslens&#39;).setup() is not required&#xA;    require(&#34;scrollbar.handlers.search&#34;).setup({&#xA;        -- hlslens config overrides&#xA;    })&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;OR&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;kevinhwang91/nvim-hlslens&#34;,&#xA;  config = function()&#xA;    require(&#34;hlslens&#34;).setup({&#xA;       build_position_cb = function(plist, _, _, _)&#xA;            require(&#34;scrollbar.handlers.search&#34;).handler.show(plist.start_pos)&#xA;       end,&#xA;    })&#xA;&#xA;    vim.cmd([[&#xA;        augroup scrollbar_search_hide&#xA;            autocmd!&#xA;            autocmd CmdlineLeave : lua require(&#39;scrollbar.handlers.search&#39;).handler.hide()&#xA;        augroup END&#xA;    ]])&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If you want to leave only search marks and disable virtual text:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;scrollbar.handlers.search&#34;).setup({&#xA;    override_lens = function() end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Git Signs&lt;/summary&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/889383/201331485-477677a7-40a9-4731-998a-34779f7123ff.mp4&#34;&gt;https://user-images.githubusercontent.com/889383/201331485-477677a7-40a9-4731-998a-34779f7123ff.mp4&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;Display git changes in the sidebar. Requires &lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;gitsigns.nvim&lt;/a&gt; to be installed.&lt;/p&gt; &#xA; &lt;h4&gt;Setup (Packer)&lt;/h4&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#34;lewis6991/gitsigns.nvim&#34;,&#xA;  config = function()&#xA;    require(&#39;gitsigns&#39;).setup()&#xA;    require(&#34;scrollbar.handlers.gitsigns&#34;).setup()&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Config&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Defaults&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;scrollbar&#34;).setup({&#xA;    show = true,&#xA;    show_in_active_only = false,&#xA;    set_highlights = true,&#xA;    folds = 1000, -- handle folds, set to number to disable folds if no. of lines in buffer exceeds this&#xA;    max_lines = false, -- disables if no. of lines in buffer exceeds this&#xA;    hide_if_all_visible = false, -- Hides everything if all lines are visible&#xA;    throttle_ms = 100,&#xA;    handle = {&#xA;        text = &#34; &#34;,&#xA;        color = nil,&#xA;        color_nr = nil, -- cterm&#xA;        highlight = &#34;CursorColumn&#34;,&#xA;        hide_if_all_visible = true, -- Hides handle if all lines are visible&#xA;    },&#xA;    marks = {&#xA;        Cursor = {&#xA;            text = &#34;•&#34;,&#xA;            priority = 0,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;Normal&#34;,&#xA;        },&#xA;        Search = {&#xA;            text = { &#34;-&#34;, &#34;=&#34; },&#xA;            priority = 1,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;Search&#34;,&#xA;        },&#xA;        Error = {&#xA;            text = { &#34;-&#34;, &#34;=&#34; },&#xA;            priority = 2,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;DiagnosticVirtualTextError&#34;,&#xA;        },&#xA;        Warn = {&#xA;            text = { &#34;-&#34;, &#34;=&#34; },&#xA;            priority = 3,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;DiagnosticVirtualTextWarn&#34;,&#xA;        },&#xA;        Info = {&#xA;            text = { &#34;-&#34;, &#34;=&#34; },&#xA;            priority = 4,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;DiagnosticVirtualTextInfo&#34;,&#xA;        },&#xA;        Hint = {&#xA;            text = { &#34;-&#34;, &#34;=&#34; },&#xA;            priority = 5,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;DiagnosticVirtualTextHint&#34;,&#xA;        },&#xA;        Misc = {&#xA;            text = { &#34;-&#34;, &#34;=&#34; },&#xA;            priority = 6,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;Normal&#34;,&#xA;        },&#xA;        GitAdd = {&#xA;            text = &#34;┆&#34;,&#xA;            priority = 7,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;GitSignsAdd&#34;,&#xA;        },&#xA;        GitChange = {&#xA;            text = &#34;┆&#34;,&#xA;            priority = 7,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;GitSignsChange&#34;,&#xA;        },&#xA;        GitDelete = {&#xA;            text = &#34;▁&#34;,&#xA;            priority = 7,&#xA;            gui=nil,&#xA;            color = nil,&#xA;            cterm=nil,&#xA;            color_nr = nil, -- cterm&#xA;            highlight = &#34;GitSignsDelete&#34;,&#xA;        },&#xA;    },&#xA;    excluded_buftypes = {&#xA;        &#34;terminal&#34;,&#xA;    },&#xA;    excluded_filetypes = {&#xA;        &#34;prompt&#34;,&#xA;        &#34;TelescopePrompt&#34;,&#xA;        &#34;noice&#34;,&#xA;    },&#xA;    autocmd = {&#xA;        render = {&#xA;            &#34;BufWinEnter&#34;,&#xA;            &#34;TabEnter&#34;,&#xA;            &#34;TermEnter&#34;,&#xA;            &#34;WinEnter&#34;,&#xA;            &#34;CmdwinLeave&#34;,&#xA;            &#34;TextChanged&#34;,&#xA;            &#34;VimResized&#34;,&#xA;            &#34;WinScrolled&#34;,&#xA;        },&#xA;        clear = {&#xA;            &#34;BufWinLeave&#34;,&#xA;            &#34;TabLeave&#34;,&#xA;            &#34;TermLeave&#34;,&#xA;            &#34;WinLeave&#34;,&#xA;        },&#xA;    },&#xA;    handlers = {&#xA;        cursor = true,&#xA;        diagnostic = true,&#xA;        gitsigns = false, -- Requires gitsigns&#xA;        handle = true,&#xA;        search = false, -- Requires hlslens&#xA;        ale = false, -- Requires ALE&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Colors/Highlights&lt;/h2&gt; &#xA;&lt;p&gt;Color takes precedence over highlight i.e. if color is defined, that will be used to define the highlight instead of highlight.&lt;/p&gt; &#xA;&lt;p&gt;Mark type highlights are in the format of &lt;code&gt;Scrollbar&amp;lt;MarkType&amp;gt;&lt;/code&gt; and &lt;code&gt;Scrollbar&amp;lt;MarkType&amp;gt;Handle&lt;/code&gt;. If you wish to define these yourself, add &lt;code&gt;set_highlights = false&lt;/code&gt; to the setup.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarCursorHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarCursor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarSearchHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarSearch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarErrorHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarError&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarWarnHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarWarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarInfoHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarInfo&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarHintHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarHint&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarMiscHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarMisc&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarGitAdd&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarGitAddHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarGitChange&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarGitChangeHandle&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarGitDelete&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ScrollbarGitDeleteHandle&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example config with &lt;a href=&#34;https://github.com/folke/tokyonight.nvim&#34;&gt;tokyonight.nvim&lt;/a&gt; colors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local colors = require(&#34;tokyonight.colors&#34;).setup()&#xA;&#xA;require(&#34;scrollbar&#34;).setup({&#xA;    handle = {&#xA;        color = colors.bg_highlight,&#xA;    },&#xA;    marks = {&#xA;        Search = { color = colors.orange },&#xA;        Error = { color = colors.error },&#xA;        Warn = { color = colors.warning },&#xA;        Info = { color = colors.info },&#xA;        Hint = { color = colors.hint },&#xA;        Misc = { color = colors.purple },&#xA;    }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Handlers&lt;/h2&gt; &#xA;&lt;p&gt;One can define custom handlers consisting of a name and a lua function that returns a list of marks as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;scrollbar.handlers&#34;).register(name, handler_function)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;handler_function&lt;/code&gt; receives the buffer number as argument and must return a list of tables with &lt;code&gt;line&lt;/code&gt;, &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, and &lt;code&gt;level&lt;/code&gt; keys. Only the &lt;code&gt;line&lt;/code&gt; key is required.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;line&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The line number. &lt;em&gt;Required&lt;/em&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Marker text. Defaults to global settings depending on &lt;code&gt;type&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The marker type. Default is &lt;code&gt;Misc&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Marker level. Default is &lt;code&gt;1&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;E.g. the following marks the first three lines in every buffer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;scrollbar.handlers&#34;).register(&#34;my_marks&#34;, function(bufnr)&#xA;    return {&#xA;        { line = 0 },&#xA;        { line = 1, text = &#34;x&#34;, type = &#34;Warn&#34; },&#xA;        { line = 2, type = &#34;Error&#34; }&#xA;    }&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kevinhwang91/nvim-hlslens&#34;&gt;kevinhwang91/nvim-hlslens&lt;/a&gt; for implementation on how to hide search results&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://choosealicense.com/licenses/mit/&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>