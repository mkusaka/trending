<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T01:47:31Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>scipag/vulscan</title>
    <updated>2022-06-04T01:47:31Z</updated>
    <id>tag:github.com,2022-06-04:/scipag/vulscan</id>
    <link href="https://github.com/scipag/vulscan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advanced vulnerability scanning with Nmap NSE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vulscan - Vulnerability Scanning with Nmap&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/scipag/vulscan/master/logo.png&#34; width=&#34;300px&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Vulscan is a module which enhances nmap to a vulnerability scanner. The nmap option -sV enables version detection per service which is used to determine potential flaws according to the identified product. The data is looked up in an offline version of VulDB.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.computec.ch/projekte/vulscan/introduction/screenshot.png&#34; alt=&#34;Nmap NSE Vulscan&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Please install the files into the following folder of your Nmap installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Nmap\scripts\vulscan\*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone the GitHub repository like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/scipag/vulscan scipag_vulscan&#xA;ln -s `pwd`/scipag_vulscan /usr/share/nmap/scripts/vulscan    &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You have to run the following minimal command to initiate a simple vulnerability scan:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nmap -sV --script=vulscan/vulscan.nse www.example.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Vulnerability Database&lt;/h2&gt; &#xA;&lt;p&gt;There are the following pre-installed databases available at the moment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;scipvuldb.csv - &lt;a href=&#34;https://vuldb.com&#34;&gt;https://vuldb.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;cve.csv - &lt;a href=&#34;https://cve.mitre.org&#34;&gt;https://cve.mitre.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;securityfocus.csv - &lt;a href=&#34;https://www.securityfocus.com/bid/&#34;&gt;https://www.securityfocus.com/bid/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;xforce.csv - &lt;a href=&#34;https://exchange.xforce.ibmcloud.com/&#34;&gt;https://exchange.xforce.ibmcloud.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;expliotdb.csv - &lt;a href=&#34;https://www.exploit-db.com&#34;&gt;https://www.exploit-db.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;openvas.csv - &lt;a href=&#34;http://www.openvas.org&#34;&gt;http://www.openvas.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;securitytracker.csv - &lt;a href=&#34;https://www.securitytracker.com&#34;&gt;https://www.securitytracker.com&lt;/a&gt; (end-of-life)&lt;/li&gt; &#xA; &lt;li&gt;osvdb.csv - &lt;a href=&#34;http://www.osvdb.org&#34;&gt;http://www.osvdb.org&lt;/a&gt; (end-of-life)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Single Database Mode&lt;/h2&gt; &#xA;&lt;p&gt;You may execute vulscan with the following argument to use a single database:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscandb=your_own_database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to create and reference your own databases. This requires to create a database file, which has the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;id&amp;gt;;&amp;lt;title&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just execute vulscan like you would by refering to one of the pre-delivered databases. Feel free to share your own database and vulnerability connection with me, to add it to the official repository.&lt;/p&gt; &#xA;&lt;h2&gt;Update Database&lt;/h2&gt; &#xA;&lt;p&gt;The vulnerability databases are updated and assembled on a regularly basis. To support the latest disclosed vulnerabilities, keep your local vulnerability databases up-to-date.&lt;/p&gt; &#xA;&lt;p&gt;To automatically update the databases, simply set execution permissions to the &lt;code&gt;update.sh&lt;/code&gt; file and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chmod 744 update.sh&#xA;./update.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to manually update your databases, go to the following web site and download these files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/cve.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/cve.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/exploitdb.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/exploitdb.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/openvas.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/openvas.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/osvdb.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/osvdb.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/scipvuldb.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/scipvuldb.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/securityfocus.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/securityfocus.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/securitytracker.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/securitytracker.csv&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.computec.ch/projekte/vulscan/download/xforce.csv&#34;&gt;https://www.computec.ch/projekte/vulscan/download/xforce.csv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Copy the files into your vulscan folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/vulscan/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Version Detection&lt;/h2&gt; &#xA;&lt;p&gt;If the version detection was able to identify the software version and the vulnerability database is providing such details, also this data is matched.&lt;/p&gt; &#xA;&lt;p&gt;Disabling this feature might introduce false-positive but might also eliminate false-negatives and increase performance slighty. If you want to disable additional version matching, use the following argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscanversiondetection=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Version detection of vulscan is only as good as Nmap version detection and the vulnerability database entries are. Some databases do not provide conclusive version information, which may lead to a lot of false-positives (as can be seen for Apache servers).&lt;/p&gt; &#xA;&lt;h2&gt;Match Priority&lt;/h2&gt; &#xA;&lt;p&gt;The script is trying to identify the best matches only. If no positive match could been found, the best possible match (with might be a false-positive) is put on display.&lt;/p&gt; &#xA;&lt;p&gt;If you want to show all matches, which might introduce a lot of false-positives but might be useful for further investigation, use the following argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscanshowall=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive Mode&lt;/h2&gt; &#xA;&lt;p&gt;The interactive mode helps you to override version detection results for every port. Use the following argument to enable the interactive mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscaninteractive=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reporting&lt;/h2&gt; &#xA;&lt;p&gt;All matching results are printed one by line. The default layout for this is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[{id}] {title}\n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is possible to use another pre-defined report structure with the following argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscanoutput=details&#xA;--script-args vulscanoutput=listid&#xA;--script-args vulscanoutput=listlink&#xA;--script-args vulscanoutput=listtitle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may enforce your own report structure by using the following argument (some examples):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args vulscanoutput=&#39;{link}\n{title}\n\n&#39;&#xA;--script-args vulscanoutput=&#39;ID: {id} - Title: {title} ({matches})\n&#39;&#xA;--script-args vulscanoutput=&#39;{id} | {product} | {version}\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported are the following elements for a dynamic report template:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;{id} - ID of the vulnerability&lt;/li&gt; &#xA; &lt;li&gt;{title} - Title of the vulnerability&lt;/li&gt; &#xA; &lt;li&gt;{matches} - Count of matches&lt;/li&gt; &#xA; &lt;li&gt;{product} - Matched product string(s)&lt;/li&gt; &#xA; &lt;li&gt;{version} - Matched version string(s)&lt;/li&gt; &#xA; &lt;li&gt;{link} - Link to the vulnerability database entry&lt;/li&gt; &#xA; &lt;li&gt;\n - Newline&lt;/li&gt; &#xA; &lt;li&gt;\t - Tab&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every default database comes with an url and a link, which is used during the scanning and might be accessed as {link} within the customized report template. To use custom database links, use the following argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;--script-args &#34;vulscandblink=http://example.org/{id}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Keep in mind that this kind of derivative vulnerability scanning heavily relies on the confidence of the version detection of nmap, the amount of documented vulnerabilities and the accuracy of pattern matching. The existence of potential flaws is not verified with additional scanning nor exploiting techniques.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mfussenegger/nvim-dap</title>
    <updated>2022-06-04T01:47:31Z</updated>
    <id>tag:github.com,2022-06-04:/mfussenegger/nvim-dap</id>
    <link href="https://github.com/mfussenegger/nvim-dap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Debug Adapter Protocol client implementation for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DAP (Debug Adapter Protocol)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-dap&lt;/code&gt; is a Debug Adapter Protocol client implementation for &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt;. &lt;code&gt;nvim-dap&lt;/code&gt; allows you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Launch an application to debug&lt;/li&gt; &#xA; &lt;li&gt;Attach to running applications and debug them&lt;/li&gt; &#xA; &lt;li&gt;Set breakpoints and step through code&lt;/li&gt; &#xA; &lt;li&gt;Inspect the state of the application&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/38700/124292938-669a7100-db56-11eb-93b8-77b66994fc8a.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Requires Neovim (&amp;gt;= 0.6)&lt;/li&gt; &#xA; &lt;li&gt;nvim-dap is a plugin. Install it like any other Neovim plugin. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;: &lt;code&gt;Plug &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;: &lt;code&gt;use &#39;mfussenegger/nvim-dap&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Generate the documentation for nvim-dap using &lt;code&gt;:helptags ALL&lt;/code&gt; or &lt;code&gt;:helptags &amp;lt;PATH-TO-PLUGIN/doc/&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll need to install and configure a debug adapter per language. See&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&#34;&gt;:help dap.txt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&#34;&gt;Debug-Adapter Installation&lt;/a&gt; wiki&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help dap-adapter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:help dap-configuration&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;A typical debug flow consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Setting breakpoints via &lt;code&gt;:lua require&#39;dap&#39;.toggle_breakpoint()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Launching debug sessions and resuming execution via &lt;code&gt;:lua require&#39;dap&#39;.continue()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Stepping through code via &lt;code&gt;:lua require&#39;dap&#39;.step_over()&lt;/code&gt; and &lt;code&gt;:lua require&#39;dap&#39;.step_into()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Inspecting the state via the built-in REPL: &lt;code&gt;:lua require&#39;dap&#39;.repl.open()&lt;/code&gt; or using the widget UI (&lt;code&gt;:help dap-widgets&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mfussenegger/nvim-dap/master/doc/dap.txt&#34;&gt;:help dap.txt&lt;/a&gt;, &lt;code&gt;:help dap-mapping&lt;/code&gt; and &lt;code&gt;:help dap-api&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supported languages&lt;/h2&gt; &#xA;&lt;p&gt;In theory all of the languages for which a debug adapter exists should be supported.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microsoft.github.io/debug-adapter-protocol/implementors/adapters/&#34;&gt;Available debug adapters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Debug-Adapter-installation&#34;&gt;nvim-dap Debug-Adapter Installation &amp;amp; Configuration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Wiki is community maintained. If you got an adapter working that isn&#39;t listed yet, please extend the Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Some debug adapters have &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Extensions#language-specific-extensions&#34;&gt;language specific extensions&lt;/a&gt;. Using them over a manual configuration is recommended, as they&#39;re usually better maintained.&lt;/p&gt; &#xA;&lt;p&gt;If the instructions in the wiki for a debug adapter are not working, consider that debug adapters may have made changes since the instructions were written. You may want to read the release notes of the debug adapters or try with an older version. Please update the wiki if you discover outdated examples.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Have a basic debugger in Neovim.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extensibility and double as a DAP client library. This allows other plugins to extend the debugging experience. Either by improving the UI or by making it easier to debug parts of an application.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Examples of UI/UX extensions are &lt;a href=&#34;https://github.com/theHamsta/nvim-dap-virtual-text&#34;&gt;nvim-dap-virtual-text&lt;/a&gt; and &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;nvim-dap-ui&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Examples for language specific extensions include &lt;a href=&#34;https://github.com/mfussenegger/nvim-jdtls&#34;&gt;nvim-jdtls&lt;/a&gt; and &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap-python&#34;&gt;nvim-dap-python&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;All known extensions are listed in the &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap/wiki/Extensions&#34;&gt;Wiki&lt;/a&gt;. The wiki is community maintained. Please add new extensions if you built one or if you discovered one that&#39;s not listed.&lt;/p&gt; &#xA;&lt;h2&gt;Non-Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Debug adapter installations are out of scope. It&#39;s not the business of an editor plugin to re-invent a package manager. Use your system package manager. Use Nix. Use Ansible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/nvim-lua/wishlist/issues/37#issuecomment-1023363686&#34;&gt;nvim-dapconfig&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Vim support. It&#39;s not going to happen. Use &lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/puremourning/vimspector&#34;&gt;vimspector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Give concrete feedback about usability.&lt;/li&gt; &#xA; &lt;li&gt;Triage issues. Many of the problems people encounter are debug adapter specific.&lt;/li&gt; &#xA; &lt;li&gt;Improve upstream debug adapter documentation to make them more editor agnostic.&lt;/li&gt; &#xA; &lt;li&gt;Improve the Wiki. But please refrain from turning it into comprehensive debug adapter documentation that should go upstream.&lt;/li&gt; &#xA; &lt;li&gt;Write extensions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Before making direct code contributions, please create a discussion or issue to clarify whether the change is in scope of the nvim-dap core.&lt;/p&gt; &#xA;&lt;p&gt;Please keep pull requests focused and don&#39;t change multiple things at the same time.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; launch debug adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; attach to debug adapter&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; toggle breakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; breakpoints with conditions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; logpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; set exception breakpoints&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; step over, step into, step out&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; step back, reverse continue&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Goto&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; restart&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; stop&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; pause&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; evaluate expressions&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; REPL (incl. commands to show threads, frames and scopes)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>romgrk/barbar.nvim</title>
    <updated>2022-06-04T01:47:31Z</updated>
    <id>tag:github.com,2022-06-04:/romgrk/barbar.nvim</id>
    <link href="https://github.com/romgrk/barbar.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The neovim tabline plugin.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; barbar.nvim &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;b&gt;Tabs, as understood by any other editor.&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;barbar.nvim&lt;/code&gt; is a tabline plugin with re-orderable, auto-sizing, clickable tabs, icons, nice highlighting, sort-by commands and a magic jump-to-buffer mode. Plus the tab names are made unique when two filenames match.&lt;/p&gt; &#xA;&lt;p&gt;In jump-to-buffer mode, tabs display a target letter instead of their icon. Jump to any buffer by simply typing their target letter. Even better, the target letter stays constant for the lifetime of the buffer, so if you&#39;re working with a set of files you can even type the letter ahead from memory.&lt;/p&gt; &#xA;&lt;h5&gt;Table of content&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#highlighting&#34;&gt;Highlighting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#integration-with-filetree-plugins&#34;&gt;Integration with filetree plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#known-issues&#34;&gt;Known Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#about&#34;&gt;About Barbar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;kyazdani42/nvim-web-devicons&#39;&#xA;Plug &#39;romgrk/barbar.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;  &#39;romgrk/barbar.nvim&#39;,&#xA;  requires = {&#39;kyazdani42/nvim-web-devicons&#39;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can skip the dependency on &lt;code&gt;&#39;kyazdani42/nvim-web-devicons&#39;&lt;/code&gt; if you &lt;a href=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/#options&#34;&gt;disable icons&lt;/a&gt;. If you want the icons, don&#39;t forget to install &lt;a href=&#34;https://www.nerdfonts.com/&#34;&gt;nerd fonts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Requirements&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &lt;code&gt;0.7&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h5&gt;Re-order tabs&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/reorder.gif&#34; alt=&#34;reorder&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Auto-sizing tabs, fill the space when available&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/resize.gif&#34; alt=&#34;resize&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Jump-to-buffer mode&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/jump.gif&#34; alt=&#34;jump&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Type a letter to jump to a buffer. Letters stay constant for the lifetime of the buffer. By default, letters are assigned based on buffer name, eg &lt;code&gt;README.md&lt;/code&gt; will get letter &lt;code&gt;r&lt;/code&gt;. You can change this so that letters are assigned based on usability: home row (&lt;code&gt;asdfjkl;gh&lt;/code&gt;) first, then other rows.&lt;/p&gt; &#xA;&lt;h5&gt;Sort tabs automatically&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/sort.gif&#34; alt=&#34;jump&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;:BufferOrderByDirectory&lt;/code&gt;, &lt;code&gt;:BufferOrderByLanguage&lt;/code&gt;, &lt;code&gt;:BufferOrderByWindowNumber&lt;/code&gt;, &lt;code&gt;:BufferOrderByBufferNumber&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Clickable &amp;amp; closable tabs&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/click.gif&#34; alt=&#34;click&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Left-click to go, middle-click or close button to close. Don&#39;t forget to &lt;code&gt;set mouse+=a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Unique names when filenames match&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/unique-name.png&#34; alt=&#34;unique-name&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Pinned buffers&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/pinned.png&#34; alt=&#34;pinned&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;bbye.vim for closing buffers&lt;/h5&gt; &#xA;&lt;p&gt;A modified version of &lt;a href=&#34;https://github.com/moll/vim-bbye&#34;&gt;bbye.vim&lt;/a&gt; is included in this plugin to close buffers without messing with your window layout and more. Available as &lt;code&gt;BufferClose&lt;/code&gt; and &lt;code&gt;bufferline#bbye#delete(buf)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;Scrollable tabs, to always show the current buffer&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/scroll.gif&#34; alt=&#34;scroll&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Mappings &amp;amp; commands&lt;/h3&gt; &#xA;&lt;h4&gt;Vim script&lt;/h4&gt; &#xA;&lt;p&gt;No default mappings are provided, here is an example. It is recommended to use the &lt;code&gt;BufferClose&lt;/code&gt; command to close buffers instead of &lt;code&gt;bdelete&lt;/code&gt; because it will not mess your window layout.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Move to previous/next&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-,&amp;gt; :BufferPrevious&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-.&amp;gt; :BufferNext&amp;lt;CR&amp;gt;&#xA;&#34; Re-order to previous/next&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-&amp;lt;&amp;gt; :BufferMovePrevious&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-&amp;gt;&amp;gt; :BufferMoveNext&amp;lt;CR&amp;gt;&#xA;&#34; Goto buffer in position...&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-1&amp;gt; :BufferGoto 1&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-2&amp;gt; :BufferGoto 2&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-3&amp;gt; :BufferGoto 3&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-4&amp;gt; :BufferGoto 4&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-5&amp;gt; :BufferGoto 5&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-6&amp;gt; :BufferGoto 6&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-7&amp;gt; :BufferGoto 7&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-8&amp;gt; :BufferGoto 8&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-9&amp;gt; :BufferGoto 9&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-0&amp;gt; :BufferLast&amp;lt;CR&amp;gt;&#xA;&#34; Pin/unpin buffer&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-p&amp;gt; :BufferPin&amp;lt;CR&amp;gt;&#xA;&#34; Close buffer&#xA;nnoremap &amp;lt;silent&amp;gt;    &amp;lt;A-c&amp;gt; :BufferClose&amp;lt;CR&amp;gt;&#xA;&#34; Wipeout buffer&#xA;&#34;                          :BufferWipeout&amp;lt;CR&amp;gt;&#xA;&#34; Close commands&#xA;&#34;                          :BufferCloseAllButCurrent&amp;lt;CR&amp;gt;&#xA;&#34;                          :BufferCloseAllButPinned&amp;lt;CR&amp;gt;&#xA;&#34;                          :BufferCloseAllButCurrentOrPinned&amp;lt;CR&amp;gt;&#xA;&#34;                          :BufferCloseBuffersLeft&amp;lt;CR&amp;gt;&#xA;&#34;                          :BufferCloseBuffersRight&amp;lt;CR&amp;gt;&#xA;&#34; Magic buffer-picking mode&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;C-p&amp;gt;    :BufferPick&amp;lt;CR&amp;gt;&#xA;&#34; Sort automatically by...&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;bb :BufferOrderByBufferNumber&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;bd :BufferOrderByDirectory&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;bl :BufferOrderByLanguage&amp;lt;CR&amp;gt;&#xA;nnoremap &amp;lt;silent&amp;gt; &amp;lt;Space&amp;gt;bw :BufferOrderByWindowNumber&amp;lt;CR&amp;gt;&#xA;&#xA;&#34; Other:&#xA;&#34; :BarbarEnable - enables barbar (enabled by default)&#xA;&#34; :BarbarDisable - very bad command, should never be used&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Lua&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local map = vim.api.nvim_set_keymap&#xA;local opts = { noremap = true, silent = true }&#xA;&#xA;-- Move to previous/next&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-,&amp;gt;&#39;, &#39;:BufferPrevious&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-.&amp;gt;&#39;, &#39;:BufferNext&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Re-order to previous/next&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-&amp;lt;&amp;gt;&#39;, &#39;:BufferMovePrevious&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-&amp;gt;&amp;gt;&#39;, &#39; :BufferMoveNext&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Goto buffer in position...&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-1&amp;gt;&#39;, &#39;:BufferGoto 1&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-2&amp;gt;&#39;, &#39;:BufferGoto 2&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-3&amp;gt;&#39;, &#39;:BufferGoto 3&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-4&amp;gt;&#39;, &#39;:BufferGoto 4&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-5&amp;gt;&#39;, &#39;:BufferGoto 5&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-6&amp;gt;&#39;, &#39;:BufferGoto 6&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-7&amp;gt;&#39;, &#39;:BufferGoto 7&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-8&amp;gt;&#39;, &#39;:BufferGoto 8&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-9&amp;gt;&#39;, &#39;:BufferGoto 9&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-0&amp;gt;&#39;, &#39;:BufferLast&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Pin/unpin buffer&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-p&amp;gt;&#39;, &#39;:BufferPin&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Close buffer&#xA;map(&#39;n&#39;, &#39;&amp;lt;A-c&amp;gt;&#39;, &#39;:BufferClose&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Wipeout buffer&#xA;--                 :BufferWipeout&amp;lt;CR&amp;gt;&#xA;-- Close commands&#xA;--                 :BufferCloseAllButCurrent&amp;lt;CR&amp;gt;&#xA;--                 :BufferCloseAllButPinned&amp;lt;CR&amp;gt;&#xA;--                 :BufferCloseAllButCurrentOrPinned&amp;lt;CR&amp;gt;&#xA;--                 :BufferCloseBuffersLeft&amp;lt;CR&amp;gt;&#xA;--                 :BufferCloseBuffersRight&amp;lt;CR&amp;gt;&#xA;-- Magic buffer-picking mode&#xA;map(&#39;n&#39;, &#39;&amp;lt;C-p&amp;gt;&#39;, &#39;:BufferPick&amp;lt;CR&amp;gt;&#39;, opts)&#xA;-- Sort automatically by...&#xA;map(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;bb&#39;, &#39;:BufferOrderByBufferNumber&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;bd&#39;, &#39;:BufferOrderByDirectory&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;bl&#39;, &#39;:BufferOrderByLanguage&amp;lt;CR&amp;gt;&#39;, opts)&#xA;map(&#39;n&#39;, &#39;&amp;lt;Space&amp;gt;bw&#39;, &#39;:BufferOrderByWindowNumber&amp;lt;CR&amp;gt;&#39;, opts)&#xA;&#xA;-- Other:&#xA;-- :BarbarEnable - enables barbar (enabled by default)&#xA;-- :BarbarDisable - very bad command, should never be used&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;h4&gt;Vim Script&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; NOTE: If barbar&#39;s option dict isn&#39;t created yet, create it&#xA;let bufferline = get(g:, &#39;bufferline&#39;, {})&#xA;&#xA;&#34; New tabs are opened next to the currently selected tab.&#xA;&#34; Enable to insert them in buffer number order.&#xA;let bufferline.add_in_buffer_number_order = v:false&#xA;&#xA;&#34; Enable/disable animations&#xA;let bufferline.animation = v:true&#xA;&#xA;&#34; Enable/disable auto-hiding the tab bar when there is a single buffer&#xA;let bufferline.auto_hide = v:false&#xA;&#xA;&#34; Enable/disable current/total tabpages indicator (top right corner)&#xA;let bufferline.tabpages = v:true&#xA;&#xA;&#34; Enable/disable close button&#xA;let bufferline.closable = v:true&#xA;&#xA;&#34; Enables/disable clickable tabs&#xA;&#34;  - left-click: go to buffer&#xA;&#34;  - middle-click: delete buffer&#xA;let bufferline.clickable = v:true&#xA;&#xA;&#34; Excludes buffers from the tabline&#xA;let bufferline.exclude_ft = [&#39;javascript&#39;]&#xA;let bufferline.exclude_name = [&#39;package.json&#39;]&#xA;&#xA;&#34; Enable/disable icons&#xA;&#34; if set to &#39;buffer_number&#39;, will show buffer number in the tabline&#xA;&#34; if set to &#39;numbers&#39;, will show buffer index in the tabline&#xA;&#34; if set to &#39;both&#39;, will show buffer index and icons in the tabline&#xA;&#34; if set to &#39;buffer_number_with_icon&#39;, will show buffer number and icons in the tabline&#xA;let bufferline.icons = v:true&#xA;&#xA;&#34; Sets the icon&#39;s highlight group.&#xA;&#34; If false, will use nvim-web-devicons colors&#xA;let bufferline.icon_custom_colors = v:false&#xA;&#xA;&#34; Configure icons on the bufferline.&#xA;let bufferline.icon_separator_active = &#39;▎&#39;&#xA;let bufferline.icon_separator_inactive = &#39;▎&#39;&#xA;let bufferline.icon_close_tab = &#39;&#39;&#xA;let bufferline.icon_close_tab_modified = &#39;●&#39;&#xA;let bufferline.icon_pinned = &#39;車&#39;&#xA;&#xA;&#34; If true, new buffers will be inserted at the start/end of the list.&#xA;&#34; Default is to insert after current buffer.&#xA;let bufferline.insert_at_start = v:false&#xA;let bufferline.insert_at_end = v:false&#xA;&#xA;&#34; Sets the maximum padding width with which to surround each tab.&#xA;let bufferline.maximum_padding = 4&#xA;&#xA;&#34; Sets the maximum buffer name length.&#xA;let bufferline.maximum_length = 30&#xA;&#xA;&#34; If set, the letters for each buffer in buffer-pick mode will be&#xA;&#34; assigned based on their name. Otherwise or in case all letters are&#xA;&#34; already assigned, the behavior is to assign letters in order of&#xA;&#34; usability (see order below)&#xA;let bufferline.semantic_letters = v:true&#xA;&#xA;&#34; New buffer letters are assigned in this order. This order is&#xA;&#34; optimal for the qwerty keyboard layout but might need adjustement&#xA;&#34; for other layouts.&#xA;let bufferline.letters =&#xA;  \ &#39;asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP&#39;&#xA;&#xA;&#34; Sets the name of unnamed buffers. By default format is &#34;[Buffer X]&#34;&#xA;&#34; where X is the buffer number. But only a static string is accepted here.&#xA;let bufferline.no_name_title = v:null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Lua&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Set barbar&#39;s options&#xA;vim.g.bufferline = {&#xA;  -- Enable/disable animations&#xA;  animation = true,&#xA;&#xA;  -- Enable/disable auto-hiding the tab bar when there is a single buffer&#xA;  auto_hide = false,&#xA;&#xA;  -- Enable/disable current/total tabpages indicator (top right corner)&#xA;  tabpages = true,&#xA;&#xA;  -- Enable/disable close button&#xA;  closable = true,&#xA;&#xA;  -- Enables/disable clickable tabs&#xA;  --  - left-click: go to buffer&#xA;  --  - middle-click: delete buffer&#xA;  clickable = true,&#xA;&#xA;  -- Excludes buffers from the tabline&#xA;  exclude_ft = {&#39;javascript&#39;},&#xA;  exclude_name = {&#39;package.json&#39;},&#xA;&#xA;  -- Enable/disable icons&#xA;  -- if set to &#39;numbers&#39;, will show buffer index in the tabline&#xA;  -- if set to &#39;both&#39;, will show buffer index and icons in the tabline&#xA;  icons = true,&#xA;&#xA;  -- If set, the icon color will follow its corresponding buffer&#xA;  -- highlight group. By default, the Buffer*Icon group is linked to the&#xA;  -- Buffer* group (see Highlighting below). Otherwise, it will take its&#xA;  -- default value as defined by devicons.&#xA;  icon_custom_colors = false,&#xA;&#xA;  -- Configure icons on the bufferline.&#xA;  icon_separator_active = &#39;▎&#39;,&#xA;  icon_separator_inactive = &#39;▎&#39;,&#xA;  icon_close_tab = &#39;&#39;,&#xA;  icon_close_tab_modified = &#39;●&#39;,&#xA;  icon_pinned = &#39;車&#39;,&#xA;&#xA;  -- If true, new buffers will be inserted at the start/end of the list.&#xA;  -- Default is to insert after current buffer.&#xA;  insert_at_end = false,&#xA;  insert_at_start = false,&#xA;&#xA;  -- Sets the maximum padding width with which to surround each tab&#xA;  maximum_padding = 1,&#xA;&#xA;  -- Sets the maximum buffer name length.&#xA;  maximum_length = 30,&#xA;&#xA;  -- If set, the letters for each buffer in buffer-pick mode will be&#xA;  -- assigned based on their name. Otherwise or in case all letters are&#xA;  -- already assigned, the behavior is to assign letters in order of&#xA;  -- usability (see order below)&#xA;  semantic_letters = true,&#xA;&#xA;  -- New buffer letters are assigned in this order. This order is&#xA;  -- optimal for the qwerty keyboard layout but might need adjustement&#xA;  -- for other layouts.&#xA;  letters = &#39;asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP&#39;,&#xA;&#xA;  -- Sets the name of unnamed buffers. By default format is &#34;[Buffer X]&#34;&#xA;  -- where X is the buffer number. But only a static string is accepted here.&#xA;  no_name_title = nil,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Highlighting&lt;/h3&gt; &#xA;&lt;p&gt;For the highlight groups, here are the default ones. Your colorscheme can override them by defining them. See the &#34;Meaning of terms&#34; comment inside the example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let fg_target = &#39;red&#39;&#xA;&#xA;let fg_current  = s:fg([&#39;Normal&#39;], &#39;#efefef&#39;)&#xA;let fg_visible  = s:fg([&#39;TabLineSel&#39;], &#39;#efefef&#39;)&#xA;let fg_inactive = s:fg([&#39;TabLineFill&#39;], &#39;#888888&#39;)&#xA;&#xA;let fg_modified  = s:fg([&#39;WarningMsg&#39;], &#39;#E5AB0E&#39;)&#xA;let fg_special  = s:fg([&#39;Special&#39;], &#39;#599eff&#39;)&#xA;let fg_subtle  = s:fg([&#39;NonText&#39;, &#39;Comment&#39;], &#39;#555555&#39;)&#xA;&#xA;let bg_current  = s:bg([&#39;Normal&#39;], &#39;#000000&#39;)&#xA;let bg_visible  = s:bg([&#39;TabLineSel&#39;, &#39;Normal&#39;], &#39;#000000&#39;)&#xA;let bg_inactive = s:bg([&#39;TabLineFill&#39;, &#39;StatusLine&#39;], &#39;#000000&#39;)&#xA;&#xA;&#34; Meaning of terms:&#xA;&#34;&#xA;&#34; format: &#34;Buffer&#34; + status + part&#xA;&#34;&#xA;&#34; status:&#xA;&#34;     *Current: current buffer&#xA;&#34;     *Visible: visible but not current buffer&#xA;&#34;    *Inactive: invisible but not current buffer&#xA;&#34;&#xA;&#34; part:&#xA;&#34;        *Icon: filetype icon&#xA;&#34;       *Index: buffer index&#xA;&#34;         *Mod: when modified&#xA;&#34;        *Sign: the separator between buffers&#xA;&#34;      *Target: letter in buffer-picking mode&#xA;&#34;&#xA;&#34; BufferTabpages: tabpage indicator&#xA;&#34; BufferTabpageFill: filler after the buffer section&#xA;&#34; BufferOffset: offset section, created with set_offset()&#xA;&#xA;call s:hi_all([&#xA;\ [&#39;BufferCurrent&#39;,        fg_current,  bg_current],&#xA;\ [&#39;BufferCurrentIndex&#39;,   fg_special,  bg_current],&#xA;\ [&#39;BufferCurrentMod&#39;,     fg_modified, bg_current],&#xA;\ [&#39;BufferCurrentSign&#39;,    fg_special,  bg_current],&#xA;\ [&#39;BufferCurrentTarget&#39;,  fg_target,   bg_current,   &#39;bold&#39;],&#xA;\ [&#39;BufferVisible&#39;,        fg_visible,  bg_visible],&#xA;\ [&#39;BufferVisibleIndex&#39;,   fg_visible,  bg_visible],&#xA;\ [&#39;BufferVisibleMod&#39;,     fg_modified, bg_visible],&#xA;\ [&#39;BufferVisibleSign&#39;,    fg_visible,  bg_visible],&#xA;\ [&#39;BufferVisibleTarget&#39;,  fg_target,   bg_visible,   &#39;bold&#39;],&#xA;\ [&#39;BufferInactive&#39;,       fg_inactive, bg_inactive],&#xA;\ [&#39;BufferInactiveIndex&#39;,  fg_subtle,   bg_inactive],&#xA;\ [&#39;BufferInactiveMod&#39;,    fg_modified, bg_inactive],&#xA;\ [&#39;BufferInactiveSign&#39;,   fg_subtle,   bg_inactive],&#xA;\ [&#39;BufferInactiveTarget&#39;, fg_target,   bg_inactive,  &#39;bold&#39;],&#xA;\ [&#39;BufferTabpages&#39;,       fg_special,  bg_inactive, &#39;bold&#39;],&#xA;\ [&#39;BufferTabpageFill&#39;,    fg_inactive, bg_inactive],&#xA;\ ])&#xA;&#xA;call s:hi_link([&#xA;\ [&#39;BufferCurrentIcon&#39;,  &#39;BufferCurrent&#39;],&#xA;\ [&#39;BufferVisibleIcon&#39;,  &#39;BufferVisible&#39;],&#xA;\ [&#39;BufferInactiveIcon&#39;, &#39;BufferInactive&#39;],&#xA;\ [&#39;BufferOffset&#39;,       &#39;BufferTabpageFill&#39;],&#xA;\ ])&#xA;&#xA;&#34; NOTE: this is an example taken from the source, implementation of&#xA;&#34; s:fg(), s:bg(), s:hi_all() and s:hi_link() is left as an exercise&#xA;&#34; for the reader.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim/raw/master/lua/bufferline/highlight.lua&#34;&gt;See code for the example above&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also use the &lt;a href=&#34;https://github.com/romgrk/doom-one.vim&#34;&gt;doom-one.vim&lt;/a&gt; colorscheme that defines those groups and is also very pleasant as you could see in the demos above.&lt;/p&gt; &#xA;&lt;h3&gt;Integration with filetree plugins&lt;/h3&gt; &#xA;&lt;p&gt;To ensure tabs begin with the shown buffer you can set an offset for the tabline.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/romgrk/barbar.nvim/master/static/filetree-with-offset.png&#34; alt=&#34;filetree-with-offset&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add this autocmds to your configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#39;BufWinEnter&#39;, {&#xA;  pattern = &#39;*&#39;,&#xA;  callback = function()&#xA;    if vim.bo.filetype == &#39;NvimTree&#39; then&#xA;      require&#39;bufferline.state&#39;.set_offset(31, &#39;FileTree&#39;)&#xA;    end&#xA;  end&#xA;})&#xA;&#xA;vim.api.nvim_create_autocmd(&#39;BufWinLeave&#39;, {&#xA;  pattern = &#39;*&#39;,&#xA;  callback = function()&#xA;    if vim.fn.expand(&#39;&amp;lt;afile&amp;gt;&#39;):match(&#39;NvimTree&#39;) then&#xA;      require&#39;bufferline.state&#39;.set_offset(0)&#xA;    end&#xA;  end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And add a mapping to use the above functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;noremap &amp;lt;silent&amp;gt; &amp;lt;C-n&amp;gt; :lua require&#39;tree&#39;.toggle()&amp;lt;CR&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the case of &lt;code&gt;nvim-tree&lt;/code&gt;, there is an even simpler solution because it exposes an events API. You can add the following functions and then use &lt;code&gt;nvim-tree&lt;/code&gt; mappings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local nvim_tree_events = require(&#39;nvim-tree.events&#39;)&#xA;local bufferline_state = require(&#39;bufferline.state&#39;)&#xA;&#xA;nvim_tree_events.on_tree_open(function ()&#xA;  bufferline_state.set_offset(31, &#34;File Tree&#34;)&#xA;end)&#xA;&#xA;nvim_tree_events.on_tree_close(function ()&#xA;  bufferline_state.set_offset(0)&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;h4&gt;Netrw&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;BufferNext/BufferPrevious&lt;/code&gt; don&#39;t work in netrw buffer due to an issue in netrw. See &lt;a href=&#34;https://github.com/romgrk/barbar.nvim/issues/82#issuecomment-748498951&#34;&gt;this comment&lt;/a&gt; for a workaround.&lt;/p&gt; &#xA;&lt;h4&gt;Lightline&lt;/h4&gt; &#xA;&lt;p&gt;Barbar doesn&#39;t show up because lightline changes the tabline setting. Add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:lightline={ &#39;enable&#39;: {&#39;statusline&#39;: 1, &#39;tabline&#39;: 0} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Barbar is called barbar because it&#39;s a bar, but it&#39;s also more than a bar: a &#34;barbar&#34;.&lt;/p&gt; &#xA;&lt;p&gt;It is pronounced like &#34;Jar Jar&#34; in &#34;Jar Jar Binks&#34;, but with Bs.&lt;/p&gt; &#xA;&lt;p&gt;No, barbar has nothing to do with barbarians.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;barbar.nvim: Distributed under the terms of the JSON license.&amp;nbsp;&amp;nbsp; bbye.vim: Distributed under the terms of the GNU Affero license.&lt;/p&gt;</summary>
  </entry>
</feed>