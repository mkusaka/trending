<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-07T01:46:04Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>a327ex/SNKRX</title>
    <updated>2022-07-07T01:46:04Z</updated>
    <id>tag:github.com,2022-07-07:/a327ex/SNKRX</id>
    <link href="https://github.com/a327ex/SNKRX" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A replayable arcade shooter where you control a snake of heroes.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SNKRX&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/915310/SNKRX/&#34;&gt;SNKRX&lt;/a&gt; is an arcade shooter roguelite where you control a snake of heroes that automatically attack nearby enemies. Combine different heroes to unlock class bonuses and create unique builds, and steer your unstoppable party as they ravage through endless waves of enemies.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/409773/119258159-ea982b00-bb9e-11eb-8082-37e2c65591ea.mp4&#34;&gt;https://user-images.githubusercontent.com/409773/119258159-ea982b00-bb9e-11eb-8082-37e2c65591ea.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/915310/SNKRX/&#34;&gt;&lt;strong&gt;Check it out on Steam!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running&lt;/h3&gt; &#xA;&lt;p&gt;Download this repository, &lt;code&gt;cd&lt;/code&gt; into it and then run &lt;code&gt;engine/love/love.exe --console .&lt;/code&gt;. You need to have Steam up to run it successfully.&lt;/p&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;All assets have their specific licenses and they are linked to in the game&#39;s credits. All code is under the MIT license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>nagadomi/waifu2x</title>
    <updated>2022-07-07T01:46:04Z</updated>
    <id>tag:github.com,2022-07-07:/nagadomi/waifu2x</id>
    <link href="https://github.com/nagadomi/waifu2x" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Image Super-Resolution for Anime-Style Art&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;waifu2x&lt;/h1&gt; &#xA;&lt;p&gt;Image Super-Resolution for Anime-style art using Deep Convolutional Neural Networks. And it supports photo.&lt;/p&gt; &#xA;&lt;p&gt;The demo application can be found at &lt;a href=&#34;http://waifu2x.udp.jp/&#34;&gt;http://waifu2x.udp.jp/&lt;/a&gt; .&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that I only provide this website and this repository. Other software or website claiming &#34;waifu2x&#34; has nothing to do with me.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;Click to see the slide show.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/nagadomi/waifu2x/master/images/slide.png&#34; alt=&#34;slide&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;waifu2x is inspired by SRCNN [1]. 2D character picture (HatsuneMiku) is licensed under CC BY-NC by piapro [2].&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1] Chao Dong, Chen Change Loy, Kaiming He, Xiaoou Tang, &#34;Image Super-Resolution Using Deep Convolutional Networks&#34;, &lt;a href=&#34;http://arxiv.org/abs/1501.00092&#34;&gt;http://arxiv.org/abs/1501.00092&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2] &#34;For Creators&#34;, &lt;a href=&#34;http://piapro.net/en_for_creators.html&#34;&gt;http://piapro.net/en_for_creators.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Public AMI&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Software&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nagadomi/waifu2x/wiki/Third-Party&#34;&gt;Third-Party&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are a windows user, I recommend you to use &lt;a href=&#34;https://github.com/lltcggie/waifu2x-caffe&#34;&gt;waifu2x-caffe&lt;/a&gt;(Just download from &lt;code&gt;releases&lt;/code&gt; tab), &lt;a href=&#34;https://github.com/nihui/waifu2x-ncnn-vulkan&#34;&gt;waifu2x-ncnn-vulkan&lt;/a&gt; or &lt;a href=&#34;https://github.com/DeadSix27/waifu2x-converter-cpp&#34;&gt;waifu2x-conver-cpp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;h3&gt;Hardware&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NVIDIA GPU&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Platform&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://torch.ch/&#34;&gt;Torch7&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit&#34;&gt;NVIDIA CUDA&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LuaRocks packages (excludes torch7&#39;s default packages)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;lua-csnappy&lt;/li&gt; &#xA; &lt;li&gt;md5&lt;/li&gt; &#xA; &lt;li&gt;uuid&lt;/li&gt; &#xA; &lt;li&gt;csvigo&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kernelsauce/turbo&#34;&gt;turbo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Setting Up the Command Line Tool Environment&lt;/h3&gt; &#xA;&lt;p&gt;(on Ubuntu 16.04)&lt;/p&gt; &#xA;&lt;h4&gt;Install CUDA&lt;/h4&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-linux/#ubuntu-installation&#34;&gt;NVIDIA CUDA Getting Started Guide for Linux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;http://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dpkg -i cuda-repo-ubuntu1404_7.5-18_amd64.deb&#xA;sudo apt-get update&#xA;sudo apt-get install cuda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Install Package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install libsnappy-dev&#xA;sudo apt-get install libgraphicsmagick1-dev&#xA;sudo apt-get install libssl1.0-dev # for web server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: waifu2x requires little-cms2 linked graphicsmagick. if you use macOS/homebrew, See &lt;a href=&#34;https://github.com/nagadomi/waifu2x/issues/174#issuecomment-384466451&#34;&gt;#174&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Install Torch7&lt;/h4&gt; &#xA;&lt;p&gt;See: &lt;a href=&#34;http://torch.ch/docs/getting-started.html&#34;&gt;Getting started with Torch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For CUDA9.x/CUDA8.x, see &lt;a href=&#34;https://github.com/nagadomi/waifu2x/issues/222&#34;&gt;#222&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;For CUDA10.x, see &lt;a href=&#34;https://github.com/nagadomi/waifu2x/issues/253#issuecomment-445448928&#34;&gt;#253&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Getting waifu2x&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth 1 https://github.com/nagadomi/waifu2x.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and install lua modules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd waifu2x&#xA;./install_lua_modules.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Validation&lt;/h4&gt; &#xA;&lt;p&gt;Testing the waifu2x command line tool.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web Application&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;th web.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View at: &lt;a href=&#34;http://localhost:8812/&#34;&gt;http://localhost:8812/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Command line tools&lt;/h2&gt; &#xA;&lt;p&gt;Notes: If you have cuDNN library, than you can use cuDNN with &lt;code&gt;-force_cudnn 1&lt;/code&gt; option. cuDNN is too much faster than default kernel. If you got GPU out of memory error, you can avoid it with &lt;code&gt;-crop_size&lt;/code&gt; option (e.g. &lt;code&gt;-crop_size 128&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Noise Reduction&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m noise -noise_level 1 -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m noise -noise_level 0 -i input_image.png -o output_image.png&#xA;th waifu2x.lua -m noise -noise_level 2 -i input_image.png -o output_image.png&#xA;th waifu2x.lua -m noise -noise_level 3 -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2x Upscaling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m scale -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Noise Reduction + 2x Upscaling&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m noise_scale -noise_level 1 -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -m noise_scale -noise_level 0 -i input_image.png -o output_image.png&#xA;th waifu2x.lua -m noise_scale -noise_level 2 -i input_image.png -o output_image.png&#xA;th waifu2x.lua -m noise_scale -noise_level 3 -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Batch conversion&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;find /path/to/imagedir -name &#34;*.png&#34; -o -name &#34;*.jpg&#34; &amp;gt; image_list.txt&#xA;th waifu2x.lua -m scale -l ./image_list.txt -o /path/to/outputdir/prefix_%d.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output format supports &lt;code&gt;%s&lt;/code&gt; and &lt;code&gt;%d&lt;/code&gt;(e.g. %06d). &lt;code&gt;%s&lt;/code&gt; will be replaced the basename of the source filename. &lt;code&gt;%d&lt;/code&gt; will be replaced a sequence number. For example, when input filename is &lt;code&gt;piyo.png&lt;/code&gt;, &lt;code&gt;%s_%03d.png&lt;/code&gt; will be replaced &lt;code&gt;piyo_001.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also &lt;code&gt;th waifu2x.lua -h&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using photo model&lt;/h3&gt; &#xA;&lt;p&gt;Please add &lt;code&gt;-model_dir models/photo&lt;/code&gt; to command line option, if you want to use photo model. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;th waifu2x.lua -model_dir models/photo -m scale -i input_image.png -o output_image.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Video Encoding&lt;/h3&gt; &#xA;&lt;p&gt;* &lt;code&gt;avconv&lt;/code&gt; is alias of &lt;code&gt;ffmpeg&lt;/code&gt; on Ubuntu 14.04.&lt;/p&gt; &#xA;&lt;p&gt;Extracting images and audio from a video. (range: 00:09:00 ~ 00:12:00)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir frames&#xA;avconv -i data/raw.avi -ss 00:09:00 -t 00:03:00 -r 24 -f image2 frames/%06d.png&#xA;avconv -i data/raw.avi -ss 00:09:00 -t 00:03:00 audio.mp3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generating a image list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find ./frames -name &#34;*.png&#34; |sort &amp;gt; data/frame.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;waifu2x (for example, noise reduction)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir new_frames&#xA;th waifu2x.lua -m noise -noise_level 1 -resume 1 -l data/frame.txt -o new_frames/%d.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generating a video from waifu2xed images and audio.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;avconv -f image2 -framerate 24 -i new_frames/%d.png -i audio.mp3 -r 24 -vcodec libx264 -crf 16 video.mp4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Train Your Own Model&lt;/h2&gt; &#xA;&lt;p&gt;Note1: If you have cuDNN library, you can use cudnn kernel with &lt;code&gt;-backend cudnn&lt;/code&gt; option. And, you can convert trained cudnn model to cunn model with &lt;code&gt;tools/rebuild.lua&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note2: The command that was used to train for waifu2x&#39;s pretrained models is available at &lt;code&gt;appendix/train_upconv_7_art.sh&lt;/code&gt;, &lt;code&gt;appendix/train_upconv_7_photo.sh&lt;/code&gt;. Maybe it is helpful.&lt;/p&gt; &#xA;&lt;h3&gt;Data Preparation&lt;/h3&gt; &#xA;&lt;p&gt;Genrating a file list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;find /path/to/image/dir -name &#34;*.png&#34; &amp;gt; data/image_list.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should use noise free images. In my case, waifu2x is trained with 6000 high-resolution-noise-free-PNG images.&lt;/p&gt; &#xA;&lt;p&gt;Converting training data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;th convert_data.lua&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Train a Noise Reduction(level1) model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir models/my_model&#xA;th train.lua -model_dir models/my_model -method noise -noise_level 1 -test images/miku_noisy.png&#xA;# usage&#xA;th waifu2x.lua -model_dir models/my_model -m noise -noise_level 1 -i images/miku_noisy.png -o output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the performance of model with &lt;code&gt;models/my_model/noise1_best.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Train a Noise Reduction(level2) model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th train.lua -model_dir models/my_model -method noise -noise_level 2 -test images/miku_noisy.png&#xA;# usage&#xA;th waifu2x.lua -model_dir models/my_model -m noise -noise_level 2 -i images/miku_noisy.png -o output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the performance of model with &lt;code&gt;models/my_model/noise2_best.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Train a 2x UpScaling model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th train.lua -model upconv_7 -model_dir models/my_model -method scale -scale 2 -test images/miku_small.png&#xA;# usage&#xA;th waifu2x.lua -model_dir models/my_model -m scale -scale 2 -i images/miku_small.png -o output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the performance of model with &lt;code&gt;models/my_model/scale2.0x_best.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Train a 2x and noise reduction fusion model&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;th train.lua -model upconv_7 -model_dir models/my_model -method noise_scale -scale 2 -noise_level 1 -test images/miku_small.png&#xA;# usage&#xA;th waifu2x.lua -model_dir models/my_model -m noise_scale -scale 2 -noise_level 1 -i images/miku_small.png -o output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can check the performance of model with &lt;code&gt;models/my_model/noise1_scale2.0x_best.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Docker&lt;/h2&gt; &#xA;&lt;p&gt;( Docker image is available at &lt;a href=&#34;https://hub.docker.com/r/nagadomi/waifu2x&#34;&gt;https://hub.docker.com/r/nagadomi/waifu2x&lt;/a&gt; )&lt;/p&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://github.com/NVIDIA/nvidia-docker&#34;&gt;nvidia-docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker build -t waifu2x .&#xA;docker run --gpus all -p 8812:8812 waifu2x th web.lua&#xA;docker run --gpus all -v `pwd`/images:/images waifu2x th waifu2x.lua -force_cudnn 1 -m scale -scale 2 -i /images/miku_small.png -o /images/output.png&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that running waifu2x in without &lt;a href=&#34;https://devblogs.nvidia.com/parallelforall/cuda-pro-tip-understand-fat-binaries-jit-caching/&#34;&gt;JIT caching&lt;/a&gt; is very slow, which is what would happen if you use docker. For a workaround, you can mount a host volume to the &lt;code&gt;CUDA_CACHE_PATH&lt;/code&gt;, for instance,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --gpus all -v $PWD/ComputeCache:/root/.nv/ComputeCache waifu2x th waifu2x.lua --help&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Olical/conjure</title>
    <updated>2022-07-07T01:46:04Z</updated>
    <id>tag:github.com,2022-07-07:/Olical/conjure</id>
    <link href="https://github.com/Olical/conjure" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Interactive evaluation for Neovim (Clojure, Fennel, Janet, Racket, Hy, MIT Scheme, Guile)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://www.etsy.com/uk/shop/MysticalScribbles?ref=profile_header&#34;&gt;&lt;img src=&#34;https://conjure.fun/images/lillian.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_conversational_software_development_for_neovim&#34;&gt;&lt;a href=&#34;https://oli.me.uk/conversational-software-development/&#34;&gt;Conversational software development&lt;/a&gt; for &lt;a href=&#34;https://neovim.io&#34;&gt;Neovim&lt;/a&gt;&lt;br&gt;&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://conjure.fun/discord&#34;&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/732957595249410108.svg?label=&amp;amp;logo=discord&amp;amp;logoColor=ffffff&amp;amp;color=7389D8&amp;amp;labelColor=6A7EC2&#34; alt=&#34;Discord&#34;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Conjure is an interactive environment for evaluating code within your running program.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The core features of Conjure are language agnostic (although it’s targeted at Lisps &lt;em&gt;for now&lt;/em&gt;), with each language client providing their own extra tools. Here’s the currently supported languages, contributions and 3rd party plugins that add clients are highly encouraged! You can find a &lt;a href=&#34;https://github.com/Olical/conjure/wiki/Client-features&#34;&gt;comparison table for all clients and supported features&lt;/a&gt; in the wiki.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://clojure.org/&#34;&gt;Clojure&lt;/a&gt; over &lt;a href=&#34;https://nrepl.org/&#34;&gt;nREPL&lt;/a&gt; (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Clojure&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://fennel-lang.org/&#34;&gt;Fennel&lt;/a&gt; inside Neovim via Lua and &lt;a href=&#34;https://github.com/Olical/aniseed&#34;&gt;Aniseed&lt;/a&gt; (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Fennel-(Aniseed)&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://fennel-lang.org&#34;&gt;Fennel&lt;/a&gt; outside of Neovim within any Lua process through an stdio REPL (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Fennel-(stdio)&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://janet-lang.org/&#34;&gt;Janet&lt;/a&gt; over &lt;a href=&#34;https://github.com/janet-lang/spork/#networked-repl&#34;&gt;spork/netrepl&lt;/a&gt; (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Janet-(netrepl)&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://racket-lang.org/&#34;&gt;Racket&lt;/a&gt; over stdio (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Racket-(stdio)&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.hylang.org&#34;&gt;Hy&lt;/a&gt; over stdio (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Hy-(stdio)&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/mit-scheme/&#34;&gt;Scheme&lt;/a&gt; (MIT by default) over stdio (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Scheme-(stdio)&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.gnu.org/software/guile/&#34;&gt;Guile&lt;/a&gt; over a socket file (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Guile-(socket)&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://lisp-lang.org/&#34;&gt;Common Lisp&lt;/a&gt; over &lt;a href=&#34;https://www.cliki.net/SWANK&#34;&gt;Swank&lt;/a&gt; (&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Common-Lisp-(Swank)&#34;&gt;quickstart&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can learn more about the mappings and configuration inside Neovim with &lt;code&gt;:help conjure&lt;/code&gt;. Each language client also has it’s own specific help text under &lt;code&gt;:help conjure-client-{LANGUAGE}-{TRANSPORT}&lt;/code&gt;, such as &lt;code&gt;:help conjure-client-clojure-nrepl&lt;/code&gt;, which contains specific mappings and configuration for that client.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can also get an interactive guide to the core principals and mappings by executing &lt;code&gt;:ConjureSchool&lt;/code&gt; or by using the &#34;try before you install&#34; script as described further down this page.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_user_experience&#34;&gt;User experience&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;What does wielding Conjure actually look like? What can you do with it?&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;YouTube: &lt;a href=&#34;https://youtu.be/ZSwbiZhvMdQ&#34;&gt;How I use Conjure and Neovim to interact with Clojure (and more!)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Asciinema (see below)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/325517&#34;&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/325517.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Open a file of a supported file type such as &lt;code&gt;clojure&lt;/code&gt; or &lt;code&gt;racket&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Some languages, such as Clojure, will automatically connect to your REPL or give you the commands and mappings to do so yourself.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Use various mappings to execute the code you’re interested in such as the current form, file, buffer or even form at a Neovim mark.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Every result is kept in a log buffer that you can access at any time.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Support for multiple asynchronous autocompletion frameworks, with &lt;a href=&#34;https://github.com/Shougo/deoplete.nvim/&#34;&gt;deoplete&lt;/a&gt; built in (&lt;code&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; also works!).&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Conjure allows you to send the right part of your code off for evaluation, see the results, wrap the results in more code and evaluate that. It keeps a log of your actions and results so you don’t have to remember them, that context is extremely helpful when you’re down the rabbit hole of a bug hunt.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Evaluating a form under your cursor is as simple as &lt;code&gt;&amp;lt;prefix&amp;gt;ee&lt;/code&gt;, where &lt;code&gt;&amp;lt;prefix&amp;gt;&lt;/code&gt; defaults to &lt;code&gt;&amp;lt;localleader&amp;gt;&lt;/code&gt;. Be sure to set your your &lt;code&gt;&amp;lt;localleader&amp;gt;&lt;/code&gt; key or configure Conjure to use a different mapping prefix, see &lt;code&gt;:h maplocalleader&lt;/code&gt; and &lt;code&gt;:h g:conjure#mapping#prefix&lt;/code&gt; for more information.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The goal is to give you a tool that lets you effortlessly run whatever you need to while keeping out of your way (but there with context and more information if you need it).&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Once installed you can run &lt;code&gt;:ConjureSchool&lt;/code&gt; to begin an interactive tutorial.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_try_without_installing&#34;&gt;Try without installing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You can trial run Conjure with the interactive &lt;code&gt;:ConjureSchool&lt;/code&gt; tutorial without actually installing it! The only prerequisites are &lt;code&gt;curl&lt;/code&gt; and an up to date &lt;code&gt;nvim&lt;/code&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;listingblock&#34;&gt; &#xA;   &lt;div class=&#34;content&#34;&gt; &#xA;    &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -fL conjure.fun/school | sh&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This will temporarily download the plugin, launch Neovim with &lt;code&gt;:ConjureSchool&lt;/code&gt; running and then clean up after itself. You get to try out what Conjure has to offer without having to edit your Neovim configuration.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_installation&#34;&gt;Installation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Requires Neovim 0.5 or newer.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Alternatively you can use &lt;a href=&#34;https://github.com/Olical/magic-kit&#34;&gt;Magic Kit&lt;/a&gt;, an opinionated starter kit that includes all sorts of essential tools.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_packer_nvim&#34;&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;use &#39;Olical/conjure&#39;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_vim_plug&#34;&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre class=&#34;highlight&#34;&gt;&lt;code class=&#34;language-viml&#34; data-lang=&#34;viml&#34;&gt;Plug &#39;Olical/conjure&#39;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_getting_started&#34;&gt;Getting started&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Clojure&#34;&gt;Clojure (JVM)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Clojure-(babashka)&#34;&gt;Clojure (babashka)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-ClojureScript-(shadow-cljs)&#34;&gt;ClojureScript (shadow-cljs)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Janet-(netrepl)&#34;&gt;Janet (netrepl)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Fennel-(Aniseed)&#34;&gt;Fennel (Aniseed)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Fennel-(stdio)&#34;&gt;Fennel (stdio)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Racket-(stdio)&#34;&gt;Racket (stdio)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Hy-(stdio)&#34;&gt;Hy (stdio)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Scheme-(stdio)&#34;&gt;Scheme (stdio)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Guile-(socket)&#34;&gt;Guile (socket)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Quick-start:-Common-Lisp-(Swank)&#34;&gt;Common Lisp (Swank)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Olical/conjure/wiki/Frequently-asked-questions&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;All further documentation is found within &lt;a href=&#34;https://raw.githubusercontent.com/Olical/conjure/master/doc/conjure.txt&#34;&gt;&lt;code&gt;:help conjure&lt;/code&gt;&lt;/a&gt;. You can also use &lt;code&gt;:ConjureSchool&lt;/code&gt; to get an interactive introduction to the workflow and mappings Conjure provides.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Please do get in touch via &lt;a href=&#34;https://conjure.fun/discord&#34;&gt;Discord&lt;/a&gt; or &lt;a href=&#34;https://twitter.com/OliverCaldwell&#34;&gt;Twitter&lt;/a&gt; if you have any questions or issues.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Broader documentation can be found in the &lt;a href=&#34;https://github.com/Olical/conjure/wiki&#34;&gt;Conjure wiki&lt;/a&gt;, there you’ll find blog posts and guides that will help you get common workflows up and running. Contributions are encouraged!&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_clients_of_tomorrow&#34;&gt;Clients of tomorrow&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;These are clients I intend to build eventually or encourage another community member to build and maintain on my behalf. Every language we add creates another bridge between communities, I would like Conjure to be common ground between all of our beloved esoteric REPL based languages.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://lfe.io/&#34;&gt;Lisp Flavoured Erlang&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Minimal &lt;a href=&#34;https://clojure.org/&#34;&gt;Clojure&lt;/a&gt; sans nREPL+CIDER over &lt;a href=&#34;https://oli.me.uk/clojure-socket-prepl-cookbook/&#34;&gt;prepl&lt;/a&gt; (or socket REPL)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Non-Lisp languages and beyond! (when Neovim has tree-sitter)&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_behind_the_curtain&#34;&gt;Behind the curtain&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Conjure is written entirely in Lua (no VimL or external processes!) which is compiled from &lt;a href=&#34;https://fennel-lang.org/&#34;&gt;Fennel&lt;/a&gt; by &lt;a href=&#34;https://github.com/Olical/aniseed&#34;&gt;Aniseed&lt;/a&gt; ahead of time. Check out &lt;a href=&#34;https://raw.githubusercontent.com/Olical/conjure/master/CONTRIBUTING.adoc&#34;&gt;&lt;code&gt;CONTRIBUTING.adoc&lt;/code&gt;&lt;/a&gt; for more on how to work on Conjure using itself.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Historically, Conjure was Clojure specific with an entirely different implementation, you can still find that version on the &lt;a href=&#34;https://github.com/Olical/conjure/tree/legacy-jvm&#34;&gt;legacy-jvm branch&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_unlicenced&#34;&gt;Unlicenced&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;Find the full &lt;a href=&#34;http://unlicense.org/&#34;&gt;unlicense&lt;/a&gt; in the &lt;code&gt;UNLICENSE&lt;/code&gt; file, but here’s a snippet.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;quoteblock&#34;&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;This is free and unencumbered software released into the public domain.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/blockquote&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>