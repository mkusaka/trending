<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-02T01:28:17Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shaunsingh/nord.nvim</title>
    <updated>2024-03-02T01:28:17Z</updated>
    <id>tag:github.com,2024-03-02:/shaunsingh/nord.nvim</id>
    <link href="https://github.com/shaunsingh/nord.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Neovim theme based off of the Nord Color Palette, written in lua with tree sitter support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;shaunsingh/nord.nvim&lt;/h1&gt; &#xA;&lt;h2&gt;Neovim theme based off of the &lt;a href=&#34;https://www.nordtheme.com/docs/colors-and-palettes&#34;&gt;Nord Color Palette.&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/71196912/128029391-ad55fd41-d5f9-43bd-a795-c11b562f9d6d.jpg&#34; alt=&#34;118406380-d78ad580-b649-11eb-945c-5988fa717f39&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Nord.nvim is meant to be a modern colorscheme written in lua for NeoVim that supports a lot of the new features added to NeoVim like built-in LSP and &lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;TreeSitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Supported plugins:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;TreeSitter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://neovim.io/doc/user/lsp.html&#34;&gt;LSP Diagnostics&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/lspsaga.nvim&#34;&gt;Lsp Saga&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/folke/lsp-trouble.nvim&#34;&gt;LSP Trouble&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/airblade/vim-gitgutter&#34;&gt;Git Gutter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rhysd/git-messenger.vim&#34;&gt;git-messenger&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lewis6991/gitsigns.nvim&#34;&gt;Git Signs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;Telescope.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kyazdani42/nvim-tree.lua&#34;&gt;Nvim-Tree.lua&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/preservim/nerdtree&#34;&gt;NERDTree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/liuchengxu/vim-which-key&#34;&gt;vim-which-key&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/indent-blankline.nvim&#34;&gt;Indent-Blankline.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/glepnir/dashboard-nvim&#34;&gt;Dashboard&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;BufferLine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/hoob3rt/lualine.nvim&#34;&gt;Lualine&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/TimUntersberger/neogit&#34;&gt;Neogit&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/justinmk/vim-sneak&#34;&gt;vim-sneak&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/lightspeed.nvim&#34;&gt;lightspeed.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/romgrk/barbar.nvim&#34;&gt;barbar.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/rcarriga/nvim-notify&#34;&gt;nvim-notify&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/ggandor/leap.nvim&#34;&gt;leap.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/stevearc/aerial.nvim&#34;&gt;aerial.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/lukas-reineke/headlines.nvim&#34;&gt;headlines.nvim&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/HiPhish/rainbow-delimiters.nvim&#34;&gt;rainbow-delimiters.nvim&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ability to change background on sidebar-like windows like Nvim-Tree, Packer, terminal etc.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.5.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üåô Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via your favourite package manager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; If you are using Vim-Plug&#xA;Plug &#39;shaunsingh/nord.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- If you are using Packer&#xA;use &#39;shaunsingh/nord.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üåì Usage&lt;/h2&gt; &#xA;&lt;p&gt;Enable the colorscheme:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34;Vim-Script:&#xA;colorscheme nord&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;--Lua:&#xA;vim.cmd[[colorscheme nord]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable the &lt;code&gt;nord&lt;/code&gt; theme for &lt;code&gt;Lualine&lt;/code&gt;, simply specify it in your lualine settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lualine&#39;).setup {&#xA;  options = {&#xA;    -- ... your lualine config&#xA;    theme = &#39;nord&#39;&#xA;    -- ... your lualine config&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nord_contrast&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make sidebars and popup menus like nvim-tree and telescope have a different background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nord_borders&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable the border between verticaly split windows visable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nord_disable_background&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Disable the setting of background color so that NeoVim can use your terminal background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nord_cursorline_transparent&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the cursorline transparent/visible&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nord_enable_sidebar_background&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Re-enables the background of the sidebar if you disabled the background of everything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nord_italic&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enables/disables italics&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nord_uniform_diff_background&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enables/disables colorful backgrounds when used in &lt;em&gt;diff&lt;/em&gt; mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nord_bold&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;enables/disables bold&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Example config in lua&#xA;vim.g.nord_contrast = true&#xA;vim.g.nord_borders = false&#xA;vim.g.nord_disable_background = false&#xA;vim.g.nord_italic = false&#xA;vim.g.nord_uniform_diff_background = true&#xA;vim.g.nord_bold = false&#xA;&#xA;-- Load the colorscheme&#xA;require(&#39;nord&#39;).set()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&#34; Example config in Vim-Script&#xA;let g:nord_contrast = v:true&#xA;let g:nord_borders = v:false&#xA;let g:nord_disable_background = v:false&#xA;let g:nord_italic = v:false&#xA;let g:nord_uniform_diff_background = v:true&#xA;let g:nord_bold = v:false&#xA;&#xA;&#34; Load the colorscheme&#xA;colorscheme nord&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;headlines support&lt;/h3&gt; &#xA;&lt;p&gt;To support &lt;a href=&#34;https://raw.githubusercontent.com/shaunsingh/nord.nvim/master/%22https://github.com/lukas-reineke/headlines.nvim%22&#34;&gt;headlines&lt;/a&gt;, you should add these code to your settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;headlines&#34;).setup({&#xA;    markdown = {&#xA;        headline_highlights = {&#xA;            &#34;Headline1&#34;,&#xA;            &#34;Headline2&#34;,&#xA;            &#34;Headline3&#34;,&#xA;            &#34;Headline4&#34;,&#xA;            &#34;Headline5&#34;,&#xA;            &#34;Headline6&#34;,&#xA;        },&#xA;        codeblock_highlight = &#34;CodeBlock&#34;,&#xA;        dash_highlight = &#34;Dash&#34;,&#xA;        quote_highlight = &#34;Quote&#34;,&#xA;    },&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should look like this&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/61075605/197376829-43c30172-2528-47a0-b23f-ab63f73c0851.png&#34; alt=&#34;26B3E551-FD57-458C-BE85-C8945BCE37DF&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;bufferline support&lt;/h3&gt; &#xA;&lt;p&gt;To support &lt;a href=&#34;https://github.com/akinsho/nvim-bufferline.lua&#34;&gt;BufferLine&lt;/a&gt;, you can add these code to your settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local highlights = require(&#34;nord&#34;).bufferline.highlights({&#xA;    italic = true,&#xA;    bold = true,&#xA;})&#xA;&#xA;require(&#34;bufferline&#34;).setup({&#xA;    options = {&#xA;        separator_style = &#34;thin&#34;,&#xA;    },&#xA;    highlights = highlights,&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should look like this&lt;/p&gt; &#xA;&lt;img width=&#34;891&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/61075605/189152634-6d309903-90e6-4ffe-a7bc-f65b19eb4c43.png&#34;&gt; or you want to use slant separator &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local highlights = require(&#34;nord&#34;).bufferline.highlights({&#xA;    italic = true,&#xA;    bold = true,&#xA;    fill = &#34;#181c24&#34;&#xA;})&#xA;&#xA;require(&#34;bufferline&#34;).setup({&#xA;    options = {&#xA;        separator_style = &#34;slant&#34;,&#xA;    },&#xA;    highlights = highlights,&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;866&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/61075605/189151983-0cbf1f13-e62b-4b01-b6ce-a1c00a5f8ef3.png&#34;&gt; &#xA;&lt;p&gt;The default setting of bufferline highlights is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    fill = colors.nord0_gui,&#xA;    indicator = colors.nord9_gui,&#xA;    bg = colors.nord0_gui,&#xA;    buffer_bg = colors.nord0_gui,&#xA;    buffer_bg_selected = colors.nord1_gui,&#xA;    buffer_bg_visible = &#34;#2A2F3A&#34;,&#xA;    bold = true,&#xA;    italic = true,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>b0o/SchemaStore.nvim</title>
    <updated>2024-03-02T01:28:17Z</updated>
    <id>tag:github.com,2024-03-02:/b0o/SchemaStore.nvim</id>
    <link href="https://github.com/b0o/SchemaStore.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üõç JSON schemas for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SchemaStore.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/b0o/schemastore.nvim/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/tag/b0o/schemastore.nvim?style=flat&amp;amp;color=yellow&amp;amp;label=version&amp;amp;sort=semver&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/b0o/schemastore.nvim?style=flat&amp;amp;color=green&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/b0o/schemastore.nvim/actions/workflows/test.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/b0o/schemastore.nvim/test.yaml?branch=main&amp;amp;label=tests&#34; alt=&#34;Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/b0o/schemastore.nvim/actions/workflows/generate.yaml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/b0o/schemastore.nvim/generate.yaml?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AstroNvim/AstroNvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/used_by-AstroNvim-blue&#34; alt=&#34;Used By AstroNvim&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/LazyVim/LazyVim/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/used_by-LazyVim-blue&#34; alt=&#34;Used By LazyVim&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lunarvim/lunarvim&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/used_by-LunarVim-blue&#34; alt=&#34;Used By LunarVim&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Neovim plugin that provides the &lt;a href=&#34;https://github.com/SchemaStore/schemastore&#34;&gt;SchemaStore&lt;/a&gt; catalog for use with &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;jsonls&lt;/a&gt; and &lt;a href=&#34;https://github.com/redhat-developer/yaml-language-server&#34;&gt;yamlls&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;Lazy.nvim&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;  &#34;b0o/schemastore.nvim&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use &#34;b0o/schemastore.nvim&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To use SchemaStore.nvim with &lt;a href=&#34;https://github.com/neovim/nvim-lspconfig/raw/master/doc/server_configurations.md#jsonls&#34;&gt;lspconfig&lt;/a&gt; + &lt;a href=&#34;https://github.com/hrsh7th/vscode-langservers-extracted&#34;&gt;jsonls&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig&#39;).jsonls.setup {&#xA;  settings = {&#xA;    json = {&#xA;      schemas = require(&#39;schemastore&#39;).json.schemas(),&#xA;      validate = { enable = true },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an explanation of why the &lt;code&gt;validate = { enable = true }&lt;/code&gt; option is recommended, see &lt;a href=&#34;https://github.com/b0o/SchemaStore.nvim/issues/8&#34;&gt;#8&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/redhat-developer/yaml-language-server&#34;&gt;yamlls&lt;/a&gt; is also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig&#39;).yamlls.setup {&#xA;  settings = {&#xA;    yaml = {&#xA;      schemaStore = {&#xA;        -- You must disable built-in schemaStore support if you want to use&#xA;        -- this plugin and its advanced options like `ignore`.&#xA;        enable = false,&#xA;        -- Avoid TypeError: Cannot read properties of undefined (reading &#39;length&#39;)&#xA;        url = &#34;&#34;,&#xA;      },&#xA;      schemas = require(&#39;schemastore&#39;).yaml.schemas(),&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a subset of the catalog, you can select schemas by name (see &lt;a href=&#34;https://github.com/SchemaStore/schemastore/raw/master/src/api/json/catalog.json&#34;&gt;the catalog&lt;/a&gt; for a full list):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig&#39;).jsonls.setup {&#xA;  settings = {&#xA;    json = {&#xA;      schemas = require(&#39;schemastore&#39;).json.schemas {&#xA;        select = {&#xA;          &#39;.eslintrc&#39;,&#xA;          &#39;package.json&#39;,&#xA;        },&#xA;      },&#xA;      validate = { enable = true },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To ignore certain schemas from the catalog:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig&#39;).jsonls.setup {&#xA;  settings = {&#xA;    json = {&#xA;      schemas = require(&#39;schemastore&#39;).json.schemas {&#xA;        ignore = {&#xA;          &#39;.eslintrc&#39;,&#xA;          &#39;package.json&#39;,&#xA;        },&#xA;      },&#xA;      validate = { enable = true },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;ignore&lt;/code&gt; options are mutually exclusive and attempting to use them together will throw an error.&lt;/p&gt; &#xA;&lt;p&gt;To replace certain schemas from the catalog with your own:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig&#39;).jsonls.setup {&#xA;  settings = {&#xA;    json = {&#xA;      schemas = require(&#39;schemastore&#39;).json.schemas {&#xA;        replace = {&#xA;          [&#39;package.json&#39;] = {&#xA;            description = &#39;package.json overriden&#39;,&#xA;            fileMatch = { &#39;package.json&#39; },&#xA;            name = &#39;package.json&#39;,&#xA;            url = &#39;https://example.com/package.json&#39;,&#xA;          },&#xA;        },&#xA;      },&#xA;      validate = { enable = true },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to include additional schemas, you can use &lt;code&gt;extra&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;lspconfig&#39;).jsonls.setup {&#xA;  settings = {&#xA;    json = {&#xA;      schemas = require(&#39;schemastore&#39;).json.schemas {&#xA;        extra = {&#xA;          {&#xA;            description = &#39;My custom JSON schema&#39;,&#xA;            fileMatch = &#39;foo.json&#39;,&#xA;            name = &#39;foo.json&#39;,&#xA;            url = &#39;https://example.com/schema/foo.json&#39;,&#xA;          },&#xA;          {&#xA;            description = &#39;My other custom JSON schema&#39;,&#xA;            fileMatch = { &#39;bar.json&#39;, &#39;.baar.json&#39; },&#xA;            name = &#39;bar.json&#39;,&#xA;            url = &#39;https://example.com/schema/bar.json&#39;,&#xA;          },&#xA;        },&#xA;      },&#xA;      validate = { enable = true },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use a local schema file, specify the path using the &lt;code&gt;file://&lt;/code&gt; scheme or plain file paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;schemastore&#34;).json.schemas({&#xA;  extra = {&#xA;    {&#xA;      description = &#34;Local JSON schema&#34;,&#xA;      fileMatch = &#34;local.json&#34;,&#xA;      name = &#34;local.json&#34;,&#xA;      url = &#34;file:///path/to/your/schema.json&#34;, -- or &#39;/path/to/your/schema.json&#39;&#xA;    },&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;26 May 2023                                                             v0.2.0&#xA;  Feat: Add `extra` option to add additional schemas (@williamboman)&#xA;  Docs: Mention disabling built-in for yaml (@davidosomething)&#xA;  Feat: Add support for yamlls (@ZenLian)&#xA;&#xA;21 Dec 2021                                                             v0.1.0&#xA;  Perf: Add lookup table from schema name to schema index&#xA;  Note that select &amp;amp; ignore are mutually exclusive&#xA;  Exit with non-zero code if generate script fails&#xA;  Update docs&#xA;  Update NOTICE&#xA;  Clean up formatting&#xA;  Update tests&#xA;  Fix example in README&#xA;  Feat: Add option to ignore schemas by name&#xA;&#xA;15 Oct 2021                                                             v0.0.1&#xA;  Initial Release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;¬© 2021-2023 Maddison Hellstrom and Contributors.&lt;/p&gt; &#xA;&lt;p&gt;Released under the Apache 2.0 License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>teal-language/tl</title>
    <updated>2024-03-02T01:28:17Z</updated>
    <id>tag:github.com,2024-03-02:/teal-language/tl</id>
    <link href="https://github.com/teal-language/tl" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The compiler for Teal, a typed dialect of Lua&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Teal&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/teal-language/tl/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/teal-language/tl/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/teal-language/community?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/teal-language/community&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the repository of &lt;strong&gt;tl&lt;/strong&gt;, the compiler for Teal, a typed dialect of Lua.&lt;/p&gt; &#xA;&lt;p&gt;The core compiler has no dependencies and is implemented as a single &lt;code&gt;tl.lua&lt;/code&gt; file which you can load into your projects. Running &lt;code&gt;tl.loader()&lt;/code&gt; will add Teal support to your package loader, meaning that &lt;code&gt;require()&lt;/code&gt; will be able to run &lt;code&gt;.tl&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;Here are videos of talks given at FOSDEM 2019, 2020 and 2021 which discuss the history of Lua and types, outline the motivations behind Teal and talk about the project&#39;s progress:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OPyBQRndLUk&#34;&gt;Minimalism versus types (2019)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HfnjUCRzRKU&#34;&gt;Minimalistic typed Lua is here (2020)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=OqXbnaDR8QY&#34;&gt;What&#39;s Next for Teal (2021)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check also the &lt;a href=&#34;https://raw.githubusercontent.com/teal-language/tl/master/docs/tutorial.md&#34;&gt;tutorial&lt;/a&gt; to get started with an overview of the language.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;h3&gt;Via LuaRocks&lt;/h3&gt; &#xA;&lt;p&gt;Install Lua and LuaRocks, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;luarocks install tl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should put a &lt;code&gt;tl&lt;/code&gt; command in your &lt;code&gt;$PATH&lt;/code&gt; (run &lt;code&gt;eval $(luarocks path)&lt;/code&gt; if the LuaRocks-installed binaries are not in your &lt;code&gt;$PATH&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Teal works with Lua 5.1-5.4, including LuaJIT.&lt;/p&gt; &#xA;&lt;h3&gt;Binaries&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, you can find pre-compiled binaries for Linux x86_64 and Windows x86_64 at the &lt;a href=&#34;https://github.com/teal-language/tl/releases&#34;&gt;releases&lt;/a&gt; page. The packages contain a stand-alone executable that can run Teal programs (without the need of a separate Lua installation) and also compile them to Lua.&lt;/p&gt; &#xA;&lt;h3&gt;Try it from your browser&lt;/h3&gt; &#xA;&lt;p&gt;You can give Teal a try directly from your browser with the &lt;a href=&#34;https://teal-playground.netlify.app/&#34;&gt;Teal Playground&lt;/a&gt;! It compiles Teal into Lua using &lt;a href=&#34;https://github.com/fengari-lua/fengari&#34;&gt;Fengari&lt;/a&gt;, a Lua VM implemented in JavaScript, so everything runs on the client.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Once &lt;code&gt;tl&lt;/code&gt; is in your path, there are a few subcommands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;tl run script.tl&lt;/code&gt; will run a Teal script.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tl check module.tl&lt;/code&gt; will type check a Teal module, report any errors and quit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tl gen module.tl&lt;/code&gt; will check for syntax errors and generate a &lt;code&gt;module.lua&lt;/code&gt; file in plain Lua with all type annotations stripped.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tl build&lt;/code&gt; will compile your project via the rules defined in &lt;code&gt;tlconfig.lua&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tl warnings&lt;/code&gt; will list all warnings the compiler can generate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;tl&lt;/code&gt; also supports some &lt;a href=&#34;https://raw.githubusercontent.com/teal-language/tl/master/docs/compiler_options.md&#34;&gt;compiler options&lt;/a&gt;. These can either be specified on the command line or inside a tlconfig.lua file at the root of your project.&lt;/p&gt; &#xA;&lt;h2&gt;Loading Teal code from Lua&lt;/h2&gt; &#xA;&lt;p&gt;You can either pre-compile your &lt;code&gt;.tl&lt;/code&gt; files into &lt;code&gt;.lua&lt;/code&gt;, or you can add the &lt;code&gt;tl.lua&lt;/code&gt; module into your project and activate the Teal package loader:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local tl = require(&#34;tl&#34;)&#xA;tl.loader()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the package loader is activated, your &lt;code&gt;require()&lt;/code&gt; calls can load and compile &lt;code&gt;.tl&lt;/code&gt; files on-the-fly.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can learn more about programming and using Teal in the &lt;a href=&#34;https://raw.githubusercontent.com/teal-language/tl/master/docs/&#34;&gt;docs/&lt;/a&gt; folder. The &lt;a href=&#34;https://raw.githubusercontent.com/teal-language/tl/master/docs/tutorial.md&#34;&gt;tutorial&lt;/a&gt; is a great place to start!&lt;/p&gt; &#xA;&lt;h2&gt;Type definitions&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;tl&lt;/code&gt; supports &lt;a href=&#34;https://raw.githubusercontent.com/teal-language/tl/master/docs/declaration_files.md&#34;&gt;declaration files&lt;/a&gt;, which can be used to annotate the types of third-party Lua libraries.&lt;/p&gt; &#xA;&lt;p&gt;We have a collaborative repository for declaration files at &lt;a href=&#34;https://github.com/teal-language/teal-types&#34;&gt;https://github.com/teal-language/teal-types&lt;/a&gt; ‚Äî check it out and make your contribution!&lt;/p&gt; &#xA;&lt;h2&gt;Text editor support&lt;/h2&gt; &#xA;&lt;p&gt;Teal language support is currently available for &lt;a href=&#34;https://github.com/teal-language/vim-teal&#34;&gt;Vim&lt;/a&gt;, &lt;a href=&#34;https://github.com/teal-language/vscode-teal&#34;&gt;Visual Studio Code&lt;/a&gt; and &lt;a href=&#34;https://github.com/rxi/lite-plugins/raw/master/plugins/language_teal.lua&#34;&gt;lite&lt;/a&gt; with &lt;a href=&#34;https://github.com/drmargarido/linters/raw/master/linter_teal.lua&#34;&gt;linter&lt;/a&gt; support.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Join the chat on &lt;a href=&#34;https://gitter.im/teal-language/community&#34;&gt;Gitter&lt;/a&gt;! &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can also join via Matrix at &lt;a href=&#34;https://matrix.to/#/#teal-language_community:gitter.im&#34;&gt;#teal-language_community:gitter.im&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Teal is a project started by &lt;a href=&#34;https://hisham.hm&#34;&gt;Hisham Muhammad&lt;/a&gt;, developed by a &lt;a href=&#34;https://github.com/teal-language/tl/graphs/contributors&#34;&gt;growing number of contributors&lt;/a&gt; and is written using Teal itself!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;License is MIT, the same as Lua.&lt;/p&gt;</summary>
  </entry>
</feed>