<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-21T01:41:13Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jay-babu/mason-null-ls.nvim</title>
    <updated>2023-02-21T01:41:13Z</updated>
    <id>tag:github.com,2023-02-21:/jay-babu/mason-null-ls.nvim</id>
    <link href="https://github.com/jay-babu/mason-null-ls.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#packer&#34;&gt;Packer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#default-configuration&#34;&gt;Default configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#automatic-setup-usage&#34;&gt;Automatic Setup Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#example-config&#34;&gt;Example Config&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#setup-handlers-usage&#34;&gt;Setup handlers usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#primary-source-of-truth-is-mason-null-ls&#34;&gt;Primary Source of Truth is &lt;code&gt;mason-null-ls&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#primary-source-of-truth-is-null-ls&#34;&gt;Primary Source of Truth is &lt;code&gt;null-ls&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#available-null-ls-sources&#34;&gt;Available Null-ls sources&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#auto-resolve-logic&#34;&gt;Auto-resolve logic&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;p&gt;&lt;code&gt;mason-null-ls&lt;/code&gt; bridges &lt;code&gt;mason.nvim&lt;/code&gt; with the &lt;code&gt;null-ls&lt;/code&gt; plugin - making it easier to use both plugins together.&lt;/p&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jay-babu/mason-null-ls.nvim/pulse&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/jay-babu/mason-null-ls.nvim?style=for-the-badge&amp;amp;logo=github&amp;amp;color=7dc4e4&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/jay-babu/mason-null-ls.nvim/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/jay-babu/mason-null-ls.nvim?style=for-the-badge&amp;amp;logo=gitbook&amp;amp;color=8bd5ca&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/jay-babu/mason-null-ls.nvim/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/jay-babu/mason-null-ls.nvim?style=for-the-badge&amp;amp;logo=apachespark&amp;amp;color=eed49f&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mason-null-ls.nvim&lt;/code&gt; closes some gaps that exist between &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;null-ls&lt;/code&gt;. Its main responsibilities are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;provide extra convenience APIs such as the &lt;code&gt;:NullLsInstall&lt;/code&gt; command&lt;/li&gt; &#xA; &lt;li&gt;allow you to (i) automatically install, and (ii) automatically set up a predefined list of sources&lt;/li&gt; &#xA; &lt;li&gt;translate between &lt;code&gt;null-ls&lt;/code&gt; source names and &lt;code&gt;mason.nvim&lt;/code&gt; package names (e.g. &lt;code&gt;haml_lint&lt;/code&gt; &amp;lt;-&amp;gt; &lt;code&gt;haml-lint&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use this extension if you use &lt;code&gt;mason.nvim&lt;/code&gt; and &lt;code&gt;null-ls&lt;/code&gt;. Please read the whole README.md before jumping to &lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#setup&#34;&gt;Setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: this plugin uses the &lt;code&gt;null-ls&lt;/code&gt; source names in the APIs it exposes - not &lt;code&gt;mason.nvim&lt;/code&gt; package names.&lt;/p&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;neovim &lt;code&gt;&amp;gt;= 0.7.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;&lt;code&gt;mason.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;&lt;code&gt;null-ls.nvim&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;Packer&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;williamboman/mason.nvim&#34;,&#xA;    &#34;jose-elias-alvarez/null-ls.nvim&#34;,&#xA;    &#34;jay-babu/mason-null-ls.nvim&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;vim-plug&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;williamboman/mason.nvim&#39;&#xA;Plug &#39;jose-elias-alvarez/null-ls.nvim&#39;&#xA;Plug &#39;jay-babu/mason-null-ls.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Commands&lt;/h1&gt; &#xA;&lt;p&gt;Available after calling &lt;code&gt;setup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:NullInstall [&amp;lt;source&amp;gt;...]&lt;/code&gt; - installs the provided sources&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:NullUninstall &amp;lt;source&amp;gt; ...&lt;/code&gt; - uninstalls the provided sources&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;You may optionally configure certain behavior of &lt;code&gt;mason-null-ls.nvim&lt;/code&gt; when calling the &lt;code&gt;.setup()&lt;/code&gt; function. Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/jay-babu/mason-null-ls.nvim/main/#default-configuration&#34;&gt;default configuration&lt;/a&gt; for a list of all available settings.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason-null-ls&#34;).setup({&#xA;    ensure_installed = { &#34;stylua&#34;, &#34;jq&#34; }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Default configuration&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local DEFAULT_SETTINGS = {&#xA;    -- A list of sources to install if they&#39;re not already installed.&#xA;    -- This setting has no relation with the `automatic_installation` setting.&#xA;    ensure_installed = {},&#xA;    -- Run `require(&#34;null-ls&#34;).setup`.&#xA;    -- Will automatically install masons tools based on selected sources in `null-ls`.&#xA;    -- Can also be an exclusion list.&#xA;    -- Example: `automatic_installation = { exclude = { &#34;rust_analyzer&#34;, &#34;solargraph&#34; } }`&#xA;    automatic_installation = false,&#xA;&#xA;&#x9;-- Whether sources that are installed in mason should be automatically set up in null-ls.&#xA;&#x9;-- Removes the need to set up null-ls manually.&#xA;&#x9;-- Can either be:&#xA;&#x9;-- &#x9;- false: Null-ls is not automatically registered.&#xA;&#x9;-- &#x9;- true: Null-ls is automatically registered.&#xA;&#x9;-- &#x9;- { types = { SOURCE_NAME = {TYPES} } }. Allows overriding default configuration.&#xA;&#x9;-- &#x9;Ex: { types = { eslint_d = {&#39;formatting&#39;} } }&#xA;&#x9;automatic_setup = false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Automatic Setup Usage&lt;/h1&gt; &#xA;&lt;p&gt;Automatic Setup is a need feature that removes the need to configure &lt;code&gt;null-ls&lt;/code&gt; for supported sources. Sources found installed in &lt;code&gt;mason&lt;/code&gt; will automatically be setup for null-ls.&lt;/p&gt; &#xA;&lt;h2&gt;Example Config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;require(&#34;mason-null-ls&#34;).setup({&#xA;    automatic_setup = true,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the Default Configuration section to understand how the default dap configs can be overriden.&lt;/p&gt; &#xA;&lt;h1&gt;Setup handlers usage&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;setup_handlers()&lt;/code&gt; function provides a dynamic way of setting up sources and any other needed logic, It can also do that during runtime.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; When setting &lt;code&gt;automatic_setup = true&lt;/code&gt;, the handler function needs to be called at a minimum like: &lt;code&gt;require &#39;mason-null-ls&#39;.setup_handlers()&lt;/code&gt;. When passing in a custom handler function for the the default or a source, then the automatic_setup function one won&#39;t be invoked. See below to keep original functionality inside the custom handler.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require &#39;null-ls&#39;&#xA;&#xA;require (&#39;mason-null-ls&#39;).setup({&#xA;    ensure_installed = {&#39;stylua&#39;, &#39;jq&#39;}&#xA;})&#xA;&#xA;require &#39;mason-null-ls&#39;.setup_handlers {&#xA;    function(source_name, methods)&#xA;      -- all sources with no handler get passed here&#xA;&#xA;      -- To keep the original functionality of `automatic_setup = true`,&#xA;      -- please add the below.&#xA;      require(&#34;mason-null-ls.automatic_setup&#34;)(source_name, methods)&#xA;    end,&#xA;    stylua = function(source_name, methods)&#xA;      null_ls.register(null_ls.builtins.formatting.stylua)&#xA;    end,&#xA;}&#xA;&#xA;-- will setup any installed and configured sources above&#xA;null_ls.setup()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;p&gt;There are primarily 2 paths to setup.&lt;/p&gt; &#xA;&lt;h2&gt;Primary Source of Truth is &lt;code&gt;mason-null-ls&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This involves making sure tools are installed through &lt;code&gt;mason-null-ls&lt;/code&gt; when available.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;require(&#34;mason-null-ls&#34;).setup({&#xA;    ensure_installed = {&#xA;        -- Opt to list sources here, when available in mason.&#xA;    },&#xA;    automatic_installation = false,&#xA;    automatic_setup = true, -- Recommended, but optional&#xA;})&#xA;require(&#34;null-ls&#34;).setup(&#xA;    sources = {&#xA;        -- Anything not supported by mason.&#xA;    }&#xA;)&#xA;&#xA;require &#39;mason-null-ls&#39;.setup_handlers() -- If `automatic_setup` is true.&#xA;&#xA;Note: This is my personal preference.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Primary Source of Truth is &lt;code&gt;null-ls&lt;/code&gt;.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;mason&#34;).setup()&#xA;require(&#34;null-ls&#34;).setup(&#xA;    sources = {&#xA;        -- all sources go here.&#xA;    }&#xA;)&#xA;require(&#34;mason-null-ls&#34;).setup({&#xA;    ensure_installed = nil,&#xA;    automatic_installation = true,&#xA;    automatic_setup = false,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Available Null-ls sources&lt;/h1&gt; &#xA;&lt;p&gt;Ever since this &lt;a href=&#34;https://github.com/jay-babu/mason-null-ls.nvim/commit/e2144bd62b703c1fa298b9e154296caeef389553&#34;&gt;commit&lt;/a&gt;, this plugin attempts to auto-resolve between mason and null-ls. If this is not possible, then there is a way to add &lt;a href=&#34;https://github.com/jay-babu/mason-null-ls.nvim/raw/main/lua/mason-null-ls/mappings/source.lua&#34;&gt;exceptions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Auto-resolve logic&lt;/h2&gt; &#xA;&lt;p&gt;null-ls source name &lt;code&gt;google_java_format&lt;/code&gt;, &lt;code&gt;mason-null-ls&lt;/code&gt; will attempt to look for an override and if not found, then will attempt to look for a mason named: &lt;code&gt;google-java-format&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rebelot/heirline.nvim</title>
    <updated>2023-02-21T01:41:13Z</updated>
    <id>tag:github.com,2023-02-21:/rebelot/heirline.nvim</id>
    <link href="https://github.com/rebelot/heirline.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Heirline.nvim is a no-nonsense Neovim Statusline plugin designed around recursive inheritance to be exceptionally fast and versatile.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;heirline.nvim&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/rebelot/heirline.nvim/master/heirline.png&#34; width=&#34;600&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;The ultimate Neovim Statusline for tinkerers&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;Heirline.nvim is a no-nonsense Neovim plugin made for redenring statusline/winbar/tabline/statuscolumn format strings. It is designed around recursive inheritance to be exceptionally &lt;strong&gt;fast&lt;/strong&gt; and &lt;strong&gt;versatile&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Heirline &lt;strong&gt;does not&lt;/strong&gt; provide any defaults, in fact, heirline can be thought of as an API to generate Vim status format strings.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Why another statusline plugin?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Heirline picks up from other popular customizable statusline plugins like &lt;a href=&#34;https://github.com/NTBBloodbath/galaxyline.nvim&#34;&gt;galaxyline&lt;/a&gt; and &lt;a href=&#34;https://github.com/feline-nvim/feline.nvim&#34;&gt;feline&lt;/a&gt; but removes all the hard-coded guides and offers you thousands times more freedom. But freedom has a price: responsibility. I don&#39;t get to tell you what your statusline should do. You&#39;re in charge! With Heirline, you have a framework to easily implement whatever you can imagine, from simple to complex rules!&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;1578&#34; alt=&#34;heirline_prev&#34; src=&#34;https://user-images.githubusercontent.com/36300441/187208978-3054fea6-0e3a-432c-a1fc-b4a29da36a7c.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Conditionals&lt;/strong&gt;: Build custom active/inactive and buftype/filetype/bufname statuslines or single components.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Highlight propagation&lt;/strong&gt;: Seamlessly surround components within separators and/or set the (dynamic) coloring of a bunch of components at once.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt;: Statusline components can be reutilized/rearranged and will behave according to their position in the genealogical tree.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Update triggers&lt;/strong&gt;: Re-evaluate components only when some condition is met or specific autocommand events are fired.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clickable&lt;/strong&gt;: Write pure lua callbacks to be executed when clicking a component.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic resizing&lt;/strong&gt;: Specify how components should resize depending on available space.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Full control&lt;/strong&gt;: You have hooks to fully control the statusline evaluation cycle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Heirline is &lt;em&gt;not&lt;/em&gt; for everyone, heirline is for people who like tailoring their own tools (and also like lua):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;No&lt;/strong&gt; default statusline is provided&lt;/li&gt; &#xA; &lt;li&gt;You &lt;strong&gt;must&lt;/strong&gt; write your own statusline&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But don&#39;t you worry! Along with the inheritance comes &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/heirline.nvim/master/cookbook.md&#34;&gt;THE FEATUREFUL COOKBOOK&lt;/a&gt; 📖 of a distant relative. Your dream 🪄 statusline is a copypaste away!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Use your favorite plugin manager&lt;/p&gt; &#xA;&lt;h3&gt;Packer&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use({&#xA;    &#34;rebelot/heirline.nvim&#34;,&#xA;    -- You can optionally lazy-load heirline on UiEnter&#xA;    -- to make sure all required plugins and colorschemes are loaded before setup&#xA;    -- event = &#34;UiEnter&#34;,&#xA;    config = function()&#xA;        require(&#34;heirline&#34;).setup({...})&#xA;    end&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;heirline&#34;).setup({&#xA;    statusline = {...},&#xA;    winbar = {...},&#xA;    tabline = {...},&#xA;    statuscolumn = {...},&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Calling &lt;code&gt;setup&lt;/code&gt; will load your statusline(s). To learn how to write a StatusLine, see the &lt;a href=&#34;https://raw.githubusercontent.com/rebelot/heirline.nvim/master/cookbook.md&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Donate&lt;/h3&gt; &#xA;&lt;p&gt;Buy me coffee and support my work ;)&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate/?business=VNQPHGW4JEM3S&amp;amp;no_recurring=0&amp;amp;item_name=Buy+me+coffee+and+support+my+work+%3B%29&amp;amp;currency_code=EUR&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>