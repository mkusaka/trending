<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-09T01:30:45Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>echasnovski/mini.files</title>
    <updated>2023-09-09T01:30:45Z</updated>
    <id>tag:github.com,2023-09-09:/echasnovski/mini.files</id>
    <link href="https://github.com/echasnovski/mini.files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Navigate and manipulate file system. Part of &#39;mini.nvim&#39; library.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://github.com/echasnovski/media/raw/main/mini.nvim/logo/logo_files.png&#34; style=&#34;width: 100%&#34;&gt; &#xA;&lt;!-- badges: start --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://badgen.net/github/license/echasnovski/mini.nvim&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- badges: end --&gt; &#xA;&lt;h3&gt;Navigate and manipulate file system&lt;/h3&gt; &#xA;&lt;p&gt;For full experience needs &lt;a href=&#34;https://github.com/nvim-tree/nvim-web-devicons&#34;&gt;nvim-tree/nvim-web-devicons&lt;/a&gt; plugin (but works without it).&lt;/p&gt; &#xA;&lt;p&gt;See more details in &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.files/main/#features&#34;&gt;Features&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/echasnovski/mini.files/main/doc/mini-files.txt&#34;&gt;help file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;⦿ This is a part of &lt;a href=&#34;https://github.com/echasnovski/mini.nvim&#34;&gt;mini.nvim&lt;/a&gt; library. Please use &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/readmes/mini-files.md&#34;&gt;this link&lt;/a&gt; if you want to mention this module.&lt;/p&gt; &#xA;&lt;p&gt;⦿ All contributions (issues, pull requests, discussions, etc.) are done inside of &#39;mini.nvim&#39;.&lt;/p&gt; &#xA;&lt;p&gt;⦿ See the repository page to learn about common design principles and configuration recipes.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;If you want to help this project grow but don&#39;t know where to start, check out &lt;a href=&#34;https://github.com/echasnovski/mini.nvim/raw/main/CONTRIBUTING.md&#34;&gt;contributing guides of &#39;mini.nvim&#39;&lt;/a&gt; or leave a Github star for &#39;mini.nvim&#39; project and/or any its standalone Git repositories.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/echasnovski/mini.nvim/assets/24854248/530483a5-fe9a-4e18-9813-a6d609fc89ff&#34;&gt;https://github.com/echasnovski/mini.nvim/assets/24854248/530483a5-fe9a-4e18-9813-a6d609fc89ff&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate file system using column view (Miller columns) to display nested directories. See &lt;code&gt;*MiniFiles-navigation*&lt;/code&gt; tag in help file for overview.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Opt-in preview of file or directory under cursor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Manipulate files and directories by editing text buffers: create, delete, copy, rename, move. See &lt;code&gt;*MiniFiles-manipulation*&lt;/code&gt; tag in help file for overview.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use as default file explorer instead of &lt;code&gt;netrw&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configurable:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Filter/prefix/sort of file system entries.&lt;/li&gt; &#xA;   &lt;li&gt;Mappings used for common explorer actions.&lt;/li&gt; &#xA;   &lt;li&gt;UI options: whether to show preview of file/directory under cursor, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;*MiniFiles-examples*&lt;/code&gt; tag in help file for some common configuration examples.&lt;/p&gt; &#xA;&lt;p&gt;Notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;This module is written and thoroughly tested on Linux. Support for other platform/OS (like Windows or MacOS) is a goal, but there is no guarantee.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Works on all supported versions but using Neovim&amp;gt;=0.9 is recommended.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;This module silently reacts to not enough permissions:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In case of missing file, check its or its parent read permissions.&lt;/li&gt; &#xA;   &lt;li&gt;In case of no manipulation result, check write permissions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;h3&gt;Navigation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;:lua MiniFiles.open()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;j&lt;/code&gt;/&lt;code&gt;k&lt;/code&gt; to navigate down/up.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;l&lt;/code&gt; to expand entry under cursor: show directory or open file in the most recent window.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;h&lt;/code&gt; to go to parent directory.&lt;/li&gt; &#xA;   &lt;li&gt;Type &lt;code&gt;g?&lt;/code&gt; for more information about other available mappings.&lt;/li&gt; &#xA;   &lt;li&gt;Move as in any other buffer (&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;f&lt;/code&gt;/&lt;code&gt;t&lt;/code&gt;, etc.).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For bigger overview, see &lt;code&gt;*MiniFiles-navigation*&lt;/code&gt; tag in help file.&lt;/p&gt; &#xA;&lt;h3&gt;Manipulation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the directory in which manipulation should be done.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit buffer in the way representing file system action:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Create file/directory&lt;/strong&gt;: create new line like &lt;code&gt;file&lt;/code&gt; or &lt;code&gt;dir/&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Create file/directory in the descendant directory&lt;/strong&gt;: create new line like &lt;code&gt;dir/file&lt;/code&gt; or &lt;code&gt;dir/nested/&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Delete file/directory&lt;/strong&gt;: delete whole line representing that entry.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Rename file/directory&lt;/strong&gt;: change text to the right of that entry&#39;s icon.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Copy file/directory&lt;/strong&gt;: copy whole line and paste it in target directory.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Move file/directory&lt;/strong&gt;: cut whole line and paste it in target directory.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Press &lt;code&gt;=&lt;/code&gt;; &lt;strong&gt;read confirmation dialog&lt;/strong&gt;; confirm with &lt;code&gt;y&lt;/code&gt;/&lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; or not confirm with &lt;code&gt;n&lt;/code&gt;/&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For bigger overview, see &lt;code&gt;*MiniFiles-manipulation*&lt;/code&gt; tag in help file.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;This plugin can be installed as part of &#39;mini.nvim&#39; library (&lt;strong&gt;recommended&lt;/strong&gt;) or as a standalone Git repository.&lt;/p&gt; &#xA;&lt;p&gt;There are two branches to install from:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;main&lt;/code&gt; (default, &lt;strong&gt;recommended&lt;/strong&gt;) will have latest development version of plugin. All changes since last stable release should be perceived as being in beta testing phase (meaning they already passed alpha-testing and are moderately settled).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stable&lt;/code&gt; will be updated only upon releases with code tested during public beta-testing phase in &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are code snippets for some common installation methods (use only one):&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;folke/lazy.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = false },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.nvim&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.files&#39;, version = false },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;{ &#39;echasnovski/mini.files&#39;, version = &#39;*&#39; },&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;wbthomason/packer.nvim&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.nvim&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use &#39;echasnovski/mini.files&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;use { &#39;echasnovski/mini.files&#39;, branch = &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;With &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;junegunn/vim-plug&lt;/a&gt;&lt;/summary&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Github repo&lt;/th&gt; &#xA;    &lt;th&gt;Branch&lt;/th&gt; &#xA;    &lt;th&gt;Code snippet&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;&#39;mini.nvim&#39; library&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.nvim&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td rowspan=&#34;2&#34;&gt;Standalone plugin&lt;/td&gt; &#xA;    &lt;td&gt;Main&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.files&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Stable&lt;/td&gt; &#xA;    &lt;td&gt;&lt;code&gt;Plug &#39;echasnovski/mini.files&#39;, { &#39;branch&#39;: &#39;stable&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;: don&#39;t forget to call &lt;code&gt;require(&#39;mini.files&#39;).setup()&lt;/code&gt; to enable its functionality.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: if you are on Windows, there might be problems with too long file paths (like &lt;code&gt;error: unable to create file &amp;lt;some file name&amp;gt;: Filename too long&lt;/code&gt;). Try doing one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enable corresponding git global config value: &lt;code&gt;git config --system core.longpaths true&lt;/code&gt;. Then try to reinstall.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Default config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- No need to copy this inside `setup()`. Will be used automatically.&#xA;{&#xA;  -- Customization of shown content&#xA;  content = {&#xA;    -- Predicate for which file system entries to show&#xA;    filter = nil,&#xA;    -- What prefix to show to the left of file system entry&#xA;    prefix = nil,&#xA;    -- In which order to show file system entries&#xA;    sort = nil,&#xA;  },&#xA;&#xA;  -- Module mappings created only inside explorer.&#xA;  -- Use `&#39;&#39;` (empty string) to not create one.&#xA;  mappings = {&#xA;    close       = &#39;q&#39;,&#xA;    go_in       = &#39;l&#39;,&#xA;    go_in_plus  = &#39;L&#39;,&#xA;    go_out      = &#39;h&#39;,&#xA;    go_out_plus = &#39;H&#39;,&#xA;    reset       = &#39;&amp;lt;BS&amp;gt;&#39;,&#xA;    reveal_cwd  = &#39;@&#39;,&#xA;    show_help   = &#39;g?&#39;,&#xA;    synchronize = &#39;=&#39;,&#xA;    trim_left   = &#39;&amp;lt;&#39;,&#xA;    trim_right  = &#39;&amp;gt;&#39;,&#xA;  },&#xA;&#xA;  -- General options&#xA;  options = {&#xA;    -- Whether to delete permanently or move into module-specific trash&#xA;    permanent_delete = true,&#xA;    -- Whether to use for editing directories&#xA;    use_as_default_explorer = true,&#xA;  },&#xA;&#xA;  -- Customization of explorer windows&#xA;  windows = {&#xA;    -- Maximum number of windows to show side by side&#xA;    max_number = math.huge,&#xA;    -- Whether to show preview of file/directory under cursor&#xA;    preview = false,&#xA;    -- Width of focused window&#xA;    width_focus = 50,&#xA;    -- Width of non-focused window&#xA;    width_nofocus = 15,&#xA;    -- Width of preview window&#xA;    width_preview = 25,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Similar plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-tree/nvim-tree.lua&#34;&gt;nvim-tree/nvim-tree.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stevearc/oil.nvim&#34;&gt;stevearc/oil.nvim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-neo-tree/neo-tree.nvim&#34;&gt;nvim-neo-tree/neo-tree.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>MaximumADHD/Roblox-Client-Tracker</title>
    <updated>2023-09-09T01:30:45Z</updated>
    <id>tag:github.com,2023-09-09:/MaximumADHD/Roblox-Client-Tracker</id>
    <link href="https://github.com/MaximumADHD/Roblox-Client-Tracker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An automated repository that extracts and displays information about the current version of Roblox. Most of the information is miscellaneous, but it provides insight to changes that are being made with each weekly release.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/3926900/106975524-55bb1000-671c-11eb-9b5c-e425c7ae6414.png&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;What is this?&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;strong&gt;Roblox Client Tracker&lt;/strong&gt; is an unofficial change tracker which aims to provide detailed difflogs for changes to Roblox&#39;s engine. It generates information by datamining builds of Roblox Studio retrieved from their CDN, using various publicly discovered developer channels of Roblox. The data that is analyzed and presented in this repository is generated using publicly reverse engineered Roblox protocols and file formats.&lt;/p&gt; &#xA;&lt;h1&gt;Comparison Links&lt;/h1&gt; &#xA;&lt;p&gt;Use these links to compare development builds of Roblox Studio:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Compare &lt;a href=&#34;https://github.com/MaximumADHD/Roblox-Client-Tracker/compare/zCanary#files_bucket&#34;&gt;roblox-&amp;gt;zCanary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compare &lt;a href=&#34;https://github.com/MaximumADHD/Roblox-Client-Tracker/compare/zIntegration#files_bucket&#34;&gt;roblox-&amp;gt;zIntegration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compare &lt;a href=&#34;https://github.com/MaximumADHD/Roblox-Client-Tracker/compare/zCanary...zIntegration&#34;&gt;zCanary-&amp;gt;zIntegration&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Source Code&lt;/h1&gt; &#xA;&lt;p&gt;The backend console application which drives this repository is available to be found here:&lt;br&gt; &lt;a href=&#34;https://github.com/MaximumADHD/RCT-Source&#34;&gt;https://github.com/MaximumADHD/RCT-Source&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Specifications&lt;/h1&gt; &#xA;&lt;h2&gt;API-Dump.json&lt;/h2&gt; &#xA;&lt;p&gt;This is a JSON version of Roblox&#39;s API Dump. It contains more data than the original API Dump and can be read into a data tree by most programming languages using a JSON parser. This file is extracted using:&lt;br&gt;&lt;code&gt;RobloxStudioBeta.exe -API API-Dump.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Full-API-Dump.json&lt;/h2&gt; &#xA;&lt;p&gt;This is a more &lt;em&gt;&#34;complete&#34;&lt;/em&gt; version of the normal JSON API Dump. It includes all classes and enums omitted from the normal dump, and includes a few other notable differences and keys, like &lt;code&gt;Default&lt;/code&gt; values on some properties. This file can be extracted with, similarly to &lt;code&gt;-API&lt;/code&gt;:&lt;br&gt;&lt;code&gt;RobloxStudioBeta.exe -FullAPI Full-API-Dump.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API-Dump.txt&lt;/h2&gt; &#xA;&lt;p&gt;A readable version of Roblox&#39;s JSON API Dump. This file is generated from the &lt;a href=&#34;https://github.com/MaximumADHD/Roblox-API-Dump-Tool&#34;&gt;Roblox API Dump Tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;AutocompleteMetadata.xml&lt;/h2&gt; &#xA;&lt;p&gt;A file used by Roblox Studio to provide auto completion for the types built into Roblox&#39;s Lua implementation.&lt;/p&gt; &#xA;&lt;h2&gt;CppTree.txt&lt;/h2&gt; &#xA;&lt;p&gt;A sorted list of undecorated C++ symbol names that could be extracted from the exe.&lt;/p&gt; &#xA;&lt;h2&gt;DeepStrings.txt&lt;/h2&gt; &#xA;&lt;p&gt;A sorted list of dumped strings from Roblox Studio&#39;s exe. There is &lt;em&gt;some&lt;/em&gt; garbage data dumped into this file, but most of it should be legible.&lt;/p&gt; &#xA;&lt;h2&gt;EmulatedDevices.xml&lt;/h2&gt; &#xA;&lt;p&gt;A file used by Roblox Studio which defines the specifications, platforms, and images for all default emulation devices.&lt;/p&gt; &#xA;&lt;h2&gt;FVariables.txt&lt;/h2&gt; &#xA;&lt;p&gt;A sorted list of fast variables, which are used by Roblox to toggle changes to the engine remotely on multiple platforms without having to redeploy the client.&lt;/p&gt; &#xA;&lt;h2&gt;RobloxShaderData.csv&lt;/h2&gt; &#xA;&lt;p&gt;This CSV maps all of Roblox&#39;s known shaders, and which graphics APIs use them. Each mapped shader has a mapped name and shader-type.&lt;/p&gt; &#xA;&lt;h2&gt;rbxManifest.txt&lt;/h2&gt; &#xA;&lt;p&gt;A file that describes (almost) every file that is expected to be extracted from the zip files specified in rbxPkgManifest.txt Every two lines of this file corresponds to a local file path, and the MD5 checksum expected of the file extracted to that path.&lt;/p&gt; &#xA;&lt;p&gt;This file is fetched at:&lt;br&gt; &lt;code&gt;https://setup.rbxcdn.com/{version-$guid}-rbxManifest.txt&lt;/code&gt;&lt;br&gt; &lt;code&gt;https://setup.rbxcdn.com/channel/{channelName}/{version-$guid}-rbxManifest.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;rbxPkgManifest.txt&lt;/h2&gt; &#xA;&lt;p&gt;A file that describes which zip files should be fetched from Roblox&#39;s Amazon S3 bucket.&lt;/p&gt; &#xA;&lt;p&gt;This file can be fetched at:&lt;br&gt; &lt;code&gt;https://setup.rbxcdn.com/{version-$guid}-rbxPkgManifest.txt&lt;/code&gt;&lt;br&gt; &lt;code&gt;https://setup.rbxcdn.com/channel/{channelName}/{version-$guid}-rbxPkgManifest.txt&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The file starts with a line describing the version for the package manifest schema. After the version, information about each file is listed sequentually as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;File.ext&#xA;MD5 Checksum&#xA;Compressed Size&#xA;Decompressed Size&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These files are fetched at:&lt;br&gt; &lt;code&gt;https://setup.rbxcdn.com/{version-$guid}-rbxPkgManifest.txt&lt;/code&gt;&lt;br&gt; &lt;code&gt;https://setup.rbxcdn.com/channel/{channelName}/{version-$guid}-{FileName}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;rbxManifest.csv&lt;/h2&gt; &#xA;&lt;p&gt;A CSV version of &lt;code&gt;rbxManifest.txt&lt;/code&gt;, made to be easier to read from GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;rbxPkgManifest.csv&lt;/h2&gt; &#xA;&lt;p&gt;A CSV version of &lt;code&gt;rbxPkgManifest.txt&lt;/code&gt;, made to be easier to read from GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;version.txt&lt;/h2&gt; &#xA;&lt;p&gt;Describes the current version of Roblox Studio.&lt;br&gt; Formatted as: &lt;strong&gt;(MajorRevision).(Version).(Patch).(Changelist)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;version-guid.txt&lt;/h2&gt; &#xA;&lt;p&gt;Describes the current GUID version of Roblox Studio.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stevearc/conform.nvim</title>
    <updated>2023-09-09T01:30:45Z</updated>
    <id>tag:github.com,2023-09-09:/stevearc/conform.nvim</id>
    <link href="https://github.com/stevearc/conform.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight yet powerful formatter plugin for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;conform.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Lightweight yet powerful formatter plugin for Neovim&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatters&#34;&gt;Formatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#customizing-formatters&#34;&gt;Customizing formatters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#autoformat-on-save&#34;&gt;Autoformat on save&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatopts-callback&#34;&gt;format(opts, callback)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_formattersbufnr&#34;&gt;list_formatters(bufnr)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#list_all_formatters&#34;&gt;list_all_formatters()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#get_formatter_infoformatter-bufnr&#34;&gt;get_formatter_info(formatter, bufnr)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.8+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;conform.nvim supports all the usual plugin managers&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;lazy.nvim&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;stevearc/conform.nvim&#39;,&#xA;  opts = {},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Packer&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;packer&#39;).startup(function()&#xA;    use {&#xA;      &#39;stevearc/conform.nvim&#39;,&#xA;      config = function() require(&#39;conform&#39;).setup() end&#xA;    }&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Paq&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require &#34;paq&#34; {&#xA;    {&#39;stevearc/conform.nvim&#39;};&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;vim-plug&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#39;stevearc/conform.nvim&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;dein&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;call dein#add(&#39;stevearc/conform.nvim&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Pathogen&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/conform.nvim.git ~/.vim/bundle/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Neovim native package&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/stevearc/conform.nvim.git \&#xA;  &#34;${XDG_DATA_HOME:-$HOME/.local/share}&#34;/nvim/site/pack/conform/start/conform.nvim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;At a minimum, you will need to set up some formatters by filetype&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;    formatters_by_ft = {&#xA;        lua = { &#34;stylua&#34; },&#xA;        -- Conform will run multiple formatters sequentially&#xA;        python = { &#34;isort&#34;, &#34;black&#34; },&#xA;        -- Use a sub-list to run only the first available formatter&#xA;        javascript = { { &#34;prettierd&#34;, &#34;prettier&#34; } },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can use &lt;code&gt;conform.format()&lt;/code&gt; just like you would &lt;code&gt;vim.lsp.buf.format()&lt;/code&gt;. For example, to format on save:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.api.nvim_create_autocmd(&#34;BufWritePre&#34;, {&#xA;    pattern = &#34;*&#34;,&#xA;    callback = function(args)&#xA;        require(&#34;conform&#34;).format({ bufnr = args.buf })&#xA;    end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a shortcut, conform will optionally set up this format-on-save autocmd for you&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;    format_on_save = {&#xA;        -- These options will be passed to conform.format()&#xA;        timeout_ms = 500,&#xA;        lsp_fallback = true,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/stevearc/conform.nvim/master/#formatopts-callback&#34;&gt;conform.format()&lt;/a&gt; for more details about the parameters.&lt;/p&gt; &#xA;&lt;p&gt;To view configured and available formatters, as well as to see the path to the log file, run &lt;code&gt;:ConformInfo&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Formatters&lt;/h2&gt; &#xA;&lt;!-- FORMATTERS --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyCQA/autoflake&#34;&gt;autoflake&lt;/a&gt; - Removes unused imports and unused variables as reported by pyflakes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hhatto/autopep8&#34;&gt;autopep8&lt;/a&gt; - A tool that automatically formats Python code to conform to the PEP 8 style guide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lovesegfault/beautysh&#34;&gt;beautysh&lt;/a&gt; - A Bash beautifier for the masses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/psf/black&#34;&gt;black&lt;/a&gt; - The uncompromising Python code formatter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kernel.org/doc/html/latest/process/clang-format.html&#34;&gt;clang_format&lt;/a&gt; - Tool to format C/C++/… code according to a set of rules and heuristics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/greglook/cljstyle&#34;&gt;cljstyle&lt;/a&gt; - Formatter for Clojure code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cheshirekow/cmake_format&#34;&gt;cmake_format&lt;/a&gt; - Parse cmake listfiles and format them nicely.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dart.dev/tools/dart-format&#34;&gt;dart_format&lt;/a&gt; - Replace the whitespace in your program with formatting that follows Dart guidelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dlang-community/dfmt&#34;&gt;dfmt&lt;/a&gt; - Formatter for D source code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/avh4/elm-format&#34;&gt;elm_format&lt;/a&gt; - elm-format formats Elm source code according to a standard set of rules based on the official &lt;a href=&#34;https://elm-lang.org/docs/style-guide&#34;&gt;Elm Style Guide&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nebulab/erb-formatter&#34;&gt;erb_format&lt;/a&gt; - Format ERB files with speed and precision.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mantoni/eslint_d.js/&#34;&gt;eslint_d&lt;/a&gt; - Like ESLint, but faster.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fishshell.com/docs/current/cmds/fish_indent.html&#34;&gt;fish_indent&lt;/a&gt; - Indent or otherwise prettify a piece of fish code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Scony/godot-gdscript-toolkit&#34;&gt;gdformat&lt;/a&gt; - A formatter for Godot&#39;s gdscript.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/cmd/gofmt&#34;&gt;gofmt&lt;/a&gt; - Formats go programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mvdan/gofumpt&#34;&gt;gofumpt&lt;/a&gt; - Enforce a stricter format than gofmt, while being backwards compatible. That is, gofumpt is happy with a subset of the formats that gofmt is happy with.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools/cmd/goimports&#34;&gt;goimports&lt;/a&gt; - Updates your Go import lines, adding missing ones and removing unreferenced ones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/segmentio/golines&#34;&gt;golines&lt;/a&gt; - A golang formatter that fixes long lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/threedaymonk/htmlbeautifier&#34;&gt;htmlbeautifier&lt;/a&gt; - A normaliser/beautifier for HTML that also understands embedded Ruby. Ideal for tidying up Rails templates.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PyCQA/isort&#34;&gt;isort&lt;/a&gt; - Python utility / library to sort imports alphabetically and automatically separate them into sections and by type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stedolan/jq&#34;&gt;jq&lt;/a&gt; - Command-line JSON processor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/serokell/nixfmt&#34;&gt;nixfmt&lt;/a&gt; - nixfmt is a formatter for Nix code, intended to apply a uniform style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nix-community/nixpkgs-fmt&#34;&gt;nixpkgs_fmt&lt;/a&gt; - nixpkgs-fmt is a Nix code formatter for nixpkgs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ocaml-ppx/ocamlformat&#34;&gt;ocamlformat&lt;/a&gt; - Auto-formatter for OCaml code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/perl-ide/App-perlimports&#34;&gt;perlimports&lt;/a&gt; - Make implicit Perl imports explicit&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/perltidy/perltidy&#34;&gt;perltidy&lt;/a&gt; - Perl::Tidy, a source code formatter for Perl&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darold/pgFormatter&#34;&gt;pg_format&lt;/a&gt; - PostgreSQL SQL syntax beautifier.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier&lt;/a&gt; - Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fsouza/prettierd&#34;&gt;prettierd&lt;/a&gt; - prettier, as a daemon, for ludicrous formatting speed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rubocop/rubocop&#34;&gt;rubocop&lt;/a&gt; - Ruby static code analyzer and formatter, based on the community Ruby style guide.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang/rustfmt&#34;&gt;rustfmt&lt;/a&gt; - A tool for formatting rust code according to style guidelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/scalameta/scalafmt&#34;&gt;scalafmt&lt;/a&gt; - Code formatter for Scala.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anordal/shellharden&#34;&gt;shellharden&lt;/a&gt; - The corrective bash syntax highlighter&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt; - A shell parser, formatter, and interpreter with &lt;code&gt;bash&lt;/code&gt; support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sql-formatter-org/sql-formatter&#34;&gt;sql_formatter&lt;/a&gt; - A whitespace formatter for different query languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JohnnyMorganz/StyLua&#34;&gt;stylua&lt;/a&gt; - An opinionated code formatter for Lua.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apple/swift-format&#34;&gt;swift_format&lt;/a&gt; - Swift formatter from apple. Requires building from source with &lt;code&gt;swift build&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nicklockwood/SwiftFormat&#34;&gt;swiftformat&lt;/a&gt; - SwiftFormat is a code library and command-line tool for reformatting &lt;code&gt;swift&lt;/code&gt; code on macOS or Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tamasfe/taplo&#34;&gt;taplo&lt;/a&gt; - A TOML toolkit written in Rust&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.terraform.io/docs/cli/commands/fmt.html&#34;&gt;terraform_fmt&lt;/a&gt; - The terraform-fmt command rewrites &lt;code&gt;terraform&lt;/code&gt; configuration files to a canonical format and style.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gawk/manual/gawk.html&#34;&gt;trim_newlines&lt;/a&gt; - Trim new lines with awk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gawk/manual/gawk.html&#34;&gt;trim_whitespace&lt;/a&gt; - Trim whitespaces with awk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uncrustify/uncrustify&#34;&gt;uncrustify&lt;/a&gt; - A source code beautifier for C, C++, C#, ObjectiveC, D, Java, Pawn and Vala.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pamoller/xmlformatter&#34;&gt;xmlformat&lt;/a&gt; - xmlformatter is an Open Source Python package, which provides formatting of XML documents.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lyz-code/yamlfix&#34;&gt;yamlfix&lt;/a&gt; - A configurable YAML formatter that keeps comments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/yamlfmt&#34;&gt;yamlfmt&lt;/a&gt; - yamlfmt is an extensible command line tool or library to format yaml files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/google/yapf&#34;&gt;yapf&lt;/a&gt; - Yet Another Python Formatter.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ziglang/zig&#34;&gt;zigfmt&lt;/a&gt; - Reformat Zig source into canonical form.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /FORMATTERS --&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;A complete list of all configuration options&lt;/p&gt; &#xA;&lt;!-- OPTIONS --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;conform&#34;).setup({&#xA;  -- Map of filetype to formatters&#xA;  formatters_by_ft = {&#xA;    lua = { &#34;stylua&#34; },&#xA;    -- Conform will run multiple formatters sequentially&#xA;    python = { &#34;isort&#34;, &#34;black&#34; },&#xA;    -- Use a sub-list to run only the first available formatter&#xA;    javascript = { { &#34;prettierd&#34;, &#34;prettier&#34; } },&#xA;    -- Use the &#34;*&#34; filetype to run formatters on all files.&#xA;    -- Note that if you use this, you may want to set lsp_fallback = &#34;always&#34;&#xA;    -- (see :help conform.format)&#xA;    [&#34;*&#34;] = { &#34;trim_whitespace&#34; },&#xA;  },&#xA;  -- If this is set, Conform will run the formatter on save.&#xA;  -- It will pass the table to conform.format().&#xA;  format_on_save = {&#xA;    -- I recommend these options. See :help conform.format for details.&#xA;    lsp_fallback = true,&#xA;    timeout_ms = 500,&#xA;  },&#xA;  -- Set the log level. Use `:ConformInfo` to see the location of the log file.&#xA;  log_level = vim.log.levels.ERROR,&#xA;  -- Conform will notify you when a formatter errors&#xA;  notify_on_error = true,&#xA;  -- Define custom formatters here&#xA;  formatters = {&#xA;    my_formatter = {&#xA;      -- This can be a string or a function that returns a string&#xA;      command = &#34;my_cmd&#34;,&#xA;      -- OPTIONAL - all fields below this are optional&#xA;      -- A list of strings, or a function that returns a list of strings&#xA;      args = { &#34;--stdin-from-filename&#34;, &#34;$FILENAME&#34; },&#xA;      -- If the formatter supports range formatting, create the range arguments here&#xA;      range_args = function(ctx)&#xA;        return { &#34;--line-start&#34;, ctx.range.start[1], &#34;--line-end&#34;, ctx.range[&#34;end&#34;][1] }&#xA;      end,&#xA;      -- Send file contents to stdin, read new contents from stdout (default true)&#xA;      -- When false, will create a temp file (will appear in &#34;$FILENAME&#34; args). The temp&#xA;      -- file is assumed to be modified in-place by the format command.&#xA;      stdin = true,&#xA;      -- A function that calculates the directory to run the command in&#xA;      cwd = require(&#34;conform.util&#34;).root_file({ &#34;.editorconfig&#34;, &#34;package.json&#34; }),&#xA;      -- When cwd is not found, don&#39;t run the formatter (default false)&#xA;      require_cwd = true,&#xA;      -- When returns false, the formatter will not be used&#xA;      condition = function(ctx)&#xA;        return vim.fs.basename(ctx.filename) ~= &#34;README.md&#34;&#xA;      end,&#xA;      -- Exit codes that indicate success (default {0})&#xA;      exit_codes = { 0, 1 },&#xA;      -- Environment variables. This can also be a function that returns a table.&#xA;      env = {&#xA;        VAR = &#34;value&#34;,&#xA;      },&#xA;    },&#xA;    -- These can also be a function that returns the formatter&#xA;    other_formatter = function()&#xA;      return {&#xA;        command = &#34;my_cmd&#34;,&#xA;      }&#xA;    end,&#xA;  },&#xA;})&#xA;&#xA;-- You can set formatters_by_ft and formatters directly&#xA;require(&#34;conform&#34;).formatters_by_ft.lua = { &#34;stylua&#34; }&#xA;require(&#34;conform&#34;).formatters.my_formatter = {&#xA;  command = &#34;my_cmd&#34;,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- /OPTIONS --&gt; &#xA;&lt;h2&gt;Customizing formatters&lt;/h2&gt; &#xA;&lt;p&gt;If you want to customize how a formatter runs (for example, to pass in environment variables or change the command arguments), you can either edit the formatter directly or create one yourself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Directly change the values on the built-in configuration&#xA;require(&#34;conform.formatters.yamlfix&#34;).env = {&#xA;  YAMLFIX_SEQUENCE_STYLE = &#34;block_style&#34;,&#xA;}&#xA;&#xA;-- Or create your own formatter that overrides certain values&#xA;require(&#34;conform&#34;).formatters.yamlfix = vim.tbl_deep_extend(&#34;force&#34;, require(&#34;conform.formatters.yamlfix&#34;), {&#xA;  env = {&#xA;    YAMLFIX_SEQUENCE_STYLE = &#34;block_style&#34;,&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Autoformat on save&lt;/h2&gt; &#xA;&lt;p&gt;If you want more complex logic than the &lt;code&gt;format_on_save&lt;/code&gt; option allows, you can write it yourself using your own autocmd. For example:&lt;/p&gt; &#xA;&lt;!-- AUTOFORMAT --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Format synchronously on save&#xA;vim.api.nvim_create_autocmd(&#34;BufWritePre&#34;, {&#xA;  pattern = &#34;*&#34;,&#xA;  callback = function(args)&#xA;    -- Disable autoformat on certain filetypes&#xA;    local ignore_filetypes = { &#34;sql&#34;, &#34;java&#34; }&#xA;    if vim.tbl_contains(ignore_filetypes, vim.bo[args.buf].filetype) then&#xA;      return&#xA;    end&#xA;    -- Disable with a global or buffer-local variable&#xA;    if vim.g.disable_autoformat or vim.b[args.buf].disable_autoformat then&#xA;      return&#xA;    end&#xA;    -- Disable autoformat for files in a certain path&#xA;    local bufname = vim.api.nvim_buf_get_name(args.buf)&#xA;    if bufname:match(&#34;/node_modules/&#34;) then&#xA;      return&#xA;    end&#xA;    require(&#34;conform&#34;).format({ timeout_ms = 500, lsp_fallback = true, bufnr = args.buf })&#xA;  end,&#xA;})&#xA;&#xA;-- Format asynchronously on save&#xA;vim.api.nvim_create_autocmd(&#34;BufWritePost&#34;, {&#xA;  pattern = &#34;*&#34;,&#xA;  callback = function(args)&#xA;    require(&#34;conform&#34;).format({ async = true, lsp_fallback = true, bufnr = args.buf }, function(err)&#xA;      if not err then&#xA;        vim.api.nvim_buf_call(args.buf, function()&#xA;          vim.cmd.update()&#xA;        end)&#xA;      end&#xA;    end)&#xA;  end,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- /AUTOFORMAT --&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;!-- API --&gt; &#xA;&lt;h3&gt;format(opts, callback)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;format(opts, callback): boolean&lt;/code&gt; &lt;br&gt; Format a buffer&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;opts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;timeout_ms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Time in milliseconds to block for formatting. Defaults to 1000. No effect if async = true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format this buffer (default 0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;async&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If true the method won&#39;t block. Defaults to false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;formatters&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|string[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;List of formatters to run. Defaults to all formatters for the buffer filetype.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;lsp_fallback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean|&#34;always&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Attempt LSP formatting if no formatters are available. Defaults to false. If &#34;always&#34;, will attempt LSP formatting even if formatters are available (useful if you set formatters for the &#34;*&#34; filetype)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;quiet&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Don&#39;t show any notifications for warnings or failures. Defaults to false.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;range&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|table&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Range to format. Table must contain &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; keys with {row, col} tuples using (1,0) indexing. Defaults to current selection in visual mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;callback&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|fun(err: nil|string)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called once formatting has completed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Returns:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;True if any formatters were attempted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;list_formatters(bufnr)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;list_formatters(bufnr): conform.FormatterInfo[]&lt;/code&gt; &lt;br&gt; Retrieve the available formatters for a buffer&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;list_all_formatters()&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;list_all_formatters(): conform.FormatterInfo[]&lt;/code&gt; &lt;br&gt; List information about all filetype-configured formatters&lt;/p&gt; &#xA;&lt;h3&gt;get_formatter_info(formatter, bufnr)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;get_formatter_info(formatter, bufnr): conform.FormatterInfo&lt;/code&gt; &lt;br&gt; Get information about a formatter (including availability)&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Param&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Desc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;formatter&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The name of the formatter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bufnr&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;nil|integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- /API --&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-lint&#34;&gt;nvim-lint&lt;/a&gt; for providing inspiration for the config and API. It&#39;s an excellent plugin that balances power and simplicity.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jose-elias-alvarez/null-ls.nvim&#34;&gt;null-ls&lt;/a&gt; for formatter configurations and being my formatter/linter of choice for a long time.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>