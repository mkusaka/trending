<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-10T01:35:25Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>quarto-dev/quarto-nvim</title>
    <updated>2024-03-10T01:35:25Z</updated>
    <id>tag:github.com,2024-03-10:/quarto-dev/quarto-nvim</id>
    <link href="https://github.com/quarto-dev/quarto-nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Quarto mode for Neovim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;quarto-nvim&lt;/h1&gt; &#xA;&lt;p&gt;Quarto-nvim provides tools for working on &lt;a href=&#34;https://quarto.org/&#34;&gt;Quarto&lt;/a&gt; manuscripts in Neovim. You can get started with Quarto &lt;a href=&#34;https://quarto.org/docs/get-started/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Walkthrough&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://quarto.org/docs/get-started/hello/neovim.html&#34;&gt;get started section&lt;/a&gt; also comes with a video version to walk you through. The playlist is extened as more features are added, so join us for a &#34;Coffee with Quarto and Neovim&#34;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/3sj7clNowlA?list=PLabWm-zCaD1axcMGvf7wFxJz8FZmyHSJ7&#34;&gt;https://youtu.be/3sj7clNowlA?list=PLabWm-zCaD1axcMGvf7wFxJz8FZmyHSJ7&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;quarto-nvim&lt;/code&gt; from GitHub with your favourite Neovim plugin manager like &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt;, &lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer.nvim&lt;/a&gt; or &lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;VimPlug&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Because Quarto provides a lot of functionality through integration with existing plugins, some of those have to be told about the existence of &lt;code&gt;quarto-nvim&lt;/code&gt; (like e.g. registering it as a source for the autocompletion plugin &lt;code&gt;nvim-cmp&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;As such, we recommend you to experiment with the &lt;a href=&#34;https://github.com/jmbuhr/quarto-nvim-kickstarter&#34;&gt;quarto-nvim kickstarter configuration&lt;/a&gt; and then pick the relevant parts from the &lt;a href=&#34;https://github.com/jmbuhr/quarto-nvim-kickstarter/raw/main/lua/plugins/quarto.lua&#34;&gt;&lt;code&gt;lua/plugins/quarto.lua&lt;/code&gt;&lt;/a&gt; file to integrate it into your own existing configuration.&lt;/p&gt; &#xA;&lt;p&gt;There is also a smaller configuration for slotting into your existing &lt;code&gt;lazy.nvim&lt;/code&gt; (e.g. &lt;a href=&#34;https://www.lazyvim.org/&#34;&gt;LazyVim&lt;/a&gt;) configuration at &lt;a href=&#34;https://github.com/jmbuhr/lazyvim-starter-for-quarto/raw/main/lua/plugins/quarto.lua&#34;&gt;https://github.com/jmbuhr/lazyvim-starter-for-quarto/blob/main/lua/plugins/quarto.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plugins and their configuration to look out for in either of those files are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;quarto-dev/quarto-nvim&#39;,&#xA;    &#39;jmbuhr/otter.nvim&#39;,&#xA;    &#39;hrsh7th/nvim-cmp&#39;,&#xA;    &#39;neovim/nvim-lspconfig&#39;,&#xA;    &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Quarto-nvim requires Neovim &amp;gt;= &lt;strong&gt;v0.9.0&lt;/strong&gt; (&lt;a href=&#34;https://github.com/neovim/neovim/releases/tag/stable&#34;&gt;https://github.com/neovim/neovim/releases/tag/stable&lt;/a&gt;). If you are unable to update Neovim, you can specify a specific version of the plugins involved instead of the latest stable version. How you do this will vary depending on your plugin manager, but you can see one example using &lt;code&gt;lazy.nvim&lt;/code&gt; here: &lt;a href=&#34;https://github.com/jmbuhr/quarto-nvim-kickstarter/raw/nvim-0.8.3/lua/plugins/quarto.lua&#34;&gt;https://github.com/jmbuhr/quarto-nvim-kickstarter/blob/nvim-0.8.3/lua/plugins/quarto.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;version = ...&lt;/code&gt; lines to look out for are for the following plugins:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#39;quarto-dev/quarto-nvim&#39;,&#xA;    &#39;jmbuhr/otter.nvim&#39;,&#xA;    &#39;nvim-treesitter/nvim-treesitter&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Configure&lt;/h3&gt; &#xA;&lt;p&gt;You can pass a lua table with options to the setup function as shown in &lt;a href=&#34;https://github.com/jmbuhr/quarto-nvim-kickstarter/raw/main/lua/plugins/quarto.lua&#34;&gt;quarto-nvim-kickstarter/..quarto.lua&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will be merged with the default options, which are shown below in the example. If you want to use the defaults, simply call &lt;code&gt;setup&lt;/code&gt; without arguments or with an empty table.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;quarto&#39;).setup{&#xA;  debug = false,&#xA;  closePreviewOnExit = true,&#xA;  lspFeatures = {&#xA;    enabled = true,&#xA;    chunks = &#34;curly&#34;,&#xA;    languages = { &#34;r&#34;, &#34;python&#34;, &#34;julia&#34;, &#34;bash&#34;, &#34;html&#34; },&#xA;    diagnostics = {&#xA;      enabled = true,&#xA;      triggers = { &#34;BufWritePost&#34; },&#xA;    },&#xA;    completion = {&#xA;      enabled = true,&#xA;    },&#xA;  },&#xA;  codeRunner = {&#xA;    enabled = false,&#xA;    default_method = nil, -- &#39;molten&#39; or &#39;slime&#39;&#xA;    ft_runners = {}, -- filetype to runner, ie. `{ python = &#34;molten&#34; }`.&#xA;                     -- Takes precedence over `default_method`&#xA;    never_run = { &#34;yaml&#34; }, -- filetypes which are never sent to a code runner&#xA;  },&#xA;  keymap = {&#xA;    -- set whole section or individual keys to `false` to disable&#xA;    hover = &#34;K&#34;,&#xA;    definition = &#34;gd&#34;,&#xA;    type_definition = &#34;gD&#34;,&#xA;    rename = &#34;&amp;lt;leader&amp;gt;lR&#34;,&#xA;    format = &#34;&amp;lt;leader&amp;gt;lf&#34;,&#xA;    references = &#34;gr&#34;,&#xA;    document_symbols = &#34;gS&#34;,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preview&lt;/h3&gt; &#xA;&lt;p&gt;Use the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;QuartoPreview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or access the function from lua, e.g. to create a keybinding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local quarto = require(&#39;quarto&#39;)&#xA;quarto.setup()&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;qp&#39;, quarto.quartoPreview, { silent = true, noremap = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then use the keyboard shortcut to open &lt;code&gt;quarto preview&lt;/code&gt; for the current file or project in the active working directory in the neovim integrated terminal in a new tab.&lt;/p&gt; &#xA;&lt;p&gt;Note: While you can use &lt;code&gt;QuartoPreview&lt;/code&gt; without configuring the plugin via &lt;code&gt;quarto.setup&lt;/code&gt;, other features strictly require it.&lt;/p&gt; &#xA;&lt;h2&gt;Language support&lt;/h2&gt; &#xA;&lt;h3&gt;Demo&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/17450586/209436101-4dd560f4-c876-4dbc-a0f4-b3a2cbff0748.mp4&#34;&gt;https://user-images.githubusercontent.com/17450586/209436101-4dd560f4-c876-4dbc-a0f4-b3a2cbff0748.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;With the language features enabled, you can open the hover documentation for R, python and julia code chunks with &lt;code&gt;K&lt;/code&gt; (or configure a different shortcut). You can got-to-definition with &lt;code&gt;gd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Autocompletion&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;quarto-nvim&lt;/code&gt; now comes with a completion source for &lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt;nvim-cmp&lt;/a&gt; to deliver swift autocompletion for code in quarto code chunks. With the quarto language features enabled, you can add the source in your &lt;code&gt;cmp&lt;/code&gt; configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- ...&#xA;  sources = {&#xA;    { name = &#39;otter&#39; },&#xA;  }&#xA;-- ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;R diagnostics configuration&lt;/h3&gt; &#xA;&lt;p&gt;To make diagnostics work with R you have to configure the linter a bit, since the language buffers in the background separate code with blank links, which we want to ignore. Otherwise you get a lot more diagnostics than you probably want. Add file &lt;code&gt;.lintr&lt;/code&gt; to your home folder and fill it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;linters: linters_with_defaults(&#xA;    trailing_blank_lines_linter = NULL,&#xA;    trailing_whitespace_linter = NULL&#xA;  )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now also enable other lsp features, such as the show hover function and shortcut, independent of showing diagnostics by enabling lsp features but not enabling diagnostics.&lt;/p&gt; &#xA;&lt;h3&gt;Other Edge Cases&lt;/h3&gt; &#xA;&lt;p&gt;Other languages might have similar issues (e.g. I see a lot of warnings about whitespace when activating diagnostics with &lt;code&gt;lua&lt;/code&gt;). If you come across them and have a fix, I will be very happy about a pull request! Or, what might ultimately be the cleaner way of documenting language specific issues, an entry in the &lt;a href=&#34;https://github.com/quarto-dev/quarto-nvim/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running Code&lt;/h2&gt; &#xA;&lt;p&gt;Quarto-nvim doesn&#39;t run code for you, instead, it will interface with existing code running plugins and tell them what to run. There are currently two such code running plugins that quarto will work with:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/benlubas/molten-nvim&#34;&gt;molten-nvim&lt;/a&gt; - a code runner that supports the jupyter kernel, renders output below each code cell, and optionally renders images in the terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jpalardy/vim-slime&#34;&gt;vim-slime&lt;/a&gt; - a general purpose code runner with support for sending code to integrated nvim terminals, tmux panes, and many others.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I recommend picking a code runner, setting it up based on its README, and then coming back to this point to learn how Quarto will augment that code runner.&lt;/p&gt; &#xA;&lt;p&gt;This plugin enables easily sending code cells to your code runner. There are two different ways to do this: commands, covered below; and lua functions, covered right here. &lt;em&gt;By default these functions will only run cells that are the same language as the current cell.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Quarto exposes code running functions through to runner module: &lt;code&gt;require(&#39;quarto.runner&#39;)&lt;/code&gt;. Those functions are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;run_cell()&lt;/code&gt; - runs the current cell&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_above(multi_lang)&lt;/code&gt; - runs all the cells above the current one, &lt;strong&gt;and&lt;/strong&gt; the current one, in order&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_below(multi_lang)&lt;/code&gt; - runs all the cells below the current one, &lt;strong&gt;and&lt;/strong&gt; the current one, in order&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_all(multi_lang)&lt;/code&gt; - runs all the cells in the document&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_line(multi_lang)&lt;/code&gt; - runs the line of code at your cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;run_range()&lt;/code&gt; - run code inside the visual range&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each function that takes the optional &lt;code&gt;multi_lang&lt;/code&gt; argument will run cells of all languages when called with the value &lt;code&gt;true&lt;/code&gt;, and will only run cells that match the language of the current cell otherwise. As a result, just calling &lt;code&gt;run_all()&lt;/code&gt; will run all cells that match the language of the current cell.&lt;/p&gt; &#xA;&lt;p&gt;Here are some example run mappings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local runner = require(&#34;quarto.runner&#34;)&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;localleader&amp;gt;rc&#34;, runner.run_cell,  { desc = &#34;run cell&#34;, silent = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;localleader&amp;gt;ra&#34;, runner.run_above, { desc = &#34;run cell and above&#34;, silent = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;localleader&amp;gt;rA&#34;, runner.run_all,   { desc = &#34;run all cells&#34;, silent = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;localleader&amp;gt;rl&#34;, runner.run_line,  { desc = &#34;run line&#34;, silent = true })&#xA;vim.keymap.set(&#34;v&#34;, &#34;&amp;lt;localleader&amp;gt;r&#34;,  runner.run_range, { desc = &#34;run visual range&#34;, silent = true })&#xA;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;localleader&amp;gt;RA&#34;, function()&#xA;  runner.run_all(true)&#xA;end, { desc = &#34;run all cells of all languages&#34;, silent = true })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available Commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;QuartoPreview&#xA;QuartoClosePreview&#xA;QuartoHelp &amp;lt;..&amp;gt;&#xA;QuartoActivate&#xA;QuartoDiagnostics&#xA;QuartoHover&#xA;QuartoSend&#xA;QuartoSendAbove&#xA;QuartoSendBelow&#xA;QuartoSendAll&#xA;QuartoSendLine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Recommended Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Quarto works great with a number of existing plugins in the neovim ecosystem. You can find semi-opinionated but still minimal configurations for &lt;code&gt;nvim&lt;/code&gt; and &lt;code&gt;tmux&lt;/code&gt;, for use with Quarto, R and python in these two repositories:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmbuhr/quarto-nvim-kickstarter&#34;&gt;https://github.com/jmbuhr/quarto-nvim-kickstarter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jmbuhr/tmux-kickstarter&#34;&gt;https://github.com/jmbuhr/tmux-kickstarter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bloznelis/before.nvim</title>
    <updated>2024-03-10T01:35:25Z</updated>
    <id>tag:github.com,2024-03-10:/bloznelis/before.nvim</id>
    <link href="https://github.com/bloznelis/before.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Plugin for Neovim which tracks edit locations&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;before.nvim&lt;/h1&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;Track edit locations and jump back to them, like &lt;a href=&#34;https://neovim.io/doc/user/motion.html#changelist&#34;&gt;changelist&lt;/a&gt;, but across buffers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/bloznelis/before.nvim/assets/33397865/1130572d-dd75-4a07-9c79-9afc91b5d67a&#34; alt=&#34;peeked&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;  &#39;bloznelis/before.nvim&#39;,&#xA;  config = function()&#xA;    local before = require(&#39;before&#39;)&#xA;    before.setup()&#xA;&#xA;    -- Jump to previous entry in the edit history&#xA;    vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-h&amp;gt;&#39;, before.jump_to_last_edit, {})&#xA;&#xA;    -- Jump to next entry in the edit history&#xA;    vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;C-l&amp;gt;&#39;, before.jump_to_next_edit, {})&#xA;&#xA;    -- Move edit history to quickfix (or telescope)&#xA;    vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;oe&#39;, before.show_edits, {})&#xA;  end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuration&lt;/h3&gt; &#xA;&lt;h4&gt;Settings&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;before&#39;).setup({&#xA;  -- How many edit locations to store in memory (default: 10)&#xA;  history_size = 42&#xA;  -- Wrap around the ends of the edit history (default: false)&#xA;  history_wrap_enabled = true&#xA;  -- Use telescope quickfix picker for `show_edits` command (default: false)&#xA;  telescope_for_preview = true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Telescope picker&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- Provide custom opts to telescope picker as show_edits argument:&#xA;vim.keymap.set(&#39;n&#39;, &#39;&amp;lt;leader&amp;gt;oe&#39;, function()&#xA;  before.show_edits(require(&#39;telescope.themes&#39;).get_dropdown())&#xA;end, {})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>cappyzawa/telescope-terraform.nvim</title>
    <updated>2024-03-10T01:35:25Z</updated>
    <id>tag:github.com,2024-03-10:/cappyzawa/telescope-terraform.nvim</id>
    <link href="https://github.com/cappyzawa/telescope-terraform.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An extension for telescope.nvim that provides info of your terraform workspace.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope-terraform.nvim&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;telescope-terraform&lt;/code&gt; is an extension for &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; that provides info of your terraform workspace.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/cappyzawa/terraform-lab/raw/main/s/assests/ss.png?raw=true&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use{&#xA;  &#39;cappyzawa/telescope-terraform.nvim&#39;,&#xA;  requires = {&#xA;    &#39;nvim-lua/plenary.nvim&#39;,&#xA;    &#39;nvim-telescope/telescope.nvim&#39;,&#xA;  },&#xA;  config = function()&#xA;    require&#39;telescope&#39;.load_extension&#39;terraform&#39;&#xA;  end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Now supports &lt;code&gt;terraform state list&lt;/code&gt; only.&lt;/p&gt; &#xA;&lt;h3&gt;list&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;:Telescope terraform state_list&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Key mappings&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;key&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;d&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;remove the selected state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>