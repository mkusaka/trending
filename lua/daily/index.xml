<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-29T01:40:31Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>po5/thumbfast</title>
    <updated>2023-03-29T01:40:31Z</updated>
    <id>tag:github.com,2023-03-29:/po5/thumbfast</id>
    <link href="https://github.com/po5/thumbfast" rel="alternate"></link>
    <summary type="html">&lt;p&gt;High-performance on-the-fly thumbnailer for mpv&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;thumbfast&lt;/h1&gt; &#xA;&lt;p&gt;High-performance on-the-fly thumbnailer for mpv.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;The script does not display thumbnails on its own,&lt;/strong&gt; it is meant to be used alongside a UI script that calls thumbfast.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/42466980/199102896-65f9e989-4189-4734-82a7-bda8ee63c7a6.webm&#34;&gt;Preview of thumbfast on different UIs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Place thumbfast.lua in your mpv &lt;code&gt;scripts&lt;/code&gt; folder.&lt;br&gt; Default settings are listed in thumbfast.conf, copy it to your mpv &lt;code&gt;script-opts&lt;/code&gt; folder to customize.&lt;/p&gt; &#xA;&lt;p&gt;For the vanilla UI, you have to install &lt;a href=&#34;https://github.com/po5/thumbfast/raw/vanilla-osc/player/lua/osc.lua&#34;&gt;osc.lua&lt;/a&gt; (which is identical to the vanilla UI) and add &lt;code&gt;osc=no&lt;/code&gt; in your &lt;code&gt;mpv.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;UI support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomasklaen/uosc&#34;&gt;uosc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/po5/thumbfast/raw/vanilla-osc/player/lua/osc.lua&#34;&gt;osc.lua&lt;/a&gt; (use this fork for vanilla UI)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/torque/mpv-progressbar&#34;&gt;progressbar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Zren/mpv-osc-tethys&#34;&gt;tethys&lt;/a&gt; (PR pending, &lt;a href=&#34;https://github.com/Zren/mpv-osc-tethys/raw/a6a3f4295e9a68dbb0763f30cb2d9f73b2452445/osc_tethys.lua&#34;&gt;lua&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maoiscat/mpv-osc-modern/tree/with.thumbfast&#34;&gt;modern&lt;/a&gt; (separate branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cyl0/MordenX&#34;&gt;MordenX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/longtermfree/oscc&#34;&gt;oscc&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeberg.org/NRK/mpv-toolbox/src/branch/master/mfpbar&#34;&gt;mfpbar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;No dependencies, no background thumbnail generation hogging your CPU.&lt;br&gt; Customizable sizes, interval between thumbnails, cropping support, respects applied video filters.&lt;br&gt; Supports web videos e.g. YouTube (disabled by default), mixed aspect ratio videos.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Windows: None, works out of the box&lt;/p&gt; &#xA;&lt;p&gt;Linux: None, works out of the box&lt;/p&gt; &#xA;&lt;p&gt;Mac: None, works out of the box&lt;/p&gt; &#xA;&lt;p&gt;This script makes an effort to run on mpv versions as old as 0.29.0.&lt;br&gt; Note that most custom UIs will not support vintage mpv builds, consider updating if you&#39;re having issues.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once the lua file is in your scripts directory, and you are using a UI that supports thumbfast, you are done.&lt;br&gt; Hover on the timeline for nice thumbnails.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;socket&lt;/code&gt;: On Windows, a plain string. On Linux and Mac, a directory path for temporary files. Leave empty for auto.&lt;br&gt; &lt;code&gt;thumbnail&lt;/code&gt;: Path for the temporary thumbnail file (must not be a directory). Leave empty for auto.&lt;br&gt; &lt;code&gt;max_height&lt;/code&gt;, &lt;code&gt;max_width&lt;/code&gt;: Maximum thumbnail size in pixels (scaled down to fit). Values are scaled when hidpi is enabled. Defaults to 200x200.&lt;br&gt; &lt;code&gt;overlay_id&lt;/code&gt;: Overlay id for thumbnails. Leave blank unless you know what you&#39;re doing.&lt;br&gt; &lt;code&gt;spawn_first&lt;/code&gt;: Spawn thumbnailer on file load for faster initial thumbnails. Defaults to no.&lt;br&gt; &lt;code&gt;network&lt;/code&gt;: Enable on remote files. Defaults to no.&lt;br&gt; &lt;code&gt;audio&lt;/code&gt;: Enable on audio files. Defaults to no.&lt;br&gt; &lt;code&gt;hwdec&lt;/code&gt;: Enable hardware decoding. Defaults to no.&lt;br&gt; &lt;code&gt;direct_io&lt;/code&gt;: Windows only: write directly to pipe (requires LuaJIT). Should improve performance, ymmv.&lt;/p&gt; &#xA;&lt;h2&gt;For UI developers: How to add thumbfast support to your script&lt;/h2&gt; &#xA;&lt;p&gt;Declare the thumbfast state variable near the top of your script.&lt;br&gt; &lt;em&gt;Do not manually modify those values, they are automatically updated by the script and changes will be overwritten.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local thumbfast = {&#xA;    width = 0,&#xA;    height = 0,&#xA;    disabled = true,&#xA;    available = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Register the state setter near the end of your script, or near where your other script messages are.&lt;br&gt; You are expected to have required &lt;code&gt;mp.utils&lt;/code&gt; (for this example, into a &lt;code&gt;utils&lt;/code&gt; variable).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;mp.register_script_message(&#34;thumbfast-info&#34;, function(json)&#xA;    local data = utils.parse_json(json)&#xA;    if type(data) ~= &#34;table&#34; or not data.width or not data.height then&#xA;        msg.error(&#34;thumbfast-info: received json didn&#39;t produce a table with thumbnail information&#34;)&#xA;    else&#xA;        thumbfast = data&#xA;    end&#xA;end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now for the actual functionality. You are in charge of supplying the time hovered (in seconds), and x/y coordinates for the top-left corner of the thumbnail.&lt;br&gt; In this example, the thumbnail is horizontally centered on the cursor, respects a 10px margin on both sides, and displays 10px above the cursor.&lt;br&gt; This code should be run when the user hovers on the seekbar. Don&#39;t worry even if this is called on every render, thumbfast won&#39;t be bogged down.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- below are examples of what these values may look like&#xA;-- margin_left = 10&#xA;-- margin_right = 10&#xA;-- cursor_x, cursor_y = mp.get_mouse_pos()&#xA;-- display_width = mp.get_property_number(&#34;osd-width&#34;)&#xA;-- hovered_seconds = video_duration * cursor_x / display_width&#xA;&#xA;if not thumbfast.disabled then&#xA;    mp.commandv(&#34;script-message-to&#34;, &#34;thumbfast&#34;, &#34;thumb&#34;,&#xA;        -- hovered time in seconds&#xA;        hovered_seconds,&#xA;        -- x&#xA;        math.min(display_width - thumbfast.width - margin_right, math.max(margin_left, cursor_x - thumbfast.width / 2)),&#xA;        -- y&#xA;        cursor_y - 10 - thumbfast.height&#xA;    )&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code should be run when the user leaves the seekbar.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;if thumbfast.available then&#xA;    mp.commandv(&#34;script-message-to&#34;, &#34;thumbfast&#34;, &#34;clear&#34;)&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you did all that, your script can now display thumbnails!&lt;br&gt; Look at existing integrations for more concrete examples.&lt;/p&gt; &#xA;&lt;p&gt;If positioning isn&#39;t enough and you want complete control over rendering:&lt;br&gt; Register a &lt;code&gt;thumbfast-render&lt;/code&gt; script message.&lt;br&gt; When requesting the thumbnail, set x and y to empty strings and supply your script&#39;s name as the 4th argument.&lt;br&gt; You will recieve a json object with the keys &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;socket&lt;/code&gt;, &lt;code&gt;thumbnail&lt;/code&gt;, &lt;code&gt;overlay_id&lt;/code&gt; when the thumbnail is ready.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SmiteshP/nvim-navbuddy</title>
    <updated>2023-03-29T01:40:31Z</updated>
    <id>tag:github.com,2023-03-29:/SmiteshP/nvim-navbuddy</id>
    <link href="https://github.com/SmiteshP/nvim-navbuddy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple popup display that provides breadcrumbs feature using LSP server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üó∫Ô∏è nvim-navbuddy&lt;/h1&gt; &#xA;&lt;p&gt;A simple popup display that provides breadcrumbs like navigation feature but in keyboard centric manner inspired by ranger file manager.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/43147494/227758807-13a614ff-a09d-4be0-8f6b-ac22f814ce6f.mp4&#34;&gt;https://user-images.githubusercontent.com/43147494/227758807-13a614ff-a09d-4be0-8f6b-ac22f814ce6f.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚ö°Ô∏è Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim &amp;gt;= 0.8.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/neovim/nvim-lspconfig&#34;&gt;nvim-lspconfig&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SmiteshP/nvim-navic&#34;&gt;nvim-navic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MunifTanjim/nui.nvim&#34;&gt;nui.nvim&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the plugin with your preferred package manager:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/wbthomason/packer.nvim&#34;&gt;packer&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;use {&#xA;    &#34;SmiteshP/nvim-navbuddy&#34;,&#xA;    requires = {&#xA;        &#34;neovim/nvim-lspconfig&#34;,&#xA;        &#34;SmiteshP/nvim-navic&#34;,&#xA;        &#34;MunifTanjim/nui.nvim&#34;&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/junegunn/vim-plug&#34;&gt;vim-plug&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;Plug &#34;neovim/nvim-lspconfig&#34;&#xA;Plug &#34;SmiteshP/nvim-navic&#34;&#xA;Plug &#34;MunifTanjim/nui.nvim&#34;&#xA;Plug &#34;SmiteshP/nvim-navbuddy&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Setup&lt;/h2&gt; &#xA;&lt;p&gt;nvim-navbuddy needs to be attached to lsp servers of the buffer to work. You can pass the navbuddy&#39;s &lt;code&gt;attach&lt;/code&gt; function as &lt;code&gt;on_attach&lt;/code&gt; while setting up the lsp server. You can skip this step if you have enabled &lt;code&gt;auto_attach&lt;/code&gt; option in setup function.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navbuddy = require(&#34;nvim-navbuddy&#34;)&#xA;&#xA;require(&#34;lspconfig&#34;).clangd.setup {&#xA;    on_attach = function(client, bufnr)&#xA;        navbuddy.attach(client, bufnr)&#xA;    end&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü™Ñ Customise&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;code&gt;setup&lt;/code&gt; to override any of the default options&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;icons&lt;/code&gt; : Indicate the type of symbol captured. Default icons assume you have nerd-fonts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;window&lt;/code&gt; : Set options related to window&#39;s &#34;border&#34;, &#34;size&#34;, &#34;position&#34;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mappings&lt;/code&gt; : Actions to be triggered for specified keybindings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lsp&lt;/code&gt; : &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;auto_attach&lt;/code&gt; : Enable to have Navbuddy automatically attach to every LSP for current buffer. Its disabled by default.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;preference&lt;/code&gt; : Table ranking lsp_servers. Lower the index, higher the priority of the server. If there are more than one server attached to a buffer, navbuddy will refer to this list to make a decision on which one to use. for example - In case a buffer is attached to clangd and ccls both and the preference list is &lt;code&gt;{ &#34;clangd&#34;, &#34;pyright&#34; }&lt;/code&gt;. Then clangd will be prefered.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local navbuddy = require(&#34;nvim-navbuddy&#34;)&#xA;local actions = require(&#34;nvim-navbuddy.actions&#34;)&#xA;&#xA;navbuddy.setup {&#xA;    window = {&#xA;        border = &#34;single&#34;,  -- &#34;rounded&#34;, &#34;double&#34;, &#34;solid&#34;, &#34;none&#34;&#xA;                            -- or an array with eight chars building up the border in a clockwise fashion&#xA;                            -- starting with the top-left corner. eg: { &#34;‚ïî&#34;, &#34;‚ïê&#34; ,&#34;‚ïó&#34;, &#34;‚ïë&#34;, &#34;‚ïù&#34;, &#34;‚ïê&#34;, &#34;‚ïö&#34;, &#34;‚ïë&#34; }.&#xA;        size = &#34;60%&#34;,&#xA;        position = &#34;50%&#34;,&#xA;        sections = {&#xA;            left = {&#xA;                size = &#34;20%&#34;,&#xA;                border = nil -- You can set border style for each section individually as well.&#xA;            },&#xA;            mid = {&#xA;                size = &#34;40%&#34;,&#xA;                border = nil&#xA;            },&#xA;            right = {&#xA;                -- No size option for right most section. It fills to&#xA;                -- remaining area.&#xA;                border = nil&#xA;            }&#xA;        }&#xA;    },&#xA;    icons = {&#xA;        File          = &#34;Ôúò &#34;,&#xA;        Module        = &#34;Óò§ &#34;,&#xA;        Namespace     = &#34;Ô†ñ &#34;,&#xA;        Package       = &#34;Óò§ &#34;,&#xA;        Class         = &#34;Ô†ñ &#34;,&#xA;        Method        = &#34;Ôö¶ &#34;,&#xA;        Property      = &#34;Óûõ &#34;,&#xA;        Field         = &#34;Óúñ &#34;,&#xA;        Constructor   = &#34;Ôê• &#34;,&#xA;        Enum          = &#34;Ô©ó&#34;,&#xA;        Interface     = &#34;Ô©ó&#34;,&#xA;        Function      = &#34;Ôûî &#34;,&#xA;        Variable      = &#34;Ôö¶ &#34;,&#xA;        Constant      = &#34;Ô£æ &#34;,&#xA;        String        = &#34;Ôî´ &#34;,&#xA;        Number        = &#34;Ô¢ü &#34;,&#xA;        Boolean       = &#34;‚ó© &#34;,&#xA;        Array         = &#34;Ôô© &#34;,&#xA;        Object        = &#34;Ôô® &#34;,&#xA;        Key           = &#34;Ô†ä &#34;,&#xA;        Null          = &#34;Ô≥† &#34;,&#xA;        EnumMember    = &#34;ÔÖù &#34;,&#xA;        Struct        = &#34;Ô†ñ &#34;,&#xA;        Event         = &#34;ÔÉß &#34;,&#xA;        Operator      = &#34;Ôöî &#34;,&#xA;        TypeParameter = &#34;ÔûÉ &#34;,&#xA;    },&#xA;    mappings = {&#xA;        [&#34;&amp;lt;esc&amp;gt;&#34;] = actions.close,        -- Close and cursor to original location&#xA;        [&#34;q&#34;] = actions.close,&#xA;&#xA;        [&#34;j&#34;] = actions.next_sibling,     -- down&#xA;        [&#34;k&#34;] = actions.previous_sibling, -- up&#xA;&#xA;        [&#34;h&#34;] = actions.parent,           -- Move to left panel&#xA;        [&#34;l&#34;] = actions.children,         -- Move to right panel&#xA;&#xA;        [&#34;v&#34;] = actions.visual_name,      -- Visual selection of name&#xA;        [&#34;V&#34;] = actions.visual_scope,     -- Visual selection of scope&#xA;&#xA;        [&#34;y&#34;] = actions.yank_name,        -- Yank the name to system clipboard &#34;+&#xA;        [&#34;Y&#34;] = actions.yank_scope,       -- Yank the scope to system clipboard &#34;+&#xA;&#xA;        [&#34;i&#34;] = actions.insert_name,      -- Insert at start of name&#xA;        [&#34;I&#34;] = actions.insert_scope,     -- Insert at start of scope&#xA;&#xA;        [&#34;a&#34;] = actions.append_name,      -- Insert at end of name&#xA;        [&#34;A&#34;] = actions.append_scope,     -- Insert at end of scope&#xA;&#xA;        [&#34;r&#34;] = actions.rename,           -- Rename currently focused symbol&#xA;&#xA;        [&#34;d&#34;] = actions.delete,           -- Delete scope&#xA;&#xA;        [&#34;f&#34;] = actions.fold_create,      -- Create fold of current scope&#xA;        [&#34;F&#34;] = actions.fold_delete,      -- Delete fold of current scope&#xA;&#xA;        [&#34;c&#34;] = actions.comment,          -- Comment out current scope&#xA;&#xA;        [&#34;&amp;lt;enter&amp;gt;&#34;] = actions.select,     -- Goto selected symbol&#xA;        [&#34;o&#34;] = actions.select,&#xA;    },&#xA;    lsp = {&#xA;        auto_attach = false,  -- If set to true, you don&#39;t need to manually use attach function&#xA;        preference = nil      -- list of lsp server names in order of preference&#xA;    },&#xA;    source_buffer = {&#xA;        follow_node = true,   -- Keep the current node in focus on the source buffer&#xA;        highlight = true      -- Highlight the currently focused node&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Navbuddy&lt;/code&gt; command can be used to open navbuddy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:Navbuddy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And alternatively lua function &lt;code&gt;open&lt;/code&gt; can also be used to open navbuddy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;:lua require(&#34;nvim-navbuddy&#34;).open()&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>rktjmp/lush.nvim</title>
    <updated>2023-03-29T01:40:31Z</updated>
    <id>tag:github.com,2023-03-29:/rktjmp/lush.nvim</id>
    <link href="https://github.com/rktjmp/lush.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create Neovim themes with real-time feedback, export anywhere.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/assets/images/header.gif&#34; alt=&#34;Lush Header&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Lush &lt;img src=&#34;https://github.com/rktjmp/lush.nvim/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Lush is a colorscheme creation aid for Neovim. It gives you real time feedback as you edit, as well as color manipulation tools and some aids building a structured colorscheme.&lt;/p&gt; &#xA;&lt;p&gt;Lush colorschemes can easily be exported for use without Lush, either as a lua table, vimscript commands or any other format. They can also be imported into other Lua systems to access your color data.&lt;/p&gt; &#xA;&lt;p&gt;See some colorschemes &lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/made_with_lush/README.md#made-with-lush&#34;&gt;&lt;strong&gt;Made with Lush&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/#annoucements&#34;&gt;Annoucements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/#interactive-tutorials&#34;&gt;Interactive Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/#guides&#34;&gt;Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/#see-also&#34;&gt;See Also&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Experimental Treesitter Interface&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rktjmp/lush.nvim/issues/109&#34;&gt;See issue for new syntax&lt;/a&gt;. Syntax is subject to change.&lt;/p&gt; &#xA;&lt;h2&gt;Annoucements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2022-05-12: Neovim 0.7 is now a requirement, the 1.0.1 tagged version is the last 0.5 compatible release.&lt;/li&gt; &#xA; &lt;li&gt;2021-11-05: Deprecation warning, the compiler &lt;code&gt;exclude_keys&lt;/code&gt; option has been deprecated in favour of the build system, &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/BUILD.md&#34;&gt;build guide&lt;/a&gt; for details.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Neovim 0.7 or greater required to use Lush as a development tool&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;termguicolors&lt;/code&gt; enabled for true color support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via any package management system, for example, paq:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;require paq { &#39;rktjmp/lush.nvim&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/assets/images/demo.gif&#34; alt=&#34;Lush Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are two interactive tutorials provided,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:LushRunQuickstart&lt;/code&gt; which will give you a few-minute overview of Lush&#39;s creation features. (Or open &lt;code&gt;lush_quick_start.lua&lt;/code&gt; in the examples folder.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;:LushRunTutorial&lt;/code&gt;, a more in-depth guide through various ways to apply Lush. (Or open &lt;code&gt;lush_tutorial.lua&lt;/code&gt; in the examples folder).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Guides&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/CREATE.md&#34;&gt;Create your new colorscheme with lush-template (and how to import a non-lush colorscheme)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/EXTEND.md&#34;&gt;Extend an Lush existing colorscheme, or how users can configure your colorscheme&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/BUILD.md&#34;&gt;Export your colorscheme for use without Lush, or to any format with Shipwright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;See Also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/doc/lush.txt&#34;&gt;Vim Help&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/CHANGELOG.md&#34;&gt;Change Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/rktjmp/lush.nvim/main/TODO.md&#34;&gt;TODO&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>