<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-09-07T01:31:55Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fredrikaverpil/neotest-golang</title>
    <updated>2024-09-07T01:31:55Z</updated>
    <id>tag:github.com,2024-09-07:/fredrikaverpil/neotest-golang</id>
    <link href="https://github.com/fredrikaverpil/neotest-golang" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reliable Neotest adapter for running Go tests in Neovim.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;neotest-golang&lt;/h1&gt; &#xA;&lt;p&gt;Reliable Neotest adapter for running Go tests in Neovim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/fredrikaverpil/neotest-golang/assets/994357/afb6e936-b355-4d7b-ab73-65c21ee66ae7&#34; alt=&#34;neotest-golang&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚≠êÔ∏è Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports all &lt;a href=&#34;https://github.com/nvim-neotest/neotest#usage&#34;&gt;Neotest usage&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Supports table tests and nested test functions (based on treesitter AST parsing).&lt;/li&gt; &#xA; &lt;li&gt;DAP support with &lt;a href=&#34;https://github.com/leoluz/nvim-dap-go&#34;&gt;leoluz/nvim-dap-go&lt;/a&gt; integration for debugging of tests using &lt;a href=&#34;https://github.com/go-delve/delve&#34;&gt;delve&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Monorepo support (detect, run and debug tests in sub-projects).&lt;/li&gt; &#xA; &lt;li&gt;Inline diagnostics.&lt;/li&gt; &#xA; &lt;li&gt;Custom &lt;code&gt;go test&lt;/code&gt; argument support.&lt;/li&gt; &#xA; &lt;li&gt;Works great with &lt;a href=&#34;https://github.com/andythigpen/nvim-coverage&#34;&gt;andythigpen/nvim-coverage&lt;/a&gt; for displaying coverage in the sign column.&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;testify&lt;/a&gt; suites.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Why a second Neotest adapter for Go? ü§î&lt;/summary&gt; &#xA; &lt;p&gt;While using &lt;a href=&#34;https://github.com/nvim-neotest/neotest-go&#34;&gt;neotest-go&lt;/a&gt; I stumbled upon many problems which seemed difficult to solve in that codebase.&lt;/p&gt; &#xA; &lt;p&gt;I have full respect for the time and efforts put in by the developer(s) of neotest-go. I do not aim in any way to diminish their needs or efforts. However, I wanted to see if I could fix these issues by diving into the üï≥Ô∏èüêá of Neotest and building my own adapter. Below is a list of neotest-go issues which are not present in neotest-golang (this project):&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Neotest-go issue&lt;/th&gt; &#xA;    &lt;th&gt;URL&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Support for Testify framework&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-go/issues/6&#34;&gt;neotest-go#6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;DAP support&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-go/issues/12&#34;&gt;neotest-go#12&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Test Output in JSON, making it difficult to read&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-go/issues/52&#34;&gt;neotest-go#52&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Support for Nested Subtests&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-go/issues/74&#34;&gt;neotest-go#74&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Diagnostics for table tests on the line of failure&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-go/issues/75&#34;&gt;neotest-go#75&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&#34;Run nearest&#34; runs all tests&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-go/issues/83&#34;&gt;neotest-go#83&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Table tests not recognized when defined inside for-loop&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-go/issues/86&#34;&gt;neotest-go#86&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;Running test suite doesn&#39;t work&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/nvim-neotest/neotest-go/issues/89&#34;&gt;neotest-go#89&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;ü•∏ Installation&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Requires Neovim 0.10.0.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;üí§ Lazy.nvim&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  {&#xA;    &#34;nvim-neotest/neotest&#34;,&#xA;    dependencies = {&#xA;      &#34;nvim-neotest/nvim-nio&#34;,&#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;antoinemadec/FixCursorHold.nvim&#34;,&#xA;      &#34;nvim-treesitter/nvim-treesitter&#34;,&#xA;      &#34;fredrikaverpil/neotest-golang&#34;, -- Installation&#xA;    },&#xA;    config = function()&#xA;      require(&#34;neotest&#34;).setup({&#xA;        adapters = {&#xA;          require(&#34;neotest-golang&#34;), -- Registration&#xA;        },&#xA;      })&#xA;    end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;üåí Rocks.nvim&lt;/h3&gt; &#xA;&lt;p&gt;The adapter is available via &lt;a href=&#34;https://luarocks.org/modules/fredrikaverpil/neotest-golang&#34;&gt;luarocks package&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;:Rocks install neotest-golang&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nvim-neorocks/rocks.nvim&#34;&gt;rocks.nvim&lt;/a&gt; will automatically install dependencies if they are not already installed. You will need to call neotest&#39;s &lt;code&gt;setup&lt;/code&gt; function to register this adapter. If you use &lt;a href=&#34;https://github.com/nvim-neorocks/rocks-config.nvim&#34;&gt;rocks-config.nvim&lt;/a&gt;, consider setting up neotest and its adapters in a &lt;a href=&#34;https://github.com/nvim-neorocks/rocks-config.nvim?tab=readme-ov-file#plugin-bundles&#34;&gt;plugin bundle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Please note that &lt;a href=&#34;https://github.com/leoluz/nvim-dap-go&#34;&gt;leoluz/nvim-dap-go&lt;/a&gt; (required for DAP) is not on luarocks as of writing this.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;‚ùÑÔ∏è Nix &amp;amp; Home manager&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  config,&#xA;  pkgs,&#xA;  ...&#xA;}: {&#xA;  home.packages = with pkgs; [];&#xA;  programs = {&#xA;    neovim = {&#xA;      plugins = [&#xA;        # neotest and dependencies&#xA;        pkgs.vimPlugins.neotest&#xA;        pkgs.vimPlugins.nvim-nio&#xA;        pkgs.vimPlugins.plenary-nvim&#xA;        pkgs.vimPlugins.FixCursorHold-nvim&#xA;        pkgs.vimPlugins.nvim-treesitter&#xA;        (pkgs.vimPlugins.nvim-treesitter.withPlugins (plugins: [plugins.go]))&#xA;        pkgs.vimPlugins.neotest-golang&#xA;&#xA;        ## debugging&#xA;        pkgs.vimPlugins.nvim-dap&#xA;        pkgs.vimPlugins.nvim-dap-ui&#xA;        pkgs.vimPlugins.nvim-nio&#xA;        pkgs.vimPlugins.nvim-dap-virtual-text&#xA;        pkgs.vimPlugins.nvim-dap-go&#xA;      ];&#xA;      enable = true;&#xA;      extraConfig = &#39;&#39;&#xA;        lua &amp;lt;&amp;lt; EOF&#xA;        require(&#34;neotest&#34;).setup({&#xA;          adapters = {&#xA;            require(&#34;neotest-golang&#34;)&#xA;          },&#xA;        })&#xA;        EOF&#xA;      &#39;&#39;;&#xA;    };&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuration&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Argument&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;go_test_args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ &#34;-v&#34;, &#34;-race&#34;, &#34;-count=1&#34; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Arguments to pass into &lt;code&gt;go test&lt;/code&gt;. See &lt;a href=&#34;https://github.com/fredrikaverpil/neotest-golang#using-build-tags&#34;&gt;here&lt;/a&gt; for info on using &lt;code&gt;-tags&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;go_list_args&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Arguments to pass into &lt;code&gt;go list&lt;/code&gt;. See &lt;a href=&#34;https://github.com/fredrikaverpil/neotest-golang#using-build-tags&#34;&gt;here&lt;/a&gt; for info on using &lt;code&gt;-tags&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dap_go_opts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Options to pass into &lt;code&gt;require(&#34;dap-go&#34;).setup()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;testify_enabled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enable support for &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;testify&lt;/a&gt; suites. See &lt;a href=&#34;https://github.com/fredrikaverpil/neotest-golang#testify-suites&#34;&gt;here&lt;/a&gt; for more info.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;warn_test_name_dupes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Warn about duplicate test names within the same Go package.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;warn_test_not_executed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Warn if test was not executed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Example configuration: custom &lt;code&gt;go test&lt;/code&gt; arguments&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local config = { -- Specify configuration&#xA;  go_test_args = {&#xA;    &#34;-v&#34;,&#xA;    &#34;-race&#34;,&#xA;    &#34;-count=1&#34;,&#xA;    &#34;-coverprofile=&#34; .. vim.fn.getcwd() .. &#34;/coverage.out&#34;,&#xA;  },&#xA;}&#xA;require(&#34;neotest&#34;).setup({&#xA;  adapters = {&#xA;    require(&#34;neotest-golang&#34;)(config), -- Apply configuration&#xA;  },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the example above writes a coverage file. You can use &lt;a href=&#34;https://github.com/andythigpen/nvim-coverage&#34;&gt;andythigpen/nvim-coverage&lt;/a&gt; to show the coverage in Neovim.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;code&gt;go help test&lt;/code&gt;, &lt;code&gt;go help testflag&lt;/code&gt;, &lt;code&gt;go help build&lt;/code&gt; for possible arguments.&lt;/p&gt; &#xA;&lt;h3&gt;Example configuration: debugging&lt;/h3&gt; &#xA;&lt;p&gt;To debug tests, make sure you depend on &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;mfussenegger/nvim-dap&lt;/a&gt;, &lt;a href=&#34;https://github.com/rcarriga/nvim-dap-ui&#34;&gt;rcarriga/nvim-dap-ui&lt;/a&gt; and &lt;a href=&#34;https://github.com/leoluz/nvim-dap-go&#34;&gt;leoluz/nvim-dap-go&lt;/a&gt;. For example, make the following changes to your lua setup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;return {&#xA;+  {&#xA;+    &#34;rcarriga/nvim-dap-ui&#34;,&#xA;+    dependencies = {&#xA;+      &#34;nvim-neotest/nvim-nio&#34;,&#xA;+      &#34;mfussenegger/nvim-dap&#34;,&#xA;+    },&#xA;+  },&#xA;+&#xA;  {&#xA;    &#34;nvim-neotest/neotest&#34;,&#xA;    dependencies = {&#xA;      &#34;nvim-neotest/nvim-nio&#34;,&#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;antoinemadec/FixCursorHold.nvim&#34;,&#xA;      &#34;nvim-treesitter/nvim-treesitter&#34;,&#xA;-      &#34;fredrikaverpil/neotest-golang&#34;, -- Installation&#xA;+      {&#xA;+        &#34;fredrikaverpil/neotest-golang&#34;, -- Installation&#xA;+        dependencies = {&#xA;+          &#34;leoluz/nvim-dap-go&#34;,&#xA;+        },&#xA;+      },&#xA;    },&#xA;    config = function()&#xA;      require(&#34;neotest&#34;).setup({&#xA;        adapters = {&#xA;          require(&#34;neotest-golang&#34;), -- Registration&#xA;        },&#xA;      })&#xA;    end,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, set a keymap, like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  {&#xA;    &#34;nvim-neotest/neotest&#34;,&#xA;    ...&#xA;    keys = {&#xA;      {&#xA;        &#34;&amp;lt;leader&amp;gt;td&#34;,&#xA;        function()&#xA;          require(&#34;neotest&#34;).run.run({ suite = false, strategy = &#34;dap&#34; })&#xA;        end,&#xA;        desc = &#34;Debug nearest test&#34;,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a more verbose example, see the &#34;extra everything&#34; example config.&lt;/p&gt; &#xA;&lt;h3&gt;Example configuration: extra everything&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;p&gt;In the below code block, you can see a merged snapshot of my own config. To view my current config, see:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;&#34;&gt;plugins/neotest.lua&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/fredrikaverpil/dotfiles/raw/main/nvim-fredrik/lua/plugins/dap.lua&#34;&gt;plugins/dap.lua&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://github.com/fredrikaverpil/dotfiles/raw/main/nvim-fredrik/lua/lang/go.lua&#34;&gt;lang/go.lua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;&#xA;  -- Neotest setup&#xA;  {&#xA;    &#34;nvim-neotest/neotest&#34;,&#xA;    event = &#34;VeryLazy&#34;,&#xA;    dependencies = {&#xA;      &#34;nvim-neotest/nvim-nio&#34;,&#xA;      &#34;nvim-lua/plenary.nvim&#34;,&#xA;      &#34;antoinemadec/FixCursorHold.nvim&#34;,&#xA;      &#34;nvim-treesitter/nvim-treesitter&#34;,&#xA;&#xA;      &#34;nvim-neotest/neotest-plenary&#34;,&#xA;      &#34;nvim-neotest/neotest-vim-test&#34;,&#xA;&#xA;      {&#xA;        &#34;fredrikaverpil/neotest-golang&#34;,&#xA;        dependencies = {&#xA;          {&#xA;            &#34;leoluz/nvim-dap-go&#34;,&#xA;            opts = {},&#xA;          },&#xA;        },&#xA;        branch = &#34;main&#34;,&#xA;      },&#xA;    },&#xA;    opts = function(_, opts)&#xA;      opts.adapters = opts.adapters or {}&#xA;      opts.adapters[&#34;neotest-golang&#34;] = {&#xA;        go_test_args = {&#xA;          &#34;-v&#34;,&#xA;          &#34;-race&#34;,&#xA;          &#34;-coverprofile=&#34; .. vim.fn.getcwd() .. &#34;/coverage.out&#34;,&#xA;        },&#xA;      }&#xA;    end,&#xA;    config = function(_, opts)&#xA;      if opts.adapters then&#xA;        local adapters = {}&#xA;        for name, config in pairs(opts.adapters or {}) do&#xA;          if type(name) == &#34;number&#34; then&#xA;            if type(config) == &#34;string&#34; then&#xA;              config = require(config)&#xA;            end&#xA;            adapters[#adapters + 1] = config&#xA;          elseif config ~= false then&#xA;            local adapter = require(name)&#xA;            if type(config) == &#34;table&#34; and not vim.tbl_isempty(config) then&#xA;              local meta = getmetatable(adapter)&#xA;              if adapter.setup then&#xA;                adapter.setup(config)&#xA;              elseif adapter.adapter then&#xA;                adapter.adapter(config)&#xA;                adapter = adapter.adapter&#xA;              elseif meta and meta.__call then&#xA;                adapter(config)&#xA;              else&#xA;                error(&#34;Adapter &#34; .. name .. &#34; does not support setup&#34;)&#xA;              end&#xA;            end&#xA;            adapters[#adapters + 1] = adapter&#xA;          end&#xA;        end&#xA;        opts.adapters = adapters&#xA;      end&#xA;&#xA;      require(&#34;neotest&#34;).setup(opts)&#xA;    end,&#xA;    keys = {&#xA;      { &#34;&amp;lt;leader&amp;gt;ta&#34;, function() require(&#34;neotest&#34;).run.attach() end, desc = &#34;[t]est [a]ttach&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;tf&#34;, function() require(&#34;neotest&#34;).run.run(vim.fn.expand(&#34;%&#34;)) end, desc = &#34;[t]est run [f]ile&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;tA&#34;, function() require(&#34;neotest&#34;).run.run(vim.uv.cwd()) end, desc = &#34;[t]est [A]ll files&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;tS&#34;, function() require(&#34;neotest&#34;).run.run({ suite = true }) end, desc = &#34;[t]est [S]uite&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;tn&#34;, function() require(&#34;neotest&#34;).run.run() end, desc = &#34;[t]est [n]earest&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;tl&#34;, function() require(&#34;neotest&#34;).run.run_last() end, desc = &#34;[t]est [l]ast&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;ts&#34;, function() require(&#34;neotest&#34;).summary.toggle() end, desc = &#34;[t]est [s]ummary&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;to&#34;, function() require(&#34;neotest&#34;).output.open({ enter = true, auto_close = true }) end, desc = &#34;[t]est [o]utput&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;tO&#34;, function() require(&#34;neotest&#34;).output_panel.toggle() end, desc = &#34;[t]est [O]utput panel&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;tt&#34;, function() require(&#34;neotest&#34;).run.stop() end, desc = &#34;[t]est [t]erminate&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;td&#34;, function() require(&#34;neotest&#34;).run.run({ suite = false, strategy = &#34;dap&#34; }) end, desc = &#34;Debug nearest test&#34; },&#xA;    },&#xA;  },&#xA;&#xA;  -- DAP setup&#xA;  {&#xA;    &#34;mfussenegger/nvim-dap&#34;,&#xA;    event = &#34;VeryLazy&#34;,&#xA;    keys = {&#xA;      {&#34;&amp;lt;leader&amp;gt;db&#34;, function() require(&#34;dap&#34;).toggle_breakpoint() end, desc = &#34;toggle [d]ebug [b]reakpoint&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dB&#34;, function() require(&#34;dap&#34;).set_breakpoint(vim.fn.input(&#34;Breakpoint condition: &#34;)) end, desc = &#34;[d]ebug [B]reakpoint&#34;},&#xA;      {&#34;&amp;lt;leader&amp;gt;dc&#34;, function() require(&#34;dap&#34;).continue() end, desc = &#34;[d]ebug [c]ontinue (start here)&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dC&#34;, function() require(&#34;dap&#34;).run_to_cursor() end, desc = &#34;[d]ebug [C]ursor&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dg&#34;, function() require(&#34;dap&#34;).goto_() end, desc = &#34;[d]ebug [g]o to line&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;do&#34;, function() require(&#34;dap&#34;).step_over() end, desc = &#34;[d]ebug step [o]ver&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dO&#34;, function() require(&#34;dap&#34;).step_out() end, desc = &#34;[d]ebug step [O]ut&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;di&#34;, function() require(&#34;dap&#34;).step_into() end, desc = &#34;[d]ebug [i]nto&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dj&#34;, function() require(&#34;dap&#34;).down() end, desc = &#34;[d]ebug [j]ump down&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dk&#34;, function() require(&#34;dap&#34;).up() end, desc = &#34;[d]ebug [k]ump up&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dl&#34;, function() require(&#34;dap&#34;).run_last() end, desc = &#34;[d]ebug [l]ast&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dp&#34;, function() require(&#34;dap&#34;).pause() end, desc = &#34;[d]ebug [p]ause&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dr&#34;, function() require(&#34;dap&#34;).repl.toggle() end, desc = &#34;[d]ebug [r]epl&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dR&#34;, function() require(&#34;dap&#34;).clear_breakpoints() end, desc = &#34;[d]ebug [R]emove breakpoints&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;ds&#34;, function() require(&#34;dap&#34;).session() end, desc =&#34;[d]ebug [s]ession&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dt&#34;, function() require(&#34;dap&#34;).terminate() end, desc = &#34;[d]ebug [t]erminate&#34; },&#xA;      {&#34;&amp;lt;leader&amp;gt;dw&#34;, function() require(&#34;dap.ui.widgets&#34;).hover() end, desc = &#34;[d]ebug [w]idgets&#34; },&#xA;    },&#xA;  },&#xA;&#xA;  -- DAP UI setup&#xA;  {&#xA;    &#34;rcarriga/nvim-dap-ui&#34;,&#xA;    event = &#34;VeryLazy&#34;,&#xA;    dependencies = {&#xA;      &#34;nvim-neotest/nvim-nio&#34;,&#xA;      &#34;mfussenegger/nvim-dap&#34;,&#xA;    },&#xA;    opts = {},&#xA;    config = function(_, opts)&#xA;      -- setup dap config by VsCode launch.json file&#xA;      -- require(&#34;dap.ext.vscode&#34;).load_launchjs()&#xA;      local dap = require(&#34;dap&#34;)&#xA;      local dapui = require(&#34;dapui&#34;)&#xA;      dapui.setup(opts)&#xA;      dap.listeners.after.event_initialized[&#34;dapui_config&#34;] = function()&#xA;        dapui.open({})&#xA;      end&#xA;      dap.listeners.before.event_terminated[&#34;dapui_config&#34;] = function()&#xA;        dapui.close({})&#xA;      end&#xA;      dap.listeners.before.event_exited[&#34;dapui_config&#34;] = function()&#xA;        dapui.close({})&#xA;      end&#xA;    end,&#xA;    keys = {&#xA;      { &#34;&amp;lt;leader&amp;gt;du&#34;, function() require(&#34;dapui&#34;).toggle({}) end, desc = &#34;[d]ap [u]i&#34; },&#xA;      { &#34;&amp;lt;leader&amp;gt;de&#34;, function() require(&#34;dapui&#34;).eval() end, desc = &#34;[d]ap [e]val&#34; },&#xA;    },&#xA;  },&#xA;  {&#xA;    &#34;theHamsta/nvim-dap-virtual-text&#34;,&#xA;    opts = {},&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;‚õëÔ∏è Tips &amp;amp; troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Issues with setting up or using the adapter&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP]&lt;/p&gt; &#xA; &lt;p&gt;You can run &lt;code&gt;:checkhealth neotest-golang&lt;/code&gt; to review common issues. If you need configuring neotest-golang help, please open a discussion &lt;a href=&#34;https://github.com/fredrikaverpil/neotest-golang/discussions/new?category=configuration&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can also enable logging to further inspect what&#39;s going on under the hood. Neotest-golang piggybacks on the Neotest logger. You can enable it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- set debug level after having called require(&#34;neotest&#34;).setup()&#xA;require(&#34;neotest.logging&#34;):set_level(vim.log.levels.DEBUG)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;Please note that this could cause tests to run slower, so don&#39;t forget to remove this setting once you have resolved your issue!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can get ahold of the log file&#39;s path using &lt;code&gt;require(&#34;neotest.logging&#34;):get_filename()&lt;/code&gt;, which usually points to your &lt;code&gt;~/.local/state/nvim/neotest.log&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The logfile tends to be ginormous and if you are only looking for neotest-golang related entries, you can either search for the &lt;code&gt;[neotest-golang]&lt;/code&gt; prefix, or open the log in a Neovim buffer and then filter out only the adapter-related entries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;:edit ~/.local/state/nvim/neotest.log&#xA;:lua require(&#34;neotest-golang.utils.buffer&#34;).filter(&#34;[neotest-golang]&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Neotest is slowing down Neovim&lt;/h3&gt; &#xA;&lt;p&gt;Neotest, out of the box with default settings, can appear very slow in large projects (here, I&#39;m referring to &lt;a href=&#34;https://github.com/kubernetes/kubernetes&#34;&gt;this kind of large&lt;/a&gt;). There are a few things you can do to speed up the Neotest appearance and experience in such cases, by tweaking the Neotest settings.&lt;/p&gt; &#xA;&lt;p&gt;You can for example limit the AST-parsing (to detect tests) to the currently opened file, which in my opinion makes Neotest a joy to work with, even in ginormous projects. Second, you can tweak the concurrency settings, again for AST-parsing but also for concurrent test execution. Here is a simplistic example for &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; to show what I mean:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;return {&#xA;  {&#xA;    &#34;nvim-neotest/neotest&#34;,&#xA;    opts = {&#xA;      -- See all config options with :h neotest.Config&#xA;      discovery = {&#xA;        -- Drastically improve performance in ginormous projects by&#xA;        -- only AST-parsing the currently opened buffer.&#xA;        enabled = false,&#xA;        -- Number of workers to parse files concurrently.&#xA;        -- A value of 0 automatically assigns number based on CPU.&#xA;        -- Set to 1 if experiencing lag.&#xA;        concurrent = 1,&#xA;      },&#xA;      running = {&#xA;        -- Run tests concurrently when an adapter provides multiple commands to run.&#xA;        concurrent = true,&#xA;      },&#xA;      summary = {&#xA;        -- Enable/disable animation of icons.&#xA;        animated = false,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;:h neotest.Config&lt;/code&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fredrikaverpil/dotfiles/raw/main/nvim-fredrik/lua/plugins/neotest.lua&#34;&gt;Here&lt;/a&gt; is my personal Neotest configuration, for inspiration. Please note that I am configuring Go and the neotest-golang adapter in a separate file &lt;a href=&#34;https://github.com/fredrikaverpil/dotfiles/raw/main/nvim-fredrik/lua/lang/go.lua&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Go test execution and parallelism&lt;/h3&gt; &#xA;&lt;p&gt;You can set the optional &lt;code&gt;go_test_args&lt;/code&gt; to control the number of test binaries and number of tests to run in parallel using the &lt;code&gt;-p&lt;/code&gt; and &lt;code&gt;-parallel&lt;/code&gt; flags, respectively. Execute &lt;code&gt;go help test&lt;/code&gt;, &lt;code&gt;go help testflag&lt;/code&gt;, &lt;code&gt;go help build&lt;/code&gt; for more information on this.&lt;/p&gt; &#xA;&lt;h3&gt;Testify suites&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;/p&gt; &#xA; &lt;p&gt;This feature comes with some caveats and nuances, which is why it is not enabled by default. I advise you to only enable this if you need it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are some real shenaningans going on behind the scenes to make this work. üòÖ First, an in-memory lookup of &#34;receiver type-to-suite test function&#34; will be created of all Go test files in your project. Then, the generated Neotest node tree is modified by mutating private attributes and merging of nodes to avoid duplicates. I&#39;m personally a bit afraid of the maintenance burden of this feature... üôà&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;Right now, nested tests and table tests are not supported. All of this can be remedied at any time by extending the treesitter queries. Feel free to dig in and open a PR!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Using build tags&lt;/h3&gt; &#xA;&lt;p&gt;If you need to set build tags (like e.g. &lt;code&gt;-tags debug&lt;/code&gt; or &lt;code&gt;-tags &#34;tag1 tag2&#34;&lt;/code&gt;), you need to provide these arguments both in the &lt;code&gt;go_test_args&lt;/code&gt; and &lt;code&gt;go_list_args&lt;/code&gt; adapter options.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;!TIP&lt;/p&gt; &#xA; &lt;p&gt;Depending on how you have Neovim setup, you can define this on a per-project basis by placing a &lt;code&gt;.lazy.lua&lt;/code&gt; with overrides in the project. This requires the &lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt;lazy.nvim&lt;/a&gt; plugin manager.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;üôè PRs are welcome&lt;/h2&gt; &#xA;&lt;p&gt;Improvement suggestion PRs to this repo are very much welcome, and I encourage you to begin in the &lt;a href=&#34;https://github.com/fredrikaverpil/neotest-golang/discussions&#34;&gt;discussions&lt;/a&gt; in case the change is not trivial.&lt;/p&gt; &#xA;&lt;p&gt;You can run tests, formatting and linting locally with &lt;code&gt;make all&lt;/code&gt;. Install dependencies with &lt;code&gt;make install&lt;/code&gt;. Have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/fredrikaverpil/neotest-golang/main/Makefile&#34;&gt;Makefile&lt;/a&gt; for more details. You can also use the neotest-plenary and neotest-golang adapters to run the tests of this repo within Neovim.&lt;/p&gt; &#xA;&lt;h3&gt;AST and tree-sitter&lt;/h3&gt; &#xA;&lt;p&gt;To figure out new tree-sitter queries (for detecting tests), the following commands are available in Neovim to aid you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;:Inspect&lt;/code&gt; to show the highlight groups under the cursor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:InspectTree&lt;/code&gt; to show the parsed syntax tree (formerly known as &#34;TSPlayground&#34;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;:EditQuery&lt;/code&gt; to open the Live Query Editor (Nvim 0.10+).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, open up a Go test file and then execute &lt;code&gt;:InspectTree&lt;/code&gt;. A new window will appear which shows what the tree-sitter query syntax representation looks like for the Go test file.&lt;/p&gt; &#xA;&lt;p&gt;Again, from the Go test file, execute &lt;code&gt;:EditQuery&lt;/code&gt; to open up the query editor in a separate window. In the editor, you can now start creating your syntax query and play around. You can paste in queries from &lt;a href=&#34;https://github.com/fredrikaverpil/neotest-golang/raw/main/lua/neotest-golang/query.lua&#34;&gt;&lt;code&gt;query.lua&lt;/code&gt;&lt;/a&gt; in the editor, to see how the query behaves and highlights parts of your Go test file.&lt;/p&gt;</summary>
  </entry>
</feed>