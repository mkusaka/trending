<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Lua Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-11T01:37:42Z</updated>
  <subtitle>Daily Trending of Lua in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nvim-telescope/telescope-dap.nvim</title>
    <updated>2024-01-11T01:37:42Z</updated>
    <id>tag:github.com,2024-01-11:/nvim-telescope/telescope-dap.nvim</id>
    <link href="https://github.com/nvim-telescope/telescope-dap.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Integration for nvim-dap with telescope.nvim&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;telescope-dap.nvim&lt;/h1&gt; &#xA;&lt;p&gt;Integration for &lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; with &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This plugin is also overriding &lt;code&gt;dap&lt;/code&gt; internal ui, so running any &lt;code&gt;dap&lt;/code&gt; command, which makes use of the internal ui, will result in a &lt;code&gt;telescope&lt;/code&gt; prompt.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mfussenegger/nvim-dap&#34;&gt;nvim-dap&lt;/a&gt; (required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; (required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt;nvim-treesitter&lt;/a&gt; (optional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;You can setup the extension by doing&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#39;telescope&#39;).load_extension(&#39;dap&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;somewhere after your require(&#39;telescope&#39;).setup() call.&lt;/p&gt; &#xA;&lt;h2&gt;Available commands&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-viml&#34;&gt;:Telescope dap commands&#xA;:Telescope dap configurations&#xA;:Telescope dap list_breakpoints&#xA;:Telescope dap variables&#xA;:Telescope dap frames&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Available functions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require&#39;telescope&#39;.extensions.dap.commands{}&#xA;require&#39;telescope&#39;.extensions.dap.configurations{}&#xA;require&#39;telescope&#39;.extensions.dap.list_breakpoints{}&#xA;require&#39;telescope&#39;.extensions.dap.variables{}&#xA;require&#39;telescope&#39;.extensions.dap.frames{}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customize Colors&lt;/h2&gt; &#xA;&lt;p&gt;Stack frames coming from external code (libraries) are highlighted with the &#34;NvimDapSubtleFrame&#34; highlight group (by default linked to &#34;Comment&#34;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scottmckendry/cyberdream.nvim</title>
    <updated>2024-01-11T01:37:42Z</updated>
    <id>tag:github.com,2024-01-11:/scottmckendry/cyberdream.nvim</id>
    <link href="https://github.com/scottmckendry/cyberdream.nvim" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü§ñüí§ High-contrast, Futuristic &amp; Vibrant Coloursheme for Neovim&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/scottmckendry/cyberdream.nvim/assets/39483124/e758f47a-32eb-4eac-a008-eb59272badef&#34;&gt; &lt;b&gt;&lt;i&gt;A high-contrast, futuristic &amp;amp; vibrant theme for neovim&lt;/i&gt;&lt;/b&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/scottmckendry/cyberdream.nvim/issues&#34;&gt; &lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/scottmckendry/cyberdream.nvim?style=for-the-badge&amp;amp;logo=github&amp;amp;color=%23ffbd5e&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/scottmckendry/cyberdream.nvim/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/scottmckendry/cyberdream.nvim?style=for-the-badge&amp;amp;logo=github&amp;amp;color=%235ef1ff&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/scottmckendry/cyberdream.nvim/stars&#34;&gt; &lt;img alt=&#34;stars&#34; src=&#34;https://img.shields.io/github/stars/scottmckendry/cyberdream.nvim?style=for-the-badge&amp;amp;logo=github&amp;amp;color=%23bd5eff&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transparency-first design&lt;/strong&gt; - all design decisions are made with transparency in mind&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;High contrast&lt;/strong&gt; - Colours have been carefully chosen to be cohesive and easy on the eyes while still being easy to distinguish&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Supported Plugins&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt;&lt;label for=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/goolord/alpha-nvim&#34;&gt; alpha-nvim&lt;/a&gt;&lt;/label&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt;&lt;label for=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/folke/lazy.nvim&#34;&gt; lazy.nvim&lt;/a&gt;&lt;/label&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt;&lt;label for=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/ggandor/leap.nvim&#34;&gt; leap.nvim&lt;/a&gt;&lt;/label&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt;&lt;label for=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/nvim-lualine/lualine.nvim&#34;&gt; lualine.nvim&lt;/a&gt;&lt;/label&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt;&lt;label for=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/hrsh7th/nvim-cmp&#34;&gt; nvim-cmp&lt;/a&gt;&lt;/label&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt;&lt;label for=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/nvim-treesitter/nvim-treesitter&#34;&gt; nvim-treesitter&lt;/a&gt;&lt;/label&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt;&lt;label for=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt; telescope.nvim&lt;/a&gt;&lt;/label&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt;&lt;label for=&#34;&#34;&gt;&lt;a href=&#34;https://github.com/folke/which-key.nvim&#34;&gt; which-key.nvim&lt;/a&gt;&lt;/label&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/scottmckendry/cyberdream.nvim/assets/39483124/18004b97-8677-4ec1-afb8-76ea5c49a7bd&#34; alt=&#34;cyberdream-screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üì¶ Installation&lt;/h2&gt; &#xA;&lt;p&gt;Lazy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    &#34;scottmckendry/cyberdream.nvim&#34;,&#xA;    lazy = false,&#xA;    priority = 1000,&#xA;    config = function()&#xA;        require(&#34;cyberdream&#34;).setup({&#xA;            -- Recommended - see &#34;Configuring&#34; below for more config options&#xA;            transparent = true,&#xA;            italic_comments = true,&#xA;            hide_fillchars = true,&#xA;            borderless_telescope = true,&#xA;        })&#xA;        vim.cmd(&#34;colorscheme cyberdream&#34;) -- set the colorscheme&#xA;    end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Lualine (optional):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;{&#xA;    local cyberdream = require(&#34;lualine.themes.cyberdream&#34;)&#xA;    require(&#34;lualine&#34;).setup({&#xA;        -- ... other config&#xA;        options = {&#xA;            theme = &#34;cyberdream&#34;,&#xA;        },&#xA;        -- ... other config&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See my personal lualine config &lt;a href=&#34;https://github.com/scottmckendry/Windots/raw/main/nvim/lua/plugins/lualine.lua&#34;&gt;here&lt;/a&gt; for an example.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Configuring&lt;/h2&gt; &#xA;&lt;p&gt;Below is an example of all the available configuration options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;cyberdream&#34;).setup({&#xA;    -- Enable transparent background&#xA;    transparent = true, -- Default: false&#xA;&#xA;    -- Enable italics comments&#xA;    italic_comments = true, -- Default: false&#xA;&#xA;    -- Replace all fillchars with &#39; &#39; for the ultimate clean look&#xA;    hide_fillchars = true, -- Default: false&#xA;&#xA;    -- Modern borderless telescope theme&#xA;    borderless_telescope = true, -- Default: true&#xA;&#xA;    theme = { -- Default: nil&#xA;        highlights = {&#xA;            -- Highlight groups to override, adding new groups is also possible&#xA;            -- See `:help highlight-groups` for a list of highlight groups&#xA;&#xA;            -- Example:&#xA;            Comment = { fg = &#34;#696969&#34;, bg = &#34;NONE&#34;, italic = true },&#xA;&#xA;            -- Complete list can be found in `lua/cyberdream/theme.lua`&#xA;        },&#xA;&#xA;        -- Override a color entirely&#xA;        colors = {&#xA;            -- For a list of colors see `lua/cyberdream/colours.lua`&#xA;            -- Example:&#xA;            bg = &#34;#000000&#34;,&#xA;            green = &#34;#00ff00&#34;,&#xA;            magenta = &#34;#ff00ff&#34;,&#xA;        },&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. If a plugin you use is not supported, please open an issue and I&#39;ll try to add support for it. If you have any suggestions or feedback, please open an issue.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>chrisgrieser/nvim-scissors</title>
    <updated>2024-01-11T01:37:42Z</updated>
    <id>tag:github.com,2024-01-11:/chrisgrieser/nvim-scissors</id>
    <link href="https://github.com/chrisgrieser/nvim-scissors" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automagical editing and creation of snippets.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nvim-scissors ‚úÇÔ∏è&lt;/h1&gt; &#xA;&lt;!-- LTeX: enabled=true --&gt; &#xA;&lt;a href=&#34;https://dotfyle.com/plugins/chrisgrieser/nvim-scissors&#34;&gt; &lt;img alt=&#34;badge&#34; src=&#34;https://dotfyle.com/plugins/chrisgrieser/nvim-scissors/shield&#34;&gt;&lt;/a&gt; &#xA;&lt;p&gt;Automagical editing and creation of snippets.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chrisgrieser/nvim-scissors/assets/73286100/c620958a-eef6-46c2-957a-8504733e0312&#34;&gt;https://github.com/chrisgrieser/nvim-scissors/assets/73286100/c620958a-eef6-46c2-957a-8504733e0312&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/chrisgrieser/nvim-scissors/assets/73286100/de544b7e-20c3-4bec-b7aa-cbaaacca09ca&#34;&gt;https://github.com/chrisgrieser/nvim-scissors/assets/73286100/de544b7e-20c3-4bec-b7aa-cbaaacca09ca&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#rationale&#34;&gt;Rationale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#cookbook--faq&#34;&gt;Cookbook &amp;amp; FAQ&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#example-for-the-vscode-style-snippet-format&#34;&gt;Example for the VSCode-style snippet format&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#version-controlling-snippets-json-formatting&#34;&gt;Version Controlling Snippets: JSON-formatting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#friendly-snippets&#34;&gt;&lt;code&gt;friendly-snippets&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#auto-triggered-snippets&#34;&gt;Auto-triggered Snippets&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add new snippets, edit snippets, or delete snippets on the fly.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting while you edit the snippet. Includes highlighting of tokens like &lt;code&gt;$0&lt;/code&gt; or &lt;code&gt;${2:foobar}&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Automagical conversion from buffer text to JSON string (quotes are escaped, etc.)&lt;/li&gt; &#xA; &lt;li&gt;Intuitive UI for editing the snippet, dynamically adapting the number of prefixes.&lt;/li&gt; &#xA; &lt;li&gt;Auto-reloading of the new/edited snippet (if using &lt;code&gt;LuaSnip&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;JSON-formatting and sorting of the snippet file after updating, using &lt;code&gt;yq&lt;/code&gt; or &lt;code&gt;jq&lt;/code&gt;. (Optional, but &lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#version-controlling-snippets-json-formatting&#34;&gt;useful when version-controlling your snippet collection&lt;/a&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;Snippet/file selection via &lt;code&gt;telescope&lt;/code&gt; or &lt;code&gt;vim.ui.select&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Automatic bootstrapping of the snippet folder, if it is empty or missing a &lt;code&gt;package.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Supports only &lt;a href=&#34;https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets&#34;&gt;VSCode-style snippets&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can use &lt;a href=&#34;https://github.com/smjonas/snippet-converter.nvim&#34;&gt;snippet-converter.nvim&lt;/a&gt; to convert your snippets to the VSCode format.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Regrettably, there are innumerable formats in which snippets can be saved. The closest thing to a standard is the &lt;a href=&#34;https://code.visualstudio.com/docs/editor/userdefinedsnippets&#34;&gt;VSCode snippet format&lt;/a&gt;. For portability, easier sharing, and to future-proof your snippet collection, it can make sense to save your snippets in that format.&lt;/li&gt; &#xA; &lt;li&gt;Most notably, the VSCode format is used by plugins like &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;friendly-snippets&lt;/a&gt; and supported by &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#vs-code&#34;&gt;LuaSnip&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;However, the snippets are stored as JSON files, which are a pain to modify manually. This plugin aims to alleviate that pain by automagically writing the JSON for you.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The plugin &lt;strong&gt;requires&lt;/strong&gt; that your snippet are saved in the VSCode-style snippet format. If your snippet folder is empty, this plugin bootstraps a simple snippet folder for you.&lt;/p&gt; &#xA;&lt;p&gt;For the specific requirements of the VSCode-style snippets, please see &lt;a href=&#34;https://raw.githubusercontent.com/chrisgrieser/nvim-scissors/main/#example-for-the-vscode-style-snippet-format&#34;&gt;the FAQ section on the VSCode format&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- lazy.nvim&#xA;{&#xA;&#x9;&#34;chrisgrieser/nvim-scissors&#34;,&#xA;&#x9;dependencies = &#34;nvim-telescope/telescope.nvim&#34;, -- optional&#xA;&#x9;opts = {&#xA;&#x9;&#x9;snippetDir = &#34;path/to/your/snippetFolder&#34;,&#xA;&#x9;} &#xA;},&#xA;&#xA;-- packer&#xA;use {&#xA;&#x9;&#34;chrisgrieser/nvim-scissors&#34;,&#xA;&#x9;dependencies = &#34;nvim-telescope/telescope.nvim&#34;, -- optional&#xA;&#x9;config = function()&#xA;&#x9;&#x9;require(&#34;scissors&#34;).setup ({&#xA;&#x9;&#x9;&#x9;snippetDir = &#34;path/to/your/snippetFolder&#34;,&#xA;&#x9;&#x9;})&#xA;&#x9;end,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;a href=&#34;https://github.com/nvim-telescope/telescope.nvim&#34;&gt;telescope.nvim&lt;/a&gt; is installed, it is automatically used as picker. Otherwise, &lt;code&gt;nvim-scissors&lt;/code&gt; falls back to &lt;code&gt;vim.ui.select&lt;/code&gt;. (You can use &lt;a href=&#34;https://github.com/stevearc/dressing.nvim&#34;&gt;dressing.nvim&lt;/a&gt; to re-direct &lt;code&gt;vim.ui.select&lt;/code&gt; to &lt;a href=&#34;https://github.com/ibhagwan/fzf-lua&#34;&gt;fzf-lua&lt;/a&gt;, if you prefer it over telescope.)&lt;/p&gt; &#xA;&lt;p&gt;If you are not using VSCode-style snippets already, here is how you load them with &lt;code&gt;LuaSnip&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;require(&#34;luasnip.loaders.from_vscode&#34;).lazy_load { paths = { &#34;path/to/your/snippetFolder&#34; } }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The plugin provides two commands, &lt;code&gt;addNewSnippet&lt;/code&gt; and &lt;code&gt;editSnippet&lt;/code&gt;. Here is the code to create keymaps for them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;vim.keymap.set(&#34;n&#34;, &#34;&amp;lt;leader&amp;gt;se&#34;, function() require(&#34;scissors&#34;).editSnippet() end)&#xA;&#xA;-- When used in visual mode prefills the selection as body.&#xA;vim.keymap.set({ &#34;n&#34;, &#34;x&#34; }, &#34;&amp;lt;leader&amp;gt;sa&#34;, function() require(&#34;scissors&#34;).addNewSnippet() end)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The popup intelligently adapts to changes in the prefix area: Each line represents one prefix, and creating or removing lines thus changes the number of prefixes. (&#34;Prefix&#34; is how trigger words are referred to in the VSCode format.)&lt;/p&gt; &#xA;&lt;img alt=&#34;Showcase prefix change&#34; width=&#34;70%&#34; src=&#34;https://github.com/chrisgrieser/nvim-scissors/assets/73286100/d54f96c2-6751-46e9-9185-77b63eb2664a&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] This plugin is only for editing and creating snippets. It does not &lt;em&gt;expand&lt;/em&gt; snippets, which is done by snippet engines like &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip&#34;&gt;LuaSnip&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;.setup()&lt;/code&gt; call is optional.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;-- default settings&#xA;require(&#34;scissors&#34;).setup {&#xA;&#x9;snippetDir = vim.fn.stdpath(&#34;config&#34;) .. &#34;/snippets&#34;,&#xA;&#x9;editSnippetPopup = {&#xA;&#x9;&#x9;height = 0.4, -- relative to the window, number between 0 and 1&#xA;&#x9;&#x9;width = 0.6,&#xA;&#x9;&#x9;border = &#34;rounded&#34;,&#xA;&#x9;&#x9;keymaps = {&#xA;&#x9;&#x9;&#x9;cancel = &#34;q&#34;,&#xA;&#x9;&#x9;&#x9;saveChanges = &#34;&amp;lt;CR&amp;gt;&#34;, -- alternatively, can also use `:w`&#xA;&#x9;&#x9;&#x9;goBackToSearch = &#34;&amp;lt;BS&amp;gt;&#34;,&#xA;&#x9;&#x9;&#x9;delete = &#34;&amp;lt;C-BS&amp;gt;&#34;,&#xA;&#x9;&#x9;&#x9;openInFile = &#34;&amp;lt;C-o&amp;gt;&#34;,&#xA;&#x9;&#x9;&#x9;insertNextToken = &#34;&amp;lt;C-t&amp;gt;&#34;, -- insert &amp;amp; normal mode&#xA;&#x9;&#x9;&#x9;jumpBetweenBodyAndPrefix = &#34;&amp;lt;C-Tab&amp;gt;&#34;, -- insert &amp;amp; normal mode&#xA;&#x9;&#x9;},&#xA;&#x9;},&#xA;&#x9;-- `none` writes as a minified json file using `vim.encode.json`.&#xA;&#x9;-- `yq`/`jq` ensure formatted &amp;amp; sorted json files, which is relevant when&#xA;&#x9;-- you version control your snippets.&#xA;&#x9;jsonFormatter = &#34;none&#34;, -- &#34;yq&#34;|&#34;jq&#34;|&#34;none&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] &lt;code&gt;vim.fn.stdpath(&#34;config&#34;)&lt;/code&gt; returns the path to your nvim config.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Cookbook &amp;amp; FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Example for the VSCode-style snippet format&lt;/h3&gt; &#xA;&lt;p&gt;This plugin requires that you have a valid VSCode snippet folder. In addition to saving the snippets in the required JSON format, there must also be a &lt;code&gt;package.json&lt;/code&gt; at the root of the snippet folder, specifying which files are should be used for which languages.&lt;/p&gt; &#xA;&lt;p&gt;Example file structure inside the &lt;code&gt;snippetDir&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;.&#xA;‚îú‚îÄ‚îÄ package.json&#xA;‚îú‚îÄ‚îÄ python.json&#xA;‚îú‚îÄ‚îÄ project-specific&#xA;‚îÇ   ‚îî‚îÄ‚îÄ nvim-lua.json&#xA;‚îú‚îÄ‚îÄ javascript.json&#xA;‚îî‚îÄ‚îÄ allFiletypes.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;contributes&#34;: {&#xA;&#x9;&#x9;&#34;snippets&#34;: [&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;language&#34;: &#34;python&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;path&#34;: &#34;./python.json&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;language&#34;: &#34;lua&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;path&#34;: &#34;./project-specific/nvim-lua.json&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;language&#34;: [&#34;javascript&#34;, &#34;typescript&#34;],&#xA;&#x9;&#x9;&#x9;&#x9;&#34;path&#34;: &#34;./javascript.json&#34;&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#34;language&#34;: &#34;all&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#34;path&#34;: &#34;./allFiletypes.json&#34;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;]&#xA;&#x9;},&#xA;&#x9;&#34;name&#34;: &#34;my-snippets&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] The special filetype &lt;code&gt;all&lt;/code&gt; enables the snippets globally, regardless of filetype.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Example snippet file (here: &lt;code&gt;nvim-lua.json&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;autocmd (Filetype)&#34;: {&#xA;    &#34;body&#34;: [&#xA;      &#34;vim.api.nvim_create_autocmd(\&#34;FileType\&#34;, {&#34;,&#xA;      &#34;\tpattern = \&#34;${1:ft}\&#34;,&#34;,&#xA;      &#34;\tcallback = function()&#34;,&#xA;      &#34;\t\t$0&#34;,&#xA;      &#34;\tend,&#34;,&#xA;      &#34;})&#34;&#xA;    ],&#xA;    &#34;prefix&#34;: &#34;autocmd (Filetype)&#34;&#xA;  },&#xA;  &#34;file exists&#34;: {&#xA;    &#34;body&#34;: &#34;local fileExists = vim.loop.fs_stat(\&#34;${1:filepath}\&#34;) ~= nil&#34;,&#xA;    &#34;prefix&#34;: &#34;file exists&#34;&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For details, read the official VSCode snippet documentation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/docs/editor/userdefinedsnippets&#34;&gt;Snippet file specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.visualstudio.com/api/language-extensions/snippet-guide&#34;&gt;&lt;code&gt;package.json&lt;/code&gt; specification&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#vs-code&#34;&gt;LuaSnip-specific additions to the format&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Version Controlling Snippets: JSON-formatting&lt;/h3&gt; &#xA;&lt;p&gt;This plugin writes JSON files via &lt;code&gt;vim.encode.json&lt;/code&gt;. That method saves the file in minified form, and does not have a deterministic order of dictionary keys.&lt;/p&gt; &#xA;&lt;p&gt;Both, minification, and unstable key order, are of course problem if you version-control your snippet collection. To solve this problem, &lt;code&gt;nvim-scissors&lt;/code&gt; can optionally unminify and sort the JSON files via &lt;code&gt;yq&lt;/code&gt; or &lt;code&gt;jq&lt;/code&gt; after updating a snippet. (Both are also available via &lt;a href=&#34;https://github.com/williamboman/mason.nvim&#34;&gt;mason.nvim&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;It is recommended to run &lt;code&gt;yq&lt;/code&gt;/&lt;code&gt;jq&lt;/code&gt; once on all files in your snippet collection, since the first time you edit a file, you would still get a large diff from the initial sorting. You can do so with &lt;code&gt;yq&lt;/code&gt; using this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd &#34;/your/snippet/dir&#34;&#xA;fd &#34;.*\.json&#34; | xargs -I {} yq --inplace --output-format=json &#34;sort_keys(..)&#34; {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How to do the same with &lt;code&gt;jq&lt;/code&gt; is left as an exercise to the reader.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;friendly-snippets&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Even though the snippets from the &lt;a href=&#34;https://github.com/rafamadriz/friendly-snippets&#34;&gt;friendly-snippets&lt;/a&gt; repository are written in the VSCode-style format, editing them directly is not supported. The reason being that any changes made would be overwritten as soon as the &lt;code&gt;friendly-snippets&lt;/code&gt; repository is updated (which happens fairly regularly), and there is little &lt;code&gt;nvim-scissors&lt;/code&gt; can do about that.&lt;/p&gt; &#xA;&lt;p&gt;What you can do, however, is to copy individual snippets files from the &lt;code&gt;friendly-snippets&lt;/code&gt; repository into your own snippet folder, and edit them then.&lt;/p&gt; &#xA;&lt;h3&gt;Auto-triggered Snippets&lt;/h3&gt; &#xA;&lt;p&gt;While the VSCode snippet format does not support auto-triggered snippets, &lt;code&gt;LuaSnip&lt;/code&gt; allows you to &lt;a href=&#34;https://github.com/L3MON4D3/LuaSnip/raw/master/DOC.md#vs-code&#34;&gt;specify auto-triggering in the VSCode-style JSON files by adding the &lt;code&gt;luasnip&lt;/code&gt; key&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nvim-scissors&lt;/code&gt; does not touch any keys other than &lt;code&gt;prefix&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; in the JSON files, so any additions via the &lt;code&gt;luasnip&lt;/code&gt; key are preserved.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!TIP] You can use the &lt;code&gt;openInFile&lt;/code&gt; keymap to directory open JSON file at the snippet&#39;s location to make edits there easier.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;!-- vale Google.FirstPerson = NO --&gt; &#xA;&lt;p&gt;&lt;strong&gt;About Me&lt;/strong&gt;&lt;br&gt; In my day job, I am a sociologist studying the social mechanisms underlying the digital economy. For my PhD project, I investigate the governance of the app economy and how software ecosystems manage the tension between innovation and compatibility. If you are interested in this subject, feel free to get in touch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Blog&lt;/strong&gt;&lt;br&gt; I also occasionally blog about vim: &lt;a href=&#34;https://nanotipsforvim.prose.sh&#34;&gt;Nano Tips for Vim&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Profiles&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/user/pseudometapseudo&#34;&gt;reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discordapp.com/users/462774483044794368/&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chris-grieser.de/&#34;&gt;Academic Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/pseudo_meta&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pkm.social/@pseudometa&#34;&gt;Mastodon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.researchgate.net/profile/Christopher-Grieser&#34;&gt;ResearchGate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/in/christopher-grieser-ba693b17a/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ko-fi.com/Y8Y86SQ91&#34; target=&#34;_blank&#34;&gt;&lt;img height=&#34;36&#34; style=&#34;border:0px;height:36px;&#34; src=&#34;https://cdn.ko-fi.com/cdn/kofi1.png?v=3&#34; border=&#34;0&#34; alt=&#34;Buy Me a Coffee at ko-fi.com&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>